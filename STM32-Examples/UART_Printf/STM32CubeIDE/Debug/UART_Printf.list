
UART_Printf.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004980  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000190  08004b78  08004b78  00014b78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d08  08004d08  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08004d08  08004d08  00014d08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d10  08004d10  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08004d10  08004d10  00014d10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08004d18  08004d18  00014d18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08004d20  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000c8  20000080  08004da0  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08004da0  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000f24c  00000000  00000000  000200b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000f699  00000000  00000000  0002f302  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000022bd  00000000  00000000  0003e99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c60  00000000  00000000  00040c58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001008d4  00000000  00000000  000418b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000b88  00000000  00000000  00142190  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  000290cb  00000000  00000000  00142d18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016bde3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000039d0  00000000  00000000  0016be34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	e000      	b.n	800020a <__do_global_dtors_aux+0x12>
 8000208:	bf00      	nop
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	20000080 	.word	0x20000080
 8000214:	00000000 	.word	0x00000000
 8000218:	08004b60 	.word	0x08004b60

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	e000      	b.n	800022a <frame_dummy+0xe>
 8000228:	bf00      	nop
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000084 	.word	0x20000084
 8000234:	08004b60 	.word	0x08004b60

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b982 	b.w	8000554 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800026e:	4604      	mov	r4, r0
 8000270:	460f      	mov	r7, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d148      	bne.n	8000308 <__udivmoddi4+0xa0>
 8000276:	428a      	cmp	r2, r1
 8000278:	4694      	mov	ip, r2
 800027a:	d961      	bls.n	8000340 <__udivmoddi4+0xd8>
 800027c:	fab2 f382 	clz	r3, r2
 8000280:	b143      	cbz	r3, 8000294 <__udivmoddi4+0x2c>
 8000282:	f1c3 0120 	rsb	r1, r3, #32
 8000286:	409f      	lsls	r7, r3
 8000288:	fa02 fc03 	lsl.w	ip, r2, r3
 800028c:	409c      	lsls	r4, r3
 800028e:	fa20 f101 	lsr.w	r1, r0, r1
 8000292:	430f      	orrs	r7, r1
 8000294:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000298:	fa1f fe8c 	uxth.w	lr, ip
 800029c:	0c22      	lsrs	r2, r4, #16
 800029e:	fbb7 f6f1 	udiv	r6, r7, r1
 80002a2:	fb01 7716 	mls	r7, r1, r6, r7
 80002a6:	fb06 f00e 	mul.w	r0, r6, lr
 80002aa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002ae:	4290      	cmp	r0, r2
 80002b0:	d908      	bls.n	80002c4 <__udivmoddi4+0x5c>
 80002b2:	eb1c 0202 	adds.w	r2, ip, r2
 80002b6:	f106 37ff 	add.w	r7, r6, #4294967295
 80002ba:	d202      	bcs.n	80002c2 <__udivmoddi4+0x5a>
 80002bc:	4290      	cmp	r0, r2
 80002be:	f200 8137 	bhi.w	8000530 <__udivmoddi4+0x2c8>
 80002c2:	463e      	mov	r6, r7
 80002c4:	1a12      	subs	r2, r2, r0
 80002c6:	b2a4      	uxth	r4, r4
 80002c8:	fbb2 f0f1 	udiv	r0, r2, r1
 80002cc:	fb01 2210 	mls	r2, r1, r0, r2
 80002d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80002d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002d8:	45a6      	cmp	lr, r4
 80002da:	d908      	bls.n	80002ee <__udivmoddi4+0x86>
 80002dc:	eb1c 0404 	adds.w	r4, ip, r4
 80002e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80002e4:	d202      	bcs.n	80002ec <__udivmoddi4+0x84>
 80002e6:	45a6      	cmp	lr, r4
 80002e8:	f200 811c 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 80002ec:	4610      	mov	r0, r2
 80002ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002f2:	eba4 040e 	sub.w	r4, r4, lr
 80002f6:	2600      	movs	r6, #0
 80002f8:	b11d      	cbz	r5, 8000302 <__udivmoddi4+0x9a>
 80002fa:	40dc      	lsrs	r4, r3
 80002fc:	2300      	movs	r3, #0
 80002fe:	e9c5 4300 	strd	r4, r3, [r5]
 8000302:	4631      	mov	r1, r6
 8000304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000308:	428b      	cmp	r3, r1
 800030a:	d909      	bls.n	8000320 <__udivmoddi4+0xb8>
 800030c:	2d00      	cmp	r5, #0
 800030e:	f000 80fd 	beq.w	800050c <__udivmoddi4+0x2a4>
 8000312:	2600      	movs	r6, #0
 8000314:	e9c5 0100 	strd	r0, r1, [r5]
 8000318:	4630      	mov	r0, r6
 800031a:	4631      	mov	r1, r6
 800031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000320:	fab3 f683 	clz	r6, r3
 8000324:	2e00      	cmp	r6, #0
 8000326:	d14b      	bne.n	80003c0 <__udivmoddi4+0x158>
 8000328:	428b      	cmp	r3, r1
 800032a:	f0c0 80f2 	bcc.w	8000512 <__udivmoddi4+0x2aa>
 800032e:	4282      	cmp	r2, r0
 8000330:	f240 80ef 	bls.w	8000512 <__udivmoddi4+0x2aa>
 8000334:	4630      	mov	r0, r6
 8000336:	2d00      	cmp	r5, #0
 8000338:	d0e3      	beq.n	8000302 <__udivmoddi4+0x9a>
 800033a:	e9c5 4700 	strd	r4, r7, [r5]
 800033e:	e7e0      	b.n	8000302 <__udivmoddi4+0x9a>
 8000340:	b902      	cbnz	r2, 8000344 <__udivmoddi4+0xdc>
 8000342:	deff      	udf	#255	; 0xff
 8000344:	fab2 f382 	clz	r3, r2
 8000348:	2b00      	cmp	r3, #0
 800034a:	f040 809d 	bne.w	8000488 <__udivmoddi4+0x220>
 800034e:	1a89      	subs	r1, r1, r2
 8000350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8000354:	b297      	uxth	r7, r2
 8000356:	2601      	movs	r6, #1
 8000358:	0c20      	lsrs	r0, r4, #16
 800035a:	fbb1 f2fe 	udiv	r2, r1, lr
 800035e:	fb0e 1112 	mls	r1, lr, r2, r1
 8000362:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000366:	fb07 f002 	mul.w	r0, r7, r2
 800036a:	4288      	cmp	r0, r1
 800036c:	d90f      	bls.n	800038e <__udivmoddi4+0x126>
 800036e:	eb1c 0101 	adds.w	r1, ip, r1
 8000372:	f102 38ff 	add.w	r8, r2, #4294967295
 8000376:	bf2c      	ite	cs
 8000378:	f04f 0901 	movcs.w	r9, #1
 800037c:	f04f 0900 	movcc.w	r9, #0
 8000380:	4288      	cmp	r0, r1
 8000382:	d903      	bls.n	800038c <__udivmoddi4+0x124>
 8000384:	f1b9 0f00 	cmp.w	r9, #0
 8000388:	f000 80cf 	beq.w	800052a <__udivmoddi4+0x2c2>
 800038c:	4642      	mov	r2, r8
 800038e:	1a09      	subs	r1, r1, r0
 8000390:	b2a4      	uxth	r4, r4
 8000392:	fbb1 f0fe 	udiv	r0, r1, lr
 8000396:	fb0e 1110 	mls	r1, lr, r0, r1
 800039a:	fb00 f707 	mul.w	r7, r0, r7
 800039e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003a2:	42a7      	cmp	r7, r4
 80003a4:	d908      	bls.n	80003b8 <__udivmoddi4+0x150>
 80003a6:	eb1c 0404 	adds.w	r4, ip, r4
 80003aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80003ae:	d202      	bcs.n	80003b6 <__udivmoddi4+0x14e>
 80003b0:	42a7      	cmp	r7, r4
 80003b2:	f200 80b4 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b6:	4608      	mov	r0, r1
 80003b8:	1be4      	subs	r4, r4, r7
 80003ba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80003be:	e79b      	b.n	80002f8 <__udivmoddi4+0x90>
 80003c0:	f1c6 0720 	rsb	r7, r6, #32
 80003c4:	40b3      	lsls	r3, r6
 80003c6:	fa01 f406 	lsl.w	r4, r1, r6
 80003ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80003ce:	40f9      	lsrs	r1, r7
 80003d0:	40b2      	lsls	r2, r6
 80003d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003d6:	fa20 f307 	lsr.w	r3, r0, r7
 80003da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003de:	431c      	orrs	r4, r3
 80003e0:	fa1f fe8c 	uxth.w	lr, ip
 80003e4:	fa00 f306 	lsl.w	r3, r0, r6
 80003e8:	0c20      	lsrs	r0, r4, #16
 80003ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ee:	fb09 1118 	mls	r1, r9, r8, r1
 80003f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f6:	fb08 f00e 	mul.w	r0, r8, lr
 80003fa:	4288      	cmp	r0, r1
 80003fc:	d90f      	bls.n	800041e <__udivmoddi4+0x1b6>
 80003fe:	eb1c 0101 	adds.w	r1, ip, r1
 8000402:	f108 3aff 	add.w	sl, r8, #4294967295
 8000406:	bf2c      	ite	cs
 8000408:	f04f 0b01 	movcs.w	fp, #1
 800040c:	f04f 0b00 	movcc.w	fp, #0
 8000410:	4288      	cmp	r0, r1
 8000412:	d903      	bls.n	800041c <__udivmoddi4+0x1b4>
 8000414:	f1bb 0f00 	cmp.w	fp, #0
 8000418:	f000 808d 	beq.w	8000536 <__udivmoddi4+0x2ce>
 800041c:	46d0      	mov	r8, sl
 800041e:	1a09      	subs	r1, r1, r0
 8000420:	b2a4      	uxth	r4, r4
 8000422:	fbb1 f0f9 	udiv	r0, r1, r9
 8000426:	fb09 1110 	mls	r1, r9, r0, r1
 800042a:	fb00 fe0e 	mul.w	lr, r0, lr
 800042e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000432:	458e      	cmp	lr, r1
 8000434:	d907      	bls.n	8000446 <__udivmoddi4+0x1de>
 8000436:	eb1c 0101 	adds.w	r1, ip, r1
 800043a:	f100 34ff 	add.w	r4, r0, #4294967295
 800043e:	d201      	bcs.n	8000444 <__udivmoddi4+0x1dc>
 8000440:	458e      	cmp	lr, r1
 8000442:	d87f      	bhi.n	8000544 <__udivmoddi4+0x2dc>
 8000444:	4620      	mov	r0, r4
 8000446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800044a:	eba1 010e 	sub.w	r1, r1, lr
 800044e:	fba0 9802 	umull	r9, r8, r0, r2
 8000452:	4541      	cmp	r1, r8
 8000454:	464c      	mov	r4, r9
 8000456:	46c6      	mov	lr, r8
 8000458:	d302      	bcc.n	8000460 <__udivmoddi4+0x1f8>
 800045a:	d106      	bne.n	800046a <__udivmoddi4+0x202>
 800045c:	454b      	cmp	r3, r9
 800045e:	d204      	bcs.n	800046a <__udivmoddi4+0x202>
 8000460:	3801      	subs	r0, #1
 8000462:	ebb9 0402 	subs.w	r4, r9, r2
 8000466:	eb68 0e0c 	sbc.w	lr, r8, ip
 800046a:	2d00      	cmp	r5, #0
 800046c:	d070      	beq.n	8000550 <__udivmoddi4+0x2e8>
 800046e:	1b1a      	subs	r2, r3, r4
 8000470:	eb61 010e 	sbc.w	r1, r1, lr
 8000474:	fa22 f306 	lsr.w	r3, r2, r6
 8000478:	fa01 f707 	lsl.w	r7, r1, r7
 800047c:	40f1      	lsrs	r1, r6
 800047e:	2600      	movs	r6, #0
 8000480:	431f      	orrs	r7, r3
 8000482:	e9c5 7100 	strd	r7, r1, [r5]
 8000486:	e73c      	b.n	8000302 <__udivmoddi4+0x9a>
 8000488:	fa02 fc03 	lsl.w	ip, r2, r3
 800048c:	f1c3 0020 	rsb	r0, r3, #32
 8000490:	fa01 f203 	lsl.w	r2, r1, r3
 8000494:	fa21 f600 	lsr.w	r6, r1, r0
 8000498:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800049c:	fa24 f100 	lsr.w	r1, r4, r0
 80004a0:	fa1f f78c 	uxth.w	r7, ip
 80004a4:	409c      	lsls	r4, r3
 80004a6:	4311      	orrs	r1, r2
 80004a8:	fbb6 f0fe 	udiv	r0, r6, lr
 80004ac:	0c0a      	lsrs	r2, r1, #16
 80004ae:	fb0e 6610 	mls	r6, lr, r0, r6
 80004b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80004b6:	fb00 f607 	mul.w	r6, r0, r7
 80004ba:	4296      	cmp	r6, r2
 80004bc:	d90e      	bls.n	80004dc <__udivmoddi4+0x274>
 80004be:	eb1c 0202 	adds.w	r2, ip, r2
 80004c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80004c6:	bf2c      	ite	cs
 80004c8:	f04f 0901 	movcs.w	r9, #1
 80004cc:	f04f 0900 	movcc.w	r9, #0
 80004d0:	4296      	cmp	r6, r2
 80004d2:	d902      	bls.n	80004da <__udivmoddi4+0x272>
 80004d4:	f1b9 0f00 	cmp.w	r9, #0
 80004d8:	d031      	beq.n	800053e <__udivmoddi4+0x2d6>
 80004da:	4640      	mov	r0, r8
 80004dc:	1b92      	subs	r2, r2, r6
 80004de:	b289      	uxth	r1, r1
 80004e0:	fbb2 f6fe 	udiv	r6, r2, lr
 80004e4:	fb0e 2216 	mls	r2, lr, r6, r2
 80004e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80004ec:	fb06 f207 	mul.w	r2, r6, r7
 80004f0:	428a      	cmp	r2, r1
 80004f2:	d907      	bls.n	8000504 <__udivmoddi4+0x29c>
 80004f4:	eb1c 0101 	adds.w	r1, ip, r1
 80004f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80004fc:	d201      	bcs.n	8000502 <__udivmoddi4+0x29a>
 80004fe:	428a      	cmp	r2, r1
 8000500:	d823      	bhi.n	800054a <__udivmoddi4+0x2e2>
 8000502:	4646      	mov	r6, r8
 8000504:	1a89      	subs	r1, r1, r2
 8000506:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 800050a:	e725      	b.n	8000358 <__udivmoddi4+0xf0>
 800050c:	462e      	mov	r6, r5
 800050e:	4628      	mov	r0, r5
 8000510:	e6f7      	b.n	8000302 <__udivmoddi4+0x9a>
 8000512:	1a84      	subs	r4, r0, r2
 8000514:	eb61 0303 	sbc.w	r3, r1, r3
 8000518:	2001      	movs	r0, #1
 800051a:	461f      	mov	r7, r3
 800051c:	e70b      	b.n	8000336 <__udivmoddi4+0xce>
 800051e:	4464      	add	r4, ip
 8000520:	3802      	subs	r0, #2
 8000522:	e749      	b.n	80003b8 <__udivmoddi4+0x150>
 8000524:	4464      	add	r4, ip
 8000526:	3802      	subs	r0, #2
 8000528:	e6e1      	b.n	80002ee <__udivmoddi4+0x86>
 800052a:	3a02      	subs	r2, #2
 800052c:	4461      	add	r1, ip
 800052e:	e72e      	b.n	800038e <__udivmoddi4+0x126>
 8000530:	3e02      	subs	r6, #2
 8000532:	4462      	add	r2, ip
 8000534:	e6c6      	b.n	80002c4 <__udivmoddi4+0x5c>
 8000536:	f1a8 0802 	sub.w	r8, r8, #2
 800053a:	4461      	add	r1, ip
 800053c:	e76f      	b.n	800041e <__udivmoddi4+0x1b6>
 800053e:	3802      	subs	r0, #2
 8000540:	4462      	add	r2, ip
 8000542:	e7cb      	b.n	80004dc <__udivmoddi4+0x274>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	e77d      	b.n	8000446 <__udivmoddi4+0x1de>
 800054a:	3e02      	subs	r6, #2
 800054c:	4461      	add	r1, ip
 800054e:	e7d9      	b.n	8000504 <__udivmoddi4+0x29c>
 8000550:	462e      	mov	r6, r5
 8000552:	e6d6      	b.n	8000302 <__udivmoddi4+0x9a>

08000554 <__aeabi_idiv0>:
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop

08000558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8000558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800055c:	f000 faee 	bl	8000b3c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000562:	e003      	b.n	800056c <LoopCopyDataInit>

08000564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800056a:	3104      	adds	r1, #4

0800056c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800056c:	480a      	ldr	r0, [pc, #40]	; (8000598 <LoopForever+0xa>)
	ldr	r3, =_edata
 800056e:	4b0b      	ldr	r3, [pc, #44]	; (800059c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000574:	d3f6      	bcc.n	8000564 <CopyDataInit>
	ldr	r2, =_sbss
 8000576:	4a0a      	ldr	r2, [pc, #40]	; (80005a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000578:	e002      	b.n	8000580 <LoopFillZerobss>

0800057a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800057a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800057c:	f842 3b04 	str.w	r3, [r2], #4

08000580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <LoopForever+0x16>)
	cmp	r2, r3
 8000582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000584:	d3f9      	bcc.n	800057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000586:	f003 fb23 	bl	8003bd0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800058a:	f000 f80f 	bl	80005ac <main>

0800058e <LoopForever>:

LoopForever:
    b LoopForever
 800058e:	e7fe      	b.n	800058e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8000590:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8000594:	08004d20 	.word	0x08004d20
	ldr	r0, =_sdata
 8000598:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800059c:	20000080 	.word	0x20000080
	ldr	r2, =_sbss
 80005a0:	20000080 	.word	0x20000080
	ldr	r3, = _ebss
 80005a4:	20000148 	.word	0x20000148

080005a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80005a8:	e7fe      	b.n	80005a8 <ADC1_2_IRQHandler>
	...

080005ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005b0:	f000 fb82 	bl	8000cb8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Initialize LED5 */
  BSP_LED_Init(LED5);
 80005b4:	2001      	movs	r0, #1
 80005b6:	f000 fa49 	bl	8000a4c <BSP_LED_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ba:	f000 f811 	bl	80005e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005be:	f000 f8c1 	bl	8000744 <MX_GPIO_Init>
  MX_ICACHE_Init();
 80005c2:	f000 f85e 	bl	8000682 <MX_ICACHE_Init>
  MX_USART3_UART_Init();
 80005c6:	f000 f86f 	bl	80006a8 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  /* Output a message on Hyperterminal using printf function */
  printf("\n\r UART Printf Example: retarget the C library printf function to the UART\n\r");
 80005ca:	4803      	ldr	r0, [pc, #12]	; (80005d8 <main+0x2c>)
 80005cc:	f003 fb2c 	bl	8003c28 <iprintf>
  printf("** Test finished successfully. ** \n\r");
 80005d0:	4802      	ldr	r0, [pc, #8]	; (80005dc <main+0x30>)
 80005d2:	f003 fb29 	bl	8003c28 <iprintf>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005d6:	e7fe      	b.n	80005d6 <main+0x2a>
 80005d8:	08004b78 	.word	0x08004b78
 80005dc:	08004bc8 	.word	0x08004bc8

080005e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b098      	sub	sp, #96	; 0x60
 80005e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e6:	f107 0318 	add.w	r3, r7, #24
 80005ea:	2248      	movs	r2, #72	; 0x48
 80005ec:	2100      	movs	r1, #0
 80005ee:	4618      	mov	r0, r3
 80005f0:	f003 fb12 	bl	8003c18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f4:	1d3b      	adds	r3, r7, #4
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
 80005fe:	60da      	str	r2, [r3, #12]
 8000600:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8000602:	2000      	movs	r0, #0
 8000604:	f000 fe88 	bl	8001318 <HAL_PWREx_ControlVoltageScaling>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x32>
  {
    Error_Handler();
 800060e:	f000 f8c3 	bl	8000798 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000612:	2310      	movs	r3, #16
 8000614:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000616:	2301      	movs	r3, #1
 8000618:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 800061a:	2300      	movs	r3, #0
 800061c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800061e:	2360      	movs	r3, #96	; 0x60
 8000620:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000622:	2302      	movs	r3, #2
 8000624:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000626:	2301      	movs	r3, #1
 8000628:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 800062a:	2301      	movs	r3, #1
 800062c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 800062e:	2337      	movs	r3, #55	; 0x37
 8000630:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000632:	2307      	movs	r3, #7
 8000634:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000636:	2302      	movs	r3, #2
 8000638:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800063a:	2302      	movs	r3, #2
 800063c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800063e:	f107 0318 	add.w	r3, r7, #24
 8000642:	4618      	mov	r0, r3
 8000644:	f000 fef8 	bl	8001438 <HAL_RCC_OscConfig>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d001      	beq.n	8000652 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800064e:	f000 f8a3 	bl	8000798 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000652:	230f      	movs	r3, #15
 8000654:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000656:	2303      	movs	r3, #3
 8000658:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800065a:	2300      	movs	r3, #0
 800065c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800065e:	2300      	movs	r3, #0
 8000660:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000662:	2300      	movs	r3, #0
 8000664:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000666:	1d3b      	adds	r3, r7, #4
 8000668:	2105      	movs	r1, #5
 800066a:	4618      	mov	r0, r3
 800066c:	f001 fbba 	bl	8001de4 <HAL_RCC_ClockConfig>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000676:	f000 f88f 	bl	8000798 <Error_Handler>
  }
}
 800067a:	bf00      	nop
 800067c:	3760      	adds	r7, #96	; 0x60
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 8000686:	2000      	movs	r0, #0
 8000688:	f000 fe08 	bl	800129c <HAL_ICACHE_ConfigAssociativityMode>
 800068c:	4603      	mov	r3, r0
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 8000692:	f000 f881 	bl	8000798 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 8000696:	f000 fe21 	bl	80012dc <HAL_ICACHE_Enable>
 800069a:	4603      	mov	r3, r0
 800069c:	2b00      	cmp	r3, #0
 800069e:	d001      	beq.n	80006a4 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 80006a0:	f000 f87a 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 80006a4:	bf00      	nop
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ac:	4b23      	ldr	r3, [pc, #140]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006ae:	4a24      	ldr	r2, [pc, #144]	; (8000740 <MX_USART3_UART_Init+0x98>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b2:	4b22      	ldr	r3, [pc, #136]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b20      	ldr	r3, [pc, #128]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b1e      	ldr	r3, [pc, #120]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 80006c6:	4b1d      	ldr	r3, [pc, #116]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006c8:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80006cc:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006ce:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006d0:	220c      	movs	r2, #12
 80006d2:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d4:	4b19      	ldr	r3, [pc, #100]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006da:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006e0:	4b16      	ldr	r3, [pc, #88]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80006e6:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006ec:	4b13      	ldr	r3, [pc, #76]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006f2:	4812      	ldr	r0, [pc, #72]	; (800073c <MX_USART3_UART_Init+0x94>)
 80006f4:	f002 fb6c 	bl	8002dd0 <HAL_UART_Init>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 80006fe:	f000 f84b 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000702:	2100      	movs	r1, #0
 8000704:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_USART3_UART_Init+0x94>)
 8000706:	f003 f993 	bl	8003a30 <HAL_UARTEx_SetTxFifoThreshold>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 8000710:	f000 f842 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000714:	2100      	movs	r1, #0
 8000716:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_USART3_UART_Init+0x94>)
 8000718:	f003 f9c8 	bl	8003aac <HAL_UARTEx_SetRxFifoThreshold>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 8000722:	f000 f839 	bl	8000798 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_USART3_UART_Init+0x94>)
 8000728:	f003 f949 	bl	80039be <HAL_UARTEx_DisableFifoMode>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 8000732:	f000 f831 	bl	8000798 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	2000009c 	.word	0x2000009c
 8000740:	40004800 	.word	0x40004800

08000744 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	b083      	sub	sp, #12
 8000748:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800074a:	4b09      	ldr	r3, [pc, #36]	; (8000770 <MX_GPIO_Init+0x2c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	4a08      	ldr	r2, [pc, #32]	; (8000770 <MX_GPIO_Init+0x2c>)
 8000750:	f043 0302 	orr.w	r3, r3, #2
 8000754:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000756:	4b06      	ldr	r3, [pc, #24]	; (8000770 <MX_GPIO_Init+0x2c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	f003 0302 	and.w	r3, r3, #2
 800075e:	607b      	str	r3, [r7, #4]
 8000760:	687b      	ldr	r3, [r7, #4]

}
 8000762:	bf00      	nop
 8000764:	370c      	adds	r7, #12
 8000766:	46bd      	mov	sp, r7
 8000768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076c:	4770      	bx	lr
 800076e:	bf00      	nop
 8000770:	40021000 	.word	0x40021000

08000774 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 800077c:	1d39      	adds	r1, r7, #4
 800077e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000782:	2201      	movs	r2, #1
 8000784:	4803      	ldr	r0, [pc, #12]	; (8000794 <__io_putchar+0x20>)
 8000786:	f002 fb73 	bl	8002e70 <HAL_UART_Transmit>

  return ch;
 800078a:	687b      	ldr	r3, [r7, #4]
}
 800078c:	4618      	mov	r0, r3
 800078e:	3708      	adds	r7, #8
 8000790:	46bd      	mov	sp, r7
 8000792:	bd80      	pop	{r7, pc}
 8000794:	2000009c 	.word	0x2000009c

08000798 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  /* Turn LED5 on */
  BSP_LED_On(LED5);
 800079c:	2001      	movs	r0, #1
 800079e:	f000 f9ab 	bl	8000af8 <BSP_LED_On>
  while (1);
 80007a2:	e7fe      	b.n	80007a2 <Error_Handler+0xa>

080007a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007aa:	4b0f      	ldr	r3, [pc, #60]	; (80007e8 <HAL_MspInit+0x44>)
 80007ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ae:	4a0e      	ldr	r2, [pc, #56]	; (80007e8 <HAL_MspInit+0x44>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6613      	str	r3, [r2, #96]	; 0x60
 80007b6:	4b0c      	ldr	r3, [pc, #48]	; (80007e8 <HAL_MspInit+0x44>)
 80007b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	607b      	str	r3, [r7, #4]
 80007c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007c2:	4b09      	ldr	r3, [pc, #36]	; (80007e8 <HAL_MspInit+0x44>)
 80007c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007c6:	4a08      	ldr	r2, [pc, #32]	; (80007e8 <HAL_MspInit+0x44>)
 80007c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007cc:	6593      	str	r3, [r2, #88]	; 0x58
 80007ce:	4b06      	ldr	r3, [pc, #24]	; (80007e8 <HAL_MspInit+0x44>)
 80007d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007d6:	603b      	str	r3, [r7, #0]
 80007d8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80007da:	f000 fdf9 	bl	80013d0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	40021000 	.word	0x40021000

080007ec <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b0ae      	sub	sp, #184	; 0xb8
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80007f8:	2200      	movs	r2, #0
 80007fa:	601a      	str	r2, [r3, #0]
 80007fc:	605a      	str	r2, [r3, #4]
 80007fe:	609a      	str	r2, [r3, #8]
 8000800:	60da      	str	r2, [r3, #12]
 8000802:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000804:	f107 0310 	add.w	r3, r7, #16
 8000808:	2294      	movs	r2, #148	; 0x94
 800080a:	2100      	movs	r1, #0
 800080c:	4618      	mov	r0, r3
 800080e:	f003 fa03 	bl	8003c18 <memset>
  if(huart->Instance==USART3)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4a21      	ldr	r2, [pc, #132]	; (800089c <HAL_UART_MspInit+0xb0>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d13b      	bne.n	8000894 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800081c:	2304      	movs	r3, #4
 800081e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000820:	2300      	movs	r3, #0
 8000822:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000824:	f107 0310 	add.w	r3, r7, #16
 8000828:	4618      	mov	r0, r3
 800082a:	f001 fdbb 	bl	80023a4 <HAL_RCCEx_PeriphCLKConfig>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000834:	f7ff ffb0 	bl	8000798 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000838:	4b19      	ldr	r3, [pc, #100]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 800083a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083c:	4a18      	ldr	r2, [pc, #96]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 800083e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000842:	6593      	str	r3, [r2, #88]	; 0x58
 8000844:	4b16      	ldr	r3, [pc, #88]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 8000846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000848:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800084c:	60fb      	str	r3, [r7, #12]
 800084e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000850:	4b13      	ldr	r3, [pc, #76]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 8000852:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000854:	4a12      	ldr	r2, [pc, #72]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 8000856:	f043 0302 	orr.w	r3, r3, #2
 800085a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085c:	4b10      	ldr	r3, [pc, #64]	; (80008a0 <HAL_UART_MspInit+0xb4>)
 800085e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000860:	f003 0302 	and.w	r3, r3, #2
 8000864:	60bb      	str	r3, [r7, #8]
 8000866:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8000868:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800086c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000870:	2302      	movs	r3, #2
 8000872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000876:	2301      	movs	r3, #1
 8000878:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800087c:	2300      	movs	r3, #0
 800087e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000882:	2307      	movs	r3, #7
 8000884:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800088c:	4619      	mov	r1, r3
 800088e:	4805      	ldr	r0, [pc, #20]	; (80008a4 <HAL_UART_MspInit+0xb8>)
 8000890:	f000 fb6c 	bl	8000f6c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000894:	bf00      	nop
 8000896:	37b8      	adds	r7, #184	; 0xb8
 8000898:	46bd      	mov	sp, r7
 800089a:	bd80      	pop	{r7, pc}
 800089c:	40004800 	.word	0x40004800
 80008a0:	40021000 	.word	0x40021000
 80008a4:	42020400 	.word	0x42020400

080008a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008a8:	b480      	push	{r7}
 80008aa:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr

080008b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008b6:	b480      	push	{r7}
 80008b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ba:	e7fe      	b.n	80008ba <HardFault_Handler+0x4>

080008bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008bc:	b480      	push	{r7}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008c0:	e7fe      	b.n	80008c0 <MemManage_Handler+0x4>

080008c2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008c2:	b480      	push	{r7}
 80008c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <BusFault_Handler+0x4>

080008c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <UsageFault_Handler+0x4>

080008ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008d2:	bf00      	nop
 80008d4:	46bd      	mov	sp, r7
 80008d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008da:	4770      	bx	lr

080008dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008dc:	b480      	push	{r7}
 80008de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008e0:	bf00      	nop
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr

080008ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80008ee:	bf00      	nop
 80008f0:	46bd      	mov	sp, r7
 80008f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f6:	4770      	bx	lr

080008f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80008fc:	f000 fa32 	bl	8000d64 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000900:	bf00      	nop
 8000902:	bd80      	pop	{r7, pc}

08000904 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b086      	sub	sp, #24
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000910:	2300      	movs	r3, #0
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	e00a      	b.n	800092c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000916:	e000      	b.n	800091a <_read+0x16>
 8000918:	bf00      	nop
 800091a:	4601      	mov	r1, r0
 800091c:	68bb      	ldr	r3, [r7, #8]
 800091e:	1c5a      	adds	r2, r3, #1
 8000920:	60ba      	str	r2, [r7, #8]
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000926:	697b      	ldr	r3, [r7, #20]
 8000928:	3301      	adds	r3, #1
 800092a:	617b      	str	r3, [r7, #20]
 800092c:	697a      	ldr	r2, [r7, #20]
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	429a      	cmp	r2, r3
 8000932:	dbf0      	blt.n	8000916 <_read+0x12>
  }

  return len;
 8000934:	687b      	ldr	r3, [r7, #4]
}
 8000936:	4618      	mov	r0, r3
 8000938:	3718      	adds	r7, #24
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}

0800093e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800093e:	b580      	push	{r7, lr}
 8000940:	b086      	sub	sp, #24
 8000942:	af00      	add	r7, sp, #0
 8000944:	60f8      	str	r0, [r7, #12]
 8000946:	60b9      	str	r1, [r7, #8]
 8000948:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800094a:	2300      	movs	r3, #0
 800094c:	617b      	str	r3, [r7, #20]
 800094e:	e009      	b.n	8000964 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000950:	68bb      	ldr	r3, [r7, #8]
 8000952:	1c5a      	adds	r2, r3, #1
 8000954:	60ba      	str	r2, [r7, #8]
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	4618      	mov	r0, r3
 800095a:	f7ff ff0b 	bl	8000774 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800095e:	697b      	ldr	r3, [r7, #20]
 8000960:	3301      	adds	r3, #1
 8000962:	617b      	str	r3, [r7, #20]
 8000964:	697a      	ldr	r2, [r7, #20]
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	429a      	cmp	r2, r3
 800096a:	dbf1      	blt.n	8000950 <_write+0x12>
  }
  return len;
 800096c:	687b      	ldr	r3, [r7, #4]
}
 800096e:	4618      	mov	r0, r3
 8000970:	3718      	adds	r7, #24
 8000972:	46bd      	mov	sp, r7
 8000974:	bd80      	pop	{r7, pc}

08000976 <_close>:

int _close(int file)
{
 8000976:	b480      	push	{r7}
 8000978:	b083      	sub	sp, #12
 800097a:	af00      	add	r7, sp, #0
 800097c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800097e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000982:	4618      	mov	r0, r3
 8000984:	370c      	adds	r7, #12
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr

0800098e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800098e:	b480      	push	{r7}
 8000990:	b083      	sub	sp, #12
 8000992:	af00      	add	r7, sp, #0
 8000994:	6078      	str	r0, [r7, #4]
 8000996:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099e:	605a      	str	r2, [r3, #4]
  return 0;
 80009a0:	2300      	movs	r3, #0
}
 80009a2:	4618      	mov	r0, r3
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr

080009ae <_isatty>:

int _isatty(int file)
{
 80009ae:	b480      	push	{r7}
 80009b0:	b083      	sub	sp, #12
 80009b2:	af00      	add	r7, sp, #0
 80009b4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80009b6:	2301      	movs	r3, #1
}
 80009b8:	4618      	mov	r0, r3
 80009ba:	370c      	adds	r7, #12
 80009bc:	46bd      	mov	sp, r7
 80009be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c2:	4770      	bx	lr

080009c4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80009c4:	b480      	push	{r7}
 80009c6:	b085      	sub	sp, #20
 80009c8:	af00      	add	r7, sp, #0
 80009ca:	60f8      	str	r0, [r7, #12]
 80009cc:	60b9      	str	r1, [r7, #8]
 80009ce:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80009d0:	2300      	movs	r3, #0
}
 80009d2:	4618      	mov	r0, r3
 80009d4:	3714      	adds	r7, #20
 80009d6:	46bd      	mov	sp, r7
 80009d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009dc:	4770      	bx	lr
	...

080009e0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	b086      	sub	sp, #24
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80009e8:	4a14      	ldr	r2, [pc, #80]	; (8000a3c <_sbrk+0x5c>)
 80009ea:	4b15      	ldr	r3, [pc, #84]	; (8000a40 <_sbrk+0x60>)
 80009ec:	1ad3      	subs	r3, r2, r3
 80009ee:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80009f0:	697b      	ldr	r3, [r7, #20]
 80009f2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80009f4:	4b13      	ldr	r3, [pc, #76]	; (8000a44 <_sbrk+0x64>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d102      	bne.n	8000a02 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80009fc:	4b11      	ldr	r3, [pc, #68]	; (8000a44 <_sbrk+0x64>)
 80009fe:	4a12      	ldr	r2, [pc, #72]	; (8000a48 <_sbrk+0x68>)
 8000a00:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000a02:	4b10      	ldr	r3, [pc, #64]	; (8000a44 <_sbrk+0x64>)
 8000a04:	681a      	ldr	r2, [r3, #0]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	4413      	add	r3, r2
 8000a0a:	693a      	ldr	r2, [r7, #16]
 8000a0c:	429a      	cmp	r2, r3
 8000a0e:	d207      	bcs.n	8000a20 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000a10:	f003 f8d8 	bl	8003bc4 <__errno>
 8000a14:	4603      	mov	r3, r0
 8000a16:	220c      	movs	r2, #12
 8000a18:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295
 8000a1e:	e009      	b.n	8000a34 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000a20:	4b08      	ldr	r3, [pc, #32]	; (8000a44 <_sbrk+0x64>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000a26:	4b07      	ldr	r3, [pc, #28]	; (8000a44 <_sbrk+0x64>)
 8000a28:	681a      	ldr	r2, [r3, #0]
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	4413      	add	r3, r2
 8000a2e:	4a05      	ldr	r2, [pc, #20]	; (8000a44 <_sbrk+0x64>)
 8000a30:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000a32:	68fb      	ldr	r3, [r7, #12]
}
 8000a34:	4618      	mov	r0, r3
 8000a36:	3718      	adds	r7, #24
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	20030000 	.word	0x20030000
 8000a40:	00000400 	.word	0x00000400
 8000a44:	20000130 	.word	0x20000130
 8000a48:	20000148 	.word	0x20000148

08000a4c <BSP_LED_Init>:
  *     @arg  LED6 only if IO expander is used
  *     @arg  LED7 only if IO expander is used
  * @retval BSP error code
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08a      	sub	sp, #40	; 0x28
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	4603      	mov	r3, r0
 8000a54:	71fb      	strb	r3, [r7, #7]
  int32_t          status = BSP_ERROR_NONE;
 8000a56:	2300      	movs	r3, #0
 8000a58:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitTypeDef GPIO_Init;
#if (USE_BSP_IO_CLASS == 1)
  BSP_IO_Init_t    IO_Init;
#endif

  if ((Led == LED4) || (Led == LED5))
 8000a5a:	79fb      	ldrb	r3, [r7, #7]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d002      	beq.n	8000a66 <BSP_LED_Init+0x1a>
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	2b01      	cmp	r3, #1
 8000a64:	d13c      	bne.n	8000ae0 <BSP_LED_Init+0x94>
  {
    /* Enable the GPIO_LED Clock */
    if (Led == LED4)
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	2b00      	cmp	r3, #0
 8000a6a:	d10c      	bne.n	8000a86 <BSP_LED_Init+0x3a>
    {
      LED4_GPIO_CLK_ENABLE();
 8000a6c:	4b1f      	ldr	r3, [pc, #124]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a6e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a70:	4a1e      	ldr	r2, [pc, #120]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a72:	f043 0302 	orr.w	r3, r3, #2
 8000a76:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a78:	4b1c      	ldr	r3, [pc, #112]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7c:	f003 0302 	and.w	r3, r3, #2
 8000a80:	60fb      	str	r3, [r7, #12]
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	e00b      	b.n	8000a9e <BSP_LED_Init+0x52>
    }
    else /* Led = LED5 */
    {
      LED5_GPIO_CLK_ENABLE();
 8000a86:	4b19      	ldr	r3, [pc, #100]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a18      	ldr	r2, [pc, #96]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a8c:	f043 0308 	orr.w	r3, r3, #8
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b16      	ldr	r3, [pc, #88]	; (8000aec <BSP_LED_Init+0xa0>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0308 	and.w	r3, r3, #8
 8000a9a:	60bb      	str	r3, [r7, #8]
 8000a9c:	68bb      	ldr	r3, [r7, #8]
    }

    /* configure the GPIO_LED pin */
    GPIO_Init.Pin   = LED_PIN[Led];
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	4a13      	ldr	r2, [pc, #76]	; (8000af0 <BSP_LED_Init+0xa4>)
 8000aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000aa6:	613b      	str	r3, [r7, #16]
    GPIO_Init.Mode  = GPIO_MODE_OUTPUT_PP;
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	617b      	str	r3, [r7, #20]
    GPIO_Init.Pull  = GPIO_PULLUP;
 8000aac:	2301      	movs	r3, #1
 8000aae:	61bb      	str	r3, [r7, #24]
    GPIO_Init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ab0:	2303      	movs	r3, #3
 8000ab2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LED_PORT[Led], &GPIO_Init);
 8000ab4:	79fb      	ldrb	r3, [r7, #7]
 8000ab6:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <BSP_LED_Init+0xa8>)
 8000ab8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000abc:	f107 0210 	add.w	r2, r7, #16
 8000ac0:	4611      	mov	r1, r2
 8000ac2:	4618      	mov	r0, r3
 8000ac4:	f000 fa52 	bl	8000f6c <HAL_GPIO_Init>

    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 8000ac8:	79fb      	ldrb	r3, [r7, #7]
 8000aca:	4a0a      	ldr	r2, [pc, #40]	; (8000af4 <BSP_LED_Init+0xa8>)
 8000acc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000ad0:	79fb      	ldrb	r3, [r7, #7]
 8000ad2:	4a07      	ldr	r2, [pc, #28]	; (8000af0 <BSP_LED_Init+0xa4>)
 8000ad4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ad8:	2201      	movs	r2, #1
 8000ada:	4619      	mov	r1, r3
 8000adc:	f000 fbc6 	bl	800126c <HAL_GPIO_WritePin>
      status = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_SET);
    }
  }
#endif /* USE_BSP_IO_CLASS */

  return status;
 8000ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	3728      	adds	r7, #40	; 0x28
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	bf00      	nop
 8000aec:	40021000 	.word	0x40021000
 8000af0:	20000000 	.word	0x20000000
 8000af4:	20000004 	.word	0x20000004

08000af8 <BSP_LED_On>:
  *     @arg  LED6 only if IO expander is used
  *     @arg  LED7 only if IO expander is used
  * @retval BSP error code
  */
int32_t BSP_LED_On(Led_TypeDef Led)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	71fb      	strb	r3, [r7, #7]
  int32_t status = BSP_ERROR_NONE;
 8000b02:	2300      	movs	r3, #0
 8000b04:	60fb      	str	r3, [r7, #12]

  if ((Led == LED4) || (Led == LED5))
 8000b06:	79fb      	ldrb	r3, [r7, #7]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d002      	beq.n	8000b12 <BSP_LED_On+0x1a>
 8000b0c:	79fb      	ldrb	r3, [r7, #7]
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10b      	bne.n	8000b2a <BSP_LED_On+0x32>
  {
    HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 8000b12:	79fb      	ldrb	r3, [r7, #7]
 8000b14:	4a07      	ldr	r2, [pc, #28]	; (8000b34 <BSP_LED_On+0x3c>)
 8000b16:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000b1a:	79fb      	ldrb	r3, [r7, #7]
 8000b1c:	4a06      	ldr	r2, [pc, #24]	; (8000b38 <BSP_LED_On+0x40>)
 8000b1e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000b22:	2200      	movs	r2, #0
 8000b24:	4619      	mov	r1, r3
 8000b26:	f000 fba1 	bl	800126c <HAL_GPIO_WritePin>
  {
    status = BSP_IO_WritePin(0, LED_PIN[Led], IO_PIN_RESET);
  }
#endif /* USE_BSP_IO_CLASS */

  return status;
 8000b2a:	68fb      	ldr	r3, [r7, #12]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}
 8000b34:	20000004 	.word	0x20000004
 8000b38:	20000000 	.word	0x20000000

08000b3c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b087      	sub	sp, #28
 8000b64:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 8000b66:	4b4f      	ldr	r3, [pc, #316]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	f003 0308 	and.w	r3, r3, #8
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d107      	bne.n	8000b82 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 8000b72:	4b4c      	ldr	r3, [pc, #304]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000b74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000b78:	0a1b      	lsrs	r3, r3, #8
 8000b7a:	f003 030f 	and.w	r3, r3, #15
 8000b7e:	617b      	str	r3, [r7, #20]
 8000b80:	e005      	b.n	8000b8e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 8000b82:	4b48      	ldr	r3, [pc, #288]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	091b      	lsrs	r3, r3, #4
 8000b88:	f003 030f 	and.w	r3, r3, #15
 8000b8c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 8000b8e:	4a46      	ldr	r2, [pc, #280]	; (8000ca8 <SystemCoreClockUpdate+0x148>)
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b96:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8000b98:	4b42      	ldr	r3, [pc, #264]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000b9a:	689b      	ldr	r3, [r3, #8]
 8000b9c:	f003 030c 	and.w	r3, r3, #12
 8000ba0:	2b0c      	cmp	r3, #12
 8000ba2:	d866      	bhi.n	8000c72 <SystemCoreClockUpdate+0x112>
 8000ba4:	a201      	add	r2, pc, #4	; (adr r2, 8000bac <SystemCoreClockUpdate+0x4c>)
 8000ba6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000baa:	bf00      	nop
 8000bac:	08000be1 	.word	0x08000be1
 8000bb0:	08000c73 	.word	0x08000c73
 8000bb4:	08000c73 	.word	0x08000c73
 8000bb8:	08000c73 	.word	0x08000c73
 8000bbc:	08000be9 	.word	0x08000be9
 8000bc0:	08000c73 	.word	0x08000c73
 8000bc4:	08000c73 	.word	0x08000c73
 8000bc8:	08000c73 	.word	0x08000c73
 8000bcc:	08000bf1 	.word	0x08000bf1
 8000bd0:	08000c73 	.word	0x08000c73
 8000bd4:	08000c73 	.word	0x08000c73
 8000bd8:	08000c73 	.word	0x08000c73
 8000bdc:	08000bf9 	.word	0x08000bf9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 8000be0:	4a32      	ldr	r2, [pc, #200]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000be2:	697b      	ldr	r3, [r7, #20]
 8000be4:	6013      	str	r3, [r2, #0]
      break;
 8000be6:	e048      	b.n	8000c7a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8000be8:	4b30      	ldr	r3, [pc, #192]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000bea:	4a31      	ldr	r2, [pc, #196]	; (8000cb0 <SystemCoreClockUpdate+0x150>)
 8000bec:	601a      	str	r2, [r3, #0]
      break;
 8000bee:	e044      	b.n	8000c7a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8000bf0:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000bf2:	4a2f      	ldr	r2, [pc, #188]	; (8000cb0 <SystemCoreClockUpdate+0x150>)
 8000bf4:	601a      	str	r2, [r3, #0]
      break;
 8000bf6:	e040      	b.n	8000c7a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8000bf8:	4b2a      	ldr	r3, [pc, #168]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000bfa:	68db      	ldr	r3, [r3, #12]
 8000bfc:	f003 0303 	and.w	r3, r3, #3
 8000c00:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 8000c02:	4b28      	ldr	r3, [pc, #160]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000c04:	68db      	ldr	r3, [r3, #12]
 8000c06:	091b      	lsrs	r3, r3, #4
 8000c08:	f003 030f 	and.w	r3, r3, #15
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	2b02      	cmp	r3, #2
 8000c14:	d003      	beq.n	8000c1e <SystemCoreClockUpdate+0xbe>
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	2b03      	cmp	r3, #3
 8000c1a:	d006      	beq.n	8000c2a <SystemCoreClockUpdate+0xca>
 8000c1c:	e00b      	b.n	8000c36 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 8000c1e:	4a24      	ldr	r2, [pc, #144]	; (8000cb0 <SystemCoreClockUpdate+0x150>)
 8000c20:	68bb      	ldr	r3, [r7, #8]
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	613b      	str	r3, [r7, #16]
          break;
 8000c28:	e00b      	b.n	8000c42 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 8000c2a:	4a21      	ldr	r2, [pc, #132]	; (8000cb0 <SystemCoreClockUpdate+0x150>)
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c32:	613b      	str	r3, [r7, #16]
          break;
 8000c34:	e005      	b.n	8000c42 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 8000c36:	697a      	ldr	r2, [r7, #20]
 8000c38:	68bb      	ldr	r3, [r7, #8]
 8000c3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c3e:	613b      	str	r3, [r7, #16]
          break;
 8000c40:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 8000c42:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000c44:	68db      	ldr	r3, [r3, #12]
 8000c46:	0a1b      	lsrs	r3, r3, #8
 8000c48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8000c4c:	693b      	ldr	r3, [r7, #16]
 8000c4e:	fb02 f303 	mul.w	r3, r2, r3
 8000c52:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 8000c54:	4b13      	ldr	r3, [pc, #76]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000c56:	68db      	ldr	r3, [r3, #12]
 8000c58:	0e5b      	lsrs	r3, r3, #25
 8000c5a:	f003 0303 	and.w	r3, r3, #3
 8000c5e:	3301      	adds	r3, #1
 8000c60:	005b      	lsls	r3, r3, #1
 8000c62:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 8000c64:	693a      	ldr	r2, [r7, #16]
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c6c:	4a0f      	ldr	r2, [pc, #60]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000c6e:	6013      	str	r3, [r2, #0]
      break;
 8000c70:	e003      	b.n	8000c7a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 8000c72:	4a0e      	ldr	r2, [pc, #56]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	6013      	str	r3, [r2, #0]
      break;
 8000c78:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 8000c7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ca4 <SystemCoreClockUpdate+0x144>)
 8000c7c:	689b      	ldr	r3, [r3, #8]
 8000c7e:	091b      	lsrs	r3, r3, #4
 8000c80:	f003 030f 	and.w	r3, r3, #15
 8000c84:	4a0b      	ldr	r2, [pc, #44]	; (8000cb4 <SystemCoreClockUpdate+0x154>)
 8000c86:	5cd3      	ldrb	r3, [r2, r3]
 8000c88:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 8000c8a:	4b08      	ldr	r3, [pc, #32]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000c8c:	681a      	ldr	r2, [r3, #0]
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	fa22 f303 	lsr.w	r3, r2, r3
 8000c94:	4a05      	ldr	r2, [pc, #20]	; (8000cac <SystemCoreClockUpdate+0x14c>)
 8000c96:	6013      	str	r3, [r2, #0]
}
 8000c98:	bf00      	nop
 8000c9a:	371c      	adds	r7, #28
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000
 8000ca8:	08004c08 	.word	0x08004c08
 8000cac:	2000000c 	.word	0x2000000c
 8000cb0:	00f42400 	.word	0x00f42400
 8000cb4:	08004bf0 	.word	0x08004bf0

08000cb8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b082      	sub	sp, #8
 8000cbc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cbe:	2300      	movs	r3, #0
 8000cc0:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8000cc2:	2004      	movs	r0, #4
 8000cc4:	f000 f920 	bl	8000f08 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8000cc8:	f7ff ff4a 	bl	8000b60 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ccc:	2000      	movs	r0, #0
 8000cce:	f000 f80d 	bl	8000cec <HAL_InitTick>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d002      	beq.n	8000cde <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	71fb      	strb	r3, [r7, #7]
 8000cdc:	e001      	b.n	8000ce2 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cde:	f7ff fd61 	bl	80007a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000ce2:	79fb      	ldrb	r3, [r7, #7]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3708      	adds	r7, #8
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}

08000cec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000cf8:	4b17      	ldr	r3, [pc, #92]	; (8000d58 <HAL_InitTick+0x6c>)
 8000cfa:	781b      	ldrb	r3, [r3, #0]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d023      	beq.n	8000d48 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000d00:	4b16      	ldr	r3, [pc, #88]	; (8000d5c <HAL_InitTick+0x70>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b14      	ldr	r3, [pc, #80]	; (8000d58 <HAL_InitTick+0x6c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 f91b 	bl	8000f52 <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d10f      	bne.n	8000d42 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b07      	cmp	r3, #7
 8000d26:	d809      	bhi.n	8000d3c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d30:	f000 f8f5 	bl	8000f1e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d34:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <HAL_InitTick+0x74>)
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	6013      	str	r3, [r2, #0]
 8000d3a:	e007      	b.n	8000d4c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	73fb      	strb	r3, [r7, #15]
 8000d40:	e004      	b.n	8000d4c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
 8000d44:	73fb      	strb	r3, [r7, #15]
 8000d46:	e001      	b.n	8000d4c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d48:	2301      	movs	r3, #1
 8000d4a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000d4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d4e:	4618      	mov	r0, r3
 8000d50:	3710      	adds	r7, #16
 8000d52:	46bd      	mov	sp, r7
 8000d54:	bd80      	pop	{r7, pc}
 8000d56:	bf00      	nop
 8000d58:	20000014 	.word	0x20000014
 8000d5c:	2000000c 	.word	0x2000000c
 8000d60:	20000010 	.word	0x20000010

08000d64 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d68:	4b06      	ldr	r3, [pc, #24]	; (8000d84 <HAL_IncTick+0x20>)
 8000d6a:	781b      	ldrb	r3, [r3, #0]
 8000d6c:	461a      	mov	r2, r3
 8000d6e:	4b06      	ldr	r3, [pc, #24]	; (8000d88 <HAL_IncTick+0x24>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4413      	add	r3, r2
 8000d74:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <HAL_IncTick+0x24>)
 8000d76:	6013      	str	r3, [r2, #0]
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	20000014 	.word	0x20000014
 8000d88:	20000134 	.word	0x20000134

08000d8c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d90:	4b03      	ldr	r3, [pc, #12]	; (8000da0 <HAL_GetTick+0x14>)
 8000d92:	681b      	ldr	r3, [r3, #0]
}
 8000d94:	4618      	mov	r0, r3
 8000d96:	46bd      	mov	sp, r7
 8000d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9c:	4770      	bx	lr
 8000d9e:	bf00      	nop
 8000da0:	20000134 	.word	0x20000134

08000da4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b085      	sub	sp, #20
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	f003 0307 	and.w	r3, r3, #7
 8000db2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000db4:	4b0c      	ldr	r3, [pc, #48]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000db6:	68db      	ldr	r3, [r3, #12]
 8000db8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000dba:	68ba      	ldr	r2, [r7, #8]
 8000dbc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000dc8:	68bb      	ldr	r3, [r7, #8]
 8000dca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000dcc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000dd0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000dd4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dd6:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <__NVIC_SetPriorityGrouping+0x44>)
 8000dd8:	68bb      	ldr	r3, [r7, #8]
 8000dda:	60d3      	str	r3, [r2, #12]
}
 8000ddc:	bf00      	nop
 8000dde:	3714      	adds	r7, #20
 8000de0:	46bd      	mov	sp, r7
 8000de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de6:	4770      	bx	lr
 8000de8:	e000ed00 	.word	0xe000ed00

08000dec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000df0:	4b04      	ldr	r3, [pc, #16]	; (8000e04 <__NVIC_GetPriorityGrouping+0x18>)
 8000df2:	68db      	ldr	r3, [r3, #12]
 8000df4:	0a1b      	lsrs	r3, r3, #8
 8000df6:	f003 0307 	and.w	r3, r3, #7
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e02:	4770      	bx	lr
 8000e04:	e000ed00 	.word	0xe000ed00

08000e08 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	4603      	mov	r3, r0
 8000e10:	6039      	str	r1, [r7, #0]
 8000e12:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e14:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	db0a      	blt.n	8000e32 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	b2da      	uxtb	r2, r3
 8000e20:	490c      	ldr	r1, [pc, #48]	; (8000e54 <__NVIC_SetPriority+0x4c>)
 8000e22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e26:	0152      	lsls	r2, r2, #5
 8000e28:	b2d2      	uxtb	r2, r2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e30:	e00a      	b.n	8000e48 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	b2da      	uxtb	r2, r3
 8000e36:	4908      	ldr	r1, [pc, #32]	; (8000e58 <__NVIC_SetPriority+0x50>)
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	f003 030f 	and.w	r3, r3, #15
 8000e3e:	3b04      	subs	r3, #4
 8000e40:	0152      	lsls	r2, r2, #5
 8000e42:	b2d2      	uxtb	r2, r2
 8000e44:	440b      	add	r3, r1
 8000e46:	761a      	strb	r2, [r3, #24]
}
 8000e48:	bf00      	nop
 8000e4a:	370c      	adds	r7, #12
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000e100 	.word	0xe000e100
 8000e58:	e000ed00 	.word	0xe000ed00

08000e5c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b089      	sub	sp, #36	; 0x24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f003 0307 	and.w	r3, r3, #7
 8000e6e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e70:	69fb      	ldr	r3, [r7, #28]
 8000e72:	f1c3 0307 	rsb	r3, r3, #7
 8000e76:	2b03      	cmp	r3, #3
 8000e78:	bf28      	it	cs
 8000e7a:	2303      	movcs	r3, #3
 8000e7c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7e:	69fb      	ldr	r3, [r7, #28]
 8000e80:	3303      	adds	r3, #3
 8000e82:	2b06      	cmp	r3, #6
 8000e84:	d902      	bls.n	8000e8c <NVIC_EncodePriority+0x30>
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	3b04      	subs	r3, #4
 8000e8a:	e000      	b.n	8000e8e <NVIC_EncodePriority+0x32>
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e90:	f04f 32ff 	mov.w	r2, #4294967295
 8000e94:	69bb      	ldr	r3, [r7, #24]
 8000e96:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9a:	43da      	mvns	r2, r3
 8000e9c:	68bb      	ldr	r3, [r7, #8]
 8000e9e:	401a      	ands	r2, r3
 8000ea0:	697b      	ldr	r3, [r7, #20]
 8000ea2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea4:	f04f 31ff 	mov.w	r1, #4294967295
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	fa01 f303 	lsl.w	r3, r1, r3
 8000eae:	43d9      	mvns	r1, r3
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb4:	4313      	orrs	r3, r2
         );
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3724      	adds	r7, #36	; 0x24
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec0:	4770      	bx	lr
	...

08000ec4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3b01      	subs	r3, #1
 8000ed0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000ed4:	d301      	bcc.n	8000eda <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ed6:	2301      	movs	r3, #1
 8000ed8:	e00f      	b.n	8000efa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000eda:	4a0a      	ldr	r2, [pc, #40]	; (8000f04 <SysTick_Config+0x40>)
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3b01      	subs	r3, #1
 8000ee0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ee2:	2107      	movs	r1, #7
 8000ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ee8:	f7ff ff8e 	bl	8000e08 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <SysTick_Config+0x40>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000ef2:	4b04      	ldr	r3, [pc, #16]	; (8000f04 <SysTick_Config+0x40>)
 8000ef4:	2207      	movs	r2, #7
 8000ef6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	e000e010 	.word	0xe000e010

08000f08 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b082      	sub	sp, #8
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f7ff ff47 	bl	8000da4 <__NVIC_SetPriorityGrouping>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}

08000f1e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f1e:	b580      	push	{r7, lr}
 8000f20:	b086      	sub	sp, #24
 8000f22:	af00      	add	r7, sp, #0
 8000f24:	4603      	mov	r3, r0
 8000f26:	60b9      	str	r1, [r7, #8]
 8000f28:	607a      	str	r2, [r7, #4]
 8000f2a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000f2c:	f7ff ff5e 	bl	8000dec <__NVIC_GetPriorityGrouping>
 8000f30:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f32:	687a      	ldr	r2, [r7, #4]
 8000f34:	68b9      	ldr	r1, [r7, #8]
 8000f36:	6978      	ldr	r0, [r7, #20]
 8000f38:	f7ff ff90 	bl	8000e5c <NVIC_EncodePriority>
 8000f3c:	4602      	mov	r2, r0
 8000f3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f42:	4611      	mov	r1, r2
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff ff5f 	bl	8000e08 <__NVIC_SetPriority>
}
 8000f4a:	bf00      	nop
 8000f4c:	3718      	adds	r7, #24
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bd80      	pop	{r7, pc}

08000f52 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	b082      	sub	sp, #8
 8000f56:	af00      	add	r7, sp, #0
 8000f58:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000f5a:	6878      	ldr	r0, [r7, #4]
 8000f5c:	f7ff ffb2 	bl	8000ec4 <SysTick_Config>
 8000f60:	4603      	mov	r3, r0
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
	...

08000f6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b087      	sub	sp, #28
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
 8000f74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8000f76:	2300      	movs	r3, #0
 8000f78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8000f7a:	e158      	b.n	800122e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8000f7c:	683b      	ldr	r3, [r7, #0]
 8000f7e:	681a      	ldr	r2, [r3, #0]
 8000f80:	2101      	movs	r1, #1
 8000f82:	697b      	ldr	r3, [r7, #20]
 8000f84:	fa01 f303 	lsl.w	r3, r1, r3
 8000f88:	4013      	ands	r3, r2
 8000f8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	f000 814a 	beq.w	8001228 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f94:	683b      	ldr	r3, [r7, #0]
 8000f96:	685b      	ldr	r3, [r3, #4]
 8000f98:	f003 0303 	and.w	r3, r3, #3
 8000f9c:	2b01      	cmp	r3, #1
 8000f9e:	d005      	beq.n	8000fac <HAL_GPIO_Init+0x40>
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b02      	cmp	r3, #2
 8000faa:	d130      	bne.n	800100e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	697b      	ldr	r3, [r7, #20]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	693a      	ldr	r2, [r7, #16]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	091b      	lsrs	r3, r3, #4
 8000ff8:	f003 0201 	and.w	r2, r3, #1
 8000ffc:	697b      	ldr	r3, [r7, #20]
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f003 0303 	and.w	r3, r3, #3
 8001016:	2b03      	cmp	r3, #3
 8001018:	d017      	beq.n	800104a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	68db      	ldr	r3, [r3, #12]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	005b      	lsls	r3, r3, #1
 8001024:	2203      	movs	r2, #3
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	689a      	ldr	r2, [r3, #8]
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4313      	orrs	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
 800104e:	f003 0303 	and.w	r3, r3, #3
 8001052:	2b02      	cmp	r3, #2
 8001054:	d123      	bne.n	800109e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	08da      	lsrs	r2, r3, #3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	3208      	adds	r2, #8
 800105e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001062:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	f003 0307 	and.w	r3, r3, #7
 800106a:	009b      	lsls	r3, r3, #2
 800106c:	220f      	movs	r2, #15
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43db      	mvns	r3, r3
 8001074:	693a      	ldr	r2, [r7, #16]
 8001076:	4013      	ands	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	691a      	ldr	r2, [r3, #16]
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	f003 0307 	and.w	r3, r3, #7
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	fa02 f303 	lsl.w	r3, r2, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	08da      	lsrs	r2, r3, #3
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	3208      	adds	r2, #8
 8001098:	6939      	ldr	r1, [r7, #16]
 800109a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80010a4:	697b      	ldr	r3, [r7, #20]
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	2203      	movs	r2, #3
 80010aa:	fa02 f303 	lsl.w	r3, r2, r3
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f003 0203 	and.w	r2, r3, #3
 80010be:	697b      	ldr	r3, [r7, #20]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	fa02 f303 	lsl.w	r3, r2, r3
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	685b      	ldr	r3, [r3, #4]
 80010d6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	f000 80a4 	beq.w	8001228 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 80010e0:	4a5a      	ldr	r2, [pc, #360]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	089b      	lsrs	r3, r3, #2
 80010e6:	3318      	adds	r3, #24
 80010e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010ec:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 80010ee:	697b      	ldr	r3, [r7, #20]
 80010f0:	f003 0303 	and.w	r3, r3, #3
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	220f      	movs	r2, #15
 80010f8:	fa02 f303 	lsl.w	r3, r2, r3
 80010fc:	43db      	mvns	r3, r3
 80010fe:	693a      	ldr	r2, [r7, #16]
 8001100:	4013      	ands	r3, r2
 8001102:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a52      	ldr	r2, [pc, #328]	; (8001250 <HAL_GPIO_Init+0x2e4>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d025      	beq.n	8001158 <HAL_GPIO_Init+0x1ec>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a51      	ldr	r2, [pc, #324]	; (8001254 <HAL_GPIO_Init+0x2e8>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d01f      	beq.n	8001154 <HAL_GPIO_Init+0x1e8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a50      	ldr	r2, [pc, #320]	; (8001258 <HAL_GPIO_Init+0x2ec>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d019      	beq.n	8001150 <HAL_GPIO_Init+0x1e4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4f      	ldr	r2, [pc, #316]	; (800125c <HAL_GPIO_Init+0x2f0>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d013      	beq.n	800114c <HAL_GPIO_Init+0x1e0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4e      	ldr	r2, [pc, #312]	; (8001260 <HAL_GPIO_Init+0x2f4>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d00d      	beq.n	8001148 <HAL_GPIO_Init+0x1dc>
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	4a4d      	ldr	r2, [pc, #308]	; (8001264 <HAL_GPIO_Init+0x2f8>)
 8001130:	4293      	cmp	r3, r2
 8001132:	d007      	beq.n	8001144 <HAL_GPIO_Init+0x1d8>
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	4a4c      	ldr	r2, [pc, #304]	; (8001268 <HAL_GPIO_Init+0x2fc>)
 8001138:	4293      	cmp	r3, r2
 800113a:	d101      	bne.n	8001140 <HAL_GPIO_Init+0x1d4>
 800113c:	2306      	movs	r3, #6
 800113e:	e00c      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001140:	2307      	movs	r3, #7
 8001142:	e00a      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001144:	2305      	movs	r3, #5
 8001146:	e008      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001148:	2304      	movs	r3, #4
 800114a:	e006      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 800114c:	2303      	movs	r3, #3
 800114e:	e004      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001150:	2302      	movs	r3, #2
 8001152:	e002      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001154:	2301      	movs	r3, #1
 8001156:	e000      	b.n	800115a <HAL_GPIO_Init+0x1ee>
 8001158:	2300      	movs	r3, #0
 800115a:	697a      	ldr	r2, [r7, #20]
 800115c:	f002 0203 	and.w	r2, r2, #3
 8001160:	00d2      	lsls	r2, r2, #3
 8001162:	4093      	lsls	r3, r2
 8001164:	693a      	ldr	r2, [r7, #16]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 800116a:	4938      	ldr	r1, [pc, #224]	; (800124c <HAL_GPIO_Init+0x2e0>)
 800116c:	697b      	ldr	r3, [r7, #20]
 800116e:	089b      	lsrs	r3, r3, #2
 8001170:	3318      	adds	r3, #24
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001178:	4b34      	ldr	r3, [pc, #208]	; (800124c <HAL_GPIO_Init+0x2e0>)
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	43db      	mvns	r3, r3
 8001182:	693a      	ldr	r2, [r7, #16]
 8001184:	4013      	ands	r3, r2
 8001186:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001188:	683b      	ldr	r3, [r7, #0]
 800118a:	685b      	ldr	r3, [r3, #4]
 800118c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001190:	2b00      	cmp	r3, #0
 8001192:	d003      	beq.n	800119c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8001194:	693a      	ldr	r2, [r7, #16]
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	4313      	orrs	r3, r2
 800119a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800119c:	4a2b      	ldr	r2, [pc, #172]	; (800124c <HAL_GPIO_Init+0x2e0>)
 800119e:	693b      	ldr	r3, [r7, #16]
 80011a0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 80011a2:	4b2a      	ldr	r3, [pc, #168]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	43db      	mvns	r3, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4013      	ands	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	685b      	ldr	r3, [r3, #4]
 80011b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d003      	beq.n	80011c6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 80011be:	693a      	ldr	r2, [r7, #16]
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	4313      	orrs	r3, r2
 80011c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80011c6:	4a21      	ldr	r2, [pc, #132]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80011c8:	693b      	ldr	r3, [r7, #16]
 80011ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80011cc:	4b1f      	ldr	r3, [pc, #124]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80011ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80011d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	43db      	mvns	r3, r3
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	4013      	ands	r3, r2
 80011dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011de:	683b      	ldr	r3, [r7, #0]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d003      	beq.n	80011f2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	4313      	orrs	r3, r2
 80011f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80011f2:	4a16      	ldr	r2, [pc, #88]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80011f4:	693b      	ldr	r3, [r7, #16]
 80011f6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 80011fa:	4b14      	ldr	r3, [pc, #80]	; (800124c <HAL_GPIO_Init+0x2e0>)
 80011fc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001200:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	43db      	mvns	r3, r3
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4013      	ands	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001214:	2b00      	cmp	r3, #0
 8001216:	d003      	beq.n	8001220 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001220:	4a0a      	ldr	r2, [pc, #40]	; (800124c <HAL_GPIO_Init+0x2e0>)
 8001222:	693b      	ldr	r3, [r7, #16]
 8001224:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8001228:	697b      	ldr	r3, [r7, #20]
 800122a:	3301      	adds	r3, #1
 800122c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	fa22 f303 	lsr.w	r3, r2, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	f47f ae9f 	bne.w	8000f7c <HAL_GPIO_Init+0x10>
  }
}
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	371c      	adds	r7, #28
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	4002f400 	.word	0x4002f400
 8001250:	42020000 	.word	0x42020000
 8001254:	42020400 	.word	0x42020400
 8001258:	42020800 	.word	0x42020800
 800125c:	42020c00 	.word	0x42020c00
 8001260:	42021000 	.word	0x42021000
 8001264:	42021400 	.word	0x42021400
 8001268:	42021800 	.word	0x42021800

0800126c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
 8001274:	460b      	mov	r3, r1
 8001276:	807b      	strh	r3, [r7, #2]
 8001278:	4613      	mov	r3, r2
 800127a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800127c:	787b      	ldrb	r3, [r7, #1]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001282:	887a      	ldrh	r2, [r7, #2]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001288:	e002      	b.n	8001290 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800128a:	887a      	ldrh	r2, [r7, #2]
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012a4:	2300      	movs	r3, #0
 80012a6:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 80012a8:	4b0b      	ldr	r3, [pc, #44]	; (80012d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 0301 	and.w	r3, r3, #1
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d002      	beq.n	80012ba <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 80012b4:	2301      	movs	r3, #1
 80012b6:	73fb      	strb	r3, [r7, #15]
 80012b8:	e007      	b.n	80012ca <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 80012ba:	4b07      	ldr	r3, [pc, #28]	; (80012d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f023 0204 	bic.w	r2, r3, #4
 80012c2:	4905      	ldr	r1, [pc, #20]	; (80012d8 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	600b      	str	r3, [r1, #0]
  }

  return status;
 80012ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	3714      	adds	r7, #20
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr
 80012d8:	40030400 	.word	0x40030400

080012dc <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 80012e0:	4b05      	ldr	r3, [pc, #20]	; (80012f8 <HAL_ICACHE_Enable+0x1c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4a04      	ldr	r2, [pc, #16]	; (80012f8 <HAL_ICACHE_Enable+0x1c>)
 80012e6:	f043 0301 	orr.w	r3, r3, #1
 80012ea:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 80012ec:	2300      	movs	r3, #0
}
 80012ee:	4618      	mov	r0, r3
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40030400 	.word	0x40030400

080012fc <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <HAL_PWREx_GetVoltageRange+0x18>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 8001308:	4618      	mov	r0, r3
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	40007000 	.word	0x40007000

08001318 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 8001320:	4b27      	ldr	r3, [pc, #156]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001328:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 800132a:	f000 f861 	bl	80013f0 <HAL_PWREx_SMPS_GetEffectiveMode>
 800132e:	4603      	mov	r3, r0
 8001330:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001334:	d101      	bne.n	800133a <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 8001336:	2301      	movs	r3, #1
 8001338:	e03e      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 800133a:	4b21      	ldr	r3, [pc, #132]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800133c:	68db      	ldr	r3, [r3, #12]
 800133e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001342:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001346:	d101      	bne.n	800134c <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 8001348:	2301      	movs	r3, #1
 800134a:	e035      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 800134c:	68ba      	ldr	r2, [r7, #8]
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	429a      	cmp	r2, r3
 8001352:	d101      	bne.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	e02f      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001358:	4b19      	ldr	r3, [pc, #100]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001360:	4917      	ldr	r1, [pc, #92]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4313      	orrs	r3, r2
 8001366:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <HAL_PWREx_ControlVoltageScaling+0xac>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	095b      	lsrs	r3, r3, #5
 800136e:	4a16      	ldr	r2, [pc, #88]	; (80013c8 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 8001370:	fba2 2303 	umull	r2, r3, r2, r3
 8001374:	09db      	lsrs	r3, r3, #7
 8001376:	2232      	movs	r2, #50	; 0x32
 8001378:	fb02 f303 	mul.w	r3, r2, r3
 800137c:	4a13      	ldr	r2, [pc, #76]	; (80013cc <HAL_PWREx_ControlVoltageScaling+0xb4>)
 800137e:	fba2 2303 	umull	r2, r3, r2, r3
 8001382:	08db      	lsrs	r3, r3, #3
 8001384:	3301      	adds	r3, #1
 8001386:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001388:	e002      	b.n	8001390 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3b01      	subs	r3, #1
 800138e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001390:	4b0b      	ldr	r3, [pc, #44]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001392:	695b      	ldr	r3, [r3, #20]
 8001394:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001398:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800139c:	d102      	bne.n	80013a4 <HAL_PWREx_ControlVoltageScaling+0x8c>
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d1f2      	bne.n	800138a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80013a4:	4b06      	ldr	r3, [pc, #24]	; (80013c0 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80013a6:	695b      	ldr	r3, [r3, #20]
 80013a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80013b0:	d101      	bne.n	80013b6 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e000      	b.n	80013b8 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3710      	adds	r7, #16
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}
 80013c0:	40007000 	.word	0x40007000
 80013c4:	2000000c 	.word	0x2000000c
 80013c8:	0a7c5ac5 	.word	0x0a7c5ac5
 80013cc:	cccccccd 	.word	0xcccccccd

080013d0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80013d4:	4b05      	ldr	r3, [pc, #20]	; (80013ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013d6:	689b      	ldr	r3, [r3, #8]
 80013d8:	4a04      	ldr	r2, [pc, #16]	; (80013ec <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80013da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013de:	6093      	str	r3, [r2, #8]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40007000 	.word	0x40007000

080013f0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 80013f6:	4b0f      	ldr	r3, [pc, #60]	; (8001434 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 80013f8:	691b      	ldr	r3, [r3, #16]
 80013fa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001402:	2b00      	cmp	r3, #0
 8001404:	d003      	beq.n	800140e <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	607b      	str	r3, [r7, #4]
 800140c:	e00a      	b.n	8001424 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001414:	2b00      	cmp	r3, #0
 8001416:	d103      	bne.n	8001420 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8001418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	e001      	b.n	8001424 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  }

  return mode;
 8001424:	687b      	ldr	r3, [r7, #4]
}
 8001426:	4618      	mov	r0, r3
 8001428:	370c      	adds	r7, #12
 800142a:	46bd      	mov	sp, r7
 800142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001430:	4770      	bx	lr
 8001432:	bf00      	nop
 8001434:	40007000 	.word	0x40007000

08001438 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b088      	sub	sp, #32
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d102      	bne.n	800144c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	f000 bcc2 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800144c:	4b99      	ldr	r3, [pc, #612]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800144e:	689b      	ldr	r3, [r3, #8]
 8001450:	f003 030c 	and.w	r3, r3, #12
 8001454:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001456:	4b97      	ldr	r3, [pc, #604]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001458:	68db      	ldr	r3, [r3, #12]
 800145a:	f003 0303 	and.w	r3, r3, #3
 800145e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f003 0310 	and.w	r3, r3, #16
 8001468:	2b00      	cmp	r3, #0
 800146a:	f000 80e9 	beq.w	8001640 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b00      	cmp	r3, #0
 8001472:	d006      	beq.n	8001482 <HAL_RCC_OscConfig+0x4a>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	f040 8083 	bne.w	8001582 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	2b01      	cmp	r3, #1
 8001480:	d17f      	bne.n	8001582 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001482:	4b8c      	ldr	r3, [pc, #560]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d006      	beq.n	800149c <HAL_RCC_OscConfig+0x64>
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69db      	ldr	r3, [r3, #28]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d102      	bne.n	800149c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001496:	2301      	movs	r3, #1
 8001498:	f000 bc9a 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014a0:	4b84      	ldr	r3, [pc, #528]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f003 0308 	and.w	r3, r3, #8
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d004      	beq.n	80014b6 <HAL_RCC_OscConfig+0x7e>
 80014ac:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014b4:	e005      	b.n	80014c2 <HAL_RCC_OscConfig+0x8a>
 80014b6:	4b7f      	ldr	r3, [pc, #508]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d224      	bcs.n	8001510 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014ca:	4618      	mov	r0, r3
 80014cc:	f000 fe9a 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 80014d0:	4603      	mov	r3, r0
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d002      	beq.n	80014dc <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f000 bc7a 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014dc:	4b75      	ldr	r3, [pc, #468]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a74      	ldr	r2, [pc, #464]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b72      	ldr	r3, [pc, #456]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014f4:	496f      	ldr	r1, [pc, #444]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b6e      	ldr	r3, [pc, #440]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	6a1b      	ldr	r3, [r3, #32]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	496a      	ldr	r1, [pc, #424]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e026      	b.n	800155e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001510:	4b68      	ldr	r3, [pc, #416]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a67      	ldr	r2, [pc, #412]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001516:	f043 0308 	orr.w	r3, r3, #8
 800151a:	6013      	str	r3, [r2, #0]
 800151c:	4b65      	ldr	r3, [pc, #404]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001528:	4962      	ldr	r1, [pc, #392]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800152a:	4313      	orrs	r3, r2
 800152c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800152e:	4b61      	ldr	r3, [pc, #388]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001530:	685b      	ldr	r3, [r3, #4]
 8001532:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	6a1b      	ldr	r3, [r3, #32]
 800153a:	021b      	lsls	r3, r3, #8
 800153c:	495d      	ldr	r1, [pc, #372]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800153e:	4313      	orrs	r3, r2
 8001540:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8001542:	69bb      	ldr	r3, [r7, #24]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d10a      	bne.n	800155e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800154c:	4618      	mov	r0, r3
 800154e:	f000 fe59 	bl	8002204 <RCC_SetFlashLatencyFromMSIRange>
 8001552:	4603      	mov	r3, r0
 8001554:	2b00      	cmp	r3, #0
 8001556:	d002      	beq.n	800155e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	f000 bc39 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 800155e:	f000 fe15 	bl	800218c <HAL_RCC_GetHCLKFreq>
 8001562:	4603      	mov	r3, r0
 8001564:	4a54      	ldr	r2, [pc, #336]	; (80016b8 <HAL_RCC_OscConfig+0x280>)
 8001566:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001568:	4b54      	ldr	r3, [pc, #336]	; (80016bc <HAL_RCC_OscConfig+0x284>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	4618      	mov	r0, r3
 800156e:	f7ff fbbd 	bl	8000cec <HAL_InitTick>
 8001572:	4603      	mov	r3, r0
 8001574:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8001576:	7bfb      	ldrb	r3, [r7, #15]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d060      	beq.n	800163e <HAL_RCC_OscConfig+0x206>
        {
          return status;
 800157c:	7bfb      	ldrb	r3, [r7, #15]
 800157e:	f000 bc27 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	69db      	ldr	r3, [r3, #28]
 8001586:	2b00      	cmp	r3, #0
 8001588:	d039      	beq.n	80015fe <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800158a:	4b4a      	ldr	r3, [pc, #296]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	4a49      	ldr	r2, [pc, #292]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001596:	f7ff fbf9 	bl	8000d8c <HAL_GetTick>
 800159a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800159c:	e00f      	b.n	80015be <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800159e:	f7ff fbf5 	bl	8000d8c <HAL_GetTick>
 80015a2:	4602      	mov	r2, r0
 80015a4:	693b      	ldr	r3, [r7, #16]
 80015a6:	1ad3      	subs	r3, r2, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d908      	bls.n	80015be <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015ac:	4b41      	ldr	r3, [pc, #260]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f003 0302 	and.w	r3, r3, #2
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 80015b8:	2303      	movs	r3, #3
 80015ba:	f000 bc09 	b.w	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015be:	4b3d      	ldr	r3, [pc, #244]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	f003 0302 	and.w	r3, r3, #2
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0e9      	beq.n	800159e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80015ca:	4b3a      	ldr	r3, [pc, #232]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	4a39      	ldr	r2, [pc, #228]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015d0:	f043 0308 	orr.w	r3, r3, #8
 80015d4:	6013      	str	r3, [r2, #0]
 80015d6:	4b37      	ldr	r3, [pc, #220]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e2:	4934      	ldr	r1, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015e4:	4313      	orrs	r3, r2
 80015e6:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015e8:	4b32      	ldr	r3, [pc, #200]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a1b      	ldr	r3, [r3, #32]
 80015f4:	021b      	lsls	r3, r3, #8
 80015f6:	492f      	ldr	r1, [pc, #188]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80015f8:	4313      	orrs	r3, r2
 80015fa:	604b      	str	r3, [r1, #4]
 80015fc:	e020      	b.n	8001640 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80015fe:	4b2d      	ldr	r3, [pc, #180]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a2c      	ldr	r2, [pc, #176]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001604:	f023 0301 	bic.w	r3, r3, #1
 8001608:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800160a:	f7ff fbbf 	bl	8000d8c <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001610:	e00e      	b.n	8001630 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001612:	f7ff fbbb 	bl	8000d8c <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d907      	bls.n	8001630 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001620:	4b24      	ldr	r3, [pc, #144]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0302 	and.w	r3, r3, #2
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 800162c:	2303      	movs	r3, #3
 800162e:	e3cf      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001630:	4b20      	ldr	r3, [pc, #128]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f003 0302 	and.w	r3, r3, #2
 8001638:	2b00      	cmp	r3, #0
 800163a:	d1ea      	bne.n	8001612 <HAL_RCC_OscConfig+0x1da>
 800163c:	e000      	b.n	8001640 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800163e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d07e      	beq.n	800174a <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b08      	cmp	r3, #8
 8001650:	d005      	beq.n	800165e <HAL_RCC_OscConfig+0x226>
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	2b0c      	cmp	r3, #12
 8001656:	d10e      	bne.n	8001676 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b03      	cmp	r3, #3
 800165c:	d10b      	bne.n	8001676 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800165e:	4b15      	ldr	r3, [pc, #84]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001666:	2b00      	cmp	r3, #0
 8001668:	d06e      	beq.n	8001748 <HAL_RCC_OscConfig+0x310>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d16a      	bne.n	8001748 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 8001672:	2301      	movs	r3, #1
 8001674:	e3ac      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800167e:	d106      	bne.n	800168e <HAL_RCC_OscConfig+0x256>
 8001680:	4b0c      	ldr	r3, [pc, #48]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4a0b      	ldr	r2, [pc, #44]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 8001686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800168a:	6013      	str	r3, [r2, #0]
 800168c:	e024      	b.n	80016d8 <HAL_RCC_OscConfig+0x2a0>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001696:	d113      	bne.n	80016c0 <HAL_RCC_OscConfig+0x288>
 8001698:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a05      	ldr	r2, [pc, #20]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 800169e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80016a2:	6013      	str	r3, [r2, #0]
 80016a4:	4b03      	ldr	r3, [pc, #12]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a02      	ldr	r2, [pc, #8]	; (80016b4 <HAL_RCC_OscConfig+0x27c>)
 80016aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016ae:	6013      	str	r3, [r2, #0]
 80016b0:	e012      	b.n	80016d8 <HAL_RCC_OscConfig+0x2a0>
 80016b2:	bf00      	nop
 80016b4:	40021000 	.word	0x40021000
 80016b8:	2000000c 	.word	0x2000000c
 80016bc:	20000010 	.word	0x20000010
 80016c0:	4b8b      	ldr	r3, [pc, #556]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a8a      	ldr	r2, [pc, #552]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016c6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016ca:	6013      	str	r3, [r2, #0]
 80016cc:	4b88      	ldr	r3, [pc, #544]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a87      	ldr	r2, [pc, #540]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016d2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80016d6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	685b      	ldr	r3, [r3, #4]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d019      	beq.n	8001714 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e0:	f7ff fb54 	bl	8000d8c <HAL_GetTick>
 80016e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016e6:	e00e      	b.n	8001706 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e8:	f7ff fb50 	bl	8000d8c <HAL_GetTick>
 80016ec:	4602      	mov	r2, r0
 80016ee:	693b      	ldr	r3, [r7, #16]
 80016f0:	1ad3      	subs	r3, r2, r3
 80016f2:	2b64      	cmp	r3, #100	; 0x64
 80016f4:	d907      	bls.n	8001706 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80016f6:	4b7e      	ldr	r3, [pc, #504]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d101      	bne.n	8001706 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e364      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001706:	4b7a      	ldr	r3, [pc, #488]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0ea      	beq.n	80016e8 <HAL_RCC_OscConfig+0x2b0>
 8001712:	e01a      	b.n	800174a <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fb3a 	bl	8000d8c <HAL_GetTick>
 8001718:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800171a:	e00e      	b.n	800173a <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fb36 	bl	8000d8c <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	693b      	ldr	r3, [r7, #16]
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	; 0x64
 8001728:	d907      	bls.n	800173a <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800172a:	4b71      	ldr	r3, [pc, #452]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 8001736:	2303      	movs	r3, #3
 8001738:	e34a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800173a:	4b6d      	ldr	r3, [pc, #436]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001742:	2b00      	cmp	r3, #0
 8001744:	d1ea      	bne.n	800171c <HAL_RCC_OscConfig+0x2e4>
 8001746:	e000      	b.n	800174a <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001748:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0302 	and.w	r3, r3, #2
 8001752:	2b00      	cmp	r3, #0
 8001754:	d06c      	beq.n	8001830 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 8001756:	69bb      	ldr	r3, [r7, #24]
 8001758:	2b04      	cmp	r3, #4
 800175a:	d005      	beq.n	8001768 <HAL_RCC_OscConfig+0x330>
 800175c:	69bb      	ldr	r3, [r7, #24]
 800175e:	2b0c      	cmp	r3, #12
 8001760:	d119      	bne.n	8001796 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	2b02      	cmp	r3, #2
 8001766:	d116      	bne.n	8001796 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001768:	4b61      	ldr	r3, [pc, #388]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001770:	2b00      	cmp	r3, #0
 8001772:	d005      	beq.n	8001780 <HAL_RCC_OscConfig+0x348>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d101      	bne.n	8001780 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 800177c:	2301      	movs	r3, #1
 800177e:	e327      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001780:	4b5b      	ldr	r3, [pc, #364]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	691b      	ldr	r3, [r3, #16]
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	4958      	ldr	r1, [pc, #352]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001790:	4313      	orrs	r3, r2
 8001792:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001794:	e04c      	b.n	8001830 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	68db      	ldr	r3, [r3, #12]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d029      	beq.n	80017f2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800179e:	4b54      	ldr	r3, [pc, #336]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a53      	ldr	r2, [pc, #332]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017a8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff faef 	bl	8000d8c <HAL_GetTick>
 80017ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017b0:	e00e      	b.n	80017d0 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b2:	f7ff faeb 	bl	8000d8c <HAL_GetTick>
 80017b6:	4602      	mov	r2, r0
 80017b8:	693b      	ldr	r3, [r7, #16]
 80017ba:	1ad3      	subs	r3, r2, r3
 80017bc:	2b02      	cmp	r3, #2
 80017be:	d907      	bls.n	80017d0 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017c0:	4b4b      	ldr	r3, [pc, #300]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e2ff      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80017d0:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d0ea      	beq.n	80017b2 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017dc:	4b44      	ldr	r3, [pc, #272]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017de:	685b      	ldr	r3, [r3, #4]
 80017e0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	061b      	lsls	r3, r3, #24
 80017ea:	4941      	ldr	r1, [pc, #260]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017ec:	4313      	orrs	r3, r2
 80017ee:	604b      	str	r3, [r1, #4]
 80017f0:	e01e      	b.n	8001830 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a3e      	ldr	r2, [pc, #248]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80017f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80017fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff fac5 	bl	8000d8c <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001804:	e00e      	b.n	8001824 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001806:	f7ff fac1 	bl	8000d8c <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b02      	cmp	r3, #2
 8001812:	d907      	bls.n	8001824 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001814:	4b36      	ldr	r3, [pc, #216]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800181c:	2b00      	cmp	r3, #0
 800181e:	d001      	beq.n	8001824 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 8001820:	2303      	movs	r3, #3
 8001822:	e2d5      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001824:	4b32      	ldr	r3, [pc, #200]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800182c:	2b00      	cmp	r3, #0
 800182e:	d1ea      	bne.n	8001806 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f003 0308 	and.w	r3, r3, #8
 8001838:	2b00      	cmp	r3, #0
 800183a:	d062      	beq.n	8001902 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	695b      	ldr	r3, [r3, #20]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d038      	beq.n	80018b6 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	699b      	ldr	r3, [r3, #24]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d108      	bne.n	800185e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800184c:	4b28      	ldr	r3, [pc, #160]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 800184e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001852:	4a27      	ldr	r2, [pc, #156]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001854:	f023 0310 	bic.w	r3, r3, #16
 8001858:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 800185c:	e007      	b.n	800186e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 800185e:	4b24      	ldr	r3, [pc, #144]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001860:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001864:	4a22      	ldr	r2, [pc, #136]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800186e:	4b20      	ldr	r3, [pc, #128]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001870:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001874:	4a1e      	ldr	r2, [pc, #120]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001876:	f043 0301 	orr.w	r3, r3, #1
 800187a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187e:	f7ff fa85 	bl	8000d8c <HAL_GetTick>
 8001882:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001884:	e00f      	b.n	80018a6 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001886:	f7ff fa81 	bl	8000d8c <HAL_GetTick>
 800188a:	4602      	mov	r2, r0
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	2b07      	cmp	r3, #7
 8001892:	d908      	bls.n	80018a6 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 8001896:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800189a:	f003 0302 	and.w	r3, r3, #2
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d101      	bne.n	80018a6 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 80018a2:	2303      	movs	r3, #3
 80018a4:	e294      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018ac:	f003 0302 	and.w	r3, r3, #2
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d0e8      	beq.n	8001886 <HAL_RCC_OscConfig+0x44e>
 80018b4:	e025      	b.n	8001902 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018b6:	4b0e      	ldr	r3, [pc, #56]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018bc:	4a0c      	ldr	r2, [pc, #48]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018be:	f023 0301 	bic.w	r3, r3, #1
 80018c2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c6:	f7ff fa61 	bl	8000d8c <HAL_GetTick>
 80018ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018cc:	e012      	b.n	80018f4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018ce:	f7ff fa5d 	bl	8000d8c <HAL_GetTick>
 80018d2:	4602      	mov	r2, r0
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	1ad3      	subs	r3, r2, r3
 80018d8:	2b07      	cmp	r3, #7
 80018da:	d90b      	bls.n	80018f4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <HAL_RCC_OscConfig+0x4b8>)
 80018de:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d004      	beq.n	80018f4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 80018ea:	2303      	movs	r3, #3
 80018ec:	e270      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80018f4:	4ba8      	ldr	r3, [pc, #672]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80018f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018fa:	f003 0302 	and.w	r3, r3, #2
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1e5      	bne.n	80018ce <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f003 0304 	and.w	r3, r3, #4
 800190a:	2b00      	cmp	r3, #0
 800190c:	f000 812d 	beq.w	8001b6a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001910:	2300      	movs	r3, #0
 8001912:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001914:	4ba0      	ldr	r3, [pc, #640]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001916:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001918:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800191c:	2b00      	cmp	r3, #0
 800191e:	d10d      	bne.n	800193c <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001920:	4b9d      	ldr	r3, [pc, #628]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a9c      	ldr	r2, [pc, #624]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b9a      	ldr	r3, [pc, #616]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001934:	60bb      	str	r3, [r7, #8]
 8001936:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001938:	2301      	movs	r3, #1
 800193a:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800193c:	4b97      	ldr	r3, [pc, #604]	; (8001b9c <HAL_RCC_OscConfig+0x764>)
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001944:	2b00      	cmp	r3, #0
 8001946:	d11e      	bne.n	8001986 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001948:	4b94      	ldr	r3, [pc, #592]	; (8001b9c <HAL_RCC_OscConfig+0x764>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	4a93      	ldr	r2, [pc, #588]	; (8001b9c <HAL_RCC_OscConfig+0x764>)
 800194e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001952:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001954:	f7ff fa1a 	bl	8000d8c <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800195a:	e00e      	b.n	800197a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800195c:	f7ff fa16 	bl	8000d8c <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d907      	bls.n	800197a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800196a:	4b8c      	ldr	r3, [pc, #560]	; (8001b9c <HAL_RCC_OscConfig+0x764>)
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	2b00      	cmp	r3, #0
 8001974:	d101      	bne.n	800197a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8001976:	2303      	movs	r3, #3
 8001978:	e22a      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800197a:	4b88      	ldr	r3, [pc, #544]	; (8001b9c <HAL_RCC_OscConfig+0x764>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001982:	2b00      	cmp	r3, #0
 8001984:	d0ea      	beq.n	800195c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	f003 0301 	and.w	r3, r3, #1
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01f      	beq.n	80019d2 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	689b      	ldr	r3, [r3, #8]
 8001996:	f003 0304 	and.w	r3, r3, #4
 800199a:	2b00      	cmp	r3, #0
 800199c:	d010      	beq.n	80019c0 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 800199e:	4b7e      	ldr	r3, [pc, #504]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019a4:	4a7c      	ldr	r2, [pc, #496]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019a6:	f043 0304 	orr.w	r3, r3, #4
 80019aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019ae:	4b7a      	ldr	r3, [pc, #488]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019b4:	4a78      	ldr	r2, [pc, #480]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019b6:	f043 0301 	orr.w	r3, r3, #1
 80019ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019be:	e018      	b.n	80019f2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019c0:	4b75      	ldr	r3, [pc, #468]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019c6:	4a74      	ldr	r2, [pc, #464]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019c8:	f043 0301 	orr.w	r3, r3, #1
 80019cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80019d0:	e00f      	b.n	80019f2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80019d2:	4b71      	ldr	r3, [pc, #452]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019d8:	4a6f      	ldr	r2, [pc, #444]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019da:	f023 0301 	bic.w	r3, r3, #1
 80019de:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80019e2:	4b6d      	ldr	r3, [pc, #436]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80019e8:	4a6b      	ldr	r2, [pc, #428]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 80019ea:	f023 0304 	bic.w	r3, r3, #4
 80019ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	689b      	ldr	r3, [r3, #8]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d068      	beq.n	8001acc <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019fa:	f7ff f9c7 	bl	8000d8c <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a00:	e011      	b.n	8001a26 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a02:	f7ff f9c3 	bl	8000d8c <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a10:	4293      	cmp	r3, r2
 8001a12:	d908      	bls.n	8001a26 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a14:	4b60      	ldr	r3, [pc, #384]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d101      	bne.n	8001a26 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e1d4      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001a26:	4b5c      	ldr	r3, [pc, #368]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a2c:	f003 0302 	and.w	r3, r3, #2
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0e6      	beq.n	8001a02 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d022      	beq.n	8001a86 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a46:	4a54      	ldr	r2, [pc, #336]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001a4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a50:	e011      	b.n	8001a76 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a52:	f7ff f99b 	bl	8000d8c <HAL_GetTick>
 8001a56:	4602      	mov	r2, r0
 8001a58:	693b      	ldr	r3, [r7, #16]
 8001a5a:	1ad3      	subs	r3, r2, r3
 8001a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d908      	bls.n	8001a76 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a64:	4b4c      	ldr	r3, [pc, #304]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a6a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d101      	bne.n	8001a76 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8001a72:	2303      	movs	r3, #3
 8001a74:	e1ac      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8001a76:	4b48      	ldr	r3, [pc, #288]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d0e6      	beq.n	8001a52 <HAL_RCC_OscConfig+0x61a>
 8001a84:	e068      	b.n	8001b58 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001a86:	4b44      	ldr	r3, [pc, #272]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8c:	4a42      	ldr	r2, [pc, #264]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001a8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001a92:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001a96:	e011      	b.n	8001abc <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a98:	f7ff f978 	bl	8000d8c <HAL_GetTick>
 8001a9c:	4602      	mov	r2, r0
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	f241 3288 	movw	r2, #5000	; 0x1388
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d908      	bls.n	8001abc <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001aaa:	4b3b      	ldr	r3, [pc, #236]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001aac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ab0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d001      	beq.n	8001abc <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e189      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001abc:	4b36      	ldr	r3, [pc, #216]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001abe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ac2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d1e6      	bne.n	8001a98 <HAL_RCC_OscConfig+0x660>
 8001aca:	e045      	b.n	8001b58 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff f95e 	bl	8000d8c <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ad2:	e011      	b.n	8001af8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff f95a 	bl	8000d8c <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d908      	bls.n	8001af8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ae6:	4b2c      	ldr	r3, [pc, #176]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001ae8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aec:	f003 0302 	and.w	r3, r3, #2
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d001      	beq.n	8001af8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8001af4:	2303      	movs	r3, #3
 8001af6:	e16b      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af8:	4b27      	ldr	r3, [pc, #156]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001afe:	f003 0302 	and.w	r3, r3, #2
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d1e6      	bne.n	8001ad4 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d021      	beq.n	8001b58 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8001b14:	4b20      	ldr	r3, [pc, #128]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1a:	4a1f      	ldr	r2, [pc, #124]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001b20:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b24:	e011      	b.n	8001b4a <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b26:	f7ff f931 	bl	8000d8c <HAL_GetTick>
 8001b2a:	4602      	mov	r2, r0
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	1ad3      	subs	r3, r2, r3
 8001b30:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d908      	bls.n	8001b4a <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b38:	4b17      	ldr	r3, [pc, #92]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d001      	beq.n	8001b4a <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8001b46:	2303      	movs	r3, #3
 8001b48:	e142      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b50:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d1e6      	bne.n	8001b26 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b58:	7ffb      	ldrb	r3, [r7, #31]
 8001b5a:	2b01      	cmp	r3, #1
 8001b5c:	d105      	bne.n	8001b6a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b5e:	4b0e      	ldr	r3, [pc, #56]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b62:	4a0d      	ldr	r2, [pc, #52]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b64:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b68:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0320 	and.w	r3, r3, #32
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d04f      	beq.n	8001c16 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d028      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b7e:	4b06      	ldr	r3, [pc, #24]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b80:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b84:	4a04      	ldr	r2, [pc, #16]	; (8001b98 <HAL_RCC_OscConfig+0x760>)
 8001b86:	f043 0301 	orr.w	r3, r3, #1
 8001b8a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b8e:	f7ff f8fd 	bl	8000d8c <HAL_GetTick>
 8001b92:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b94:	e014      	b.n	8001bc0 <HAL_RCC_OscConfig+0x788>
 8001b96:	bf00      	nop
 8001b98:	40021000 	.word	0x40021000
 8001b9c:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ba0:	f7ff f8f4 	bl	8000d8c <HAL_GetTick>
 8001ba4:	4602      	mov	r2, r0
 8001ba6:	693b      	ldr	r3, [r7, #16]
 8001ba8:	1ad3      	subs	r3, r2, r3
 8001baa:	2b02      	cmp	r3, #2
 8001bac:	d908      	bls.n	8001bc0 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bae:	4b8a      	ldr	r3, [pc, #552]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001bb0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb4:	f003 0302 	and.w	r3, r3, #2
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d101      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8001bbc:	2303      	movs	r3, #3
 8001bbe:	e107      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bc0:	4b85      	ldr	r3, [pc, #532]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001bc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bc6:	f003 0302 	and.w	r3, r3, #2
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d0e8      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x768>
 8001bce:	e022      	b.n	8001c16 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bd0:	4b81      	ldr	r3, [pc, #516]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001bd2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bd6:	4a80      	ldr	r2, [pc, #512]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001bd8:	f023 0301 	bic.w	r3, r3, #1
 8001bdc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001be0:	f7ff f8d4 	bl	8000d8c <HAL_GetTick>
 8001be4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001be6:	e00f      	b.n	8001c08 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be8:	f7ff f8d0 	bl	8000d8c <HAL_GetTick>
 8001bec:	4602      	mov	r2, r0
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	1ad3      	subs	r3, r2, r3
 8001bf2:	2b02      	cmp	r3, #2
 8001bf4:	d908      	bls.n	8001c08 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bf6:	4b78      	ldr	r3, [pc, #480]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001bf8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bfc:	f003 0302 	and.w	r3, r3, #2
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8001c04:	2303      	movs	r3, #3
 8001c06:	e0e3      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c08:	4b73      	ldr	r3, [pc, #460]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c0e:	f003 0302 	and.w	r3, r3, #2
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d1e8      	bne.n	8001be8 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 80d7 	beq.w	8001dce <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c20:	4b6d      	ldr	r3, [pc, #436]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c22:	689b      	ldr	r3, [r3, #8]
 8001c24:	f003 030c 	and.w	r3, r3, #12
 8001c28:	2b0c      	cmp	r3, #12
 8001c2a:	f000 8091 	beq.w	8001d50 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d166      	bne.n	8001d04 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c36:	4b68      	ldr	r3, [pc, #416]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a67      	ldr	r2, [pc, #412]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c3c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c42:	f7ff f8a3 	bl	8000d8c <HAL_GetTick>
 8001c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c48:	e00e      	b.n	8001c68 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c4a:	f7ff f89f 	bl	8000d8c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b02      	cmp	r3, #2
 8001c56:	d907      	bls.n	8001c68 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c58:	4b5f      	ldr	r3, [pc, #380]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d001      	beq.n	8001c68 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	e0b3      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	4b5b      	ldr	r3, [pc, #364]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d1ea      	bne.n	8001c4a <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c74:	4b58      	ldr	r3, [pc, #352]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001c76:	68da      	ldr	r2, [r3, #12]
 8001c78:	4b58      	ldr	r3, [pc, #352]	; (8001ddc <HAL_RCC_OscConfig+0x9a4>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	687a      	ldr	r2, [r7, #4]
 8001c7e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c84:	3a01      	subs	r2, #1
 8001c86:	0112      	lsls	r2, r2, #4
 8001c88:	4311      	orrs	r1, r2
 8001c8a:	687a      	ldr	r2, [r7, #4]
 8001c8c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c8e:	0212      	lsls	r2, r2, #8
 8001c90:	4311      	orrs	r1, r2
 8001c92:	687a      	ldr	r2, [r7, #4]
 8001c94:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c96:	0852      	lsrs	r2, r2, #1
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0552      	lsls	r2, r2, #21
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8001ca2:	0852      	lsrs	r2, r2, #1
 8001ca4:	3a01      	subs	r2, #1
 8001ca6:	0652      	lsls	r2, r2, #25
 8001ca8:	4311      	orrs	r1, r2
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001cae:	06d2      	lsls	r2, r2, #27
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4949      	ldr	r1, [pc, #292]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001cb8:	4b47      	ldr	r3, [pc, #284]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a46      	ldr	r2, [pc, #280]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cc2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cc4:	4b44      	ldr	r3, [pc, #272]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cc6:	68db      	ldr	r3, [r3, #12]
 8001cc8:	4a43      	ldr	r2, [pc, #268]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cd0:	f7ff f85c 	bl	8000d8c <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cd6:	e00e      	b.n	8001cf6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd8:	f7ff f858 	bl	8000d8c <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d907      	bls.n	8001cf6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ce6:	4b3c      	ldr	r3, [pc, #240]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d101      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8001cf2:	2303      	movs	r3, #3
 8001cf4:	e06c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cf6:	4b38      	ldr	r3, [pc, #224]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d0ea      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x8a0>
 8001d02:	e064      	b.n	8001dce <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d04:	4b34      	ldr	r3, [pc, #208]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4a33      	ldr	r2, [pc, #204]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d10:	f7ff f83c 	bl	8000d8c <HAL_GetTick>
 8001d14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d16:	e00e      	b.n	8001d36 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d18:	f7ff f838 	bl	8000d8c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	693b      	ldr	r3, [r7, #16]
 8001d20:	1ad3      	subs	r3, r2, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d907      	bls.n	8001d36 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d26:	4b2c      	ldr	r3, [pc, #176]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d001      	beq.n	8001d36 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e04c      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d36:	4b28      	ldr	r3, [pc, #160]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1ea      	bne.n	8001d18 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001d42:	4b25      	ldr	r3, [pc, #148]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d44:	68da      	ldr	r2, [r3, #12]
 8001d46:	4924      	ldr	r1, [pc, #144]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d48:	4b25      	ldr	r3, [pc, #148]	; (8001de0 <HAL_RCC_OscConfig+0x9a8>)
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60cb      	str	r3, [r1, #12]
 8001d4e:	e03e      	b.n	8001dce <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b01      	cmp	r3, #1
 8001d56:	d101      	bne.n	8001d5c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8001d58:	2301      	movs	r3, #1
 8001d5a:	e039      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001d5c:	4b1e      	ldr	r3, [pc, #120]	; (8001dd8 <HAL_RCC_OscConfig+0x9a0>)
 8001d5e:	68db      	ldr	r3, [r3, #12]
 8001d60:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d62:	697b      	ldr	r3, [r7, #20]
 8001d64:	f003 0203 	and.w	r2, r3, #3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d12c      	bne.n	8001dca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d70:	697b      	ldr	r3, [r7, #20]
 8001d72:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d7e:	429a      	cmp	r2, r3
 8001d80:	d123      	bne.n	8001dca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d8c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d11b      	bne.n	8001dca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001d92:	697b      	ldr	r3, [r7, #20]
 8001d94:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d9c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d113      	bne.n	8001dca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dac:	085b      	lsrs	r3, r3, #1
 8001dae:	3b01      	subs	r3, #1
 8001db0:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d109      	bne.n	8001dca <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dc0:	085b      	lsrs	r3, r3, #1
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d001      	beq.n	8001dce <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e000      	b.n	8001dd0 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	3720      	adds	r7, #32
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	bd80      	pop	{r7, pc}
 8001dd8:	40021000 	.word	0x40021000
 8001ddc:	019f800c 	.word	0x019f800c
 8001de0:	feeefffc 	.word	0xfeeefffc

08001de4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001de4:	b580      	push	{r7, lr}
 8001de6:	b086      	sub	sp, #24
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001dee:	2300      	movs	r3, #0
 8001df0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e11c      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001dfc:	4b90      	ldr	r3, [pc, #576]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f003 030f 	and.w	r3, r3, #15
 8001e04:	683a      	ldr	r2, [r7, #0]
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d910      	bls.n	8001e2c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e0a:	4b8d      	ldr	r3, [pc, #564]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f023 020f 	bic.w	r2, r3, #15
 8001e12:	498b      	ldr	r1, [pc, #556]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e1a:	4b89      	ldr	r3, [pc, #548]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 030f 	and.w	r3, r3, #15
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	429a      	cmp	r2, r3
 8001e26:	d001      	beq.n	8001e2c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e104      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	f003 0302 	and.w	r3, r3, #2
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d010      	beq.n	8001e5a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	689a      	ldr	r2, [r3, #8]
 8001e3c:	4b81      	ldr	r3, [pc, #516]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e3e:	689b      	ldr	r3, [r3, #8]
 8001e40:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d908      	bls.n	8001e5a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e48:	4b7e      	ldr	r3, [pc, #504]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e4a:	689b      	ldr	r3, [r3, #8]
 8001e4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	497b      	ldr	r1, [pc, #492]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e56:	4313      	orrs	r3, r2
 8001e58:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0301 	and.w	r3, r3, #1
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 8085 	beq.w	8001f72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	685b      	ldr	r3, [r3, #4]
 8001e6c:	2b03      	cmp	r3, #3
 8001e6e:	d11f      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e70:	4b74      	ldr	r3, [pc, #464]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d101      	bne.n	8001e80 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	e0da      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8001e80:	f000 fa24 	bl	80022cc <RCC_GetSysClockFreqFromPLLSource>
 8001e84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8001e86:	693b      	ldr	r3, [r7, #16]
 8001e88:	4a6f      	ldr	r2, [pc, #444]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d947      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001e8e:	4b6d      	ldr	r3, [pc, #436]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e90:	689b      	ldr	r3, [r3, #8]
 8001e92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d141      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001e9a:	4b6a      	ldr	r3, [pc, #424]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001e9c:	689b      	ldr	r3, [r3, #8]
 8001e9e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001ea2:	4a68      	ldr	r2, [pc, #416]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001ea4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001ea8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001eaa:	2380      	movs	r3, #128	; 0x80
 8001eac:	617b      	str	r3, [r7, #20]
 8001eae:	e036      	b.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d107      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001eb8:	4b62      	ldr	r3, [pc, #392]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d115      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b6      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	685b      	ldr	r3, [r3, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d107      	bne.n	8001ee0 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ed0:	4b5c      	ldr	r3, [pc, #368]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0302 	and.w	r3, r3, #2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d109      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	e0aa      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ee0:	4b58      	ldr	r3, [pc, #352]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d101      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8001eec:	2301      	movs	r3, #1
 8001eee:	e0a2      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8001ef0:	f000 f8b0 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8001ef4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8001ef6:	693b      	ldr	r3, [r7, #16]
 8001ef8:	4a53      	ldr	r2, [pc, #332]	; (8002048 <HAL_RCC_ClockConfig+0x264>)
 8001efa:	4293      	cmp	r3, r2
 8001efc:	d90f      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001efe:	4b51      	ldr	r3, [pc, #324]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d109      	bne.n	8001f1e <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f0a:	4b4e      	ldr	r3, [pc, #312]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f12:	4a4c      	ldr	r2, [pc, #304]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f18:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f1a:	2380      	movs	r3, #128	; 0x80
 8001f1c:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f1e:	4b49      	ldr	r3, [pc, #292]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f023 0203 	bic.w	r2, r3, #3
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	4946      	ldr	r1, [pc, #280]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f2c:	4313      	orrs	r3, r2
 8001f2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f30:	f7fe ff2c 	bl	8000d8c <HAL_GetTick>
 8001f34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f36:	e013      	b.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f38:	f7fe ff28 	bl	8000d8c <HAL_GetTick>
 8001f3c:	4602      	mov	r2, r0
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	1ad3      	subs	r3, r2, r3
 8001f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f46:	4293      	cmp	r3, r2
 8001f48:	d90a      	bls.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4a:	4b3e      	ldr	r3, [pc, #248]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	f003 020c 	and.w	r2, r3, #12
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	009b      	lsls	r3, r3, #2
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d001      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	e06a      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f60:	4b38      	ldr	r3, [pc, #224]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f003 020c 	and.w	r2, r3, #12
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	685b      	ldr	r3, [r3, #4]
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d1e2      	bne.n	8001f38 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	2b80      	cmp	r3, #128	; 0x80
 8001f76:	d105      	bne.n	8001f84 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001f78:	4b32      	ldr	r3, [pc, #200]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f7a:	689b      	ldr	r3, [r3, #8]
 8001f7c:	4a31      	ldr	r2, [pc, #196]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001f82:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f003 0302 	and.w	r3, r3, #2
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d010      	beq.n	8001fb2 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689a      	ldr	r2, [r3, #8]
 8001f94:	4b2b      	ldr	r3, [pc, #172]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d208      	bcs.n	8001fb2 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fa0:	4b28      	ldr	r3, [pc, #160]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001fa2:	689b      	ldr	r3, [r3, #8]
 8001fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	4925      	ldr	r1, [pc, #148]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001fb2:	4b23      	ldr	r3, [pc, #140]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 030f 	and.w	r3, r3, #15
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d210      	bcs.n	8001fe2 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fc0:	4b1f      	ldr	r3, [pc, #124]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f023 020f 	bic.w	r2, r3, #15
 8001fc8:	491d      	ldr	r1, [pc, #116]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001fca:	683b      	ldr	r3, [r7, #0]
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_ClockConfig+0x25c>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8001fde:	2301      	movs	r3, #1
 8001fe0:	e029      	b.n	8002036 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0304 	and.w	r3, r3, #4
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d008      	beq.n	8002000 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fee:	4b15      	ldr	r3, [pc, #84]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	68db      	ldr	r3, [r3, #12]
 8001ffa:	4912      	ldr	r1, [pc, #72]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0308 	and.w	r3, r3, #8
 8002008:	2b00      	cmp	r3, #0
 800200a:	d009      	beq.n	8002020 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200c:	4b0d      	ldr	r3, [pc, #52]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 800200e:	689b      	ldr	r3, [r3, #8]
 8002010:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	691b      	ldr	r3, [r3, #16]
 8002018:	00db      	lsls	r3, r3, #3
 800201a:	490a      	ldr	r1, [pc, #40]	; (8002044 <HAL_RCC_ClockConfig+0x260>)
 800201c:	4313      	orrs	r3, r2
 800201e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8002020:	f000 f8b4 	bl	800218c <HAL_RCC_GetHCLKFreq>
 8002024:	4603      	mov	r3, r0
 8002026:	4a09      	ldr	r2, [pc, #36]	; (800204c <HAL_RCC_ClockConfig+0x268>)
 8002028:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800202a:	4b09      	ldr	r3, [pc, #36]	; (8002050 <HAL_RCC_ClockConfig+0x26c>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4618      	mov	r0, r3
 8002030:	f7fe fe5c 	bl	8000cec <HAL_InitTick>
 8002034:	4603      	mov	r3, r0
}
 8002036:	4618      	mov	r0, r3
 8002038:	3718      	adds	r7, #24
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	40022000 	.word	0x40022000
 8002044:	40021000 	.word	0x40021000
 8002048:	04c4b400 	.word	0x04c4b400
 800204c:	2000000c 	.word	0x2000000c
 8002050:	20000010 	.word	0x20000010

08002054 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002054:	b480      	push	{r7}
 8002056:	b089      	sub	sp, #36	; 0x24
 8002058:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800205a:	2300      	movs	r3, #0
 800205c:	61fb      	str	r3, [r7, #28]
 800205e:	2300      	movs	r3, #0
 8002060:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	f003 030c 	and.w	r3, r3, #12
 800206a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800206c:	4b44      	ldr	r3, [pc, #272]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 800206e:	68db      	ldr	r3, [r3, #12]
 8002070:	f003 0303 	and.w	r3, r3, #3
 8002074:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d005      	beq.n	8002088 <HAL_RCC_GetSysClockFreq+0x34>
 800207c:	693b      	ldr	r3, [r7, #16]
 800207e:	2b0c      	cmp	r3, #12
 8002080:	d121      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2b01      	cmp	r3, #1
 8002086:	d11e      	bne.n	80020c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002088:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f003 0308 	and.w	r3, r3, #8
 8002090:	2b00      	cmp	r3, #0
 8002092:	d107      	bne.n	80020a4 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002094:	4b3a      	ldr	r3, [pc, #232]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002096:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800209a:	0a1b      	lsrs	r3, r3, #8
 800209c:	f003 030f 	and.w	r3, r3, #15
 80020a0:	61fb      	str	r3, [r7, #28]
 80020a2:	e005      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020a4:	4b36      	ldr	r3, [pc, #216]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	091b      	lsrs	r3, r3, #4
 80020aa:	f003 030f 	and.w	r3, r3, #15
 80020ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 80020b0:	4a34      	ldr	r2, [pc, #208]	; (8002184 <HAL_RCC_GetSysClockFreq+0x130>)
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b8:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020ba:	693b      	ldr	r3, [r7, #16]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d10d      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020c0:	69fb      	ldr	r3, [r7, #28]
 80020c2:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80020c4:	e00a      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	2b04      	cmp	r3, #4
 80020ca:	d102      	bne.n	80020d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020cc:	4b2e      	ldr	r3, [pc, #184]	; (8002188 <HAL_RCC_GetSysClockFreq+0x134>)
 80020ce:	61bb      	str	r3, [r7, #24]
 80020d0:	e004      	b.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80020d2:	693b      	ldr	r3, [r7, #16]
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020d8:	4b2b      	ldr	r3, [pc, #172]	; (8002188 <HAL_RCC_GetSysClockFreq+0x134>)
 80020da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	2b0c      	cmp	r3, #12
 80020e0:	d146      	bne.n	8002170 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020e4:	68db      	ldr	r3, [r3, #12]
 80020e6:	f003 0303 	and.w	r3, r3, #3
 80020ea:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020ec:	4b24      	ldr	r3, [pc, #144]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 80020ee:	68db      	ldr	r3, [r3, #12]
 80020f0:	091b      	lsrs	r3, r3, #4
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	3301      	adds	r3, #1
 80020f8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80020fa:	68bb      	ldr	r3, [r7, #8]
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d003      	beq.n	8002108 <HAL_RCC_GetSysClockFreq+0xb4>
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	2b03      	cmp	r3, #3
 8002104:	d00d      	beq.n	8002122 <HAL_RCC_GetSysClockFreq+0xce>
 8002106:	e019      	b.n	800213c <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002108:	4a1f      	ldr	r2, [pc, #124]	; (8002188 <HAL_RCC_GetSysClockFreq+0x134>)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002110:	4a1b      	ldr	r2, [pc, #108]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002112:	68d2      	ldr	r2, [r2, #12]
 8002114:	0a12      	lsrs	r2, r2, #8
 8002116:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800211a:	fb02 f303 	mul.w	r3, r2, r3
 800211e:	617b      	str	r3, [r7, #20]
        break;
 8002120:	e019      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002122:	4a19      	ldr	r2, [pc, #100]	; (8002188 <HAL_RCC_GetSysClockFreq+0x134>)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	4a15      	ldr	r2, [pc, #84]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 800212c:	68d2      	ldr	r2, [r2, #12]
 800212e:	0a12      	lsrs	r2, r2, #8
 8002130:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002134:	fb02 f303 	mul.w	r3, r2, r3
 8002138:	617b      	str	r3, [r7, #20]
        break;
 800213a:	e00c      	b.n	8002156 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800213c:	69fa      	ldr	r2, [r7, #28]
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	4a0e      	ldr	r2, [pc, #56]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002146:	68d2      	ldr	r2, [r2, #12]
 8002148:	0a12      	lsrs	r2, r2, #8
 800214a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800214e:	fb02 f303 	mul.w	r3, r2, r3
 8002152:	617b      	str	r3, [r7, #20]
        break;
 8002154:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_RCC_GetSysClockFreq+0x12c>)
 8002158:	68db      	ldr	r3, [r3, #12]
 800215a:	0e5b      	lsrs	r3, r3, #25
 800215c:	f003 0303 	and.w	r3, r3, #3
 8002160:	3301      	adds	r3, #1
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002166:	697a      	ldr	r2, [r7, #20]
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	fbb2 f3f3 	udiv	r3, r2, r3
 800216e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002170:	69bb      	ldr	r3, [r7, #24]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	; 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
 800217e:	bf00      	nop
 8002180:	40021000 	.word	0x40021000
 8002184:	08004c08 	.word	0x08004c08
 8002188:	00f42400 	.word	0x00f42400

0800218c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8002190:	f7ff ff60 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8002194:	4602      	mov	r2, r0
 8002196:	4b05      	ldr	r3, [pc, #20]	; (80021ac <HAL_RCC_GetHCLKFreq+0x20>)
 8002198:	689b      	ldr	r3, [r3, #8]
 800219a:	091b      	lsrs	r3, r3, #4
 800219c:	f003 030f 	and.w	r3, r3, #15
 80021a0:	4903      	ldr	r1, [pc, #12]	; (80021b0 <HAL_RCC_GetHCLKFreq+0x24>)
 80021a2:	5ccb      	ldrb	r3, [r1, r3]
 80021a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	40021000 	.word	0x40021000
 80021b0:	08004bf0 	.word	0x08004bf0

080021b4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80021b8:	f7ff ffe8 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021bc:	4602      	mov	r2, r0
 80021be:	4b05      	ldr	r3, [pc, #20]	; (80021d4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80021c0:	689b      	ldr	r3, [r3, #8]
 80021c2:	0a1b      	lsrs	r3, r3, #8
 80021c4:	f003 0307 	and.w	r3, r3, #7
 80021c8:	4903      	ldr	r1, [pc, #12]	; (80021d8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021ca:	5ccb      	ldrb	r3, [r1, r3]
 80021cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021d0:	4618      	mov	r0, r3
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	40021000 	.word	0x40021000
 80021d8:	08004c00 	.word	0x08004c00

080021dc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80021e0:	f7ff ffd4 	bl	800218c <HAL_RCC_GetHCLKFreq>
 80021e4:	4602      	mov	r2, r0
 80021e6:	4b05      	ldr	r3, [pc, #20]	; (80021fc <HAL_RCC_GetPCLK2Freq+0x20>)
 80021e8:	689b      	ldr	r3, [r3, #8]
 80021ea:	0adb      	lsrs	r3, r3, #11
 80021ec:	f003 0307 	and.w	r3, r3, #7
 80021f0:	4903      	ldr	r1, [pc, #12]	; (8002200 <HAL_RCC_GetPCLK2Freq+0x24>)
 80021f2:	5ccb      	ldrb	r3, [r1, r3]
 80021f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021f8:	4618      	mov	r0, r3
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	40021000 	.word	0x40021000
 8002200:	08004c00 	.word	0x08004c00

08002204 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b086      	sub	sp, #24
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800220c:	2300      	movs	r3, #0
 800220e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002210:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002212:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002214:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002218:	2b00      	cmp	r3, #0
 800221a:	d003      	beq.n	8002224 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800221c:	f7ff f86e 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8002220:	6138      	str	r0, [r7, #16]
 8002222:	e014      	b.n	800224e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002224:	4b27      	ldr	r3, [pc, #156]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002228:	4a26      	ldr	r2, [pc, #152]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 800222a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800222e:	6593      	str	r3, [r2, #88]	; 0x58
 8002230:	4b24      	ldr	r3, [pc, #144]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002232:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800223c:	f7ff f85e 	bl	80012fc <HAL_PWREx_GetVoltageRange>
 8002240:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002242:	4b20      	ldr	r3, [pc, #128]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002246:	4a1f      	ldr	r2, [pc, #124]	; (80022c4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8002248:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800224c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 800224e:	693b      	ldr	r3, [r7, #16]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d003      	beq.n	800225c <RCC_SetFlashLatencyFromMSIRange+0x58>
 8002254:	693b      	ldr	r3, [r7, #16]
 8002256:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800225a:	d10b      	bne.n	8002274 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2b80      	cmp	r3, #128	; 0x80
 8002260:	d919      	bls.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	2ba0      	cmp	r3, #160	; 0xa0
 8002266:	d902      	bls.n	800226e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002268:	2302      	movs	r3, #2
 800226a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 800226c:	e013      	b.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800226e:	2301      	movs	r3, #1
 8002270:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8002272:	e010      	b.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b80      	cmp	r3, #128	; 0x80
 8002278:	d902      	bls.n	8002280 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800227a:	2303      	movs	r3, #3
 800227c:	617b      	str	r3, [r7, #20]
 800227e:	e00a      	b.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2b80      	cmp	r3, #128	; 0x80
 8002284:	d102      	bne.n	800228c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002286:	2302      	movs	r3, #2
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	e004      	b.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2b70      	cmp	r3, #112	; 0x70
 8002290:	d101      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002292:	2301      	movs	r3, #1
 8002294:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002296:	4b0c      	ldr	r3, [pc, #48]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f023 020f 	bic.w	r2, r3, #15
 800229e:	490a      	ldr	r1, [pc, #40]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4313      	orrs	r3, r2
 80022a4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 80022a6:	4b08      	ldr	r3, [pc, #32]	; (80022c8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f003 030f 	and.w	r3, r3, #15
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	429a      	cmp	r2, r3
 80022b2:	d001      	beq.n	80022b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 80022b4:	2301      	movs	r3, #1
 80022b6:	e000      	b.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3718      	adds	r7, #24
 80022be:	46bd      	mov	sp, r7
 80022c0:	bd80      	pop	{r7, pc}
 80022c2:	bf00      	nop
 80022c4:	40021000 	.word	0x40021000
 80022c8:	40022000 	.word	0x40022000

080022cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b087      	sub	sp, #28
 80022d0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022d2:	4b31      	ldr	r3, [pc, #196]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80022d4:	68db      	ldr	r3, [r3, #12]
 80022d6:	f003 0303 	and.w	r3, r3, #3
 80022da:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80022dc:	4b2e      	ldr	r3, [pc, #184]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80022de:	68db      	ldr	r3, [r3, #12]
 80022e0:	091b      	lsrs	r3, r3, #4
 80022e2:	f003 030f 	and.w	r3, r3, #15
 80022e6:	3301      	adds	r3, #1
 80022e8:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	2b03      	cmp	r3, #3
 80022ee:	d015      	beq.n	800231c <RCC_GetSysClockFreqFromPLLSource+0x50>
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	2b03      	cmp	r3, #3
 80022f4:	d839      	bhi.n	800236a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d01c      	beq.n	8002336 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d133      	bne.n	800236a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002302:	4a26      	ldr	r2, [pc, #152]	; (800239c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	fbb2 f3f3 	udiv	r3, r2, r3
 800230a:	4a23      	ldr	r2, [pc, #140]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800230c:	68d2      	ldr	r2, [r2, #12]
 800230e:	0a12      	lsrs	r2, r2, #8
 8002310:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8002314:	fb02 f303 	mul.w	r3, r2, r3
 8002318:	613b      	str	r3, [r7, #16]
      break;
 800231a:	e029      	b.n	8002370 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800231c:	4a1f      	ldr	r2, [pc, #124]	; (800239c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 800231e:	68bb      	ldr	r3, [r7, #8]
 8002320:	fbb2 f3f3 	udiv	r3, r2, r3
 8002324:	4a1c      	ldr	r2, [pc, #112]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002326:	68d2      	ldr	r2, [r2, #12]
 8002328:	0a12      	lsrs	r2, r2, #8
 800232a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800232e:	fb02 f303 	mul.w	r3, r2, r3
 8002332:	613b      	str	r3, [r7, #16]
      break;
 8002334:	e01c      	b.n	8002370 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002336:	4b18      	ldr	r3, [pc, #96]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0308 	and.w	r3, r3, #8
 800233e:	2b00      	cmp	r3, #0
 8002340:	d107      	bne.n	8002352 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002342:	4b15      	ldr	r3, [pc, #84]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002344:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002348:	0a1b      	lsrs	r3, r3, #8
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	617b      	str	r3, [r7, #20]
 8002350:	e005      	b.n	800235e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002352:	4b11      	ldr	r3, [pc, #68]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	091b      	lsrs	r3, r3, #4
 8002358:	f003 030f 	and.w	r3, r3, #15
 800235c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 800235e:	4a10      	ldr	r2, [pc, #64]	; (80023a0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 8002360:	697b      	ldr	r3, [r7, #20]
 8002362:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002366:	613b      	str	r3, [r7, #16]
        break;
 8002368:	e002      	b.n	8002370 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 800236a:	2300      	movs	r3, #0
 800236c:	613b      	str	r3, [r7, #16]
      break;
 800236e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8002370:	4b09      	ldr	r3, [pc, #36]	; (8002398 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	0e5b      	lsrs	r3, r3, #25
 8002376:	f003 0303 	and.w	r3, r3, #3
 800237a:	3301      	adds	r3, #1
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002380:	693a      	ldr	r2, [r7, #16]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	fbb2 f3f3 	udiv	r3, r2, r3
 8002388:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 800238a:	683b      	ldr	r3, [r7, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	371c      	adds	r7, #28
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr
 8002398:	40021000 	.word	0x40021000
 800239c:	00f42400 	.word	0x00f42400
 80023a0:	08004c08 	.word	0x08004c08

080023a4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023ac:	2300      	movs	r3, #0
 80023ae:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023b0:	2300      	movs	r3, #0
 80023b2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d040      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80023c4:	2b80      	cmp	r3, #128	; 0x80
 80023c6:	d02a      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023c8:	2b80      	cmp	r3, #128	; 0x80
 80023ca:	d825      	bhi.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023cc:	2b60      	cmp	r3, #96	; 0x60
 80023ce:	d026      	beq.n	800241e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023d0:	2b60      	cmp	r3, #96	; 0x60
 80023d2:	d821      	bhi.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023d4:	2b40      	cmp	r3, #64	; 0x40
 80023d6:	d006      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80023d8:	2b40      	cmp	r3, #64	; 0x40
 80023da:	d81d      	bhi.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_RCCEx_PeriphCLKConfig+0x50>
 80023e0:	2b20      	cmp	r3, #32
 80023e2:	d010      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x62>
 80023e4:	e018      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80023e6:	4b8f      	ldr	r3, [pc, #572]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023e8:	68db      	ldr	r3, [r3, #12]
 80023ea:	4a8e      	ldr	r2, [pc, #568]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80023ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023f0:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80023f2:	e015      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	3304      	adds	r3, #4
 80023f8:	2100      	movs	r1, #0
 80023fa:	4618      	mov	r0, r3
 80023fc:	f000 fb56 	bl	8002aac <RCCEx_PLLSAI1_Config>
 8002400:	4603      	mov	r3, r0
 8002402:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002404:	e00c      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	3320      	adds	r3, #32
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f000 fc33 	bl	8002c78 <RCCEx_PLLSAI2_Config>
 8002412:	4603      	mov	r3, r0
 8002414:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8002416:	e003      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	77fb      	strb	r3, [r7, #31]
        break;
 800241c:	e000      	b.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 800241e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002420:	7ffb      	ldrb	r3, [r7, #31]
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10b      	bne.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002426:	4b7f      	ldr	r3, [pc, #508]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800242c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002434:	497b      	ldr	r1, [pc, #492]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002436:	4313      	orrs	r3, r2
 8002438:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 800243c:	e001      	b.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800243e:	7ffb      	ldrb	r3, [r7, #31]
 8002440:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800244a:	2b00      	cmp	r3, #0
 800244c:	d047      	beq.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002452:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002456:	d030      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002458:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800245c:	d82a      	bhi.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800245e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002462:	d02a      	beq.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002464:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002468:	d824      	bhi.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800246a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800246e:	d008      	beq.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002470:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002474:	d81e      	bhi.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002476:	2b00      	cmp	r3, #0
 8002478:	d00a      	beq.n	8002490 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800247a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800247e:	d010      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002480:	e018      	b.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002482:	4b68      	ldr	r3, [pc, #416]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	4a67      	ldr	r2, [pc, #412]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800248c:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 800248e:	e015      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	3304      	adds	r3, #4
 8002494:	2100      	movs	r1, #0
 8002496:	4618      	mov	r0, r3
 8002498:	f000 fb08 	bl	8002aac <RCCEx_PLLSAI1_Config>
 800249c:	4603      	mov	r3, r0
 800249e:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024a0:	e00c      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	3320      	adds	r3, #32
 80024a6:	2100      	movs	r1, #0
 80024a8:	4618      	mov	r0, r3
 80024aa:	f000 fbe5 	bl	8002c78 <RCCEx_PLLSAI2_Config>
 80024ae:	4603      	mov	r3, r0
 80024b0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80024b2:	e003      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
        break;
 80024b8:	e000      	b.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80024ba:	bf00      	nop
    }

    if (ret == HAL_OK)
 80024bc:	7ffb      	ldrb	r3, [r7, #31]
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d10b      	bne.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024c2:	4b58      	ldr	r3, [pc, #352]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024c4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80024c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024d0:	4954      	ldr	r1, [pc, #336]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80024d8:	e001      	b.n	80024de <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024da:	7ffb      	ldrb	r3, [r7, #31]
 80024dc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	f000 80ab 	beq.w	8002642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024ec:	2300      	movs	r3, #0
 80024ee:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024f0:	4b4c      	ldr	r3, [pc, #304]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d10d      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024fc:	4b49      	ldr	r3, [pc, #292]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80024fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002500:	4a48      	ldr	r2, [pc, #288]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002502:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002506:	6593      	str	r3, [r2, #88]	; 0x58
 8002508:	4b46      	ldr	r3, [pc, #280]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800250a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800250c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002510:	60fb      	str	r3, [r7, #12]
 8002512:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002514:	2301      	movs	r3, #1
 8002516:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002518:	4b43      	ldr	r3, [pc, #268]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	4a42      	ldr	r2, [pc, #264]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800251e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002522:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002524:	f7fe fc32 	bl	8000d8c <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800252a:	e00f      	b.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800252c:	f7fe fc2e 	bl	8000d8c <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b02      	cmp	r3, #2
 8002538:	d908      	bls.n	800254c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800253a:	4b3b      	ldr	r3, [pc, #236]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002542:	2b00      	cmp	r3, #0
 8002544:	d109      	bne.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8002546:	2303      	movs	r3, #3
 8002548:	77fb      	strb	r3, [r7, #31]
        }
        break;
 800254a:	e006      	b.n	800255a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800254c:	4b36      	ldr	r3, [pc, #216]	; (8002628 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002554:	2b00      	cmp	r3, #0
 8002556:	d0e9      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8002558:	e000      	b.n	800255c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 800255a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 800255c:	7ffb      	ldrb	r3, [r7, #31]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d164      	bne.n	800262c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002562:	4b30      	ldr	r3, [pc, #192]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002568:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800256c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800256e:	69bb      	ldr	r3, [r7, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d01f      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800257a:	69ba      	ldr	r2, [r7, #24]
 800257c:	429a      	cmp	r2, r3
 800257e:	d019      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002580:	4b28      	ldr	r3, [pc, #160]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002582:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002586:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800258a:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800258c:	4b25      	ldr	r3, [pc, #148]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800258e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002592:	4a24      	ldr	r2, [pc, #144]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002594:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800259c:	4b21      	ldr	r3, [pc, #132]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	4a20      	ldr	r2, [pc, #128]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80025a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025ac:	4a1d      	ldr	r2, [pc, #116]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d01f      	beq.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025be:	f7fe fbe5 	bl	8000d8c <HAL_GetTick>
 80025c2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025c4:	e012      	b.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025c6:	f7fe fbe1 	bl	8000d8c <HAL_GetTick>
 80025ca:	4602      	mov	r2, r0
 80025cc:	693b      	ldr	r3, [r7, #16]
 80025ce:	1ad3      	subs	r3, r2, r3
 80025d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d909      	bls.n	80025ec <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025d8:	4b12      	ldr	r3, [pc, #72]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025de:	f003 0302 	and.w	r3, r3, #2
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d10a      	bne.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	77fb      	strb	r3, [r7, #31]
            }
            break;
 80025ea:	e007      	b.n	80025fc <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025ec:	4b0d      	ldr	r3, [pc, #52]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80025ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d0e5      	beq.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 80025fa:	e000      	b.n	80025fe <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80025fc:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80025fe:	7ffb      	ldrb	r3, [r7, #31]
 8002600:	2b00      	cmp	r3, #0
 8002602:	d10c      	bne.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800260a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002614:	4903      	ldr	r1, [pc, #12]	; (8002624 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8002616:	4313      	orrs	r3, r2
 8002618:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800261c:	e008      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800261e:	7ffb      	ldrb	r3, [r7, #31]
 8002620:	77bb      	strb	r3, [r7, #30]
 8002622:	e005      	b.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8002624:	40021000 	.word	0x40021000
 8002628:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800262c:	7ffb      	ldrb	r3, [r7, #31]
 800262e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002630:	7dfb      	ldrb	r3, [r7, #23]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d105      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002636:	4b9c      	ldr	r3, [pc, #624]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800263a:	4a9b      	ldr	r2, [pc, #620]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800263c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002640:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0301 	and.w	r3, r3, #1
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00a      	beq.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800264e:	4b96      	ldr	r3, [pc, #600]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	f023 0203 	bic.w	r2, r3, #3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800265c:	4992      	ldr	r1, [pc, #584]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800265e:	4313      	orrs	r3, r2
 8002660:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f003 0302 	and.w	r3, r3, #2
 800266c:	2b00      	cmp	r3, #0
 800266e:	d00a      	beq.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002670:	4b8d      	ldr	r3, [pc, #564]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002672:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002676:	f023 020c 	bic.w	r2, r3, #12
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267e:	498a      	ldr	r1, [pc, #552]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002680:	4313      	orrs	r3, r2
 8002682:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f003 0304 	and.w	r3, r3, #4
 800268e:	2b00      	cmp	r3, #0
 8002690:	d00a      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002692:	4b85      	ldr	r3, [pc, #532]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002694:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002698:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a0:	4981      	ldr	r1, [pc, #516]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026a2:	4313      	orrs	r3, r2
 80026a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f003 0308 	and.w	r3, r3, #8
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d00a      	beq.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026b4:	4b7c      	ldr	r3, [pc, #496]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ba:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	4979      	ldr	r1, [pc, #484]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0310 	and.w	r3, r3, #16
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d00a      	beq.n	80026ec <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026d6:	4b74      	ldr	r3, [pc, #464]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026dc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026e4:	4970      	ldr	r1, [pc, #448]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026e6:	4313      	orrs	r3, r2
 80026e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f003 0320 	and.w	r3, r3, #32
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d00a      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80026f8:	4b6b      	ldr	r3, [pc, #428]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80026fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fe:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002706:	4968      	ldr	r1, [pc, #416]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002716:	2b00      	cmp	r3, #0
 8002718:	d00a      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800271a:	4b63      	ldr	r3, [pc, #396]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800271c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002720:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002728:	495f      	ldr	r1, [pc, #380]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800272a:	4313      	orrs	r3, r2
 800272c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002738:	2b00      	cmp	r3, #0
 800273a:	d00a      	beq.n	8002752 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800273c:	4b5a      	ldr	r3, [pc, #360]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800273e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002742:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800274a:	4957      	ldr	r1, [pc, #348]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800274c:	4313      	orrs	r3, r2
 800274e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d00a      	beq.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 800275e:	4b52      	ldr	r3, [pc, #328]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002764:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800276c:	494e      	ldr	r1, [pc, #312]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800276e:	4313      	orrs	r3, r2
 8002770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d031      	beq.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002784:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002788:	d00e      	beq.n	80027a8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 800278a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800278e:	d814      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x416>
 8002790:	2b00      	cmp	r3, #0
 8002792:	d015      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8002794:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002798:	d10f      	bne.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800279a:	4b43      	ldr	r3, [pc, #268]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	4a42      	ldr	r2, [pc, #264]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027a0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027a4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80027a6:	e00c      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	3304      	adds	r3, #4
 80027ac:	2100      	movs	r1, #0
 80027ae:	4618      	mov	r0, r3
 80027b0:	f000 f97c 	bl	8002aac <RCCEx_PLLSAI1_Config>
 80027b4:	4603      	mov	r3, r0
 80027b6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80027b8:	e003      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	77fb      	strb	r3, [r7, #31]
        break;
 80027be:	e000      	b.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80027c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c2:	7ffb      	ldrb	r3, [r7, #31]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10b      	bne.n	80027e0 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80027c8:	4b37      	ldr	r3, [pc, #220]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027ce:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80027d6:	4934      	ldr	r1, [pc, #208]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80027de:	e001      	b.n	80027e4 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e0:	7ffb      	ldrb	r3, [r7, #31]
 80027e2:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00a      	beq.n	8002806 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027f0:	4b2d      	ldr	r3, [pc, #180]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80027f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027fe:	492a      	ldr	r1, [pc, #168]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002800:	4313      	orrs	r3, r2
 8002802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800280e:	2b00      	cmp	r3, #0
 8002810:	d00a      	beq.n	8002828 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002812:	4b25      	ldr	r3, [pc, #148]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002818:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	4921      	ldr	r1, [pc, #132]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002822:	4313      	orrs	r3, r2
 8002824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002830:	2b00      	cmp	r3, #0
 8002832:	d00a      	beq.n	800284a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002834:	4b1c      	ldr	r3, [pc, #112]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800283a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002842:	4919      	ldr	r1, [pc, #100]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002844:	4313      	orrs	r3, r2
 8002846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00a      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002856:	4b14      	ldr	r3, [pc, #80]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002858:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800285c:	f023 0203 	bic.w	r2, r3, #3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002864:	4910      	ldr	r1, [pc, #64]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d02b      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002878:	4b0b      	ldr	r3, [pc, #44]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800287e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002886:	4908      	ldr	r1, [pc, #32]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002896:	d109      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b03      	ldr	r3, [pc, #12]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a02      	ldr	r2, [pc, #8]	; (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
 80028a4:	e014      	b.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80028a6:	bf00      	nop
 80028a8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80028b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80028b4:	d10c      	bne.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	3304      	adds	r3, #4
 80028ba:	2101      	movs	r1, #1
 80028bc:	4618      	mov	r0, r3
 80028be:	f000 f8f5 	bl	8002aac <RCCEx_PLLSAI1_Config>
 80028c2:	4603      	mov	r3, r0
 80028c4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80028c6:	7ffb      	ldrb	r3, [r7, #31]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d001      	beq.n	80028d0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80028cc:	7ffb      	ldrb	r3, [r7, #31]
 80028ce:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d04a      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80028e0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80028e4:	d108      	bne.n	80028f8 <HAL_RCCEx_PeriphCLKConfig+0x554>
 80028e6:	4b70      	ldr	r3, [pc, #448]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80028e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80028ec:	4a6e      	ldr	r2, [pc, #440]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80028ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028f2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 80028f6:	e012      	b.n	800291e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 80028f8:	4b6b      	ldr	r3, [pc, #428]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80028fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028fe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002906:	4968      	ldr	r1, [pc, #416]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002908:	4313      	orrs	r3, r2
 800290a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800290e:	4b66      	ldr	r3, [pc, #408]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002910:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002914:	4a64      	ldr	r2, [pc, #400]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002916:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800291a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002922:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002926:	d10d      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	3304      	adds	r3, #4
 800292c:	2101      	movs	r1, #1
 800292e:	4618      	mov	r0, r3
 8002930:	f000 f8bc 	bl	8002aac <RCCEx_PLLSAI1_Config>
 8002934:	4603      	mov	r3, r0
 8002936:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002938:	7ffb      	ldrb	r3, [r7, #31]
 800293a:	2b00      	cmp	r3, #0
 800293c:	d019      	beq.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 800293e:	7ffb      	ldrb	r3, [r7, #31]
 8002940:	77bb      	strb	r3, [r7, #30]
 8002942:	e016      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002948:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800294c:	d106      	bne.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800294e:	4b56      	ldr	r3, [pc, #344]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002950:	68db      	ldr	r3, [r3, #12]
 8002952:	4a55      	ldr	r2, [pc, #340]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002954:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002958:	60d3      	str	r3, [r2, #12]
 800295a:	e00a      	b.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002960:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002964:	d105      	bne.n	8002972 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002966:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	4a4f      	ldr	r2, [pc, #316]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800296c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002970:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800297a:	2b00      	cmp	r3, #0
 800297c:	d028      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800297e:	4b4a      	ldr	r3, [pc, #296]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002980:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002984:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800298c:	4946      	ldr	r1, [pc, #280]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 800298e:	4313      	orrs	r3, r2
 8002990:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800299c:	d106      	bne.n	80029ac <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800299e:	4b42      	ldr	r3, [pc, #264]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029a0:	68db      	ldr	r3, [r3, #12]
 80029a2:	4a41      	ldr	r2, [pc, #260]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029a8:	60d3      	str	r3, [r2, #12]
 80029aa:	e011      	b.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80029b0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80029b4:	d10c      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	3304      	adds	r3, #4
 80029ba:	2101      	movs	r1, #1
 80029bc:	4618      	mov	r0, r3
 80029be:	f000 f875 	bl	8002aac <RCCEx_PLLSAI1_Config>
 80029c2:	4603      	mov	r3, r0
 80029c4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80029c6:	7ffb      	ldrb	r3, [r7, #31]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d001      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80029cc:	7ffb      	ldrb	r3, [r7, #31]
 80029ce:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d01e      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80029dc:	4b32      	ldr	r3, [pc, #200]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029e2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029ec:	492e      	ldr	r1, [pc, #184]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029fa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80029fe:	d10c      	bne.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	3304      	adds	r3, #4
 8002a04:	2102      	movs	r1, #2
 8002a06:	4618      	mov	r0, r3
 8002a08:	f000 f850 	bl	8002aac <RCCEx_PLLSAI1_Config>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8002a10:	7ffb      	ldrb	r3, [r7, #31]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d001      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8002a16:	7ffb      	ldrb	r3, [r7, #31]
 8002a18:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d00b      	beq.n	8002a3e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a28:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a2c:	f023 0204 	bic.w	r2, r3, #4
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002a36:	491c      	ldr	r1, [pc, #112]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a38:	4313      	orrs	r3, r2
 8002a3a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d00b      	beq.n	8002a62 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8002a4a:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a4c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a50:	f023 0218 	bic.w	r2, r3, #24
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	4913      	ldr	r1, [pc, #76]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d017      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8002a6e:	4b0e      	ldr	r3, [pc, #56]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8002a74:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a7e:	490a      	ldr	r1, [pc, #40]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a80:	4313      	orrs	r3, r2
 8002a82:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002a8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002a90:	d105      	bne.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a92:	4b05      	ldr	r3, [pc, #20]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a94:	68db      	ldr	r3, [r3, #12]
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8002a98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a9c:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8002a9e:	7fbb      	ldrb	r3, [r7, #30]
}
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	3720      	adds	r7, #32
 8002aa4:	46bd      	mov	sp, r7
 8002aa6:	bd80      	pop	{r7, pc}
 8002aa8:	40021000 	.word	0x40021000

08002aac <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b084      	sub	sp, #16
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	2b03      	cmp	r3, #3
 8002ac0:	d018      	beq.n	8002af4 <RCCEx_PLLSAI1_Config+0x48>
 8002ac2:	2b03      	cmp	r3, #3
 8002ac4:	d81f      	bhi.n	8002b06 <RCCEx_PLLSAI1_Config+0x5a>
 8002ac6:	2b01      	cmp	r3, #1
 8002ac8:	d002      	beq.n	8002ad0 <RCCEx_PLLSAI1_Config+0x24>
 8002aca:	2b02      	cmp	r3, #2
 8002acc:	d009      	beq.n	8002ae2 <RCCEx_PLLSAI1_Config+0x36>
 8002ace:	e01a      	b.n	8002b06 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002ad0:	4b65      	ldr	r3, [pc, #404]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d117      	bne.n	8002b0c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8002adc:	2301      	movs	r3, #1
 8002ade:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002ae0:	e014      	b.n	8002b0c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002ae2:	4b61      	ldr	r3, [pc, #388]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d110      	bne.n	8002b10 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8002aee:	2301      	movs	r3, #1
 8002af0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002af2:	e00d      	b.n	8002b10 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002af4:	4b5c      	ldr	r3, [pc, #368]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d109      	bne.n	8002b14 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002b04:	e006      	b.n	8002b14 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	73fb      	strb	r3, [r7, #15]
      break;
 8002b0a:	e004      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b0c:	bf00      	nop
 8002b0e:	e002      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b10:	bf00      	nop
 8002b12:	e000      	b.n	8002b16 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8002b14:	bf00      	nop
  }

  if (status == HAL_OK)
 8002b16:	7bfb      	ldrb	r3, [r7, #15]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	f040 809f 	bne.w	8002c5c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002b1e:	4b52      	ldr	r3, [pc, #328]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a51      	ldr	r2, [pc, #324]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b24:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002b28:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b2a:	f7fe f92f 	bl	8000d8c <HAL_GetTick>
 8002b2e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b30:	e00f      	b.n	8002b52 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002b32:	f7fe f92b 	bl	8000d8c <HAL_GetTick>
 8002b36:	4602      	mov	r2, r0
 8002b38:	68bb      	ldr	r3, [r7, #8]
 8002b3a:	1ad3      	subs	r3, r2, r3
 8002b3c:	2b02      	cmp	r3, #2
 8002b3e:	d908      	bls.n	8002b52 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b40:	4b49      	ldr	r3, [pc, #292]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d009      	beq.n	8002b60 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002b50:	e006      	b.n	8002b60 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b52:	4b45      	ldr	r3, [pc, #276]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d1e9      	bne.n	8002b32 <RCCEx_PLLSAI1_Config+0x86>
 8002b5e:	e000      	b.n	8002b62 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8002b60:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002b62:	7bfb      	ldrb	r3, [r7, #15]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d179      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002b68:	683b      	ldr	r3, [r7, #0]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d116      	bne.n	8002b9c <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b6e:	4b3e      	ldr	r3, [pc, #248]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b70:	691a      	ldr	r2, [r3, #16]
 8002b72:	4b3e      	ldr	r3, [pc, #248]	; (8002c6c <RCCEx_PLLSAI1_Config+0x1c0>)
 8002b74:	4013      	ands	r3, r2
 8002b76:	687a      	ldr	r2, [r7, #4]
 8002b78:	6892      	ldr	r2, [r2, #8]
 8002b7a:	0211      	lsls	r1, r2, #8
 8002b7c:	687a      	ldr	r2, [r7, #4]
 8002b7e:	68d2      	ldr	r2, [r2, #12]
 8002b80:	06d2      	lsls	r2, r2, #27
 8002b82:	4311      	orrs	r1, r2
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	6852      	ldr	r2, [r2, #4]
 8002b88:	3a01      	subs	r2, #1
 8002b8a:	0112      	lsls	r2, r2, #4
 8002b8c:	4311      	orrs	r1, r2
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	6812      	ldr	r2, [r2, #0]
 8002b92:	430a      	orrs	r2, r1
 8002b94:	4934      	ldr	r1, [pc, #208]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002b96:	4313      	orrs	r3, r2
 8002b98:	610b      	str	r3, [r1, #16]
 8002b9a:	e033      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8002b9c:	683b      	ldr	r3, [r7, #0]
 8002b9e:	2b01      	cmp	r3, #1
 8002ba0:	d118      	bne.n	8002bd4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ba2:	4b31      	ldr	r3, [pc, #196]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002ba4:	691a      	ldr	r2, [r3, #16]
 8002ba6:	4b32      	ldr	r3, [pc, #200]	; (8002c70 <RCCEx_PLLSAI1_Config+0x1c4>)
 8002ba8:	4013      	ands	r3, r2
 8002baa:	687a      	ldr	r2, [r7, #4]
 8002bac:	6892      	ldr	r2, [r2, #8]
 8002bae:	0211      	lsls	r1, r2, #8
 8002bb0:	687a      	ldr	r2, [r7, #4]
 8002bb2:	6912      	ldr	r2, [r2, #16]
 8002bb4:	0852      	lsrs	r2, r2, #1
 8002bb6:	3a01      	subs	r2, #1
 8002bb8:	0552      	lsls	r2, r2, #21
 8002bba:	4311      	orrs	r1, r2
 8002bbc:	687a      	ldr	r2, [r7, #4]
 8002bbe:	6852      	ldr	r2, [r2, #4]
 8002bc0:	3a01      	subs	r2, #1
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	687a      	ldr	r2, [r7, #4]
 8002bc8:	6812      	ldr	r2, [r2, #0]
 8002bca:	430a      	orrs	r2, r1
 8002bcc:	4926      	ldr	r1, [pc, #152]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bce:	4313      	orrs	r3, r2
 8002bd0:	610b      	str	r3, [r1, #16]
 8002bd2:	e017      	b.n	8002c04 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002bd4:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002bd6:	691a      	ldr	r2, [r3, #16]
 8002bd8:	4b26      	ldr	r3, [pc, #152]	; (8002c74 <RCCEx_PLLSAI1_Config+0x1c8>)
 8002bda:	4013      	ands	r3, r2
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	6892      	ldr	r2, [r2, #8]
 8002be0:	0211      	lsls	r1, r2, #8
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	6952      	ldr	r2, [r2, #20]
 8002be6:	0852      	lsrs	r2, r2, #1
 8002be8:	3a01      	subs	r2, #1
 8002bea:	0652      	lsls	r2, r2, #25
 8002bec:	4311      	orrs	r1, r2
 8002bee:	687a      	ldr	r2, [r7, #4]
 8002bf0:	6852      	ldr	r2, [r2, #4]
 8002bf2:	3a01      	subs	r2, #1
 8002bf4:	0112      	lsls	r2, r2, #4
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	687a      	ldr	r2, [r7, #4]
 8002bfa:	6812      	ldr	r2, [r2, #0]
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	491a      	ldr	r1, [pc, #104]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c00:	4313      	orrs	r3, r2
 8002c02:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002c04:	4b18      	ldr	r3, [pc, #96]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a17      	ldr	r2, [pc, #92]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c0a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002c0e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c10:	f7fe f8bc 	bl	8000d8c <HAL_GetTick>
 8002c14:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c16:	e00f      	b.n	8002c38 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c18:	f7fe f8b8 	bl	8000d8c <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b02      	cmp	r3, #2
 8002c24:	d908      	bls.n	8002c38 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c26:	4b10      	ldr	r3, [pc, #64]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d109      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8002c32:	2303      	movs	r3, #3
 8002c34:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002c36:	e006      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002c38:	4b0b      	ldr	r3, [pc, #44]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d0e9      	beq.n	8002c18 <RCCEx_PLLSAI1_Config+0x16c>
 8002c44:	e000      	b.n	8002c48 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8002c46:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d106      	bne.n	8002c5c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8002c4e:	4b06      	ldr	r3, [pc, #24]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c50:	691a      	ldr	r2, [r3, #16]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	699b      	ldr	r3, [r3, #24]
 8002c56:	4904      	ldr	r1, [pc, #16]	; (8002c68 <RCCEx_PLLSAI1_Config+0x1bc>)
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c5e:	4618      	mov	r0, r3
 8002c60:	3710      	adds	r7, #16
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40021000 	.word	0x40021000
 8002c6c:	07ff800c 	.word	0x07ff800c
 8002c70:	ff9f800c 	.word	0xff9f800c
 8002c74:	f9ff800c 	.word	0xf9ff800c

08002c78 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
 8002c80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002c82:	2300      	movs	r3, #0
 8002c84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b03      	cmp	r3, #3
 8002c8c:	d018      	beq.n	8002cc0 <RCCEx_PLLSAI2_Config+0x48>
 8002c8e:	2b03      	cmp	r3, #3
 8002c90:	d81f      	bhi.n	8002cd2 <RCCEx_PLLSAI2_Config+0x5a>
 8002c92:	2b01      	cmp	r3, #1
 8002c94:	d002      	beq.n	8002c9c <RCCEx_PLLSAI2_Config+0x24>
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d009      	beq.n	8002cae <RCCEx_PLLSAI2_Config+0x36>
 8002c9a:	e01a      	b.n	8002cd2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c9c:	4b4a      	ldr	r3, [pc, #296]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f003 0302 	and.w	r3, r3, #2
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d117      	bne.n	8002cd8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cac:	e014      	b.n	8002cd8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002cae:	4b46      	ldr	r3, [pc, #280]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d110      	bne.n	8002cdc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8002cba:	2301      	movs	r3, #1
 8002cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cbe:	e00d      	b.n	8002cdc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8002cc0:	4b41      	ldr	r3, [pc, #260]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d109      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8002ccc:	2301      	movs	r3, #1
 8002cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002cd0:	e006      	b.n	8002ce0 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	73fb      	strb	r3, [r7, #15]
      break;
 8002cd6:	e004      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002cd8:	bf00      	nop
 8002cda:	e002      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002cdc:	bf00      	nop
 8002cde:	e000      	b.n	8002ce2 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8002ce0:	bf00      	nop
  }

  if (status == HAL_OK)
 8002ce2:	7bfb      	ldrb	r3, [r7, #15]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d169      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ce8:	4b37      	ldr	r3, [pc, #220]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a36      	ldr	r2, [pc, #216]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002cee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cf2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cf4:	f7fe f84a 	bl	8000d8c <HAL_GetTick>
 8002cf8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cfa:	e00f      	b.n	8002d1c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002cfc:	f7fe f846 	bl	8000d8c <HAL_GetTick>
 8002d00:	4602      	mov	r2, r0
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	1ad3      	subs	r3, r2, r3
 8002d06:	2b02      	cmp	r3, #2
 8002d08:	d908      	bls.n	8002d1c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d0a:	4b2f      	ldr	r3, [pc, #188]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d009      	beq.n	8002d2a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8002d1a:	e006      	b.n	8002d2a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d1e9      	bne.n	8002cfc <RCCEx_PLLSAI2_Config+0x84>
 8002d28:	e000      	b.n	8002d2c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8002d2a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8002d2c:	7bfb      	ldrb	r3, [r7, #15]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d144      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d115      	bne.n	8002d64 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d38:	4b23      	ldr	r3, [pc, #140]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d3a:	695a      	ldr	r2, [r3, #20]
 8002d3c:	4b23      	ldr	r3, [pc, #140]	; (8002dcc <RCCEx_PLLSAI2_Config+0x154>)
 8002d3e:	4013      	ands	r3, r2
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	6892      	ldr	r2, [r2, #8]
 8002d44:	0211      	lsls	r1, r2, #8
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	68d2      	ldr	r2, [r2, #12]
 8002d4a:	06d2      	lsls	r2, r2, #27
 8002d4c:	4311      	orrs	r1, r2
 8002d4e:	687a      	ldr	r2, [r7, #4]
 8002d50:	6852      	ldr	r2, [r2, #4]
 8002d52:	3a01      	subs	r2, #1
 8002d54:	0112      	lsls	r2, r2, #4
 8002d56:	4311      	orrs	r1, r2
 8002d58:	687a      	ldr	r2, [r7, #4]
 8002d5a:	6812      	ldr	r2, [r2, #0]
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	491a      	ldr	r1, [pc, #104]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a17      	ldr	r2, [pc, #92]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002d6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d70:	f7fe f80c 	bl	8000d8c <HAL_GetTick>
 8002d74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d76:	e00f      	b.n	8002d98 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002d78:	f7fe f808 	bl	8000d8c <HAL_GetTick>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	68bb      	ldr	r3, [r7, #8]
 8002d80:	1ad3      	subs	r3, r2, r3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d908      	bls.n	8002d98 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d86:	4b10      	ldr	r3, [pc, #64]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8002d92:	2303      	movs	r3, #3
 8002d94:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8002d96:	e006      	b.n	8002da6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002d98:	4b0b      	ldr	r3, [pc, #44]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d0e9      	beq.n	8002d78 <RCCEx_PLLSAI2_Config+0x100>
 8002da4:	e000      	b.n	8002da8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8002da6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8002da8:	7bfb      	ldrb	r3, [r7, #15]
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d106      	bne.n	8002dbc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8002dae:	4b06      	ldr	r3, [pc, #24]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002db0:	695a      	ldr	r2, [r3, #20]
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4904      	ldr	r1, [pc, #16]	; (8002dc8 <RCCEx_PLLSAI2_Config+0x150>)
 8002db8:	4313      	orrs	r3, r2
 8002dba:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dbe:	4618      	mov	r0, r3
 8002dc0:	3710      	adds	r7, #16
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}
 8002dc6:	bf00      	nop
 8002dc8:	40021000 	.word	0x40021000
 8002dcc:	07ff800c 	.word	0x07ff800c

08002dd0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e042      	b.n	8002e68 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d106      	bne.n	8002dfa <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2200      	movs	r2, #0
 8002df0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002df4:	6878      	ldr	r0, [r7, #4]
 8002df6:	f7fd fcf9 	bl	80007ec <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2224      	movs	r2, #36	; 0x24
 8002dfe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 0201 	bic.w	r2, r2, #1
 8002e10:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8ba 	bl	8002f8c <UART_SetConfig>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b01      	cmp	r3, #1
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e022      	b.n	8002e68 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d002      	beq.n	8002e30 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8002e2a:	6878      	ldr	r0, [r7, #4]
 8002e2c:	f000 fbae 	bl	800358c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	685a      	ldr	r2, [r3, #4]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e3e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e4e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	681a      	ldr	r2, [r3, #0]
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f042 0201 	orr.w	r2, r2, #1
 8002e5e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f000 fc35 	bl	80036d0 <UART_CheckIdleState>
 8002e66:	4603      	mov	r3, r0
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3708      	adds	r7, #8
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bd80      	pop	{r7, pc}

08002e70 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b08a      	sub	sp, #40	; 0x28
 8002e74:	af02      	add	r7, sp, #8
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	603b      	str	r3, [r7, #0]
 8002e7c:	4613      	mov	r3, r2
 8002e7e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e86:	2b20      	cmp	r3, #32
 8002e88:	d17b      	bne.n	8002f82 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e8a:	68bb      	ldr	r3, [r7, #8]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d002      	beq.n	8002e96 <HAL_UART_Transmit+0x26>
 8002e90:	88fb      	ldrh	r3, [r7, #6]
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d101      	bne.n	8002e9a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e074      	b.n	8002f84 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	2221      	movs	r2, #33	; 0x21
 8002ea6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002eaa:	f7fd ff6f 	bl	8000d8c <HAL_GetTick>
 8002eae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	88fa      	ldrh	r2, [r7, #6]
 8002eb4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	88fa      	ldrh	r2, [r7, #6]
 8002ebc:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ec8:	d108      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	691b      	ldr	r3, [r3, #16]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d104      	bne.n	8002edc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002ed6:	68bb      	ldr	r3, [r7, #8]
 8002ed8:	61bb      	str	r3, [r7, #24]
 8002eda:	e003      	b.n	8002ee4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ee0:	2300      	movs	r3, #0
 8002ee2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002ee4:	e030      	b.n	8002f48 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	9300      	str	r3, [sp, #0]
 8002eea:	697b      	ldr	r3, [r7, #20]
 8002eec:	2200      	movs	r2, #0
 8002eee:	2180      	movs	r1, #128	; 0x80
 8002ef0:	68f8      	ldr	r0, [r7, #12]
 8002ef2:	f000 fc97 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d005      	beq.n	8002f08 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	2220      	movs	r2, #32
 8002f00:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8002f04:	2303      	movs	r3, #3
 8002f06:	e03d      	b.n	8002f84 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f08:	69fb      	ldr	r3, [r7, #28]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d10b      	bne.n	8002f26 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f0e:	69bb      	ldr	r3, [r7, #24]
 8002f10:	881b      	ldrh	r3, [r3, #0]
 8002f12:	461a      	mov	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f1c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f1e:	69bb      	ldr	r3, [r7, #24]
 8002f20:	3302      	adds	r3, #2
 8002f22:	61bb      	str	r3, [r7, #24]
 8002f24:	e007      	b.n	8002f36 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	781a      	ldrb	r2, [r3, #0]
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f30:	69fb      	ldr	r3, [r7, #28]
 8002f32:	3301      	adds	r3, #1
 8002f34:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	3b01      	subs	r3, #1
 8002f40:	b29a      	uxth	r2, r3
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002f4e:	b29b      	uxth	r3, r3
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d1c8      	bne.n	8002ee6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f54:	683b      	ldr	r3, [r7, #0]
 8002f56:	9300      	str	r3, [sp, #0]
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	2140      	movs	r1, #64	; 0x40
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f000 fc60 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d005      	beq.n	8002f76 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	2220      	movs	r2, #32
 8002f6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8002f72:	2303      	movs	r3, #3
 8002f74:	e006      	b.n	8002f84 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e000      	b.n	8002f84 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002f82:	2302      	movs	r3, #2
  }
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3720      	adds	r7, #32
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f90:	b08c      	sub	sp, #48	; 0x30
 8002f92:	af00      	add	r7, sp, #0
 8002f94:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f96:	2300      	movs	r3, #0
 8002f98:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f9c:	697b      	ldr	r3, [r7, #20]
 8002f9e:	689a      	ldr	r2, [r3, #8]
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	691b      	ldr	r3, [r3, #16]
 8002fa4:	431a      	orrs	r2, r3
 8002fa6:	697b      	ldr	r3, [r7, #20]
 8002fa8:	695b      	ldr	r3, [r3, #20]
 8002faa:	431a      	orrs	r2, r3
 8002fac:	697b      	ldr	r3, [r7, #20]
 8002fae:	69db      	ldr	r3, [r3, #28]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fb4:	697b      	ldr	r3, [r7, #20]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	4baa      	ldr	r3, [pc, #680]	; (8003264 <UART_SetConfig+0x2d8>)
 8002fbc:	4013      	ands	r3, r2
 8002fbe:	697a      	ldr	r2, [r7, #20]
 8002fc0:	6812      	ldr	r2, [r2, #0]
 8002fc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002fc4:	430b      	orrs	r3, r1
 8002fc6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002fd2:	697b      	ldr	r3, [r7, #20]
 8002fd4:	68da      	ldr	r2, [r3, #12]
 8002fd6:	697b      	ldr	r3, [r7, #20]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	430a      	orrs	r2, r1
 8002fdc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	699b      	ldr	r3, [r3, #24]
 8002fe2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002fe4:	697b      	ldr	r3, [r7, #20]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	4a9f      	ldr	r2, [pc, #636]	; (8003268 <UART_SetConfig+0x2dc>)
 8002fea:	4293      	cmp	r3, r2
 8002fec:	d004      	beq.n	8002ff8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	6a1b      	ldr	r3, [r3, #32]
 8002ff2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ff8:	697b      	ldr	r3, [r7, #20]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	689b      	ldr	r3, [r3, #8]
 8002ffe:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003002:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	6812      	ldr	r2, [r2, #0]
 800300a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800300c:	430b      	orrs	r3, r1
 800300e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003010:	697b      	ldr	r3, [r7, #20]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003016:	f023 010f 	bic.w	r1, r3, #15
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800301e:	697b      	ldr	r3, [r7, #20]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	430a      	orrs	r2, r1
 8003024:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	4a90      	ldr	r2, [pc, #576]	; (800326c <UART_SetConfig+0x2e0>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d125      	bne.n	800307c <UART_SetConfig+0xf0>
 8003030:	4b8f      	ldr	r3, [pc, #572]	; (8003270 <UART_SetConfig+0x2e4>)
 8003032:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003036:	f003 0303 	and.w	r3, r3, #3
 800303a:	2b03      	cmp	r3, #3
 800303c:	d81a      	bhi.n	8003074 <UART_SetConfig+0xe8>
 800303e:	a201      	add	r2, pc, #4	; (adr r2, 8003044 <UART_SetConfig+0xb8>)
 8003040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003044:	08003055 	.word	0x08003055
 8003048:	08003065 	.word	0x08003065
 800304c:	0800305d 	.word	0x0800305d
 8003050:	0800306d 	.word	0x0800306d
 8003054:	2301      	movs	r3, #1
 8003056:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800305a:	e116      	b.n	800328a <UART_SetConfig+0x2fe>
 800305c:	2302      	movs	r3, #2
 800305e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003062:	e112      	b.n	800328a <UART_SetConfig+0x2fe>
 8003064:	2304      	movs	r3, #4
 8003066:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800306a:	e10e      	b.n	800328a <UART_SetConfig+0x2fe>
 800306c:	2308      	movs	r3, #8
 800306e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003072:	e10a      	b.n	800328a <UART_SetConfig+0x2fe>
 8003074:	2310      	movs	r3, #16
 8003076:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800307a:	e106      	b.n	800328a <UART_SetConfig+0x2fe>
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a7c      	ldr	r2, [pc, #496]	; (8003274 <UART_SetConfig+0x2e8>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d138      	bne.n	80030f8 <UART_SetConfig+0x16c>
 8003086:	4b7a      	ldr	r3, [pc, #488]	; (8003270 <UART_SetConfig+0x2e4>)
 8003088:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800308c:	f003 030c 	and.w	r3, r3, #12
 8003090:	2b0c      	cmp	r3, #12
 8003092:	d82d      	bhi.n	80030f0 <UART_SetConfig+0x164>
 8003094:	a201      	add	r2, pc, #4	; (adr r2, 800309c <UART_SetConfig+0x110>)
 8003096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800309a:	bf00      	nop
 800309c:	080030d1 	.word	0x080030d1
 80030a0:	080030f1 	.word	0x080030f1
 80030a4:	080030f1 	.word	0x080030f1
 80030a8:	080030f1 	.word	0x080030f1
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	080030f1 	.word	0x080030f1
 80030b4:	080030f1 	.word	0x080030f1
 80030b8:	080030f1 	.word	0x080030f1
 80030bc:	080030d9 	.word	0x080030d9
 80030c0:	080030f1 	.word	0x080030f1
 80030c4:	080030f1 	.word	0x080030f1
 80030c8:	080030f1 	.word	0x080030f1
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030d6:	e0d8      	b.n	800328a <UART_SetConfig+0x2fe>
 80030d8:	2302      	movs	r3, #2
 80030da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030de:	e0d4      	b.n	800328a <UART_SetConfig+0x2fe>
 80030e0:	2304      	movs	r3, #4
 80030e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030e6:	e0d0      	b.n	800328a <UART_SetConfig+0x2fe>
 80030e8:	2308      	movs	r3, #8
 80030ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030ee:	e0cc      	b.n	800328a <UART_SetConfig+0x2fe>
 80030f0:	2310      	movs	r3, #16
 80030f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80030f6:	e0c8      	b.n	800328a <UART_SetConfig+0x2fe>
 80030f8:	697b      	ldr	r3, [r7, #20]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a5e      	ldr	r2, [pc, #376]	; (8003278 <UART_SetConfig+0x2ec>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d125      	bne.n	800314e <UART_SetConfig+0x1c2>
 8003102:	4b5b      	ldr	r3, [pc, #364]	; (8003270 <UART_SetConfig+0x2e4>)
 8003104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003108:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800310c:	2b30      	cmp	r3, #48	; 0x30
 800310e:	d016      	beq.n	800313e <UART_SetConfig+0x1b2>
 8003110:	2b30      	cmp	r3, #48	; 0x30
 8003112:	d818      	bhi.n	8003146 <UART_SetConfig+0x1ba>
 8003114:	2b20      	cmp	r3, #32
 8003116:	d00a      	beq.n	800312e <UART_SetConfig+0x1a2>
 8003118:	2b20      	cmp	r3, #32
 800311a:	d814      	bhi.n	8003146 <UART_SetConfig+0x1ba>
 800311c:	2b00      	cmp	r3, #0
 800311e:	d002      	beq.n	8003126 <UART_SetConfig+0x19a>
 8003120:	2b10      	cmp	r3, #16
 8003122:	d008      	beq.n	8003136 <UART_SetConfig+0x1aa>
 8003124:	e00f      	b.n	8003146 <UART_SetConfig+0x1ba>
 8003126:	2300      	movs	r3, #0
 8003128:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800312c:	e0ad      	b.n	800328a <UART_SetConfig+0x2fe>
 800312e:	2302      	movs	r3, #2
 8003130:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003134:	e0a9      	b.n	800328a <UART_SetConfig+0x2fe>
 8003136:	2304      	movs	r3, #4
 8003138:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800313c:	e0a5      	b.n	800328a <UART_SetConfig+0x2fe>
 800313e:	2308      	movs	r3, #8
 8003140:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003144:	e0a1      	b.n	800328a <UART_SetConfig+0x2fe>
 8003146:	2310      	movs	r3, #16
 8003148:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800314c:	e09d      	b.n	800328a <UART_SetConfig+0x2fe>
 800314e:	697b      	ldr	r3, [r7, #20]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a4a      	ldr	r2, [pc, #296]	; (800327c <UART_SetConfig+0x2f0>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d125      	bne.n	80031a4 <UART_SetConfig+0x218>
 8003158:	4b45      	ldr	r3, [pc, #276]	; (8003270 <UART_SetConfig+0x2e4>)
 800315a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800315e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003162:	2bc0      	cmp	r3, #192	; 0xc0
 8003164:	d016      	beq.n	8003194 <UART_SetConfig+0x208>
 8003166:	2bc0      	cmp	r3, #192	; 0xc0
 8003168:	d818      	bhi.n	800319c <UART_SetConfig+0x210>
 800316a:	2b80      	cmp	r3, #128	; 0x80
 800316c:	d00a      	beq.n	8003184 <UART_SetConfig+0x1f8>
 800316e:	2b80      	cmp	r3, #128	; 0x80
 8003170:	d814      	bhi.n	800319c <UART_SetConfig+0x210>
 8003172:	2b00      	cmp	r3, #0
 8003174:	d002      	beq.n	800317c <UART_SetConfig+0x1f0>
 8003176:	2b40      	cmp	r3, #64	; 0x40
 8003178:	d008      	beq.n	800318c <UART_SetConfig+0x200>
 800317a:	e00f      	b.n	800319c <UART_SetConfig+0x210>
 800317c:	2300      	movs	r3, #0
 800317e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003182:	e082      	b.n	800328a <UART_SetConfig+0x2fe>
 8003184:	2302      	movs	r3, #2
 8003186:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800318a:	e07e      	b.n	800328a <UART_SetConfig+0x2fe>
 800318c:	2304      	movs	r3, #4
 800318e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003192:	e07a      	b.n	800328a <UART_SetConfig+0x2fe>
 8003194:	2308      	movs	r3, #8
 8003196:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800319a:	e076      	b.n	800328a <UART_SetConfig+0x2fe>
 800319c:	2310      	movs	r3, #16
 800319e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031a2:	e072      	b.n	800328a <UART_SetConfig+0x2fe>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4a35      	ldr	r2, [pc, #212]	; (8003280 <UART_SetConfig+0x2f4>)
 80031aa:	4293      	cmp	r3, r2
 80031ac:	d12a      	bne.n	8003204 <UART_SetConfig+0x278>
 80031ae:	4b30      	ldr	r3, [pc, #192]	; (8003270 <UART_SetConfig+0x2e4>)
 80031b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031bc:	d01a      	beq.n	80031f4 <UART_SetConfig+0x268>
 80031be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031c2:	d81b      	bhi.n	80031fc <UART_SetConfig+0x270>
 80031c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031c8:	d00c      	beq.n	80031e4 <UART_SetConfig+0x258>
 80031ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031ce:	d815      	bhi.n	80031fc <UART_SetConfig+0x270>
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d003      	beq.n	80031dc <UART_SetConfig+0x250>
 80031d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d8:	d008      	beq.n	80031ec <UART_SetConfig+0x260>
 80031da:	e00f      	b.n	80031fc <UART_SetConfig+0x270>
 80031dc:	2300      	movs	r3, #0
 80031de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031e2:	e052      	b.n	800328a <UART_SetConfig+0x2fe>
 80031e4:	2302      	movs	r3, #2
 80031e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031ea:	e04e      	b.n	800328a <UART_SetConfig+0x2fe>
 80031ec:	2304      	movs	r3, #4
 80031ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031f2:	e04a      	b.n	800328a <UART_SetConfig+0x2fe>
 80031f4:	2308      	movs	r3, #8
 80031f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80031fa:	e046      	b.n	800328a <UART_SetConfig+0x2fe>
 80031fc:	2310      	movs	r3, #16
 80031fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003202:	e042      	b.n	800328a <UART_SetConfig+0x2fe>
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4a17      	ldr	r2, [pc, #92]	; (8003268 <UART_SetConfig+0x2dc>)
 800320a:	4293      	cmp	r3, r2
 800320c:	d13a      	bne.n	8003284 <UART_SetConfig+0x2f8>
 800320e:	4b18      	ldr	r3, [pc, #96]	; (8003270 <UART_SetConfig+0x2e4>)
 8003210:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003214:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003218:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800321c:	d01a      	beq.n	8003254 <UART_SetConfig+0x2c8>
 800321e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003222:	d81b      	bhi.n	800325c <UART_SetConfig+0x2d0>
 8003224:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003228:	d00c      	beq.n	8003244 <UART_SetConfig+0x2b8>
 800322a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800322e:	d815      	bhi.n	800325c <UART_SetConfig+0x2d0>
 8003230:	2b00      	cmp	r3, #0
 8003232:	d003      	beq.n	800323c <UART_SetConfig+0x2b0>
 8003234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003238:	d008      	beq.n	800324c <UART_SetConfig+0x2c0>
 800323a:	e00f      	b.n	800325c <UART_SetConfig+0x2d0>
 800323c:	2300      	movs	r3, #0
 800323e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003242:	e022      	b.n	800328a <UART_SetConfig+0x2fe>
 8003244:	2302      	movs	r3, #2
 8003246:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800324a:	e01e      	b.n	800328a <UART_SetConfig+0x2fe>
 800324c:	2304      	movs	r3, #4
 800324e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003252:	e01a      	b.n	800328a <UART_SetConfig+0x2fe>
 8003254:	2308      	movs	r3, #8
 8003256:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800325a:	e016      	b.n	800328a <UART_SetConfig+0x2fe>
 800325c:	2310      	movs	r3, #16
 800325e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8003262:	e012      	b.n	800328a <UART_SetConfig+0x2fe>
 8003264:	cfff69f3 	.word	0xcfff69f3
 8003268:	40008000 	.word	0x40008000
 800326c:	40013800 	.word	0x40013800
 8003270:	40021000 	.word	0x40021000
 8003274:	40004400 	.word	0x40004400
 8003278:	40004800 	.word	0x40004800
 800327c:	40004c00 	.word	0x40004c00
 8003280:	40005000 	.word	0x40005000
 8003284:	2310      	movs	r3, #16
 8003286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4ab0      	ldr	r2, [pc, #704]	; (8003550 <UART_SetConfig+0x5c4>)
 8003290:	4293      	cmp	r3, r2
 8003292:	f040 809b 	bne.w	80033cc <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003296:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800329a:	2b08      	cmp	r3, #8
 800329c:	d827      	bhi.n	80032ee <UART_SetConfig+0x362>
 800329e:	a201      	add	r2, pc, #4	; (adr r2, 80032a4 <UART_SetConfig+0x318>)
 80032a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032a4:	080032c9 	.word	0x080032c9
 80032a8:	080032d1 	.word	0x080032d1
 80032ac:	080032d9 	.word	0x080032d9
 80032b0:	080032ef 	.word	0x080032ef
 80032b4:	080032df 	.word	0x080032df
 80032b8:	080032ef 	.word	0x080032ef
 80032bc:	080032ef 	.word	0x080032ef
 80032c0:	080032ef 	.word	0x080032ef
 80032c4:	080032e7 	.word	0x080032e7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032c8:	f7fe ff74 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 80032cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032ce:	e014      	b.n	80032fa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032d0:	f7fe ff84 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 80032d4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032d6:	e010      	b.n	80032fa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d8:	4b9e      	ldr	r3, [pc, #632]	; (8003554 <UART_SetConfig+0x5c8>)
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032dc:	e00d      	b.n	80032fa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032de:	f7fe feb9 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80032e2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80032e4:	e009      	b.n	80032fa <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80032ec:	e005      	b.n	80032fa <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 80032ee:	2300      	movs	r3, #0
 80032f0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80032f8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80032fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8130 	beq.w	8003562 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8003302:	697b      	ldr	r3, [r7, #20]
 8003304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003306:	4a94      	ldr	r2, [pc, #592]	; (8003558 <UART_SetConfig+0x5cc>)
 8003308:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800330c:	461a      	mov	r2, r3
 800330e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003310:	fbb3 f3f2 	udiv	r3, r3, r2
 8003314:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	4613      	mov	r3, r2
 800331c:	005b      	lsls	r3, r3, #1
 800331e:	4413      	add	r3, r2
 8003320:	69ba      	ldr	r2, [r7, #24]
 8003322:	429a      	cmp	r2, r3
 8003324:	d305      	bcc.n	8003332 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	429a      	cmp	r2, r3
 8003330:	d903      	bls.n	800333a <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 8003332:	2301      	movs	r3, #1
 8003334:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8003338:	e113      	b.n	8003562 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800333a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333c:	2200      	movs	r2, #0
 800333e:	60bb      	str	r3, [r7, #8]
 8003340:	60fa      	str	r2, [r7, #12]
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003346:	4a84      	ldr	r2, [pc, #528]	; (8003558 <UART_SetConfig+0x5cc>)
 8003348:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800334c:	b29b      	uxth	r3, r3
 800334e:	2200      	movs	r2, #0
 8003350:	603b      	str	r3, [r7, #0]
 8003352:	607a      	str	r2, [r7, #4]
 8003354:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003358:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800335c:	f7fc ff6c 	bl	8000238 <__aeabi_uldivmod>
 8003360:	4602      	mov	r2, r0
 8003362:	460b      	mov	r3, r1
 8003364:	4610      	mov	r0, r2
 8003366:	4619      	mov	r1, r3
 8003368:	f04f 0200 	mov.w	r2, #0
 800336c:	f04f 0300 	mov.w	r3, #0
 8003370:	020b      	lsls	r3, r1, #8
 8003372:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003376:	0202      	lsls	r2, r0, #8
 8003378:	6979      	ldr	r1, [r7, #20]
 800337a:	6849      	ldr	r1, [r1, #4]
 800337c:	0849      	lsrs	r1, r1, #1
 800337e:	2000      	movs	r0, #0
 8003380:	460c      	mov	r4, r1
 8003382:	4605      	mov	r5, r0
 8003384:	eb12 0804 	adds.w	r8, r2, r4
 8003388:	eb43 0905 	adc.w	r9, r3, r5
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	469a      	mov	sl, r3
 8003394:	4693      	mov	fp, r2
 8003396:	4652      	mov	r2, sl
 8003398:	465b      	mov	r3, fp
 800339a:	4640      	mov	r0, r8
 800339c:	4649      	mov	r1, r9
 800339e:	f7fc ff4b 	bl	8000238 <__aeabi_uldivmod>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4613      	mov	r3, r2
 80033a8:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033aa:	6a3b      	ldr	r3, [r7, #32]
 80033ac:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033b0:	d308      	bcc.n	80033c4 <UART_SetConfig+0x438>
 80033b2:	6a3b      	ldr	r3, [r7, #32]
 80033b4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033b8:	d204      	bcs.n	80033c4 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 80033ba:	697b      	ldr	r3, [r7, #20]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6a3a      	ldr	r2, [r7, #32]
 80033c0:	60da      	str	r2, [r3, #12]
 80033c2:	e0ce      	b.n	8003562 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 80033c4:	2301      	movs	r3, #1
 80033c6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80033ca:	e0ca      	b.n	8003562 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	69db      	ldr	r3, [r3, #28]
 80033d0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80033d4:	d166      	bne.n	80034a4 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 80033d6:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d827      	bhi.n	800342e <UART_SetConfig+0x4a2>
 80033de:	a201      	add	r2, pc, #4	; (adr r2, 80033e4 <UART_SetConfig+0x458>)
 80033e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033e4:	08003409 	.word	0x08003409
 80033e8:	08003411 	.word	0x08003411
 80033ec:	08003419 	.word	0x08003419
 80033f0:	0800342f 	.word	0x0800342f
 80033f4:	0800341f 	.word	0x0800341f
 80033f8:	0800342f 	.word	0x0800342f
 80033fc:	0800342f 	.word	0x0800342f
 8003400:	0800342f 	.word	0x0800342f
 8003404:	08003427 	.word	0x08003427
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003408:	f7fe fed4 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 800340c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800340e:	e014      	b.n	800343a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003410:	f7fe fee4 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 8003414:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003416:	e010      	b.n	800343a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003418:	4b4e      	ldr	r3, [pc, #312]	; (8003554 <UART_SetConfig+0x5c8>)
 800341a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800341c:	e00d      	b.n	800343a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800341e:	f7fe fe19 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 8003422:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8003424:	e009      	b.n	800343a <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003426:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800342a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 800342c:	e005      	b.n	800343a <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 800342e:	2300      	movs	r3, #0
 8003430:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003432:	2301      	movs	r3, #1
 8003434:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003438:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 8090 	beq.w	8003562 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003446:	4a44      	ldr	r2, [pc, #272]	; (8003558 <UART_SetConfig+0x5cc>)
 8003448:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800344c:	461a      	mov	r2, r3
 800344e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003450:	fbb3 f3f2 	udiv	r3, r3, r2
 8003454:	005a      	lsls	r2, r3, #1
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	085b      	lsrs	r3, r3, #1
 800345c:	441a      	add	r2, r3
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	fbb2 f3f3 	udiv	r3, r2, r3
 8003466:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003468:	6a3b      	ldr	r3, [r7, #32]
 800346a:	2b0f      	cmp	r3, #15
 800346c:	d916      	bls.n	800349c <UART_SetConfig+0x510>
 800346e:	6a3b      	ldr	r3, [r7, #32]
 8003470:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003474:	d212      	bcs.n	800349c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003476:	6a3b      	ldr	r3, [r7, #32]
 8003478:	b29b      	uxth	r3, r3
 800347a:	f023 030f 	bic.w	r3, r3, #15
 800347e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003480:	6a3b      	ldr	r3, [r7, #32]
 8003482:	085b      	lsrs	r3, r3, #1
 8003484:	b29b      	uxth	r3, r3
 8003486:	f003 0307 	and.w	r3, r3, #7
 800348a:	b29a      	uxth	r2, r3
 800348c:	8bfb      	ldrh	r3, [r7, #30]
 800348e:	4313      	orrs	r3, r2
 8003490:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	8bfa      	ldrh	r2, [r7, #30]
 8003498:	60da      	str	r2, [r3, #12]
 800349a:	e062      	b.n	8003562 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80034a2:	e05e      	b.n	8003562 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034a4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d828      	bhi.n	80034fe <UART_SetConfig+0x572>
 80034ac:	a201      	add	r2, pc, #4	; (adr r2, 80034b4 <UART_SetConfig+0x528>)
 80034ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034b2:	bf00      	nop
 80034b4:	080034d9 	.word	0x080034d9
 80034b8:	080034e1 	.word	0x080034e1
 80034bc:	080034e9 	.word	0x080034e9
 80034c0:	080034ff 	.word	0x080034ff
 80034c4:	080034ef 	.word	0x080034ef
 80034c8:	080034ff 	.word	0x080034ff
 80034cc:	080034ff 	.word	0x080034ff
 80034d0:	080034ff 	.word	0x080034ff
 80034d4:	080034f7 	.word	0x080034f7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034d8:	f7fe fe6c 	bl	80021b4 <HAL_RCC_GetPCLK1Freq>
 80034dc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034de:	e014      	b.n	800350a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034e0:	f7fe fe7c 	bl	80021dc <HAL_RCC_GetPCLK2Freq>
 80034e4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034e6:	e010      	b.n	800350a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034e8:	4b1a      	ldr	r3, [pc, #104]	; (8003554 <UART_SetConfig+0x5c8>)
 80034ea:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034ec:	e00d      	b.n	800350a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034ee:	f7fe fdb1 	bl	8002054 <HAL_RCC_GetSysClockFreq>
 80034f2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80034f4:	e009      	b.n	800350a <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034fa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80034fc:	e005      	b.n	800350a <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 80034fe:	2300      	movs	r3, #0
 8003500:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8003502:	2301      	movs	r3, #1
 8003504:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8003508:	bf00      	nop
    }

    if (pclk != 0U)
 800350a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800350c:	2b00      	cmp	r3, #0
 800350e:	d028      	beq.n	8003562 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003514:	4a10      	ldr	r2, [pc, #64]	; (8003558 <UART_SetConfig+0x5cc>)
 8003516:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800351a:	461a      	mov	r2, r3
 800351c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800351e:	fbb3 f2f2 	udiv	r2, r3, r2
 8003522:	697b      	ldr	r3, [r7, #20]
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	085b      	lsrs	r3, r3, #1
 8003528:	441a      	add	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003532:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003534:	6a3b      	ldr	r3, [r7, #32]
 8003536:	2b0f      	cmp	r3, #15
 8003538:	d910      	bls.n	800355c <UART_SetConfig+0x5d0>
 800353a:	6a3b      	ldr	r3, [r7, #32]
 800353c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003540:	d20c      	bcs.n	800355c <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003542:	6a3b      	ldr	r3, [r7, #32]
 8003544:	b29a      	uxth	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	60da      	str	r2, [r3, #12]
 800354c:	e009      	b.n	8003562 <UART_SetConfig+0x5d6>
 800354e:	bf00      	nop
 8003550:	40008000 	.word	0x40008000
 8003554:	00f42400 	.word	0x00f42400
 8003558:	08004c48 	.word	0x08004c48
      }
      else
      {
        ret = HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	2201      	movs	r2, #1
 8003566:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800356a:	697b      	ldr	r3, [r7, #20]
 800356c:	2201      	movs	r2, #1
 800356e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003572:	697b      	ldr	r3, [r7, #20]
 8003574:	2200      	movs	r2, #0
 8003576:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003578:	697b      	ldr	r3, [r7, #20]
 800357a:	2200      	movs	r2, #0
 800357c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800357e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8003582:	4618      	mov	r0, r3
 8003584:	3730      	adds	r7, #48	; 0x30
 8003586:	46bd      	mov	sp, r7
 8003588:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0800358c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f003 0301 	and.w	r3, r3, #1
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	430a      	orrs	r2, r1
 80035b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00a      	beq.n	80035d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	685b      	ldr	r3, [r3, #4]
 80035c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	430a      	orrs	r2, r1
 80035d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035dc:	f003 0304 	and.w	r3, r3, #4
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d00a      	beq.n	80035fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	430a      	orrs	r2, r1
 80035f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035fe:	f003 0308 	and.w	r3, r3, #8
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00a      	beq.n	800361c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	685b      	ldr	r3, [r3, #4]
 800360c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	430a      	orrs	r2, r1
 800361a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f003 0310 	and.w	r3, r3, #16
 8003624:	2b00      	cmp	r3, #0
 8003626:	d00a      	beq.n	800363e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	430a      	orrs	r2, r1
 800363c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003642:	f003 0320 	and.w	r3, r3, #32
 8003646:	2b00      	cmp	r3, #0
 8003648:	d00a      	beq.n	8003660 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003664:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d01a      	beq.n	80036a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	685b      	ldr	r3, [r3, #4]
 8003672:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800368a:	d10a      	bne.n	80036a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	685b      	ldr	r3, [r3, #4]
 8003692:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00a      	beq.n	80036c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	685b      	ldr	r3, [r3, #4]
 80036b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	605a      	str	r2, [r3, #4]
  }
}
 80036c4:	bf00      	nop
 80036c6:	370c      	adds	r7, #12
 80036c8:	46bd      	mov	sp, r7
 80036ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ce:	4770      	bx	lr

080036d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b098      	sub	sp, #96	; 0x60
 80036d4:	af02      	add	r7, sp, #8
 80036d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036e0:	f7fd fb54 	bl	8000d8c <HAL_GetTick>
 80036e4:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0308 	and.w	r3, r3, #8
 80036f0:	2b08      	cmp	r3, #8
 80036f2:	d12f      	bne.n	8003754 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80036fc:	2200      	movs	r2, #0
 80036fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f88e 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d022      	beq.n	8003754 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003722:	653b      	str	r3, [r7, #80]	; 0x50
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800372c:	647b      	str	r3, [r7, #68]	; 0x44
 800372e:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003732:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800373a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e6      	bne.n	800370e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003750:	2303      	movs	r3, #3
 8003752:	e063      	b.n	800381c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b04      	cmp	r3, #4
 8003760:	d149      	bne.n	80037f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003762:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800376a:	2200      	movs	r2, #0
 800376c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003770:	6878      	ldr	r0, [r7, #4]
 8003772:	f000 f857 	bl	8003824 <UART_WaitOnFlagUntilTimeout>
 8003776:	4603      	mov	r3, r0
 8003778:	2b00      	cmp	r3, #0
 800377a:	d03c      	beq.n	80037f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003784:	e853 3f00 	ldrex	r3, [r3]
 8003788:	623b      	str	r3, [r7, #32]
   return(result);
 800378a:	6a3b      	ldr	r3, [r7, #32]
 800378c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003790:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	461a      	mov	r2, r3
 8003798:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800379a:	633b      	str	r3, [r7, #48]	; 0x30
 800379c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800379e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80037a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037a2:	e841 2300 	strex	r3, r2, [r1]
 80037a6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80037a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1e6      	bne.n	800377c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	3308      	adds	r3, #8
 80037b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	e853 3f00 	ldrex	r3, [r3]
 80037bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f023 0301 	bic.w	r3, r3, #1
 80037c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	3308      	adds	r3, #8
 80037cc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037ce:	61fa      	str	r2, [r7, #28]
 80037d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d2:	69b9      	ldr	r1, [r7, #24]
 80037d4:	69fa      	ldr	r2, [r7, #28]
 80037d6:	e841 2300 	strex	r3, r2, [r1]
 80037da:	617b      	str	r3, [r7, #20]
   return(result);
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1e5      	bne.n	80037ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2220      	movs	r2, #32
 80037e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	2200      	movs	r2, #0
 80037ee:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f2:	2303      	movs	r3, #3
 80037f4:	e012      	b.n	800381c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2220      	movs	r2, #32
 80037fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2200      	movs	r2, #0
 8003810:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2200      	movs	r2, #0
 8003816:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3758      	adds	r7, #88	; 0x58
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}

08003824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003824:	b580      	push	{r7, lr}
 8003826:	b084      	sub	sp, #16
 8003828:	af00      	add	r7, sp, #0
 800382a:	60f8      	str	r0, [r7, #12]
 800382c:	60b9      	str	r1, [r7, #8]
 800382e:	603b      	str	r3, [r7, #0]
 8003830:	4613      	mov	r3, r2
 8003832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003834:	e049      	b.n	80038ca <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800383c:	d045      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800383e:	f7fd faa5 	bl	8000d8c <HAL_GetTick>
 8003842:	4602      	mov	r2, r0
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	1ad3      	subs	r3, r2, r3
 8003848:	69ba      	ldr	r2, [r7, #24]
 800384a:	429a      	cmp	r2, r3
 800384c:	d302      	bcc.n	8003854 <UART_WaitOnFlagUntilTimeout+0x30>
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e048      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 0304 	and.w	r3, r3, #4
 8003862:	2b00      	cmp	r3, #0
 8003864:	d031      	beq.n	80038ca <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	69db      	ldr	r3, [r3, #28]
 800386c:	f003 0308 	and.w	r3, r3, #8
 8003870:	2b08      	cmp	r3, #8
 8003872:	d110      	bne.n	8003896 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	2208      	movs	r2, #8
 800387a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 800387c:	68f8      	ldr	r0, [r7, #12]
 800387e:	f000 f838 	bl	80038f2 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003882:	68fb      	ldr	r3, [r7, #12]
 8003884:	2208      	movs	r2, #8
 8003886:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2200      	movs	r2, #0
 800388e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8003892:	2301      	movs	r3, #1
 8003894:	e029      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	69db      	ldr	r3, [r3, #28]
 800389c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80038a0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038a4:	d111      	bne.n	80038ca <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80038ae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038b0:	68f8      	ldr	r0, [r7, #12]
 80038b2:	f000 f81e 	bl	80038f2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2220      	movs	r2, #32
 80038ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	2200      	movs	r2, #0
 80038c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 80038c6:	2303      	movs	r3, #3
 80038c8:	e00f      	b.n	80038ea <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	69da      	ldr	r2, [r3, #28]
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	4013      	ands	r3, r2
 80038d4:	68ba      	ldr	r2, [r7, #8]
 80038d6:	429a      	cmp	r2, r3
 80038d8:	bf0c      	ite	eq
 80038da:	2301      	moveq	r3, #1
 80038dc:	2300      	movne	r3, #0
 80038de:	b2db      	uxtb	r3, r3
 80038e0:	461a      	mov	r2, r3
 80038e2:	79fb      	ldrb	r3, [r7, #7]
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d0a6      	beq.n	8003836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3710      	adds	r7, #16
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}

080038f2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b095      	sub	sp, #84	; 0x54
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003902:	e853 3f00 	ldrex	r3, [r3]
 8003906:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003908:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800390a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800390e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	461a      	mov	r2, r3
 8003916:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003918:	643b      	str	r3, [r7, #64]	; 0x40
 800391a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800391c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800391e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003920:	e841 2300 	strex	r3, r2, [r1]
 8003924:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003928:	2b00      	cmp	r3, #0
 800392a:	d1e6      	bne.n	80038fa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	3308      	adds	r3, #8
 8003932:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003934:	6a3b      	ldr	r3, [r7, #32]
 8003936:	e853 3f00 	ldrex	r3, [r3]
 800393a:	61fb      	str	r3, [r7, #28]
   return(result);
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003942:	f023 0301 	bic.w	r3, r3, #1
 8003946:	64bb      	str	r3, [r7, #72]	; 0x48
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	3308      	adds	r3, #8
 800394e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003950:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003952:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003954:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003956:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003958:	e841 2300 	strex	r3, r2, [r1]
 800395c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800395e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1e3      	bne.n	800392c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003968:	2b01      	cmp	r3, #1
 800396a:	d118      	bne.n	800399e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	e853 3f00 	ldrex	r3, [r3]
 8003978:	60bb      	str	r3, [r7, #8]
   return(result);
 800397a:	68bb      	ldr	r3, [r7, #8]
 800397c:	f023 0310 	bic.w	r3, r3, #16
 8003980:	647b      	str	r3, [r7, #68]	; 0x44
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	461a      	mov	r2, r3
 8003988:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800398a:	61bb      	str	r3, [r7, #24]
 800398c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398e:	6979      	ldr	r1, [r7, #20]
 8003990:	69ba      	ldr	r2, [r7, #24]
 8003992:	e841 2300 	strex	r3, r2, [r1]
 8003996:	613b      	str	r3, [r7, #16]
   return(result);
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d1e6      	bne.n	800396c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2220      	movs	r2, #32
 80039a2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2200      	movs	r2, #0
 80039b0:	675a      	str	r2, [r3, #116]	; 0x74
}
 80039b2:	bf00      	nop
 80039b4:	3754      	adds	r7, #84	; 0x54
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039be:	b480      	push	{r7}
 80039c0:	b085      	sub	sp, #20
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80039cc:	2b01      	cmp	r3, #1
 80039ce:	d101      	bne.n	80039d4 <HAL_UARTEx_DisableFifoMode+0x16>
 80039d0:	2302      	movs	r3, #2
 80039d2:	e027      	b.n	8003a24 <HAL_UARTEx_DisableFifoMode+0x66>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2224      	movs	r2, #36	; 0x24
 80039e0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f022 0201 	bic.w	r2, r2, #1
 80039fa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8003a02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2200      	movs	r2, #0
 8003a08:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68fa      	ldr	r2, [r7, #12]
 8003a10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2220      	movs	r2, #32
 8003a16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003a22:	2300      	movs	r3, #0
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3714      	adds	r7, #20
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2e:	4770      	bx	lr

08003a30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	6078      	str	r0, [r7, #4]
 8003a38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003a40:	2b01      	cmp	r3, #1
 8003a42:	d101      	bne.n	8003a48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a44:	2302      	movs	r3, #2
 8003a46:	e02d      	b.n	8003aa4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2224      	movs	r2, #36	; 0x24
 8003a54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 0201 	bic.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	689b      	ldr	r3, [r3, #8]
 8003a76:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	430a      	orrs	r2, r1
 8003a82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a84:	6878      	ldr	r0, [r7, #4]
 8003a86:	f000 f84f 	bl	8003b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	68fa      	ldr	r2, [r7, #12]
 8003a90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2220      	movs	r2, #32
 8003a96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003aa2:	2300      	movs	r3, #0
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3710      	adds	r7, #16
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d101      	bne.n	8003ac4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ac0:	2302      	movs	r3, #2
 8003ac2:	e02d      	b.n	8003b20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2201      	movs	r2, #1
 8003ac8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	2224      	movs	r2, #36	; 0x24
 8003ad0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	681a      	ldr	r2, [r3, #0]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f022 0201 	bic.w	r2, r2, #1
 8003aea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	683a      	ldr	r2, [r7, #0]
 8003afc:	430a      	orrs	r2, r1
 8003afe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b00:	6878      	ldr	r0, [r7, #4]
 8003b02:	f000 f811 	bl	8003b28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68fa      	ldr	r2, [r7, #12]
 8003b0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	2220      	movs	r2, #32
 8003b12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8003b1e:	2300      	movs	r3, #0
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}

08003b28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b28:	b480      	push	{r7}
 8003b2a:	b085      	sub	sp, #20
 8003b2c:	af00      	add	r7, sp, #0
 8003b2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d108      	bne.n	8003b4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2201      	movs	r2, #1
 8003b3c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2201      	movs	r2, #1
 8003b44:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b48:	e031      	b.n	8003bae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b4a:	2308      	movs	r3, #8
 8003b4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b4e:	2308      	movs	r3, #8
 8003b50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	0e5b      	lsrs	r3, r3, #25
 8003b5a:	b2db      	uxtb	r3, r3
 8003b5c:	f003 0307 	and.w	r3, r3, #7
 8003b60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	0f5b      	lsrs	r3, r3, #29
 8003b6a:	b2db      	uxtb	r3, r3
 8003b6c:	f003 0307 	and.w	r3, r3, #7
 8003b70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b72:	7bbb      	ldrb	r3, [r7, #14]
 8003b74:	7b3a      	ldrb	r2, [r7, #12]
 8003b76:	4911      	ldr	r1, [pc, #68]	; (8003bbc <UARTEx_SetNbDataToProcess+0x94>)
 8003b78:	5c8a      	ldrb	r2, [r1, r2]
 8003b7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003b7e:	7b3a      	ldrb	r2, [r7, #12]
 8003b80:	490f      	ldr	r1, [pc, #60]	; (8003bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8003b82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b84:	fb93 f3f2 	sdiv	r3, r3, r2
 8003b88:	b29a      	uxth	r2, r3
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	7b7a      	ldrb	r2, [r7, #13]
 8003b94:	4909      	ldr	r1, [pc, #36]	; (8003bbc <UARTEx_SetNbDataToProcess+0x94>)
 8003b96:	5c8a      	ldrb	r2, [r1, r2]
 8003b98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003b9c:	7b7a      	ldrb	r2, [r7, #13]
 8003b9e:	4908      	ldr	r1, [pc, #32]	; (8003bc0 <UARTEx_SetNbDataToProcess+0x98>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ba2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003ba6:	b29a      	uxth	r2, r3
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8003bae:	bf00      	nop
 8003bb0:	3714      	adds	r7, #20
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb8:	4770      	bx	lr
 8003bba:	bf00      	nop
 8003bbc:	08004c60 	.word	0x08004c60
 8003bc0:	08004c68 	.word	0x08004c68

08003bc4 <__errno>:
 8003bc4:	4b01      	ldr	r3, [pc, #4]	; (8003bcc <__errno+0x8>)
 8003bc6:	6818      	ldr	r0, [r3, #0]
 8003bc8:	4770      	bx	lr
 8003bca:	bf00      	nop
 8003bcc:	20000018 	.word	0x20000018

08003bd0 <__libc_init_array>:
 8003bd0:	b570      	push	{r4, r5, r6, lr}
 8003bd2:	4d0d      	ldr	r5, [pc, #52]	; (8003c08 <__libc_init_array+0x38>)
 8003bd4:	2600      	movs	r6, #0
 8003bd6:	4c0d      	ldr	r4, [pc, #52]	; (8003c0c <__libc_init_array+0x3c>)
 8003bd8:	1b64      	subs	r4, r4, r5
 8003bda:	10a4      	asrs	r4, r4, #2
 8003bdc:	42a6      	cmp	r6, r4
 8003bde:	d109      	bne.n	8003bf4 <__libc_init_array+0x24>
 8003be0:	4d0b      	ldr	r5, [pc, #44]	; (8003c10 <__libc_init_array+0x40>)
 8003be2:	2600      	movs	r6, #0
 8003be4:	4c0b      	ldr	r4, [pc, #44]	; (8003c14 <__libc_init_array+0x44>)
 8003be6:	f000 ffbb 	bl	8004b60 <_init>
 8003bea:	1b64      	subs	r4, r4, r5
 8003bec:	10a4      	asrs	r4, r4, #2
 8003bee:	42a6      	cmp	r6, r4
 8003bf0:	d105      	bne.n	8003bfe <__libc_init_array+0x2e>
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
 8003bf4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bf8:	3601      	adds	r6, #1
 8003bfa:	4798      	blx	r3
 8003bfc:	e7ee      	b.n	8003bdc <__libc_init_array+0xc>
 8003bfe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003c02:	3601      	adds	r6, #1
 8003c04:	4798      	blx	r3
 8003c06:	e7f2      	b.n	8003bee <__libc_init_array+0x1e>
 8003c08:	08004d10 	.word	0x08004d10
 8003c0c:	08004d10 	.word	0x08004d10
 8003c10:	08004d10 	.word	0x08004d10
 8003c14:	08004d14 	.word	0x08004d14

08003c18 <memset>:
 8003c18:	4402      	add	r2, r0
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d100      	bne.n	8003c22 <memset+0xa>
 8003c20:	4770      	bx	lr
 8003c22:	f803 1b01 	strb.w	r1, [r3], #1
 8003c26:	e7f9      	b.n	8003c1c <memset+0x4>

08003c28 <iprintf>:
 8003c28:	b40f      	push	{r0, r1, r2, r3}
 8003c2a:	4b0a      	ldr	r3, [pc, #40]	; (8003c54 <iprintf+0x2c>)
 8003c2c:	b513      	push	{r0, r1, r4, lr}
 8003c2e:	681c      	ldr	r4, [r3, #0]
 8003c30:	b124      	cbz	r4, 8003c3c <iprintf+0x14>
 8003c32:	69a3      	ldr	r3, [r4, #24]
 8003c34:	b913      	cbnz	r3, 8003c3c <iprintf+0x14>
 8003c36:	4620      	mov	r0, r4
 8003c38:	f000 f866 	bl	8003d08 <__sinit>
 8003c3c:	ab05      	add	r3, sp, #20
 8003c3e:	9a04      	ldr	r2, [sp, #16]
 8003c40:	68a1      	ldr	r1, [r4, #8]
 8003c42:	4620      	mov	r0, r4
 8003c44:	9301      	str	r3, [sp, #4]
 8003c46:	f000 f9bd 	bl	8003fc4 <_vfiprintf_r>
 8003c4a:	b002      	add	sp, #8
 8003c4c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c50:	b004      	add	sp, #16
 8003c52:	4770      	bx	lr
 8003c54:	20000018 	.word	0x20000018

08003c58 <std>:
 8003c58:	2300      	movs	r3, #0
 8003c5a:	b510      	push	{r4, lr}
 8003c5c:	4604      	mov	r4, r0
 8003c5e:	6083      	str	r3, [r0, #8]
 8003c60:	8181      	strh	r1, [r0, #12]
 8003c62:	4619      	mov	r1, r3
 8003c64:	6643      	str	r3, [r0, #100]	; 0x64
 8003c66:	81c2      	strh	r2, [r0, #14]
 8003c68:	2208      	movs	r2, #8
 8003c6a:	6183      	str	r3, [r0, #24]
 8003c6c:	e9c0 3300 	strd	r3, r3, [r0]
 8003c70:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003c74:	305c      	adds	r0, #92	; 0x5c
 8003c76:	f7ff ffcf 	bl	8003c18 <memset>
 8003c7a:	4b05      	ldr	r3, [pc, #20]	; (8003c90 <std+0x38>)
 8003c7c:	6224      	str	r4, [r4, #32]
 8003c7e:	6263      	str	r3, [r4, #36]	; 0x24
 8003c80:	4b04      	ldr	r3, [pc, #16]	; (8003c94 <std+0x3c>)
 8003c82:	62a3      	str	r3, [r4, #40]	; 0x28
 8003c84:	4b04      	ldr	r3, [pc, #16]	; (8003c98 <std+0x40>)
 8003c86:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003c88:	4b04      	ldr	r3, [pc, #16]	; (8003c9c <std+0x44>)
 8003c8a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c8c:	bd10      	pop	{r4, pc}
 8003c8e:	bf00      	nop
 8003c90:	08004571 	.word	0x08004571
 8003c94:	08004593 	.word	0x08004593
 8003c98:	080045cb 	.word	0x080045cb
 8003c9c:	080045ef 	.word	0x080045ef

08003ca0 <_cleanup_r>:
 8003ca0:	4901      	ldr	r1, [pc, #4]	; (8003ca8 <_cleanup_r+0x8>)
 8003ca2:	f000 b8af 	b.w	8003e04 <_fwalk_reent>
 8003ca6:	bf00      	nop
 8003ca8:	080048c5 	.word	0x080048c5

08003cac <__sfmoreglue>:
 8003cac:	b570      	push	{r4, r5, r6, lr}
 8003cae:	2268      	movs	r2, #104	; 0x68
 8003cb0:	1e4d      	subs	r5, r1, #1
 8003cb2:	460e      	mov	r6, r1
 8003cb4:	4355      	muls	r5, r2
 8003cb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003cba:	f000 f8e5 	bl	8003e88 <_malloc_r>
 8003cbe:	4604      	mov	r4, r0
 8003cc0:	b140      	cbz	r0, 8003cd4 <__sfmoreglue+0x28>
 8003cc2:	2100      	movs	r1, #0
 8003cc4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003cc8:	e9c0 1600 	strd	r1, r6, [r0]
 8003ccc:	300c      	adds	r0, #12
 8003cce:	60a0      	str	r0, [r4, #8]
 8003cd0:	f7ff ffa2 	bl	8003c18 <memset>
 8003cd4:	4620      	mov	r0, r4
 8003cd6:	bd70      	pop	{r4, r5, r6, pc}

08003cd8 <__sfp_lock_acquire>:
 8003cd8:	4801      	ldr	r0, [pc, #4]	; (8003ce0 <__sfp_lock_acquire+0x8>)
 8003cda:	f000 b8b3 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8003cde:	bf00      	nop
 8003ce0:	20000139 	.word	0x20000139

08003ce4 <__sfp_lock_release>:
 8003ce4:	4801      	ldr	r0, [pc, #4]	; (8003cec <__sfp_lock_release+0x8>)
 8003ce6:	f000 b8ae 	b.w	8003e46 <__retarget_lock_release_recursive>
 8003cea:	bf00      	nop
 8003cec:	20000139 	.word	0x20000139

08003cf0 <__sinit_lock_acquire>:
 8003cf0:	4801      	ldr	r0, [pc, #4]	; (8003cf8 <__sinit_lock_acquire+0x8>)
 8003cf2:	f000 b8a7 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8003cf6:	bf00      	nop
 8003cf8:	2000013a 	.word	0x2000013a

08003cfc <__sinit_lock_release>:
 8003cfc:	4801      	ldr	r0, [pc, #4]	; (8003d04 <__sinit_lock_release+0x8>)
 8003cfe:	f000 b8a2 	b.w	8003e46 <__retarget_lock_release_recursive>
 8003d02:	bf00      	nop
 8003d04:	2000013a 	.word	0x2000013a

08003d08 <__sinit>:
 8003d08:	b510      	push	{r4, lr}
 8003d0a:	4604      	mov	r4, r0
 8003d0c:	f7ff fff0 	bl	8003cf0 <__sinit_lock_acquire>
 8003d10:	69a3      	ldr	r3, [r4, #24]
 8003d12:	b11b      	cbz	r3, 8003d1c <__sinit+0x14>
 8003d14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d18:	f7ff bff0 	b.w	8003cfc <__sinit_lock_release>
 8003d1c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8003d20:	6523      	str	r3, [r4, #80]	; 0x50
 8003d22:	4620      	mov	r0, r4
 8003d24:	4b12      	ldr	r3, [pc, #72]	; (8003d70 <__sinit+0x68>)
 8003d26:	4a13      	ldr	r2, [pc, #76]	; (8003d74 <__sinit+0x6c>)
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	62a2      	str	r2, [r4, #40]	; 0x28
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	bf04      	itt	eq
 8003d30:	2301      	moveq	r3, #1
 8003d32:	61a3      	streq	r3, [r4, #24]
 8003d34:	f000 f820 	bl	8003d78 <__sfp>
 8003d38:	6060      	str	r0, [r4, #4]
 8003d3a:	4620      	mov	r0, r4
 8003d3c:	f000 f81c 	bl	8003d78 <__sfp>
 8003d40:	60a0      	str	r0, [r4, #8]
 8003d42:	4620      	mov	r0, r4
 8003d44:	f000 f818 	bl	8003d78 <__sfp>
 8003d48:	2200      	movs	r2, #0
 8003d4a:	2104      	movs	r1, #4
 8003d4c:	60e0      	str	r0, [r4, #12]
 8003d4e:	6860      	ldr	r0, [r4, #4]
 8003d50:	f7ff ff82 	bl	8003c58 <std>
 8003d54:	2201      	movs	r2, #1
 8003d56:	2109      	movs	r1, #9
 8003d58:	68a0      	ldr	r0, [r4, #8]
 8003d5a:	f7ff ff7d 	bl	8003c58 <std>
 8003d5e:	2202      	movs	r2, #2
 8003d60:	2112      	movs	r1, #18
 8003d62:	68e0      	ldr	r0, [r4, #12]
 8003d64:	f7ff ff78 	bl	8003c58 <std>
 8003d68:	2301      	movs	r3, #1
 8003d6a:	61a3      	str	r3, [r4, #24]
 8003d6c:	e7d2      	b.n	8003d14 <__sinit+0xc>
 8003d6e:	bf00      	nop
 8003d70:	08004c70 	.word	0x08004c70
 8003d74:	08003ca1 	.word	0x08003ca1

08003d78 <__sfp>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	4607      	mov	r7, r0
 8003d7c:	f7ff ffac 	bl	8003cd8 <__sfp_lock_acquire>
 8003d80:	4b1e      	ldr	r3, [pc, #120]	; (8003dfc <__sfp+0x84>)
 8003d82:	681e      	ldr	r6, [r3, #0]
 8003d84:	69b3      	ldr	r3, [r6, #24]
 8003d86:	b913      	cbnz	r3, 8003d8e <__sfp+0x16>
 8003d88:	4630      	mov	r0, r6
 8003d8a:	f7ff ffbd 	bl	8003d08 <__sinit>
 8003d8e:	3648      	adds	r6, #72	; 0x48
 8003d90:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003d94:	3b01      	subs	r3, #1
 8003d96:	d503      	bpl.n	8003da0 <__sfp+0x28>
 8003d98:	6833      	ldr	r3, [r6, #0]
 8003d9a:	b30b      	cbz	r3, 8003de0 <__sfp+0x68>
 8003d9c:	6836      	ldr	r6, [r6, #0]
 8003d9e:	e7f7      	b.n	8003d90 <__sfp+0x18>
 8003da0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003da4:	b9d5      	cbnz	r5, 8003ddc <__sfp+0x64>
 8003da6:	4b16      	ldr	r3, [pc, #88]	; (8003e00 <__sfp+0x88>)
 8003da8:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8003dac:	6665      	str	r5, [r4, #100]	; 0x64
 8003dae:	60e3      	str	r3, [r4, #12]
 8003db0:	f000 f847 	bl	8003e42 <__retarget_lock_init_recursive>
 8003db4:	f7ff ff96 	bl	8003ce4 <__sfp_lock_release>
 8003db8:	2208      	movs	r2, #8
 8003dba:	4629      	mov	r1, r5
 8003dbc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003dc0:	6025      	str	r5, [r4, #0]
 8003dc2:	61a5      	str	r5, [r4, #24]
 8003dc4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8003dc8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8003dcc:	f7ff ff24 	bl	8003c18 <memset>
 8003dd0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003dd4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003dd8:	4620      	mov	r0, r4
 8003dda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ddc:	3468      	adds	r4, #104	; 0x68
 8003dde:	e7d9      	b.n	8003d94 <__sfp+0x1c>
 8003de0:	2104      	movs	r1, #4
 8003de2:	4638      	mov	r0, r7
 8003de4:	f7ff ff62 	bl	8003cac <__sfmoreglue>
 8003de8:	4604      	mov	r4, r0
 8003dea:	6030      	str	r0, [r6, #0]
 8003dec:	2800      	cmp	r0, #0
 8003dee:	d1d5      	bne.n	8003d9c <__sfp+0x24>
 8003df0:	f7ff ff78 	bl	8003ce4 <__sfp_lock_release>
 8003df4:	230c      	movs	r3, #12
 8003df6:	603b      	str	r3, [r7, #0]
 8003df8:	e7ee      	b.n	8003dd8 <__sfp+0x60>
 8003dfa:	bf00      	nop
 8003dfc:	08004c70 	.word	0x08004c70
 8003e00:	ffff0001 	.word	0xffff0001

08003e04 <_fwalk_reent>:
 8003e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003e08:	4606      	mov	r6, r0
 8003e0a:	4688      	mov	r8, r1
 8003e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003e10:	2700      	movs	r7, #0
 8003e12:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003e16:	f1b9 0901 	subs.w	r9, r9, #1
 8003e1a:	d505      	bpl.n	8003e28 <_fwalk_reent+0x24>
 8003e1c:	6824      	ldr	r4, [r4, #0]
 8003e1e:	2c00      	cmp	r4, #0
 8003e20:	d1f7      	bne.n	8003e12 <_fwalk_reent+0xe>
 8003e22:	4638      	mov	r0, r7
 8003e24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003e28:	89ab      	ldrh	r3, [r5, #12]
 8003e2a:	2b01      	cmp	r3, #1
 8003e2c:	d907      	bls.n	8003e3e <_fwalk_reent+0x3a>
 8003e2e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003e32:	3301      	adds	r3, #1
 8003e34:	d003      	beq.n	8003e3e <_fwalk_reent+0x3a>
 8003e36:	4629      	mov	r1, r5
 8003e38:	4630      	mov	r0, r6
 8003e3a:	47c0      	blx	r8
 8003e3c:	4307      	orrs	r7, r0
 8003e3e:	3568      	adds	r5, #104	; 0x68
 8003e40:	e7e9      	b.n	8003e16 <_fwalk_reent+0x12>

08003e42 <__retarget_lock_init_recursive>:
 8003e42:	4770      	bx	lr

08003e44 <__retarget_lock_acquire_recursive>:
 8003e44:	4770      	bx	lr

08003e46 <__retarget_lock_release_recursive>:
 8003e46:	4770      	bx	lr

08003e48 <sbrk_aligned>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4e0e      	ldr	r6, [pc, #56]	; (8003e84 <sbrk_aligned+0x3c>)
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	4605      	mov	r5, r0
 8003e50:	6831      	ldr	r1, [r6, #0]
 8003e52:	b911      	cbnz	r1, 8003e5a <sbrk_aligned+0x12>
 8003e54:	f000 fb7c 	bl	8004550 <_sbrk_r>
 8003e58:	6030      	str	r0, [r6, #0]
 8003e5a:	4621      	mov	r1, r4
 8003e5c:	4628      	mov	r0, r5
 8003e5e:	f000 fb77 	bl	8004550 <_sbrk_r>
 8003e62:	1c43      	adds	r3, r0, #1
 8003e64:	d00a      	beq.n	8003e7c <sbrk_aligned+0x34>
 8003e66:	1cc4      	adds	r4, r0, #3
 8003e68:	f024 0403 	bic.w	r4, r4, #3
 8003e6c:	42a0      	cmp	r0, r4
 8003e6e:	d007      	beq.n	8003e80 <sbrk_aligned+0x38>
 8003e70:	1a21      	subs	r1, r4, r0
 8003e72:	4628      	mov	r0, r5
 8003e74:	f000 fb6c 	bl	8004550 <_sbrk_r>
 8003e78:	3001      	adds	r0, #1
 8003e7a:	d101      	bne.n	8003e80 <sbrk_aligned+0x38>
 8003e7c:	f04f 34ff 	mov.w	r4, #4294967295
 8003e80:	4620      	mov	r0, r4
 8003e82:	bd70      	pop	{r4, r5, r6, pc}
 8003e84:	20000140 	.word	0x20000140

08003e88 <_malloc_r>:
 8003e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e8c:	1ccd      	adds	r5, r1, #3
 8003e8e:	4607      	mov	r7, r0
 8003e90:	f025 0503 	bic.w	r5, r5, #3
 8003e94:	3508      	adds	r5, #8
 8003e96:	2d0c      	cmp	r5, #12
 8003e98:	bf38      	it	cc
 8003e9a:	250c      	movcc	r5, #12
 8003e9c:	2d00      	cmp	r5, #0
 8003e9e:	db01      	blt.n	8003ea4 <_malloc_r+0x1c>
 8003ea0:	42a9      	cmp	r1, r5
 8003ea2:	d905      	bls.n	8003eb0 <_malloc_r+0x28>
 8003ea4:	230c      	movs	r3, #12
 8003ea6:	2600      	movs	r6, #0
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4630      	mov	r0, r6
 8003eac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003eb0:	4e2e      	ldr	r6, [pc, #184]	; (8003f6c <_malloc_r+0xe4>)
 8003eb2:	f000 fdc9 	bl	8004a48 <__malloc_lock>
 8003eb6:	6833      	ldr	r3, [r6, #0]
 8003eb8:	461c      	mov	r4, r3
 8003eba:	bb34      	cbnz	r4, 8003f0a <_malloc_r+0x82>
 8003ebc:	4629      	mov	r1, r5
 8003ebe:	4638      	mov	r0, r7
 8003ec0:	f7ff ffc2 	bl	8003e48 <sbrk_aligned>
 8003ec4:	1c43      	adds	r3, r0, #1
 8003ec6:	4604      	mov	r4, r0
 8003ec8:	d14d      	bne.n	8003f66 <_malloc_r+0xde>
 8003eca:	6834      	ldr	r4, [r6, #0]
 8003ecc:	4626      	mov	r6, r4
 8003ece:	2e00      	cmp	r6, #0
 8003ed0:	d140      	bne.n	8003f54 <_malloc_r+0xcc>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	4631      	mov	r1, r6
 8003ed6:	4638      	mov	r0, r7
 8003ed8:	eb04 0803 	add.w	r8, r4, r3
 8003edc:	f000 fb38 	bl	8004550 <_sbrk_r>
 8003ee0:	4580      	cmp	r8, r0
 8003ee2:	d13a      	bne.n	8003f5a <_malloc_r+0xd2>
 8003ee4:	6821      	ldr	r1, [r4, #0]
 8003ee6:	3503      	adds	r5, #3
 8003ee8:	4638      	mov	r0, r7
 8003eea:	1a6d      	subs	r5, r5, r1
 8003eec:	f025 0503 	bic.w	r5, r5, #3
 8003ef0:	3508      	adds	r5, #8
 8003ef2:	2d0c      	cmp	r5, #12
 8003ef4:	bf38      	it	cc
 8003ef6:	250c      	movcc	r5, #12
 8003ef8:	4629      	mov	r1, r5
 8003efa:	f7ff ffa5 	bl	8003e48 <sbrk_aligned>
 8003efe:	3001      	adds	r0, #1
 8003f00:	d02b      	beq.n	8003f5a <_malloc_r+0xd2>
 8003f02:	6823      	ldr	r3, [r4, #0]
 8003f04:	442b      	add	r3, r5
 8003f06:	6023      	str	r3, [r4, #0]
 8003f08:	e00e      	b.n	8003f28 <_malloc_r+0xa0>
 8003f0a:	6822      	ldr	r2, [r4, #0]
 8003f0c:	1b52      	subs	r2, r2, r5
 8003f0e:	d41e      	bmi.n	8003f4e <_malloc_r+0xc6>
 8003f10:	2a0b      	cmp	r2, #11
 8003f12:	d916      	bls.n	8003f42 <_malloc_r+0xba>
 8003f14:	1961      	adds	r1, r4, r5
 8003f16:	42a3      	cmp	r3, r4
 8003f18:	6025      	str	r5, [r4, #0]
 8003f1a:	bf18      	it	ne
 8003f1c:	6059      	strne	r1, [r3, #4]
 8003f1e:	6863      	ldr	r3, [r4, #4]
 8003f20:	bf08      	it	eq
 8003f22:	6031      	streq	r1, [r6, #0]
 8003f24:	5162      	str	r2, [r4, r5]
 8003f26:	604b      	str	r3, [r1, #4]
 8003f28:	f104 060b 	add.w	r6, r4, #11
 8003f2c:	4638      	mov	r0, r7
 8003f2e:	f000 fd91 	bl	8004a54 <__malloc_unlock>
 8003f32:	1d23      	adds	r3, r4, #4
 8003f34:	f026 0607 	bic.w	r6, r6, #7
 8003f38:	1af2      	subs	r2, r6, r3
 8003f3a:	d0b6      	beq.n	8003eaa <_malloc_r+0x22>
 8003f3c:	1b9b      	subs	r3, r3, r6
 8003f3e:	50a3      	str	r3, [r4, r2]
 8003f40:	e7b3      	b.n	8003eaa <_malloc_r+0x22>
 8003f42:	6862      	ldr	r2, [r4, #4]
 8003f44:	42a3      	cmp	r3, r4
 8003f46:	bf0c      	ite	eq
 8003f48:	6032      	streq	r2, [r6, #0]
 8003f4a:	605a      	strne	r2, [r3, #4]
 8003f4c:	e7ec      	b.n	8003f28 <_malloc_r+0xa0>
 8003f4e:	4623      	mov	r3, r4
 8003f50:	6864      	ldr	r4, [r4, #4]
 8003f52:	e7b2      	b.n	8003eba <_malloc_r+0x32>
 8003f54:	4634      	mov	r4, r6
 8003f56:	6876      	ldr	r6, [r6, #4]
 8003f58:	e7b9      	b.n	8003ece <_malloc_r+0x46>
 8003f5a:	230c      	movs	r3, #12
 8003f5c:	4638      	mov	r0, r7
 8003f5e:	603b      	str	r3, [r7, #0]
 8003f60:	f000 fd78 	bl	8004a54 <__malloc_unlock>
 8003f64:	e7a1      	b.n	8003eaa <_malloc_r+0x22>
 8003f66:	6025      	str	r5, [r4, #0]
 8003f68:	e7de      	b.n	8003f28 <_malloc_r+0xa0>
 8003f6a:	bf00      	nop
 8003f6c:	2000013c 	.word	0x2000013c

08003f70 <__sfputc_r>:
 8003f70:	6893      	ldr	r3, [r2, #8]
 8003f72:	3b01      	subs	r3, #1
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	6093      	str	r3, [r2, #8]
 8003f78:	b410      	push	{r4}
 8003f7a:	da08      	bge.n	8003f8e <__sfputc_r+0x1e>
 8003f7c:	6994      	ldr	r4, [r2, #24]
 8003f7e:	42a3      	cmp	r3, r4
 8003f80:	db01      	blt.n	8003f86 <__sfputc_r+0x16>
 8003f82:	290a      	cmp	r1, #10
 8003f84:	d103      	bne.n	8003f8e <__sfputc_r+0x1e>
 8003f86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f8a:	f000 bb35 	b.w	80045f8 <__swbuf_r>
 8003f8e:	6813      	ldr	r3, [r2, #0]
 8003f90:	1c58      	adds	r0, r3, #1
 8003f92:	6010      	str	r0, [r2, #0]
 8003f94:	4608      	mov	r0, r1
 8003f96:	7019      	strb	r1, [r3, #0]
 8003f98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003f9c:	4770      	bx	lr

08003f9e <__sfputs_r>:
 8003f9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fa0:	4606      	mov	r6, r0
 8003fa2:	460f      	mov	r7, r1
 8003fa4:	4614      	mov	r4, r2
 8003fa6:	18d5      	adds	r5, r2, r3
 8003fa8:	42ac      	cmp	r4, r5
 8003faa:	d101      	bne.n	8003fb0 <__sfputs_r+0x12>
 8003fac:	2000      	movs	r0, #0
 8003fae:	e007      	b.n	8003fc0 <__sfputs_r+0x22>
 8003fb0:	463a      	mov	r2, r7
 8003fb2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003fb6:	4630      	mov	r0, r6
 8003fb8:	f7ff ffda 	bl	8003f70 <__sfputc_r>
 8003fbc:	1c43      	adds	r3, r0, #1
 8003fbe:	d1f3      	bne.n	8003fa8 <__sfputs_r+0xa>
 8003fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003fc4 <_vfiprintf_r>:
 8003fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fc8:	460d      	mov	r5, r1
 8003fca:	b09d      	sub	sp, #116	; 0x74
 8003fcc:	4614      	mov	r4, r2
 8003fce:	4698      	mov	r8, r3
 8003fd0:	4606      	mov	r6, r0
 8003fd2:	b118      	cbz	r0, 8003fdc <_vfiprintf_r+0x18>
 8003fd4:	6983      	ldr	r3, [r0, #24]
 8003fd6:	b90b      	cbnz	r3, 8003fdc <_vfiprintf_r+0x18>
 8003fd8:	f7ff fe96 	bl	8003d08 <__sinit>
 8003fdc:	4b89      	ldr	r3, [pc, #548]	; (8004204 <_vfiprintf_r+0x240>)
 8003fde:	429d      	cmp	r5, r3
 8003fe0:	d11b      	bne.n	800401a <_vfiprintf_r+0x56>
 8003fe2:	6875      	ldr	r5, [r6, #4]
 8003fe4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8003fe6:	07d9      	lsls	r1, r3, #31
 8003fe8:	d405      	bmi.n	8003ff6 <_vfiprintf_r+0x32>
 8003fea:	89ab      	ldrh	r3, [r5, #12]
 8003fec:	059a      	lsls	r2, r3, #22
 8003fee:	d402      	bmi.n	8003ff6 <_vfiprintf_r+0x32>
 8003ff0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8003ff2:	f7ff ff27 	bl	8003e44 <__retarget_lock_acquire_recursive>
 8003ff6:	89ab      	ldrh	r3, [r5, #12]
 8003ff8:	071b      	lsls	r3, r3, #28
 8003ffa:	d501      	bpl.n	8004000 <_vfiprintf_r+0x3c>
 8003ffc:	692b      	ldr	r3, [r5, #16]
 8003ffe:	b9eb      	cbnz	r3, 800403c <_vfiprintf_r+0x78>
 8004000:	4629      	mov	r1, r5
 8004002:	4630      	mov	r0, r6
 8004004:	f000 fb5c 	bl	80046c0 <__swsetup_r>
 8004008:	b1c0      	cbz	r0, 800403c <_vfiprintf_r+0x78>
 800400a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800400c:	07dc      	lsls	r4, r3, #31
 800400e:	d50e      	bpl.n	800402e <_vfiprintf_r+0x6a>
 8004010:	f04f 30ff 	mov.w	r0, #4294967295
 8004014:	b01d      	add	sp, #116	; 0x74
 8004016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800401a:	4b7b      	ldr	r3, [pc, #492]	; (8004208 <_vfiprintf_r+0x244>)
 800401c:	429d      	cmp	r5, r3
 800401e:	d101      	bne.n	8004024 <_vfiprintf_r+0x60>
 8004020:	68b5      	ldr	r5, [r6, #8]
 8004022:	e7df      	b.n	8003fe4 <_vfiprintf_r+0x20>
 8004024:	4b79      	ldr	r3, [pc, #484]	; (800420c <_vfiprintf_r+0x248>)
 8004026:	429d      	cmp	r5, r3
 8004028:	bf08      	it	eq
 800402a:	68f5      	ldreq	r5, [r6, #12]
 800402c:	e7da      	b.n	8003fe4 <_vfiprintf_r+0x20>
 800402e:	89ab      	ldrh	r3, [r5, #12]
 8004030:	0598      	lsls	r0, r3, #22
 8004032:	d4ed      	bmi.n	8004010 <_vfiprintf_r+0x4c>
 8004034:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8004036:	f7ff ff06 	bl	8003e46 <__retarget_lock_release_recursive>
 800403a:	e7e9      	b.n	8004010 <_vfiprintf_r+0x4c>
 800403c:	2300      	movs	r3, #0
 800403e:	f8cd 800c 	str.w	r8, [sp, #12]
 8004042:	f04f 0901 	mov.w	r9, #1
 8004046:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8004210 <_vfiprintf_r+0x24c>
 800404a:	9309      	str	r3, [sp, #36]	; 0x24
 800404c:	2320      	movs	r3, #32
 800404e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004052:	2330      	movs	r3, #48	; 0x30
 8004054:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004058:	4623      	mov	r3, r4
 800405a:	469a      	mov	sl, r3
 800405c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004060:	b10a      	cbz	r2, 8004066 <_vfiprintf_r+0xa2>
 8004062:	2a25      	cmp	r2, #37	; 0x25
 8004064:	d1f9      	bne.n	800405a <_vfiprintf_r+0x96>
 8004066:	ebba 0b04 	subs.w	fp, sl, r4
 800406a:	d00b      	beq.n	8004084 <_vfiprintf_r+0xc0>
 800406c:	465b      	mov	r3, fp
 800406e:	4622      	mov	r2, r4
 8004070:	4629      	mov	r1, r5
 8004072:	4630      	mov	r0, r6
 8004074:	f7ff ff93 	bl	8003f9e <__sfputs_r>
 8004078:	3001      	adds	r0, #1
 800407a:	f000 80aa 	beq.w	80041d2 <_vfiprintf_r+0x20e>
 800407e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004080:	445a      	add	r2, fp
 8004082:	9209      	str	r2, [sp, #36]	; 0x24
 8004084:	f89a 3000 	ldrb.w	r3, [sl]
 8004088:	2b00      	cmp	r3, #0
 800408a:	f000 80a2 	beq.w	80041d2 <_vfiprintf_r+0x20e>
 800408e:	2300      	movs	r3, #0
 8004090:	f04f 32ff 	mov.w	r2, #4294967295
 8004094:	f10a 0a01 	add.w	sl, sl, #1
 8004098:	9304      	str	r3, [sp, #16]
 800409a:	9307      	str	r3, [sp, #28]
 800409c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040a0:	931a      	str	r3, [sp, #104]	; 0x68
 80040a2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040a6:	4654      	mov	r4, sl
 80040a8:	2205      	movs	r2, #5
 80040aa:	4859      	ldr	r0, [pc, #356]	; (8004210 <_vfiprintf_r+0x24c>)
 80040ac:	f814 1b01 	ldrb.w	r1, [r4], #1
 80040b0:	f000 fcbc 	bl	8004a2c <memchr>
 80040b4:	9a04      	ldr	r2, [sp, #16]
 80040b6:	b9d8      	cbnz	r0, 80040f0 <_vfiprintf_r+0x12c>
 80040b8:	06d1      	lsls	r1, r2, #27
 80040ba:	bf44      	itt	mi
 80040bc:	2320      	movmi	r3, #32
 80040be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040c2:	0713      	lsls	r3, r2, #28
 80040c4:	bf44      	itt	mi
 80040c6:	232b      	movmi	r3, #43	; 0x2b
 80040c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80040cc:	f89a 3000 	ldrb.w	r3, [sl]
 80040d0:	2b2a      	cmp	r3, #42	; 0x2a
 80040d2:	d015      	beq.n	8004100 <_vfiprintf_r+0x13c>
 80040d4:	9a07      	ldr	r2, [sp, #28]
 80040d6:	4654      	mov	r4, sl
 80040d8:	2000      	movs	r0, #0
 80040da:	f04f 0c0a 	mov.w	ip, #10
 80040de:	4621      	mov	r1, r4
 80040e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80040e4:	3b30      	subs	r3, #48	; 0x30
 80040e6:	2b09      	cmp	r3, #9
 80040e8:	d94e      	bls.n	8004188 <_vfiprintf_r+0x1c4>
 80040ea:	b1b0      	cbz	r0, 800411a <_vfiprintf_r+0x156>
 80040ec:	9207      	str	r2, [sp, #28]
 80040ee:	e014      	b.n	800411a <_vfiprintf_r+0x156>
 80040f0:	eba0 0308 	sub.w	r3, r0, r8
 80040f4:	46a2      	mov	sl, r4
 80040f6:	fa09 f303 	lsl.w	r3, r9, r3
 80040fa:	4313      	orrs	r3, r2
 80040fc:	9304      	str	r3, [sp, #16]
 80040fe:	e7d2      	b.n	80040a6 <_vfiprintf_r+0xe2>
 8004100:	9b03      	ldr	r3, [sp, #12]
 8004102:	1d19      	adds	r1, r3, #4
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b00      	cmp	r3, #0
 8004108:	9103      	str	r1, [sp, #12]
 800410a:	bfbb      	ittet	lt
 800410c:	425b      	neglt	r3, r3
 800410e:	f042 0202 	orrlt.w	r2, r2, #2
 8004112:	9307      	strge	r3, [sp, #28]
 8004114:	9307      	strlt	r3, [sp, #28]
 8004116:	bfb8      	it	lt
 8004118:	9204      	strlt	r2, [sp, #16]
 800411a:	7823      	ldrb	r3, [r4, #0]
 800411c:	2b2e      	cmp	r3, #46	; 0x2e
 800411e:	d10c      	bne.n	800413a <_vfiprintf_r+0x176>
 8004120:	7863      	ldrb	r3, [r4, #1]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d135      	bne.n	8004192 <_vfiprintf_r+0x1ce>
 8004126:	9b03      	ldr	r3, [sp, #12]
 8004128:	3402      	adds	r4, #2
 800412a:	1d1a      	adds	r2, r3, #4
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	2b00      	cmp	r3, #0
 8004130:	9203      	str	r2, [sp, #12]
 8004132:	bfb8      	it	lt
 8004134:	f04f 33ff 	movlt.w	r3, #4294967295
 8004138:	9305      	str	r3, [sp, #20]
 800413a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8004220 <_vfiprintf_r+0x25c>
 800413e:	2203      	movs	r2, #3
 8004140:	7821      	ldrb	r1, [r4, #0]
 8004142:	4650      	mov	r0, sl
 8004144:	f000 fc72 	bl	8004a2c <memchr>
 8004148:	b140      	cbz	r0, 800415c <_vfiprintf_r+0x198>
 800414a:	2340      	movs	r3, #64	; 0x40
 800414c:	eba0 000a 	sub.w	r0, r0, sl
 8004150:	3401      	adds	r4, #1
 8004152:	fa03 f000 	lsl.w	r0, r3, r0
 8004156:	9b04      	ldr	r3, [sp, #16]
 8004158:	4303      	orrs	r3, r0
 800415a:	9304      	str	r3, [sp, #16]
 800415c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004160:	2206      	movs	r2, #6
 8004162:	482c      	ldr	r0, [pc, #176]	; (8004214 <_vfiprintf_r+0x250>)
 8004164:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004168:	f000 fc60 	bl	8004a2c <memchr>
 800416c:	2800      	cmp	r0, #0
 800416e:	d03f      	beq.n	80041f0 <_vfiprintf_r+0x22c>
 8004170:	4b29      	ldr	r3, [pc, #164]	; (8004218 <_vfiprintf_r+0x254>)
 8004172:	bb1b      	cbnz	r3, 80041bc <_vfiprintf_r+0x1f8>
 8004174:	9b03      	ldr	r3, [sp, #12]
 8004176:	3307      	adds	r3, #7
 8004178:	f023 0307 	bic.w	r3, r3, #7
 800417c:	3308      	adds	r3, #8
 800417e:	9303      	str	r3, [sp, #12]
 8004180:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004182:	443b      	add	r3, r7
 8004184:	9309      	str	r3, [sp, #36]	; 0x24
 8004186:	e767      	b.n	8004058 <_vfiprintf_r+0x94>
 8004188:	fb0c 3202 	mla	r2, ip, r2, r3
 800418c:	460c      	mov	r4, r1
 800418e:	2001      	movs	r0, #1
 8004190:	e7a5      	b.n	80040de <_vfiprintf_r+0x11a>
 8004192:	2300      	movs	r3, #0
 8004194:	3401      	adds	r4, #1
 8004196:	f04f 0c0a 	mov.w	ip, #10
 800419a:	4619      	mov	r1, r3
 800419c:	9305      	str	r3, [sp, #20]
 800419e:	4620      	mov	r0, r4
 80041a0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041a4:	3a30      	subs	r2, #48	; 0x30
 80041a6:	2a09      	cmp	r2, #9
 80041a8:	d903      	bls.n	80041b2 <_vfiprintf_r+0x1ee>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d0c5      	beq.n	800413a <_vfiprintf_r+0x176>
 80041ae:	9105      	str	r1, [sp, #20]
 80041b0:	e7c3      	b.n	800413a <_vfiprintf_r+0x176>
 80041b2:	fb0c 2101 	mla	r1, ip, r1, r2
 80041b6:	4604      	mov	r4, r0
 80041b8:	2301      	movs	r3, #1
 80041ba:	e7f0      	b.n	800419e <_vfiprintf_r+0x1da>
 80041bc:	ab03      	add	r3, sp, #12
 80041be:	462a      	mov	r2, r5
 80041c0:	a904      	add	r1, sp, #16
 80041c2:	4630      	mov	r0, r6
 80041c4:	9300      	str	r3, [sp, #0]
 80041c6:	4b15      	ldr	r3, [pc, #84]	; (800421c <_vfiprintf_r+0x258>)
 80041c8:	e000      	b.n	80041cc <_vfiprintf_r+0x208>
 80041ca:	bf00      	nop
 80041cc:	4607      	mov	r7, r0
 80041ce:	1c78      	adds	r0, r7, #1
 80041d0:	d1d6      	bne.n	8004180 <_vfiprintf_r+0x1bc>
 80041d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80041d4:	07d9      	lsls	r1, r3, #31
 80041d6:	d405      	bmi.n	80041e4 <_vfiprintf_r+0x220>
 80041d8:	89ab      	ldrh	r3, [r5, #12]
 80041da:	059a      	lsls	r2, r3, #22
 80041dc:	d402      	bmi.n	80041e4 <_vfiprintf_r+0x220>
 80041de:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80041e0:	f7ff fe31 	bl	8003e46 <__retarget_lock_release_recursive>
 80041e4:	89ab      	ldrh	r3, [r5, #12]
 80041e6:	065b      	lsls	r3, r3, #25
 80041e8:	f53f af12 	bmi.w	8004010 <_vfiprintf_r+0x4c>
 80041ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80041ee:	e711      	b.n	8004014 <_vfiprintf_r+0x50>
 80041f0:	ab03      	add	r3, sp, #12
 80041f2:	462a      	mov	r2, r5
 80041f4:	a904      	add	r1, sp, #16
 80041f6:	4630      	mov	r0, r6
 80041f8:	9300      	str	r3, [sp, #0]
 80041fa:	4b08      	ldr	r3, [pc, #32]	; (800421c <_vfiprintf_r+0x258>)
 80041fc:	f000 f882 	bl	8004304 <_printf_i>
 8004200:	e7e4      	b.n	80041cc <_vfiprintf_r+0x208>
 8004202:	bf00      	nop
 8004204:	08004c94 	.word	0x08004c94
 8004208:	08004cb4 	.word	0x08004cb4
 800420c:	08004c74 	.word	0x08004c74
 8004210:	08004cd4 	.word	0x08004cd4
 8004214:	08004cde 	.word	0x08004cde
 8004218:	00000000 	.word	0x00000000
 800421c:	08003f9f 	.word	0x08003f9f
 8004220:	08004cda 	.word	0x08004cda

08004224 <_printf_common>:
 8004224:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004228:	4616      	mov	r6, r2
 800422a:	4699      	mov	r9, r3
 800422c:	688a      	ldr	r2, [r1, #8]
 800422e:	4607      	mov	r7, r0
 8004230:	690b      	ldr	r3, [r1, #16]
 8004232:	460c      	mov	r4, r1
 8004234:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004238:	4293      	cmp	r3, r2
 800423a:	bfb8      	it	lt
 800423c:	4613      	movlt	r3, r2
 800423e:	6033      	str	r3, [r6, #0]
 8004240:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004244:	b10a      	cbz	r2, 800424a <_printf_common+0x26>
 8004246:	3301      	adds	r3, #1
 8004248:	6033      	str	r3, [r6, #0]
 800424a:	6823      	ldr	r3, [r4, #0]
 800424c:	0699      	lsls	r1, r3, #26
 800424e:	bf42      	ittt	mi
 8004250:	6833      	ldrmi	r3, [r6, #0]
 8004252:	3302      	addmi	r3, #2
 8004254:	6033      	strmi	r3, [r6, #0]
 8004256:	6825      	ldr	r5, [r4, #0]
 8004258:	f015 0506 	ands.w	r5, r5, #6
 800425c:	d106      	bne.n	800426c <_printf_common+0x48>
 800425e:	f104 0a19 	add.w	sl, r4, #25
 8004262:	68e3      	ldr	r3, [r4, #12]
 8004264:	6832      	ldr	r2, [r6, #0]
 8004266:	1a9b      	subs	r3, r3, r2
 8004268:	42ab      	cmp	r3, r5
 800426a:	dc29      	bgt.n	80042c0 <_printf_common+0x9c>
 800426c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004270:	1e13      	subs	r3, r2, #0
 8004272:	6822      	ldr	r2, [r4, #0]
 8004274:	bf18      	it	ne
 8004276:	2301      	movne	r3, #1
 8004278:	0692      	lsls	r2, r2, #26
 800427a:	d42e      	bmi.n	80042da <_printf_common+0xb6>
 800427c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004280:	4649      	mov	r1, r9
 8004282:	4638      	mov	r0, r7
 8004284:	47c0      	blx	r8
 8004286:	3001      	adds	r0, #1
 8004288:	d021      	beq.n	80042ce <_printf_common+0xaa>
 800428a:	6823      	ldr	r3, [r4, #0]
 800428c:	341a      	adds	r4, #26
 800428e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 8004292:	f003 0306 	and.w	r3, r3, #6
 8004296:	6832      	ldr	r2, [r6, #0]
 8004298:	2600      	movs	r6, #0
 800429a:	2b04      	cmp	r3, #4
 800429c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80042a0:	bf08      	it	eq
 80042a2:	1aad      	subeq	r5, r5, r2
 80042a4:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 80042a8:	bf14      	ite	ne
 80042aa:	2500      	movne	r5, #0
 80042ac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042b0:	4293      	cmp	r3, r2
 80042b2:	bfc4      	itt	gt
 80042b4:	1a9b      	subgt	r3, r3, r2
 80042b6:	18ed      	addgt	r5, r5, r3
 80042b8:	42b5      	cmp	r5, r6
 80042ba:	d11a      	bne.n	80042f2 <_printf_common+0xce>
 80042bc:	2000      	movs	r0, #0
 80042be:	e008      	b.n	80042d2 <_printf_common+0xae>
 80042c0:	2301      	movs	r3, #1
 80042c2:	4652      	mov	r2, sl
 80042c4:	4649      	mov	r1, r9
 80042c6:	4638      	mov	r0, r7
 80042c8:	47c0      	blx	r8
 80042ca:	3001      	adds	r0, #1
 80042cc:	d103      	bne.n	80042d6 <_printf_common+0xb2>
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042d6:	3501      	adds	r5, #1
 80042d8:	e7c3      	b.n	8004262 <_printf_common+0x3e>
 80042da:	18e1      	adds	r1, r4, r3
 80042dc:	1c5a      	adds	r2, r3, #1
 80042de:	2030      	movs	r0, #48	; 0x30
 80042e0:	3302      	adds	r3, #2
 80042e2:	4422      	add	r2, r4
 80042e4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80042e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80042ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80042f0:	e7c4      	b.n	800427c <_printf_common+0x58>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4622      	mov	r2, r4
 80042f6:	4649      	mov	r1, r9
 80042f8:	4638      	mov	r0, r7
 80042fa:	47c0      	blx	r8
 80042fc:	3001      	adds	r0, #1
 80042fe:	d0e6      	beq.n	80042ce <_printf_common+0xaa>
 8004300:	3601      	adds	r6, #1
 8004302:	e7d9      	b.n	80042b8 <_printf_common+0x94>

08004304 <_printf_i>:
 8004304:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004308:	7e0f      	ldrb	r7, [r1, #24]
 800430a:	4691      	mov	r9, r2
 800430c:	4680      	mov	r8, r0
 800430e:	460c      	mov	r4, r1
 8004310:	2f78      	cmp	r7, #120	; 0x78
 8004312:	469a      	mov	sl, r3
 8004314:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004316:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800431a:	d807      	bhi.n	800432c <_printf_i+0x28>
 800431c:	2f62      	cmp	r7, #98	; 0x62
 800431e:	d80a      	bhi.n	8004336 <_printf_i+0x32>
 8004320:	2f00      	cmp	r7, #0
 8004322:	f000 80d8 	beq.w	80044d6 <_printf_i+0x1d2>
 8004326:	2f58      	cmp	r7, #88	; 0x58
 8004328:	f000 80a3 	beq.w	8004472 <_printf_i+0x16e>
 800432c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004330:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004334:	e03a      	b.n	80043ac <_printf_i+0xa8>
 8004336:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800433a:	2b15      	cmp	r3, #21
 800433c:	d8f6      	bhi.n	800432c <_printf_i+0x28>
 800433e:	a101      	add	r1, pc, #4	; (adr r1, 8004344 <_printf_i+0x40>)
 8004340:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004344:	0800439d 	.word	0x0800439d
 8004348:	080043b1 	.word	0x080043b1
 800434c:	0800432d 	.word	0x0800432d
 8004350:	0800432d 	.word	0x0800432d
 8004354:	0800432d 	.word	0x0800432d
 8004358:	0800432d 	.word	0x0800432d
 800435c:	080043b1 	.word	0x080043b1
 8004360:	0800432d 	.word	0x0800432d
 8004364:	0800432d 	.word	0x0800432d
 8004368:	0800432d 	.word	0x0800432d
 800436c:	0800432d 	.word	0x0800432d
 8004370:	080044bd 	.word	0x080044bd
 8004374:	080043e1 	.word	0x080043e1
 8004378:	0800449f 	.word	0x0800449f
 800437c:	0800432d 	.word	0x0800432d
 8004380:	0800432d 	.word	0x0800432d
 8004384:	080044df 	.word	0x080044df
 8004388:	0800432d 	.word	0x0800432d
 800438c:	080043e1 	.word	0x080043e1
 8004390:	0800432d 	.word	0x0800432d
 8004394:	0800432d 	.word	0x0800432d
 8004398:	080044a7 	.word	0x080044a7
 800439c:	682b      	ldr	r3, [r5, #0]
 800439e:	1d1a      	adds	r2, r3, #4
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	602a      	str	r2, [r5, #0]
 80043a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80043a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043ac:	2301      	movs	r3, #1
 80043ae:	e0a3      	b.n	80044f8 <_printf_i+0x1f4>
 80043b0:	6820      	ldr	r0, [r4, #0]
 80043b2:	6829      	ldr	r1, [r5, #0]
 80043b4:	0606      	lsls	r6, r0, #24
 80043b6:	f101 0304 	add.w	r3, r1, #4
 80043ba:	d50a      	bpl.n	80043d2 <_printf_i+0xce>
 80043bc:	680e      	ldr	r6, [r1, #0]
 80043be:	602b      	str	r3, [r5, #0]
 80043c0:	2e00      	cmp	r6, #0
 80043c2:	da03      	bge.n	80043cc <_printf_i+0xc8>
 80043c4:	232d      	movs	r3, #45	; 0x2d
 80043c6:	4276      	negs	r6, r6
 80043c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80043cc:	485e      	ldr	r0, [pc, #376]	; (8004548 <_printf_i+0x244>)
 80043ce:	230a      	movs	r3, #10
 80043d0:	e019      	b.n	8004406 <_printf_i+0x102>
 80043d2:	680e      	ldr	r6, [r1, #0]
 80043d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80043d8:	602b      	str	r3, [r5, #0]
 80043da:	bf18      	it	ne
 80043dc:	b236      	sxthne	r6, r6
 80043de:	e7ef      	b.n	80043c0 <_printf_i+0xbc>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	6820      	ldr	r0, [r4, #0]
 80043e4:	1d19      	adds	r1, r3, #4
 80043e6:	6029      	str	r1, [r5, #0]
 80043e8:	0601      	lsls	r1, r0, #24
 80043ea:	d501      	bpl.n	80043f0 <_printf_i+0xec>
 80043ec:	681e      	ldr	r6, [r3, #0]
 80043ee:	e002      	b.n	80043f6 <_printf_i+0xf2>
 80043f0:	0646      	lsls	r6, r0, #25
 80043f2:	d5fb      	bpl.n	80043ec <_printf_i+0xe8>
 80043f4:	881e      	ldrh	r6, [r3, #0]
 80043f6:	2f6f      	cmp	r7, #111	; 0x6f
 80043f8:	4853      	ldr	r0, [pc, #332]	; (8004548 <_printf_i+0x244>)
 80043fa:	bf0c      	ite	eq
 80043fc:	2308      	moveq	r3, #8
 80043fe:	230a      	movne	r3, #10
 8004400:	2100      	movs	r1, #0
 8004402:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004406:	6865      	ldr	r5, [r4, #4]
 8004408:	2d00      	cmp	r5, #0
 800440a:	60a5      	str	r5, [r4, #8]
 800440c:	bfa2      	ittt	ge
 800440e:	6821      	ldrge	r1, [r4, #0]
 8004410:	f021 0104 	bicge.w	r1, r1, #4
 8004414:	6021      	strge	r1, [r4, #0]
 8004416:	b90e      	cbnz	r6, 800441c <_printf_i+0x118>
 8004418:	2d00      	cmp	r5, #0
 800441a:	d04d      	beq.n	80044b8 <_printf_i+0x1b4>
 800441c:	4615      	mov	r5, r2
 800441e:	fbb6 f1f3 	udiv	r1, r6, r3
 8004422:	fb03 6711 	mls	r7, r3, r1, r6
 8004426:	5dc7      	ldrb	r7, [r0, r7]
 8004428:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800442c:	4637      	mov	r7, r6
 800442e:	460e      	mov	r6, r1
 8004430:	42bb      	cmp	r3, r7
 8004432:	d9f4      	bls.n	800441e <_printf_i+0x11a>
 8004434:	2b08      	cmp	r3, #8
 8004436:	d10b      	bne.n	8004450 <_printf_i+0x14c>
 8004438:	6823      	ldr	r3, [r4, #0]
 800443a:	07de      	lsls	r6, r3, #31
 800443c:	d508      	bpl.n	8004450 <_printf_i+0x14c>
 800443e:	6923      	ldr	r3, [r4, #16]
 8004440:	6861      	ldr	r1, [r4, #4]
 8004442:	4299      	cmp	r1, r3
 8004444:	bfde      	ittt	le
 8004446:	2330      	movle	r3, #48	; 0x30
 8004448:	f805 3c01 	strble.w	r3, [r5, #-1]
 800444c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004450:	1b52      	subs	r2, r2, r5
 8004452:	6122      	str	r2, [r4, #16]
 8004454:	464b      	mov	r3, r9
 8004456:	aa03      	add	r2, sp, #12
 8004458:	4621      	mov	r1, r4
 800445a:	4640      	mov	r0, r8
 800445c:	f8cd a000 	str.w	sl, [sp]
 8004460:	f7ff fee0 	bl	8004224 <_printf_common>
 8004464:	3001      	adds	r0, #1
 8004466:	d14c      	bne.n	8004502 <_printf_i+0x1fe>
 8004468:	f04f 30ff 	mov.w	r0, #4294967295
 800446c:	b004      	add	sp, #16
 800446e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004472:	4835      	ldr	r0, [pc, #212]	; (8004548 <_printf_i+0x244>)
 8004474:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8004478:	6829      	ldr	r1, [r5, #0]
 800447a:	6823      	ldr	r3, [r4, #0]
 800447c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004480:	6029      	str	r1, [r5, #0]
 8004482:	061d      	lsls	r5, r3, #24
 8004484:	d514      	bpl.n	80044b0 <_printf_i+0x1ac>
 8004486:	07df      	lsls	r7, r3, #31
 8004488:	bf44      	itt	mi
 800448a:	f043 0320 	orrmi.w	r3, r3, #32
 800448e:	6023      	strmi	r3, [r4, #0]
 8004490:	b91e      	cbnz	r6, 800449a <_printf_i+0x196>
 8004492:	6823      	ldr	r3, [r4, #0]
 8004494:	f023 0320 	bic.w	r3, r3, #32
 8004498:	6023      	str	r3, [r4, #0]
 800449a:	2310      	movs	r3, #16
 800449c:	e7b0      	b.n	8004400 <_printf_i+0xfc>
 800449e:	6823      	ldr	r3, [r4, #0]
 80044a0:	f043 0320 	orr.w	r3, r3, #32
 80044a4:	6023      	str	r3, [r4, #0]
 80044a6:	2378      	movs	r3, #120	; 0x78
 80044a8:	4828      	ldr	r0, [pc, #160]	; (800454c <_printf_i+0x248>)
 80044aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044ae:	e7e3      	b.n	8004478 <_printf_i+0x174>
 80044b0:	0659      	lsls	r1, r3, #25
 80044b2:	bf48      	it	mi
 80044b4:	b2b6      	uxthmi	r6, r6
 80044b6:	e7e6      	b.n	8004486 <_printf_i+0x182>
 80044b8:	4615      	mov	r5, r2
 80044ba:	e7bb      	b.n	8004434 <_printf_i+0x130>
 80044bc:	682b      	ldr	r3, [r5, #0]
 80044be:	6826      	ldr	r6, [r4, #0]
 80044c0:	1d18      	adds	r0, r3, #4
 80044c2:	6961      	ldr	r1, [r4, #20]
 80044c4:	6028      	str	r0, [r5, #0]
 80044c6:	0635      	lsls	r5, r6, #24
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	d501      	bpl.n	80044d0 <_printf_i+0x1cc>
 80044cc:	6019      	str	r1, [r3, #0]
 80044ce:	e002      	b.n	80044d6 <_printf_i+0x1d2>
 80044d0:	0670      	lsls	r0, r6, #25
 80044d2:	d5fb      	bpl.n	80044cc <_printf_i+0x1c8>
 80044d4:	8019      	strh	r1, [r3, #0]
 80044d6:	2300      	movs	r3, #0
 80044d8:	4615      	mov	r5, r2
 80044da:	6123      	str	r3, [r4, #16]
 80044dc:	e7ba      	b.n	8004454 <_printf_i+0x150>
 80044de:	682b      	ldr	r3, [r5, #0]
 80044e0:	2100      	movs	r1, #0
 80044e2:	1d1a      	adds	r2, r3, #4
 80044e4:	602a      	str	r2, [r5, #0]
 80044e6:	681d      	ldr	r5, [r3, #0]
 80044e8:	6862      	ldr	r2, [r4, #4]
 80044ea:	4628      	mov	r0, r5
 80044ec:	f000 fa9e 	bl	8004a2c <memchr>
 80044f0:	b108      	cbz	r0, 80044f6 <_printf_i+0x1f2>
 80044f2:	1b40      	subs	r0, r0, r5
 80044f4:	6060      	str	r0, [r4, #4]
 80044f6:	6863      	ldr	r3, [r4, #4]
 80044f8:	6123      	str	r3, [r4, #16]
 80044fa:	2300      	movs	r3, #0
 80044fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004500:	e7a8      	b.n	8004454 <_printf_i+0x150>
 8004502:	6923      	ldr	r3, [r4, #16]
 8004504:	462a      	mov	r2, r5
 8004506:	4649      	mov	r1, r9
 8004508:	4640      	mov	r0, r8
 800450a:	47d0      	blx	sl
 800450c:	3001      	adds	r0, #1
 800450e:	d0ab      	beq.n	8004468 <_printf_i+0x164>
 8004510:	6823      	ldr	r3, [r4, #0]
 8004512:	079b      	lsls	r3, r3, #30
 8004514:	d413      	bmi.n	800453e <_printf_i+0x23a>
 8004516:	68e0      	ldr	r0, [r4, #12]
 8004518:	9b03      	ldr	r3, [sp, #12]
 800451a:	4298      	cmp	r0, r3
 800451c:	bfb8      	it	lt
 800451e:	4618      	movlt	r0, r3
 8004520:	e7a4      	b.n	800446c <_printf_i+0x168>
 8004522:	2301      	movs	r3, #1
 8004524:	4632      	mov	r2, r6
 8004526:	4649      	mov	r1, r9
 8004528:	4640      	mov	r0, r8
 800452a:	47d0      	blx	sl
 800452c:	3001      	adds	r0, #1
 800452e:	d09b      	beq.n	8004468 <_printf_i+0x164>
 8004530:	3501      	adds	r5, #1
 8004532:	68e3      	ldr	r3, [r4, #12]
 8004534:	9903      	ldr	r1, [sp, #12]
 8004536:	1a5b      	subs	r3, r3, r1
 8004538:	42ab      	cmp	r3, r5
 800453a:	dcf2      	bgt.n	8004522 <_printf_i+0x21e>
 800453c:	e7eb      	b.n	8004516 <_printf_i+0x212>
 800453e:	2500      	movs	r5, #0
 8004540:	f104 0619 	add.w	r6, r4, #25
 8004544:	e7f5      	b.n	8004532 <_printf_i+0x22e>
 8004546:	bf00      	nop
 8004548:	08004ce5 	.word	0x08004ce5
 800454c:	08004cf6 	.word	0x08004cf6

08004550 <_sbrk_r>:
 8004550:	b538      	push	{r3, r4, r5, lr}
 8004552:	2300      	movs	r3, #0
 8004554:	4d05      	ldr	r5, [pc, #20]	; (800456c <_sbrk_r+0x1c>)
 8004556:	4604      	mov	r4, r0
 8004558:	4608      	mov	r0, r1
 800455a:	602b      	str	r3, [r5, #0]
 800455c:	f7fc fa40 	bl	80009e0 <_sbrk>
 8004560:	1c43      	adds	r3, r0, #1
 8004562:	d102      	bne.n	800456a <_sbrk_r+0x1a>
 8004564:	682b      	ldr	r3, [r5, #0]
 8004566:	b103      	cbz	r3, 800456a <_sbrk_r+0x1a>
 8004568:	6023      	str	r3, [r4, #0]
 800456a:	bd38      	pop	{r3, r4, r5, pc}
 800456c:	20000144 	.word	0x20000144

08004570 <__sread>:
 8004570:	b510      	push	{r4, lr}
 8004572:	460c      	mov	r4, r1
 8004574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004578:	f000 fabe 	bl	8004af8 <_read_r>
 800457c:	2800      	cmp	r0, #0
 800457e:	bfab      	itete	ge
 8004580:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004582:	89a3      	ldrhlt	r3, [r4, #12]
 8004584:	181b      	addge	r3, r3, r0
 8004586:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800458a:	bfac      	ite	ge
 800458c:	6563      	strge	r3, [r4, #84]	; 0x54
 800458e:	81a3      	strhlt	r3, [r4, #12]
 8004590:	bd10      	pop	{r4, pc}

08004592 <__swrite>:
 8004592:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004596:	461f      	mov	r7, r3
 8004598:	898b      	ldrh	r3, [r1, #12]
 800459a:	4605      	mov	r5, r0
 800459c:	460c      	mov	r4, r1
 800459e:	05db      	lsls	r3, r3, #23
 80045a0:	4616      	mov	r6, r2
 80045a2:	d505      	bpl.n	80045b0 <__swrite+0x1e>
 80045a4:	2302      	movs	r3, #2
 80045a6:	2200      	movs	r2, #0
 80045a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ac:	f000 f9c6 	bl	800493c <_lseek_r>
 80045b0:	89a3      	ldrh	r3, [r4, #12]
 80045b2:	4632      	mov	r2, r6
 80045b4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80045b8:	4628      	mov	r0, r5
 80045ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80045be:	81a3      	strh	r3, [r4, #12]
 80045c0:	463b      	mov	r3, r7
 80045c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80045c6:	f000 b869 	b.w	800469c <_write_r>

080045ca <__sseek>:
 80045ca:	b510      	push	{r4, lr}
 80045cc:	460c      	mov	r4, r1
 80045ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045d2:	f000 f9b3 	bl	800493c <_lseek_r>
 80045d6:	1c43      	adds	r3, r0, #1
 80045d8:	89a3      	ldrh	r3, [r4, #12]
 80045da:	bf15      	itete	ne
 80045dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80045de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80045e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80045e6:	81a3      	strheq	r3, [r4, #12]
 80045e8:	bf18      	it	ne
 80045ea:	81a3      	strhne	r3, [r4, #12]
 80045ec:	bd10      	pop	{r4, pc}

080045ee <__sclose>:
 80045ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045f2:	f000 b8d3 	b.w	800479c <_close_r>
	...

080045f8 <__swbuf_r>:
 80045f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045fa:	460e      	mov	r6, r1
 80045fc:	4614      	mov	r4, r2
 80045fe:	4605      	mov	r5, r0
 8004600:	b118      	cbz	r0, 800460a <__swbuf_r+0x12>
 8004602:	6983      	ldr	r3, [r0, #24]
 8004604:	b90b      	cbnz	r3, 800460a <__swbuf_r+0x12>
 8004606:	f7ff fb7f 	bl	8003d08 <__sinit>
 800460a:	4b21      	ldr	r3, [pc, #132]	; (8004690 <__swbuf_r+0x98>)
 800460c:	429c      	cmp	r4, r3
 800460e:	d12b      	bne.n	8004668 <__swbuf_r+0x70>
 8004610:	686c      	ldr	r4, [r5, #4]
 8004612:	69a3      	ldr	r3, [r4, #24]
 8004614:	60a3      	str	r3, [r4, #8]
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	071a      	lsls	r2, r3, #28
 800461a:	d52f      	bpl.n	800467c <__swbuf_r+0x84>
 800461c:	6923      	ldr	r3, [r4, #16]
 800461e:	b36b      	cbz	r3, 800467c <__swbuf_r+0x84>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	b2f6      	uxtb	r6, r6
 8004624:	6820      	ldr	r0, [r4, #0]
 8004626:	4637      	mov	r7, r6
 8004628:	1ac0      	subs	r0, r0, r3
 800462a:	6963      	ldr	r3, [r4, #20]
 800462c:	4283      	cmp	r3, r0
 800462e:	dc04      	bgt.n	800463a <__swbuf_r+0x42>
 8004630:	4621      	mov	r1, r4
 8004632:	4628      	mov	r0, r5
 8004634:	f000 f946 	bl	80048c4 <_fflush_r>
 8004638:	bb30      	cbnz	r0, 8004688 <__swbuf_r+0x90>
 800463a:	68a3      	ldr	r3, [r4, #8]
 800463c:	3001      	adds	r0, #1
 800463e:	3b01      	subs	r3, #1
 8004640:	60a3      	str	r3, [r4, #8]
 8004642:	6823      	ldr	r3, [r4, #0]
 8004644:	1c5a      	adds	r2, r3, #1
 8004646:	6022      	str	r2, [r4, #0]
 8004648:	701e      	strb	r6, [r3, #0]
 800464a:	6963      	ldr	r3, [r4, #20]
 800464c:	4283      	cmp	r3, r0
 800464e:	d004      	beq.n	800465a <__swbuf_r+0x62>
 8004650:	89a3      	ldrh	r3, [r4, #12]
 8004652:	07db      	lsls	r3, r3, #31
 8004654:	d506      	bpl.n	8004664 <__swbuf_r+0x6c>
 8004656:	2e0a      	cmp	r6, #10
 8004658:	d104      	bne.n	8004664 <__swbuf_r+0x6c>
 800465a:	4621      	mov	r1, r4
 800465c:	4628      	mov	r0, r5
 800465e:	f000 f931 	bl	80048c4 <_fflush_r>
 8004662:	b988      	cbnz	r0, 8004688 <__swbuf_r+0x90>
 8004664:	4638      	mov	r0, r7
 8004666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004668:	4b0a      	ldr	r3, [pc, #40]	; (8004694 <__swbuf_r+0x9c>)
 800466a:	429c      	cmp	r4, r3
 800466c:	d101      	bne.n	8004672 <__swbuf_r+0x7a>
 800466e:	68ac      	ldr	r4, [r5, #8]
 8004670:	e7cf      	b.n	8004612 <__swbuf_r+0x1a>
 8004672:	4b09      	ldr	r3, [pc, #36]	; (8004698 <__swbuf_r+0xa0>)
 8004674:	429c      	cmp	r4, r3
 8004676:	bf08      	it	eq
 8004678:	68ec      	ldreq	r4, [r5, #12]
 800467a:	e7ca      	b.n	8004612 <__swbuf_r+0x1a>
 800467c:	4621      	mov	r1, r4
 800467e:	4628      	mov	r0, r5
 8004680:	f000 f81e 	bl	80046c0 <__swsetup_r>
 8004684:	2800      	cmp	r0, #0
 8004686:	d0cb      	beq.n	8004620 <__swbuf_r+0x28>
 8004688:	f04f 37ff 	mov.w	r7, #4294967295
 800468c:	e7ea      	b.n	8004664 <__swbuf_r+0x6c>
 800468e:	bf00      	nop
 8004690:	08004c94 	.word	0x08004c94
 8004694:	08004cb4 	.word	0x08004cb4
 8004698:	08004c74 	.word	0x08004c74

0800469c <_write_r>:
 800469c:	b538      	push	{r3, r4, r5, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	4d06      	ldr	r5, [pc, #24]	; (80046bc <_write_r+0x20>)
 80046a2:	4608      	mov	r0, r1
 80046a4:	4611      	mov	r1, r2
 80046a6:	2200      	movs	r2, #0
 80046a8:	602a      	str	r2, [r5, #0]
 80046aa:	461a      	mov	r2, r3
 80046ac:	f7fc f947 	bl	800093e <_write>
 80046b0:	1c43      	adds	r3, r0, #1
 80046b2:	d102      	bne.n	80046ba <_write_r+0x1e>
 80046b4:	682b      	ldr	r3, [r5, #0]
 80046b6:	b103      	cbz	r3, 80046ba <_write_r+0x1e>
 80046b8:	6023      	str	r3, [r4, #0]
 80046ba:	bd38      	pop	{r3, r4, r5, pc}
 80046bc:	20000144 	.word	0x20000144

080046c0 <__swsetup_r>:
 80046c0:	4b32      	ldr	r3, [pc, #200]	; (800478c <__swsetup_r+0xcc>)
 80046c2:	b570      	push	{r4, r5, r6, lr}
 80046c4:	681d      	ldr	r5, [r3, #0]
 80046c6:	4606      	mov	r6, r0
 80046c8:	460c      	mov	r4, r1
 80046ca:	b125      	cbz	r5, 80046d6 <__swsetup_r+0x16>
 80046cc:	69ab      	ldr	r3, [r5, #24]
 80046ce:	b913      	cbnz	r3, 80046d6 <__swsetup_r+0x16>
 80046d0:	4628      	mov	r0, r5
 80046d2:	f7ff fb19 	bl	8003d08 <__sinit>
 80046d6:	4b2e      	ldr	r3, [pc, #184]	; (8004790 <__swsetup_r+0xd0>)
 80046d8:	429c      	cmp	r4, r3
 80046da:	d10f      	bne.n	80046fc <__swsetup_r+0x3c>
 80046dc:	686c      	ldr	r4, [r5, #4]
 80046de:	89a3      	ldrh	r3, [r4, #12]
 80046e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80046e4:	0719      	lsls	r1, r3, #28
 80046e6:	d42c      	bmi.n	8004742 <__swsetup_r+0x82>
 80046e8:	06dd      	lsls	r5, r3, #27
 80046ea:	d411      	bmi.n	8004710 <__swsetup_r+0x50>
 80046ec:	2309      	movs	r3, #9
 80046ee:	6033      	str	r3, [r6, #0]
 80046f0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80046f4:	f04f 30ff 	mov.w	r0, #4294967295
 80046f8:	81a3      	strh	r3, [r4, #12]
 80046fa:	e03e      	b.n	800477a <__swsetup_r+0xba>
 80046fc:	4b25      	ldr	r3, [pc, #148]	; (8004794 <__swsetup_r+0xd4>)
 80046fe:	429c      	cmp	r4, r3
 8004700:	d101      	bne.n	8004706 <__swsetup_r+0x46>
 8004702:	68ac      	ldr	r4, [r5, #8]
 8004704:	e7eb      	b.n	80046de <__swsetup_r+0x1e>
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <__swsetup_r+0xd8>)
 8004708:	429c      	cmp	r4, r3
 800470a:	bf08      	it	eq
 800470c:	68ec      	ldreq	r4, [r5, #12]
 800470e:	e7e6      	b.n	80046de <__swsetup_r+0x1e>
 8004710:	0758      	lsls	r0, r3, #29
 8004712:	d512      	bpl.n	800473a <__swsetup_r+0x7a>
 8004714:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004716:	b141      	cbz	r1, 800472a <__swsetup_r+0x6a>
 8004718:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800471c:	4299      	cmp	r1, r3
 800471e:	d002      	beq.n	8004726 <__swsetup_r+0x66>
 8004720:	4630      	mov	r0, r6
 8004722:	f000 f99d 	bl	8004a60 <_free_r>
 8004726:	2300      	movs	r3, #0
 8004728:	6363      	str	r3, [r4, #52]	; 0x34
 800472a:	89a3      	ldrh	r3, [r4, #12]
 800472c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	2300      	movs	r3, #0
 8004734:	6063      	str	r3, [r4, #4]
 8004736:	6923      	ldr	r3, [r4, #16]
 8004738:	6023      	str	r3, [r4, #0]
 800473a:	89a3      	ldrh	r3, [r4, #12]
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	81a3      	strh	r3, [r4, #12]
 8004742:	6923      	ldr	r3, [r4, #16]
 8004744:	b94b      	cbnz	r3, 800475a <__swsetup_r+0x9a>
 8004746:	89a3      	ldrh	r3, [r4, #12]
 8004748:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800474c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004750:	d003      	beq.n	800475a <__swsetup_r+0x9a>
 8004752:	4621      	mov	r1, r4
 8004754:	4630      	mov	r0, r6
 8004756:	f000 f929 	bl	80049ac <__smakebuf_r>
 800475a:	89a0      	ldrh	r0, [r4, #12]
 800475c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8004760:	f010 0301 	ands.w	r3, r0, #1
 8004764:	d00a      	beq.n	800477c <__swsetup_r+0xbc>
 8004766:	2300      	movs	r3, #0
 8004768:	60a3      	str	r3, [r4, #8]
 800476a:	6963      	ldr	r3, [r4, #20]
 800476c:	425b      	negs	r3, r3
 800476e:	61a3      	str	r3, [r4, #24]
 8004770:	6923      	ldr	r3, [r4, #16]
 8004772:	b943      	cbnz	r3, 8004786 <__swsetup_r+0xc6>
 8004774:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8004778:	d1ba      	bne.n	80046f0 <__swsetup_r+0x30>
 800477a:	bd70      	pop	{r4, r5, r6, pc}
 800477c:	0781      	lsls	r1, r0, #30
 800477e:	bf58      	it	pl
 8004780:	6963      	ldrpl	r3, [r4, #20]
 8004782:	60a3      	str	r3, [r4, #8]
 8004784:	e7f4      	b.n	8004770 <__swsetup_r+0xb0>
 8004786:	2000      	movs	r0, #0
 8004788:	e7f7      	b.n	800477a <__swsetup_r+0xba>
 800478a:	bf00      	nop
 800478c:	20000018 	.word	0x20000018
 8004790:	08004c94 	.word	0x08004c94
 8004794:	08004cb4 	.word	0x08004cb4
 8004798:	08004c74 	.word	0x08004c74

0800479c <_close_r>:
 800479c:	b538      	push	{r3, r4, r5, lr}
 800479e:	2300      	movs	r3, #0
 80047a0:	4d05      	ldr	r5, [pc, #20]	; (80047b8 <_close_r+0x1c>)
 80047a2:	4604      	mov	r4, r0
 80047a4:	4608      	mov	r0, r1
 80047a6:	602b      	str	r3, [r5, #0]
 80047a8:	f7fc f8e5 	bl	8000976 <_close>
 80047ac:	1c43      	adds	r3, r0, #1
 80047ae:	d102      	bne.n	80047b6 <_close_r+0x1a>
 80047b0:	682b      	ldr	r3, [r5, #0]
 80047b2:	b103      	cbz	r3, 80047b6 <_close_r+0x1a>
 80047b4:	6023      	str	r3, [r4, #0]
 80047b6:	bd38      	pop	{r3, r4, r5, pc}
 80047b8:	20000144 	.word	0x20000144

080047bc <__sflush_r>:
 80047bc:	898a      	ldrh	r2, [r1, #12]
 80047be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80047c2:	4605      	mov	r5, r0
 80047c4:	0710      	lsls	r0, r2, #28
 80047c6:	460c      	mov	r4, r1
 80047c8:	d458      	bmi.n	800487c <__sflush_r+0xc0>
 80047ca:	684b      	ldr	r3, [r1, #4]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	dc05      	bgt.n	80047dc <__sflush_r+0x20>
 80047d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	dc02      	bgt.n	80047dc <__sflush_r+0x20>
 80047d6:	2000      	movs	r0, #0
 80047d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80047dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80047de:	2e00      	cmp	r6, #0
 80047e0:	d0f9      	beq.n	80047d6 <__sflush_r+0x1a>
 80047e2:	2300      	movs	r3, #0
 80047e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80047e8:	682f      	ldr	r7, [r5, #0]
 80047ea:	602b      	str	r3, [r5, #0]
 80047ec:	d032      	beq.n	8004854 <__sflush_r+0x98>
 80047ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	075a      	lsls	r2, r3, #29
 80047f4:	d505      	bpl.n	8004802 <__sflush_r+0x46>
 80047f6:	6863      	ldr	r3, [r4, #4]
 80047f8:	1ac0      	subs	r0, r0, r3
 80047fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80047fc:	b10b      	cbz	r3, 8004802 <__sflush_r+0x46>
 80047fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004800:	1ac0      	subs	r0, r0, r3
 8004802:	2300      	movs	r3, #0
 8004804:	4602      	mov	r2, r0
 8004806:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004808:	4628      	mov	r0, r5
 800480a:	6a21      	ldr	r1, [r4, #32]
 800480c:	47b0      	blx	r6
 800480e:	1c43      	adds	r3, r0, #1
 8004810:	89a3      	ldrh	r3, [r4, #12]
 8004812:	d106      	bne.n	8004822 <__sflush_r+0x66>
 8004814:	6829      	ldr	r1, [r5, #0]
 8004816:	291d      	cmp	r1, #29
 8004818:	d82c      	bhi.n	8004874 <__sflush_r+0xb8>
 800481a:	4a29      	ldr	r2, [pc, #164]	; (80048c0 <__sflush_r+0x104>)
 800481c:	40ca      	lsrs	r2, r1
 800481e:	07d6      	lsls	r6, r2, #31
 8004820:	d528      	bpl.n	8004874 <__sflush_r+0xb8>
 8004822:	2200      	movs	r2, #0
 8004824:	04d9      	lsls	r1, r3, #19
 8004826:	6062      	str	r2, [r4, #4]
 8004828:	6922      	ldr	r2, [r4, #16]
 800482a:	6022      	str	r2, [r4, #0]
 800482c:	d504      	bpl.n	8004838 <__sflush_r+0x7c>
 800482e:	1c42      	adds	r2, r0, #1
 8004830:	d101      	bne.n	8004836 <__sflush_r+0x7a>
 8004832:	682b      	ldr	r3, [r5, #0]
 8004834:	b903      	cbnz	r3, 8004838 <__sflush_r+0x7c>
 8004836:	6560      	str	r0, [r4, #84]	; 0x54
 8004838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800483a:	602f      	str	r7, [r5, #0]
 800483c:	2900      	cmp	r1, #0
 800483e:	d0ca      	beq.n	80047d6 <__sflush_r+0x1a>
 8004840:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004844:	4299      	cmp	r1, r3
 8004846:	d002      	beq.n	800484e <__sflush_r+0x92>
 8004848:	4628      	mov	r0, r5
 800484a:	f000 f909 	bl	8004a60 <_free_r>
 800484e:	2000      	movs	r0, #0
 8004850:	6360      	str	r0, [r4, #52]	; 0x34
 8004852:	e7c1      	b.n	80047d8 <__sflush_r+0x1c>
 8004854:	6a21      	ldr	r1, [r4, #32]
 8004856:	2301      	movs	r3, #1
 8004858:	4628      	mov	r0, r5
 800485a:	47b0      	blx	r6
 800485c:	1c41      	adds	r1, r0, #1
 800485e:	d1c7      	bne.n	80047f0 <__sflush_r+0x34>
 8004860:	682b      	ldr	r3, [r5, #0]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d0c4      	beq.n	80047f0 <__sflush_r+0x34>
 8004866:	2b1d      	cmp	r3, #29
 8004868:	d001      	beq.n	800486e <__sflush_r+0xb2>
 800486a:	2b16      	cmp	r3, #22
 800486c:	d101      	bne.n	8004872 <__sflush_r+0xb6>
 800486e:	602f      	str	r7, [r5, #0]
 8004870:	e7b1      	b.n	80047d6 <__sflush_r+0x1a>
 8004872:	89a3      	ldrh	r3, [r4, #12]
 8004874:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004878:	81a3      	strh	r3, [r4, #12]
 800487a:	e7ad      	b.n	80047d8 <__sflush_r+0x1c>
 800487c:	690f      	ldr	r7, [r1, #16]
 800487e:	2f00      	cmp	r7, #0
 8004880:	d0a9      	beq.n	80047d6 <__sflush_r+0x1a>
 8004882:	0793      	lsls	r3, r2, #30
 8004884:	680e      	ldr	r6, [r1, #0]
 8004886:	600f      	str	r7, [r1, #0]
 8004888:	bf0c      	ite	eq
 800488a:	694b      	ldreq	r3, [r1, #20]
 800488c:	2300      	movne	r3, #0
 800488e:	eba6 0807 	sub.w	r8, r6, r7
 8004892:	608b      	str	r3, [r1, #8]
 8004894:	f1b8 0f00 	cmp.w	r8, #0
 8004898:	dd9d      	ble.n	80047d6 <__sflush_r+0x1a>
 800489a:	4643      	mov	r3, r8
 800489c:	463a      	mov	r2, r7
 800489e:	6a21      	ldr	r1, [r4, #32]
 80048a0:	4628      	mov	r0, r5
 80048a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80048a4:	47b0      	blx	r6
 80048a6:	2800      	cmp	r0, #0
 80048a8:	dc06      	bgt.n	80048b8 <__sflush_r+0xfc>
 80048aa:	89a3      	ldrh	r3, [r4, #12]
 80048ac:	f04f 30ff 	mov.w	r0, #4294967295
 80048b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80048b4:	81a3      	strh	r3, [r4, #12]
 80048b6:	e78f      	b.n	80047d8 <__sflush_r+0x1c>
 80048b8:	4407      	add	r7, r0
 80048ba:	eba8 0800 	sub.w	r8, r8, r0
 80048be:	e7e9      	b.n	8004894 <__sflush_r+0xd8>
 80048c0:	20400001 	.word	0x20400001

080048c4 <_fflush_r>:
 80048c4:	b538      	push	{r3, r4, r5, lr}
 80048c6:	690b      	ldr	r3, [r1, #16]
 80048c8:	4605      	mov	r5, r0
 80048ca:	460c      	mov	r4, r1
 80048cc:	b913      	cbnz	r3, 80048d4 <_fflush_r+0x10>
 80048ce:	2500      	movs	r5, #0
 80048d0:	4628      	mov	r0, r5
 80048d2:	bd38      	pop	{r3, r4, r5, pc}
 80048d4:	b118      	cbz	r0, 80048de <_fflush_r+0x1a>
 80048d6:	6983      	ldr	r3, [r0, #24]
 80048d8:	b90b      	cbnz	r3, 80048de <_fflush_r+0x1a>
 80048da:	f7ff fa15 	bl	8003d08 <__sinit>
 80048de:	4b14      	ldr	r3, [pc, #80]	; (8004930 <_fflush_r+0x6c>)
 80048e0:	429c      	cmp	r4, r3
 80048e2:	d11b      	bne.n	800491c <_fflush_r+0x58>
 80048e4:	686c      	ldr	r4, [r5, #4]
 80048e6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d0ef      	beq.n	80048ce <_fflush_r+0xa>
 80048ee:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80048f0:	07d0      	lsls	r0, r2, #31
 80048f2:	d404      	bmi.n	80048fe <_fflush_r+0x3a>
 80048f4:	0599      	lsls	r1, r3, #22
 80048f6:	d402      	bmi.n	80048fe <_fflush_r+0x3a>
 80048f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80048fa:	f7ff faa3 	bl	8003e44 <__retarget_lock_acquire_recursive>
 80048fe:	4628      	mov	r0, r5
 8004900:	4621      	mov	r1, r4
 8004902:	f7ff ff5b 	bl	80047bc <__sflush_r>
 8004906:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8004908:	4605      	mov	r5, r0
 800490a:	07da      	lsls	r2, r3, #31
 800490c:	d4e0      	bmi.n	80048d0 <_fflush_r+0xc>
 800490e:	89a3      	ldrh	r3, [r4, #12]
 8004910:	059b      	lsls	r3, r3, #22
 8004912:	d4dd      	bmi.n	80048d0 <_fflush_r+0xc>
 8004914:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8004916:	f7ff fa96 	bl	8003e46 <__retarget_lock_release_recursive>
 800491a:	e7d9      	b.n	80048d0 <_fflush_r+0xc>
 800491c:	4b05      	ldr	r3, [pc, #20]	; (8004934 <_fflush_r+0x70>)
 800491e:	429c      	cmp	r4, r3
 8004920:	d101      	bne.n	8004926 <_fflush_r+0x62>
 8004922:	68ac      	ldr	r4, [r5, #8]
 8004924:	e7df      	b.n	80048e6 <_fflush_r+0x22>
 8004926:	4b04      	ldr	r3, [pc, #16]	; (8004938 <_fflush_r+0x74>)
 8004928:	429c      	cmp	r4, r3
 800492a:	bf08      	it	eq
 800492c:	68ec      	ldreq	r4, [r5, #12]
 800492e:	e7da      	b.n	80048e6 <_fflush_r+0x22>
 8004930:	08004c94 	.word	0x08004c94
 8004934:	08004cb4 	.word	0x08004cb4
 8004938:	08004c74 	.word	0x08004c74

0800493c <_lseek_r>:
 800493c:	b538      	push	{r3, r4, r5, lr}
 800493e:	4604      	mov	r4, r0
 8004940:	4d06      	ldr	r5, [pc, #24]	; (800495c <_lseek_r+0x20>)
 8004942:	4608      	mov	r0, r1
 8004944:	4611      	mov	r1, r2
 8004946:	2200      	movs	r2, #0
 8004948:	602a      	str	r2, [r5, #0]
 800494a:	461a      	mov	r2, r3
 800494c:	f7fc f83a 	bl	80009c4 <_lseek>
 8004950:	1c43      	adds	r3, r0, #1
 8004952:	d102      	bne.n	800495a <_lseek_r+0x1e>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	b103      	cbz	r3, 800495a <_lseek_r+0x1e>
 8004958:	6023      	str	r3, [r4, #0]
 800495a:	bd38      	pop	{r3, r4, r5, pc}
 800495c:	20000144 	.word	0x20000144

08004960 <__swhatbuf_r>:
 8004960:	b570      	push	{r4, r5, r6, lr}
 8004962:	460e      	mov	r6, r1
 8004964:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004968:	b096      	sub	sp, #88	; 0x58
 800496a:	4614      	mov	r4, r2
 800496c:	2900      	cmp	r1, #0
 800496e:	461d      	mov	r5, r3
 8004970:	da08      	bge.n	8004984 <__swhatbuf_r+0x24>
 8004972:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8004976:	2200      	movs	r2, #0
 8004978:	602a      	str	r2, [r5, #0]
 800497a:	061a      	lsls	r2, r3, #24
 800497c:	d410      	bmi.n	80049a0 <__swhatbuf_r+0x40>
 800497e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004982:	e00e      	b.n	80049a2 <__swhatbuf_r+0x42>
 8004984:	466a      	mov	r2, sp
 8004986:	f000 f8c9 	bl	8004b1c <_fstat_r>
 800498a:	2800      	cmp	r0, #0
 800498c:	dbf1      	blt.n	8004972 <__swhatbuf_r+0x12>
 800498e:	9a01      	ldr	r2, [sp, #4]
 8004990:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004994:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004998:	425a      	negs	r2, r3
 800499a:	415a      	adcs	r2, r3
 800499c:	602a      	str	r2, [r5, #0]
 800499e:	e7ee      	b.n	800497e <__swhatbuf_r+0x1e>
 80049a0:	2340      	movs	r3, #64	; 0x40
 80049a2:	2000      	movs	r0, #0
 80049a4:	6023      	str	r3, [r4, #0]
 80049a6:	b016      	add	sp, #88	; 0x58
 80049a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080049ac <__smakebuf_r>:
 80049ac:	898b      	ldrh	r3, [r1, #12]
 80049ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80049b0:	079d      	lsls	r5, r3, #30
 80049b2:	4606      	mov	r6, r0
 80049b4:	460c      	mov	r4, r1
 80049b6:	d507      	bpl.n	80049c8 <__smakebuf_r+0x1c>
 80049b8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80049bc:	6023      	str	r3, [r4, #0]
 80049be:	6123      	str	r3, [r4, #16]
 80049c0:	2301      	movs	r3, #1
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	b002      	add	sp, #8
 80049c6:	bd70      	pop	{r4, r5, r6, pc}
 80049c8:	ab01      	add	r3, sp, #4
 80049ca:	466a      	mov	r2, sp
 80049cc:	f7ff ffc8 	bl	8004960 <__swhatbuf_r>
 80049d0:	9900      	ldr	r1, [sp, #0]
 80049d2:	4605      	mov	r5, r0
 80049d4:	4630      	mov	r0, r6
 80049d6:	f7ff fa57 	bl	8003e88 <_malloc_r>
 80049da:	b948      	cbnz	r0, 80049f0 <__smakebuf_r+0x44>
 80049dc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049e0:	059a      	lsls	r2, r3, #22
 80049e2:	d4ef      	bmi.n	80049c4 <__smakebuf_r+0x18>
 80049e4:	f023 0303 	bic.w	r3, r3, #3
 80049e8:	f043 0302 	orr.w	r3, r3, #2
 80049ec:	81a3      	strh	r3, [r4, #12]
 80049ee:	e7e3      	b.n	80049b8 <__smakebuf_r+0xc>
 80049f0:	4b0d      	ldr	r3, [pc, #52]	; (8004a28 <__smakebuf_r+0x7c>)
 80049f2:	62b3      	str	r3, [r6, #40]	; 0x28
 80049f4:	89a3      	ldrh	r3, [r4, #12]
 80049f6:	6020      	str	r0, [r4, #0]
 80049f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80049fc:	6120      	str	r0, [r4, #16]
 80049fe:	81a3      	strh	r3, [r4, #12]
 8004a00:	9b00      	ldr	r3, [sp, #0]
 8004a02:	6163      	str	r3, [r4, #20]
 8004a04:	9b01      	ldr	r3, [sp, #4]
 8004a06:	b15b      	cbz	r3, 8004a20 <__smakebuf_r+0x74>
 8004a08:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004a0c:	4630      	mov	r0, r6
 8004a0e:	f000 f897 	bl	8004b40 <_isatty_r>
 8004a12:	b128      	cbz	r0, 8004a20 <__smakebuf_r+0x74>
 8004a14:	89a3      	ldrh	r3, [r4, #12]
 8004a16:	f023 0303 	bic.w	r3, r3, #3
 8004a1a:	f043 0301 	orr.w	r3, r3, #1
 8004a1e:	81a3      	strh	r3, [r4, #12]
 8004a20:	89a0      	ldrh	r0, [r4, #12]
 8004a22:	4305      	orrs	r5, r0
 8004a24:	81a5      	strh	r5, [r4, #12]
 8004a26:	e7cd      	b.n	80049c4 <__smakebuf_r+0x18>
 8004a28:	08003ca1 	.word	0x08003ca1

08004a2c <memchr>:
 8004a2c:	b2c9      	uxtb	r1, r1
 8004a2e:	4402      	add	r2, r0
 8004a30:	b510      	push	{r4, lr}
 8004a32:	4290      	cmp	r0, r2
 8004a34:	4603      	mov	r3, r0
 8004a36:	d101      	bne.n	8004a3c <memchr+0x10>
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e003      	b.n	8004a44 <memchr+0x18>
 8004a3c:	781c      	ldrb	r4, [r3, #0]
 8004a3e:	3001      	adds	r0, #1
 8004a40:	428c      	cmp	r4, r1
 8004a42:	d1f6      	bne.n	8004a32 <memchr+0x6>
 8004a44:	4618      	mov	r0, r3
 8004a46:	bd10      	pop	{r4, pc}

08004a48 <__malloc_lock>:
 8004a48:	4801      	ldr	r0, [pc, #4]	; (8004a50 <__malloc_lock+0x8>)
 8004a4a:	f7ff b9fb 	b.w	8003e44 <__retarget_lock_acquire_recursive>
 8004a4e:	bf00      	nop
 8004a50:	20000138 	.word	0x20000138

08004a54 <__malloc_unlock>:
 8004a54:	4801      	ldr	r0, [pc, #4]	; (8004a5c <__malloc_unlock+0x8>)
 8004a56:	f7ff b9f6 	b.w	8003e46 <__retarget_lock_release_recursive>
 8004a5a:	bf00      	nop
 8004a5c:	20000138 	.word	0x20000138

08004a60 <_free_r>:
 8004a60:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004a62:	2900      	cmp	r1, #0
 8004a64:	d043      	beq.n	8004aee <_free_r+0x8e>
 8004a66:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a6a:	1f0c      	subs	r4, r1, #4
 8004a6c:	9001      	str	r0, [sp, #4]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	bfb8      	it	lt
 8004a72:	18e4      	addlt	r4, r4, r3
 8004a74:	f7ff ffe8 	bl	8004a48 <__malloc_lock>
 8004a78:	4a1e      	ldr	r2, [pc, #120]	; (8004af4 <_free_r+0x94>)
 8004a7a:	9801      	ldr	r0, [sp, #4]
 8004a7c:	6813      	ldr	r3, [r2, #0]
 8004a7e:	b933      	cbnz	r3, 8004a8e <_free_r+0x2e>
 8004a80:	6063      	str	r3, [r4, #4]
 8004a82:	6014      	str	r4, [r2, #0]
 8004a84:	b003      	add	sp, #12
 8004a86:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a8a:	f7ff bfe3 	b.w	8004a54 <__malloc_unlock>
 8004a8e:	42a3      	cmp	r3, r4
 8004a90:	d908      	bls.n	8004aa4 <_free_r+0x44>
 8004a92:	6825      	ldr	r5, [r4, #0]
 8004a94:	1961      	adds	r1, r4, r5
 8004a96:	428b      	cmp	r3, r1
 8004a98:	bf01      	itttt	eq
 8004a9a:	6819      	ldreq	r1, [r3, #0]
 8004a9c:	685b      	ldreq	r3, [r3, #4]
 8004a9e:	1949      	addeq	r1, r1, r5
 8004aa0:	6021      	streq	r1, [r4, #0]
 8004aa2:	e7ed      	b.n	8004a80 <_free_r+0x20>
 8004aa4:	461a      	mov	r2, r3
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	b10b      	cbz	r3, 8004aae <_free_r+0x4e>
 8004aaa:	42a3      	cmp	r3, r4
 8004aac:	d9fa      	bls.n	8004aa4 <_free_r+0x44>
 8004aae:	6811      	ldr	r1, [r2, #0]
 8004ab0:	1855      	adds	r5, r2, r1
 8004ab2:	42a5      	cmp	r5, r4
 8004ab4:	d10b      	bne.n	8004ace <_free_r+0x6e>
 8004ab6:	6824      	ldr	r4, [r4, #0]
 8004ab8:	4421      	add	r1, r4
 8004aba:	1854      	adds	r4, r2, r1
 8004abc:	6011      	str	r1, [r2, #0]
 8004abe:	42a3      	cmp	r3, r4
 8004ac0:	d1e0      	bne.n	8004a84 <_free_r+0x24>
 8004ac2:	681c      	ldr	r4, [r3, #0]
 8004ac4:	685b      	ldr	r3, [r3, #4]
 8004ac6:	4421      	add	r1, r4
 8004ac8:	6053      	str	r3, [r2, #4]
 8004aca:	6011      	str	r1, [r2, #0]
 8004acc:	e7da      	b.n	8004a84 <_free_r+0x24>
 8004ace:	d902      	bls.n	8004ad6 <_free_r+0x76>
 8004ad0:	230c      	movs	r3, #12
 8004ad2:	6003      	str	r3, [r0, #0]
 8004ad4:	e7d6      	b.n	8004a84 <_free_r+0x24>
 8004ad6:	6825      	ldr	r5, [r4, #0]
 8004ad8:	1961      	adds	r1, r4, r5
 8004ada:	428b      	cmp	r3, r1
 8004adc:	bf02      	ittt	eq
 8004ade:	6819      	ldreq	r1, [r3, #0]
 8004ae0:	685b      	ldreq	r3, [r3, #4]
 8004ae2:	1949      	addeq	r1, r1, r5
 8004ae4:	6063      	str	r3, [r4, #4]
 8004ae6:	bf08      	it	eq
 8004ae8:	6021      	streq	r1, [r4, #0]
 8004aea:	6054      	str	r4, [r2, #4]
 8004aec:	e7ca      	b.n	8004a84 <_free_r+0x24>
 8004aee:	b003      	add	sp, #12
 8004af0:	bd30      	pop	{r4, r5, pc}
 8004af2:	bf00      	nop
 8004af4:	2000013c 	.word	0x2000013c

08004af8 <_read_r>:
 8004af8:	b538      	push	{r3, r4, r5, lr}
 8004afa:	4604      	mov	r4, r0
 8004afc:	4d06      	ldr	r5, [pc, #24]	; (8004b18 <_read_r+0x20>)
 8004afe:	4608      	mov	r0, r1
 8004b00:	4611      	mov	r1, r2
 8004b02:	2200      	movs	r2, #0
 8004b04:	602a      	str	r2, [r5, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	f7fb fefc 	bl	8000904 <_read>
 8004b0c:	1c43      	adds	r3, r0, #1
 8004b0e:	d102      	bne.n	8004b16 <_read_r+0x1e>
 8004b10:	682b      	ldr	r3, [r5, #0]
 8004b12:	b103      	cbz	r3, 8004b16 <_read_r+0x1e>
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	bd38      	pop	{r3, r4, r5, pc}
 8004b18:	20000144 	.word	0x20000144

08004b1c <_fstat_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	2300      	movs	r3, #0
 8004b20:	4d06      	ldr	r5, [pc, #24]	; (8004b3c <_fstat_r+0x20>)
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	4611      	mov	r1, r2
 8004b28:	602b      	str	r3, [r5, #0]
 8004b2a:	f7fb ff30 	bl	800098e <_fstat>
 8004b2e:	1c43      	adds	r3, r0, #1
 8004b30:	d102      	bne.n	8004b38 <_fstat_r+0x1c>
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	b103      	cbz	r3, 8004b38 <_fstat_r+0x1c>
 8004b36:	6023      	str	r3, [r4, #0]
 8004b38:	bd38      	pop	{r3, r4, r5, pc}
 8004b3a:	bf00      	nop
 8004b3c:	20000144 	.word	0x20000144

08004b40 <_isatty_r>:
 8004b40:	b538      	push	{r3, r4, r5, lr}
 8004b42:	2300      	movs	r3, #0
 8004b44:	4d05      	ldr	r5, [pc, #20]	; (8004b5c <_isatty_r+0x1c>)
 8004b46:	4604      	mov	r4, r0
 8004b48:	4608      	mov	r0, r1
 8004b4a:	602b      	str	r3, [r5, #0]
 8004b4c:	f7fb ff2f 	bl	80009ae <_isatty>
 8004b50:	1c43      	adds	r3, r0, #1
 8004b52:	d102      	bne.n	8004b5a <_isatty_r+0x1a>
 8004b54:	682b      	ldr	r3, [r5, #0]
 8004b56:	b103      	cbz	r3, 8004b5a <_isatty_r+0x1a>
 8004b58:	6023      	str	r3, [r4, #0]
 8004b5a:	bd38      	pop	{r3, r4, r5, pc}
 8004b5c:	20000144 	.word	0x20000144

08004b60 <_init>:
 8004b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b62:	bf00      	nop
 8004b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b66:	bc08      	pop	{r3}
 8004b68:	469e      	mov	lr, r3
 8004b6a:	4770      	bx	lr

08004b6c <_fini>:
 8004b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b6e:	bf00      	nop
 8004b70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b72:	bc08      	pop	{r3}
 8004b74:	469e      	mov	lr, r3
 8004b76:	4770      	bx	lr
