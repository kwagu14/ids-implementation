
Nonblocking_Memory_Forensics_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000748c  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000be4  0c007680  0c007680  00017680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c008264  0c008264  0002e040  2**0
                  CONTENTS
  4 .ARM          00000008  0c008264  0c008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c00826c  0c00826c  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c00826c  0c00826c  0001826c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c008270  0c008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000ac  30000000  0c008274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000a90  300000ac  300000ac  000300ac  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000b3c  30000b3c  000300ac  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013474  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a6e  00000000  00000000  000414ea  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00043f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ec8  00000000  00000000  00044ef8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002aa4c  00000000  00000000  00045dc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ef4  00000000  00000000  0007080c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b78b  00000000  00000000  00084700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018fe8b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004084  00000000  00000000  0018fedc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	300000ac 	.word	0x300000ac
 c000210:	00000000 	.word	0x00000000
 c000214:	0c007668 	.word	0x0c007668

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	300000b0 	.word	0x300000b0
 c000230:	0c007668 	.word	0x0c007668

0c000234 <cmse_check_address_range>:
 c000234:	43c3      	mvns	r3, r0
 c000236:	428b      	cmp	r3, r1
 c000238:	d36d      	bcc.n	c000316 <cmse_check_address_range+0xe2>
 c00023a:	f032 031f 	bics.w	r3, r2, #31
 c00023e:	d16a      	bne.n	c000316 <cmse_check_address_range+0xe2>
 c000240:	3901      	subs	r1, #1
 c000242:	f002 0314 	and.w	r3, r2, #20
 c000246:	4401      	add	r1, r0
 c000248:	b500      	push	{lr}
 c00024a:	ea81 0c00 	eor.w	ip, r1, r0
 c00024e:	2b14      	cmp	r3, #20
 c000250:	d80e      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000252:	e8df f003 	tbb	[pc, r3]
 c000256:	0d3f      	.short	0x0d3f
 c000258:	0d480d0d 	.word	0x0d480d0d
 c00025c:	0d0d0d0d 	.word	0x0d0d0d0d
 c000260:	0d0d0d0d 	.word	0x0d0d0d0d
 c000264:	0d510d0d 	.word	0x0d510d0d
 c000268:	0d0d      	.short	0x0d0d
 c00026a:	10          	.byte	0x10
 c00026b:	00          	.byte	0x00
 c00026c:	02db      	lsls	r3, r3, #11
 c00026e:	d400      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c000270:	2000      	movs	r0, #0
 c000272:	f85d fb04 	ldr.w	pc, [sp], #4
 c000276:	f1bc 0f1f 	cmp.w	ip, #31
 c00027a:	e840 f3c0 	ttat	r3, r0
 c00027e:	d904      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000280:	469c      	mov	ip, r3
 c000282:	e841 f3c0 	ttat	r3, r1
 c000286:	459c      	cmp	ip, r3
 c000288:	d1f2      	bne.n	c000270 <cmse_check_address_range+0x3c>
 c00028a:	f022 0214 	bic.w	r2, r2, #20
 c00028e:	3a01      	subs	r2, #1
 c000290:	2a0a      	cmp	r2, #10
 c000292:	d8ed      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000294:	a101      	add	r1, pc, #4	; (adr r1, c00029c <cmse_check_address_range+0x68>)
 c000296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00029a:	bf00      	nop
 c00029c:	0c0002cf 	.word	0x0c0002cf
 c0002a0:	0c000311 	.word	0x0c000311
 c0002a4:	0c0002c9 	.word	0x0c0002c9
 c0002a8:	0c000271 	.word	0x0c000271
 c0002ac:	0c000271 	.word	0x0c000271
 c0002b0:	0c000271 	.word	0x0c000271
 c0002b4:	0c000271 	.word	0x0c000271
 c0002b8:	0c00030b 	.word	0x0c00030b
 c0002bc:	0c0002cf 	.word	0x0c0002cf
 c0002c0:	0c00026d 	.word	0x0c00026d
 c0002c4:	0c0002c9 	.word	0x0c0002c9
 c0002c8:	029a      	lsls	r2, r3, #10
 c0002ca:	d4d2      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002cc:	e7d0      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002ce:	031a      	lsls	r2, r3, #12
 c0002d0:	d4cf      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002d2:	e7cd      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002d4:	f1bc 0f1f 	cmp.w	ip, #31
 c0002d8:	e840 f300 	tt	r3, r0
 c0002dc:	d9d5      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002de:	469c      	mov	ip, r3
 c0002e0:	e841 f300 	tt	r3, r1
 c0002e4:	e7cf      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002e6:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ea:	e840 f340 	ttt	r3, r0
 c0002ee:	d9cc      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002f0:	469c      	mov	ip, r3
 c0002f2:	e841 f340 	ttt	r3, r1
 c0002f6:	e7c6      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002f8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fc:	e840 f380 	tta	r3, r0
 c000300:	d9c3      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000302:	469c      	mov	ip, r3
 c000304:	e841 f380 	tta	r3, r1
 c000308:	e7bd      	b.n	c000286 <cmse_check_address_range+0x52>
 c00030a:	035b      	lsls	r3, r3, #13
 c00030c:	d5b0      	bpl.n	c000270 <cmse_check_address_range+0x3c>
 c00030e:	e7b0      	b.n	c000272 <cmse_check_address_range+0x3e>
 c000310:	0259      	lsls	r1, r3, #9
 c000312:	d5ae      	bpl.n	c000272 <cmse_check_address_range+0x3e>
 c000314:	e7ac      	b.n	c000270 <cmse_check_address_range+0x3c>
 c000316:	2000      	movs	r0, #0
 c000318:	4770      	bx	lr
 c00031a:	bf00      	nop

0c00031c <__gnu_cmse_nonsecure_call>:
 c00031c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000320:	4627      	mov	r7, r4
 c000322:	46a0      	mov	r8, r4
 c000324:	46a1      	mov	r9, r4
 c000326:	46a2      	mov	sl, r4
 c000328:	46a3      	mov	fp, r4
 c00032a:	46a4      	mov	ip, r4
 c00032c:	ed2d 8b10 	vpush	{d8-d15}
 c000330:	f04f 0500 	mov.w	r5, #0
 c000334:	ec45 5b18 	vmov	d8, r5, r5
 c000338:	ec45 5a19 	vmov	s18, s19, r5, r5
 c00033c:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000340:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000344:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000348:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c00034c:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000350:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000354:	eef1 5a10 	vmrs	r5, fpscr
 c000358:	f64f 7660 	movw	r6, #65376	; 0xff60
 c00035c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000360:	4035      	ands	r5, r6
 c000362:	eee1 5a10 	vmsr	fpscr, r5
 c000366:	f384 8800 	msr	CPSR_f, r4
 c00036a:	4625      	mov	r5, r4
 c00036c:	4626      	mov	r6, r4
 c00036e:	47a4      	blxns	r4
 c000370:	ecbd 8b10 	vpop	{d8-d15}
 c000374:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000378 <__aeabi_uldivmod>:
 c000378:	b953      	cbnz	r3, c000390 <__aeabi_uldivmod+0x18>
 c00037a:	b94a      	cbnz	r2, c000390 <__aeabi_uldivmod+0x18>
 c00037c:	2900      	cmp	r1, #0
 c00037e:	bf08      	it	eq
 c000380:	2800      	cmpeq	r0, #0
 c000382:	bf1c      	itt	ne
 c000384:	f04f 31ff 	movne.w	r1, #4294967295
 c000388:	f04f 30ff 	movne.w	r0, #4294967295
 c00038c:	f000 b982 	b.w	c000694 <__aeabi_idiv0>
 c000390:	f1ad 0c08 	sub.w	ip, sp, #8
 c000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000398:	f000 f806 	bl	c0003a8 <__udivmoddi4>
 c00039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0003a4:	b004      	add	sp, #16
 c0003a6:	4770      	bx	lr

0c0003a8 <__udivmoddi4>:
 c0003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0003ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0003ae:	4604      	mov	r4, r0
 c0003b0:	460f      	mov	r7, r1
 c0003b2:	2b00      	cmp	r3, #0
 c0003b4:	d148      	bne.n	c000448 <__udivmoddi4+0xa0>
 c0003b6:	428a      	cmp	r2, r1
 c0003b8:	4694      	mov	ip, r2
 c0003ba:	d961      	bls.n	c000480 <__udivmoddi4+0xd8>
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	b143      	cbz	r3, c0003d4 <__udivmoddi4+0x2c>
 c0003c2:	f1c3 0120 	rsb	r1, r3, #32
 c0003c6:	409f      	lsls	r7, r3
 c0003c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0003cc:	409c      	lsls	r4, r3
 c0003ce:	fa20 f101 	lsr.w	r1, r0, r1
 c0003d2:	430f      	orrs	r7, r1
 c0003d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c0003d8:	fa1f fe8c 	uxth.w	lr, ip
 c0003dc:	0c22      	lsrs	r2, r4, #16
 c0003de:	fbb7 f6f1 	udiv	r6, r7, r1
 c0003e2:	fb01 7716 	mls	r7, r1, r6, r7
 c0003e6:	fb06 f00e 	mul.w	r0, r6, lr
 c0003ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0003ee:	4290      	cmp	r0, r2
 c0003f0:	d908      	bls.n	c000404 <__udivmoddi4+0x5c>
 c0003f2:	eb1c 0202 	adds.w	r2, ip, r2
 c0003f6:	f106 37ff 	add.w	r7, r6, #4294967295
 c0003fa:	d202      	bcs.n	c000402 <__udivmoddi4+0x5a>
 c0003fc:	4290      	cmp	r0, r2
 c0003fe:	f200 8137 	bhi.w	c000670 <__udivmoddi4+0x2c8>
 c000402:	463e      	mov	r6, r7
 c000404:	1a12      	subs	r2, r2, r0
 c000406:	b2a4      	uxth	r4, r4
 c000408:	fbb2 f0f1 	udiv	r0, r2, r1
 c00040c:	fb01 2210 	mls	r2, r1, r0, r2
 c000410:	fb00 fe0e 	mul.w	lr, r0, lr
 c000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000418:	45a6      	cmp	lr, r4
 c00041a:	d908      	bls.n	c00042e <__udivmoddi4+0x86>
 c00041c:	eb1c 0404 	adds.w	r4, ip, r4
 c000420:	f100 32ff 	add.w	r2, r0, #4294967295
 c000424:	d202      	bcs.n	c00042c <__udivmoddi4+0x84>
 c000426:	45a6      	cmp	lr, r4
 c000428:	f200 811c 	bhi.w	c000664 <__udivmoddi4+0x2bc>
 c00042c:	4610      	mov	r0, r2
 c00042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000432:	eba4 040e 	sub.w	r4, r4, lr
 c000436:	2600      	movs	r6, #0
 c000438:	b11d      	cbz	r5, c000442 <__udivmoddi4+0x9a>
 c00043a:	40dc      	lsrs	r4, r3
 c00043c:	2300      	movs	r3, #0
 c00043e:	e9c5 4300 	strd	r4, r3, [r5]
 c000442:	4631      	mov	r1, r6
 c000444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000448:	428b      	cmp	r3, r1
 c00044a:	d909      	bls.n	c000460 <__udivmoddi4+0xb8>
 c00044c:	2d00      	cmp	r5, #0
 c00044e:	f000 80fd 	beq.w	c00064c <__udivmoddi4+0x2a4>
 c000452:	2600      	movs	r6, #0
 c000454:	e9c5 0100 	strd	r0, r1, [r5]
 c000458:	4630      	mov	r0, r6
 c00045a:	4631      	mov	r1, r6
 c00045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000460:	fab3 f683 	clz	r6, r3
 c000464:	2e00      	cmp	r6, #0
 c000466:	d14b      	bne.n	c000500 <__udivmoddi4+0x158>
 c000468:	428b      	cmp	r3, r1
 c00046a:	f0c0 80f2 	bcc.w	c000652 <__udivmoddi4+0x2aa>
 c00046e:	4282      	cmp	r2, r0
 c000470:	f240 80ef 	bls.w	c000652 <__udivmoddi4+0x2aa>
 c000474:	4630      	mov	r0, r6
 c000476:	2d00      	cmp	r5, #0
 c000478:	d0e3      	beq.n	c000442 <__udivmoddi4+0x9a>
 c00047a:	e9c5 4700 	strd	r4, r7, [r5]
 c00047e:	e7e0      	b.n	c000442 <__udivmoddi4+0x9a>
 c000480:	b902      	cbnz	r2, c000484 <__udivmoddi4+0xdc>
 c000482:	deff      	udf	#255	; 0xff
 c000484:	fab2 f382 	clz	r3, r2
 c000488:	2b00      	cmp	r3, #0
 c00048a:	f040 809d 	bne.w	c0005c8 <__udivmoddi4+0x220>
 c00048e:	1a89      	subs	r1, r1, r2
 c000490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000494:	b297      	uxth	r7, r2
 c000496:	2601      	movs	r6, #1
 c000498:	0c20      	lsrs	r0, r4, #16
 c00049a:	fbb1 f2fe 	udiv	r2, r1, lr
 c00049e:	fb0e 1112 	mls	r1, lr, r2, r1
 c0004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0004a6:	fb07 f002 	mul.w	r0, r7, r2
 c0004aa:	4288      	cmp	r0, r1
 c0004ac:	d90f      	bls.n	c0004ce <__udivmoddi4+0x126>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f102 38ff 	add.w	r8, r2, #4294967295
 c0004b6:	bf2c      	ite	cs
 c0004b8:	f04f 0901 	movcs.w	r9, #1
 c0004bc:	f04f 0900 	movcc.w	r9, #0
 c0004c0:	4288      	cmp	r0, r1
 c0004c2:	d903      	bls.n	c0004cc <__udivmoddi4+0x124>
 c0004c4:	f1b9 0f00 	cmp.w	r9, #0
 c0004c8:	f000 80cf 	beq.w	c00066a <__udivmoddi4+0x2c2>
 c0004cc:	4642      	mov	r2, r8
 c0004ce:	1a09      	subs	r1, r1, r0
 c0004d0:	b2a4      	uxth	r4, r4
 c0004d2:	fbb1 f0fe 	udiv	r0, r1, lr
 c0004d6:	fb0e 1110 	mls	r1, lr, r0, r1
 c0004da:	fb00 f707 	mul.w	r7, r0, r7
 c0004de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c0004e2:	42a7      	cmp	r7, r4
 c0004e4:	d908      	bls.n	c0004f8 <__udivmoddi4+0x150>
 c0004e6:	eb1c 0404 	adds.w	r4, ip, r4
 c0004ea:	f100 31ff 	add.w	r1, r0, #4294967295
 c0004ee:	d202      	bcs.n	c0004f6 <__udivmoddi4+0x14e>
 c0004f0:	42a7      	cmp	r7, r4
 c0004f2:	f200 80b4 	bhi.w	c00065e <__udivmoddi4+0x2b6>
 c0004f6:	4608      	mov	r0, r1
 c0004f8:	1be4      	subs	r4, r4, r7
 c0004fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0004fe:	e79b      	b.n	c000438 <__udivmoddi4+0x90>
 c000500:	f1c6 0720 	rsb	r7, r6, #32
 c000504:	40b3      	lsls	r3, r6
 c000506:	fa01 f406 	lsl.w	r4, r1, r6
 c00050a:	fa22 fc07 	lsr.w	ip, r2, r7
 c00050e:	40f9      	lsrs	r1, r7
 c000510:	40b2      	lsls	r2, r6
 c000512:	ea4c 0c03 	orr.w	ip, ip, r3
 c000516:	fa20 f307 	lsr.w	r3, r0, r7
 c00051a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00051e:	431c      	orrs	r4, r3
 c000520:	fa1f fe8c 	uxth.w	lr, ip
 c000524:	fa00 f306 	lsl.w	r3, r0, r6
 c000528:	0c20      	lsrs	r0, r4, #16
 c00052a:	fbb1 f8f9 	udiv	r8, r1, r9
 c00052e:	fb09 1118 	mls	r1, r9, r8, r1
 c000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000536:	fb08 f00e 	mul.w	r0, r8, lr
 c00053a:	4288      	cmp	r0, r1
 c00053c:	d90f      	bls.n	c00055e <__udivmoddi4+0x1b6>
 c00053e:	eb1c 0101 	adds.w	r1, ip, r1
 c000542:	f108 3aff 	add.w	sl, r8, #4294967295
 c000546:	bf2c      	ite	cs
 c000548:	f04f 0b01 	movcs.w	fp, #1
 c00054c:	f04f 0b00 	movcc.w	fp, #0
 c000550:	4288      	cmp	r0, r1
 c000552:	d903      	bls.n	c00055c <__udivmoddi4+0x1b4>
 c000554:	f1bb 0f00 	cmp.w	fp, #0
 c000558:	f000 808d 	beq.w	c000676 <__udivmoddi4+0x2ce>
 c00055c:	46d0      	mov	r8, sl
 c00055e:	1a09      	subs	r1, r1, r0
 c000560:	b2a4      	uxth	r4, r4
 c000562:	fbb1 f0f9 	udiv	r0, r1, r9
 c000566:	fb09 1110 	mls	r1, r9, r0, r1
 c00056a:	fb00 fe0e 	mul.w	lr, r0, lr
 c00056e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000572:	458e      	cmp	lr, r1
 c000574:	d907      	bls.n	c000586 <__udivmoddi4+0x1de>
 c000576:	eb1c 0101 	adds.w	r1, ip, r1
 c00057a:	f100 34ff 	add.w	r4, r0, #4294967295
 c00057e:	d201      	bcs.n	c000584 <__udivmoddi4+0x1dc>
 c000580:	458e      	cmp	lr, r1
 c000582:	d87f      	bhi.n	c000684 <__udivmoddi4+0x2dc>
 c000584:	4620      	mov	r0, r4
 c000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c00058a:	eba1 010e 	sub.w	r1, r1, lr
 c00058e:	fba0 9802 	umull	r9, r8, r0, r2
 c000592:	4541      	cmp	r1, r8
 c000594:	464c      	mov	r4, r9
 c000596:	46c6      	mov	lr, r8
 c000598:	d302      	bcc.n	c0005a0 <__udivmoddi4+0x1f8>
 c00059a:	d106      	bne.n	c0005aa <__udivmoddi4+0x202>
 c00059c:	454b      	cmp	r3, r9
 c00059e:	d204      	bcs.n	c0005aa <__udivmoddi4+0x202>
 c0005a0:	3801      	subs	r0, #1
 c0005a2:	ebb9 0402 	subs.w	r4, r9, r2
 c0005a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0005aa:	2d00      	cmp	r5, #0
 c0005ac:	d070      	beq.n	c000690 <__udivmoddi4+0x2e8>
 c0005ae:	1b1a      	subs	r2, r3, r4
 c0005b0:	eb61 010e 	sbc.w	r1, r1, lr
 c0005b4:	fa22 f306 	lsr.w	r3, r2, r6
 c0005b8:	fa01 f707 	lsl.w	r7, r1, r7
 c0005bc:	40f1      	lsrs	r1, r6
 c0005be:	2600      	movs	r6, #0
 c0005c0:	431f      	orrs	r7, r3
 c0005c2:	e9c5 7100 	strd	r7, r1, [r5]
 c0005c6:	e73c      	b.n	c000442 <__udivmoddi4+0x9a>
 c0005c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0005cc:	f1c3 0020 	rsb	r0, r3, #32
 c0005d0:	fa01 f203 	lsl.w	r2, r1, r3
 c0005d4:	fa21 f600 	lsr.w	r6, r1, r0
 c0005d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c0005dc:	fa24 f100 	lsr.w	r1, r4, r0
 c0005e0:	fa1f f78c 	uxth.w	r7, ip
 c0005e4:	409c      	lsls	r4, r3
 c0005e6:	4311      	orrs	r1, r2
 c0005e8:	fbb6 f0fe 	udiv	r0, r6, lr
 c0005ec:	0c0a      	lsrs	r2, r1, #16
 c0005ee:	fb0e 6610 	mls	r6, lr, r0, r6
 c0005f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0005f6:	fb00 f607 	mul.w	r6, r0, r7
 c0005fa:	4296      	cmp	r6, r2
 c0005fc:	d90e      	bls.n	c00061c <__udivmoddi4+0x274>
 c0005fe:	eb1c 0202 	adds.w	r2, ip, r2
 c000602:	f100 38ff 	add.w	r8, r0, #4294967295
 c000606:	bf2c      	ite	cs
 c000608:	f04f 0901 	movcs.w	r9, #1
 c00060c:	f04f 0900 	movcc.w	r9, #0
 c000610:	4296      	cmp	r6, r2
 c000612:	d902      	bls.n	c00061a <__udivmoddi4+0x272>
 c000614:	f1b9 0f00 	cmp.w	r9, #0
 c000618:	d031      	beq.n	c00067e <__udivmoddi4+0x2d6>
 c00061a:	4640      	mov	r0, r8
 c00061c:	1b92      	subs	r2, r2, r6
 c00061e:	b289      	uxth	r1, r1
 c000620:	fbb2 f6fe 	udiv	r6, r2, lr
 c000624:	fb0e 2216 	mls	r2, lr, r6, r2
 c000628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c00062c:	fb06 f207 	mul.w	r2, r6, r7
 c000630:	428a      	cmp	r2, r1
 c000632:	d907      	bls.n	c000644 <__udivmoddi4+0x29c>
 c000634:	eb1c 0101 	adds.w	r1, ip, r1
 c000638:	f106 38ff 	add.w	r8, r6, #4294967295
 c00063c:	d201      	bcs.n	c000642 <__udivmoddi4+0x29a>
 c00063e:	428a      	cmp	r2, r1
 c000640:	d823      	bhi.n	c00068a <__udivmoddi4+0x2e2>
 c000642:	4646      	mov	r6, r8
 c000644:	1a89      	subs	r1, r1, r2
 c000646:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c00064a:	e725      	b.n	c000498 <__udivmoddi4+0xf0>
 c00064c:	462e      	mov	r6, r5
 c00064e:	4628      	mov	r0, r5
 c000650:	e6f7      	b.n	c000442 <__udivmoddi4+0x9a>
 c000652:	1a84      	subs	r4, r0, r2
 c000654:	eb61 0303 	sbc.w	r3, r1, r3
 c000658:	2001      	movs	r0, #1
 c00065a:	461f      	mov	r7, r3
 c00065c:	e70b      	b.n	c000476 <__udivmoddi4+0xce>
 c00065e:	4464      	add	r4, ip
 c000660:	3802      	subs	r0, #2
 c000662:	e749      	b.n	c0004f8 <__udivmoddi4+0x150>
 c000664:	4464      	add	r4, ip
 c000666:	3802      	subs	r0, #2
 c000668:	e6e1      	b.n	c00042e <__udivmoddi4+0x86>
 c00066a:	3a02      	subs	r2, #2
 c00066c:	4461      	add	r1, ip
 c00066e:	e72e      	b.n	c0004ce <__udivmoddi4+0x126>
 c000670:	3e02      	subs	r6, #2
 c000672:	4462      	add	r2, ip
 c000674:	e6c6      	b.n	c000404 <__udivmoddi4+0x5c>
 c000676:	f1a8 0802 	sub.w	r8, r8, #2
 c00067a:	4461      	add	r1, ip
 c00067c:	e76f      	b.n	c00055e <__udivmoddi4+0x1b6>
 c00067e:	3802      	subs	r0, #2
 c000680:	4462      	add	r2, ip
 c000682:	e7cb      	b.n	c00061c <__udivmoddi4+0x274>
 c000684:	3802      	subs	r0, #2
 c000686:	4461      	add	r1, ip
 c000688:	e77d      	b.n	c000586 <__udivmoddi4+0x1de>
 c00068a:	3e02      	subs	r6, #2
 c00068c:	4461      	add	r1, ip
 c00068e:	e7d9      	b.n	c000644 <__udivmoddi4+0x29c>
 c000690:	462e      	mov	r6, r5
 c000692:	e6d6      	b.n	c000442 <__udivmoddi4+0x9a>

0c000694 <__aeabi_idiv0>:
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop

0c000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000698:	b580      	push	{r7, lr}
 c00069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00069c:	f001 fb49 	bl	c001d32 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006a0:	f000 f866 	bl	c000770 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006a4:	f000 f8ba 	bl	c00081c <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006a8:	f000 fa96 	bl	c000bd8 <MX_GPIO_Init>
  MX_DMA_Init();
 c0006ac:	f000 fa0c 	bl	c000ac8 <MX_DMA_Init>
  MX_ICACHE_Init();
 c0006b0:	f000 f94c 	bl	c00094c <MX_ICACHE_Init>
  MX_SPI3_Init();
 c0006b4:	f000 f97c 	bl	c0009b0 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 c0006b8:	f000 f9b8 	bl	c000a2c <MX_USART1_UART_Init>
  MX_IWDG_Init();
 c0006bc:	f000 f95a 	bl	c000974 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, NonsecureToSecureTransferComplete);
 c0006c0:	4a06      	ldr	r2, [pc, #24]	; (c0006dc <main+0x44>)
 c0006c2:	2100      	movs	r1, #0
 c0006c4:	4806      	ldr	r0, [pc, #24]	; (c0006e0 <main+0x48>)
 c0006c6:	f001 fedf 	bl	c002488 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_ERROR_CB_ID, NonsecureToSecureTransferError);
 c0006ca:	4a06      	ldr	r2, [pc, #24]	; (c0006e4 <main+0x4c>)
 c0006cc:	2104      	movs	r1, #4
 c0006ce:	4804      	ldr	r0, [pc, #16]	; (c0006e0 <main+0x48>)
 c0006d0:	f001 feda 	bl	c002488 <HAL_DMA_RegisterCallback>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0006d4:	f000 f808 	bl	c0006e8 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0006d8:	e7fe      	b.n	c0006d8 <main+0x40>
 c0006da:	bf00      	nop
 c0006dc:	0c001159 	.word	0x0c001159
 c0006e0:	300002a0 	.word	0x300002a0
 c0006e4:	0c001179 	.word	0x0c001179

0c0006e8 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0006e8:	b590      	push	{r4, r7, lr}
 c0006ea:	b083      	sub	sp, #12
 c0006ec:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0006ee:	4b1d      	ldr	r3, [pc, #116]	; (c000764 <NonSecure_Init+0x7c>)
 c0006f0:	4a1d      	ldr	r2, [pc, #116]	; (c000768 <NonSecure_Init+0x80>)
 c0006f2:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0006f4:	4b1c      	ldr	r3, [pc, #112]	; (c000768 <NonSecure_Init+0x80>)
 c0006f6:	681b      	ldr	r3, [r3, #0]
 c0006f8:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0006fa:	683b      	ldr	r3, [r7, #0]
 c0006fc:	f383 8888 	msr	MSP_NS, r3
}
 c000700:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000702:	4b1a      	ldr	r3, [pc, #104]	; (c00076c <NonSecure_Init+0x84>)
 c000704:	681b      	ldr	r3, [r3, #0]
 c000706:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000708:	687b      	ldr	r3, [r7, #4]
 c00070a:	461c      	mov	r4, r3
 c00070c:	0864      	lsrs	r4, r4, #1
 c00070e:	0064      	lsls	r4, r4, #1
 c000710:	4620      	mov	r0, r4
 c000712:	4621      	mov	r1, r4
 c000714:	4622      	mov	r2, r4
 c000716:	4623      	mov	r3, r4
 c000718:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00071c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000720:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000724:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000728:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00072c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000730:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000734:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000738:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00073c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000740:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000744:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000748:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00074c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000750:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000754:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000758:	f7ff fde0 	bl	c00031c <__gnu_cmse_nonsecure_call>
}
 c00075c:	bf00      	nop
 c00075e:	370c      	adds	r7, #12
 c000760:	46bd      	mov	sp, r7
 c000762:	bd90      	pop	{r4, r7, pc}
 c000764:	e002ed00 	.word	0xe002ed00
 c000768:	08040000 	.word	0x08040000
 c00076c:	08040004 	.word	0x08040004

0c000770 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000770:	b580      	push	{r7, lr}
 c000772:	b098      	sub	sp, #96	; 0x60
 c000774:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000776:	f107 0318 	add.w	r3, r7, #24
 c00077a:	2248      	movs	r2, #72	; 0x48
 c00077c:	2100      	movs	r1, #0
 c00077e:	4618      	mov	r0, r3
 c000780:	f005 ffcd 	bl	c00671e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c000784:	1d3b      	adds	r3, r7, #4
 c000786:	2200      	movs	r2, #0
 c000788:	601a      	str	r2, [r3, #0]
 c00078a:	605a      	str	r2, [r3, #4]
 c00078c:	609a      	str	r2, [r3, #8]
 c00078e:	60da      	str	r2, [r3, #12]
 c000790:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c000792:	2000      	movs	r0, #0
 c000794:	f002 fbbe 	bl	c002f14 <HAL_PWREx_ControlVoltageScaling>
 c000798:	4603      	mov	r3, r0
 c00079a:	2b00      	cmp	r3, #0
 c00079c:	d001      	beq.n	c0007a2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c00079e:	f000 fcfb 	bl	c001198 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 c0007a2:	2318      	movs	r3, #24
 c0007a4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c0007a6:	2300      	movs	r3, #0
 c0007a8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0007aa:	2301      	movs	r3, #1
 c0007ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0007ae:	2301      	movs	r3, #1
 c0007b0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0007b2:	2300      	movs	r3, #0
 c0007b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0007b6:	23b0      	movs	r3, #176	; 0xb0
 c0007b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0007ba:	2302      	movs	r3, #2
 c0007bc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0007be:	2301      	movs	r3, #1
 c0007c0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0007c2:	230c      	movs	r3, #12
 c0007c4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0007c6:	2337      	movs	r3, #55	; 0x37
 c0007c8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0007ca:	2307      	movs	r3, #7
 c0007cc:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0007ce:	2302      	movs	r3, #2
 c0007d0:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0007d2:	2302      	movs	r3, #2
 c0007d4:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0007d6:	f107 0318 	add.w	r3, r7, #24
 c0007da:	4618      	mov	r0, r3
 c0007dc:	f002 fc3a 	bl	c003054 <HAL_RCC_OscConfig>
 c0007e0:	4603      	mov	r3, r0
 c0007e2:	2b00      	cmp	r3, #0
 c0007e4:	d001      	beq.n	c0007ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 c0007e6:	f000 fcd7 	bl	c001198 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0007ea:	230f      	movs	r3, #15
 c0007ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0007ee:	2303      	movs	r3, #3
 c0007f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0007f2:	2300      	movs	r3, #0
 c0007f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0007f6:	2300      	movs	r3, #0
 c0007f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0007fa:	2300      	movs	r3, #0
 c0007fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0007fe:	1d3b      	adds	r3, r7, #4
 c000800:	2105      	movs	r1, #5
 c000802:	4618      	mov	r0, r3
 c000804:	f003 f8fc 	bl	c003a00 <HAL_RCC_ClockConfig>
 c000808:	4603      	mov	r3, r0
 c00080a:	2b00      	cmp	r3, #0
 c00080c:	d001      	beq.n	c000812 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 c00080e:	f000 fcc3 	bl	c001198 <Error_Handler>
  }
}
 c000812:	bf00      	nop
 c000814:	3760      	adds	r7, #96	; 0x60
 c000816:	46bd      	mov	sp, r7
 c000818:	bd80      	pop	{r7, pc}
	...

0c00081c <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c00081c:	b580      	push	{r7, lr}
 c00081e:	b09c      	sub	sp, #112	; 0x70
 c000820:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000822:	1d3b      	adds	r3, r7, #4
 c000824:	226c      	movs	r2, #108	; 0x6c
 c000826:	2100      	movs	r1, #0
 c000828:	4618      	mov	r0, r3
 c00082a:	f005 ff78 	bl	c00671e <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_IWDG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00082e:	f240 3101 	movw	r1, #769	; 0x301
 c000832:	2007      	movs	r0, #7
 c000834:	f002 f974 	bl	c002b20 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000838:	4603      	mov	r3, r0
 c00083a:	2b00      	cmp	r3, #0
 c00083c:	d001      	beq.n	c000842 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c00083e:	f000 fcab 	bl	c001198 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000842:	f240 3101 	movw	r1, #769	; 0x301
 c000846:	2009      	movs	r0, #9
 c000848:	f002 f96a 	bl	c002b20 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00084c:	4603      	mov	r3, r0
 c00084e:	2b00      	cmp	r3, #0
 c000850:	d001      	beq.n	c000856 <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c000852:	f000 fca1 	bl	c001198 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000856:	f240 3101 	movw	r1, #769	; 0x301
 c00085a:	483a      	ldr	r0, [pc, #232]	; (c000944 <MX_GTZC_S_Init+0x128>)
 c00085c:	f002 f960 	bl	c002b20 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000860:	4603      	mov	r3, r0
 c000862:	2b00      	cmp	r3, #0
 c000864:	d001      	beq.n	c00086a <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c000866:	f000 fc97 	bl	c001198 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00086a:	2300      	movs	r3, #0
 c00086c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00086e:	2300      	movs	r3, #0
 c000870:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000872:	f04f 33ff 	mov.w	r3, #4294967295
 c000876:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000878:	f04f 33ff 	mov.w	r3, #4294967295
 c00087c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00087e:	f04f 33ff 	mov.w	r3, #4294967295
 c000882:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000884:	f04f 33ff 	mov.w	r3, #4294967295
 c000888:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c00088a:	f04f 33ff 	mov.w	r3, #4294967295
 c00088e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000890:	f04f 33ff 	mov.w	r3, #4294967295
 c000894:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000896:	f04f 33ff 	mov.w	r3, #4294967295
 c00089a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00089c:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0008a2:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0008a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0008ac:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0008ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0008b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0008ba:	2300      	movs	r3, #0
 c0008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0008be:	2300      	movs	r3, #0
 c0008c0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0008c2:	2300      	movs	r3, #0
 c0008c4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0008c6:	2300      	movs	r3, #0
 c0008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0008ca:	2300      	movs	r3, #0
 c0008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0008ce:	2300      	movs	r3, #0
 c0008d0:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0008d2:	2300      	movs	r3, #0
 c0008d4:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0008d6:	2300      	movs	r3, #0
 c0008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0008da:	2300      	movs	r3, #0
 c0008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0008de:	2300      	movs	r3, #0
 c0008e0:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0008e2:	2300      	movs	r3, #0
 c0008e4:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0008e6:	2300      	movs	r3, #0
 c0008e8:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0008ea:	2300      	movs	r3, #0
 c0008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0008ee:	1d3b      	adds	r3, r7, #4
 c0008f0:	4619      	mov	r1, r3
 c0008f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0008f6:	f002 f9eb 	bl	c002cd0 <HAL_GTZC_MPCBB_ConfigMem>
 c0008fa:	4603      	mov	r3, r0
 c0008fc:	2b00      	cmp	r3, #0
 c0008fe:	d001      	beq.n	c000904 <MX_GTZC_S_Init+0xe8>
  {
    Error_Handler();
 c000900:	f000 fc4a 	bl	c001198 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000904:	2300      	movs	r3, #0
 c000906:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000908:	2300      	movs	r3, #0
 c00090a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00090c:	2300      	movs	r3, #0
 c00090e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000910:	2300      	movs	r3, #0
 c000912:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000914:	2300      	movs	r3, #0
 c000916:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000918:	2300      	movs	r3, #0
 c00091a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00091c:	2300      	movs	r3, #0
 c00091e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000920:	2300      	movs	r3, #0
 c000922:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000924:	2300      	movs	r3, #0
 c000926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000928:	1d3b      	adds	r3, r7, #4
 c00092a:	4619      	mov	r1, r3
 c00092c:	4806      	ldr	r0, [pc, #24]	; (c000948 <MX_GTZC_S_Init+0x12c>)
 c00092e:	f002 f9cf 	bl	c002cd0 <HAL_GTZC_MPCBB_ConfigMem>
 c000932:	4603      	mov	r3, r0
 c000934:	2b00      	cmp	r3, #0
 c000936:	d001      	beq.n	c00093c <MX_GTZC_S_Init+0x120>
  {
    Error_Handler();
 c000938:	f000 fc2e 	bl	c001198 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00093c:	bf00      	nop
 c00093e:	3770      	adds	r7, #112	; 0x70
 c000940:	46bd      	mov	sp, r7
 c000942:	bd80      	pop	{r7, pc}
 c000944:	10000001 	.word	0x10000001
 c000948:	30030000 	.word	0x30030000

0c00094c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c00094c:	b580      	push	{r7, lr}
 c00094e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000950:	2000      	movs	r0, #0
 c000952:	f002 fa41 	bl	c002dd8 <HAL_ICACHE_ConfigAssociativityMode>
 c000956:	4603      	mov	r3, r0
 c000958:	2b00      	cmp	r3, #0
 c00095a:	d001      	beq.n	c000960 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c00095c:	f000 fc1c 	bl	c001198 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000960:	f002 fa5a 	bl	c002e18 <HAL_ICACHE_Enable>
 c000964:	4603      	mov	r3, r0
 c000966:	2b00      	cmp	r3, #0
 c000968:	d001      	beq.n	c00096e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c00096a:	f000 fc15 	bl	c001198 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00096e:	bf00      	nop
 c000970:	bd80      	pop	{r7, pc}
	...

0c000974 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 c000974:	b580      	push	{r7, lr}
 c000976:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */
//
  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 c000978:	4b0b      	ldr	r3, [pc, #44]	; (c0009a8 <MX_IWDG_Init+0x34>)
 c00097a:	4a0c      	ldr	r2, [pc, #48]	; (c0009ac <MX_IWDG_Init+0x38>)
 c00097c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_32;
 c00097e:	4b0a      	ldr	r3, [pc, #40]	; (c0009a8 <MX_IWDG_Init+0x34>)
 c000980:	2203      	movs	r2, #3
 c000982:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 2499;
 c000984:	4b08      	ldr	r3, [pc, #32]	; (c0009a8 <MX_IWDG_Init+0x34>)
 c000986:	f640 12c3 	movw	r2, #2499	; 0x9c3
 c00098a:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 2499;
 c00098c:	4b06      	ldr	r3, [pc, #24]	; (c0009a8 <MX_IWDG_Init+0x34>)
 c00098e:	f640 12c3 	movw	r2, #2499	; 0x9c3
 c000992:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 c000994:	4804      	ldr	r0, [pc, #16]	; (c0009a8 <MX_IWDG_Init+0x34>)
 c000996:	f002 fa4f 	bl	c002e38 <HAL_IWDG_Init>
 c00099a:	4603      	mov	r3, r0
 c00099c:	2b00      	cmp	r3, #0
 c00099e:	d001      	beq.n	c0009a4 <MX_IWDG_Init+0x30>
  {
    Error_Handler();
 c0009a0:	f000 fbfa 	bl	c001198 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */
//
  /* USER CODE END IWDG_Init 2 */

}
 c0009a4:	bf00      	nop
 c0009a6:	bd80      	pop	{r7, pc}
 c0009a8:	300000c8 	.word	0x300000c8
 c0009ac:	50003000 	.word	0x50003000

0c0009b0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 c0009b0:	b580      	push	{r7, lr}
 c0009b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 c0009b4:	4b1b      	ldr	r3, [pc, #108]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009b6:	4a1c      	ldr	r2, [pc, #112]	; (c000a28 <MX_SPI3_Init+0x78>)
 c0009b8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 c0009ba:	4b1a      	ldr	r3, [pc, #104]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 c0009c0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 c0009c2:	4b18      	ldr	r3, [pc, #96]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009c4:	2200      	movs	r2, #0
 c0009c6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 c0009c8:	4b16      	ldr	r3, [pc, #88]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 c0009ce:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 c0009d0:	4b14      	ldr	r3, [pc, #80]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009d2:	2200      	movs	r2, #0
 c0009d4:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 c0009d6:	4b13      	ldr	r3, [pc, #76]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009d8:	2200      	movs	r2, #0
 c0009da:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 c0009dc:	4b11      	ldr	r3, [pc, #68]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009de:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0009e2:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 c0009e4:	4b0f      	ldr	r3, [pc, #60]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009e6:	2220      	movs	r2, #32
 c0009e8:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c0009ea:	4b0e      	ldr	r3, [pc, #56]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009ec:	2200      	movs	r2, #0
 c0009ee:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 c0009f0:	4b0c      	ldr	r3, [pc, #48]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009f2:	2200      	movs	r2, #0
 c0009f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0009f6:	4b0b      	ldr	r3, [pc, #44]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009f8:	2200      	movs	r2, #0
 c0009fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 c0009fc:	4b09      	ldr	r3, [pc, #36]	; (c000a24 <MX_SPI3_Init+0x74>)
 c0009fe:	2207      	movs	r2, #7
 c000a00:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 c000a02:	4b08      	ldr	r3, [pc, #32]	; (c000a24 <MX_SPI3_Init+0x74>)
 c000a04:	2200      	movs	r2, #0
 c000a06:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c000a08:	4b06      	ldr	r3, [pc, #24]	; (c000a24 <MX_SPI3_Init+0x74>)
 c000a0a:	2208      	movs	r2, #8
 c000a0c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 c000a0e:	4805      	ldr	r0, [pc, #20]	; (c000a24 <MX_SPI3_Init+0x74>)
 c000a10:	f003 fff0 	bl	c0049f4 <HAL_SPI_Init>
 c000a14:	4603      	mov	r3, r0
 c000a16:	2b00      	cmp	r3, #0
 c000a18:	d001      	beq.n	c000a1e <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 c000a1a:	f000 fbbd 	bl	c001198 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 c000a1e:	bf00      	nop
 c000a20:	bd80      	pop	{r7, pc}
 c000a22:	bf00      	nop
 c000a24:	300000d8 	.word	0x300000d8
 c000a28:	50003c00 	.word	0x50003c00

0c000a2c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c000a2c:	b580      	push	{r7, lr}
 c000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c000a30:	4b23      	ldr	r3, [pc, #140]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a32:	4a24      	ldr	r2, [pc, #144]	; (c000ac4 <MX_USART1_UART_Init+0x98>)
 c000a34:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c000a36:	4b22      	ldr	r3, [pc, #136]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000a3c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000a3e:	4b20      	ldr	r3, [pc, #128]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a40:	2200      	movs	r2, #0
 c000a42:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000a44:	4b1e      	ldr	r3, [pc, #120]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a46:	2200      	movs	r2, #0
 c000a48:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c000a4a:	4b1d      	ldr	r3, [pc, #116]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a4c:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000a50:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000a52:	4b1b      	ldr	r3, [pc, #108]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a54:	220c      	movs	r2, #12
 c000a56:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000a58:	4b19      	ldr	r3, [pc, #100]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a5a:	2200      	movs	r2, #0
 c000a5c:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000a5e:	4b18      	ldr	r3, [pc, #96]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a60:	2200      	movs	r2, #0
 c000a62:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000a64:	4b16      	ldr	r3, [pc, #88]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a66:	2200      	movs	r2, #0
 c000a68:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000a6a:	4b15      	ldr	r3, [pc, #84]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a6c:	2200      	movs	r2, #0
 c000a6e:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000a70:	4b13      	ldr	r3, [pc, #76]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a72:	2200      	movs	r2, #0
 c000a74:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c000a76:	4812      	ldr	r0, [pc, #72]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a78:	f004 ff22 	bl	c0058c0 <HAL_UART_Init>
 c000a7c:	4603      	mov	r3, r0
 c000a7e:	2b00      	cmp	r3, #0
 c000a80:	d001      	beq.n	c000a86 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c000a82:	f000 fb89 	bl	c001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a86:	2100      	movs	r1, #0
 c000a88:	480d      	ldr	r0, [pc, #52]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a8a:	f005 fd47 	bl	c00651c <HAL_UARTEx_SetTxFifoThreshold>
 c000a8e:	4603      	mov	r3, r0
 c000a90:	2b00      	cmp	r3, #0
 c000a92:	d001      	beq.n	c000a98 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c000a94:	f000 fb80 	bl	c001198 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a98:	2100      	movs	r1, #0
 c000a9a:	4809      	ldr	r0, [pc, #36]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000a9c:	f005 fd7c 	bl	c006598 <HAL_UARTEx_SetRxFifoThreshold>
 c000aa0:	4603      	mov	r3, r0
 c000aa2:	2b00      	cmp	r3, #0
 c000aa4:	d001      	beq.n	c000aaa <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c000aa6:	f000 fb77 	bl	c001198 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000aaa:	4805      	ldr	r0, [pc, #20]	; (c000ac0 <MX_USART1_UART_Init+0x94>)
 c000aac:	f005 fcfd 	bl	c0064aa <HAL_UARTEx_DisableFifoMode>
 c000ab0:	4603      	mov	r3, r0
 c000ab2:	2b00      	cmp	r3, #0
 c000ab4:	d001      	beq.n	c000aba <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c000ab6:	f000 fb6f 	bl	c001198 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c000aba:	bf00      	nop
 c000abc:	bd80      	pop	{r7, pc}
 c000abe:	bf00      	nop
 c000ac0:	3000020c 	.word	0x3000020c
 c000ac4:	50013800 	.word	0x50013800

0c000ac8 <MX_DMA_Init>:
  * Enable DMA controller clock
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  */
static void MX_DMA_Init(void)
{
 c000ac8:	b580      	push	{r7, lr}
 c000aca:	b082      	sub	sp, #8
 c000acc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000ace:	4b3f      	ldr	r3, [pc, #252]	; (c000bcc <MX_DMA_Init+0x104>)
 c000ad0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000ad2:	4a3e      	ldr	r2, [pc, #248]	; (c000bcc <MX_DMA_Init+0x104>)
 c000ad4:	f043 0304 	orr.w	r3, r3, #4
 c000ad8:	6493      	str	r3, [r2, #72]	; 0x48
 c000ada:	4b3c      	ldr	r3, [pc, #240]	; (c000bcc <MX_DMA_Init+0x104>)
 c000adc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000ade:	f003 0304 	and.w	r3, r3, #4
 c000ae2:	607b      	str	r3, [r7, #4]
 c000ae4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c000ae6:	4b39      	ldr	r3, [pc, #228]	; (c000bcc <MX_DMA_Init+0x104>)
 c000ae8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aea:	4a38      	ldr	r2, [pc, #224]	; (c000bcc <MX_DMA_Init+0x104>)
 c000aec:	f043 0301 	orr.w	r3, r3, #1
 c000af0:	6493      	str	r3, [r2, #72]	; 0x48
 c000af2:	4b36      	ldr	r3, [pc, #216]	; (c000bcc <MX_DMA_Init+0x104>)
 c000af4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000af6:	f003 0301 	and.w	r3, r3, #1
 c000afa:	603b      	str	r3, [r7, #0]
 c000afc:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 c000afe:	4b34      	ldr	r3, [pc, #208]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b00:	4a34      	ldr	r2, [pc, #208]	; (c000bd4 <MX_DMA_Init+0x10c>)
 c000b02:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 c000b04:	4b32      	ldr	r3, [pc, #200]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b06:	2200      	movs	r2, #0
 c000b08:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000b0a:	4b31      	ldr	r3, [pc, #196]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b0c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000b10:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 c000b12:	4b2f      	ldr	r3, [pc, #188]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b14:	2240      	movs	r2, #64	; 0x40
 c000b16:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 c000b18:	4b2d      	ldr	r3, [pc, #180]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b1a:	2280      	movs	r2, #128	; 0x80
 c000b1c:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000b1e:	4b2c      	ldr	r3, [pc, #176]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b20:	2200      	movs	r2, #0
 c000b22:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000b24:	4b2a      	ldr	r3, [pc, #168]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b26:	2200      	movs	r2, #0
 c000b28:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 c000b2a:	4b29      	ldr	r3, [pc, #164]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b2c:	2200      	movs	r2, #0
 c000b2e:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 c000b30:	4b27      	ldr	r3, [pc, #156]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b32:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c000b36:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 c000b38:	4825      	ldr	r0, [pc, #148]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b3a:	f001 fa81 	bl	c002040 <HAL_DMA_Init>
 c000b3e:	4603      	mov	r3, r0
 c000b40:	2b00      	cmp	r3, #0
 c000b42:	d001      	beq.n	c000b48 <MX_DMA_Init+0x80>
  {
    Error_Handler( );
 c000b44:	f000 fb28 	bl	c001198 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b48:	2110      	movs	r1, #16
 c000b4a:	4821      	ldr	r0, [pc, #132]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b4c:	f001 fcf0 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c000b50:	4603      	mov	r3, r0
 c000b52:	2b00      	cmp	r3, #0
 c000b54:	d001      	beq.n	c000b5a <MX_DMA_Init+0x92>
  {
    Error_Handler( );
 c000b56:	f000 fb1f 	bl	c001198 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SEC) != HAL_OK)
 c000b5a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000b5e:	481c      	ldr	r0, [pc, #112]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b60:	f001 fce6 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c000b64:	4603      	mov	r3, r0
 c000b66:	2b00      	cmp	r3, #0
 c000b68:	d001      	beq.n	c000b6e <MX_DMA_Init+0xa6>
  {
    Error_Handler( );
 c000b6a:	f000 fb15 	bl	c001198 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000b6e:	2104      	movs	r1, #4
 c000b70:	4817      	ldr	r0, [pc, #92]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b72:	f001 fcdd 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c000b76:	4603      	mov	r3, r0
 c000b78:	2b00      	cmp	r3, #0
 c000b7a:	d001      	beq.n	c000b80 <MX_DMA_Init+0xb8>
  {
    Error_Handler( );
 c000b7c:	f000 fb0c 	bl	c001198 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000b80:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000b84:	4812      	ldr	r0, [pc, #72]	; (c000bd0 <MX_DMA_Init+0x108>)
 c000b86:	f001 fcd3 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c000b8a:	4603      	mov	r3, r0
 c000b8c:	2b00      	cmp	r3, #0
 c000b8e:	d001      	beq.n	c000b94 <MX_DMA_Init+0xcc>
  {
    Error_Handler( );
 c000b90:	f000 fb02 	bl	c001198 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 c000b94:	2200      	movs	r2, #0
 c000b96:	2100      	movs	r1, #0
 c000b98:	201d      	movs	r0, #29
 c000b9a:	f001 fa1c 	bl	c001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 c000b9e:	201d      	movs	r0, #29
 c000ba0:	f001 fa33 	bl	c00200a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 c000ba4:	2200      	movs	r2, #0
 c000ba6:	2100      	movs	r1, #0
 c000ba8:	201e      	movs	r0, #30
 c000baa:	f001 fa14 	bl	c001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 c000bae:	201e      	movs	r0, #30
 c000bb0:	f001 fa2b 	bl	c00200a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 c000bb4:	2200      	movs	r2, #0
 c000bb6:	2100      	movs	r1, #0
 c000bb8:	201f      	movs	r0, #31
 c000bba:	f001 fa0c 	bl	c001fd6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 c000bbe:	201f      	movs	r0, #31
 c000bc0:	f001 fa23 	bl	c00200a <HAL_NVIC_EnableIRQ>

}
 c000bc4:	bf00      	nop
 c000bc6:	3708      	adds	r7, #8
 c000bc8:	46bd      	mov	sp, r7
 c000bca:	bd80      	pop	{r7, pc}
 c000bcc:	50021000 	.word	0x50021000
 c000bd0:	300002a0 	.word	0x300002a0
 c000bd4:	50020008 	.word	0x50020008

0c000bd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000bd8:	b580      	push	{r7, lr}
 c000bda:	b08a      	sub	sp, #40	; 0x28
 c000bdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000bde:	f107 0314 	add.w	r3, r7, #20
 c000be2:	2200      	movs	r2, #0
 c000be4:	601a      	str	r2, [r3, #0]
 c000be6:	605a      	str	r2, [r3, #4]
 c000be8:	609a      	str	r2, [r3, #8]
 c000bea:	60da      	str	r2, [r3, #12]
 c000bec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000bee:	4b2e      	ldr	r3, [pc, #184]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bf2:	4a2d      	ldr	r2, [pc, #180]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000bf4:	f043 0308 	orr.w	r3, r3, #8
 c000bf8:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000bfa:	4b2b      	ldr	r3, [pc, #172]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000bfc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bfe:	f003 0308 	and.w	r3, r3, #8
 c000c02:	613b      	str	r3, [r7, #16]
 c000c04:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000c06:	4b28      	ldr	r3, [pc, #160]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c0a:	4a27      	ldr	r2, [pc, #156]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000c10:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c12:	4b25      	ldr	r3, [pc, #148]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000c1a:	60fb      	str	r3, [r7, #12]
 c000c1c:	68fb      	ldr	r3, [r7, #12]
  HAL_PWREx_EnableVddIO2();
 c000c1e:	f002 f9d5 	bl	c002fcc <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000c22:	4b21      	ldr	r3, [pc, #132]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c26:	4a20      	ldr	r2, [pc, #128]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c28:	f043 0304 	orr.w	r3, r3, #4
 c000c2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c2e:	4b1e      	ldr	r3, [pc, #120]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c32:	f003 0304 	and.w	r3, r3, #4
 c000c36:	60bb      	str	r3, [r7, #8]
 c000c38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000c3a:	4b1b      	ldr	r3, [pc, #108]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c3e:	4a1a      	ldr	r2, [pc, #104]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c40:	f043 0302 	orr.w	r3, r3, #2
 c000c44:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c46:	4b18      	ldr	r3, [pc, #96]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c4a:	f003 0302 	and.w	r3, r3, #2
 c000c4e:	607b      	str	r3, [r7, #4]
 c000c50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000c52:	4b15      	ldr	r3, [pc, #84]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c56:	4a14      	ldr	r2, [pc, #80]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c58:	f043 0301 	orr.w	r3, r3, #1
 c000c5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c5e:	4b12      	ldr	r3, [pc, #72]	; (c000ca8 <MX_GPIO_Init+0xd0>)
 c000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c62:	f003 0301 	and.w	r3, r3, #1
 c000c66:	603b      	str	r3, [r7, #0]
 c000c68:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000c6a:	2201      	movs	r2, #1
 c000c6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000c70:	480e      	ldr	r0, [pc, #56]	; (c000cac <MX_GPIO_Init+0xd4>)
 c000c72:	f001 ff05 	bl	c002a80 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c000c76:	2200      	movs	r2, #0
 c000c78:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000c7c:	480c      	ldr	r0, [pc, #48]	; (c000cb0 <MX_GPIO_Init+0xd8>)
 c000c7e:	f001 ff17 	bl	c002ab0 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000c82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000c88:	2301      	movs	r3, #1
 c000c8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000c8c:	2301      	movs	r3, #1
 c000c8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000c90:	2300      	movs	r3, #0
 c000c92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000c94:	f107 0314 	add.w	r3, r7, #20
 c000c98:	4619      	mov	r1, r3
 c000c9a:	4804      	ldr	r0, [pc, #16]	; (c000cac <MX_GPIO_Init+0xd4>)
 c000c9c:	f001 fd70 	bl	c002780 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000ca0:	bf00      	nop
 c000ca2:	3728      	adds	r7, #40	; 0x28
 c000ca4:	46bd      	mov	sp, r7
 c000ca6:	bd80      	pop	{r7, pc}
 c000ca8:	50021000 	.word	0x50021000
 c000cac:	52020400 	.word	0x52020400
 c000cb0:	52020800 	.word	0x52020800

0c000cb4 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000cb4:	b480      	push	{r7}
 c000cb6:	b083      	sub	sp, #12
 c000cb8:	af00      	add	r7, sp, #0
 c000cba:	6078      	str	r0, [r7, #4]
//  printf("SPI Transfer complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000cbc:	4b04      	ldr	r3, [pc, #16]	; (c000cd0 <HAL_SPI_TxRxCpltCallback+0x1c>)
 c000cbe:	2201      	movs	r2, #1
 c000cc0:	601a      	str	r2, [r3, #0]
}
 c000cc2:	bf00      	nop
 c000cc4:	370c      	adds	r7, #12
 c000cc6:	46bd      	mov	sp, r7
 c000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ccc:	4770      	bx	lr
 c000cce:	bf00      	nop
 c000cd0:	30000308 	.word	0x30000308

0c000cd4 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000cd4:	b480      	push	{r7}
 c000cd6:	b083      	sub	sp, #12
 c000cd8:	af00      	add	r7, sp, #0
 c000cda:	6078      	str	r0, [r7, #4]
//  printf("SPI transmission complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000cdc:	4b04      	ldr	r3, [pc, #16]	; (c000cf0 <HAL_SPI_TxCpltCallback+0x1c>)
 c000cde:	2201      	movs	r2, #1
 c000ce0:	601a      	str	r2, [r3, #0]
}
 c000ce2:	bf00      	nop
 c000ce4:	370c      	adds	r7, #12
 c000ce6:	46bd      	mov	sp, r7
 c000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000cec:	4770      	bx	lr
 c000cee:	bf00      	nop
 c000cf0:	30000308 	.word	0x30000308

0c000cf4 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000cf4:	b480      	push	{r7}
 c000cf6:	b083      	sub	sp, #12
 c000cf8:	af00      	add	r7, sp, #0
 c000cfa:	6078      	str	r0, [r7, #4]
//  printf("SPI Reception complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000cfc:	4b04      	ldr	r3, [pc, #16]	; (c000d10 <HAL_SPI_RxCpltCallback+0x1c>)
 c000cfe:	2201      	movs	r2, #1
 c000d00:	601a      	str	r2, [r3, #0]
}
 c000d02:	bf00      	nop
 c000d04:	370c      	adds	r7, #12
 c000d06:	46bd      	mov	sp, r7
 c000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d0c:	4770      	bx	lr
 c000d0e:	bf00      	nop
 c000d10:	30000308 	.word	0x30000308

0c000d14 <__io_putchar>:


//redirects printf output to USART1 for displaying logs in a serial console
PUTCHAR_PROTOTYPE
{
 c000d14:	b580      	push	{r7, lr}
 c000d16:	b082      	sub	sp, #8
 c000d18:	af00      	add	r7, sp, #0
 c000d1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000d1c:	1d39      	adds	r1, r7, #4
 c000d1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000d22:	2201      	movs	r2, #1
 c000d24:	4803      	ldr	r0, [pc, #12]	; (c000d34 <__io_putchar+0x20>)
 c000d26:	f004 fe1b 	bl	c005960 <HAL_UART_Transmit>

  return ch;
 c000d2a:	687b      	ldr	r3, [r7, #4]
}
 c000d2c:	4618      	mov	r0, r3
 c000d2e:	3708      	adds	r7, #8
 c000d30:	46bd      	mov	sp, r7
 c000d32:	bd80      	pop	{r7, pc}
 c000d34:	3000020c 	.word	0x3000020c

0c000d38 <SearchForSig>:



//Returns position if s1 is substring of s2; -1 otherwise
int SearchForSig(uint8_t* signal, int sizeOfSig, uint8_t* data, int dataSize)
{
 c000d38:	b480      	push	{r7}
 c000d3a:	b08b      	sub	sp, #44	; 0x2c
 c000d3c:	af00      	add	r7, sp, #0
 c000d3e:	60f8      	str	r0, [r7, #12]
 c000d40:	60b9      	str	r1, [r7, #8]
 c000d42:	607a      	str	r2, [r7, #4]
 c000d44:	603b      	str	r3, [r7, #0]
    int M = sizeOfSig;
 c000d46:	68bb      	ldr	r3, [r7, #8]
 c000d48:	61bb      	str	r3, [r7, #24]
    int N = dataSize;
 c000d4a:	683b      	ldr	r3, [r7, #0]
 c000d4c:	617b      	str	r3, [r7, #20]
    int retval = -1;
 c000d4e:	f04f 33ff 	mov.w	r3, #4294967295
 c000d52:	627b      	str	r3, [r7, #36]	; 0x24


    /* A loop to slide signal one by one while comparing */
    for (int i = 0; i <= N - M; i++) {
 c000d54:	2300      	movs	r3, #0
 c000d56:	623b      	str	r3, [r7, #32]
 c000d58:	e022      	b.n	c000da0 <SearchForSig+0x68>
      int j;

        //for current index i, check for signal match
      for (j = 0; j < M; j++){
 c000d5a:	2300      	movs	r3, #0
 c000d5c:	61fb      	str	r3, [r7, #28]
 c000d5e:	e00f      	b.n	c000d80 <SearchForSig+0x48>
        if (data[i + j] != signal[j]){
 c000d60:	6a3a      	ldr	r2, [r7, #32]
 c000d62:	69fb      	ldr	r3, [r7, #28]
 c000d64:	4413      	add	r3, r2
 c000d66:	461a      	mov	r2, r3
 c000d68:	687b      	ldr	r3, [r7, #4]
 c000d6a:	4413      	add	r3, r2
 c000d6c:	781a      	ldrb	r2, [r3, #0]
 c000d6e:	69fb      	ldr	r3, [r7, #28]
 c000d70:	68f9      	ldr	r1, [r7, #12]
 c000d72:	440b      	add	r3, r1
 c000d74:	781b      	ldrb	r3, [r3, #0]
 c000d76:	429a      	cmp	r2, r3
 c000d78:	d107      	bne.n	c000d8a <SearchForSig+0x52>
      for (j = 0; j < M; j++){
 c000d7a:	69fb      	ldr	r3, [r7, #28]
 c000d7c:	3301      	adds	r3, #1
 c000d7e:	61fb      	str	r3, [r7, #28]
 c000d80:	69fa      	ldr	r2, [r7, #28]
 c000d82:	69bb      	ldr	r3, [r7, #24]
 c000d84:	429a      	cmp	r2, r3
 c000d86:	dbeb      	blt.n	c000d60 <SearchForSig+0x28>
 c000d88:	e000      	b.n	c000d8c <SearchForSig+0x54>
          break;
 c000d8a:	bf00      	nop
        }
      }
      if (j == M){
 c000d8c:	69fa      	ldr	r2, [r7, #28]
 c000d8e:	69bb      	ldr	r3, [r7, #24]
 c000d90:	429a      	cmp	r2, r3
 c000d92:	d102      	bne.n	c000d9a <SearchForSig+0x62>
          retval = i;
 c000d94:	6a3b      	ldr	r3, [r7, #32]
 c000d96:	627b      	str	r3, [r7, #36]	; 0x24
          break;
 c000d98:	e008      	b.n	c000dac <SearchForSig+0x74>
    for (int i = 0; i <= N - M; i++) {
 c000d9a:	6a3b      	ldr	r3, [r7, #32]
 c000d9c:	3301      	adds	r3, #1
 c000d9e:	623b      	str	r3, [r7, #32]
 c000da0:	697a      	ldr	r2, [r7, #20]
 c000da2:	69bb      	ldr	r3, [r7, #24]
 c000da4:	1ad3      	subs	r3, r2, r3
 c000da6:	6a3a      	ldr	r2, [r7, #32]
 c000da8:	429a      	cmp	r2, r3
 c000daa:	ddd6      	ble.n	c000d5a <SearchForSig+0x22>
      }
    }

    return retval;
 c000dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 c000dae:	4618      	mov	r0, r3
 c000db0:	372c      	adds	r7, #44	; 0x2c
 c000db2:	46bd      	mov	sp, r7
 c000db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000db8:	4770      	bx	lr
	...

0c000dbc <SECURE_SPI_Receive_Classification>:



//this function checks for & receives a classification from a stream of SPI data coming in through MISO
//It must be called in memory forensics after sending a full memory dump to the server
void SECURE_SPI_Receive_Classification(){
 c000dbc:	b580      	push	{r7, lr}
 c000dbe:	b086      	sub	sp, #24
 c000dc0:	af00      	add	r7, sp, #0

	int containsStartClassification;
	int containsEndClassification;
	//perform a new rx operation
	wTransferState = TRANSFER_WAIT;
 c000dc2:	4b41      	ldr	r3, [pc, #260]	; (c000ec8 <SECURE_SPI_Receive_Classification+0x10c>)
 c000dc4:	2200      	movs	r2, #0
 c000dc6:	601a      	str	r2, [r3, #0]
	if (HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)aRxBuffer, BUFFER_SIZE) != HAL_OK)
 c000dc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c000dcc:	493f      	ldr	r1, [pc, #252]	; (c000ecc <SECURE_SPI_Receive_Classification+0x110>)
 c000dce:	4840      	ldr	r0, [pc, #256]	; (c000ed0 <SECURE_SPI_Receive_Classification+0x114>)
 c000dd0:	f003 ffa8 	bl	c004d24 <HAL_SPI_Receive_DMA>
 c000dd4:	4603      	mov	r3, r0
 c000dd6:	2b00      	cmp	r3, #0
 c000dd8:	d004      	beq.n	c000de4 <SECURE_SPI_Receive_Classification+0x28>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up RX.\n\r");
 c000dda:	483e      	ldr	r0, [pc, #248]	; (c000ed4 <SECURE_SPI_Receive_Classification+0x118>)
 c000ddc:	f005 fca8 	bl	c006730 <iprintf>
		 Error_Handler();
 c000de0:	f000 f9da 	bl	c001198 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c000de4:	bf00      	nop
 c000de6:	4b38      	ldr	r3, [pc, #224]	; (c000ec8 <SECURE_SPI_Receive_Classification+0x10c>)
 c000de8:	681b      	ldr	r3, [r3, #0]
 c000dea:	2b00      	cmp	r3, #0
 c000dec:	d0fb      	beq.n	c000de6 <SECURE_SPI_Receive_Classification+0x2a>
	 {
	 }

	//check SPI transfer state
	if(wTransferState == TRANSFER_COMPLETE){
 c000dee:	4b36      	ldr	r3, [pc, #216]	; (c000ec8 <SECURE_SPI_Receive_Classification+0x10c>)
 c000df0:	681b      	ldr	r3, [r3, #0]
 c000df2:	2b01      	cmp	r3, #1
 c000df4:	d162      	bne.n	c000ebc <SECURE_SPI_Receive_Classification+0x100>

		//print the buffer received.
		printf("Buffer received from SPI: \n\r");
 c000df6:	4838      	ldr	r0, [pc, #224]	; (c000ed8 <SECURE_SPI_Receive_Classification+0x11c>)
 c000df8:	f005 fc9a 	bl	c006730 <iprintf>
		for(int i = 0; i < BUFFER_SIZE; i++){
 c000dfc:	2300      	movs	r3, #0
 c000dfe:	617b      	str	r3, [r7, #20]
 c000e00:	e00a      	b.n	c000e18 <SECURE_SPI_Receive_Classification+0x5c>
			printf("%d\t", aRxBuffer[i]);
 c000e02:	4a32      	ldr	r2, [pc, #200]	; (c000ecc <SECURE_SPI_Receive_Classification+0x110>)
 c000e04:	697b      	ldr	r3, [r7, #20]
 c000e06:	4413      	add	r3, r2
 c000e08:	781b      	ldrb	r3, [r3, #0]
 c000e0a:	4619      	mov	r1, r3
 c000e0c:	4833      	ldr	r0, [pc, #204]	; (c000edc <SECURE_SPI_Receive_Classification+0x120>)
 c000e0e:	f005 fc8f 	bl	c006730 <iprintf>
		for(int i = 0; i < BUFFER_SIZE; i++){
 c000e12:	697b      	ldr	r3, [r7, #20]
 c000e14:	3301      	adds	r3, #1
 c000e16:	617b      	str	r3, [r7, #20]
 c000e18:	697b      	ldr	r3, [r7, #20]
 c000e1a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c000e1e:	d3f0      	bcc.n	c000e02 <SECURE_SPI_Receive_Classification+0x46>
		}
		printf("\n\r");
 c000e20:	482f      	ldr	r0, [pc, #188]	; (c000ee0 <SECURE_SPI_Receive_Classification+0x124>)
 c000e22:	f005 fc85 	bl	c006730 <iprintf>

		//if the transfer completed, look for the start and end signals in the SPI rx buffer
		containsStartClassification = SearchForSig(START_CLASSIFICATION_SIG, START_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c000e26:	4b2f      	ldr	r3, [pc, #188]	; (c000ee4 <SECURE_SPI_Receive_Classification+0x128>)
 c000e28:	6819      	ldr	r1, [r3, #0]
 c000e2a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000e2e:	4a27      	ldr	r2, [pc, #156]	; (c000ecc <SECURE_SPI_Receive_Classification+0x110>)
 c000e30:	482d      	ldr	r0, [pc, #180]	; (c000ee8 <SECURE_SPI_Receive_Classification+0x12c>)
 c000e32:	f7ff ff81 	bl	c000d38 <SearchForSig>
 c000e36:	6138      	str	r0, [r7, #16]
		containsEndClassification = SearchForSig(END_CLASSIFICATION_SIG, END_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c000e38:	4b2c      	ldr	r3, [pc, #176]	; (c000eec <SECURE_SPI_Receive_Classification+0x130>)
 c000e3a:	6819      	ldr	r1, [r3, #0]
 c000e3c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000e40:	4a22      	ldr	r2, [pc, #136]	; (c000ecc <SECURE_SPI_Receive_Classification+0x110>)
 c000e42:	482b      	ldr	r0, [pc, #172]	; (c000ef0 <SECURE_SPI_Receive_Classification+0x134>)
 c000e44:	f7ff ff78 	bl	c000d38 <SearchForSig>
 c000e48:	60f8      	str	r0, [r7, #12]
		if(containsStartClassification >= 0 && containsEndClassification >= 0){
 c000e4a:	693b      	ldr	r3, [r7, #16]
 c000e4c:	2b00      	cmp	r3, #0
 c000e4e:	db37      	blt.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
 c000e50:	68fb      	ldr	r3, [r7, #12]
 c000e52:	2b00      	cmp	r3, #0
 c000e54:	db34      	blt.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
			//The start and end signals were found; make sure there's only one element between them
			if(containsStartClassification == containsEndClassification - START_CLASSIFICATION_SIZE - 1){
 c000e56:	4b23      	ldr	r3, [pc, #140]	; (c000ee4 <SECURE_SPI_Receive_Classification+0x128>)
 c000e58:	681b      	ldr	r3, [r3, #0]
 c000e5a:	68fa      	ldr	r2, [r7, #12]
 c000e5c:	1ad3      	subs	r3, r2, r3
 c000e5e:	3b01      	subs	r3, #1
 c000e60:	693a      	ldr	r2, [r7, #16]
 c000e62:	429a      	cmp	r2, r3
 c000e64:	d121      	bne.n	c000eaa <SECURE_SPI_Receive_Classification+0xee>
				//try to extract the classification
				printf("Classification found. Extracting...\n\r");
 c000e66:	4823      	ldr	r0, [pc, #140]	; (c000ef4 <SECURE_SPI_Receive_Classification+0x138>)
 c000e68:	f005 fc62 	bl	c006730 <iprintf>
				int classificationInd = containsEndClassification - 1;
 c000e6c:	68fb      	ldr	r3, [r7, #12]
 c000e6e:	3b01      	subs	r3, #1
 c000e70:	60bb      	str	r3, [r7, #8]
				uint8_t classification = aRxBuffer[classificationInd];
 c000e72:	4a16      	ldr	r2, [pc, #88]	; (c000ecc <SECURE_SPI_Receive_Classification+0x110>)
 c000e74:	68bb      	ldr	r3, [r7, #8]
 c000e76:	4413      	add	r3, r2
 c000e78:	781b      	ldrb	r3, [r3, #0]
 c000e7a:	71fb      	strb	r3, [r7, #7]
				printf("Classification: %c\n\r", classification);
 c000e7c:	79fb      	ldrb	r3, [r7, #7]
 c000e7e:	4619      	mov	r1, r3
 c000e80:	481d      	ldr	r0, [pc, #116]	; (c000ef8 <SECURE_SPI_Receive_Classification+0x13c>)
 c000e82:	f005 fc55 	bl	c006730 <iprintf>
				if(classification == '1'){
 c000e86:	79fb      	ldrb	r3, [r7, #7]
 c000e88:	2b31      	cmp	r3, #49	; 0x31
 c000e8a:	d103      	bne.n	c000e94 <SECURE_SPI_Receive_Classification+0xd8>
					printf("Memory was found to be benign.\n\r");
 c000e8c:	481b      	ldr	r0, [pc, #108]	; (c000efc <SECURE_SPI_Receive_Classification+0x140>)
 c000e8e:	f005 fc4f 	bl	c006730 <iprintf>
	}else{
		//if transfer didn't complete
		Error_Handler();
	}

}
 c000e92:	e015      	b.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
				}else if(classification == '0'){
 c000e94:	79fb      	ldrb	r3, [r7, #7]
 c000e96:	2b30      	cmp	r3, #48	; 0x30
 c000e98:	d103      	bne.n	c000ea2 <SECURE_SPI_Receive_Classification+0xe6>
					printf("Memory was found to be malicious.\n\r");
 c000e9a:	4819      	ldr	r0, [pc, #100]	; (c000f00 <SECURE_SPI_Receive_Classification+0x144>)
 c000e9c:	f005 fc48 	bl	c006730 <iprintf>
}
 c000ea0:	e00e      	b.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
					printf("ERROR. A classification other than 1 or 0 found!");
 c000ea2:	4818      	ldr	r0, [pc, #96]	; (c000f04 <SECURE_SPI_Receive_Classification+0x148>)
 c000ea4:	f005 fc44 	bl	c006730 <iprintf>
}
 c000ea8:	e00a      	b.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
				printf("Error: the SPI classification stream is incorrectly formatted.\n\r");
 c000eaa:	4817      	ldr	r0, [pc, #92]	; (c000f08 <SECURE_SPI_Receive_Classification+0x14c>)
 c000eac:	f005 fc40 	bl	c006730 <iprintf>
				printf("Start classification: %d, End classification: %d\n\r", containsStartClassification, containsEndClassification);
 c000eb0:	68fa      	ldr	r2, [r7, #12]
 c000eb2:	6939      	ldr	r1, [r7, #16]
 c000eb4:	4815      	ldr	r0, [pc, #84]	; (c000f0c <SECURE_SPI_Receive_Classification+0x150>)
 c000eb6:	f005 fc3b 	bl	c006730 <iprintf>
}
 c000eba:	e001      	b.n	c000ec0 <SECURE_SPI_Receive_Classification+0x104>
		Error_Handler();
 c000ebc:	f000 f96c 	bl	c001198 <Error_Handler>
}
 c000ec0:	bf00      	nop
 c000ec2:	3718      	adds	r7, #24
 c000ec4:	46bd      	mov	sp, r7
 c000ec6:	bd80      	pop	{r7, pc}
 c000ec8:	30000308 	.word	0x30000308
 c000ecc:	30000714 	.word	0x30000714
 c000ed0:	300000d8 	.word	0x300000d8
 c000ed4:	0c007680 	.word	0x0c007680
 c000ed8:	0c0076a8 	.word	0x0c0076a8
 c000edc:	0c0076c8 	.word	0x0c0076c8
 c000ee0:	0c0076cc 	.word	0x0c0076cc
 c000ee4:	30000034 	.word	0x30000034
 c000ee8:	30000000 	.word	0x30000000
 c000eec:	30000030 	.word	0x30000030
 c000ef0:	30000018 	.word	0x30000018
 c000ef4:	0c0076d0 	.word	0x0c0076d0
 c000ef8:	0c0076f8 	.word	0x0c0076f8
 c000efc:	0c007710 	.word	0x0c007710
 c000f00:	0c007734 	.word	0x0c007734
 c000f04:	0c007758 	.word	0x0c007758
 c000f08:	0c00778c 	.word	0x0c00778c
 c000f0c:	0c0077d0 	.word	0x0c0077d0

0c000f10 <SECURE_SPI_Send_Start_Signal>:



//sends the start transmission signal out through the SPI Stream
//this allows the esp32 to know where memory dump data starts
void SECURE_SPI_Send_Start_Signal(){
 c000f10:	b580      	push	{r7, lr}
 c000f12:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 c000f16:	af00      	add	r7, sp, #0
	wTransferState = TRANSFER_WAIT;
 c000f18:	4b19      	ldr	r3, [pc, #100]	; (c000f80 <SECURE_SPI_Send_Start_Signal+0x70>)
 c000f1a:	2200      	movs	r2, #0
 c000f1c:	601a      	str	r2, [r3, #0]
	uint8_t start_signal
 c000f1e:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 c000f22:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 c000f26:	4a17      	ldr	r2, [pc, #92]	; (c000f84 <SECURE_SPI_Send_Start_Signal+0x74>)
 c000f28:	4618      	mov	r0, r3
 c000f2a:	4611      	mov	r1, r2
 c000f2c:	f240 4301 	movw	r3, #1025	; 0x401
 c000f30:	461a      	mov	r2, r3
 c000f32:	f005 fbe7 	bl	c006704 <memcpy>

	printf("Sending the start transmission signal...\n\r");
 c000f36:	4814      	ldr	r0, [pc, #80]	; (c000f88 <SECURE_SPI_Send_Start_Signal+0x78>)
 c000f38:	f005 fbfa 	bl	c006730 <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)start_signal, BUFFER_SIZE) != HAL_OK)
 c000f3c:	1d3b      	adds	r3, r7, #4
 c000f3e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c000f42:	4619      	mov	r1, r3
 c000f44:	4811      	ldr	r0, [pc, #68]	; (c000f8c <SECURE_SPI_Send_Start_Signal+0x7c>)
 c000f46:	f003 fdf9 	bl	c004b3c <HAL_SPI_Transmit_DMA>
 c000f4a:	4603      	mov	r3, r0
 c000f4c:	2b00      	cmp	r3, #0
 c000f4e:	d004      	beq.n	c000f5a <SECURE_SPI_Send_Start_Signal+0x4a>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c000f50:	480f      	ldr	r0, [pc, #60]	; (c000f90 <SECURE_SPI_Send_Start_Signal+0x80>)
 c000f52:	f005 fbed 	bl	c006730 <iprintf>
		 Error_Handler();
 c000f56:	f000 f91f 	bl	c001198 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c000f5a:	bf00      	nop
 c000f5c:	4b08      	ldr	r3, [pc, #32]	; (c000f80 <SECURE_SPI_Send_Start_Signal+0x70>)
 c000f5e:	681b      	ldr	r3, [r3, #0]
 c000f60:	2b00      	cmp	r3, #0
 c000f62:	d0fb      	beq.n	c000f5c <SECURE_SPI_Send_Start_Signal+0x4c>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c000f64:	4b06      	ldr	r3, [pc, #24]	; (c000f80 <SECURE_SPI_Send_Start_Signal+0x70>)
 c000f66:	681b      	ldr	r3, [r3, #0]
 c000f68:	2b01      	cmp	r3, #1
 c000f6a:	d002      	beq.n	c000f72 <SECURE_SPI_Send_Start_Signal+0x62>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   Error_Handler();
 c000f6c:	f000 f914 	bl	c001198 <Error_Handler>
		   break;
 c000f70:	e000      	b.n	c000f74 <SECURE_SPI_Send_Start_Signal+0x64>
		   break;
 c000f72:	bf00      	nop
	 }
}
 c000f74:	bf00      	nop
 c000f76:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 c000f7a:	46bd      	mov	sp, r7
 c000f7c:	bd80      	pop	{r7, pc}
 c000f7e:	bf00      	nop
 c000f80:	30000308 	.word	0x30000308
 c000f84:	0c007858 	.word	0x0c007858
 c000f88:	0c007804 	.word	0x0c007804
 c000f8c:	300000d8 	.word	0x300000d8
 c000f90:	0c007830 	.word	0x0c007830

0c000f94 <SECURE_SPI_Send_End_Signal>:


//sends the end transmission signal once a memory dump as fully gone out through SPI.
//this is used by the esp32 to know when a memory dump has been fully received
void SECURE_SPI_Send_End_Signal(){
 c000f94:	b580      	push	{r7, lr}
 c000f96:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 c000f9a:	af00      	add	r7, sp, #0
	wTransferState = TRANSFER_WAIT;
 c000f9c:	4b19      	ldr	r3, [pc, #100]	; (c001004 <SECURE_SPI_Send_End_Signal+0x70>)
 c000f9e:	2200      	movs	r2, #0
 c000fa0:	601a      	str	r2, [r3, #0]
	uint8_t end_signal
 c000fa2:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 c000fa6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 c000faa:	4a17      	ldr	r2, [pc, #92]	; (c001008 <SECURE_SPI_Send_End_Signal+0x74>)
 c000fac:	4618      	mov	r0, r3
 c000fae:	4611      	mov	r1, r2
 c000fb0:	f240 4301 	movw	r3, #1025	; 0x401
 c000fb4:	461a      	mov	r2, r3
 c000fb6:	f005 fba5 	bl	c006704 <memcpy>

	printf("Sending the end transmission signal...\n\r");
 c000fba:	4814      	ldr	r0, [pc, #80]	; (c00100c <SECURE_SPI_Send_End_Signal+0x78>)
 c000fbc:	f005 fbb8 	bl	c006730 <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)end_signal, BUFFER_SIZE) != HAL_OK)
 c000fc0:	1d3b      	adds	r3, r7, #4
 c000fc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c000fc6:	4619      	mov	r1, r3
 c000fc8:	4811      	ldr	r0, [pc, #68]	; (c001010 <SECURE_SPI_Send_End_Signal+0x7c>)
 c000fca:	f003 fdb7 	bl	c004b3c <HAL_SPI_Transmit_DMA>
 c000fce:	4603      	mov	r3, r0
 c000fd0:	2b00      	cmp	r3, #0
 c000fd2:	d004      	beq.n	c000fde <SECURE_SPI_Send_End_Signal+0x4a>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c000fd4:	480f      	ldr	r0, [pc, #60]	; (c001014 <SECURE_SPI_Send_End_Signal+0x80>)
 c000fd6:	f005 fbab 	bl	c006730 <iprintf>
		 Error_Handler();
 c000fda:	f000 f8dd 	bl	c001198 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c000fde:	bf00      	nop
 c000fe0:	4b08      	ldr	r3, [pc, #32]	; (c001004 <SECURE_SPI_Send_End_Signal+0x70>)
 c000fe2:	681b      	ldr	r3, [r3, #0]
 c000fe4:	2b00      	cmp	r3, #0
 c000fe6:	d0fb      	beq.n	c000fe0 <SECURE_SPI_Send_End_Signal+0x4c>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c000fe8:	4b06      	ldr	r3, [pc, #24]	; (c001004 <SECURE_SPI_Send_End_Signal+0x70>)
 c000fea:	681b      	ldr	r3, [r3, #0]
 c000fec:	2b01      	cmp	r3, #1
 c000fee:	d002      	beq.n	c000ff6 <SECURE_SPI_Send_End_Signal+0x62>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   Error_Handler();
 c000ff0:	f000 f8d2 	bl	c001198 <Error_Handler>
		   break;
 c000ff4:	e000      	b.n	c000ff8 <SECURE_SPI_Send_End_Signal+0x64>
		   break;
 c000ff6:	bf00      	nop
	 }
}
 c000ff8:	bf00      	nop
 c000ffa:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 c000ffe:	46bd      	mov	sp, r7
 c001000:	bd80      	pop	{r7, pc}
 c001002:	bf00      	nop
 c001004:	30000308 	.word	0x30000308
 c001008:	0c007c88 	.word	0x0c007c88
 c00100c:	0c007c5c 	.word	0x0c007c5c
 c001010:	300000d8 	.word	0x300000d8
 c001014:	0c007830 	.word	0x0c007830

0c001018 <SECURE_SPI_Send_Data>:



//Sends data that has been previously loaded into SEC_Mem_Buffer by a DMA transfer from NSC to SC
//this function must be called routinely until all memory buffers have been sent to the esp32
void SECURE_SPI_Send_Data(){
 c001018:	b580      	push	{r7, lr}
 c00101a:	af00      	add	r7, sp, #0

	wTransferState = TRANSFER_WAIT;
 c00101c:	4b11      	ldr	r3, [pc, #68]	; (c001064 <SECURE_SPI_Send_Data+0x4c>)
 c00101e:	2200      	movs	r2, #0
 c001020:	601a      	str	r2, [r3, #0]
	/*** send the current memory block from the non-secure flash bank to SPI ***/
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *) SEC_Mem_Buffer, BUFFER_SIZE) != HAL_OK)
 c001022:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c001026:	4910      	ldr	r1, [pc, #64]	; (c001068 <SECURE_SPI_Send_Data+0x50>)
 c001028:	4810      	ldr	r0, [pc, #64]	; (c00106c <SECURE_SPI_Send_Data+0x54>)
 c00102a:	f003 fd87 	bl	c004b3c <HAL_SPI_Transmit_DMA>
 c00102e:	4603      	mov	r3, r0
 c001030:	2b00      	cmp	r3, #0
 c001032:	d004      	beq.n	c00103e <SECURE_SPI_Send_Data+0x26>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c001034:	480e      	ldr	r0, [pc, #56]	; (c001070 <SECURE_SPI_Send_Data+0x58>)
 c001036:	f005 fb7b 	bl	c006730 <iprintf>
		 Error_Handler();
 c00103a:	f000 f8ad 	bl	c001198 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c00103e:	bf00      	nop
 c001040:	4b08      	ldr	r3, [pc, #32]	; (c001064 <SECURE_SPI_Send_Data+0x4c>)
 c001042:	681b      	ldr	r3, [r3, #0]
 c001044:	2b00      	cmp	r3, #0
 c001046:	d0fb      	beq.n	c001040 <SECURE_SPI_Send_Data+0x28>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c001048:	4b06      	ldr	r3, [pc, #24]	; (c001064 <SECURE_SPI_Send_Data+0x4c>)
 c00104a:	681b      	ldr	r3, [r3, #0]
 c00104c:	2b01      	cmp	r3, #1
 c00104e:	d005      	beq.n	c00105c <SECURE_SPI_Send_Data+0x44>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   printf("There was an error in transferring the memory dump.\n\r");
 c001050:	4808      	ldr	r0, [pc, #32]	; (c001074 <SECURE_SPI_Send_Data+0x5c>)
 c001052:	f005 fb6d 	bl	c006730 <iprintf>
		   Error_Handler();
 c001056:	f000 f89f 	bl	c001198 <Error_Handler>
		   break;
 c00105a:	e000      	b.n	c00105e <SECURE_SPI_Send_Data+0x46>
		   break;
 c00105c:	bf00      	nop
	 }

}
 c00105e:	bf00      	nop
 c001060:	bd80      	pop	{r7, pc}
 c001062:	bf00      	nop
 c001064:	30000308 	.word	0x30000308
 c001068:	30000314 	.word	0x30000314
 c00106c:	300000d8 	.word	0x300000d8
 c001070:	0c007830 	.word	0x0c007830
 c001074:	0c00808c 	.word	0x0c00808c

0c001078 <SECURE_SPI_Toggle_Comm>:
/**
  * @brief  Secure service to toggle SPI communication on or off. Must be called @ beginning and end of SPI transmission
  * @param state	SPI ON: 0 and SPI OFF: 1
  * @retval SUCCESS or ERROR
  */
void SECURE_SPI_Toggle_Comm(int state){
 c001078:	b580      	push	{r7, lr}
 c00107a:	b082      	sub	sp, #8
 c00107c:	af00      	add	r7, sp, #0
 c00107e:	6078      	str	r0, [r7, #4]
	if(state > 0){
 c001080:	687b      	ldr	r3, [r7, #4]
 c001082:	2b00      	cmp	r3, #0
 c001084:	dd06      	ble.n	c001094 <SECURE_SPI_Toggle_Comm+0x1c>
		//off state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c001086:	2201      	movs	r2, #1
 c001088:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c00108c:	4806      	ldr	r0, [pc, #24]	; (c0010a8 <SECURE_SPI_Toggle_Comm+0x30>)
 c00108e:	f001 fcf7 	bl	c002a80 <HAL_GPIO_WritePin>

	}else{
		//on state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 c001092:	e005      	b.n	c0010a0 <SECURE_SPI_Toggle_Comm+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 c001094:	2200      	movs	r2, #0
 c001096:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c00109a:	4803      	ldr	r0, [pc, #12]	; (c0010a8 <SECURE_SPI_Toggle_Comm+0x30>)
 c00109c:	f001 fcf0 	bl	c002a80 <HAL_GPIO_WritePin>
}
 c0010a0:	bf00      	nop
 c0010a2:	3708      	adds	r7, #8
 c0010a4:	46bd      	mov	sp, r7
 c0010a6:	bd80      	pop	{r7, pc}
 c0010a8:	52020400 	.word	0x52020400

0c0010ac <SECURE_DMA_Fetch_NonSecure_Mem>:
  * @param  Size        		requested size of data (256 words)
  * @param  func   				pointer to non-secure callback function on transfer end
  * @retval SUCCESS or ERROR
  */
void SECURE_DMA_Fetch_NonSecure_Mem(uint32_t *nsc_mem_buffer, uint32_t Size)
{
 c0010ac:	b580      	push	{r7, lr}
 c0010ae:	b082      	sub	sp, #8
 c0010b0:	af00      	add	r7, sp, #0
 c0010b2:	6078      	str	r0, [r7, #4]
 c0010b4:	6039      	str	r1, [r7, #0]

  /* Check that the address range in non-secure */
   if (cmse_check_address_range(nsc_mem_buffer, Size * sizeof(uint32_t), CMSE_NONSECURE))
 c0010b6:	683b      	ldr	r3, [r7, #0]
 c0010b8:	009b      	lsls	r3, r3, #2
 c0010ba:	2212      	movs	r2, #18
 c0010bc:	4619      	mov	r1, r3
 c0010be:	6878      	ldr	r0, [r7, #4]
 c0010c0:	f7ff f8b8 	bl	c000234 <cmse_check_address_range>
 c0010c4:	4603      	mov	r3, r0
 c0010c6:	2b00      	cmp	r3, #0
 c0010c8:	d00d      	beq.n	c0010e6 <SECURE_DMA_Fetch_NonSecure_Mem+0x3a>
   {
//	   printf("memory dump found to be in range.\n\r");
	    if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,
 c0010ca:	6879      	ldr	r1, [r7, #4]
 c0010cc:	4a09      	ldr	r2, [pc, #36]	; (c0010f4 <SECURE_DMA_Fetch_NonSecure_Mem+0x48>)
 c0010ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c0010d2:	4809      	ldr	r0, [pc, #36]	; (c0010f8 <SECURE_DMA_Fetch_NonSecure_Mem+0x4c>)
 c0010d4:	f001 f85c 	bl	c002190 <HAL_DMA_Start_IT>
 c0010d8:	4603      	mov	r3, r0
 c0010da:	2b00      	cmp	r3, #0
 c0010dc:	d006      	beq.n	c0010ec <SECURE_DMA_Fetch_NonSecure_Mem+0x40>
	                             BUFFER_SIZE) == HAL_OK)
		{
		  /* Transfer started */
//	    	printf("Transfer has started\n\r");
		}else{
			printf("transfer was not able to start.\n\r");
 c0010de:	4807      	ldr	r0, [pc, #28]	; (c0010fc <SECURE_DMA_Fetch_NonSecure_Mem+0x50>)
 c0010e0:	f005 fb26 	bl	c006730 <iprintf>
		}
   }else{
	   printf("Address out of range...\n\r");
   }

}
 c0010e4:	e002      	b.n	c0010ec <SECURE_DMA_Fetch_NonSecure_Mem+0x40>
	   printf("Address out of range...\n\r");
 c0010e6:	4806      	ldr	r0, [pc, #24]	; (c001100 <SECURE_DMA_Fetch_NonSecure_Mem+0x54>)
 c0010e8:	f005 fb22 	bl	c006730 <iprintf>
}
 c0010ec:	bf00      	nop
 c0010ee:	3708      	adds	r7, #8
 c0010f0:	46bd      	mov	sp, r7
 c0010f2:	bd80      	pop	{r7, pc}
 c0010f4:	30000314 	.word	0x30000314
 c0010f8:	300002a0 	.word	0x300002a0
 c0010fc:	0c0080c4 	.word	0x0c0080c4
 c001100:	0c0080e8 	.word	0x0c0080e8

0c001104 <SECURE_Print_Mem_Buffer>:



//used in non-secure environment to check the secure memory buffer for successful transfer.
void SECURE_Print_Mem_Buffer()
{
 c001104:	b580      	push	{r7, lr}
 c001106:	b082      	sub	sp, #8
 c001108:	af00      	add	r7, sp, #0

  //print the contents of the first transfer
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c00110a:	2300      	movs	r3, #0
 c00110c:	607b      	str	r3, [r7, #4]
 c00110e:	e013      	b.n	c001138 <SECURE_Print_Mem_Buffer+0x34>
//		 if((i+1)%16==1){
//			 printf("%08p|\t", addr);
//		 }
		 //we'll print out bytes at a time
		printf("0x%02x\t", SEC_Mem_Buffer[i]);
 c001110:	4a0e      	ldr	r2, [pc, #56]	; (c00114c <SECURE_Print_Mem_Buffer+0x48>)
 c001112:	687b      	ldr	r3, [r7, #4]
 c001114:	4413      	add	r3, r2
 c001116:	781b      	ldrb	r3, [r3, #0]
 c001118:	4619      	mov	r1, r3
 c00111a:	480d      	ldr	r0, [pc, #52]	; (c001150 <SECURE_Print_Mem_Buffer+0x4c>)
 c00111c:	f005 fb08 	bl	c006730 <iprintf>
		if((i+1)%16==0){
 c001120:	687b      	ldr	r3, [r7, #4]
 c001122:	3301      	adds	r3, #1
 c001124:	f003 030f 	and.w	r3, r3, #15
 c001128:	2b00      	cmp	r3, #0
 c00112a:	d102      	bne.n	c001132 <SECURE_Print_Mem_Buffer+0x2e>
			printf("\n\r");
 c00112c:	4809      	ldr	r0, [pc, #36]	; (c001154 <SECURE_Print_Mem_Buffer+0x50>)
 c00112e:	f005 faff 	bl	c006730 <iprintf>
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c001132:	687b      	ldr	r3, [r7, #4]
 c001134:	3301      	adds	r3, #1
 c001136:	607b      	str	r3, [r7, #4]
 c001138:	687b      	ldr	r3, [r7, #4]
 c00113a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00113e:	d3e7      	bcc.n	c001110 <SECURE_Print_Mem_Buffer+0xc>
//		if((i+1)%4==0){
//			addr+=1;
//		}
	 }

}
 c001140:	bf00      	nop
 c001142:	bf00      	nop
 c001144:	3708      	adds	r7, #8
 c001146:	46bd      	mov	sp, r7
 c001148:	bd80      	pop	{r7, pc}
 c00114a:	bf00      	nop
 c00114c:	30000314 	.word	0x30000314
 c001150:	0c008104 	.word	0x0c008104
 c001154:	0c0076cc 	.word	0x0c0076cc

0c001158 <NonsecureToSecureTransferComplete>:


//callback functions for nonsecure --> secure mem transfer
static void NonsecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel1)
{
 c001158:	b480      	push	{r7}
 c00115a:	b083      	sub	sp, #12
 c00115c:	af00      	add	r7, sp, #0
 c00115e:	6078      	str	r0, [r7, #4]
//	printf("nonsecure to secure transf complete executed.\n\r");
  NonsecureToSecureTransferCompleteDetected = 1;
 c001160:	4b04      	ldr	r3, [pc, #16]	; (c001174 <NonsecureToSecureTransferComplete+0x1c>)
 c001162:	2201      	movs	r2, #1
 c001164:	601a      	str	r2, [r3, #0]
}
 c001166:	bf00      	nop
 c001168:	370c      	adds	r7, #12
 c00116a:	46bd      	mov	sp, r7
 c00116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001170:	4770      	bx	lr
 c001172:	bf00      	nop
 c001174:	3000030c 	.word	0x3000030c

0c001178 <NonsecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
static void NonsecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel1)
{
 c001178:	b480      	push	{r7}
 c00117a:	b083      	sub	sp, #12
 c00117c:	af00      	add	r7, sp, #0
 c00117e:	6078      	str	r0, [r7, #4]
  NonsecureToSecureTransferErrorDetected = 1;
 c001180:	4b04      	ldr	r3, [pc, #16]	; (c001194 <NonsecureToSecureTransferError+0x1c>)
 c001182:	2201      	movs	r2, #1
 c001184:	601a      	str	r2, [r3, #0]
}
 c001186:	bf00      	nop
 c001188:	370c      	adds	r7, #12
 c00118a:	46bd      	mov	sp, r7
 c00118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001190:	4770      	bx	lr
 c001192:	bf00      	nop
 c001194:	30000310 	.word	0x30000310

0c001198 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c001198:	b480      	push	{r7}
 c00119a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c00119c:	b672      	cpsid	i
}
 c00119e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c0011a0:	e7fe      	b.n	c0011a0 <Error_Handler+0x8>

0c0011a2 <__acle_se_SECURE_print_Log>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


//secure service for logging messages
CMSE_NS_ENTRY void SECURE_print_Log(char* string){
 c0011a2:	b580      	push	{r7, lr}
 c0011a4:	b082      	sub	sp, #8
 c0011a6:	af00      	add	r7, sp, #0
 c0011a8:	6078      	str	r0, [r7, #4]
	printf(string);
 c0011aa:	6878      	ldr	r0, [r7, #4]
 c0011ac:	f005 fac0 	bl	c006730 <iprintf>
}
 c0011b0:	bf00      	nop
 c0011b2:	3708      	adds	r7, #8
 c0011b4:	46bd      	mov	sp, r7
 c0011b6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0011ba:	4670      	mov	r0, lr
 c0011bc:	4671      	mov	r1, lr
 c0011be:	4672      	mov	r2, lr
 c0011c0:	4673      	mov	r3, lr
 c0011c2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0011c6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0011ca:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0011ce:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0011d2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0011d6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0011da:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0011de:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0011e2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0011e6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0011ea:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0011ee:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0011f2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0011f6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011fa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0011fe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001202:	f38e 8c00 	msr	CPSR_fs, lr
 c001206:	b410      	push	{r4}
 c001208:	eef1 ca10 	vmrs	ip, fpscr
 c00120c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001210:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001214:	ea0c 0c04 	and.w	ip, ip, r4
 c001218:	eee1 ca10 	vmsr	fpscr, ip
 c00121c:	bc10      	pop	{r4}
 c00121e:	46f4      	mov	ip, lr
 c001220:	4774      	bxns	lr
	...

0c001224 <__acle_se_SECURE_print_Num>:


//secure service for logging messages containing integer data
CMSE_NS_ENTRY void SECURE_print_Num(int num){
 c001224:	b580      	push	{r7, lr}
 c001226:	b082      	sub	sp, #8
 c001228:	af00      	add	r7, sp, #0
 c00122a:	6078      	str	r0, [r7, #4]
	printf("%d\n\r", num);
 c00122c:	6879      	ldr	r1, [r7, #4]
 c00122e:	481e      	ldr	r0, [pc, #120]	; (c0012a8 <__acle_se_SECURE_print_Num+0x84>)
 c001230:	f005 fa7e 	bl	c006730 <iprintf>
}
 c001234:	bf00      	nop
 c001236:	3708      	adds	r7, #8
 c001238:	46bd      	mov	sp, r7
 c00123a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00123e:	4670      	mov	r0, lr
 c001240:	4671      	mov	r1, lr
 c001242:	4672      	mov	r2, lr
 c001244:	4673      	mov	r3, lr
 c001246:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00124a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00124e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001252:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001256:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00125a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00125e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001262:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001266:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00126a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00126e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001272:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001276:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00127a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00127e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001282:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001286:	f38e 8c00 	msr	CPSR_fs, lr
 c00128a:	b410      	push	{r4}
 c00128c:	eef1 ca10 	vmrs	ip, fpscr
 c001290:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001294:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001298:	ea0c 0c04 	and.w	ip, ip, r4
 c00129c:	eee1 ca10 	vmsr	fpscr, ip
 c0012a0:	bc10      	pop	{r4}
 c0012a2:	46f4      	mov	ip, lr
 c0012a4:	4774      	bxns	lr
 c0012a6:	bf00      	nop
 c0012a8:	0c00810c 	.word	0x0c00810c

0c0012ac <__acle_se_SECURE_Send_Mem_Block>:
//	    SECURE_print_Log("Total number of bytes sent:\n\r");
//	    SECURE_print_Num(numBytesSent);
//}


CMSE_NS_ENTRY void SECURE_Send_Mem_Block(){
 c0012ac:	b580      	push	{r7, lr}
 c0012ae:	af00      	add	r7, sp, #0
	//if this is the zeroth block, toggle communication, send start signal, and initialize values
	if(blockNum == 0){
 c0012b0:	4b4d      	ldr	r3, [pc, #308]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c0012b2:	681b      	ldr	r3, [r3, #0]
 c0012b4:	2b00      	cmp	r3, #0
 c0012b6:	d10a      	bne.n	c0012ce <__acle_se_SECURE_Send_Mem_Block+0x22>
		SECURE_SPI_Toggle_Comm(0);
 c0012b8:	2000      	movs	r0, #0
 c0012ba:	f7ff fedd 	bl	c001078 <SECURE_SPI_Toggle_Comm>
		SECURE_SPI_Send_Start_Signal();
 c0012be:	f7ff fe27 	bl	c000f10 <SECURE_SPI_Send_Start_Signal>
		numBytesSent = 0;
 c0012c2:	4b4a      	ldr	r3, [pc, #296]	; (c0013ec <__acle_se_SECURE_Send_Mem_Block+0x140>)
 c0012c4:	2200      	movs	r2, #0
 c0012c6:	601a      	str	r2, [r3, #0]
		current_address = (uint32_t*) NSEC_MEM_START;
 c0012c8:	4b49      	ldr	r3, [pc, #292]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c0012ca:	4a4a      	ldr	r2, [pc, #296]	; (c0013f4 <__acle_se_SECURE_Send_Mem_Block+0x148>)
 c0012cc:	601a      	str	r2, [r3, #0]
	}
	//check that we're still within range & have enough bytes to transfer
	if(blockNum < 256){
 c0012ce:	4b46      	ldr	r3, [pc, #280]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c0012d0:	681b      	ldr	r3, [r3, #0]
 c0012d2:	2bff      	cmp	r3, #255	; 0xff
 c0012d4:	d820      	bhi.n	c001318 <__acle_se_SECURE_Send_Mem_Block+0x6c>
		if((uint32_t) current_address <= NSEC_MEM_END && (NSEC_MEM_END - (uint32_t)current_address) +1 >= BUFFER_SIZE){
 c0012d6:	4b46      	ldr	r3, [pc, #280]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c0012d8:	681b      	ldr	r3, [r3, #0]
 c0012da:	461a      	mov	r2, r3
 c0012dc:	4b46      	ldr	r3, [pc, #280]	; (c0013f8 <__acle_se_SECURE_Send_Mem_Block+0x14c>)
 c0012de:	429a      	cmp	r2, r3
 c0012e0:	d81a      	bhi.n	c001318 <__acle_se_SECURE_Send_Mem_Block+0x6c>
 c0012e2:	4b43      	ldr	r3, [pc, #268]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c0012e4:	681b      	ldr	r3, [r3, #0]
 c0012e6:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 c0012ea:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 c0012ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0012f2:	d311      	bcc.n	c001318 <__acle_se_SECURE_Send_Mem_Block+0x6c>
			//get memory into secure flash bank
			SECURE_DMA_Fetch_NonSecure_Mem((uint32_t *)current_address, BUFFER_SIZE/4);
 c0012f4:	4b3e      	ldr	r3, [pc, #248]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c0012f6:	681b      	ldr	r3, [r3, #0]
 c0012f8:	f44f 7180 	mov.w	r1, #256	; 0x100
 c0012fc:	4618      	mov	r0, r3
 c0012fe:	f7ff fed5 	bl	c0010ac <SECURE_DMA_Fetch_NonSecure_Mem>
			SECURE_Print_Mem_Buffer();
 c001302:	f7ff feff 	bl	c001104 <SECURE_Print_Mem_Buffer>
			//send data to esp32 through spi
			SECURE_SPI_Send_Data();
 c001306:	f7ff fe87 	bl	c001018 <SECURE_SPI_Send_Data>
			//increment bytes sent
			numBytesSent += BUFFER_SIZE;
 c00130a:	4b38      	ldr	r3, [pc, #224]	; (c0013ec <__acle_se_SECURE_Send_Mem_Block+0x140>)
 c00130c:	681b      	ldr	r3, [r3, #0]
 c00130e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 c001312:	461a      	mov	r2, r3
 c001314:	4b35      	ldr	r3, [pc, #212]	; (c0013ec <__acle_se_SECURE_Send_Mem_Block+0x140>)
 c001316:	601a      	str	r2, [r3, #0]
		}
	}

	//check if the block number is the last one
	printf("blocknumber is %d\n\r", blockNum);
 c001318:	4b33      	ldr	r3, [pc, #204]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c00131a:	681b      	ldr	r3, [r3, #0]
 c00131c:	4619      	mov	r1, r3
 c00131e:	4837      	ldr	r0, [pc, #220]	; (c0013fc <__acle_se_SECURE_Send_Mem_Block+0x150>)
 c001320:	f005 fa06 	bl	c006730 <iprintf>
	if(blockNum == 256){
 c001324:	4b30      	ldr	r3, [pc, #192]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c001326:	681b      	ldr	r3, [r3, #0]
 c001328:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00132c:	d101      	bne.n	c001332 <__acle_se_SECURE_Send_Mem_Block+0x86>
		//send the end signal
		SECURE_SPI_Send_End_Signal();
 c00132e:	f7ff fe31 	bl	c000f94 <SECURE_SPI_Send_End_Signal>
	}

	if(blockNum == 257){
 c001332:	4b2d      	ldr	r3, [pc, #180]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c001334:	681b      	ldr	r3, [r3, #0]
 c001336:	f240 1201 	movw	r2, #257	; 0x101
 c00133a:	4293      	cmp	r3, r2
 c00133c:	d10e      	bne.n	c00135c <__acle_se_SECURE_Send_Mem_Block+0xb0>
		//receive classification
		SECURE_SPI_Receive_Classification();
 c00133e:	f7ff fd3d 	bl	c000dbc <SECURE_SPI_Receive_Classification>
		//print the number of bytes sent
		printf("Total number of bytes sent: %d\n\r", numBytesSent);
 c001342:	4b2a      	ldr	r3, [pc, #168]	; (c0013ec <__acle_se_SECURE_Send_Mem_Block+0x140>)
 c001344:	681b      	ldr	r3, [r3, #0]
 c001346:	4619      	mov	r1, r3
 c001348:	482d      	ldr	r0, [pc, #180]	; (c001400 <__acle_se_SECURE_Send_Mem_Block+0x154>)
 c00134a:	f005 f9f1 	bl	c006730 <iprintf>
		blockNum = 0;
 c00134e:	4b26      	ldr	r3, [pc, #152]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c001350:	2200      	movs	r2, #0
 c001352:	601a      	str	r2, [r3, #0]
		HAL_IWDG_Refresh(&hiwdg);
 c001354:	482b      	ldr	r0, [pc, #172]	; (c001404 <__acle_se_SECURE_Send_Mem_Block+0x158>)
 c001356:	f001 fdbe 	bl	c002ed6 <HAL_IWDG_Refresh>
		return;
 c00135a:	e00d      	b.n	c001378 <__acle_se_SECURE_Send_Mem_Block+0xcc>
	}

	//increment the block number
	blockNum++;
 c00135c:	4b22      	ldr	r3, [pc, #136]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c00135e:	681b      	ldr	r3, [r3, #0]
 c001360:	3301      	adds	r3, #1
 c001362:	4a21      	ldr	r2, [pc, #132]	; (c0013e8 <__acle_se_SECURE_Send_Mem_Block+0x13c>)
 c001364:	6013      	str	r3, [r2, #0]
	current_address += BUFFER_SIZE/4;
 c001366:	4b22      	ldr	r3, [pc, #136]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c001368:	681b      	ldr	r3, [r3, #0]
 c00136a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 c00136e:	4a20      	ldr	r2, [pc, #128]	; (c0013f0 <__acle_se_SECURE_Send_Mem_Block+0x144>)
 c001370:	6013      	str	r3, [r2, #0]
	HAL_IWDG_Refresh(&hiwdg);
 c001372:	4824      	ldr	r0, [pc, #144]	; (c001404 <__acle_se_SECURE_Send_Mem_Block+0x158>)
 c001374:	f001 fdaf 	bl	c002ed6 <HAL_IWDG_Refresh>
}
 c001378:	46bd      	mov	sp, r7
 c00137a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00137e:	4670      	mov	r0, lr
 c001380:	4671      	mov	r1, lr
 c001382:	4672      	mov	r2, lr
 c001384:	4673      	mov	r3, lr
 c001386:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00138a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00138e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001392:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001396:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00139a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00139e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0013a2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0013a6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0013aa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0013ae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0013b2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0013b6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013ba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0013c2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0013c6:	f38e 8c00 	msr	CPSR_fs, lr
 c0013ca:	b410      	push	{r4}
 c0013cc:	eef1 ca10 	vmrs	ip, fpscr
 c0013d0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013d4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013d8:	ea0c 0c04 	and.w	ip, ip, r4
 c0013dc:	eee1 ca10 	vmsr	fpscr, ip
 c0013e0:	bc10      	pop	{r4}
 c0013e2:	46f4      	mov	ip, lr
 c0013e4:	4774      	bxns	lr
 c0013e6:	bf00      	nop
 c0013e8:	30000b14 	.word	0x30000b14
 c0013ec:	30000b18 	.word	0x30000b18
 c0013f0:	30000038 	.word	0x30000038
 c0013f4:	08040000 	.word	0x08040000
 c0013f8:	0807ffff 	.word	0x0807ffff
 c0013fc:	0c008114 	.word	0x0c008114
 c001400:	0c008128 	.word	0x0c008128
 c001404:	300000c8 	.word	0x300000c8

0c001408 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001408:	b480      	push	{r7}
 c00140a:	b083      	sub	sp, #12
 c00140c:	af00      	add	r7, sp, #0
 c00140e:	4603      	mov	r3, r0
 c001410:	6039      	str	r1, [r7, #0]
 c001412:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001414:	683b      	ldr	r3, [r7, #0]
 c001416:	2b00      	cmp	r3, #0
 c001418:	d00d      	beq.n	c001436 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00141a:	79fb      	ldrb	r3, [r7, #7]
 c00141c:	2b00      	cmp	r3, #0
 c00141e:	d002      	beq.n	c001426 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001420:	2b01      	cmp	r3, #1
 c001422:	d004      	beq.n	c00142e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001424:	e008      	b.n	c001438 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c001426:	4a21      	ldr	r2, [pc, #132]	; (c0014ac <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001428:	683b      	ldr	r3, [r7, #0]
 c00142a:	6013      	str	r3, [r2, #0]
        break;
 c00142c:	e004      	b.n	c001438 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c00142e:	4a20      	ldr	r2, [pc, #128]	; (c0014b0 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c001430:	683b      	ldr	r3, [r7, #0]
 c001432:	6013      	str	r3, [r2, #0]
        break;
 c001434:	e000      	b.n	c001438 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c001436:	bf00      	nop
}
 c001438:	bf00      	nop
 c00143a:	370c      	adds	r7, #12
 c00143c:	46bd      	mov	sp, r7
 c00143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001442:	4670      	mov	r0, lr
 c001444:	4671      	mov	r1, lr
 c001446:	4672      	mov	r2, lr
 c001448:	4673      	mov	r3, lr
 c00144a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00144e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001452:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001456:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00145a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00145e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001462:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001466:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00146a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00146e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001472:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001476:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00147a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00147e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001486:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00148a:	f38e 8c00 	msr	CPSR_fs, lr
 c00148e:	b410      	push	{r4}
 c001490:	eef1 ca10 	vmrs	ip, fpscr
 c001494:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001498:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00149c:	ea0c 0c04 	and.w	ip, ip, r4
 c0014a0:	eee1 ca10 	vmsr	fpscr, ip
 c0014a4:	bc10      	pop	{r4}
 c0014a6:	46f4      	mov	ip, lr
 c0014a8:	4774      	bxns	lr
 c0014aa:	bf00      	nop
 c0014ac:	30000b1c 	.word	0x30000b1c
 c0014b0:	30000b20 	.word	0x30000b20

0c0014b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0014b4:	b580      	push	{r7, lr}
 c0014b6:	b084      	sub	sp, #16
 c0014b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0014ba:	4b15      	ldr	r3, [pc, #84]	; (c001510 <HAL_MspInit+0x5c>)
 c0014bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0014be:	4a14      	ldr	r2, [pc, #80]	; (c001510 <HAL_MspInit+0x5c>)
 c0014c0:	f043 0301 	orr.w	r3, r3, #1
 c0014c4:	6613      	str	r3, [r2, #96]	; 0x60
 c0014c6:	4b12      	ldr	r3, [pc, #72]	; (c001510 <HAL_MspInit+0x5c>)
 c0014c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0014ca:	f003 0301 	and.w	r3, r3, #1
 c0014ce:	60fb      	str	r3, [r7, #12]
 c0014d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0014d2:	4b0f      	ldr	r3, [pc, #60]	; (c001510 <HAL_MspInit+0x5c>)
 c0014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014d6:	4a0e      	ldr	r2, [pc, #56]	; (c001510 <HAL_MspInit+0x5c>)
 c0014d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0014dc:	6593      	str	r3, [r2, #88]	; 0x58
 c0014de:	4b0c      	ldr	r3, [pc, #48]	; (c001510 <HAL_MspInit+0x5c>)
 c0014e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0014e6:	60bb      	str	r3, [r7, #8]
 c0014e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0014ea:	4b09      	ldr	r3, [pc, #36]	; (c001510 <HAL_MspInit+0x5c>)
 c0014ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0014ee:	4a08      	ldr	r2, [pc, #32]	; (c001510 <HAL_MspInit+0x5c>)
 c0014f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c0014f4:	6493      	str	r3, [r2, #72]	; 0x48
 c0014f6:	4b06      	ldr	r3, [pc, #24]	; (c001510 <HAL_MspInit+0x5c>)
 c0014f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0014fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0014fe:	607b      	str	r3, [r7, #4]
 c001500:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c001502:	f001 fd73 	bl	c002fec <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001506:	bf00      	nop
 c001508:	3710      	adds	r7, #16
 c00150a:	46bd      	mov	sp, r7
 c00150c:	bd80      	pop	{r7, pc}
 c00150e:	bf00      	nop
 c001510:	50021000 	.word	0x50021000

0c001514 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c001514:	b580      	push	{r7, lr}
 c001516:	b08a      	sub	sp, #40	; 0x28
 c001518:	af00      	add	r7, sp, #0
 c00151a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00151c:	f107 0314 	add.w	r3, r7, #20
 c001520:	2200      	movs	r2, #0
 c001522:	601a      	str	r2, [r3, #0]
 c001524:	605a      	str	r2, [r3, #4]
 c001526:	609a      	str	r2, [r3, #8]
 c001528:	60da      	str	r2, [r3, #12]
 c00152a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 c00152c:	687b      	ldr	r3, [r7, #4]
 c00152e:	681b      	ldr	r3, [r3, #0]
 c001530:	4a78      	ldr	r2, [pc, #480]	; (c001714 <HAL_SPI_MspInit+0x200>)
 c001532:	4293      	cmp	r3, r2
 c001534:	f040 80e9 	bne.w	c00170a <HAL_SPI_MspInit+0x1f6>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 c001538:	4b77      	ldr	r3, [pc, #476]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c00153a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00153c:	4a76      	ldr	r2, [pc, #472]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c00153e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001542:	6593      	str	r3, [r2, #88]	; 0x58
 c001544:	4b74      	ldr	r3, [pc, #464]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c001546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001548:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00154c:	613b      	str	r3, [r7, #16]
 c00154e:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c001550:	4b71      	ldr	r3, [pc, #452]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c001552:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001554:	4a70      	ldr	r2, [pc, #448]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c001556:	f043 0308 	orr.w	r3, r3, #8
 c00155a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00155c:	4b6e      	ldr	r3, [pc, #440]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c00155e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001560:	f003 0308 	and.w	r3, r3, #8
 c001564:	60fb      	str	r3, [r7, #12]
 c001566:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001568:	4b6b      	ldr	r3, [pc, #428]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c00156a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00156c:	4a6a      	ldr	r2, [pc, #424]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c00156e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001572:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001574:	4b68      	ldr	r3, [pc, #416]	; (c001718 <HAL_SPI_MspInit+0x204>)
 c001576:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00157c:	60bb      	str	r3, [r7, #8]
 c00157e:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c001580:	f001 fd24 	bl	c002fcc <HAL_PWREx_EnableVddIO2>
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PG9     ------> SPI3_SCK
    PG10     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 c001584:	2340      	movs	r3, #64	; 0x40
 c001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001588:	2302      	movs	r3, #2
 c00158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00158c:	2300      	movs	r3, #0
 c00158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001590:	2300      	movs	r3, #0
 c001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 c001594:	2305      	movs	r3, #5
 c001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c001598:	f107 0314 	add.w	r3, r7, #20
 c00159c:	4619      	mov	r1, r3
 c00159e:	485f      	ldr	r0, [pc, #380]	; (c00171c <HAL_SPI_MspInit+0x208>)
 c0015a0:	f001 f8ee 	bl	c002780 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 c0015a4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c0015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0015aa:	2302      	movs	r3, #2
 c0015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0015ae:	2300      	movs	r3, #0
 c0015b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0015b2:	2300      	movs	r3, #0
 c0015b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c0015b6:	2306      	movs	r3, #6
 c0015b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c0015ba:	f107 0314 	add.w	r3, r7, #20
 c0015be:	4619      	mov	r1, r3
 c0015c0:	4857      	ldr	r0, [pc, #348]	; (c001720 <HAL_SPI_MspInit+0x20c>)
 c0015c2:	f001 f8dd 	bl	c002780 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel2;
 c0015c6:	4b57      	ldr	r3, [pc, #348]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015c8:	4a57      	ldr	r2, [pc, #348]	; (c001728 <HAL_SPI_MspInit+0x214>)
 c0015ca:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 c0015cc:	4b55      	ldr	r3, [pc, #340]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015ce:	220f      	movs	r2, #15
 c0015d0:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 c0015d2:	4b54      	ldr	r3, [pc, #336]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015d4:	2200      	movs	r2, #0
 c0015d6:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 c0015d8:	4b52      	ldr	r3, [pc, #328]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015da:	2200      	movs	r2, #0
 c0015dc:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 c0015de:	4b51      	ldr	r3, [pc, #324]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015e0:	2280      	movs	r2, #128	; 0x80
 c0015e2:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c0015e4:	4b4f      	ldr	r3, [pc, #316]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015e6:	2200      	movs	r2, #0
 c0015e8:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c0015ea:	4b4e      	ldr	r3, [pc, #312]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015ec:	2200      	movs	r2, #0
 c0015ee:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 c0015f0:	4b4c      	ldr	r3, [pc, #304]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015f2:	2200      	movs	r2, #0
 c0015f4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 c0015f6:	4b4b      	ldr	r3, [pc, #300]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c0015f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c0015fc:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 c0015fe:	4849      	ldr	r0, [pc, #292]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c001600:	f000 fd1e 	bl	c002040 <HAL_DMA_Init>
 c001604:	4603      	mov	r3, r0
 c001606:	2b00      	cmp	r3, #0
 c001608:	d001      	beq.n	c00160e <HAL_SPI_MspInit+0xfa>
    {
      Error_Handler();
 c00160a:	f7ff fdc5 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c00160e:	2110      	movs	r1, #16
 c001610:	4844      	ldr	r0, [pc, #272]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c001612:	f000 ff8d 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c001616:	4603      	mov	r3, r0
 c001618:	2b00      	cmp	r3, #0
 c00161a:	d001      	beq.n	c001620 <HAL_SPI_MspInit+0x10c>
    {
      Error_Handler();
 c00161c:	f7ff fdbc 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SEC) != HAL_OK)
 c001620:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001624:	483f      	ldr	r0, [pc, #252]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c001626:	f000 ff83 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c00162a:	4603      	mov	r3, r0
 c00162c:	2b00      	cmp	r3, #0
 c00162e:	d001      	beq.n	c001634 <HAL_SPI_MspInit+0x120>
    {
      Error_Handler();
 c001630:	f7ff fdb2 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001634:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001638:	483a      	ldr	r0, [pc, #232]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c00163a:	f000 ff79 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c00163e:	4603      	mov	r3, r0
 c001640:	2b00      	cmp	r3, #0
 c001642:	d001      	beq.n	c001648 <HAL_SPI_MspInit+0x134>
    {
      Error_Handler();
 c001644:	f7ff fda8 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001648:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c00164c:	4835      	ldr	r0, [pc, #212]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c00164e:	f000 ff6f 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c001652:	4603      	mov	r3, r0
 c001654:	2b00      	cmp	r3, #0
 c001656:	d001      	beq.n	c00165c <HAL_SPI_MspInit+0x148>
    {
      Error_Handler();
 c001658:	f7ff fd9e 	bl	c001198 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 c00165c:	687b      	ldr	r3, [r7, #4]
 c00165e:	4a31      	ldr	r2, [pc, #196]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c001660:	659a      	str	r2, [r3, #88]	; 0x58
 c001662:	4a30      	ldr	r2, [pc, #192]	; (c001724 <HAL_SPI_MspInit+0x210>)
 c001664:	687b      	ldr	r3, [r7, #4]
 c001666:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 c001668:	4b30      	ldr	r3, [pc, #192]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c00166a:	4a31      	ldr	r2, [pc, #196]	; (c001730 <HAL_SPI_MspInit+0x21c>)
 c00166c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 c00166e:	4b2f      	ldr	r3, [pc, #188]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001670:	2210      	movs	r2, #16
 c001672:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 c001674:	4b2d      	ldr	r3, [pc, #180]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001676:	2210      	movs	r2, #16
 c001678:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 c00167a:	4b2c      	ldr	r3, [pc, #176]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c00167c:	2200      	movs	r2, #0
 c00167e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 c001680:	4b2a      	ldr	r3, [pc, #168]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001682:	2280      	movs	r2, #128	; 0x80
 c001684:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c001686:	4b29      	ldr	r3, [pc, #164]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001688:	2200      	movs	r2, #0
 c00168a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c00168c:	4b27      	ldr	r3, [pc, #156]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c00168e:	2200      	movs	r2, #0
 c001690:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 c001692:	4b26      	ldr	r3, [pc, #152]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001694:	2200      	movs	r2, #0
 c001696:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 c001698:	4b24      	ldr	r3, [pc, #144]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c00169a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c00169e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 c0016a0:	4822      	ldr	r0, [pc, #136]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c0016a2:	f000 fccd 	bl	c002040 <HAL_DMA_Init>
 c0016a6:	4603      	mov	r3, r0
 c0016a8:	2b00      	cmp	r3, #0
 c0016aa:	d001      	beq.n	c0016b0 <HAL_SPI_MspInit+0x19c>
    {
      Error_Handler();
 c0016ac:	f7ff fd74 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c0016b0:	2110      	movs	r1, #16
 c0016b2:	481e      	ldr	r0, [pc, #120]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c0016b4:	f000 ff3c 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c0016b8:	4603      	mov	r3, r0
 c0016ba:	2b00      	cmp	r3, #0
 c0016bc:	d001      	beq.n	c0016c2 <HAL_SPI_MspInit+0x1ae>
    {
      Error_Handler();
 c0016be:	f7ff fd6b 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SEC) != HAL_OK)
 c0016c2:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c0016c6:	4819      	ldr	r0, [pc, #100]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c0016c8:	f000 ff32 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c0016cc:	4603      	mov	r3, r0
 c0016ce:	2b00      	cmp	r3, #0
 c0016d0:	d001      	beq.n	c0016d6 <HAL_SPI_MspInit+0x1c2>
    {
      Error_Handler();
 c0016d2:	f7ff fd61 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c0016d6:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c0016da:	4814      	ldr	r0, [pc, #80]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c0016dc:	f000 ff28 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c0016e0:	4603      	mov	r3, r0
 c0016e2:	2b00      	cmp	r3, #0
 c0016e4:	d001      	beq.n	c0016ea <HAL_SPI_MspInit+0x1d6>
    {
      Error_Handler();
 c0016e6:	f7ff fd57 	bl	c001198 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c0016ea:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c0016ee:	480f      	ldr	r0, [pc, #60]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c0016f0:	f000 ff1e 	bl	c002530 <HAL_DMA_ConfigChannelAttributes>
 c0016f4:	4603      	mov	r3, r0
 c0016f6:	2b00      	cmp	r3, #0
 c0016f8:	d001      	beq.n	c0016fe <HAL_SPI_MspInit+0x1ea>
    {
      Error_Handler();
 c0016fa:	f7ff fd4d 	bl	c001198 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 c0016fe:	687b      	ldr	r3, [r7, #4]
 c001700:	4a0a      	ldr	r2, [pc, #40]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001702:	655a      	str	r2, [r3, #84]	; 0x54
 c001704:	4a09      	ldr	r2, [pc, #36]	; (c00172c <HAL_SPI_MspInit+0x218>)
 c001706:	687b      	ldr	r3, [r7, #4]
 c001708:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 c00170a:	bf00      	nop
 c00170c:	3728      	adds	r7, #40	; 0x28
 c00170e:	46bd      	mov	sp, r7
 c001710:	bd80      	pop	{r7, pc}
 c001712:	bf00      	nop
 c001714:	50003c00 	.word	0x50003c00
 c001718:	50021000 	.word	0x50021000
 c00171c:	52020c00 	.word	0x52020c00
 c001720:	52021800 	.word	0x52021800
 c001724:	3000013c 	.word	0x3000013c
 c001728:	5002001c 	.word	0x5002001c
 c00172c:	300001a4 	.word	0x300001a4
 c001730:	50020030 	.word	0x50020030

0c001734 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c001734:	b580      	push	{r7, lr}
 c001736:	b0ae      	sub	sp, #184	; 0xb8
 c001738:	af00      	add	r7, sp, #0
 c00173a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00173c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001740:	2200      	movs	r2, #0
 c001742:	601a      	str	r2, [r3, #0]
 c001744:	605a      	str	r2, [r3, #4]
 c001746:	609a      	str	r2, [r3, #8]
 c001748:	60da      	str	r2, [r3, #12]
 c00174a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c00174c:	f107 0310 	add.w	r3, r7, #16
 c001750:	2294      	movs	r2, #148	; 0x94
 c001752:	2100      	movs	r1, #0
 c001754:	4618      	mov	r0, r3
 c001756:	f004 ffe2 	bl	c00671e <memset>
  if(huart->Instance==USART1)
 c00175a:	687b      	ldr	r3, [r7, #4]
 c00175c:	681b      	ldr	r3, [r3, #0]
 c00175e:	4a21      	ldr	r2, [pc, #132]	; (c0017e4 <HAL_UART_MspInit+0xb0>)
 c001760:	4293      	cmp	r3, r2
 c001762:	d13b      	bne.n	c0017dc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c001764:	2301      	movs	r3, #1
 c001766:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c001768:	2300      	movs	r3, #0
 c00176a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c00176c:	f107 0310 	add.w	r3, r7, #16
 c001770:	4618      	mov	r0, r3
 c001772:	f002 fc29 	bl	c003fc8 <HAL_RCCEx_PeriphCLKConfig>
 c001776:	4603      	mov	r3, r0
 c001778:	2b00      	cmp	r3, #0
 c00177a:	d001      	beq.n	c001780 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c00177c:	f7ff fd0c 	bl	c001198 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c001780:	4b19      	ldr	r3, [pc, #100]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c001782:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001784:	4a18      	ldr	r2, [pc, #96]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c001786:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c00178a:	6613      	str	r3, [r2, #96]	; 0x60
 c00178c:	4b16      	ldr	r3, [pc, #88]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c00178e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001790:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c001794:	60fb      	str	r3, [r7, #12]
 c001796:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c001798:	4b13      	ldr	r3, [pc, #76]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c00179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00179c:	4a12      	ldr	r2, [pc, #72]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c00179e:	f043 0301 	orr.w	r3, r3, #1
 c0017a2:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0017a4:	4b10      	ldr	r3, [pc, #64]	; (c0017e8 <HAL_UART_MspInit+0xb4>)
 c0017a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0017a8:	f003 0301 	and.w	r3, r3, #1
 c0017ac:	60bb      	str	r3, [r7, #8]
 c0017ae:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c0017b0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c0017b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0017b8:	2302      	movs	r3, #2
 c0017ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0017be:	2300      	movs	r3, #0
 c0017c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0017c4:	2300      	movs	r3, #0
 c0017c6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c0017ca:	2307      	movs	r3, #7
 c0017cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c0017d0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c0017d4:	4619      	mov	r1, r3
 c0017d6:	4805      	ldr	r0, [pc, #20]	; (c0017ec <HAL_UART_MspInit+0xb8>)
 c0017d8:	f000 ffd2 	bl	c002780 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c0017dc:	bf00      	nop
 c0017de:	37b8      	adds	r7, #184	; 0xb8
 c0017e0:	46bd      	mov	sp, r7
 c0017e2:	bd80      	pop	{r7, pc}
 c0017e4:	50013800 	.word	0x50013800
 c0017e8:	50021000 	.word	0x50021000
 c0017ec:	52020000 	.word	0x52020000

0c0017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0017f0:	b480      	push	{r7}
 c0017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c0017f4:	e7fe      	b.n	c0017f4 <NMI_Handler+0x4>

0c0017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0017f6:	b480      	push	{r7}
 c0017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0017fa:	e7fe      	b.n	c0017fa <HardFault_Handler+0x4>

0c0017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0017fc:	b480      	push	{r7}
 c0017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001800:	e7fe      	b.n	c001800 <MemManage_Handler+0x4>

0c001802 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001802:	b480      	push	{r7}
 c001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001806:	e7fe      	b.n	c001806 <BusFault_Handler+0x4>

0c001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001808:	b480      	push	{r7}
 c00180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00180c:	e7fe      	b.n	c00180c <UsageFault_Handler+0x4>

0c00180e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00180e:	b480      	push	{r7}
 c001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001812:	e7fe      	b.n	c001812 <SecureFault_Handler+0x4>

0c001814 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001814:	b480      	push	{r7}
 c001816:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001818:	bf00      	nop
 c00181a:	46bd      	mov	sp, r7
 c00181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001820:	4770      	bx	lr

0c001822 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001822:	b480      	push	{r7}
 c001824:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001826:	bf00      	nop
 c001828:	46bd      	mov	sp, r7
 c00182a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00182e:	4770      	bx	lr

0c001830 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001830:	b480      	push	{r7}
 c001832:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001834:	bf00      	nop
 c001836:	46bd      	mov	sp, r7
 c001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00183c:	4770      	bx	lr

0c00183e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00183e:	b580      	push	{r7, lr}
 c001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001842:	f000 facd 	bl	c001de0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001846:	bf00      	nop
 c001848:	bd80      	pop	{r7, pc}
	...

0c00184c <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 c00184c:	b580      	push	{r7, lr}
 c00184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 c001850:	4802      	ldr	r0, [pc, #8]	; (c00185c <DMA1_Channel2_IRQHandler+0x10>)
 c001852:	f000 fd18 	bl	c002286 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 c001856:	bf00      	nop
 c001858:	bd80      	pop	{r7, pc}
 c00185a:	bf00      	nop
 c00185c:	3000013c 	.word	0x3000013c

0c001860 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 c001860:	b580      	push	{r7, lr}
 c001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 c001864:	4802      	ldr	r0, [pc, #8]	; (c001870 <DMA1_Channel3_IRQHandler+0x10>)
 c001866:	f000 fd0e 	bl	c002286 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c00186a:	bf00      	nop
 c00186c:	bd80      	pop	{r7, pc}
 c00186e:	bf00      	nop
 c001870:	300001a4 	.word	0x300001a4

0c001874 <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 c001874:	b580      	push	{r7, lr}
 c001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 c001878:	4802      	ldr	r0, [pc, #8]	; (c001884 <DMA1_Channel1_IRQHandler+0x10>)
 c00187a:	f000 fd04 	bl	c002286 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 c00187e:	bf00      	nop
 c001880:	bd80      	pop	{r7, pc}
 c001882:	bf00      	nop
 c001884:	300002a0 	.word	0x300002a0

0c001888 <_read>:
 c001888:	b580      	push	{r7, lr}
 c00188a:	b086      	sub	sp, #24
 c00188c:	af00      	add	r7, sp, #0
 c00188e:	60f8      	str	r0, [r7, #12]
 c001890:	60b9      	str	r1, [r7, #8]
 c001892:	607a      	str	r2, [r7, #4]
 c001894:	2300      	movs	r3, #0
 c001896:	617b      	str	r3, [r7, #20]
 c001898:	e00a      	b.n	c0018b0 <_read+0x28>
 c00189a:	e000      	b.n	c00189e <_read+0x16>
 c00189c:	bf00      	nop
 c00189e:	4601      	mov	r1, r0
 c0018a0:	68bb      	ldr	r3, [r7, #8]
 c0018a2:	1c5a      	adds	r2, r3, #1
 c0018a4:	60ba      	str	r2, [r7, #8]
 c0018a6:	b2ca      	uxtb	r2, r1
 c0018a8:	701a      	strb	r2, [r3, #0]
 c0018aa:	697b      	ldr	r3, [r7, #20]
 c0018ac:	3301      	adds	r3, #1
 c0018ae:	617b      	str	r3, [r7, #20]
 c0018b0:	697a      	ldr	r2, [r7, #20]
 c0018b2:	687b      	ldr	r3, [r7, #4]
 c0018b4:	429a      	cmp	r2, r3
 c0018b6:	dbf0      	blt.n	c00189a <_read+0x12>
 c0018b8:	687b      	ldr	r3, [r7, #4]
 c0018ba:	4618      	mov	r0, r3
 c0018bc:	3718      	adds	r7, #24
 c0018be:	46bd      	mov	sp, r7
 c0018c0:	bd80      	pop	{r7, pc}

0c0018c2 <_write>:
 c0018c2:	b580      	push	{r7, lr}
 c0018c4:	b086      	sub	sp, #24
 c0018c6:	af00      	add	r7, sp, #0
 c0018c8:	60f8      	str	r0, [r7, #12]
 c0018ca:	60b9      	str	r1, [r7, #8]
 c0018cc:	607a      	str	r2, [r7, #4]
 c0018ce:	2300      	movs	r3, #0
 c0018d0:	617b      	str	r3, [r7, #20]
 c0018d2:	e009      	b.n	c0018e8 <_write+0x26>
 c0018d4:	68bb      	ldr	r3, [r7, #8]
 c0018d6:	1c5a      	adds	r2, r3, #1
 c0018d8:	60ba      	str	r2, [r7, #8]
 c0018da:	781b      	ldrb	r3, [r3, #0]
 c0018dc:	4618      	mov	r0, r3
 c0018de:	f7ff fa19 	bl	c000d14 <__io_putchar>
 c0018e2:	697b      	ldr	r3, [r7, #20]
 c0018e4:	3301      	adds	r3, #1
 c0018e6:	617b      	str	r3, [r7, #20]
 c0018e8:	697a      	ldr	r2, [r7, #20]
 c0018ea:	687b      	ldr	r3, [r7, #4]
 c0018ec:	429a      	cmp	r2, r3
 c0018ee:	dbf1      	blt.n	c0018d4 <_write+0x12>
 c0018f0:	687b      	ldr	r3, [r7, #4]
 c0018f2:	4618      	mov	r0, r3
 c0018f4:	3718      	adds	r7, #24
 c0018f6:	46bd      	mov	sp, r7
 c0018f8:	bd80      	pop	{r7, pc}

0c0018fa <_close>:
 c0018fa:	b480      	push	{r7}
 c0018fc:	b083      	sub	sp, #12
 c0018fe:	af00      	add	r7, sp, #0
 c001900:	6078      	str	r0, [r7, #4]
 c001902:	f04f 33ff 	mov.w	r3, #4294967295
 c001906:	4618      	mov	r0, r3
 c001908:	370c      	adds	r7, #12
 c00190a:	46bd      	mov	sp, r7
 c00190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001910:	4770      	bx	lr

0c001912 <_fstat>:
 c001912:	b480      	push	{r7}
 c001914:	b083      	sub	sp, #12
 c001916:	af00      	add	r7, sp, #0
 c001918:	6078      	str	r0, [r7, #4]
 c00191a:	6039      	str	r1, [r7, #0]
 c00191c:	683b      	ldr	r3, [r7, #0]
 c00191e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c001922:	605a      	str	r2, [r3, #4]
 c001924:	2300      	movs	r3, #0
 c001926:	4618      	mov	r0, r3
 c001928:	370c      	adds	r7, #12
 c00192a:	46bd      	mov	sp, r7
 c00192c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001930:	4770      	bx	lr

0c001932 <_isatty>:
 c001932:	b480      	push	{r7}
 c001934:	b083      	sub	sp, #12
 c001936:	af00      	add	r7, sp, #0
 c001938:	6078      	str	r0, [r7, #4]
 c00193a:	2301      	movs	r3, #1
 c00193c:	4618      	mov	r0, r3
 c00193e:	370c      	adds	r7, #12
 c001940:	46bd      	mov	sp, r7
 c001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001946:	4770      	bx	lr

0c001948 <_lseek>:
 c001948:	b480      	push	{r7}
 c00194a:	b085      	sub	sp, #20
 c00194c:	af00      	add	r7, sp, #0
 c00194e:	60f8      	str	r0, [r7, #12]
 c001950:	60b9      	str	r1, [r7, #8]
 c001952:	607a      	str	r2, [r7, #4]
 c001954:	2300      	movs	r3, #0
 c001956:	4618      	mov	r0, r3
 c001958:	3714      	adds	r7, #20
 c00195a:	46bd      	mov	sp, r7
 c00195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001960:	4770      	bx	lr
	...

0c001964 <_sbrk>:
 c001964:	b580      	push	{r7, lr}
 c001966:	b086      	sub	sp, #24
 c001968:	af00      	add	r7, sp, #0
 c00196a:	6078      	str	r0, [r7, #4]
 c00196c:	4a14      	ldr	r2, [pc, #80]	; (c0019c0 <_sbrk+0x5c>)
 c00196e:	4b15      	ldr	r3, [pc, #84]	; (c0019c4 <_sbrk+0x60>)
 c001970:	1ad3      	subs	r3, r2, r3
 c001972:	617b      	str	r3, [r7, #20]
 c001974:	697b      	ldr	r3, [r7, #20]
 c001976:	613b      	str	r3, [r7, #16]
 c001978:	4b13      	ldr	r3, [pc, #76]	; (c0019c8 <_sbrk+0x64>)
 c00197a:	681b      	ldr	r3, [r3, #0]
 c00197c:	2b00      	cmp	r3, #0
 c00197e:	d102      	bne.n	c001986 <_sbrk+0x22>
 c001980:	4b11      	ldr	r3, [pc, #68]	; (c0019c8 <_sbrk+0x64>)
 c001982:	4a12      	ldr	r2, [pc, #72]	; (c0019cc <_sbrk+0x68>)
 c001984:	601a      	str	r2, [r3, #0]
 c001986:	4b10      	ldr	r3, [pc, #64]	; (c0019c8 <_sbrk+0x64>)
 c001988:	681a      	ldr	r2, [r3, #0]
 c00198a:	687b      	ldr	r3, [r7, #4]
 c00198c:	4413      	add	r3, r2
 c00198e:	693a      	ldr	r2, [r7, #16]
 c001990:	429a      	cmp	r2, r3
 c001992:	d207      	bcs.n	c0019a4 <_sbrk+0x40>
 c001994:	f004 fe8c 	bl	c0066b0 <__errno>
 c001998:	4603      	mov	r3, r0
 c00199a:	220c      	movs	r2, #12
 c00199c:	601a      	str	r2, [r3, #0]
 c00199e:	f04f 33ff 	mov.w	r3, #4294967295
 c0019a2:	e009      	b.n	c0019b8 <_sbrk+0x54>
 c0019a4:	4b08      	ldr	r3, [pc, #32]	; (c0019c8 <_sbrk+0x64>)
 c0019a6:	681b      	ldr	r3, [r3, #0]
 c0019a8:	60fb      	str	r3, [r7, #12]
 c0019aa:	4b07      	ldr	r3, [pc, #28]	; (c0019c8 <_sbrk+0x64>)
 c0019ac:	681a      	ldr	r2, [r3, #0]
 c0019ae:	687b      	ldr	r3, [r7, #4]
 c0019b0:	4413      	add	r3, r2
 c0019b2:	4a05      	ldr	r2, [pc, #20]	; (c0019c8 <_sbrk+0x64>)
 c0019b4:	6013      	str	r3, [r2, #0]
 c0019b6:	68fb      	ldr	r3, [r7, #12]
 c0019b8:	4618      	mov	r0, r3
 c0019ba:	3718      	adds	r7, #24
 c0019bc:	46bd      	mov	sp, r7
 c0019be:	bd80      	pop	{r7, pc}
 c0019c0:	30018000 	.word	0x30018000
 c0019c4:	00000400 	.word	0x00000400
 c0019c8:	30000b24 	.word	0x30000b24
 c0019cc:	30000b40 	.word	0x30000b40

0c0019d0 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c0019d0:	b480      	push	{r7}
 c0019d2:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c0019d4:	4b30      	ldr	r3, [pc, #192]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019d6:	2200      	movs	r2, #0
 c0019d8:	609a      	str	r2, [r3, #8]
 c0019da:	4b2f      	ldr	r3, [pc, #188]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019dc:	4a2f      	ldr	r2, [pc, #188]	; (c001a9c <TZ_SAU_Setup+0xcc>)
 c0019de:	60da      	str	r2, [r3, #12]
 c0019e0:	4b2d      	ldr	r3, [pc, #180]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019e2:	4a2f      	ldr	r2, [pc, #188]	; (c001aa0 <TZ_SAU_Setup+0xd0>)
 c0019e4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c0019e6:	4b2c      	ldr	r3, [pc, #176]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019e8:	2201      	movs	r2, #1
 c0019ea:	609a      	str	r2, [r3, #8]
 c0019ec:	4b2a      	ldr	r3, [pc, #168]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019ee:	4a2d      	ldr	r2, [pc, #180]	; (c001aa4 <TZ_SAU_Setup+0xd4>)
 c0019f0:	60da      	str	r2, [r3, #12]
 c0019f2:	4b29      	ldr	r3, [pc, #164]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019f4:	4a2c      	ldr	r2, [pc, #176]	; (c001aa8 <TZ_SAU_Setup+0xd8>)
 c0019f6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c0019f8:	4b27      	ldr	r3, [pc, #156]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c0019fa:	2202      	movs	r2, #2
 c0019fc:	609a      	str	r2, [r3, #8]
 c0019fe:	4b26      	ldr	r3, [pc, #152]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a00:	4a2a      	ldr	r2, [pc, #168]	; (c001aac <TZ_SAU_Setup+0xdc>)
 c001a02:	60da      	str	r2, [r3, #12]
 c001a04:	4b24      	ldr	r3, [pc, #144]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a06:	4a2a      	ldr	r2, [pc, #168]	; (c001ab0 <TZ_SAU_Setup+0xe0>)
 c001a08:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001a0a:	4b23      	ldr	r3, [pc, #140]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a0c:	2203      	movs	r2, #3
 c001a0e:	609a      	str	r2, [r3, #8]
 c001a10:	4b21      	ldr	r3, [pc, #132]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a12:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001a16:	60da      	str	r2, [r3, #12]
 c001a18:	4b1f      	ldr	r3, [pc, #124]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a1a:	4a26      	ldr	r2, [pc, #152]	; (c001ab4 <TZ_SAU_Setup+0xe4>)
 c001a1c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001a1e:	4b1e      	ldr	r3, [pc, #120]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a20:	2204      	movs	r2, #4
 c001a22:	609a      	str	r2, [r3, #8]
 c001a24:	4b1c      	ldr	r3, [pc, #112]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a26:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001a2a:	60da      	str	r2, [r3, #12]
 c001a2c:	4b1a      	ldr	r3, [pc, #104]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a2e:	4a22      	ldr	r2, [pc, #136]	; (c001ab8 <TZ_SAU_Setup+0xe8>)
 c001a30:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001a32:	4b19      	ldr	r3, [pc, #100]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a34:	2205      	movs	r2, #5
 c001a36:	609a      	str	r2, [r3, #8]
 c001a38:	4b17      	ldr	r3, [pc, #92]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a3a:	4a20      	ldr	r2, [pc, #128]	; (c001abc <TZ_SAU_Setup+0xec>)
 c001a3c:	60da      	str	r2, [r3, #12]
 c001a3e:	4b16      	ldr	r3, [pc, #88]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a40:	4a1f      	ldr	r2, [pc, #124]	; (c001ac0 <TZ_SAU_Setup+0xf0>)
 c001a42:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001a44:	4b14      	ldr	r3, [pc, #80]	; (c001a98 <TZ_SAU_Setup+0xc8>)
 c001a46:	2201      	movs	r2, #1
 c001a48:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001a4a:	4b1e      	ldr	r3, [pc, #120]	; (c001ac4 <TZ_SAU_Setup+0xf4>)
 c001a4c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001a50:	4a1c      	ldr	r2, [pc, #112]	; (c001ac4 <TZ_SAU_Setup+0xf4>)
 c001a52:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001a56:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001a5a:	4b1b      	ldr	r3, [pc, #108]	; (c001ac8 <TZ_SAU_Setup+0xf8>)
 c001a5c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001a5e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001a62:	4a19      	ldr	r2, [pc, #100]	; (c001ac8 <TZ_SAU_Setup+0xf8>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001a64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001a68:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001a6a:	4b18      	ldr	r3, [pc, #96]	; (c001acc <TZ_SAU_Setup+0xfc>)
 c001a6c:	2200      	movs	r2, #0
 c001a6e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001a72:	4b16      	ldr	r3, [pc, #88]	; (c001acc <TZ_SAU_Setup+0xfc>)
 c001a74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 c001a78:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001a7c:	4b13      	ldr	r3, [pc, #76]	; (c001acc <TZ_SAU_Setup+0xfc>)
 c001a7e:	2200      	movs	r2, #0
 c001a80:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001a84:	4b11      	ldr	r3, [pc, #68]	; (c001acc <TZ_SAU_Setup+0xfc>)
 c001a86:	2200      	movs	r2, #0
 c001a88:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001a8c:	bf00      	nop
 c001a8e:	46bd      	mov	sp, r7
 c001a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a94:	4770      	bx	lr
 c001a96:	bf00      	nop
 c001a98:	e000edd0 	.word	0xe000edd0
 c001a9c:	0c03e000 	.word	0x0c03e000
 c001aa0:	0c03ffe3 	.word	0x0c03ffe3
 c001aa4:	08040000 	.word	0x08040000
 c001aa8:	0807ffe1 	.word	0x0807ffe1
 c001aac:	20018000 	.word	0x20018000
 c001ab0:	2003ffe1 	.word	0x2003ffe1
 c001ab4:	4fffffe1 	.word	0x4fffffe1
 c001ab8:	9fffffe1 	.word	0x9fffffe1
 c001abc:	0bf90000 	.word	0x0bf90000
 c001ac0:	0bfa8fe1 	.word	0x0bfa8fe1
 c001ac4:	e000ed00 	.word	0xe000ed00
 c001ac8:	e000ef30 	.word	0xe000ef30
 c001acc:	e000e100 	.word	0xe000e100

0c001ad0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001ad0:	b580      	push	{r7, lr}
 c001ad2:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001ad4:	f7ff ff7c 	bl	c0019d0 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001ad8:	4b08      	ldr	r3, [pc, #32]	; (c001afc <SystemInit+0x2c>)
 c001ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001ade:	4a07      	ldr	r2, [pc, #28]	; (c001afc <SystemInit+0x2c>)
 c001ae0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001ae4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001ae8:	4b05      	ldr	r3, [pc, #20]	; (c001b00 <SystemInit+0x30>)
 c001aea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001aee:	4a04      	ldr	r2, [pc, #16]	; (c001b00 <SystemInit+0x30>)
 c001af0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001af4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001af8:	bf00      	nop
 c001afa:	bd80      	pop	{r7, pc}
 c001afc:	e000ed00 	.word	0xe000ed00
 c001b00:	e002ed00 	.word	0xe002ed00

0c001b04 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001b04:	b480      	push	{r7}
 c001b06:	b087      	sub	sp, #28
 c001b08:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001b0a:	4b4f      	ldr	r3, [pc, #316]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001b0c:	681b      	ldr	r3, [r3, #0]
 c001b0e:	f003 0308 	and.w	r3, r3, #8
 c001b12:	2b00      	cmp	r3, #0
 c001b14:	d107      	bne.n	c001b26 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001b16:	4b4c      	ldr	r3, [pc, #304]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001b18:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001b1c:	0a1b      	lsrs	r3, r3, #8
 c001b1e:	f003 030f 	and.w	r3, r3, #15
 c001b22:	617b      	str	r3, [r7, #20]
 c001b24:	e005      	b.n	c001b32 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c001b26:	4b48      	ldr	r3, [pc, #288]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001b28:	681b      	ldr	r3, [r3, #0]
 c001b2a:	091b      	lsrs	r3, r3, #4
 c001b2c:	f003 030f 	and.w	r3, r3, #15
 c001b30:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001b32:	4a46      	ldr	r2, [pc, #280]	; (c001c4c <SystemCoreClockUpdate+0x148>)
 c001b34:	697b      	ldr	r3, [r7, #20]
 c001b36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001b3a:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001b3c:	4b42      	ldr	r3, [pc, #264]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001b3e:	689b      	ldr	r3, [r3, #8]
 c001b40:	f003 030c 	and.w	r3, r3, #12
 c001b44:	2b0c      	cmp	r3, #12
 c001b46:	d866      	bhi.n	c001c16 <SystemCoreClockUpdate+0x112>
 c001b48:	a201      	add	r2, pc, #4	; (adr r2, c001b50 <SystemCoreClockUpdate+0x4c>)
 c001b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001b4e:	bf00      	nop
 c001b50:	0c001b85 	.word	0x0c001b85
 c001b54:	0c001c17 	.word	0x0c001c17
 c001b58:	0c001c17 	.word	0x0c001c17
 c001b5c:	0c001c17 	.word	0x0c001c17
 c001b60:	0c001b8d 	.word	0x0c001b8d
 c001b64:	0c001c17 	.word	0x0c001c17
 c001b68:	0c001c17 	.word	0x0c001c17
 c001b6c:	0c001c17 	.word	0x0c001c17
 c001b70:	0c001b95 	.word	0x0c001b95
 c001b74:	0c001c17 	.word	0x0c001c17
 c001b78:	0c001c17 	.word	0x0c001c17
 c001b7c:	0c001c17 	.word	0x0c001c17
 c001b80:	0c001b9d 	.word	0x0c001b9d
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c001b84:	4a32      	ldr	r2, [pc, #200]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001b86:	697b      	ldr	r3, [r7, #20]
 c001b88:	6013      	str	r3, [r2, #0]
      break;
 c001b8a:	e048      	b.n	c001c1e <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c001b8c:	4b30      	ldr	r3, [pc, #192]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001b8e:	4a31      	ldr	r2, [pc, #196]	; (c001c54 <SystemCoreClockUpdate+0x150>)
 c001b90:	601a      	str	r2, [r3, #0]
      break;
 c001b92:	e044      	b.n	c001c1e <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c001b94:	4b2e      	ldr	r3, [pc, #184]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001b96:	4a30      	ldr	r2, [pc, #192]	; (c001c58 <SystemCoreClockUpdate+0x154>)
 c001b98:	601a      	str	r2, [r3, #0]
      break;
 c001b9a:	e040      	b.n	c001c1e <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001b9c:	4b2a      	ldr	r3, [pc, #168]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001b9e:	68db      	ldr	r3, [r3, #12]
 c001ba0:	f003 0303 	and.w	r3, r3, #3
 c001ba4:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001ba6:	4b28      	ldr	r3, [pc, #160]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001ba8:	68db      	ldr	r3, [r3, #12]
 c001baa:	091b      	lsrs	r3, r3, #4
 c001bac:	f003 030f 	and.w	r3, r3, #15
 c001bb0:	3301      	adds	r3, #1
 c001bb2:	60bb      	str	r3, [r7, #8]
 c001bb4:	68fb      	ldr	r3, [r7, #12]
 c001bb6:	2b02      	cmp	r3, #2
 c001bb8:	d003      	beq.n	c001bc2 <SystemCoreClockUpdate+0xbe>
 c001bba:	68fb      	ldr	r3, [r7, #12]
 c001bbc:	2b03      	cmp	r3, #3
 c001bbe:	d006      	beq.n	c001bce <SystemCoreClockUpdate+0xca>
 c001bc0:	e00b      	b.n	c001bda <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c001bc2:	4a24      	ldr	r2, [pc, #144]	; (c001c54 <SystemCoreClockUpdate+0x150>)
 c001bc4:	68bb      	ldr	r3, [r7, #8]
 c001bc6:	fbb2 f3f3 	udiv	r3, r2, r3
 c001bca:	613b      	str	r3, [r7, #16]
          break;
 c001bcc:	e00b      	b.n	c001be6 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c001bce:	4a22      	ldr	r2, [pc, #136]	; (c001c58 <SystemCoreClockUpdate+0x154>)
 c001bd0:	68bb      	ldr	r3, [r7, #8]
 c001bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 c001bd6:	613b      	str	r3, [r7, #16]
          break;
 c001bd8:	e005      	b.n	c001be6 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001bda:	697a      	ldr	r2, [r7, #20]
 c001bdc:	68bb      	ldr	r3, [r7, #8]
 c001bde:	fbb2 f3f3 	udiv	r3, r2, r3
 c001be2:	613b      	str	r3, [r7, #16]
          break;
 c001be4:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001be6:	4b18      	ldr	r3, [pc, #96]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001be8:	68db      	ldr	r3, [r3, #12]
 c001bea:	0a1b      	lsrs	r3, r3, #8
 c001bec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c001bf0:	693b      	ldr	r3, [r7, #16]
 c001bf2:	fb02 f303 	mul.w	r3, r2, r3
 c001bf6:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001bf8:	4b13      	ldr	r3, [pc, #76]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001bfa:	68db      	ldr	r3, [r3, #12]
 c001bfc:	0e5b      	lsrs	r3, r3, #25
 c001bfe:	f003 0303 	and.w	r3, r3, #3
 c001c02:	3301      	adds	r3, #1
 c001c04:	005b      	lsls	r3, r3, #1
 c001c06:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c001c08:	693a      	ldr	r2, [r7, #16]
 c001c0a:	687b      	ldr	r3, [r7, #4]
 c001c0c:	fbb2 f3f3 	udiv	r3, r2, r3
 c001c10:	4a0f      	ldr	r2, [pc, #60]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001c12:	6013      	str	r3, [r2, #0]
      break;
 c001c14:	e003      	b.n	c001c1e <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c001c16:	4a0e      	ldr	r2, [pc, #56]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001c18:	697b      	ldr	r3, [r7, #20]
 c001c1a:	6013      	str	r3, [r2, #0]
      break;
 c001c1c:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001c1e:	4b0a      	ldr	r3, [pc, #40]	; (c001c48 <SystemCoreClockUpdate+0x144>)
 c001c20:	689b      	ldr	r3, [r3, #8]
 c001c22:	091b      	lsrs	r3, r3, #4
 c001c24:	f003 030f 	and.w	r3, r3, #15
 c001c28:	4a0c      	ldr	r2, [pc, #48]	; (c001c5c <SystemCoreClockUpdate+0x158>)
 c001c2a:	5cd3      	ldrb	r3, [r2, r3]
 c001c2c:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001c2e:	4b08      	ldr	r3, [pc, #32]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001c30:	681a      	ldr	r2, [r3, #0]
 c001c32:	683b      	ldr	r3, [r7, #0]
 c001c34:	fa22 f303 	lsr.w	r3, r2, r3
 c001c38:	4a05      	ldr	r2, [pc, #20]	; (c001c50 <SystemCoreClockUpdate+0x14c>)
 c001c3a:	6013      	str	r3, [r2, #0]
}
 c001c3c:	bf00      	nop
 c001c3e:	371c      	adds	r7, #28
 c001c40:	46bd      	mov	sp, r7
 c001c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c46:	4770      	bx	lr
 c001c48:	50021000 	.word	0x50021000
 c001c4c:	0c008164 	.word	0x0c008164
 c001c50:	3000003c 	.word	0x3000003c
 c001c54:	00f42400 	.word	0x00f42400
 c001c58:	007a1200 	.word	0x007a1200
 c001c5c:	0c00814c 	.word	0x0c00814c

0c001c60 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001c60:	b580      	push	{r7, lr}
 c001c62:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c001c64:	f7ff ff4e 	bl	c001b04 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c001c68:	4b1c      	ldr	r3, [pc, #112]	; (c001cdc <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001c6a:	681b      	ldr	r3, [r3, #0]
}
 c001c6c:	4618      	mov	r0, r3
 c001c6e:	46bd      	mov	sp, r7
 c001c70:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001c74:	4671      	mov	r1, lr
 c001c76:	4672      	mov	r2, lr
 c001c78:	4673      	mov	r3, lr
 c001c7a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001c7e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001c82:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001c86:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001c8a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001c8e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001c92:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001c96:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001c9a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001c9e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001ca2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001ca6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001caa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001cae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001cb2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001cb6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001cba:	f38e 8c00 	msr	CPSR_fs, lr
 c001cbe:	b410      	push	{r4}
 c001cc0:	eef1 ca10 	vmrs	ip, fpscr
 c001cc4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001cc8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001ccc:	ea0c 0c04 	and.w	ip, ip, r4
 c001cd0:	eee1 ca10 	vmsr	fpscr, ip
 c001cd4:	bc10      	pop	{r4}
 c001cd6:	46f4      	mov	ip, lr
 c001cd8:	4774      	bxns	lr
 c001cda:	bf00      	nop
 c001cdc:	3000003c 	.word	0x3000003c

0c001ce0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001ce0:	f8df d034 	ldr.w	sp, [pc, #52]	; c001d18 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001ce4:	f7ff fef4 	bl	c001ad0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001ce8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001cea:	e003      	b.n	c001cf4 <LoopCopyDataInit>

0c001cec <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001cec:	4b0b      	ldr	r3, [pc, #44]	; (c001d1c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001cee:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001cf0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001cf2:	3104      	adds	r1, #4

0c001cf4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001cf4:	480a      	ldr	r0, [pc, #40]	; (c001d20 <LoopForever+0xa>)
	ldr	r3, =_edata
 c001cf6:	4b0b      	ldr	r3, [pc, #44]	; (c001d24 <LoopForever+0xe>)
	adds	r2, r0, r1
 c001cf8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001cfa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001cfc:	d3f6      	bcc.n	c001cec <CopyDataInit>
	ldr	r2, =_sbss
 c001cfe:	4a0a      	ldr	r2, [pc, #40]	; (c001d28 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001d00:	e002      	b.n	c001d08 <LoopFillZerobss>

0c001d02 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001d02:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001d04:	f842 3b04 	str.w	r3, [r2], #4

0c001d08 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001d08:	4b08      	ldr	r3, [pc, #32]	; (c001d2c <LoopForever+0x16>)
	cmp	r2, r3
 c001d0a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001d0c:	d3f9      	bcc.n	c001d02 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001d0e:	f004 fcd5 	bl	c0066bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001d12:	f7fe fcc1 	bl	c000698 <main>

0c001d16 <LoopForever>:

LoopForever:
    b LoopForever
 c001d16:	e7fe      	b.n	c001d16 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001d18:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001d1c:	0c008274 	.word	0x0c008274
	ldr	r0, =_sdata
 c001d20:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001d24:	300000ac 	.word	0x300000ac
	ldr	r2, =_sbss
 c001d28:	300000ac 	.word	0x300000ac
	ldr	r3, = _ebss
 c001d2c:	30000b3c 	.word	0x30000b3c

0c001d30 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001d30:	e7fe      	b.n	c001d30 <ADC1_2_IRQHandler>

0c001d32 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001d32:	b580      	push	{r7, lr}
 c001d34:	b082      	sub	sp, #8
 c001d36:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c001d38:	2300      	movs	r3, #0
 c001d3a:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001d3c:	2004      	movs	r0, #4
 c001d3e:	f000 f93f 	bl	c001fc0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c001d42:	f7ff fedf 	bl	c001b04 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001d46:	2000      	movs	r0, #0
 c001d48:	f000 f80e 	bl	c001d68 <HAL_InitTick>
 c001d4c:	4603      	mov	r3, r0
 c001d4e:	2b00      	cmp	r3, #0
 c001d50:	d002      	beq.n	c001d58 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c001d52:	2301      	movs	r3, #1
 c001d54:	71fb      	strb	r3, [r7, #7]
 c001d56:	e001      	b.n	c001d5c <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c001d58:	f7ff fbac 	bl	c0014b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c001d5c:	79fb      	ldrb	r3, [r7, #7]
}
 c001d5e:	4618      	mov	r0, r3
 c001d60:	3708      	adds	r7, #8
 c001d62:	46bd      	mov	sp, r7
 c001d64:	bd80      	pop	{r7, pc}
	...

0c001d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001d68:	b580      	push	{r7, lr}
 c001d6a:	b084      	sub	sp, #16
 c001d6c:	af00      	add	r7, sp, #0
 c001d6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c001d70:	2300      	movs	r3, #0
 c001d72:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001d74:	4b17      	ldr	r3, [pc, #92]	; (c001dd4 <HAL_InitTick+0x6c>)
 c001d76:	781b      	ldrb	r3, [r3, #0]
 c001d78:	2b00      	cmp	r3, #0
 c001d7a:	d023      	beq.n	c001dc4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c001d7c:	4b16      	ldr	r3, [pc, #88]	; (c001dd8 <HAL_InitTick+0x70>)
 c001d7e:	681a      	ldr	r2, [r3, #0]
 c001d80:	4b14      	ldr	r3, [pc, #80]	; (c001dd4 <HAL_InitTick+0x6c>)
 c001d82:	781b      	ldrb	r3, [r3, #0]
 c001d84:	4619      	mov	r1, r3
 c001d86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c001d8a:	fbb3 f3f1 	udiv	r3, r3, r1
 c001d8e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001d92:	4618      	mov	r0, r3
 c001d94:	f000 f947 	bl	c002026 <HAL_SYSTICK_Config>
 c001d98:	4603      	mov	r3, r0
 c001d9a:	2b00      	cmp	r3, #0
 c001d9c:	d10f      	bne.n	c001dbe <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001d9e:	687b      	ldr	r3, [r7, #4]
 c001da0:	2b07      	cmp	r3, #7
 c001da2:	d809      	bhi.n	c001db8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001da4:	2200      	movs	r2, #0
 c001da6:	6879      	ldr	r1, [r7, #4]
 c001da8:	f04f 30ff 	mov.w	r0, #4294967295
 c001dac:	f000 f913 	bl	c001fd6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001db0:	4a0a      	ldr	r2, [pc, #40]	; (c001ddc <HAL_InitTick+0x74>)
 c001db2:	687b      	ldr	r3, [r7, #4]
 c001db4:	6013      	str	r3, [r2, #0]
 c001db6:	e007      	b.n	c001dc8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c001db8:	2301      	movs	r3, #1
 c001dba:	73fb      	strb	r3, [r7, #15]
 c001dbc:	e004      	b.n	c001dc8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001dbe:	2301      	movs	r3, #1
 c001dc0:	73fb      	strb	r3, [r7, #15]
 c001dc2:	e001      	b.n	c001dc8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001dc4:	2301      	movs	r3, #1
 c001dc6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c001dc8:	7bfb      	ldrb	r3, [r7, #15]
}
 c001dca:	4618      	mov	r0, r3
 c001dcc:	3710      	adds	r7, #16
 c001dce:	46bd      	mov	sp, r7
 c001dd0:	bd80      	pop	{r7, pc}
 c001dd2:	bf00      	nop
 c001dd4:	30000044 	.word	0x30000044
 c001dd8:	3000003c 	.word	0x3000003c
 c001ddc:	30000040 	.word	0x30000040

0c001de0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001de0:	b480      	push	{r7}
 c001de2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001de4:	4b06      	ldr	r3, [pc, #24]	; (c001e00 <HAL_IncTick+0x20>)
 c001de6:	781b      	ldrb	r3, [r3, #0]
 c001de8:	461a      	mov	r2, r3
 c001dea:	4b06      	ldr	r3, [pc, #24]	; (c001e04 <HAL_IncTick+0x24>)
 c001dec:	681b      	ldr	r3, [r3, #0]
 c001dee:	4413      	add	r3, r2
 c001df0:	4a04      	ldr	r2, [pc, #16]	; (c001e04 <HAL_IncTick+0x24>)
 c001df2:	6013      	str	r3, [r2, #0]
}
 c001df4:	bf00      	nop
 c001df6:	46bd      	mov	sp, r7
 c001df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001dfc:	4770      	bx	lr
 c001dfe:	bf00      	nop
 c001e00:	30000044 	.word	0x30000044
 c001e04:	30000b28 	.word	0x30000b28

0c001e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c001e08:	b480      	push	{r7}
 c001e0a:	af00      	add	r7, sp, #0
  return uwTick;
 c001e0c:	4b03      	ldr	r3, [pc, #12]	; (c001e1c <HAL_GetTick+0x14>)
 c001e0e:	681b      	ldr	r3, [r3, #0]
}
 c001e10:	4618      	mov	r0, r3
 c001e12:	46bd      	mov	sp, r7
 c001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e18:	4770      	bx	lr
 c001e1a:	bf00      	nop
 c001e1c:	30000b28 	.word	0x30000b28

0c001e20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001e20:	b480      	push	{r7}
 c001e22:	b085      	sub	sp, #20
 c001e24:	af00      	add	r7, sp, #0
 c001e26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001e28:	687b      	ldr	r3, [r7, #4]
 c001e2a:	f003 0307 	and.w	r3, r3, #7
 c001e2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001e30:	4b0c      	ldr	r3, [pc, #48]	; (c001e64 <__NVIC_SetPriorityGrouping+0x44>)
 c001e32:	68db      	ldr	r3, [r3, #12]
 c001e34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001e36:	68ba      	ldr	r2, [r7, #8]
 c001e38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001e3c:	4013      	ands	r3, r2
 c001e3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001e40:	68fb      	ldr	r3, [r7, #12]
 c001e42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001e44:	68bb      	ldr	r3, [r7, #8]
 c001e46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001e48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001e4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001e50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001e52:	4a04      	ldr	r2, [pc, #16]	; (c001e64 <__NVIC_SetPriorityGrouping+0x44>)
 c001e54:	68bb      	ldr	r3, [r7, #8]
 c001e56:	60d3      	str	r3, [r2, #12]
}
 c001e58:	bf00      	nop
 c001e5a:	3714      	adds	r7, #20
 c001e5c:	46bd      	mov	sp, r7
 c001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e62:	4770      	bx	lr
 c001e64:	e000ed00 	.word	0xe000ed00

0c001e68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001e68:	b480      	push	{r7}
 c001e6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001e6c:	4b04      	ldr	r3, [pc, #16]	; (c001e80 <__NVIC_GetPriorityGrouping+0x18>)
 c001e6e:	68db      	ldr	r3, [r3, #12]
 c001e70:	0a1b      	lsrs	r3, r3, #8
 c001e72:	f003 0307 	and.w	r3, r3, #7
}
 c001e76:	4618      	mov	r0, r3
 c001e78:	46bd      	mov	sp, r7
 c001e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e7e:	4770      	bx	lr
 c001e80:	e000ed00 	.word	0xe000ed00

0c001e84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001e84:	b480      	push	{r7}
 c001e86:	b083      	sub	sp, #12
 c001e88:	af00      	add	r7, sp, #0
 c001e8a:	4603      	mov	r3, r0
 c001e8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001e92:	2b00      	cmp	r3, #0
 c001e94:	db0b      	blt.n	c001eae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001e96:	79fb      	ldrb	r3, [r7, #7]
 c001e98:	f003 021f 	and.w	r2, r3, #31
 c001e9c:	4907      	ldr	r1, [pc, #28]	; (c001ebc <__NVIC_EnableIRQ+0x38>)
 c001e9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001ea2:	095b      	lsrs	r3, r3, #5
 c001ea4:	2001      	movs	r0, #1
 c001ea6:	fa00 f202 	lsl.w	r2, r0, r2
 c001eaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c001eae:	bf00      	nop
 c001eb0:	370c      	adds	r7, #12
 c001eb2:	46bd      	mov	sp, r7
 c001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001eb8:	4770      	bx	lr
 c001eba:	bf00      	nop
 c001ebc:	e000e100 	.word	0xe000e100

0c001ec0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001ec0:	b480      	push	{r7}
 c001ec2:	b083      	sub	sp, #12
 c001ec4:	af00      	add	r7, sp, #0
 c001ec6:	4603      	mov	r3, r0
 c001ec8:	6039      	str	r1, [r7, #0]
 c001eca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001ed0:	2b00      	cmp	r3, #0
 c001ed2:	db0a      	blt.n	c001eea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001ed4:	683b      	ldr	r3, [r7, #0]
 c001ed6:	b2da      	uxtb	r2, r3
 c001ed8:	490c      	ldr	r1, [pc, #48]	; (c001f0c <__NVIC_SetPriority+0x4c>)
 c001eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001ede:	0152      	lsls	r2, r2, #5
 c001ee0:	b2d2      	uxtb	r2, r2
 c001ee2:	440b      	add	r3, r1
 c001ee4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001ee8:	e00a      	b.n	c001f00 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001eea:	683b      	ldr	r3, [r7, #0]
 c001eec:	b2da      	uxtb	r2, r3
 c001eee:	4908      	ldr	r1, [pc, #32]	; (c001f10 <__NVIC_SetPriority+0x50>)
 c001ef0:	79fb      	ldrb	r3, [r7, #7]
 c001ef2:	f003 030f 	and.w	r3, r3, #15
 c001ef6:	3b04      	subs	r3, #4
 c001ef8:	0152      	lsls	r2, r2, #5
 c001efa:	b2d2      	uxtb	r2, r2
 c001efc:	440b      	add	r3, r1
 c001efe:	761a      	strb	r2, [r3, #24]
}
 c001f00:	bf00      	nop
 c001f02:	370c      	adds	r7, #12
 c001f04:	46bd      	mov	sp, r7
 c001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f0a:	4770      	bx	lr
 c001f0c:	e000e100 	.word	0xe000e100
 c001f10:	e000ed00 	.word	0xe000ed00

0c001f14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001f14:	b480      	push	{r7}
 c001f16:	b089      	sub	sp, #36	; 0x24
 c001f18:	af00      	add	r7, sp, #0
 c001f1a:	60f8      	str	r0, [r7, #12]
 c001f1c:	60b9      	str	r1, [r7, #8]
 c001f1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001f20:	68fb      	ldr	r3, [r7, #12]
 c001f22:	f003 0307 	and.w	r3, r3, #7
 c001f26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001f28:	69fb      	ldr	r3, [r7, #28]
 c001f2a:	f1c3 0307 	rsb	r3, r3, #7
 c001f2e:	2b03      	cmp	r3, #3
 c001f30:	bf28      	it	cs
 c001f32:	2303      	movcs	r3, #3
 c001f34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001f36:	69fb      	ldr	r3, [r7, #28]
 c001f38:	3303      	adds	r3, #3
 c001f3a:	2b06      	cmp	r3, #6
 c001f3c:	d902      	bls.n	c001f44 <NVIC_EncodePriority+0x30>
 c001f3e:	69fb      	ldr	r3, [r7, #28]
 c001f40:	3b04      	subs	r3, #4
 c001f42:	e000      	b.n	c001f46 <NVIC_EncodePriority+0x32>
 c001f44:	2300      	movs	r3, #0
 c001f46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001f48:	f04f 32ff 	mov.w	r2, #4294967295
 c001f4c:	69bb      	ldr	r3, [r7, #24]
 c001f4e:	fa02 f303 	lsl.w	r3, r2, r3
 c001f52:	43da      	mvns	r2, r3
 c001f54:	68bb      	ldr	r3, [r7, #8]
 c001f56:	401a      	ands	r2, r3
 c001f58:	697b      	ldr	r3, [r7, #20]
 c001f5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001f5c:	f04f 31ff 	mov.w	r1, #4294967295
 c001f60:	697b      	ldr	r3, [r7, #20]
 c001f62:	fa01 f303 	lsl.w	r3, r1, r3
 c001f66:	43d9      	mvns	r1, r3
 c001f68:	687b      	ldr	r3, [r7, #4]
 c001f6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001f6c:	4313      	orrs	r3, r2
         );
}
 c001f6e:	4618      	mov	r0, r3
 c001f70:	3724      	adds	r7, #36	; 0x24
 c001f72:	46bd      	mov	sp, r7
 c001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f78:	4770      	bx	lr
	...

0c001f7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001f7c:	b580      	push	{r7, lr}
 c001f7e:	b082      	sub	sp, #8
 c001f80:	af00      	add	r7, sp, #0
 c001f82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001f84:	687b      	ldr	r3, [r7, #4]
 c001f86:	3b01      	subs	r3, #1
 c001f88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001f8c:	d301      	bcc.n	c001f92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001f8e:	2301      	movs	r3, #1
 c001f90:	e00f      	b.n	c001fb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001f92:	4a0a      	ldr	r2, [pc, #40]	; (c001fbc <SysTick_Config+0x40>)
 c001f94:	687b      	ldr	r3, [r7, #4]
 c001f96:	3b01      	subs	r3, #1
 c001f98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001f9a:	2107      	movs	r1, #7
 c001f9c:	f04f 30ff 	mov.w	r0, #4294967295
 c001fa0:	f7ff ff8e 	bl	c001ec0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001fa4:	4b05      	ldr	r3, [pc, #20]	; (c001fbc <SysTick_Config+0x40>)
 c001fa6:	2200      	movs	r2, #0
 c001fa8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001faa:	4b04      	ldr	r3, [pc, #16]	; (c001fbc <SysTick_Config+0x40>)
 c001fac:	2207      	movs	r2, #7
 c001fae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001fb0:	2300      	movs	r3, #0
}
 c001fb2:	4618      	mov	r0, r3
 c001fb4:	3708      	adds	r7, #8
 c001fb6:	46bd      	mov	sp, r7
 c001fb8:	bd80      	pop	{r7, pc}
 c001fba:	bf00      	nop
 c001fbc:	e000e010 	.word	0xe000e010

0c001fc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001fc0:	b580      	push	{r7, lr}
 c001fc2:	b082      	sub	sp, #8
 c001fc4:	af00      	add	r7, sp, #0
 c001fc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001fc8:	6878      	ldr	r0, [r7, #4]
 c001fca:	f7ff ff29 	bl	c001e20 <__NVIC_SetPriorityGrouping>
}
 c001fce:	bf00      	nop
 c001fd0:	3708      	adds	r7, #8
 c001fd2:	46bd      	mov	sp, r7
 c001fd4:	bd80      	pop	{r7, pc}

0c001fd6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001fd6:	b580      	push	{r7, lr}
 c001fd8:	b086      	sub	sp, #24
 c001fda:	af00      	add	r7, sp, #0
 c001fdc:	4603      	mov	r3, r0
 c001fde:	60b9      	str	r1, [r7, #8]
 c001fe0:	607a      	str	r2, [r7, #4]
 c001fe2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001fe4:	f7ff ff40 	bl	c001e68 <__NVIC_GetPriorityGrouping>
 c001fe8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001fea:	687a      	ldr	r2, [r7, #4]
 c001fec:	68b9      	ldr	r1, [r7, #8]
 c001fee:	6978      	ldr	r0, [r7, #20]
 c001ff0:	f7ff ff90 	bl	c001f14 <NVIC_EncodePriority>
 c001ff4:	4602      	mov	r2, r0
 c001ff6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001ffa:	4611      	mov	r1, r2
 c001ffc:	4618      	mov	r0, r3
 c001ffe:	f7ff ff5f 	bl	c001ec0 <__NVIC_SetPriority>
}
 c002002:	bf00      	nop
 c002004:	3718      	adds	r7, #24
 c002006:	46bd      	mov	sp, r7
 c002008:	bd80      	pop	{r7, pc}

0c00200a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00200a:	b580      	push	{r7, lr}
 c00200c:	b082      	sub	sp, #8
 c00200e:	af00      	add	r7, sp, #0
 c002010:	4603      	mov	r3, r0
 c002012:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002018:	4618      	mov	r0, r3
 c00201a:	f7ff ff33 	bl	c001e84 <__NVIC_EnableIRQ>
}
 c00201e:	bf00      	nop
 c002020:	3708      	adds	r7, #8
 c002022:	46bd      	mov	sp, r7
 c002024:	bd80      	pop	{r7, pc}

0c002026 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c002026:	b580      	push	{r7, lr}
 c002028:	b082      	sub	sp, #8
 c00202a:	af00      	add	r7, sp, #0
 c00202c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00202e:	6878      	ldr	r0, [r7, #4]
 c002030:	f7ff ffa4 	bl	c001f7c <SysTick_Config>
 c002034:	4603      	mov	r3, r0
}
 c002036:	4618      	mov	r0, r3
 c002038:	3708      	adds	r7, #8
 c00203a:	46bd      	mov	sp, r7
 c00203c:	bd80      	pop	{r7, pc}
	...

0c002040 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c002040:	b580      	push	{r7, lr}
 c002042:	b084      	sub	sp, #16
 c002044:	af00      	add	r7, sp, #0
 c002046:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c002048:	687b      	ldr	r3, [r7, #4]
 c00204a:	2b00      	cmp	r3, #0
 c00204c:	d101      	bne.n	c002052 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c00204e:	2301      	movs	r3, #1
 c002050:	e08d      	b.n	c00216e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c002052:	687b      	ldr	r3, [r7, #4]
 c002054:	681b      	ldr	r3, [r3, #0]
 c002056:	461a      	mov	r2, r3
 c002058:	4b47      	ldr	r3, [pc, #284]	; (c002178 <HAL_DMA_Init+0x138>)
 c00205a:	429a      	cmp	r2, r3
 c00205c:	d80f      	bhi.n	c00207e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c00205e:	687b      	ldr	r3, [r7, #4]
 c002060:	681b      	ldr	r3, [r3, #0]
 c002062:	461a      	mov	r2, r3
 c002064:	4b45      	ldr	r3, [pc, #276]	; (c00217c <HAL_DMA_Init+0x13c>)
 c002066:	4413      	add	r3, r2
 c002068:	4a45      	ldr	r2, [pc, #276]	; (c002180 <HAL_DMA_Init+0x140>)
 c00206a:	fba2 2303 	umull	r2, r3, r2, r3
 c00206e:	091b      	lsrs	r3, r3, #4
 c002070:	009a      	lsls	r2, r3, #2
 c002072:	687b      	ldr	r3, [r7, #4]
 c002074:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c002076:	687b      	ldr	r3, [r7, #4]
 c002078:	4a42      	ldr	r2, [pc, #264]	; (c002184 <HAL_DMA_Init+0x144>)
 c00207a:	649a      	str	r2, [r3, #72]	; 0x48
 c00207c:	e00e      	b.n	c00209c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c00207e:	687b      	ldr	r3, [r7, #4]
 c002080:	681b      	ldr	r3, [r3, #0]
 c002082:	461a      	mov	r2, r3
 c002084:	4b40      	ldr	r3, [pc, #256]	; (c002188 <HAL_DMA_Init+0x148>)
 c002086:	4413      	add	r3, r2
 c002088:	4a3d      	ldr	r2, [pc, #244]	; (c002180 <HAL_DMA_Init+0x140>)
 c00208a:	fba2 2303 	umull	r2, r3, r2, r3
 c00208e:	091b      	lsrs	r3, r3, #4
 c002090:	009a      	lsls	r2, r3, #2
 c002092:	687b      	ldr	r3, [r7, #4]
 c002094:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c002096:	687b      	ldr	r3, [r7, #4]
 c002098:	4a3c      	ldr	r2, [pc, #240]	; (c00218c <HAL_DMA_Init+0x14c>)
 c00209a:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c00209c:	687b      	ldr	r3, [r7, #4]
 c00209e:	2202      	movs	r2, #2
 c0020a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c0020a4:	687b      	ldr	r3, [r7, #4]
 c0020a6:	681b      	ldr	r3, [r3, #0]
 c0020a8:	681b      	ldr	r3, [r3, #0]
 c0020aa:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c0020ac:	68fb      	ldr	r3, [r7, #12]
 c0020ae:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c0020b2:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c0020b6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c0020b8:	687b      	ldr	r3, [r7, #4]
 c0020ba:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c0020bc:	687b      	ldr	r3, [r7, #4]
 c0020be:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c0020c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c0020c2:	687b      	ldr	r3, [r7, #4]
 c0020c4:	691b      	ldr	r3, [r3, #16]
 c0020c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c0020c8:	687b      	ldr	r3, [r7, #4]
 c0020ca:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c0020cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c0020ce:	687b      	ldr	r3, [r7, #4]
 c0020d0:	699b      	ldr	r3, [r3, #24]
 c0020d2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c0020d4:	687b      	ldr	r3, [r7, #4]
 c0020d6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c0020d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c0020da:	687b      	ldr	r3, [r7, #4]
 c0020dc:	6a1b      	ldr	r3, [r3, #32]
 c0020de:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c0020e0:	68fa      	ldr	r2, [r7, #12]
 c0020e2:	4313      	orrs	r3, r2
 c0020e4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c0020e6:	687b      	ldr	r3, [r7, #4]
 c0020e8:	681b      	ldr	r3, [r3, #0]
 c0020ea:	68fa      	ldr	r2, [r7, #12]
 c0020ec:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c0020ee:	6878      	ldr	r0, [r7, #4]
 c0020f0:	f000 fae4 	bl	c0026bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c0020f4:	687b      	ldr	r3, [r7, #4]
 c0020f6:	689b      	ldr	r3, [r3, #8]
 c0020f8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0020fc:	d102      	bne.n	c002104 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c0020fe:	687b      	ldr	r3, [r7, #4]
 c002100:	2200      	movs	r2, #0
 c002102:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c002104:	687b      	ldr	r3, [r7, #4]
 c002106:	685a      	ldr	r2, [r3, #4]
 c002108:	687b      	ldr	r3, [r7, #4]
 c00210a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00210c:	b2d2      	uxtb	r2, r2
 c00210e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c002110:	687b      	ldr	r3, [r7, #4]
 c002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002114:	687a      	ldr	r2, [r7, #4]
 c002116:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c002118:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c00211a:	687b      	ldr	r3, [r7, #4]
 c00211c:	685b      	ldr	r3, [r3, #4]
 c00211e:	2b00      	cmp	r3, #0
 c002120:	d010      	beq.n	c002144 <HAL_DMA_Init+0x104>
 c002122:	687b      	ldr	r3, [r7, #4]
 c002124:	685b      	ldr	r3, [r3, #4]
 c002126:	2b04      	cmp	r3, #4
 c002128:	d80c      	bhi.n	c002144 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c00212a:	6878      	ldr	r0, [r7, #4]
 c00212c:	f000 fb04 	bl	c002738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c002130:	687b      	ldr	r3, [r7, #4]
 c002132:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002134:	2200      	movs	r2, #0
 c002136:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c002138:	687b      	ldr	r3, [r7, #4]
 c00213a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00213c:	687a      	ldr	r2, [r7, #4]
 c00213e:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c002140:	605a      	str	r2, [r3, #4]
 c002142:	e008      	b.n	c002156 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c002144:	687b      	ldr	r3, [r7, #4]
 c002146:	2200      	movs	r2, #0
 c002148:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c00214a:	687b      	ldr	r3, [r7, #4]
 c00214c:	2200      	movs	r2, #0
 c00214e:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c002150:	687b      	ldr	r3, [r7, #4]
 c002152:	2200      	movs	r2, #0
 c002154:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c002156:	687b      	ldr	r3, [r7, #4]
 c002158:	2200      	movs	r2, #0
 c00215a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c00215c:	687b      	ldr	r3, [r7, #4]
 c00215e:	2201      	movs	r2, #1
 c002160:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c002164:	687b      	ldr	r3, [r7, #4]
 c002166:	2200      	movs	r2, #0
 c002168:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c00216c:	2300      	movs	r3, #0
}
 c00216e:	4618      	mov	r0, r3
 c002170:	3710      	adds	r7, #16
 c002172:	46bd      	mov	sp, r7
 c002174:	bd80      	pop	{r7, pc}
 c002176:	bf00      	nop
 c002178:	50020407 	.word	0x50020407
 c00217c:	affdfff8 	.word	0xaffdfff8
 c002180:	cccccccd 	.word	0xcccccccd
 c002184:	50020000 	.word	0x50020000
 c002188:	affdfbf8 	.word	0xaffdfbf8
 c00218c:	50020400 	.word	0x50020400

0c002190 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002190:	b580      	push	{r7, lr}
 c002192:	b086      	sub	sp, #24
 c002194:	af00      	add	r7, sp, #0
 c002196:	60f8      	str	r0, [r7, #12]
 c002198:	60b9      	str	r1, [r7, #8]
 c00219a:	607a      	str	r2, [r7, #4]
 c00219c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00219e:	2300      	movs	r3, #0
 c0021a0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c0021a2:	68fb      	ldr	r3, [r7, #12]
 c0021a4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c0021a8:	2b01      	cmp	r3, #1
 c0021aa:	d101      	bne.n	c0021b0 <HAL_DMA_Start_IT+0x20>
 c0021ac:	2302      	movs	r3, #2
 c0021ae:	e066      	b.n	c00227e <HAL_DMA_Start_IT+0xee>
 c0021b0:	68fb      	ldr	r3, [r7, #12]
 c0021b2:	2201      	movs	r2, #1
 c0021b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c0021b8:	68fb      	ldr	r3, [r7, #12]
 c0021ba:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c0021be:	b2db      	uxtb	r3, r3
 c0021c0:	2b01      	cmp	r3, #1
 c0021c2:	d155      	bne.n	c002270 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c0021c4:	68fb      	ldr	r3, [r7, #12]
 c0021c6:	2202      	movs	r2, #2
 c0021c8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c0021cc:	68fb      	ldr	r3, [r7, #12]
 c0021ce:	2200      	movs	r2, #0
 c0021d0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c0021d2:	68fb      	ldr	r3, [r7, #12]
 c0021d4:	681b      	ldr	r3, [r3, #0]
 c0021d6:	681a      	ldr	r2, [r3, #0]
 c0021d8:	68fb      	ldr	r3, [r7, #12]
 c0021da:	681b      	ldr	r3, [r3, #0]
 c0021dc:	f022 0201 	bic.w	r2, r2, #1
 c0021e0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c0021e2:	683b      	ldr	r3, [r7, #0]
 c0021e4:	687a      	ldr	r2, [r7, #4]
 c0021e6:	68b9      	ldr	r1, [r7, #8]
 c0021e8:	68f8      	ldr	r0, [r7, #12]
 c0021ea:	f000 fa29 	bl	c002640 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c0021ee:	68fb      	ldr	r3, [r7, #12]
 c0021f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0021f2:	2b00      	cmp	r3, #0
 c0021f4:	d008      	beq.n	c002208 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c0021f6:	68fb      	ldr	r3, [r7, #12]
 c0021f8:	681b      	ldr	r3, [r3, #0]
 c0021fa:	681a      	ldr	r2, [r3, #0]
 c0021fc:	68fb      	ldr	r3, [r7, #12]
 c0021fe:	681b      	ldr	r3, [r3, #0]
 c002200:	f042 020e 	orr.w	r2, r2, #14
 c002204:	601a      	str	r2, [r3, #0]
 c002206:	e00f      	b.n	c002228 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c002208:	68fb      	ldr	r3, [r7, #12]
 c00220a:	681b      	ldr	r3, [r3, #0]
 c00220c:	681a      	ldr	r2, [r3, #0]
 c00220e:	68fb      	ldr	r3, [r7, #12]
 c002210:	681b      	ldr	r3, [r3, #0]
 c002212:	f022 0204 	bic.w	r2, r2, #4
 c002216:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c002218:	68fb      	ldr	r3, [r7, #12]
 c00221a:	681b      	ldr	r3, [r3, #0]
 c00221c:	681a      	ldr	r2, [r3, #0]
 c00221e:	68fb      	ldr	r3, [r7, #12]
 c002220:	681b      	ldr	r3, [r3, #0]
 c002222:	f042 020a 	orr.w	r2, r2, #10
 c002226:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c002228:	68fb      	ldr	r3, [r7, #12]
 c00222a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00222c:	681b      	ldr	r3, [r3, #0]
 c00222e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002232:	2b00      	cmp	r3, #0
 c002234:	d007      	beq.n	c002246 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c002236:	68fb      	ldr	r3, [r7, #12]
 c002238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c00223a:	681a      	ldr	r2, [r3, #0]
 c00223c:	68fb      	ldr	r3, [r7, #12]
 c00223e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002240:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c002244:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c002246:	68fb      	ldr	r3, [r7, #12]
 c002248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00224a:	2b00      	cmp	r3, #0
 c00224c:	d007      	beq.n	c00225e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c00224e:	68fb      	ldr	r3, [r7, #12]
 c002250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002252:	681a      	ldr	r2, [r3, #0]
 c002254:	68fb      	ldr	r3, [r7, #12]
 c002256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002258:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c00225c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c00225e:	68fb      	ldr	r3, [r7, #12]
 c002260:	681b      	ldr	r3, [r3, #0]
 c002262:	681a      	ldr	r2, [r3, #0]
 c002264:	68fb      	ldr	r3, [r7, #12]
 c002266:	681b      	ldr	r3, [r3, #0]
 c002268:	f042 0201 	orr.w	r2, r2, #1
 c00226c:	601a      	str	r2, [r3, #0]
 c00226e:	e005      	b.n	c00227c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c002270:	68fb      	ldr	r3, [r7, #12]
 c002272:	2200      	movs	r2, #0
 c002274:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c002278:	2302      	movs	r3, #2
 c00227a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c00227c:	7dfb      	ldrb	r3, [r7, #23]
}
 c00227e:	4618      	mov	r0, r3
 c002280:	3718      	adds	r7, #24
 c002282:	46bd      	mov	sp, r7
 c002284:	bd80      	pop	{r7, pc}

0c002286 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c002286:	b580      	push	{r7, lr}
 c002288:	b084      	sub	sp, #16
 c00228a:	af00      	add	r7, sp, #0
 c00228c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c00228e:	687b      	ldr	r3, [r7, #4]
 c002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002292:	681b      	ldr	r3, [r3, #0]
 c002294:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c002296:	687b      	ldr	r3, [r7, #4]
 c002298:	681b      	ldr	r3, [r3, #0]
 c00229a:	681b      	ldr	r3, [r3, #0]
 c00229c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c00229e:	687b      	ldr	r3, [r7, #4]
 c0022a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0022a2:	f003 031c 	and.w	r3, r3, #28
 c0022a6:	2204      	movs	r2, #4
 c0022a8:	409a      	lsls	r2, r3
 c0022aa:	68fb      	ldr	r3, [r7, #12]
 c0022ac:	4013      	ands	r3, r2
 c0022ae:	2b00      	cmp	r3, #0
 c0022b0:	d053      	beq.n	c00235a <HAL_DMA_IRQHandler+0xd4>
 c0022b2:	68bb      	ldr	r3, [r7, #8]
 c0022b4:	f003 0304 	and.w	r3, r3, #4
 c0022b8:	2b00      	cmp	r3, #0
 c0022ba:	d04e      	beq.n	c00235a <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0022bc:	687b      	ldr	r3, [r7, #4]
 c0022be:	681b      	ldr	r3, [r3, #0]
 c0022c0:	681b      	ldr	r3, [r3, #0]
 c0022c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0022c6:	2b00      	cmp	r3, #0
 c0022c8:	d024      	beq.n	c002314 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c0022ca:	687b      	ldr	r3, [r7, #4]
 c0022cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0022ce:	f003 021c 	and.w	r2, r3, #28
 c0022d2:	687b      	ldr	r3, [r7, #4]
 c0022d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0022d6:	2104      	movs	r1, #4
 c0022d8:	fa01 f202 	lsl.w	r2, r1, r2
 c0022dc:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c0022de:	687b      	ldr	r3, [r7, #4]
 c0022e0:	681b      	ldr	r3, [r3, #0]
 c0022e2:	681b      	ldr	r3, [r3, #0]
 c0022e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0022e8:	2b00      	cmp	r3, #0
 c0022ea:	d109      	bne.n	c002300 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c0022ec:	687b      	ldr	r3, [r7, #4]
 c0022ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0022f0:	2b00      	cmp	r3, #0
 c0022f2:	f000 80c0 	beq.w	c002476 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c0022f6:	687b      	ldr	r3, [r7, #4]
 c0022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0022fa:	6878      	ldr	r0, [r7, #4]
 c0022fc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0022fe:	e0ba      	b.n	c002476 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c002300:	687b      	ldr	r3, [r7, #4]
 c002302:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002304:	2b00      	cmp	r3, #0
 c002306:	f000 80b6 	beq.w	c002476 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c00230a:	687b      	ldr	r3, [r7, #4]
 c00230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00230e:	6878      	ldr	r0, [r7, #4]
 c002310:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002312:	e0b0      	b.n	c002476 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c002314:	687b      	ldr	r3, [r7, #4]
 c002316:	681b      	ldr	r3, [r3, #0]
 c002318:	681b      	ldr	r3, [r3, #0]
 c00231a:	f003 0320 	and.w	r3, r3, #32
 c00231e:	2b00      	cmp	r3, #0
 c002320:	d107      	bne.n	c002332 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c002322:	687b      	ldr	r3, [r7, #4]
 c002324:	681b      	ldr	r3, [r3, #0]
 c002326:	681a      	ldr	r2, [r3, #0]
 c002328:	687b      	ldr	r3, [r7, #4]
 c00232a:	681b      	ldr	r3, [r3, #0]
 c00232c:	f022 0204 	bic.w	r2, r2, #4
 c002330:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c002332:	687b      	ldr	r3, [r7, #4]
 c002334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002336:	f003 021c 	and.w	r2, r3, #28
 c00233a:	687b      	ldr	r3, [r7, #4]
 c00233c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00233e:	2104      	movs	r1, #4
 c002340:	fa01 f202 	lsl.w	r2, r1, r2
 c002344:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c002346:	687b      	ldr	r3, [r7, #4]
 c002348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00234a:	2b00      	cmp	r3, #0
 c00234c:	f000 8093 	beq.w	c002476 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c002350:	687b      	ldr	r3, [r7, #4]
 c002352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002354:	6878      	ldr	r0, [r7, #4]
 c002356:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002358:	e08d      	b.n	c002476 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c00235a:	687b      	ldr	r3, [r7, #4]
 c00235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00235e:	f003 031c 	and.w	r3, r3, #28
 c002362:	2202      	movs	r2, #2
 c002364:	409a      	lsls	r2, r3
 c002366:	68fb      	ldr	r3, [r7, #12]
 c002368:	4013      	ands	r3, r2
 c00236a:	2b00      	cmp	r3, #0
 c00236c:	d04e      	beq.n	c00240c <HAL_DMA_IRQHandler+0x186>
 c00236e:	68bb      	ldr	r3, [r7, #8]
 c002370:	f003 0302 	and.w	r3, r3, #2
 c002374:	2b00      	cmp	r3, #0
 c002376:	d049      	beq.n	c00240c <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002378:	687b      	ldr	r3, [r7, #4]
 c00237a:	681b      	ldr	r3, [r3, #0]
 c00237c:	681b      	ldr	r3, [r3, #0]
 c00237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002382:	2b00      	cmp	r3, #0
 c002384:	d018      	beq.n	c0023b8 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c002386:	687b      	ldr	r3, [r7, #4]
 c002388:	681b      	ldr	r3, [r3, #0]
 c00238a:	681b      	ldr	r3, [r3, #0]
 c00238c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002390:	2b00      	cmp	r3, #0
 c002392:	d108      	bne.n	c0023a6 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c002394:	687b      	ldr	r3, [r7, #4]
 c002396:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002398:	2b00      	cmp	r3, #0
 c00239a:	d06e      	beq.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c00239c:	687b      	ldr	r3, [r7, #4]
 c00239e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0023a0:	6878      	ldr	r0, [r7, #4]
 c0023a2:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0023a4:	e069      	b.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c0023a6:	687b      	ldr	r3, [r7, #4]
 c0023a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0023aa:	2b00      	cmp	r3, #0
 c0023ac:	d065      	beq.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c0023ae:	687b      	ldr	r3, [r7, #4]
 c0023b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0023b2:	6878      	ldr	r0, [r7, #4]
 c0023b4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0023b6:	e060      	b.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c0023b8:	687b      	ldr	r3, [r7, #4]
 c0023ba:	681b      	ldr	r3, [r3, #0]
 c0023bc:	681b      	ldr	r3, [r3, #0]
 c0023be:	f003 0320 	and.w	r3, r3, #32
 c0023c2:	2b00      	cmp	r3, #0
 c0023c4:	d10b      	bne.n	c0023de <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c0023c6:	687b      	ldr	r3, [r7, #4]
 c0023c8:	681b      	ldr	r3, [r3, #0]
 c0023ca:	681a      	ldr	r2, [r3, #0]
 c0023cc:	687b      	ldr	r3, [r7, #4]
 c0023ce:	681b      	ldr	r3, [r3, #0]
 c0023d0:	f022 020a 	bic.w	r2, r2, #10
 c0023d4:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c0023d6:	687b      	ldr	r3, [r7, #4]
 c0023d8:	2201      	movs	r2, #1
 c0023da:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0023e2:	f003 021c 	and.w	r2, r3, #28
 c0023e6:	687b      	ldr	r3, [r7, #4]
 c0023e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0023ea:	2102      	movs	r1, #2
 c0023ec:	fa01 f202 	lsl.w	r2, r1, r2
 c0023f0:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c0023f2:	687b      	ldr	r3, [r7, #4]
 c0023f4:	2200      	movs	r2, #0
 c0023f6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c0023fa:	687b      	ldr	r3, [r7, #4]
 c0023fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0023fe:	2b00      	cmp	r3, #0
 c002400:	d03b      	beq.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c002402:	687b      	ldr	r3, [r7, #4]
 c002404:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002406:	6878      	ldr	r0, [r7, #4]
 c002408:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c00240a:	e036      	b.n	c00247a <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c00240c:	687b      	ldr	r3, [r7, #4]
 c00240e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002410:	f003 031c 	and.w	r3, r3, #28
 c002414:	2208      	movs	r2, #8
 c002416:	409a      	lsls	r2, r3
 c002418:	68fb      	ldr	r3, [r7, #12]
 c00241a:	4013      	ands	r3, r2
 c00241c:	2b00      	cmp	r3, #0
 c00241e:	d02e      	beq.n	c00247e <HAL_DMA_IRQHandler+0x1f8>
 c002420:	68bb      	ldr	r3, [r7, #8]
 c002422:	f003 0308 	and.w	r3, r3, #8
 c002426:	2b00      	cmp	r3, #0
 c002428:	d029      	beq.n	c00247e <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c00242a:	687b      	ldr	r3, [r7, #4]
 c00242c:	681b      	ldr	r3, [r3, #0]
 c00242e:	681a      	ldr	r2, [r3, #0]
 c002430:	687b      	ldr	r3, [r7, #4]
 c002432:	681b      	ldr	r3, [r3, #0]
 c002434:	f022 020e 	bic.w	r2, r2, #14
 c002438:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c00243a:	687b      	ldr	r3, [r7, #4]
 c00243c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00243e:	f003 021c 	and.w	r2, r3, #28
 c002442:	687b      	ldr	r3, [r7, #4]
 c002444:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002446:	2101      	movs	r1, #1
 c002448:	fa01 f202 	lsl.w	r2, r1, r2
 c00244c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c00244e:	687b      	ldr	r3, [r7, #4]
 c002450:	2201      	movs	r2, #1
 c002452:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c002454:	687b      	ldr	r3, [r7, #4]
 c002456:	2201      	movs	r2, #1
 c002458:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c00245c:	687b      	ldr	r3, [r7, #4]
 c00245e:	2200      	movs	r2, #0
 c002460:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c002464:	687b      	ldr	r3, [r7, #4]
 c002466:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002468:	2b00      	cmp	r3, #0
 c00246a:	d008      	beq.n	c00247e <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c00246c:	687b      	ldr	r3, [r7, #4]
 c00246e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002470:	6878      	ldr	r0, [r7, #4]
 c002472:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c002474:	e002      	b.n	c00247c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002476:	bf00      	nop
 c002478:	e000      	b.n	c00247c <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c00247a:	bf00      	nop
  return;
 c00247c:	bf00      	nop
 c00247e:	bf00      	nop
}
 c002480:	3710      	adds	r7, #16
 c002482:	46bd      	mov	sp, r7
 c002484:	bd80      	pop	{r7, pc}
	...

0c002488 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 c002488:	b480      	push	{r7}
 c00248a:	b087      	sub	sp, #28
 c00248c:	af00      	add	r7, sp, #0
 c00248e:	60f8      	str	r0, [r7, #12]
 c002490:	460b      	mov	r3, r1
 c002492:	607a      	str	r2, [r7, #4]
 c002494:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 c002496:	2300      	movs	r3, #0
 c002498:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 c00249a:	68fb      	ldr	r3, [r7, #12]
 c00249c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c0024a0:	2b01      	cmp	r3, #1
 c0024a2:	d101      	bne.n	c0024a8 <HAL_DMA_RegisterCallback+0x20>
 c0024a4:	2302      	movs	r3, #2
 c0024a6:	e03d      	b.n	c002524 <HAL_DMA_RegisterCallback+0x9c>
 c0024a8:	68fb      	ldr	r3, [r7, #12]
 c0024aa:	2201      	movs	r2, #1
 c0024ac:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c0024b0:	68fb      	ldr	r3, [r7, #12]
 c0024b2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c0024b6:	b2db      	uxtb	r3, r3
 c0024b8:	2b01      	cmp	r3, #1
 c0024ba:	d12c      	bne.n	c002516 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 c0024bc:	7afb      	ldrb	r3, [r7, #11]
 c0024be:	2b05      	cmp	r3, #5
 c0024c0:	d826      	bhi.n	c002510 <HAL_DMA_RegisterCallback+0x88>
 c0024c2:	a201      	add	r2, pc, #4	; (adr r2, c0024c8 <HAL_DMA_RegisterCallback+0x40>)
 c0024c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0024c8:	0c0024e1 	.word	0x0c0024e1
 c0024cc:	0c0024e9 	.word	0x0c0024e9
 c0024d0:	0c0024f1 	.word	0x0c0024f1
 c0024d4:	0c0024f9 	.word	0x0c0024f9
 c0024d8:	0c002501 	.word	0x0c002501
 c0024dc:	0c002509 	.word	0x0c002509
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 c0024e0:	68fb      	ldr	r3, [r7, #12]
 c0024e2:	687a      	ldr	r2, [r7, #4]
 c0024e4:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 c0024e6:	e018      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 c0024e8:	68fb      	ldr	r3, [r7, #12]
 c0024ea:	687a      	ldr	r2, [r7, #4]
 c0024ec:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 c0024ee:	e014      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1CPLT_CB_ID:
           hdma->XferM1CpltCallback = pCallback;
 c0024f0:	68fb      	ldr	r3, [r7, #12]
 c0024f2:	687a      	ldr	r2, [r7, #4]
 c0024f4:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 c0024f6:	e010      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
           hdma->XferM1HalfCpltCallback = pCallback;
 c0024f8:	68fb      	ldr	r3, [r7, #12]
 c0024fa:	687a      	ldr	r2, [r7, #4]
 c0024fc:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 c0024fe:	e00c      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 c002500:	68fb      	ldr	r3, [r7, #12]
 c002502:	687a      	ldr	r2, [r7, #4]
 c002504:	63da      	str	r2, [r3, #60]	; 0x3c
           break;
 c002506:	e008      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 c002508:	68fb      	ldr	r3, [r7, #12]
 c00250a:	687a      	ldr	r2, [r7, #4]
 c00250c:	641a      	str	r2, [r3, #64]	; 0x40
           break;
 c00250e:	e004      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>

     default:
           status = HAL_ERROR;
 c002510:	2301      	movs	r3, #1
 c002512:	75fb      	strb	r3, [r7, #23]
           break;
 c002514:	e001      	b.n	c00251a <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    status = HAL_ERROR;
 c002516:	2301      	movs	r3, #1
 c002518:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 c00251a:	68fb      	ldr	r3, [r7, #12]
 c00251c:	2200      	movs	r2, #0
 c00251e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 c002522:	7dfb      	ldrb	r3, [r7, #23]
}
 c002524:	4618      	mov	r0, r3
 c002526:	371c      	adds	r7, #28
 c002528:	46bd      	mov	sp, r7
 c00252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00252e:	4770      	bx	lr

0c002530 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c002530:	b480      	push	{r7}
 c002532:	b087      	sub	sp, #28
 c002534:	af00      	add	r7, sp, #0
 c002536:	6078      	str	r0, [r7, #4]
 c002538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00253a:	2300      	movs	r3, #0
 c00253c:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c00253e:	687b      	ldr	r3, [r7, #4]
 c002540:	2b00      	cmp	r3, #0
 c002542:	d103      	bne.n	c00254c <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c002544:	2301      	movs	r3, #1
 c002546:	75fb      	strb	r3, [r7, #23]
    return status;
 c002548:	7dfb      	ldrb	r3, [r7, #23]
 c00254a:	e073      	b.n	c002634 <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c00254c:	687b      	ldr	r3, [r7, #4]
 c00254e:	681b      	ldr	r3, [r3, #0]
 c002550:	681b      	ldr	r3, [r3, #0]
 c002552:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c002554:	683b      	ldr	r3, [r7, #0]
 c002556:	f003 0310 	and.w	r3, r3, #16
 c00255a:	2b00      	cmp	r3, #0
 c00255c:	d00d      	beq.n	c00257a <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c00255e:	683b      	ldr	r3, [r7, #0]
 c002560:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002564:	2b00      	cmp	r3, #0
 c002566:	d004      	beq.n	c002572 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c002568:	693b      	ldr	r3, [r7, #16]
 c00256a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00256e:	613b      	str	r3, [r7, #16]
 c002570:	e003      	b.n	c00257a <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c002572:	693b      	ldr	r3, [r7, #16]
 c002574:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c002578:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c00257a:	687b      	ldr	r3, [r7, #4]
 c00257c:	681b      	ldr	r3, [r3, #0]
 c00257e:	681b      	ldr	r3, [r3, #0]
 c002580:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002584:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002588:	d103      	bne.n	c002592 <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c00258a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c00258e:	60fb      	str	r3, [r7, #12]
 c002590:	e001      	b.n	c002596 <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c002592:	2300      	movs	r3, #0
 c002594:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c002596:	683b      	ldr	r3, [r7, #0]
 c002598:	f003 0302 	and.w	r3, r3, #2
 c00259c:	2b00      	cmp	r3, #0
 c00259e:	d012      	beq.n	c0025c6 <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c0025a0:	683b      	ldr	r3, [r7, #0]
 c0025a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0025a6:	2b00      	cmp	r3, #0
 c0025a8:	d007      	beq.n	c0025ba <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c0025aa:	693b      	ldr	r3, [r7, #16]
 c0025ac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0025b0:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c0025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c0025b6:	60fb      	str	r3, [r7, #12]
 c0025b8:	e005      	b.n	c0025c6 <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c0025ba:	693b      	ldr	r3, [r7, #16]
 c0025bc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c0025c0:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c0025c2:	2300      	movs	r3, #0
 c0025c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c0025c6:	683b      	ldr	r3, [r7, #0]
 c0025c8:	f003 0304 	and.w	r3, r3, #4
 c0025cc:	2b00      	cmp	r3, #0
 c0025ce:	d013      	beq.n	c0025f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c0025d0:	683b      	ldr	r3, [r7, #0]
 c0025d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c0025d6:	2b00      	cmp	r3, #0
 c0025d8:	d00a      	beq.n	c0025f0 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c0025da:	68fb      	ldr	r3, [r7, #12]
 c0025dc:	2b00      	cmp	r3, #0
 c0025de:	d102      	bne.n	c0025e6 <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c0025e0:	2301      	movs	r3, #1
 c0025e2:	75fb      	strb	r3, [r7, #23]
 c0025e4:	e008      	b.n	c0025f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c0025e6:	693b      	ldr	r3, [r7, #16]
 c0025e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0025ec:	613b      	str	r3, [r7, #16]
 c0025ee:	e003      	b.n	c0025f8 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c0025f0:	693b      	ldr	r3, [r7, #16]
 c0025f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0025f6:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c0025f8:	683b      	ldr	r3, [r7, #0]
 c0025fa:	f003 0308 	and.w	r3, r3, #8
 c0025fe:	2b00      	cmp	r3, #0
 c002600:	d013      	beq.n	c00262a <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c002602:	683b      	ldr	r3, [r7, #0]
 c002604:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002608:	2b00      	cmp	r3, #0
 c00260a:	d00a      	beq.n	c002622 <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c00260c:	68fb      	ldr	r3, [r7, #12]
 c00260e:	2b00      	cmp	r3, #0
 c002610:	d102      	bne.n	c002618 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c002612:	2301      	movs	r3, #1
 c002614:	75fb      	strb	r3, [r7, #23]
 c002616:	e008      	b.n	c00262a <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c002618:	693b      	ldr	r3, [r7, #16]
 c00261a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c00261e:	613b      	str	r3, [r7, #16]
 c002620:	e003      	b.n	c00262a <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c002622:	693b      	ldr	r3, [r7, #16]
 c002624:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c002628:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c00262a:	687b      	ldr	r3, [r7, #4]
 c00262c:	681b      	ldr	r3, [r3, #0]
 c00262e:	693a      	ldr	r2, [r7, #16]
 c002630:	601a      	str	r2, [r3, #0]

  return status;
 c002632:	7dfb      	ldrb	r3, [r7, #23]
}
 c002634:	4618      	mov	r0, r3
 c002636:	371c      	adds	r7, #28
 c002638:	46bd      	mov	sp, r7
 c00263a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00263e:	4770      	bx	lr

0c002640 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002640:	b480      	push	{r7}
 c002642:	b085      	sub	sp, #20
 c002644:	af00      	add	r7, sp, #0
 c002646:	60f8      	str	r0, [r7, #12]
 c002648:	60b9      	str	r1, [r7, #8]
 c00264a:	607a      	str	r2, [r7, #4]
 c00264c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c00264e:	68fb      	ldr	r3, [r7, #12]
 c002650:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002652:	68fa      	ldr	r2, [r7, #12]
 c002654:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c002656:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c002658:	68fb      	ldr	r3, [r7, #12]
 c00265a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00265c:	2b00      	cmp	r3, #0
 c00265e:	d004      	beq.n	c00266a <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c002660:	68fb      	ldr	r3, [r7, #12]
 c002662:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002664:	68fa      	ldr	r2, [r7, #12]
 c002666:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c002668:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c00266a:	68fb      	ldr	r3, [r7, #12]
 c00266c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00266e:	f003 021c 	and.w	r2, r3, #28
 c002672:	68fb      	ldr	r3, [r7, #12]
 c002674:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002676:	2101      	movs	r1, #1
 c002678:	fa01 f202 	lsl.w	r2, r1, r2
 c00267c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c00267e:	68fb      	ldr	r3, [r7, #12]
 c002680:	681b      	ldr	r3, [r3, #0]
 c002682:	683a      	ldr	r2, [r7, #0]
 c002684:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c002686:	68fb      	ldr	r3, [r7, #12]
 c002688:	689b      	ldr	r3, [r3, #8]
 c00268a:	2b10      	cmp	r3, #16
 c00268c:	d108      	bne.n	c0026a0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c00268e:	68fb      	ldr	r3, [r7, #12]
 c002690:	681b      	ldr	r3, [r3, #0]
 c002692:	687a      	ldr	r2, [r7, #4]
 c002694:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c002696:	68fb      	ldr	r3, [r7, #12]
 c002698:	681b      	ldr	r3, [r3, #0]
 c00269a:	68ba      	ldr	r2, [r7, #8]
 c00269c:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c00269e:	e007      	b.n	c0026b0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c0026a0:	68fb      	ldr	r3, [r7, #12]
 c0026a2:	681b      	ldr	r3, [r3, #0]
 c0026a4:	68ba      	ldr	r2, [r7, #8]
 c0026a6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c0026a8:	68fb      	ldr	r3, [r7, #12]
 c0026aa:	681b      	ldr	r3, [r3, #0]
 c0026ac:	687a      	ldr	r2, [r7, #4]
 c0026ae:	60da      	str	r2, [r3, #12]
}
 c0026b0:	bf00      	nop
 c0026b2:	3714      	adds	r7, #20
 c0026b4:	46bd      	mov	sp, r7
 c0026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026ba:	4770      	bx	lr

0c0026bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c0026bc:	b480      	push	{r7}
 c0026be:	b085      	sub	sp, #20
 c0026c0:	af00      	add	r7, sp, #0
 c0026c2:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c0026c4:	687b      	ldr	r3, [r7, #4]
 c0026c6:	681b      	ldr	r3, [r3, #0]
 c0026c8:	461a      	mov	r2, r3
 c0026ca:	4b17      	ldr	r3, [pc, #92]	; (c002728 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c0026cc:	429a      	cmp	r2, r3
 c0026ce:	d80a      	bhi.n	c0026e6 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c0026d0:	687b      	ldr	r3, [r7, #4]
 c0026d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0026d4:	089b      	lsrs	r3, r3, #2
 c0026d6:	009b      	lsls	r3, r3, #2
 c0026d8:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c0026dc:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c0026e0:	687a      	ldr	r2, [r7, #4]
 c0026e2:	6513      	str	r3, [r2, #80]	; 0x50
 c0026e4:	e007      	b.n	c0026f6 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c0026e6:	687b      	ldr	r3, [r7, #4]
 c0026e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0026ea:	089b      	lsrs	r3, r3, #2
 c0026ec:	009a      	lsls	r2, r3, #2
 c0026ee:	4b0f      	ldr	r3, [pc, #60]	; (c00272c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c0026f0:	4413      	add	r3, r2
 c0026f2:	687a      	ldr	r2, [r7, #4]
 c0026f4:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c0026f6:	687b      	ldr	r3, [r7, #4]
 c0026f8:	681b      	ldr	r3, [r3, #0]
 c0026fa:	b2db      	uxtb	r3, r3
 c0026fc:	3b08      	subs	r3, #8
 c0026fe:	4a0c      	ldr	r2, [pc, #48]	; (c002730 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c002700:	fba2 2303 	umull	r2, r3, r2, r3
 c002704:	091b      	lsrs	r3, r3, #4
 c002706:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c002708:	687b      	ldr	r3, [r7, #4]
 c00270a:	4a0a      	ldr	r2, [pc, #40]	; (c002734 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c00270c:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c00270e:	68fb      	ldr	r3, [r7, #12]
 c002710:	f003 031f 	and.w	r3, r3, #31
 c002714:	2201      	movs	r2, #1
 c002716:	409a      	lsls	r2, r3
 c002718:	687b      	ldr	r3, [r7, #4]
 c00271a:	659a      	str	r2, [r3, #88]	; 0x58
}
 c00271c:	bf00      	nop
 c00271e:	3714      	adds	r7, #20
 c002720:	46bd      	mov	sp, r7
 c002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002726:	4770      	bx	lr
 c002728:	50020407 	.word	0x50020407
 c00272c:	50020820 	.word	0x50020820
 c002730:	cccccccd 	.word	0xcccccccd
 c002734:	50020880 	.word	0x50020880

0c002738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002738:	b480      	push	{r7}
 c00273a:	b085      	sub	sp, #20
 c00273c:	af00      	add	r7, sp, #0
 c00273e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c002740:	687b      	ldr	r3, [r7, #4]
 c002742:	685b      	ldr	r3, [r3, #4]
 c002744:	b2db      	uxtb	r3, r3
 c002746:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c002748:	68fa      	ldr	r2, [r7, #12]
 c00274a:	4b0b      	ldr	r3, [pc, #44]	; (c002778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c00274c:	4413      	add	r3, r2
 c00274e:	009b      	lsls	r3, r3, #2
 c002750:	461a      	mov	r2, r3
 c002752:	687b      	ldr	r3, [r7, #4]
 c002754:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c002756:	687b      	ldr	r3, [r7, #4]
 c002758:	4a08      	ldr	r2, [pc, #32]	; (c00277c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c00275a:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c00275c:	68fb      	ldr	r3, [r7, #12]
 c00275e:	3b01      	subs	r3, #1
 c002760:	f003 0303 	and.w	r3, r3, #3
 c002764:	2201      	movs	r2, #1
 c002766:	409a      	lsls	r2, r3
 c002768:	687b      	ldr	r3, [r7, #4]
 c00276a:	665a      	str	r2, [r3, #100]	; 0x64
}
 c00276c:	bf00      	nop
 c00276e:	3714      	adds	r7, #20
 c002770:	46bd      	mov	sp, r7
 c002772:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002776:	4770      	bx	lr
 c002778:	1400823f 	.word	0x1400823f
 c00277c:	50020940 	.word	0x50020940

0c002780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c002780:	b480      	push	{r7}
 c002782:	b087      	sub	sp, #28
 c002784:	af00      	add	r7, sp, #0
 c002786:	6078      	str	r0, [r7, #4]
 c002788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c00278a:	2300      	movs	r3, #0
 c00278c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00278e:	e158      	b.n	c002a42 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c002790:	683b      	ldr	r3, [r7, #0]
 c002792:	681a      	ldr	r2, [r3, #0]
 c002794:	2101      	movs	r1, #1
 c002796:	697b      	ldr	r3, [r7, #20]
 c002798:	fa01 f303 	lsl.w	r3, r1, r3
 c00279c:	4013      	ands	r3, r2
 c00279e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0027a0:	68fb      	ldr	r3, [r7, #12]
 c0027a2:	2b00      	cmp	r3, #0
 c0027a4:	f000 814a 	beq.w	c002a3c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c0027a8:	683b      	ldr	r3, [r7, #0]
 c0027aa:	685b      	ldr	r3, [r3, #4]
 c0027ac:	f003 0303 	and.w	r3, r3, #3
 c0027b0:	2b01      	cmp	r3, #1
 c0027b2:	d005      	beq.n	c0027c0 <HAL_GPIO_Init+0x40>
 c0027b4:	683b      	ldr	r3, [r7, #0]
 c0027b6:	685b      	ldr	r3, [r3, #4]
 c0027b8:	f003 0303 	and.w	r3, r3, #3
 c0027bc:	2b02      	cmp	r3, #2
 c0027be:	d130      	bne.n	c002822 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c0027c0:	687b      	ldr	r3, [r7, #4]
 c0027c2:	689b      	ldr	r3, [r3, #8]
 c0027c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c0027c6:	697b      	ldr	r3, [r7, #20]
 c0027c8:	005b      	lsls	r3, r3, #1
 c0027ca:	2203      	movs	r2, #3
 c0027cc:	fa02 f303 	lsl.w	r3, r2, r3
 c0027d0:	43db      	mvns	r3, r3
 c0027d2:	693a      	ldr	r2, [r7, #16]
 c0027d4:	4013      	ands	r3, r2
 c0027d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c0027d8:	683b      	ldr	r3, [r7, #0]
 c0027da:	68da      	ldr	r2, [r3, #12]
 c0027dc:	697b      	ldr	r3, [r7, #20]
 c0027de:	005b      	lsls	r3, r3, #1
 c0027e0:	fa02 f303 	lsl.w	r3, r2, r3
 c0027e4:	693a      	ldr	r2, [r7, #16]
 c0027e6:	4313      	orrs	r3, r2
 c0027e8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c0027ea:	687b      	ldr	r3, [r7, #4]
 c0027ec:	693a      	ldr	r2, [r7, #16]
 c0027ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c0027f0:	687b      	ldr	r3, [r7, #4]
 c0027f2:	685b      	ldr	r3, [r3, #4]
 c0027f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0027f6:	2201      	movs	r2, #1
 c0027f8:	697b      	ldr	r3, [r7, #20]
 c0027fa:	fa02 f303 	lsl.w	r3, r2, r3
 c0027fe:	43db      	mvns	r3, r3
 c002800:	693a      	ldr	r2, [r7, #16]
 c002802:	4013      	ands	r3, r2
 c002804:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c002806:	683b      	ldr	r3, [r7, #0]
 c002808:	685b      	ldr	r3, [r3, #4]
 c00280a:	091b      	lsrs	r3, r3, #4
 c00280c:	f003 0201 	and.w	r2, r3, #1
 c002810:	697b      	ldr	r3, [r7, #20]
 c002812:	fa02 f303 	lsl.w	r3, r2, r3
 c002816:	693a      	ldr	r2, [r7, #16]
 c002818:	4313      	orrs	r3, r2
 c00281a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c00281c:	687b      	ldr	r3, [r7, #4]
 c00281e:	693a      	ldr	r2, [r7, #16]
 c002820:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c002822:	683b      	ldr	r3, [r7, #0]
 c002824:	685b      	ldr	r3, [r3, #4]
 c002826:	f003 0303 	and.w	r3, r3, #3
 c00282a:	2b03      	cmp	r3, #3
 c00282c:	d017      	beq.n	c00285e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c00282e:	687b      	ldr	r3, [r7, #4]
 c002830:	68db      	ldr	r3, [r3, #12]
 c002832:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c002834:	697b      	ldr	r3, [r7, #20]
 c002836:	005b      	lsls	r3, r3, #1
 c002838:	2203      	movs	r2, #3
 c00283a:	fa02 f303 	lsl.w	r3, r2, r3
 c00283e:	43db      	mvns	r3, r3
 c002840:	693a      	ldr	r2, [r7, #16]
 c002842:	4013      	ands	r3, r2
 c002844:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c002846:	683b      	ldr	r3, [r7, #0]
 c002848:	689a      	ldr	r2, [r3, #8]
 c00284a:	697b      	ldr	r3, [r7, #20]
 c00284c:	005b      	lsls	r3, r3, #1
 c00284e:	fa02 f303 	lsl.w	r3, r2, r3
 c002852:	693a      	ldr	r2, [r7, #16]
 c002854:	4313      	orrs	r3, r2
 c002856:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c002858:	687b      	ldr	r3, [r7, #4]
 c00285a:	693a      	ldr	r2, [r7, #16]
 c00285c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c00285e:	683b      	ldr	r3, [r7, #0]
 c002860:	685b      	ldr	r3, [r3, #4]
 c002862:	f003 0303 	and.w	r3, r3, #3
 c002866:	2b02      	cmp	r3, #2
 c002868:	d123      	bne.n	c0028b2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c00286a:	697b      	ldr	r3, [r7, #20]
 c00286c:	08da      	lsrs	r2, r3, #3
 c00286e:	687b      	ldr	r3, [r7, #4]
 c002870:	3208      	adds	r2, #8
 c002872:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c002876:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c002878:	697b      	ldr	r3, [r7, #20]
 c00287a:	f003 0307 	and.w	r3, r3, #7
 c00287e:	009b      	lsls	r3, r3, #2
 c002880:	220f      	movs	r2, #15
 c002882:	fa02 f303 	lsl.w	r3, r2, r3
 c002886:	43db      	mvns	r3, r3
 c002888:	693a      	ldr	r2, [r7, #16]
 c00288a:	4013      	ands	r3, r2
 c00288c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c00288e:	683b      	ldr	r3, [r7, #0]
 c002890:	691a      	ldr	r2, [r3, #16]
 c002892:	697b      	ldr	r3, [r7, #20]
 c002894:	f003 0307 	and.w	r3, r3, #7
 c002898:	009b      	lsls	r3, r3, #2
 c00289a:	fa02 f303 	lsl.w	r3, r2, r3
 c00289e:	693a      	ldr	r2, [r7, #16]
 c0028a0:	4313      	orrs	r3, r2
 c0028a2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0028a4:	697b      	ldr	r3, [r7, #20]
 c0028a6:	08da      	lsrs	r2, r3, #3
 c0028a8:	687b      	ldr	r3, [r7, #4]
 c0028aa:	3208      	adds	r2, #8
 c0028ac:	6939      	ldr	r1, [r7, #16]
 c0028ae:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c0028b2:	687b      	ldr	r3, [r7, #4]
 c0028b4:	681b      	ldr	r3, [r3, #0]
 c0028b6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c0028b8:	697b      	ldr	r3, [r7, #20]
 c0028ba:	005b      	lsls	r3, r3, #1
 c0028bc:	2203      	movs	r2, #3
 c0028be:	fa02 f303 	lsl.w	r3, r2, r3
 c0028c2:	43db      	mvns	r3, r3
 c0028c4:	693a      	ldr	r2, [r7, #16]
 c0028c6:	4013      	ands	r3, r2
 c0028c8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c0028ca:	683b      	ldr	r3, [r7, #0]
 c0028cc:	685b      	ldr	r3, [r3, #4]
 c0028ce:	f003 0203 	and.w	r2, r3, #3
 c0028d2:	697b      	ldr	r3, [r7, #20]
 c0028d4:	005b      	lsls	r3, r3, #1
 c0028d6:	fa02 f303 	lsl.w	r3, r2, r3
 c0028da:	693a      	ldr	r2, [r7, #16]
 c0028dc:	4313      	orrs	r3, r2
 c0028de:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c0028e0:	687b      	ldr	r3, [r7, #4]
 c0028e2:	693a      	ldr	r2, [r7, #16]
 c0028e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c0028e6:	683b      	ldr	r3, [r7, #0]
 c0028e8:	685b      	ldr	r3, [r3, #4]
 c0028ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c0028ee:	2b00      	cmp	r3, #0
 c0028f0:	f000 80a4 	beq.w	c002a3c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c0028f4:	4a5a      	ldr	r2, [pc, #360]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c0028f6:	697b      	ldr	r3, [r7, #20]
 c0028f8:	089b      	lsrs	r3, r3, #2
 c0028fa:	3318      	adds	r3, #24
 c0028fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002900:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c002902:	697b      	ldr	r3, [r7, #20]
 c002904:	f003 0303 	and.w	r3, r3, #3
 c002908:	00db      	lsls	r3, r3, #3
 c00290a:	220f      	movs	r2, #15
 c00290c:	fa02 f303 	lsl.w	r3, r2, r3
 c002910:	43db      	mvns	r3, r3
 c002912:	693a      	ldr	r2, [r7, #16]
 c002914:	4013      	ands	r3, r2
 c002916:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c002918:	687b      	ldr	r3, [r7, #4]
 c00291a:	4a52      	ldr	r2, [pc, #328]	; (c002a64 <HAL_GPIO_Init+0x2e4>)
 c00291c:	4293      	cmp	r3, r2
 c00291e:	d025      	beq.n	c00296c <HAL_GPIO_Init+0x1ec>
 c002920:	687b      	ldr	r3, [r7, #4]
 c002922:	4a51      	ldr	r2, [pc, #324]	; (c002a68 <HAL_GPIO_Init+0x2e8>)
 c002924:	4293      	cmp	r3, r2
 c002926:	d01f      	beq.n	c002968 <HAL_GPIO_Init+0x1e8>
 c002928:	687b      	ldr	r3, [r7, #4]
 c00292a:	4a50      	ldr	r2, [pc, #320]	; (c002a6c <HAL_GPIO_Init+0x2ec>)
 c00292c:	4293      	cmp	r3, r2
 c00292e:	d019      	beq.n	c002964 <HAL_GPIO_Init+0x1e4>
 c002930:	687b      	ldr	r3, [r7, #4]
 c002932:	4a4f      	ldr	r2, [pc, #316]	; (c002a70 <HAL_GPIO_Init+0x2f0>)
 c002934:	4293      	cmp	r3, r2
 c002936:	d013      	beq.n	c002960 <HAL_GPIO_Init+0x1e0>
 c002938:	687b      	ldr	r3, [r7, #4]
 c00293a:	4a4e      	ldr	r2, [pc, #312]	; (c002a74 <HAL_GPIO_Init+0x2f4>)
 c00293c:	4293      	cmp	r3, r2
 c00293e:	d00d      	beq.n	c00295c <HAL_GPIO_Init+0x1dc>
 c002940:	687b      	ldr	r3, [r7, #4]
 c002942:	4a4d      	ldr	r2, [pc, #308]	; (c002a78 <HAL_GPIO_Init+0x2f8>)
 c002944:	4293      	cmp	r3, r2
 c002946:	d007      	beq.n	c002958 <HAL_GPIO_Init+0x1d8>
 c002948:	687b      	ldr	r3, [r7, #4]
 c00294a:	4a4c      	ldr	r2, [pc, #304]	; (c002a7c <HAL_GPIO_Init+0x2fc>)
 c00294c:	4293      	cmp	r3, r2
 c00294e:	d101      	bne.n	c002954 <HAL_GPIO_Init+0x1d4>
 c002950:	2306      	movs	r3, #6
 c002952:	e00c      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c002954:	2307      	movs	r3, #7
 c002956:	e00a      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c002958:	2305      	movs	r3, #5
 c00295a:	e008      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c00295c:	2304      	movs	r3, #4
 c00295e:	e006      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c002960:	2303      	movs	r3, #3
 c002962:	e004      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c002964:	2302      	movs	r3, #2
 c002966:	e002      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c002968:	2301      	movs	r3, #1
 c00296a:	e000      	b.n	c00296e <HAL_GPIO_Init+0x1ee>
 c00296c:	2300      	movs	r3, #0
 c00296e:	697a      	ldr	r2, [r7, #20]
 c002970:	f002 0203 	and.w	r2, r2, #3
 c002974:	00d2      	lsls	r2, r2, #3
 c002976:	4093      	lsls	r3, r2
 c002978:	693a      	ldr	r2, [r7, #16]
 c00297a:	4313      	orrs	r3, r2
 c00297c:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c00297e:	4938      	ldr	r1, [pc, #224]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c002980:	697b      	ldr	r3, [r7, #20]
 c002982:	089b      	lsrs	r3, r3, #2
 c002984:	3318      	adds	r3, #24
 c002986:	693a      	ldr	r2, [r7, #16]
 c002988:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c00298c:	4b34      	ldr	r3, [pc, #208]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c00298e:	681b      	ldr	r3, [r3, #0]
 c002990:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002992:	68fb      	ldr	r3, [r7, #12]
 c002994:	43db      	mvns	r3, r3
 c002996:	693a      	ldr	r2, [r7, #16]
 c002998:	4013      	ands	r3, r2
 c00299a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c00299c:	683b      	ldr	r3, [r7, #0]
 c00299e:	685b      	ldr	r3, [r3, #4]
 c0029a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0029a4:	2b00      	cmp	r3, #0
 c0029a6:	d003      	beq.n	c0029b0 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c0029a8:	693a      	ldr	r2, [r7, #16]
 c0029aa:	68fb      	ldr	r3, [r7, #12]
 c0029ac:	4313      	orrs	r3, r2
 c0029ae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0029b0:	4a2b      	ldr	r2, [pc, #172]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c0029b2:	693b      	ldr	r3, [r7, #16]
 c0029b4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0029b6:	4b2a      	ldr	r3, [pc, #168]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c0029b8:	685b      	ldr	r3, [r3, #4]
 c0029ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0029bc:	68fb      	ldr	r3, [r7, #12]
 c0029be:	43db      	mvns	r3, r3
 c0029c0:	693a      	ldr	r2, [r7, #16]
 c0029c2:	4013      	ands	r3, r2
 c0029c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c0029c6:	683b      	ldr	r3, [r7, #0]
 c0029c8:	685b      	ldr	r3, [r3, #4]
 c0029ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0029ce:	2b00      	cmp	r3, #0
 c0029d0:	d003      	beq.n	c0029da <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c0029d2:	693a      	ldr	r2, [r7, #16]
 c0029d4:	68fb      	ldr	r3, [r7, #12]
 c0029d6:	4313      	orrs	r3, r2
 c0029d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0029da:	4a21      	ldr	r2, [pc, #132]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c0029dc:	693b      	ldr	r3, [r7, #16]
 c0029de:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c0029e0:	4b1f      	ldr	r3, [pc, #124]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c0029e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0029e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0029e8:	68fb      	ldr	r3, [r7, #12]
 c0029ea:	43db      	mvns	r3, r3
 c0029ec:	693a      	ldr	r2, [r7, #16]
 c0029ee:	4013      	ands	r3, r2
 c0029f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c0029f2:	683b      	ldr	r3, [r7, #0]
 c0029f4:	685b      	ldr	r3, [r3, #4]
 c0029f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0029fa:	2b00      	cmp	r3, #0
 c0029fc:	d003      	beq.n	c002a06 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c0029fe:	693a      	ldr	r2, [r7, #16]
 c002a00:	68fb      	ldr	r3, [r7, #12]
 c002a02:	4313      	orrs	r3, r2
 c002a04:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c002a06:	4a16      	ldr	r2, [pc, #88]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c002a08:	693b      	ldr	r3, [r7, #16]
 c002a0a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c002a0e:	4b14      	ldr	r3, [pc, #80]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c002a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002a14:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002a16:	68fb      	ldr	r3, [r7, #12]
 c002a18:	43db      	mvns	r3, r3
 c002a1a:	693a      	ldr	r2, [r7, #16]
 c002a1c:	4013      	ands	r3, r2
 c002a1e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c002a20:	683b      	ldr	r3, [r7, #0]
 c002a22:	685b      	ldr	r3, [r3, #4]
 c002a24:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002a28:	2b00      	cmp	r3, #0
 c002a2a:	d003      	beq.n	c002a34 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c002a2c:	693a      	ldr	r2, [r7, #16]
 c002a2e:	68fb      	ldr	r3, [r7, #12]
 c002a30:	4313      	orrs	r3, r2
 c002a32:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c002a34:	4a0a      	ldr	r2, [pc, #40]	; (c002a60 <HAL_GPIO_Init+0x2e0>)
 c002a36:	693b      	ldr	r3, [r7, #16]
 c002a38:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c002a3c:	697b      	ldr	r3, [r7, #20]
 c002a3e:	3301      	adds	r3, #1
 c002a40:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002a42:	683b      	ldr	r3, [r7, #0]
 c002a44:	681a      	ldr	r2, [r3, #0]
 c002a46:	697b      	ldr	r3, [r7, #20]
 c002a48:	fa22 f303 	lsr.w	r3, r2, r3
 c002a4c:	2b00      	cmp	r3, #0
 c002a4e:	f47f ae9f 	bne.w	c002790 <HAL_GPIO_Init+0x10>
  }
}
 c002a52:	bf00      	nop
 c002a54:	bf00      	nop
 c002a56:	371c      	adds	r7, #28
 c002a58:	46bd      	mov	sp, r7
 c002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a5e:	4770      	bx	lr
 c002a60:	5002f400 	.word	0x5002f400
 c002a64:	52020000 	.word	0x52020000
 c002a68:	52020400 	.word	0x52020400
 c002a6c:	52020800 	.word	0x52020800
 c002a70:	52020c00 	.word	0x52020c00
 c002a74:	52021000 	.word	0x52021000
 c002a78:	52021400 	.word	0x52021400
 c002a7c:	52021800 	.word	0x52021800

0c002a80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c002a80:	b480      	push	{r7}
 c002a82:	b083      	sub	sp, #12
 c002a84:	af00      	add	r7, sp, #0
 c002a86:	6078      	str	r0, [r7, #4]
 c002a88:	460b      	mov	r3, r1
 c002a8a:	807b      	strh	r3, [r7, #2]
 c002a8c:	4613      	mov	r3, r2
 c002a8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c002a90:	787b      	ldrb	r3, [r7, #1]
 c002a92:	2b00      	cmp	r3, #0
 c002a94:	d003      	beq.n	c002a9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002a96:	887a      	ldrh	r2, [r7, #2]
 c002a98:	687b      	ldr	r3, [r7, #4]
 c002a9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c002a9c:	e002      	b.n	c002aa4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c002a9e:	887a      	ldrh	r2, [r7, #2]
 c002aa0:	687b      	ldr	r3, [r7, #4]
 c002aa2:	629a      	str	r2, [r3, #40]	; 0x28
}
 c002aa4:	bf00      	nop
 c002aa6:	370c      	adds	r7, #12
 c002aa8:	46bd      	mov	sp, r7
 c002aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002aae:	4770      	bx	lr

0c002ab0 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c002ab0:	b480      	push	{r7}
 c002ab2:	b089      	sub	sp, #36	; 0x24
 c002ab4:	af00      	add	r7, sp, #0
 c002ab6:	60f8      	str	r0, [r7, #12]
 c002ab8:	460b      	mov	r3, r1
 c002aba:	607a      	str	r2, [r7, #4]
 c002abc:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c002abe:	2300      	movs	r3, #0
 c002ac0:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c002ac2:	68fb      	ldr	r3, [r7, #12]
 c002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002ac6:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c002ac8:	e01b      	b.n	c002b02 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c002aca:	897a      	ldrh	r2, [r7, #10]
 c002acc:	2101      	movs	r1, #1
 c002ace:	69fb      	ldr	r3, [r7, #28]
 c002ad0:	fa01 f303 	lsl.w	r3, r1, r3
 c002ad4:	4013      	ands	r3, r2
 c002ad6:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c002ad8:	697b      	ldr	r3, [r7, #20]
 c002ada:	2b00      	cmp	r3, #0
 c002adc:	d00e      	beq.n	c002afc <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c002ade:	2201      	movs	r2, #1
 c002ae0:	69fb      	ldr	r3, [r7, #28]
 c002ae2:	fa02 f303 	lsl.w	r3, r2, r3
 c002ae6:	43db      	mvns	r3, r3
 c002ae8:	69ba      	ldr	r2, [r7, #24]
 c002aea:	4013      	ands	r3, r2
 c002aec:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c002aee:	687a      	ldr	r2, [r7, #4]
 c002af0:	69fb      	ldr	r3, [r7, #28]
 c002af2:	fa02 f303 	lsl.w	r3, r2, r3
 c002af6:	69ba      	ldr	r2, [r7, #24]
 c002af8:	4313      	orrs	r3, r2
 c002afa:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c002afc:	69fb      	ldr	r3, [r7, #28]
 c002afe:	3301      	adds	r3, #1
 c002b00:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c002b02:	897a      	ldrh	r2, [r7, #10]
 c002b04:	69fb      	ldr	r3, [r7, #28]
 c002b06:	fa42 f303 	asr.w	r3, r2, r3
 c002b0a:	2b00      	cmp	r3, #0
 c002b0c:	d1dd      	bne.n	c002aca <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c002b0e:	68fb      	ldr	r3, [r7, #12]
 c002b10:	69ba      	ldr	r2, [r7, #24]
 c002b12:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002b14:	bf00      	nop
 c002b16:	3724      	adds	r7, #36	; 0x24
 c002b18:	46bd      	mov	sp, r7
 c002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b1e:	4770      	bx	lr

0c002b20 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c002b20:	b480      	push	{r7}
 c002b22:	b085      	sub	sp, #20
 c002b24:	af00      	add	r7, sp, #0
 c002b26:	6078      	str	r0, [r7, #4]
 c002b28:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002b2a:	683b      	ldr	r3, [r7, #0]
 c002b2c:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c002b30:	d216      	bcs.n	c002b60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002b32:	687b      	ldr	r3, [r7, #4]
 c002b34:	0f1b      	lsrs	r3, r3, #28
 c002b36:	015a      	lsls	r2, r3, #5
 c002b38:	687b      	ldr	r3, [r7, #4]
 c002b3a:	f003 031f 	and.w	r3, r3, #31
 c002b3e:	4413      	add	r3, r2
 c002b40:	2b32      	cmp	r3, #50	; 0x32
 c002b42:	d80d      	bhi.n	c002b60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002b44:	687b      	ldr	r3, [r7, #4]
 c002b46:	f003 0320 	and.w	r3, r3, #32
 c002b4a:	2b00      	cmp	r3, #0
 c002b4c:	d00a      	beq.n	c002b64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c002b4e:	687b      	ldr	r3, [r7, #4]
 c002b50:	0f1b      	lsrs	r3, r3, #28
 c002b52:	015a      	lsls	r2, r3, #5
 c002b54:	687b      	ldr	r3, [r7, #4]
 c002b56:	f003 031f 	and.w	r3, r3, #31
 c002b5a:	4413      	add	r3, r2
 c002b5c:	2b00      	cmp	r3, #0
 c002b5e:	d001      	beq.n	c002b64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c002b60:	2301      	movs	r3, #1
 c002b62:	e0a8      	b.n	c002cb6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002b64:	687b      	ldr	r3, [r7, #4]
 c002b66:	f003 0320 	and.w	r3, r3, #32
 c002b6a:	2b00      	cmp	r3, #0
 c002b6c:	d04e      	beq.n	c002c0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002b6e:	683a      	ldr	r2, [r7, #0]
 c002b70:	f240 1301 	movw	r3, #257	; 0x101
 c002b74:	4013      	ands	r3, r2
 c002b76:	f240 1201 	movw	r2, #257	; 0x101
 c002b7a:	4293      	cmp	r3, r2
 c002b7c:	d10e      	bne.n	c002b9c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002b7e:	4b51      	ldr	r3, [pc, #324]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002b80:	691b      	ldr	r3, [r3, #16]
 c002b82:	4b50      	ldr	r3, [pc, #320]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002b84:	f04f 32ff 	mov.w	r2, #4294967295
 c002b88:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002b8a:	4b4e      	ldr	r3, [pc, #312]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002b8c:	695b      	ldr	r3, [r3, #20]
 c002b8e:	4a4d      	ldr	r2, [pc, #308]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002b90:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002b94:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c002b98:	6153      	str	r3, [r2, #20]
 c002b9a:	e00f      	b.n	c002bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002b9c:	683b      	ldr	r3, [r7, #0]
 c002b9e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002ba2:	2b00      	cmp	r3, #0
 c002ba4:	d00a      	beq.n	c002bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002ba6:	4b47      	ldr	r3, [pc, #284]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002ba8:	691b      	ldr	r3, [r3, #16]
 c002baa:	4b46      	ldr	r3, [pc, #280]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bac:	2200      	movs	r2, #0
 c002bae:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002bb0:	4b44      	ldr	r3, [pc, #272]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bb2:	695b      	ldr	r3, [r3, #20]
 c002bb4:	4a43      	ldr	r2, [pc, #268]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bb6:	0cdb      	lsrs	r3, r3, #19
 c002bb8:	04db      	lsls	r3, r3, #19
 c002bba:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002bbc:	683a      	ldr	r2, [r7, #0]
 c002bbe:	f240 2302 	movw	r3, #514	; 0x202
 c002bc2:	4013      	ands	r3, r2
 c002bc4:	f240 2202 	movw	r2, #514	; 0x202
 c002bc8:	4293      	cmp	r3, r2
 c002bca:	d10e      	bne.n	c002bea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002bcc:	4b3d      	ldr	r3, [pc, #244]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bce:	6a1b      	ldr	r3, [r3, #32]
 c002bd0:	4b3c      	ldr	r3, [pc, #240]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bd2:	f04f 32ff 	mov.w	r2, #4294967295
 c002bd6:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002bd8:	4b3a      	ldr	r3, [pc, #232]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002bdc:	4a39      	ldr	r2, [pc, #228]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bde:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002be2:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c002be6:	6253      	str	r3, [r2, #36]	; 0x24
 c002be8:	e064      	b.n	c002cb4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002bea:	683b      	ldr	r3, [r7, #0]
 c002bec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002bf0:	2b00      	cmp	r3, #0
 c002bf2:	d05f      	beq.n	c002cb4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002bf4:	4b33      	ldr	r3, [pc, #204]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bf6:	6a1b      	ldr	r3, [r3, #32]
 c002bf8:	4b32      	ldr	r3, [pc, #200]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bfa:	2200      	movs	r2, #0
 c002bfc:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002bfe:	4b31      	ldr	r3, [pc, #196]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002c02:	4a30      	ldr	r2, [pc, #192]	; (c002cc4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c04:	0cdb      	lsrs	r3, r3, #19
 c002c06:	04db      	lsls	r3, r3, #19
 c002c08:	6253      	str	r3, [r2, #36]	; 0x24
 c002c0a:	e053      	b.n	c002cb4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002c0c:	687b      	ldr	r3, [r7, #4]
 c002c0e:	0f1a      	lsrs	r2, r3, #28
 c002c10:	4b2d      	ldr	r3, [pc, #180]	; (c002cc8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c002c12:	4413      	add	r3, r2
 c002c14:	009b      	lsls	r3, r3, #2
 c002c16:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002c18:	683a      	ldr	r2, [r7, #0]
 c002c1a:	f240 1301 	movw	r3, #257	; 0x101
 c002c1e:	4013      	ands	r3, r2
 c002c20:	f240 1201 	movw	r2, #257	; 0x101
 c002c24:	4293      	cmp	r3, r2
 c002c26:	d10a      	bne.n	c002c3e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002c28:	68fb      	ldr	r3, [r7, #12]
 c002c2a:	6819      	ldr	r1, [r3, #0]
 c002c2c:	687b      	ldr	r3, [r7, #4]
 c002c2e:	f003 031f 	and.w	r3, r3, #31
 c002c32:	2201      	movs	r2, #1
 c002c34:	409a      	lsls	r2, r3
 c002c36:	68fb      	ldr	r3, [r7, #12]
 c002c38:	430a      	orrs	r2, r1
 c002c3a:	601a      	str	r2, [r3, #0]
 c002c3c:	e010      	b.n	c002c60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002c3e:	683b      	ldr	r3, [r7, #0]
 c002c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002c44:	2b00      	cmp	r3, #0
 c002c46:	d00b      	beq.n	c002c60 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002c48:	68fb      	ldr	r3, [r7, #12]
 c002c4a:	6819      	ldr	r1, [r3, #0]
 c002c4c:	687b      	ldr	r3, [r7, #4]
 c002c4e:	f003 031f 	and.w	r3, r3, #31
 c002c52:	2201      	movs	r2, #1
 c002c54:	fa02 f303 	lsl.w	r3, r2, r3
 c002c58:	43da      	mvns	r2, r3
 c002c5a:	68fb      	ldr	r3, [r7, #12]
 c002c5c:	400a      	ands	r2, r1
 c002c5e:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002c60:	687b      	ldr	r3, [r7, #4]
 c002c62:	0f1a      	lsrs	r2, r3, #28
 c002c64:	4b19      	ldr	r3, [pc, #100]	; (c002ccc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c002c66:	4413      	add	r3, r2
 c002c68:	009b      	lsls	r3, r3, #2
 c002c6a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002c6c:	683a      	ldr	r2, [r7, #0]
 c002c6e:	f240 2302 	movw	r3, #514	; 0x202
 c002c72:	4013      	ands	r3, r2
 c002c74:	f240 2202 	movw	r2, #514	; 0x202
 c002c78:	4293      	cmp	r3, r2
 c002c7a:	d10a      	bne.n	c002c92 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002c7c:	68fb      	ldr	r3, [r7, #12]
 c002c7e:	6819      	ldr	r1, [r3, #0]
 c002c80:	687b      	ldr	r3, [r7, #4]
 c002c82:	f003 031f 	and.w	r3, r3, #31
 c002c86:	2201      	movs	r2, #1
 c002c88:	409a      	lsls	r2, r3
 c002c8a:	68fb      	ldr	r3, [r7, #12]
 c002c8c:	430a      	orrs	r2, r1
 c002c8e:	601a      	str	r2, [r3, #0]
 c002c90:	e010      	b.n	c002cb4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002c92:	683b      	ldr	r3, [r7, #0]
 c002c94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002c98:	2b00      	cmp	r3, #0
 c002c9a:	d00b      	beq.n	c002cb4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002c9c:	68fb      	ldr	r3, [r7, #12]
 c002c9e:	6819      	ldr	r1, [r3, #0]
 c002ca0:	687b      	ldr	r3, [r7, #4]
 c002ca2:	f003 031f 	and.w	r3, r3, #31
 c002ca6:	2201      	movs	r2, #1
 c002ca8:	fa02 f303 	lsl.w	r3, r2, r3
 c002cac:	43da      	mvns	r2, r3
 c002cae:	68fb      	ldr	r3, [r7, #12]
 c002cb0:	400a      	ands	r2, r1
 c002cb2:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c002cb4:	2300      	movs	r3, #0
}
 c002cb6:	4618      	mov	r0, r3
 c002cb8:	3714      	adds	r7, #20
 c002cba:	46bd      	mov	sp, r7
 c002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002cc0:	4770      	bx	lr
 c002cc2:	bf00      	nop
 c002cc4:	50032400 	.word	0x50032400
 c002cc8:	1400c904 	.word	0x1400c904
 c002ccc:	1400c908 	.word	0x1400c908

0c002cd0 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002cd0:	b480      	push	{r7}
 c002cd2:	b089      	sub	sp, #36	; 0x24
 c002cd4:	af00      	add	r7, sp, #0
 c002cd6:	6078      	str	r0, [r7, #4]
 c002cd8:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002cda:	687b      	ldr	r3, [r7, #4]
 c002cdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002ce0:	d00b      	beq.n	c002cfa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002ce2:	687b      	ldr	r3, [r7, #4]
 c002ce4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002ce8:	d007      	beq.n	c002cfa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c002cea:	687b      	ldr	r3, [r7, #4]
 c002cec:	4a36      	ldr	r2, [pc, #216]	; (c002dc8 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c002cee:	4293      	cmp	r3, r2
 c002cf0:	d003      	beq.n	c002cfa <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002cf2:	687b      	ldr	r3, [r7, #4]
 c002cf4:	4a35      	ldr	r2, [pc, #212]	; (c002dcc <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c002cf6:	4293      	cmp	r3, r2
 c002cf8:	d111      	bne.n	c002d1e <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002cfa:	683b      	ldr	r3, [r7, #0]
 c002cfc:	681b      	ldr	r3, [r3, #0]
 c002cfe:	2b00      	cmp	r3, #0
 c002d00:	d004      	beq.n	c002d0c <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002d02:	683b      	ldr	r3, [r7, #0]
 c002d04:	681b      	ldr	r3, [r3, #0]
 c002d06:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c002d0a:	d108      	bne.n	c002d1e <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002d0c:	683b      	ldr	r3, [r7, #0]
 c002d0e:	685b      	ldr	r3, [r3, #4]
 c002d10:	2b00      	cmp	r3, #0
 c002d12:	d006      	beq.n	c002d22 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002d14:	683b      	ldr	r3, [r7, #0]
 c002d16:	685b      	ldr	r3, [r3, #4]
 c002d18:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002d1c:	d001      	beq.n	c002d22 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c002d1e:	2301      	movs	r3, #1
 c002d20:	e04b      	b.n	c002dba <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002d22:	683b      	ldr	r3, [r7, #0]
 c002d24:	685b      	ldr	r3, [r3, #4]
 c002d26:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002d28:	683b      	ldr	r3, [r7, #0]
 c002d2a:	681b      	ldr	r3, [r3, #0]
 c002d2c:	693a      	ldr	r2, [r7, #16]
 c002d2e:	4313      	orrs	r3, r2
 c002d30:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002d32:	687b      	ldr	r3, [r7, #4]
 c002d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002d38:	d003      	beq.n	c002d42 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c002d3a:	687b      	ldr	r3, [r7, #4]
 c002d3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002d40:	d105      	bne.n	c002d4e <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002d42:	4b23      	ldr	r3, [pc, #140]	; (c002dd0 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002d44:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002d46:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c002d4a:	61bb      	str	r3, [r7, #24]
 c002d4c:	e004      	b.n	c002d58 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c002d4e:	4b21      	ldr	r3, [pc, #132]	; (c002dd4 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c002d50:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c002d52:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c002d56:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c002d58:	69bb      	ldr	r3, [r7, #24]
 c002d5a:	0b5b      	lsrs	r3, r3, #13
 c002d5c:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c002d5e:	2300      	movs	r3, #0
 c002d60:	617b      	str	r3, [r7, #20]
 c002d62:	e00c      	b.n	c002d7e <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c002d64:	683b      	ldr	r3, [r7, #0]
 c002d66:	697a      	ldr	r2, [r7, #20]
 c002d68:	3202      	adds	r2, #2
 c002d6a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002d6e:	69fb      	ldr	r3, [r7, #28]
 c002d70:	697a      	ldr	r2, [r7, #20]
 c002d72:	3240      	adds	r2, #64	; 0x40
 c002d74:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002d78:	697b      	ldr	r3, [r7, #20]
 c002d7a:	3301      	adds	r3, #1
 c002d7c:	617b      	str	r3, [r7, #20]
 c002d7e:	697a      	ldr	r2, [r7, #20]
 c002d80:	68fb      	ldr	r3, [r7, #12]
 c002d82:	429a      	cmp	r2, r3
 c002d84:	d3ee      	bcc.n	c002d64 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c002d86:	69fb      	ldr	r3, [r7, #28]
 c002d88:	681b      	ldr	r3, [r3, #0]
 c002d8a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c002d8e:	693b      	ldr	r3, [r7, #16]
 c002d90:	431a      	orrs	r2, r3
 c002d92:	69fb      	ldr	r3, [r7, #28]
 c002d94:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c002d96:	69bb      	ldr	r3, [r7, #24]
 c002d98:	0b5b      	lsrs	r3, r3, #13
 c002d9a:	2201      	movs	r2, #1
 c002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 c002da0:	3b01      	subs	r3, #1
 c002da2:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002da4:	69fb      	ldr	r3, [r7, #28]
 c002da6:	691a      	ldr	r2, [r3, #16]
 c002da8:	68bb      	ldr	r3, [r7, #8]
 c002daa:	43db      	mvns	r3, r3
 c002dac:	401a      	ands	r2, r3
 c002dae:	683b      	ldr	r3, [r7, #0]
 c002db0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002db2:	431a      	orrs	r2, r3
 c002db4:	69fb      	ldr	r3, [r7, #28]
 c002db6:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c002db8:	2300      	movs	r3, #0
}
 c002dba:	4618      	mov	r0, r3
 c002dbc:	3724      	adds	r7, #36	; 0x24
 c002dbe:	46bd      	mov	sp, r7
 c002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002dc4:	4770      	bx	lr
 c002dc6:	bf00      	nop
 c002dc8:	20030000 	.word	0x20030000
 c002dcc:	30030000 	.word	0x30030000
 c002dd0:	50032c00 	.word	0x50032c00
 c002dd4:	50033000 	.word	0x50033000

0c002dd8 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c002dd8:	b480      	push	{r7}
 c002dda:	b085      	sub	sp, #20
 c002ddc:	af00      	add	r7, sp, #0
 c002dde:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002de0:	2300      	movs	r3, #0
 c002de2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c002de4:	4b0b      	ldr	r3, [pc, #44]	; (c002e14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002de6:	681b      	ldr	r3, [r3, #0]
 c002de8:	f003 0301 	and.w	r3, r3, #1
 c002dec:	2b00      	cmp	r3, #0
 c002dee:	d002      	beq.n	c002df6 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c002df0:	2301      	movs	r3, #1
 c002df2:	73fb      	strb	r3, [r7, #15]
 c002df4:	e007      	b.n	c002e06 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c002df6:	4b07      	ldr	r3, [pc, #28]	; (c002e14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002df8:	681b      	ldr	r3, [r3, #0]
 c002dfa:	f023 0204 	bic.w	r2, r3, #4
 c002dfe:	4905      	ldr	r1, [pc, #20]	; (c002e14 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002e00:	687b      	ldr	r3, [r7, #4]
 c002e02:	4313      	orrs	r3, r2
 c002e04:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002e06:	7bfb      	ldrb	r3, [r7, #15]
}
 c002e08:	4618      	mov	r0, r3
 c002e0a:	3714      	adds	r7, #20
 c002e0c:	46bd      	mov	sp, r7
 c002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e12:	4770      	bx	lr
 c002e14:	50030400 	.word	0x50030400

0c002e18 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002e18:	b480      	push	{r7}
 c002e1a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002e1c:	4b05      	ldr	r3, [pc, #20]	; (c002e34 <HAL_ICACHE_Enable+0x1c>)
 c002e1e:	681b      	ldr	r3, [r3, #0]
 c002e20:	4a04      	ldr	r2, [pc, #16]	; (c002e34 <HAL_ICACHE_Enable+0x1c>)
 c002e22:	f043 0301 	orr.w	r3, r3, #1
 c002e26:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002e28:	2300      	movs	r3, #0
}
 c002e2a:	4618      	mov	r0, r3
 c002e2c:	46bd      	mov	sp, r7
 c002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e32:	4770      	bx	lr
 c002e34:	50030400 	.word	0x50030400

0c002e38 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 c002e38:	b580      	push	{r7, lr}
 c002e3a:	b084      	sub	sp, #16
 c002e3c:	af00      	add	r7, sp, #0
 c002e3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 c002e40:	687b      	ldr	r3, [r7, #4]
 c002e42:	2b00      	cmp	r3, #0
 c002e44:	d101      	bne.n	c002e4a <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 c002e46:	2301      	movs	r3, #1
 c002e48:	e041      	b.n	c002ece <HAL_IWDG_Init+0x96>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 c002e4a:	687b      	ldr	r3, [r7, #4]
 c002e4c:	681b      	ldr	r3, [r3, #0]
 c002e4e:	f64c 42cc 	movw	r2, #52428	; 0xcccc
 c002e52:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 c002e54:	687b      	ldr	r3, [r7, #4]
 c002e56:	681b      	ldr	r3, [r3, #0]
 c002e58:	f245 5255 	movw	r2, #21845	; 0x5555
 c002e5c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 c002e5e:	687b      	ldr	r3, [r7, #4]
 c002e60:	681b      	ldr	r3, [r3, #0]
 c002e62:	687a      	ldr	r2, [r7, #4]
 c002e64:	6852      	ldr	r2, [r2, #4]
 c002e66:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 c002e68:	687b      	ldr	r3, [r7, #4]
 c002e6a:	681b      	ldr	r3, [r3, #0]
 c002e6c:	687a      	ldr	r2, [r7, #4]
 c002e6e:	6892      	ldr	r2, [r2, #8]
 c002e70:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 c002e72:	f7fe ffc9 	bl	c001e08 <HAL_GetTick>
 c002e76:	60f8      	str	r0, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 c002e78:	e00f      	b.n	c002e9a <HAL_IWDG_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 c002e7a:	f7fe ffc5 	bl	c001e08 <HAL_GetTick>
 c002e7e:	4602      	mov	r2, r0
 c002e80:	68fb      	ldr	r3, [r7, #12]
 c002e82:	1ad3      	subs	r3, r2, r3
 c002e84:	2b30      	cmp	r3, #48	; 0x30
 c002e86:	d908      	bls.n	c002e9a <HAL_IWDG_Init+0x62>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 c002e88:	687b      	ldr	r3, [r7, #4]
 c002e8a:	681b      	ldr	r3, [r3, #0]
 c002e8c:	68db      	ldr	r3, [r3, #12]
 c002e8e:	f003 0307 	and.w	r3, r3, #7
 c002e92:	2b00      	cmp	r3, #0
 c002e94:	d001      	beq.n	c002e9a <HAL_IWDG_Init+0x62>
      {
        return HAL_TIMEOUT;
 c002e96:	2303      	movs	r3, #3
 c002e98:	e019      	b.n	c002ece <HAL_IWDG_Init+0x96>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 c002e9a:	687b      	ldr	r3, [r7, #4]
 c002e9c:	681b      	ldr	r3, [r3, #0]
 c002e9e:	68db      	ldr	r3, [r3, #12]
 c002ea0:	f003 0307 	and.w	r3, r3, #7
 c002ea4:	2b00      	cmp	r3, #0
 c002ea6:	d1e8      	bne.n	c002e7a <HAL_IWDG_Init+0x42>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 c002ea8:	687b      	ldr	r3, [r7, #4]
 c002eaa:	681b      	ldr	r3, [r3, #0]
 c002eac:	691a      	ldr	r2, [r3, #16]
 c002eae:	687b      	ldr	r3, [r7, #4]
 c002eb0:	68db      	ldr	r3, [r3, #12]
 c002eb2:	429a      	cmp	r2, r3
 c002eb4:	d005      	beq.n	c002ec2 <HAL_IWDG_Init+0x8a>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 c002eb6:	687b      	ldr	r3, [r7, #4]
 c002eb8:	681b      	ldr	r3, [r3, #0]
 c002eba:	687a      	ldr	r2, [r7, #4]
 c002ebc:	68d2      	ldr	r2, [r2, #12]
 c002ebe:	611a      	str	r2, [r3, #16]
 c002ec0:	e004      	b.n	c002ecc <HAL_IWDG_Init+0x94>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 c002ec2:	687b      	ldr	r3, [r7, #4]
 c002ec4:	681b      	ldr	r3, [r3, #0]
 c002ec6:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 c002eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 c002ecc:	2300      	movs	r3, #0
}
 c002ece:	4618      	mov	r0, r3
 c002ed0:	3710      	adds	r7, #16
 c002ed2:	46bd      	mov	sp, r7
 c002ed4:	bd80      	pop	{r7, pc}

0c002ed6 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 c002ed6:	b480      	push	{r7}
 c002ed8:	b083      	sub	sp, #12
 c002eda:	af00      	add	r7, sp, #0
 c002edc:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 c002ede:	687b      	ldr	r3, [r7, #4]
 c002ee0:	681b      	ldr	r3, [r3, #0]
 c002ee2:	f64a 22aa 	movw	r2, #43690	; 0xaaaa
 c002ee6:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 c002ee8:	2300      	movs	r3, #0
}
 c002eea:	4618      	mov	r0, r3
 c002eec:	370c      	adds	r7, #12
 c002eee:	46bd      	mov	sp, r7
 c002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ef4:	4770      	bx	lr
	...

0c002ef8 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002ef8:	b480      	push	{r7}
 c002efa:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c002efc:	4b04      	ldr	r3, [pc, #16]	; (c002f10 <HAL_PWREx_GetVoltageRange+0x18>)
 c002efe:	681b      	ldr	r3, [r3, #0]
 c002f00:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c002f04:	4618      	mov	r0, r3
 c002f06:	46bd      	mov	sp, r7
 c002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f0c:	4770      	bx	lr
 c002f0e:	bf00      	nop
 c002f10:	50007000 	.word	0x50007000

0c002f14 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002f14:	b580      	push	{r7, lr}
 c002f16:	b084      	sub	sp, #16
 c002f18:	af00      	add	r7, sp, #0
 c002f1a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002f1c:	4b27      	ldr	r3, [pc, #156]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f1e:	681b      	ldr	r3, [r3, #0]
 c002f20:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c002f24:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c002f26:	f000 f871 	bl	c00300c <HAL_PWREx_SMPS_GetEffectiveMode>
 c002f2a:	4603      	mov	r3, r0
 c002f2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002f30:	d101      	bne.n	c002f36 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c002f32:	2301      	movs	r3, #1
 c002f34:	e03e      	b.n	c002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002f36:	4b21      	ldr	r3, [pc, #132]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f38:	68db      	ldr	r3, [r3, #12]
 c002f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002f3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002f42:	d101      	bne.n	c002f48 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c002f44:	2301      	movs	r3, #1
 c002f46:	e035      	b.n	c002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002f48:	68ba      	ldr	r2, [r7, #8]
 c002f4a:	687b      	ldr	r3, [r7, #4]
 c002f4c:	429a      	cmp	r2, r3
 c002f4e:	d101      	bne.n	c002f54 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c002f50:	2300      	movs	r3, #0
 c002f52:	e02f      	b.n	c002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002f54:	4b19      	ldr	r3, [pc, #100]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f56:	681b      	ldr	r3, [r3, #0]
 c002f58:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c002f5c:	4917      	ldr	r1, [pc, #92]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f5e:	687b      	ldr	r3, [r7, #4]
 c002f60:	4313      	orrs	r3, r2
 c002f62:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002f64:	4b16      	ldr	r3, [pc, #88]	; (c002fc0 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c002f66:	681b      	ldr	r3, [r3, #0]
 c002f68:	095b      	lsrs	r3, r3, #5
 c002f6a:	4a16      	ldr	r2, [pc, #88]	; (c002fc4 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c002f6c:	fba2 2303 	umull	r2, r3, r2, r3
 c002f70:	09db      	lsrs	r3, r3, #7
 c002f72:	2232      	movs	r2, #50	; 0x32
 c002f74:	fb02 f303 	mul.w	r3, r2, r3
 c002f78:	4a13      	ldr	r2, [pc, #76]	; (c002fc8 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c002f7a:	fba2 2303 	umull	r2, r3, r2, r3
 c002f7e:	08db      	lsrs	r3, r3, #3
 c002f80:	3301      	adds	r3, #1
 c002f82:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002f84:	e002      	b.n	c002f8c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c002f86:	68fb      	ldr	r3, [r7, #12]
 c002f88:	3b01      	subs	r3, #1
 c002f8a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002f8c:	4b0b      	ldr	r3, [pc, #44]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f8e:	695b      	ldr	r3, [r3, #20]
 c002f90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002f98:	d102      	bne.n	c002fa0 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c002f9a:	68fb      	ldr	r3, [r7, #12]
 c002f9c:	2b00      	cmp	r3, #0
 c002f9e:	d1f2      	bne.n	c002f86 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c002fa0:	4b06      	ldr	r3, [pc, #24]	; (c002fbc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002fa2:	695b      	ldr	r3, [r3, #20]
 c002fa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002fa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002fac:	d101      	bne.n	c002fb2 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c002fae:	2303      	movs	r3, #3
 c002fb0:	e000      	b.n	c002fb4 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c002fb2:	2300      	movs	r3, #0
}
 c002fb4:	4618      	mov	r0, r3
 c002fb6:	3710      	adds	r7, #16
 c002fb8:	46bd      	mov	sp, r7
 c002fba:	bd80      	pop	{r7, pc}
 c002fbc:	50007000 	.word	0x50007000
 c002fc0:	3000003c 	.word	0x3000003c
 c002fc4:	0a7c5ac5 	.word	0x0a7c5ac5
 c002fc8:	cccccccd 	.word	0xcccccccd

0c002fcc <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c002fcc:	b480      	push	{r7}
 c002fce:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c002fd0:	4b05      	ldr	r3, [pc, #20]	; (c002fe8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002fd2:	685b      	ldr	r3, [r3, #4]
 c002fd4:	4a04      	ldr	r2, [pc, #16]	; (c002fe8 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002fd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c002fda:	6053      	str	r3, [r2, #4]
}
 c002fdc:	bf00      	nop
 c002fde:	46bd      	mov	sp, r7
 c002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002fe4:	4770      	bx	lr
 c002fe6:	bf00      	nop
 c002fe8:	50007000 	.word	0x50007000

0c002fec <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c002fec:	b480      	push	{r7}
 c002fee:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c002ff0:	4b05      	ldr	r3, [pc, #20]	; (c003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002ff2:	689b      	ldr	r3, [r3, #8]
 c002ff4:	4a04      	ldr	r2, [pc, #16]	; (c003008 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002ff6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002ffa:	6093      	str	r3, [r2, #8]
}
 c002ffc:	bf00      	nop
 c002ffe:	46bd      	mov	sp, r7
 c003000:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003004:	4770      	bx	lr
 c003006:	bf00      	nop
 c003008:	50007000 	.word	0x50007000

0c00300c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c00300c:	b480      	push	{r7}
 c00300e:	b083      	sub	sp, #12
 c003010:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c003012:	4b0f      	ldr	r3, [pc, #60]	; (c003050 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c003014:	691b      	ldr	r3, [r3, #16]
 c003016:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c003018:	683b      	ldr	r3, [r7, #0]
 c00301a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00301e:	2b00      	cmp	r3, #0
 c003020:	d003      	beq.n	c00302a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c003022:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003026:	607b      	str	r3, [r7, #4]
 c003028:	e00a      	b.n	c003040 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c00302a:	683b      	ldr	r3, [r7, #0]
 c00302c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c003030:	2b00      	cmp	r3, #0
 c003032:	d103      	bne.n	c00303c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c003034:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003038:	607b      	str	r3, [r7, #4]
 c00303a:	e001      	b.n	c003040 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c00303c:	2300      	movs	r3, #0
 c00303e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c003040:	687b      	ldr	r3, [r7, #4]
}
 c003042:	4618      	mov	r0, r3
 c003044:	370c      	adds	r7, #12
 c003046:	46bd      	mov	sp, r7
 c003048:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00304c:	4770      	bx	lr
 c00304e:	bf00      	nop
 c003050:	50007000 	.word	0x50007000

0c003054 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c003054:	b580      	push	{r7, lr}
 c003056:	b088      	sub	sp, #32
 c003058:	af00      	add	r7, sp, #0
 c00305a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c00305c:	687b      	ldr	r3, [r7, #4]
 c00305e:	2b00      	cmp	r3, #0
 c003060:	d102      	bne.n	c003068 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c003062:	2301      	movs	r3, #1
 c003064:	f000 bcc2 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003068:	4b99      	ldr	r3, [pc, #612]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00306a:	689b      	ldr	r3, [r3, #8]
 c00306c:	f003 030c 	and.w	r3, r3, #12
 c003070:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003072:	4b97      	ldr	r3, [pc, #604]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003074:	68db      	ldr	r3, [r3, #12]
 c003076:	f003 0303 	and.w	r3, r3, #3
 c00307a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c00307c:	687b      	ldr	r3, [r7, #4]
 c00307e:	681b      	ldr	r3, [r3, #0]
 c003080:	f003 0310 	and.w	r3, r3, #16
 c003084:	2b00      	cmp	r3, #0
 c003086:	f000 80e9 	beq.w	c00325c <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00308a:	69bb      	ldr	r3, [r7, #24]
 c00308c:	2b00      	cmp	r3, #0
 c00308e:	d006      	beq.n	c00309e <HAL_RCC_OscConfig+0x4a>
 c003090:	69bb      	ldr	r3, [r7, #24]
 c003092:	2b0c      	cmp	r3, #12
 c003094:	f040 8083 	bne.w	c00319e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c003098:	697b      	ldr	r3, [r7, #20]
 c00309a:	2b01      	cmp	r3, #1
 c00309c:	d17f      	bne.n	c00319e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00309e:	4b8c      	ldr	r3, [pc, #560]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030a0:	681b      	ldr	r3, [r3, #0]
 c0030a2:	f003 0302 	and.w	r3, r3, #2
 c0030a6:	2b00      	cmp	r3, #0
 c0030a8:	d006      	beq.n	c0030b8 <HAL_RCC_OscConfig+0x64>
 c0030aa:	687b      	ldr	r3, [r7, #4]
 c0030ac:	69db      	ldr	r3, [r3, #28]
 c0030ae:	2b00      	cmp	r3, #0
 c0030b0:	d102      	bne.n	c0030b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c0030b2:	2301      	movs	r3, #1
 c0030b4:	f000 bc9a 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0030b8:	687b      	ldr	r3, [r7, #4]
 c0030ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0030bc:	4b84      	ldr	r3, [pc, #528]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030be:	681b      	ldr	r3, [r3, #0]
 c0030c0:	f003 0308 	and.w	r3, r3, #8
 c0030c4:	2b00      	cmp	r3, #0
 c0030c6:	d004      	beq.n	c0030d2 <HAL_RCC_OscConfig+0x7e>
 c0030c8:	4b81      	ldr	r3, [pc, #516]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030ca:	681b      	ldr	r3, [r3, #0]
 c0030cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0030d0:	e005      	b.n	c0030de <HAL_RCC_OscConfig+0x8a>
 c0030d2:	4b7f      	ldr	r3, [pc, #508]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0030d8:	091b      	lsrs	r3, r3, #4
 c0030da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0030de:	4293      	cmp	r3, r2
 c0030e0:	d224      	bcs.n	c00312c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0030e2:	687b      	ldr	r3, [r7, #4]
 c0030e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0030e6:	4618      	mov	r0, r3
 c0030e8:	f000 fe9c 	bl	c003e24 <RCC_SetFlashLatencyFromMSIRange>
 c0030ec:	4603      	mov	r3, r0
 c0030ee:	2b00      	cmp	r3, #0
 c0030f0:	d002      	beq.n	c0030f8 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c0030f2:	2301      	movs	r3, #1
 c0030f4:	f000 bc7a 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0030f8:	4b75      	ldr	r3, [pc, #468]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030fa:	681b      	ldr	r3, [r3, #0]
 c0030fc:	4a74      	ldr	r2, [pc, #464]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0030fe:	f043 0308 	orr.w	r3, r3, #8
 c003102:	6013      	str	r3, [r2, #0]
 c003104:	4b72      	ldr	r3, [pc, #456]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003106:	681b      	ldr	r3, [r3, #0]
 c003108:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00310c:	687b      	ldr	r3, [r7, #4]
 c00310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003110:	496f      	ldr	r1, [pc, #444]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003112:	4313      	orrs	r3, r2
 c003114:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003116:	4b6e      	ldr	r3, [pc, #440]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003118:	685b      	ldr	r3, [r3, #4]
 c00311a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00311e:	687b      	ldr	r3, [r7, #4]
 c003120:	6a1b      	ldr	r3, [r3, #32]
 c003122:	021b      	lsls	r3, r3, #8
 c003124:	496a      	ldr	r1, [pc, #424]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003126:	4313      	orrs	r3, r2
 c003128:	604b      	str	r3, [r1, #4]
 c00312a:	e026      	b.n	c00317a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00312c:	4b68      	ldr	r3, [pc, #416]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00312e:	681b      	ldr	r3, [r3, #0]
 c003130:	4a67      	ldr	r2, [pc, #412]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003132:	f043 0308 	orr.w	r3, r3, #8
 c003136:	6013      	str	r3, [r2, #0]
 c003138:	4b65      	ldr	r3, [pc, #404]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00313a:	681b      	ldr	r3, [r3, #0]
 c00313c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003140:	687b      	ldr	r3, [r7, #4]
 c003142:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003144:	4962      	ldr	r1, [pc, #392]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003146:	4313      	orrs	r3, r2
 c003148:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00314a:	4b61      	ldr	r3, [pc, #388]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00314c:	685b      	ldr	r3, [r3, #4]
 c00314e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c003152:	687b      	ldr	r3, [r7, #4]
 c003154:	6a1b      	ldr	r3, [r3, #32]
 c003156:	021b      	lsls	r3, r3, #8
 c003158:	495d      	ldr	r1, [pc, #372]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00315a:	4313      	orrs	r3, r2
 c00315c:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00315e:	69bb      	ldr	r3, [r7, #24]
 c003160:	2b00      	cmp	r3, #0
 c003162:	d10a      	bne.n	c00317a <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003164:	687b      	ldr	r3, [r7, #4]
 c003166:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003168:	4618      	mov	r0, r3
 c00316a:	f000 fe5b 	bl	c003e24 <RCC_SetFlashLatencyFromMSIRange>
 c00316e:	4603      	mov	r3, r0
 c003170:	2b00      	cmp	r3, #0
 c003172:	d002      	beq.n	c00317a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c003174:	2301      	movs	r3, #1
 c003176:	f000 bc39 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c00317a:	f000 fe17 	bl	c003dac <HAL_RCC_GetHCLKFreq>
 c00317e:	4603      	mov	r3, r0
 c003180:	4a54      	ldr	r2, [pc, #336]	; (c0032d4 <HAL_RCC_OscConfig+0x280>)
 c003182:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c003184:	4b54      	ldr	r3, [pc, #336]	; (c0032d8 <HAL_RCC_OscConfig+0x284>)
 c003186:	681b      	ldr	r3, [r3, #0]
 c003188:	4618      	mov	r0, r3
 c00318a:	f7fe fded 	bl	c001d68 <HAL_InitTick>
 c00318e:	4603      	mov	r3, r0
 c003190:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c003192:	7bfb      	ldrb	r3, [r7, #15]
 c003194:	2b00      	cmp	r3, #0
 c003196:	d060      	beq.n	c00325a <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c003198:	7bfb      	ldrb	r3, [r7, #15]
 c00319a:	f000 bc27 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00319e:	687b      	ldr	r3, [r7, #4]
 c0031a0:	69db      	ldr	r3, [r3, #28]
 c0031a2:	2b00      	cmp	r3, #0
 c0031a4:	d039      	beq.n	c00321a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c0031a6:	4b4a      	ldr	r3, [pc, #296]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031a8:	681b      	ldr	r3, [r3, #0]
 c0031aa:	4a49      	ldr	r2, [pc, #292]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031ac:	f043 0301 	orr.w	r3, r3, #1
 c0031b0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0031b2:	f7fe fe29 	bl	c001e08 <HAL_GetTick>
 c0031b6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0031b8:	e00f      	b.n	c0031da <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0031ba:	f7fe fe25 	bl	c001e08 <HAL_GetTick>
 c0031be:	4602      	mov	r2, r0
 c0031c0:	693b      	ldr	r3, [r7, #16]
 c0031c2:	1ad3      	subs	r3, r2, r3
 c0031c4:	2b02      	cmp	r3, #2
 c0031c6:	d908      	bls.n	c0031da <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0031c8:	4b41      	ldr	r3, [pc, #260]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031ca:	681b      	ldr	r3, [r3, #0]
 c0031cc:	f003 0302 	and.w	r3, r3, #2
 c0031d0:	2b00      	cmp	r3, #0
 c0031d2:	d102      	bne.n	c0031da <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c0031d4:	2303      	movs	r3, #3
 c0031d6:	f000 bc09 	b.w	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0031da:	4b3d      	ldr	r3, [pc, #244]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031dc:	681b      	ldr	r3, [r3, #0]
 c0031de:	f003 0302 	and.w	r3, r3, #2
 c0031e2:	2b00      	cmp	r3, #0
 c0031e4:	d0e9      	beq.n	c0031ba <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0031e6:	4b3a      	ldr	r3, [pc, #232]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031e8:	681b      	ldr	r3, [r3, #0]
 c0031ea:	4a39      	ldr	r2, [pc, #228]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031ec:	f043 0308 	orr.w	r3, r3, #8
 c0031f0:	6013      	str	r3, [r2, #0]
 c0031f2:	4b37      	ldr	r3, [pc, #220]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0031f4:	681b      	ldr	r3, [r3, #0]
 c0031f6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0031fa:	687b      	ldr	r3, [r7, #4]
 c0031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0031fe:	4934      	ldr	r1, [pc, #208]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003200:	4313      	orrs	r3, r2
 c003202:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003204:	4b32      	ldr	r3, [pc, #200]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003206:	685b      	ldr	r3, [r3, #4]
 c003208:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00320c:	687b      	ldr	r3, [r7, #4]
 c00320e:	6a1b      	ldr	r3, [r3, #32]
 c003210:	021b      	lsls	r3, r3, #8
 c003212:	492f      	ldr	r1, [pc, #188]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003214:	4313      	orrs	r3, r2
 c003216:	604b      	str	r3, [r1, #4]
 c003218:	e020      	b.n	c00325c <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c00321a:	4b2d      	ldr	r3, [pc, #180]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00321c:	681b      	ldr	r3, [r3, #0]
 c00321e:	4a2c      	ldr	r2, [pc, #176]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c003220:	f023 0301 	bic.w	r3, r3, #1
 c003224:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c003226:	f7fe fdef 	bl	c001e08 <HAL_GetTick>
 c00322a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00322c:	e00e      	b.n	c00324c <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00322e:	f7fe fdeb 	bl	c001e08 <HAL_GetTick>
 c003232:	4602      	mov	r2, r0
 c003234:	693b      	ldr	r3, [r7, #16]
 c003236:	1ad3      	subs	r3, r2, r3
 c003238:	2b02      	cmp	r3, #2
 c00323a:	d907      	bls.n	c00324c <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00323c:	4b24      	ldr	r3, [pc, #144]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00323e:	681b      	ldr	r3, [r3, #0]
 c003240:	f003 0302 	and.w	r3, r3, #2
 c003244:	2b00      	cmp	r3, #0
 c003246:	d001      	beq.n	c00324c <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c003248:	2303      	movs	r3, #3
 c00324a:	e3cf      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c00324c:	4b20      	ldr	r3, [pc, #128]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00324e:	681b      	ldr	r3, [r3, #0]
 c003250:	f003 0302 	and.w	r3, r3, #2
 c003254:	2b00      	cmp	r3, #0
 c003256:	d1ea      	bne.n	c00322e <HAL_RCC_OscConfig+0x1da>
 c003258:	e000      	b.n	c00325c <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00325a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c00325c:	687b      	ldr	r3, [r7, #4]
 c00325e:	681b      	ldr	r3, [r3, #0]
 c003260:	f003 0301 	and.w	r3, r3, #1
 c003264:	2b00      	cmp	r3, #0
 c003266:	d07e      	beq.n	c003366 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003268:	69bb      	ldr	r3, [r7, #24]
 c00326a:	2b08      	cmp	r3, #8
 c00326c:	d005      	beq.n	c00327a <HAL_RCC_OscConfig+0x226>
 c00326e:	69bb      	ldr	r3, [r7, #24]
 c003270:	2b0c      	cmp	r3, #12
 c003272:	d10e      	bne.n	c003292 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c003274:	697b      	ldr	r3, [r7, #20]
 c003276:	2b03      	cmp	r3, #3
 c003278:	d10b      	bne.n	c003292 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c00327a:	4b15      	ldr	r3, [pc, #84]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00327c:	681b      	ldr	r3, [r3, #0]
 c00327e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003282:	2b00      	cmp	r3, #0
 c003284:	d06e      	beq.n	c003364 <HAL_RCC_OscConfig+0x310>
 c003286:	687b      	ldr	r3, [r7, #4]
 c003288:	685b      	ldr	r3, [r3, #4]
 c00328a:	2b00      	cmp	r3, #0
 c00328c:	d16a      	bne.n	c003364 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c00328e:	2301      	movs	r3, #1
 c003290:	e3ac      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c003292:	687b      	ldr	r3, [r7, #4]
 c003294:	685b      	ldr	r3, [r3, #4]
 c003296:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00329a:	d106      	bne.n	c0032aa <HAL_RCC_OscConfig+0x256>
 c00329c:	4b0c      	ldr	r3, [pc, #48]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c00329e:	681b      	ldr	r3, [r3, #0]
 c0032a0:	4a0b      	ldr	r2, [pc, #44]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0032a2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0032a6:	6013      	str	r3, [r2, #0]
 c0032a8:	e024      	b.n	c0032f4 <HAL_RCC_OscConfig+0x2a0>
 c0032aa:	687b      	ldr	r3, [r7, #4]
 c0032ac:	685b      	ldr	r3, [r3, #4]
 c0032ae:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c0032b2:	d113      	bne.n	c0032dc <HAL_RCC_OscConfig+0x288>
 c0032b4:	4b06      	ldr	r3, [pc, #24]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0032b6:	681b      	ldr	r3, [r3, #0]
 c0032b8:	4a05      	ldr	r2, [pc, #20]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0032ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0032be:	6013      	str	r3, [r2, #0]
 c0032c0:	4b03      	ldr	r3, [pc, #12]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0032c2:	681b      	ldr	r3, [r3, #0]
 c0032c4:	4a02      	ldr	r2, [pc, #8]	; (c0032d0 <HAL_RCC_OscConfig+0x27c>)
 c0032c6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0032ca:	6013      	str	r3, [r2, #0]
 c0032cc:	e012      	b.n	c0032f4 <HAL_RCC_OscConfig+0x2a0>
 c0032ce:	bf00      	nop
 c0032d0:	50021000 	.word	0x50021000
 c0032d4:	3000003c 	.word	0x3000003c
 c0032d8:	30000040 	.word	0x30000040
 c0032dc:	4b8b      	ldr	r3, [pc, #556]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0032de:	681b      	ldr	r3, [r3, #0]
 c0032e0:	4a8a      	ldr	r2, [pc, #552]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0032e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0032e6:	6013      	str	r3, [r2, #0]
 c0032e8:	4b88      	ldr	r3, [pc, #544]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0032ea:	681b      	ldr	r3, [r3, #0]
 c0032ec:	4a87      	ldr	r2, [pc, #540]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0032ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0032f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0032f4:	687b      	ldr	r3, [r7, #4]
 c0032f6:	685b      	ldr	r3, [r3, #4]
 c0032f8:	2b00      	cmp	r3, #0
 c0032fa:	d019      	beq.n	c003330 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0032fc:	f7fe fd84 	bl	c001e08 <HAL_GetTick>
 c003300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003302:	e00e      	b.n	c003322 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c003304:	f7fe fd80 	bl	c001e08 <HAL_GetTick>
 c003308:	4602      	mov	r2, r0
 c00330a:	693b      	ldr	r3, [r7, #16]
 c00330c:	1ad3      	subs	r3, r2, r3
 c00330e:	2b64      	cmp	r3, #100	; 0x64
 c003310:	d907      	bls.n	c003322 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003312:	4b7e      	ldr	r3, [pc, #504]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003314:	681b      	ldr	r3, [r3, #0]
 c003316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00331a:	2b00      	cmp	r3, #0
 c00331c:	d101      	bne.n	c003322 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c00331e:	2303      	movs	r3, #3
 c003320:	e364      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003322:	4b7a      	ldr	r3, [pc, #488]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003324:	681b      	ldr	r3, [r3, #0]
 c003326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00332a:	2b00      	cmp	r3, #0
 c00332c:	d0ea      	beq.n	c003304 <HAL_RCC_OscConfig+0x2b0>
 c00332e:	e01a      	b.n	c003366 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003330:	f7fe fd6a 	bl	c001e08 <HAL_GetTick>
 c003334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003336:	e00e      	b.n	c003356 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c003338:	f7fe fd66 	bl	c001e08 <HAL_GetTick>
 c00333c:	4602      	mov	r2, r0
 c00333e:	693b      	ldr	r3, [r7, #16]
 c003340:	1ad3      	subs	r3, r2, r3
 c003342:	2b64      	cmp	r3, #100	; 0x64
 c003344:	d907      	bls.n	c003356 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003346:	4b71      	ldr	r3, [pc, #452]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003348:	681b      	ldr	r3, [r3, #0]
 c00334a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00334e:	2b00      	cmp	r3, #0
 c003350:	d001      	beq.n	c003356 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c003352:	2303      	movs	r3, #3
 c003354:	e34a      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003356:	4b6d      	ldr	r3, [pc, #436]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003358:	681b      	ldr	r3, [r3, #0]
 c00335a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00335e:	2b00      	cmp	r3, #0
 c003360:	d1ea      	bne.n	c003338 <HAL_RCC_OscConfig+0x2e4>
 c003362:	e000      	b.n	c003366 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003364:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003366:	687b      	ldr	r3, [r7, #4]
 c003368:	681b      	ldr	r3, [r3, #0]
 c00336a:	f003 0302 	and.w	r3, r3, #2
 c00336e:	2b00      	cmp	r3, #0
 c003370:	d06c      	beq.n	c00344c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c003372:	69bb      	ldr	r3, [r7, #24]
 c003374:	2b04      	cmp	r3, #4
 c003376:	d005      	beq.n	c003384 <HAL_RCC_OscConfig+0x330>
 c003378:	69bb      	ldr	r3, [r7, #24]
 c00337a:	2b0c      	cmp	r3, #12
 c00337c:	d119      	bne.n	c0033b2 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00337e:	697b      	ldr	r3, [r7, #20]
 c003380:	2b02      	cmp	r3, #2
 c003382:	d116      	bne.n	c0033b2 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c003384:	4b61      	ldr	r3, [pc, #388]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003386:	681b      	ldr	r3, [r3, #0]
 c003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00338c:	2b00      	cmp	r3, #0
 c00338e:	d005      	beq.n	c00339c <HAL_RCC_OscConfig+0x348>
 c003390:	687b      	ldr	r3, [r7, #4]
 c003392:	68db      	ldr	r3, [r3, #12]
 c003394:	2b00      	cmp	r3, #0
 c003396:	d101      	bne.n	c00339c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c003398:	2301      	movs	r3, #1
 c00339a:	e327      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c00339c:	4b5b      	ldr	r3, [pc, #364]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c00339e:	685b      	ldr	r3, [r3, #4]
 c0033a0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0033a4:	687b      	ldr	r3, [r7, #4]
 c0033a6:	691b      	ldr	r3, [r3, #16]
 c0033a8:	061b      	lsls	r3, r3, #24
 c0033aa:	4958      	ldr	r1, [pc, #352]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033ac:	4313      	orrs	r3, r2
 c0033ae:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0033b0:	e04c      	b.n	c00344c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0033b2:	687b      	ldr	r3, [r7, #4]
 c0033b4:	68db      	ldr	r3, [r3, #12]
 c0033b6:	2b00      	cmp	r3, #0
 c0033b8:	d029      	beq.n	c00340e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c0033ba:	4b54      	ldr	r3, [pc, #336]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033bc:	681b      	ldr	r3, [r3, #0]
 c0033be:	4a53      	ldr	r2, [pc, #332]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0033c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0033c6:	f7fe fd1f 	bl	c001e08 <HAL_GetTick>
 c0033ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0033cc:	e00e      	b.n	c0033ec <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0033ce:	f7fe fd1b 	bl	c001e08 <HAL_GetTick>
 c0033d2:	4602      	mov	r2, r0
 c0033d4:	693b      	ldr	r3, [r7, #16]
 c0033d6:	1ad3      	subs	r3, r2, r3
 c0033d8:	2b02      	cmp	r3, #2
 c0033da:	d907      	bls.n	c0033ec <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0033dc:	4b4b      	ldr	r3, [pc, #300]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033de:	681b      	ldr	r3, [r3, #0]
 c0033e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0033e4:	2b00      	cmp	r3, #0
 c0033e6:	d101      	bne.n	c0033ec <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c0033e8:	2303      	movs	r3, #3
 c0033ea:	e2ff      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0033ec:	4b47      	ldr	r3, [pc, #284]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033ee:	681b      	ldr	r3, [r3, #0]
 c0033f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0033f4:	2b00      	cmp	r3, #0
 c0033f6:	d0ea      	beq.n	c0033ce <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0033f8:	4b44      	ldr	r3, [pc, #272]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0033fa:	685b      	ldr	r3, [r3, #4]
 c0033fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c003400:	687b      	ldr	r3, [r7, #4]
 c003402:	691b      	ldr	r3, [r3, #16]
 c003404:	061b      	lsls	r3, r3, #24
 c003406:	4941      	ldr	r1, [pc, #260]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003408:	4313      	orrs	r3, r2
 c00340a:	604b      	str	r3, [r1, #4]
 c00340c:	e01e      	b.n	c00344c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c00340e:	4b3f      	ldr	r3, [pc, #252]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003410:	681b      	ldr	r3, [r3, #0]
 c003412:	4a3e      	ldr	r2, [pc, #248]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003414:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c003418:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00341a:	f7fe fcf5 	bl	c001e08 <HAL_GetTick>
 c00341e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003420:	e00e      	b.n	c003440 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c003422:	f7fe fcf1 	bl	c001e08 <HAL_GetTick>
 c003426:	4602      	mov	r2, r0
 c003428:	693b      	ldr	r3, [r7, #16]
 c00342a:	1ad3      	subs	r3, r2, r3
 c00342c:	2b02      	cmp	r3, #2
 c00342e:	d907      	bls.n	c003440 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003430:	4b36      	ldr	r3, [pc, #216]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003432:	681b      	ldr	r3, [r3, #0]
 c003434:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003438:	2b00      	cmp	r3, #0
 c00343a:	d001      	beq.n	c003440 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c00343c:	2303      	movs	r3, #3
 c00343e:	e2d5      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c003440:	4b32      	ldr	r3, [pc, #200]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003442:	681b      	ldr	r3, [r3, #0]
 c003444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003448:	2b00      	cmp	r3, #0
 c00344a:	d1ea      	bne.n	c003422 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c00344c:	687b      	ldr	r3, [r7, #4]
 c00344e:	681b      	ldr	r3, [r3, #0]
 c003450:	f003 0308 	and.w	r3, r3, #8
 c003454:	2b00      	cmp	r3, #0
 c003456:	d062      	beq.n	c00351e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c003458:	687b      	ldr	r3, [r7, #4]
 c00345a:	695b      	ldr	r3, [r3, #20]
 c00345c:	2b00      	cmp	r3, #0
 c00345e:	d038      	beq.n	c0034d2 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c003460:	687b      	ldr	r3, [r7, #4]
 c003462:	699b      	ldr	r3, [r3, #24]
 c003464:	2b00      	cmp	r3, #0
 c003466:	d108      	bne.n	c00347a <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003468:	4b28      	ldr	r3, [pc, #160]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c00346a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00346e:	4a27      	ldr	r2, [pc, #156]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003470:	f023 0310 	bic.w	r3, r3, #16
 c003474:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c003478:	e007      	b.n	c00348a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00347a:	4b24      	ldr	r3, [pc, #144]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c00347c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003480:	4a22      	ldr	r2, [pc, #136]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003482:	f043 0310 	orr.w	r3, r3, #16
 c003486:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c00348a:	4b20      	ldr	r3, [pc, #128]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c00348c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003490:	4a1e      	ldr	r2, [pc, #120]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c003492:	f043 0301 	orr.w	r3, r3, #1
 c003496:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00349a:	f7fe fcb5 	bl	c001e08 <HAL_GetTick>
 c00349e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0034a0:	e00f      	b.n	c0034c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0034a2:	f7fe fcb1 	bl	c001e08 <HAL_GetTick>
 c0034a6:	4602      	mov	r2, r0
 c0034a8:	693b      	ldr	r3, [r7, #16]
 c0034aa:	1ad3      	subs	r3, r2, r3
 c0034ac:	2b07      	cmp	r3, #7
 c0034ae:	d908      	bls.n	c0034c2 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0034b0:	4b16      	ldr	r3, [pc, #88]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0034b2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034b6:	f003 0302 	and.w	r3, r3, #2
 c0034ba:	2b00      	cmp	r3, #0
 c0034bc:	d101      	bne.n	c0034c2 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c0034be:	2303      	movs	r3, #3
 c0034c0:	e294      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0034c2:	4b12      	ldr	r3, [pc, #72]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0034c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034c8:	f003 0302 	and.w	r3, r3, #2
 c0034cc:	2b00      	cmp	r3, #0
 c0034ce:	d0e8      	beq.n	c0034a2 <HAL_RCC_OscConfig+0x44e>
 c0034d0:	e025      	b.n	c00351e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0034d2:	4b0e      	ldr	r3, [pc, #56]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0034d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034d8:	4a0c      	ldr	r2, [pc, #48]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0034da:	f023 0301 	bic.w	r3, r3, #1
 c0034de:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0034e2:	f7fe fc91 	bl	c001e08 <HAL_GetTick>
 c0034e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0034e8:	e012      	b.n	c003510 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0034ea:	f7fe fc8d 	bl	c001e08 <HAL_GetTick>
 c0034ee:	4602      	mov	r2, r0
 c0034f0:	693b      	ldr	r3, [r7, #16]
 c0034f2:	1ad3      	subs	r3, r2, r3
 c0034f4:	2b07      	cmp	r3, #7
 c0034f6:	d90b      	bls.n	c003510 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0034f8:	4b04      	ldr	r3, [pc, #16]	; (c00350c <HAL_RCC_OscConfig+0x4b8>)
 c0034fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034fe:	f003 0302 	and.w	r3, r3, #2
 c003502:	2b00      	cmp	r3, #0
 c003504:	d004      	beq.n	c003510 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c003506:	2303      	movs	r3, #3
 c003508:	e270      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
 c00350a:	bf00      	nop
 c00350c:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003510:	4ba8      	ldr	r3, [pc, #672]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003512:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003516:	f003 0302 	and.w	r3, r3, #2
 c00351a:	2b00      	cmp	r3, #0
 c00351c:	d1e5      	bne.n	c0034ea <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00351e:	687b      	ldr	r3, [r7, #4]
 c003520:	681b      	ldr	r3, [r3, #0]
 c003522:	f003 0304 	and.w	r3, r3, #4
 c003526:	2b00      	cmp	r3, #0
 c003528:	f000 812d 	beq.w	c003786 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00352c:	2300      	movs	r3, #0
 c00352e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c003530:	4ba0      	ldr	r3, [pc, #640]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003534:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003538:	2b00      	cmp	r3, #0
 c00353a:	d10d      	bne.n	c003558 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00353c:	4b9d      	ldr	r3, [pc, #628]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c00353e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003540:	4a9c      	ldr	r2, [pc, #624]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003542:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003546:	6593      	str	r3, [r2, #88]	; 0x58
 c003548:	4b9a      	ldr	r3, [pc, #616]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c00354a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00354c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003550:	60bb      	str	r3, [r7, #8]
 c003552:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c003554:	2301      	movs	r3, #1
 c003556:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003558:	4b97      	ldr	r3, [pc, #604]	; (c0037b8 <HAL_RCC_OscConfig+0x764>)
 c00355a:	681b      	ldr	r3, [r3, #0]
 c00355c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003560:	2b00      	cmp	r3, #0
 c003562:	d11e      	bne.n	c0035a2 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003564:	4b94      	ldr	r3, [pc, #592]	; (c0037b8 <HAL_RCC_OscConfig+0x764>)
 c003566:	681b      	ldr	r3, [r3, #0]
 c003568:	4a93      	ldr	r2, [pc, #588]	; (c0037b8 <HAL_RCC_OscConfig+0x764>)
 c00356a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00356e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c003570:	f7fe fc4a 	bl	c001e08 <HAL_GetTick>
 c003574:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003576:	e00e      	b.n	c003596 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003578:	f7fe fc46 	bl	c001e08 <HAL_GetTick>
 c00357c:	4602      	mov	r2, r0
 c00357e:	693b      	ldr	r3, [r7, #16]
 c003580:	1ad3      	subs	r3, r2, r3
 c003582:	2b02      	cmp	r3, #2
 c003584:	d907      	bls.n	c003596 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003586:	4b8c      	ldr	r3, [pc, #560]	; (c0037b8 <HAL_RCC_OscConfig+0x764>)
 c003588:	681b      	ldr	r3, [r3, #0]
 c00358a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00358e:	2b00      	cmp	r3, #0
 c003590:	d101      	bne.n	c003596 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c003592:	2303      	movs	r3, #3
 c003594:	e22a      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003596:	4b88      	ldr	r3, [pc, #544]	; (c0037b8 <HAL_RCC_OscConfig+0x764>)
 c003598:	681b      	ldr	r3, [r3, #0]
 c00359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00359e:	2b00      	cmp	r3, #0
 c0035a0:	d0ea      	beq.n	c003578 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c0035a2:	687b      	ldr	r3, [r7, #4]
 c0035a4:	689b      	ldr	r3, [r3, #8]
 c0035a6:	f003 0301 	and.w	r3, r3, #1
 c0035aa:	2b00      	cmp	r3, #0
 c0035ac:	d01f      	beq.n	c0035ee <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0035ae:	687b      	ldr	r3, [r7, #4]
 c0035b0:	689b      	ldr	r3, [r3, #8]
 c0035b2:	f003 0304 	and.w	r3, r3, #4
 c0035b6:	2b00      	cmp	r3, #0
 c0035b8:	d010      	beq.n	c0035dc <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0035ba:	4b7e      	ldr	r3, [pc, #504]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035c0:	4a7c      	ldr	r2, [pc, #496]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035c2:	f043 0304 	orr.w	r3, r3, #4
 c0035c6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0035ca:	4b7a      	ldr	r3, [pc, #488]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035d0:	4a78      	ldr	r2, [pc, #480]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035d2:	f043 0301 	orr.w	r3, r3, #1
 c0035d6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0035da:	e018      	b.n	c00360e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0035dc:	4b75      	ldr	r3, [pc, #468]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035e2:	4a74      	ldr	r2, [pc, #464]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035e4:	f043 0301 	orr.w	r3, r3, #1
 c0035e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0035ec:	e00f      	b.n	c00360e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0035ee:	4b71      	ldr	r3, [pc, #452]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035f4:	4a6f      	ldr	r2, [pc, #444]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0035f6:	f023 0301 	bic.w	r3, r3, #1
 c0035fa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0035fe:	4b6d      	ldr	r3, [pc, #436]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003604:	4a6b      	ldr	r2, [pc, #428]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003606:	f023 0304 	bic.w	r3, r3, #4
 c00360a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00360e:	687b      	ldr	r3, [r7, #4]
 c003610:	689b      	ldr	r3, [r3, #8]
 c003612:	2b00      	cmp	r3, #0
 c003614:	d068      	beq.n	c0036e8 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003616:	f7fe fbf7 	bl	c001e08 <HAL_GetTick>
 c00361a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00361c:	e011      	b.n	c003642 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00361e:	f7fe fbf3 	bl	c001e08 <HAL_GetTick>
 c003622:	4602      	mov	r2, r0
 c003624:	693b      	ldr	r3, [r7, #16]
 c003626:	1ad3      	subs	r3, r2, r3
 c003628:	f241 3288 	movw	r2, #5000	; 0x1388
 c00362c:	4293      	cmp	r3, r2
 c00362e:	d908      	bls.n	c003642 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003630:	4b60      	ldr	r3, [pc, #384]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003636:	f003 0302 	and.w	r3, r3, #2
 c00363a:	2b00      	cmp	r3, #0
 c00363c:	d101      	bne.n	c003642 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c00363e:	2303      	movs	r3, #3
 c003640:	e1d4      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003642:	4b5c      	ldr	r3, [pc, #368]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003648:	f003 0302 	and.w	r3, r3, #2
 c00364c:	2b00      	cmp	r3, #0
 c00364e:	d0e6      	beq.n	c00361e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c003650:	687b      	ldr	r3, [r7, #4]
 c003652:	689b      	ldr	r3, [r3, #8]
 c003654:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003658:	2b00      	cmp	r3, #0
 c00365a:	d022      	beq.n	c0036a2 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00365c:	4b55      	ldr	r3, [pc, #340]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c00365e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003662:	4a54      	ldr	r2, [pc, #336]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003664:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003668:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00366c:	e011      	b.n	c003692 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00366e:	f7fe fbcb 	bl	c001e08 <HAL_GetTick>
 c003672:	4602      	mov	r2, r0
 c003674:	693b      	ldr	r3, [r7, #16]
 c003676:	1ad3      	subs	r3, r2, r3
 c003678:	f241 3288 	movw	r2, #5000	; 0x1388
 c00367c:	4293      	cmp	r3, r2
 c00367e:	d908      	bls.n	c003692 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003680:	4b4c      	ldr	r3, [pc, #304]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003682:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003686:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00368a:	2b00      	cmp	r3, #0
 c00368c:	d101      	bne.n	c003692 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00368e:	2303      	movs	r3, #3
 c003690:	e1ac      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003692:	4b48      	ldr	r3, [pc, #288]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003694:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003698:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00369c:	2b00      	cmp	r3, #0
 c00369e:	d0e6      	beq.n	c00366e <HAL_RCC_OscConfig+0x61a>
 c0036a0:	e068      	b.n	c003774 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0036a2:	4b44      	ldr	r3, [pc, #272]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0036a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036a8:	4a42      	ldr	r2, [pc, #264]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0036aa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0036ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036b2:	e011      	b.n	c0036d8 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0036b4:	f7fe fba8 	bl	c001e08 <HAL_GetTick>
 c0036b8:	4602      	mov	r2, r0
 c0036ba:	693b      	ldr	r3, [r7, #16]
 c0036bc:	1ad3      	subs	r3, r2, r3
 c0036be:	f241 3288 	movw	r2, #5000	; 0x1388
 c0036c2:	4293      	cmp	r3, r2
 c0036c4:	d908      	bls.n	c0036d8 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036c6:	4b3b      	ldr	r3, [pc, #236]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0036d0:	2b00      	cmp	r3, #0
 c0036d2:	d001      	beq.n	c0036d8 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c0036d4:	2303      	movs	r3, #3
 c0036d6:	e189      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036d8:	4b36      	ldr	r3, [pc, #216]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0036e2:	2b00      	cmp	r3, #0
 c0036e4:	d1e6      	bne.n	c0036b4 <HAL_RCC_OscConfig+0x660>
 c0036e6:	e045      	b.n	c003774 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0036e8:	f7fe fb8e 	bl	c001e08 <HAL_GetTick>
 c0036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0036ee:	e011      	b.n	c003714 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0036f0:	f7fe fb8a 	bl	c001e08 <HAL_GetTick>
 c0036f4:	4602      	mov	r2, r0
 c0036f6:	693b      	ldr	r3, [r7, #16]
 c0036f8:	1ad3      	subs	r3, r2, r3
 c0036fa:	f241 3288 	movw	r2, #5000	; 0x1388
 c0036fe:	4293      	cmp	r3, r2
 c003700:	d908      	bls.n	c003714 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003702:	4b2c      	ldr	r3, [pc, #176]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003704:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003708:	f003 0302 	and.w	r3, r3, #2
 c00370c:	2b00      	cmp	r3, #0
 c00370e:	d001      	beq.n	c003714 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c003710:	2303      	movs	r3, #3
 c003712:	e16b      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003714:	4b27      	ldr	r3, [pc, #156]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00371a:	f003 0302 	and.w	r3, r3, #2
 c00371e:	2b00      	cmp	r3, #0
 c003720:	d1e6      	bne.n	c0036f0 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c003722:	4b24      	ldr	r3, [pc, #144]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003724:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003728:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00372c:	2b00      	cmp	r3, #0
 c00372e:	d021      	beq.n	c003774 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003730:	4b20      	ldr	r3, [pc, #128]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003736:	4a1f      	ldr	r2, [pc, #124]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003738:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00373c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003740:	e011      	b.n	c003766 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003742:	f7fe fb61 	bl	c001e08 <HAL_GetTick>
 c003746:	4602      	mov	r2, r0
 c003748:	693b      	ldr	r3, [r7, #16]
 c00374a:	1ad3      	subs	r3, r2, r3
 c00374c:	f241 3288 	movw	r2, #5000	; 0x1388
 c003750:	4293      	cmp	r3, r2
 c003752:	d908      	bls.n	c003766 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003754:	4b17      	ldr	r3, [pc, #92]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003756:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00375a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00375e:	2b00      	cmp	r3, #0
 c003760:	d001      	beq.n	c003766 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c003762:	2303      	movs	r3, #3
 c003764:	e142      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003766:	4b13      	ldr	r3, [pc, #76]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003768:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00376c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003770:	2b00      	cmp	r3, #0
 c003772:	d1e6      	bne.n	c003742 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003774:	7ffb      	ldrb	r3, [r7, #31]
 c003776:	2b01      	cmp	r3, #1
 c003778:	d105      	bne.n	c003786 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00377a:	4b0e      	ldr	r3, [pc, #56]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c00377c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00377e:	4a0d      	ldr	r2, [pc, #52]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c003780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003784:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003786:	687b      	ldr	r3, [r7, #4]
 c003788:	681b      	ldr	r3, [r3, #0]
 c00378a:	f003 0320 	and.w	r3, r3, #32
 c00378e:	2b00      	cmp	r3, #0
 c003790:	d04f      	beq.n	c003832 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003792:	687b      	ldr	r3, [r7, #4]
 c003794:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003796:	2b00      	cmp	r3, #0
 c003798:	d028      	beq.n	c0037ec <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c00379a:	4b06      	ldr	r3, [pc, #24]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c00379c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037a0:	4a04      	ldr	r2, [pc, #16]	; (c0037b4 <HAL_RCC_OscConfig+0x760>)
 c0037a2:	f043 0301 	orr.w	r3, r3, #1
 c0037a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0037aa:	f7fe fb2d 	bl	c001e08 <HAL_GetTick>
 c0037ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0037b0:	e014      	b.n	c0037dc <HAL_RCC_OscConfig+0x788>
 c0037b2:	bf00      	nop
 c0037b4:	50021000 	.word	0x50021000
 c0037b8:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c0037bc:	f7fe fb24 	bl	c001e08 <HAL_GetTick>
 c0037c0:	4602      	mov	r2, r0
 c0037c2:	693b      	ldr	r3, [r7, #16]
 c0037c4:	1ad3      	subs	r3, r2, r3
 c0037c6:	2b02      	cmp	r3, #2
 c0037c8:	d908      	bls.n	c0037dc <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0037ca:	4b8a      	ldr	r3, [pc, #552]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0037cc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037d0:	f003 0302 	and.w	r3, r3, #2
 c0037d4:	2b00      	cmp	r3, #0
 c0037d6:	d101      	bne.n	c0037dc <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c0037d8:	2303      	movs	r3, #3
 c0037da:	e107      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c0037dc:	4b85      	ldr	r3, [pc, #532]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0037de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037e2:	f003 0302 	and.w	r3, r3, #2
 c0037e6:	2b00      	cmp	r3, #0
 c0037e8:	d0e8      	beq.n	c0037bc <HAL_RCC_OscConfig+0x768>
 c0037ea:	e022      	b.n	c003832 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c0037ec:	4b81      	ldr	r3, [pc, #516]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0037ee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037f2:	4a80      	ldr	r2, [pc, #512]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0037f4:	f023 0301 	bic.w	r3, r3, #1
 c0037f8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0037fc:	f7fe fb04 	bl	c001e08 <HAL_GetTick>
 c003800:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003802:	e00f      	b.n	c003824 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003804:	f7fe fb00 	bl	c001e08 <HAL_GetTick>
 c003808:	4602      	mov	r2, r0
 c00380a:	693b      	ldr	r3, [r7, #16]
 c00380c:	1ad3      	subs	r3, r2, r3
 c00380e:	2b02      	cmp	r3, #2
 c003810:	d908      	bls.n	c003824 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003812:	4b78      	ldr	r3, [pc, #480]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003818:	f003 0302 	and.w	r3, r3, #2
 c00381c:	2b00      	cmp	r3, #0
 c00381e:	d001      	beq.n	c003824 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c003820:	2303      	movs	r3, #3
 c003822:	e0e3      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003824:	4b73      	ldr	r3, [pc, #460]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003826:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00382a:	f003 0302 	and.w	r3, r3, #2
 c00382e:	2b00      	cmp	r3, #0
 c003830:	d1e8      	bne.n	c003804 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c003832:	687b      	ldr	r3, [r7, #4]
 c003834:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003836:	2b00      	cmp	r3, #0
 c003838:	f000 80d7 	beq.w	c0039ea <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c00383c:	4b6d      	ldr	r3, [pc, #436]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c00383e:	689b      	ldr	r3, [r3, #8]
 c003840:	f003 030c 	and.w	r3, r3, #12
 c003844:	2b0c      	cmp	r3, #12
 c003846:	f000 8091 	beq.w	c00396c <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c00384a:	687b      	ldr	r3, [r7, #4]
 c00384c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00384e:	2b02      	cmp	r3, #2
 c003850:	d166      	bne.n	c003920 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c003852:	4b68      	ldr	r3, [pc, #416]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003854:	681b      	ldr	r3, [r3, #0]
 c003856:	4a67      	ldr	r2, [pc, #412]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003858:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c00385c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00385e:	f7fe fad3 	bl	c001e08 <HAL_GetTick>
 c003862:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003864:	e00e      	b.n	c003884 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003866:	f7fe facf 	bl	c001e08 <HAL_GetTick>
 c00386a:	4602      	mov	r2, r0
 c00386c:	693b      	ldr	r3, [r7, #16]
 c00386e:	1ad3      	subs	r3, r2, r3
 c003870:	2b02      	cmp	r3, #2
 c003872:	d907      	bls.n	c003884 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003874:	4b5f      	ldr	r3, [pc, #380]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003876:	681b      	ldr	r3, [r3, #0]
 c003878:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00387c:	2b00      	cmp	r3, #0
 c00387e:	d001      	beq.n	c003884 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c003880:	2303      	movs	r3, #3
 c003882:	e0b3      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003884:	4b5b      	ldr	r3, [pc, #364]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003886:	681b      	ldr	r3, [r3, #0]
 c003888:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00388c:	2b00      	cmp	r3, #0
 c00388e:	d1ea      	bne.n	c003866 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c003890:	4b58      	ldr	r3, [pc, #352]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003892:	68da      	ldr	r2, [r3, #12]
 c003894:	4b58      	ldr	r3, [pc, #352]	; (c0039f8 <HAL_RCC_OscConfig+0x9a4>)
 c003896:	4013      	ands	r3, r2
 c003898:	687a      	ldr	r2, [r7, #4]
 c00389a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c00389c:	687a      	ldr	r2, [r7, #4]
 c00389e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c0038a0:	3a01      	subs	r2, #1
 c0038a2:	0112      	lsls	r2, r2, #4
 c0038a4:	4311      	orrs	r1, r2
 c0038a6:	687a      	ldr	r2, [r7, #4]
 c0038a8:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c0038aa:	0212      	lsls	r2, r2, #8
 c0038ac:	4311      	orrs	r1, r2
 c0038ae:	687a      	ldr	r2, [r7, #4]
 c0038b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c0038b2:	0852      	lsrs	r2, r2, #1
 c0038b4:	3a01      	subs	r2, #1
 c0038b6:	0552      	lsls	r2, r2, #21
 c0038b8:	4311      	orrs	r1, r2
 c0038ba:	687a      	ldr	r2, [r7, #4]
 c0038bc:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c0038be:	0852      	lsrs	r2, r2, #1
 c0038c0:	3a01      	subs	r2, #1
 c0038c2:	0652      	lsls	r2, r2, #25
 c0038c4:	4311      	orrs	r1, r2
 c0038c6:	687a      	ldr	r2, [r7, #4]
 c0038c8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c0038ca:	06d2      	lsls	r2, r2, #27
 c0038cc:	430a      	orrs	r2, r1
 c0038ce:	4949      	ldr	r1, [pc, #292]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0038d0:	4313      	orrs	r3, r2
 c0038d2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c0038d4:	4b47      	ldr	r3, [pc, #284]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0038d6:	681b      	ldr	r3, [r3, #0]
 c0038d8:	4a46      	ldr	r2, [pc, #280]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0038da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0038de:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c0038e0:	4b44      	ldr	r3, [pc, #272]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0038e2:	68db      	ldr	r3, [r3, #12]
 c0038e4:	4a43      	ldr	r2, [pc, #268]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c0038e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c0038ea:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0038ec:	f7fe fa8c 	bl	c001e08 <HAL_GetTick>
 c0038f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0038f2:	e00e      	b.n	c003912 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0038f4:	f7fe fa88 	bl	c001e08 <HAL_GetTick>
 c0038f8:	4602      	mov	r2, r0
 c0038fa:	693b      	ldr	r3, [r7, #16]
 c0038fc:	1ad3      	subs	r3, r2, r3
 c0038fe:	2b02      	cmp	r3, #2
 c003900:	d907      	bls.n	c003912 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003902:	4b3c      	ldr	r3, [pc, #240]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003904:	681b      	ldr	r3, [r3, #0]
 c003906:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00390a:	2b00      	cmp	r3, #0
 c00390c:	d101      	bne.n	c003912 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c00390e:	2303      	movs	r3, #3
 c003910:	e06c      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003912:	4b38      	ldr	r3, [pc, #224]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003914:	681b      	ldr	r3, [r3, #0]
 c003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00391a:	2b00      	cmp	r3, #0
 c00391c:	d0ea      	beq.n	c0038f4 <HAL_RCC_OscConfig+0x8a0>
 c00391e:	e064      	b.n	c0039ea <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c003920:	4b34      	ldr	r3, [pc, #208]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003922:	681b      	ldr	r3, [r3, #0]
 c003924:	4a33      	ldr	r2, [pc, #204]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003926:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c00392a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00392c:	f7fe fa6c 	bl	c001e08 <HAL_GetTick>
 c003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003932:	e00e      	b.n	c003952 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003934:	f7fe fa68 	bl	c001e08 <HAL_GetTick>
 c003938:	4602      	mov	r2, r0
 c00393a:	693b      	ldr	r3, [r7, #16]
 c00393c:	1ad3      	subs	r3, r2, r3
 c00393e:	2b02      	cmp	r3, #2
 c003940:	d907      	bls.n	c003952 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003942:	4b2c      	ldr	r3, [pc, #176]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003944:	681b      	ldr	r3, [r3, #0]
 c003946:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00394a:	2b00      	cmp	r3, #0
 c00394c:	d001      	beq.n	c003952 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c00394e:	2303      	movs	r3, #3
 c003950:	e04c      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003952:	4b28      	ldr	r3, [pc, #160]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003954:	681b      	ldr	r3, [r3, #0]
 c003956:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00395a:	2b00      	cmp	r3, #0
 c00395c:	d1ea      	bne.n	c003934 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c00395e:	4b25      	ldr	r3, [pc, #148]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003960:	68da      	ldr	r2, [r3, #12]
 c003962:	4924      	ldr	r1, [pc, #144]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c003964:	4b25      	ldr	r3, [pc, #148]	; (c0039fc <HAL_RCC_OscConfig+0x9a8>)
 c003966:	4013      	ands	r3, r2
 c003968:	60cb      	str	r3, [r1, #12]
 c00396a:	e03e      	b.n	c0039ea <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c00396c:	687b      	ldr	r3, [r7, #4]
 c00396e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003970:	2b01      	cmp	r3, #1
 c003972:	d101      	bne.n	c003978 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c003974:	2301      	movs	r3, #1
 c003976:	e039      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c003978:	4b1e      	ldr	r3, [pc, #120]	; (c0039f4 <HAL_RCC_OscConfig+0x9a0>)
 c00397a:	68db      	ldr	r3, [r3, #12]
 c00397c:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00397e:	697b      	ldr	r3, [r7, #20]
 c003980:	f003 0203 	and.w	r2, r3, #3
 c003984:	687b      	ldr	r3, [r7, #4]
 c003986:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003988:	429a      	cmp	r2, r3
 c00398a:	d12c      	bne.n	c0039e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00398c:	697b      	ldr	r3, [r7, #20]
 c00398e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c003992:	687b      	ldr	r3, [r7, #4]
 c003994:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003996:	3b01      	subs	r3, #1
 c003998:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00399a:	429a      	cmp	r2, r3
 c00399c:	d123      	bne.n	c0039e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00399e:	697b      	ldr	r3, [r7, #20]
 c0039a0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c0039a4:	687b      	ldr	r3, [r7, #4]
 c0039a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0039a8:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0039aa:	429a      	cmp	r2, r3
 c0039ac:	d11b      	bne.n	c0039e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0039ae:	697b      	ldr	r3, [r7, #20]
 c0039b0:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c0039b4:	687b      	ldr	r3, [r7, #4]
 c0039b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0039b8:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c0039ba:	429a      	cmp	r2, r3
 c0039bc:	d113      	bne.n	c0039e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0039be:	697b      	ldr	r3, [r7, #20]
 c0039c0:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c0039c4:	687b      	ldr	r3, [r7, #4]
 c0039c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0039c8:	085b      	lsrs	r3, r3, #1
 c0039ca:	3b01      	subs	r3, #1
 c0039cc:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c0039ce:	429a      	cmp	r2, r3
 c0039d0:	d109      	bne.n	c0039e6 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c0039d2:	697b      	ldr	r3, [r7, #20]
 c0039d4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c0039d8:	687b      	ldr	r3, [r7, #4]
 c0039da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0039dc:	085b      	lsrs	r3, r3, #1
 c0039de:	3b01      	subs	r3, #1
 c0039e0:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c0039e2:	429a      	cmp	r2, r3
 c0039e4:	d001      	beq.n	c0039ea <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c0039e6:	2301      	movs	r3, #1
 c0039e8:	e000      	b.n	c0039ec <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c0039ea:	2300      	movs	r3, #0
}
 c0039ec:	4618      	mov	r0, r3
 c0039ee:	3720      	adds	r7, #32
 c0039f0:	46bd      	mov	sp, r7
 c0039f2:	bd80      	pop	{r7, pc}
 c0039f4:	50021000 	.word	0x50021000
 c0039f8:	019f800c 	.word	0x019f800c
 c0039fc:	feeefffc 	.word	0xfeeefffc

0c003a00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c003a00:	b580      	push	{r7, lr}
 c003a02:	b086      	sub	sp, #24
 c003a04:	af00      	add	r7, sp, #0
 c003a06:	6078      	str	r0, [r7, #4]
 c003a08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c003a0a:	2300      	movs	r3, #0
 c003a0c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c003a0e:	687b      	ldr	r3, [r7, #4]
 c003a10:	2b00      	cmp	r3, #0
 c003a12:	d101      	bne.n	c003a18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c003a14:	2301      	movs	r3, #1
 c003a16:	e11c      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003a18:	4b90      	ldr	r3, [pc, #576]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003a1a:	681b      	ldr	r3, [r3, #0]
 c003a1c:	f003 030f 	and.w	r3, r3, #15
 c003a20:	683a      	ldr	r2, [r7, #0]
 c003a22:	429a      	cmp	r2, r3
 c003a24:	d910      	bls.n	c003a48 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003a26:	4b8d      	ldr	r3, [pc, #564]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003a28:	681b      	ldr	r3, [r3, #0]
 c003a2a:	f023 020f 	bic.w	r2, r3, #15
 c003a2e:	498b      	ldr	r1, [pc, #556]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003a30:	683b      	ldr	r3, [r7, #0]
 c003a32:	4313      	orrs	r3, r2
 c003a34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003a36:	4b89      	ldr	r3, [pc, #548]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003a38:	681b      	ldr	r3, [r3, #0]
 c003a3a:	f003 030f 	and.w	r3, r3, #15
 c003a3e:	683a      	ldr	r2, [r7, #0]
 c003a40:	429a      	cmp	r2, r3
 c003a42:	d001      	beq.n	c003a48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c003a44:	2301      	movs	r3, #1
 c003a46:	e104      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003a48:	687b      	ldr	r3, [r7, #4]
 c003a4a:	681b      	ldr	r3, [r3, #0]
 c003a4c:	f003 0302 	and.w	r3, r3, #2
 c003a50:	2b00      	cmp	r3, #0
 c003a52:	d010      	beq.n	c003a76 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003a54:	687b      	ldr	r3, [r7, #4]
 c003a56:	689a      	ldr	r2, [r3, #8]
 c003a58:	4b81      	ldr	r3, [pc, #516]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003a5a:	689b      	ldr	r3, [r3, #8]
 c003a5c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003a60:	429a      	cmp	r2, r3
 c003a62:	d908      	bls.n	c003a76 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003a64:	4b7e      	ldr	r3, [pc, #504]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003a66:	689b      	ldr	r3, [r3, #8]
 c003a68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003a6c:	687b      	ldr	r3, [r7, #4]
 c003a6e:	689b      	ldr	r3, [r3, #8]
 c003a70:	497b      	ldr	r1, [pc, #492]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003a72:	4313      	orrs	r3, r2
 c003a74:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c003a76:	687b      	ldr	r3, [r7, #4]
 c003a78:	681b      	ldr	r3, [r3, #0]
 c003a7a:	f003 0301 	and.w	r3, r3, #1
 c003a7e:	2b00      	cmp	r3, #0
 c003a80:	f000 8085 	beq.w	c003b8e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003a84:	687b      	ldr	r3, [r7, #4]
 c003a86:	685b      	ldr	r3, [r3, #4]
 c003a88:	2b03      	cmp	r3, #3
 c003a8a:	d11f      	bne.n	c003acc <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003a8c:	4b74      	ldr	r3, [pc, #464]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003a8e:	681b      	ldr	r3, [r3, #0]
 c003a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003a94:	2b00      	cmp	r3, #0
 c003a96:	d101      	bne.n	c003a9c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c003a98:	2301      	movs	r3, #1
 c003a9a:	e0da      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c003a9c:	f000 fa26 	bl	c003eec <RCC_GetSysClockFreqFromPLLSource>
 c003aa0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c003aa2:	693b      	ldr	r3, [r7, #16]
 c003aa4:	4a6f      	ldr	r2, [pc, #444]	; (c003c64 <HAL_RCC_ClockConfig+0x264>)
 c003aa6:	4293      	cmp	r3, r2
 c003aa8:	d947      	bls.n	c003b3a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003aaa:	4b6d      	ldr	r3, [pc, #436]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003aac:	689b      	ldr	r3, [r3, #8]
 c003aae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003ab2:	2b00      	cmp	r3, #0
 c003ab4:	d141      	bne.n	c003b3a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003ab6:	4b6a      	ldr	r3, [pc, #424]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003ab8:	689b      	ldr	r3, [r3, #8]
 c003aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003abe:	4a68      	ldr	r2, [pc, #416]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003ac0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003ac4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003ac6:	2380      	movs	r3, #128	; 0x80
 c003ac8:	617b      	str	r3, [r7, #20]
 c003aca:	e036      	b.n	c003b3a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003acc:	687b      	ldr	r3, [r7, #4]
 c003ace:	685b      	ldr	r3, [r3, #4]
 c003ad0:	2b02      	cmp	r3, #2
 c003ad2:	d107      	bne.n	c003ae4 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003ad4:	4b62      	ldr	r3, [pc, #392]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003ad6:	681b      	ldr	r3, [r3, #0]
 c003ad8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003adc:	2b00      	cmp	r3, #0
 c003ade:	d115      	bne.n	c003b0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003ae0:	2301      	movs	r3, #1
 c003ae2:	e0b6      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003ae4:	687b      	ldr	r3, [r7, #4]
 c003ae6:	685b      	ldr	r3, [r3, #4]
 c003ae8:	2b00      	cmp	r3, #0
 c003aea:	d107      	bne.n	c003afc <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003aec:	4b5c      	ldr	r3, [pc, #368]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003aee:	681b      	ldr	r3, [r3, #0]
 c003af0:	f003 0302 	and.w	r3, r3, #2
 c003af4:	2b00      	cmp	r3, #0
 c003af6:	d109      	bne.n	c003b0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003af8:	2301      	movs	r3, #1
 c003afa:	e0aa      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003afc:	4b58      	ldr	r3, [pc, #352]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003afe:	681b      	ldr	r3, [r3, #0]
 c003b00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003b04:	2b00      	cmp	r3, #0
 c003b06:	d101      	bne.n	c003b0c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003b08:	2301      	movs	r3, #1
 c003b0a:	e0a2      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c003b0c:	f000 f8b0 	bl	c003c70 <HAL_RCC_GetSysClockFreq>
 c003b10:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c003b12:	693b      	ldr	r3, [r7, #16]
 c003b14:	4a53      	ldr	r2, [pc, #332]	; (c003c64 <HAL_RCC_ClockConfig+0x264>)
 c003b16:	4293      	cmp	r3, r2
 c003b18:	d90f      	bls.n	c003b3a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003b1a:	4b51      	ldr	r3, [pc, #324]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b1c:	689b      	ldr	r3, [r3, #8]
 c003b1e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003b22:	2b00      	cmp	r3, #0
 c003b24:	d109      	bne.n	c003b3a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003b26:	4b4e      	ldr	r3, [pc, #312]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b28:	689b      	ldr	r3, [r3, #8]
 c003b2a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003b2e:	4a4c      	ldr	r2, [pc, #304]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b30:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003b34:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003b36:	2380      	movs	r3, #128	; 0x80
 c003b38:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c003b3a:	4b49      	ldr	r3, [pc, #292]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b3c:	689b      	ldr	r3, [r3, #8]
 c003b3e:	f023 0203 	bic.w	r2, r3, #3
 c003b42:	687b      	ldr	r3, [r7, #4]
 c003b44:	685b      	ldr	r3, [r3, #4]
 c003b46:	4946      	ldr	r1, [pc, #280]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b48:	4313      	orrs	r3, r2
 c003b4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003b4c:	f7fe f95c 	bl	c001e08 <HAL_GetTick>
 c003b50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003b52:	e013      	b.n	c003b7c <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003b54:	f7fe f958 	bl	c001e08 <HAL_GetTick>
 c003b58:	4602      	mov	r2, r0
 c003b5a:	68fb      	ldr	r3, [r7, #12]
 c003b5c:	1ad3      	subs	r3, r2, r3
 c003b5e:	f241 3288 	movw	r2, #5000	; 0x1388
 c003b62:	4293      	cmp	r3, r2
 c003b64:	d90a      	bls.n	c003b7c <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003b66:	4b3e      	ldr	r3, [pc, #248]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b68:	689b      	ldr	r3, [r3, #8]
 c003b6a:	f003 020c 	and.w	r2, r3, #12
 c003b6e:	687b      	ldr	r3, [r7, #4]
 c003b70:	685b      	ldr	r3, [r3, #4]
 c003b72:	009b      	lsls	r3, r3, #2
 c003b74:	429a      	cmp	r2, r3
 c003b76:	d001      	beq.n	c003b7c <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c003b78:	2303      	movs	r3, #3
 c003b7a:	e06a      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003b7c:	4b38      	ldr	r3, [pc, #224]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b7e:	689b      	ldr	r3, [r3, #8]
 c003b80:	f003 020c 	and.w	r2, r3, #12
 c003b84:	687b      	ldr	r3, [r7, #4]
 c003b86:	685b      	ldr	r3, [r3, #4]
 c003b88:	009b      	lsls	r3, r3, #2
 c003b8a:	429a      	cmp	r2, r3
 c003b8c:	d1e2      	bne.n	c003b54 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c003b8e:	697b      	ldr	r3, [r7, #20]
 c003b90:	2b80      	cmp	r3, #128	; 0x80
 c003b92:	d105      	bne.n	c003ba0 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c003b94:	4b32      	ldr	r3, [pc, #200]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b96:	689b      	ldr	r3, [r3, #8]
 c003b98:	4a31      	ldr	r2, [pc, #196]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003b9e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003ba0:	687b      	ldr	r3, [r7, #4]
 c003ba2:	681b      	ldr	r3, [r3, #0]
 c003ba4:	f003 0302 	and.w	r3, r3, #2
 c003ba8:	2b00      	cmp	r3, #0
 c003baa:	d010      	beq.n	c003bce <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003bac:	687b      	ldr	r3, [r7, #4]
 c003bae:	689a      	ldr	r2, [r3, #8]
 c003bb0:	4b2b      	ldr	r3, [pc, #172]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003bb2:	689b      	ldr	r3, [r3, #8]
 c003bb4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003bb8:	429a      	cmp	r2, r3
 c003bba:	d208      	bcs.n	c003bce <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003bbc:	4b28      	ldr	r3, [pc, #160]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003bbe:	689b      	ldr	r3, [r3, #8]
 c003bc0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003bc4:	687b      	ldr	r3, [r7, #4]
 c003bc6:	689b      	ldr	r3, [r3, #8]
 c003bc8:	4925      	ldr	r1, [pc, #148]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003bca:	4313      	orrs	r3, r2
 c003bcc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003bce:	4b23      	ldr	r3, [pc, #140]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003bd0:	681b      	ldr	r3, [r3, #0]
 c003bd2:	f003 030f 	and.w	r3, r3, #15
 c003bd6:	683a      	ldr	r2, [r7, #0]
 c003bd8:	429a      	cmp	r2, r3
 c003bda:	d210      	bcs.n	c003bfe <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003bdc:	4b1f      	ldr	r3, [pc, #124]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003bde:	681b      	ldr	r3, [r3, #0]
 c003be0:	f023 020f 	bic.w	r2, r3, #15
 c003be4:	491d      	ldr	r1, [pc, #116]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003be6:	683b      	ldr	r3, [r7, #0]
 c003be8:	4313      	orrs	r3, r2
 c003bea:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003bec:	4b1b      	ldr	r3, [pc, #108]	; (c003c5c <HAL_RCC_ClockConfig+0x25c>)
 c003bee:	681b      	ldr	r3, [r3, #0]
 c003bf0:	f003 030f 	and.w	r3, r3, #15
 c003bf4:	683a      	ldr	r2, [r7, #0]
 c003bf6:	429a      	cmp	r2, r3
 c003bf8:	d001      	beq.n	c003bfe <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c003bfa:	2301      	movs	r3, #1
 c003bfc:	e029      	b.n	c003c52 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003bfe:	687b      	ldr	r3, [r7, #4]
 c003c00:	681b      	ldr	r3, [r3, #0]
 c003c02:	f003 0304 	and.w	r3, r3, #4
 c003c06:	2b00      	cmp	r3, #0
 c003c08:	d008      	beq.n	c003c1c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c003c0a:	4b15      	ldr	r3, [pc, #84]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003c0c:	689b      	ldr	r3, [r3, #8]
 c003c0e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003c12:	687b      	ldr	r3, [r7, #4]
 c003c14:	68db      	ldr	r3, [r3, #12]
 c003c16:	4912      	ldr	r1, [pc, #72]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003c18:	4313      	orrs	r3, r2
 c003c1a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003c1c:	687b      	ldr	r3, [r7, #4]
 c003c1e:	681b      	ldr	r3, [r3, #0]
 c003c20:	f003 0308 	and.w	r3, r3, #8
 c003c24:	2b00      	cmp	r3, #0
 c003c26:	d009      	beq.n	c003c3c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c003c28:	4b0d      	ldr	r3, [pc, #52]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003c2a:	689b      	ldr	r3, [r3, #8]
 c003c2c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c003c30:	687b      	ldr	r3, [r7, #4]
 c003c32:	691b      	ldr	r3, [r3, #16]
 c003c34:	00db      	lsls	r3, r3, #3
 c003c36:	490a      	ldr	r1, [pc, #40]	; (c003c60 <HAL_RCC_ClockConfig+0x260>)
 c003c38:	4313      	orrs	r3, r2
 c003c3a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003c3c:	f000 f8b6 	bl	c003dac <HAL_RCC_GetHCLKFreq>
 c003c40:	4603      	mov	r3, r0
 c003c42:	4a09      	ldr	r2, [pc, #36]	; (c003c68 <HAL_RCC_ClockConfig+0x268>)
 c003c44:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c003c46:	4b09      	ldr	r3, [pc, #36]	; (c003c6c <HAL_RCC_ClockConfig+0x26c>)
 c003c48:	681b      	ldr	r3, [r3, #0]
 c003c4a:	4618      	mov	r0, r3
 c003c4c:	f7fe f88c 	bl	c001d68 <HAL_InitTick>
 c003c50:	4603      	mov	r3, r0
}
 c003c52:	4618      	mov	r0, r3
 c003c54:	3718      	adds	r7, #24
 c003c56:	46bd      	mov	sp, r7
 c003c58:	bd80      	pop	{r7, pc}
 c003c5a:	bf00      	nop
 c003c5c:	50022000 	.word	0x50022000
 c003c60:	50021000 	.word	0x50021000
 c003c64:	04c4b400 	.word	0x04c4b400
 c003c68:	3000003c 	.word	0x3000003c
 c003c6c:	30000040 	.word	0x30000040

0c003c70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c003c70:	b480      	push	{r7}
 c003c72:	b089      	sub	sp, #36	; 0x24
 c003c74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c003c76:	2300      	movs	r3, #0
 c003c78:	61fb      	str	r3, [r7, #28]
 c003c7a:	2300      	movs	r3, #0
 c003c7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003c7e:	4b47      	ldr	r3, [pc, #284]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c80:	689b      	ldr	r3, [r3, #8]
 c003c82:	f003 030c 	and.w	r3, r3, #12
 c003c86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003c88:	4b44      	ldr	r3, [pc, #272]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c8a:	68db      	ldr	r3, [r3, #12]
 c003c8c:	f003 0303 	and.w	r3, r3, #3
 c003c90:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003c92:	693b      	ldr	r3, [r7, #16]
 c003c94:	2b00      	cmp	r3, #0
 c003c96:	d005      	beq.n	c003ca4 <HAL_RCC_GetSysClockFreq+0x34>
 c003c98:	693b      	ldr	r3, [r7, #16]
 c003c9a:	2b0c      	cmp	r3, #12
 c003c9c:	d121      	bne.n	c003ce2 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c003c9e:	68fb      	ldr	r3, [r7, #12]
 c003ca0:	2b01      	cmp	r3, #1
 c003ca2:	d11e      	bne.n	c003ce2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003ca4:	4b3d      	ldr	r3, [pc, #244]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003ca6:	681b      	ldr	r3, [r3, #0]
 c003ca8:	f003 0308 	and.w	r3, r3, #8
 c003cac:	2b00      	cmp	r3, #0
 c003cae:	d107      	bne.n	c003cc0 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003cb0:	4b3a      	ldr	r3, [pc, #232]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003cb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003cb6:	0a1b      	lsrs	r3, r3, #8
 c003cb8:	f003 030f 	and.w	r3, r3, #15
 c003cbc:	61fb      	str	r3, [r7, #28]
 c003cbe:	e005      	b.n	c003ccc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003cc0:	4b36      	ldr	r3, [pc, #216]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003cc2:	681b      	ldr	r3, [r3, #0]
 c003cc4:	091b      	lsrs	r3, r3, #4
 c003cc6:	f003 030f 	and.w	r3, r3, #15
 c003cca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c003ccc:	4a34      	ldr	r2, [pc, #208]	; (c003da0 <HAL_RCC_GetSysClockFreq+0x130>)
 c003cce:	69fb      	ldr	r3, [r7, #28]
 c003cd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003cd4:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003cd6:	693b      	ldr	r3, [r7, #16]
 c003cd8:	2b00      	cmp	r3, #0
 c003cda:	d10d      	bne.n	c003cf8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c003cdc:	69fb      	ldr	r3, [r7, #28]
 c003cde:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003ce0:	e00a      	b.n	c003cf8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003ce2:	693b      	ldr	r3, [r7, #16]
 c003ce4:	2b04      	cmp	r3, #4
 c003ce6:	d102      	bne.n	c003cee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003ce8:	4b2e      	ldr	r3, [pc, #184]	; (c003da4 <HAL_RCC_GetSysClockFreq+0x134>)
 c003cea:	61bb      	str	r3, [r7, #24]
 c003cec:	e004      	b.n	c003cf8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c003cee:	693b      	ldr	r3, [r7, #16]
 c003cf0:	2b08      	cmp	r3, #8
 c003cf2:	d101      	bne.n	c003cf8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003cf4:	4b2c      	ldr	r3, [pc, #176]	; (c003da8 <HAL_RCC_GetSysClockFreq+0x138>)
 c003cf6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003cf8:	693b      	ldr	r3, [r7, #16]
 c003cfa:	2b0c      	cmp	r3, #12
 c003cfc:	d146      	bne.n	c003d8c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003cfe:	4b27      	ldr	r3, [pc, #156]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d00:	68db      	ldr	r3, [r3, #12]
 c003d02:	f003 0303 	and.w	r3, r3, #3
 c003d06:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003d08:	4b24      	ldr	r3, [pc, #144]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d0a:	68db      	ldr	r3, [r3, #12]
 c003d0c:	091b      	lsrs	r3, r3, #4
 c003d0e:	f003 030f 	and.w	r3, r3, #15
 c003d12:	3301      	adds	r3, #1
 c003d14:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c003d16:	68bb      	ldr	r3, [r7, #8]
 c003d18:	2b02      	cmp	r3, #2
 c003d1a:	d003      	beq.n	c003d24 <HAL_RCC_GetSysClockFreq+0xb4>
 c003d1c:	68bb      	ldr	r3, [r7, #8]
 c003d1e:	2b03      	cmp	r3, #3
 c003d20:	d00d      	beq.n	c003d3e <HAL_RCC_GetSysClockFreq+0xce>
 c003d22:	e019      	b.n	c003d58 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003d24:	4a1f      	ldr	r2, [pc, #124]	; (c003da4 <HAL_RCC_GetSysClockFreq+0x134>)
 c003d26:	687b      	ldr	r3, [r7, #4]
 c003d28:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d2c:	4a1b      	ldr	r2, [pc, #108]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d2e:	68d2      	ldr	r2, [r2, #12]
 c003d30:	0a12      	lsrs	r2, r2, #8
 c003d32:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003d36:	fb02 f303 	mul.w	r3, r2, r3
 c003d3a:	617b      	str	r3, [r7, #20]
        break;
 c003d3c:	e019      	b.n	c003d72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003d3e:	4a1a      	ldr	r2, [pc, #104]	; (c003da8 <HAL_RCC_GetSysClockFreq+0x138>)
 c003d40:	687b      	ldr	r3, [r7, #4]
 c003d42:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d46:	4a15      	ldr	r2, [pc, #84]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d48:	68d2      	ldr	r2, [r2, #12]
 c003d4a:	0a12      	lsrs	r2, r2, #8
 c003d4c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003d50:	fb02 f303 	mul.w	r3, r2, r3
 c003d54:	617b      	str	r3, [r7, #20]
        break;
 c003d56:	e00c      	b.n	c003d72 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003d58:	69fa      	ldr	r2, [r7, #28]
 c003d5a:	687b      	ldr	r3, [r7, #4]
 c003d5c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d60:	4a0e      	ldr	r2, [pc, #56]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d62:	68d2      	ldr	r2, [r2, #12]
 c003d64:	0a12      	lsrs	r2, r2, #8
 c003d66:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003d6a:	fb02 f303 	mul.w	r3, r2, r3
 c003d6e:	617b      	str	r3, [r7, #20]
        break;
 c003d70:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003d72:	4b0a      	ldr	r3, [pc, #40]	; (c003d9c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d74:	68db      	ldr	r3, [r3, #12]
 c003d76:	0e5b      	lsrs	r3, r3, #25
 c003d78:	f003 0303 	and.w	r3, r3, #3
 c003d7c:	3301      	adds	r3, #1
 c003d7e:	005b      	lsls	r3, r3, #1
 c003d80:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c003d82:	697a      	ldr	r2, [r7, #20]
 c003d84:	683b      	ldr	r3, [r7, #0]
 c003d86:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d8a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c003d8c:	69bb      	ldr	r3, [r7, #24]
}
 c003d8e:	4618      	mov	r0, r3
 c003d90:	3724      	adds	r7, #36	; 0x24
 c003d92:	46bd      	mov	sp, r7
 c003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d98:	4770      	bx	lr
 c003d9a:	bf00      	nop
 c003d9c:	50021000 	.word	0x50021000
 c003da0:	0c008164 	.word	0x0c008164
 c003da4:	00f42400 	.word	0x00f42400
 c003da8:	007a1200 	.word	0x007a1200

0c003dac <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c003dac:	b580      	push	{r7, lr}
 c003dae:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c003db0:	f7ff ff5e 	bl	c003c70 <HAL_RCC_GetSysClockFreq>
 c003db4:	4602      	mov	r2, r0
 c003db6:	4b05      	ldr	r3, [pc, #20]	; (c003dcc <HAL_RCC_GetHCLKFreq+0x20>)
 c003db8:	689b      	ldr	r3, [r3, #8]
 c003dba:	091b      	lsrs	r3, r3, #4
 c003dbc:	f003 030f 	and.w	r3, r3, #15
 c003dc0:	4903      	ldr	r1, [pc, #12]	; (c003dd0 <HAL_RCC_GetHCLKFreq+0x24>)
 c003dc2:	5ccb      	ldrb	r3, [r1, r3]
 c003dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003dc8:	4618      	mov	r0, r3
 c003dca:	bd80      	pop	{r7, pc}
 c003dcc:	50021000 	.word	0x50021000
 c003dd0:	0c00814c 	.word	0x0c00814c

0c003dd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003dd4:	b580      	push	{r7, lr}
 c003dd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c003dd8:	f7ff ffe8 	bl	c003dac <HAL_RCC_GetHCLKFreq>
 c003ddc:	4602      	mov	r2, r0
 c003dde:	4b05      	ldr	r3, [pc, #20]	; (c003df4 <HAL_RCC_GetPCLK1Freq+0x20>)
 c003de0:	689b      	ldr	r3, [r3, #8]
 c003de2:	0a1b      	lsrs	r3, r3, #8
 c003de4:	f003 0307 	and.w	r3, r3, #7
 c003de8:	4903      	ldr	r1, [pc, #12]	; (c003df8 <HAL_RCC_GetPCLK1Freq+0x24>)
 c003dea:	5ccb      	ldrb	r3, [r1, r3]
 c003dec:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003df0:	4618      	mov	r0, r3
 c003df2:	bd80      	pop	{r7, pc}
 c003df4:	50021000 	.word	0x50021000
 c003df8:	0c00815c 	.word	0x0c00815c

0c003dfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c003dfc:	b580      	push	{r7, lr}
 c003dfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c003e00:	f7ff ffd4 	bl	c003dac <HAL_RCC_GetHCLKFreq>
 c003e04:	4602      	mov	r2, r0
 c003e06:	4b05      	ldr	r3, [pc, #20]	; (c003e1c <HAL_RCC_GetPCLK2Freq+0x20>)
 c003e08:	689b      	ldr	r3, [r3, #8]
 c003e0a:	0adb      	lsrs	r3, r3, #11
 c003e0c:	f003 0307 	and.w	r3, r3, #7
 c003e10:	4903      	ldr	r1, [pc, #12]	; (c003e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 c003e12:	5ccb      	ldrb	r3, [r1, r3]
 c003e14:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003e18:	4618      	mov	r0, r3
 c003e1a:	bd80      	pop	{r7, pc}
 c003e1c:	50021000 	.word	0x50021000
 c003e20:	0c00815c 	.word	0x0c00815c

0c003e24 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c003e24:	b580      	push	{r7, lr}
 c003e26:	b086      	sub	sp, #24
 c003e28:	af00      	add	r7, sp, #0
 c003e2a:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c003e2c:	2300      	movs	r3, #0
 c003e2e:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c003e30:	4b2c      	ldr	r3, [pc, #176]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003e34:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003e38:	2b00      	cmp	r3, #0
 c003e3a:	d003      	beq.n	c003e44 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c003e3c:	f7ff f85c 	bl	c002ef8 <HAL_PWREx_GetVoltageRange>
 c003e40:	6138      	str	r0, [r7, #16]
 c003e42:	e014      	b.n	c003e6e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c003e44:	4b27      	ldr	r3, [pc, #156]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003e48:	4a26      	ldr	r2, [pc, #152]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003e4e:	6593      	str	r3, [r2, #88]	; 0x58
 c003e50:	4b24      	ldr	r3, [pc, #144]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003e54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003e58:	60fb      	str	r3, [r7, #12]
 c003e5a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c003e5c:	f7ff f84c 	bl	c002ef8 <HAL_PWREx_GetVoltageRange>
 c003e60:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c003e62:	4b20      	ldr	r3, [pc, #128]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003e66:	4a1f      	ldr	r2, [pc, #124]	; (c003ee4 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e68:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003e6c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c003e6e:	693b      	ldr	r3, [r7, #16]
 c003e70:	2b00      	cmp	r3, #0
 c003e72:	d003      	beq.n	c003e7c <RCC_SetFlashLatencyFromMSIRange+0x58>
 c003e74:	693b      	ldr	r3, [r7, #16]
 c003e76:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003e7a:	d10b      	bne.n	c003e94 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c003e7c:	687b      	ldr	r3, [r7, #4]
 c003e7e:	2b80      	cmp	r3, #128	; 0x80
 c003e80:	d919      	bls.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c003e82:	687b      	ldr	r3, [r7, #4]
 c003e84:	2ba0      	cmp	r3, #160	; 0xa0
 c003e86:	d902      	bls.n	c003e8e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003e88:	2302      	movs	r3, #2
 c003e8a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003e8c:	e013      	b.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003e8e:	2301      	movs	r3, #1
 c003e90:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003e92:	e010      	b.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c003e94:	687b      	ldr	r3, [r7, #4]
 c003e96:	2b80      	cmp	r3, #128	; 0x80
 c003e98:	d902      	bls.n	c003ea0 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c003e9a:	2303      	movs	r3, #3
 c003e9c:	617b      	str	r3, [r7, #20]
 c003e9e:	e00a      	b.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c003ea0:	687b      	ldr	r3, [r7, #4]
 c003ea2:	2b80      	cmp	r3, #128	; 0x80
 c003ea4:	d102      	bne.n	c003eac <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003ea6:	2302      	movs	r3, #2
 c003ea8:	617b      	str	r3, [r7, #20]
 c003eaa:	e004      	b.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c003eac:	687b      	ldr	r3, [r7, #4]
 c003eae:	2b70      	cmp	r3, #112	; 0x70
 c003eb0:	d101      	bne.n	c003eb6 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003eb2:	2301      	movs	r3, #1
 c003eb4:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003eb6:	4b0c      	ldr	r3, [pc, #48]	; (c003ee8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003eb8:	681b      	ldr	r3, [r3, #0]
 c003eba:	f023 020f 	bic.w	r2, r3, #15
 c003ebe:	490a      	ldr	r1, [pc, #40]	; (c003ee8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003ec0:	697b      	ldr	r3, [r7, #20]
 c003ec2:	4313      	orrs	r3, r2
 c003ec4:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003ec6:	4b08      	ldr	r3, [pc, #32]	; (c003ee8 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003ec8:	681b      	ldr	r3, [r3, #0]
 c003eca:	f003 030f 	and.w	r3, r3, #15
 c003ece:	697a      	ldr	r2, [r7, #20]
 c003ed0:	429a      	cmp	r2, r3
 c003ed2:	d001      	beq.n	c003ed8 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c003ed4:	2301      	movs	r3, #1
 c003ed6:	e000      	b.n	c003eda <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c003ed8:	2300      	movs	r3, #0
}
 c003eda:	4618      	mov	r0, r3
 c003edc:	3718      	adds	r7, #24
 c003ede:	46bd      	mov	sp, r7
 c003ee0:	bd80      	pop	{r7, pc}
 c003ee2:	bf00      	nop
 c003ee4:	50021000 	.word	0x50021000
 c003ee8:	50022000 	.word	0x50022000

0c003eec <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c003eec:	b480      	push	{r7}
 c003eee:	b087      	sub	sp, #28
 c003ef0:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c003ef2:	4b31      	ldr	r3, [pc, #196]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ef4:	68db      	ldr	r3, [r3, #12]
 c003ef6:	f003 0303 	and.w	r3, r3, #3
 c003efa:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003efc:	4b2e      	ldr	r3, [pc, #184]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003efe:	68db      	ldr	r3, [r3, #12]
 c003f00:	091b      	lsrs	r3, r3, #4
 c003f02:	f003 030f 	and.w	r3, r3, #15
 c003f06:	3301      	adds	r3, #1
 c003f08:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c003f0a:	68fb      	ldr	r3, [r7, #12]
 c003f0c:	2b03      	cmp	r3, #3
 c003f0e:	d015      	beq.n	c003f3c <RCC_GetSysClockFreqFromPLLSource+0x50>
 c003f10:	68fb      	ldr	r3, [r7, #12]
 c003f12:	2b03      	cmp	r3, #3
 c003f14:	d839      	bhi.n	c003f8a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c003f16:	68fb      	ldr	r3, [r7, #12]
 c003f18:	2b01      	cmp	r3, #1
 c003f1a:	d01c      	beq.n	c003f56 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c003f1c:	68fb      	ldr	r3, [r7, #12]
 c003f1e:	2b02      	cmp	r3, #2
 c003f20:	d133      	bne.n	c003f8a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003f22:	4a26      	ldr	r2, [pc, #152]	; (c003fbc <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c003f24:	68bb      	ldr	r3, [r7, #8]
 c003f26:	fbb2 f3f3 	udiv	r3, r2, r3
 c003f2a:	4a23      	ldr	r2, [pc, #140]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f2c:	68d2      	ldr	r2, [r2, #12]
 c003f2e:	0a12      	lsrs	r2, r2, #8
 c003f30:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003f34:	fb02 f303 	mul.w	r3, r2, r3
 c003f38:	613b      	str	r3, [r7, #16]
      break;
 c003f3a:	e029      	b.n	c003f90 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003f3c:	4a20      	ldr	r2, [pc, #128]	; (c003fc0 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c003f3e:	68bb      	ldr	r3, [r7, #8]
 c003f40:	fbb2 f3f3 	udiv	r3, r2, r3
 c003f44:	4a1c      	ldr	r2, [pc, #112]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f46:	68d2      	ldr	r2, [r2, #12]
 c003f48:	0a12      	lsrs	r2, r2, #8
 c003f4a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003f4e:	fb02 f303 	mul.w	r3, r2, r3
 c003f52:	613b      	str	r3, [r7, #16]
      break;
 c003f54:	e01c      	b.n	c003f90 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003f56:	4b18      	ldr	r3, [pc, #96]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f58:	681b      	ldr	r3, [r3, #0]
 c003f5a:	f003 0308 	and.w	r3, r3, #8
 c003f5e:	2b00      	cmp	r3, #0
 c003f60:	d107      	bne.n	c003f72 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003f62:	4b15      	ldr	r3, [pc, #84]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003f68:	0a1b      	lsrs	r3, r3, #8
 c003f6a:	f003 030f 	and.w	r3, r3, #15
 c003f6e:	617b      	str	r3, [r7, #20]
 c003f70:	e005      	b.n	c003f7e <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003f72:	4b11      	ldr	r3, [pc, #68]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f74:	681b      	ldr	r3, [r3, #0]
 c003f76:	091b      	lsrs	r3, r3, #4
 c003f78:	f003 030f 	and.w	r3, r3, #15
 c003f7c:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c003f7e:	4a11      	ldr	r2, [pc, #68]	; (c003fc4 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c003f80:	697b      	ldr	r3, [r7, #20]
 c003f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003f86:	613b      	str	r3, [r7, #16]
        break;
 c003f88:	e002      	b.n	c003f90 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c003f8a:	2300      	movs	r3, #0
 c003f8c:	613b      	str	r3, [r7, #16]
      break;
 c003f8e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003f90:	4b09      	ldr	r3, [pc, #36]	; (c003fb8 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f92:	68db      	ldr	r3, [r3, #12]
 c003f94:	0e5b      	lsrs	r3, r3, #25
 c003f96:	f003 0303 	and.w	r3, r3, #3
 c003f9a:	3301      	adds	r3, #1
 c003f9c:	005b      	lsls	r3, r3, #1
 c003f9e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c003fa0:	693a      	ldr	r2, [r7, #16]
 c003fa2:	687b      	ldr	r3, [r7, #4]
 c003fa4:	fbb2 f3f3 	udiv	r3, r2, r3
 c003fa8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c003faa:	683b      	ldr	r3, [r7, #0]
}
 c003fac:	4618      	mov	r0, r3
 c003fae:	371c      	adds	r7, #28
 c003fb0:	46bd      	mov	sp, r7
 c003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003fb6:	4770      	bx	lr
 c003fb8:	50021000 	.word	0x50021000
 c003fbc:	00f42400 	.word	0x00f42400
 c003fc0:	007a1200 	.word	0x007a1200
 c003fc4:	0c008164 	.word	0x0c008164

0c003fc8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c003fc8:	b580      	push	{r7, lr}
 c003fca:	b088      	sub	sp, #32
 c003fcc:	af00      	add	r7, sp, #0
 c003fce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c003fd0:	2300      	movs	r3, #0
 c003fd2:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003fd4:	2300      	movs	r3, #0
 c003fd6:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003fd8:	687b      	ldr	r3, [r7, #4]
 c003fda:	681b      	ldr	r3, [r3, #0]
 c003fdc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003fe0:	2b00      	cmp	r3, #0
 c003fe2:	d040      	beq.n	c004066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c003fe4:	687b      	ldr	r3, [r7, #4]
 c003fe6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003fe8:	2b80      	cmp	r3, #128	; 0x80
 c003fea:	d02a      	beq.n	c004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003fec:	2b80      	cmp	r3, #128	; 0x80
 c003fee:	d825      	bhi.n	c00403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003ff0:	2b60      	cmp	r3, #96	; 0x60
 c003ff2:	d026      	beq.n	c004042 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003ff4:	2b60      	cmp	r3, #96	; 0x60
 c003ff6:	d821      	bhi.n	c00403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003ff8:	2b40      	cmp	r3, #64	; 0x40
 c003ffa:	d006      	beq.n	c00400a <HAL_RCCEx_PeriphCLKConfig+0x42>
 c003ffc:	2b40      	cmp	r3, #64	; 0x40
 c003ffe:	d81d      	bhi.n	c00403c <HAL_RCCEx_PeriphCLKConfig+0x74>
 c004000:	2b00      	cmp	r3, #0
 c004002:	d009      	beq.n	c004018 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c004004:	2b20      	cmp	r3, #32
 c004006:	d010      	beq.n	c00402a <HAL_RCCEx_PeriphCLKConfig+0x62>
 c004008:	e018      	b.n	c00403c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00400a:	4b8f      	ldr	r3, [pc, #572]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00400c:	68db      	ldr	r3, [r3, #12]
 c00400e:	4a8e      	ldr	r2, [pc, #568]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004014:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004016:	e015      	b.n	c004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004018:	687b      	ldr	r3, [r7, #4]
 c00401a:	3304      	adds	r3, #4
 c00401c:	2100      	movs	r1, #0
 c00401e:	4618      	mov	r0, r3
 c004020:	f000 fb56 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c004024:	4603      	mov	r3, r0
 c004026:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004028:	e00c      	b.n	c004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c00402a:	687b      	ldr	r3, [r7, #4]
 c00402c:	3320      	adds	r3, #32
 c00402e:	2100      	movs	r1, #0
 c004030:	4618      	mov	r0, r3
 c004032:	f000 fc33 	bl	c00489c <RCCEx_PLLSAI2_Config>
 c004036:	4603      	mov	r3, r0
 c004038:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c00403a:	e003      	b.n	c004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c00403c:	2301      	movs	r3, #1
 c00403e:	77fb      	strb	r3, [r7, #31]
        break;
 c004040:	e000      	b.n	c004044 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c004042:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004044:	7ffb      	ldrb	r3, [r7, #31]
 c004046:	2b00      	cmp	r3, #0
 c004048:	d10b      	bne.n	c004062 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c00404a:	4b7f      	ldr	r3, [pc, #508]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00404c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004050:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c004054:	687b      	ldr	r3, [r7, #4]
 c004056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004058:	497b      	ldr	r1, [pc, #492]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00405a:	4313      	orrs	r3, r2
 c00405c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c004060:	e001      	b.n	c004066 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004062:	7ffb      	ldrb	r3, [r7, #31]
 c004064:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c004066:	687b      	ldr	r3, [r7, #4]
 c004068:	681b      	ldr	r3, [r3, #0]
 c00406a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00406e:	2b00      	cmp	r3, #0
 c004070:	d047      	beq.n	c004102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c004072:	687b      	ldr	r3, [r7, #4]
 c004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c004076:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00407a:	d030      	beq.n	c0040de <HAL_RCCEx_PeriphCLKConfig+0x116>
 c00407c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004080:	d82a      	bhi.n	c0040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004082:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004086:	d02a      	beq.n	c0040de <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004088:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00408c:	d824      	bhi.n	c0040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00408e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004092:	d008      	beq.n	c0040a6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c004094:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004098:	d81e      	bhi.n	c0040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00409a:	2b00      	cmp	r3, #0
 c00409c:	d00a      	beq.n	c0040b4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c00409e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0040a2:	d010      	beq.n	c0040c6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c0040a4:	e018      	b.n	c0040d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0040a6:	4b68      	ldr	r3, [pc, #416]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040a8:	68db      	ldr	r3, [r3, #12]
 c0040aa:	4a67      	ldr	r2, [pc, #412]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0040b0:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0040b2:	e015      	b.n	c0040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0040b4:	687b      	ldr	r3, [r7, #4]
 c0040b6:	3304      	adds	r3, #4
 c0040b8:	2100      	movs	r1, #0
 c0040ba:	4618      	mov	r0, r3
 c0040bc:	f000 fb08 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c0040c0:	4603      	mov	r3, r0
 c0040c2:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0040c4:	e00c      	b.n	c0040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0040c6:	687b      	ldr	r3, [r7, #4]
 c0040c8:	3320      	adds	r3, #32
 c0040ca:	2100      	movs	r1, #0
 c0040cc:	4618      	mov	r0, r3
 c0040ce:	f000 fbe5 	bl	c00489c <RCCEx_PLLSAI2_Config>
 c0040d2:	4603      	mov	r3, r0
 c0040d4:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0040d6:	e003      	b.n	c0040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0040d8:	2301      	movs	r3, #1
 c0040da:	77fb      	strb	r3, [r7, #31]
        break;
 c0040dc:	e000      	b.n	c0040e0 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c0040de:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0040e0:	7ffb      	ldrb	r3, [r7, #31]
 c0040e2:	2b00      	cmp	r3, #0
 c0040e4:	d10b      	bne.n	c0040fe <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c0040e6:	4b58      	ldr	r3, [pc, #352]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0040ec:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0040f0:	687b      	ldr	r3, [r7, #4]
 c0040f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0040f4:	4954      	ldr	r1, [pc, #336]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040f6:	4313      	orrs	r3, r2
 c0040f8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c0040fc:	e001      	b.n	c004102 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0040fe:	7ffb      	ldrb	r3, [r7, #31]
 c004100:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c004102:	687b      	ldr	r3, [r7, #4]
 c004104:	681b      	ldr	r3, [r3, #0]
 c004106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00410a:	2b00      	cmp	r3, #0
 c00410c:	f000 80ab 	beq.w	c004266 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c004110:	2300      	movs	r3, #0
 c004112:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004114:	4b4c      	ldr	r3, [pc, #304]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004116:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004118:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00411c:	2b00      	cmp	r3, #0
 c00411e:	d10d      	bne.n	c00413c <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c004120:	4b49      	ldr	r3, [pc, #292]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004124:	4a48      	ldr	r2, [pc, #288]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004126:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00412a:	6593      	str	r3, [r2, #88]	; 0x58
 c00412c:	4b46      	ldr	r3, [pc, #280]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00412e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004130:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004134:	60fb      	str	r3, [r7, #12]
 c004136:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c004138:	2301      	movs	r3, #1
 c00413a:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c00413c:	4b43      	ldr	r3, [pc, #268]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00413e:	681b      	ldr	r3, [r3, #0]
 c004140:	4a42      	ldr	r2, [pc, #264]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004142:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004146:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004148:	f7fd fe5e 	bl	c001e08 <HAL_GetTick>
 c00414c:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00414e:	e00f      	b.n	c004170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c004150:	f7fd fe5a 	bl	c001e08 <HAL_GetTick>
 c004154:	4602      	mov	r2, r0
 c004156:	693b      	ldr	r3, [r7, #16]
 c004158:	1ad3      	subs	r3, r2, r3
 c00415a:	2b02      	cmp	r3, #2
 c00415c:	d908      	bls.n	c004170 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00415e:	4b3b      	ldr	r3, [pc, #236]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004160:	681b      	ldr	r3, [r3, #0]
 c004162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004166:	2b00      	cmp	r3, #0
 c004168:	d109      	bne.n	c00417e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c00416a:	2303      	movs	r3, #3
 c00416c:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c00416e:	e006      	b.n	c00417e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004170:	4b36      	ldr	r3, [pc, #216]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004172:	681b      	ldr	r3, [r3, #0]
 c004174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004178:	2b00      	cmp	r3, #0
 c00417a:	d0e9      	beq.n	c004150 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c00417c:	e000      	b.n	c004180 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c00417e:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c004180:	7ffb      	ldrb	r3, [r7, #31]
 c004182:	2b00      	cmp	r3, #0
 c004184:	d164      	bne.n	c004250 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c004186:	4b30      	ldr	r3, [pc, #192]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00418c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004190:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c004192:	69bb      	ldr	r3, [r7, #24]
 c004194:	2b00      	cmp	r3, #0
 c004196:	d01f      	beq.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c004198:	687b      	ldr	r3, [r7, #4]
 c00419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00419e:	69ba      	ldr	r2, [r7, #24]
 c0041a0:	429a      	cmp	r2, r3
 c0041a2:	d019      	beq.n	c0041d8 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0041a4:	4b28      	ldr	r3, [pc, #160]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0041ae:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0041b0:	4b25      	ldr	r3, [pc, #148]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041b6:	4a24      	ldr	r2, [pc, #144]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0041bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0041c0:	4b21      	ldr	r3, [pc, #132]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041c6:	4a20      	ldr	r2, [pc, #128]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041c8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0041cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c0041d0:	4a1d      	ldr	r2, [pc, #116]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041d2:	69bb      	ldr	r3, [r7, #24]
 c0041d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c0041d8:	69bb      	ldr	r3, [r7, #24]
 c0041da:	f003 0301 	and.w	r3, r3, #1
 c0041de:	2b00      	cmp	r3, #0
 c0041e0:	d01f      	beq.n	c004222 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0041e2:	f7fd fe11 	bl	c001e08 <HAL_GetTick>
 c0041e6:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0041e8:	e012      	b.n	c004210 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0041ea:	f7fd fe0d 	bl	c001e08 <HAL_GetTick>
 c0041ee:	4602      	mov	r2, r0
 c0041f0:	693b      	ldr	r3, [r7, #16]
 c0041f2:	1ad3      	subs	r3, r2, r3
 c0041f4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0041f8:	4293      	cmp	r3, r2
 c0041fa:	d909      	bls.n	c004210 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0041fc:	4b12      	ldr	r3, [pc, #72]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004202:	f003 0302 	and.w	r3, r3, #2
 c004206:	2b00      	cmp	r3, #0
 c004208:	d10a      	bne.n	c004220 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c00420a:	2303      	movs	r3, #3
 c00420c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00420e:	e007      	b.n	c004220 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004210:	4b0d      	ldr	r3, [pc, #52]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004216:	f003 0302 	and.w	r3, r3, #2
 c00421a:	2b00      	cmp	r3, #0
 c00421c:	d0e5      	beq.n	c0041ea <HAL_RCCEx_PeriphCLKConfig+0x222>
 c00421e:	e000      	b.n	c004222 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c004220:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c004222:	7ffb      	ldrb	r3, [r7, #31]
 c004224:	2b00      	cmp	r3, #0
 c004226:	d10c      	bne.n	c004242 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c004228:	4b07      	ldr	r3, [pc, #28]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00422a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00422e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c004232:	687b      	ldr	r3, [r7, #4]
 c004234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004238:	4903      	ldr	r1, [pc, #12]	; (c004248 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00423a:	4313      	orrs	r3, r2
 c00423c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c004240:	e008      	b.n	c004254 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c004242:	7ffb      	ldrb	r3, [r7, #31]
 c004244:	77bb      	strb	r3, [r7, #30]
 c004246:	e005      	b.n	c004254 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c004248:	50021000 	.word	0x50021000
 c00424c:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004250:	7ffb      	ldrb	r3, [r7, #31]
 c004252:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004254:	7dfb      	ldrb	r3, [r7, #23]
 c004256:	2b01      	cmp	r3, #1
 c004258:	d105      	bne.n	c004266 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00425a:	4b9c      	ldr	r3, [pc, #624]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00425c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00425e:	4a9b      	ldr	r2, [pc, #620]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004260:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004264:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c004266:	687b      	ldr	r3, [r7, #4]
 c004268:	681b      	ldr	r3, [r3, #0]
 c00426a:	f003 0301 	and.w	r3, r3, #1
 c00426e:	2b00      	cmp	r3, #0
 c004270:	d00a      	beq.n	c004288 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c004272:	4b96      	ldr	r3, [pc, #600]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004274:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004278:	f023 0203 	bic.w	r2, r3, #3
 c00427c:	687b      	ldr	r3, [r7, #4]
 c00427e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004280:	4992      	ldr	r1, [pc, #584]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004282:	4313      	orrs	r3, r2
 c004284:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c004288:	687b      	ldr	r3, [r7, #4]
 c00428a:	681b      	ldr	r3, [r3, #0]
 c00428c:	f003 0302 	and.w	r3, r3, #2
 c004290:	2b00      	cmp	r3, #0
 c004292:	d00a      	beq.n	c0042aa <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c004294:	4b8d      	ldr	r3, [pc, #564]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00429a:	f023 020c 	bic.w	r2, r3, #12
 c00429e:	687b      	ldr	r3, [r7, #4]
 c0042a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0042a2:	498a      	ldr	r1, [pc, #552]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042a4:	4313      	orrs	r3, r2
 c0042a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0042aa:	687b      	ldr	r3, [r7, #4]
 c0042ac:	681b      	ldr	r3, [r3, #0]
 c0042ae:	f003 0304 	and.w	r3, r3, #4
 c0042b2:	2b00      	cmp	r3, #0
 c0042b4:	d00a      	beq.n	c0042cc <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0042b6:	4b85      	ldr	r3, [pc, #532]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042bc:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0042c0:	687b      	ldr	r3, [r7, #4]
 c0042c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0042c4:	4981      	ldr	r1, [pc, #516]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042c6:	4313      	orrs	r3, r2
 c0042c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c0042cc:	687b      	ldr	r3, [r7, #4]
 c0042ce:	681b      	ldr	r3, [r3, #0]
 c0042d0:	f003 0308 	and.w	r3, r3, #8
 c0042d4:	2b00      	cmp	r3, #0
 c0042d6:	d00a      	beq.n	c0042ee <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c0042d8:	4b7c      	ldr	r3, [pc, #496]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042de:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c0042e2:	687b      	ldr	r3, [r7, #4]
 c0042e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0042e6:	4979      	ldr	r1, [pc, #484]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042e8:	4313      	orrs	r3, r2
 c0042ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c0042ee:	687b      	ldr	r3, [r7, #4]
 c0042f0:	681b      	ldr	r3, [r3, #0]
 c0042f2:	f003 0310 	and.w	r3, r3, #16
 c0042f6:	2b00      	cmp	r3, #0
 c0042f8:	d00a      	beq.n	c004310 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c0042fa:	4b74      	ldr	r3, [pc, #464]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004300:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c004304:	687b      	ldr	r3, [r7, #4]
 c004306:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c004308:	4970      	ldr	r1, [pc, #448]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00430a:	4313      	orrs	r3, r2
 c00430c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c004310:	687b      	ldr	r3, [r7, #4]
 c004312:	681b      	ldr	r3, [r3, #0]
 c004314:	f003 0320 	and.w	r3, r3, #32
 c004318:	2b00      	cmp	r3, #0
 c00431a:	d00a      	beq.n	c004332 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c00431c:	4b6b      	ldr	r3, [pc, #428]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00431e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004322:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c004326:	687b      	ldr	r3, [r7, #4]
 c004328:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00432a:	4968      	ldr	r1, [pc, #416]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00432c:	4313      	orrs	r3, r2
 c00432e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c004332:	687b      	ldr	r3, [r7, #4]
 c004334:	681b      	ldr	r3, [r3, #0]
 c004336:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00433a:	2b00      	cmp	r3, #0
 c00433c:	d00a      	beq.n	c004354 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00433e:	4b63      	ldr	r3, [pc, #396]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004344:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c004348:	687b      	ldr	r3, [r7, #4]
 c00434a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00434c:	495f      	ldr	r1, [pc, #380]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00434e:	4313      	orrs	r3, r2
 c004350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c004354:	687b      	ldr	r3, [r7, #4]
 c004356:	681b      	ldr	r3, [r3, #0]
 c004358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00435c:	2b00      	cmp	r3, #0
 c00435e:	d00a      	beq.n	c004376 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c004360:	4b5a      	ldr	r3, [pc, #360]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004366:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c00436a:	687b      	ldr	r3, [r7, #4]
 c00436c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00436e:	4957      	ldr	r1, [pc, #348]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004370:	4313      	orrs	r3, r2
 c004372:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c004376:	687b      	ldr	r3, [r7, #4]
 c004378:	681b      	ldr	r3, [r3, #0]
 c00437a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00437e:	2b00      	cmp	r3, #0
 c004380:	d00a      	beq.n	c004398 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c004382:	4b52      	ldr	r3, [pc, #328]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004384:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004388:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c00438c:	687b      	ldr	r3, [r7, #4]
 c00438e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004390:	494e      	ldr	r1, [pc, #312]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004392:	4313      	orrs	r3, r2
 c004394:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c004398:	687b      	ldr	r3, [r7, #4]
 c00439a:	681b      	ldr	r3, [r3, #0]
 c00439c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0043a0:	2b00      	cmp	r3, #0
 c0043a2:	d031      	beq.n	c004408 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c0043a4:	687b      	ldr	r3, [r7, #4]
 c0043a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0043a8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0043ac:	d00e      	beq.n	c0043cc <HAL_RCCEx_PeriphCLKConfig+0x404>
 c0043ae:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0043b2:	d814      	bhi.n	c0043de <HAL_RCCEx_PeriphCLKConfig+0x416>
 c0043b4:	2b00      	cmp	r3, #0
 c0043b6:	d015      	beq.n	c0043e4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c0043b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0043bc:	d10f      	bne.n	c0043de <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0043be:	4b43      	ldr	r3, [pc, #268]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043c0:	68db      	ldr	r3, [r3, #12]
 c0043c2:	4a42      	ldr	r2, [pc, #264]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0043c8:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c0043ca:	e00c      	b.n	c0043e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0043cc:	687b      	ldr	r3, [r7, #4]
 c0043ce:	3304      	adds	r3, #4
 c0043d0:	2100      	movs	r1, #0
 c0043d2:	4618      	mov	r0, r3
 c0043d4:	f000 f97c 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c0043d8:	4603      	mov	r3, r0
 c0043da:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c0043dc:	e003      	b.n	c0043e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c0043de:	2301      	movs	r3, #1
 c0043e0:	77fb      	strb	r3, [r7, #31]
        break;
 c0043e2:	e000      	b.n	c0043e6 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c0043e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0043e6:	7ffb      	ldrb	r3, [r7, #31]
 c0043e8:	2b00      	cmp	r3, #0
 c0043ea:	d10b      	bne.n	c004404 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c0043ec:	4b37      	ldr	r3, [pc, #220]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0043f2:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c0043f6:	687b      	ldr	r3, [r7, #4]
 c0043f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0043fa:	4934      	ldr	r1, [pc, #208]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043fc:	4313      	orrs	r3, r2
 c0043fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c004402:	e001      	b.n	c004408 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004404:	7ffb      	ldrb	r3, [r7, #31]
 c004406:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c004408:	687b      	ldr	r3, [r7, #4]
 c00440a:	681b      	ldr	r3, [r3, #0]
 c00440c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004410:	2b00      	cmp	r3, #0
 c004412:	d00a      	beq.n	c00442a <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c004414:	4b2d      	ldr	r3, [pc, #180]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00441a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c00441e:	687b      	ldr	r3, [r7, #4]
 c004420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c004422:	492a      	ldr	r1, [pc, #168]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004424:	4313      	orrs	r3, r2
 c004426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c00442a:	687b      	ldr	r3, [r7, #4]
 c00442c:	681b      	ldr	r3, [r3, #0]
 c00442e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004432:	2b00      	cmp	r3, #0
 c004434:	d00a      	beq.n	c00444c <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c004436:	4b25      	ldr	r3, [pc, #148]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00443c:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c004440:	687b      	ldr	r3, [r7, #4]
 c004442:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004444:	4921      	ldr	r1, [pc, #132]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004446:	4313      	orrs	r3, r2
 c004448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c00444c:	687b      	ldr	r3, [r7, #4]
 c00444e:	681b      	ldr	r3, [r3, #0]
 c004450:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004454:	2b00      	cmp	r3, #0
 c004456:	d00a      	beq.n	c00446e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c004458:	4b1c      	ldr	r3, [pc, #112]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00445a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00445e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c004462:	687b      	ldr	r3, [r7, #4]
 c004464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004466:	4919      	ldr	r1, [pc, #100]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004468:	4313      	orrs	r3, r2
 c00446a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c00446e:	687b      	ldr	r3, [r7, #4]
 c004470:	681b      	ldr	r3, [r3, #0]
 c004472:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c004476:	2b00      	cmp	r3, #0
 c004478:	d00a      	beq.n	c004490 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c00447a:	4b14      	ldr	r3, [pc, #80]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00447c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004480:	f023 0203 	bic.w	r2, r3, #3
 c004484:	687b      	ldr	r3, [r7, #4]
 c004486:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004488:	4910      	ldr	r1, [pc, #64]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00448a:	4313      	orrs	r3, r2
 c00448c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c004490:	687b      	ldr	r3, [r7, #4]
 c004492:	681b      	ldr	r3, [r3, #0]
 c004494:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c004498:	2b00      	cmp	r3, #0
 c00449a:	d02b      	beq.n	c0044f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c00449c:	4b0b      	ldr	r3, [pc, #44]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00449e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0044a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0044a6:	687b      	ldr	r3, [r7, #4]
 c0044a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0044aa:	4908      	ldr	r1, [pc, #32]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0044ac:	4313      	orrs	r3, r2
 c0044ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c0044b2:	687b      	ldr	r3, [r7, #4]
 c0044b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0044b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0044ba:	d109      	bne.n	c0044d0 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0044bc:	4b03      	ldr	r3, [pc, #12]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0044be:	68db      	ldr	r3, [r3, #12]
 c0044c0:	4a02      	ldr	r2, [pc, #8]	; (c0044cc <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0044c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0044c6:	60d3      	str	r3, [r2, #12]
 c0044c8:	e014      	b.n	c0044f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c0044ca:	bf00      	nop
 c0044cc:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c0044d0:	687b      	ldr	r3, [r7, #4]
 c0044d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0044d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0044d8:	d10c      	bne.n	c0044f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0044da:	687b      	ldr	r3, [r7, #4]
 c0044dc:	3304      	adds	r3, #4
 c0044de:	2101      	movs	r1, #1
 c0044e0:	4618      	mov	r0, r3
 c0044e2:	f000 f8f5 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c0044e6:	4603      	mov	r3, r0
 c0044e8:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c0044ea:	7ffb      	ldrb	r3, [r7, #31]
 c0044ec:	2b00      	cmp	r3, #0
 c0044ee:	d001      	beq.n	c0044f4 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c0044f0:	7ffb      	ldrb	r3, [r7, #31]
 c0044f2:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c0044f4:	687b      	ldr	r3, [r7, #4]
 c0044f6:	681b      	ldr	r3, [r3, #0]
 c0044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c0044fc:	2b00      	cmp	r3, #0
 c0044fe:	d04a      	beq.n	c004596 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c004500:	687b      	ldr	r3, [r7, #4]
 c004502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004504:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004508:	d108      	bne.n	c00451c <HAL_RCCEx_PeriphCLKConfig+0x554>
 c00450a:	4b70      	ldr	r3, [pc, #448]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00450c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004510:	4a6e      	ldr	r2, [pc, #440]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004512:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c004516:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c00451a:	e012      	b.n	c004542 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c00451c:	4b6b      	ldr	r3, [pc, #428]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004522:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c004526:	687b      	ldr	r3, [r7, #4]
 c004528:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00452a:	4968      	ldr	r1, [pc, #416]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00452c:	4313      	orrs	r3, r2
 c00452e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c004532:	4b66      	ldr	r3, [pc, #408]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004534:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004538:	4a64      	ldr	r2, [pc, #400]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00453a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c00453e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c004542:	687b      	ldr	r3, [r7, #4]
 c004544:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004546:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00454a:	d10d      	bne.n	c004568 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00454c:	687b      	ldr	r3, [r7, #4]
 c00454e:	3304      	adds	r3, #4
 c004550:	2101      	movs	r1, #1
 c004552:	4618      	mov	r0, r3
 c004554:	f000 f8bc 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c004558:	4603      	mov	r3, r0
 c00455a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00455c:	7ffb      	ldrb	r3, [r7, #31]
 c00455e:	2b00      	cmp	r3, #0
 c004560:	d019      	beq.n	c004596 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c004562:	7ffb      	ldrb	r3, [r7, #31]
 c004564:	77bb      	strb	r3, [r7, #30]
 c004566:	e016      	b.n	c004596 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c004568:	687b      	ldr	r3, [r7, #4]
 c00456a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00456c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004570:	d106      	bne.n	c004580 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004572:	4b56      	ldr	r3, [pc, #344]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004574:	68db      	ldr	r3, [r3, #12]
 c004576:	4a55      	ldr	r2, [pc, #340]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004578:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00457c:	60d3      	str	r3, [r2, #12]
 c00457e:	e00a      	b.n	c004596 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c004580:	687b      	ldr	r3, [r7, #4]
 c004582:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004584:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004588:	d105      	bne.n	c004596 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00458a:	4b50      	ldr	r3, [pc, #320]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00458c:	68db      	ldr	r3, [r3, #12]
 c00458e:	4a4f      	ldr	r2, [pc, #316]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004594:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c004596:	687b      	ldr	r3, [r7, #4]
 c004598:	681b      	ldr	r3, [r3, #0]
 c00459a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00459e:	2b00      	cmp	r3, #0
 c0045a0:	d028      	beq.n	c0045f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c0045a2:	4b4a      	ldr	r3, [pc, #296]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0045a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0045ac:	687b      	ldr	r3, [r7, #4]
 c0045ae:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0045b0:	4946      	ldr	r1, [pc, #280]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045b2:	4313      	orrs	r3, r2
 c0045b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c0045b8:	687b      	ldr	r3, [r7, #4]
 c0045ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0045bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0045c0:	d106      	bne.n	c0045d0 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0045c2:	4b42      	ldr	r3, [pc, #264]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045c4:	68db      	ldr	r3, [r3, #12]
 c0045c6:	4a41      	ldr	r2, [pc, #260]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0045cc:	60d3      	str	r3, [r2, #12]
 c0045ce:	e011      	b.n	c0045f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c0045d0:	687b      	ldr	r3, [r7, #4]
 c0045d2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0045d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0045d8:	d10c      	bne.n	c0045f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0045da:	687b      	ldr	r3, [r7, #4]
 c0045dc:	3304      	adds	r3, #4
 c0045de:	2101      	movs	r1, #1
 c0045e0:	4618      	mov	r0, r3
 c0045e2:	f000 f875 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c0045e6:	4603      	mov	r3, r0
 c0045e8:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0045ea:	7ffb      	ldrb	r3, [r7, #31]
 c0045ec:	2b00      	cmp	r3, #0
 c0045ee:	d001      	beq.n	c0045f4 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c0045f0:	7ffb      	ldrb	r3, [r7, #31]
 c0045f2:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c0045f4:	687b      	ldr	r3, [r7, #4]
 c0045f6:	681b      	ldr	r3, [r3, #0]
 c0045f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0045fc:	2b00      	cmp	r3, #0
 c0045fe:	d01e      	beq.n	c00463e <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c004600:	4b32      	ldr	r3, [pc, #200]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c00460a:	687b      	ldr	r3, [r7, #4]
 c00460c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004610:	492e      	ldr	r1, [pc, #184]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004612:	4313      	orrs	r3, r2
 c004614:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c004618:	687b      	ldr	r3, [r7, #4]
 c00461a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00461e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004622:	d10c      	bne.n	c00463e <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c004624:	687b      	ldr	r3, [r7, #4]
 c004626:	3304      	adds	r3, #4
 c004628:	2102      	movs	r1, #2
 c00462a:	4618      	mov	r0, r3
 c00462c:	f000 f850 	bl	c0046d0 <RCCEx_PLLSAI1_Config>
 c004630:	4603      	mov	r3, r0
 c004632:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c004634:	7ffb      	ldrb	r3, [r7, #31]
 c004636:	2b00      	cmp	r3, #0
 c004638:	d001      	beq.n	c00463e <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c00463a:	7ffb      	ldrb	r3, [r7, #31]
 c00463c:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c00463e:	687b      	ldr	r3, [r7, #4]
 c004640:	681b      	ldr	r3, [r3, #0]
 c004642:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c004646:	2b00      	cmp	r3, #0
 c004648:	d00b      	beq.n	c004662 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c00464a:	4b20      	ldr	r3, [pc, #128]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00464c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004650:	f023 0204 	bic.w	r2, r3, #4
 c004654:	687b      	ldr	r3, [r7, #4]
 c004656:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00465a:	491c      	ldr	r1, [pc, #112]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00465c:	4313      	orrs	r3, r2
 c00465e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c004662:	687b      	ldr	r3, [r7, #4]
 c004664:	681b      	ldr	r3, [r3, #0]
 c004666:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00466a:	2b00      	cmp	r3, #0
 c00466c:	d00b      	beq.n	c004686 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c00466e:	4b17      	ldr	r3, [pc, #92]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004670:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004674:	f023 0218 	bic.w	r2, r3, #24
 c004678:	687b      	ldr	r3, [r7, #4]
 c00467a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00467e:	4913      	ldr	r1, [pc, #76]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004680:	4313      	orrs	r3, r2
 c004682:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c004686:	687b      	ldr	r3, [r7, #4]
 c004688:	681b      	ldr	r3, [r3, #0]
 c00468a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c00468e:	2b00      	cmp	r3, #0
 c004690:	d017      	beq.n	c0046c2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c004692:	4b0e      	ldr	r3, [pc, #56]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004694:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004698:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c00469c:	687b      	ldr	r3, [r7, #4]
 c00469e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0046a2:	490a      	ldr	r1, [pc, #40]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0046a4:	4313      	orrs	r3, r2
 c0046a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c0046aa:	687b      	ldr	r3, [r7, #4]
 c0046ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0046b0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c0046b4:	d105      	bne.n	c0046c2 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0046b6:	4b05      	ldr	r3, [pc, #20]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0046b8:	68db      	ldr	r3, [r3, #12]
 c0046ba:	4a04      	ldr	r2, [pc, #16]	; (c0046cc <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0046bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0046c0:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c0046c2:	7fbb      	ldrb	r3, [r7, #30]
}
 c0046c4:	4618      	mov	r0, r3
 c0046c6:	3720      	adds	r7, #32
 c0046c8:	46bd      	mov	sp, r7
 c0046ca:	bd80      	pop	{r7, pc}
 c0046cc:	50021000 	.word	0x50021000

0c0046d0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c0046d0:	b580      	push	{r7, lr}
 c0046d2:	b084      	sub	sp, #16
 c0046d4:	af00      	add	r7, sp, #0
 c0046d6:	6078      	str	r0, [r7, #4]
 c0046d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0046da:	2300      	movs	r3, #0
 c0046dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c0046de:	687b      	ldr	r3, [r7, #4]
 c0046e0:	681b      	ldr	r3, [r3, #0]
 c0046e2:	2b03      	cmp	r3, #3
 c0046e4:	d018      	beq.n	c004718 <RCCEx_PLLSAI1_Config+0x48>
 c0046e6:	2b03      	cmp	r3, #3
 c0046e8:	d81f      	bhi.n	c00472a <RCCEx_PLLSAI1_Config+0x5a>
 c0046ea:	2b01      	cmp	r3, #1
 c0046ec:	d002      	beq.n	c0046f4 <RCCEx_PLLSAI1_Config+0x24>
 c0046ee:	2b02      	cmp	r3, #2
 c0046f0:	d009      	beq.n	c004706 <RCCEx_PLLSAI1_Config+0x36>
 c0046f2:	e01a      	b.n	c00472a <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0046f4:	4b65      	ldr	r3, [pc, #404]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046f6:	681b      	ldr	r3, [r3, #0]
 c0046f8:	f003 0302 	and.w	r3, r3, #2
 c0046fc:	2b00      	cmp	r3, #0
 c0046fe:	d117      	bne.n	c004730 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c004700:	2301      	movs	r3, #1
 c004702:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004704:	e014      	b.n	c004730 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004706:	4b61      	ldr	r3, [pc, #388]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004708:	681b      	ldr	r3, [r3, #0]
 c00470a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00470e:	2b00      	cmp	r3, #0
 c004710:	d110      	bne.n	c004734 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c004712:	2301      	movs	r3, #1
 c004714:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004716:	e00d      	b.n	c004734 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c004718:	4b5c      	ldr	r3, [pc, #368]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00471a:	681b      	ldr	r3, [r3, #0]
 c00471c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c004720:	2b00      	cmp	r3, #0
 c004722:	d109      	bne.n	c004738 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c004724:	2301      	movs	r3, #1
 c004726:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004728:	e006      	b.n	c004738 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c00472a:	2301      	movs	r3, #1
 c00472c:	73fb      	strb	r3, [r7, #15]
      break;
 c00472e:	e004      	b.n	c00473a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004730:	bf00      	nop
 c004732:	e002      	b.n	c00473a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004734:	bf00      	nop
 c004736:	e000      	b.n	c00473a <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004738:	bf00      	nop
  }

  if (status == HAL_OK)
 c00473a:	7bfb      	ldrb	r3, [r7, #15]
 c00473c:	2b00      	cmp	r3, #0
 c00473e:	f040 809f 	bne.w	c004880 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c004742:	4b52      	ldr	r3, [pc, #328]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004744:	681b      	ldr	r3, [r3, #0]
 c004746:	4a51      	ldr	r2, [pc, #324]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004748:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c00474c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c00474e:	f7fd fb5b 	bl	c001e08 <HAL_GetTick>
 c004752:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004754:	e00f      	b.n	c004776 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c004756:	f7fd fb57 	bl	c001e08 <HAL_GetTick>
 c00475a:	4602      	mov	r2, r0
 c00475c:	68bb      	ldr	r3, [r7, #8]
 c00475e:	1ad3      	subs	r3, r2, r3
 c004760:	2b02      	cmp	r3, #2
 c004762:	d908      	bls.n	c004776 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004764:	4b49      	ldr	r3, [pc, #292]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004766:	681b      	ldr	r3, [r3, #0]
 c004768:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00476c:	2b00      	cmp	r3, #0
 c00476e:	d009      	beq.n	c004784 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c004770:	2303      	movs	r3, #3
 c004772:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c004774:	e006      	b.n	c004784 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004776:	4b45      	ldr	r3, [pc, #276]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004778:	681b      	ldr	r3, [r3, #0]
 c00477a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c00477e:	2b00      	cmp	r3, #0
 c004780:	d1e9      	bne.n	c004756 <RCCEx_PLLSAI1_Config+0x86>
 c004782:	e000      	b.n	c004786 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c004784:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004786:	7bfb      	ldrb	r3, [r7, #15]
 c004788:	2b00      	cmp	r3, #0
 c00478a:	d179      	bne.n	c004880 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c00478c:	683b      	ldr	r3, [r7, #0]
 c00478e:	2b00      	cmp	r3, #0
 c004790:	d116      	bne.n	c0047c0 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004792:	4b3e      	ldr	r3, [pc, #248]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004794:	691a      	ldr	r2, [r3, #16]
 c004796:	4b3e      	ldr	r3, [pc, #248]	; (c004890 <RCCEx_PLLSAI1_Config+0x1c0>)
 c004798:	4013      	ands	r3, r2
 c00479a:	687a      	ldr	r2, [r7, #4]
 c00479c:	6892      	ldr	r2, [r2, #8]
 c00479e:	0211      	lsls	r1, r2, #8
 c0047a0:	687a      	ldr	r2, [r7, #4]
 c0047a2:	68d2      	ldr	r2, [r2, #12]
 c0047a4:	06d2      	lsls	r2, r2, #27
 c0047a6:	4311      	orrs	r1, r2
 c0047a8:	687a      	ldr	r2, [r7, #4]
 c0047aa:	6852      	ldr	r2, [r2, #4]
 c0047ac:	3a01      	subs	r2, #1
 c0047ae:	0112      	lsls	r2, r2, #4
 c0047b0:	4311      	orrs	r1, r2
 c0047b2:	687a      	ldr	r2, [r7, #4]
 c0047b4:	6812      	ldr	r2, [r2, #0]
 c0047b6:	430a      	orrs	r2, r1
 c0047b8:	4934      	ldr	r1, [pc, #208]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047ba:	4313      	orrs	r3, r2
 c0047bc:	610b      	str	r3, [r1, #16]
 c0047be:	e033      	b.n	c004828 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c0047c0:	683b      	ldr	r3, [r7, #0]
 c0047c2:	2b01      	cmp	r3, #1
 c0047c4:	d118      	bne.n	c0047f8 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0047c6:	4b31      	ldr	r3, [pc, #196]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047c8:	691a      	ldr	r2, [r3, #16]
 c0047ca:	4b32      	ldr	r3, [pc, #200]	; (c004894 <RCCEx_PLLSAI1_Config+0x1c4>)
 c0047cc:	4013      	ands	r3, r2
 c0047ce:	687a      	ldr	r2, [r7, #4]
 c0047d0:	6892      	ldr	r2, [r2, #8]
 c0047d2:	0211      	lsls	r1, r2, #8
 c0047d4:	687a      	ldr	r2, [r7, #4]
 c0047d6:	6912      	ldr	r2, [r2, #16]
 c0047d8:	0852      	lsrs	r2, r2, #1
 c0047da:	3a01      	subs	r2, #1
 c0047dc:	0552      	lsls	r2, r2, #21
 c0047de:	4311      	orrs	r1, r2
 c0047e0:	687a      	ldr	r2, [r7, #4]
 c0047e2:	6852      	ldr	r2, [r2, #4]
 c0047e4:	3a01      	subs	r2, #1
 c0047e6:	0112      	lsls	r2, r2, #4
 c0047e8:	4311      	orrs	r1, r2
 c0047ea:	687a      	ldr	r2, [r7, #4]
 c0047ec:	6812      	ldr	r2, [r2, #0]
 c0047ee:	430a      	orrs	r2, r1
 c0047f0:	4926      	ldr	r1, [pc, #152]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047f2:	4313      	orrs	r3, r2
 c0047f4:	610b      	str	r3, [r1, #16]
 c0047f6:	e017      	b.n	c004828 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c0047f8:	4b24      	ldr	r3, [pc, #144]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047fa:	691a      	ldr	r2, [r3, #16]
 c0047fc:	4b26      	ldr	r3, [pc, #152]	; (c004898 <RCCEx_PLLSAI1_Config+0x1c8>)
 c0047fe:	4013      	ands	r3, r2
 c004800:	687a      	ldr	r2, [r7, #4]
 c004802:	6892      	ldr	r2, [r2, #8]
 c004804:	0211      	lsls	r1, r2, #8
 c004806:	687a      	ldr	r2, [r7, #4]
 c004808:	6952      	ldr	r2, [r2, #20]
 c00480a:	0852      	lsrs	r2, r2, #1
 c00480c:	3a01      	subs	r2, #1
 c00480e:	0652      	lsls	r2, r2, #25
 c004810:	4311      	orrs	r1, r2
 c004812:	687a      	ldr	r2, [r7, #4]
 c004814:	6852      	ldr	r2, [r2, #4]
 c004816:	3a01      	subs	r2, #1
 c004818:	0112      	lsls	r2, r2, #4
 c00481a:	4311      	orrs	r1, r2
 c00481c:	687a      	ldr	r2, [r7, #4]
 c00481e:	6812      	ldr	r2, [r2, #0]
 c004820:	430a      	orrs	r2, r1
 c004822:	491a      	ldr	r1, [pc, #104]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004824:	4313      	orrs	r3, r2
 c004826:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c004828:	4b18      	ldr	r3, [pc, #96]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00482a:	681b      	ldr	r3, [r3, #0]
 c00482c:	4a17      	ldr	r2, [pc, #92]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00482e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c004832:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004834:	f7fd fae8 	bl	c001e08 <HAL_GetTick>
 c004838:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00483a:	e00f      	b.n	c00485c <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c00483c:	f7fd fae4 	bl	c001e08 <HAL_GetTick>
 c004840:	4602      	mov	r2, r0
 c004842:	68bb      	ldr	r3, [r7, #8]
 c004844:	1ad3      	subs	r3, r2, r3
 c004846:	2b02      	cmp	r3, #2
 c004848:	d908      	bls.n	c00485c <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00484a:	4b10      	ldr	r3, [pc, #64]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00484c:	681b      	ldr	r3, [r3, #0]
 c00484e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004852:	2b00      	cmp	r3, #0
 c004854:	d109      	bne.n	c00486a <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c004856:	2303      	movs	r3, #3
 c004858:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00485a:	e006      	b.n	c00486a <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c00485c:	4b0b      	ldr	r3, [pc, #44]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00485e:	681b      	ldr	r3, [r3, #0]
 c004860:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004864:	2b00      	cmp	r3, #0
 c004866:	d0e9      	beq.n	c00483c <RCCEx_PLLSAI1_Config+0x16c>
 c004868:	e000      	b.n	c00486c <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c00486a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c00486c:	7bfb      	ldrb	r3, [r7, #15]
 c00486e:	2b00      	cmp	r3, #0
 c004870:	d106      	bne.n	c004880 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c004872:	4b06      	ldr	r3, [pc, #24]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004874:	691a      	ldr	r2, [r3, #16]
 c004876:	687b      	ldr	r3, [r7, #4]
 c004878:	699b      	ldr	r3, [r3, #24]
 c00487a:	4904      	ldr	r1, [pc, #16]	; (c00488c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00487c:	4313      	orrs	r3, r2
 c00487e:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c004880:	7bfb      	ldrb	r3, [r7, #15]
}
 c004882:	4618      	mov	r0, r3
 c004884:	3710      	adds	r7, #16
 c004886:	46bd      	mov	sp, r7
 c004888:	bd80      	pop	{r7, pc}
 c00488a:	bf00      	nop
 c00488c:	50021000 	.word	0x50021000
 c004890:	07ff800c 	.word	0x07ff800c
 c004894:	ff9f800c 	.word	0xff9f800c
 c004898:	f9ff800c 	.word	0xf9ff800c

0c00489c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c00489c:	b580      	push	{r7, lr}
 c00489e:	b084      	sub	sp, #16
 c0048a0:	af00      	add	r7, sp, #0
 c0048a2:	6078      	str	r0, [r7, #4]
 c0048a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0048a6:	2300      	movs	r3, #0
 c0048a8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c0048aa:	687b      	ldr	r3, [r7, #4]
 c0048ac:	681b      	ldr	r3, [r3, #0]
 c0048ae:	2b03      	cmp	r3, #3
 c0048b0:	d018      	beq.n	c0048e4 <RCCEx_PLLSAI2_Config+0x48>
 c0048b2:	2b03      	cmp	r3, #3
 c0048b4:	d81f      	bhi.n	c0048f6 <RCCEx_PLLSAI2_Config+0x5a>
 c0048b6:	2b01      	cmp	r3, #1
 c0048b8:	d002      	beq.n	c0048c0 <RCCEx_PLLSAI2_Config+0x24>
 c0048ba:	2b02      	cmp	r3, #2
 c0048bc:	d009      	beq.n	c0048d2 <RCCEx_PLLSAI2_Config+0x36>
 c0048be:	e01a      	b.n	c0048f6 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c0048c0:	4b4a      	ldr	r3, [pc, #296]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0048c2:	681b      	ldr	r3, [r3, #0]
 c0048c4:	f003 0302 	and.w	r3, r3, #2
 c0048c8:	2b00      	cmp	r3, #0
 c0048ca:	d117      	bne.n	c0048fc <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c0048cc:	2301      	movs	r3, #1
 c0048ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0048d0:	e014      	b.n	c0048fc <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c0048d2:	4b46      	ldr	r3, [pc, #280]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0048d4:	681b      	ldr	r3, [r3, #0]
 c0048d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0048da:	2b00      	cmp	r3, #0
 c0048dc:	d110      	bne.n	c004900 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c0048de:	2301      	movs	r3, #1
 c0048e0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0048e2:	e00d      	b.n	c004900 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0048e4:	4b41      	ldr	r3, [pc, #260]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0048e6:	681b      	ldr	r3, [r3, #0]
 c0048e8:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0048ec:	2b00      	cmp	r3, #0
 c0048ee:	d109      	bne.n	c004904 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c0048f0:	2301      	movs	r3, #1
 c0048f2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0048f4:	e006      	b.n	c004904 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c0048f6:	2301      	movs	r3, #1
 c0048f8:	73fb      	strb	r3, [r7, #15]
      break;
 c0048fa:	e004      	b.n	c004906 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c0048fc:	bf00      	nop
 c0048fe:	e002      	b.n	c004906 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004900:	bf00      	nop
 c004902:	e000      	b.n	c004906 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004904:	bf00      	nop
  }

  if (status == HAL_OK)
 c004906:	7bfb      	ldrb	r3, [r7, #15]
 c004908:	2b00      	cmp	r3, #0
 c00490a:	d169      	bne.n	c0049e0 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c00490c:	4b37      	ldr	r3, [pc, #220]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c00490e:	681b      	ldr	r3, [r3, #0]
 c004910:	4a36      	ldr	r2, [pc, #216]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c004912:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004916:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c004918:	f7fd fa76 	bl	c001e08 <HAL_GetTick>
 c00491c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c00491e:	e00f      	b.n	c004940 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004920:	f7fd fa72 	bl	c001e08 <HAL_GetTick>
 c004924:	4602      	mov	r2, r0
 c004926:	68bb      	ldr	r3, [r7, #8]
 c004928:	1ad3      	subs	r3, r2, r3
 c00492a:	2b02      	cmp	r3, #2
 c00492c:	d908      	bls.n	c004940 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c00492e:	4b2f      	ldr	r3, [pc, #188]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c004930:	681b      	ldr	r3, [r3, #0]
 c004932:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004936:	2b00      	cmp	r3, #0
 c004938:	d009      	beq.n	c00494e <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c00493a:	2303      	movs	r3, #3
 c00493c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c00493e:	e006      	b.n	c00494e <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c004940:	4b2a      	ldr	r3, [pc, #168]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c004942:	681b      	ldr	r3, [r3, #0]
 c004944:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004948:	2b00      	cmp	r3, #0
 c00494a:	d1e9      	bne.n	c004920 <RCCEx_PLLSAI2_Config+0x84>
 c00494c:	e000      	b.n	c004950 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c00494e:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004950:	7bfb      	ldrb	r3, [r7, #15]
 c004952:	2b00      	cmp	r3, #0
 c004954:	d144      	bne.n	c0049e0 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c004956:	683b      	ldr	r3, [r7, #0]
 c004958:	2b00      	cmp	r3, #0
 c00495a:	d115      	bne.n	c004988 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c00495c:	4b23      	ldr	r3, [pc, #140]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c00495e:	695a      	ldr	r2, [r3, #20]
 c004960:	4b23      	ldr	r3, [pc, #140]	; (c0049f0 <RCCEx_PLLSAI2_Config+0x154>)
 c004962:	4013      	ands	r3, r2
 c004964:	687a      	ldr	r2, [r7, #4]
 c004966:	6892      	ldr	r2, [r2, #8]
 c004968:	0211      	lsls	r1, r2, #8
 c00496a:	687a      	ldr	r2, [r7, #4]
 c00496c:	68d2      	ldr	r2, [r2, #12]
 c00496e:	06d2      	lsls	r2, r2, #27
 c004970:	4311      	orrs	r1, r2
 c004972:	687a      	ldr	r2, [r7, #4]
 c004974:	6852      	ldr	r2, [r2, #4]
 c004976:	3a01      	subs	r2, #1
 c004978:	0112      	lsls	r2, r2, #4
 c00497a:	4311      	orrs	r1, r2
 c00497c:	687a      	ldr	r2, [r7, #4]
 c00497e:	6812      	ldr	r2, [r2, #0]
 c004980:	430a      	orrs	r2, r1
 c004982:	491a      	ldr	r1, [pc, #104]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c004984:	4313      	orrs	r3, r2
 c004986:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c004988:	4b18      	ldr	r3, [pc, #96]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c00498a:	681b      	ldr	r3, [r3, #0]
 c00498c:	4a17      	ldr	r2, [pc, #92]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c00498e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004992:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004994:	f7fd fa38 	bl	c001e08 <HAL_GetTick>
 c004998:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00499a:	e00f      	b.n	c0049bc <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c00499c:	f7fd fa34 	bl	c001e08 <HAL_GetTick>
 c0049a0:	4602      	mov	r2, r0
 c0049a2:	68bb      	ldr	r3, [r7, #8]
 c0049a4:	1ad3      	subs	r3, r2, r3
 c0049a6:	2b02      	cmp	r3, #2
 c0049a8:	d908      	bls.n	c0049bc <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0049aa:	4b10      	ldr	r3, [pc, #64]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0049ac:	681b      	ldr	r3, [r3, #0]
 c0049ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0049b2:	2b00      	cmp	r3, #0
 c0049b4:	d109      	bne.n	c0049ca <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c0049b6:	2303      	movs	r3, #3
 c0049b8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0049ba:	e006      	b.n	c0049ca <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c0049bc:	4b0b      	ldr	r3, [pc, #44]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0049be:	681b      	ldr	r3, [r3, #0]
 c0049c0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0049c4:	2b00      	cmp	r3, #0
 c0049c6:	d0e9      	beq.n	c00499c <RCCEx_PLLSAI2_Config+0x100>
 c0049c8:	e000      	b.n	c0049cc <RCCEx_PLLSAI2_Config+0x130>
          break;
 c0049ca:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c0049cc:	7bfb      	ldrb	r3, [r7, #15]
 c0049ce:	2b00      	cmp	r3, #0
 c0049d0:	d106      	bne.n	c0049e0 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c0049d2:	4b06      	ldr	r3, [pc, #24]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0049d4:	695a      	ldr	r2, [r3, #20]
 c0049d6:	687b      	ldr	r3, [r7, #4]
 c0049d8:	691b      	ldr	r3, [r3, #16]
 c0049da:	4904      	ldr	r1, [pc, #16]	; (c0049ec <RCCEx_PLLSAI2_Config+0x150>)
 c0049dc:	4313      	orrs	r3, r2
 c0049de:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c0049e0:	7bfb      	ldrb	r3, [r7, #15]
}
 c0049e2:	4618      	mov	r0, r3
 c0049e4:	3710      	adds	r7, #16
 c0049e6:	46bd      	mov	sp, r7
 c0049e8:	bd80      	pop	{r7, pc}
 c0049ea:	bf00      	nop
 c0049ec:	50021000 	.word	0x50021000
 c0049f0:	07ff800c 	.word	0x07ff800c

0c0049f4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c0049f4:	b580      	push	{r7, lr}
 c0049f6:	b084      	sub	sp, #16
 c0049f8:	af00      	add	r7, sp, #0
 c0049fa:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c0049fc:	687b      	ldr	r3, [r7, #4]
 c0049fe:	2b00      	cmp	r3, #0
 c004a00:	d101      	bne.n	c004a06 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c004a02:	2301      	movs	r3, #1
 c004a04:	e095      	b.n	c004b32 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 c004a06:	687b      	ldr	r3, [r7, #4]
 c004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004a0a:	2b00      	cmp	r3, #0
 c004a0c:	d108      	bne.n	c004a20 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 c004a0e:	687b      	ldr	r3, [r7, #4]
 c004a10:	685b      	ldr	r3, [r3, #4]
 c004a12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004a16:	d009      	beq.n	c004a2c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c004a18:	687b      	ldr	r3, [r7, #4]
 c004a1a:	2200      	movs	r2, #0
 c004a1c:	61da      	str	r2, [r3, #28]
 c004a1e:	e005      	b.n	c004a2c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 c004a20:	687b      	ldr	r3, [r7, #4]
 c004a22:	2200      	movs	r2, #0
 c004a24:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 c004a26:	687b      	ldr	r3, [r7, #4]
 c004a28:	2200      	movs	r2, #0
 c004a2a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004a2c:	687b      	ldr	r3, [r7, #4]
 c004a2e:	2200      	movs	r2, #0
 c004a30:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c004a32:	687b      	ldr	r3, [r7, #4]
 c004a34:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004a38:	b2db      	uxtb	r3, r3
 c004a3a:	2b00      	cmp	r3, #0
 c004a3c:	d106      	bne.n	c004a4c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c004a3e:	687b      	ldr	r3, [r7, #4]
 c004a40:	2200      	movs	r2, #0
 c004a42:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c004a46:	6878      	ldr	r0, [r7, #4]
 c004a48:	f7fc fd64 	bl	c001514 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c004a4c:	687b      	ldr	r3, [r7, #4]
 c004a4e:	2202      	movs	r2, #2
 c004a50:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c004a54:	687b      	ldr	r3, [r7, #4]
 c004a56:	681b      	ldr	r3, [r3, #0]
 c004a58:	681a      	ldr	r2, [r3, #0]
 c004a5a:	687b      	ldr	r3, [r7, #4]
 c004a5c:	681b      	ldr	r3, [r3, #0]
 c004a5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004a62:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c004a64:	687b      	ldr	r3, [r7, #4]
 c004a66:	68db      	ldr	r3, [r3, #12]
 c004a68:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004a6c:	d902      	bls.n	c004a74 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 c004a6e:	2300      	movs	r3, #0
 c004a70:	60fb      	str	r3, [r7, #12]
 c004a72:	e002      	b.n	c004a7a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 c004a74:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c004a78:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 c004a7a:	687b      	ldr	r3, [r7, #4]
 c004a7c:	68db      	ldr	r3, [r3, #12]
 c004a7e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 c004a82:	d007      	beq.n	c004a94 <HAL_SPI_Init+0xa0>
 c004a84:	687b      	ldr	r3, [r7, #4]
 c004a86:	68db      	ldr	r3, [r3, #12]
 c004a88:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004a8c:	d002      	beq.n	c004a94 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004a8e:	687b      	ldr	r3, [r7, #4]
 c004a90:	2200      	movs	r2, #0
 c004a92:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 c004a94:	687b      	ldr	r3, [r7, #4]
 c004a96:	685b      	ldr	r3, [r3, #4]
 c004a98:	f403 7282 	and.w	r2, r3, #260	; 0x104
 c004a9c:	687b      	ldr	r3, [r7, #4]
 c004a9e:	689b      	ldr	r3, [r3, #8]
 c004aa0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 c004aa4:	431a      	orrs	r2, r3
 c004aa6:	687b      	ldr	r3, [r7, #4]
 c004aa8:	691b      	ldr	r3, [r3, #16]
 c004aaa:	f003 0302 	and.w	r3, r3, #2
 c004aae:	431a      	orrs	r2, r3
 c004ab0:	687b      	ldr	r3, [r7, #4]
 c004ab2:	695b      	ldr	r3, [r3, #20]
 c004ab4:	f003 0301 	and.w	r3, r3, #1
 c004ab8:	431a      	orrs	r2, r3
 c004aba:	687b      	ldr	r3, [r7, #4]
 c004abc:	699b      	ldr	r3, [r3, #24]
 c004abe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004ac2:	431a      	orrs	r2, r3
 c004ac4:	687b      	ldr	r3, [r7, #4]
 c004ac6:	69db      	ldr	r3, [r3, #28]
 c004ac8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 c004acc:	431a      	orrs	r2, r3
 c004ace:	687b      	ldr	r3, [r7, #4]
 c004ad0:	6a1b      	ldr	r3, [r3, #32]
 c004ad2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004ad6:	ea42 0103 	orr.w	r1, r2, r3
 c004ada:	687b      	ldr	r3, [r7, #4]
 c004adc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004ade:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 c004ae2:	687b      	ldr	r3, [r7, #4]
 c004ae4:	681b      	ldr	r3, [r3, #0]
 c004ae6:	430a      	orrs	r2, r1
 c004ae8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 c004aea:	687b      	ldr	r3, [r7, #4]
 c004aec:	699b      	ldr	r3, [r3, #24]
 c004aee:	0c1b      	lsrs	r3, r3, #16
 c004af0:	f003 0204 	and.w	r2, r3, #4
 c004af4:	687b      	ldr	r3, [r7, #4]
 c004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004af8:	f003 0310 	and.w	r3, r3, #16
 c004afc:	431a      	orrs	r2, r3
 c004afe:	687b      	ldr	r3, [r7, #4]
 c004b00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004b02:	f003 0308 	and.w	r3, r3, #8
 c004b06:	431a      	orrs	r2, r3
 c004b08:	687b      	ldr	r3, [r7, #4]
 c004b0a:	68db      	ldr	r3, [r3, #12]
 c004b0c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 c004b10:	ea42 0103 	orr.w	r1, r2, r3
 c004b14:	68fb      	ldr	r3, [r7, #12]
 c004b16:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 c004b1a:	687b      	ldr	r3, [r7, #4]
 c004b1c:	681b      	ldr	r3, [r3, #0]
 c004b1e:	430a      	orrs	r2, r1
 c004b20:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c004b22:	687b      	ldr	r3, [r7, #4]
 c004b24:	2200      	movs	r2, #0
 c004b26:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 c004b28:	687b      	ldr	r3, [r7, #4]
 c004b2a:	2201      	movs	r2, #1
 c004b2c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 c004b30:	2300      	movs	r3, #0
}
 c004b32:	4618      	mov	r0, r3
 c004b34:	3710      	adds	r7, #16
 c004b36:	46bd      	mov	sp, r7
 c004b38:	bd80      	pop	{r7, pc}
	...

0c004b3c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c004b3c:	b580      	push	{r7, lr}
 c004b3e:	b086      	sub	sp, #24
 c004b40:	af00      	add	r7, sp, #0
 c004b42:	60f8      	str	r0, [r7, #12]
 c004b44:	60b9      	str	r1, [r7, #8]
 c004b46:	4613      	mov	r3, r2
 c004b48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004b4a:	2300      	movs	r3, #0
 c004b4c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 c004b4e:	68fb      	ldr	r3, [r7, #12]
 c004b50:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004b54:	2b01      	cmp	r3, #1
 c004b56:	d101      	bne.n	c004b5c <HAL_SPI_Transmit_DMA+0x20>
 c004b58:	2302      	movs	r3, #2
 c004b5a:	e0d8      	b.n	c004d0e <HAL_SPI_Transmit_DMA+0x1d2>
 c004b5c:	68fb      	ldr	r3, [r7, #12]
 c004b5e:	2201      	movs	r2, #1
 c004b60:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c004b64:	68fb      	ldr	r3, [r7, #12]
 c004b66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004b6a:	b2db      	uxtb	r3, r3
 c004b6c:	2b01      	cmp	r3, #1
 c004b6e:	d002      	beq.n	c004b76 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 c004b70:	2302      	movs	r3, #2
 c004b72:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004b74:	e0c6      	b.n	c004d04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 c004b76:	68bb      	ldr	r3, [r7, #8]
 c004b78:	2b00      	cmp	r3, #0
 c004b7a:	d002      	beq.n	c004b82 <HAL_SPI_Transmit_DMA+0x46>
 c004b7c:	88fb      	ldrh	r3, [r7, #6]
 c004b7e:	2b00      	cmp	r3, #0
 c004b80:	d102      	bne.n	c004b88 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 c004b82:	2301      	movs	r3, #1
 c004b84:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004b86:	e0bd      	b.n	c004d04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 c004b88:	68fb      	ldr	r3, [r7, #12]
 c004b8a:	2203      	movs	r2, #3
 c004b8c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c004b90:	68fb      	ldr	r3, [r7, #12]
 c004b92:	2200      	movs	r2, #0
 c004b94:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 c004b96:	68fb      	ldr	r3, [r7, #12]
 c004b98:	68ba      	ldr	r2, [r7, #8]
 c004b9a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c004b9c:	68fb      	ldr	r3, [r7, #12]
 c004b9e:	88fa      	ldrh	r2, [r7, #6]
 c004ba0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c004ba2:	68fb      	ldr	r3, [r7, #12]
 c004ba4:	88fa      	ldrh	r2, [r7, #6]
 c004ba6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 c004ba8:	68fb      	ldr	r3, [r7, #12]
 c004baa:	2200      	movs	r2, #0
 c004bac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 c004bae:	68fb      	ldr	r3, [r7, #12]
 c004bb0:	2200      	movs	r2, #0
 c004bb2:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 c004bb4:	68fb      	ldr	r3, [r7, #12]
 c004bb6:	2200      	movs	r2, #0
 c004bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 c004bba:	68fb      	ldr	r3, [r7, #12]
 c004bbc:	2200      	movs	r2, #0
 c004bbe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 c004bc2:	68fb      	ldr	r3, [r7, #12]
 c004bc4:	2200      	movs	r2, #0
 c004bc6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c004bca:	68fb      	ldr	r3, [r7, #12]
 c004bcc:	689b      	ldr	r3, [r3, #8]
 c004bce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004bd2:	d10f      	bne.n	c004bf4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c004bd4:	68fb      	ldr	r3, [r7, #12]
 c004bd6:	681b      	ldr	r3, [r3, #0]
 c004bd8:	681a      	ldr	r2, [r3, #0]
 c004bda:	68fb      	ldr	r3, [r7, #12]
 c004bdc:	681b      	ldr	r3, [r3, #0]
 c004bde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004be2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 c004be4:	68fb      	ldr	r3, [r7, #12]
 c004be6:	681b      	ldr	r3, [r3, #0]
 c004be8:	681a      	ldr	r2, [r3, #0]
 c004bea:	68fb      	ldr	r3, [r7, #12]
 c004bec:	681b      	ldr	r3, [r3, #0]
 c004bee:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c004bf2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 c004bf4:	68fb      	ldr	r3, [r7, #12]
 c004bf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004bf8:	4a47      	ldr	r2, [pc, #284]	; (c004d18 <HAL_SPI_Transmit_DMA+0x1dc>)
 c004bfa:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 c004bfc:	68fb      	ldr	r3, [r7, #12]
 c004bfe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004c00:	4a46      	ldr	r2, [pc, #280]	; (c004d1c <HAL_SPI_Transmit_DMA+0x1e0>)
 c004c02:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 c004c04:	68fb      	ldr	r3, [r7, #12]
 c004c06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004c08:	4a45      	ldr	r2, [pc, #276]	; (c004d20 <HAL_SPI_Transmit_DMA+0x1e4>)
 c004c0a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 c004c0c:	68fb      	ldr	r3, [r7, #12]
 c004c0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004c10:	2200      	movs	r2, #0
 c004c12:	641a      	str	r2, [r3, #64]	; 0x40

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c004c14:	68fb      	ldr	r3, [r7, #12]
 c004c16:	681b      	ldr	r3, [r3, #0]
 c004c18:	685a      	ldr	r2, [r3, #4]
 c004c1a:	68fb      	ldr	r3, [r7, #12]
 c004c1c:	681b      	ldr	r3, [r3, #0]
 c004c1e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c004c22:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 c004c24:	68fb      	ldr	r3, [r7, #12]
 c004c26:	68db      	ldr	r3, [r3, #12]
 c004c28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004c2c:	d82d      	bhi.n	c004c8a <HAL_SPI_Transmit_DMA+0x14e>
 c004c2e:	68fb      	ldr	r3, [r7, #12]
 c004c30:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004c32:	699b      	ldr	r3, [r3, #24]
 c004c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004c38:	d127      	bne.n	c004c8a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 c004c3a:	68fb      	ldr	r3, [r7, #12]
 c004c3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004c3e:	b29b      	uxth	r3, r3
 c004c40:	f003 0301 	and.w	r3, r3, #1
 c004c44:	2b00      	cmp	r3, #0
 c004c46:	d10f      	bne.n	c004c68 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c004c48:	68fb      	ldr	r3, [r7, #12]
 c004c4a:	681b      	ldr	r3, [r3, #0]
 c004c4c:	685a      	ldr	r2, [r3, #4]
 c004c4e:	68fb      	ldr	r3, [r7, #12]
 c004c50:	681b      	ldr	r3, [r3, #0]
 c004c52:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c004c56:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 c004c58:	68fb      	ldr	r3, [r7, #12]
 c004c5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004c5c:	b29b      	uxth	r3, r3
 c004c5e:	085b      	lsrs	r3, r3, #1
 c004c60:	b29a      	uxth	r2, r3
 c004c62:	68fb      	ldr	r3, [r7, #12]
 c004c64:	87da      	strh	r2, [r3, #62]	; 0x3e
 c004c66:	e010      	b.n	c004c8a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c004c68:	68fb      	ldr	r3, [r7, #12]
 c004c6a:	681b      	ldr	r3, [r3, #0]
 c004c6c:	685a      	ldr	r2, [r3, #4]
 c004c6e:	68fb      	ldr	r3, [r7, #12]
 c004c70:	681b      	ldr	r3, [r3, #0]
 c004c72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c004c76:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c004c78:	68fb      	ldr	r3, [r7, #12]
 c004c7a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004c7c:	b29b      	uxth	r3, r3
 c004c7e:	085b      	lsrs	r3, r3, #1
 c004c80:	b29b      	uxth	r3, r3
 c004c82:	3301      	adds	r3, #1
 c004c84:	b29a      	uxth	r2, r3
 c004c86:	68fb      	ldr	r3, [r7, #12]
 c004c88:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c004c8a:	68fb      	ldr	r3, [r7, #12]
 c004c8c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c004c8e:	68fb      	ldr	r3, [r7, #12]
 c004c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004c92:	4619      	mov	r1, r3
 c004c94:	68fb      	ldr	r3, [r7, #12]
 c004c96:	681b      	ldr	r3, [r3, #0]
 c004c98:	330c      	adds	r3, #12
 c004c9a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c004c9c:	68fb      	ldr	r3, [r7, #12]
 c004c9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004ca0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c004ca2:	f7fd fa75 	bl	c002190 <HAL_DMA_Start_IT>
 c004ca6:	4603      	mov	r3, r0
 c004ca8:	2b00      	cmp	r3, #0
 c004caa:	d00c      	beq.n	c004cc6 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004cac:	68fb      	ldr	r3, [r7, #12]
 c004cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004cb0:	f043 0210 	orr.w	r2, r3, #16
 c004cb4:	68fb      	ldr	r3, [r7, #12]
 c004cb6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c004cb8:	2301      	movs	r3, #1
 c004cba:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c004cbc:	68fb      	ldr	r3, [r7, #12]
 c004cbe:	2201      	movs	r2, #1
 c004cc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c004cc4:	e01e      	b.n	c004d04 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c004cc6:	68fb      	ldr	r3, [r7, #12]
 c004cc8:	681b      	ldr	r3, [r3, #0]
 c004cca:	681b      	ldr	r3, [r3, #0]
 c004ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004cd0:	2b40      	cmp	r3, #64	; 0x40
 c004cd2:	d007      	beq.n	c004ce4 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c004cd4:	68fb      	ldr	r3, [r7, #12]
 c004cd6:	681b      	ldr	r3, [r3, #0]
 c004cd8:	681a      	ldr	r2, [r3, #0]
 c004cda:	68fb      	ldr	r3, [r7, #12]
 c004cdc:	681b      	ldr	r3, [r3, #0]
 c004cde:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c004ce2:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c004ce4:	68fb      	ldr	r3, [r7, #12]
 c004ce6:	681b      	ldr	r3, [r3, #0]
 c004ce8:	685a      	ldr	r2, [r3, #4]
 c004cea:	68fb      	ldr	r3, [r7, #12]
 c004cec:	681b      	ldr	r3, [r3, #0]
 c004cee:	f042 0220 	orr.w	r2, r2, #32
 c004cf2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c004cf4:	68fb      	ldr	r3, [r7, #12]
 c004cf6:	681b      	ldr	r3, [r3, #0]
 c004cf8:	685a      	ldr	r2, [r3, #4]
 c004cfa:	68fb      	ldr	r3, [r7, #12]
 c004cfc:	681b      	ldr	r3, [r3, #0]
 c004cfe:	f042 0202 	orr.w	r2, r2, #2
 c004d02:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c004d04:	68fb      	ldr	r3, [r7, #12]
 c004d06:	2200      	movs	r2, #0
 c004d08:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c004d0c:	7dfb      	ldrb	r3, [r7, #23]
}
 c004d0e:	4618      	mov	r0, r3
 c004d10:	3718      	adds	r7, #24
 c004d12:	46bd      	mov	sp, r7
 c004d14:	bd80      	pop	{r7, pc}
 c004d16:	bf00      	nop
 c004d18:	0c0054b3 	.word	0x0c0054b3
 c004d1c:	0c0052d5 	.word	0x0c0052d5
 c004d20:	0c005507 	.word	0x0c005507

0c004d24 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c004d24:	b580      	push	{r7, lr}
 c004d26:	b086      	sub	sp, #24
 c004d28:	af00      	add	r7, sp, #0
 c004d2a:	60f8      	str	r0, [r7, #12]
 c004d2c:	60b9      	str	r1, [r7, #8]
 c004d2e:	4613      	mov	r3, r2
 c004d30:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004d32:	2300      	movs	r3, #0
 c004d34:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c004d36:	68fb      	ldr	r3, [r7, #12]
 c004d38:	689b      	ldr	r3, [r3, #8]
 c004d3a:	2b00      	cmp	r3, #0
 c004d3c:	d110      	bne.n	c004d60 <HAL_SPI_Receive_DMA+0x3c>
 c004d3e:	68fb      	ldr	r3, [r7, #12]
 c004d40:	685b      	ldr	r3, [r3, #4]
 c004d42:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004d46:	d10b      	bne.n	c004d60 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 c004d48:	68fb      	ldr	r3, [r7, #12]
 c004d4a:	2204      	movs	r2, #4
 c004d4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 c004d50:	88fb      	ldrh	r3, [r7, #6]
 c004d52:	68ba      	ldr	r2, [r7, #8]
 c004d54:	68b9      	ldr	r1, [r7, #8]
 c004d56:	68f8      	ldr	r0, [r7, #12]
 c004d58:	f000 f908 	bl	c004f6c <HAL_SPI_TransmitReceive_DMA>
 c004d5c:	4603      	mov	r3, r0
 c004d5e:	e0fb      	b.n	c004f58 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 c004d60:	68fb      	ldr	r3, [r7, #12]
 c004d62:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004d66:	2b01      	cmp	r3, #1
 c004d68:	d101      	bne.n	c004d6e <HAL_SPI_Receive_DMA+0x4a>
 c004d6a:	2302      	movs	r3, #2
 c004d6c:	e0f4      	b.n	c004f58 <HAL_SPI_Receive_DMA+0x234>
 c004d6e:	68fb      	ldr	r3, [r7, #12]
 c004d70:	2201      	movs	r2, #1
 c004d72:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c004d76:	68fb      	ldr	r3, [r7, #12]
 c004d78:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004d7c:	b2db      	uxtb	r3, r3
 c004d7e:	2b01      	cmp	r3, #1
 c004d80:	d002      	beq.n	c004d88 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 c004d82:	2302      	movs	r3, #2
 c004d84:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004d86:	e0e2      	b.n	c004f4e <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 c004d88:	68bb      	ldr	r3, [r7, #8]
 c004d8a:	2b00      	cmp	r3, #0
 c004d8c:	d002      	beq.n	c004d94 <HAL_SPI_Receive_DMA+0x70>
 c004d8e:	88fb      	ldrh	r3, [r7, #6]
 c004d90:	2b00      	cmp	r3, #0
 c004d92:	d102      	bne.n	c004d9a <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 c004d94:	2301      	movs	r3, #1
 c004d96:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004d98:	e0d9      	b.n	c004f4e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 c004d9a:	68fb      	ldr	r3, [r7, #12]
 c004d9c:	2204      	movs	r2, #4
 c004d9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c004da2:	68fb      	ldr	r3, [r7, #12]
 c004da4:	2200      	movs	r2, #0
 c004da6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 c004da8:	68fb      	ldr	r3, [r7, #12]
 c004daa:	68ba      	ldr	r2, [r7, #8]
 c004dac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c004dae:	68fb      	ldr	r3, [r7, #12]
 c004db0:	88fa      	ldrh	r2, [r7, #6]
 c004db2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c004db6:	68fb      	ldr	r3, [r7, #12]
 c004db8:	88fa      	ldrh	r2, [r7, #6]
 c004dba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c004dbe:	68fb      	ldr	r3, [r7, #12]
 c004dc0:	2200      	movs	r2, #0
 c004dc2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c004dc4:	68fb      	ldr	r3, [r7, #12]
 c004dc6:	2200      	movs	r2, #0
 c004dc8:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 c004dca:	68fb      	ldr	r3, [r7, #12]
 c004dcc:	2200      	movs	r2, #0
 c004dce:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 c004dd0:	68fb      	ldr	r3, [r7, #12]
 c004dd2:	2200      	movs	r2, #0
 c004dd4:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c004dd6:	68fb      	ldr	r3, [r7, #12]
 c004dd8:	689b      	ldr	r3, [r3, #8]
 c004dda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004dde:	d10f      	bne.n	c004e00 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c004de0:	68fb      	ldr	r3, [r7, #12]
 c004de2:	681b      	ldr	r3, [r3, #0]
 c004de4:	681a      	ldr	r2, [r3, #0]
 c004de6:	68fb      	ldr	r3, [r7, #12]
 c004de8:	681b      	ldr	r3, [r3, #0]
 c004dea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004dee:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 c004df0:	68fb      	ldr	r3, [r7, #12]
 c004df2:	681b      	ldr	r3, [r3, #0]
 c004df4:	681a      	ldr	r2, [r3, #0]
 c004df6:	68fb      	ldr	r3, [r7, #12]
 c004df8:	681b      	ldr	r3, [r3, #0]
 c004dfa:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c004dfe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c004e00:	68fb      	ldr	r3, [r7, #12]
 c004e02:	681b      	ldr	r3, [r3, #0]
 c004e04:	685a      	ldr	r2, [r3, #4]
 c004e06:	68fb      	ldr	r3, [r7, #12]
 c004e08:	681b      	ldr	r3, [r3, #0]
 c004e0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c004e0e:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c004e10:	68fb      	ldr	r3, [r7, #12]
 c004e12:	68db      	ldr	r3, [r3, #12]
 c004e14:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004e18:	d908      	bls.n	c004e2c <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004e1a:	68fb      	ldr	r3, [r7, #12]
 c004e1c:	681b      	ldr	r3, [r3, #0]
 c004e1e:	685a      	ldr	r2, [r3, #4]
 c004e20:	68fb      	ldr	r3, [r7, #12]
 c004e22:	681b      	ldr	r3, [r3, #0]
 c004e24:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c004e28:	605a      	str	r2, [r3, #4]
 c004e2a:	e042      	b.n	c004eb2 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004e2c:	68fb      	ldr	r3, [r7, #12]
 c004e2e:	681b      	ldr	r3, [r3, #0]
 c004e30:	685a      	ldr	r2, [r3, #4]
 c004e32:	68fb      	ldr	r3, [r7, #12]
 c004e34:	681b      	ldr	r3, [r3, #0]
 c004e36:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c004e3a:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c004e3c:	68fb      	ldr	r3, [r7, #12]
 c004e3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004e40:	699b      	ldr	r3, [r3, #24]
 c004e42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004e46:	d134      	bne.n	c004eb2 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004e48:	68fb      	ldr	r3, [r7, #12]
 c004e4a:	681b      	ldr	r3, [r3, #0]
 c004e4c:	685a      	ldr	r2, [r3, #4]
 c004e4e:	68fb      	ldr	r3, [r7, #12]
 c004e50:	681b      	ldr	r3, [r3, #0]
 c004e52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c004e56:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c004e58:	68fb      	ldr	r3, [r7, #12]
 c004e5a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004e5e:	b29b      	uxth	r3, r3
 c004e60:	f003 0301 	and.w	r3, r3, #1
 c004e64:	2b00      	cmp	r3, #0
 c004e66:	d111      	bne.n	c004e8c <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c004e68:	68fb      	ldr	r3, [r7, #12]
 c004e6a:	681b      	ldr	r3, [r3, #0]
 c004e6c:	685a      	ldr	r2, [r3, #4]
 c004e6e:	68fb      	ldr	r3, [r7, #12]
 c004e70:	681b      	ldr	r3, [r3, #0]
 c004e72:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c004e76:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c004e78:	68fb      	ldr	r3, [r7, #12]
 c004e7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004e7e:	b29b      	uxth	r3, r3
 c004e80:	085b      	lsrs	r3, r3, #1
 c004e82:	b29a      	uxth	r2, r3
 c004e84:	68fb      	ldr	r3, [r7, #12]
 c004e86:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c004e8a:	e012      	b.n	c004eb2 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c004e8c:	68fb      	ldr	r3, [r7, #12]
 c004e8e:	681b      	ldr	r3, [r3, #0]
 c004e90:	685a      	ldr	r2, [r3, #4]
 c004e92:	68fb      	ldr	r3, [r7, #12]
 c004e94:	681b      	ldr	r3, [r3, #0]
 c004e96:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c004e9a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c004e9c:	68fb      	ldr	r3, [r7, #12]
 c004e9e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004ea2:	b29b      	uxth	r3, r3
 c004ea4:	085b      	lsrs	r3, r3, #1
 c004ea6:	b29b      	uxth	r3, r3
 c004ea8:	3301      	adds	r3, #1
 c004eaa:	b29a      	uxth	r2, r3
 c004eac:	68fb      	ldr	r3, [r7, #12]
 c004eae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c004eb2:	68fb      	ldr	r3, [r7, #12]
 c004eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004eb6:	4a2a      	ldr	r2, [pc, #168]	; (c004f60 <HAL_SPI_Receive_DMA+0x23c>)
 c004eb8:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 c004eba:	68fb      	ldr	r3, [r7, #12]
 c004ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004ebe:	4a29      	ldr	r2, [pc, #164]	; (c004f64 <HAL_SPI_Receive_DMA+0x240>)
 c004ec0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c004ec2:	68fb      	ldr	r3, [r7, #12]
 c004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004ec6:	4a28      	ldr	r2, [pc, #160]	; (c004f68 <HAL_SPI_Receive_DMA+0x244>)
 c004ec8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c004eca:	68fb      	ldr	r3, [r7, #12]
 c004ecc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004ece:	2200      	movs	r2, #0
 c004ed0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c004ed2:	68fb      	ldr	r3, [r7, #12]
 c004ed4:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c004ed6:	68fb      	ldr	r3, [r7, #12]
 c004ed8:	681b      	ldr	r3, [r3, #0]
 c004eda:	330c      	adds	r3, #12
 c004edc:	4619      	mov	r1, r3
 c004ede:	68fb      	ldr	r3, [r7, #12]
 c004ee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c004ee2:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c004ee4:	68fb      	ldr	r3, [r7, #12]
 c004ee6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004eea:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c004eec:	f7fd f950 	bl	c002190 <HAL_DMA_Start_IT>
 c004ef0:	4603      	mov	r3, r0
 c004ef2:	2b00      	cmp	r3, #0
 c004ef4:	d00c      	beq.n	c004f10 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004ef6:	68fb      	ldr	r3, [r7, #12]
 c004ef8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004efa:	f043 0210 	orr.w	r2, r3, #16
 c004efe:	68fb      	ldr	r3, [r7, #12]
 c004f00:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c004f02:	2301      	movs	r3, #1
 c004f04:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c004f06:	68fb      	ldr	r3, [r7, #12]
 c004f08:	2201      	movs	r2, #1
 c004f0a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c004f0e:	e01e      	b.n	c004f4e <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c004f10:	68fb      	ldr	r3, [r7, #12]
 c004f12:	681b      	ldr	r3, [r3, #0]
 c004f14:	681b      	ldr	r3, [r3, #0]
 c004f16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004f1a:	2b40      	cmp	r3, #64	; 0x40
 c004f1c:	d007      	beq.n	c004f2e <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c004f1e:	68fb      	ldr	r3, [r7, #12]
 c004f20:	681b      	ldr	r3, [r3, #0]
 c004f22:	681a      	ldr	r2, [r3, #0]
 c004f24:	68fb      	ldr	r3, [r7, #12]
 c004f26:	681b      	ldr	r3, [r3, #0]
 c004f28:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c004f2c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c004f2e:	68fb      	ldr	r3, [r7, #12]
 c004f30:	681b      	ldr	r3, [r3, #0]
 c004f32:	685a      	ldr	r2, [r3, #4]
 c004f34:	68fb      	ldr	r3, [r7, #12]
 c004f36:	681b      	ldr	r3, [r3, #0]
 c004f38:	f042 0220 	orr.w	r2, r2, #32
 c004f3c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c004f3e:	68fb      	ldr	r3, [r7, #12]
 c004f40:	681b      	ldr	r3, [r3, #0]
 c004f42:	685a      	ldr	r2, [r3, #4]
 c004f44:	68fb      	ldr	r3, [r7, #12]
 c004f46:	681b      	ldr	r3, [r3, #0]
 c004f48:	f042 0201 	orr.w	r2, r2, #1
 c004f4c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c004f4e:	68fb      	ldr	r3, [r7, #12]
 c004f50:	2200      	movs	r2, #0
 c004f52:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c004f56:	7dfb      	ldrb	r3, [r7, #23]
}
 c004f58:	4618      	mov	r0, r3
 c004f5a:	3718      	adds	r7, #24
 c004f5c:	46bd      	mov	sp, r7
 c004f5e:	bd80      	pop	{r7, pc}
 c004f60:	0c0054cf 	.word	0x0c0054cf
 c004f64:	0c00537b 	.word	0x0c00537b
 c004f68:	0c005507 	.word	0x0c005507

0c004f6c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 c004f6c:	b580      	push	{r7, lr}
 c004f6e:	b086      	sub	sp, #24
 c004f70:	af00      	add	r7, sp, #0
 c004f72:	60f8      	str	r0, [r7, #12]
 c004f74:	60b9      	str	r1, [r7, #8]
 c004f76:	607a      	str	r2, [r7, #4]
 c004f78:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004f7a:	2300      	movs	r3, #0
 c004f7c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 c004f7e:	68fb      	ldr	r3, [r7, #12]
 c004f80:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004f84:	2b01      	cmp	r3, #1
 c004f86:	d101      	bne.n	c004f8c <HAL_SPI_TransmitReceive_DMA+0x20>
 c004f88:	2302      	movs	r3, #2
 c004f8a:	e16c      	b.n	c005266 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 c004f8c:	68fb      	ldr	r3, [r7, #12]
 c004f8e:	2201      	movs	r2, #1
 c004f90:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 c004f94:	68fb      	ldr	r3, [r7, #12]
 c004f96:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004f9a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 c004f9c:	68fb      	ldr	r3, [r7, #12]
 c004f9e:	685b      	ldr	r3, [r3, #4]
 c004fa0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 c004fa2:	7dbb      	ldrb	r3, [r7, #22]
 c004fa4:	2b01      	cmp	r3, #1
 c004fa6:	d00d      	beq.n	c004fc4 <HAL_SPI_TransmitReceive_DMA+0x58>
 c004fa8:	693b      	ldr	r3, [r7, #16]
 c004faa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004fae:	d106      	bne.n	c004fbe <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 c004fb0:	68fb      	ldr	r3, [r7, #12]
 c004fb2:	689b      	ldr	r3, [r3, #8]
 c004fb4:	2b00      	cmp	r3, #0
 c004fb6:	d102      	bne.n	c004fbe <HAL_SPI_TransmitReceive_DMA+0x52>
 c004fb8:	7dbb      	ldrb	r3, [r7, #22]
 c004fba:	2b04      	cmp	r3, #4
 c004fbc:	d002      	beq.n	c004fc4 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 c004fbe:	2302      	movs	r3, #2
 c004fc0:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004fc2:	e14b      	b.n	c00525c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 c004fc4:	68bb      	ldr	r3, [r7, #8]
 c004fc6:	2b00      	cmp	r3, #0
 c004fc8:	d005      	beq.n	c004fd6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c004fca:	687b      	ldr	r3, [r7, #4]
 c004fcc:	2b00      	cmp	r3, #0
 c004fce:	d002      	beq.n	c004fd6 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c004fd0:	887b      	ldrh	r3, [r7, #2]
 c004fd2:	2b00      	cmp	r3, #0
 c004fd4:	d102      	bne.n	c004fdc <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 c004fd6:	2301      	movs	r3, #1
 c004fd8:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004fda:	e13f      	b.n	c00525c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 c004fdc:	68fb      	ldr	r3, [r7, #12]
 c004fde:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004fe2:	b2db      	uxtb	r3, r3
 c004fe4:	2b04      	cmp	r3, #4
 c004fe6:	d003      	beq.n	c004ff0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 c004fe8:	68fb      	ldr	r3, [r7, #12]
 c004fea:	2205      	movs	r2, #5
 c004fec:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c004ff0:	68fb      	ldr	r3, [r7, #12]
 c004ff2:	2200      	movs	r2, #0
 c004ff4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 c004ff6:	68fb      	ldr	r3, [r7, #12]
 c004ff8:	68ba      	ldr	r2, [r7, #8]
 c004ffa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c004ffc:	68fb      	ldr	r3, [r7, #12]
 c004ffe:	887a      	ldrh	r2, [r7, #2]
 c005000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c005002:	68fb      	ldr	r3, [r7, #12]
 c005004:	887a      	ldrh	r2, [r7, #2]
 c005006:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 c005008:	68fb      	ldr	r3, [r7, #12]
 c00500a:	687a      	ldr	r2, [r7, #4]
 c00500c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c00500e:	68fb      	ldr	r3, [r7, #12]
 c005010:	887a      	ldrh	r2, [r7, #2]
 c005012:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c005016:	68fb      	ldr	r3, [r7, #12]
 c005018:	887a      	ldrh	r2, [r7, #2]
 c00501a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c00501e:	68fb      	ldr	r3, [r7, #12]
 c005020:	2200      	movs	r2, #0
 c005022:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c005024:	68fb      	ldr	r3, [r7, #12]
 c005026:	2200      	movs	r2, #0
 c005028:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 c00502a:	68fb      	ldr	r3, [r7, #12]
 c00502c:	681b      	ldr	r3, [r3, #0]
 c00502e:	685a      	ldr	r2, [r3, #4]
 c005030:	68fb      	ldr	r3, [r7, #12]
 c005032:	681b      	ldr	r3, [r3, #0]
 c005034:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c005038:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c00503a:	68fb      	ldr	r3, [r7, #12]
 c00503c:	68db      	ldr	r3, [r3, #12]
 c00503e:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005042:	d908      	bls.n	c005056 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005044:	68fb      	ldr	r3, [r7, #12]
 c005046:	681b      	ldr	r3, [r3, #0]
 c005048:	685a      	ldr	r2, [r3, #4]
 c00504a:	68fb      	ldr	r3, [r7, #12]
 c00504c:	681b      	ldr	r3, [r3, #0]
 c00504e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005052:	605a      	str	r2, [r3, #4]
 c005054:	e06f      	b.n	c005136 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005056:	68fb      	ldr	r3, [r7, #12]
 c005058:	681b      	ldr	r3, [r3, #0]
 c00505a:	685a      	ldr	r2, [r3, #4]
 c00505c:	68fb      	ldr	r3, [r7, #12]
 c00505e:	681b      	ldr	r3, [r3, #0]
 c005060:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c005064:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005066:	68fb      	ldr	r3, [r7, #12]
 c005068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00506a:	699b      	ldr	r3, [r3, #24]
 c00506c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005070:	d126      	bne.n	c0050c0 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 c005072:	68fb      	ldr	r3, [r7, #12]
 c005074:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 c005076:	f003 0301 	and.w	r3, r3, #1
 c00507a:	2b00      	cmp	r3, #0
 c00507c:	d10f      	bne.n	c00509e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c00507e:	68fb      	ldr	r3, [r7, #12]
 c005080:	681b      	ldr	r3, [r3, #0]
 c005082:	685a      	ldr	r2, [r3, #4]
 c005084:	68fb      	ldr	r3, [r7, #12]
 c005086:	681b      	ldr	r3, [r3, #0]
 c005088:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c00508c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 c00508e:	68fb      	ldr	r3, [r7, #12]
 c005090:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005092:	b29b      	uxth	r3, r3
 c005094:	085b      	lsrs	r3, r3, #1
 c005096:	b29a      	uxth	r2, r3
 c005098:	68fb      	ldr	r3, [r7, #12]
 c00509a:	87da      	strh	r2, [r3, #62]	; 0x3e
 c00509c:	e010      	b.n	c0050c0 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c00509e:	68fb      	ldr	r3, [r7, #12]
 c0050a0:	681b      	ldr	r3, [r3, #0]
 c0050a2:	685a      	ldr	r2, [r3, #4]
 c0050a4:	68fb      	ldr	r3, [r7, #12]
 c0050a6:	681b      	ldr	r3, [r3, #0]
 c0050a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c0050ac:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c0050ae:	68fb      	ldr	r3, [r7, #12]
 c0050b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0050b2:	b29b      	uxth	r3, r3
 c0050b4:	085b      	lsrs	r3, r3, #1
 c0050b6:	b29b      	uxth	r3, r3
 c0050b8:	3301      	adds	r3, #1
 c0050ba:	b29a      	uxth	r2, r3
 c0050bc:	68fb      	ldr	r3, [r7, #12]
 c0050be:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c0050c0:	68fb      	ldr	r3, [r7, #12]
 c0050c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0050c4:	699b      	ldr	r3, [r3, #24]
 c0050c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0050ca:	d134      	bne.n	c005136 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c0050cc:	68fb      	ldr	r3, [r7, #12]
 c0050ce:	681b      	ldr	r3, [r3, #0]
 c0050d0:	685a      	ldr	r2, [r3, #4]
 c0050d2:	68fb      	ldr	r3, [r7, #12]
 c0050d4:	681b      	ldr	r3, [r3, #0]
 c0050d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c0050da:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c0050dc:	68fb      	ldr	r3, [r7, #12]
 c0050de:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c0050e2:	b29b      	uxth	r3, r3
 c0050e4:	f003 0301 	and.w	r3, r3, #1
 c0050e8:	2b00      	cmp	r3, #0
 c0050ea:	d111      	bne.n	c005110 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c0050ec:	68fb      	ldr	r3, [r7, #12]
 c0050ee:	681b      	ldr	r3, [r3, #0]
 c0050f0:	685a      	ldr	r2, [r3, #4]
 c0050f2:	68fb      	ldr	r3, [r7, #12]
 c0050f4:	681b      	ldr	r3, [r3, #0]
 c0050f6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0050fa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c0050fc:	68fb      	ldr	r3, [r7, #12]
 c0050fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005102:	b29b      	uxth	r3, r3
 c005104:	085b      	lsrs	r3, r3, #1
 c005106:	b29a      	uxth	r2, r3
 c005108:	68fb      	ldr	r3, [r7, #12]
 c00510a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c00510e:	e012      	b.n	c005136 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005110:	68fb      	ldr	r3, [r7, #12]
 c005112:	681b      	ldr	r3, [r3, #0]
 c005114:	685a      	ldr	r2, [r3, #4]
 c005116:	68fb      	ldr	r3, [r7, #12]
 c005118:	681b      	ldr	r3, [r3, #0]
 c00511a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c00511e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c005120:	68fb      	ldr	r3, [r7, #12]
 c005122:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005126:	b29b      	uxth	r3, r3
 c005128:	085b      	lsrs	r3, r3, #1
 c00512a:	b29b      	uxth	r3, r3
 c00512c:	3301      	adds	r3, #1
 c00512e:	b29a      	uxth	r2, r3
 c005130:	68fb      	ldr	r3, [r7, #12]
 c005132:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 c005136:	68fb      	ldr	r3, [r7, #12]
 c005138:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c00513c:	b2db      	uxtb	r3, r3
 c00513e:	2b04      	cmp	r3, #4
 c005140:	d108      	bne.n	c005154 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c005142:	68fb      	ldr	r3, [r7, #12]
 c005144:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005146:	4a4a      	ldr	r2, [pc, #296]	; (c005270 <HAL_SPI_TransmitReceive_DMA+0x304>)
 c005148:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 c00514a:	68fb      	ldr	r3, [r7, #12]
 c00514c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00514e:	4a49      	ldr	r2, [pc, #292]	; (c005274 <HAL_SPI_TransmitReceive_DMA+0x308>)
 c005150:	62da      	str	r2, [r3, #44]	; 0x2c
 c005152:	e007      	b.n	c005164 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 c005154:	68fb      	ldr	r3, [r7, #12]
 c005156:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005158:	4a47      	ldr	r2, [pc, #284]	; (c005278 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 c00515a:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 c00515c:	68fb      	ldr	r3, [r7, #12]
 c00515e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005160:	4a46      	ldr	r2, [pc, #280]	; (c00527c <HAL_SPI_TransmitReceive_DMA+0x310>)
 c005162:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c005164:	68fb      	ldr	r3, [r7, #12]
 c005166:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005168:	4a45      	ldr	r2, [pc, #276]	; (c005280 <HAL_SPI_TransmitReceive_DMA+0x314>)
 c00516a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c00516c:	68fb      	ldr	r3, [r7, #12]
 c00516e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005170:	2200      	movs	r2, #0
 c005172:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005174:	68fb      	ldr	r3, [r7, #12]
 c005176:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c005178:	68fb      	ldr	r3, [r7, #12]
 c00517a:	681b      	ldr	r3, [r3, #0]
 c00517c:	330c      	adds	r3, #12
 c00517e:	4619      	mov	r1, r3
 c005180:	68fb      	ldr	r3, [r7, #12]
 c005182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005184:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c005186:	68fb      	ldr	r3, [r7, #12]
 c005188:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c00518c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c00518e:	f7fc ffff 	bl	c002190 <HAL_DMA_Start_IT>
 c005192:	4603      	mov	r3, r0
 c005194:	2b00      	cmp	r3, #0
 c005196:	d00c      	beq.n	c0051b2 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005198:	68fb      	ldr	r3, [r7, #12]
 c00519a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00519c:	f043 0210 	orr.w	r2, r3, #16
 c0051a0:	68fb      	ldr	r3, [r7, #12]
 c0051a2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c0051a4:	2301      	movs	r3, #1
 c0051a6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c0051a8:	68fb      	ldr	r3, [r7, #12]
 c0051aa:	2201      	movs	r2, #1
 c0051ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c0051b0:	e054      	b.n	c00525c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c0051b2:	68fb      	ldr	r3, [r7, #12]
 c0051b4:	681b      	ldr	r3, [r3, #0]
 c0051b6:	685a      	ldr	r2, [r3, #4]
 c0051b8:	68fb      	ldr	r3, [r7, #12]
 c0051ba:	681b      	ldr	r3, [r3, #0]
 c0051bc:	f042 0201 	orr.w	r2, r2, #1
 c0051c0:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 c0051c2:	68fb      	ldr	r3, [r7, #12]
 c0051c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0051c6:	2200      	movs	r2, #0
 c0051c8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 c0051ca:	68fb      	ldr	r3, [r7, #12]
 c0051cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0051ce:	2200      	movs	r2, #0
 c0051d0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 c0051d2:	68fb      	ldr	r3, [r7, #12]
 c0051d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0051d6:	2200      	movs	r2, #0
 c0051d8:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 c0051da:	68fb      	ldr	r3, [r7, #12]
 c0051dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0051de:	2200      	movs	r2, #0
 c0051e0:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c0051e2:	68fb      	ldr	r3, [r7, #12]
 c0051e4:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c0051e6:	68fb      	ldr	r3, [r7, #12]
 c0051e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0051ea:	4619      	mov	r1, r3
 c0051ec:	68fb      	ldr	r3, [r7, #12]
 c0051ee:	681b      	ldr	r3, [r3, #0]
 c0051f0:	330c      	adds	r3, #12
 c0051f2:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c0051f4:	68fb      	ldr	r3, [r7, #12]
 c0051f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0051f8:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c0051fa:	f7fc ffc9 	bl	c002190 <HAL_DMA_Start_IT>
 c0051fe:	4603      	mov	r3, r0
 c005200:	2b00      	cmp	r3, #0
 c005202:	d00c      	beq.n	c00521e <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005204:	68fb      	ldr	r3, [r7, #12]
 c005206:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005208:	f043 0210 	orr.w	r2, r3, #16
 c00520c:	68fb      	ldr	r3, [r7, #12]
 c00520e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c005210:	2301      	movs	r3, #1
 c005212:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005214:	68fb      	ldr	r3, [r7, #12]
 c005216:	2201      	movs	r2, #1
 c005218:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c00521c:	e01e      	b.n	c00525c <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c00521e:	68fb      	ldr	r3, [r7, #12]
 c005220:	681b      	ldr	r3, [r3, #0]
 c005222:	681b      	ldr	r3, [r3, #0]
 c005224:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005228:	2b40      	cmp	r3, #64	; 0x40
 c00522a:	d007      	beq.n	c00523c <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c00522c:	68fb      	ldr	r3, [r7, #12]
 c00522e:	681b      	ldr	r3, [r3, #0]
 c005230:	681a      	ldr	r2, [r3, #0]
 c005232:	68fb      	ldr	r3, [r7, #12]
 c005234:	681b      	ldr	r3, [r3, #0]
 c005236:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c00523a:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c00523c:	68fb      	ldr	r3, [r7, #12]
 c00523e:	681b      	ldr	r3, [r3, #0]
 c005240:	685a      	ldr	r2, [r3, #4]
 c005242:	68fb      	ldr	r3, [r7, #12]
 c005244:	681b      	ldr	r3, [r3, #0]
 c005246:	f042 0220 	orr.w	r2, r2, #32
 c00524a:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c00524c:	68fb      	ldr	r3, [r7, #12]
 c00524e:	681b      	ldr	r3, [r3, #0]
 c005250:	685a      	ldr	r2, [r3, #4]
 c005252:	68fb      	ldr	r3, [r7, #12]
 c005254:	681b      	ldr	r3, [r3, #0]
 c005256:	f042 0202 	orr.w	r2, r2, #2
 c00525a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c00525c:	68fb      	ldr	r3, [r7, #12]
 c00525e:	2200      	movs	r2, #0
 c005260:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005264:	7dfb      	ldrb	r3, [r7, #23]
}
 c005266:	4618      	mov	r0, r3
 c005268:	3718      	adds	r7, #24
 c00526a:	46bd      	mov	sp, r7
 c00526c:	bd80      	pop	{r7, pc}
 c00526e:	bf00      	nop
 c005270:	0c0054cf 	.word	0x0c0054cf
 c005274:	0c00537b 	.word	0x0c00537b
 c005278:	0c0054eb 	.word	0x0c0054eb
 c00527c:	0c005423 	.word	0x0c005423
 c005280:	0c005507 	.word	0x0c005507

0c005284 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c005284:	b480      	push	{r7}
 c005286:	b083      	sub	sp, #12
 c005288:	af00      	add	r7, sp, #0
 c00528a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 c00528c:	bf00      	nop
 c00528e:	370c      	adds	r7, #12
 c005290:	46bd      	mov	sp, r7
 c005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005296:	4770      	bx	lr

0c005298 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c005298:	b480      	push	{r7}
 c00529a:	b083      	sub	sp, #12
 c00529c:	af00      	add	r7, sp, #0
 c00529e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 c0052a0:	bf00      	nop
 c0052a2:	370c      	adds	r7, #12
 c0052a4:	46bd      	mov	sp, r7
 c0052a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0052aa:	4770      	bx	lr

0c0052ac <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c0052ac:	b480      	push	{r7}
 c0052ae:	b083      	sub	sp, #12
 c0052b0:	af00      	add	r7, sp, #0
 c0052b2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 c0052b4:	bf00      	nop
 c0052b6:	370c      	adds	r7, #12
 c0052b8:	46bd      	mov	sp, r7
 c0052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0052be:	4770      	bx	lr

0c0052c0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 c0052c0:	b480      	push	{r7}
 c0052c2:	b083      	sub	sp, #12
 c0052c4:	af00      	add	r7, sp, #0
 c0052c6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 c0052c8:	bf00      	nop
 c0052ca:	370c      	adds	r7, #12
 c0052cc:	46bd      	mov	sp, r7
 c0052ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0052d2:	4770      	bx	lr

0c0052d4 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 c0052d4:	b580      	push	{r7, lr}
 c0052d6:	b086      	sub	sp, #24
 c0052d8:	af00      	add	r7, sp, #0
 c0052da:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0052dc:	687b      	ldr	r3, [r7, #4]
 c0052de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0052e0:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c0052e2:	f7fc fd91 	bl	c001e08 <HAL_GetTick>
 c0052e6:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c0052e8:	687b      	ldr	r3, [r7, #4]
 c0052ea:	681b      	ldr	r3, [r3, #0]
 c0052ec:	681b      	ldr	r3, [r3, #0]
 c0052ee:	f003 0320 	and.w	r3, r3, #32
 c0052f2:	2b20      	cmp	r3, #32
 c0052f4:	d03b      	beq.n	c00536e <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c0052f6:	697b      	ldr	r3, [r7, #20]
 c0052f8:	681b      	ldr	r3, [r3, #0]
 c0052fa:	685a      	ldr	r2, [r3, #4]
 c0052fc:	697b      	ldr	r3, [r7, #20]
 c0052fe:	681b      	ldr	r3, [r3, #0]
 c005300:	f022 0220 	bic.w	r2, r2, #32
 c005304:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c005306:	697b      	ldr	r3, [r7, #20]
 c005308:	681b      	ldr	r3, [r3, #0]
 c00530a:	685a      	ldr	r2, [r3, #4]
 c00530c:	697b      	ldr	r3, [r7, #20]
 c00530e:	681b      	ldr	r3, [r3, #0]
 c005310:	f022 0202 	bic.w	r2, r2, #2
 c005314:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c005316:	693a      	ldr	r2, [r7, #16]
 c005318:	2164      	movs	r1, #100	; 0x64
 c00531a:	6978      	ldr	r0, [r7, #20]
 c00531c:	f000 fa8a 	bl	c005834 <SPI_EndRxTxTransaction>
 c005320:	4603      	mov	r3, r0
 c005322:	2b00      	cmp	r3, #0
 c005324:	d005      	beq.n	c005332 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005326:	697b      	ldr	r3, [r7, #20]
 c005328:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00532a:	f043 0220 	orr.w	r2, r3, #32
 c00532e:	697b      	ldr	r3, [r7, #20]
 c005330:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 c005332:	697b      	ldr	r3, [r7, #20]
 c005334:	689b      	ldr	r3, [r3, #8]
 c005336:	2b00      	cmp	r3, #0
 c005338:	d10a      	bne.n	c005350 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 c00533a:	2300      	movs	r3, #0
 c00533c:	60fb      	str	r3, [r7, #12]
 c00533e:	697b      	ldr	r3, [r7, #20]
 c005340:	681b      	ldr	r3, [r3, #0]
 c005342:	68db      	ldr	r3, [r3, #12]
 c005344:	60fb      	str	r3, [r7, #12]
 c005346:	697b      	ldr	r3, [r7, #20]
 c005348:	681b      	ldr	r3, [r3, #0]
 c00534a:	689b      	ldr	r3, [r3, #8]
 c00534c:	60fb      	str	r3, [r7, #12]
 c00534e:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 c005350:	697b      	ldr	r3, [r7, #20]
 c005352:	2200      	movs	r2, #0
 c005354:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 c005356:	697b      	ldr	r3, [r7, #20]
 c005358:	2201      	movs	r2, #1
 c00535a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c00535e:	697b      	ldr	r3, [r7, #20]
 c005360:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005362:	2b00      	cmp	r3, #0
 c005364:	d003      	beq.n	c00536e <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c005366:	6978      	ldr	r0, [r7, #20]
 c005368:	f7ff ffaa 	bl	c0052c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c00536c:	e002      	b.n	c005374 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 c00536e:	6978      	ldr	r0, [r7, #20]
 c005370:	f7fb fcb0 	bl	c000cd4 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c005374:	3718      	adds	r7, #24
 c005376:	46bd      	mov	sp, r7
 c005378:	bd80      	pop	{r7, pc}

0c00537a <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c00537a:	b580      	push	{r7, lr}
 c00537c:	b084      	sub	sp, #16
 c00537e:	af00      	add	r7, sp, #0
 c005380:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c005382:	687b      	ldr	r3, [r7, #4]
 c005384:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005386:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c005388:	f7fc fd3e 	bl	c001e08 <HAL_GetTick>
 c00538c:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c00538e:	687b      	ldr	r3, [r7, #4]
 c005390:	681b      	ldr	r3, [r3, #0]
 c005392:	681b      	ldr	r3, [r3, #0]
 c005394:	f003 0320 	and.w	r3, r3, #32
 c005398:	2b20      	cmp	r3, #32
 c00539a:	d03c      	beq.n	c005416 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c00539c:	68fb      	ldr	r3, [r7, #12]
 c00539e:	681b      	ldr	r3, [r3, #0]
 c0053a0:	685a      	ldr	r2, [r3, #4]
 c0053a2:	68fb      	ldr	r3, [r7, #12]
 c0053a4:	681b      	ldr	r3, [r3, #0]
 c0053a6:	f022 0220 	bic.w	r2, r2, #32
 c0053aa:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c0053ac:	68fb      	ldr	r3, [r7, #12]
 c0053ae:	689b      	ldr	r3, [r3, #8]
 c0053b0:	2b00      	cmp	r3, #0
 c0053b2:	d10d      	bne.n	c0053d0 <SPI_DMAReceiveCplt+0x56>
 c0053b4:	68fb      	ldr	r3, [r7, #12]
 c0053b6:	685b      	ldr	r3, [r3, #4]
 c0053b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0053bc:	d108      	bne.n	c0053d0 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c0053be:	68fb      	ldr	r3, [r7, #12]
 c0053c0:	681b      	ldr	r3, [r3, #0]
 c0053c2:	685a      	ldr	r2, [r3, #4]
 c0053c4:	68fb      	ldr	r3, [r7, #12]
 c0053c6:	681b      	ldr	r3, [r3, #0]
 c0053c8:	f022 0203 	bic.w	r2, r2, #3
 c0053cc:	605a      	str	r2, [r3, #4]
 c0053ce:	e007      	b.n	c0053e0 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c0053d0:	68fb      	ldr	r3, [r7, #12]
 c0053d2:	681b      	ldr	r3, [r3, #0]
 c0053d4:	685a      	ldr	r2, [r3, #4]
 c0053d6:	68fb      	ldr	r3, [r7, #12]
 c0053d8:	681b      	ldr	r3, [r3, #0]
 c0053da:	f022 0201 	bic.w	r2, r2, #1
 c0053de:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c0053e0:	68ba      	ldr	r2, [r7, #8]
 c0053e2:	2164      	movs	r1, #100	; 0x64
 c0053e4:	68f8      	ldr	r0, [r7, #12]
 c0053e6:	f000 f9cd 	bl	c005784 <SPI_EndRxTransaction>
 c0053ea:	4603      	mov	r3, r0
 c0053ec:	2b00      	cmp	r3, #0
 c0053ee:	d002      	beq.n	c0053f6 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 c0053f0:	68fb      	ldr	r3, [r7, #12]
 c0053f2:	2220      	movs	r2, #32
 c0053f4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 c0053f6:	68fb      	ldr	r3, [r7, #12]
 c0053f8:	2200      	movs	r2, #0
 c0053fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c0053fe:	68fb      	ldr	r3, [r7, #12]
 c005400:	2201      	movs	r2, #1
 c005402:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c005406:	68fb      	ldr	r3, [r7, #12]
 c005408:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00540a:	2b00      	cmp	r3, #0
 c00540c:	d003      	beq.n	c005416 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c00540e:	68f8      	ldr	r0, [r7, #12]
 c005410:	f7ff ff56 	bl	c0052c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c005414:	e002      	b.n	c00541c <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 c005416:	68f8      	ldr	r0, [r7, #12]
 c005418:	f7fb fc6c 	bl	c000cf4 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c00541c:	3710      	adds	r7, #16
 c00541e:	46bd      	mov	sp, r7
 c005420:	bd80      	pop	{r7, pc}

0c005422 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c005422:	b580      	push	{r7, lr}
 c005424:	b084      	sub	sp, #16
 c005426:	af00      	add	r7, sp, #0
 c005428:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00542a:	687b      	ldr	r3, [r7, #4]
 c00542c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00542e:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c005430:	f7fc fcea 	bl	c001e08 <HAL_GetTick>
 c005434:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c005436:	687b      	ldr	r3, [r7, #4]
 c005438:	681b      	ldr	r3, [r3, #0]
 c00543a:	681b      	ldr	r3, [r3, #0]
 c00543c:	f003 0320 	and.w	r3, r3, #32
 c005440:	2b20      	cmp	r3, #32
 c005442:	d030      	beq.n	c0054a6 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c005444:	68fb      	ldr	r3, [r7, #12]
 c005446:	681b      	ldr	r3, [r3, #0]
 c005448:	685a      	ldr	r2, [r3, #4]
 c00544a:	68fb      	ldr	r3, [r7, #12]
 c00544c:	681b      	ldr	r3, [r3, #0]
 c00544e:	f022 0220 	bic.w	r2, r2, #32
 c005452:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c005454:	68ba      	ldr	r2, [r7, #8]
 c005456:	2164      	movs	r1, #100	; 0x64
 c005458:	68f8      	ldr	r0, [r7, #12]
 c00545a:	f000 f9eb 	bl	c005834 <SPI_EndRxTxTransaction>
 c00545e:	4603      	mov	r3, r0
 c005460:	2b00      	cmp	r3, #0
 c005462:	d005      	beq.n	c005470 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005464:	68fb      	ldr	r3, [r7, #12]
 c005466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005468:	f043 0220 	orr.w	r2, r3, #32
 c00546c:	68fb      	ldr	r3, [r7, #12]
 c00546e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c005470:	68fb      	ldr	r3, [r7, #12]
 c005472:	681b      	ldr	r3, [r3, #0]
 c005474:	685a      	ldr	r2, [r3, #4]
 c005476:	68fb      	ldr	r3, [r7, #12]
 c005478:	681b      	ldr	r3, [r3, #0]
 c00547a:	f022 0203 	bic.w	r2, r2, #3
 c00547e:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 c005480:	68fb      	ldr	r3, [r7, #12]
 c005482:	2200      	movs	r2, #0
 c005484:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 c005486:	68fb      	ldr	r3, [r7, #12]
 c005488:	2200      	movs	r2, #0
 c00548a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c00548e:	68fb      	ldr	r3, [r7, #12]
 c005490:	2201      	movs	r2, #1
 c005492:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c005496:	68fb      	ldr	r3, [r7, #12]
 c005498:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00549a:	2b00      	cmp	r3, #0
 c00549c:	d003      	beq.n	c0054a6 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c00549e:	68f8      	ldr	r0, [r7, #12]
 c0054a0:	f7ff ff0e 	bl	c0052c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c0054a4:	e002      	b.n	c0054ac <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 c0054a6:	68f8      	ldr	r0, [r7, #12]
 c0054a8:	f7fb fc04 	bl	c000cb4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0054ac:	3710      	adds	r7, #16
 c0054ae:	46bd      	mov	sp, r7
 c0054b0:	bd80      	pop	{r7, pc}

0c0054b2 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 c0054b2:	b580      	push	{r7, lr}
 c0054b4:	b084      	sub	sp, #16
 c0054b6:	af00      	add	r7, sp, #0
 c0054b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0054ba:	687b      	ldr	r3, [r7, #4]
 c0054bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0054be:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 c0054c0:	68f8      	ldr	r0, [r7, #12]
 c0054c2:	f7ff fedf 	bl	c005284 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0054c6:	bf00      	nop
 c0054c8:	3710      	adds	r7, #16
 c0054ca:	46bd      	mov	sp, r7
 c0054cc:	bd80      	pop	{r7, pc}

0c0054ce <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0054ce:	b580      	push	{r7, lr}
 c0054d0:	b084      	sub	sp, #16
 c0054d2:	af00      	add	r7, sp, #0
 c0054d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0054d6:	687b      	ldr	r3, [r7, #4]
 c0054d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0054da:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 c0054dc:	68f8      	ldr	r0, [r7, #12]
 c0054de:	f7ff fedb 	bl	c005298 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0054e2:	bf00      	nop
 c0054e4:	3710      	adds	r7, #16
 c0054e6:	46bd      	mov	sp, r7
 c0054e8:	bd80      	pop	{r7, pc}

0c0054ea <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0054ea:	b580      	push	{r7, lr}
 c0054ec:	b084      	sub	sp, #16
 c0054ee:	af00      	add	r7, sp, #0
 c0054f0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0054f2:	687b      	ldr	r3, [r7, #4]
 c0054f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0054f6:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 c0054f8:	68f8      	ldr	r0, [r7, #12]
 c0054fa:	f7ff fed7 	bl	c0052ac <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0054fe:	bf00      	nop
 c005500:	3710      	adds	r7, #16
 c005502:	46bd      	mov	sp, r7
 c005504:	bd80      	pop	{r7, pc}

0c005506 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 c005506:	b580      	push	{r7, lr}
 c005508:	b084      	sub	sp, #16
 c00550a:	af00      	add	r7, sp, #0
 c00550c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00550e:	687b      	ldr	r3, [r7, #4]
 c005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005512:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c005514:	68fb      	ldr	r3, [r7, #12]
 c005516:	681b      	ldr	r3, [r3, #0]
 c005518:	685a      	ldr	r2, [r3, #4]
 c00551a:	68fb      	ldr	r3, [r7, #12]
 c00551c:	681b      	ldr	r3, [r3, #0]
 c00551e:	f022 0203 	bic.w	r2, r2, #3
 c005522:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005524:	68fb      	ldr	r3, [r7, #12]
 c005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005528:	f043 0210 	orr.w	r2, r3, #16
 c00552c:	68fb      	ldr	r3, [r7, #12]
 c00552e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 c005530:	68fb      	ldr	r3, [r7, #12]
 c005532:	2201      	movs	r2, #1
 c005534:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 c005538:	68f8      	ldr	r0, [r7, #12]
 c00553a:	f7ff fec1 	bl	c0052c0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c00553e:	bf00      	nop
 c005540:	3710      	adds	r7, #16
 c005542:	46bd      	mov	sp, r7
 c005544:	bd80      	pop	{r7, pc}
	...

0c005548 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c005548:	b580      	push	{r7, lr}
 c00554a:	b088      	sub	sp, #32
 c00554c:	af00      	add	r7, sp, #0
 c00554e:	60f8      	str	r0, [r7, #12]
 c005550:	60b9      	str	r1, [r7, #8]
 c005552:	603b      	str	r3, [r7, #0]
 c005554:	4613      	mov	r3, r2
 c005556:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 c005558:	f7fc fc56 	bl	c001e08 <HAL_GetTick>
 c00555c:	4602      	mov	r2, r0
 c00555e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005560:	1a9b      	subs	r3, r3, r2
 c005562:	683a      	ldr	r2, [r7, #0]
 c005564:	4413      	add	r3, r2
 c005566:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 c005568:	f7fc fc4e 	bl	c001e08 <HAL_GetTick>
 c00556c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 c00556e:	4b39      	ldr	r3, [pc, #228]	; (c005654 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 c005570:	681b      	ldr	r3, [r3, #0]
 c005572:	015b      	lsls	r3, r3, #5
 c005574:	0d1b      	lsrs	r3, r3, #20
 c005576:	69fa      	ldr	r2, [r7, #28]
 c005578:	fb02 f303 	mul.w	r3, r2, r3
 c00557c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c00557e:	e054      	b.n	c00562a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 c005580:	683b      	ldr	r3, [r7, #0]
 c005582:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005586:	d050      	beq.n	c00562a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c005588:	f7fc fc3e 	bl	c001e08 <HAL_GetTick>
 c00558c:	4602      	mov	r2, r0
 c00558e:	69bb      	ldr	r3, [r7, #24]
 c005590:	1ad3      	subs	r3, r2, r3
 c005592:	69fa      	ldr	r2, [r7, #28]
 c005594:	429a      	cmp	r2, r3
 c005596:	d902      	bls.n	c00559e <SPI_WaitFlagStateUntilTimeout+0x56>
 c005598:	69fb      	ldr	r3, [r7, #28]
 c00559a:	2b00      	cmp	r3, #0
 c00559c:	d13d      	bne.n	c00561a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c00559e:	68fb      	ldr	r3, [r7, #12]
 c0055a0:	681b      	ldr	r3, [r3, #0]
 c0055a2:	685a      	ldr	r2, [r3, #4]
 c0055a4:	68fb      	ldr	r3, [r7, #12]
 c0055a6:	681b      	ldr	r3, [r3, #0]
 c0055a8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c0055ac:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0055ae:	68fb      	ldr	r3, [r7, #12]
 c0055b0:	685b      	ldr	r3, [r3, #4]
 c0055b2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0055b6:	d111      	bne.n	c0055dc <SPI_WaitFlagStateUntilTimeout+0x94>
 c0055b8:	68fb      	ldr	r3, [r7, #12]
 c0055ba:	689b      	ldr	r3, [r3, #8]
 c0055bc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0055c0:	d004      	beq.n	c0055cc <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0055c2:	68fb      	ldr	r3, [r7, #12]
 c0055c4:	689b      	ldr	r3, [r3, #8]
 c0055c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0055ca:	d107      	bne.n	c0055dc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c0055cc:	68fb      	ldr	r3, [r7, #12]
 c0055ce:	681b      	ldr	r3, [r3, #0]
 c0055d0:	681a      	ldr	r2, [r3, #0]
 c0055d2:	68fb      	ldr	r3, [r7, #12]
 c0055d4:	681b      	ldr	r3, [r3, #0]
 c0055d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0055da:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c0055dc:	68fb      	ldr	r3, [r7, #12]
 c0055de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0055e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0055e4:	d10f      	bne.n	c005606 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 c0055e6:	68fb      	ldr	r3, [r7, #12]
 c0055e8:	681b      	ldr	r3, [r3, #0]
 c0055ea:	681a      	ldr	r2, [r3, #0]
 c0055ec:	68fb      	ldr	r3, [r7, #12]
 c0055ee:	681b      	ldr	r3, [r3, #0]
 c0055f0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0055f4:	601a      	str	r2, [r3, #0]
 c0055f6:	68fb      	ldr	r3, [r7, #12]
 c0055f8:	681b      	ldr	r3, [r3, #0]
 c0055fa:	681a      	ldr	r2, [r3, #0]
 c0055fc:	68fb      	ldr	r3, [r7, #12]
 c0055fe:	681b      	ldr	r3, [r3, #0]
 c005600:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005604:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c005606:	68fb      	ldr	r3, [r7, #12]
 c005608:	2201      	movs	r2, #1
 c00560a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c00560e:	68fb      	ldr	r3, [r7, #12]
 c005610:	2200      	movs	r2, #0
 c005612:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c005616:	2303      	movs	r3, #3
 c005618:	e017      	b.n	c00564a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c00561a:	697b      	ldr	r3, [r7, #20]
 c00561c:	2b00      	cmp	r3, #0
 c00561e:	d101      	bne.n	c005624 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 c005620:	2300      	movs	r3, #0
 c005622:	61fb      	str	r3, [r7, #28]
      }
      count--;
 c005624:	697b      	ldr	r3, [r7, #20]
 c005626:	3b01      	subs	r3, #1
 c005628:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c00562a:	68fb      	ldr	r3, [r7, #12]
 c00562c:	681b      	ldr	r3, [r3, #0]
 c00562e:	689a      	ldr	r2, [r3, #8]
 c005630:	68bb      	ldr	r3, [r7, #8]
 c005632:	4013      	ands	r3, r2
 c005634:	68ba      	ldr	r2, [r7, #8]
 c005636:	429a      	cmp	r2, r3
 c005638:	bf0c      	ite	eq
 c00563a:	2301      	moveq	r3, #1
 c00563c:	2300      	movne	r3, #0
 c00563e:	b2db      	uxtb	r3, r3
 c005640:	461a      	mov	r2, r3
 c005642:	79fb      	ldrb	r3, [r7, #7]
 c005644:	429a      	cmp	r2, r3
 c005646:	d19b      	bne.n	c005580 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 c005648:	2300      	movs	r3, #0
}
 c00564a:	4618      	mov	r0, r3
 c00564c:	3720      	adds	r7, #32
 c00564e:	46bd      	mov	sp, r7
 c005650:	bd80      	pop	{r7, pc}
 c005652:	bf00      	nop
 c005654:	3000003c 	.word	0x3000003c

0c005658 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c005658:	b580      	push	{r7, lr}
 c00565a:	b08a      	sub	sp, #40	; 0x28
 c00565c:	af00      	add	r7, sp, #0
 c00565e:	60f8      	str	r0, [r7, #12]
 c005660:	60b9      	str	r1, [r7, #8]
 c005662:	607a      	str	r2, [r7, #4]
 c005664:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 c005666:	2300      	movs	r3, #0
 c005668:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 c00566a:	f7fc fbcd 	bl	c001e08 <HAL_GetTick>
 c00566e:	4602      	mov	r2, r0
 c005670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c005672:	1a9b      	subs	r3, r3, r2
 c005674:	683a      	ldr	r2, [r7, #0]
 c005676:	4413      	add	r3, r2
 c005678:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 c00567a:	f7fc fbc5 	bl	c001e08 <HAL_GetTick>
 c00567e:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 c005680:	68fb      	ldr	r3, [r7, #12]
 c005682:	681b      	ldr	r3, [r3, #0]
 c005684:	330c      	adds	r3, #12
 c005686:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 c005688:	4b3d      	ldr	r3, [pc, #244]	; (c005780 <SPI_WaitFifoStateUntilTimeout+0x128>)
 c00568a:	681a      	ldr	r2, [r3, #0]
 c00568c:	4613      	mov	r3, r2
 c00568e:	009b      	lsls	r3, r3, #2
 c005690:	4413      	add	r3, r2
 c005692:	00da      	lsls	r2, r3, #3
 c005694:	1ad3      	subs	r3, r2, r3
 c005696:	0d1b      	lsrs	r3, r3, #20
 c005698:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00569a:	fb02 f303 	mul.w	r3, r2, r3
 c00569e:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 c0056a0:	e060      	b.n	c005764 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 c0056a2:	68bb      	ldr	r3, [r7, #8]
 c0056a4:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c0056a8:	d107      	bne.n	c0056ba <SPI_WaitFifoStateUntilTimeout+0x62>
 c0056aa:	687b      	ldr	r3, [r7, #4]
 c0056ac:	2b00      	cmp	r3, #0
 c0056ae:	d104      	bne.n	c0056ba <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 c0056b0:	69fb      	ldr	r3, [r7, #28]
 c0056b2:	781b      	ldrb	r3, [r3, #0]
 c0056b4:	b2db      	uxtb	r3, r3
 c0056b6:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 c0056b8:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 c0056ba:	683b      	ldr	r3, [r7, #0]
 c0056bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0056c0:	d050      	beq.n	c005764 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c0056c2:	f7fc fba1 	bl	c001e08 <HAL_GetTick>
 c0056c6:	4602      	mov	r2, r0
 c0056c8:	6a3b      	ldr	r3, [r7, #32]
 c0056ca:	1ad3      	subs	r3, r2, r3
 c0056cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0056ce:	429a      	cmp	r2, r3
 c0056d0:	d902      	bls.n	c0056d8 <SPI_WaitFifoStateUntilTimeout+0x80>
 c0056d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0056d4:	2b00      	cmp	r3, #0
 c0056d6:	d13d      	bne.n	c005754 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c0056d8:	68fb      	ldr	r3, [r7, #12]
 c0056da:	681b      	ldr	r3, [r3, #0]
 c0056dc:	685a      	ldr	r2, [r3, #4]
 c0056de:	68fb      	ldr	r3, [r7, #12]
 c0056e0:	681b      	ldr	r3, [r3, #0]
 c0056e2:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c0056e6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0056e8:	68fb      	ldr	r3, [r7, #12]
 c0056ea:	685b      	ldr	r3, [r3, #4]
 c0056ec:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0056f0:	d111      	bne.n	c005716 <SPI_WaitFifoStateUntilTimeout+0xbe>
 c0056f2:	68fb      	ldr	r3, [r7, #12]
 c0056f4:	689b      	ldr	r3, [r3, #8]
 c0056f6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0056fa:	d004      	beq.n	c005706 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0056fc:	68fb      	ldr	r3, [r7, #12]
 c0056fe:	689b      	ldr	r3, [r3, #8]
 c005700:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005704:	d107      	bne.n	c005716 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c005706:	68fb      	ldr	r3, [r7, #12]
 c005708:	681b      	ldr	r3, [r3, #0]
 c00570a:	681a      	ldr	r2, [r3, #0]
 c00570c:	68fb      	ldr	r3, [r7, #12]
 c00570e:	681b      	ldr	r3, [r3, #0]
 c005710:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005714:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c005716:	68fb      	ldr	r3, [r7, #12]
 c005718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00571a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00571e:	d10f      	bne.n	c005740 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 c005720:	68fb      	ldr	r3, [r7, #12]
 c005722:	681b      	ldr	r3, [r3, #0]
 c005724:	681a      	ldr	r2, [r3, #0]
 c005726:	68fb      	ldr	r3, [r7, #12]
 c005728:	681b      	ldr	r3, [r3, #0]
 c00572a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c00572e:	601a      	str	r2, [r3, #0]
 c005730:	68fb      	ldr	r3, [r7, #12]
 c005732:	681b      	ldr	r3, [r3, #0]
 c005734:	681a      	ldr	r2, [r3, #0]
 c005736:	68fb      	ldr	r3, [r7, #12]
 c005738:	681b      	ldr	r3, [r3, #0]
 c00573a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c00573e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c005740:	68fb      	ldr	r3, [r7, #12]
 c005742:	2201      	movs	r2, #1
 c005744:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c005748:	68fb      	ldr	r3, [r7, #12]
 c00574a:	2200      	movs	r2, #0
 c00574c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c005750:	2303      	movs	r3, #3
 c005752:	e010      	b.n	c005776 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c005754:	69bb      	ldr	r3, [r7, #24]
 c005756:	2b00      	cmp	r3, #0
 c005758:	d101      	bne.n	c00575e <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 c00575a:	2300      	movs	r3, #0
 c00575c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 c00575e:	69bb      	ldr	r3, [r7, #24]
 c005760:	3b01      	subs	r3, #1
 c005762:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 c005764:	68fb      	ldr	r3, [r7, #12]
 c005766:	681b      	ldr	r3, [r3, #0]
 c005768:	689a      	ldr	r2, [r3, #8]
 c00576a:	68bb      	ldr	r3, [r7, #8]
 c00576c:	4013      	ands	r3, r2
 c00576e:	687a      	ldr	r2, [r7, #4]
 c005770:	429a      	cmp	r2, r3
 c005772:	d196      	bne.n	c0056a2 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 c005774:	2300      	movs	r3, #0
}
 c005776:	4618      	mov	r0, r3
 c005778:	3728      	adds	r7, #40	; 0x28
 c00577a:	46bd      	mov	sp, r7
 c00577c:	bd80      	pop	{r7, pc}
 c00577e:	bf00      	nop
 c005780:	3000003c 	.word	0x3000003c

0c005784 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 c005784:	b580      	push	{r7, lr}
 c005786:	b086      	sub	sp, #24
 c005788:	af02      	add	r7, sp, #8
 c00578a:	60f8      	str	r0, [r7, #12]
 c00578c:	60b9      	str	r1, [r7, #8]
 c00578e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005790:	68fb      	ldr	r3, [r7, #12]
 c005792:	685b      	ldr	r3, [r3, #4]
 c005794:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005798:	d111      	bne.n	c0057be <SPI_EndRxTransaction+0x3a>
 c00579a:	68fb      	ldr	r3, [r7, #12]
 c00579c:	689b      	ldr	r3, [r3, #8]
 c00579e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0057a2:	d004      	beq.n	c0057ae <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0057a4:	68fb      	ldr	r3, [r7, #12]
 c0057a6:	689b      	ldr	r3, [r3, #8]
 c0057a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0057ac:	d107      	bne.n	c0057be <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 c0057ae:	68fb      	ldr	r3, [r7, #12]
 c0057b0:	681b      	ldr	r3, [r3, #0]
 c0057b2:	681a      	ldr	r2, [r3, #0]
 c0057b4:	68fb      	ldr	r3, [r7, #12]
 c0057b6:	681b      	ldr	r3, [r3, #0]
 c0057b8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0057bc:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c0057be:	687b      	ldr	r3, [r7, #4]
 c0057c0:	9300      	str	r3, [sp, #0]
 c0057c2:	68bb      	ldr	r3, [r7, #8]
 c0057c4:	2200      	movs	r2, #0
 c0057c6:	2180      	movs	r1, #128	; 0x80
 c0057c8:	68f8      	ldr	r0, [r7, #12]
 c0057ca:	f7ff febd 	bl	c005548 <SPI_WaitFlagStateUntilTimeout>
 c0057ce:	4603      	mov	r3, r0
 c0057d0:	2b00      	cmp	r3, #0
 c0057d2:	d007      	beq.n	c0057e4 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0057d4:	68fb      	ldr	r3, [r7, #12]
 c0057d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0057d8:	f043 0220 	orr.w	r2, r3, #32
 c0057dc:	68fb      	ldr	r3, [r7, #12]
 c0057de:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0057e0:	2303      	movs	r3, #3
 c0057e2:	e023      	b.n	c00582c <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0057e4:	68fb      	ldr	r3, [r7, #12]
 c0057e6:	685b      	ldr	r3, [r3, #4]
 c0057e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0057ec:	d11d      	bne.n	c00582a <SPI_EndRxTransaction+0xa6>
 c0057ee:	68fb      	ldr	r3, [r7, #12]
 c0057f0:	689b      	ldr	r3, [r3, #8]
 c0057f2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0057f6:	d004      	beq.n	c005802 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0057f8:	68fb      	ldr	r3, [r7, #12]
 c0057fa:	689b      	ldr	r3, [r3, #8]
 c0057fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005800:	d113      	bne.n	c00582a <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005802:	687b      	ldr	r3, [r7, #4]
 c005804:	9300      	str	r3, [sp, #0]
 c005806:	68bb      	ldr	r3, [r7, #8]
 c005808:	2200      	movs	r2, #0
 c00580a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c00580e:	68f8      	ldr	r0, [r7, #12]
 c005810:	f7ff ff22 	bl	c005658 <SPI_WaitFifoStateUntilTimeout>
 c005814:	4603      	mov	r3, r0
 c005816:	2b00      	cmp	r3, #0
 c005818:	d007      	beq.n	c00582a <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c00581a:	68fb      	ldr	r3, [r7, #12]
 c00581c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00581e:	f043 0220 	orr.w	r2, r3, #32
 c005822:	68fb      	ldr	r3, [r7, #12]
 c005824:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 c005826:	2303      	movs	r3, #3
 c005828:	e000      	b.n	c00582c <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 c00582a:	2300      	movs	r3, #0
}
 c00582c:	4618      	mov	r0, r3
 c00582e:	3710      	adds	r7, #16
 c005830:	46bd      	mov	sp, r7
 c005832:	bd80      	pop	{r7, pc}

0c005834 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 c005834:	b580      	push	{r7, lr}
 c005836:	b086      	sub	sp, #24
 c005838:	af02      	add	r7, sp, #8
 c00583a:	60f8      	str	r0, [r7, #12]
 c00583c:	60b9      	str	r1, [r7, #8]
 c00583e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005840:	687b      	ldr	r3, [r7, #4]
 c005842:	9300      	str	r3, [sp, #0]
 c005844:	68bb      	ldr	r3, [r7, #8]
 c005846:	2200      	movs	r2, #0
 c005848:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 c00584c:	68f8      	ldr	r0, [r7, #12]
 c00584e:	f7ff ff03 	bl	c005658 <SPI_WaitFifoStateUntilTimeout>
 c005852:	4603      	mov	r3, r0
 c005854:	2b00      	cmp	r3, #0
 c005856:	d007      	beq.n	c005868 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005858:	68fb      	ldr	r3, [r7, #12]
 c00585a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00585c:	f043 0220 	orr.w	r2, r3, #32
 c005860:	68fb      	ldr	r3, [r7, #12]
 c005862:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005864:	2303      	movs	r3, #3
 c005866:	e027      	b.n	c0058b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c005868:	687b      	ldr	r3, [r7, #4]
 c00586a:	9300      	str	r3, [sp, #0]
 c00586c:	68bb      	ldr	r3, [r7, #8]
 c00586e:	2200      	movs	r2, #0
 c005870:	2180      	movs	r1, #128	; 0x80
 c005872:	68f8      	ldr	r0, [r7, #12]
 c005874:	f7ff fe68 	bl	c005548 <SPI_WaitFlagStateUntilTimeout>
 c005878:	4603      	mov	r3, r0
 c00587a:	2b00      	cmp	r3, #0
 c00587c:	d007      	beq.n	c00588e <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c00587e:	68fb      	ldr	r3, [r7, #12]
 c005880:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005882:	f043 0220 	orr.w	r2, r3, #32
 c005886:	68fb      	ldr	r3, [r7, #12]
 c005888:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c00588a:	2303      	movs	r3, #3
 c00588c:	e014      	b.n	c0058b8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c00588e:	687b      	ldr	r3, [r7, #4]
 c005890:	9300      	str	r3, [sp, #0]
 c005892:	68bb      	ldr	r3, [r7, #8]
 c005894:	2200      	movs	r2, #0
 c005896:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c00589a:	68f8      	ldr	r0, [r7, #12]
 c00589c:	f7ff fedc 	bl	c005658 <SPI_WaitFifoStateUntilTimeout>
 c0058a0:	4603      	mov	r3, r0
 c0058a2:	2b00      	cmp	r3, #0
 c0058a4:	d007      	beq.n	c0058b6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0058a6:	68fb      	ldr	r3, [r7, #12]
 c0058a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0058aa:	f043 0220 	orr.w	r2, r3, #32
 c0058ae:	68fb      	ldr	r3, [r7, #12]
 c0058b0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0058b2:	2303      	movs	r3, #3
 c0058b4:	e000      	b.n	c0058b8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 c0058b6:	2300      	movs	r3, #0
}
 c0058b8:	4618      	mov	r0, r3
 c0058ba:	3710      	adds	r7, #16
 c0058bc:	46bd      	mov	sp, r7
 c0058be:	bd80      	pop	{r7, pc}

0c0058c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c0058c0:	b580      	push	{r7, lr}
 c0058c2:	b082      	sub	sp, #8
 c0058c4:	af00      	add	r7, sp, #0
 c0058c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c0058c8:	687b      	ldr	r3, [r7, #4]
 c0058ca:	2b00      	cmp	r3, #0
 c0058cc:	d101      	bne.n	c0058d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c0058ce:	2301      	movs	r3, #1
 c0058d0:	e042      	b.n	c005958 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c0058d2:	687b      	ldr	r3, [r7, #4]
 c0058d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0058d8:	2b00      	cmp	r3, #0
 c0058da:	d106      	bne.n	c0058ea <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c0058dc:	687b      	ldr	r3, [r7, #4]
 c0058de:	2200      	movs	r2, #0
 c0058e0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c0058e4:	6878      	ldr	r0, [r7, #4]
 c0058e6:	f7fb ff25 	bl	c001734 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c0058ea:	687b      	ldr	r3, [r7, #4]
 c0058ec:	2224      	movs	r2, #36	; 0x24
 c0058ee:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c0058f2:	687b      	ldr	r3, [r7, #4]
 c0058f4:	681b      	ldr	r3, [r3, #0]
 c0058f6:	681a      	ldr	r2, [r3, #0]
 c0058f8:	687b      	ldr	r3, [r7, #4]
 c0058fa:	681b      	ldr	r3, [r3, #0]
 c0058fc:	f022 0201 	bic.w	r2, r2, #1
 c005900:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c005902:	6878      	ldr	r0, [r7, #4]
 c005904:	f000 f8ba 	bl	c005a7c <UART_SetConfig>
 c005908:	4603      	mov	r3, r0
 c00590a:	2b01      	cmp	r3, #1
 c00590c:	d101      	bne.n	c005912 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c00590e:	2301      	movs	r3, #1
 c005910:	e022      	b.n	c005958 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c005912:	687b      	ldr	r3, [r7, #4]
 c005914:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005916:	2b00      	cmp	r3, #0
 c005918:	d002      	beq.n	c005920 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c00591a:	6878      	ldr	r0, [r7, #4]
 c00591c:	f000 fbac 	bl	c006078 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c005920:	687b      	ldr	r3, [r7, #4]
 c005922:	681b      	ldr	r3, [r3, #0]
 c005924:	685a      	ldr	r2, [r3, #4]
 c005926:	687b      	ldr	r3, [r7, #4]
 c005928:	681b      	ldr	r3, [r3, #0]
 c00592a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c00592e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c005930:	687b      	ldr	r3, [r7, #4]
 c005932:	681b      	ldr	r3, [r3, #0]
 c005934:	689a      	ldr	r2, [r3, #8]
 c005936:	687b      	ldr	r3, [r7, #4]
 c005938:	681b      	ldr	r3, [r3, #0]
 c00593a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c00593e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c005940:	687b      	ldr	r3, [r7, #4]
 c005942:	681b      	ldr	r3, [r3, #0]
 c005944:	681a      	ldr	r2, [r3, #0]
 c005946:	687b      	ldr	r3, [r7, #4]
 c005948:	681b      	ldr	r3, [r3, #0]
 c00594a:	f042 0201 	orr.w	r2, r2, #1
 c00594e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c005950:	6878      	ldr	r0, [r7, #4]
 c005952:	f000 fc33 	bl	c0061bc <UART_CheckIdleState>
 c005956:	4603      	mov	r3, r0
}
 c005958:	4618      	mov	r0, r3
 c00595a:	3708      	adds	r7, #8
 c00595c:	46bd      	mov	sp, r7
 c00595e:	bd80      	pop	{r7, pc}

0c005960 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c005960:	b580      	push	{r7, lr}
 c005962:	b08a      	sub	sp, #40	; 0x28
 c005964:	af02      	add	r7, sp, #8
 c005966:	60f8      	str	r0, [r7, #12]
 c005968:	60b9      	str	r1, [r7, #8]
 c00596a:	603b      	str	r3, [r7, #0]
 c00596c:	4613      	mov	r3, r2
 c00596e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c005970:	68fb      	ldr	r3, [r7, #12]
 c005972:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005976:	2b20      	cmp	r3, #32
 c005978:	d17b      	bne.n	c005a72 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c00597a:	68bb      	ldr	r3, [r7, #8]
 c00597c:	2b00      	cmp	r3, #0
 c00597e:	d002      	beq.n	c005986 <HAL_UART_Transmit+0x26>
 c005980:	88fb      	ldrh	r3, [r7, #6]
 c005982:	2b00      	cmp	r3, #0
 c005984:	d101      	bne.n	c00598a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c005986:	2301      	movs	r3, #1
 c005988:	e074      	b.n	c005a74 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00598a:	68fb      	ldr	r3, [r7, #12]
 c00598c:	2200      	movs	r2, #0
 c00598e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c005992:	68fb      	ldr	r3, [r7, #12]
 c005994:	2221      	movs	r2, #33	; 0x21
 c005996:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00599a:	f7fc fa35 	bl	c001e08 <HAL_GetTick>
 c00599e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c0059a0:	68fb      	ldr	r3, [r7, #12]
 c0059a2:	88fa      	ldrh	r2, [r7, #6]
 c0059a4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c0059a8:	68fb      	ldr	r3, [r7, #12]
 c0059aa:	88fa      	ldrh	r2, [r7, #6]
 c0059ac:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c0059b0:	68fb      	ldr	r3, [r7, #12]
 c0059b2:	689b      	ldr	r3, [r3, #8]
 c0059b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c0059b8:	d108      	bne.n	c0059cc <HAL_UART_Transmit+0x6c>
 c0059ba:	68fb      	ldr	r3, [r7, #12]
 c0059bc:	691b      	ldr	r3, [r3, #16]
 c0059be:	2b00      	cmp	r3, #0
 c0059c0:	d104      	bne.n	c0059cc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c0059c2:	2300      	movs	r3, #0
 c0059c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c0059c6:	68bb      	ldr	r3, [r7, #8]
 c0059c8:	61bb      	str	r3, [r7, #24]
 c0059ca:	e003      	b.n	c0059d4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c0059cc:	68bb      	ldr	r3, [r7, #8]
 c0059ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c0059d0:	2300      	movs	r3, #0
 c0059d2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c0059d4:	e030      	b.n	c005a38 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c0059d6:	683b      	ldr	r3, [r7, #0]
 c0059d8:	9300      	str	r3, [sp, #0]
 c0059da:	697b      	ldr	r3, [r7, #20]
 c0059dc:	2200      	movs	r2, #0
 c0059de:	2180      	movs	r1, #128	; 0x80
 c0059e0:	68f8      	ldr	r0, [r7, #12]
 c0059e2:	f000 fc95 	bl	c006310 <UART_WaitOnFlagUntilTimeout>
 c0059e6:	4603      	mov	r3, r0
 c0059e8:	2b00      	cmp	r3, #0
 c0059ea:	d005      	beq.n	c0059f8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c0059ec:	68fb      	ldr	r3, [r7, #12]
 c0059ee:	2220      	movs	r2, #32
 c0059f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c0059f4:	2303      	movs	r3, #3
 c0059f6:	e03d      	b.n	c005a74 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c0059f8:	69fb      	ldr	r3, [r7, #28]
 c0059fa:	2b00      	cmp	r3, #0
 c0059fc:	d10b      	bne.n	c005a16 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0059fe:	69bb      	ldr	r3, [r7, #24]
 c005a00:	881b      	ldrh	r3, [r3, #0]
 c005a02:	461a      	mov	r2, r3
 c005a04:	68fb      	ldr	r3, [r7, #12]
 c005a06:	681b      	ldr	r3, [r3, #0]
 c005a08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c005a0c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c005a0e:	69bb      	ldr	r3, [r7, #24]
 c005a10:	3302      	adds	r3, #2
 c005a12:	61bb      	str	r3, [r7, #24]
 c005a14:	e007      	b.n	c005a26 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c005a16:	69fb      	ldr	r3, [r7, #28]
 c005a18:	781a      	ldrb	r2, [r3, #0]
 c005a1a:	68fb      	ldr	r3, [r7, #12]
 c005a1c:	681b      	ldr	r3, [r3, #0]
 c005a1e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c005a20:	69fb      	ldr	r3, [r7, #28]
 c005a22:	3301      	adds	r3, #1
 c005a24:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c005a26:	68fb      	ldr	r3, [r7, #12]
 c005a28:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c005a2c:	b29b      	uxth	r3, r3
 c005a2e:	3b01      	subs	r3, #1
 c005a30:	b29a      	uxth	r2, r3
 c005a32:	68fb      	ldr	r3, [r7, #12]
 c005a34:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c005a38:	68fb      	ldr	r3, [r7, #12]
 c005a3a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c005a3e:	b29b      	uxth	r3, r3
 c005a40:	2b00      	cmp	r3, #0
 c005a42:	d1c8      	bne.n	c0059d6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c005a44:	683b      	ldr	r3, [r7, #0]
 c005a46:	9300      	str	r3, [sp, #0]
 c005a48:	697b      	ldr	r3, [r7, #20]
 c005a4a:	2200      	movs	r2, #0
 c005a4c:	2140      	movs	r1, #64	; 0x40
 c005a4e:	68f8      	ldr	r0, [r7, #12]
 c005a50:	f000 fc5e 	bl	c006310 <UART_WaitOnFlagUntilTimeout>
 c005a54:	4603      	mov	r3, r0
 c005a56:	2b00      	cmp	r3, #0
 c005a58:	d005      	beq.n	c005a66 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c005a5a:	68fb      	ldr	r3, [r7, #12]
 c005a5c:	2220      	movs	r2, #32
 c005a5e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c005a62:	2303      	movs	r3, #3
 c005a64:	e006      	b.n	c005a74 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c005a66:	68fb      	ldr	r3, [r7, #12]
 c005a68:	2220      	movs	r2, #32
 c005a6a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c005a6e:	2300      	movs	r3, #0
 c005a70:	e000      	b.n	c005a74 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c005a72:	2302      	movs	r3, #2
  }
}
 c005a74:	4618      	mov	r0, r3
 c005a76:	3720      	adds	r7, #32
 c005a78:	46bd      	mov	sp, r7
 c005a7a:	bd80      	pop	{r7, pc}

0c005a7c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c005a7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c005a80:	b08c      	sub	sp, #48	; 0x30
 c005a82:	af00      	add	r7, sp, #0
 c005a84:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c005a86:	2300      	movs	r3, #0
 c005a88:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c005a8c:	697b      	ldr	r3, [r7, #20]
 c005a8e:	689a      	ldr	r2, [r3, #8]
 c005a90:	697b      	ldr	r3, [r7, #20]
 c005a92:	691b      	ldr	r3, [r3, #16]
 c005a94:	431a      	orrs	r2, r3
 c005a96:	697b      	ldr	r3, [r7, #20]
 c005a98:	695b      	ldr	r3, [r3, #20]
 c005a9a:	431a      	orrs	r2, r3
 c005a9c:	697b      	ldr	r3, [r7, #20]
 c005a9e:	69db      	ldr	r3, [r3, #28]
 c005aa0:	4313      	orrs	r3, r2
 c005aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c005aa4:	697b      	ldr	r3, [r7, #20]
 c005aa6:	681b      	ldr	r3, [r3, #0]
 c005aa8:	681a      	ldr	r2, [r3, #0]
 c005aaa:	4baa      	ldr	r3, [pc, #680]	; (c005d54 <UART_SetConfig+0x2d8>)
 c005aac:	4013      	ands	r3, r2
 c005aae:	697a      	ldr	r2, [r7, #20]
 c005ab0:	6812      	ldr	r2, [r2, #0]
 c005ab2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005ab4:	430b      	orrs	r3, r1
 c005ab6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c005ab8:	697b      	ldr	r3, [r7, #20]
 c005aba:	681b      	ldr	r3, [r3, #0]
 c005abc:	685b      	ldr	r3, [r3, #4]
 c005abe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c005ac2:	697b      	ldr	r3, [r7, #20]
 c005ac4:	68da      	ldr	r2, [r3, #12]
 c005ac6:	697b      	ldr	r3, [r7, #20]
 c005ac8:	681b      	ldr	r3, [r3, #0]
 c005aca:	430a      	orrs	r2, r1
 c005acc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c005ace:	697b      	ldr	r3, [r7, #20]
 c005ad0:	699b      	ldr	r3, [r3, #24]
 c005ad2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c005ad4:	697b      	ldr	r3, [r7, #20]
 c005ad6:	681b      	ldr	r3, [r3, #0]
 c005ad8:	4a9f      	ldr	r2, [pc, #636]	; (c005d58 <UART_SetConfig+0x2dc>)
 c005ada:	4293      	cmp	r3, r2
 c005adc:	d004      	beq.n	c005ae8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c005ade:	697b      	ldr	r3, [r7, #20]
 c005ae0:	6a1b      	ldr	r3, [r3, #32]
 c005ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c005ae4:	4313      	orrs	r3, r2
 c005ae6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c005ae8:	697b      	ldr	r3, [r7, #20]
 c005aea:	681b      	ldr	r3, [r3, #0]
 c005aec:	689b      	ldr	r3, [r3, #8]
 c005aee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c005af2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c005af6:	697a      	ldr	r2, [r7, #20]
 c005af8:	6812      	ldr	r2, [r2, #0]
 c005afa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005afc:	430b      	orrs	r3, r1
 c005afe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c005b00:	697b      	ldr	r3, [r7, #20]
 c005b02:	681b      	ldr	r3, [r3, #0]
 c005b04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c005b06:	f023 010f 	bic.w	r1, r3, #15
 c005b0a:	697b      	ldr	r3, [r7, #20]
 c005b0c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005b0e:	697b      	ldr	r3, [r7, #20]
 c005b10:	681b      	ldr	r3, [r3, #0]
 c005b12:	430a      	orrs	r2, r1
 c005b14:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c005b16:	697b      	ldr	r3, [r7, #20]
 c005b18:	681b      	ldr	r3, [r3, #0]
 c005b1a:	4a90      	ldr	r2, [pc, #576]	; (c005d5c <UART_SetConfig+0x2e0>)
 c005b1c:	4293      	cmp	r3, r2
 c005b1e:	d125      	bne.n	c005b6c <UART_SetConfig+0xf0>
 c005b20:	4b8f      	ldr	r3, [pc, #572]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005b26:	f003 0303 	and.w	r3, r3, #3
 c005b2a:	2b03      	cmp	r3, #3
 c005b2c:	d81a      	bhi.n	c005b64 <UART_SetConfig+0xe8>
 c005b2e:	a201      	add	r2, pc, #4	; (adr r2, c005b34 <UART_SetConfig+0xb8>)
 c005b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005b34:	0c005b45 	.word	0x0c005b45
 c005b38:	0c005b55 	.word	0x0c005b55
 c005b3c:	0c005b4d 	.word	0x0c005b4d
 c005b40:	0c005b5d 	.word	0x0c005b5d
 c005b44:	2301      	movs	r3, #1
 c005b46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005b4a:	e114      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005b4c:	2302      	movs	r3, #2
 c005b4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005b52:	e110      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005b54:	2304      	movs	r3, #4
 c005b56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005b5a:	e10c      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005b5c:	2308      	movs	r3, #8
 c005b5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005b62:	e108      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005b64:	2310      	movs	r3, #16
 c005b66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005b6a:	e104      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005b6c:	697b      	ldr	r3, [r7, #20]
 c005b6e:	681b      	ldr	r3, [r3, #0]
 c005b70:	4a7c      	ldr	r2, [pc, #496]	; (c005d64 <UART_SetConfig+0x2e8>)
 c005b72:	4293      	cmp	r3, r2
 c005b74:	d138      	bne.n	c005be8 <UART_SetConfig+0x16c>
 c005b76:	4b7a      	ldr	r3, [pc, #488]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005b78:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005b7c:	f003 030c 	and.w	r3, r3, #12
 c005b80:	2b0c      	cmp	r3, #12
 c005b82:	d82d      	bhi.n	c005be0 <UART_SetConfig+0x164>
 c005b84:	a201      	add	r2, pc, #4	; (adr r2, c005b8c <UART_SetConfig+0x110>)
 c005b86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005b8a:	bf00      	nop
 c005b8c:	0c005bc1 	.word	0x0c005bc1
 c005b90:	0c005be1 	.word	0x0c005be1
 c005b94:	0c005be1 	.word	0x0c005be1
 c005b98:	0c005be1 	.word	0x0c005be1
 c005b9c:	0c005bd1 	.word	0x0c005bd1
 c005ba0:	0c005be1 	.word	0x0c005be1
 c005ba4:	0c005be1 	.word	0x0c005be1
 c005ba8:	0c005be1 	.word	0x0c005be1
 c005bac:	0c005bc9 	.word	0x0c005bc9
 c005bb0:	0c005be1 	.word	0x0c005be1
 c005bb4:	0c005be1 	.word	0x0c005be1
 c005bb8:	0c005be1 	.word	0x0c005be1
 c005bbc:	0c005bd9 	.word	0x0c005bd9
 c005bc0:	2300      	movs	r3, #0
 c005bc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005bc6:	e0d6      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005bc8:	2302      	movs	r3, #2
 c005bca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005bce:	e0d2      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005bd0:	2304      	movs	r3, #4
 c005bd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005bd6:	e0ce      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005bd8:	2308      	movs	r3, #8
 c005bda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005bde:	e0ca      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005be0:	2310      	movs	r3, #16
 c005be2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005be6:	e0c6      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005be8:	697b      	ldr	r3, [r7, #20]
 c005bea:	681b      	ldr	r3, [r3, #0]
 c005bec:	4a5e      	ldr	r2, [pc, #376]	; (c005d68 <UART_SetConfig+0x2ec>)
 c005bee:	4293      	cmp	r3, r2
 c005bf0:	d125      	bne.n	c005c3e <UART_SetConfig+0x1c2>
 c005bf2:	4b5b      	ldr	r3, [pc, #364]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005bf4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005bf8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c005bfc:	2b30      	cmp	r3, #48	; 0x30
 c005bfe:	d016      	beq.n	c005c2e <UART_SetConfig+0x1b2>
 c005c00:	2b30      	cmp	r3, #48	; 0x30
 c005c02:	d818      	bhi.n	c005c36 <UART_SetConfig+0x1ba>
 c005c04:	2b20      	cmp	r3, #32
 c005c06:	d00a      	beq.n	c005c1e <UART_SetConfig+0x1a2>
 c005c08:	2b20      	cmp	r3, #32
 c005c0a:	d814      	bhi.n	c005c36 <UART_SetConfig+0x1ba>
 c005c0c:	2b00      	cmp	r3, #0
 c005c0e:	d002      	beq.n	c005c16 <UART_SetConfig+0x19a>
 c005c10:	2b10      	cmp	r3, #16
 c005c12:	d008      	beq.n	c005c26 <UART_SetConfig+0x1aa>
 c005c14:	e00f      	b.n	c005c36 <UART_SetConfig+0x1ba>
 c005c16:	2300      	movs	r3, #0
 c005c18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c1c:	e0ab      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c1e:	2302      	movs	r3, #2
 c005c20:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c24:	e0a7      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c26:	2304      	movs	r3, #4
 c005c28:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c2c:	e0a3      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c2e:	2308      	movs	r3, #8
 c005c30:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c34:	e09f      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c36:	2310      	movs	r3, #16
 c005c38:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c3c:	e09b      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c3e:	697b      	ldr	r3, [r7, #20]
 c005c40:	681b      	ldr	r3, [r3, #0]
 c005c42:	4a4a      	ldr	r2, [pc, #296]	; (c005d6c <UART_SetConfig+0x2f0>)
 c005c44:	4293      	cmp	r3, r2
 c005c46:	d125      	bne.n	c005c94 <UART_SetConfig+0x218>
 c005c48:	4b45      	ldr	r3, [pc, #276]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005c4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005c4e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c005c52:	2bc0      	cmp	r3, #192	; 0xc0
 c005c54:	d016      	beq.n	c005c84 <UART_SetConfig+0x208>
 c005c56:	2bc0      	cmp	r3, #192	; 0xc0
 c005c58:	d818      	bhi.n	c005c8c <UART_SetConfig+0x210>
 c005c5a:	2b80      	cmp	r3, #128	; 0x80
 c005c5c:	d00a      	beq.n	c005c74 <UART_SetConfig+0x1f8>
 c005c5e:	2b80      	cmp	r3, #128	; 0x80
 c005c60:	d814      	bhi.n	c005c8c <UART_SetConfig+0x210>
 c005c62:	2b00      	cmp	r3, #0
 c005c64:	d002      	beq.n	c005c6c <UART_SetConfig+0x1f0>
 c005c66:	2b40      	cmp	r3, #64	; 0x40
 c005c68:	d008      	beq.n	c005c7c <UART_SetConfig+0x200>
 c005c6a:	e00f      	b.n	c005c8c <UART_SetConfig+0x210>
 c005c6c:	2300      	movs	r3, #0
 c005c6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c72:	e080      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c74:	2302      	movs	r3, #2
 c005c76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c7a:	e07c      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c7c:	2304      	movs	r3, #4
 c005c7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c82:	e078      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c84:	2308      	movs	r3, #8
 c005c86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c8a:	e074      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c8c:	2310      	movs	r3, #16
 c005c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005c92:	e070      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005c94:	697b      	ldr	r3, [r7, #20]
 c005c96:	681b      	ldr	r3, [r3, #0]
 c005c98:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c005c9c:	d12a      	bne.n	c005cf4 <UART_SetConfig+0x278>
 c005c9e:	4b30      	ldr	r3, [pc, #192]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005ca0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ca4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c005ca8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005cac:	d01a      	beq.n	c005ce4 <UART_SetConfig+0x268>
 c005cae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005cb2:	d81b      	bhi.n	c005cec <UART_SetConfig+0x270>
 c005cb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005cb8:	d00c      	beq.n	c005cd4 <UART_SetConfig+0x258>
 c005cba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005cbe:	d815      	bhi.n	c005cec <UART_SetConfig+0x270>
 c005cc0:	2b00      	cmp	r3, #0
 c005cc2:	d003      	beq.n	c005ccc <UART_SetConfig+0x250>
 c005cc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c005cc8:	d008      	beq.n	c005cdc <UART_SetConfig+0x260>
 c005cca:	e00f      	b.n	c005cec <UART_SetConfig+0x270>
 c005ccc:	2300      	movs	r3, #0
 c005cce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005cd2:	e050      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005cd4:	2302      	movs	r3, #2
 c005cd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005cda:	e04c      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005cdc:	2304      	movs	r3, #4
 c005cde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005ce2:	e048      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005ce4:	2308      	movs	r3, #8
 c005ce6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005cea:	e044      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005cec:	2310      	movs	r3, #16
 c005cee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005cf2:	e040      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005cf4:	697b      	ldr	r3, [r7, #20]
 c005cf6:	681b      	ldr	r3, [r3, #0]
 c005cf8:	4a17      	ldr	r2, [pc, #92]	; (c005d58 <UART_SetConfig+0x2dc>)
 c005cfa:	4293      	cmp	r3, r2
 c005cfc:	d138      	bne.n	c005d70 <UART_SetConfig+0x2f4>
 c005cfe:	4b18      	ldr	r3, [pc, #96]	; (c005d60 <UART_SetConfig+0x2e4>)
 c005d00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005d04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c005d08:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c005d0c:	d01a      	beq.n	c005d44 <UART_SetConfig+0x2c8>
 c005d0e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c005d12:	d81b      	bhi.n	c005d4c <UART_SetConfig+0x2d0>
 c005d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005d18:	d00c      	beq.n	c005d34 <UART_SetConfig+0x2b8>
 c005d1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005d1e:	d815      	bhi.n	c005d4c <UART_SetConfig+0x2d0>
 c005d20:	2b00      	cmp	r3, #0
 c005d22:	d003      	beq.n	c005d2c <UART_SetConfig+0x2b0>
 c005d24:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005d28:	d008      	beq.n	c005d3c <UART_SetConfig+0x2c0>
 c005d2a:	e00f      	b.n	c005d4c <UART_SetConfig+0x2d0>
 c005d2c:	2300      	movs	r3, #0
 c005d2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005d32:	e020      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005d34:	2302      	movs	r3, #2
 c005d36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005d3a:	e01c      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005d3c:	2304      	movs	r3, #4
 c005d3e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005d42:	e018      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005d44:	2308      	movs	r3, #8
 c005d46:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005d4a:	e014      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005d4c:	2310      	movs	r3, #16
 c005d4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005d52:	e010      	b.n	c005d76 <UART_SetConfig+0x2fa>
 c005d54:	cfff69f3 	.word	0xcfff69f3
 c005d58:	50008000 	.word	0x50008000
 c005d5c:	50013800 	.word	0x50013800
 c005d60:	50021000 	.word	0x50021000
 c005d64:	50004400 	.word	0x50004400
 c005d68:	50004800 	.word	0x50004800
 c005d6c:	50004c00 	.word	0x50004c00
 c005d70:	2310      	movs	r3, #16
 c005d72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c005d76:	697b      	ldr	r3, [r7, #20]
 c005d78:	681b      	ldr	r3, [r3, #0]
 c005d7a:	4ab0      	ldr	r2, [pc, #704]	; (c00603c <UART_SetConfig+0x5c0>)
 c005d7c:	4293      	cmp	r3, r2
 c005d7e:	f040 809b 	bne.w	c005eb8 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c005d82:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005d86:	2b08      	cmp	r3, #8
 c005d88:	d827      	bhi.n	c005dda <UART_SetConfig+0x35e>
 c005d8a:	a201      	add	r2, pc, #4	; (adr r2, c005d90 <UART_SetConfig+0x314>)
 c005d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005d90:	0c005db5 	.word	0x0c005db5
 c005d94:	0c005dbd 	.word	0x0c005dbd
 c005d98:	0c005dc5 	.word	0x0c005dc5
 c005d9c:	0c005ddb 	.word	0x0c005ddb
 c005da0:	0c005dcb 	.word	0x0c005dcb
 c005da4:	0c005ddb 	.word	0x0c005ddb
 c005da8:	0c005ddb 	.word	0x0c005ddb
 c005dac:	0c005ddb 	.word	0x0c005ddb
 c005db0:	0c005dd3 	.word	0x0c005dd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005db4:	f7fe f80e 	bl	c003dd4 <HAL_RCC_GetPCLK1Freq>
 c005db8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005dba:	e014      	b.n	c005de6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005dbc:	f7fe f81e 	bl	c003dfc <HAL_RCC_GetPCLK2Freq>
 c005dc0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005dc2:	e010      	b.n	c005de6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005dc4:	4b9e      	ldr	r3, [pc, #632]	; (c006040 <UART_SetConfig+0x5c4>)
 c005dc6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005dc8:	e00d      	b.n	c005de6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005dca:	f7fd ff51 	bl	c003c70 <HAL_RCC_GetSysClockFreq>
 c005dce:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005dd0:	e009      	b.n	c005de6 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005dd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005dd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005dd8:	e005      	b.n	c005de6 <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c005dda:	2300      	movs	r3, #0
 c005ddc:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005dde:	2301      	movs	r3, #1
 c005de0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c005de4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c005de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005de8:	2b00      	cmp	r3, #0
 c005dea:	f000 8130 	beq.w	c00604e <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c005dee:	697b      	ldr	r3, [r7, #20]
 c005df0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005df2:	4a94      	ldr	r2, [pc, #592]	; (c006044 <UART_SetConfig+0x5c8>)
 c005df4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c005df8:	461a      	mov	r2, r3
 c005dfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005dfc:	fbb3 f3f2 	udiv	r3, r3, r2
 c005e00:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c005e02:	697b      	ldr	r3, [r7, #20]
 c005e04:	685a      	ldr	r2, [r3, #4]
 c005e06:	4613      	mov	r3, r2
 c005e08:	005b      	lsls	r3, r3, #1
 c005e0a:	4413      	add	r3, r2
 c005e0c:	69ba      	ldr	r2, [r7, #24]
 c005e0e:	429a      	cmp	r2, r3
 c005e10:	d305      	bcc.n	c005e1e <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c005e12:	697b      	ldr	r3, [r7, #20]
 c005e14:	685b      	ldr	r3, [r3, #4]
 c005e16:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c005e18:	69ba      	ldr	r2, [r7, #24]
 c005e1a:	429a      	cmp	r2, r3
 c005e1c:	d903      	bls.n	c005e26 <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c005e1e:	2301      	movs	r3, #1
 c005e20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005e24:	e113      	b.n	c00604e <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005e28:	2200      	movs	r2, #0
 c005e2a:	60bb      	str	r3, [r7, #8]
 c005e2c:	60fa      	str	r2, [r7, #12]
 c005e2e:	697b      	ldr	r3, [r7, #20]
 c005e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005e32:	4a84      	ldr	r2, [pc, #528]	; (c006044 <UART_SetConfig+0x5c8>)
 c005e34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c005e38:	b29b      	uxth	r3, r3
 c005e3a:	2200      	movs	r2, #0
 c005e3c:	603b      	str	r3, [r7, #0]
 c005e3e:	607a      	str	r2, [r7, #4]
 c005e40:	e9d7 2300 	ldrd	r2, r3, [r7]
 c005e44:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c005e48:	f7fa fa96 	bl	c000378 <__aeabi_uldivmod>
 c005e4c:	4602      	mov	r2, r0
 c005e4e:	460b      	mov	r3, r1
 c005e50:	4610      	mov	r0, r2
 c005e52:	4619      	mov	r1, r3
 c005e54:	f04f 0200 	mov.w	r2, #0
 c005e58:	f04f 0300 	mov.w	r3, #0
 c005e5c:	020b      	lsls	r3, r1, #8
 c005e5e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c005e62:	0202      	lsls	r2, r0, #8
 c005e64:	6979      	ldr	r1, [r7, #20]
 c005e66:	6849      	ldr	r1, [r1, #4]
 c005e68:	0849      	lsrs	r1, r1, #1
 c005e6a:	2000      	movs	r0, #0
 c005e6c:	460c      	mov	r4, r1
 c005e6e:	4605      	mov	r5, r0
 c005e70:	eb12 0804 	adds.w	r8, r2, r4
 c005e74:	eb43 0905 	adc.w	r9, r3, r5
 c005e78:	697b      	ldr	r3, [r7, #20]
 c005e7a:	685b      	ldr	r3, [r3, #4]
 c005e7c:	2200      	movs	r2, #0
 c005e7e:	469a      	mov	sl, r3
 c005e80:	4693      	mov	fp, r2
 c005e82:	4652      	mov	r2, sl
 c005e84:	465b      	mov	r3, fp
 c005e86:	4640      	mov	r0, r8
 c005e88:	4649      	mov	r1, r9
 c005e8a:	f7fa fa75 	bl	c000378 <__aeabi_uldivmod>
 c005e8e:	4602      	mov	r2, r0
 c005e90:	460b      	mov	r3, r1
 c005e92:	4613      	mov	r3, r2
 c005e94:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c005e96:	6a3b      	ldr	r3, [r7, #32]
 c005e98:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005e9c:	d308      	bcc.n	c005eb0 <UART_SetConfig+0x434>
 c005e9e:	6a3b      	ldr	r3, [r7, #32]
 c005ea0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005ea4:	d204      	bcs.n	c005eb0 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c005ea6:	697b      	ldr	r3, [r7, #20]
 c005ea8:	681b      	ldr	r3, [r3, #0]
 c005eaa:	6a3a      	ldr	r2, [r7, #32]
 c005eac:	60da      	str	r2, [r3, #12]
 c005eae:	e0ce      	b.n	c00604e <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c005eb0:	2301      	movs	r3, #1
 c005eb2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005eb6:	e0ca      	b.n	c00604e <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c005eb8:	697b      	ldr	r3, [r7, #20]
 c005eba:	69db      	ldr	r3, [r3, #28]
 c005ebc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005ec0:	d166      	bne.n	c005f90 <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c005ec2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005ec6:	2b08      	cmp	r3, #8
 c005ec8:	d827      	bhi.n	c005f1a <UART_SetConfig+0x49e>
 c005eca:	a201      	add	r2, pc, #4	; (adr r2, c005ed0 <UART_SetConfig+0x454>)
 c005ecc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005ed0:	0c005ef5 	.word	0x0c005ef5
 c005ed4:	0c005efd 	.word	0x0c005efd
 c005ed8:	0c005f05 	.word	0x0c005f05
 c005edc:	0c005f1b 	.word	0x0c005f1b
 c005ee0:	0c005f0b 	.word	0x0c005f0b
 c005ee4:	0c005f1b 	.word	0x0c005f1b
 c005ee8:	0c005f1b 	.word	0x0c005f1b
 c005eec:	0c005f1b 	.word	0x0c005f1b
 c005ef0:	0c005f13 	.word	0x0c005f13
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005ef4:	f7fd ff6e 	bl	c003dd4 <HAL_RCC_GetPCLK1Freq>
 c005ef8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005efa:	e014      	b.n	c005f26 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005efc:	f7fd ff7e 	bl	c003dfc <HAL_RCC_GetPCLK2Freq>
 c005f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005f02:	e010      	b.n	c005f26 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005f04:	4b4e      	ldr	r3, [pc, #312]	; (c006040 <UART_SetConfig+0x5c4>)
 c005f06:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005f08:	e00d      	b.n	c005f26 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005f0a:	f7fd feb1 	bl	c003c70 <HAL_RCC_GetSysClockFreq>
 c005f0e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005f10:	e009      	b.n	c005f26 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005f12:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005f16:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005f18:	e005      	b.n	c005f26 <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c005f1a:	2300      	movs	r3, #0
 c005f1c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005f1e:	2301      	movs	r3, #1
 c005f20:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c005f24:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c005f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005f28:	2b00      	cmp	r3, #0
 c005f2a:	f000 8090 	beq.w	c00604e <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005f2e:	697b      	ldr	r3, [r7, #20]
 c005f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005f32:	4a44      	ldr	r2, [pc, #272]	; (c006044 <UART_SetConfig+0x5c8>)
 c005f34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c005f38:	461a      	mov	r2, r3
 c005f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005f3c:	fbb3 f3f2 	udiv	r3, r3, r2
 c005f40:	005a      	lsls	r2, r3, #1
 c005f42:	697b      	ldr	r3, [r7, #20]
 c005f44:	685b      	ldr	r3, [r3, #4]
 c005f46:	085b      	lsrs	r3, r3, #1
 c005f48:	441a      	add	r2, r3
 c005f4a:	697b      	ldr	r3, [r7, #20]
 c005f4c:	685b      	ldr	r3, [r3, #4]
 c005f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 c005f52:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c005f54:	6a3b      	ldr	r3, [r7, #32]
 c005f56:	2b0f      	cmp	r3, #15
 c005f58:	d916      	bls.n	c005f88 <UART_SetConfig+0x50c>
 c005f5a:	6a3b      	ldr	r3, [r7, #32]
 c005f5c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005f60:	d212      	bcs.n	c005f88 <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c005f62:	6a3b      	ldr	r3, [r7, #32]
 c005f64:	b29b      	uxth	r3, r3
 c005f66:	f023 030f 	bic.w	r3, r3, #15
 c005f6a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c005f6c:	6a3b      	ldr	r3, [r7, #32]
 c005f6e:	085b      	lsrs	r3, r3, #1
 c005f70:	b29b      	uxth	r3, r3
 c005f72:	f003 0307 	and.w	r3, r3, #7
 c005f76:	b29a      	uxth	r2, r3
 c005f78:	8bfb      	ldrh	r3, [r7, #30]
 c005f7a:	4313      	orrs	r3, r2
 c005f7c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c005f7e:	697b      	ldr	r3, [r7, #20]
 c005f80:	681b      	ldr	r3, [r3, #0]
 c005f82:	8bfa      	ldrh	r2, [r7, #30]
 c005f84:	60da      	str	r2, [r3, #12]
 c005f86:	e062      	b.n	c00604e <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c005f88:	2301      	movs	r3, #1
 c005f8a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005f8e:	e05e      	b.n	c00604e <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c005f90:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005f94:	2b08      	cmp	r3, #8
 c005f96:	d828      	bhi.n	c005fea <UART_SetConfig+0x56e>
 c005f98:	a201      	add	r2, pc, #4	; (adr r2, c005fa0 <UART_SetConfig+0x524>)
 c005f9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005f9e:	bf00      	nop
 c005fa0:	0c005fc5 	.word	0x0c005fc5
 c005fa4:	0c005fcd 	.word	0x0c005fcd
 c005fa8:	0c005fd5 	.word	0x0c005fd5
 c005fac:	0c005feb 	.word	0x0c005feb
 c005fb0:	0c005fdb 	.word	0x0c005fdb
 c005fb4:	0c005feb 	.word	0x0c005feb
 c005fb8:	0c005feb 	.word	0x0c005feb
 c005fbc:	0c005feb 	.word	0x0c005feb
 c005fc0:	0c005fe3 	.word	0x0c005fe3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005fc4:	f7fd ff06 	bl	c003dd4 <HAL_RCC_GetPCLK1Freq>
 c005fc8:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005fca:	e014      	b.n	c005ff6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005fcc:	f7fd ff16 	bl	c003dfc <HAL_RCC_GetPCLK2Freq>
 c005fd0:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005fd2:	e010      	b.n	c005ff6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005fd4:	4b1a      	ldr	r3, [pc, #104]	; (c006040 <UART_SetConfig+0x5c4>)
 c005fd6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005fd8:	e00d      	b.n	c005ff6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005fda:	f7fd fe49 	bl	c003c70 <HAL_RCC_GetSysClockFreq>
 c005fde:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005fe0:	e009      	b.n	c005ff6 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005fe2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005fe6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005fe8:	e005      	b.n	c005ff6 <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c005fea:	2300      	movs	r3, #0
 c005fec:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005fee:	2301      	movs	r3, #1
 c005ff0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c005ff4:	bf00      	nop
    }

    if (pclk != 0U)
 c005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005ff8:	2b00      	cmp	r3, #0
 c005ffa:	d028      	beq.n	c00604e <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005ffc:	697b      	ldr	r3, [r7, #20]
 c005ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006000:	4a10      	ldr	r2, [pc, #64]	; (c006044 <UART_SetConfig+0x5c8>)
 c006002:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006006:	461a      	mov	r2, r3
 c006008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00600a:	fbb3 f2f2 	udiv	r2, r3, r2
 c00600e:	697b      	ldr	r3, [r7, #20]
 c006010:	685b      	ldr	r3, [r3, #4]
 c006012:	085b      	lsrs	r3, r3, #1
 c006014:	441a      	add	r2, r3
 c006016:	697b      	ldr	r3, [r7, #20]
 c006018:	685b      	ldr	r3, [r3, #4]
 c00601a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00601e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c006020:	6a3b      	ldr	r3, [r7, #32]
 c006022:	2b0f      	cmp	r3, #15
 c006024:	d910      	bls.n	c006048 <UART_SetConfig+0x5cc>
 c006026:	6a3b      	ldr	r3, [r7, #32]
 c006028:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00602c:	d20c      	bcs.n	c006048 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c00602e:	6a3b      	ldr	r3, [r7, #32]
 c006030:	b29a      	uxth	r2, r3
 c006032:	697b      	ldr	r3, [r7, #20]
 c006034:	681b      	ldr	r3, [r3, #0]
 c006036:	60da      	str	r2, [r3, #12]
 c006038:	e009      	b.n	c00604e <UART_SetConfig+0x5d2>
 c00603a:	bf00      	nop
 c00603c:	50008000 	.word	0x50008000
 c006040:	00f42400 	.word	0x00f42400
 c006044:	0c0081a4 	.word	0x0c0081a4
      }
      else
      {
        ret = HAL_ERROR;
 c006048:	2301      	movs	r3, #1
 c00604a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c00604e:	697b      	ldr	r3, [r7, #20]
 c006050:	2201      	movs	r2, #1
 c006052:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c006056:	697b      	ldr	r3, [r7, #20]
 c006058:	2201      	movs	r2, #1
 c00605a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c00605e:	697b      	ldr	r3, [r7, #20]
 c006060:	2200      	movs	r2, #0
 c006062:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c006064:	697b      	ldr	r3, [r7, #20]
 c006066:	2200      	movs	r2, #0
 c006068:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c00606a:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c00606e:	4618      	mov	r0, r3
 c006070:	3730      	adds	r7, #48	; 0x30
 c006072:	46bd      	mov	sp, r7
 c006074:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c006078 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c006078:	b480      	push	{r7}
 c00607a:	b083      	sub	sp, #12
 c00607c:	af00      	add	r7, sp, #0
 c00607e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c006080:	687b      	ldr	r3, [r7, #4]
 c006082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006084:	f003 0301 	and.w	r3, r3, #1
 c006088:	2b00      	cmp	r3, #0
 c00608a:	d00a      	beq.n	c0060a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c00608c:	687b      	ldr	r3, [r7, #4]
 c00608e:	681b      	ldr	r3, [r3, #0]
 c006090:	685b      	ldr	r3, [r3, #4]
 c006092:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c006096:	687b      	ldr	r3, [r7, #4]
 c006098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c00609a:	687b      	ldr	r3, [r7, #4]
 c00609c:	681b      	ldr	r3, [r3, #0]
 c00609e:	430a      	orrs	r2, r1
 c0060a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c0060a2:	687b      	ldr	r3, [r7, #4]
 c0060a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0060a6:	f003 0302 	and.w	r3, r3, #2
 c0060aa:	2b00      	cmp	r3, #0
 c0060ac:	d00a      	beq.n	c0060c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c0060ae:	687b      	ldr	r3, [r7, #4]
 c0060b0:	681b      	ldr	r3, [r3, #0]
 c0060b2:	685b      	ldr	r3, [r3, #4]
 c0060b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c0060b8:	687b      	ldr	r3, [r7, #4]
 c0060ba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c0060bc:	687b      	ldr	r3, [r7, #4]
 c0060be:	681b      	ldr	r3, [r3, #0]
 c0060c0:	430a      	orrs	r2, r1
 c0060c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c0060c4:	687b      	ldr	r3, [r7, #4]
 c0060c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0060c8:	f003 0304 	and.w	r3, r3, #4
 c0060cc:	2b00      	cmp	r3, #0
 c0060ce:	d00a      	beq.n	c0060e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c0060d0:	687b      	ldr	r3, [r7, #4]
 c0060d2:	681b      	ldr	r3, [r3, #0]
 c0060d4:	685b      	ldr	r3, [r3, #4]
 c0060d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c0060da:	687b      	ldr	r3, [r7, #4]
 c0060dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0060de:	687b      	ldr	r3, [r7, #4]
 c0060e0:	681b      	ldr	r3, [r3, #0]
 c0060e2:	430a      	orrs	r2, r1
 c0060e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c0060e6:	687b      	ldr	r3, [r7, #4]
 c0060e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0060ea:	f003 0308 	and.w	r3, r3, #8
 c0060ee:	2b00      	cmp	r3, #0
 c0060f0:	d00a      	beq.n	c006108 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0060f2:	687b      	ldr	r3, [r7, #4]
 c0060f4:	681b      	ldr	r3, [r3, #0]
 c0060f6:	685b      	ldr	r3, [r3, #4]
 c0060f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c0060fc:	687b      	ldr	r3, [r7, #4]
 c0060fe:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c006100:	687b      	ldr	r3, [r7, #4]
 c006102:	681b      	ldr	r3, [r3, #0]
 c006104:	430a      	orrs	r2, r1
 c006106:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c006108:	687b      	ldr	r3, [r7, #4]
 c00610a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00610c:	f003 0310 	and.w	r3, r3, #16
 c006110:	2b00      	cmp	r3, #0
 c006112:	d00a      	beq.n	c00612a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c006114:	687b      	ldr	r3, [r7, #4]
 c006116:	681b      	ldr	r3, [r3, #0]
 c006118:	689b      	ldr	r3, [r3, #8]
 c00611a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c00611e:	687b      	ldr	r3, [r7, #4]
 c006120:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c006122:	687b      	ldr	r3, [r7, #4]
 c006124:	681b      	ldr	r3, [r3, #0]
 c006126:	430a      	orrs	r2, r1
 c006128:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c00612a:	687b      	ldr	r3, [r7, #4]
 c00612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00612e:	f003 0320 	and.w	r3, r3, #32
 c006132:	2b00      	cmp	r3, #0
 c006134:	d00a      	beq.n	c00614c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c006136:	687b      	ldr	r3, [r7, #4]
 c006138:	681b      	ldr	r3, [r3, #0]
 c00613a:	689b      	ldr	r3, [r3, #8]
 c00613c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c006140:	687b      	ldr	r3, [r7, #4]
 c006142:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c006144:	687b      	ldr	r3, [r7, #4]
 c006146:	681b      	ldr	r3, [r3, #0]
 c006148:	430a      	orrs	r2, r1
 c00614a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c00614c:	687b      	ldr	r3, [r7, #4]
 c00614e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006150:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006154:	2b00      	cmp	r3, #0
 c006156:	d01a      	beq.n	c00618e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c006158:	687b      	ldr	r3, [r7, #4]
 c00615a:	681b      	ldr	r3, [r3, #0]
 c00615c:	685b      	ldr	r3, [r3, #4]
 c00615e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c006162:	687b      	ldr	r3, [r7, #4]
 c006164:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c006166:	687b      	ldr	r3, [r7, #4]
 c006168:	681b      	ldr	r3, [r3, #0]
 c00616a:	430a      	orrs	r2, r1
 c00616c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00616e:	687b      	ldr	r3, [r7, #4]
 c006170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c006172:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c006176:	d10a      	bne.n	c00618e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c006178:	687b      	ldr	r3, [r7, #4]
 c00617a:	681b      	ldr	r3, [r3, #0]
 c00617c:	685b      	ldr	r3, [r3, #4]
 c00617e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c006182:	687b      	ldr	r3, [r7, #4]
 c006184:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c006186:	687b      	ldr	r3, [r7, #4]
 c006188:	681b      	ldr	r3, [r3, #0]
 c00618a:	430a      	orrs	r2, r1
 c00618c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00618e:	687b      	ldr	r3, [r7, #4]
 c006190:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006192:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006196:	2b00      	cmp	r3, #0
 c006198:	d00a      	beq.n	c0061b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c00619a:	687b      	ldr	r3, [r7, #4]
 c00619c:	681b      	ldr	r3, [r3, #0]
 c00619e:	685b      	ldr	r3, [r3, #4]
 c0061a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c0061a4:	687b      	ldr	r3, [r7, #4]
 c0061a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c0061a8:	687b      	ldr	r3, [r7, #4]
 c0061aa:	681b      	ldr	r3, [r3, #0]
 c0061ac:	430a      	orrs	r2, r1
 c0061ae:	605a      	str	r2, [r3, #4]
  }
}
 c0061b0:	bf00      	nop
 c0061b2:	370c      	adds	r7, #12
 c0061b4:	46bd      	mov	sp, r7
 c0061b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0061ba:	4770      	bx	lr

0c0061bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c0061bc:	b580      	push	{r7, lr}
 c0061be:	b098      	sub	sp, #96	; 0x60
 c0061c0:	af02      	add	r7, sp, #8
 c0061c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0061c4:	687b      	ldr	r3, [r7, #4]
 c0061c6:	2200      	movs	r2, #0
 c0061c8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c0061cc:	f7fb fe1c 	bl	c001e08 <HAL_GetTick>
 c0061d0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0061d2:	687b      	ldr	r3, [r7, #4]
 c0061d4:	681b      	ldr	r3, [r3, #0]
 c0061d6:	681b      	ldr	r3, [r3, #0]
 c0061d8:	f003 0308 	and.w	r3, r3, #8
 c0061dc:	2b08      	cmp	r3, #8
 c0061de:	d12f      	bne.n	c006240 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0061e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0061e4:	9300      	str	r3, [sp, #0]
 c0061e6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0061e8:	2200      	movs	r2, #0
 c0061ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c0061ee:	6878      	ldr	r0, [r7, #4]
 c0061f0:	f000 f88e 	bl	c006310 <UART_WaitOnFlagUntilTimeout>
 c0061f4:	4603      	mov	r3, r0
 c0061f6:	2b00      	cmp	r3, #0
 c0061f8:	d022      	beq.n	c006240 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c0061fa:	687b      	ldr	r3, [r7, #4]
 c0061fc:	681b      	ldr	r3, [r3, #0]
 c0061fe:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c006202:	e853 3f00 	ldrex	r3, [r3]
 c006206:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c006208:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c00620a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00620e:	653b      	str	r3, [r7, #80]	; 0x50
 c006210:	687b      	ldr	r3, [r7, #4]
 c006212:	681b      	ldr	r3, [r3, #0]
 c006214:	461a      	mov	r2, r3
 c006216:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c006218:	647b      	str	r3, [r7, #68]	; 0x44
 c00621a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00621c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c00621e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c006220:	e841 2300 	strex	r3, r2, [r1]
 c006224:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c006226:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c006228:	2b00      	cmp	r3, #0
 c00622a:	d1e6      	bne.n	c0061fa <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c00622c:	687b      	ldr	r3, [r7, #4]
 c00622e:	2220      	movs	r2, #32
 c006230:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c006234:	687b      	ldr	r3, [r7, #4]
 c006236:	2200      	movs	r2, #0
 c006238:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c00623c:	2303      	movs	r3, #3
 c00623e:	e063      	b.n	c006308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c006240:	687b      	ldr	r3, [r7, #4]
 c006242:	681b      	ldr	r3, [r3, #0]
 c006244:	681b      	ldr	r3, [r3, #0]
 c006246:	f003 0304 	and.w	r3, r3, #4
 c00624a:	2b04      	cmp	r3, #4
 c00624c:	d149      	bne.n	c0062e2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00624e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c006252:	9300      	str	r3, [sp, #0]
 c006254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c006256:	2200      	movs	r2, #0
 c006258:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c00625c:	6878      	ldr	r0, [r7, #4]
 c00625e:	f000 f857 	bl	c006310 <UART_WaitOnFlagUntilTimeout>
 c006262:	4603      	mov	r3, r0
 c006264:	2b00      	cmp	r3, #0
 c006266:	d03c      	beq.n	c0062e2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c006268:	687b      	ldr	r3, [r7, #4]
 c00626a:	681b      	ldr	r3, [r3, #0]
 c00626c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00626e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006270:	e853 3f00 	ldrex	r3, [r3]
 c006274:	623b      	str	r3, [r7, #32]
   return(result);
 c006276:	6a3b      	ldr	r3, [r7, #32]
 c006278:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c00627c:	64fb      	str	r3, [r7, #76]	; 0x4c
 c00627e:	687b      	ldr	r3, [r7, #4]
 c006280:	681b      	ldr	r3, [r3, #0]
 c006282:	461a      	mov	r2, r3
 c006284:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c006286:	633b      	str	r3, [r7, #48]	; 0x30
 c006288:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00628a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c00628c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c00628e:	e841 2300 	strex	r3, r2, [r1]
 c006292:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c006294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c006296:	2b00      	cmp	r3, #0
 c006298:	d1e6      	bne.n	c006268 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00629a:	687b      	ldr	r3, [r7, #4]
 c00629c:	681b      	ldr	r3, [r3, #0]
 c00629e:	3308      	adds	r3, #8
 c0062a0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0062a2:	693b      	ldr	r3, [r7, #16]
 c0062a4:	e853 3f00 	ldrex	r3, [r3]
 c0062a8:	60fb      	str	r3, [r7, #12]
   return(result);
 c0062aa:	68fb      	ldr	r3, [r7, #12]
 c0062ac:	f023 0301 	bic.w	r3, r3, #1
 c0062b0:	64bb      	str	r3, [r7, #72]	; 0x48
 c0062b2:	687b      	ldr	r3, [r7, #4]
 c0062b4:	681b      	ldr	r3, [r3, #0]
 c0062b6:	3308      	adds	r3, #8
 c0062b8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0062ba:	61fa      	str	r2, [r7, #28]
 c0062bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0062be:	69b9      	ldr	r1, [r7, #24]
 c0062c0:	69fa      	ldr	r2, [r7, #28]
 c0062c2:	e841 2300 	strex	r3, r2, [r1]
 c0062c6:	617b      	str	r3, [r7, #20]
   return(result);
 c0062c8:	697b      	ldr	r3, [r7, #20]
 c0062ca:	2b00      	cmp	r3, #0
 c0062cc:	d1e5      	bne.n	c00629a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c0062ce:	687b      	ldr	r3, [r7, #4]
 c0062d0:	2220      	movs	r2, #32
 c0062d2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c0062d6:	687b      	ldr	r3, [r7, #4]
 c0062d8:	2200      	movs	r2, #0
 c0062da:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0062de:	2303      	movs	r3, #3
 c0062e0:	e012      	b.n	c006308 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c0062e2:	687b      	ldr	r3, [r7, #4]
 c0062e4:	2220      	movs	r2, #32
 c0062e6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c0062ea:	687b      	ldr	r3, [r7, #4]
 c0062ec:	2220      	movs	r2, #32
 c0062ee:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0062f2:	687b      	ldr	r3, [r7, #4]
 c0062f4:	2200      	movs	r2, #0
 c0062f6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c0062f8:	687b      	ldr	r3, [r7, #4]
 c0062fa:	2200      	movs	r2, #0
 c0062fc:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c0062fe:	687b      	ldr	r3, [r7, #4]
 c006300:	2200      	movs	r2, #0
 c006302:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c006306:	2300      	movs	r3, #0
}
 c006308:	4618      	mov	r0, r3
 c00630a:	3758      	adds	r7, #88	; 0x58
 c00630c:	46bd      	mov	sp, r7
 c00630e:	bd80      	pop	{r7, pc}

0c006310 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c006310:	b580      	push	{r7, lr}
 c006312:	b084      	sub	sp, #16
 c006314:	af00      	add	r7, sp, #0
 c006316:	60f8      	str	r0, [r7, #12]
 c006318:	60b9      	str	r1, [r7, #8]
 c00631a:	603b      	str	r3, [r7, #0]
 c00631c:	4613      	mov	r3, r2
 c00631e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c006320:	e049      	b.n	c0063b6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c006322:	69bb      	ldr	r3, [r7, #24]
 c006324:	f1b3 3fff 	cmp.w	r3, #4294967295
 c006328:	d045      	beq.n	c0063b6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c00632a:	f7fb fd6d 	bl	c001e08 <HAL_GetTick>
 c00632e:	4602      	mov	r2, r0
 c006330:	683b      	ldr	r3, [r7, #0]
 c006332:	1ad3      	subs	r3, r2, r3
 c006334:	69ba      	ldr	r2, [r7, #24]
 c006336:	429a      	cmp	r2, r3
 c006338:	d302      	bcc.n	c006340 <UART_WaitOnFlagUntilTimeout+0x30>
 c00633a:	69bb      	ldr	r3, [r7, #24]
 c00633c:	2b00      	cmp	r3, #0
 c00633e:	d101      	bne.n	c006344 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c006340:	2303      	movs	r3, #3
 c006342:	e048      	b.n	c0063d6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c006344:	68fb      	ldr	r3, [r7, #12]
 c006346:	681b      	ldr	r3, [r3, #0]
 c006348:	681b      	ldr	r3, [r3, #0]
 c00634a:	f003 0304 	and.w	r3, r3, #4
 c00634e:	2b00      	cmp	r3, #0
 c006350:	d031      	beq.n	c0063b6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c006352:	68fb      	ldr	r3, [r7, #12]
 c006354:	681b      	ldr	r3, [r3, #0]
 c006356:	69db      	ldr	r3, [r3, #28]
 c006358:	f003 0308 	and.w	r3, r3, #8
 c00635c:	2b08      	cmp	r3, #8
 c00635e:	d110      	bne.n	c006382 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c006360:	68fb      	ldr	r3, [r7, #12]
 c006362:	681b      	ldr	r3, [r3, #0]
 c006364:	2208      	movs	r2, #8
 c006366:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c006368:	68f8      	ldr	r0, [r7, #12]
 c00636a:	f000 f838 	bl	c0063de <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c00636e:	68fb      	ldr	r3, [r7, #12]
 c006370:	2208      	movs	r2, #8
 c006372:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c006376:	68fb      	ldr	r3, [r7, #12]
 c006378:	2200      	movs	r2, #0
 c00637a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c00637e:	2301      	movs	r3, #1
 c006380:	e029      	b.n	c0063d6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c006382:	68fb      	ldr	r3, [r7, #12]
 c006384:	681b      	ldr	r3, [r3, #0]
 c006386:	69db      	ldr	r3, [r3, #28]
 c006388:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00638c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c006390:	d111      	bne.n	c0063b6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c006392:	68fb      	ldr	r3, [r7, #12]
 c006394:	681b      	ldr	r3, [r3, #0]
 c006396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c00639a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c00639c:	68f8      	ldr	r0, [r7, #12]
 c00639e:	f000 f81e 	bl	c0063de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0063a2:	68fb      	ldr	r3, [r7, #12]
 c0063a4:	2220      	movs	r2, #32
 c0063a6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0063aa:	68fb      	ldr	r3, [r7, #12]
 c0063ac:	2200      	movs	r2, #0
 c0063ae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c0063b2:	2303      	movs	r3, #3
 c0063b4:	e00f      	b.n	c0063d6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0063b6:	68fb      	ldr	r3, [r7, #12]
 c0063b8:	681b      	ldr	r3, [r3, #0]
 c0063ba:	69da      	ldr	r2, [r3, #28]
 c0063bc:	68bb      	ldr	r3, [r7, #8]
 c0063be:	4013      	ands	r3, r2
 c0063c0:	68ba      	ldr	r2, [r7, #8]
 c0063c2:	429a      	cmp	r2, r3
 c0063c4:	bf0c      	ite	eq
 c0063c6:	2301      	moveq	r3, #1
 c0063c8:	2300      	movne	r3, #0
 c0063ca:	b2db      	uxtb	r3, r3
 c0063cc:	461a      	mov	r2, r3
 c0063ce:	79fb      	ldrb	r3, [r7, #7]
 c0063d0:	429a      	cmp	r2, r3
 c0063d2:	d0a6      	beq.n	c006322 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c0063d4:	2300      	movs	r3, #0
}
 c0063d6:	4618      	mov	r0, r3
 c0063d8:	3710      	adds	r7, #16
 c0063da:	46bd      	mov	sp, r7
 c0063dc:	bd80      	pop	{r7, pc}

0c0063de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c0063de:	b480      	push	{r7}
 c0063e0:	b095      	sub	sp, #84	; 0x54
 c0063e2:	af00      	add	r7, sp, #0
 c0063e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c0063e6:	687b      	ldr	r3, [r7, #4]
 c0063e8:	681b      	ldr	r3, [r3, #0]
 c0063ea:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0063ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0063ee:	e853 3f00 	ldrex	r3, [r3]
 c0063f2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c0063f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0063f6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c0063fa:	64fb      	str	r3, [r7, #76]	; 0x4c
 c0063fc:	687b      	ldr	r3, [r7, #4]
 c0063fe:	681b      	ldr	r3, [r3, #0]
 c006400:	461a      	mov	r2, r3
 c006402:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c006404:	643b      	str	r3, [r7, #64]	; 0x40
 c006406:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006408:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c00640a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c00640c:	e841 2300 	strex	r3, r2, [r1]
 c006410:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c006412:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c006414:	2b00      	cmp	r3, #0
 c006416:	d1e6      	bne.n	c0063e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c006418:	687b      	ldr	r3, [r7, #4]
 c00641a:	681b      	ldr	r3, [r3, #0]
 c00641c:	3308      	adds	r3, #8
 c00641e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006420:	6a3b      	ldr	r3, [r7, #32]
 c006422:	e853 3f00 	ldrex	r3, [r3]
 c006426:	61fb      	str	r3, [r7, #28]
   return(result);
 c006428:	69fb      	ldr	r3, [r7, #28]
 c00642a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00642e:	f023 0301 	bic.w	r3, r3, #1
 c006432:	64bb      	str	r3, [r7, #72]	; 0x48
 c006434:	687b      	ldr	r3, [r7, #4]
 c006436:	681b      	ldr	r3, [r3, #0]
 c006438:	3308      	adds	r3, #8
 c00643a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00643c:	62fa      	str	r2, [r7, #44]	; 0x2c
 c00643e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006440:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c006442:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c006444:	e841 2300 	strex	r3, r2, [r1]
 c006448:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c00644a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00644c:	2b00      	cmp	r3, #0
 c00644e:	d1e3      	bne.n	c006418 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c006450:	687b      	ldr	r3, [r7, #4]
 c006452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c006454:	2b01      	cmp	r3, #1
 c006456:	d118      	bne.n	c00648a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c006458:	687b      	ldr	r3, [r7, #4]
 c00645a:	681b      	ldr	r3, [r3, #0]
 c00645c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00645e:	68fb      	ldr	r3, [r7, #12]
 c006460:	e853 3f00 	ldrex	r3, [r3]
 c006464:	60bb      	str	r3, [r7, #8]
   return(result);
 c006466:	68bb      	ldr	r3, [r7, #8]
 c006468:	f023 0310 	bic.w	r3, r3, #16
 c00646c:	647b      	str	r3, [r7, #68]	; 0x44
 c00646e:	687b      	ldr	r3, [r7, #4]
 c006470:	681b      	ldr	r3, [r3, #0]
 c006472:	461a      	mov	r2, r3
 c006474:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c006476:	61bb      	str	r3, [r7, #24]
 c006478:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00647a:	6979      	ldr	r1, [r7, #20]
 c00647c:	69ba      	ldr	r2, [r7, #24]
 c00647e:	e841 2300 	strex	r3, r2, [r1]
 c006482:	613b      	str	r3, [r7, #16]
   return(result);
 c006484:	693b      	ldr	r3, [r7, #16]
 c006486:	2b00      	cmp	r3, #0
 c006488:	d1e6      	bne.n	c006458 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c00648a:	687b      	ldr	r3, [r7, #4]
 c00648c:	2220      	movs	r2, #32
 c00648e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c006492:	687b      	ldr	r3, [r7, #4]
 c006494:	2200      	movs	r2, #0
 c006496:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c006498:	687b      	ldr	r3, [r7, #4]
 c00649a:	2200      	movs	r2, #0
 c00649c:	675a      	str	r2, [r3, #116]	; 0x74
}
 c00649e:	bf00      	nop
 c0064a0:	3754      	adds	r7, #84	; 0x54
 c0064a2:	46bd      	mov	sp, r7
 c0064a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0064a8:	4770      	bx	lr

0c0064aa <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c0064aa:	b480      	push	{r7}
 c0064ac:	b085      	sub	sp, #20
 c0064ae:	af00      	add	r7, sp, #0
 c0064b0:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0064b2:	687b      	ldr	r3, [r7, #4]
 c0064b4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0064b8:	2b01      	cmp	r3, #1
 c0064ba:	d101      	bne.n	c0064c0 <HAL_UARTEx_DisableFifoMode+0x16>
 c0064bc:	2302      	movs	r3, #2
 c0064be:	e027      	b.n	c006510 <HAL_UARTEx_DisableFifoMode+0x66>
 c0064c0:	687b      	ldr	r3, [r7, #4]
 c0064c2:	2201      	movs	r2, #1
 c0064c4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0064c8:	687b      	ldr	r3, [r7, #4]
 c0064ca:	2224      	movs	r2, #36	; 0x24
 c0064cc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0064d0:	687b      	ldr	r3, [r7, #4]
 c0064d2:	681b      	ldr	r3, [r3, #0]
 c0064d4:	681b      	ldr	r3, [r3, #0]
 c0064d6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0064d8:	687b      	ldr	r3, [r7, #4]
 c0064da:	681b      	ldr	r3, [r3, #0]
 c0064dc:	681a      	ldr	r2, [r3, #0]
 c0064de:	687b      	ldr	r3, [r7, #4]
 c0064e0:	681b      	ldr	r3, [r3, #0]
 c0064e2:	f022 0201 	bic.w	r2, r2, #1
 c0064e6:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c0064e8:	68fb      	ldr	r3, [r7, #12]
 c0064ea:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c0064ee:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c0064f0:	687b      	ldr	r3, [r7, #4]
 c0064f2:	2200      	movs	r2, #0
 c0064f4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0064f6:	687b      	ldr	r3, [r7, #4]
 c0064f8:	681b      	ldr	r3, [r3, #0]
 c0064fa:	68fa      	ldr	r2, [r7, #12]
 c0064fc:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0064fe:	687b      	ldr	r3, [r7, #4]
 c006500:	2220      	movs	r2, #32
 c006502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006506:	687b      	ldr	r3, [r7, #4]
 c006508:	2200      	movs	r2, #0
 c00650a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00650e:	2300      	movs	r3, #0
}
 c006510:	4618      	mov	r0, r3
 c006512:	3714      	adds	r7, #20
 c006514:	46bd      	mov	sp, r7
 c006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00651a:	4770      	bx	lr

0c00651c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00651c:	b580      	push	{r7, lr}
 c00651e:	b084      	sub	sp, #16
 c006520:	af00      	add	r7, sp, #0
 c006522:	6078      	str	r0, [r7, #4]
 c006524:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006526:	687b      	ldr	r3, [r7, #4]
 c006528:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00652c:	2b01      	cmp	r3, #1
 c00652e:	d101      	bne.n	c006534 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c006530:	2302      	movs	r3, #2
 c006532:	e02d      	b.n	c006590 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c006534:	687b      	ldr	r3, [r7, #4]
 c006536:	2201      	movs	r2, #1
 c006538:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00653c:	687b      	ldr	r3, [r7, #4]
 c00653e:	2224      	movs	r2, #36	; 0x24
 c006540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006544:	687b      	ldr	r3, [r7, #4]
 c006546:	681b      	ldr	r3, [r3, #0]
 c006548:	681b      	ldr	r3, [r3, #0]
 c00654a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00654c:	687b      	ldr	r3, [r7, #4]
 c00654e:	681b      	ldr	r3, [r3, #0]
 c006550:	681a      	ldr	r2, [r3, #0]
 c006552:	687b      	ldr	r3, [r7, #4]
 c006554:	681b      	ldr	r3, [r3, #0]
 c006556:	f022 0201 	bic.w	r2, r2, #1
 c00655a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c00655c:	687b      	ldr	r3, [r7, #4]
 c00655e:	681b      	ldr	r3, [r3, #0]
 c006560:	689b      	ldr	r3, [r3, #8]
 c006562:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c006566:	687b      	ldr	r3, [r7, #4]
 c006568:	681b      	ldr	r3, [r3, #0]
 c00656a:	683a      	ldr	r2, [r7, #0]
 c00656c:	430a      	orrs	r2, r1
 c00656e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c006570:	6878      	ldr	r0, [r7, #4]
 c006572:	f000 f84f 	bl	c006614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006576:	687b      	ldr	r3, [r7, #4]
 c006578:	681b      	ldr	r3, [r3, #0]
 c00657a:	68fa      	ldr	r2, [r7, #12]
 c00657c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00657e:	687b      	ldr	r3, [r7, #4]
 c006580:	2220      	movs	r2, #32
 c006582:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006586:	687b      	ldr	r3, [r7, #4]
 c006588:	2200      	movs	r2, #0
 c00658a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00658e:	2300      	movs	r3, #0
}
 c006590:	4618      	mov	r0, r3
 c006592:	3710      	adds	r7, #16
 c006594:	46bd      	mov	sp, r7
 c006596:	bd80      	pop	{r7, pc}

0c006598 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c006598:	b580      	push	{r7, lr}
 c00659a:	b084      	sub	sp, #16
 c00659c:	af00      	add	r7, sp, #0
 c00659e:	6078      	str	r0, [r7, #4]
 c0065a0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0065a2:	687b      	ldr	r3, [r7, #4]
 c0065a4:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0065a8:	2b01      	cmp	r3, #1
 c0065aa:	d101      	bne.n	c0065b0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0065ac:	2302      	movs	r3, #2
 c0065ae:	e02d      	b.n	c00660c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0065b0:	687b      	ldr	r3, [r7, #4]
 c0065b2:	2201      	movs	r2, #1
 c0065b4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0065b8:	687b      	ldr	r3, [r7, #4]
 c0065ba:	2224      	movs	r2, #36	; 0x24
 c0065bc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0065c0:	687b      	ldr	r3, [r7, #4]
 c0065c2:	681b      	ldr	r3, [r3, #0]
 c0065c4:	681b      	ldr	r3, [r3, #0]
 c0065c6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0065c8:	687b      	ldr	r3, [r7, #4]
 c0065ca:	681b      	ldr	r3, [r3, #0]
 c0065cc:	681a      	ldr	r2, [r3, #0]
 c0065ce:	687b      	ldr	r3, [r7, #4]
 c0065d0:	681b      	ldr	r3, [r3, #0]
 c0065d2:	f022 0201 	bic.w	r2, r2, #1
 c0065d6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0065d8:	687b      	ldr	r3, [r7, #4]
 c0065da:	681b      	ldr	r3, [r3, #0]
 c0065dc:	689b      	ldr	r3, [r3, #8]
 c0065de:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c0065e2:	687b      	ldr	r3, [r7, #4]
 c0065e4:	681b      	ldr	r3, [r3, #0]
 c0065e6:	683a      	ldr	r2, [r7, #0]
 c0065e8:	430a      	orrs	r2, r1
 c0065ea:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0065ec:	6878      	ldr	r0, [r7, #4]
 c0065ee:	f000 f811 	bl	c006614 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0065f2:	687b      	ldr	r3, [r7, #4]
 c0065f4:	681b      	ldr	r3, [r3, #0]
 c0065f6:	68fa      	ldr	r2, [r7, #12]
 c0065f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0065fa:	687b      	ldr	r3, [r7, #4]
 c0065fc:	2220      	movs	r2, #32
 c0065fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006602:	687b      	ldr	r3, [r7, #4]
 c006604:	2200      	movs	r2, #0
 c006606:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00660a:	2300      	movs	r3, #0
}
 c00660c:	4618      	mov	r0, r3
 c00660e:	3710      	adds	r7, #16
 c006610:	46bd      	mov	sp, r7
 c006612:	bd80      	pop	{r7, pc}

0c006614 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c006614:	b480      	push	{r7}
 c006616:	b085      	sub	sp, #20
 c006618:	af00      	add	r7, sp, #0
 c00661a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c00661c:	687b      	ldr	r3, [r7, #4]
 c00661e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c006620:	2b00      	cmp	r3, #0
 c006622:	d108      	bne.n	c006636 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c006624:	687b      	ldr	r3, [r7, #4]
 c006626:	2201      	movs	r2, #1
 c006628:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c00662c:	687b      	ldr	r3, [r7, #4]
 c00662e:	2201      	movs	r2, #1
 c006630:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c006634:	e031      	b.n	c00669a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c006636:	2308      	movs	r3, #8
 c006638:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c00663a:	2308      	movs	r3, #8
 c00663c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c00663e:	687b      	ldr	r3, [r7, #4]
 c006640:	681b      	ldr	r3, [r3, #0]
 c006642:	689b      	ldr	r3, [r3, #8]
 c006644:	0e5b      	lsrs	r3, r3, #25
 c006646:	b2db      	uxtb	r3, r3
 c006648:	f003 0307 	and.w	r3, r3, #7
 c00664c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c00664e:	687b      	ldr	r3, [r7, #4]
 c006650:	681b      	ldr	r3, [r3, #0]
 c006652:	689b      	ldr	r3, [r3, #8]
 c006654:	0f5b      	lsrs	r3, r3, #29
 c006656:	b2db      	uxtb	r3, r3
 c006658:	f003 0307 	and.w	r3, r3, #7
 c00665c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c00665e:	7bbb      	ldrb	r3, [r7, #14]
 c006660:	7b3a      	ldrb	r2, [r7, #12]
 c006662:	4911      	ldr	r1, [pc, #68]	; (c0066a8 <UARTEx_SetNbDataToProcess+0x94>)
 c006664:	5c8a      	ldrb	r2, [r1, r2]
 c006666:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c00666a:	7b3a      	ldrb	r2, [r7, #12]
 c00666c:	490f      	ldr	r1, [pc, #60]	; (c0066ac <UARTEx_SetNbDataToProcess+0x98>)
 c00666e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006670:	fb93 f3f2 	sdiv	r3, r3, r2
 c006674:	b29a      	uxth	r2, r3
 c006676:	687b      	ldr	r3, [r7, #4]
 c006678:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c00667c:	7bfb      	ldrb	r3, [r7, #15]
 c00667e:	7b7a      	ldrb	r2, [r7, #13]
 c006680:	4909      	ldr	r1, [pc, #36]	; (c0066a8 <UARTEx_SetNbDataToProcess+0x94>)
 c006682:	5c8a      	ldrb	r2, [r1, r2]
 c006684:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c006688:	7b7a      	ldrb	r2, [r7, #13]
 c00668a:	4908      	ldr	r1, [pc, #32]	; (c0066ac <UARTEx_SetNbDataToProcess+0x98>)
 c00668c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c00668e:	fb93 f3f2 	sdiv	r3, r3, r2
 c006692:	b29a      	uxth	r2, r3
 c006694:	687b      	ldr	r3, [r7, #4]
 c006696:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c00669a:	bf00      	nop
 c00669c:	3714      	adds	r7, #20
 c00669e:	46bd      	mov	sp, r7
 c0066a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0066a4:	4770      	bx	lr
 c0066a6:	bf00      	nop
 c0066a8:	0c0081bc 	.word	0x0c0081bc
 c0066ac:	0c0081c4 	.word	0x0c0081c4

0c0066b0 <__errno>:
 c0066b0:	4b01      	ldr	r3, [pc, #4]	; (c0066b8 <__errno+0x8>)
 c0066b2:	6818      	ldr	r0, [r3, #0]
 c0066b4:	4770      	bx	lr
 c0066b6:	bf00      	nop
 c0066b8:	30000048 	.word	0x30000048

0c0066bc <__libc_init_array>:
 c0066bc:	b570      	push	{r4, r5, r6, lr}
 c0066be:	4d0d      	ldr	r5, [pc, #52]	; (c0066f4 <__libc_init_array+0x38>)
 c0066c0:	2600      	movs	r6, #0
 c0066c2:	4c0d      	ldr	r4, [pc, #52]	; (c0066f8 <__libc_init_array+0x3c>)
 c0066c4:	1b64      	subs	r4, r4, r5
 c0066c6:	10a4      	asrs	r4, r4, #2
 c0066c8:	42a6      	cmp	r6, r4
 c0066ca:	d109      	bne.n	c0066e0 <__libc_init_array+0x24>
 c0066cc:	4d0b      	ldr	r5, [pc, #44]	; (c0066fc <__libc_init_array+0x40>)
 c0066ce:	2600      	movs	r6, #0
 c0066d0:	4c0b      	ldr	r4, [pc, #44]	; (c006700 <__libc_init_array+0x44>)
 c0066d2:	f000 ffc9 	bl	c007668 <_init>
 c0066d6:	1b64      	subs	r4, r4, r5
 c0066d8:	10a4      	asrs	r4, r4, #2
 c0066da:	42a6      	cmp	r6, r4
 c0066dc:	d105      	bne.n	c0066ea <__libc_init_array+0x2e>
 c0066de:	bd70      	pop	{r4, r5, r6, pc}
 c0066e0:	f855 3b04 	ldr.w	r3, [r5], #4
 c0066e4:	3601      	adds	r6, #1
 c0066e6:	4798      	blx	r3
 c0066e8:	e7ee      	b.n	c0066c8 <__libc_init_array+0xc>
 c0066ea:	f855 3b04 	ldr.w	r3, [r5], #4
 c0066ee:	3601      	adds	r6, #1
 c0066f0:	4798      	blx	r3
 c0066f2:	e7f2      	b.n	c0066da <__libc_init_array+0x1e>
 c0066f4:	0c00826c 	.word	0x0c00826c
 c0066f8:	0c00826c 	.word	0x0c00826c
 c0066fc:	0c00826c 	.word	0x0c00826c
 c006700:	0c008270 	.word	0x0c008270

0c006704 <memcpy>:
 c006704:	440a      	add	r2, r1
 c006706:	1e43      	subs	r3, r0, #1
 c006708:	4291      	cmp	r1, r2
 c00670a:	d100      	bne.n	c00670e <memcpy+0xa>
 c00670c:	4770      	bx	lr
 c00670e:	b510      	push	{r4, lr}
 c006710:	f811 4b01 	ldrb.w	r4, [r1], #1
 c006714:	4291      	cmp	r1, r2
 c006716:	f803 4f01 	strb.w	r4, [r3, #1]!
 c00671a:	d1f9      	bne.n	c006710 <memcpy+0xc>
 c00671c:	bd10      	pop	{r4, pc}

0c00671e <memset>:
 c00671e:	4402      	add	r2, r0
 c006720:	4603      	mov	r3, r0
 c006722:	4293      	cmp	r3, r2
 c006724:	d100      	bne.n	c006728 <memset+0xa>
 c006726:	4770      	bx	lr
 c006728:	f803 1b01 	strb.w	r1, [r3], #1
 c00672c:	e7f9      	b.n	c006722 <memset+0x4>
	...

0c006730 <iprintf>:
 c006730:	b40f      	push	{r0, r1, r2, r3}
 c006732:	4b0a      	ldr	r3, [pc, #40]	; (c00675c <iprintf+0x2c>)
 c006734:	b513      	push	{r0, r1, r4, lr}
 c006736:	681c      	ldr	r4, [r3, #0]
 c006738:	b124      	cbz	r4, c006744 <iprintf+0x14>
 c00673a:	69a3      	ldr	r3, [r4, #24]
 c00673c:	b913      	cbnz	r3, c006744 <iprintf+0x14>
 c00673e:	4620      	mov	r0, r4
 c006740:	f000 f866 	bl	c006810 <__sinit>
 c006744:	ab05      	add	r3, sp, #20
 c006746:	9a04      	ldr	r2, [sp, #16]
 c006748:	68a1      	ldr	r1, [r4, #8]
 c00674a:	4620      	mov	r0, r4
 c00674c:	9301      	str	r3, [sp, #4]
 c00674e:	f000 f9bd 	bl	c006acc <_vfiprintf_r>
 c006752:	b002      	add	sp, #8
 c006754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c006758:	b004      	add	sp, #16
 c00675a:	4770      	bx	lr
 c00675c:	30000048 	.word	0x30000048

0c006760 <std>:
 c006760:	2300      	movs	r3, #0
 c006762:	b510      	push	{r4, lr}
 c006764:	4604      	mov	r4, r0
 c006766:	6083      	str	r3, [r0, #8]
 c006768:	8181      	strh	r1, [r0, #12]
 c00676a:	4619      	mov	r1, r3
 c00676c:	6643      	str	r3, [r0, #100]	; 0x64
 c00676e:	81c2      	strh	r2, [r0, #14]
 c006770:	2208      	movs	r2, #8
 c006772:	6183      	str	r3, [r0, #24]
 c006774:	e9c0 3300 	strd	r3, r3, [r0]
 c006778:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c00677c:	305c      	adds	r0, #92	; 0x5c
 c00677e:	f7ff ffce 	bl	c00671e <memset>
 c006782:	4b05      	ldr	r3, [pc, #20]	; (c006798 <std+0x38>)
 c006784:	6224      	str	r4, [r4, #32]
 c006786:	6263      	str	r3, [r4, #36]	; 0x24
 c006788:	4b04      	ldr	r3, [pc, #16]	; (c00679c <std+0x3c>)
 c00678a:	62a3      	str	r3, [r4, #40]	; 0x28
 c00678c:	4b04      	ldr	r3, [pc, #16]	; (c0067a0 <std+0x40>)
 c00678e:	62e3      	str	r3, [r4, #44]	; 0x2c
 c006790:	4b04      	ldr	r3, [pc, #16]	; (c0067a4 <std+0x44>)
 c006792:	6323      	str	r3, [r4, #48]	; 0x30
 c006794:	bd10      	pop	{r4, pc}
 c006796:	bf00      	nop
 c006798:	0c007079 	.word	0x0c007079
 c00679c:	0c00709b 	.word	0x0c00709b
 c0067a0:	0c0070d3 	.word	0x0c0070d3
 c0067a4:	0c0070f7 	.word	0x0c0070f7

0c0067a8 <_cleanup_r>:
 c0067a8:	4901      	ldr	r1, [pc, #4]	; (c0067b0 <_cleanup_r+0x8>)
 c0067aa:	f000 b8af 	b.w	c00690c <_fwalk_reent>
 c0067ae:	bf00      	nop
 c0067b0:	0c0073cd 	.word	0x0c0073cd

0c0067b4 <__sfmoreglue>:
 c0067b4:	b570      	push	{r4, r5, r6, lr}
 c0067b6:	2268      	movs	r2, #104	; 0x68
 c0067b8:	1e4d      	subs	r5, r1, #1
 c0067ba:	460e      	mov	r6, r1
 c0067bc:	4355      	muls	r5, r2
 c0067be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0067c2:	f000 f8e5 	bl	c006990 <_malloc_r>
 c0067c6:	4604      	mov	r4, r0
 c0067c8:	b140      	cbz	r0, c0067dc <__sfmoreglue+0x28>
 c0067ca:	2100      	movs	r1, #0
 c0067cc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c0067d0:	e9c0 1600 	strd	r1, r6, [r0]
 c0067d4:	300c      	adds	r0, #12
 c0067d6:	60a0      	str	r0, [r4, #8]
 c0067d8:	f7ff ffa1 	bl	c00671e <memset>
 c0067dc:	4620      	mov	r0, r4
 c0067de:	bd70      	pop	{r4, r5, r6, pc}

0c0067e0 <__sfp_lock_acquire>:
 c0067e0:	4801      	ldr	r0, [pc, #4]	; (c0067e8 <__sfp_lock_acquire+0x8>)
 c0067e2:	f000 b8b3 	b.w	c00694c <__retarget_lock_acquire_recursive>
 c0067e6:	bf00      	nop
 c0067e8:	30000b2d 	.word	0x30000b2d

0c0067ec <__sfp_lock_release>:
 c0067ec:	4801      	ldr	r0, [pc, #4]	; (c0067f4 <__sfp_lock_release+0x8>)
 c0067ee:	f000 b8ae 	b.w	c00694e <__retarget_lock_release_recursive>
 c0067f2:	bf00      	nop
 c0067f4:	30000b2d 	.word	0x30000b2d

0c0067f8 <__sinit_lock_acquire>:
 c0067f8:	4801      	ldr	r0, [pc, #4]	; (c006800 <__sinit_lock_acquire+0x8>)
 c0067fa:	f000 b8a7 	b.w	c00694c <__retarget_lock_acquire_recursive>
 c0067fe:	bf00      	nop
 c006800:	30000b2e 	.word	0x30000b2e

0c006804 <__sinit_lock_release>:
 c006804:	4801      	ldr	r0, [pc, #4]	; (c00680c <__sinit_lock_release+0x8>)
 c006806:	f000 b8a2 	b.w	c00694e <__retarget_lock_release_recursive>
 c00680a:	bf00      	nop
 c00680c:	30000b2e 	.word	0x30000b2e

0c006810 <__sinit>:
 c006810:	b510      	push	{r4, lr}
 c006812:	4604      	mov	r4, r0
 c006814:	f7ff fff0 	bl	c0067f8 <__sinit_lock_acquire>
 c006818:	69a3      	ldr	r3, [r4, #24]
 c00681a:	b11b      	cbz	r3, c006824 <__sinit+0x14>
 c00681c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c006820:	f7ff bff0 	b.w	c006804 <__sinit_lock_release>
 c006824:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c006828:	6523      	str	r3, [r4, #80]	; 0x50
 c00682a:	4620      	mov	r0, r4
 c00682c:	4b12      	ldr	r3, [pc, #72]	; (c006878 <__sinit+0x68>)
 c00682e:	4a13      	ldr	r2, [pc, #76]	; (c00687c <__sinit+0x6c>)
 c006830:	681b      	ldr	r3, [r3, #0]
 c006832:	62a2      	str	r2, [r4, #40]	; 0x28
 c006834:	42a3      	cmp	r3, r4
 c006836:	bf04      	itt	eq
 c006838:	2301      	moveq	r3, #1
 c00683a:	61a3      	streq	r3, [r4, #24]
 c00683c:	f000 f820 	bl	c006880 <__sfp>
 c006840:	6060      	str	r0, [r4, #4]
 c006842:	4620      	mov	r0, r4
 c006844:	f000 f81c 	bl	c006880 <__sfp>
 c006848:	60a0      	str	r0, [r4, #8]
 c00684a:	4620      	mov	r0, r4
 c00684c:	f000 f818 	bl	c006880 <__sfp>
 c006850:	2200      	movs	r2, #0
 c006852:	2104      	movs	r1, #4
 c006854:	60e0      	str	r0, [r4, #12]
 c006856:	6860      	ldr	r0, [r4, #4]
 c006858:	f7ff ff82 	bl	c006760 <std>
 c00685c:	2201      	movs	r2, #1
 c00685e:	2109      	movs	r1, #9
 c006860:	68a0      	ldr	r0, [r4, #8]
 c006862:	f7ff ff7d 	bl	c006760 <std>
 c006866:	2202      	movs	r2, #2
 c006868:	2112      	movs	r1, #18
 c00686a:	68e0      	ldr	r0, [r4, #12]
 c00686c:	f7ff ff78 	bl	c006760 <std>
 c006870:	2301      	movs	r3, #1
 c006872:	61a3      	str	r3, [r4, #24]
 c006874:	e7d2      	b.n	c00681c <__sinit+0xc>
 c006876:	bf00      	nop
 c006878:	0c0081cc 	.word	0x0c0081cc
 c00687c:	0c0067a9 	.word	0x0c0067a9

0c006880 <__sfp>:
 c006880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006882:	4607      	mov	r7, r0
 c006884:	f7ff ffac 	bl	c0067e0 <__sfp_lock_acquire>
 c006888:	4b1e      	ldr	r3, [pc, #120]	; (c006904 <__sfp+0x84>)
 c00688a:	681e      	ldr	r6, [r3, #0]
 c00688c:	69b3      	ldr	r3, [r6, #24]
 c00688e:	b913      	cbnz	r3, c006896 <__sfp+0x16>
 c006890:	4630      	mov	r0, r6
 c006892:	f7ff ffbd 	bl	c006810 <__sinit>
 c006896:	3648      	adds	r6, #72	; 0x48
 c006898:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c00689c:	3b01      	subs	r3, #1
 c00689e:	d503      	bpl.n	c0068a8 <__sfp+0x28>
 c0068a0:	6833      	ldr	r3, [r6, #0]
 c0068a2:	b30b      	cbz	r3, c0068e8 <__sfp+0x68>
 c0068a4:	6836      	ldr	r6, [r6, #0]
 c0068a6:	e7f7      	b.n	c006898 <__sfp+0x18>
 c0068a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c0068ac:	b9d5      	cbnz	r5, c0068e4 <__sfp+0x64>
 c0068ae:	4b16      	ldr	r3, [pc, #88]	; (c006908 <__sfp+0x88>)
 c0068b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0068b4:	6665      	str	r5, [r4, #100]	; 0x64
 c0068b6:	60e3      	str	r3, [r4, #12]
 c0068b8:	f000 f847 	bl	c00694a <__retarget_lock_init_recursive>
 c0068bc:	f7ff ff96 	bl	c0067ec <__sfp_lock_release>
 c0068c0:	2208      	movs	r2, #8
 c0068c2:	4629      	mov	r1, r5
 c0068c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0068c8:	6025      	str	r5, [r4, #0]
 c0068ca:	61a5      	str	r5, [r4, #24]
 c0068cc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c0068d0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c0068d4:	f7ff ff23 	bl	c00671e <memset>
 c0068d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c0068dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c0068e0:	4620      	mov	r0, r4
 c0068e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0068e4:	3468      	adds	r4, #104	; 0x68
 c0068e6:	e7d9      	b.n	c00689c <__sfp+0x1c>
 c0068e8:	2104      	movs	r1, #4
 c0068ea:	4638      	mov	r0, r7
 c0068ec:	f7ff ff62 	bl	c0067b4 <__sfmoreglue>
 c0068f0:	4604      	mov	r4, r0
 c0068f2:	6030      	str	r0, [r6, #0]
 c0068f4:	2800      	cmp	r0, #0
 c0068f6:	d1d5      	bne.n	c0068a4 <__sfp+0x24>
 c0068f8:	f7ff ff78 	bl	c0067ec <__sfp_lock_release>
 c0068fc:	230c      	movs	r3, #12
 c0068fe:	603b      	str	r3, [r7, #0]
 c006900:	e7ee      	b.n	c0068e0 <__sfp+0x60>
 c006902:	bf00      	nop
 c006904:	0c0081cc 	.word	0x0c0081cc
 c006908:	ffff0001 	.word	0xffff0001

0c00690c <_fwalk_reent>:
 c00690c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c006910:	4606      	mov	r6, r0
 c006912:	4688      	mov	r8, r1
 c006914:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c006918:	2700      	movs	r7, #0
 c00691a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c00691e:	f1b9 0901 	subs.w	r9, r9, #1
 c006922:	d505      	bpl.n	c006930 <_fwalk_reent+0x24>
 c006924:	6824      	ldr	r4, [r4, #0]
 c006926:	2c00      	cmp	r4, #0
 c006928:	d1f7      	bne.n	c00691a <_fwalk_reent+0xe>
 c00692a:	4638      	mov	r0, r7
 c00692c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c006930:	89ab      	ldrh	r3, [r5, #12]
 c006932:	2b01      	cmp	r3, #1
 c006934:	d907      	bls.n	c006946 <_fwalk_reent+0x3a>
 c006936:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c00693a:	3301      	adds	r3, #1
 c00693c:	d003      	beq.n	c006946 <_fwalk_reent+0x3a>
 c00693e:	4629      	mov	r1, r5
 c006940:	4630      	mov	r0, r6
 c006942:	47c0      	blx	r8
 c006944:	4307      	orrs	r7, r0
 c006946:	3568      	adds	r5, #104	; 0x68
 c006948:	e7e9      	b.n	c00691e <_fwalk_reent+0x12>

0c00694a <__retarget_lock_init_recursive>:
 c00694a:	4770      	bx	lr

0c00694c <__retarget_lock_acquire_recursive>:
 c00694c:	4770      	bx	lr

0c00694e <__retarget_lock_release_recursive>:
 c00694e:	4770      	bx	lr

0c006950 <sbrk_aligned>:
 c006950:	b570      	push	{r4, r5, r6, lr}
 c006952:	4e0e      	ldr	r6, [pc, #56]	; (c00698c <sbrk_aligned+0x3c>)
 c006954:	460c      	mov	r4, r1
 c006956:	4605      	mov	r5, r0
 c006958:	6831      	ldr	r1, [r6, #0]
 c00695a:	b911      	cbnz	r1, c006962 <sbrk_aligned+0x12>
 c00695c:	f000 fb7c 	bl	c007058 <_sbrk_r>
 c006960:	6030      	str	r0, [r6, #0]
 c006962:	4621      	mov	r1, r4
 c006964:	4628      	mov	r0, r5
 c006966:	f000 fb77 	bl	c007058 <_sbrk_r>
 c00696a:	1c43      	adds	r3, r0, #1
 c00696c:	d00a      	beq.n	c006984 <sbrk_aligned+0x34>
 c00696e:	1cc4      	adds	r4, r0, #3
 c006970:	f024 0403 	bic.w	r4, r4, #3
 c006974:	42a0      	cmp	r0, r4
 c006976:	d007      	beq.n	c006988 <sbrk_aligned+0x38>
 c006978:	1a21      	subs	r1, r4, r0
 c00697a:	4628      	mov	r0, r5
 c00697c:	f000 fb6c 	bl	c007058 <_sbrk_r>
 c006980:	3001      	adds	r0, #1
 c006982:	d101      	bne.n	c006988 <sbrk_aligned+0x38>
 c006984:	f04f 34ff 	mov.w	r4, #4294967295
 c006988:	4620      	mov	r0, r4
 c00698a:	bd70      	pop	{r4, r5, r6, pc}
 c00698c:	30000b34 	.word	0x30000b34

0c006990 <_malloc_r>:
 c006990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c006994:	1ccd      	adds	r5, r1, #3
 c006996:	4607      	mov	r7, r0
 c006998:	f025 0503 	bic.w	r5, r5, #3
 c00699c:	3508      	adds	r5, #8
 c00699e:	2d0c      	cmp	r5, #12
 c0069a0:	bf38      	it	cc
 c0069a2:	250c      	movcc	r5, #12
 c0069a4:	2d00      	cmp	r5, #0
 c0069a6:	db01      	blt.n	c0069ac <_malloc_r+0x1c>
 c0069a8:	42a9      	cmp	r1, r5
 c0069aa:	d905      	bls.n	c0069b8 <_malloc_r+0x28>
 c0069ac:	230c      	movs	r3, #12
 c0069ae:	2600      	movs	r6, #0
 c0069b0:	603b      	str	r3, [r7, #0]
 c0069b2:	4630      	mov	r0, r6
 c0069b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0069b8:	4e2e      	ldr	r6, [pc, #184]	; (c006a74 <_malloc_r+0xe4>)
 c0069ba:	f000 fdc9 	bl	c007550 <__malloc_lock>
 c0069be:	6833      	ldr	r3, [r6, #0]
 c0069c0:	461c      	mov	r4, r3
 c0069c2:	bb34      	cbnz	r4, c006a12 <_malloc_r+0x82>
 c0069c4:	4629      	mov	r1, r5
 c0069c6:	4638      	mov	r0, r7
 c0069c8:	f7ff ffc2 	bl	c006950 <sbrk_aligned>
 c0069cc:	1c43      	adds	r3, r0, #1
 c0069ce:	4604      	mov	r4, r0
 c0069d0:	d14d      	bne.n	c006a6e <_malloc_r+0xde>
 c0069d2:	6834      	ldr	r4, [r6, #0]
 c0069d4:	4626      	mov	r6, r4
 c0069d6:	2e00      	cmp	r6, #0
 c0069d8:	d140      	bne.n	c006a5c <_malloc_r+0xcc>
 c0069da:	6823      	ldr	r3, [r4, #0]
 c0069dc:	4631      	mov	r1, r6
 c0069de:	4638      	mov	r0, r7
 c0069e0:	eb04 0803 	add.w	r8, r4, r3
 c0069e4:	f000 fb38 	bl	c007058 <_sbrk_r>
 c0069e8:	4580      	cmp	r8, r0
 c0069ea:	d13a      	bne.n	c006a62 <_malloc_r+0xd2>
 c0069ec:	6821      	ldr	r1, [r4, #0]
 c0069ee:	3503      	adds	r5, #3
 c0069f0:	4638      	mov	r0, r7
 c0069f2:	1a6d      	subs	r5, r5, r1
 c0069f4:	f025 0503 	bic.w	r5, r5, #3
 c0069f8:	3508      	adds	r5, #8
 c0069fa:	2d0c      	cmp	r5, #12
 c0069fc:	bf38      	it	cc
 c0069fe:	250c      	movcc	r5, #12
 c006a00:	4629      	mov	r1, r5
 c006a02:	f7ff ffa5 	bl	c006950 <sbrk_aligned>
 c006a06:	3001      	adds	r0, #1
 c006a08:	d02b      	beq.n	c006a62 <_malloc_r+0xd2>
 c006a0a:	6823      	ldr	r3, [r4, #0]
 c006a0c:	442b      	add	r3, r5
 c006a0e:	6023      	str	r3, [r4, #0]
 c006a10:	e00e      	b.n	c006a30 <_malloc_r+0xa0>
 c006a12:	6822      	ldr	r2, [r4, #0]
 c006a14:	1b52      	subs	r2, r2, r5
 c006a16:	d41e      	bmi.n	c006a56 <_malloc_r+0xc6>
 c006a18:	2a0b      	cmp	r2, #11
 c006a1a:	d916      	bls.n	c006a4a <_malloc_r+0xba>
 c006a1c:	1961      	adds	r1, r4, r5
 c006a1e:	42a3      	cmp	r3, r4
 c006a20:	6025      	str	r5, [r4, #0]
 c006a22:	bf18      	it	ne
 c006a24:	6059      	strne	r1, [r3, #4]
 c006a26:	6863      	ldr	r3, [r4, #4]
 c006a28:	bf08      	it	eq
 c006a2a:	6031      	streq	r1, [r6, #0]
 c006a2c:	5162      	str	r2, [r4, r5]
 c006a2e:	604b      	str	r3, [r1, #4]
 c006a30:	f104 060b 	add.w	r6, r4, #11
 c006a34:	4638      	mov	r0, r7
 c006a36:	f000 fd91 	bl	c00755c <__malloc_unlock>
 c006a3a:	1d23      	adds	r3, r4, #4
 c006a3c:	f026 0607 	bic.w	r6, r6, #7
 c006a40:	1af2      	subs	r2, r6, r3
 c006a42:	d0b6      	beq.n	c0069b2 <_malloc_r+0x22>
 c006a44:	1b9b      	subs	r3, r3, r6
 c006a46:	50a3      	str	r3, [r4, r2]
 c006a48:	e7b3      	b.n	c0069b2 <_malloc_r+0x22>
 c006a4a:	6862      	ldr	r2, [r4, #4]
 c006a4c:	42a3      	cmp	r3, r4
 c006a4e:	bf0c      	ite	eq
 c006a50:	6032      	streq	r2, [r6, #0]
 c006a52:	605a      	strne	r2, [r3, #4]
 c006a54:	e7ec      	b.n	c006a30 <_malloc_r+0xa0>
 c006a56:	4623      	mov	r3, r4
 c006a58:	6864      	ldr	r4, [r4, #4]
 c006a5a:	e7b2      	b.n	c0069c2 <_malloc_r+0x32>
 c006a5c:	4634      	mov	r4, r6
 c006a5e:	6876      	ldr	r6, [r6, #4]
 c006a60:	e7b9      	b.n	c0069d6 <_malloc_r+0x46>
 c006a62:	230c      	movs	r3, #12
 c006a64:	4638      	mov	r0, r7
 c006a66:	603b      	str	r3, [r7, #0]
 c006a68:	f000 fd78 	bl	c00755c <__malloc_unlock>
 c006a6c:	e7a1      	b.n	c0069b2 <_malloc_r+0x22>
 c006a6e:	6025      	str	r5, [r4, #0]
 c006a70:	e7de      	b.n	c006a30 <_malloc_r+0xa0>
 c006a72:	bf00      	nop
 c006a74:	30000b30 	.word	0x30000b30

0c006a78 <__sfputc_r>:
 c006a78:	6893      	ldr	r3, [r2, #8]
 c006a7a:	3b01      	subs	r3, #1
 c006a7c:	2b00      	cmp	r3, #0
 c006a7e:	6093      	str	r3, [r2, #8]
 c006a80:	b410      	push	{r4}
 c006a82:	da08      	bge.n	c006a96 <__sfputc_r+0x1e>
 c006a84:	6994      	ldr	r4, [r2, #24]
 c006a86:	42a3      	cmp	r3, r4
 c006a88:	db01      	blt.n	c006a8e <__sfputc_r+0x16>
 c006a8a:	290a      	cmp	r1, #10
 c006a8c:	d103      	bne.n	c006a96 <__sfputc_r+0x1e>
 c006a8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 c006a92:	f000 bb35 	b.w	c007100 <__swbuf_r>
 c006a96:	6813      	ldr	r3, [r2, #0]
 c006a98:	1c58      	adds	r0, r3, #1
 c006a9a:	6010      	str	r0, [r2, #0]
 c006a9c:	4608      	mov	r0, r1
 c006a9e:	7019      	strb	r1, [r3, #0]
 c006aa0:	f85d 4b04 	ldr.w	r4, [sp], #4
 c006aa4:	4770      	bx	lr

0c006aa6 <__sfputs_r>:
 c006aa6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006aa8:	4606      	mov	r6, r0
 c006aaa:	460f      	mov	r7, r1
 c006aac:	4614      	mov	r4, r2
 c006aae:	18d5      	adds	r5, r2, r3
 c006ab0:	42ac      	cmp	r4, r5
 c006ab2:	d101      	bne.n	c006ab8 <__sfputs_r+0x12>
 c006ab4:	2000      	movs	r0, #0
 c006ab6:	e007      	b.n	c006ac8 <__sfputs_r+0x22>
 c006ab8:	463a      	mov	r2, r7
 c006aba:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006abe:	4630      	mov	r0, r6
 c006ac0:	f7ff ffda 	bl	c006a78 <__sfputc_r>
 c006ac4:	1c43      	adds	r3, r0, #1
 c006ac6:	d1f3      	bne.n	c006ab0 <__sfputs_r+0xa>
 c006ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c006acc <_vfiprintf_r>:
 c006acc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c006ad0:	460d      	mov	r5, r1
 c006ad2:	b09d      	sub	sp, #116	; 0x74
 c006ad4:	4614      	mov	r4, r2
 c006ad6:	4698      	mov	r8, r3
 c006ad8:	4606      	mov	r6, r0
 c006ada:	b118      	cbz	r0, c006ae4 <_vfiprintf_r+0x18>
 c006adc:	6983      	ldr	r3, [r0, #24]
 c006ade:	b90b      	cbnz	r3, c006ae4 <_vfiprintf_r+0x18>
 c006ae0:	f7ff fe96 	bl	c006810 <__sinit>
 c006ae4:	4b89      	ldr	r3, [pc, #548]	; (c006d0c <_vfiprintf_r+0x240>)
 c006ae6:	429d      	cmp	r5, r3
 c006ae8:	d11b      	bne.n	c006b22 <_vfiprintf_r+0x56>
 c006aea:	6875      	ldr	r5, [r6, #4]
 c006aec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006aee:	07d9      	lsls	r1, r3, #31
 c006af0:	d405      	bmi.n	c006afe <_vfiprintf_r+0x32>
 c006af2:	89ab      	ldrh	r3, [r5, #12]
 c006af4:	059a      	lsls	r2, r3, #22
 c006af6:	d402      	bmi.n	c006afe <_vfiprintf_r+0x32>
 c006af8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006afa:	f7ff ff27 	bl	c00694c <__retarget_lock_acquire_recursive>
 c006afe:	89ab      	ldrh	r3, [r5, #12]
 c006b00:	071b      	lsls	r3, r3, #28
 c006b02:	d501      	bpl.n	c006b08 <_vfiprintf_r+0x3c>
 c006b04:	692b      	ldr	r3, [r5, #16]
 c006b06:	b9eb      	cbnz	r3, c006b44 <_vfiprintf_r+0x78>
 c006b08:	4629      	mov	r1, r5
 c006b0a:	4630      	mov	r0, r6
 c006b0c:	f000 fb5c 	bl	c0071c8 <__swsetup_r>
 c006b10:	b1c0      	cbz	r0, c006b44 <_vfiprintf_r+0x78>
 c006b12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006b14:	07dc      	lsls	r4, r3, #31
 c006b16:	d50e      	bpl.n	c006b36 <_vfiprintf_r+0x6a>
 c006b18:	f04f 30ff 	mov.w	r0, #4294967295
 c006b1c:	b01d      	add	sp, #116	; 0x74
 c006b1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c006b22:	4b7b      	ldr	r3, [pc, #492]	; (c006d10 <_vfiprintf_r+0x244>)
 c006b24:	429d      	cmp	r5, r3
 c006b26:	d101      	bne.n	c006b2c <_vfiprintf_r+0x60>
 c006b28:	68b5      	ldr	r5, [r6, #8]
 c006b2a:	e7df      	b.n	c006aec <_vfiprintf_r+0x20>
 c006b2c:	4b79      	ldr	r3, [pc, #484]	; (c006d14 <_vfiprintf_r+0x248>)
 c006b2e:	429d      	cmp	r5, r3
 c006b30:	bf08      	it	eq
 c006b32:	68f5      	ldreq	r5, [r6, #12]
 c006b34:	e7da      	b.n	c006aec <_vfiprintf_r+0x20>
 c006b36:	89ab      	ldrh	r3, [r5, #12]
 c006b38:	0598      	lsls	r0, r3, #22
 c006b3a:	d4ed      	bmi.n	c006b18 <_vfiprintf_r+0x4c>
 c006b3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006b3e:	f7ff ff06 	bl	c00694e <__retarget_lock_release_recursive>
 c006b42:	e7e9      	b.n	c006b18 <_vfiprintf_r+0x4c>
 c006b44:	2300      	movs	r3, #0
 c006b46:	f8cd 800c 	str.w	r8, [sp, #12]
 c006b4a:	f04f 0901 	mov.w	r9, #1
 c006b4e:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c006d18 <_vfiprintf_r+0x24c>
 c006b52:	9309      	str	r3, [sp, #36]	; 0x24
 c006b54:	2320      	movs	r3, #32
 c006b56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c006b5a:	2330      	movs	r3, #48	; 0x30
 c006b5c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c006b60:	4623      	mov	r3, r4
 c006b62:	469a      	mov	sl, r3
 c006b64:	f813 2b01 	ldrb.w	r2, [r3], #1
 c006b68:	b10a      	cbz	r2, c006b6e <_vfiprintf_r+0xa2>
 c006b6a:	2a25      	cmp	r2, #37	; 0x25
 c006b6c:	d1f9      	bne.n	c006b62 <_vfiprintf_r+0x96>
 c006b6e:	ebba 0b04 	subs.w	fp, sl, r4
 c006b72:	d00b      	beq.n	c006b8c <_vfiprintf_r+0xc0>
 c006b74:	465b      	mov	r3, fp
 c006b76:	4622      	mov	r2, r4
 c006b78:	4629      	mov	r1, r5
 c006b7a:	4630      	mov	r0, r6
 c006b7c:	f7ff ff93 	bl	c006aa6 <__sfputs_r>
 c006b80:	3001      	adds	r0, #1
 c006b82:	f000 80aa 	beq.w	c006cda <_vfiprintf_r+0x20e>
 c006b86:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c006b88:	445a      	add	r2, fp
 c006b8a:	9209      	str	r2, [sp, #36]	; 0x24
 c006b8c:	f89a 3000 	ldrb.w	r3, [sl]
 c006b90:	2b00      	cmp	r3, #0
 c006b92:	f000 80a2 	beq.w	c006cda <_vfiprintf_r+0x20e>
 c006b96:	2300      	movs	r3, #0
 c006b98:	f04f 32ff 	mov.w	r2, #4294967295
 c006b9c:	f10a 0a01 	add.w	sl, sl, #1
 c006ba0:	9304      	str	r3, [sp, #16]
 c006ba2:	9307      	str	r3, [sp, #28]
 c006ba4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c006ba8:	931a      	str	r3, [sp, #104]	; 0x68
 c006baa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c006bae:	4654      	mov	r4, sl
 c006bb0:	2205      	movs	r2, #5
 c006bb2:	4859      	ldr	r0, [pc, #356]	; (c006d18 <_vfiprintf_r+0x24c>)
 c006bb4:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006bb8:	f000 fcbc 	bl	c007534 <memchr>
 c006bbc:	9a04      	ldr	r2, [sp, #16]
 c006bbe:	b9d8      	cbnz	r0, c006bf8 <_vfiprintf_r+0x12c>
 c006bc0:	06d1      	lsls	r1, r2, #27
 c006bc2:	bf44      	itt	mi
 c006bc4:	2320      	movmi	r3, #32
 c006bc6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006bca:	0713      	lsls	r3, r2, #28
 c006bcc:	bf44      	itt	mi
 c006bce:	232b      	movmi	r3, #43	; 0x2b
 c006bd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006bd4:	f89a 3000 	ldrb.w	r3, [sl]
 c006bd8:	2b2a      	cmp	r3, #42	; 0x2a
 c006bda:	d015      	beq.n	c006c08 <_vfiprintf_r+0x13c>
 c006bdc:	9a07      	ldr	r2, [sp, #28]
 c006bde:	4654      	mov	r4, sl
 c006be0:	2000      	movs	r0, #0
 c006be2:	f04f 0c0a 	mov.w	ip, #10
 c006be6:	4621      	mov	r1, r4
 c006be8:	f811 3b01 	ldrb.w	r3, [r1], #1
 c006bec:	3b30      	subs	r3, #48	; 0x30
 c006bee:	2b09      	cmp	r3, #9
 c006bf0:	d94e      	bls.n	c006c90 <_vfiprintf_r+0x1c4>
 c006bf2:	b1b0      	cbz	r0, c006c22 <_vfiprintf_r+0x156>
 c006bf4:	9207      	str	r2, [sp, #28]
 c006bf6:	e014      	b.n	c006c22 <_vfiprintf_r+0x156>
 c006bf8:	eba0 0308 	sub.w	r3, r0, r8
 c006bfc:	46a2      	mov	sl, r4
 c006bfe:	fa09 f303 	lsl.w	r3, r9, r3
 c006c02:	4313      	orrs	r3, r2
 c006c04:	9304      	str	r3, [sp, #16]
 c006c06:	e7d2      	b.n	c006bae <_vfiprintf_r+0xe2>
 c006c08:	9b03      	ldr	r3, [sp, #12]
 c006c0a:	1d19      	adds	r1, r3, #4
 c006c0c:	681b      	ldr	r3, [r3, #0]
 c006c0e:	2b00      	cmp	r3, #0
 c006c10:	9103      	str	r1, [sp, #12]
 c006c12:	bfbb      	ittet	lt
 c006c14:	425b      	neglt	r3, r3
 c006c16:	f042 0202 	orrlt.w	r2, r2, #2
 c006c1a:	9307      	strge	r3, [sp, #28]
 c006c1c:	9307      	strlt	r3, [sp, #28]
 c006c1e:	bfb8      	it	lt
 c006c20:	9204      	strlt	r2, [sp, #16]
 c006c22:	7823      	ldrb	r3, [r4, #0]
 c006c24:	2b2e      	cmp	r3, #46	; 0x2e
 c006c26:	d10c      	bne.n	c006c42 <_vfiprintf_r+0x176>
 c006c28:	7863      	ldrb	r3, [r4, #1]
 c006c2a:	2b2a      	cmp	r3, #42	; 0x2a
 c006c2c:	d135      	bne.n	c006c9a <_vfiprintf_r+0x1ce>
 c006c2e:	9b03      	ldr	r3, [sp, #12]
 c006c30:	3402      	adds	r4, #2
 c006c32:	1d1a      	adds	r2, r3, #4
 c006c34:	681b      	ldr	r3, [r3, #0]
 c006c36:	2b00      	cmp	r3, #0
 c006c38:	9203      	str	r2, [sp, #12]
 c006c3a:	bfb8      	it	lt
 c006c3c:	f04f 33ff 	movlt.w	r3, #4294967295
 c006c40:	9305      	str	r3, [sp, #20]
 c006c42:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c006d28 <_vfiprintf_r+0x25c>
 c006c46:	2203      	movs	r2, #3
 c006c48:	7821      	ldrb	r1, [r4, #0]
 c006c4a:	4650      	mov	r0, sl
 c006c4c:	f000 fc72 	bl	c007534 <memchr>
 c006c50:	b140      	cbz	r0, c006c64 <_vfiprintf_r+0x198>
 c006c52:	2340      	movs	r3, #64	; 0x40
 c006c54:	eba0 000a 	sub.w	r0, r0, sl
 c006c58:	3401      	adds	r4, #1
 c006c5a:	fa03 f000 	lsl.w	r0, r3, r0
 c006c5e:	9b04      	ldr	r3, [sp, #16]
 c006c60:	4303      	orrs	r3, r0
 c006c62:	9304      	str	r3, [sp, #16]
 c006c64:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006c68:	2206      	movs	r2, #6
 c006c6a:	482c      	ldr	r0, [pc, #176]	; (c006d1c <_vfiprintf_r+0x250>)
 c006c6c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c006c70:	f000 fc60 	bl	c007534 <memchr>
 c006c74:	2800      	cmp	r0, #0
 c006c76:	d03f      	beq.n	c006cf8 <_vfiprintf_r+0x22c>
 c006c78:	4b29      	ldr	r3, [pc, #164]	; (c006d20 <_vfiprintf_r+0x254>)
 c006c7a:	bb1b      	cbnz	r3, c006cc4 <_vfiprintf_r+0x1f8>
 c006c7c:	9b03      	ldr	r3, [sp, #12]
 c006c7e:	3307      	adds	r3, #7
 c006c80:	f023 0307 	bic.w	r3, r3, #7
 c006c84:	3308      	adds	r3, #8
 c006c86:	9303      	str	r3, [sp, #12]
 c006c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c006c8a:	443b      	add	r3, r7
 c006c8c:	9309      	str	r3, [sp, #36]	; 0x24
 c006c8e:	e767      	b.n	c006b60 <_vfiprintf_r+0x94>
 c006c90:	fb0c 3202 	mla	r2, ip, r2, r3
 c006c94:	460c      	mov	r4, r1
 c006c96:	2001      	movs	r0, #1
 c006c98:	e7a5      	b.n	c006be6 <_vfiprintf_r+0x11a>
 c006c9a:	2300      	movs	r3, #0
 c006c9c:	3401      	adds	r4, #1
 c006c9e:	f04f 0c0a 	mov.w	ip, #10
 c006ca2:	4619      	mov	r1, r3
 c006ca4:	9305      	str	r3, [sp, #20]
 c006ca6:	4620      	mov	r0, r4
 c006ca8:	f810 2b01 	ldrb.w	r2, [r0], #1
 c006cac:	3a30      	subs	r2, #48	; 0x30
 c006cae:	2a09      	cmp	r2, #9
 c006cb0:	d903      	bls.n	c006cba <_vfiprintf_r+0x1ee>
 c006cb2:	2b00      	cmp	r3, #0
 c006cb4:	d0c5      	beq.n	c006c42 <_vfiprintf_r+0x176>
 c006cb6:	9105      	str	r1, [sp, #20]
 c006cb8:	e7c3      	b.n	c006c42 <_vfiprintf_r+0x176>
 c006cba:	fb0c 2101 	mla	r1, ip, r1, r2
 c006cbe:	4604      	mov	r4, r0
 c006cc0:	2301      	movs	r3, #1
 c006cc2:	e7f0      	b.n	c006ca6 <_vfiprintf_r+0x1da>
 c006cc4:	ab03      	add	r3, sp, #12
 c006cc6:	462a      	mov	r2, r5
 c006cc8:	a904      	add	r1, sp, #16
 c006cca:	4630      	mov	r0, r6
 c006ccc:	9300      	str	r3, [sp, #0]
 c006cce:	4b15      	ldr	r3, [pc, #84]	; (c006d24 <_vfiprintf_r+0x258>)
 c006cd0:	e000      	b.n	c006cd4 <_vfiprintf_r+0x208>
 c006cd2:	bf00      	nop
 c006cd4:	4607      	mov	r7, r0
 c006cd6:	1c78      	adds	r0, r7, #1
 c006cd8:	d1d6      	bne.n	c006c88 <_vfiprintf_r+0x1bc>
 c006cda:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006cdc:	07d9      	lsls	r1, r3, #31
 c006cde:	d405      	bmi.n	c006cec <_vfiprintf_r+0x220>
 c006ce0:	89ab      	ldrh	r3, [r5, #12]
 c006ce2:	059a      	lsls	r2, r3, #22
 c006ce4:	d402      	bmi.n	c006cec <_vfiprintf_r+0x220>
 c006ce6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006ce8:	f7ff fe31 	bl	c00694e <__retarget_lock_release_recursive>
 c006cec:	89ab      	ldrh	r3, [r5, #12]
 c006cee:	065b      	lsls	r3, r3, #25
 c006cf0:	f53f af12 	bmi.w	c006b18 <_vfiprintf_r+0x4c>
 c006cf4:	9809      	ldr	r0, [sp, #36]	; 0x24
 c006cf6:	e711      	b.n	c006b1c <_vfiprintf_r+0x50>
 c006cf8:	ab03      	add	r3, sp, #12
 c006cfa:	462a      	mov	r2, r5
 c006cfc:	a904      	add	r1, sp, #16
 c006cfe:	4630      	mov	r0, r6
 c006d00:	9300      	str	r3, [sp, #0]
 c006d02:	4b08      	ldr	r3, [pc, #32]	; (c006d24 <_vfiprintf_r+0x258>)
 c006d04:	f000 f882 	bl	c006e0c <_printf_i>
 c006d08:	e7e4      	b.n	c006cd4 <_vfiprintf_r+0x208>
 c006d0a:	bf00      	nop
 c006d0c:	0c0081f0 	.word	0x0c0081f0
 c006d10:	0c008210 	.word	0x0c008210
 c006d14:	0c0081d0 	.word	0x0c0081d0
 c006d18:	0c008230 	.word	0x0c008230
 c006d1c:	0c00823a 	.word	0x0c00823a
 c006d20:	00000000 	.word	0x00000000
 c006d24:	0c006aa7 	.word	0x0c006aa7
 c006d28:	0c008236 	.word	0x0c008236

0c006d2c <_printf_common>:
 c006d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c006d30:	4616      	mov	r6, r2
 c006d32:	4699      	mov	r9, r3
 c006d34:	688a      	ldr	r2, [r1, #8]
 c006d36:	4607      	mov	r7, r0
 c006d38:	690b      	ldr	r3, [r1, #16]
 c006d3a:	460c      	mov	r4, r1
 c006d3c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c006d40:	4293      	cmp	r3, r2
 c006d42:	bfb8      	it	lt
 c006d44:	4613      	movlt	r3, r2
 c006d46:	6033      	str	r3, [r6, #0]
 c006d48:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c006d4c:	b10a      	cbz	r2, c006d52 <_printf_common+0x26>
 c006d4e:	3301      	adds	r3, #1
 c006d50:	6033      	str	r3, [r6, #0]
 c006d52:	6823      	ldr	r3, [r4, #0]
 c006d54:	0699      	lsls	r1, r3, #26
 c006d56:	bf42      	ittt	mi
 c006d58:	6833      	ldrmi	r3, [r6, #0]
 c006d5a:	3302      	addmi	r3, #2
 c006d5c:	6033      	strmi	r3, [r6, #0]
 c006d5e:	6825      	ldr	r5, [r4, #0]
 c006d60:	f015 0506 	ands.w	r5, r5, #6
 c006d64:	d106      	bne.n	c006d74 <_printf_common+0x48>
 c006d66:	f104 0a19 	add.w	sl, r4, #25
 c006d6a:	68e3      	ldr	r3, [r4, #12]
 c006d6c:	6832      	ldr	r2, [r6, #0]
 c006d6e:	1a9b      	subs	r3, r3, r2
 c006d70:	42ab      	cmp	r3, r5
 c006d72:	dc29      	bgt.n	c006dc8 <_printf_common+0x9c>
 c006d74:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c006d78:	1e13      	subs	r3, r2, #0
 c006d7a:	6822      	ldr	r2, [r4, #0]
 c006d7c:	bf18      	it	ne
 c006d7e:	2301      	movne	r3, #1
 c006d80:	0692      	lsls	r2, r2, #26
 c006d82:	d42e      	bmi.n	c006de2 <_printf_common+0xb6>
 c006d84:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c006d88:	4649      	mov	r1, r9
 c006d8a:	4638      	mov	r0, r7
 c006d8c:	47c0      	blx	r8
 c006d8e:	3001      	adds	r0, #1
 c006d90:	d021      	beq.n	c006dd6 <_printf_common+0xaa>
 c006d92:	6823      	ldr	r3, [r4, #0]
 c006d94:	341a      	adds	r4, #26
 c006d96:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c006d9a:	f003 0306 	and.w	r3, r3, #6
 c006d9e:	6832      	ldr	r2, [r6, #0]
 c006da0:	2600      	movs	r6, #0
 c006da2:	2b04      	cmp	r3, #4
 c006da4:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c006da8:	bf08      	it	eq
 c006daa:	1aad      	subeq	r5, r5, r2
 c006dac:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c006db0:	bf14      	ite	ne
 c006db2:	2500      	movne	r5, #0
 c006db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c006db8:	4293      	cmp	r3, r2
 c006dba:	bfc4      	itt	gt
 c006dbc:	1a9b      	subgt	r3, r3, r2
 c006dbe:	18ed      	addgt	r5, r5, r3
 c006dc0:	42b5      	cmp	r5, r6
 c006dc2:	d11a      	bne.n	c006dfa <_printf_common+0xce>
 c006dc4:	2000      	movs	r0, #0
 c006dc6:	e008      	b.n	c006dda <_printf_common+0xae>
 c006dc8:	2301      	movs	r3, #1
 c006dca:	4652      	mov	r2, sl
 c006dcc:	4649      	mov	r1, r9
 c006dce:	4638      	mov	r0, r7
 c006dd0:	47c0      	blx	r8
 c006dd2:	3001      	adds	r0, #1
 c006dd4:	d103      	bne.n	c006dde <_printf_common+0xb2>
 c006dd6:	f04f 30ff 	mov.w	r0, #4294967295
 c006dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c006dde:	3501      	adds	r5, #1
 c006de0:	e7c3      	b.n	c006d6a <_printf_common+0x3e>
 c006de2:	18e1      	adds	r1, r4, r3
 c006de4:	1c5a      	adds	r2, r3, #1
 c006de6:	2030      	movs	r0, #48	; 0x30
 c006de8:	3302      	adds	r3, #2
 c006dea:	4422      	add	r2, r4
 c006dec:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c006df0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c006df4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c006df8:	e7c4      	b.n	c006d84 <_printf_common+0x58>
 c006dfa:	2301      	movs	r3, #1
 c006dfc:	4622      	mov	r2, r4
 c006dfe:	4649      	mov	r1, r9
 c006e00:	4638      	mov	r0, r7
 c006e02:	47c0      	blx	r8
 c006e04:	3001      	adds	r0, #1
 c006e06:	d0e6      	beq.n	c006dd6 <_printf_common+0xaa>
 c006e08:	3601      	adds	r6, #1
 c006e0a:	e7d9      	b.n	c006dc0 <_printf_common+0x94>

0c006e0c <_printf_i>:
 c006e0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c006e10:	7e0f      	ldrb	r7, [r1, #24]
 c006e12:	4691      	mov	r9, r2
 c006e14:	4680      	mov	r8, r0
 c006e16:	460c      	mov	r4, r1
 c006e18:	2f78      	cmp	r7, #120	; 0x78
 c006e1a:	469a      	mov	sl, r3
 c006e1c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c006e1e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c006e22:	d807      	bhi.n	c006e34 <_printf_i+0x28>
 c006e24:	2f62      	cmp	r7, #98	; 0x62
 c006e26:	d80a      	bhi.n	c006e3e <_printf_i+0x32>
 c006e28:	2f00      	cmp	r7, #0
 c006e2a:	f000 80d8 	beq.w	c006fde <_printf_i+0x1d2>
 c006e2e:	2f58      	cmp	r7, #88	; 0x58
 c006e30:	f000 80a3 	beq.w	c006f7a <_printf_i+0x16e>
 c006e34:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c006e38:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c006e3c:	e03a      	b.n	c006eb4 <_printf_i+0xa8>
 c006e3e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c006e42:	2b15      	cmp	r3, #21
 c006e44:	d8f6      	bhi.n	c006e34 <_printf_i+0x28>
 c006e46:	a101      	add	r1, pc, #4	; (adr r1, c006e4c <_printf_i+0x40>)
 c006e48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c006e4c:	0c006ea5 	.word	0x0c006ea5
 c006e50:	0c006eb9 	.word	0x0c006eb9
 c006e54:	0c006e35 	.word	0x0c006e35
 c006e58:	0c006e35 	.word	0x0c006e35
 c006e5c:	0c006e35 	.word	0x0c006e35
 c006e60:	0c006e35 	.word	0x0c006e35
 c006e64:	0c006eb9 	.word	0x0c006eb9
 c006e68:	0c006e35 	.word	0x0c006e35
 c006e6c:	0c006e35 	.word	0x0c006e35
 c006e70:	0c006e35 	.word	0x0c006e35
 c006e74:	0c006e35 	.word	0x0c006e35
 c006e78:	0c006fc5 	.word	0x0c006fc5
 c006e7c:	0c006ee9 	.word	0x0c006ee9
 c006e80:	0c006fa7 	.word	0x0c006fa7
 c006e84:	0c006e35 	.word	0x0c006e35
 c006e88:	0c006e35 	.word	0x0c006e35
 c006e8c:	0c006fe7 	.word	0x0c006fe7
 c006e90:	0c006e35 	.word	0x0c006e35
 c006e94:	0c006ee9 	.word	0x0c006ee9
 c006e98:	0c006e35 	.word	0x0c006e35
 c006e9c:	0c006e35 	.word	0x0c006e35
 c006ea0:	0c006faf 	.word	0x0c006faf
 c006ea4:	682b      	ldr	r3, [r5, #0]
 c006ea6:	1d1a      	adds	r2, r3, #4
 c006ea8:	681b      	ldr	r3, [r3, #0]
 c006eaa:	602a      	str	r2, [r5, #0]
 c006eac:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c006eb0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c006eb4:	2301      	movs	r3, #1
 c006eb6:	e0a3      	b.n	c007000 <_printf_i+0x1f4>
 c006eb8:	6820      	ldr	r0, [r4, #0]
 c006eba:	6829      	ldr	r1, [r5, #0]
 c006ebc:	0606      	lsls	r6, r0, #24
 c006ebe:	f101 0304 	add.w	r3, r1, #4
 c006ec2:	d50a      	bpl.n	c006eda <_printf_i+0xce>
 c006ec4:	680e      	ldr	r6, [r1, #0]
 c006ec6:	602b      	str	r3, [r5, #0]
 c006ec8:	2e00      	cmp	r6, #0
 c006eca:	da03      	bge.n	c006ed4 <_printf_i+0xc8>
 c006ecc:	232d      	movs	r3, #45	; 0x2d
 c006ece:	4276      	negs	r6, r6
 c006ed0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c006ed4:	485e      	ldr	r0, [pc, #376]	; (c007050 <_printf_i+0x244>)
 c006ed6:	230a      	movs	r3, #10
 c006ed8:	e019      	b.n	c006f0e <_printf_i+0x102>
 c006eda:	680e      	ldr	r6, [r1, #0]
 c006edc:	f010 0f40 	tst.w	r0, #64	; 0x40
 c006ee0:	602b      	str	r3, [r5, #0]
 c006ee2:	bf18      	it	ne
 c006ee4:	b236      	sxthne	r6, r6
 c006ee6:	e7ef      	b.n	c006ec8 <_printf_i+0xbc>
 c006ee8:	682b      	ldr	r3, [r5, #0]
 c006eea:	6820      	ldr	r0, [r4, #0]
 c006eec:	1d19      	adds	r1, r3, #4
 c006eee:	6029      	str	r1, [r5, #0]
 c006ef0:	0601      	lsls	r1, r0, #24
 c006ef2:	d501      	bpl.n	c006ef8 <_printf_i+0xec>
 c006ef4:	681e      	ldr	r6, [r3, #0]
 c006ef6:	e002      	b.n	c006efe <_printf_i+0xf2>
 c006ef8:	0646      	lsls	r6, r0, #25
 c006efa:	d5fb      	bpl.n	c006ef4 <_printf_i+0xe8>
 c006efc:	881e      	ldrh	r6, [r3, #0]
 c006efe:	2f6f      	cmp	r7, #111	; 0x6f
 c006f00:	4853      	ldr	r0, [pc, #332]	; (c007050 <_printf_i+0x244>)
 c006f02:	bf0c      	ite	eq
 c006f04:	2308      	moveq	r3, #8
 c006f06:	230a      	movne	r3, #10
 c006f08:	2100      	movs	r1, #0
 c006f0a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c006f0e:	6865      	ldr	r5, [r4, #4]
 c006f10:	2d00      	cmp	r5, #0
 c006f12:	60a5      	str	r5, [r4, #8]
 c006f14:	bfa2      	ittt	ge
 c006f16:	6821      	ldrge	r1, [r4, #0]
 c006f18:	f021 0104 	bicge.w	r1, r1, #4
 c006f1c:	6021      	strge	r1, [r4, #0]
 c006f1e:	b90e      	cbnz	r6, c006f24 <_printf_i+0x118>
 c006f20:	2d00      	cmp	r5, #0
 c006f22:	d04d      	beq.n	c006fc0 <_printf_i+0x1b4>
 c006f24:	4615      	mov	r5, r2
 c006f26:	fbb6 f1f3 	udiv	r1, r6, r3
 c006f2a:	fb03 6711 	mls	r7, r3, r1, r6
 c006f2e:	5dc7      	ldrb	r7, [r0, r7]
 c006f30:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c006f34:	4637      	mov	r7, r6
 c006f36:	460e      	mov	r6, r1
 c006f38:	42bb      	cmp	r3, r7
 c006f3a:	d9f4      	bls.n	c006f26 <_printf_i+0x11a>
 c006f3c:	2b08      	cmp	r3, #8
 c006f3e:	d10b      	bne.n	c006f58 <_printf_i+0x14c>
 c006f40:	6823      	ldr	r3, [r4, #0]
 c006f42:	07de      	lsls	r6, r3, #31
 c006f44:	d508      	bpl.n	c006f58 <_printf_i+0x14c>
 c006f46:	6923      	ldr	r3, [r4, #16]
 c006f48:	6861      	ldr	r1, [r4, #4]
 c006f4a:	4299      	cmp	r1, r3
 c006f4c:	bfde      	ittt	le
 c006f4e:	2330      	movle	r3, #48	; 0x30
 c006f50:	f805 3c01 	strble.w	r3, [r5, #-1]
 c006f54:	f105 35ff 	addle.w	r5, r5, #4294967295
 c006f58:	1b52      	subs	r2, r2, r5
 c006f5a:	6122      	str	r2, [r4, #16]
 c006f5c:	464b      	mov	r3, r9
 c006f5e:	aa03      	add	r2, sp, #12
 c006f60:	4621      	mov	r1, r4
 c006f62:	4640      	mov	r0, r8
 c006f64:	f8cd a000 	str.w	sl, [sp]
 c006f68:	f7ff fee0 	bl	c006d2c <_printf_common>
 c006f6c:	3001      	adds	r0, #1
 c006f6e:	d14c      	bne.n	c00700a <_printf_i+0x1fe>
 c006f70:	f04f 30ff 	mov.w	r0, #4294967295
 c006f74:	b004      	add	sp, #16
 c006f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c006f7a:	4835      	ldr	r0, [pc, #212]	; (c007050 <_printf_i+0x244>)
 c006f7c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c006f80:	6829      	ldr	r1, [r5, #0]
 c006f82:	6823      	ldr	r3, [r4, #0]
 c006f84:	f851 6b04 	ldr.w	r6, [r1], #4
 c006f88:	6029      	str	r1, [r5, #0]
 c006f8a:	061d      	lsls	r5, r3, #24
 c006f8c:	d514      	bpl.n	c006fb8 <_printf_i+0x1ac>
 c006f8e:	07df      	lsls	r7, r3, #31
 c006f90:	bf44      	itt	mi
 c006f92:	f043 0320 	orrmi.w	r3, r3, #32
 c006f96:	6023      	strmi	r3, [r4, #0]
 c006f98:	b91e      	cbnz	r6, c006fa2 <_printf_i+0x196>
 c006f9a:	6823      	ldr	r3, [r4, #0]
 c006f9c:	f023 0320 	bic.w	r3, r3, #32
 c006fa0:	6023      	str	r3, [r4, #0]
 c006fa2:	2310      	movs	r3, #16
 c006fa4:	e7b0      	b.n	c006f08 <_printf_i+0xfc>
 c006fa6:	6823      	ldr	r3, [r4, #0]
 c006fa8:	f043 0320 	orr.w	r3, r3, #32
 c006fac:	6023      	str	r3, [r4, #0]
 c006fae:	2378      	movs	r3, #120	; 0x78
 c006fb0:	4828      	ldr	r0, [pc, #160]	; (c007054 <_printf_i+0x248>)
 c006fb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c006fb6:	e7e3      	b.n	c006f80 <_printf_i+0x174>
 c006fb8:	0659      	lsls	r1, r3, #25
 c006fba:	bf48      	it	mi
 c006fbc:	b2b6      	uxthmi	r6, r6
 c006fbe:	e7e6      	b.n	c006f8e <_printf_i+0x182>
 c006fc0:	4615      	mov	r5, r2
 c006fc2:	e7bb      	b.n	c006f3c <_printf_i+0x130>
 c006fc4:	682b      	ldr	r3, [r5, #0]
 c006fc6:	6826      	ldr	r6, [r4, #0]
 c006fc8:	1d18      	adds	r0, r3, #4
 c006fca:	6961      	ldr	r1, [r4, #20]
 c006fcc:	6028      	str	r0, [r5, #0]
 c006fce:	0635      	lsls	r5, r6, #24
 c006fd0:	681b      	ldr	r3, [r3, #0]
 c006fd2:	d501      	bpl.n	c006fd8 <_printf_i+0x1cc>
 c006fd4:	6019      	str	r1, [r3, #0]
 c006fd6:	e002      	b.n	c006fde <_printf_i+0x1d2>
 c006fd8:	0670      	lsls	r0, r6, #25
 c006fda:	d5fb      	bpl.n	c006fd4 <_printf_i+0x1c8>
 c006fdc:	8019      	strh	r1, [r3, #0]
 c006fde:	2300      	movs	r3, #0
 c006fe0:	4615      	mov	r5, r2
 c006fe2:	6123      	str	r3, [r4, #16]
 c006fe4:	e7ba      	b.n	c006f5c <_printf_i+0x150>
 c006fe6:	682b      	ldr	r3, [r5, #0]
 c006fe8:	2100      	movs	r1, #0
 c006fea:	1d1a      	adds	r2, r3, #4
 c006fec:	602a      	str	r2, [r5, #0]
 c006fee:	681d      	ldr	r5, [r3, #0]
 c006ff0:	6862      	ldr	r2, [r4, #4]
 c006ff2:	4628      	mov	r0, r5
 c006ff4:	f000 fa9e 	bl	c007534 <memchr>
 c006ff8:	b108      	cbz	r0, c006ffe <_printf_i+0x1f2>
 c006ffa:	1b40      	subs	r0, r0, r5
 c006ffc:	6060      	str	r0, [r4, #4]
 c006ffe:	6863      	ldr	r3, [r4, #4]
 c007000:	6123      	str	r3, [r4, #16]
 c007002:	2300      	movs	r3, #0
 c007004:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c007008:	e7a8      	b.n	c006f5c <_printf_i+0x150>
 c00700a:	6923      	ldr	r3, [r4, #16]
 c00700c:	462a      	mov	r2, r5
 c00700e:	4649      	mov	r1, r9
 c007010:	4640      	mov	r0, r8
 c007012:	47d0      	blx	sl
 c007014:	3001      	adds	r0, #1
 c007016:	d0ab      	beq.n	c006f70 <_printf_i+0x164>
 c007018:	6823      	ldr	r3, [r4, #0]
 c00701a:	079b      	lsls	r3, r3, #30
 c00701c:	d413      	bmi.n	c007046 <_printf_i+0x23a>
 c00701e:	68e0      	ldr	r0, [r4, #12]
 c007020:	9b03      	ldr	r3, [sp, #12]
 c007022:	4298      	cmp	r0, r3
 c007024:	bfb8      	it	lt
 c007026:	4618      	movlt	r0, r3
 c007028:	e7a4      	b.n	c006f74 <_printf_i+0x168>
 c00702a:	2301      	movs	r3, #1
 c00702c:	4632      	mov	r2, r6
 c00702e:	4649      	mov	r1, r9
 c007030:	4640      	mov	r0, r8
 c007032:	47d0      	blx	sl
 c007034:	3001      	adds	r0, #1
 c007036:	d09b      	beq.n	c006f70 <_printf_i+0x164>
 c007038:	3501      	adds	r5, #1
 c00703a:	68e3      	ldr	r3, [r4, #12]
 c00703c:	9903      	ldr	r1, [sp, #12]
 c00703e:	1a5b      	subs	r3, r3, r1
 c007040:	42ab      	cmp	r3, r5
 c007042:	dcf2      	bgt.n	c00702a <_printf_i+0x21e>
 c007044:	e7eb      	b.n	c00701e <_printf_i+0x212>
 c007046:	2500      	movs	r5, #0
 c007048:	f104 0619 	add.w	r6, r4, #25
 c00704c:	e7f5      	b.n	c00703a <_printf_i+0x22e>
 c00704e:	bf00      	nop
 c007050:	0c008241 	.word	0x0c008241
 c007054:	0c008252 	.word	0x0c008252

0c007058 <_sbrk_r>:
 c007058:	b538      	push	{r3, r4, r5, lr}
 c00705a:	2300      	movs	r3, #0
 c00705c:	4d05      	ldr	r5, [pc, #20]	; (c007074 <_sbrk_r+0x1c>)
 c00705e:	4604      	mov	r4, r0
 c007060:	4608      	mov	r0, r1
 c007062:	602b      	str	r3, [r5, #0]
 c007064:	f7fa fc7e 	bl	c001964 <_sbrk>
 c007068:	1c43      	adds	r3, r0, #1
 c00706a:	d102      	bne.n	c007072 <_sbrk_r+0x1a>
 c00706c:	682b      	ldr	r3, [r5, #0]
 c00706e:	b103      	cbz	r3, c007072 <_sbrk_r+0x1a>
 c007070:	6023      	str	r3, [r4, #0]
 c007072:	bd38      	pop	{r3, r4, r5, pc}
 c007074:	30000b38 	.word	0x30000b38

0c007078 <__sread>:
 c007078:	b510      	push	{r4, lr}
 c00707a:	460c      	mov	r4, r1
 c00707c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c007080:	f000 fabe 	bl	c007600 <_read_r>
 c007084:	2800      	cmp	r0, #0
 c007086:	bfab      	itete	ge
 c007088:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c00708a:	89a3      	ldrhlt	r3, [r4, #12]
 c00708c:	181b      	addge	r3, r3, r0
 c00708e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c007092:	bfac      	ite	ge
 c007094:	6563      	strge	r3, [r4, #84]	; 0x54
 c007096:	81a3      	strhlt	r3, [r4, #12]
 c007098:	bd10      	pop	{r4, pc}

0c00709a <__swrite>:
 c00709a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00709e:	461f      	mov	r7, r3
 c0070a0:	898b      	ldrh	r3, [r1, #12]
 c0070a2:	4605      	mov	r5, r0
 c0070a4:	460c      	mov	r4, r1
 c0070a6:	05db      	lsls	r3, r3, #23
 c0070a8:	4616      	mov	r6, r2
 c0070aa:	d505      	bpl.n	c0070b8 <__swrite+0x1e>
 c0070ac:	2302      	movs	r3, #2
 c0070ae:	2200      	movs	r2, #0
 c0070b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0070b4:	f000 f9c6 	bl	c007444 <_lseek_r>
 c0070b8:	89a3      	ldrh	r3, [r4, #12]
 c0070ba:	4632      	mov	r2, r6
 c0070bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0070c0:	4628      	mov	r0, r5
 c0070c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c0070c6:	81a3      	strh	r3, [r4, #12]
 c0070c8:	463b      	mov	r3, r7
 c0070ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0070ce:	f000 b869 	b.w	c0071a4 <_write_r>

0c0070d2 <__sseek>:
 c0070d2:	b510      	push	{r4, lr}
 c0070d4:	460c      	mov	r4, r1
 c0070d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0070da:	f000 f9b3 	bl	c007444 <_lseek_r>
 c0070de:	1c43      	adds	r3, r0, #1
 c0070e0:	89a3      	ldrh	r3, [r4, #12]
 c0070e2:	bf15      	itete	ne
 c0070e4:	6560      	strne	r0, [r4, #84]	; 0x54
 c0070e6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c0070ea:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c0070ee:	81a3      	strheq	r3, [r4, #12]
 c0070f0:	bf18      	it	ne
 c0070f2:	81a3      	strhne	r3, [r4, #12]
 c0070f4:	bd10      	pop	{r4, pc}

0c0070f6 <__sclose>:
 c0070f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0070fa:	f000 b8d3 	b.w	c0072a4 <_close_r>
	...

0c007100 <__swbuf_r>:
 c007100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007102:	460e      	mov	r6, r1
 c007104:	4614      	mov	r4, r2
 c007106:	4605      	mov	r5, r0
 c007108:	b118      	cbz	r0, c007112 <__swbuf_r+0x12>
 c00710a:	6983      	ldr	r3, [r0, #24]
 c00710c:	b90b      	cbnz	r3, c007112 <__swbuf_r+0x12>
 c00710e:	f7ff fb7f 	bl	c006810 <__sinit>
 c007112:	4b21      	ldr	r3, [pc, #132]	; (c007198 <__swbuf_r+0x98>)
 c007114:	429c      	cmp	r4, r3
 c007116:	d12b      	bne.n	c007170 <__swbuf_r+0x70>
 c007118:	686c      	ldr	r4, [r5, #4]
 c00711a:	69a3      	ldr	r3, [r4, #24]
 c00711c:	60a3      	str	r3, [r4, #8]
 c00711e:	89a3      	ldrh	r3, [r4, #12]
 c007120:	071a      	lsls	r2, r3, #28
 c007122:	d52f      	bpl.n	c007184 <__swbuf_r+0x84>
 c007124:	6923      	ldr	r3, [r4, #16]
 c007126:	b36b      	cbz	r3, c007184 <__swbuf_r+0x84>
 c007128:	6923      	ldr	r3, [r4, #16]
 c00712a:	b2f6      	uxtb	r6, r6
 c00712c:	6820      	ldr	r0, [r4, #0]
 c00712e:	4637      	mov	r7, r6
 c007130:	1ac0      	subs	r0, r0, r3
 c007132:	6963      	ldr	r3, [r4, #20]
 c007134:	4283      	cmp	r3, r0
 c007136:	dc04      	bgt.n	c007142 <__swbuf_r+0x42>
 c007138:	4621      	mov	r1, r4
 c00713a:	4628      	mov	r0, r5
 c00713c:	f000 f946 	bl	c0073cc <_fflush_r>
 c007140:	bb30      	cbnz	r0, c007190 <__swbuf_r+0x90>
 c007142:	68a3      	ldr	r3, [r4, #8]
 c007144:	3001      	adds	r0, #1
 c007146:	3b01      	subs	r3, #1
 c007148:	60a3      	str	r3, [r4, #8]
 c00714a:	6823      	ldr	r3, [r4, #0]
 c00714c:	1c5a      	adds	r2, r3, #1
 c00714e:	6022      	str	r2, [r4, #0]
 c007150:	701e      	strb	r6, [r3, #0]
 c007152:	6963      	ldr	r3, [r4, #20]
 c007154:	4283      	cmp	r3, r0
 c007156:	d004      	beq.n	c007162 <__swbuf_r+0x62>
 c007158:	89a3      	ldrh	r3, [r4, #12]
 c00715a:	07db      	lsls	r3, r3, #31
 c00715c:	d506      	bpl.n	c00716c <__swbuf_r+0x6c>
 c00715e:	2e0a      	cmp	r6, #10
 c007160:	d104      	bne.n	c00716c <__swbuf_r+0x6c>
 c007162:	4621      	mov	r1, r4
 c007164:	4628      	mov	r0, r5
 c007166:	f000 f931 	bl	c0073cc <_fflush_r>
 c00716a:	b988      	cbnz	r0, c007190 <__swbuf_r+0x90>
 c00716c:	4638      	mov	r0, r7
 c00716e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c007170:	4b0a      	ldr	r3, [pc, #40]	; (c00719c <__swbuf_r+0x9c>)
 c007172:	429c      	cmp	r4, r3
 c007174:	d101      	bne.n	c00717a <__swbuf_r+0x7a>
 c007176:	68ac      	ldr	r4, [r5, #8]
 c007178:	e7cf      	b.n	c00711a <__swbuf_r+0x1a>
 c00717a:	4b09      	ldr	r3, [pc, #36]	; (c0071a0 <__swbuf_r+0xa0>)
 c00717c:	429c      	cmp	r4, r3
 c00717e:	bf08      	it	eq
 c007180:	68ec      	ldreq	r4, [r5, #12]
 c007182:	e7ca      	b.n	c00711a <__swbuf_r+0x1a>
 c007184:	4621      	mov	r1, r4
 c007186:	4628      	mov	r0, r5
 c007188:	f000 f81e 	bl	c0071c8 <__swsetup_r>
 c00718c:	2800      	cmp	r0, #0
 c00718e:	d0cb      	beq.n	c007128 <__swbuf_r+0x28>
 c007190:	f04f 37ff 	mov.w	r7, #4294967295
 c007194:	e7ea      	b.n	c00716c <__swbuf_r+0x6c>
 c007196:	bf00      	nop
 c007198:	0c0081f0 	.word	0x0c0081f0
 c00719c:	0c008210 	.word	0x0c008210
 c0071a0:	0c0081d0 	.word	0x0c0081d0

0c0071a4 <_write_r>:
 c0071a4:	b538      	push	{r3, r4, r5, lr}
 c0071a6:	4604      	mov	r4, r0
 c0071a8:	4d06      	ldr	r5, [pc, #24]	; (c0071c4 <_write_r+0x20>)
 c0071aa:	4608      	mov	r0, r1
 c0071ac:	4611      	mov	r1, r2
 c0071ae:	2200      	movs	r2, #0
 c0071b0:	602a      	str	r2, [r5, #0]
 c0071b2:	461a      	mov	r2, r3
 c0071b4:	f7fa fb85 	bl	c0018c2 <_write>
 c0071b8:	1c43      	adds	r3, r0, #1
 c0071ba:	d102      	bne.n	c0071c2 <_write_r+0x1e>
 c0071bc:	682b      	ldr	r3, [r5, #0]
 c0071be:	b103      	cbz	r3, c0071c2 <_write_r+0x1e>
 c0071c0:	6023      	str	r3, [r4, #0]
 c0071c2:	bd38      	pop	{r3, r4, r5, pc}
 c0071c4:	30000b38 	.word	0x30000b38

0c0071c8 <__swsetup_r>:
 c0071c8:	4b32      	ldr	r3, [pc, #200]	; (c007294 <__swsetup_r+0xcc>)
 c0071ca:	b570      	push	{r4, r5, r6, lr}
 c0071cc:	681d      	ldr	r5, [r3, #0]
 c0071ce:	4606      	mov	r6, r0
 c0071d0:	460c      	mov	r4, r1
 c0071d2:	b125      	cbz	r5, c0071de <__swsetup_r+0x16>
 c0071d4:	69ab      	ldr	r3, [r5, #24]
 c0071d6:	b913      	cbnz	r3, c0071de <__swsetup_r+0x16>
 c0071d8:	4628      	mov	r0, r5
 c0071da:	f7ff fb19 	bl	c006810 <__sinit>
 c0071de:	4b2e      	ldr	r3, [pc, #184]	; (c007298 <__swsetup_r+0xd0>)
 c0071e0:	429c      	cmp	r4, r3
 c0071e2:	d10f      	bne.n	c007204 <__swsetup_r+0x3c>
 c0071e4:	686c      	ldr	r4, [r5, #4]
 c0071e6:	89a3      	ldrh	r3, [r4, #12]
 c0071e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c0071ec:	0719      	lsls	r1, r3, #28
 c0071ee:	d42c      	bmi.n	c00724a <__swsetup_r+0x82>
 c0071f0:	06dd      	lsls	r5, r3, #27
 c0071f2:	d411      	bmi.n	c007218 <__swsetup_r+0x50>
 c0071f4:	2309      	movs	r3, #9
 c0071f6:	6033      	str	r3, [r6, #0]
 c0071f8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c0071fc:	f04f 30ff 	mov.w	r0, #4294967295
 c007200:	81a3      	strh	r3, [r4, #12]
 c007202:	e03e      	b.n	c007282 <__swsetup_r+0xba>
 c007204:	4b25      	ldr	r3, [pc, #148]	; (c00729c <__swsetup_r+0xd4>)
 c007206:	429c      	cmp	r4, r3
 c007208:	d101      	bne.n	c00720e <__swsetup_r+0x46>
 c00720a:	68ac      	ldr	r4, [r5, #8]
 c00720c:	e7eb      	b.n	c0071e6 <__swsetup_r+0x1e>
 c00720e:	4b24      	ldr	r3, [pc, #144]	; (c0072a0 <__swsetup_r+0xd8>)
 c007210:	429c      	cmp	r4, r3
 c007212:	bf08      	it	eq
 c007214:	68ec      	ldreq	r4, [r5, #12]
 c007216:	e7e6      	b.n	c0071e6 <__swsetup_r+0x1e>
 c007218:	0758      	lsls	r0, r3, #29
 c00721a:	d512      	bpl.n	c007242 <__swsetup_r+0x7a>
 c00721c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00721e:	b141      	cbz	r1, c007232 <__swsetup_r+0x6a>
 c007220:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c007224:	4299      	cmp	r1, r3
 c007226:	d002      	beq.n	c00722e <__swsetup_r+0x66>
 c007228:	4630      	mov	r0, r6
 c00722a:	f000 f99d 	bl	c007568 <_free_r>
 c00722e:	2300      	movs	r3, #0
 c007230:	6363      	str	r3, [r4, #52]	; 0x34
 c007232:	89a3      	ldrh	r3, [r4, #12]
 c007234:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c007238:	81a3      	strh	r3, [r4, #12]
 c00723a:	2300      	movs	r3, #0
 c00723c:	6063      	str	r3, [r4, #4]
 c00723e:	6923      	ldr	r3, [r4, #16]
 c007240:	6023      	str	r3, [r4, #0]
 c007242:	89a3      	ldrh	r3, [r4, #12]
 c007244:	f043 0308 	orr.w	r3, r3, #8
 c007248:	81a3      	strh	r3, [r4, #12]
 c00724a:	6923      	ldr	r3, [r4, #16]
 c00724c:	b94b      	cbnz	r3, c007262 <__swsetup_r+0x9a>
 c00724e:	89a3      	ldrh	r3, [r4, #12]
 c007250:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c007254:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007258:	d003      	beq.n	c007262 <__swsetup_r+0x9a>
 c00725a:	4621      	mov	r1, r4
 c00725c:	4630      	mov	r0, r6
 c00725e:	f000 f929 	bl	c0074b4 <__smakebuf_r>
 c007262:	89a0      	ldrh	r0, [r4, #12]
 c007264:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c007268:	f010 0301 	ands.w	r3, r0, #1
 c00726c:	d00a      	beq.n	c007284 <__swsetup_r+0xbc>
 c00726e:	2300      	movs	r3, #0
 c007270:	60a3      	str	r3, [r4, #8]
 c007272:	6963      	ldr	r3, [r4, #20]
 c007274:	425b      	negs	r3, r3
 c007276:	61a3      	str	r3, [r4, #24]
 c007278:	6923      	ldr	r3, [r4, #16]
 c00727a:	b943      	cbnz	r3, c00728e <__swsetup_r+0xc6>
 c00727c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c007280:	d1ba      	bne.n	c0071f8 <__swsetup_r+0x30>
 c007282:	bd70      	pop	{r4, r5, r6, pc}
 c007284:	0781      	lsls	r1, r0, #30
 c007286:	bf58      	it	pl
 c007288:	6963      	ldrpl	r3, [r4, #20]
 c00728a:	60a3      	str	r3, [r4, #8]
 c00728c:	e7f4      	b.n	c007278 <__swsetup_r+0xb0>
 c00728e:	2000      	movs	r0, #0
 c007290:	e7f7      	b.n	c007282 <__swsetup_r+0xba>
 c007292:	bf00      	nop
 c007294:	30000048 	.word	0x30000048
 c007298:	0c0081f0 	.word	0x0c0081f0
 c00729c:	0c008210 	.word	0x0c008210
 c0072a0:	0c0081d0 	.word	0x0c0081d0

0c0072a4 <_close_r>:
 c0072a4:	b538      	push	{r3, r4, r5, lr}
 c0072a6:	2300      	movs	r3, #0
 c0072a8:	4d05      	ldr	r5, [pc, #20]	; (c0072c0 <_close_r+0x1c>)
 c0072aa:	4604      	mov	r4, r0
 c0072ac:	4608      	mov	r0, r1
 c0072ae:	602b      	str	r3, [r5, #0]
 c0072b0:	f7fa fb23 	bl	c0018fa <_close>
 c0072b4:	1c43      	adds	r3, r0, #1
 c0072b6:	d102      	bne.n	c0072be <_close_r+0x1a>
 c0072b8:	682b      	ldr	r3, [r5, #0]
 c0072ba:	b103      	cbz	r3, c0072be <_close_r+0x1a>
 c0072bc:	6023      	str	r3, [r4, #0]
 c0072be:	bd38      	pop	{r3, r4, r5, pc}
 c0072c0:	30000b38 	.word	0x30000b38

0c0072c4 <__sflush_r>:
 c0072c4:	898a      	ldrh	r2, [r1, #12]
 c0072c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0072ca:	4605      	mov	r5, r0
 c0072cc:	0710      	lsls	r0, r2, #28
 c0072ce:	460c      	mov	r4, r1
 c0072d0:	d458      	bmi.n	c007384 <__sflush_r+0xc0>
 c0072d2:	684b      	ldr	r3, [r1, #4]
 c0072d4:	2b00      	cmp	r3, #0
 c0072d6:	dc05      	bgt.n	c0072e4 <__sflush_r+0x20>
 c0072d8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c0072da:	2b00      	cmp	r3, #0
 c0072dc:	dc02      	bgt.n	c0072e4 <__sflush_r+0x20>
 c0072de:	2000      	movs	r0, #0
 c0072e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0072e4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0072e6:	2e00      	cmp	r6, #0
 c0072e8:	d0f9      	beq.n	c0072de <__sflush_r+0x1a>
 c0072ea:	2300      	movs	r3, #0
 c0072ec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c0072f0:	682f      	ldr	r7, [r5, #0]
 c0072f2:	602b      	str	r3, [r5, #0]
 c0072f4:	d032      	beq.n	c00735c <__sflush_r+0x98>
 c0072f6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c0072f8:	89a3      	ldrh	r3, [r4, #12]
 c0072fa:	075a      	lsls	r2, r3, #29
 c0072fc:	d505      	bpl.n	c00730a <__sflush_r+0x46>
 c0072fe:	6863      	ldr	r3, [r4, #4]
 c007300:	1ac0      	subs	r0, r0, r3
 c007302:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c007304:	b10b      	cbz	r3, c00730a <__sflush_r+0x46>
 c007306:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c007308:	1ac0      	subs	r0, r0, r3
 c00730a:	2300      	movs	r3, #0
 c00730c:	4602      	mov	r2, r0
 c00730e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c007310:	4628      	mov	r0, r5
 c007312:	6a21      	ldr	r1, [r4, #32]
 c007314:	47b0      	blx	r6
 c007316:	1c43      	adds	r3, r0, #1
 c007318:	89a3      	ldrh	r3, [r4, #12]
 c00731a:	d106      	bne.n	c00732a <__sflush_r+0x66>
 c00731c:	6829      	ldr	r1, [r5, #0]
 c00731e:	291d      	cmp	r1, #29
 c007320:	d82c      	bhi.n	c00737c <__sflush_r+0xb8>
 c007322:	4a29      	ldr	r2, [pc, #164]	; (c0073c8 <__sflush_r+0x104>)
 c007324:	40ca      	lsrs	r2, r1
 c007326:	07d6      	lsls	r6, r2, #31
 c007328:	d528      	bpl.n	c00737c <__sflush_r+0xb8>
 c00732a:	2200      	movs	r2, #0
 c00732c:	04d9      	lsls	r1, r3, #19
 c00732e:	6062      	str	r2, [r4, #4]
 c007330:	6922      	ldr	r2, [r4, #16]
 c007332:	6022      	str	r2, [r4, #0]
 c007334:	d504      	bpl.n	c007340 <__sflush_r+0x7c>
 c007336:	1c42      	adds	r2, r0, #1
 c007338:	d101      	bne.n	c00733e <__sflush_r+0x7a>
 c00733a:	682b      	ldr	r3, [r5, #0]
 c00733c:	b903      	cbnz	r3, c007340 <__sflush_r+0x7c>
 c00733e:	6560      	str	r0, [r4, #84]	; 0x54
 c007340:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c007342:	602f      	str	r7, [r5, #0]
 c007344:	2900      	cmp	r1, #0
 c007346:	d0ca      	beq.n	c0072de <__sflush_r+0x1a>
 c007348:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c00734c:	4299      	cmp	r1, r3
 c00734e:	d002      	beq.n	c007356 <__sflush_r+0x92>
 c007350:	4628      	mov	r0, r5
 c007352:	f000 f909 	bl	c007568 <_free_r>
 c007356:	2000      	movs	r0, #0
 c007358:	6360      	str	r0, [r4, #52]	; 0x34
 c00735a:	e7c1      	b.n	c0072e0 <__sflush_r+0x1c>
 c00735c:	6a21      	ldr	r1, [r4, #32]
 c00735e:	2301      	movs	r3, #1
 c007360:	4628      	mov	r0, r5
 c007362:	47b0      	blx	r6
 c007364:	1c41      	adds	r1, r0, #1
 c007366:	d1c7      	bne.n	c0072f8 <__sflush_r+0x34>
 c007368:	682b      	ldr	r3, [r5, #0]
 c00736a:	2b00      	cmp	r3, #0
 c00736c:	d0c4      	beq.n	c0072f8 <__sflush_r+0x34>
 c00736e:	2b1d      	cmp	r3, #29
 c007370:	d001      	beq.n	c007376 <__sflush_r+0xb2>
 c007372:	2b16      	cmp	r3, #22
 c007374:	d101      	bne.n	c00737a <__sflush_r+0xb6>
 c007376:	602f      	str	r7, [r5, #0]
 c007378:	e7b1      	b.n	c0072de <__sflush_r+0x1a>
 c00737a:	89a3      	ldrh	r3, [r4, #12]
 c00737c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c007380:	81a3      	strh	r3, [r4, #12]
 c007382:	e7ad      	b.n	c0072e0 <__sflush_r+0x1c>
 c007384:	690f      	ldr	r7, [r1, #16]
 c007386:	2f00      	cmp	r7, #0
 c007388:	d0a9      	beq.n	c0072de <__sflush_r+0x1a>
 c00738a:	0793      	lsls	r3, r2, #30
 c00738c:	680e      	ldr	r6, [r1, #0]
 c00738e:	600f      	str	r7, [r1, #0]
 c007390:	bf0c      	ite	eq
 c007392:	694b      	ldreq	r3, [r1, #20]
 c007394:	2300      	movne	r3, #0
 c007396:	eba6 0807 	sub.w	r8, r6, r7
 c00739a:	608b      	str	r3, [r1, #8]
 c00739c:	f1b8 0f00 	cmp.w	r8, #0
 c0073a0:	dd9d      	ble.n	c0072de <__sflush_r+0x1a>
 c0073a2:	4643      	mov	r3, r8
 c0073a4:	463a      	mov	r2, r7
 c0073a6:	6a21      	ldr	r1, [r4, #32]
 c0073a8:	4628      	mov	r0, r5
 c0073aa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c0073ac:	47b0      	blx	r6
 c0073ae:	2800      	cmp	r0, #0
 c0073b0:	dc06      	bgt.n	c0073c0 <__sflush_r+0xfc>
 c0073b2:	89a3      	ldrh	r3, [r4, #12]
 c0073b4:	f04f 30ff 	mov.w	r0, #4294967295
 c0073b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0073bc:	81a3      	strh	r3, [r4, #12]
 c0073be:	e78f      	b.n	c0072e0 <__sflush_r+0x1c>
 c0073c0:	4407      	add	r7, r0
 c0073c2:	eba8 0800 	sub.w	r8, r8, r0
 c0073c6:	e7e9      	b.n	c00739c <__sflush_r+0xd8>
 c0073c8:	20400001 	.word	0x20400001

0c0073cc <_fflush_r>:
 c0073cc:	b538      	push	{r3, r4, r5, lr}
 c0073ce:	690b      	ldr	r3, [r1, #16]
 c0073d0:	4605      	mov	r5, r0
 c0073d2:	460c      	mov	r4, r1
 c0073d4:	b913      	cbnz	r3, c0073dc <_fflush_r+0x10>
 c0073d6:	2500      	movs	r5, #0
 c0073d8:	4628      	mov	r0, r5
 c0073da:	bd38      	pop	{r3, r4, r5, pc}
 c0073dc:	b118      	cbz	r0, c0073e6 <_fflush_r+0x1a>
 c0073de:	6983      	ldr	r3, [r0, #24]
 c0073e0:	b90b      	cbnz	r3, c0073e6 <_fflush_r+0x1a>
 c0073e2:	f7ff fa15 	bl	c006810 <__sinit>
 c0073e6:	4b14      	ldr	r3, [pc, #80]	; (c007438 <_fflush_r+0x6c>)
 c0073e8:	429c      	cmp	r4, r3
 c0073ea:	d11b      	bne.n	c007424 <_fflush_r+0x58>
 c0073ec:	686c      	ldr	r4, [r5, #4]
 c0073ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0073f2:	2b00      	cmp	r3, #0
 c0073f4:	d0ef      	beq.n	c0073d6 <_fflush_r+0xa>
 c0073f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c0073f8:	07d0      	lsls	r0, r2, #31
 c0073fa:	d404      	bmi.n	c007406 <_fflush_r+0x3a>
 c0073fc:	0599      	lsls	r1, r3, #22
 c0073fe:	d402      	bmi.n	c007406 <_fflush_r+0x3a>
 c007400:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c007402:	f7ff faa3 	bl	c00694c <__retarget_lock_acquire_recursive>
 c007406:	4628      	mov	r0, r5
 c007408:	4621      	mov	r1, r4
 c00740a:	f7ff ff5b 	bl	c0072c4 <__sflush_r>
 c00740e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c007410:	4605      	mov	r5, r0
 c007412:	07da      	lsls	r2, r3, #31
 c007414:	d4e0      	bmi.n	c0073d8 <_fflush_r+0xc>
 c007416:	89a3      	ldrh	r3, [r4, #12]
 c007418:	059b      	lsls	r3, r3, #22
 c00741a:	d4dd      	bmi.n	c0073d8 <_fflush_r+0xc>
 c00741c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00741e:	f7ff fa96 	bl	c00694e <__retarget_lock_release_recursive>
 c007422:	e7d9      	b.n	c0073d8 <_fflush_r+0xc>
 c007424:	4b05      	ldr	r3, [pc, #20]	; (c00743c <_fflush_r+0x70>)
 c007426:	429c      	cmp	r4, r3
 c007428:	d101      	bne.n	c00742e <_fflush_r+0x62>
 c00742a:	68ac      	ldr	r4, [r5, #8]
 c00742c:	e7df      	b.n	c0073ee <_fflush_r+0x22>
 c00742e:	4b04      	ldr	r3, [pc, #16]	; (c007440 <_fflush_r+0x74>)
 c007430:	429c      	cmp	r4, r3
 c007432:	bf08      	it	eq
 c007434:	68ec      	ldreq	r4, [r5, #12]
 c007436:	e7da      	b.n	c0073ee <_fflush_r+0x22>
 c007438:	0c0081f0 	.word	0x0c0081f0
 c00743c:	0c008210 	.word	0x0c008210
 c007440:	0c0081d0 	.word	0x0c0081d0

0c007444 <_lseek_r>:
 c007444:	b538      	push	{r3, r4, r5, lr}
 c007446:	4604      	mov	r4, r0
 c007448:	4d06      	ldr	r5, [pc, #24]	; (c007464 <_lseek_r+0x20>)
 c00744a:	4608      	mov	r0, r1
 c00744c:	4611      	mov	r1, r2
 c00744e:	2200      	movs	r2, #0
 c007450:	602a      	str	r2, [r5, #0]
 c007452:	461a      	mov	r2, r3
 c007454:	f7fa fa78 	bl	c001948 <_lseek>
 c007458:	1c43      	adds	r3, r0, #1
 c00745a:	d102      	bne.n	c007462 <_lseek_r+0x1e>
 c00745c:	682b      	ldr	r3, [r5, #0]
 c00745e:	b103      	cbz	r3, c007462 <_lseek_r+0x1e>
 c007460:	6023      	str	r3, [r4, #0]
 c007462:	bd38      	pop	{r3, r4, r5, pc}
 c007464:	30000b38 	.word	0x30000b38

0c007468 <__swhatbuf_r>:
 c007468:	b570      	push	{r4, r5, r6, lr}
 c00746a:	460e      	mov	r6, r1
 c00746c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c007470:	b096      	sub	sp, #88	; 0x58
 c007472:	4614      	mov	r4, r2
 c007474:	2900      	cmp	r1, #0
 c007476:	461d      	mov	r5, r3
 c007478:	da08      	bge.n	c00748c <__swhatbuf_r+0x24>
 c00747a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c00747e:	2200      	movs	r2, #0
 c007480:	602a      	str	r2, [r5, #0]
 c007482:	061a      	lsls	r2, r3, #24
 c007484:	d410      	bmi.n	c0074a8 <__swhatbuf_r+0x40>
 c007486:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c00748a:	e00e      	b.n	c0074aa <__swhatbuf_r+0x42>
 c00748c:	466a      	mov	r2, sp
 c00748e:	f000 f8c9 	bl	c007624 <_fstat_r>
 c007492:	2800      	cmp	r0, #0
 c007494:	dbf1      	blt.n	c00747a <__swhatbuf_r+0x12>
 c007496:	9a01      	ldr	r2, [sp, #4]
 c007498:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c00749c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c0074a0:	425a      	negs	r2, r3
 c0074a2:	415a      	adcs	r2, r3
 c0074a4:	602a      	str	r2, [r5, #0]
 c0074a6:	e7ee      	b.n	c007486 <__swhatbuf_r+0x1e>
 c0074a8:	2340      	movs	r3, #64	; 0x40
 c0074aa:	2000      	movs	r0, #0
 c0074ac:	6023      	str	r3, [r4, #0]
 c0074ae:	b016      	add	sp, #88	; 0x58
 c0074b0:	bd70      	pop	{r4, r5, r6, pc}
	...

0c0074b4 <__smakebuf_r>:
 c0074b4:	898b      	ldrh	r3, [r1, #12]
 c0074b6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c0074b8:	079d      	lsls	r5, r3, #30
 c0074ba:	4606      	mov	r6, r0
 c0074bc:	460c      	mov	r4, r1
 c0074be:	d507      	bpl.n	c0074d0 <__smakebuf_r+0x1c>
 c0074c0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c0074c4:	6023      	str	r3, [r4, #0]
 c0074c6:	6123      	str	r3, [r4, #16]
 c0074c8:	2301      	movs	r3, #1
 c0074ca:	6163      	str	r3, [r4, #20]
 c0074cc:	b002      	add	sp, #8
 c0074ce:	bd70      	pop	{r4, r5, r6, pc}
 c0074d0:	ab01      	add	r3, sp, #4
 c0074d2:	466a      	mov	r2, sp
 c0074d4:	f7ff ffc8 	bl	c007468 <__swhatbuf_r>
 c0074d8:	9900      	ldr	r1, [sp, #0]
 c0074da:	4605      	mov	r5, r0
 c0074dc:	4630      	mov	r0, r6
 c0074de:	f7ff fa57 	bl	c006990 <_malloc_r>
 c0074e2:	b948      	cbnz	r0, c0074f8 <__smakebuf_r+0x44>
 c0074e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0074e8:	059a      	lsls	r2, r3, #22
 c0074ea:	d4ef      	bmi.n	c0074cc <__smakebuf_r+0x18>
 c0074ec:	f023 0303 	bic.w	r3, r3, #3
 c0074f0:	f043 0302 	orr.w	r3, r3, #2
 c0074f4:	81a3      	strh	r3, [r4, #12]
 c0074f6:	e7e3      	b.n	c0074c0 <__smakebuf_r+0xc>
 c0074f8:	4b0d      	ldr	r3, [pc, #52]	; (c007530 <__smakebuf_r+0x7c>)
 c0074fa:	62b3      	str	r3, [r6, #40]	; 0x28
 c0074fc:	89a3      	ldrh	r3, [r4, #12]
 c0074fe:	6020      	str	r0, [r4, #0]
 c007500:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c007504:	6120      	str	r0, [r4, #16]
 c007506:	81a3      	strh	r3, [r4, #12]
 c007508:	9b00      	ldr	r3, [sp, #0]
 c00750a:	6163      	str	r3, [r4, #20]
 c00750c:	9b01      	ldr	r3, [sp, #4]
 c00750e:	b15b      	cbz	r3, c007528 <__smakebuf_r+0x74>
 c007510:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c007514:	4630      	mov	r0, r6
 c007516:	f000 f897 	bl	c007648 <_isatty_r>
 c00751a:	b128      	cbz	r0, c007528 <__smakebuf_r+0x74>
 c00751c:	89a3      	ldrh	r3, [r4, #12]
 c00751e:	f023 0303 	bic.w	r3, r3, #3
 c007522:	f043 0301 	orr.w	r3, r3, #1
 c007526:	81a3      	strh	r3, [r4, #12]
 c007528:	89a0      	ldrh	r0, [r4, #12]
 c00752a:	4305      	orrs	r5, r0
 c00752c:	81a5      	strh	r5, [r4, #12]
 c00752e:	e7cd      	b.n	c0074cc <__smakebuf_r+0x18>
 c007530:	0c0067a9 	.word	0x0c0067a9

0c007534 <memchr>:
 c007534:	b2c9      	uxtb	r1, r1
 c007536:	4402      	add	r2, r0
 c007538:	b510      	push	{r4, lr}
 c00753a:	4290      	cmp	r0, r2
 c00753c:	4603      	mov	r3, r0
 c00753e:	d101      	bne.n	c007544 <memchr+0x10>
 c007540:	2300      	movs	r3, #0
 c007542:	e003      	b.n	c00754c <memchr+0x18>
 c007544:	781c      	ldrb	r4, [r3, #0]
 c007546:	3001      	adds	r0, #1
 c007548:	428c      	cmp	r4, r1
 c00754a:	d1f6      	bne.n	c00753a <memchr+0x6>
 c00754c:	4618      	mov	r0, r3
 c00754e:	bd10      	pop	{r4, pc}

0c007550 <__malloc_lock>:
 c007550:	4801      	ldr	r0, [pc, #4]	; (c007558 <__malloc_lock+0x8>)
 c007552:	f7ff b9fb 	b.w	c00694c <__retarget_lock_acquire_recursive>
 c007556:	bf00      	nop
 c007558:	30000b2c 	.word	0x30000b2c

0c00755c <__malloc_unlock>:
 c00755c:	4801      	ldr	r0, [pc, #4]	; (c007564 <__malloc_unlock+0x8>)
 c00755e:	f7ff b9f6 	b.w	c00694e <__retarget_lock_release_recursive>
 c007562:	bf00      	nop
 c007564:	30000b2c 	.word	0x30000b2c

0c007568 <_free_r>:
 c007568:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c00756a:	2900      	cmp	r1, #0
 c00756c:	d043      	beq.n	c0075f6 <_free_r+0x8e>
 c00756e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c007572:	1f0c      	subs	r4, r1, #4
 c007574:	9001      	str	r0, [sp, #4]
 c007576:	2b00      	cmp	r3, #0
 c007578:	bfb8      	it	lt
 c00757a:	18e4      	addlt	r4, r4, r3
 c00757c:	f7ff ffe8 	bl	c007550 <__malloc_lock>
 c007580:	4a1e      	ldr	r2, [pc, #120]	; (c0075fc <_free_r+0x94>)
 c007582:	9801      	ldr	r0, [sp, #4]
 c007584:	6813      	ldr	r3, [r2, #0]
 c007586:	b933      	cbnz	r3, c007596 <_free_r+0x2e>
 c007588:	6063      	str	r3, [r4, #4]
 c00758a:	6014      	str	r4, [r2, #0]
 c00758c:	b003      	add	sp, #12
 c00758e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c007592:	f7ff bfe3 	b.w	c00755c <__malloc_unlock>
 c007596:	42a3      	cmp	r3, r4
 c007598:	d908      	bls.n	c0075ac <_free_r+0x44>
 c00759a:	6825      	ldr	r5, [r4, #0]
 c00759c:	1961      	adds	r1, r4, r5
 c00759e:	428b      	cmp	r3, r1
 c0075a0:	bf01      	itttt	eq
 c0075a2:	6819      	ldreq	r1, [r3, #0]
 c0075a4:	685b      	ldreq	r3, [r3, #4]
 c0075a6:	1949      	addeq	r1, r1, r5
 c0075a8:	6021      	streq	r1, [r4, #0]
 c0075aa:	e7ed      	b.n	c007588 <_free_r+0x20>
 c0075ac:	461a      	mov	r2, r3
 c0075ae:	685b      	ldr	r3, [r3, #4]
 c0075b0:	b10b      	cbz	r3, c0075b6 <_free_r+0x4e>
 c0075b2:	42a3      	cmp	r3, r4
 c0075b4:	d9fa      	bls.n	c0075ac <_free_r+0x44>
 c0075b6:	6811      	ldr	r1, [r2, #0]
 c0075b8:	1855      	adds	r5, r2, r1
 c0075ba:	42a5      	cmp	r5, r4
 c0075bc:	d10b      	bne.n	c0075d6 <_free_r+0x6e>
 c0075be:	6824      	ldr	r4, [r4, #0]
 c0075c0:	4421      	add	r1, r4
 c0075c2:	1854      	adds	r4, r2, r1
 c0075c4:	6011      	str	r1, [r2, #0]
 c0075c6:	42a3      	cmp	r3, r4
 c0075c8:	d1e0      	bne.n	c00758c <_free_r+0x24>
 c0075ca:	681c      	ldr	r4, [r3, #0]
 c0075cc:	685b      	ldr	r3, [r3, #4]
 c0075ce:	4421      	add	r1, r4
 c0075d0:	6053      	str	r3, [r2, #4]
 c0075d2:	6011      	str	r1, [r2, #0]
 c0075d4:	e7da      	b.n	c00758c <_free_r+0x24>
 c0075d6:	d902      	bls.n	c0075de <_free_r+0x76>
 c0075d8:	230c      	movs	r3, #12
 c0075da:	6003      	str	r3, [r0, #0]
 c0075dc:	e7d6      	b.n	c00758c <_free_r+0x24>
 c0075de:	6825      	ldr	r5, [r4, #0]
 c0075e0:	1961      	adds	r1, r4, r5
 c0075e2:	428b      	cmp	r3, r1
 c0075e4:	bf02      	ittt	eq
 c0075e6:	6819      	ldreq	r1, [r3, #0]
 c0075e8:	685b      	ldreq	r3, [r3, #4]
 c0075ea:	1949      	addeq	r1, r1, r5
 c0075ec:	6063      	str	r3, [r4, #4]
 c0075ee:	bf08      	it	eq
 c0075f0:	6021      	streq	r1, [r4, #0]
 c0075f2:	6054      	str	r4, [r2, #4]
 c0075f4:	e7ca      	b.n	c00758c <_free_r+0x24>
 c0075f6:	b003      	add	sp, #12
 c0075f8:	bd30      	pop	{r4, r5, pc}
 c0075fa:	bf00      	nop
 c0075fc:	30000b30 	.word	0x30000b30

0c007600 <_read_r>:
 c007600:	b538      	push	{r3, r4, r5, lr}
 c007602:	4604      	mov	r4, r0
 c007604:	4d06      	ldr	r5, [pc, #24]	; (c007620 <_read_r+0x20>)
 c007606:	4608      	mov	r0, r1
 c007608:	4611      	mov	r1, r2
 c00760a:	2200      	movs	r2, #0
 c00760c:	602a      	str	r2, [r5, #0]
 c00760e:	461a      	mov	r2, r3
 c007610:	f7fa f93a 	bl	c001888 <_read>
 c007614:	1c43      	adds	r3, r0, #1
 c007616:	d102      	bne.n	c00761e <_read_r+0x1e>
 c007618:	682b      	ldr	r3, [r5, #0]
 c00761a:	b103      	cbz	r3, c00761e <_read_r+0x1e>
 c00761c:	6023      	str	r3, [r4, #0]
 c00761e:	bd38      	pop	{r3, r4, r5, pc}
 c007620:	30000b38 	.word	0x30000b38

0c007624 <_fstat_r>:
 c007624:	b538      	push	{r3, r4, r5, lr}
 c007626:	2300      	movs	r3, #0
 c007628:	4d06      	ldr	r5, [pc, #24]	; (c007644 <_fstat_r+0x20>)
 c00762a:	4604      	mov	r4, r0
 c00762c:	4608      	mov	r0, r1
 c00762e:	4611      	mov	r1, r2
 c007630:	602b      	str	r3, [r5, #0]
 c007632:	f7fa f96e 	bl	c001912 <_fstat>
 c007636:	1c43      	adds	r3, r0, #1
 c007638:	d102      	bne.n	c007640 <_fstat_r+0x1c>
 c00763a:	682b      	ldr	r3, [r5, #0]
 c00763c:	b103      	cbz	r3, c007640 <_fstat_r+0x1c>
 c00763e:	6023      	str	r3, [r4, #0]
 c007640:	bd38      	pop	{r3, r4, r5, pc}
 c007642:	bf00      	nop
 c007644:	30000b38 	.word	0x30000b38

0c007648 <_isatty_r>:
 c007648:	b538      	push	{r3, r4, r5, lr}
 c00764a:	2300      	movs	r3, #0
 c00764c:	4d05      	ldr	r5, [pc, #20]	; (c007664 <_isatty_r+0x1c>)
 c00764e:	4604      	mov	r4, r0
 c007650:	4608      	mov	r0, r1
 c007652:	602b      	str	r3, [r5, #0]
 c007654:	f7fa f96d 	bl	c001932 <_isatty>
 c007658:	1c43      	adds	r3, r0, #1
 c00765a:	d102      	bne.n	c007662 <_isatty_r+0x1a>
 c00765c:	682b      	ldr	r3, [r5, #0]
 c00765e:	b103      	cbz	r3, c007662 <_isatty_r+0x1a>
 c007660:	6023      	str	r3, [r4, #0]
 c007662:	bd38      	pop	{r3, r4, r5, pc}
 c007664:	30000b38 	.word	0x30000b38

0c007668 <_init>:
 c007668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00766a:	bf00      	nop
 c00766c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00766e:	bc08      	pop	{r3}
 c007670:	469e      	mov	lr, r3
 c007672:	4770      	bx	lr

0c007674 <_fini>:
 c007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007676:	bf00      	nop
 c007678:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00767a:	bc08      	pop	{r3}
 c00767c:	469e      	mov	lr, r3
 c00767e:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_print_Num>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b90e 	b.w	c001224 <__acle_se_SECURE_print_Num>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 be28 	b.w	c001c60 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <SECURE_RegisterCallback>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 b9f8 	b.w	c001408 <__acle_se_SECURE_RegisterCallback>

0c03e018 <SECURE_Send_Mem_Block>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 b946 	b.w	c0012ac <__acle_se_SECURE_Send_Mem_Block>

0c03e020 <SECURE_print_Log>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b8bd 	b.w	c0011a2 <__acle_se_SECURE_print_Log>
	...
