
Nonblocking_Memory_Forensics_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085e4  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005c0  0c0087d8  0c0087d8  000187d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c008d98  0c008d98  0002e040  2**0
                  CONTENTS
  4 .ARM          00000008  0c008d98  0c008d98  00018d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c008da0  0c008da0  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c008da0  0c008da0  00018da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c008da4  0c008da4  00018da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  30000000  0c008da8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00001b40  30000168  30000168  00030168  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30001ca8  30001ca8  00030168  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_info   00016a81  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002f41  00000000  00000000  00044af7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001248  00000000  00000000  00047a38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001148  00000000  00000000  00048c80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002bbaa  00000000  00000000  00049dc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001682f  00000000  00000000  00075972  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010e556  00000000  00000000  0008c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0019a6f7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005448  00000000  00000000  0019a748  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000168 	.word	0x30000168
 c000210:	00000000 	.word	0x00000000
 c000214:	0c0087c0 	.word	0x0c0087c0

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	3000016c 	.word	0x3000016c
 c000230:	0c0087c0 	.word	0x0c0087c0

0c000234 <cmse_check_address_range>:
 c000234:	43c3      	mvns	r3, r0
 c000236:	428b      	cmp	r3, r1
 c000238:	d36d      	bcc.n	c000316 <cmse_check_address_range+0xe2>
 c00023a:	f032 031f 	bics.w	r3, r2, #31
 c00023e:	d16a      	bne.n	c000316 <cmse_check_address_range+0xe2>
 c000240:	3901      	subs	r1, #1
 c000242:	f002 0314 	and.w	r3, r2, #20
 c000246:	4401      	add	r1, r0
 c000248:	b500      	push	{lr}
 c00024a:	ea81 0c00 	eor.w	ip, r1, r0
 c00024e:	2b14      	cmp	r3, #20
 c000250:	d80e      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000252:	e8df f003 	tbb	[pc, r3]
 c000256:	0d3f      	.short	0x0d3f
 c000258:	0d480d0d 	.word	0x0d480d0d
 c00025c:	0d0d0d0d 	.word	0x0d0d0d0d
 c000260:	0d0d0d0d 	.word	0x0d0d0d0d
 c000264:	0d510d0d 	.word	0x0d510d0d
 c000268:	0d0d      	.short	0x0d0d
 c00026a:	10          	.byte	0x10
 c00026b:	00          	.byte	0x00
 c00026c:	02db      	lsls	r3, r3, #11
 c00026e:	d400      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c000270:	2000      	movs	r0, #0
 c000272:	f85d fb04 	ldr.w	pc, [sp], #4
 c000276:	f1bc 0f1f 	cmp.w	ip, #31
 c00027a:	e840 f3c0 	ttat	r3, r0
 c00027e:	d904      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000280:	469c      	mov	ip, r3
 c000282:	e841 f3c0 	ttat	r3, r1
 c000286:	459c      	cmp	ip, r3
 c000288:	d1f2      	bne.n	c000270 <cmse_check_address_range+0x3c>
 c00028a:	f022 0214 	bic.w	r2, r2, #20
 c00028e:	3a01      	subs	r2, #1
 c000290:	2a0a      	cmp	r2, #10
 c000292:	d8ed      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000294:	a101      	add	r1, pc, #4	; (adr r1, c00029c <cmse_check_address_range+0x68>)
 c000296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00029a:	bf00      	nop
 c00029c:	0c0002cf 	.word	0x0c0002cf
 c0002a0:	0c000311 	.word	0x0c000311
 c0002a4:	0c0002c9 	.word	0x0c0002c9
 c0002a8:	0c000271 	.word	0x0c000271
 c0002ac:	0c000271 	.word	0x0c000271
 c0002b0:	0c000271 	.word	0x0c000271
 c0002b4:	0c000271 	.word	0x0c000271
 c0002b8:	0c00030b 	.word	0x0c00030b
 c0002bc:	0c0002cf 	.word	0x0c0002cf
 c0002c0:	0c00026d 	.word	0x0c00026d
 c0002c4:	0c0002c9 	.word	0x0c0002c9
 c0002c8:	029a      	lsls	r2, r3, #10
 c0002ca:	d4d2      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002cc:	e7d0      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002ce:	031a      	lsls	r2, r3, #12
 c0002d0:	d4cf      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002d2:	e7cd      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002d4:	f1bc 0f1f 	cmp.w	ip, #31
 c0002d8:	e840 f300 	tt	r3, r0
 c0002dc:	d9d5      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002de:	469c      	mov	ip, r3
 c0002e0:	e841 f300 	tt	r3, r1
 c0002e4:	e7cf      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002e6:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ea:	e840 f340 	ttt	r3, r0
 c0002ee:	d9cc      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002f0:	469c      	mov	ip, r3
 c0002f2:	e841 f340 	ttt	r3, r1
 c0002f6:	e7c6      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002f8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fc:	e840 f380 	tta	r3, r0
 c000300:	d9c3      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000302:	469c      	mov	ip, r3
 c000304:	e841 f380 	tta	r3, r1
 c000308:	e7bd      	b.n	c000286 <cmse_check_address_range+0x52>
 c00030a:	035b      	lsls	r3, r3, #13
 c00030c:	d5b0      	bpl.n	c000270 <cmse_check_address_range+0x3c>
 c00030e:	e7b0      	b.n	c000272 <cmse_check_address_range+0x3e>
 c000310:	0259      	lsls	r1, r3, #9
 c000312:	d5ae      	bpl.n	c000272 <cmse_check_address_range+0x3e>
 c000314:	e7ac      	b.n	c000270 <cmse_check_address_range+0x3c>
 c000316:	2000      	movs	r0, #0
 c000318:	4770      	bx	lr
 c00031a:	bf00      	nop

0c00031c <__gnu_cmse_nonsecure_call>:
 c00031c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000320:	4627      	mov	r7, r4
 c000322:	46a0      	mov	r8, r4
 c000324:	46a1      	mov	r9, r4
 c000326:	46a2      	mov	sl, r4
 c000328:	46a3      	mov	fp, r4
 c00032a:	46a4      	mov	ip, r4
 c00032c:	ed2d 8b10 	vpush	{d8-d15}
 c000330:	f04f 0500 	mov.w	r5, #0
 c000334:	ec45 5b18 	vmov	d8, r5, r5
 c000338:	ec45 5a19 	vmov	s18, s19, r5, r5
 c00033c:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000340:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000344:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000348:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c00034c:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000350:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000354:	eef1 5a10 	vmrs	r5, fpscr
 c000358:	f64f 7660 	movw	r6, #65376	; 0xff60
 c00035c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000360:	4035      	ands	r5, r6
 c000362:	eee1 5a10 	vmsr	fpscr, r5
 c000366:	f384 8800 	msr	CPSR_f, r4
 c00036a:	4625      	mov	r5, r4
 c00036c:	4626      	mov	r6, r4
 c00036e:	47a4      	blxns	r4
 c000370:	ecbd 8b10 	vpop	{d8-d15}
 c000374:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000378 <__aeabi_uldivmod>:
 c000378:	b953      	cbnz	r3, c000390 <__aeabi_uldivmod+0x18>
 c00037a:	b94a      	cbnz	r2, c000390 <__aeabi_uldivmod+0x18>
 c00037c:	2900      	cmp	r1, #0
 c00037e:	bf08      	it	eq
 c000380:	2800      	cmpeq	r0, #0
 c000382:	bf1c      	itt	ne
 c000384:	f04f 31ff 	movne.w	r1, #4294967295
 c000388:	f04f 30ff 	movne.w	r0, #4294967295
 c00038c:	f000 b982 	b.w	c000694 <__aeabi_idiv0>
 c000390:	f1ad 0c08 	sub.w	ip, sp, #8
 c000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000398:	f000 f806 	bl	c0003a8 <__udivmoddi4>
 c00039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0003a4:	b004      	add	sp, #16
 c0003a6:	4770      	bx	lr

0c0003a8 <__udivmoddi4>:
 c0003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0003ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0003ae:	4604      	mov	r4, r0
 c0003b0:	460f      	mov	r7, r1
 c0003b2:	2b00      	cmp	r3, #0
 c0003b4:	d148      	bne.n	c000448 <__udivmoddi4+0xa0>
 c0003b6:	428a      	cmp	r2, r1
 c0003b8:	4694      	mov	ip, r2
 c0003ba:	d961      	bls.n	c000480 <__udivmoddi4+0xd8>
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	b143      	cbz	r3, c0003d4 <__udivmoddi4+0x2c>
 c0003c2:	f1c3 0120 	rsb	r1, r3, #32
 c0003c6:	409f      	lsls	r7, r3
 c0003c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0003cc:	409c      	lsls	r4, r3
 c0003ce:	fa20 f101 	lsr.w	r1, r0, r1
 c0003d2:	430f      	orrs	r7, r1
 c0003d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c0003d8:	fa1f fe8c 	uxth.w	lr, ip
 c0003dc:	0c22      	lsrs	r2, r4, #16
 c0003de:	fbb7 f6f1 	udiv	r6, r7, r1
 c0003e2:	fb01 7716 	mls	r7, r1, r6, r7
 c0003e6:	fb06 f00e 	mul.w	r0, r6, lr
 c0003ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0003ee:	4290      	cmp	r0, r2
 c0003f0:	d908      	bls.n	c000404 <__udivmoddi4+0x5c>
 c0003f2:	eb1c 0202 	adds.w	r2, ip, r2
 c0003f6:	f106 37ff 	add.w	r7, r6, #4294967295
 c0003fa:	d202      	bcs.n	c000402 <__udivmoddi4+0x5a>
 c0003fc:	4290      	cmp	r0, r2
 c0003fe:	f200 8137 	bhi.w	c000670 <__udivmoddi4+0x2c8>
 c000402:	463e      	mov	r6, r7
 c000404:	1a12      	subs	r2, r2, r0
 c000406:	b2a4      	uxth	r4, r4
 c000408:	fbb2 f0f1 	udiv	r0, r2, r1
 c00040c:	fb01 2210 	mls	r2, r1, r0, r2
 c000410:	fb00 fe0e 	mul.w	lr, r0, lr
 c000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000418:	45a6      	cmp	lr, r4
 c00041a:	d908      	bls.n	c00042e <__udivmoddi4+0x86>
 c00041c:	eb1c 0404 	adds.w	r4, ip, r4
 c000420:	f100 32ff 	add.w	r2, r0, #4294967295
 c000424:	d202      	bcs.n	c00042c <__udivmoddi4+0x84>
 c000426:	45a6      	cmp	lr, r4
 c000428:	f200 811c 	bhi.w	c000664 <__udivmoddi4+0x2bc>
 c00042c:	4610      	mov	r0, r2
 c00042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000432:	eba4 040e 	sub.w	r4, r4, lr
 c000436:	2600      	movs	r6, #0
 c000438:	b11d      	cbz	r5, c000442 <__udivmoddi4+0x9a>
 c00043a:	40dc      	lsrs	r4, r3
 c00043c:	2300      	movs	r3, #0
 c00043e:	e9c5 4300 	strd	r4, r3, [r5]
 c000442:	4631      	mov	r1, r6
 c000444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000448:	428b      	cmp	r3, r1
 c00044a:	d909      	bls.n	c000460 <__udivmoddi4+0xb8>
 c00044c:	2d00      	cmp	r5, #0
 c00044e:	f000 80fd 	beq.w	c00064c <__udivmoddi4+0x2a4>
 c000452:	2600      	movs	r6, #0
 c000454:	e9c5 0100 	strd	r0, r1, [r5]
 c000458:	4630      	mov	r0, r6
 c00045a:	4631      	mov	r1, r6
 c00045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000460:	fab3 f683 	clz	r6, r3
 c000464:	2e00      	cmp	r6, #0
 c000466:	d14b      	bne.n	c000500 <__udivmoddi4+0x158>
 c000468:	428b      	cmp	r3, r1
 c00046a:	f0c0 80f2 	bcc.w	c000652 <__udivmoddi4+0x2aa>
 c00046e:	4282      	cmp	r2, r0
 c000470:	f240 80ef 	bls.w	c000652 <__udivmoddi4+0x2aa>
 c000474:	4630      	mov	r0, r6
 c000476:	2d00      	cmp	r5, #0
 c000478:	d0e3      	beq.n	c000442 <__udivmoddi4+0x9a>
 c00047a:	e9c5 4700 	strd	r4, r7, [r5]
 c00047e:	e7e0      	b.n	c000442 <__udivmoddi4+0x9a>
 c000480:	b902      	cbnz	r2, c000484 <__udivmoddi4+0xdc>
 c000482:	deff      	udf	#255	; 0xff
 c000484:	fab2 f382 	clz	r3, r2
 c000488:	2b00      	cmp	r3, #0
 c00048a:	f040 809d 	bne.w	c0005c8 <__udivmoddi4+0x220>
 c00048e:	1a89      	subs	r1, r1, r2
 c000490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000494:	b297      	uxth	r7, r2
 c000496:	2601      	movs	r6, #1
 c000498:	0c20      	lsrs	r0, r4, #16
 c00049a:	fbb1 f2fe 	udiv	r2, r1, lr
 c00049e:	fb0e 1112 	mls	r1, lr, r2, r1
 c0004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0004a6:	fb07 f002 	mul.w	r0, r7, r2
 c0004aa:	4288      	cmp	r0, r1
 c0004ac:	d90f      	bls.n	c0004ce <__udivmoddi4+0x126>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f102 38ff 	add.w	r8, r2, #4294967295
 c0004b6:	bf2c      	ite	cs
 c0004b8:	f04f 0901 	movcs.w	r9, #1
 c0004bc:	f04f 0900 	movcc.w	r9, #0
 c0004c0:	4288      	cmp	r0, r1
 c0004c2:	d903      	bls.n	c0004cc <__udivmoddi4+0x124>
 c0004c4:	f1b9 0f00 	cmp.w	r9, #0
 c0004c8:	f000 80cf 	beq.w	c00066a <__udivmoddi4+0x2c2>
 c0004cc:	4642      	mov	r2, r8
 c0004ce:	1a09      	subs	r1, r1, r0
 c0004d0:	b2a4      	uxth	r4, r4
 c0004d2:	fbb1 f0fe 	udiv	r0, r1, lr
 c0004d6:	fb0e 1110 	mls	r1, lr, r0, r1
 c0004da:	fb00 f707 	mul.w	r7, r0, r7
 c0004de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c0004e2:	42a7      	cmp	r7, r4
 c0004e4:	d908      	bls.n	c0004f8 <__udivmoddi4+0x150>
 c0004e6:	eb1c 0404 	adds.w	r4, ip, r4
 c0004ea:	f100 31ff 	add.w	r1, r0, #4294967295
 c0004ee:	d202      	bcs.n	c0004f6 <__udivmoddi4+0x14e>
 c0004f0:	42a7      	cmp	r7, r4
 c0004f2:	f200 80b4 	bhi.w	c00065e <__udivmoddi4+0x2b6>
 c0004f6:	4608      	mov	r0, r1
 c0004f8:	1be4      	subs	r4, r4, r7
 c0004fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0004fe:	e79b      	b.n	c000438 <__udivmoddi4+0x90>
 c000500:	f1c6 0720 	rsb	r7, r6, #32
 c000504:	40b3      	lsls	r3, r6
 c000506:	fa01 f406 	lsl.w	r4, r1, r6
 c00050a:	fa22 fc07 	lsr.w	ip, r2, r7
 c00050e:	40f9      	lsrs	r1, r7
 c000510:	40b2      	lsls	r2, r6
 c000512:	ea4c 0c03 	orr.w	ip, ip, r3
 c000516:	fa20 f307 	lsr.w	r3, r0, r7
 c00051a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00051e:	431c      	orrs	r4, r3
 c000520:	fa1f fe8c 	uxth.w	lr, ip
 c000524:	fa00 f306 	lsl.w	r3, r0, r6
 c000528:	0c20      	lsrs	r0, r4, #16
 c00052a:	fbb1 f8f9 	udiv	r8, r1, r9
 c00052e:	fb09 1118 	mls	r1, r9, r8, r1
 c000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000536:	fb08 f00e 	mul.w	r0, r8, lr
 c00053a:	4288      	cmp	r0, r1
 c00053c:	d90f      	bls.n	c00055e <__udivmoddi4+0x1b6>
 c00053e:	eb1c 0101 	adds.w	r1, ip, r1
 c000542:	f108 3aff 	add.w	sl, r8, #4294967295
 c000546:	bf2c      	ite	cs
 c000548:	f04f 0b01 	movcs.w	fp, #1
 c00054c:	f04f 0b00 	movcc.w	fp, #0
 c000550:	4288      	cmp	r0, r1
 c000552:	d903      	bls.n	c00055c <__udivmoddi4+0x1b4>
 c000554:	f1bb 0f00 	cmp.w	fp, #0
 c000558:	f000 808d 	beq.w	c000676 <__udivmoddi4+0x2ce>
 c00055c:	46d0      	mov	r8, sl
 c00055e:	1a09      	subs	r1, r1, r0
 c000560:	b2a4      	uxth	r4, r4
 c000562:	fbb1 f0f9 	udiv	r0, r1, r9
 c000566:	fb09 1110 	mls	r1, r9, r0, r1
 c00056a:	fb00 fe0e 	mul.w	lr, r0, lr
 c00056e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000572:	458e      	cmp	lr, r1
 c000574:	d907      	bls.n	c000586 <__udivmoddi4+0x1de>
 c000576:	eb1c 0101 	adds.w	r1, ip, r1
 c00057a:	f100 34ff 	add.w	r4, r0, #4294967295
 c00057e:	d201      	bcs.n	c000584 <__udivmoddi4+0x1dc>
 c000580:	458e      	cmp	lr, r1
 c000582:	d87f      	bhi.n	c000684 <__udivmoddi4+0x2dc>
 c000584:	4620      	mov	r0, r4
 c000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c00058a:	eba1 010e 	sub.w	r1, r1, lr
 c00058e:	fba0 9802 	umull	r9, r8, r0, r2
 c000592:	4541      	cmp	r1, r8
 c000594:	464c      	mov	r4, r9
 c000596:	46c6      	mov	lr, r8
 c000598:	d302      	bcc.n	c0005a0 <__udivmoddi4+0x1f8>
 c00059a:	d106      	bne.n	c0005aa <__udivmoddi4+0x202>
 c00059c:	454b      	cmp	r3, r9
 c00059e:	d204      	bcs.n	c0005aa <__udivmoddi4+0x202>
 c0005a0:	3801      	subs	r0, #1
 c0005a2:	ebb9 0402 	subs.w	r4, r9, r2
 c0005a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0005aa:	2d00      	cmp	r5, #0
 c0005ac:	d070      	beq.n	c000690 <__udivmoddi4+0x2e8>
 c0005ae:	1b1a      	subs	r2, r3, r4
 c0005b0:	eb61 010e 	sbc.w	r1, r1, lr
 c0005b4:	fa22 f306 	lsr.w	r3, r2, r6
 c0005b8:	fa01 f707 	lsl.w	r7, r1, r7
 c0005bc:	40f1      	lsrs	r1, r6
 c0005be:	2600      	movs	r6, #0
 c0005c0:	431f      	orrs	r7, r3
 c0005c2:	e9c5 7100 	strd	r7, r1, [r5]
 c0005c6:	e73c      	b.n	c000442 <__udivmoddi4+0x9a>
 c0005c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0005cc:	f1c3 0020 	rsb	r0, r3, #32
 c0005d0:	fa01 f203 	lsl.w	r2, r1, r3
 c0005d4:	fa21 f600 	lsr.w	r6, r1, r0
 c0005d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c0005dc:	fa24 f100 	lsr.w	r1, r4, r0
 c0005e0:	fa1f f78c 	uxth.w	r7, ip
 c0005e4:	409c      	lsls	r4, r3
 c0005e6:	4311      	orrs	r1, r2
 c0005e8:	fbb6 f0fe 	udiv	r0, r6, lr
 c0005ec:	0c0a      	lsrs	r2, r1, #16
 c0005ee:	fb0e 6610 	mls	r6, lr, r0, r6
 c0005f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0005f6:	fb00 f607 	mul.w	r6, r0, r7
 c0005fa:	4296      	cmp	r6, r2
 c0005fc:	d90e      	bls.n	c00061c <__udivmoddi4+0x274>
 c0005fe:	eb1c 0202 	adds.w	r2, ip, r2
 c000602:	f100 38ff 	add.w	r8, r0, #4294967295
 c000606:	bf2c      	ite	cs
 c000608:	f04f 0901 	movcs.w	r9, #1
 c00060c:	f04f 0900 	movcc.w	r9, #0
 c000610:	4296      	cmp	r6, r2
 c000612:	d902      	bls.n	c00061a <__udivmoddi4+0x272>
 c000614:	f1b9 0f00 	cmp.w	r9, #0
 c000618:	d031      	beq.n	c00067e <__udivmoddi4+0x2d6>
 c00061a:	4640      	mov	r0, r8
 c00061c:	1b92      	subs	r2, r2, r6
 c00061e:	b289      	uxth	r1, r1
 c000620:	fbb2 f6fe 	udiv	r6, r2, lr
 c000624:	fb0e 2216 	mls	r2, lr, r6, r2
 c000628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c00062c:	fb06 f207 	mul.w	r2, r6, r7
 c000630:	428a      	cmp	r2, r1
 c000632:	d907      	bls.n	c000644 <__udivmoddi4+0x29c>
 c000634:	eb1c 0101 	adds.w	r1, ip, r1
 c000638:	f106 38ff 	add.w	r8, r6, #4294967295
 c00063c:	d201      	bcs.n	c000642 <__udivmoddi4+0x29a>
 c00063e:	428a      	cmp	r2, r1
 c000640:	d823      	bhi.n	c00068a <__udivmoddi4+0x2e2>
 c000642:	4646      	mov	r6, r8
 c000644:	1a89      	subs	r1, r1, r2
 c000646:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c00064a:	e725      	b.n	c000498 <__udivmoddi4+0xf0>
 c00064c:	462e      	mov	r6, r5
 c00064e:	4628      	mov	r0, r5
 c000650:	e6f7      	b.n	c000442 <__udivmoddi4+0x9a>
 c000652:	1a84      	subs	r4, r0, r2
 c000654:	eb61 0303 	sbc.w	r3, r1, r3
 c000658:	2001      	movs	r0, #1
 c00065a:	461f      	mov	r7, r3
 c00065c:	e70b      	b.n	c000476 <__udivmoddi4+0xce>
 c00065e:	4464      	add	r4, ip
 c000660:	3802      	subs	r0, #2
 c000662:	e749      	b.n	c0004f8 <__udivmoddi4+0x150>
 c000664:	4464      	add	r4, ip
 c000666:	3802      	subs	r0, #2
 c000668:	e6e1      	b.n	c00042e <__udivmoddi4+0x86>
 c00066a:	3a02      	subs	r2, #2
 c00066c:	4461      	add	r1, ip
 c00066e:	e72e      	b.n	c0004ce <__udivmoddi4+0x126>
 c000670:	3e02      	subs	r6, #2
 c000672:	4462      	add	r2, ip
 c000674:	e6c6      	b.n	c000404 <__udivmoddi4+0x5c>
 c000676:	f1a8 0802 	sub.w	r8, r8, #2
 c00067a:	4461      	add	r1, ip
 c00067c:	e76f      	b.n	c00055e <__udivmoddi4+0x1b6>
 c00067e:	3802      	subs	r0, #2
 c000680:	4462      	add	r2, ip
 c000682:	e7cb      	b.n	c00061c <__udivmoddi4+0x274>
 c000684:	3802      	subs	r0, #2
 c000686:	4461      	add	r1, ip
 c000688:	e77d      	b.n	c000586 <__udivmoddi4+0x1de>
 c00068a:	3e02      	subs	r6, #2
 c00068c:	4461      	add	r1, ip
 c00068e:	e7d9      	b.n	c000644 <__udivmoddi4+0x29c>
 c000690:	462e      	mov	r6, r5
 c000692:	e6d6      	b.n	c000442 <__udivmoddi4+0x9a>

0c000694 <__aeabi_idiv0>:
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop

0c000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000698:	b580      	push	{r7, lr}
 c00069a:	b086      	sub	sp, #24
 c00069c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00069e:	f001 fee6 	bl	c00246e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006a2:	f000 f8e1 	bl	c000868 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006a6:	f000 f935 	bl	c000914 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006aa:	f000 fb6b 	bl	c000d84 <MX_GPIO_Init>
  MX_DMA_Init();
 c0006ae:	f000 fa87 	bl	c000bc0 <MX_DMA_Init>
  MX_ICACHE_Init();
 c0006b2:	f000 f9e5 	bl	c000a80 <MX_ICACHE_Init>
  MX_SPI3_Init();
 c0006b6:	f000 f9f7 	bl	c000aa8 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 c0006ba:	f000 fa33 	bl	c000b24 <MX_USART1_UART_Init>
//MX_IWDG_Init();
  MX_HASH_Init();
 c0006be:	f000 f9cd 	bl	c000a5c <MX_HASH_Init>

  /* USER CODE BEGIN 2 */
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, NonsecureToSecureTransferComplete);
 c0006c2:	4a36      	ldr	r2, [pc, #216]	; (c00079c <main+0x104>)
 c0006c4:	2100      	movs	r1, #0
 c0006c6:	4836      	ldr	r0, [pc, #216]	; (c0007a0 <main+0x108>)
 c0006c8:	f002 faa0 	bl	c002c0c <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_ERROR_CB_ID, NonsecureToSecureTransferError);
 c0006cc:	4a35      	ldr	r2, [pc, #212]	; (c0007a4 <main+0x10c>)
 c0006ce:	2104      	movs	r1, #4
 c0006d0:	4833      	ldr	r0, [pc, #204]	; (c0007a0 <main+0x108>)
 c0006d2:	f002 fa9b 	bl	c002c0c <HAL_DMA_RegisterCallback>

  /************* NOT USED *******************/
  /* DMA1 Channel4: Select Callbacks functions called after Transfer complete and Transfer error */ /*NOT USED***********/
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_CPLT_CB_ID, SecureToSecureTransferComplete);
 c0006d6:	4a34      	ldr	r2, [pc, #208]	; (c0007a8 <main+0x110>)
 c0006d8:	2100      	movs	r1, #0
 c0006da:	4834      	ldr	r0, [pc, #208]	; (c0007ac <main+0x114>)
 c0006dc:	f002 fa96 	bl	c002c0c <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel4, HAL_DMA_XFER_ERROR_CB_ID, SecureToSecureTransferError);
 c0006e0:	4a33      	ldr	r2, [pc, #204]	; (c0007b0 <main+0x118>)
 c0006e2:	2104      	movs	r1, #4
 c0006e4:	4831      	ldr	r0, [pc, #196]	; (c0007ac <main+0x114>)
 c0006e6:	f002 fa91 	bl	c002c0c <HAL_DMA_RegisterCallback>


  /******************************* BUILD THE INITIAL MEMORY HASH TABLE *********************************************/
  printf("SECURE START: \n\r");
 c0006ea:	4832      	ldr	r0, [pc, #200]	; (c0007b4 <main+0x11c>)
 c0006ec:	f006 fedc 	bl	c0074a8 <iprintf>
  uint32_t* current_address = (uint32_t*) NSEC_MEM_START;
 c0006f0:	4b31      	ldr	r3, [pc, #196]	; (c0007b8 <main+0x120>)
 c0006f2:	60fb      	str	r3, [r7, #12]
  int count = 0;
 c0006f4:	2300      	movs	r3, #0
 c0006f6:	60bb      	str	r3, [r7, #8]
  while((uint32_t) current_address <= NSEC_MEM_END && (NSEC_MEM_END - (uint32_t)current_address) +1 >= BUFFER_SIZE){
 c0006f8:	e040      	b.n	c00077c <main+0xe4>
	  //get the current block
	  if(HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t)current_address, (uint32_t)&SEC_Mem_Buffer, BUFFER_SIZE/4) != HAL_OK){
 c0006fa:	68f9      	ldr	r1, [r7, #12]
 c0006fc:	4a2f      	ldr	r2, [pc, #188]	; (c0007bc <main+0x124>)
 c0006fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 c000702:	4827      	ldr	r0, [pc, #156]	; (c0007a0 <main+0x108>)
 c000704:	f002 f906 	bl	c002914 <HAL_DMA_Start_IT>
 c000708:	4603      	mov	r3, r0
 c00070a:	2b00      	cmp	r3, #0
 c00070c:	d002      	beq.n	c000714 <main+0x7c>
	 	  printf("could not start the secure to secure memory transfer.\n\r");
 c00070e:	482c      	ldr	r0, [pc, #176]	; (c0007c0 <main+0x128>)
 c000710:	f006 feca 	bl	c0074a8 <iprintf>
	   }
	  //wait for completion
	  while ((NonsecureToSecureTransferCompleteDetected == 0) &&
 c000714:	bf00      	nop
 c000716:	4b2b      	ldr	r3, [pc, #172]	; (c0007c4 <main+0x12c>)
 c000718:	681b      	ldr	r3, [r3, #0]
 c00071a:	2b00      	cmp	r3, #0
 c00071c:	d103      	bne.n	c000726 <main+0x8e>
	         (NonsecureToSecureTransferErrorDetected == 0));
 c00071e:	4b2a      	ldr	r3, [pc, #168]	; (c0007c8 <main+0x130>)
 c000720:	681b      	ldr	r3, [r3, #0]
	  while ((NonsecureToSecureTransferCompleteDetected == 0) &&
 c000722:	2b00      	cmp	r3, #0
 c000724:	d0f7      	beq.n	c000716 <main+0x7e>

	  //compute the hash
	  if(HAL_HASH_MD5_Start(&hhash, (uint8_t*)SEC_Mem_Buffer, BUFFER_SIZE, SEC_Mem_Digest, 0xff) != HAL_OK){
 c000726:	23ff      	movs	r3, #255	; 0xff
 c000728:	9300      	str	r3, [sp, #0]
 c00072a:	4b28      	ldr	r3, [pc, #160]	; (c0007cc <main+0x134>)
 c00072c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c000730:	4922      	ldr	r1, [pc, #136]	; (c0007bc <main+0x124>)
 c000732:	4827      	ldr	r0, [pc, #156]	; (c0007d0 <main+0x138>)
 c000734:	f002 ff66 	bl	c003604 <HAL_HASH_MD5_Start>
 c000738:	4603      	mov	r3, r0
 c00073a:	2b00      	cmp	r3, #0
 c00073c:	d002      	beq.n	c000744 <main+0xac>
		  printf("There's an issue with the hash operation\n\r");
 c00073e:	4825      	ldr	r0, [pc, #148]	; (c0007d4 <main+0x13c>)
 c000740:	f006 feb2 	bl	c0074a8 <iprintf>
	  }

	  //store the hash in the memory hashes buffer
	  for(int i = 0; i < 16; i++){
 c000744:	2300      	movs	r3, #0
 c000746:	607b      	str	r3, [r7, #4]
 c000748:	e00e      	b.n	c000768 <main+0xd0>
		  SEC_Mem_Hashes[count][i] = SEC_Mem_Digest[i];
 c00074a:	4a20      	ldr	r2, [pc, #128]	; (c0007cc <main+0x134>)
 c00074c:	687b      	ldr	r3, [r7, #4]
 c00074e:	4413      	add	r3, r2
 c000750:	7819      	ldrb	r1, [r3, #0]
 c000752:	4a21      	ldr	r2, [pc, #132]	; (c0007d8 <main+0x140>)
 c000754:	68bb      	ldr	r3, [r7, #8]
 c000756:	011b      	lsls	r3, r3, #4
 c000758:	441a      	add	r2, r3
 c00075a:	687b      	ldr	r3, [r7, #4]
 c00075c:	4413      	add	r3, r2
 c00075e:	460a      	mov	r2, r1
 c000760:	701a      	strb	r2, [r3, #0]
	  for(int i = 0; i < 16; i++){
 c000762:	687b      	ldr	r3, [r7, #4]
 c000764:	3301      	adds	r3, #1
 c000766:	607b      	str	r3, [r7, #4]
 c000768:	687b      	ldr	r3, [r7, #4]
 c00076a:	2b0f      	cmp	r3, #15
 c00076c:	dded      	ble.n	c00074a <main+0xb2>
	  }

	  //increment variables
	  count++;
 c00076e:	68bb      	ldr	r3, [r7, #8]
 c000770:	3301      	adds	r3, #1
 c000772:	60bb      	str	r3, [r7, #8]
	  current_address += BUFFER_SIZE/4;
 c000774:	68fb      	ldr	r3, [r7, #12]
 c000776:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 c00077a:	60fb      	str	r3, [r7, #12]
  while((uint32_t) current_address <= NSEC_MEM_END && (NSEC_MEM_END - (uint32_t)current_address) +1 >= BUFFER_SIZE){
 c00077c:	68fb      	ldr	r3, [r7, #12]
 c00077e:	4a17      	ldr	r2, [pc, #92]	; (c0007dc <main+0x144>)
 c000780:	4293      	cmp	r3, r2
 c000782:	d807      	bhi.n	c000794 <main+0xfc>
 c000784:	68fb      	ldr	r3, [r7, #12]
 c000786:	f1c3 6300 	rsb	r3, r3, #134217728	; 0x8000000
 c00078a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
 c00078e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c000792:	d2b2      	bcs.n	c0006fa <main+0x62>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000794:	f000 f824 	bl	c0007e0 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000798:	e7fe      	b.n	c000798 <main+0x100>
 c00079a:	bf00      	nop
 c00079c:	0c000fcd 	.word	0x0c000fcd
 c0007a0:	30000390 	.word	0x30000390
 c0007a4:	0c000fed 	.word	0x0c000fed
 c0007a8:	0c00100d 	.word	0x0c00100d
 c0007ac:	300003f8 	.word	0x300003f8
 c0007b0:	0c00102d 	.word	0x0c00102d
 c0007b4:	0c0087d8 	.word	0x0c0087d8
 c0007b8:	08040000 	.word	0x08040000
 c0007bc:	30000474 	.word	0x30000474
 c0007c0:	0c0087ec 	.word	0x0c0087ec
 c0007c4:	30000464 	.word	0x30000464
 c0007c8:	30000468 	.word	0x30000468
 c0007cc:	30000874 	.word	0x30000874
 c0007d0:	30000184 	.word	0x30000184
 c0007d4:	0c008824 	.word	0x0c008824
 c0007d8:	30000884 	.word	0x30000884
 c0007dc:	0807ffff 	.word	0x0807ffff

0c0007e0 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c0007e0:	b590      	push	{r4, r7, lr}
 c0007e2:	b083      	sub	sp, #12
 c0007e4:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c0007e6:	4b1d      	ldr	r3, [pc, #116]	; (c00085c <NonSecure_Init+0x7c>)
 c0007e8:	4a1d      	ldr	r2, [pc, #116]	; (c000860 <NonSecure_Init+0x80>)
 c0007ea:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c0007ec:	4b1c      	ldr	r3, [pc, #112]	; (c000860 <NonSecure_Init+0x80>)
 c0007ee:	681b      	ldr	r3, [r3, #0]
 c0007f0:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c0007f2:	683b      	ldr	r3, [r7, #0]
 c0007f4:	f383 8888 	msr	MSP_NS, r3
}
 c0007f8:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c0007fa:	4b1a      	ldr	r3, [pc, #104]	; (c000864 <NonSecure_Init+0x84>)
 c0007fc:	681b      	ldr	r3, [r3, #0]
 c0007fe:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000800:	687b      	ldr	r3, [r7, #4]
 c000802:	461c      	mov	r4, r3
 c000804:	0864      	lsrs	r4, r4, #1
 c000806:	0064      	lsls	r4, r4, #1
 c000808:	4620      	mov	r0, r4
 c00080a:	4621      	mov	r1, r4
 c00080c:	4622      	mov	r2, r4
 c00080e:	4623      	mov	r3, r4
 c000810:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000814:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000818:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00081c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000820:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000824:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000828:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00082c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000830:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000834:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000838:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00083c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000840:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000844:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00084c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000850:	f7ff fd64 	bl	c00031c <__gnu_cmse_nonsecure_call>
}
 c000854:	bf00      	nop
 c000856:	370c      	adds	r7, #12
 c000858:	46bd      	mov	sp, r7
 c00085a:	bd90      	pop	{r4, r7, pc}
 c00085c:	e002ed00 	.word	0xe002ed00
 c000860:	08040000 	.word	0x08040000
 c000864:	08040004 	.word	0x08040004

0c000868 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c000868:	b580      	push	{r7, lr}
 c00086a:	b098      	sub	sp, #96	; 0x60
 c00086c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c00086e:	f107 0318 	add.w	r3, r7, #24
 c000872:	2248      	movs	r2, #72	; 0x48
 c000874:	2100      	movs	r1, #0
 c000876:	4618      	mov	r0, r3
 c000878:	f006 fe0e 	bl	c007498 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c00087c:	1d3b      	adds	r3, r7, #4
 c00087e:	2200      	movs	r2, #0
 c000880:	601a      	str	r2, [r3, #0]
 c000882:	605a      	str	r2, [r3, #4]
 c000884:	609a      	str	r2, [r3, #8]
 c000886:	60da      	str	r2, [r3, #12]
 c000888:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c00088a:	2000      	movs	r0, #0
 c00088c:	f003 fa0c 	bl	c003ca8 <HAL_PWREx_ControlVoltageScaling>
 c000890:	4603      	mov	r3, r0
 c000892:	2b00      	cmp	r3, #0
 c000894:	d001      	beq.n	c00089a <SystemClock_Config+0x32>
  {
    Error_Handler();
 c000896:	f000 fbd9 	bl	c00104c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_MSI;
 c00089a:	2318      	movs	r3, #24
 c00089c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.LSIDiv = RCC_LSI_DIV1;
 c00089e:	2300      	movs	r3, #0
 c0008a0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 c0008a2:	2301      	movs	r3, #1
 c0008a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0008a6:	2301      	movs	r3, #1
 c0008a8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0008aa:	2300      	movs	r3, #0
 c0008ac:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0008ae:	23b0      	movs	r3, #176	; 0xb0
 c0008b0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0008b2:	2302      	movs	r3, #2
 c0008b4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0008b6:	2301      	movs	r3, #1
 c0008b8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0008ba:	230c      	movs	r3, #12
 c0008bc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0008be:	2337      	movs	r3, #55	; 0x37
 c0008c0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0008c2:	2307      	movs	r3, #7
 c0008c4:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0008c6:	2302      	movs	r3, #2
 c0008c8:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0008ca:	2302      	movs	r3, #2
 c0008cc:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0008ce:	f107 0318 	add.w	r3, r7, #24
 c0008d2:	4618      	mov	r0, r3
 c0008d4:	f003 fa88 	bl	c003de8 <HAL_RCC_OscConfig>
 c0008d8:	4603      	mov	r3, r0
 c0008da:	2b00      	cmp	r3, #0
 c0008dc:	d001      	beq.n	c0008e2 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 c0008de:	f000 fbb5 	bl	c00104c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0008e2:	230f      	movs	r3, #15
 c0008e4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c0008e6:	2303      	movs	r3, #3
 c0008e8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c0008ea:	2300      	movs	r3, #0
 c0008ec:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c0008ee:	2300      	movs	r3, #0
 c0008f0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c0008f2:	2300      	movs	r3, #0
 c0008f4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c0008f6:	1d3b      	adds	r3, r7, #4
 c0008f8:	2105      	movs	r1, #5
 c0008fa:	4618      	mov	r0, r3
 c0008fc:	f003 ff4a 	bl	c004794 <HAL_RCC_ClockConfig>
 c000900:	4603      	mov	r3, r0
 c000902:	2b00      	cmp	r3, #0
 c000904:	d001      	beq.n	c00090a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 c000906:	f000 fba1 	bl	c00104c <Error_Handler>
  }
}
 c00090a:	bf00      	nop
 c00090c:	3760      	adds	r7, #96	; 0x60
 c00090e:	46bd      	mov	sp, r7
 c000910:	bd80      	pop	{r7, pc}
	...

0c000914 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000914:	b580      	push	{r7, lr}
 c000916:	b09c      	sub	sp, #112	; 0x70
 c000918:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c00091a:	1d3b      	adds	r3, r7, #4
 c00091c:	226c      	movs	r2, #108	; 0x6c
 c00091e:	2100      	movs	r1, #0
 c000920:	4618      	mov	r0, r3
 c000922:	f006 fdb9 	bl	c007498 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_IWDG, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000926:	f240 3101 	movw	r1, #769	; 0x301
 c00092a:	2007      	movs	r0, #7
 c00092c:	f002 fcba 	bl	c0032a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000930:	4603      	mov	r3, r0
 c000932:	2b00      	cmp	r3, #0
 c000934:	d001      	beq.n	c00093a <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c000936:	f000 fb89 	bl	c00104c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00093a:	f240 3101 	movw	r1, #769	; 0x301
 c00093e:	2009      	movs	r0, #9
 c000940:	f002 fcb0 	bl	c0032a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000944:	4603      	mov	r3, r0
 c000946:	2b00      	cmp	r3, #0
 c000948:	d001      	beq.n	c00094e <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c00094a:	f000 fb7f 	bl	c00104c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00094e:	f240 3101 	movw	r1, #769	; 0x301
 c000952:	483f      	ldr	r0, [pc, #252]	; (c000a50 <MX_GTZC_S_Init+0x13c>)
 c000954:	f002 fca6 	bl	c0032a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000958:	4603      	mov	r3, r0
 c00095a:	2b00      	cmp	r3, #0
 c00095c:	d001      	beq.n	c000962 <MX_GTZC_S_Init+0x4e>
  {
    Error_Handler();
 c00095e:	f000 fb75 	bl	c00104c <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_HASH, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000962:	f240 3101 	movw	r1, #769	; 0x301
 c000966:	483b      	ldr	r0, [pc, #236]	; (c000a54 <MX_GTZC_S_Init+0x140>)
 c000968:	f002 fc9c 	bl	c0032a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00096c:	4603      	mov	r3, r0
 c00096e:	2b00      	cmp	r3, #0
 c000970:	d001      	beq.n	c000976 <MX_GTZC_S_Init+0x62>
  {
    Error_Handler();
 c000972:	f000 fb6b 	bl	c00104c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000976:	2300      	movs	r3, #0
 c000978:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00097a:	2300      	movs	r3, #0
 c00097c:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00097e:	f04f 33ff 	mov.w	r3, #4294967295
 c000982:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000984:	f04f 33ff 	mov.w	r3, #4294967295
 c000988:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00098a:	f04f 33ff 	mov.w	r3, #4294967295
 c00098e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000990:	f04f 33ff 	mov.w	r3, #4294967295
 c000994:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000996:	f04f 33ff 	mov.w	r3, #4294967295
 c00099a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c00099c:	f04f 33ff 	mov.w	r3, #4294967295
 c0009a0:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c0009a2:	f04f 33ff 	mov.w	r3, #4294967295
 c0009a6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c0009a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0009ac:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0009ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0009b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0009b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0009b8:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0009ba:	f04f 33ff 	mov.w	r3, #4294967295
 c0009be:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0009c0:	f04f 33ff 	mov.w	r3, #4294967295
 c0009c4:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0009c6:	2300      	movs	r3, #0
 c0009c8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0009ca:	2300      	movs	r3, #0
 c0009cc:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0009ce:	2300      	movs	r3, #0
 c0009d0:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0009d2:	2300      	movs	r3, #0
 c0009d4:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0009d6:	2300      	movs	r3, #0
 c0009d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0009da:	2300      	movs	r3, #0
 c0009dc:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0009de:	2300      	movs	r3, #0
 c0009e0:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0009e2:	2300      	movs	r3, #0
 c0009e4:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0009e6:	2300      	movs	r3, #0
 c0009e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0009ea:	2300      	movs	r3, #0
 c0009ec:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0009ee:	2300      	movs	r3, #0
 c0009f0:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0009f2:	2300      	movs	r3, #0
 c0009f4:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0009f6:	2300      	movs	r3, #0
 c0009f8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0009fa:	1d3b      	adds	r3, r7, #4
 c0009fc:	4619      	mov	r1, r3
 c0009fe:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c000a02:	f002 fd27 	bl	c003454 <HAL_GTZC_MPCBB_ConfigMem>
 c000a06:	4603      	mov	r3, r0
 c000a08:	2b00      	cmp	r3, #0
 c000a0a:	d001      	beq.n	c000a10 <MX_GTZC_S_Init+0xfc>
  {
    Error_Handler();
 c000a0c:	f000 fb1e 	bl	c00104c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000a10:	2300      	movs	r3, #0
 c000a12:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000a14:	2300      	movs	r3, #0
 c000a16:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000a18:	2300      	movs	r3, #0
 c000a1a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000a1c:	2300      	movs	r3, #0
 c000a1e:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000a20:	2300      	movs	r3, #0
 c000a22:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000a24:	2300      	movs	r3, #0
 c000a26:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000a28:	2300      	movs	r3, #0
 c000a2a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000a2c:	2300      	movs	r3, #0
 c000a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000a30:	2300      	movs	r3, #0
 c000a32:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000a34:	1d3b      	adds	r3, r7, #4
 c000a36:	4619      	mov	r1, r3
 c000a38:	4807      	ldr	r0, [pc, #28]	; (c000a58 <MX_GTZC_S_Init+0x144>)
 c000a3a:	f002 fd0b 	bl	c003454 <HAL_GTZC_MPCBB_ConfigMem>
 c000a3e:	4603      	mov	r3, r0
 c000a40:	2b00      	cmp	r3, #0
 c000a42:	d001      	beq.n	c000a48 <MX_GTZC_S_Init+0x134>
  {
    Error_Handler();
 c000a44:	f000 fb02 	bl	c00104c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000a48:	bf00      	nop
 c000a4a:	3770      	adds	r7, #112	; 0x70
 c000a4c:	46bd      	mov	sp, r7
 c000a4e:	bd80      	pop	{r7, pc}
 c000a50:	10000001 	.word	0x10000001
 c000a54:	1000000d 	.word	0x1000000d
 c000a58:	30030000 	.word	0x30030000

0c000a5c <MX_HASH_Init>:
  * @brief HASH Initialization Function
  * @param None
  * @retval None
  */
static void MX_HASH_Init(void)
{
 c000a5c:	b580      	push	{r7, lr}
 c000a5e:	af00      	add	r7, sp, #0
  /* USER CODE END HASH_Init 0 */

  /* USER CODE BEGIN HASH_Init 1 */

  /* USER CODE END HASH_Init 1 */
  hhash.Init.DataType = HASH_DATATYPE_32B;
 c000a60:	4b06      	ldr	r3, [pc, #24]	; (c000a7c <MX_HASH_Init+0x20>)
 c000a62:	2200      	movs	r2, #0
 c000a64:	601a      	str	r2, [r3, #0]
  if (HAL_HASH_Init(&hhash) != HAL_OK)
 c000a66:	4805      	ldr	r0, [pc, #20]	; (c000a7c <MX_HASH_Init+0x20>)
 c000a68:	f002 fd78 	bl	c00355c <HAL_HASH_Init>
 c000a6c:	4603      	mov	r3, r0
 c000a6e:	2b00      	cmp	r3, #0
 c000a70:	d001      	beq.n	c000a76 <MX_HASH_Init+0x1a>
  {
    Error_Handler();
 c000a72:	f000 faeb 	bl	c00104c <Error_Handler>
  }
  /* USER CODE BEGIN HASH_Init 2 */

  /* USER CODE END HASH_Init 2 */

}
 c000a76:	bf00      	nop
 c000a78:	bd80      	pop	{r7, pc}
 c000a7a:	bf00      	nop
 c000a7c:	30000184 	.word	0x30000184

0c000a80 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000a80:	b580      	push	{r7, lr}
 c000a82:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000a84:	2000      	movs	r0, #0
 c000a86:	f003 f8d1 	bl	c003c2c <HAL_ICACHE_ConfigAssociativityMode>
 c000a8a:	4603      	mov	r3, r0
 c000a8c:	2b00      	cmp	r3, #0
 c000a8e:	d001      	beq.n	c000a94 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000a90:	f000 fadc 	bl	c00104c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000a94:	f003 f8ea 	bl	c003c6c <HAL_ICACHE_Enable>
 c000a98:	4603      	mov	r3, r0
 c000a9a:	2b00      	cmp	r3, #0
 c000a9c:	d001      	beq.n	c000aa2 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c000a9e:	f000 fad5 	bl	c00104c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000aa2:	bf00      	nop
 c000aa4:	bd80      	pop	{r7, pc}
	...

0c000aa8 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 c000aa8:	b580      	push	{r7, lr}
 c000aaa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 c000aac:	4b1b      	ldr	r3, [pc, #108]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000aae:	4a1c      	ldr	r2, [pc, #112]	; (c000b20 <MX_SPI3_Init+0x78>)
 c000ab0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 c000ab2:	4b1a      	ldr	r3, [pc, #104]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ab4:	f44f 7282 	mov.w	r2, #260	; 0x104
 c000ab8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 c000aba:	4b18      	ldr	r3, [pc, #96]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000abc:	2200      	movs	r2, #0
 c000abe:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 c000ac0:	4b16      	ldr	r3, [pc, #88]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ac2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 c000ac6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 c000ac8:	4b14      	ldr	r3, [pc, #80]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000aca:	2200      	movs	r2, #0
 c000acc:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 c000ace:	4b13      	ldr	r3, [pc, #76]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ad0:	2200      	movs	r2, #0
 c000ad2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 c000ad4:	4b11      	ldr	r3, [pc, #68]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ad6:	f44f 7200 	mov.w	r2, #512	; 0x200
 c000ada:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 c000adc:	4b0f      	ldr	r3, [pc, #60]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ade:	2220      	movs	r2, #32
 c000ae0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c000ae2:	4b0e      	ldr	r3, [pc, #56]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000ae4:	2200      	movs	r2, #0
 c000ae6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 c000ae8:	4b0c      	ldr	r3, [pc, #48]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000aea:	2200      	movs	r2, #0
 c000aec:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c000aee:	4b0b      	ldr	r3, [pc, #44]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000af0:	2200      	movs	r2, #0
 c000af2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 c000af4:	4b09      	ldr	r3, [pc, #36]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000af6:	2207      	movs	r2, #7
 c000af8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 c000afa:	4b08      	ldr	r3, [pc, #32]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000afc:	2200      	movs	r2, #0
 c000afe:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c000b00:	4b06      	ldr	r3, [pc, #24]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000b02:	2208      	movs	r2, #8
 c000b04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 c000b06:	4805      	ldr	r0, [pc, #20]	; (c000b1c <MX_SPI3_Init+0x74>)
 c000b08:	f004 fe3e 	bl	c005788 <HAL_SPI_Init>
 c000b0c:	4603      	mov	r3, r0
 c000b0e:	2b00      	cmp	r3, #0
 c000b10:	d001      	beq.n	c000b16 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 c000b12:	f000 fa9b 	bl	c00104c <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 c000b16:	bf00      	nop
 c000b18:	bd80      	pop	{r7, pc}
 c000b1a:	bf00      	nop
 c000b1c:	300001c8 	.word	0x300001c8
 c000b20:	50003c00 	.word	0x50003c00

0c000b24 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c000b24:	b580      	push	{r7, lr}
 c000b26:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c000b28:	4b23      	ldr	r3, [pc, #140]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b2a:	4a24      	ldr	r2, [pc, #144]	; (c000bbc <MX_USART1_UART_Init+0x98>)
 c000b2c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c000b2e:	4b22      	ldr	r3, [pc, #136]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b30:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000b34:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000b36:	4b20      	ldr	r3, [pc, #128]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b38:	2200      	movs	r2, #0
 c000b3a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000b3c:	4b1e      	ldr	r3, [pc, #120]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b3e:	2200      	movs	r2, #0
 c000b40:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c000b42:	4b1d      	ldr	r3, [pc, #116]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b44:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000b48:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000b4a:	4b1b      	ldr	r3, [pc, #108]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b4c:	220c      	movs	r2, #12
 c000b4e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000b50:	4b19      	ldr	r3, [pc, #100]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b52:	2200      	movs	r2, #0
 c000b54:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000b56:	4b18      	ldr	r3, [pc, #96]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b58:	2200      	movs	r2, #0
 c000b5a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000b5c:	4b16      	ldr	r3, [pc, #88]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b5e:	2200      	movs	r2, #0
 c000b60:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000b62:	4b15      	ldr	r3, [pc, #84]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b64:	2200      	movs	r2, #0
 c000b66:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000b68:	4b13      	ldr	r3, [pc, #76]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b6a:	2200      	movs	r2, #0
 c000b6c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c000b6e:	4812      	ldr	r0, [pc, #72]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b70:	f005 fd70 	bl	c006654 <HAL_UART_Init>
 c000b74:	4603      	mov	r3, r0
 c000b76:	2b00      	cmp	r3, #0
 c000b78:	d001      	beq.n	c000b7e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c000b7a:	f000 fa67 	bl	c00104c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000b7e:	2100      	movs	r1, #0
 c000b80:	480d      	ldr	r0, [pc, #52]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b82:	f006 fb95 	bl	c0072b0 <HAL_UARTEx_SetTxFifoThreshold>
 c000b86:	4603      	mov	r3, r0
 c000b88:	2b00      	cmp	r3, #0
 c000b8a:	d001      	beq.n	c000b90 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c000b8c:	f000 fa5e 	bl	c00104c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000b90:	2100      	movs	r1, #0
 c000b92:	4809      	ldr	r0, [pc, #36]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000b94:	f006 fbca 	bl	c00732c <HAL_UARTEx_SetRxFifoThreshold>
 c000b98:	4603      	mov	r3, r0
 c000b9a:	2b00      	cmp	r3, #0
 c000b9c:	d001      	beq.n	c000ba2 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c000b9e:	f000 fa55 	bl	c00104c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000ba2:	4805      	ldr	r0, [pc, #20]	; (c000bb8 <MX_USART1_UART_Init+0x94>)
 c000ba4:	f006 fb4b 	bl	c00723e <HAL_UARTEx_DisableFifoMode>
 c000ba8:	4603      	mov	r3, r0
 c000baa:	2b00      	cmp	r3, #0
 c000bac:	d001      	beq.n	c000bb2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c000bae:	f000 fa4d 	bl	c00104c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c000bb2:	bf00      	nop
 c000bb4:	bd80      	pop	{r7, pc}
 c000bb6:	bf00      	nop
 c000bb8:	300002fc 	.word	0x300002fc
 c000bbc:	50013800 	.word	0x50013800

0c000bc0 <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel4
  */
static void MX_DMA_Init(void)
{
 c000bc0:	b580      	push	{r7, lr}
 c000bc2:	b082      	sub	sp, #8
 c000bc4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000bc6:	4b6a      	ldr	r3, [pc, #424]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000bca:	4a69      	ldr	r2, [pc, #420]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000bcc:	f043 0304 	orr.w	r3, r3, #4
 c000bd0:	6493      	str	r3, [r2, #72]	; 0x48
 c000bd2:	4b67      	ldr	r3, [pc, #412]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000bd6:	f003 0304 	and.w	r3, r3, #4
 c000bda:	607b      	str	r3, [r7, #4]
 c000bdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c000bde:	4b64      	ldr	r3, [pc, #400]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000be0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000be2:	4a63      	ldr	r2, [pc, #396]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000be4:	f043 0301 	orr.w	r3, r3, #1
 c000be8:	6493      	str	r3, [r2, #72]	; 0x48
 c000bea:	4b61      	ldr	r3, [pc, #388]	; (c000d70 <MX_DMA_Init+0x1b0>)
 c000bec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000bee:	f003 0301 	and.w	r3, r3, #1
 c000bf2:	603b      	str	r3, [r7, #0]
 c000bf4:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 c000bf6:	4b5f      	ldr	r3, [pc, #380]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000bf8:	4a5f      	ldr	r2, [pc, #380]	; (c000d78 <MX_DMA_Init+0x1b8>)
 c000bfa:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 c000bfc:	4b5d      	ldr	r3, [pc, #372]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000bfe:	2200      	movs	r2, #0
 c000c00:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000c02:	4b5c      	ldr	r3, [pc, #368]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c04:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000c08:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 c000c0a:	4b5a      	ldr	r3, [pc, #360]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c0c:	2240      	movs	r2, #64	; 0x40
 c000c0e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 c000c10:	4b58      	ldr	r3, [pc, #352]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c12:	2280      	movs	r2, #128	; 0x80
 c000c14:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c000c16:	4b57      	ldr	r3, [pc, #348]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c18:	f44f 7200 	mov.w	r2, #512	; 0x200
 c000c1c:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c000c1e:	4b55      	ldr	r3, [pc, #340]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c20:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c000c24:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 c000c26:	4b53      	ldr	r3, [pc, #332]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c28:	2200      	movs	r2, #0
 c000c2a:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 c000c2c:	4b51      	ldr	r3, [pc, #324]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c2e:	2200      	movs	r2, #0
 c000c30:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 c000c32:	4850      	ldr	r0, [pc, #320]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c34:	f001 fdc6 	bl	c0027c4 <HAL_DMA_Init>
 c000c38:	4603      	mov	r3, r0
 c000c3a:	2b00      	cmp	r3, #0
 c000c3c:	d001      	beq.n	c000c42 <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 c000c3e:	f000 fa05 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000c42:	2110      	movs	r1, #16
 c000c44:	484b      	ldr	r0, [pc, #300]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c46:	f002 f835 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000c4a:	4603      	mov	r3, r0
 c000c4c:	2b00      	cmp	r3, #0
 c000c4e:	d001      	beq.n	c000c54 <MX_DMA_Init+0x94>
  {
    Error_Handler( );
 c000c50:	f000 f9fc 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SEC) != HAL_OK)
 c000c54:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000c58:	4846      	ldr	r0, [pc, #280]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c5a:	f002 f82b 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000c5e:	4603      	mov	r3, r0
 c000c60:	2b00      	cmp	r3, #0
 c000c62:	d001      	beq.n	c000c68 <MX_DMA_Init+0xa8>
  {
    Error_Handler( );
 c000c64:	f000 f9f2 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000c68:	2104      	movs	r1, #4
 c000c6a:	4842      	ldr	r0, [pc, #264]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c6c:	f002 f822 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000c70:	4603      	mov	r3, r0
 c000c72:	2b00      	cmp	r3, #0
 c000c74:	d001      	beq.n	c000c7a <MX_DMA_Init+0xba>
  {
    Error_Handler( );
 c000c76:	f000 f9e9 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000c7a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000c7e:	483d      	ldr	r0, [pc, #244]	; (c000d74 <MX_DMA_Init+0x1b4>)
 c000c80:	f002 f818 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000c84:	4603      	mov	r3, r0
 c000c86:	2b00      	cmp	r3, #0
 c000c88:	d001      	beq.n	c000c8e <MX_DMA_Init+0xce>
  {
    Error_Handler( );
 c000c8a:	f000 f9df 	bl	c00104c <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel4 on DMA1_Channel4 */
  hdma_memtomem_dma1_channel4.Instance = DMA1_Channel4;
 c000c8e:	4b3b      	ldr	r3, [pc, #236]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000c90:	4a3b      	ldr	r2, [pc, #236]	; (c000d80 <MX_DMA_Init+0x1c0>)
 c000c92:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel4.Init.Request = DMA_REQUEST_MEM2MEM;
 c000c94:	4b39      	ldr	r3, [pc, #228]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000c96:	2200      	movs	r2, #0
 c000c98:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel4.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000c9a:	4b38      	ldr	r3, [pc, #224]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000c9c:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000ca0:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel4.Init.PeriphInc = DMA_PINC_ENABLE;
 c000ca2:	4b36      	ldr	r3, [pc, #216]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000ca4:	2240      	movs	r2, #64	; 0x40
 c000ca6:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel4.Init.MemInc = DMA_MINC_ENABLE;
 c000ca8:	4b34      	ldr	r3, [pc, #208]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000caa:	2280      	movs	r2, #128	; 0x80
 c000cac:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel4.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c000cae:	4b33      	ldr	r3, [pc, #204]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cb0:	f44f 7200 	mov.w	r2, #512	; 0x200
 c000cb4:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel4.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c000cb6:	4b31      	ldr	r3, [pc, #196]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cb8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c000cbc:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel4.Init.Mode = DMA_NORMAL;
 c000cbe:	4b2f      	ldr	r3, [pc, #188]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cc0:	2200      	movs	r2, #0
 c000cc2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel4.Init.Priority = DMA_PRIORITY_LOW;
 c000cc4:	4b2d      	ldr	r3, [pc, #180]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cc6:	2200      	movs	r2, #0
 c000cc8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel4) != HAL_OK)
 c000cca:	482c      	ldr	r0, [pc, #176]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000ccc:	f001 fd7a 	bl	c0027c4 <HAL_DMA_Init>
 c000cd0:	4603      	mov	r3, r0
 c000cd2:	2b00      	cmp	r3, #0
 c000cd4:	d001      	beq.n	c000cda <MX_DMA_Init+0x11a>
  {
    Error_Handler( );
 c000cd6:	f000 f9b9 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel4, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000cda:	2110      	movs	r1, #16
 c000cdc:	4827      	ldr	r0, [pc, #156]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cde:	f001 ffe9 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000ce2:	4603      	mov	r3, r0
 c000ce4:	2b00      	cmp	r3, #0
 c000ce6:	d001      	beq.n	c000cec <MX_DMA_Init+0x12c>
  {
    Error_Handler( );
 c000ce8:	f000 f9b0 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel4, DMA_CHANNEL_SEC) != HAL_OK)
 c000cec:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000cf0:	4822      	ldr	r0, [pc, #136]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000cf2:	f001 ffdf 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000cf6:	4603      	mov	r3, r0
 c000cf8:	2b00      	cmp	r3, #0
 c000cfa:	d001      	beq.n	c000d00 <MX_DMA_Init+0x140>
  {
    Error_Handler( );
 c000cfc:	f000 f9a6 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel4, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c000d00:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c000d04:	481d      	ldr	r0, [pc, #116]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000d06:	f001 ffd5 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000d0a:	4603      	mov	r3, r0
 c000d0c:	2b00      	cmp	r3, #0
 c000d0e:	d001      	beq.n	c000d14 <MX_DMA_Init+0x154>
  {
    Error_Handler( );
 c000d10:	f000 f99c 	bl	c00104c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel4, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000d14:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000d18:	4818      	ldr	r0, [pc, #96]	; (c000d7c <MX_DMA_Init+0x1bc>)
 c000d1a:	f001 ffcb 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c000d1e:	4603      	mov	r3, r0
 c000d20:	2b00      	cmp	r3, #0
 c000d22:	d001      	beq.n	c000d28 <MX_DMA_Init+0x168>
  {
    Error_Handler( );
 c000d24:	f000 f992 	bl	c00104c <Error_Handler>
  }

  /* DMA interrupt init */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 c000d28:	2200      	movs	r2, #0
 c000d2a:	2100      	movs	r1, #0
 c000d2c:	201d      	movs	r0, #29
 c000d2e:	f001 fd14 	bl	c00275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 c000d32:	201d      	movs	r0, #29
 c000d34:	f001 fd2b 	bl	c00278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 c000d38:	2200      	movs	r2, #0
 c000d3a:	2100      	movs	r1, #0
 c000d3c:	201e      	movs	r0, #30
 c000d3e:	f001 fd0c 	bl	c00275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 c000d42:	201e      	movs	r0, #30
 c000d44:	f001 fd23 	bl	c00278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 c000d48:	2200      	movs	r2, #0
 c000d4a:	2100      	movs	r1, #0
 c000d4c:	201f      	movs	r0, #31
 c000d4e:	f001 fd04 	bl	c00275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 c000d52:	201f      	movs	r0, #31
 c000d54:	f001 fd1b 	bl	c00278e <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 c000d58:	2200      	movs	r2, #0
 c000d5a:	2100      	movs	r1, #0
 c000d5c:	2020      	movs	r0, #32
 c000d5e:	f001 fcfc 	bl	c00275a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 c000d62:	2020      	movs	r0, #32
 c000d64:	f001 fd13 	bl	c00278e <HAL_NVIC_EnableIRQ>

}
 c000d68:	bf00      	nop
 c000d6a:	3708      	adds	r7, #8
 c000d6c:	46bd      	mov	sp, r7
 c000d6e:	bd80      	pop	{r7, pc}
 c000d70:	50021000 	.word	0x50021000
 c000d74:	30000390 	.word	0x30000390
 c000d78:	50020008 	.word	0x50020008
 c000d7c:	300003f8 	.word	0x300003f8
 c000d80:	50020044 	.word	0x50020044

0c000d84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000d84:	b580      	push	{r7, lr}
 c000d86:	b08a      	sub	sp, #40	; 0x28
 c000d88:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000d8a:	f107 0314 	add.w	r3, r7, #20
 c000d8e:	2200      	movs	r2, #0
 c000d90:	601a      	str	r2, [r3, #0]
 c000d92:	605a      	str	r2, [r3, #4]
 c000d94:	609a      	str	r2, [r3, #8]
 c000d96:	60da      	str	r2, [r3, #12]
 c000d98:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000d9a:	4b31      	ldr	r3, [pc, #196]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000d9e:	4a30      	ldr	r2, [pc, #192]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000da0:	f043 0308 	orr.w	r3, r3, #8
 c000da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000da6:	4b2e      	ldr	r3, [pc, #184]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000daa:	f003 0308 	and.w	r3, r3, #8
 c000dae:	613b      	str	r3, [r7, #16]
 c000db0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000db2:	4b2b      	ldr	r3, [pc, #172]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000db6:	4a2a      	ldr	r2, [pc, #168]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000db8:	f043 0304 	orr.w	r3, r3, #4
 c000dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000dbe:	4b28      	ldr	r3, [pc, #160]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000dc2:	f003 0304 	and.w	r3, r3, #4
 c000dc6:	60fb      	str	r3, [r7, #12]
 c000dc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000dca:	4b25      	ldr	r3, [pc, #148]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000dcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000dce:	4a24      	ldr	r2, [pc, #144]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000dd0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000dd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000dd6:	4b22      	ldr	r3, [pc, #136]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000dd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000dda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000dde:	60bb      	str	r3, [r7, #8]
 c000de0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c000de2:	f002 ffbd 	bl	c003d60 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000de6:	4b1e      	ldr	r3, [pc, #120]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000dea:	4a1d      	ldr	r2, [pc, #116]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000dec:	f043 0302 	orr.w	r3, r3, #2
 c000df0:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000df2:	4b1b      	ldr	r3, [pc, #108]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000df6:	f003 0302 	and.w	r3, r3, #2
 c000dfa:	607b      	str	r3, [r7, #4]
 c000dfc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000dfe:	4b18      	ldr	r3, [pc, #96]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000e02:	4a17      	ldr	r2, [pc, #92]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000e04:	f043 0301 	orr.w	r3, r3, #1
 c000e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000e0a:	4b15      	ldr	r3, [pc, #84]	; (c000e60 <MX_GPIO_Init+0xdc>)
 c000e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000e0e:	f003 0301 	and.w	r3, r3, #1
 c000e12:	603b      	str	r3, [r7, #0]
 c000e14:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000e16:	2201      	movs	r2, #1
 c000e18:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000e1c:	4811      	ldr	r0, [pc, #68]	; (c000e64 <MX_GPIO_Init+0xe0>)
 c000e1e:	f002 f9f1 	bl	c003204 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_11|GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15
 c000e22:	2200      	movs	r2, #0
 c000e24:	f64c 4140 	movw	r1, #52288	; 0xcc40
 c000e28:	480f      	ldr	r0, [pc, #60]	; (c000e68 <MX_GPIO_Init+0xe4>)
 c000e2a:	f002 fa03 	bl	c003234 <HAL_GPIO_ConfigPinAttributes>
                          |WHITE_LED_Pin, GPIO_PIN_NSEC);

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(IR_SENSOR_PIN_GPIO_Port, IR_SENSOR_PIN_Pin, GPIO_PIN_NSEC);
 c000e2e:	2200      	movs	r2, #0
 c000e30:	f44f 6100 	mov.w	r1, #2048	; 0x800
 c000e34:	480d      	ldr	r0, [pc, #52]	; (c000e6c <MX_GPIO_Init+0xe8>)
 c000e36:	f002 f9fd 	bl	c003234 <HAL_GPIO_ConfigPinAttributes>

  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000e3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000e3e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000e40:	2301      	movs	r3, #1
 c000e42:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000e44:	2301      	movs	r3, #1
 c000e46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000e48:	2300      	movs	r3, #0
 c000e4a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000e4c:	f107 0314 	add.w	r3, r7, #20
 c000e50:	4619      	mov	r1, r3
 c000e52:	4804      	ldr	r0, [pc, #16]	; (c000e64 <MX_GPIO_Init+0xe0>)
 c000e54:	f002 f856 	bl	c002f04 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000e58:	bf00      	nop
 c000e5a:	3728      	adds	r7, #40	; 0x28
 c000e5c:	46bd      	mov	sp, r7
 c000e5e:	bd80      	pop	{r7, pc}
 c000e60:	50021000 	.word	0x50021000
 c000e64:	52020400 	.word	0x52020400
 c000e68:	52020800 	.word	0x52020800
 c000e6c:	52020c00 	.word	0x52020c00

0c000e70 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000e70:	b480      	push	{r7}
 c000e72:	b083      	sub	sp, #12
 c000e74:	af00      	add	r7, sp, #0
 c000e76:	6078      	str	r0, [r7, #4]
//  printf("SPI Transfer complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000e78:	4b04      	ldr	r3, [pc, #16]	; (c000e8c <HAL_SPI_TxRxCpltCallback+0x1c>)
 c000e7a:	2201      	movs	r2, #1
 c000e7c:	601a      	str	r2, [r3, #0]
}
 c000e7e:	bf00      	nop
 c000e80:	370c      	adds	r7, #12
 c000e82:	46bd      	mov	sp, r7
 c000e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e88:	4770      	bx	lr
 c000e8a:	bf00      	nop
 c000e8c:	30000460 	.word	0x30000460

0c000e90 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000e90:	b480      	push	{r7}
 c000e92:	b083      	sub	sp, #12
 c000e94:	af00      	add	r7, sp, #0
 c000e96:	6078      	str	r0, [r7, #4]
//  printf("SPI transmission complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000e98:	4b04      	ldr	r3, [pc, #16]	; (c000eac <HAL_SPI_TxCpltCallback+0x1c>)
 c000e9a:	2201      	movs	r2, #1
 c000e9c:	601a      	str	r2, [r3, #0]
}
 c000e9e:	bf00      	nop
 c000ea0:	370c      	adds	r7, #12
 c000ea2:	46bd      	mov	sp, r7
 c000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ea8:	4770      	bx	lr
 c000eaa:	bf00      	nop
 c000eac:	30000460 	.word	0x30000460

0c000eb0 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000eb0:	b480      	push	{r7}
 c000eb2:	b083      	sub	sp, #12
 c000eb4:	af00      	add	r7, sp, #0
 c000eb6:	6078      	str	r0, [r7, #4]
//  printf("SPI Reception complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000eb8:	4b04      	ldr	r3, [pc, #16]	; (c000ecc <HAL_SPI_RxCpltCallback+0x1c>)
 c000eba:	2201      	movs	r2, #1
 c000ebc:	601a      	str	r2, [r3, #0]
}
 c000ebe:	bf00      	nop
 c000ec0:	370c      	adds	r7, #12
 c000ec2:	46bd      	mov	sp, r7
 c000ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000ec8:	4770      	bx	lr
 c000eca:	bf00      	nop
 c000ecc:	30000460 	.word	0x30000460

0c000ed0 <__io_putchar>:


//redirects printf output to USART1 for displaying logs in a serial console
PUTCHAR_PROTOTYPE
{
 c000ed0:	b580      	push	{r7, lr}
 c000ed2:	b082      	sub	sp, #8
 c000ed4:	af00      	add	r7, sp, #0
 c000ed6:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000ed8:	1d39      	adds	r1, r7, #4
 c000eda:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000ede:	2201      	movs	r2, #1
 c000ee0:	4803      	ldr	r0, [pc, #12]	; (c000ef0 <__io_putchar+0x20>)
 c000ee2:	f005 fc07 	bl	c0066f4 <HAL_UART_Transmit>

  return ch;
 c000ee6:	687b      	ldr	r3, [r7, #4]
}
 c000ee8:	4618      	mov	r0, r3
 c000eea:	3708      	adds	r7, #8
 c000eec:	46bd      	mov	sp, r7
 c000eee:	bd80      	pop	{r7, pc}
 c000ef0:	300002fc 	.word	0x300002fc

0c000ef4 <SearchForSig>:



//Returns position if s1 is substring of s2; -1 otherwise
int SearchForSig(uint8_t* signal, int sizeOfSig, uint8_t* data, int dataSize)
{
 c000ef4:	b480      	push	{r7}
 c000ef6:	b08b      	sub	sp, #44	; 0x2c
 c000ef8:	af00      	add	r7, sp, #0
 c000efa:	60f8      	str	r0, [r7, #12]
 c000efc:	60b9      	str	r1, [r7, #8]
 c000efe:	607a      	str	r2, [r7, #4]
 c000f00:	603b      	str	r3, [r7, #0]
    int M = sizeOfSig;
 c000f02:	68bb      	ldr	r3, [r7, #8]
 c000f04:	61bb      	str	r3, [r7, #24]
    int N = dataSize;
 c000f06:	683b      	ldr	r3, [r7, #0]
 c000f08:	617b      	str	r3, [r7, #20]
    int retval = -1;
 c000f0a:	f04f 33ff 	mov.w	r3, #4294967295
 c000f0e:	627b      	str	r3, [r7, #36]	; 0x24


    /* A loop to slide signal one by one while comparing */
    for (int i = 0; i <= N - M; i++) {
 c000f10:	2300      	movs	r3, #0
 c000f12:	623b      	str	r3, [r7, #32]
 c000f14:	e022      	b.n	c000f5c <SearchForSig+0x68>
      int j;

        //for current index i, check for signal match
      for (j = 0; j < M; j++){
 c000f16:	2300      	movs	r3, #0
 c000f18:	61fb      	str	r3, [r7, #28]
 c000f1a:	e00f      	b.n	c000f3c <SearchForSig+0x48>
        if (data[i + j] != signal[j]){
 c000f1c:	6a3a      	ldr	r2, [r7, #32]
 c000f1e:	69fb      	ldr	r3, [r7, #28]
 c000f20:	4413      	add	r3, r2
 c000f22:	461a      	mov	r2, r3
 c000f24:	687b      	ldr	r3, [r7, #4]
 c000f26:	4413      	add	r3, r2
 c000f28:	781a      	ldrb	r2, [r3, #0]
 c000f2a:	69fb      	ldr	r3, [r7, #28]
 c000f2c:	68f9      	ldr	r1, [r7, #12]
 c000f2e:	440b      	add	r3, r1
 c000f30:	781b      	ldrb	r3, [r3, #0]
 c000f32:	429a      	cmp	r2, r3
 c000f34:	d107      	bne.n	c000f46 <SearchForSig+0x52>
      for (j = 0; j < M; j++){
 c000f36:	69fb      	ldr	r3, [r7, #28]
 c000f38:	3301      	adds	r3, #1
 c000f3a:	61fb      	str	r3, [r7, #28]
 c000f3c:	69fa      	ldr	r2, [r7, #28]
 c000f3e:	69bb      	ldr	r3, [r7, #24]
 c000f40:	429a      	cmp	r2, r3
 c000f42:	dbeb      	blt.n	c000f1c <SearchForSig+0x28>
 c000f44:	e000      	b.n	c000f48 <SearchForSig+0x54>
          break;
 c000f46:	bf00      	nop
        }
      }
      if (j == M){
 c000f48:	69fa      	ldr	r2, [r7, #28]
 c000f4a:	69bb      	ldr	r3, [r7, #24]
 c000f4c:	429a      	cmp	r2, r3
 c000f4e:	d102      	bne.n	c000f56 <SearchForSig+0x62>
          retval = i;
 c000f50:	6a3b      	ldr	r3, [r7, #32]
 c000f52:	627b      	str	r3, [r7, #36]	; 0x24
          break;
 c000f54:	e008      	b.n	c000f68 <SearchForSig+0x74>
    for (int i = 0; i <= N - M; i++) {
 c000f56:	6a3b      	ldr	r3, [r7, #32]
 c000f58:	3301      	adds	r3, #1
 c000f5a:	623b      	str	r3, [r7, #32]
 c000f5c:	697a      	ldr	r2, [r7, #20]
 c000f5e:	69bb      	ldr	r3, [r7, #24]
 c000f60:	1ad3      	subs	r3, r2, r3
 c000f62:	6a3a      	ldr	r2, [r7, #32]
 c000f64:	429a      	cmp	r2, r3
 c000f66:	ddd6      	ble.n	c000f16 <SearchForSig+0x22>
      }
    }

    return retval;
 c000f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 c000f6a:	4618      	mov	r0, r3
 c000f6c:	372c      	adds	r7, #44	; 0x2c
 c000f6e:	46bd      	mov	sp, r7
 c000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f74:	4770      	bx	lr
	...

0c000f78 <SECURE_Print_Mem_Buffer>:



//used in non-secure environment to check the secure memory buffer for successful transfer.
void SECURE_Print_Mem_Buffer(uint8_t* buf, int size)
{
 c000f78:	b580      	push	{r7, lr}
 c000f7a:	b084      	sub	sp, #16
 c000f7c:	af00      	add	r7, sp, #0
 c000f7e:	6078      	str	r0, [r7, #4]
 c000f80:	6039      	str	r1, [r7, #0]

  //print the contents of the first transfer
	 for(int i = 0; i<size; i++){
 c000f82:	2300      	movs	r3, #0
 c000f84:	60fb      	str	r3, [r7, #12]
 c000f86:	e013      	b.n	c000fb0 <SECURE_Print_Mem_Buffer+0x38>
//		 if((i+1)%16==1){
//			 printf("%08p|\t", addr);
//		 }
		 //we'll print out bytes at a time
		printf("0x%02x\t", buf[i]);
 c000f88:	68fb      	ldr	r3, [r7, #12]
 c000f8a:	687a      	ldr	r2, [r7, #4]
 c000f8c:	4413      	add	r3, r2
 c000f8e:	781b      	ldrb	r3, [r3, #0]
 c000f90:	4619      	mov	r1, r3
 c000f92:	480c      	ldr	r0, [pc, #48]	; (c000fc4 <SECURE_Print_Mem_Buffer+0x4c>)
 c000f94:	f006 fa88 	bl	c0074a8 <iprintf>
		if((i+1)%16==0){
 c000f98:	68fb      	ldr	r3, [r7, #12]
 c000f9a:	3301      	adds	r3, #1
 c000f9c:	f003 030f 	and.w	r3, r3, #15
 c000fa0:	2b00      	cmp	r3, #0
 c000fa2:	d102      	bne.n	c000faa <SECURE_Print_Mem_Buffer+0x32>
			printf("\n\r");
 c000fa4:	4808      	ldr	r0, [pc, #32]	; (c000fc8 <SECURE_Print_Mem_Buffer+0x50>)
 c000fa6:	f006 fa7f 	bl	c0074a8 <iprintf>
	 for(int i = 0; i<size; i++){
 c000faa:	68fb      	ldr	r3, [r7, #12]
 c000fac:	3301      	adds	r3, #1
 c000fae:	60fb      	str	r3, [r7, #12]
 c000fb0:	68fa      	ldr	r2, [r7, #12]
 c000fb2:	683b      	ldr	r3, [r7, #0]
 c000fb4:	429a      	cmp	r2, r3
 c000fb6:	dbe7      	blt.n	c000f88 <SECURE_Print_Mem_Buffer+0x10>
//		if((i+1)%4==0){
//			addr+=1;
//		}
	 }

}
 c000fb8:	bf00      	nop
 c000fba:	bf00      	nop
 c000fbc:	3710      	adds	r7, #16
 c000fbe:	46bd      	mov	sp, r7
 c000fc0:	bd80      	pop	{r7, pc}
 c000fc2:	bf00      	nop
 c000fc4:	0c008850 	.word	0x0c008850
 c000fc8:	0c008858 	.word	0x0c008858

0c000fcc <NonsecureToSecureTransferComplete>:


//callback functions for nonsecure --> secure mem transfer
static void NonsecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel1)
{
 c000fcc:	b480      	push	{r7}
 c000fce:	b083      	sub	sp, #12
 c000fd0:	af00      	add	r7, sp, #0
 c000fd2:	6078      	str	r0, [r7, #4]
//	printf("nonsecure to secure transf complete executed.\n\r");
  NonsecureToSecureTransferCompleteDetected = 1;
 c000fd4:	4b04      	ldr	r3, [pc, #16]	; (c000fe8 <NonsecureToSecureTransferComplete+0x1c>)
 c000fd6:	2201      	movs	r2, #1
 c000fd8:	601a      	str	r2, [r3, #0]
}
 c000fda:	bf00      	nop
 c000fdc:	370c      	adds	r7, #12
 c000fde:	46bd      	mov	sp, r7
 c000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fe4:	4770      	bx	lr
 c000fe6:	bf00      	nop
 c000fe8:	30000464 	.word	0x30000464

0c000fec <NonsecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
static void NonsecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel1)
{
 c000fec:	b480      	push	{r7}
 c000fee:	b083      	sub	sp, #12
 c000ff0:	af00      	add	r7, sp, #0
 c000ff2:	6078      	str	r0, [r7, #4]
  NonsecureToSecureTransferErrorDetected = 1;
 c000ff4:	4b04      	ldr	r3, [pc, #16]	; (c001008 <NonsecureToSecureTransferError+0x1c>)
 c000ff6:	2201      	movs	r2, #1
 c000ff8:	601a      	str	r2, [r3, #0]
}
 c000ffa:	bf00      	nop
 c000ffc:	370c      	adds	r7, #12
 c000ffe:	46bd      	mov	sp, r7
 c001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001004:	4770      	bx	lr
 c001006:	bf00      	nop
 c001008:	30000468 	.word	0x30000468

0c00100c <SecureToSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
static void SecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 c00100c:	b480      	push	{r7}
 c00100e:	b083      	sub	sp, #12
 c001010:	af00      	add	r7, sp, #0
 c001012:	6078      	str	r0, [r7, #4]
  SecureToSecureTransferCompleteDetected = 1;
 c001014:	4b04      	ldr	r3, [pc, #16]	; (c001028 <SecureToSecureTransferComplete+0x1c>)
 c001016:	2201      	movs	r2, #1
 c001018:	601a      	str	r2, [r3, #0]
}
 c00101a:	bf00      	nop
 c00101c:	370c      	adds	r7, #12
 c00101e:	46bd      	mov	sp, r7
 c001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001024:	4770      	bx	lr
 c001026:	bf00      	nop
 c001028:	30000470 	.word	0x30000470

0c00102c <SecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
static void SecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel4)
{
 c00102c:	b480      	push	{r7}
 c00102e:	b083      	sub	sp, #12
 c001030:	af00      	add	r7, sp, #0
 c001032:	6078      	str	r0, [r7, #4]
  SecureToSecureTransferErrorDetected = 1;
 c001034:	4b04      	ldr	r3, [pc, #16]	; (c001048 <SecureToSecureTransferError+0x1c>)
 c001036:	2201      	movs	r2, #1
 c001038:	601a      	str	r2, [r3, #0]
}
 c00103a:	bf00      	nop
 c00103c:	370c      	adds	r7, #12
 c00103e:	46bd      	mov	sp, r7
 c001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001044:	4770      	bx	lr
 c001046:	bf00      	nop
 c001048:	3000046c 	.word	0x3000046c

0c00104c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c00104c:	b480      	push	{r7}
 c00104e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c001050:	b672      	cpsid	i
}
 c001052:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c001054:	e7fe      	b.n	c001054 <Error_Handler+0x8>

0c001056 <__acle_se_SECURE_print_Log>:
/* Private function prototypes -----------------------------------------------*/
/* Private functions ---------------------------------------------------------*/


//secure service for logging messages
CMSE_NS_ENTRY void SECURE_print_Log(char* string){
 c001056:	b580      	push	{r7, lr}
 c001058:	b082      	sub	sp, #8
 c00105a:	af00      	add	r7, sp, #0
 c00105c:	6078      	str	r0, [r7, #4]
	printf(string);
 c00105e:	6878      	ldr	r0, [r7, #4]
 c001060:	f006 fa22 	bl	c0074a8 <iprintf>
}
 c001064:	bf00      	nop
 c001066:	3708      	adds	r7, #8
 c001068:	46bd      	mov	sp, r7
 c00106a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00106e:	4670      	mov	r0, lr
 c001070:	4671      	mov	r1, lr
 c001072:	4672      	mov	r2, lr
 c001074:	4673      	mov	r3, lr
 c001076:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00107a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00107e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001082:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001086:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00108a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00108e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001092:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001096:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00109a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00109e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0010a2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0010a6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0010aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0010ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0010b2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0010b6:	f38e 8c00 	msr	CPSR_fs, lr
 c0010ba:	b410      	push	{r4}
 c0010bc:	eef1 ca10 	vmrs	ip, fpscr
 c0010c0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0010c4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0010c8:	ea0c 0c04 	and.w	ip, ip, r4
 c0010cc:	eee1 ca10 	vmsr	fpscr, ip
 c0010d0:	bc10      	pop	{r4}
 c0010d2:	46f4      	mov	ip, lr
 c0010d4:	4774      	bxns	lr
	...

0c0010d8 <__acle_se_SECURE_print_Num>:


//secure service for logging messages containing integer data
CMSE_NS_ENTRY void SECURE_print_Num(char* string, int num){
 c0010d8:	b580      	push	{r7, lr}
 c0010da:	b082      	sub	sp, #8
 c0010dc:	af00      	add	r7, sp, #0
 c0010de:	6078      	str	r0, [r7, #4]
 c0010e0:	6039      	str	r1, [r7, #0]
	printf("%s %d\n\r", string, num);
 c0010e2:	683a      	ldr	r2, [r7, #0]
 c0010e4:	6879      	ldr	r1, [r7, #4]
 c0010e6:	481e      	ldr	r0, [pc, #120]	; (c001160 <__acle_se_SECURE_print_Num+0x88>)
 c0010e8:	f006 f9de 	bl	c0074a8 <iprintf>
}
 c0010ec:	bf00      	nop
 c0010ee:	3708      	adds	r7, #8
 c0010f0:	46bd      	mov	sp, r7
 c0010f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0010f6:	4670      	mov	r0, lr
 c0010f8:	4671      	mov	r1, lr
 c0010fa:	4672      	mov	r2, lr
 c0010fc:	4673      	mov	r3, lr
 c0010fe:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001102:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001106:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00110a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00110e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001112:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001116:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00111a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00111e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001122:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001126:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00112a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00112e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001132:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001136:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00113a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00113e:	f38e 8c00 	msr	CPSR_fs, lr
 c001142:	b410      	push	{r4}
 c001144:	eef1 ca10 	vmrs	ip, fpscr
 c001148:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00114c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001150:	ea0c 0c04 	and.w	ip, ip, r4
 c001154:	eee1 ca10 	vmsr	fpscr, ip
 c001158:	bc10      	pop	{r4}
 c00115a:	46f4      	mov	ip, lr
 c00115c:	4774      	bxns	lr
 c00115e:	bf00      	nop
 c001160:	0c00885c 	.word	0x0c00885c

0c001164 <__acle_se_SECURE_Send_Mem>:
//	    SECURE_print_Num(numBytesSent);
//}


//sends a full memory dump
CMSE_NS_ENTRY void SECURE_Send_Mem(){
 c001164:	b580      	push	{r7, lr}
 c001166:	b086      	sub	sp, #24
 c001168:	af00      	add	r7, sp, #0

	int blocksToSend = 256;
 c00116a:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00116e:	60bb      	str	r3, [r7, #8]
	uint32_t* current_addr;
	uint8_t blocks_to_send_bytes[2];
	blocks_to_send_bytes[0] = blocksToSend >> 8;
 c001170:	68bb      	ldr	r3, [r7, #8]
 c001172:	121b      	asrs	r3, r3, #8
 c001174:	b2db      	uxtb	r3, r3
 c001176:	713b      	strb	r3, [r7, #4]
	blocks_to_send_bytes[1] = blocksToSend & 255;
 c001178:	68bb      	ldr	r3, [r7, #8]
 c00117a:	b2db      	uxtb	r3, r3
 c00117c:	717b      	strb	r3, [r7, #5]

	/********************************************* SEND NUM BLOCKS *******************************************************************************/

	//toggle spi communication; CS --> LOW (needed for library used on ESP32)
	SECURE_SPI_Toggle_Comm(0);
 c00117e:	2000      	movs	r0, #0
 c001180:	f000 fc12 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	//send the start size signal through SPI
	SECURE_SPI_Send_Signal(START_SIZE_SIG, START_SIZE_SIG_SIZE);
 c001184:	4b4f      	ldr	r3, [pc, #316]	; (c0012c4 <__acle_se_SECURE_Send_Mem+0x160>)
 c001186:	681b      	ldr	r3, [r3, #0]
 c001188:	4619      	mov	r1, r3
 c00118a:	484f      	ldr	r0, [pc, #316]	; (c0012c8 <__acle_se_SECURE_Send_Mem+0x164>)
 c00118c:	f000 faee 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(800);
 c001190:	f44f 7048 	mov.w	r0, #800	; 0x320
 c001194:	f001 f9e2 	bl	c00255c <HAL_Delay>
	//send the number of modified blocks encoded as an unsigned byte. Range of values are 0-255 but we need 1-256, so needs to be adjusted at ESP32 side.
	SECURE_SPI_Send_Data_Buf((uint8_t*) blocks_to_send_bytes, 2);
 c001198:	1d3b      	adds	r3, r7, #4
 c00119a:	2102      	movs	r1, #2
 c00119c:	4618      	mov	r0, r3
 c00119e:	f000 fb1f 	bl	c0017e0 <SECURE_SPI_Send_Data_Buf>
	HAL_Delay(800);
 c0011a2:	f44f 7048 	mov.w	r0, #800	; 0x320
 c0011a6:	f001 f9d9 	bl	c00255c <HAL_Delay>
	//end the end size signal
	SECURE_SPI_Send_Signal(END_SIZE_SIG, END_SIZE_SIG_SIZE);
 c0011aa:	4b48      	ldr	r3, [pc, #288]	; (c0012cc <__acle_se_SECURE_Send_Mem+0x168>)
 c0011ac:	681b      	ldr	r3, [r3, #0]
 c0011ae:	4619      	mov	r1, r3
 c0011b0:	4847      	ldr	r0, [pc, #284]	; (c0012d0 <__acle_se_SECURE_Send_Mem+0x16c>)
 c0011b2:	f000 fadb 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(800);
 c0011b6:	f44f 7048 	mov.w	r0, #800	; 0x320
 c0011ba:	f001 f9cf 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Toggle_Comm(1);
 c0011be:	2001      	movs	r0, #1
 c0011c0:	f000 fbf2 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>

	/******************************************** SEND MEMORY BLOCKS THROUGH SPI STREAM ***********************************************************/
	for(int i = 0; i < 32; i++){
 c0011c4:	2300      	movs	r3, #0
 c0011c6:	613b      	str	r3, [r7, #16]
 c0011c8:	e03e      	b.n	c001248 <__acle_se_SECURE_Send_Mem+0xe4>
		//send an 8KB chunk
		SECURE_SPI_Toggle_Comm(0);
 c0011ca:	2000      	movs	r0, #0
 c0011cc:	f000 fbec 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
		SECURE_SPI_Send_Signal(START_TRANSMISSION_SIG, START_TRANS_SIZE);
 c0011d0:	4b40      	ldr	r3, [pc, #256]	; (c0012d4 <__acle_se_SECURE_Send_Mem+0x170>)
 c0011d2:	681b      	ldr	r3, [r3, #0]
 c0011d4:	4619      	mov	r1, r3
 c0011d6:	4840      	ldr	r0, [pc, #256]	; (c0012d8 <__acle_se_SECURE_Send_Mem+0x174>)
 c0011d8:	f000 fac8 	bl	c00176c <SECURE_SPI_Send_Signal>
		//start at new 8KB boundary
		current_addr = (uint32_t*)(NSEC_MEM_START + i*8192);
 c0011dc:	693b      	ldr	r3, [r7, #16]
 c0011de:	035b      	lsls	r3, r3, #13
 c0011e0:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 c0011e4:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 c0011e8:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 8; i++){
 c0011ea:	2300      	movs	r3, #0
 c0011ec:	60fb      	str	r3, [r7, #12]
 c0011ee:	e018      	b.n	c001222 <__acle_se_SECURE_Send_Mem+0xbe>
			//send through SPI
			printf("------------------------------------------------------------------------------------\n\r");
 c0011f0:	483a      	ldr	r0, [pc, #232]	; (c0012dc <__acle_se_SECURE_Send_Mem+0x178>)
 c0011f2:	f006 f959 	bl	c0074a8 <iprintf>
			printf("sending data at address %p\n\r", current_addr);
 c0011f6:	6979      	ldr	r1, [r7, #20]
 c0011f8:	4839      	ldr	r0, [pc, #228]	; (c0012e0 <__acle_se_SECURE_Send_Mem+0x17c>)
 c0011fa:	f006 f955 	bl	c0074a8 <iprintf>
			SECURE_Print_Mem_Buffer(SEC_Mem_Buffer, 1024);
 c0011fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c001202:	4838      	ldr	r0, [pc, #224]	; (c0012e4 <__acle_se_SECURE_Send_Mem+0x180>)
 c001204:	f7ff feb8 	bl	c000f78 <SECURE_Print_Mem_Buffer>
			printf("------------------------------------------------------------------------------------\n\r");
 c001208:	4834      	ldr	r0, [pc, #208]	; (c0012dc <__acle_se_SECURE_Send_Mem+0x178>)
 c00120a:	f006 f94d 	bl	c0074a8 <iprintf>
			SECURE_SPI_Send_Data_Block(current_addr);
 c00120e:	6978      	ldr	r0, [r7, #20]
 c001210:	f000 fb1e 	bl	c001850 <SECURE_SPI_Send_Data_Block>
			//calculate the address of the next block to send
			current_addr += BUFFER_SIZE/4;
 c001214:	697b      	ldr	r3, [r7, #20]
 c001216:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 c00121a:	617b      	str	r3, [r7, #20]
		for(int i = 0; i < 8; i++){
 c00121c:	68fb      	ldr	r3, [r7, #12]
 c00121e:	3301      	adds	r3, #1
 c001220:	60fb      	str	r3, [r7, #12]
 c001222:	68fb      	ldr	r3, [r7, #12]
 c001224:	2b07      	cmp	r3, #7
 c001226:	dde3      	ble.n	c0011f0 <__acle_se_SECURE_Send_Mem+0x8c>
		}
		//send the end signal
		SECURE_SPI_Send_Signal(END_TRANSMISSION_SIG, END_TRANS_SIZE);
 c001228:	4b2f      	ldr	r3, [pc, #188]	; (c0012e8 <__acle_se_SECURE_Send_Mem+0x184>)
 c00122a:	681b      	ldr	r3, [r3, #0]
 c00122c:	4619      	mov	r1, r3
 c00122e:	482f      	ldr	r0, [pc, #188]	; (c0012ec <__acle_se_SECURE_Send_Mem+0x188>)
 c001230:	f000 fa9c 	bl	c00176c <SECURE_SPI_Send_Signal>
		//toggle spi communication
		SECURE_SPI_Toggle_Comm(1);
 c001234:	2001      	movs	r0, #1
 c001236:	f000 fbb7 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
		//decrement num modified blocks
		HAL_Delay(10000);
 c00123a:	f242 7010 	movw	r0, #10000	; 0x2710
 c00123e:	f001 f98d 	bl	c00255c <HAL_Delay>
	for(int i = 0; i < 32; i++){
 c001242:	693b      	ldr	r3, [r7, #16]
 c001244:	3301      	adds	r3, #1
 c001246:	613b      	str	r3, [r7, #16]
 c001248:	693b      	ldr	r3, [r7, #16]
 c00124a:	2b1f      	cmp	r3, #31
 c00124c:	ddbd      	ble.n	c0011ca <__acle_se_SECURE_Send_Mem+0x66>
	}

}
 c00124e:	bf00      	nop
 c001250:	bf00      	nop
 c001252:	3718      	adds	r7, #24
 c001254:	46bd      	mov	sp, r7
 c001256:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00125a:	4670      	mov	r0, lr
 c00125c:	4671      	mov	r1, lr
 c00125e:	4672      	mov	r2, lr
 c001260:	4673      	mov	r3, lr
 c001262:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001266:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00126a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00126e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001272:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001276:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00127a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00127e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001282:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001286:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00128a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00128e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001292:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001296:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00129a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00129e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0012a2:	f38e 8c00 	msr	CPSR_fs, lr
 c0012a6:	b410      	push	{r4}
 c0012a8:	eef1 ca10 	vmrs	ip, fpscr
 c0012ac:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0012b0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0012b4:	ea0c 0c04 	and.w	ip, ip, r4
 c0012b8:	eee1 ca10 	vmsr	fpscr, ip
 c0012bc:	bc10      	pop	{r4}
 c0012be:	46f4      	mov	ip, lr
 c0012c0:	4774      	bxns	lr
 c0012c2:	bf00      	nop
 c0012c4:	300000d8 	.word	0x300000d8
 c0012c8:	3000005c 	.word	0x3000005c
 c0012cc:	300000dc 	.word	0x300000dc
 c0012d0:	3000006c 	.word	0x3000006c
 c0012d4:	300000e0 	.word	0x300000e0
 c0012d8:	30000044 	.word	0x30000044
 c0012dc:	0c008864 	.word	0x0c008864
 c0012e0:	0c0088bc 	.word	0x0c0088bc
 c0012e4:	30000474 	.word	0x30000474
 c0012e8:	300000e4 	.word	0x300000e4
 c0012ec:	30000030 	.word	0x30000030

0c0012f0 <__acle_se_SECURE_Send_Modified_Mem>:



//sends only the modified memory
CMSE_NS_ENTRY void SECURE_Send_Modified_Mem(){
 c0012f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c0012f4:	f2ad 4d3c 	subw	sp, sp, #1084	; 0x43c
 c0012f8:	af00      	add	r7, sp, #0
 c0012fa:	466b      	mov	r3, sp
 c0012fc:	461e      	mov	r6, r3

	//reset watchdog
	//HAL_IWDG_Refresh(&hiwdg);

	//used for testing
	uint16_t numModified = 7;
 c0012fe:	2307      	movs	r3, #7
 c001300:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
	int modifiedBlockNums[256] = {0, 1, 9, 15, 20, 21, 44};
 c001304:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c001308:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c00130c:	4618      	mov	r0, r3
 c00130e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c001312:	461a      	mov	r2, r3
 c001314:	2100      	movs	r1, #0
 c001316:	f006 f8bf 	bl	c007498 <memset>
 c00131a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c00131e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c001322:	2201      	movs	r2, #1
 c001324:	605a      	str	r2, [r3, #4]
 c001326:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c00132a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c00132e:	2209      	movs	r2, #9
 c001330:	609a      	str	r2, [r3, #8]
 c001332:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c001336:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c00133a:	220f      	movs	r2, #15
 c00133c:	60da      	str	r2, [r3, #12]
 c00133e:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c001342:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c001346:	2214      	movs	r2, #20
 c001348:	611a      	str	r2, [r3, #16]
 c00134a:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c00134e:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c001352:	2215      	movs	r2, #21
 c001354:	615a      	str	r2, [r3, #20]
 c001356:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c00135a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c00135e:	222c      	movs	r2, #44	; 0x2c
 c001360:	619a      	str	r2, [r3, #24]

	blockNum = 0;
 c001362:	4bc9      	ldr	r3, [pc, #804]	; (c001688 <__acle_se_SECURE_Send_Modified_Mem+0x398>)
 c001364:	2200      	movs	r2, #0
 c001366:	601a      	str	r2, [r3, #0]
	int max_blocks_modified = 256;
 c001368:	f44f 7380 	mov.w	r3, #256	; 0x100
 c00136c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
	int max_block_list_size = 3 * max_blocks_modified + max_blocks_modified;
 c001370:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 c001374:	009b      	lsls	r3, r3, #2
 c001376:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
//		  blockNum ++;
//		  current_address += BUFFER_SIZE/4;
//	  }

	/******************************************* DATA MANIPULATION *********************************************************/
	printf("%d blocks have changed\n\r", numModified);
 c00137a:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c00137e:	4619      	mov	r1, r3
 c001380:	48c2      	ldr	r0, [pc, #776]	; (c00168c <__acle_se_SECURE_Send_Modified_Mem+0x39c>)
 c001382:	f006 f891 	bl	c0074a8 <iprintf>
	//build list of modified block numbers separated by commas. Encoded as a string
	char formattedBlockNums[max_block_list_size];
 c001386:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 c00138a:	1e4b      	subs	r3, r1, #1
 c00138c:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
 c001390:	460a      	mov	r2, r1
 c001392:	2300      	movs	r3, #0
 c001394:	4690      	mov	r8, r2
 c001396:	4699      	mov	r9, r3
 c001398:	f04f 0200 	mov.w	r2, #0
 c00139c:	f04f 0300 	mov.w	r3, #0
 c0013a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 c0013a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 c0013a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 c0013ac:	460a      	mov	r2, r1
 c0013ae:	2300      	movs	r3, #0
 c0013b0:	4614      	mov	r4, r2
 c0013b2:	461d      	mov	r5, r3
 c0013b4:	f04f 0200 	mov.w	r2, #0
 c0013b8:	f04f 0300 	mov.w	r3, #0
 c0013bc:	00eb      	lsls	r3, r5, #3
 c0013be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 c0013c2:	00e2      	lsls	r2, r4, #3
 c0013c4:	460b      	mov	r3, r1
 c0013c6:	3307      	adds	r3, #7
 c0013c8:	08db      	lsrs	r3, r3, #3
 c0013ca:	00db      	lsls	r3, r3, #3
 c0013cc:	ebad 0d03 	sub.w	sp, sp, r3
 c0013d0:	466b      	mov	r3, sp
 c0013d2:	3300      	adds	r3, #0
 c0013d4:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
	int inc = 0;
 c0013d8:	2300      	movs	r3, #0
 c0013da:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
	uint16_t pos = 0;
 c0013de:	2300      	movs	r3, #0
 c0013e0:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	inc = snprintf(&formattedBlockNums[pos], max_block_list_size, "%d", modifiedBlockNums[0]);
 c0013e4:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c0013e8:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 c0013ec:	18d0      	adds	r0, r2, r3
 c0013ee:	f8d7 1420 	ldr.w	r1, [r7, #1056]	; 0x420
 c0013f2:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c0013f6:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c0013fa:	681b      	ldr	r3, [r3, #0]
 c0013fc:	4aa4      	ldr	r2, [pc, #656]	; (c001690 <__acle_se_SECURE_Send_Modified_Mem+0x3a0>)
 c0013fe:	f006 f86b 	bl	c0074d8 <sniprintf>
 c001402:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
	pos += inc;
 c001406:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 c00140a:	b29a      	uxth	r2, r3
 c00140c:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c001410:	4413      	add	r3, r2
 c001412:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	//send the block list out through spi as a comma separated list
	for(int i = 1; i < numModified; i++){
 c001416:	2301      	movs	r3, #1
 c001418:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 c00141c:	e025      	b.n	c00146a <__acle_se_SECURE_Send_Modified_Mem+0x17a>
		inc = snprintf(&formattedBlockNums[pos], max_block_list_size-pos+1, ",%d",modifiedBlockNums[i]);
 c00141e:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c001422:	f8d7 2418 	ldr.w	r2, [r7, #1048]	; 0x418
 c001426:	18d0      	adds	r0, r2, r3
 c001428:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c00142c:	f8d7 2420 	ldr.w	r2, [r7, #1056]	; 0x420
 c001430:	1ad3      	subs	r3, r2, r3
 c001432:	3301      	adds	r3, #1
 c001434:	4619      	mov	r1, r3
 c001436:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c00143a:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c00143e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 c001442:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001446:	4a93      	ldr	r2, [pc, #588]	; (c001694 <__acle_se_SECURE_Send_Modified_Mem+0x3a4>)
 c001448:	f006 f846 	bl	c0074d8 <sniprintf>
 c00144c:	f8c7 0414 	str.w	r0, [r7, #1044]	; 0x414
		pos+= inc;
 c001450:	f8d7 3414 	ldr.w	r3, [r7, #1044]	; 0x414
 c001454:	b29a      	uxth	r2, r3
 c001456:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c00145a:	4413      	add	r3, r2
 c00145c:	f8a7 342a 	strh.w	r3, [r7, #1066]	; 0x42a
	for(int i = 1; i < numModified; i++){
 c001460:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 c001464:	3301      	adds	r3, #1
 c001466:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
 c00146a:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c00146e:	f8d7 242c 	ldr.w	r2, [r7, #1068]	; 0x42c
 c001472:	429a      	cmp	r2, r3
 c001474:	dbd3      	blt.n	c00141e <__acle_se_SECURE_Send_Modified_Mem+0x12e>
	}
	//encode block list size as a stream of bytes so it can be sent via SPI
	block_list_size_bytes[0] = pos >> 8; //most significant byte
 c001476:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c00147a:	0a1b      	lsrs	r3, r3, #8
 c00147c:	b29b      	uxth	r3, r3
 c00147e:	b2da      	uxtb	r2, r3
 c001480:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c001484:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 c001488:	701a      	strb	r2, [r3, #0]
	block_list_size_bytes[1] = pos & 255; //least significant byte
 c00148a:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c00148e:	b2da      	uxtb	r2, r3
 c001490:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c001494:	f5a3 6386 	sub.w	r3, r3, #1072	; 0x430
 c001498:	705a      	strb	r2, [r3, #1]
	//do the same for the count of modified blocks
	num_modified_bytes[0] = numModified >> 8;
 c00149a:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c00149e:	0a1b      	lsrs	r3, r3, #8
 c0014a0:	b29b      	uxth	r3, r3
 c0014a2:	b2da      	uxtb	r2, r3
 c0014a4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c0014a8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 c0014ac:	701a      	strb	r2, [r3, #0]
	num_modified_bytes[1] = numModified & 255;
 c0014ae:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c0014b2:	b2da      	uxtb	r2, r3
 c0014b4:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c0014b8:	f2a3 4334 	subw	r3, r3, #1076	; 0x434
 c0014bc:	705a      	strb	r2, [r3, #1]

	/******************************************* BUILDING THE SPI DATA STREAM (METADATA) *********************************************************/

	//toggle spi communication; CS --> LOW (needed for library used on ESP32)
	SECURE_SPI_Toggle_Comm(0);
 c0014be:	2000      	movs	r0, #0
 c0014c0:	f000 fa72 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	//send the start size signal through SPI
	SECURE_SPI_Send_Signal(START_SIZE_SIG, START_SIZE_SIG_SIZE);
 c0014c4:	4b74      	ldr	r3, [pc, #464]	; (c001698 <__acle_se_SECURE_Send_Modified_Mem+0x3a8>)
 c0014c6:	681b      	ldr	r3, [r3, #0]
 c0014c8:	4619      	mov	r1, r3
 c0014ca:	4874      	ldr	r0, [pc, #464]	; (c00169c <__acle_se_SECURE_Send_Modified_Mem+0x3ac>)
 c0014cc:	f000 f94e 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c0014d0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c0014d4:	f001 f842 	bl	c00255c <HAL_Delay>
	//send the number of modified blocks encoded as an unsigned byte. Range of values are 0-255 but we need 1-256, so needs to be adjusted at ESP32 side.
	SECURE_SPI_Send_Data_Buf((uint8_t*) num_modified_bytes, 2);
 c0014d8:	1d3b      	adds	r3, r7, #4
 c0014da:	2102      	movs	r1, #2
 c0014dc:	4618      	mov	r0, r3
 c0014de:	f000 f97f 	bl	c0017e0 <SECURE_SPI_Send_Data_Buf>
	HAL_Delay(500);
 c0014e2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c0014e6:	f001 f839 	bl	c00255c <HAL_Delay>
	//end the end size signal
	SECURE_SPI_Send_Signal(END_SIZE_SIG, END_SIZE_SIG_SIZE);
 c0014ea:	4b6d      	ldr	r3, [pc, #436]	; (c0016a0 <__acle_se_SECURE_Send_Modified_Mem+0x3b0>)
 c0014ec:	681b      	ldr	r3, [r3, #0]
 c0014ee:	4619      	mov	r1, r3
 c0014f0:	486c      	ldr	r0, [pc, #432]	; (c0016a4 <__acle_se_SECURE_Send_Modified_Mem+0x3b4>)
 c0014f2:	f000 f93b 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c0014f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c0014fa:	f001 f82f 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Toggle_Comm(1);
 c0014fe:	2001      	movs	r0, #1
 c001500:	f000 fa52 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	HAL_Delay(500);
 c001504:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c001508:	f001 f828 	bl	c00255c <HAL_Delay>
	//send size of modified block list. This can potentially be a large number so we need to send it encoded as an unsigned short (two unsigned bytes)
	SECURE_SPI_Toggle_Comm(0);
 c00150c:	2000      	movs	r0, #0
 c00150e:	f000 fa4b 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	//send the start size signal through SPI
	SECURE_SPI_Send_Signal(START_BLOCK_LIST_SIZE_SIG, START_BLOCK_LIST_SIZE);
 c001512:	4b65      	ldr	r3, [pc, #404]	; (c0016a8 <__acle_se_SECURE_Send_Modified_Mem+0x3b8>)
 c001514:	681b      	ldr	r3, [r3, #0]
 c001516:	4619      	mov	r1, r3
 c001518:	4864      	ldr	r0, [pc, #400]	; (c0016ac <__acle_se_SECURE_Send_Modified_Mem+0x3bc>)
 c00151a:	f000 f927 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c00151e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c001522:	f001 f81b 	bl	c00255c <HAL_Delay>
	//send the number of modified blocks
	SECURE_SPI_Send_Data_Buf((uint8_t*) block_list_size_bytes, 2);
 c001526:	f107 0308 	add.w	r3, r7, #8
 c00152a:	2102      	movs	r1, #2
 c00152c:	4618      	mov	r0, r3
 c00152e:	f000 f957 	bl	c0017e0 <SECURE_SPI_Send_Data_Buf>
	HAL_Delay(500);
 c001532:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c001536:	f001 f811 	bl	c00255c <HAL_Delay>
	//end the end size signal
	SECURE_SPI_Send_Signal(END_BLOCK_LIST_SIZE_SIG, END_BLOCK_LIST_SIZE);
 c00153a:	4b5d      	ldr	r3, [pc, #372]	; (c0016b0 <__acle_se_SECURE_Send_Modified_Mem+0x3c0>)
 c00153c:	681b      	ldr	r3, [r3, #0]
 c00153e:	4619      	mov	r1, r3
 c001540:	485c      	ldr	r0, [pc, #368]	; (c0016b4 <__acle_se_SECURE_Send_Modified_Mem+0x3c4>)
 c001542:	f000 f913 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c001546:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c00154a:	f001 f807 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Toggle_Comm(1);
 c00154e:	2001      	movs	r0, #1
 c001550:	f000 fa2a 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	//send the modified block list
	SECURE_SPI_Toggle_Comm(0);
 c001554:	2000      	movs	r0, #0
 c001556:	f000 fa27 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	SECURE_SPI_Send_Signal(START_BLOCK_NUMS_SIG, START_BLOCK_NUMS_SIZE);
 c00155a:	4b57      	ldr	r3, [pc, #348]	; (c0016b8 <__acle_se_SECURE_Send_Modified_Mem+0x3c8>)
 c00155c:	681b      	ldr	r3, [r3, #0]
 c00155e:	4619      	mov	r1, r3
 c001560:	4856      	ldr	r0, [pc, #344]	; (c0016bc <__acle_se_SECURE_Send_Modified_Mem+0x3cc>)
 c001562:	f000 f903 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c001566:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c00156a:	f000 fff7 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Send_Block_List(formattedBlockNums, pos);
 c00156e:	f8b7 342a 	ldrh.w	r3, [r7, #1066]	; 0x42a
 c001572:	4619      	mov	r1, r3
 c001574:	f8d7 0418 	ldr.w	r0, [r7, #1048]	; 0x418
 c001578:	f000 f9de 	bl	c001938 <SECURE_SPI_Send_Block_List>
	HAL_Delay(500);
 c00157c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c001580:	f000 ffec 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Send_Signal(END_BLOCK_NUMS_SIG, END_BLOCK_NUMS_SIZE);
 c001584:	4b4e      	ldr	r3, [pc, #312]	; (c0016c0 <__acle_se_SECURE_Send_Modified_Mem+0x3d0>)
 c001586:	681b      	ldr	r3, [r3, #0]
 c001588:	4619      	mov	r1, r3
 c00158a:	484e      	ldr	r0, [pc, #312]	; (c0016c4 <__acle_se_SECURE_Send_Modified_Mem+0x3d4>)
 c00158c:	f000 f8ee 	bl	c00176c <SECURE_SPI_Send_Signal>
	HAL_Delay(500);
 c001590:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c001594:	f000 ffe2 	bl	c00255c <HAL_Delay>
	SECURE_SPI_Toggle_Comm(1);
 c001598:	2001      	movs	r0, #1
 c00159a:	f000 fa05 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
	HAL_Delay(500);
 c00159e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 c0015a2:	f000 ffdb 	bl	c00255c <HAL_Delay>

	/******************************************** SEND MEMORY BLOCKS THROUGH SPI STREAM ***********************************************************/
	while(numModified > 0){
 c0015a6:	e063      	b.n	c001670 <__acle_se_SECURE_Send_Modified_Mem+0x380>
		//send an 8KB chunk
		SECURE_SPI_Toggle_Comm(0);
 c0015a8:	2000      	movs	r0, #0
 c0015aa:	f000 f9fd 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
		SECURE_SPI_Send_Signal(START_TRANSMISSION_SIG, START_TRANS_SIZE);
 c0015ae:	4b46      	ldr	r3, [pc, #280]	; (c0016c8 <__acle_se_SECURE_Send_Modified_Mem+0x3d8>)
 c0015b0:	681b      	ldr	r3, [r3, #0]
 c0015b2:	4619      	mov	r1, r3
 c0015b4:	4845      	ldr	r0, [pc, #276]	; (c0016cc <__acle_se_SECURE_Send_Modified_Mem+0x3dc>)
 c0015b6:	f000 f8d9 	bl	c00176c <SECURE_SPI_Send_Signal>
		int blockInd = 0;
 c0015ba:	2300      	movs	r3, #0
 c0015bc:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
		for(int i = 0; i < (numModified >= 8 ? 8 : numModified); i++){
 c0015c0:	2300      	movs	r3, #0
 c0015c2:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 c0015c6:	e02c      	b.n	c001622 <__acle_se_SECURE_Send_Modified_Mem+0x332>
			//calculate the address of the next block to send
			uint32_t* addrOfNextBlock = (uint32_t*) NSEC_MEM_START + modifiedBlockNums[blockInd]*BUFFER_SIZE/4;
 c0015c8:	f507 6387 	add.w	r3, r7, #1080	; 0x438
 c0015cc:	f2a3 432c 	subw	r3, r3, #1068	; 0x42c
 c0015d0:	f8d7 2430 	ldr.w	r2, [r7, #1072]	; 0x430
 c0015d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0015d8:	029b      	lsls	r3, r3, #10
 c0015da:	f103 6300 	add.w	r3, r3, #134217728	; 0x8000000
 c0015de:	f503 2380 	add.w	r3, r3, #262144	; 0x40000
 c0015e2:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
			printf("------------------------------------------------------------------------------------\n\r");
 c0015e6:	483a      	ldr	r0, [pc, #232]	; (c0016d0 <__acle_se_SECURE_Send_Modified_Mem+0x3e0>)
 c0015e8:	f005 ff5e 	bl	c0074a8 <iprintf>
			printf("sending data at address %p\n\r", addrOfNextBlock);
 c0015ec:	f8d7 1410 	ldr.w	r1, [r7, #1040]	; 0x410
 c0015f0:	4838      	ldr	r0, [pc, #224]	; (c0016d4 <__acle_se_SECURE_Send_Modified_Mem+0x3e4>)
 c0015f2:	f005 ff59 	bl	c0074a8 <iprintf>
			SECURE_Print_Mem_Buffer(SEC_Mem_Buffer, 1024);
 c0015f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 c0015fa:	4837      	ldr	r0, [pc, #220]	; (c0016d8 <__acle_se_SECURE_Send_Modified_Mem+0x3e8>)
 c0015fc:	f7ff fcbc 	bl	c000f78 <SECURE_Print_Mem_Buffer>
			printf("------------------------------------------------------------------------------------\n\r");
 c001600:	4833      	ldr	r0, [pc, #204]	; (c0016d0 <__acle_se_SECURE_Send_Modified_Mem+0x3e0>)
 c001602:	f005 ff51 	bl	c0074a8 <iprintf>
			//send through SPI
			SECURE_SPI_Send_Data_Block(addrOfNextBlock);
 c001606:	f8d7 0410 	ldr.w	r0, [r7, #1040]	; 0x410
 c00160a:	f000 f921 	bl	c001850 <SECURE_SPI_Send_Data_Block>
			blockInd++;
 c00160e:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 c001612:	3301      	adds	r3, #1
 c001614:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
		for(int i = 0; i < (numModified >= 8 ? 8 : numModified); i++){
 c001618:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 c00161c:	3301      	adds	r3, #1
 c00161e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 c001622:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c001626:	2b08      	cmp	r3, #8
 c001628:	bf28      	it	cs
 c00162a:	2308      	movcs	r3, #8
 c00162c:	b29b      	uxth	r3, r3
 c00162e:	461a      	mov	r2, r3
 c001630:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 c001634:	4293      	cmp	r3, r2
 c001636:	dbc7      	blt.n	c0015c8 <__acle_se_SECURE_Send_Modified_Mem+0x2d8>
		}
		//send the end signal
		SECURE_SPI_Send_Signal(END_TRANSMISSION_SIG, END_TRANS_SIZE);
 c001638:	4b28      	ldr	r3, [pc, #160]	; (c0016dc <__acle_se_SECURE_Send_Modified_Mem+0x3ec>)
 c00163a:	681b      	ldr	r3, [r3, #0]
 c00163c:	4619      	mov	r1, r3
 c00163e:	4828      	ldr	r0, [pc, #160]	; (c0016e0 <__acle_se_SECURE_Send_Modified_Mem+0x3f0>)
 c001640:	f000 f894 	bl	c00176c <SECURE_SPI_Send_Signal>
		//decrement num modified blocks; be careful not to underflow
		numModified -= (numModified >= 8 ? 8 : numModified);
 c001644:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c001648:	2b08      	cmp	r3, #8
 c00164a:	bf28      	it	cs
 c00164c:	2308      	movcs	r3, #8
 c00164e:	b29b      	uxth	r3, r3
 c001650:	f8b7 2428 	ldrh.w	r2, [r7, #1064]	; 0x428
 c001654:	1ad3      	subs	r3, r2, r3
 c001656:	f8a7 3428 	strh.w	r3, [r7, #1064]	; 0x428
		//if all blocks sent, immediately exit. If not, need to delay before sending next one.
		if(numModified <= 0){
 c00165a:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c00165e:	2b00      	cmp	r3, #0
 c001660:	d00b      	beq.n	c00167a <__acle_se_SECURE_Send_Modified_Mem+0x38a>
			break;
		}else{
			SECURE_SPI_Toggle_Comm(1);
 c001662:	2001      	movs	r0, #1
 c001664:	f000 f9a0 	bl	c0019a8 <SECURE_SPI_Toggle_Comm>
			HAL_Delay(10000);
 c001668:	f242 7010 	movw	r0, #10000	; 0x2710
 c00166c:	f000 ff76 	bl	c00255c <HAL_Delay>
	while(numModified > 0){
 c001670:	f8b7 3428 	ldrh.w	r3, [r7, #1064]	; 0x428
 c001674:	2b00      	cmp	r3, #0
 c001676:	d197      	bne.n	c0015a8 <__acle_se_SECURE_Send_Modified_Mem+0x2b8>
 c001678:	e000      	b.n	c00167c <__acle_se_SECURE_Send_Modified_Mem+0x38c>
			break;
 c00167a:	bf00      	nop
		}
	}
	int res = SECURE_SPI_Receive_Classification();
 c00167c:	f000 f9ae 	bl	c0019dc <SECURE_SPI_Receive_Classification>
 c001680:	f8c7 040c 	str.w	r0, [r7, #1036]	; 0x40c
	while(!res){
 c001684:	e033      	b.n	c0016ee <__acle_se_SECURE_Send_Modified_Mem+0x3fe>
 c001686:	bf00      	nop
 c001688:	30001c84 	.word	0x30001c84
 c00168c:	0c0088dc 	.word	0x0c0088dc
 c001690:	0c0088f8 	.word	0x0c0088f8
 c001694:	0c0088fc 	.word	0x0c0088fc
 c001698:	300000d8 	.word	0x300000d8
 c00169c:	3000005c 	.word	0x3000005c
 c0016a0:	300000dc 	.word	0x300000dc
 c0016a4:	3000006c 	.word	0x3000006c
 c0016a8:	300000f0 	.word	0x300000f0
 c0016ac:	300000a0 	.word	0x300000a0
 c0016b0:	300000f4 	.word	0x300000f4
 c0016b4:	300000b8 	.word	0x300000b8
 c0016b8:	300000e8 	.word	0x300000e8
 c0016bc:	30000078 	.word	0x30000078
 c0016c0:	300000ec 	.word	0x300000ec
 c0016c4:	3000008c 	.word	0x3000008c
 c0016c8:	300000e0 	.word	0x300000e0
 c0016cc:	30000044 	.word	0x30000044
 c0016d0:	0c008864 	.word	0x0c008864
 c0016d4:	0c0088bc 	.word	0x0c0088bc
 c0016d8:	30000474 	.word	0x30000474
 c0016dc:	300000e4 	.word	0x300000e4
 c0016e0:	30000030 	.word	0x30000030
		SECURE_SPI_Receive_Classification();
 c0016e4:	f000 f97a 	bl	c0019dc <SECURE_SPI_Receive_Classification>
		HAL_Delay(100);
 c0016e8:	2064      	movs	r0, #100	; 0x64
 c0016ea:	f000 ff37 	bl	c00255c <HAL_Delay>
	while(!res){
 c0016ee:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 c0016f2:	2b00      	cmp	r3, #0
 c0016f4:	d0f6      	beq.n	c0016e4 <__acle_se_SECURE_Send_Modified_Mem+0x3f4>
 c0016f6:	46b5      	mov	sp, r6
	}


}
 c0016f8:	bf00      	nop
 c0016fa:	f207 473c 	addw	r7, r7, #1084	; 0x43c
 c0016fe:	46bd      	mov	sp, r7
 c001700:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 c001704:	4670      	mov	r0, lr
 c001706:	4671      	mov	r1, lr
 c001708:	4672      	mov	r2, lr
 c00170a:	4673      	mov	r3, lr
 c00170c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001710:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001714:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001718:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00171c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001720:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001724:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001728:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00172c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001730:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001734:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001738:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00173c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001740:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001744:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001748:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00174c:	f38e 8c00 	msr	CPSR_fs, lr
 c001750:	b410      	push	{r4}
 c001752:	eef1 ca10 	vmrs	ip, fpscr
 c001756:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00175a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00175e:	ea0c 0c04 	and.w	ip, ip, r4
 c001762:	eee1 ca10 	vmsr	fpscr, ip
 c001766:	bc10      	pop	{r4}
 c001768:	46f4      	mov	ip, lr
 c00176a:	4774      	bxns	lr

0c00176c <SECURE_SPI_Send_Signal>:


//sends the start transmission signal out through the SPI Stream
//this allows the esp32 to know that the data it is receiving is the number of modifed memory blocks
void SECURE_SPI_Send_Signal(uint8_t* signal, int size){
 c00176c:	b580      	push	{r7, lr}
 c00176e:	b082      	sub	sp, #8
 c001770:	af00      	add	r7, sp, #0
 c001772:	6078      	str	r0, [r7, #4]
 c001774:	6039      	str	r1, [r7, #0]
	wTransferState = TRANSFER_WAIT;
 c001776:	4b15      	ldr	r3, [pc, #84]	; (c0017cc <SECURE_SPI_Send_Signal+0x60>)
 c001778:	2200      	movs	r2, #0
 c00177a:	601a      	str	r2, [r3, #0]

	printf("Sending the %s signal...\n\r", (char*)signal);
 c00177c:	6879      	ldr	r1, [r7, #4]
 c00177e:	4814      	ldr	r0, [pc, #80]	; (c0017d0 <SECURE_SPI_Send_Signal+0x64>)
 c001780:	f005 fe92 	bl	c0074a8 <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)signal, size) != HAL_OK)
 c001784:	683b      	ldr	r3, [r7, #0]
 c001786:	b29b      	uxth	r3, r3
 c001788:	461a      	mov	r2, r3
 c00178a:	6879      	ldr	r1, [r7, #4]
 c00178c:	4811      	ldr	r0, [pc, #68]	; (c0017d4 <SECURE_SPI_Send_Signal+0x68>)
 c00178e:	f004 f89f 	bl	c0058d0 <HAL_SPI_Transmit_DMA>
 c001792:	4603      	mov	r3, r0
 c001794:	2b00      	cmp	r3, #0
 c001796:	d004      	beq.n	c0017a2 <SECURE_SPI_Send_Signal+0x36>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c001798:	480f      	ldr	r0, [pc, #60]	; (c0017d8 <SECURE_SPI_Send_Signal+0x6c>)
 c00179a:	f005 fe85 	bl	c0074a8 <iprintf>
		 Error_Handler();
 c00179e:	f7ff fc55 	bl	c00104c <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c0017a2:	bf00      	nop
 c0017a4:	4b09      	ldr	r3, [pc, #36]	; (c0017cc <SECURE_SPI_Send_Signal+0x60>)
 c0017a6:	681b      	ldr	r3, [r3, #0]
 c0017a8:	2b00      	cmp	r3, #0
 c0017aa:	d0fb      	beq.n	c0017a4 <SECURE_SPI_Send_Signal+0x38>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c0017ac:	4b07      	ldr	r3, [pc, #28]	; (c0017cc <SECURE_SPI_Send_Signal+0x60>)
 c0017ae:	681b      	ldr	r3, [r3, #0]
 c0017b0:	2b01      	cmp	r3, #1
 c0017b2:	d104      	bne.n	c0017be <SECURE_SPI_Send_Signal+0x52>
	 {
		 case TRANSFER_COMPLETE:
		   printf("The %s signal was successfully transmitted\n\r", (char*)signal);
 c0017b4:	6879      	ldr	r1, [r7, #4]
 c0017b6:	4809      	ldr	r0, [pc, #36]	; (c0017dc <SECURE_SPI_Send_Signal+0x70>)
 c0017b8:	f005 fe76 	bl	c0074a8 <iprintf>
		   break;
 c0017bc:	e002      	b.n	c0017c4 <SECURE_SPI_Send_Signal+0x58>
		 default :
		   Error_Handler();
 c0017be:	f7ff fc45 	bl	c00104c <Error_Handler>
		   break;
 c0017c2:	bf00      	nop
	 }
}
 c0017c4:	bf00      	nop
 c0017c6:	3708      	adds	r7, #8
 c0017c8:	46bd      	mov	sp, r7
 c0017ca:	bd80      	pop	{r7, pc}
 c0017cc:	30000460 	.word	0x30000460
 c0017d0:	0c008900 	.word	0x0c008900
 c0017d4:	300001c8 	.word	0x300001c8
 c0017d8:	0c00891c 	.word	0x0c00891c
 c0017dc:	0c008944 	.word	0x0c008944

0c0017e0 <SECURE_SPI_Send_Data_Buf>:


//sends the number of modifed memory blocks out through the SPI Stream
//this allows the esp32 to know how many memory blocks it needs to receive
void SECURE_SPI_Send_Data_Buf(uint8_t* data, int size){
 c0017e0:	b580      	push	{r7, lr}
 c0017e2:	b082      	sub	sp, #8
 c0017e4:	af00      	add	r7, sp, #0
 c0017e6:	6078      	str	r0, [r7, #4]
 c0017e8:	6039      	str	r1, [r7, #0]
	wTransferState = TRANSFER_WAIT;
 c0017ea:	4b14      	ldr	r3, [pc, #80]	; (c00183c <SECURE_SPI_Send_Data_Buf+0x5c>)
 c0017ec:	2200      	movs	r2, #0
 c0017ee:	601a      	str	r2, [r3, #0]

	printf("Sending the start size signal...\n\r");
 c0017f0:	4813      	ldr	r0, [pc, #76]	; (c001840 <SECURE_SPI_Send_Data_Buf+0x60>)
 c0017f2:	f005 fe59 	bl	c0074a8 <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *) data, size) != HAL_OK)
 c0017f6:	683b      	ldr	r3, [r7, #0]
 c0017f8:	b29b      	uxth	r3, r3
 c0017fa:	461a      	mov	r2, r3
 c0017fc:	6879      	ldr	r1, [r7, #4]
 c0017fe:	4811      	ldr	r0, [pc, #68]	; (c001844 <SECURE_SPI_Send_Data_Buf+0x64>)
 c001800:	f004 f866 	bl	c0058d0 <HAL_SPI_Transmit_DMA>
 c001804:	4603      	mov	r3, r0
 c001806:	2b00      	cmp	r3, #0
 c001808:	d004      	beq.n	c001814 <SECURE_SPI_Send_Data_Buf+0x34>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c00180a:	480f      	ldr	r0, [pc, #60]	; (c001848 <SECURE_SPI_Send_Data_Buf+0x68>)
 c00180c:	f005 fe4c 	bl	c0074a8 <iprintf>
		 Error_Handler();
 c001810:	f7ff fc1c 	bl	c00104c <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001814:	bf00      	nop
 c001816:	4b09      	ldr	r3, [pc, #36]	; (c00183c <SECURE_SPI_Send_Data_Buf+0x5c>)
 c001818:	681b      	ldr	r3, [r3, #0]
 c00181a:	2b00      	cmp	r3, #0
 c00181c:	d0fb      	beq.n	c001816 <SECURE_SPI_Send_Data_Buf+0x36>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c00181e:	4b07      	ldr	r3, [pc, #28]	; (c00183c <SECURE_SPI_Send_Data_Buf+0x5c>)
 c001820:	681b      	ldr	r3, [r3, #0]
 c001822:	2b01      	cmp	r3, #1
 c001824:	d103      	bne.n	c00182e <SECURE_SPI_Send_Data_Buf+0x4e>
	 {
		 case TRANSFER_COMPLETE:
		   printf("The number of modified blocks was successfully transmitted\n\r");
 c001826:	4809      	ldr	r0, [pc, #36]	; (c00184c <SECURE_SPI_Send_Data_Buf+0x6c>)
 c001828:	f005 fe3e 	bl	c0074a8 <iprintf>
		   break;
 c00182c:	e002      	b.n	c001834 <SECURE_SPI_Send_Data_Buf+0x54>
		 default :
		   Error_Handler();
 c00182e:	f7ff fc0d 	bl	c00104c <Error_Handler>
		   break;
 c001832:	bf00      	nop
	 }
}
 c001834:	bf00      	nop
 c001836:	3708      	adds	r7, #8
 c001838:	46bd      	mov	sp, r7
 c00183a:	bd80      	pop	{r7, pc}
 c00183c:	30000460 	.word	0x30000460
 c001840:	0c008974 	.word	0x0c008974
 c001844:	300001c8 	.word	0x300001c8
 c001848:	0c00891c 	.word	0x0c00891c
 c00184c:	0c008998 	.word	0x0c008998

0c001850 <SECURE_SPI_Send_Data_Block>:



void SECURE_SPI_Send_Data_Block(uint32_t* addr){
 c001850:	b580      	push	{r7, lr}
 c001852:	b082      	sub	sp, #8
 c001854:	af00      	add	r7, sp, #0
 c001856:	6078      	str	r0, [r7, #4]

	//fetch the memory
	SECURE_DMA_Fetch_NonSecure_Mem((uint32_t*)addr, BUFFER_SIZE/4);
 c001858:	f44f 7180 	mov.w	r1, #256	; 0x100
 c00185c:	6878      	ldr	r0, [r7, #4]
 c00185e:	f000 f835 	bl	c0018cc <SECURE_DMA_Fetch_NonSecure_Mem>

	wTransferState = TRANSFER_WAIT;
 c001862:	4b14      	ldr	r3, [pc, #80]	; (c0018b4 <SECURE_SPI_Send_Data_Block+0x64>)
 c001864:	2200      	movs	r2, #0
 c001866:	601a      	str	r2, [r3, #0]
	/*** send the current memory block from the non-secure flash bank to SPI ***/
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *) SEC_Mem_Buffer, BUFFER_SIZE) != HAL_OK)
 c001868:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c00186c:	4912      	ldr	r1, [pc, #72]	; (c0018b8 <SECURE_SPI_Send_Data_Block+0x68>)
 c00186e:	4813      	ldr	r0, [pc, #76]	; (c0018bc <SECURE_SPI_Send_Data_Block+0x6c>)
 c001870:	f004 f82e 	bl	c0058d0 <HAL_SPI_Transmit_DMA>
 c001874:	4603      	mov	r3, r0
 c001876:	2b00      	cmp	r3, #0
 c001878:	d004      	beq.n	c001884 <SECURE_SPI_Send_Data_Block+0x34>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c00187a:	4811      	ldr	r0, [pc, #68]	; (c0018c0 <SECURE_SPI_Send_Data_Block+0x70>)
 c00187c:	f005 fe14 	bl	c0074a8 <iprintf>
		 Error_Handler();
 c001880:	f7ff fbe4 	bl	c00104c <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001884:	bf00      	nop
 c001886:	4b0b      	ldr	r3, [pc, #44]	; (c0018b4 <SECURE_SPI_Send_Data_Block+0x64>)
 c001888:	681b      	ldr	r3, [r3, #0]
 c00188a:	2b00      	cmp	r3, #0
 c00188c:	d0fb      	beq.n	c001886 <SECURE_SPI_Send_Data_Block+0x36>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c00188e:	4b09      	ldr	r3, [pc, #36]	; (c0018b4 <SECURE_SPI_Send_Data_Block+0x64>)
 c001890:	681b      	ldr	r3, [r3, #0]
 c001892:	2b01      	cmp	r3, #1
 c001894:	d103      	bne.n	c00189e <SECURE_SPI_Send_Data_Block+0x4e>
	 {
		 case TRANSFER_COMPLETE:
		   printf("The memory block was transferred successfully.\n\r");
 c001896:	480b      	ldr	r0, [pc, #44]	; (c0018c4 <SECURE_SPI_Send_Data_Block+0x74>)
 c001898:	f005 fe06 	bl	c0074a8 <iprintf>
		   break;
 c00189c:	e005      	b.n	c0018aa <SECURE_SPI_Send_Data_Block+0x5a>
		 default :
		   printf("There was an error in transferring the memory dump.\n\r");
 c00189e:	480a      	ldr	r0, [pc, #40]	; (c0018c8 <SECURE_SPI_Send_Data_Block+0x78>)
 c0018a0:	f005 fe02 	bl	c0074a8 <iprintf>
		   Error_Handler();
 c0018a4:	f7ff fbd2 	bl	c00104c <Error_Handler>
		   break;
 c0018a8:	bf00      	nop
	 }

}
 c0018aa:	bf00      	nop
 c0018ac:	3708      	adds	r7, #8
 c0018ae:	46bd      	mov	sp, r7
 c0018b0:	bd80      	pop	{r7, pc}
 c0018b2:	bf00      	nop
 c0018b4:	30000460 	.word	0x30000460
 c0018b8:	30000474 	.word	0x30000474
 c0018bc:	300001c8 	.word	0x300001c8
 c0018c0:	0c00891c 	.word	0x0c00891c
 c0018c4:	0c0089d8 	.word	0x0c0089d8
 c0018c8:	0c008a0c 	.word	0x0c008a0c

0c0018cc <SECURE_DMA_Fetch_NonSecure_Mem>:
  * @param  Size        		requested size of data (256 words)
  * @param  func   				pointer to non-secure callback function on transfer end
  * @retval SUCCESS or ERROR
  */
void SECURE_DMA_Fetch_NonSecure_Mem(uint32_t *nsc_mem_buffer, uint32_t Size)
{
 c0018cc:	b580      	push	{r7, lr}
 c0018ce:	b082      	sub	sp, #8
 c0018d0:	af00      	add	r7, sp, #0
 c0018d2:	6078      	str	r0, [r7, #4]
 c0018d4:	6039      	str	r1, [r7, #0]

  /* Check that the address range in non-secure */
   if (cmse_check_address_range(nsc_mem_buffer, Size * sizeof(uint32_t), CMSE_NONSECURE))
 c0018d6:	683b      	ldr	r3, [r7, #0]
 c0018d8:	009b      	lsls	r3, r3, #2
 c0018da:	2212      	movs	r2, #18
 c0018dc:	4619      	mov	r1, r3
 c0018de:	6878      	ldr	r0, [r7, #4]
 c0018e0:	f7fe fca8 	bl	c000234 <cmse_check_address_range>
 c0018e4:	4603      	mov	r3, r0
 c0018e6:	2b00      	cmp	r3, #0
 c0018e8:	d013      	beq.n	c001912 <SECURE_DMA_Fetch_NonSecure_Mem+0x46>
   {
	   printf("memory dump found to be in range.\n\r");
 c0018ea:	480d      	ldr	r0, [pc, #52]	; (c001920 <SECURE_DMA_Fetch_NonSecure_Mem+0x54>)
 c0018ec:	f005 fddc 	bl	c0074a8 <iprintf>
	    if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,
 c0018f0:	6879      	ldr	r1, [r7, #4]
 c0018f2:	4a0c      	ldr	r2, [pc, #48]	; (c001924 <SECURE_DMA_Fetch_NonSecure_Mem+0x58>)
 c0018f4:	683b      	ldr	r3, [r7, #0]
 c0018f6:	480c      	ldr	r0, [pc, #48]	; (c001928 <SECURE_DMA_Fetch_NonSecure_Mem+0x5c>)
 c0018f8:	f001 f80c 	bl	c002914 <HAL_DMA_Start_IT>
 c0018fc:	4603      	mov	r3, r0
 c0018fe:	2b00      	cmp	r3, #0
 c001900:	d103      	bne.n	c00190a <SECURE_DMA_Fetch_NonSecure_Mem+0x3e>
	                             (uint32_t)nsc_mem_buffer,
	                             (uint32_t)SEC_Mem_Buffer,
	                             Size) == HAL_OK)
		{
		  /* Transfer started */
	    	printf("Transfer has started\n\r");
 c001902:	480a      	ldr	r0, [pc, #40]	; (c00192c <SECURE_DMA_Fetch_NonSecure_Mem+0x60>)
 c001904:	f005 fdd0 	bl	c0074a8 <iprintf>
		}
   }else{
	   printf("Address out of range...\n\r");
   }

}
 c001908:	e006      	b.n	c001918 <SECURE_DMA_Fetch_NonSecure_Mem+0x4c>
			printf("transfer was not able to start.\n\r");
 c00190a:	4809      	ldr	r0, [pc, #36]	; (c001930 <SECURE_DMA_Fetch_NonSecure_Mem+0x64>)
 c00190c:	f005 fdcc 	bl	c0074a8 <iprintf>
}
 c001910:	e002      	b.n	c001918 <SECURE_DMA_Fetch_NonSecure_Mem+0x4c>
	   printf("Address out of range...\n\r");
 c001912:	4808      	ldr	r0, [pc, #32]	; (c001934 <SECURE_DMA_Fetch_NonSecure_Mem+0x68>)
 c001914:	f005 fdc8 	bl	c0074a8 <iprintf>
}
 c001918:	bf00      	nop
 c00191a:	3708      	adds	r7, #8
 c00191c:	46bd      	mov	sp, r7
 c00191e:	bd80      	pop	{r7, pc}
 c001920:	0c008a44 	.word	0x0c008a44
 c001924:	30000474 	.word	0x30000474
 c001928:	30000390 	.word	0x30000390
 c00192c:	0c008a68 	.word	0x0c008a68
 c001930:	0c008a80 	.word	0x0c008a80
 c001934:	0c008aa4 	.word	0x0c008aa4

0c001938 <SECURE_SPI_Send_Block_List>:



void SECURE_SPI_Send_Block_List(char* blockList, int size){
 c001938:	b580      	push	{r7, lr}
 c00193a:	b082      	sub	sp, #8
 c00193c:	af00      	add	r7, sp, #0
 c00193e:	6078      	str	r0, [r7, #4]
 c001940:	6039      	str	r1, [r7, #0]
	wTransferState = TRANSFER_WAIT;
 c001942:	4b14      	ldr	r3, [pc, #80]	; (c001994 <SECURE_SPI_Send_Block_List+0x5c>)
 c001944:	2200      	movs	r2, #0
 c001946:	601a      	str	r2, [r3, #0]

	//transmit via SPI
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *) blockList, size) != HAL_OK)
 c001948:	683b      	ldr	r3, [r7, #0]
 c00194a:	b29b      	uxth	r3, r3
 c00194c:	461a      	mov	r2, r3
 c00194e:	6879      	ldr	r1, [r7, #4]
 c001950:	4811      	ldr	r0, [pc, #68]	; (c001998 <SECURE_SPI_Send_Block_List+0x60>)
 c001952:	f003 ffbd 	bl	c0058d0 <HAL_SPI_Transmit_DMA>
 c001956:	4603      	mov	r3, r0
 c001958:	2b00      	cmp	r3, #0
 c00195a:	d004      	beq.n	c001966 <SECURE_SPI_Send_Block_List+0x2e>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c00195c:	480f      	ldr	r0, [pc, #60]	; (c00199c <SECURE_SPI_Send_Block_List+0x64>)
 c00195e:	f005 fda3 	bl	c0074a8 <iprintf>
		 Error_Handler();
 c001962:	f7ff fb73 	bl	c00104c <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001966:	bf00      	nop
 c001968:	4b0a      	ldr	r3, [pc, #40]	; (c001994 <SECURE_SPI_Send_Block_List+0x5c>)
 c00196a:	681b      	ldr	r3, [r3, #0]
 c00196c:	2b00      	cmp	r3, #0
 c00196e:	d0fb      	beq.n	c001968 <SECURE_SPI_Send_Block_List+0x30>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c001970:	4b08      	ldr	r3, [pc, #32]	; (c001994 <SECURE_SPI_Send_Block_List+0x5c>)
 c001972:	681b      	ldr	r3, [r3, #0]
 c001974:	2b01      	cmp	r3, #1
 c001976:	d103      	bne.n	c001980 <SECURE_SPI_Send_Block_List+0x48>
	 {
		 case TRANSFER_COMPLETE:
		   printf("The data was transferred successfully.");
 c001978:	4809      	ldr	r0, [pc, #36]	; (c0019a0 <SECURE_SPI_Send_Block_List+0x68>)
 c00197a:	f005 fd95 	bl	c0074a8 <iprintf>
		   break;
 c00197e:	e005      	b.n	c00198c <SECURE_SPI_Send_Block_List+0x54>
		 default :
		   printf("There was an error in transferring the data.\n\r");
 c001980:	4808      	ldr	r0, [pc, #32]	; (c0019a4 <SECURE_SPI_Send_Block_List+0x6c>)
 c001982:	f005 fd91 	bl	c0074a8 <iprintf>
		   Error_Handler();
 c001986:	f7ff fb61 	bl	c00104c <Error_Handler>
		   break;
 c00198a:	bf00      	nop
	 }
}
 c00198c:	bf00      	nop
 c00198e:	3708      	adds	r7, #8
 c001990:	46bd      	mov	sp, r7
 c001992:	bd80      	pop	{r7, pc}
 c001994:	30000460 	.word	0x30000460
 c001998:	300001c8 	.word	0x300001c8
 c00199c:	0c00891c 	.word	0x0c00891c
 c0019a0:	0c008ac0 	.word	0x0c008ac0
 c0019a4:	0c008ae8 	.word	0x0c008ae8

0c0019a8 <SECURE_SPI_Toggle_Comm>:
/**
  * @brief  Secure service to toggle SPI communication on or off. Must be called @ beginning and end of SPI transmission
  * @param state	SPI ON: 0 and SPI OFF: 1
  * @retval SUCCESS or ERROR
  */
void SECURE_SPI_Toggle_Comm(int state){
 c0019a8:	b580      	push	{r7, lr}
 c0019aa:	b082      	sub	sp, #8
 c0019ac:	af00      	add	r7, sp, #0
 c0019ae:	6078      	str	r0, [r7, #4]
	if(state > 0){
 c0019b0:	687b      	ldr	r3, [r7, #4]
 c0019b2:	2b00      	cmp	r3, #0
 c0019b4:	dd06      	ble.n	c0019c4 <SECURE_SPI_Toggle_Comm+0x1c>
		//off state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c0019b6:	2201      	movs	r2, #1
 c0019b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c0019bc:	4806      	ldr	r0, [pc, #24]	; (c0019d8 <SECURE_SPI_Toggle_Comm+0x30>)
 c0019be:	f001 fc21 	bl	c003204 <HAL_GPIO_WritePin>

	}else{
		//on state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
	}
}
 c0019c2:	e005      	b.n	c0019d0 <SECURE_SPI_Toggle_Comm+0x28>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 c0019c4:	2200      	movs	r2, #0
 c0019c6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c0019ca:	4803      	ldr	r0, [pc, #12]	; (c0019d8 <SECURE_SPI_Toggle_Comm+0x30>)
 c0019cc:	f001 fc1a 	bl	c003204 <HAL_GPIO_WritePin>
}
 c0019d0:	bf00      	nop
 c0019d2:	3708      	adds	r7, #8
 c0019d4:	46bd      	mov	sp, r7
 c0019d6:	bd80      	pop	{r7, pc}
 c0019d8:	52020400 	.word	0x52020400

0c0019dc <SECURE_SPI_Receive_Classification>:



//this function checks for & receives a classification from a stream of SPI data coming in through MISO
//It must be called in memory forensics after sending a full memory dump to the server
int SECURE_SPI_Receive_Classification(){
 c0019dc:	b580      	push	{r7, lr}
 c0019de:	b086      	sub	sp, #24
 c0019e0:	af00      	add	r7, sp, #0

	int containsStartClassification;
	int containsEndClassification;
	int retval = 0;
 c0019e2:	2300      	movs	r3, #0
 c0019e4:	617b      	str	r3, [r7, #20]
	//perform a new rx operation
	wTransferState = TRANSFER_WAIT;
 c0019e6:	4b38      	ldr	r3, [pc, #224]	; (c001ac8 <SECURE_SPI_Receive_Classification+0xec>)
 c0019e8:	2200      	movs	r2, #0
 c0019ea:	601a      	str	r2, [r3, #0]
	if (HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)aRxBuffer, BUFFER_SIZE) != HAL_OK)
 c0019ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c0019f0:	4936      	ldr	r1, [pc, #216]	; (c001acc <SECURE_SPI_Receive_Classification+0xf0>)
 c0019f2:	4837      	ldr	r0, [pc, #220]	; (c001ad0 <SECURE_SPI_Receive_Classification+0xf4>)
 c0019f4:	f004 f860 	bl	c005ab8 <HAL_SPI_Receive_DMA>
 c0019f8:	4603      	mov	r3, r0
 c0019fa:	2b00      	cmp	r3, #0
 c0019fc:	d004      	beq.n	c001a08 <SECURE_SPI_Receive_Classification+0x2c>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up RX.\n\r");
 c0019fe:	4835      	ldr	r0, [pc, #212]	; (c001ad4 <SECURE_SPI_Receive_Classification+0xf8>)
 c001a00:	f005 fd52 	bl	c0074a8 <iprintf>
		 Error_Handler();
 c001a04:	f7ff fb22 	bl	c00104c <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001a08:	bf00      	nop
 c001a0a:	4b2f      	ldr	r3, [pc, #188]	; (c001ac8 <SECURE_SPI_Receive_Classification+0xec>)
 c001a0c:	681b      	ldr	r3, [r3, #0]
 c001a0e:	2b00      	cmp	r3, #0
 c001a10:	d0fb      	beq.n	c001a0a <SECURE_SPI_Receive_Classification+0x2e>
	 {
	 }

	//check SPI transfer state
	if(wTransferState == TRANSFER_COMPLETE){
 c001a12:	4b2d      	ldr	r3, [pc, #180]	; (c001ac8 <SECURE_SPI_Receive_Classification+0xec>)
 c001a14:	681b      	ldr	r3, [r3, #0]
 c001a16:	2b01      	cmp	r3, #1
 c001a18:	d14e      	bne.n	c001ab8 <SECURE_SPI_Receive_Classification+0xdc>
//			printf("%d\t", aRxBuffer[i]);
//		}
//		printf("\n\r");

		//if the transfer completed, look for the start and end signals in the SPI rx buffer
		containsStartClassification = SearchForSig(START_CLASSIFICATION_SIG, START_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c001a1a:	4b2f      	ldr	r3, [pc, #188]	; (c001ad8 <SECURE_SPI_Receive_Classification+0xfc>)
 c001a1c:	6819      	ldr	r1, [r3, #0]
 c001a1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c001a22:	4a2a      	ldr	r2, [pc, #168]	; (c001acc <SECURE_SPI_Receive_Classification+0xf0>)
 c001a24:	482d      	ldr	r0, [pc, #180]	; (c001adc <SECURE_SPI_Receive_Classification+0x100>)
 c001a26:	f7ff fa65 	bl	c000ef4 <SearchForSig>
 c001a2a:	6138      	str	r0, [r7, #16]
		containsEndClassification = SearchForSig(END_CLASSIFICATION_SIG, END_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c001a2c:	4b2c      	ldr	r3, [pc, #176]	; (c001ae0 <SECURE_SPI_Receive_Classification+0x104>)
 c001a2e:	6819      	ldr	r1, [r3, #0]
 c001a30:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c001a34:	4a25      	ldr	r2, [pc, #148]	; (c001acc <SECURE_SPI_Receive_Classification+0xf0>)
 c001a36:	482b      	ldr	r0, [pc, #172]	; (c001ae4 <SECURE_SPI_Receive_Classification+0x108>)
 c001a38:	f7ff fa5c 	bl	c000ef4 <SearchForSig>
 c001a3c:	60f8      	str	r0, [r7, #12]
		if(containsStartClassification >= 0 && containsEndClassification >= 0){
 c001a3e:	693b      	ldr	r3, [r7, #16]
 c001a40:	2b00      	cmp	r3, #0
 c001a42:	db3b      	blt.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
 c001a44:	68fb      	ldr	r3, [r7, #12]
 c001a46:	2b00      	cmp	r3, #0
 c001a48:	db38      	blt.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
			//The start and end signals were found; make sure there's only one element between them
			if(containsStartClassification == containsEndClassification - START_CLASSIFICATION_SIZE - 1){
 c001a4a:	4b23      	ldr	r3, [pc, #140]	; (c001ad8 <SECURE_SPI_Receive_Classification+0xfc>)
 c001a4c:	681b      	ldr	r3, [r3, #0]
 c001a4e:	68fa      	ldr	r2, [r7, #12]
 c001a50:	1ad3      	subs	r3, r2, r3
 c001a52:	3b01      	subs	r3, #1
 c001a54:	693a      	ldr	r2, [r7, #16]
 c001a56:	429a      	cmp	r2, r3
 c001a58:	d125      	bne.n	c001aa6 <SECURE_SPI_Receive_Classification+0xca>
				retval = 1;
 c001a5a:	2301      	movs	r3, #1
 c001a5c:	617b      	str	r3, [r7, #20]
				//try to extract the classification
				printf("Classification found. Extracting...\n\r");
 c001a5e:	4822      	ldr	r0, [pc, #136]	; (c001ae8 <SECURE_SPI_Receive_Classification+0x10c>)
 c001a60:	f005 fd22 	bl	c0074a8 <iprintf>
				int classificationInd = containsEndClassification - 1;
 c001a64:	68fb      	ldr	r3, [r7, #12]
 c001a66:	3b01      	subs	r3, #1
 c001a68:	60bb      	str	r3, [r7, #8]
				uint8_t classification = aRxBuffer[classificationInd];
 c001a6a:	4a18      	ldr	r2, [pc, #96]	; (c001acc <SECURE_SPI_Receive_Classification+0xf0>)
 c001a6c:	68bb      	ldr	r3, [r7, #8]
 c001a6e:	4413      	add	r3, r2
 c001a70:	781b      	ldrb	r3, [r3, #0]
 c001a72:	71fb      	strb	r3, [r7, #7]
				printf("Classification: %c\n\r", classification);
 c001a74:	79fb      	ldrb	r3, [r7, #7]
 c001a76:	4619      	mov	r1, r3
 c001a78:	481c      	ldr	r0, [pc, #112]	; (c001aec <SECURE_SPI_Receive_Classification+0x110>)
 c001a7a:	f005 fd15 	bl	c0074a8 <iprintf>
				if(classification == '1'){
 c001a7e:	79fb      	ldrb	r3, [r7, #7]
 c001a80:	2b31      	cmp	r3, #49	; 0x31
 c001a82:	d103      	bne.n	c001a8c <SECURE_SPI_Receive_Classification+0xb0>
					printf("Memory was found to be benign.\n\r");
 c001a84:	481a      	ldr	r0, [pc, #104]	; (c001af0 <SECURE_SPI_Receive_Classification+0x114>)
 c001a86:	f005 fd0f 	bl	c0074a8 <iprintf>
 c001a8a:	e017      	b.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
				}else if(classification == '0'){
 c001a8c:	79fb      	ldrb	r3, [r7, #7]
 c001a8e:	2b30      	cmp	r3, #48	; 0x30
 c001a90:	d103      	bne.n	c001a9a <SECURE_SPI_Receive_Classification+0xbe>
					printf("Memory was found to be malicious.\n\r");
 c001a92:	4818      	ldr	r0, [pc, #96]	; (c001af4 <SECURE_SPI_Receive_Classification+0x118>)
 c001a94:	f005 fd08 	bl	c0074a8 <iprintf>
 c001a98:	e010      	b.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
				}else{
					printf("Error in receiving classification from server. Bad value: %d\n\r", classification);
 c001a9a:	79fb      	ldrb	r3, [r7, #7]
 c001a9c:	4619      	mov	r1, r3
 c001a9e:	4816      	ldr	r0, [pc, #88]	; (c001af8 <SECURE_SPI_Receive_Classification+0x11c>)
 c001aa0:	f005 fd02 	bl	c0074a8 <iprintf>
 c001aa4:	e00a      	b.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
				}
			}else{
				printf("Error: the SPI classification stream is incorrectly formatted.\n\r");
 c001aa6:	4815      	ldr	r0, [pc, #84]	; (c001afc <SECURE_SPI_Receive_Classification+0x120>)
 c001aa8:	f005 fcfe 	bl	c0074a8 <iprintf>
				printf("Start classification: %d, End classification: %d\n\r", containsStartClassification, containsEndClassification);
 c001aac:	68fa      	ldr	r2, [r7, #12]
 c001aae:	6939      	ldr	r1, [r7, #16]
 c001ab0:	4813      	ldr	r0, [pc, #76]	; (c001b00 <SECURE_SPI_Receive_Classification+0x124>)
 c001ab2:	f005 fcf9 	bl	c0074a8 <iprintf>
 c001ab6:	e001      	b.n	c001abc <SECURE_SPI_Receive_Classification+0xe0>
			}
		}
	}else{
		//if transfer didn't complete
		Error_Handler();
 c001ab8:	f7ff fac8 	bl	c00104c <Error_Handler>
	}
	return retval;
 c001abc:	697b      	ldr	r3, [r7, #20]

}
 c001abe:	4618      	mov	r0, r3
 c001ac0:	3718      	adds	r7, #24
 c001ac2:	46bd      	mov	sp, r7
 c001ac4:	bd80      	pop	{r7, pc}
 c001ac6:	bf00      	nop
 c001ac8:	30000460 	.word	0x30000460
 c001acc:	30001884 	.word	0x30001884
 c001ad0:	300001c8 	.word	0x300001c8
 c001ad4:	0c008b18 	.word	0x0c008b18
 c001ad8:	300000d4 	.word	0x300000d4
 c001adc:	30000000 	.word	0x30000000
 c001ae0:	300000d0 	.word	0x300000d0
 c001ae4:	30000018 	.word	0x30000018
 c001ae8:	0c008b40 	.word	0x0c008b40
 c001aec:	0c008b68 	.word	0x0c008b68
 c001af0:	0c008b80 	.word	0x0c008b80
 c001af4:	0c008ba4 	.word	0x0c008ba4
 c001af8:	0c008bc8 	.word	0x0c008bc8
 c001afc:	0c008c08 	.word	0x0c008c08
 c001b00:	0c008c4c 	.word	0x0c008c4c

0c001b04 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001b04:	b480      	push	{r7}
 c001b06:	b083      	sub	sp, #12
 c001b08:	af00      	add	r7, sp, #0
 c001b0a:	4603      	mov	r3, r0
 c001b0c:	6039      	str	r1, [r7, #0]
 c001b0e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001b10:	683b      	ldr	r3, [r7, #0]
 c001b12:	2b00      	cmp	r3, #0
 c001b14:	d00d      	beq.n	c001b32 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c001b16:	79fb      	ldrb	r3, [r7, #7]
 c001b18:	2b00      	cmp	r3, #0
 c001b1a:	d002      	beq.n	c001b22 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001b1c:	2b01      	cmp	r3, #1
 c001b1e:	d004      	beq.n	c001b2a <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001b20:	e008      	b.n	c001b34 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c001b22:	4a21      	ldr	r2, [pc, #132]	; (c001ba8 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001b24:	683b      	ldr	r3, [r7, #0]
 c001b26:	6013      	str	r3, [r2, #0]
        break;
 c001b28:	e004      	b.n	c001b34 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c001b2a:	4a20      	ldr	r2, [pc, #128]	; (c001bac <__acle_se_SECURE_RegisterCallback+0xa8>)
 c001b2c:	683b      	ldr	r3, [r7, #0]
 c001b2e:	6013      	str	r3, [r2, #0]
        break;
 c001b30:	e000      	b.n	c001b34 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c001b32:	bf00      	nop
}
 c001b34:	bf00      	nop
 c001b36:	370c      	adds	r7, #12
 c001b38:	46bd      	mov	sp, r7
 c001b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001b3e:	4670      	mov	r0, lr
 c001b40:	4671      	mov	r1, lr
 c001b42:	4672      	mov	r2, lr
 c001b44:	4673      	mov	r3, lr
 c001b46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001b4a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001b4e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001b52:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001b56:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001b5a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001b5e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001b62:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001b66:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001b6a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001b6e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001b72:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001b76:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001b7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001b7e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001b82:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001b86:	f38e 8c00 	msr	CPSR_fs, lr
 c001b8a:	b410      	push	{r4}
 c001b8c:	eef1 ca10 	vmrs	ip, fpscr
 c001b90:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001b94:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001b98:	ea0c 0c04 	and.w	ip, ip, r4
 c001b9c:	eee1 ca10 	vmsr	fpscr, ip
 c001ba0:	bc10      	pop	{r4}
 c001ba2:	46f4      	mov	ip, lr
 c001ba4:	4774      	bxns	lr
 c001ba6:	bf00      	nop
 c001ba8:	30001c88 	.word	0x30001c88
 c001bac:	30001c8c 	.word	0x30001c8c

0c001bb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c001bb0:	b580      	push	{r7, lr}
 c001bb2:	b084      	sub	sp, #16
 c001bb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c001bb6:	4b15      	ldr	r3, [pc, #84]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001bba:	4a14      	ldr	r2, [pc, #80]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bbc:	f043 0301 	orr.w	r3, r3, #1
 c001bc0:	6613      	str	r3, [r2, #96]	; 0x60
 c001bc2:	4b12      	ldr	r3, [pc, #72]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bc4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001bc6:	f003 0301 	and.w	r3, r3, #1
 c001bca:	60fb      	str	r3, [r7, #12]
 c001bcc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c001bce:	4b0f      	ldr	r3, [pc, #60]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001bd2:	4a0e      	ldr	r2, [pc, #56]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bd4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001bd8:	6593      	str	r3, [r2, #88]	; 0x58
 c001bda:	4b0c      	ldr	r3, [pc, #48]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001bde:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001be2:	60bb      	str	r3, [r7, #8]
 c001be4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c001be6:	4b09      	ldr	r3, [pc, #36]	; (c001c0c <HAL_MspInit+0x5c>)
 c001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001bea:	4a08      	ldr	r2, [pc, #32]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c001bf0:	6493      	str	r3, [r2, #72]	; 0x48
 c001bf2:	4b06      	ldr	r3, [pc, #24]	; (c001c0c <HAL_MspInit+0x5c>)
 c001bf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001bf6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c001bfa:	607b      	str	r3, [r7, #4]
 c001bfc:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c001bfe:	f002 f8bf 	bl	c003d80 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001c02:	bf00      	nop
 c001c04:	3710      	adds	r7, #16
 c001c06:	46bd      	mov	sp, r7
 c001c08:	bd80      	pop	{r7, pc}
 c001c0a:	bf00      	nop
 c001c0c:	50021000 	.word	0x50021000

0c001c10 <HAL_HASH_MspInit>:
* This function configures the hardware resources used in this example
* @param hhash: HASH handle pointer
* @retval None
*/
void HAL_HASH_MspInit(HASH_HandleTypeDef* hhash)
{
 c001c10:	b480      	push	{r7}
 c001c12:	b085      	sub	sp, #20
 c001c14:	af00      	add	r7, sp, #0
 c001c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN HASH_MspInit 0 */

  /* USER CODE END HASH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_HASH_CLK_ENABLE();
 c001c18:	4b08      	ldr	r3, [pc, #32]	; (c001c3c <HAL_HASH_MspInit+0x2c>)
 c001c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c1c:	4a07      	ldr	r2, [pc, #28]	; (c001c3c <HAL_HASH_MspInit+0x2c>)
 c001c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001c22:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001c24:	4b05      	ldr	r3, [pc, #20]	; (c001c3c <HAL_HASH_MspInit+0x2c>)
 c001c26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001c2c:	60fb      	str	r3, [r7, #12]
 c001c2e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN HASH_MspInit 1 */

  /* USER CODE END HASH_MspInit 1 */

}
 c001c30:	bf00      	nop
 c001c32:	3714      	adds	r7, #20
 c001c34:	46bd      	mov	sp, r7
 c001c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c3a:	4770      	bx	lr
 c001c3c:	50021000 	.word	0x50021000

0c001c40 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c001c40:	b580      	push	{r7, lr}
 c001c42:	b08a      	sub	sp, #40	; 0x28
 c001c44:	af00      	add	r7, sp, #0
 c001c46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001c48:	f107 0314 	add.w	r3, r7, #20
 c001c4c:	2200      	movs	r2, #0
 c001c4e:	601a      	str	r2, [r3, #0]
 c001c50:	605a      	str	r2, [r3, #4]
 c001c52:	609a      	str	r2, [r3, #8]
 c001c54:	60da      	str	r2, [r3, #12]
 c001c56:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 c001c58:	687b      	ldr	r3, [r7, #4]
 c001c5a:	681b      	ldr	r3, [r3, #0]
 c001c5c:	4a77      	ldr	r2, [pc, #476]	; (c001e3c <HAL_SPI_MspInit+0x1fc>)
 c001c5e:	4293      	cmp	r3, r2
 c001c60:	f040 80e7 	bne.w	c001e32 <HAL_SPI_MspInit+0x1f2>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 c001c64:	4b76      	ldr	r3, [pc, #472]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001c68:	4a75      	ldr	r2, [pc, #468]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001c6e:	6593      	str	r3, [r2, #88]	; 0x58
 c001c70:	4b73      	ldr	r3, [pc, #460]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001c78:	613b      	str	r3, [r7, #16]
 c001c7a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c001c7c:	4b70      	ldr	r3, [pc, #448]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c80:	4a6f      	ldr	r2, [pc, #444]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c82:	f043 0308 	orr.w	r3, r3, #8
 c001c86:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001c88:	4b6d      	ldr	r3, [pc, #436]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c8c:	f003 0308 	and.w	r3, r3, #8
 c001c90:	60fb      	str	r3, [r7, #12]
 c001c92:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001c94:	4b6a      	ldr	r3, [pc, #424]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c98:	4a69      	ldr	r2, [pc, #420]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001c9a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001c9e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001ca0:	4b67      	ldr	r3, [pc, #412]	; (c001e40 <HAL_SPI_MspInit+0x200>)
 c001ca2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ca4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001ca8:	60bb      	str	r3, [r7, #8]
 c001caa:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 c001cac:	f002 f858 	bl	c003d60 <HAL_PWREx_EnableVddIO2>
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PG9     ------> SPI3_SCK
    PG10     ------> SPI3_MISO
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 c001cb0:	2340      	movs	r3, #64	; 0x40
 c001cb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001cb4:	2302      	movs	r3, #2
 c001cb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001cb8:	2300      	movs	r3, #0
 c001cba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001cbc:	2300      	movs	r3, #0
 c001cbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 c001cc0:	2305      	movs	r3, #5
 c001cc2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c001cc4:	f107 0314 	add.w	r3, r7, #20
 c001cc8:	4619      	mov	r1, r3
 c001cca:	485e      	ldr	r0, [pc, #376]	; (c001e44 <HAL_SPI_MspInit+0x204>)
 c001ccc:	f001 f91a 	bl	c002f04 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 c001cd0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c001cd4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001cd6:	2302      	movs	r3, #2
 c001cd8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001cda:	2300      	movs	r3, #0
 c001cdc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001cde:	2300      	movs	r3, #0
 c001ce0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c001ce2:	2306      	movs	r3, #6
 c001ce4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001ce6:	f107 0314 	add.w	r3, r7, #20
 c001cea:	4619      	mov	r1, r3
 c001cec:	4856      	ldr	r0, [pc, #344]	; (c001e48 <HAL_SPI_MspInit+0x208>)
 c001cee:	f001 f909 	bl	c002f04 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel2;
 c001cf2:	4b56      	ldr	r3, [pc, #344]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001cf4:	4a56      	ldr	r2, [pc, #344]	; (c001e50 <HAL_SPI_MspInit+0x210>)
 c001cf6:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 c001cf8:	4b54      	ldr	r3, [pc, #336]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001cfa:	220f      	movs	r2, #15
 c001cfc:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 c001cfe:	4b53      	ldr	r3, [pc, #332]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d00:	2200      	movs	r2, #0
 c001d02:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 c001d04:	4b51      	ldr	r3, [pc, #324]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d06:	2200      	movs	r2, #0
 c001d08:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 c001d0a:	4b50      	ldr	r3, [pc, #320]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d0c:	2280      	movs	r2, #128	; 0x80
 c001d0e:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c001d10:	4b4e      	ldr	r3, [pc, #312]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d12:	2200      	movs	r2, #0
 c001d14:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c001d16:	4b4d      	ldr	r3, [pc, #308]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d18:	2200      	movs	r2, #0
 c001d1a:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 c001d1c:	4b4b      	ldr	r3, [pc, #300]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d1e:	2200      	movs	r2, #0
 c001d20:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 c001d22:	4b4a      	ldr	r3, [pc, #296]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d24:	2200      	movs	r2, #0
 c001d26:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 c001d28:	4848      	ldr	r0, [pc, #288]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d2a:	f000 fd4b 	bl	c0027c4 <HAL_DMA_Init>
 c001d2e:	4603      	mov	r3, r0
 c001d30:	2b00      	cmp	r3, #0
 c001d32:	d001      	beq.n	c001d38 <HAL_SPI_MspInit+0xf8>
    {
      Error_Handler();
 c001d34:	f7ff f98a 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001d38:	2110      	movs	r1, #16
 c001d3a:	4844      	ldr	r0, [pc, #272]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d3c:	f000 ffba 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001d40:	4603      	mov	r3, r0
 c001d42:	2b00      	cmp	r3, #0
 c001d44:	d001      	beq.n	c001d4a <HAL_SPI_MspInit+0x10a>
    {
      Error_Handler();
 c001d46:	f7ff f981 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SEC) != HAL_OK)
 c001d4a:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001d4e:	483f      	ldr	r0, [pc, #252]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d50:	f000 ffb0 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001d54:	4603      	mov	r3, r0
 c001d56:	2b00      	cmp	r3, #0
 c001d58:	d001      	beq.n	c001d5e <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 c001d5a:	f7ff f977 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001d5e:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001d62:	483a      	ldr	r0, [pc, #232]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d64:	f000 ffa6 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001d68:	4603      	mov	r3, r0
 c001d6a:	2b00      	cmp	r3, #0
 c001d6c:	d001      	beq.n	c001d72 <HAL_SPI_MspInit+0x132>
    {
      Error_Handler();
 c001d6e:	f7ff f96d 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001d72:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001d76:	4835      	ldr	r0, [pc, #212]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d78:	f000 ff9c 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001d7c:	4603      	mov	r3, r0
 c001d7e:	2b00      	cmp	r3, #0
 c001d80:	d001      	beq.n	c001d86 <HAL_SPI_MspInit+0x146>
    {
      Error_Handler();
 c001d82:	f7ff f963 	bl	c00104c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 c001d86:	687b      	ldr	r3, [r7, #4]
 c001d88:	4a30      	ldr	r2, [pc, #192]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d8a:	659a      	str	r2, [r3, #88]	; 0x58
 c001d8c:	4a2f      	ldr	r2, [pc, #188]	; (c001e4c <HAL_SPI_MspInit+0x20c>)
 c001d8e:	687b      	ldr	r3, [r7, #4]
 c001d90:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 c001d92:	4b30      	ldr	r3, [pc, #192]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001d94:	4a30      	ldr	r2, [pc, #192]	; (c001e58 <HAL_SPI_MspInit+0x218>)
 c001d96:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 c001d98:	4b2e      	ldr	r3, [pc, #184]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001d9a:	2210      	movs	r2, #16
 c001d9c:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 c001d9e:	4b2d      	ldr	r3, [pc, #180]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001da0:	2210      	movs	r2, #16
 c001da2:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 c001da4:	4b2b      	ldr	r3, [pc, #172]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001da6:	2200      	movs	r2, #0
 c001da8:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 c001daa:	4b2a      	ldr	r3, [pc, #168]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001dac:	2280      	movs	r2, #128	; 0x80
 c001dae:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c001db0:	4b28      	ldr	r3, [pc, #160]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001db2:	2200      	movs	r2, #0
 c001db4:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c001db6:	4b27      	ldr	r3, [pc, #156]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001db8:	2200      	movs	r2, #0
 c001dba:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 c001dbc:	4b25      	ldr	r3, [pc, #148]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001dbe:	2200      	movs	r2, #0
 c001dc0:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 c001dc2:	4b24      	ldr	r3, [pc, #144]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001dc4:	2200      	movs	r2, #0
 c001dc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 c001dc8:	4822      	ldr	r0, [pc, #136]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001dca:	f000 fcfb 	bl	c0027c4 <HAL_DMA_Init>
 c001dce:	4603      	mov	r3, r0
 c001dd0:	2b00      	cmp	r3, #0
 c001dd2:	d001      	beq.n	c001dd8 <HAL_SPI_MspInit+0x198>
    {
      Error_Handler();
 c001dd4:	f7ff f93a 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001dd8:	2110      	movs	r1, #16
 c001dda:	481e      	ldr	r0, [pc, #120]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001ddc:	f000 ff6a 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001de0:	4603      	mov	r3, r0
 c001de2:	2b00      	cmp	r3, #0
 c001de4:	d001      	beq.n	c001dea <HAL_SPI_MspInit+0x1aa>
    {
      Error_Handler();
 c001de6:	f7ff f931 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SEC) != HAL_OK)
 c001dea:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001dee:	4819      	ldr	r0, [pc, #100]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001df0:	f000 ff60 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001df4:	4603      	mov	r3, r0
 c001df6:	2b00      	cmp	r3, #0
 c001df8:	d001      	beq.n	c001dfe <HAL_SPI_MspInit+0x1be>
    {
      Error_Handler();
 c001dfa:	f7ff f927 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001dfe:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001e02:	4814      	ldr	r0, [pc, #80]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001e04:	f000 ff56 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001e08:	4603      	mov	r3, r0
 c001e0a:	2b00      	cmp	r3, #0
 c001e0c:	d001      	beq.n	c001e12 <HAL_SPI_MspInit+0x1d2>
    {
      Error_Handler();
 c001e0e:	f7ff f91d 	bl	c00104c <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001e12:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001e16:	480f      	ldr	r0, [pc, #60]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001e18:	f000 ff4c 	bl	c002cb4 <HAL_DMA_ConfigChannelAttributes>
 c001e1c:	4603      	mov	r3, r0
 c001e1e:	2b00      	cmp	r3, #0
 c001e20:	d001      	beq.n	c001e26 <HAL_SPI_MspInit+0x1e6>
    {
      Error_Handler();
 c001e22:	f7ff f913 	bl	c00104c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 c001e26:	687b      	ldr	r3, [r7, #4]
 c001e28:	4a0a      	ldr	r2, [pc, #40]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001e2a:	655a      	str	r2, [r3, #84]	; 0x54
 c001e2c:	4a09      	ldr	r2, [pc, #36]	; (c001e54 <HAL_SPI_MspInit+0x214>)
 c001e2e:	687b      	ldr	r3, [r7, #4]
 c001e30:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 c001e32:	bf00      	nop
 c001e34:	3728      	adds	r7, #40	; 0x28
 c001e36:	46bd      	mov	sp, r7
 c001e38:	bd80      	pop	{r7, pc}
 c001e3a:	bf00      	nop
 c001e3c:	50003c00 	.word	0x50003c00
 c001e40:	50021000 	.word	0x50021000
 c001e44:	52020c00 	.word	0x52020c00
 c001e48:	52021800 	.word	0x52021800
 c001e4c:	3000022c 	.word	0x3000022c
 c001e50:	5002001c 	.word	0x5002001c
 c001e54:	30000294 	.word	0x30000294
 c001e58:	50020030 	.word	0x50020030

0c001e5c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c001e5c:	b580      	push	{r7, lr}
 c001e5e:	b0ae      	sub	sp, #184	; 0xb8
 c001e60:	af00      	add	r7, sp, #0
 c001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001e64:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001e68:	2200      	movs	r2, #0
 c001e6a:	601a      	str	r2, [r3, #0]
 c001e6c:	605a      	str	r2, [r3, #4]
 c001e6e:	609a      	str	r2, [r3, #8]
 c001e70:	60da      	str	r2, [r3, #12]
 c001e72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001e74:	f107 0310 	add.w	r3, r7, #16
 c001e78:	2294      	movs	r2, #148	; 0x94
 c001e7a:	2100      	movs	r1, #0
 c001e7c:	4618      	mov	r0, r3
 c001e7e:	f005 fb0b 	bl	c007498 <memset>
  if(huart->Instance==USART1)
 c001e82:	687b      	ldr	r3, [r7, #4]
 c001e84:	681b      	ldr	r3, [r3, #0]
 c001e86:	4a21      	ldr	r2, [pc, #132]	; (c001f0c <HAL_UART_MspInit+0xb0>)
 c001e88:	4293      	cmp	r3, r2
 c001e8a:	d13b      	bne.n	c001f04 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c001e8c:	2301      	movs	r3, #1
 c001e8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c001e90:	2300      	movs	r3, #0
 c001e92:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001e94:	f107 0310 	add.w	r3, r7, #16
 c001e98:	4618      	mov	r0, r3
 c001e9a:	f002 ff5f 	bl	c004d5c <HAL_RCCEx_PeriphCLKConfig>
 c001e9e:	4603      	mov	r3, r0
 c001ea0:	2b00      	cmp	r3, #0
 c001ea2:	d001      	beq.n	c001ea8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c001ea4:	f7ff f8d2 	bl	c00104c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c001ea8:	4b19      	ldr	r3, [pc, #100]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001eaa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001eac:	4a18      	ldr	r2, [pc, #96]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001eae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001eb2:	6613      	str	r3, [r2, #96]	; 0x60
 c001eb4:	4b16      	ldr	r3, [pc, #88]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001eb6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001eb8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c001ebc:	60fb      	str	r3, [r7, #12]
 c001ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c001ec0:	4b13      	ldr	r3, [pc, #76]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ec4:	4a12      	ldr	r2, [pc, #72]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001ec6:	f043 0301 	orr.w	r3, r3, #1
 c001eca:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001ecc:	4b10      	ldr	r3, [pc, #64]	; (c001f10 <HAL_UART_MspInit+0xb4>)
 c001ece:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ed0:	f003 0301 	and.w	r3, r3, #1
 c001ed4:	60bb      	str	r3, [r7, #8]
 c001ed6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c001ed8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c001edc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001ee0:	2302      	movs	r3, #2
 c001ee2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001ee6:	2300      	movs	r3, #0
 c001ee8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001eec:	2300      	movs	r3, #0
 c001eee:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c001ef2:	2307      	movs	r3, #7
 c001ef4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c001ef8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001efc:	4619      	mov	r1, r3
 c001efe:	4805      	ldr	r0, [pc, #20]	; (c001f14 <HAL_UART_MspInit+0xb8>)
 c001f00:	f001 f800 	bl	c002f04 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c001f04:	bf00      	nop
 c001f06:	37b8      	adds	r7, #184	; 0xb8
 c001f08:	46bd      	mov	sp, r7
 c001f0a:	bd80      	pop	{r7, pc}
 c001f0c:	50013800 	.word	0x50013800
 c001f10:	50021000 	.word	0x50021000
 c001f14:	52020000 	.word	0x52020000

0c001f18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001f18:	b480      	push	{r7}
 c001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c001f1c:	e7fe      	b.n	c001f1c <NMI_Handler+0x4>

0c001f1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001f1e:	b480      	push	{r7}
 c001f20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001f22:	e7fe      	b.n	c001f22 <HardFault_Handler+0x4>

0c001f24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001f24:	b480      	push	{r7}
 c001f26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001f28:	e7fe      	b.n	c001f28 <MemManage_Handler+0x4>

0c001f2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001f2a:	b480      	push	{r7}
 c001f2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001f2e:	e7fe      	b.n	c001f2e <BusFault_Handler+0x4>

0c001f30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001f30:	b480      	push	{r7}
 c001f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001f34:	e7fe      	b.n	c001f34 <UsageFault_Handler+0x4>

0c001f36 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001f36:	b480      	push	{r7}
 c001f38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001f3a:	e7fe      	b.n	c001f3a <SecureFault_Handler+0x4>

0c001f3c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001f3c:	b480      	push	{r7}
 c001f3e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001f40:	bf00      	nop
 c001f42:	46bd      	mov	sp, r7
 c001f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f48:	4770      	bx	lr

0c001f4a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001f4a:	b480      	push	{r7}
 c001f4c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001f4e:	bf00      	nop
 c001f50:	46bd      	mov	sp, r7
 c001f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f56:	4770      	bx	lr

0c001f58 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001f58:	b480      	push	{r7}
 c001f5a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001f5c:	bf00      	nop
 c001f5e:	46bd      	mov	sp, r7
 c001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f64:	4770      	bx	lr

0c001f66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001f66:	b580      	push	{r7, lr}
 c001f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001f6a:	f000 fad7 	bl	c00251c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001f6e:	bf00      	nop
 c001f70:	bd80      	pop	{r7, pc}
	...

0c001f74 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 c001f74:	b580      	push	{r7, lr}
 c001f76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 c001f78:	4802      	ldr	r0, [pc, #8]	; (c001f84 <DMA1_Channel2_IRQHandler+0x10>)
 c001f7a:	f000 fd46 	bl	c002a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 c001f7e:	bf00      	nop
 c001f80:	bd80      	pop	{r7, pc}
 c001f82:	bf00      	nop
 c001f84:	3000022c 	.word	0x3000022c

0c001f88 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 c001f88:	b580      	push	{r7, lr}
 c001f8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 c001f8c:	4802      	ldr	r0, [pc, #8]	; (c001f98 <DMA1_Channel3_IRQHandler+0x10>)
 c001f8e:	f000 fd3c 	bl	c002a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c001f92:	bf00      	nop
 c001f94:	bd80      	pop	{r7, pc}
 c001f96:	bf00      	nop
 c001f98:	30000294 	.word	0x30000294

0c001f9c <DMA1_Channel1_IRQHandler>:

/* USER CODE BEGIN 1 */
void DMA1_Channel1_IRQHandler(void)
{
 c001f9c:	b580      	push	{r7, lr}
 c001f9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 c001fa0:	4802      	ldr	r0, [pc, #8]	; (c001fac <DMA1_Channel1_IRQHandler+0x10>)
 c001fa2:	f000 fd32 	bl	c002a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 c001fa6:	bf00      	nop
 c001fa8:	bd80      	pop	{r7, pc}
 c001faa:	bf00      	nop
 c001fac:	30000390 	.word	0x30000390

0c001fb0 <DMA1_Channel4_IRQHandler>:

void DMA1_Channel4_IRQHandler(void)
{
 c001fb0:	b580      	push	{r7, lr}
 c001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
	HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel4);
 c001fb4:	4802      	ldr	r0, [pc, #8]	; (c001fc0 <DMA1_Channel4_IRQHandler+0x10>)
 c001fb6:	f000 fd28 	bl	c002a0a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 c001fba:	bf00      	nop
 c001fbc:	bd80      	pop	{r7, pc}
 c001fbe:	bf00      	nop
 c001fc0:	300003f8 	.word	0x300003f8

0c001fc4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c001fc4:	b580      	push	{r7, lr}
 c001fc6:	b086      	sub	sp, #24
 c001fc8:	af00      	add	r7, sp, #0
 c001fca:	60f8      	str	r0, [r7, #12]
 c001fcc:	60b9      	str	r1, [r7, #8]
 c001fce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001fd0:	2300      	movs	r3, #0
 c001fd2:	617b      	str	r3, [r7, #20]
 c001fd4:	e00a      	b.n	c001fec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 c001fd6:	e000      	b.n	c001fda <_read+0x16>
 c001fd8:	bf00      	nop
 c001fda:	4601      	mov	r1, r0
 c001fdc:	68bb      	ldr	r3, [r7, #8]
 c001fde:	1c5a      	adds	r2, r3, #1
 c001fe0:	60ba      	str	r2, [r7, #8]
 c001fe2:	b2ca      	uxtb	r2, r1
 c001fe4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001fe6:	697b      	ldr	r3, [r7, #20]
 c001fe8:	3301      	adds	r3, #1
 c001fea:	617b      	str	r3, [r7, #20]
 c001fec:	697a      	ldr	r2, [r7, #20]
 c001fee:	687b      	ldr	r3, [r7, #4]
 c001ff0:	429a      	cmp	r2, r3
 c001ff2:	dbf0      	blt.n	c001fd6 <_read+0x12>
  }

  return len;
 c001ff4:	687b      	ldr	r3, [r7, #4]
}
 c001ff6:	4618      	mov	r0, r3
 c001ff8:	3718      	adds	r7, #24
 c001ffa:	46bd      	mov	sp, r7
 c001ffc:	bd80      	pop	{r7, pc}

0c001ffe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c001ffe:	b580      	push	{r7, lr}
 c002000:	b086      	sub	sp, #24
 c002002:	af00      	add	r7, sp, #0
 c002004:	60f8      	str	r0, [r7, #12]
 c002006:	60b9      	str	r1, [r7, #8]
 c002008:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00200a:	2300      	movs	r3, #0
 c00200c:	617b      	str	r3, [r7, #20]
 c00200e:	e009      	b.n	c002024 <_write+0x26>
  {
    __io_putchar(*ptr++);
 c002010:	68bb      	ldr	r3, [r7, #8]
 c002012:	1c5a      	adds	r2, r3, #1
 c002014:	60ba      	str	r2, [r7, #8]
 c002016:	781b      	ldrb	r3, [r3, #0]
 c002018:	4618      	mov	r0, r3
 c00201a:	f7fe ff59 	bl	c000ed0 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00201e:	697b      	ldr	r3, [r7, #20]
 c002020:	3301      	adds	r3, #1
 c002022:	617b      	str	r3, [r7, #20]
 c002024:	697a      	ldr	r2, [r7, #20]
 c002026:	687b      	ldr	r3, [r7, #4]
 c002028:	429a      	cmp	r2, r3
 c00202a:	dbf1      	blt.n	c002010 <_write+0x12>
  }
  return len;
 c00202c:	687b      	ldr	r3, [r7, #4]
}
 c00202e:	4618      	mov	r0, r3
 c002030:	3718      	adds	r7, #24
 c002032:	46bd      	mov	sp, r7
 c002034:	bd80      	pop	{r7, pc}

0c002036 <_close>:

int _close(int file)
{
 c002036:	b480      	push	{r7}
 c002038:	b083      	sub	sp, #12
 c00203a:	af00      	add	r7, sp, #0
 c00203c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 c00203e:	f04f 33ff 	mov.w	r3, #4294967295
}
 c002042:	4618      	mov	r0, r3
 c002044:	370c      	adds	r7, #12
 c002046:	46bd      	mov	sp, r7
 c002048:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00204c:	4770      	bx	lr

0c00204e <_fstat>:


int _fstat(int file, struct stat *st)
{
 c00204e:	b480      	push	{r7}
 c002050:	b083      	sub	sp, #12
 c002052:	af00      	add	r7, sp, #0
 c002054:	6078      	str	r0, [r7, #4]
 c002056:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 c002058:	683b      	ldr	r3, [r7, #0]
 c00205a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c00205e:	605a      	str	r2, [r3, #4]
  return 0;
 c002060:	2300      	movs	r3, #0
}
 c002062:	4618      	mov	r0, r3
 c002064:	370c      	adds	r7, #12
 c002066:	46bd      	mov	sp, r7
 c002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00206c:	4770      	bx	lr

0c00206e <_isatty>:

int _isatty(int file)
{
 c00206e:	b480      	push	{r7}
 c002070:	b083      	sub	sp, #12
 c002072:	af00      	add	r7, sp, #0
 c002074:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 c002076:	2301      	movs	r3, #1
}
 c002078:	4618      	mov	r0, r3
 c00207a:	370c      	adds	r7, #12
 c00207c:	46bd      	mov	sp, r7
 c00207e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002082:	4770      	bx	lr

0c002084 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c002084:	b480      	push	{r7}
 c002086:	b085      	sub	sp, #20
 c002088:	af00      	add	r7, sp, #0
 c00208a:	60f8      	str	r0, [r7, #12]
 c00208c:	60b9      	str	r1, [r7, #8]
 c00208e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 c002090:	2300      	movs	r3, #0
}
 c002092:	4618      	mov	r0, r3
 c002094:	3714      	adds	r7, #20
 c002096:	46bd      	mov	sp, r7
 c002098:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00209c:	4770      	bx	lr
	...

0c0020a0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c0020a0:	b580      	push	{r7, lr}
 c0020a2:	b086      	sub	sp, #24
 c0020a4:	af00      	add	r7, sp, #0
 c0020a6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c0020a8:	4a14      	ldr	r2, [pc, #80]	; (c0020fc <_sbrk+0x5c>)
 c0020aa:	4b15      	ldr	r3, [pc, #84]	; (c002100 <_sbrk+0x60>)
 c0020ac:	1ad3      	subs	r3, r2, r3
 c0020ae:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c0020b0:	697b      	ldr	r3, [r7, #20]
 c0020b2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c0020b4:	4b13      	ldr	r3, [pc, #76]	; (c002104 <_sbrk+0x64>)
 c0020b6:	681b      	ldr	r3, [r3, #0]
 c0020b8:	2b00      	cmp	r3, #0
 c0020ba:	d102      	bne.n	c0020c2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c0020bc:	4b11      	ldr	r3, [pc, #68]	; (c002104 <_sbrk+0x64>)
 c0020be:	4a12      	ldr	r2, [pc, #72]	; (c002108 <_sbrk+0x68>)
 c0020c0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c0020c2:	4b10      	ldr	r3, [pc, #64]	; (c002104 <_sbrk+0x64>)
 c0020c4:	681a      	ldr	r2, [r3, #0]
 c0020c6:	687b      	ldr	r3, [r7, #4]
 c0020c8:	4413      	add	r3, r2
 c0020ca:	693a      	ldr	r2, [r7, #16]
 c0020cc:	429a      	cmp	r2, r3
 c0020ce:	d207      	bcs.n	c0020e0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c0020d0:	f005 f9b8 	bl	c007444 <__errno>
 c0020d4:	4603      	mov	r3, r0
 c0020d6:	220c      	movs	r2, #12
 c0020d8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c0020da:	f04f 33ff 	mov.w	r3, #4294967295
 c0020de:	e009      	b.n	c0020f4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c0020e0:	4b08      	ldr	r3, [pc, #32]	; (c002104 <_sbrk+0x64>)
 c0020e2:	681b      	ldr	r3, [r3, #0]
 c0020e4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c0020e6:	4b07      	ldr	r3, [pc, #28]	; (c002104 <_sbrk+0x64>)
 c0020e8:	681a      	ldr	r2, [r3, #0]
 c0020ea:	687b      	ldr	r3, [r7, #4]
 c0020ec:	4413      	add	r3, r2
 c0020ee:	4a05      	ldr	r2, [pc, #20]	; (c002104 <_sbrk+0x64>)
 c0020f0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c0020f2:	68fb      	ldr	r3, [r7, #12]
}
 c0020f4:	4618      	mov	r0, r3
 c0020f6:	3718      	adds	r7, #24
 c0020f8:	46bd      	mov	sp, r7
 c0020fa:	bd80      	pop	{r7, pc}
 c0020fc:	30018000 	.word	0x30018000
 c002100:	00000400 	.word	0x00000400
 c002104:	30001c90 	.word	0x30001c90
 c002108:	30001ca8 	.word	0x30001ca8

0c00210c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c00210c:	b480      	push	{r7}
 c00210e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c002110:	4b30      	ldr	r3, [pc, #192]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002112:	2200      	movs	r2, #0
 c002114:	609a      	str	r2, [r3, #8]
 c002116:	4b2f      	ldr	r3, [pc, #188]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002118:	4a2f      	ldr	r2, [pc, #188]	; (c0021d8 <TZ_SAU_Setup+0xcc>)
 c00211a:	60da      	str	r2, [r3, #12]
 c00211c:	4b2d      	ldr	r3, [pc, #180]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00211e:	4a2f      	ldr	r2, [pc, #188]	; (c0021dc <TZ_SAU_Setup+0xd0>)
 c002120:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c002122:	4b2c      	ldr	r3, [pc, #176]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002124:	2201      	movs	r2, #1
 c002126:	609a      	str	r2, [r3, #8]
 c002128:	4b2a      	ldr	r3, [pc, #168]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00212a:	4a2d      	ldr	r2, [pc, #180]	; (c0021e0 <TZ_SAU_Setup+0xd4>)
 c00212c:	60da      	str	r2, [r3, #12]
 c00212e:	4b29      	ldr	r3, [pc, #164]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002130:	4a2c      	ldr	r2, [pc, #176]	; (c0021e4 <TZ_SAU_Setup+0xd8>)
 c002132:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c002134:	4b27      	ldr	r3, [pc, #156]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002136:	2202      	movs	r2, #2
 c002138:	609a      	str	r2, [r3, #8]
 c00213a:	4b26      	ldr	r3, [pc, #152]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00213c:	4a2a      	ldr	r2, [pc, #168]	; (c0021e8 <TZ_SAU_Setup+0xdc>)
 c00213e:	60da      	str	r2, [r3, #12]
 c002140:	4b24      	ldr	r3, [pc, #144]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002142:	4a2a      	ldr	r2, [pc, #168]	; (c0021ec <TZ_SAU_Setup+0xe0>)
 c002144:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c002146:	4b23      	ldr	r3, [pc, #140]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002148:	2203      	movs	r2, #3
 c00214a:	609a      	str	r2, [r3, #8]
 c00214c:	4b21      	ldr	r3, [pc, #132]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00214e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c002152:	60da      	str	r2, [r3, #12]
 c002154:	4b1f      	ldr	r3, [pc, #124]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002156:	4a26      	ldr	r2, [pc, #152]	; (c0021f0 <TZ_SAU_Setup+0xe4>)
 c002158:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00215a:	4b1e      	ldr	r3, [pc, #120]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00215c:	2204      	movs	r2, #4
 c00215e:	609a      	str	r2, [r3, #8]
 c002160:	4b1c      	ldr	r3, [pc, #112]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002162:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c002166:	60da      	str	r2, [r3, #12]
 c002168:	4b1a      	ldr	r3, [pc, #104]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00216a:	4a22      	ldr	r2, [pc, #136]	; (c0021f4 <TZ_SAU_Setup+0xe8>)
 c00216c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00216e:	4b19      	ldr	r3, [pc, #100]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002170:	2205      	movs	r2, #5
 c002172:	609a      	str	r2, [r3, #8]
 c002174:	4b17      	ldr	r3, [pc, #92]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002176:	4a20      	ldr	r2, [pc, #128]	; (c0021f8 <TZ_SAU_Setup+0xec>)
 c002178:	60da      	str	r2, [r3, #12]
 c00217a:	4b16      	ldr	r3, [pc, #88]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c00217c:	4a1f      	ldr	r2, [pc, #124]	; (c0021fc <TZ_SAU_Setup+0xf0>)
 c00217e:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c002180:	4b14      	ldr	r3, [pc, #80]	; (c0021d4 <TZ_SAU_Setup+0xc8>)
 c002182:	2201      	movs	r2, #1
 c002184:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c002186:	4b1e      	ldr	r3, [pc, #120]	; (c002200 <TZ_SAU_Setup+0xf4>)
 c002188:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00218c:	4a1c      	ldr	r2, [pc, #112]	; (c002200 <TZ_SAU_Setup+0xf4>)
 c00218e:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c002192:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c002196:	4b1b      	ldr	r3, [pc, #108]	; (c002204 <TZ_SAU_Setup+0xf8>)
 c002198:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c00219a:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c00219e:	4a19      	ldr	r2, [pc, #100]	; (c002204 <TZ_SAU_Setup+0xf8>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0021a0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0021a4:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0021a6:	4b18      	ldr	r3, [pc, #96]	; (c002208 <TZ_SAU_Setup+0xfc>)
 c0021a8:	2200      	movs	r2, #0
 c0021aa:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0021ae:	4b16      	ldr	r3, [pc, #88]	; (c002208 <TZ_SAU_Setup+0xfc>)
 c0021b0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 c0021b4:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0021b8:	4b13      	ldr	r3, [pc, #76]	; (c002208 <TZ_SAU_Setup+0xfc>)
 c0021ba:	2200      	movs	r2, #0
 c0021bc:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0021c0:	4b11      	ldr	r3, [pc, #68]	; (c002208 <TZ_SAU_Setup+0xfc>)
 c0021c2:	2200      	movs	r2, #0
 c0021c4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c0021c8:	bf00      	nop
 c0021ca:	46bd      	mov	sp, r7
 c0021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0021d0:	4770      	bx	lr
 c0021d2:	bf00      	nop
 c0021d4:	e000edd0 	.word	0xe000edd0
 c0021d8:	0c03e000 	.word	0x0c03e000
 c0021dc:	0c03ffe3 	.word	0x0c03ffe3
 c0021e0:	08040000 	.word	0x08040000
 c0021e4:	0807ffe1 	.word	0x0807ffe1
 c0021e8:	20018000 	.word	0x20018000
 c0021ec:	2003ffe1 	.word	0x2003ffe1
 c0021f0:	4fffffe1 	.word	0x4fffffe1
 c0021f4:	9fffffe1 	.word	0x9fffffe1
 c0021f8:	0bf90000 	.word	0x0bf90000
 c0021fc:	0bfa8fe1 	.word	0x0bfa8fe1
 c002200:	e000ed00 	.word	0xe000ed00
 c002204:	e000ef30 	.word	0xe000ef30
 c002208:	e000e100 	.word	0xe000e100

0c00220c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c00220c:	b580      	push	{r7, lr}
 c00220e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c002210:	f7ff ff7c 	bl	c00210c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c002214:	4b08      	ldr	r3, [pc, #32]	; (c002238 <SystemInit+0x2c>)
 c002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00221a:	4a07      	ldr	r2, [pc, #28]	; (c002238 <SystemInit+0x2c>)
 c00221c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c002220:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c002224:	4b05      	ldr	r3, [pc, #20]	; (c00223c <SystemInit+0x30>)
 c002226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00222a:	4a04      	ldr	r2, [pc, #16]	; (c00223c <SystemInit+0x30>)
 c00222c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c002230:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c002234:	bf00      	nop
 c002236:	bd80      	pop	{r7, pc}
 c002238:	e000ed00 	.word	0xe000ed00
 c00223c:	e002ed00 	.word	0xe002ed00

0c002240 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c002240:	b480      	push	{r7}
 c002242:	b087      	sub	sp, #28
 c002244:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c002246:	4b4f      	ldr	r3, [pc, #316]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c002248:	681b      	ldr	r3, [r3, #0]
 c00224a:	f003 0308 	and.w	r3, r3, #8
 c00224e:	2b00      	cmp	r3, #0
 c002250:	d107      	bne.n	c002262 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c002252:	4b4c      	ldr	r3, [pc, #304]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c002254:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002258:	0a1b      	lsrs	r3, r3, #8
 c00225a:	f003 030f 	and.w	r3, r3, #15
 c00225e:	617b      	str	r3, [r7, #20]
 c002260:	e005      	b.n	c00226e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c002262:	4b48      	ldr	r3, [pc, #288]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c002264:	681b      	ldr	r3, [r3, #0]
 c002266:	091b      	lsrs	r3, r3, #4
 c002268:	f003 030f 	and.w	r3, r3, #15
 c00226c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00226e:	4a46      	ldr	r2, [pc, #280]	; (c002388 <SystemCoreClockUpdate+0x148>)
 c002270:	697b      	ldr	r3, [r7, #20]
 c002272:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002276:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c002278:	4b42      	ldr	r3, [pc, #264]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c00227a:	689b      	ldr	r3, [r3, #8]
 c00227c:	f003 030c 	and.w	r3, r3, #12
 c002280:	2b0c      	cmp	r3, #12
 c002282:	d866      	bhi.n	c002352 <SystemCoreClockUpdate+0x112>
 c002284:	a201      	add	r2, pc, #4	; (adr r2, c00228c <SystemCoreClockUpdate+0x4c>)
 c002286:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00228a:	bf00      	nop
 c00228c:	0c0022c1 	.word	0x0c0022c1
 c002290:	0c002353 	.word	0x0c002353
 c002294:	0c002353 	.word	0x0c002353
 c002298:	0c002353 	.word	0x0c002353
 c00229c:	0c0022c9 	.word	0x0c0022c9
 c0022a0:	0c002353 	.word	0x0c002353
 c0022a4:	0c002353 	.word	0x0c002353
 c0022a8:	0c002353 	.word	0x0c002353
 c0022ac:	0c0022d1 	.word	0x0c0022d1
 c0022b0:	0c002353 	.word	0x0c002353
 c0022b4:	0c002353 	.word	0x0c002353
 c0022b8:	0c002353 	.word	0x0c002353
 c0022bc:	0c0022d9 	.word	0x0c0022d9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c0022c0:	4a32      	ldr	r2, [pc, #200]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c0022c2:	697b      	ldr	r3, [r7, #20]
 c0022c4:	6013      	str	r3, [r2, #0]
      break;
 c0022c6:	e048      	b.n	c00235a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c0022c8:	4b30      	ldr	r3, [pc, #192]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c0022ca:	4a31      	ldr	r2, [pc, #196]	; (c002390 <SystemCoreClockUpdate+0x150>)
 c0022cc:	601a      	str	r2, [r3, #0]
      break;
 c0022ce:	e044      	b.n	c00235a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0022d0:	4b2e      	ldr	r3, [pc, #184]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c0022d2:	4a30      	ldr	r2, [pc, #192]	; (c002394 <SystemCoreClockUpdate+0x154>)
 c0022d4:	601a      	str	r2, [r3, #0]
      break;
 c0022d6:	e040      	b.n	c00235a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0022d8:	4b2a      	ldr	r3, [pc, #168]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c0022da:	68db      	ldr	r3, [r3, #12]
 c0022dc:	f003 0303 	and.w	r3, r3, #3
 c0022e0:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0022e2:	4b28      	ldr	r3, [pc, #160]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c0022e4:	68db      	ldr	r3, [r3, #12]
 c0022e6:	091b      	lsrs	r3, r3, #4
 c0022e8:	f003 030f 	and.w	r3, r3, #15
 c0022ec:	3301      	adds	r3, #1
 c0022ee:	60bb      	str	r3, [r7, #8]
 c0022f0:	68fb      	ldr	r3, [r7, #12]
 c0022f2:	2b02      	cmp	r3, #2
 c0022f4:	d003      	beq.n	c0022fe <SystemCoreClockUpdate+0xbe>
 c0022f6:	68fb      	ldr	r3, [r7, #12]
 c0022f8:	2b03      	cmp	r3, #3
 c0022fa:	d006      	beq.n	c00230a <SystemCoreClockUpdate+0xca>
 c0022fc:	e00b      	b.n	c002316 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c0022fe:	4a24      	ldr	r2, [pc, #144]	; (c002390 <SystemCoreClockUpdate+0x150>)
 c002300:	68bb      	ldr	r3, [r7, #8]
 c002302:	fbb2 f3f3 	udiv	r3, r2, r3
 c002306:	613b      	str	r3, [r7, #16]
          break;
 c002308:	e00b      	b.n	c002322 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00230a:	4a22      	ldr	r2, [pc, #136]	; (c002394 <SystemCoreClockUpdate+0x154>)
 c00230c:	68bb      	ldr	r3, [r7, #8]
 c00230e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002312:	613b      	str	r3, [r7, #16]
          break;
 c002314:	e005      	b.n	c002322 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c002316:	697a      	ldr	r2, [r7, #20]
 c002318:	68bb      	ldr	r3, [r7, #8]
 c00231a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00231e:	613b      	str	r3, [r7, #16]
          break;
 c002320:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c002322:	4b18      	ldr	r3, [pc, #96]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c002324:	68db      	ldr	r3, [r3, #12]
 c002326:	0a1b      	lsrs	r3, r3, #8
 c002328:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c00232c:	693b      	ldr	r3, [r7, #16]
 c00232e:	fb02 f303 	mul.w	r3, r2, r3
 c002332:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c002334:	4b13      	ldr	r3, [pc, #76]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c002336:	68db      	ldr	r3, [r3, #12]
 c002338:	0e5b      	lsrs	r3, r3, #25
 c00233a:	f003 0303 	and.w	r3, r3, #3
 c00233e:	3301      	adds	r3, #1
 c002340:	005b      	lsls	r3, r3, #1
 c002342:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c002344:	693a      	ldr	r2, [r7, #16]
 c002346:	687b      	ldr	r3, [r7, #4]
 c002348:	fbb2 f3f3 	udiv	r3, r2, r3
 c00234c:	4a0f      	ldr	r2, [pc, #60]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c00234e:	6013      	str	r3, [r2, #0]
      break;
 c002350:	e003      	b.n	c00235a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c002352:	4a0e      	ldr	r2, [pc, #56]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c002354:	697b      	ldr	r3, [r7, #20]
 c002356:	6013      	str	r3, [r2, #0]
      break;
 c002358:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c00235a:	4b0a      	ldr	r3, [pc, #40]	; (c002384 <SystemCoreClockUpdate+0x144>)
 c00235c:	689b      	ldr	r3, [r3, #8]
 c00235e:	091b      	lsrs	r3, r3, #4
 c002360:	f003 030f 	and.w	r3, r3, #15
 c002364:	4a0c      	ldr	r2, [pc, #48]	; (c002398 <SystemCoreClockUpdate+0x158>)
 c002366:	5cd3      	ldrb	r3, [r2, r3]
 c002368:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00236a:	4b08      	ldr	r3, [pc, #32]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c00236c:	681a      	ldr	r2, [r3, #0]
 c00236e:	683b      	ldr	r3, [r7, #0]
 c002370:	fa22 f303 	lsr.w	r3, r2, r3
 c002374:	4a05      	ldr	r2, [pc, #20]	; (c00238c <SystemCoreClockUpdate+0x14c>)
 c002376:	6013      	str	r3, [r2, #0]
}
 c002378:	bf00      	nop
 c00237a:	371c      	adds	r7, #28
 c00237c:	46bd      	mov	sp, r7
 c00237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002382:	4770      	bx	lr
 c002384:	50021000 	.word	0x50021000
 c002388:	0c008c98 	.word	0x0c008c98
 c00238c:	300000f8 	.word	0x300000f8
 c002390:	00f42400 	.word	0x00f42400
 c002394:	007a1200 	.word	0x007a1200
 c002398:	0c008c80 	.word	0x0c008c80

0c00239c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c00239c:	b580      	push	{r7, lr}
 c00239e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0023a0:	f7ff ff4e 	bl	c002240 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0023a4:	4b1c      	ldr	r3, [pc, #112]	; (c002418 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0023a6:	681b      	ldr	r3, [r3, #0]
}
 c0023a8:	4618      	mov	r0, r3
 c0023aa:	46bd      	mov	sp, r7
 c0023ac:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0023b0:	4671      	mov	r1, lr
 c0023b2:	4672      	mov	r2, lr
 c0023b4:	4673      	mov	r3, lr
 c0023b6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0023ba:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0023be:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0023c2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0023c6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0023ca:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0023ce:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0023d2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0023d6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0023da:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0023de:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0023e2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0023e6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0023ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0023ee:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0023f2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0023f6:	f38e 8c00 	msr	CPSR_fs, lr
 c0023fa:	b410      	push	{r4}
 c0023fc:	eef1 ca10 	vmrs	ip, fpscr
 c002400:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002404:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002408:	ea0c 0c04 	and.w	ip, ip, r4
 c00240c:	eee1 ca10 	vmsr	fpscr, ip
 c002410:	bc10      	pop	{r4}
 c002412:	46f4      	mov	ip, lr
 c002414:	4774      	bxns	lr
 c002416:	bf00      	nop
 c002418:	300000f8 	.word	0x300000f8

0c00241c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c00241c:	f8df d034 	ldr.w	sp, [pc, #52]	; c002454 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c002420:	f7ff fef4 	bl	c00220c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c002424:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c002426:	e003      	b.n	c002430 <LoopCopyDataInit>

0c002428 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c002428:	4b0b      	ldr	r3, [pc, #44]	; (c002458 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00242a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c00242c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c00242e:	3104      	adds	r1, #4

0c002430 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c002430:	480a      	ldr	r0, [pc, #40]	; (c00245c <LoopForever+0xa>)
	ldr	r3, =_edata
 c002432:	4b0b      	ldr	r3, [pc, #44]	; (c002460 <LoopForever+0xe>)
	adds	r2, r0, r1
 c002434:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c002436:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c002438:	d3f6      	bcc.n	c002428 <CopyDataInit>
	ldr	r2, =_sbss
 c00243a:	4a0a      	ldr	r2, [pc, #40]	; (c002464 <LoopForever+0x12>)
	b	LoopFillZerobss
 c00243c:	e002      	b.n	c002444 <LoopFillZerobss>

0c00243e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c00243e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c002440:	f842 3b04 	str.w	r3, [r2], #4

0c002444 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c002444:	4b08      	ldr	r3, [pc, #32]	; (c002468 <LoopForever+0x16>)
	cmp	r2, r3
 c002446:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c002448:	d3f9      	bcc.n	c00243e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00244a:	f005 f801 	bl	c007450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c00244e:	f7fe f923 	bl	c000698 <main>

0c002452 <LoopForever>:

LoopForever:
    b LoopForever
 c002452:	e7fe      	b.n	c002452 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c002454:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c002458:	0c008da8 	.word	0x0c008da8
	ldr	r0, =_sdata
 c00245c:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c002460:	30000168 	.word	0x30000168
	ldr	r2, =_sbss
 c002464:	30000168 	.word	0x30000168
	ldr	r3, = _ebss
 c002468:	30001ca8 	.word	0x30001ca8

0c00246c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c00246c:	e7fe      	b.n	c00246c <ADC1_2_IRQHandler>

0c00246e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00246e:	b580      	push	{r7, lr}
 c002470:	b082      	sub	sp, #8
 c002472:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c002474:	2300      	movs	r3, #0
 c002476:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c002478:	2004      	movs	r0, #4
 c00247a:	f000 f963 	bl	c002744 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c00247e:	f7ff fedf 	bl	c002240 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c002482:	2000      	movs	r0, #0
 c002484:	f000 f80e 	bl	c0024a4 <HAL_InitTick>
 c002488:	4603      	mov	r3, r0
 c00248a:	2b00      	cmp	r3, #0
 c00248c:	d002      	beq.n	c002494 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c00248e:	2301      	movs	r3, #1
 c002490:	71fb      	strb	r3, [r7, #7]
 c002492:	e001      	b.n	c002498 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c002494:	f7ff fb8c 	bl	c001bb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c002498:	79fb      	ldrb	r3, [r7, #7]
}
 c00249a:	4618      	mov	r0, r3
 c00249c:	3708      	adds	r7, #8
 c00249e:	46bd      	mov	sp, r7
 c0024a0:	bd80      	pop	{r7, pc}
	...

0c0024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0024a4:	b580      	push	{r7, lr}
 c0024a6:	b084      	sub	sp, #16
 c0024a8:	af00      	add	r7, sp, #0
 c0024aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0024ac:	2300      	movs	r3, #0
 c0024ae:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0024b0:	4b17      	ldr	r3, [pc, #92]	; (c002510 <HAL_InitTick+0x6c>)
 c0024b2:	781b      	ldrb	r3, [r3, #0]
 c0024b4:	2b00      	cmp	r3, #0
 c0024b6:	d023      	beq.n	c002500 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0024b8:	4b16      	ldr	r3, [pc, #88]	; (c002514 <HAL_InitTick+0x70>)
 c0024ba:	681a      	ldr	r2, [r3, #0]
 c0024bc:	4b14      	ldr	r3, [pc, #80]	; (c002510 <HAL_InitTick+0x6c>)
 c0024be:	781b      	ldrb	r3, [r3, #0]
 c0024c0:	4619      	mov	r1, r3
 c0024c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0024c6:	fbb3 f3f1 	udiv	r3, r3, r1
 c0024ca:	fbb2 f3f3 	udiv	r3, r2, r3
 c0024ce:	4618      	mov	r0, r3
 c0024d0:	f000 f96b 	bl	c0027aa <HAL_SYSTICK_Config>
 c0024d4:	4603      	mov	r3, r0
 c0024d6:	2b00      	cmp	r3, #0
 c0024d8:	d10f      	bne.n	c0024fa <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0024da:	687b      	ldr	r3, [r7, #4]
 c0024dc:	2b07      	cmp	r3, #7
 c0024de:	d809      	bhi.n	c0024f4 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0024e0:	2200      	movs	r2, #0
 c0024e2:	6879      	ldr	r1, [r7, #4]
 c0024e4:	f04f 30ff 	mov.w	r0, #4294967295
 c0024e8:	f000 f937 	bl	c00275a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c0024ec:	4a0a      	ldr	r2, [pc, #40]	; (c002518 <HAL_InitTick+0x74>)
 c0024ee:	687b      	ldr	r3, [r7, #4]
 c0024f0:	6013      	str	r3, [r2, #0]
 c0024f2:	e007      	b.n	c002504 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c0024f4:	2301      	movs	r3, #1
 c0024f6:	73fb      	strb	r3, [r7, #15]
 c0024f8:	e004      	b.n	c002504 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c0024fa:	2301      	movs	r3, #1
 c0024fc:	73fb      	strb	r3, [r7, #15]
 c0024fe:	e001      	b.n	c002504 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c002500:	2301      	movs	r3, #1
 c002502:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c002504:	7bfb      	ldrb	r3, [r7, #15]
}
 c002506:	4618      	mov	r0, r3
 c002508:	3710      	adds	r7, #16
 c00250a:	46bd      	mov	sp, r7
 c00250c:	bd80      	pop	{r7, pc}
 c00250e:	bf00      	nop
 c002510:	30000100 	.word	0x30000100
 c002514:	300000f8 	.word	0x300000f8
 c002518:	300000fc 	.word	0x300000fc

0c00251c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c00251c:	b480      	push	{r7}
 c00251e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c002520:	4b06      	ldr	r3, [pc, #24]	; (c00253c <HAL_IncTick+0x20>)
 c002522:	781b      	ldrb	r3, [r3, #0]
 c002524:	461a      	mov	r2, r3
 c002526:	4b06      	ldr	r3, [pc, #24]	; (c002540 <HAL_IncTick+0x24>)
 c002528:	681b      	ldr	r3, [r3, #0]
 c00252a:	4413      	add	r3, r2
 c00252c:	4a04      	ldr	r2, [pc, #16]	; (c002540 <HAL_IncTick+0x24>)
 c00252e:	6013      	str	r3, [r2, #0]
}
 c002530:	bf00      	nop
 c002532:	46bd      	mov	sp, r7
 c002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002538:	4770      	bx	lr
 c00253a:	bf00      	nop
 c00253c:	30000100 	.word	0x30000100
 c002540:	30001c94 	.word	0x30001c94

0c002544 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c002544:	b480      	push	{r7}
 c002546:	af00      	add	r7, sp, #0
  return uwTick;
 c002548:	4b03      	ldr	r3, [pc, #12]	; (c002558 <HAL_GetTick+0x14>)
 c00254a:	681b      	ldr	r3, [r3, #0]
}
 c00254c:	4618      	mov	r0, r3
 c00254e:	46bd      	mov	sp, r7
 c002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002554:	4770      	bx	lr
 c002556:	bf00      	nop
 c002558:	30001c94 	.word	0x30001c94

0c00255c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c00255c:	b580      	push	{r7, lr}
 c00255e:	b084      	sub	sp, #16
 c002560:	af00      	add	r7, sp, #0
 c002562:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c002564:	f7ff ffee 	bl	c002544 <HAL_GetTick>
 c002568:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c00256a:	687b      	ldr	r3, [r7, #4]
 c00256c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c00256e:	68fb      	ldr	r3, [r7, #12]
 c002570:	f1b3 3fff 	cmp.w	r3, #4294967295
 c002574:	d005      	beq.n	c002582 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 c002576:	4b0a      	ldr	r3, [pc, #40]	; (c0025a0 <HAL_Delay+0x44>)
 c002578:	781b      	ldrb	r3, [r3, #0]
 c00257a:	461a      	mov	r2, r3
 c00257c:	68fb      	ldr	r3, [r7, #12]
 c00257e:	4413      	add	r3, r2
 c002580:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c002582:	bf00      	nop
 c002584:	f7ff ffde 	bl	c002544 <HAL_GetTick>
 c002588:	4602      	mov	r2, r0
 c00258a:	68bb      	ldr	r3, [r7, #8]
 c00258c:	1ad3      	subs	r3, r2, r3
 c00258e:	68fa      	ldr	r2, [r7, #12]
 c002590:	429a      	cmp	r2, r3
 c002592:	d8f7      	bhi.n	c002584 <HAL_Delay+0x28>
  {
  }
}
 c002594:	bf00      	nop
 c002596:	bf00      	nop
 c002598:	3710      	adds	r7, #16
 c00259a:	46bd      	mov	sp, r7
 c00259c:	bd80      	pop	{r7, pc}
 c00259e:	bf00      	nop
 c0025a0:	30000100 	.word	0x30000100

0c0025a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0025a4:	b480      	push	{r7}
 c0025a6:	b085      	sub	sp, #20
 c0025a8:	af00      	add	r7, sp, #0
 c0025aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0025ac:	687b      	ldr	r3, [r7, #4]
 c0025ae:	f003 0307 	and.w	r3, r3, #7
 c0025b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0025b4:	4b0c      	ldr	r3, [pc, #48]	; (c0025e8 <__NVIC_SetPriorityGrouping+0x44>)
 c0025b6:	68db      	ldr	r3, [r3, #12]
 c0025b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0025ba:	68ba      	ldr	r2, [r7, #8]
 c0025bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0025c0:	4013      	ands	r3, r2
 c0025c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0025c4:	68fb      	ldr	r3, [r7, #12]
 c0025c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0025c8:	68bb      	ldr	r3, [r7, #8]
 c0025ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0025cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0025d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0025d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0025d6:	4a04      	ldr	r2, [pc, #16]	; (c0025e8 <__NVIC_SetPriorityGrouping+0x44>)
 c0025d8:	68bb      	ldr	r3, [r7, #8]
 c0025da:	60d3      	str	r3, [r2, #12]
}
 c0025dc:	bf00      	nop
 c0025de:	3714      	adds	r7, #20
 c0025e0:	46bd      	mov	sp, r7
 c0025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0025e6:	4770      	bx	lr
 c0025e8:	e000ed00 	.word	0xe000ed00

0c0025ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0025ec:	b480      	push	{r7}
 c0025ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0025f0:	4b04      	ldr	r3, [pc, #16]	; (c002604 <__NVIC_GetPriorityGrouping+0x18>)
 c0025f2:	68db      	ldr	r3, [r3, #12]
 c0025f4:	0a1b      	lsrs	r3, r3, #8
 c0025f6:	f003 0307 	and.w	r3, r3, #7
}
 c0025fa:	4618      	mov	r0, r3
 c0025fc:	46bd      	mov	sp, r7
 c0025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002602:	4770      	bx	lr
 c002604:	e000ed00 	.word	0xe000ed00

0c002608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c002608:	b480      	push	{r7}
 c00260a:	b083      	sub	sp, #12
 c00260c:	af00      	add	r7, sp, #0
 c00260e:	4603      	mov	r3, r0
 c002610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c002612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002616:	2b00      	cmp	r3, #0
 c002618:	db0b      	blt.n	c002632 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c00261a:	79fb      	ldrb	r3, [r7, #7]
 c00261c:	f003 021f 	and.w	r2, r3, #31
 c002620:	4907      	ldr	r1, [pc, #28]	; (c002640 <__NVIC_EnableIRQ+0x38>)
 c002622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002626:	095b      	lsrs	r3, r3, #5
 c002628:	2001      	movs	r0, #1
 c00262a:	fa00 f202 	lsl.w	r2, r0, r2
 c00262e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c002632:	bf00      	nop
 c002634:	370c      	adds	r7, #12
 c002636:	46bd      	mov	sp, r7
 c002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00263c:	4770      	bx	lr
 c00263e:	bf00      	nop
 c002640:	e000e100 	.word	0xe000e100

0c002644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c002644:	b480      	push	{r7}
 c002646:	b083      	sub	sp, #12
 c002648:	af00      	add	r7, sp, #0
 c00264a:	4603      	mov	r3, r0
 c00264c:	6039      	str	r1, [r7, #0]
 c00264e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c002650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002654:	2b00      	cmp	r3, #0
 c002656:	db0a      	blt.n	c00266e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c002658:	683b      	ldr	r3, [r7, #0]
 c00265a:	b2da      	uxtb	r2, r3
 c00265c:	490c      	ldr	r1, [pc, #48]	; (c002690 <__NVIC_SetPriority+0x4c>)
 c00265e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002662:	0152      	lsls	r2, r2, #5
 c002664:	b2d2      	uxtb	r2, r2
 c002666:	440b      	add	r3, r1
 c002668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c00266c:	e00a      	b.n	c002684 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00266e:	683b      	ldr	r3, [r7, #0]
 c002670:	b2da      	uxtb	r2, r3
 c002672:	4908      	ldr	r1, [pc, #32]	; (c002694 <__NVIC_SetPriority+0x50>)
 c002674:	79fb      	ldrb	r3, [r7, #7]
 c002676:	f003 030f 	and.w	r3, r3, #15
 c00267a:	3b04      	subs	r3, #4
 c00267c:	0152      	lsls	r2, r2, #5
 c00267e:	b2d2      	uxtb	r2, r2
 c002680:	440b      	add	r3, r1
 c002682:	761a      	strb	r2, [r3, #24]
}
 c002684:	bf00      	nop
 c002686:	370c      	adds	r7, #12
 c002688:	46bd      	mov	sp, r7
 c00268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00268e:	4770      	bx	lr
 c002690:	e000e100 	.word	0xe000e100
 c002694:	e000ed00 	.word	0xe000ed00

0c002698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c002698:	b480      	push	{r7}
 c00269a:	b089      	sub	sp, #36	; 0x24
 c00269c:	af00      	add	r7, sp, #0
 c00269e:	60f8      	str	r0, [r7, #12]
 c0026a0:	60b9      	str	r1, [r7, #8]
 c0026a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0026a4:	68fb      	ldr	r3, [r7, #12]
 c0026a6:	f003 0307 	and.w	r3, r3, #7
 c0026aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0026ac:	69fb      	ldr	r3, [r7, #28]
 c0026ae:	f1c3 0307 	rsb	r3, r3, #7
 c0026b2:	2b03      	cmp	r3, #3
 c0026b4:	bf28      	it	cs
 c0026b6:	2303      	movcs	r3, #3
 c0026b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0026ba:	69fb      	ldr	r3, [r7, #28]
 c0026bc:	3303      	adds	r3, #3
 c0026be:	2b06      	cmp	r3, #6
 c0026c0:	d902      	bls.n	c0026c8 <NVIC_EncodePriority+0x30>
 c0026c2:	69fb      	ldr	r3, [r7, #28]
 c0026c4:	3b04      	subs	r3, #4
 c0026c6:	e000      	b.n	c0026ca <NVIC_EncodePriority+0x32>
 c0026c8:	2300      	movs	r3, #0
 c0026ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0026cc:	f04f 32ff 	mov.w	r2, #4294967295
 c0026d0:	69bb      	ldr	r3, [r7, #24]
 c0026d2:	fa02 f303 	lsl.w	r3, r2, r3
 c0026d6:	43da      	mvns	r2, r3
 c0026d8:	68bb      	ldr	r3, [r7, #8]
 c0026da:	401a      	ands	r2, r3
 c0026dc:	697b      	ldr	r3, [r7, #20]
 c0026de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c0026e0:	f04f 31ff 	mov.w	r1, #4294967295
 c0026e4:	697b      	ldr	r3, [r7, #20]
 c0026e6:	fa01 f303 	lsl.w	r3, r1, r3
 c0026ea:	43d9      	mvns	r1, r3
 c0026ec:	687b      	ldr	r3, [r7, #4]
 c0026ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0026f0:	4313      	orrs	r3, r2
         );
}
 c0026f2:	4618      	mov	r0, r3
 c0026f4:	3724      	adds	r7, #36	; 0x24
 c0026f6:	46bd      	mov	sp, r7
 c0026f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026fc:	4770      	bx	lr
	...

0c002700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c002700:	b580      	push	{r7, lr}
 c002702:	b082      	sub	sp, #8
 c002704:	af00      	add	r7, sp, #0
 c002706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c002708:	687b      	ldr	r3, [r7, #4]
 c00270a:	3b01      	subs	r3, #1
 c00270c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c002710:	d301      	bcc.n	c002716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c002712:	2301      	movs	r3, #1
 c002714:	e00f      	b.n	c002736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c002716:	4a0a      	ldr	r2, [pc, #40]	; (c002740 <SysTick_Config+0x40>)
 c002718:	687b      	ldr	r3, [r7, #4]
 c00271a:	3b01      	subs	r3, #1
 c00271c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00271e:	2107      	movs	r1, #7
 c002720:	f04f 30ff 	mov.w	r0, #4294967295
 c002724:	f7ff ff8e 	bl	c002644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c002728:	4b05      	ldr	r3, [pc, #20]	; (c002740 <SysTick_Config+0x40>)
 c00272a:	2200      	movs	r2, #0
 c00272c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00272e:	4b04      	ldr	r3, [pc, #16]	; (c002740 <SysTick_Config+0x40>)
 c002730:	2207      	movs	r2, #7
 c002732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c002734:	2300      	movs	r3, #0
}
 c002736:	4618      	mov	r0, r3
 c002738:	3708      	adds	r7, #8
 c00273a:	46bd      	mov	sp, r7
 c00273c:	bd80      	pop	{r7, pc}
 c00273e:	bf00      	nop
 c002740:	e000e010 	.word	0xe000e010

0c002744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c002744:	b580      	push	{r7, lr}
 c002746:	b082      	sub	sp, #8
 c002748:	af00      	add	r7, sp, #0
 c00274a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00274c:	6878      	ldr	r0, [r7, #4]
 c00274e:	f7ff ff29 	bl	c0025a4 <__NVIC_SetPriorityGrouping>
}
 c002752:	bf00      	nop
 c002754:	3708      	adds	r7, #8
 c002756:	46bd      	mov	sp, r7
 c002758:	bd80      	pop	{r7, pc}

0c00275a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00275a:	b580      	push	{r7, lr}
 c00275c:	b086      	sub	sp, #24
 c00275e:	af00      	add	r7, sp, #0
 c002760:	4603      	mov	r3, r0
 c002762:	60b9      	str	r1, [r7, #8]
 c002764:	607a      	str	r2, [r7, #4]
 c002766:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c002768:	f7ff ff40 	bl	c0025ec <__NVIC_GetPriorityGrouping>
 c00276c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00276e:	687a      	ldr	r2, [r7, #4]
 c002770:	68b9      	ldr	r1, [r7, #8]
 c002772:	6978      	ldr	r0, [r7, #20]
 c002774:	f7ff ff90 	bl	c002698 <NVIC_EncodePriority>
 c002778:	4602      	mov	r2, r0
 c00277a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00277e:	4611      	mov	r1, r2
 c002780:	4618      	mov	r0, r3
 c002782:	f7ff ff5f 	bl	c002644 <__NVIC_SetPriority>
}
 c002786:	bf00      	nop
 c002788:	3718      	adds	r7, #24
 c00278a:	46bd      	mov	sp, r7
 c00278c:	bd80      	pop	{r7, pc}

0c00278e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c00278e:	b580      	push	{r7, lr}
 c002790:	b082      	sub	sp, #8
 c002792:	af00      	add	r7, sp, #0
 c002794:	4603      	mov	r3, r0
 c002796:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c002798:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00279c:	4618      	mov	r0, r3
 c00279e:	f7ff ff33 	bl	c002608 <__NVIC_EnableIRQ>
}
 c0027a2:	bf00      	nop
 c0027a4:	3708      	adds	r7, #8
 c0027a6:	46bd      	mov	sp, r7
 c0027a8:	bd80      	pop	{r7, pc}

0c0027aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0027aa:	b580      	push	{r7, lr}
 c0027ac:	b082      	sub	sp, #8
 c0027ae:	af00      	add	r7, sp, #0
 c0027b0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0027b2:	6878      	ldr	r0, [r7, #4]
 c0027b4:	f7ff ffa4 	bl	c002700 <SysTick_Config>
 c0027b8:	4603      	mov	r3, r0
}
 c0027ba:	4618      	mov	r0, r3
 c0027bc:	3708      	adds	r7, #8
 c0027be:	46bd      	mov	sp, r7
 c0027c0:	bd80      	pop	{r7, pc}
	...

0c0027c4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c0027c4:	b580      	push	{r7, lr}
 c0027c6:	b084      	sub	sp, #16
 c0027c8:	af00      	add	r7, sp, #0
 c0027ca:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c0027cc:	687b      	ldr	r3, [r7, #4]
 c0027ce:	2b00      	cmp	r3, #0
 c0027d0:	d101      	bne.n	c0027d6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c0027d2:	2301      	movs	r3, #1
 c0027d4:	e08d      	b.n	c0028f2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c0027d6:	687b      	ldr	r3, [r7, #4]
 c0027d8:	681b      	ldr	r3, [r3, #0]
 c0027da:	461a      	mov	r2, r3
 c0027dc:	4b47      	ldr	r3, [pc, #284]	; (c0028fc <HAL_DMA_Init+0x138>)
 c0027de:	429a      	cmp	r2, r3
 c0027e0:	d80f      	bhi.n	c002802 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c0027e2:	687b      	ldr	r3, [r7, #4]
 c0027e4:	681b      	ldr	r3, [r3, #0]
 c0027e6:	461a      	mov	r2, r3
 c0027e8:	4b45      	ldr	r3, [pc, #276]	; (c002900 <HAL_DMA_Init+0x13c>)
 c0027ea:	4413      	add	r3, r2
 c0027ec:	4a45      	ldr	r2, [pc, #276]	; (c002904 <HAL_DMA_Init+0x140>)
 c0027ee:	fba2 2303 	umull	r2, r3, r2, r3
 c0027f2:	091b      	lsrs	r3, r3, #4
 c0027f4:	009a      	lsls	r2, r3, #2
 c0027f6:	687b      	ldr	r3, [r7, #4]
 c0027f8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c0027fa:	687b      	ldr	r3, [r7, #4]
 c0027fc:	4a42      	ldr	r2, [pc, #264]	; (c002908 <HAL_DMA_Init+0x144>)
 c0027fe:	649a      	str	r2, [r3, #72]	; 0x48
 c002800:	e00e      	b.n	c002820 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c002802:	687b      	ldr	r3, [r7, #4]
 c002804:	681b      	ldr	r3, [r3, #0]
 c002806:	461a      	mov	r2, r3
 c002808:	4b40      	ldr	r3, [pc, #256]	; (c00290c <HAL_DMA_Init+0x148>)
 c00280a:	4413      	add	r3, r2
 c00280c:	4a3d      	ldr	r2, [pc, #244]	; (c002904 <HAL_DMA_Init+0x140>)
 c00280e:	fba2 2303 	umull	r2, r3, r2, r3
 c002812:	091b      	lsrs	r3, r3, #4
 c002814:	009a      	lsls	r2, r3, #2
 c002816:	687b      	ldr	r3, [r7, #4]
 c002818:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c00281a:	687b      	ldr	r3, [r7, #4]
 c00281c:	4a3c      	ldr	r2, [pc, #240]	; (c002910 <HAL_DMA_Init+0x14c>)
 c00281e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c002820:	687b      	ldr	r3, [r7, #4]
 c002822:	2202      	movs	r2, #2
 c002824:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c002828:	687b      	ldr	r3, [r7, #4]
 c00282a:	681b      	ldr	r3, [r3, #0]
 c00282c:	681b      	ldr	r3, [r3, #0]
 c00282e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c002830:	68fb      	ldr	r3, [r7, #12]
 c002832:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c002836:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c00283a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c00283c:	687b      	ldr	r3, [r7, #4]
 c00283e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002840:	687b      	ldr	r3, [r7, #4]
 c002842:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c002844:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002846:	687b      	ldr	r3, [r7, #4]
 c002848:	691b      	ldr	r3, [r3, #16]
 c00284a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00284c:	687b      	ldr	r3, [r7, #4]
 c00284e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002850:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002852:	687b      	ldr	r3, [r7, #4]
 c002854:	699b      	ldr	r3, [r3, #24]
 c002856:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c002858:	687b      	ldr	r3, [r7, #4]
 c00285a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00285c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c00285e:	687b      	ldr	r3, [r7, #4]
 c002860:	6a1b      	ldr	r3, [r3, #32]
 c002862:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c002864:	68fa      	ldr	r2, [r7, #12]
 c002866:	4313      	orrs	r3, r2
 c002868:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c00286a:	687b      	ldr	r3, [r7, #4]
 c00286c:	681b      	ldr	r3, [r3, #0]
 c00286e:	68fa      	ldr	r2, [r7, #12]
 c002870:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c002872:	6878      	ldr	r0, [r7, #4]
 c002874:	f000 fae4 	bl	c002e40 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c002878:	687b      	ldr	r3, [r7, #4]
 c00287a:	689b      	ldr	r3, [r3, #8]
 c00287c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002880:	d102      	bne.n	c002888 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c002882:	687b      	ldr	r3, [r7, #4]
 c002884:	2200      	movs	r2, #0
 c002886:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c002888:	687b      	ldr	r3, [r7, #4]
 c00288a:	685a      	ldr	r2, [r3, #4]
 c00288c:	687b      	ldr	r3, [r7, #4]
 c00288e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002890:	b2d2      	uxtb	r2, r2
 c002892:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c002894:	687b      	ldr	r3, [r7, #4]
 c002896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002898:	687a      	ldr	r2, [r7, #4]
 c00289a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c00289c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c00289e:	687b      	ldr	r3, [r7, #4]
 c0028a0:	685b      	ldr	r3, [r3, #4]
 c0028a2:	2b00      	cmp	r3, #0
 c0028a4:	d010      	beq.n	c0028c8 <HAL_DMA_Init+0x104>
 c0028a6:	687b      	ldr	r3, [r7, #4]
 c0028a8:	685b      	ldr	r3, [r3, #4]
 c0028aa:	2b04      	cmp	r3, #4
 c0028ac:	d80c      	bhi.n	c0028c8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c0028ae:	6878      	ldr	r0, [r7, #4]
 c0028b0:	f000 fb04 	bl	c002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c0028b4:	687b      	ldr	r3, [r7, #4]
 c0028b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0028b8:	2200      	movs	r2, #0
 c0028ba:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0028bc:	687b      	ldr	r3, [r7, #4]
 c0028be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0028c0:	687a      	ldr	r2, [r7, #4]
 c0028c2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0028c4:	605a      	str	r2, [r3, #4]
 c0028c6:	e008      	b.n	c0028da <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c0028c8:	687b      	ldr	r3, [r7, #4]
 c0028ca:	2200      	movs	r2, #0
 c0028cc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c0028ce:	687b      	ldr	r3, [r7, #4]
 c0028d0:	2200      	movs	r2, #0
 c0028d2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c0028d4:	687b      	ldr	r3, [r7, #4]
 c0028d6:	2200      	movs	r2, #0
 c0028d8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c0028da:	687b      	ldr	r3, [r7, #4]
 c0028dc:	2200      	movs	r2, #0
 c0028de:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c0028e0:	687b      	ldr	r3, [r7, #4]
 c0028e2:	2201      	movs	r2, #1
 c0028e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c0028e8:	687b      	ldr	r3, [r7, #4]
 c0028ea:	2200      	movs	r2, #0
 c0028ec:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c0028f0:	2300      	movs	r3, #0
}
 c0028f2:	4618      	mov	r0, r3
 c0028f4:	3710      	adds	r7, #16
 c0028f6:	46bd      	mov	sp, r7
 c0028f8:	bd80      	pop	{r7, pc}
 c0028fa:	bf00      	nop
 c0028fc:	50020407 	.word	0x50020407
 c002900:	affdfff8 	.word	0xaffdfff8
 c002904:	cccccccd 	.word	0xcccccccd
 c002908:	50020000 	.word	0x50020000
 c00290c:	affdfbf8 	.word	0xaffdfbf8
 c002910:	50020400 	.word	0x50020400

0c002914 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002914:	b580      	push	{r7, lr}
 c002916:	b086      	sub	sp, #24
 c002918:	af00      	add	r7, sp, #0
 c00291a:	60f8      	str	r0, [r7, #12]
 c00291c:	60b9      	str	r1, [r7, #8]
 c00291e:	607a      	str	r2, [r7, #4]
 c002920:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c002922:	2300      	movs	r3, #0
 c002924:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c002926:	68fb      	ldr	r3, [r7, #12]
 c002928:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c00292c:	2b01      	cmp	r3, #1
 c00292e:	d101      	bne.n	c002934 <HAL_DMA_Start_IT+0x20>
 c002930:	2302      	movs	r3, #2
 c002932:	e066      	b.n	c002a02 <HAL_DMA_Start_IT+0xee>
 c002934:	68fb      	ldr	r3, [r7, #12]
 c002936:	2201      	movs	r2, #1
 c002938:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c00293c:	68fb      	ldr	r3, [r7, #12]
 c00293e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c002942:	b2db      	uxtb	r3, r3
 c002944:	2b01      	cmp	r3, #1
 c002946:	d155      	bne.n	c0029f4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c002948:	68fb      	ldr	r3, [r7, #12]
 c00294a:	2202      	movs	r2, #2
 c00294c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c002950:	68fb      	ldr	r3, [r7, #12]
 c002952:	2200      	movs	r2, #0
 c002954:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c002956:	68fb      	ldr	r3, [r7, #12]
 c002958:	681b      	ldr	r3, [r3, #0]
 c00295a:	681a      	ldr	r2, [r3, #0]
 c00295c:	68fb      	ldr	r3, [r7, #12]
 c00295e:	681b      	ldr	r3, [r3, #0]
 c002960:	f022 0201 	bic.w	r2, r2, #1
 c002964:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c002966:	683b      	ldr	r3, [r7, #0]
 c002968:	687a      	ldr	r2, [r7, #4]
 c00296a:	68b9      	ldr	r1, [r7, #8]
 c00296c:	68f8      	ldr	r0, [r7, #12]
 c00296e:	f000 fa29 	bl	c002dc4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c002972:	68fb      	ldr	r3, [r7, #12]
 c002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002976:	2b00      	cmp	r3, #0
 c002978:	d008      	beq.n	c00298c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c00297a:	68fb      	ldr	r3, [r7, #12]
 c00297c:	681b      	ldr	r3, [r3, #0]
 c00297e:	681a      	ldr	r2, [r3, #0]
 c002980:	68fb      	ldr	r3, [r7, #12]
 c002982:	681b      	ldr	r3, [r3, #0]
 c002984:	f042 020e 	orr.w	r2, r2, #14
 c002988:	601a      	str	r2, [r3, #0]
 c00298a:	e00f      	b.n	c0029ac <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c00298c:	68fb      	ldr	r3, [r7, #12]
 c00298e:	681b      	ldr	r3, [r3, #0]
 c002990:	681a      	ldr	r2, [r3, #0]
 c002992:	68fb      	ldr	r3, [r7, #12]
 c002994:	681b      	ldr	r3, [r3, #0]
 c002996:	f022 0204 	bic.w	r2, r2, #4
 c00299a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c00299c:	68fb      	ldr	r3, [r7, #12]
 c00299e:	681b      	ldr	r3, [r3, #0]
 c0029a0:	681a      	ldr	r2, [r3, #0]
 c0029a2:	68fb      	ldr	r3, [r7, #12]
 c0029a4:	681b      	ldr	r3, [r3, #0]
 c0029a6:	f042 020a 	orr.w	r2, r2, #10
 c0029aa:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c0029ac:	68fb      	ldr	r3, [r7, #12]
 c0029ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0029b0:	681b      	ldr	r3, [r3, #0]
 c0029b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0029b6:	2b00      	cmp	r3, #0
 c0029b8:	d007      	beq.n	c0029ca <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c0029ba:	68fb      	ldr	r3, [r7, #12]
 c0029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0029be:	681a      	ldr	r2, [r3, #0]
 c0029c0:	68fb      	ldr	r3, [r7, #12]
 c0029c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0029c4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c0029c8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c0029ca:	68fb      	ldr	r3, [r7, #12]
 c0029cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0029ce:	2b00      	cmp	r3, #0
 c0029d0:	d007      	beq.n	c0029e2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c0029d2:	68fb      	ldr	r3, [r7, #12]
 c0029d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0029d6:	681a      	ldr	r2, [r3, #0]
 c0029d8:	68fb      	ldr	r3, [r7, #12]
 c0029da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0029dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c0029e0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c0029e2:	68fb      	ldr	r3, [r7, #12]
 c0029e4:	681b      	ldr	r3, [r3, #0]
 c0029e6:	681a      	ldr	r2, [r3, #0]
 c0029e8:	68fb      	ldr	r3, [r7, #12]
 c0029ea:	681b      	ldr	r3, [r3, #0]
 c0029ec:	f042 0201 	orr.w	r2, r2, #1
 c0029f0:	601a      	str	r2, [r3, #0]
 c0029f2:	e005      	b.n	c002a00 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c0029f4:	68fb      	ldr	r3, [r7, #12]
 c0029f6:	2200      	movs	r2, #0
 c0029f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c0029fc:	2302      	movs	r3, #2
 c0029fe:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c002a00:	7dfb      	ldrb	r3, [r7, #23]
}
 c002a02:	4618      	mov	r0, r3
 c002a04:	3718      	adds	r7, #24
 c002a06:	46bd      	mov	sp, r7
 c002a08:	bd80      	pop	{r7, pc}

0c002a0a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c002a0a:	b580      	push	{r7, lr}
 c002a0c:	b084      	sub	sp, #16
 c002a0e:	af00      	add	r7, sp, #0
 c002a10:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c002a12:	687b      	ldr	r3, [r7, #4]
 c002a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002a16:	681b      	ldr	r3, [r3, #0]
 c002a18:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c002a1a:	687b      	ldr	r3, [r7, #4]
 c002a1c:	681b      	ldr	r3, [r3, #0]
 c002a1e:	681b      	ldr	r3, [r3, #0]
 c002a20:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c002a22:	687b      	ldr	r3, [r7, #4]
 c002a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002a26:	f003 031c 	and.w	r3, r3, #28
 c002a2a:	2204      	movs	r2, #4
 c002a2c:	409a      	lsls	r2, r3
 c002a2e:	68fb      	ldr	r3, [r7, #12]
 c002a30:	4013      	ands	r3, r2
 c002a32:	2b00      	cmp	r3, #0
 c002a34:	d053      	beq.n	c002ade <HAL_DMA_IRQHandler+0xd4>
 c002a36:	68bb      	ldr	r3, [r7, #8]
 c002a38:	f003 0304 	and.w	r3, r3, #4
 c002a3c:	2b00      	cmp	r3, #0
 c002a3e:	d04e      	beq.n	c002ade <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002a40:	687b      	ldr	r3, [r7, #4]
 c002a42:	681b      	ldr	r3, [r3, #0]
 c002a44:	681b      	ldr	r3, [r3, #0]
 c002a46:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002a4a:	2b00      	cmp	r3, #0
 c002a4c:	d024      	beq.n	c002a98 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c002a4e:	687b      	ldr	r3, [r7, #4]
 c002a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002a52:	f003 021c 	and.w	r2, r3, #28
 c002a56:	687b      	ldr	r3, [r7, #4]
 c002a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002a5a:	2104      	movs	r1, #4
 c002a5c:	fa01 f202 	lsl.w	r2, r1, r2
 c002a60:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c002a62:	687b      	ldr	r3, [r7, #4]
 c002a64:	681b      	ldr	r3, [r3, #0]
 c002a66:	681b      	ldr	r3, [r3, #0]
 c002a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002a6c:	2b00      	cmp	r3, #0
 c002a6e:	d109      	bne.n	c002a84 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c002a70:	687b      	ldr	r3, [r7, #4]
 c002a72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002a74:	2b00      	cmp	r3, #0
 c002a76:	f000 80c0 	beq.w	c002bfa <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c002a7a:	687b      	ldr	r3, [r7, #4]
 c002a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002a7e:	6878      	ldr	r0, [r7, #4]
 c002a80:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002a82:	e0ba      	b.n	c002bfa <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c002a84:	687b      	ldr	r3, [r7, #4]
 c002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002a88:	2b00      	cmp	r3, #0
 c002a8a:	f000 80b6 	beq.w	c002bfa <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c002a8e:	687b      	ldr	r3, [r7, #4]
 c002a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002a92:	6878      	ldr	r0, [r7, #4]
 c002a94:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002a96:	e0b0      	b.n	c002bfa <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c002a98:	687b      	ldr	r3, [r7, #4]
 c002a9a:	681b      	ldr	r3, [r3, #0]
 c002a9c:	681b      	ldr	r3, [r3, #0]
 c002a9e:	f003 0320 	and.w	r3, r3, #32
 c002aa2:	2b00      	cmp	r3, #0
 c002aa4:	d107      	bne.n	c002ab6 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c002aa6:	687b      	ldr	r3, [r7, #4]
 c002aa8:	681b      	ldr	r3, [r3, #0]
 c002aaa:	681a      	ldr	r2, [r3, #0]
 c002aac:	687b      	ldr	r3, [r7, #4]
 c002aae:	681b      	ldr	r3, [r3, #0]
 c002ab0:	f022 0204 	bic.w	r2, r2, #4
 c002ab4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c002ab6:	687b      	ldr	r3, [r7, #4]
 c002ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002aba:	f003 021c 	and.w	r2, r3, #28
 c002abe:	687b      	ldr	r3, [r7, #4]
 c002ac0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002ac2:	2104      	movs	r1, #4
 c002ac4:	fa01 f202 	lsl.w	r2, r1, r2
 c002ac8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c002aca:	687b      	ldr	r3, [r7, #4]
 c002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002ace:	2b00      	cmp	r3, #0
 c002ad0:	f000 8093 	beq.w	c002bfa <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c002ad4:	687b      	ldr	r3, [r7, #4]
 c002ad6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002ad8:	6878      	ldr	r0, [r7, #4]
 c002ada:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002adc:	e08d      	b.n	c002bfa <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c002ade:	687b      	ldr	r3, [r7, #4]
 c002ae0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002ae2:	f003 031c 	and.w	r3, r3, #28
 c002ae6:	2202      	movs	r2, #2
 c002ae8:	409a      	lsls	r2, r3
 c002aea:	68fb      	ldr	r3, [r7, #12]
 c002aec:	4013      	ands	r3, r2
 c002aee:	2b00      	cmp	r3, #0
 c002af0:	d04e      	beq.n	c002b90 <HAL_DMA_IRQHandler+0x186>
 c002af2:	68bb      	ldr	r3, [r7, #8]
 c002af4:	f003 0302 	and.w	r3, r3, #2
 c002af8:	2b00      	cmp	r3, #0
 c002afa:	d049      	beq.n	c002b90 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002afc:	687b      	ldr	r3, [r7, #4]
 c002afe:	681b      	ldr	r3, [r3, #0]
 c002b00:	681b      	ldr	r3, [r3, #0]
 c002b02:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002b06:	2b00      	cmp	r3, #0
 c002b08:	d018      	beq.n	c002b3c <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c002b0a:	687b      	ldr	r3, [r7, #4]
 c002b0c:	681b      	ldr	r3, [r3, #0]
 c002b0e:	681b      	ldr	r3, [r3, #0]
 c002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002b14:	2b00      	cmp	r3, #0
 c002b16:	d108      	bne.n	c002b2a <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c002b18:	687b      	ldr	r3, [r7, #4]
 c002b1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002b1c:	2b00      	cmp	r3, #0
 c002b1e:	d06e      	beq.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c002b20:	687b      	ldr	r3, [r7, #4]
 c002b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002b24:	6878      	ldr	r0, [r7, #4]
 c002b26:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002b28:	e069      	b.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c002b2a:	687b      	ldr	r3, [r7, #4]
 c002b2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002b2e:	2b00      	cmp	r3, #0
 c002b30:	d065      	beq.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c002b32:	687b      	ldr	r3, [r7, #4]
 c002b34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002b36:	6878      	ldr	r0, [r7, #4]
 c002b38:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002b3a:	e060      	b.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c002b3c:	687b      	ldr	r3, [r7, #4]
 c002b3e:	681b      	ldr	r3, [r3, #0]
 c002b40:	681b      	ldr	r3, [r3, #0]
 c002b42:	f003 0320 	and.w	r3, r3, #32
 c002b46:	2b00      	cmp	r3, #0
 c002b48:	d10b      	bne.n	c002b62 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c002b4a:	687b      	ldr	r3, [r7, #4]
 c002b4c:	681b      	ldr	r3, [r3, #0]
 c002b4e:	681a      	ldr	r2, [r3, #0]
 c002b50:	687b      	ldr	r3, [r7, #4]
 c002b52:	681b      	ldr	r3, [r3, #0]
 c002b54:	f022 020a 	bic.w	r2, r2, #10
 c002b58:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c002b5a:	687b      	ldr	r3, [r7, #4]
 c002b5c:	2201      	movs	r2, #1
 c002b5e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c002b62:	687b      	ldr	r3, [r7, #4]
 c002b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b66:	f003 021c 	and.w	r2, r3, #28
 c002b6a:	687b      	ldr	r3, [r7, #4]
 c002b6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002b6e:	2102      	movs	r1, #2
 c002b70:	fa01 f202 	lsl.w	r2, r1, r2
 c002b74:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c002b76:	687b      	ldr	r3, [r7, #4]
 c002b78:	2200      	movs	r2, #0
 c002b7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c002b7e:	687b      	ldr	r3, [r7, #4]
 c002b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002b82:	2b00      	cmp	r3, #0
 c002b84:	d03b      	beq.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c002b86:	687b      	ldr	r3, [r7, #4]
 c002b88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002b8a:	6878      	ldr	r0, [r7, #4]
 c002b8c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002b8e:	e036      	b.n	c002bfe <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c002b90:	687b      	ldr	r3, [r7, #4]
 c002b92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b94:	f003 031c 	and.w	r3, r3, #28
 c002b98:	2208      	movs	r2, #8
 c002b9a:	409a      	lsls	r2, r3
 c002b9c:	68fb      	ldr	r3, [r7, #12]
 c002b9e:	4013      	ands	r3, r2
 c002ba0:	2b00      	cmp	r3, #0
 c002ba2:	d02e      	beq.n	c002c02 <HAL_DMA_IRQHandler+0x1f8>
 c002ba4:	68bb      	ldr	r3, [r7, #8]
 c002ba6:	f003 0308 	and.w	r3, r3, #8
 c002baa:	2b00      	cmp	r3, #0
 c002bac:	d029      	beq.n	c002c02 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c002bae:	687b      	ldr	r3, [r7, #4]
 c002bb0:	681b      	ldr	r3, [r3, #0]
 c002bb2:	681a      	ldr	r2, [r3, #0]
 c002bb4:	687b      	ldr	r3, [r7, #4]
 c002bb6:	681b      	ldr	r3, [r3, #0]
 c002bb8:	f022 020e 	bic.w	r2, r2, #14
 c002bbc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c002bbe:	687b      	ldr	r3, [r7, #4]
 c002bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002bc2:	f003 021c 	and.w	r2, r3, #28
 c002bc6:	687b      	ldr	r3, [r7, #4]
 c002bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002bca:	2101      	movs	r1, #1
 c002bcc:	fa01 f202 	lsl.w	r2, r1, r2
 c002bd0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c002bd2:	687b      	ldr	r3, [r7, #4]
 c002bd4:	2201      	movs	r2, #1
 c002bd6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c002bd8:	687b      	ldr	r3, [r7, #4]
 c002bda:	2201      	movs	r2, #1
 c002bdc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c002be0:	687b      	ldr	r3, [r7, #4]
 c002be2:	2200      	movs	r2, #0
 c002be4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c002be8:	687b      	ldr	r3, [r7, #4]
 c002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002bec:	2b00      	cmp	r3, #0
 c002bee:	d008      	beq.n	c002c02 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c002bf0:	687b      	ldr	r3, [r7, #4]
 c002bf2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002bf4:	6878      	ldr	r0, [r7, #4]
 c002bf6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c002bf8:	e002      	b.n	c002c00 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002bfa:	bf00      	nop
 c002bfc:	e000      	b.n	c002c00 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002bfe:	bf00      	nop
  return;
 c002c00:	bf00      	nop
 c002c02:	bf00      	nop
}
 c002c04:	3710      	adds	r7, #16
 c002c06:	46bd      	mov	sp, r7
 c002c08:	bd80      	pop	{r7, pc}
	...

0c002c0c <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 c002c0c:	b480      	push	{r7}
 c002c0e:	b087      	sub	sp, #28
 c002c10:	af00      	add	r7, sp, #0
 c002c12:	60f8      	str	r0, [r7, #12]
 c002c14:	460b      	mov	r3, r1
 c002c16:	607a      	str	r2, [r7, #4]
 c002c18:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 c002c1a:	2300      	movs	r3, #0
 c002c1c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 c002c1e:	68fb      	ldr	r3, [r7, #12]
 c002c20:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c002c24:	2b01      	cmp	r3, #1
 c002c26:	d101      	bne.n	c002c2c <HAL_DMA_RegisterCallback+0x20>
 c002c28:	2302      	movs	r3, #2
 c002c2a:	e03d      	b.n	c002ca8 <HAL_DMA_RegisterCallback+0x9c>
 c002c2c:	68fb      	ldr	r3, [r7, #12]
 c002c2e:	2201      	movs	r2, #1
 c002c30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c002c34:	68fb      	ldr	r3, [r7, #12]
 c002c36:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c002c3a:	b2db      	uxtb	r3, r3
 c002c3c:	2b01      	cmp	r3, #1
 c002c3e:	d12c      	bne.n	c002c9a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 c002c40:	7afb      	ldrb	r3, [r7, #11]
 c002c42:	2b05      	cmp	r3, #5
 c002c44:	d826      	bhi.n	c002c94 <HAL_DMA_RegisterCallback+0x88>
 c002c46:	a201      	add	r2, pc, #4	; (adr r2, c002c4c <HAL_DMA_RegisterCallback+0x40>)
 c002c48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002c4c:	0c002c65 	.word	0x0c002c65
 c002c50:	0c002c6d 	.word	0x0c002c6d
 c002c54:	0c002c75 	.word	0x0c002c75
 c002c58:	0c002c7d 	.word	0x0c002c7d
 c002c5c:	0c002c85 	.word	0x0c002c85
 c002c60:	0c002c8d 	.word	0x0c002c8d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 c002c64:	68fb      	ldr	r3, [r7, #12]
 c002c66:	687a      	ldr	r2, [r7, #4]
 c002c68:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 c002c6a:	e018      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 c002c6c:	68fb      	ldr	r3, [r7, #12]
 c002c6e:	687a      	ldr	r2, [r7, #4]
 c002c70:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 c002c72:	e014      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1CPLT_CB_ID:
           hdma->XferM1CpltCallback = pCallback;
 c002c74:	68fb      	ldr	r3, [r7, #12]
 c002c76:	687a      	ldr	r2, [r7, #4]
 c002c78:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 c002c7a:	e010      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
           hdma->XferM1HalfCpltCallback = pCallback;
 c002c7c:	68fb      	ldr	r3, [r7, #12]
 c002c7e:	687a      	ldr	r2, [r7, #4]
 c002c80:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 c002c82:	e00c      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 c002c84:	68fb      	ldr	r3, [r7, #12]
 c002c86:	687a      	ldr	r2, [r7, #4]
 c002c88:	63da      	str	r2, [r3, #60]	; 0x3c
           break;
 c002c8a:	e008      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 c002c8c:	68fb      	ldr	r3, [r7, #12]
 c002c8e:	687a      	ldr	r2, [r7, #4]
 c002c90:	641a      	str	r2, [r3, #64]	; 0x40
           break;
 c002c92:	e004      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>

     default:
           status = HAL_ERROR;
 c002c94:	2301      	movs	r3, #1
 c002c96:	75fb      	strb	r3, [r7, #23]
           break;
 c002c98:	e001      	b.n	c002c9e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    status = HAL_ERROR;
 c002c9a:	2301      	movs	r3, #1
 c002c9c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 c002c9e:	68fb      	ldr	r3, [r7, #12]
 c002ca0:	2200      	movs	r2, #0
 c002ca2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 c002ca6:	7dfb      	ldrb	r3, [r7, #23]
}
 c002ca8:	4618      	mov	r0, r3
 c002caa:	371c      	adds	r7, #28
 c002cac:	46bd      	mov	sp, r7
 c002cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002cb2:	4770      	bx	lr

0c002cb4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c002cb4:	b480      	push	{r7}
 c002cb6:	b087      	sub	sp, #28
 c002cb8:	af00      	add	r7, sp, #0
 c002cba:	6078      	str	r0, [r7, #4]
 c002cbc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c002cbe:	2300      	movs	r3, #0
 c002cc0:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c002cc2:	687b      	ldr	r3, [r7, #4]
 c002cc4:	2b00      	cmp	r3, #0
 c002cc6:	d103      	bne.n	c002cd0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c002cc8:	2301      	movs	r3, #1
 c002cca:	75fb      	strb	r3, [r7, #23]
    return status;
 c002ccc:	7dfb      	ldrb	r3, [r7, #23]
 c002cce:	e073      	b.n	c002db8 <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c002cd0:	687b      	ldr	r3, [r7, #4]
 c002cd2:	681b      	ldr	r3, [r3, #0]
 c002cd4:	681b      	ldr	r3, [r3, #0]
 c002cd6:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c002cd8:	683b      	ldr	r3, [r7, #0]
 c002cda:	f003 0310 	and.w	r3, r3, #16
 c002cde:	2b00      	cmp	r3, #0
 c002ce0:	d00d      	beq.n	c002cfe <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c002ce2:	683b      	ldr	r3, [r7, #0]
 c002ce4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002ce8:	2b00      	cmp	r3, #0
 c002cea:	d004      	beq.n	c002cf6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c002cec:	693b      	ldr	r3, [r7, #16]
 c002cee:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002cf2:	613b      	str	r3, [r7, #16]
 c002cf4:	e003      	b.n	c002cfe <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c002cf6:	693b      	ldr	r3, [r7, #16]
 c002cf8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c002cfc:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c002cfe:	687b      	ldr	r3, [r7, #4]
 c002d00:	681b      	ldr	r3, [r3, #0]
 c002d02:	681b      	ldr	r3, [r3, #0]
 c002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002d08:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002d0c:	d103      	bne.n	c002d16 <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c002d0e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c002d12:	60fb      	str	r3, [r7, #12]
 c002d14:	e001      	b.n	c002d1a <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c002d16:	2300      	movs	r3, #0
 c002d18:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c002d1a:	683b      	ldr	r3, [r7, #0]
 c002d1c:	f003 0302 	and.w	r3, r3, #2
 c002d20:	2b00      	cmp	r3, #0
 c002d22:	d012      	beq.n	c002d4a <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c002d24:	683b      	ldr	r3, [r7, #0]
 c002d26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002d2a:	2b00      	cmp	r3, #0
 c002d2c:	d007      	beq.n	c002d3e <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c002d2e:	693b      	ldr	r3, [r7, #16]
 c002d30:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c002d34:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c002d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c002d3a:	60fb      	str	r3, [r7, #12]
 c002d3c:	e005      	b.n	c002d4a <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c002d3e:	693b      	ldr	r3, [r7, #16]
 c002d40:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c002d44:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c002d46:	2300      	movs	r3, #0
 c002d48:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c002d4a:	683b      	ldr	r3, [r7, #0]
 c002d4c:	f003 0304 	and.w	r3, r3, #4
 c002d50:	2b00      	cmp	r3, #0
 c002d52:	d013      	beq.n	c002d7c <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c002d54:	683b      	ldr	r3, [r7, #0]
 c002d56:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c002d5a:	2b00      	cmp	r3, #0
 c002d5c:	d00a      	beq.n	c002d74 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c002d5e:	68fb      	ldr	r3, [r7, #12]
 c002d60:	2b00      	cmp	r3, #0
 c002d62:	d102      	bne.n	c002d6a <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c002d64:	2301      	movs	r3, #1
 c002d66:	75fb      	strb	r3, [r7, #23]
 c002d68:	e008      	b.n	c002d7c <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c002d6a:	693b      	ldr	r3, [r7, #16]
 c002d6c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002d70:	613b      	str	r3, [r7, #16]
 c002d72:	e003      	b.n	c002d7c <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c002d74:	693b      	ldr	r3, [r7, #16]
 c002d76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c002d7a:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c002d7c:	683b      	ldr	r3, [r7, #0]
 c002d7e:	f003 0308 	and.w	r3, r3, #8
 c002d82:	2b00      	cmp	r3, #0
 c002d84:	d013      	beq.n	c002dae <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c002d86:	683b      	ldr	r3, [r7, #0]
 c002d88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002d8c:	2b00      	cmp	r3, #0
 c002d8e:	d00a      	beq.n	c002da6 <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c002d90:	68fb      	ldr	r3, [r7, #12]
 c002d92:	2b00      	cmp	r3, #0
 c002d94:	d102      	bne.n	c002d9c <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c002d96:	2301      	movs	r3, #1
 c002d98:	75fb      	strb	r3, [r7, #23]
 c002d9a:	e008      	b.n	c002dae <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c002d9c:	693b      	ldr	r3, [r7, #16]
 c002d9e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002da2:	613b      	str	r3, [r7, #16]
 c002da4:	e003      	b.n	c002dae <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c002da6:	693b      	ldr	r3, [r7, #16]
 c002da8:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c002dac:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c002dae:	687b      	ldr	r3, [r7, #4]
 c002db0:	681b      	ldr	r3, [r3, #0]
 c002db2:	693a      	ldr	r2, [r7, #16]
 c002db4:	601a      	str	r2, [r3, #0]

  return status;
 c002db6:	7dfb      	ldrb	r3, [r7, #23]
}
 c002db8:	4618      	mov	r0, r3
 c002dba:	371c      	adds	r7, #28
 c002dbc:	46bd      	mov	sp, r7
 c002dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002dc2:	4770      	bx	lr

0c002dc4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002dc4:	b480      	push	{r7}
 c002dc6:	b085      	sub	sp, #20
 c002dc8:	af00      	add	r7, sp, #0
 c002dca:	60f8      	str	r0, [r7, #12]
 c002dcc:	60b9      	str	r1, [r7, #8]
 c002dce:	607a      	str	r2, [r7, #4]
 c002dd0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c002dd2:	68fb      	ldr	r3, [r7, #12]
 c002dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002dd6:	68fa      	ldr	r2, [r7, #12]
 c002dd8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c002dda:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c002ddc:	68fb      	ldr	r3, [r7, #12]
 c002dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002de0:	2b00      	cmp	r3, #0
 c002de2:	d004      	beq.n	c002dee <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c002de4:	68fb      	ldr	r3, [r7, #12]
 c002de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002de8:	68fa      	ldr	r2, [r7, #12]
 c002dea:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c002dec:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c002dee:	68fb      	ldr	r3, [r7, #12]
 c002df0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002df2:	f003 021c 	and.w	r2, r3, #28
 c002df6:	68fb      	ldr	r3, [r7, #12]
 c002df8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002dfa:	2101      	movs	r1, #1
 c002dfc:	fa01 f202 	lsl.w	r2, r1, r2
 c002e00:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c002e02:	68fb      	ldr	r3, [r7, #12]
 c002e04:	681b      	ldr	r3, [r3, #0]
 c002e06:	683a      	ldr	r2, [r7, #0]
 c002e08:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c002e0a:	68fb      	ldr	r3, [r7, #12]
 c002e0c:	689b      	ldr	r3, [r3, #8]
 c002e0e:	2b10      	cmp	r3, #16
 c002e10:	d108      	bne.n	c002e24 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c002e12:	68fb      	ldr	r3, [r7, #12]
 c002e14:	681b      	ldr	r3, [r3, #0]
 c002e16:	687a      	ldr	r2, [r7, #4]
 c002e18:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c002e1a:	68fb      	ldr	r3, [r7, #12]
 c002e1c:	681b      	ldr	r3, [r3, #0]
 c002e1e:	68ba      	ldr	r2, [r7, #8]
 c002e20:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c002e22:	e007      	b.n	c002e34 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c002e24:	68fb      	ldr	r3, [r7, #12]
 c002e26:	681b      	ldr	r3, [r3, #0]
 c002e28:	68ba      	ldr	r2, [r7, #8]
 c002e2a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c002e2c:	68fb      	ldr	r3, [r7, #12]
 c002e2e:	681b      	ldr	r3, [r3, #0]
 c002e30:	687a      	ldr	r2, [r7, #4]
 c002e32:	60da      	str	r2, [r3, #12]
}
 c002e34:	bf00      	nop
 c002e36:	3714      	adds	r7, #20
 c002e38:	46bd      	mov	sp, r7
 c002e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e3e:	4770      	bx	lr

0c002e40 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002e40:	b480      	push	{r7}
 c002e42:	b085      	sub	sp, #20
 c002e44:	af00      	add	r7, sp, #0
 c002e46:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c002e48:	687b      	ldr	r3, [r7, #4]
 c002e4a:	681b      	ldr	r3, [r3, #0]
 c002e4c:	461a      	mov	r2, r3
 c002e4e:	4b17      	ldr	r3, [pc, #92]	; (c002eac <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c002e50:	429a      	cmp	r2, r3
 c002e52:	d80a      	bhi.n	c002e6a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c002e54:	687b      	ldr	r3, [r7, #4]
 c002e56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002e58:	089b      	lsrs	r3, r3, #2
 c002e5a:	009b      	lsls	r3, r3, #2
 c002e5c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c002e60:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c002e64:	687a      	ldr	r2, [r7, #4]
 c002e66:	6513      	str	r3, [r2, #80]	; 0x50
 c002e68:	e007      	b.n	c002e7a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c002e6a:	687b      	ldr	r3, [r7, #4]
 c002e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002e6e:	089b      	lsrs	r3, r3, #2
 c002e70:	009a      	lsls	r2, r3, #2
 c002e72:	4b0f      	ldr	r3, [pc, #60]	; (c002eb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c002e74:	4413      	add	r3, r2
 c002e76:	687a      	ldr	r2, [r7, #4]
 c002e78:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c002e7a:	687b      	ldr	r3, [r7, #4]
 c002e7c:	681b      	ldr	r3, [r3, #0]
 c002e7e:	b2db      	uxtb	r3, r3
 c002e80:	3b08      	subs	r3, #8
 c002e82:	4a0c      	ldr	r2, [pc, #48]	; (c002eb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c002e84:	fba2 2303 	umull	r2, r3, r2, r3
 c002e88:	091b      	lsrs	r3, r3, #4
 c002e8a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c002e8c:	687b      	ldr	r3, [r7, #4]
 c002e8e:	4a0a      	ldr	r2, [pc, #40]	; (c002eb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c002e90:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c002e92:	68fb      	ldr	r3, [r7, #12]
 c002e94:	f003 031f 	and.w	r3, r3, #31
 c002e98:	2201      	movs	r2, #1
 c002e9a:	409a      	lsls	r2, r3
 c002e9c:	687b      	ldr	r3, [r7, #4]
 c002e9e:	659a      	str	r2, [r3, #88]	; 0x58
}
 c002ea0:	bf00      	nop
 c002ea2:	3714      	adds	r7, #20
 c002ea4:	46bd      	mov	sp, r7
 c002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002eaa:	4770      	bx	lr
 c002eac:	50020407 	.word	0x50020407
 c002eb0:	50020820 	.word	0x50020820
 c002eb4:	cccccccd 	.word	0xcccccccd
 c002eb8:	50020880 	.word	0x50020880

0c002ebc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002ebc:	b480      	push	{r7}
 c002ebe:	b085      	sub	sp, #20
 c002ec0:	af00      	add	r7, sp, #0
 c002ec2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c002ec4:	687b      	ldr	r3, [r7, #4]
 c002ec6:	685b      	ldr	r3, [r3, #4]
 c002ec8:	b2db      	uxtb	r3, r3
 c002eca:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c002ecc:	68fa      	ldr	r2, [r7, #12]
 c002ece:	4b0b      	ldr	r3, [pc, #44]	; (c002efc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c002ed0:	4413      	add	r3, r2
 c002ed2:	009b      	lsls	r3, r3, #2
 c002ed4:	461a      	mov	r2, r3
 c002ed6:	687b      	ldr	r3, [r7, #4]
 c002ed8:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c002eda:	687b      	ldr	r3, [r7, #4]
 c002edc:	4a08      	ldr	r2, [pc, #32]	; (c002f00 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c002ede:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c002ee0:	68fb      	ldr	r3, [r7, #12]
 c002ee2:	3b01      	subs	r3, #1
 c002ee4:	f003 0303 	and.w	r3, r3, #3
 c002ee8:	2201      	movs	r2, #1
 c002eea:	409a      	lsls	r2, r3
 c002eec:	687b      	ldr	r3, [r7, #4]
 c002eee:	665a      	str	r2, [r3, #100]	; 0x64
}
 c002ef0:	bf00      	nop
 c002ef2:	3714      	adds	r7, #20
 c002ef4:	46bd      	mov	sp, r7
 c002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002efa:	4770      	bx	lr
 c002efc:	1400823f 	.word	0x1400823f
 c002f00:	50020940 	.word	0x50020940

0c002f04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c002f04:	b480      	push	{r7}
 c002f06:	b087      	sub	sp, #28
 c002f08:	af00      	add	r7, sp, #0
 c002f0a:	6078      	str	r0, [r7, #4]
 c002f0c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c002f0e:	2300      	movs	r3, #0
 c002f10:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002f12:	e158      	b.n	c0031c6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c002f14:	683b      	ldr	r3, [r7, #0]
 c002f16:	681a      	ldr	r2, [r3, #0]
 c002f18:	2101      	movs	r1, #1
 c002f1a:	697b      	ldr	r3, [r7, #20]
 c002f1c:	fa01 f303 	lsl.w	r3, r1, r3
 c002f20:	4013      	ands	r3, r2
 c002f22:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c002f24:	68fb      	ldr	r3, [r7, #12]
 c002f26:	2b00      	cmp	r3, #0
 c002f28:	f000 814a 	beq.w	c0031c0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c002f2c:	683b      	ldr	r3, [r7, #0]
 c002f2e:	685b      	ldr	r3, [r3, #4]
 c002f30:	f003 0303 	and.w	r3, r3, #3
 c002f34:	2b01      	cmp	r3, #1
 c002f36:	d005      	beq.n	c002f44 <HAL_GPIO_Init+0x40>
 c002f38:	683b      	ldr	r3, [r7, #0]
 c002f3a:	685b      	ldr	r3, [r3, #4]
 c002f3c:	f003 0303 	and.w	r3, r3, #3
 c002f40:	2b02      	cmp	r3, #2
 c002f42:	d130      	bne.n	c002fa6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c002f44:	687b      	ldr	r3, [r7, #4]
 c002f46:	689b      	ldr	r3, [r3, #8]
 c002f48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c002f4a:	697b      	ldr	r3, [r7, #20]
 c002f4c:	005b      	lsls	r3, r3, #1
 c002f4e:	2203      	movs	r2, #3
 c002f50:	fa02 f303 	lsl.w	r3, r2, r3
 c002f54:	43db      	mvns	r3, r3
 c002f56:	693a      	ldr	r2, [r7, #16]
 c002f58:	4013      	ands	r3, r2
 c002f5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c002f5c:	683b      	ldr	r3, [r7, #0]
 c002f5e:	68da      	ldr	r2, [r3, #12]
 c002f60:	697b      	ldr	r3, [r7, #20]
 c002f62:	005b      	lsls	r3, r3, #1
 c002f64:	fa02 f303 	lsl.w	r3, r2, r3
 c002f68:	693a      	ldr	r2, [r7, #16]
 c002f6a:	4313      	orrs	r3, r2
 c002f6c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c002f6e:	687b      	ldr	r3, [r7, #4]
 c002f70:	693a      	ldr	r2, [r7, #16]
 c002f72:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c002f74:	687b      	ldr	r3, [r7, #4]
 c002f76:	685b      	ldr	r3, [r3, #4]
 c002f78:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c002f7a:	2201      	movs	r2, #1
 c002f7c:	697b      	ldr	r3, [r7, #20]
 c002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 c002f82:	43db      	mvns	r3, r3
 c002f84:	693a      	ldr	r2, [r7, #16]
 c002f86:	4013      	ands	r3, r2
 c002f88:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c002f8a:	683b      	ldr	r3, [r7, #0]
 c002f8c:	685b      	ldr	r3, [r3, #4]
 c002f8e:	091b      	lsrs	r3, r3, #4
 c002f90:	f003 0201 	and.w	r2, r3, #1
 c002f94:	697b      	ldr	r3, [r7, #20]
 c002f96:	fa02 f303 	lsl.w	r3, r2, r3
 c002f9a:	693a      	ldr	r2, [r7, #16]
 c002f9c:	4313      	orrs	r3, r2
 c002f9e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c002fa0:	687b      	ldr	r3, [r7, #4]
 c002fa2:	693a      	ldr	r2, [r7, #16]
 c002fa4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c002fa6:	683b      	ldr	r3, [r7, #0]
 c002fa8:	685b      	ldr	r3, [r3, #4]
 c002faa:	f003 0303 	and.w	r3, r3, #3
 c002fae:	2b03      	cmp	r3, #3
 c002fb0:	d017      	beq.n	c002fe2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c002fb2:	687b      	ldr	r3, [r7, #4]
 c002fb4:	68db      	ldr	r3, [r3, #12]
 c002fb6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c002fb8:	697b      	ldr	r3, [r7, #20]
 c002fba:	005b      	lsls	r3, r3, #1
 c002fbc:	2203      	movs	r2, #3
 c002fbe:	fa02 f303 	lsl.w	r3, r2, r3
 c002fc2:	43db      	mvns	r3, r3
 c002fc4:	693a      	ldr	r2, [r7, #16]
 c002fc6:	4013      	ands	r3, r2
 c002fc8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c002fca:	683b      	ldr	r3, [r7, #0]
 c002fcc:	689a      	ldr	r2, [r3, #8]
 c002fce:	697b      	ldr	r3, [r7, #20]
 c002fd0:	005b      	lsls	r3, r3, #1
 c002fd2:	fa02 f303 	lsl.w	r3, r2, r3
 c002fd6:	693a      	ldr	r2, [r7, #16]
 c002fd8:	4313      	orrs	r3, r2
 c002fda:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c002fdc:	687b      	ldr	r3, [r7, #4]
 c002fde:	693a      	ldr	r2, [r7, #16]
 c002fe0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c002fe2:	683b      	ldr	r3, [r7, #0]
 c002fe4:	685b      	ldr	r3, [r3, #4]
 c002fe6:	f003 0303 	and.w	r3, r3, #3
 c002fea:	2b02      	cmp	r3, #2
 c002fec:	d123      	bne.n	c003036 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c002fee:	697b      	ldr	r3, [r7, #20]
 c002ff0:	08da      	lsrs	r2, r3, #3
 c002ff2:	687b      	ldr	r3, [r7, #4]
 c002ff4:	3208      	adds	r2, #8
 c002ff6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c002ffa:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c002ffc:	697b      	ldr	r3, [r7, #20]
 c002ffe:	f003 0307 	and.w	r3, r3, #7
 c003002:	009b      	lsls	r3, r3, #2
 c003004:	220f      	movs	r2, #15
 c003006:	fa02 f303 	lsl.w	r3, r2, r3
 c00300a:	43db      	mvns	r3, r3
 c00300c:	693a      	ldr	r2, [r7, #16]
 c00300e:	4013      	ands	r3, r2
 c003010:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c003012:	683b      	ldr	r3, [r7, #0]
 c003014:	691a      	ldr	r2, [r3, #16]
 c003016:	697b      	ldr	r3, [r7, #20]
 c003018:	f003 0307 	and.w	r3, r3, #7
 c00301c:	009b      	lsls	r3, r3, #2
 c00301e:	fa02 f303 	lsl.w	r3, r2, r3
 c003022:	693a      	ldr	r2, [r7, #16]
 c003024:	4313      	orrs	r3, r2
 c003026:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c003028:	697b      	ldr	r3, [r7, #20]
 c00302a:	08da      	lsrs	r2, r3, #3
 c00302c:	687b      	ldr	r3, [r7, #4]
 c00302e:	3208      	adds	r2, #8
 c003030:	6939      	ldr	r1, [r7, #16]
 c003032:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c003036:	687b      	ldr	r3, [r7, #4]
 c003038:	681b      	ldr	r3, [r3, #0]
 c00303a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00303c:	697b      	ldr	r3, [r7, #20]
 c00303e:	005b      	lsls	r3, r3, #1
 c003040:	2203      	movs	r2, #3
 c003042:	fa02 f303 	lsl.w	r3, r2, r3
 c003046:	43db      	mvns	r3, r3
 c003048:	693a      	ldr	r2, [r7, #16]
 c00304a:	4013      	ands	r3, r2
 c00304c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00304e:	683b      	ldr	r3, [r7, #0]
 c003050:	685b      	ldr	r3, [r3, #4]
 c003052:	f003 0203 	and.w	r2, r3, #3
 c003056:	697b      	ldr	r3, [r7, #20]
 c003058:	005b      	lsls	r3, r3, #1
 c00305a:	fa02 f303 	lsl.w	r3, r2, r3
 c00305e:	693a      	ldr	r2, [r7, #16]
 c003060:	4313      	orrs	r3, r2
 c003062:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c003064:	687b      	ldr	r3, [r7, #4]
 c003066:	693a      	ldr	r2, [r7, #16]
 c003068:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c00306a:	683b      	ldr	r3, [r7, #0]
 c00306c:	685b      	ldr	r3, [r3, #4]
 c00306e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c003072:	2b00      	cmp	r3, #0
 c003074:	f000 80a4 	beq.w	c0031c0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c003078:	4a5a      	ldr	r2, [pc, #360]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c00307a:	697b      	ldr	r3, [r7, #20]
 c00307c:	089b      	lsrs	r3, r3, #2
 c00307e:	3318      	adds	r3, #24
 c003080:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003084:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c003086:	697b      	ldr	r3, [r7, #20]
 c003088:	f003 0303 	and.w	r3, r3, #3
 c00308c:	00db      	lsls	r3, r3, #3
 c00308e:	220f      	movs	r2, #15
 c003090:	fa02 f303 	lsl.w	r3, r2, r3
 c003094:	43db      	mvns	r3, r3
 c003096:	693a      	ldr	r2, [r7, #16]
 c003098:	4013      	ands	r3, r2
 c00309a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00309c:	687b      	ldr	r3, [r7, #4]
 c00309e:	4a52      	ldr	r2, [pc, #328]	; (c0031e8 <HAL_GPIO_Init+0x2e4>)
 c0030a0:	4293      	cmp	r3, r2
 c0030a2:	d025      	beq.n	c0030f0 <HAL_GPIO_Init+0x1ec>
 c0030a4:	687b      	ldr	r3, [r7, #4]
 c0030a6:	4a51      	ldr	r2, [pc, #324]	; (c0031ec <HAL_GPIO_Init+0x2e8>)
 c0030a8:	4293      	cmp	r3, r2
 c0030aa:	d01f      	beq.n	c0030ec <HAL_GPIO_Init+0x1e8>
 c0030ac:	687b      	ldr	r3, [r7, #4]
 c0030ae:	4a50      	ldr	r2, [pc, #320]	; (c0031f0 <HAL_GPIO_Init+0x2ec>)
 c0030b0:	4293      	cmp	r3, r2
 c0030b2:	d019      	beq.n	c0030e8 <HAL_GPIO_Init+0x1e4>
 c0030b4:	687b      	ldr	r3, [r7, #4]
 c0030b6:	4a4f      	ldr	r2, [pc, #316]	; (c0031f4 <HAL_GPIO_Init+0x2f0>)
 c0030b8:	4293      	cmp	r3, r2
 c0030ba:	d013      	beq.n	c0030e4 <HAL_GPIO_Init+0x1e0>
 c0030bc:	687b      	ldr	r3, [r7, #4]
 c0030be:	4a4e      	ldr	r2, [pc, #312]	; (c0031f8 <HAL_GPIO_Init+0x2f4>)
 c0030c0:	4293      	cmp	r3, r2
 c0030c2:	d00d      	beq.n	c0030e0 <HAL_GPIO_Init+0x1dc>
 c0030c4:	687b      	ldr	r3, [r7, #4]
 c0030c6:	4a4d      	ldr	r2, [pc, #308]	; (c0031fc <HAL_GPIO_Init+0x2f8>)
 c0030c8:	4293      	cmp	r3, r2
 c0030ca:	d007      	beq.n	c0030dc <HAL_GPIO_Init+0x1d8>
 c0030cc:	687b      	ldr	r3, [r7, #4]
 c0030ce:	4a4c      	ldr	r2, [pc, #304]	; (c003200 <HAL_GPIO_Init+0x2fc>)
 c0030d0:	4293      	cmp	r3, r2
 c0030d2:	d101      	bne.n	c0030d8 <HAL_GPIO_Init+0x1d4>
 c0030d4:	2306      	movs	r3, #6
 c0030d6:	e00c      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030d8:	2307      	movs	r3, #7
 c0030da:	e00a      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030dc:	2305      	movs	r3, #5
 c0030de:	e008      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030e0:	2304      	movs	r3, #4
 c0030e2:	e006      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030e4:	2303      	movs	r3, #3
 c0030e6:	e004      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030e8:	2302      	movs	r3, #2
 c0030ea:	e002      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030ec:	2301      	movs	r3, #1
 c0030ee:	e000      	b.n	c0030f2 <HAL_GPIO_Init+0x1ee>
 c0030f0:	2300      	movs	r3, #0
 c0030f2:	697a      	ldr	r2, [r7, #20]
 c0030f4:	f002 0203 	and.w	r2, r2, #3
 c0030f8:	00d2      	lsls	r2, r2, #3
 c0030fa:	4093      	lsls	r3, r2
 c0030fc:	693a      	ldr	r2, [r7, #16]
 c0030fe:	4313      	orrs	r3, r2
 c003100:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c003102:	4938      	ldr	r1, [pc, #224]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003104:	697b      	ldr	r3, [r7, #20]
 c003106:	089b      	lsrs	r3, r3, #2
 c003108:	3318      	adds	r3, #24
 c00310a:	693a      	ldr	r2, [r7, #16]
 c00310c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c003110:	4b34      	ldr	r3, [pc, #208]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003112:	681b      	ldr	r3, [r3, #0]
 c003114:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c003116:	68fb      	ldr	r3, [r7, #12]
 c003118:	43db      	mvns	r3, r3
 c00311a:	693a      	ldr	r2, [r7, #16]
 c00311c:	4013      	ands	r3, r2
 c00311e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c003120:	683b      	ldr	r3, [r7, #0]
 c003122:	685b      	ldr	r3, [r3, #4]
 c003124:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003128:	2b00      	cmp	r3, #0
 c00312a:	d003      	beq.n	c003134 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c00312c:	693a      	ldr	r2, [r7, #16]
 c00312e:	68fb      	ldr	r3, [r7, #12]
 c003130:	4313      	orrs	r3, r2
 c003132:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c003134:	4a2b      	ldr	r2, [pc, #172]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003136:	693b      	ldr	r3, [r7, #16]
 c003138:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00313a:	4b2a      	ldr	r3, [pc, #168]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c00313c:	685b      	ldr	r3, [r3, #4]
 c00313e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c003140:	68fb      	ldr	r3, [r7, #12]
 c003142:	43db      	mvns	r3, r3
 c003144:	693a      	ldr	r2, [r7, #16]
 c003146:	4013      	ands	r3, r2
 c003148:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c00314a:	683b      	ldr	r3, [r7, #0]
 c00314c:	685b      	ldr	r3, [r3, #4]
 c00314e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c003152:	2b00      	cmp	r3, #0
 c003154:	d003      	beq.n	c00315e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c003156:	693a      	ldr	r2, [r7, #16]
 c003158:	68fb      	ldr	r3, [r7, #12]
 c00315a:	4313      	orrs	r3, r2
 c00315c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c00315e:	4a21      	ldr	r2, [pc, #132]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003160:	693b      	ldr	r3, [r7, #16]
 c003162:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c003164:	4b1f      	ldr	r3, [pc, #124]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00316a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00316c:	68fb      	ldr	r3, [r7, #12]
 c00316e:	43db      	mvns	r3, r3
 c003170:	693a      	ldr	r2, [r7, #16]
 c003172:	4013      	ands	r3, r2
 c003174:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c003176:	683b      	ldr	r3, [r7, #0]
 c003178:	685b      	ldr	r3, [r3, #4]
 c00317a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00317e:	2b00      	cmp	r3, #0
 c003180:	d003      	beq.n	c00318a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c003182:	693a      	ldr	r2, [r7, #16]
 c003184:	68fb      	ldr	r3, [r7, #12]
 c003186:	4313      	orrs	r3, r2
 c003188:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00318a:	4a16      	ldr	r2, [pc, #88]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c00318c:	693b      	ldr	r3, [r7, #16]
 c00318e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c003192:	4b14      	ldr	r3, [pc, #80]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c003194:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003198:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00319a:	68fb      	ldr	r3, [r7, #12]
 c00319c:	43db      	mvns	r3, r3
 c00319e:	693a      	ldr	r2, [r7, #16]
 c0031a0:	4013      	ands	r3, r2
 c0031a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c0031a4:	683b      	ldr	r3, [r7, #0]
 c0031a6:	685b      	ldr	r3, [r3, #4]
 c0031a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0031ac:	2b00      	cmp	r3, #0
 c0031ae:	d003      	beq.n	c0031b8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c0031b0:	693a      	ldr	r2, [r7, #16]
 c0031b2:	68fb      	ldr	r3, [r7, #12]
 c0031b4:	4313      	orrs	r3, r2
 c0031b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0031b8:	4a0a      	ldr	r2, [pc, #40]	; (c0031e4 <HAL_GPIO_Init+0x2e0>)
 c0031ba:	693b      	ldr	r3, [r7, #16]
 c0031bc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c0031c0:	697b      	ldr	r3, [r7, #20]
 c0031c2:	3301      	adds	r3, #1
 c0031c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0031c6:	683b      	ldr	r3, [r7, #0]
 c0031c8:	681a      	ldr	r2, [r3, #0]
 c0031ca:	697b      	ldr	r3, [r7, #20]
 c0031cc:	fa22 f303 	lsr.w	r3, r2, r3
 c0031d0:	2b00      	cmp	r3, #0
 c0031d2:	f47f ae9f 	bne.w	c002f14 <HAL_GPIO_Init+0x10>
  }
}
 c0031d6:	bf00      	nop
 c0031d8:	bf00      	nop
 c0031da:	371c      	adds	r7, #28
 c0031dc:	46bd      	mov	sp, r7
 c0031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0031e2:	4770      	bx	lr
 c0031e4:	5002f400 	.word	0x5002f400
 c0031e8:	52020000 	.word	0x52020000
 c0031ec:	52020400 	.word	0x52020400
 c0031f0:	52020800 	.word	0x52020800
 c0031f4:	52020c00 	.word	0x52020c00
 c0031f8:	52021000 	.word	0x52021000
 c0031fc:	52021400 	.word	0x52021400
 c003200:	52021800 	.word	0x52021800

0c003204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c003204:	b480      	push	{r7}
 c003206:	b083      	sub	sp, #12
 c003208:	af00      	add	r7, sp, #0
 c00320a:	6078      	str	r0, [r7, #4]
 c00320c:	460b      	mov	r3, r1
 c00320e:	807b      	strh	r3, [r7, #2]
 c003210:	4613      	mov	r3, r2
 c003212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c003214:	787b      	ldrb	r3, [r7, #1]
 c003216:	2b00      	cmp	r3, #0
 c003218:	d003      	beq.n	c003222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c00321a:	887a      	ldrh	r2, [r7, #2]
 c00321c:	687b      	ldr	r3, [r7, #4]
 c00321e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c003220:	e002      	b.n	c003228 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c003222:	887a      	ldrh	r2, [r7, #2]
 c003224:	687b      	ldr	r3, [r7, #4]
 c003226:	629a      	str	r2, [r3, #40]	; 0x28
}
 c003228:	bf00      	nop
 c00322a:	370c      	adds	r7, #12
 c00322c:	46bd      	mov	sp, r7
 c00322e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003232:	4770      	bx	lr

0c003234 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c003234:	b480      	push	{r7}
 c003236:	b089      	sub	sp, #36	; 0x24
 c003238:	af00      	add	r7, sp, #0
 c00323a:	60f8      	str	r0, [r7, #12]
 c00323c:	460b      	mov	r3, r1
 c00323e:	607a      	str	r2, [r7, #4]
 c003240:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c003242:	2300      	movs	r3, #0
 c003244:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c003246:	68fb      	ldr	r3, [r7, #12]
 c003248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00324a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00324c:	e01b      	b.n	c003286 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00324e:	897a      	ldrh	r2, [r7, #10]
 c003250:	2101      	movs	r1, #1
 c003252:	69fb      	ldr	r3, [r7, #28]
 c003254:	fa01 f303 	lsl.w	r3, r1, r3
 c003258:	4013      	ands	r3, r2
 c00325a:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c00325c:	697b      	ldr	r3, [r7, #20]
 c00325e:	2b00      	cmp	r3, #0
 c003260:	d00e      	beq.n	c003280 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c003262:	2201      	movs	r2, #1
 c003264:	69fb      	ldr	r3, [r7, #28]
 c003266:	fa02 f303 	lsl.w	r3, r2, r3
 c00326a:	43db      	mvns	r3, r3
 c00326c:	69ba      	ldr	r2, [r7, #24]
 c00326e:	4013      	ands	r3, r2
 c003270:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c003272:	687a      	ldr	r2, [r7, #4]
 c003274:	69fb      	ldr	r3, [r7, #28]
 c003276:	fa02 f303 	lsl.w	r3, r2, r3
 c00327a:	69ba      	ldr	r2, [r7, #24]
 c00327c:	4313      	orrs	r3, r2
 c00327e:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c003280:	69fb      	ldr	r3, [r7, #28]
 c003282:	3301      	adds	r3, #1
 c003284:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c003286:	897a      	ldrh	r2, [r7, #10]
 c003288:	69fb      	ldr	r3, [r7, #28]
 c00328a:	fa42 f303 	asr.w	r3, r2, r3
 c00328e:	2b00      	cmp	r3, #0
 c003290:	d1dd      	bne.n	c00324e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c003292:	68fb      	ldr	r3, [r7, #12]
 c003294:	69ba      	ldr	r2, [r7, #24]
 c003296:	631a      	str	r2, [r3, #48]	; 0x30
}
 c003298:	bf00      	nop
 c00329a:	3724      	adds	r7, #36	; 0x24
 c00329c:	46bd      	mov	sp, r7
 c00329e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0032a2:	4770      	bx	lr

0c0032a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c0032a4:	b480      	push	{r7}
 c0032a6:	b085      	sub	sp, #20
 c0032a8:	af00      	add	r7, sp, #0
 c0032aa:	6078      	str	r0, [r7, #4]
 c0032ac:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c0032ae:	683b      	ldr	r3, [r7, #0]
 c0032b0:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c0032b4:	d216      	bcs.n	c0032e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c0032b6:	687b      	ldr	r3, [r7, #4]
 c0032b8:	0f1b      	lsrs	r3, r3, #28
 c0032ba:	015a      	lsls	r2, r3, #5
 c0032bc:	687b      	ldr	r3, [r7, #4]
 c0032be:	f003 031f 	and.w	r3, r3, #31
 c0032c2:	4413      	add	r3, r2
 c0032c4:	2b32      	cmp	r3, #50	; 0x32
 c0032c6:	d80d      	bhi.n	c0032e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c0032c8:	687b      	ldr	r3, [r7, #4]
 c0032ca:	f003 0320 	and.w	r3, r3, #32
 c0032ce:	2b00      	cmp	r3, #0
 c0032d0:	d00a      	beq.n	c0032e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c0032d2:	687b      	ldr	r3, [r7, #4]
 c0032d4:	0f1b      	lsrs	r3, r3, #28
 c0032d6:	015a      	lsls	r2, r3, #5
 c0032d8:	687b      	ldr	r3, [r7, #4]
 c0032da:	f003 031f 	and.w	r3, r3, #31
 c0032de:	4413      	add	r3, r2
 c0032e0:	2b00      	cmp	r3, #0
 c0032e2:	d001      	beq.n	c0032e8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c0032e4:	2301      	movs	r3, #1
 c0032e6:	e0a8      	b.n	c00343a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0032e8:	687b      	ldr	r3, [r7, #4]
 c0032ea:	f003 0320 	and.w	r3, r3, #32
 c0032ee:	2b00      	cmp	r3, #0
 c0032f0:	d04e      	beq.n	c003390 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0032f2:	683a      	ldr	r2, [r7, #0]
 c0032f4:	f240 1301 	movw	r3, #257	; 0x101
 c0032f8:	4013      	ands	r3, r2
 c0032fa:	f240 1201 	movw	r2, #257	; 0x101
 c0032fe:	4293      	cmp	r3, r2
 c003300:	d10e      	bne.n	c003320 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c003302:	4b51      	ldr	r3, [pc, #324]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003304:	691b      	ldr	r3, [r3, #16]
 c003306:	4b50      	ldr	r3, [pc, #320]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003308:	f04f 32ff 	mov.w	r2, #4294967295
 c00330c:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00330e:	4b4e      	ldr	r3, [pc, #312]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003310:	695b      	ldr	r3, [r3, #20]
 c003312:	4a4d      	ldr	r2, [pc, #308]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003314:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c003318:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c00331c:	6153      	str	r3, [r2, #20]
 c00331e:	e00f      	b.n	c003340 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c003320:	683b      	ldr	r3, [r7, #0]
 c003322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003326:	2b00      	cmp	r3, #0
 c003328:	d00a      	beq.n	c003340 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00332a:	4b47      	ldr	r3, [pc, #284]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00332c:	691b      	ldr	r3, [r3, #16]
 c00332e:	4b46      	ldr	r3, [pc, #280]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003330:	2200      	movs	r2, #0
 c003332:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c003334:	4b44      	ldr	r3, [pc, #272]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003336:	695b      	ldr	r3, [r3, #20]
 c003338:	4a43      	ldr	r2, [pc, #268]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00333a:	0cdb      	lsrs	r3, r3, #19
 c00333c:	04db      	lsls	r3, r3, #19
 c00333e:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c003340:	683a      	ldr	r2, [r7, #0]
 c003342:	f240 2302 	movw	r3, #514	; 0x202
 c003346:	4013      	ands	r3, r2
 c003348:	f240 2202 	movw	r2, #514	; 0x202
 c00334c:	4293      	cmp	r3, r2
 c00334e:	d10e      	bne.n	c00336e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c003350:	4b3d      	ldr	r3, [pc, #244]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003352:	6a1b      	ldr	r3, [r3, #32]
 c003354:	4b3c      	ldr	r3, [pc, #240]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003356:	f04f 32ff 	mov.w	r2, #4294967295
 c00335a:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c00335c:	4b3a      	ldr	r3, [pc, #232]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003360:	4a39      	ldr	r2, [pc, #228]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003362:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c003366:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c00336a:	6253      	str	r3, [r2, #36]	; 0x24
 c00336c:	e064      	b.n	c003438 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00336e:	683b      	ldr	r3, [r7, #0]
 c003370:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003374:	2b00      	cmp	r3, #0
 c003376:	d05f      	beq.n	c003438 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c003378:	4b33      	ldr	r3, [pc, #204]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00337a:	6a1b      	ldr	r3, [r3, #32]
 c00337c:	4b32      	ldr	r3, [pc, #200]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00337e:	2200      	movs	r2, #0
 c003380:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c003382:	4b31      	ldr	r3, [pc, #196]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003384:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003386:	4a30      	ldr	r2, [pc, #192]	; (c003448 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003388:	0cdb      	lsrs	r3, r3, #19
 c00338a:	04db      	lsls	r3, r3, #19
 c00338c:	6253      	str	r3, [r2, #36]	; 0x24
 c00338e:	e053      	b.n	c003438 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c003390:	687b      	ldr	r3, [r7, #4]
 c003392:	0f1a      	lsrs	r2, r3, #28
 c003394:	4b2d      	ldr	r3, [pc, #180]	; (c00344c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c003396:	4413      	add	r3, r2
 c003398:	009b      	lsls	r3, r3, #2
 c00339a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00339c:	683a      	ldr	r2, [r7, #0]
 c00339e:	f240 1301 	movw	r3, #257	; 0x101
 c0033a2:	4013      	ands	r3, r2
 c0033a4:	f240 1201 	movw	r2, #257	; 0x101
 c0033a8:	4293      	cmp	r3, r2
 c0033aa:	d10a      	bne.n	c0033c2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0033ac:	68fb      	ldr	r3, [r7, #12]
 c0033ae:	6819      	ldr	r1, [r3, #0]
 c0033b0:	687b      	ldr	r3, [r7, #4]
 c0033b2:	f003 031f 	and.w	r3, r3, #31
 c0033b6:	2201      	movs	r2, #1
 c0033b8:	409a      	lsls	r2, r3
 c0033ba:	68fb      	ldr	r3, [r7, #12]
 c0033bc:	430a      	orrs	r2, r1
 c0033be:	601a      	str	r2, [r3, #0]
 c0033c0:	e010      	b.n	c0033e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0033c2:	683b      	ldr	r3, [r7, #0]
 c0033c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0033c8:	2b00      	cmp	r3, #0
 c0033ca:	d00b      	beq.n	c0033e4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0033cc:	68fb      	ldr	r3, [r7, #12]
 c0033ce:	6819      	ldr	r1, [r3, #0]
 c0033d0:	687b      	ldr	r3, [r7, #4]
 c0033d2:	f003 031f 	and.w	r3, r3, #31
 c0033d6:	2201      	movs	r2, #1
 c0033d8:	fa02 f303 	lsl.w	r3, r2, r3
 c0033dc:	43da      	mvns	r2, r3
 c0033de:	68fb      	ldr	r3, [r7, #12]
 c0033e0:	400a      	ands	r2, r1
 c0033e2:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0033e4:	687b      	ldr	r3, [r7, #4]
 c0033e6:	0f1a      	lsrs	r2, r3, #28
 c0033e8:	4b19      	ldr	r3, [pc, #100]	; (c003450 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c0033ea:	4413      	add	r3, r2
 c0033ec:	009b      	lsls	r3, r3, #2
 c0033ee:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0033f0:	683a      	ldr	r2, [r7, #0]
 c0033f2:	f240 2302 	movw	r3, #514	; 0x202
 c0033f6:	4013      	ands	r3, r2
 c0033f8:	f240 2202 	movw	r2, #514	; 0x202
 c0033fc:	4293      	cmp	r3, r2
 c0033fe:	d10a      	bne.n	c003416 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c003400:	68fb      	ldr	r3, [r7, #12]
 c003402:	6819      	ldr	r1, [r3, #0]
 c003404:	687b      	ldr	r3, [r7, #4]
 c003406:	f003 031f 	and.w	r3, r3, #31
 c00340a:	2201      	movs	r2, #1
 c00340c:	409a      	lsls	r2, r3
 c00340e:	68fb      	ldr	r3, [r7, #12]
 c003410:	430a      	orrs	r2, r1
 c003412:	601a      	str	r2, [r3, #0]
 c003414:	e010      	b.n	c003438 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c003416:	683b      	ldr	r3, [r7, #0]
 c003418:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c00341c:	2b00      	cmp	r3, #0
 c00341e:	d00b      	beq.n	c003438 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c003420:	68fb      	ldr	r3, [r7, #12]
 c003422:	6819      	ldr	r1, [r3, #0]
 c003424:	687b      	ldr	r3, [r7, #4]
 c003426:	f003 031f 	and.w	r3, r3, #31
 c00342a:	2201      	movs	r2, #1
 c00342c:	fa02 f303 	lsl.w	r3, r2, r3
 c003430:	43da      	mvns	r2, r3
 c003432:	68fb      	ldr	r3, [r7, #12]
 c003434:	400a      	ands	r2, r1
 c003436:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c003438:	2300      	movs	r3, #0
}
 c00343a:	4618      	mov	r0, r3
 c00343c:	3714      	adds	r7, #20
 c00343e:	46bd      	mov	sp, r7
 c003440:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003444:	4770      	bx	lr
 c003446:	bf00      	nop
 c003448:	50032400 	.word	0x50032400
 c00344c:	1400c904 	.word	0x1400c904
 c003450:	1400c908 	.word	0x1400c908

0c003454 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c003454:	b480      	push	{r7}
 c003456:	b089      	sub	sp, #36	; 0x24
 c003458:	af00      	add	r7, sp, #0
 c00345a:	6078      	str	r0, [r7, #4]
 c00345c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00345e:	687b      	ldr	r3, [r7, #4]
 c003460:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c003464:	d00b      	beq.n	c00347e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c003466:	687b      	ldr	r3, [r7, #4]
 c003468:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00346c:	d007      	beq.n	c00347e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00346e:	687b      	ldr	r3, [r7, #4]
 c003470:	4a36      	ldr	r2, [pc, #216]	; (c00354c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c003472:	4293      	cmp	r3, r2
 c003474:	d003      	beq.n	c00347e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c003476:	687b      	ldr	r3, [r7, #4]
 c003478:	4a35      	ldr	r2, [pc, #212]	; (c003550 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00347a:	4293      	cmp	r3, r2
 c00347c:	d111      	bne.n	c0034a2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00347e:	683b      	ldr	r3, [r7, #0]
 c003480:	681b      	ldr	r3, [r3, #0]
 c003482:	2b00      	cmp	r3, #0
 c003484:	d004      	beq.n	c003490 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c003486:	683b      	ldr	r3, [r7, #0]
 c003488:	681b      	ldr	r3, [r3, #0]
 c00348a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00348e:	d108      	bne.n	c0034a2 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c003490:	683b      	ldr	r3, [r7, #0]
 c003492:	685b      	ldr	r3, [r3, #4]
 c003494:	2b00      	cmp	r3, #0
 c003496:	d006      	beq.n	c0034a6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c003498:	683b      	ldr	r3, [r7, #0]
 c00349a:	685b      	ldr	r3, [r3, #4]
 c00349c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0034a0:	d001      	beq.n	c0034a6 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c0034a2:	2301      	movs	r3, #1
 c0034a4:	e04b      	b.n	c00353e <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0034a6:	683b      	ldr	r3, [r7, #0]
 c0034a8:	685b      	ldr	r3, [r3, #4]
 c0034aa:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0034ac:	683b      	ldr	r3, [r7, #0]
 c0034ae:	681b      	ldr	r3, [r3, #0]
 c0034b0:	693a      	ldr	r2, [r7, #16]
 c0034b2:	4313      	orrs	r3, r2
 c0034b4:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0034b6:	687b      	ldr	r3, [r7, #4]
 c0034b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0034bc:	d003      	beq.n	c0034c6 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0034be:	687b      	ldr	r3, [r7, #4]
 c0034c0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0034c4:	d105      	bne.n	c0034d2 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0034c6:	4b23      	ldr	r3, [pc, #140]	; (c003554 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c0034c8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c0034ca:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c0034ce:	61bb      	str	r3, [r7, #24]
 c0034d0:	e004      	b.n	c0034dc <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c0034d2:	4b21      	ldr	r3, [pc, #132]	; (c003558 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c0034d4:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c0034d6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c0034da:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c0034dc:	69bb      	ldr	r3, [r7, #24]
 c0034de:	0b5b      	lsrs	r3, r3, #13
 c0034e0:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c0034e2:	2300      	movs	r3, #0
 c0034e4:	617b      	str	r3, [r7, #20]
 c0034e6:	e00c      	b.n	c003502 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0034e8:	683b      	ldr	r3, [r7, #0]
 c0034ea:	697a      	ldr	r2, [r7, #20]
 c0034ec:	3202      	adds	r2, #2
 c0034ee:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0034f2:	69fb      	ldr	r3, [r7, #28]
 c0034f4:	697a      	ldr	r2, [r7, #20]
 c0034f6:	3240      	adds	r2, #64	; 0x40
 c0034f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0034fc:	697b      	ldr	r3, [r7, #20]
 c0034fe:	3301      	adds	r3, #1
 c003500:	617b      	str	r3, [r7, #20]
 c003502:	697a      	ldr	r2, [r7, #20]
 c003504:	68fb      	ldr	r3, [r7, #12]
 c003506:	429a      	cmp	r2, r3
 c003508:	d3ee      	bcc.n	c0034e8 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c00350a:	69fb      	ldr	r3, [r7, #28]
 c00350c:	681b      	ldr	r3, [r3, #0]
 c00350e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c003512:	693b      	ldr	r3, [r7, #16]
 c003514:	431a      	orrs	r2, r3
 c003516:	69fb      	ldr	r3, [r7, #28]
 c003518:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c00351a:	69bb      	ldr	r3, [r7, #24]
 c00351c:	0b5b      	lsrs	r3, r3, #13
 c00351e:	2201      	movs	r2, #1
 c003520:	fa02 f303 	lsl.w	r3, r2, r3
 c003524:	3b01      	subs	r3, #1
 c003526:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c003528:	69fb      	ldr	r3, [r7, #28]
 c00352a:	691a      	ldr	r2, [r3, #16]
 c00352c:	68bb      	ldr	r3, [r7, #8]
 c00352e:	43db      	mvns	r3, r3
 c003530:	401a      	ands	r2, r3
 c003532:	683b      	ldr	r3, [r7, #0]
 c003534:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c003536:	431a      	orrs	r2, r3
 c003538:	69fb      	ldr	r3, [r7, #28]
 c00353a:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c00353c:	2300      	movs	r3, #0
}
 c00353e:	4618      	mov	r0, r3
 c003540:	3724      	adds	r7, #36	; 0x24
 c003542:	46bd      	mov	sp, r7
 c003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003548:	4770      	bx	lr
 c00354a:	bf00      	nop
 c00354c:	20030000 	.word	0x20030000
 c003550:	30030000 	.word	0x30030000
 c003554:	50032c00 	.word	0x50032c00
 c003558:	50033000 	.word	0x50033000

0c00355c <HAL_HASH_Init>:
  *         relevant APIs manage themselves the MDMAT bit.
  * @param  hhash HASH handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_Init(HASH_HandleTypeDef *hhash)
{
 c00355c:	b580      	push	{r7, lr}
 c00355e:	b082      	sub	sp, #8
 c003560:	af00      	add	r7, sp, #0
 c003562:	6078      	str	r0, [r7, #4]
  /* Check the hash handle allocation */
  if (hhash == NULL)
 c003564:	687b      	ldr	r3, [r7, #4]
 c003566:	2b00      	cmp	r3, #0
 c003568:	d101      	bne.n	c00356e <HAL_HASH_Init+0x12>
  {
    return HAL_ERROR;
 c00356a:	2301      	movs	r3, #1
 c00356c:	e043      	b.n	c0035f6 <HAL_HASH_Init+0x9a>

    /* Init the low level hardware */
    hhash->MspInitCallback(hhash);
  }
#else
  if (hhash->State == HAL_HASH_STATE_RESET)
 c00356e:	687b      	ldr	r3, [r7, #4]
 c003570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c003574:	b2db      	uxtb	r3, r3
 c003576:	2b00      	cmp	r3, #0
 c003578:	d106      	bne.n	c003588 <HAL_HASH_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hhash->Lock = HAL_UNLOCKED;
 c00357a:	687b      	ldr	r3, [r7, #4]
 c00357c:	2200      	movs	r2, #0
 c00357e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Init the low level hardware */
    HAL_HASH_MspInit(hhash);
 c003582:	6878      	ldr	r0, [r7, #4]
 c003584:	f7fe fb44 	bl	c001c10 <HAL_HASH_MspInit>
  }
#endif /* (USE_HAL_HASH_REGISTER_CALLBACKS) */

  /* Change the HASH state */
  hhash->State = HAL_HASH_STATE_BUSY;
 c003588:	687b      	ldr	r3, [r7, #4]
 c00358a:	2202      	movs	r2, #2
 c00358c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Reset HashInCount, HashITCounter, HashBuffSize and NbWordsAlreadyPushed */
  hhash->HashInCount = 0;
 c003590:	687b      	ldr	r3, [r7, #4]
 c003592:	2200      	movs	r2, #0
 c003594:	621a      	str	r2, [r3, #32]
  hhash->HashBuffSize = 0;
 c003596:	687b      	ldr	r3, [r7, #4]
 c003598:	2200      	movs	r2, #0
 c00359a:	61da      	str	r2, [r3, #28]
  hhash->HashITCounter = 0;
 c00359c:	687b      	ldr	r3, [r7, #4]
 c00359e:	2200      	movs	r2, #0
 c0035a0:	625a      	str	r2, [r3, #36]	; 0x24
  hhash->NbWordsAlreadyPushed = 0;
 c0035a2:	687b      	ldr	r3, [r7, #4]
 c0035a4:	2200      	movs	r2, #0
 c0035a6:	639a      	str	r2, [r3, #56]	; 0x38
  /* Reset digest calculation bridle (MDMAT bit control) */
  hhash->DigestCalculationDisable = RESET;
 c0035a8:	687b      	ldr	r3, [r7, #4]
 c0035aa:	2200      	movs	r2, #0
 c0035ac:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
  /* Set phase to READY */
  hhash->Phase = HAL_HASH_PHASE_READY;
 c0035b0:	687b      	ldr	r3, [r7, #4]
 c0035b2:	2201      	movs	r2, #1
 c0035b4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  /* Reset suspension request flag */
  hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c0035b8:	687b      	ldr	r3, [r7, #4]
 c0035ba:	2200      	movs	r2, #0
 c0035bc:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

  /* Set the data type bit */
  MODIFY_REG(HASH->CR, HASH_CR_DATATYPE, hhash->Init.DataType);
 c0035c0:	4b0f      	ldr	r3, [pc, #60]	; (c003600 <HAL_HASH_Init+0xa4>)
 c0035c2:	681b      	ldr	r3, [r3, #0]
 c0035c4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0035c8:	687b      	ldr	r3, [r7, #4]
 c0035ca:	681b      	ldr	r3, [r3, #0]
 c0035cc:	490c      	ldr	r1, [pc, #48]	; (c003600 <HAL_HASH_Init+0xa4>)
 c0035ce:	4313      	orrs	r3, r2
 c0035d0:	600b      	str	r3, [r1, #0]
  /* Reset MDMAT bit */
  __HAL_HASH_RESET_MDMAT();
 c0035d2:	4b0b      	ldr	r3, [pc, #44]	; (c003600 <HAL_HASH_Init+0xa4>)
 c0035d4:	681b      	ldr	r3, [r3, #0]
 c0035d6:	4a0a      	ldr	r2, [pc, #40]	; (c003600 <HAL_HASH_Init+0xa4>)
 c0035d8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 c0035dc:	6013      	str	r3, [r2, #0]
  /* Reset HASH handle status */
  hhash->Status = HAL_OK;
 c0035de:	687b      	ldr	r3, [r7, #4]
 c0035e0:	2200      	movs	r2, #0
 c0035e2:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Set the HASH state to Ready */
  hhash->State = HAL_HASH_STATE_READY;
 c0035e6:	687b      	ldr	r3, [r7, #4]
 c0035e8:	2201      	movs	r2, #1
 c0035ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Initialise the error code */
  hhash->ErrorCode = HAL_HASH_ERROR_NONE;
 c0035ee:	687b      	ldr	r3, [r7, #4]
 c0035f0:	2200      	movs	r2, #0
 c0035f2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 c0035f4:	2300      	movs	r3, #0
}
 c0035f6:	4618      	mov	r0, r3
 c0035f8:	3708      	adds	r7, #8
 c0035fa:	46bd      	mov	sp, r7
 c0035fc:	bd80      	pop	{r7, pc}
 c0035fe:	bf00      	nop
 c003600:	520c0400 	.word	0x520c0400

0c003604 <HAL_HASH_MD5_Start>:
  * @param  Timeout Timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HASH_MD5_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer,
                                     uint32_t Timeout)
{
 c003604:	b580      	push	{r7, lr}
 c003606:	b086      	sub	sp, #24
 c003608:	af02      	add	r7, sp, #8
 c00360a:	60f8      	str	r0, [r7, #12]
 c00360c:	60b9      	str	r1, [r7, #8]
 c00360e:	607a      	str	r2, [r7, #4]
 c003610:	603b      	str	r3, [r7, #0]
  return HASH_Start(hhash, pInBuffer, Size, pOutBuffer, Timeout, HASH_ALGOSELECTION_MD5);
 c003612:	2380      	movs	r3, #128	; 0x80
 c003614:	9301      	str	r3, [sp, #4]
 c003616:	69bb      	ldr	r3, [r7, #24]
 c003618:	9300      	str	r3, [sp, #0]
 c00361a:	683b      	ldr	r3, [r7, #0]
 c00361c:	687a      	ldr	r2, [r7, #4]
 c00361e:	68b9      	ldr	r1, [r7, #8]
 c003620:	68f8      	ldr	r0, [r7, #12]
 c003622:	f000 fa21 	bl	c003a68 <HASH_Start>
 c003626:	4603      	mov	r3, r0
}
 c003628:	4618      	mov	r0, r3
 c00362a:	3710      	adds	r7, #16
 c00362c:	46bd      	mov	sp, r7
 c00362e:	bd80      	pop	{r7, pc}

0c003630 <HASH_WriteData>:
  *         processing is suspended when possible and the Peripheral feeding point reached at
  *         suspension time is stored in the handle for resumption later on.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WriteData(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size)
{
 c003630:	b480      	push	{r7}
 c003632:	b087      	sub	sp, #28
 c003634:	af00      	add	r7, sp, #0
 c003636:	60f8      	str	r0, [r7, #12]
 c003638:	60b9      	str	r1, [r7, #8]
 c00363a:	607a      	str	r2, [r7, #4]
  uint32_t buffercounter;
  __IO uint32_t inputaddr = (uint32_t) pInBuffer;
 c00363c:	68bb      	ldr	r3, [r7, #8]
 c00363e:	613b      	str	r3, [r7, #16]

  for (buffercounter = 0U; buffercounter < Size; buffercounter += 4U)
 c003640:	2300      	movs	r3, #0
 c003642:	617b      	str	r3, [r7, #20]
 c003644:	e057      	b.n	c0036f6 <HASH_WriteData+0xc6>
  {
    /* Write input data 4 bytes at a time */
    HASH->DIN = *(uint32_t *)inputaddr;
 c003646:	693b      	ldr	r3, [r7, #16]
 c003648:	4a30      	ldr	r2, [pc, #192]	; (c00370c <HASH_WriteData+0xdc>)
 c00364a:	681b      	ldr	r3, [r3, #0]
 c00364c:	6053      	str	r3, [r2, #4]
    inputaddr += 4U;
 c00364e:	693b      	ldr	r3, [r7, #16]
 c003650:	3304      	adds	r3, #4
 c003652:	613b      	str	r3, [r7, #16]

    /* If the suspension flag has been raised and if the processing is not about
    to end, suspend processing */
    if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter + 4U) < Size))
 c003654:	68fb      	ldr	r3, [r7, #12]
 c003656:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 c00365a:	2b01      	cmp	r3, #1
 c00365c:	d148      	bne.n	c0036f0 <HASH_WriteData+0xc0>
 c00365e:	697b      	ldr	r3, [r7, #20]
 c003660:	3304      	adds	r3, #4
 c003662:	687a      	ldr	r2, [r7, #4]
 c003664:	429a      	cmp	r2, r3
 c003666:	d943      	bls.n	c0036f0 <HASH_WriteData+0xc0>
    {
      /* Wait for DINIS = 1, which occurs when 16 32-bit locations are free
      in the input buffer */
      if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))
 c003668:	4b28      	ldr	r3, [pc, #160]	; (c00370c <HASH_WriteData+0xdc>)
 c00366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00366c:	f003 0301 	and.w	r3, r3, #1
 c003670:	2b01      	cmp	r3, #1
 c003672:	d13d      	bne.n	c0036f0 <HASH_WriteData+0xc0>
      {
        /* Reset SuspendRequest */
        hhash->SuspendRequest = HAL_HASH_SUSPEND_NONE;
 c003674:	68fb      	ldr	r3, [r7, #12]
 c003676:	2200      	movs	r2, #0
 c003678:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36

        /* Depending whether the key or the input data were fed to the Peripheral, the feeding point
        reached at suspension time is not saved in the same handle fields */
        if ((hhash->Phase == HAL_HASH_PHASE_PROCESS) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_2))
 c00367c:	68fb      	ldr	r3, [r7, #12]
 c00367e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c003682:	2b02      	cmp	r3, #2
 c003684:	d004      	beq.n	c003690 <HASH_WriteData+0x60>
 c003686:	68fb      	ldr	r3, [r7, #12]
 c003688:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c00368c:	2b04      	cmp	r3, #4
 c00368e:	d10a      	bne.n	c0036a6 <HASH_WriteData+0x76>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashInBuffPtr = (uint8_t *)inputaddr;
 c003690:	693b      	ldr	r3, [r7, #16]
 c003692:	461a      	mov	r2, r3
 c003694:	68fb      	ldr	r3, [r7, #12]
 c003696:	60da      	str	r2, [r3, #12]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashInCount    =  Size - (buffercounter + 4U);
 c003698:	687a      	ldr	r2, [r7, #4]
 c00369a:	697b      	ldr	r3, [r7, #20]
 c00369c:	1ad3      	subs	r3, r2, r3
 c00369e:	1f1a      	subs	r2, r3, #4
 c0036a0:	68fb      	ldr	r3, [r7, #12]
 c0036a2:	621a      	str	r2, [r3, #32]
 c0036a4:	e01e      	b.n	c0036e4 <HASH_WriteData+0xb4>
        }
        else if ((hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_1) || (hhash->Phase == HAL_HASH_PHASE_HMAC_STEP_3))
 c0036a6:	68fb      	ldr	r3, [r7, #12]
 c0036a8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c0036ac:	2b03      	cmp	r3, #3
 c0036ae:	d004      	beq.n	c0036ba <HASH_WriteData+0x8a>
 c0036b0:	68fb      	ldr	r3, [r7, #12]
 c0036b2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c0036b6:	2b05      	cmp	r3, #5
 c0036b8:	d10a      	bne.n	c0036d0 <HASH_WriteData+0xa0>
        {
          /* Save current reading and writing locations of Input and Output buffers */
          hhash->pHashKeyBuffPtr  = (uint8_t *)inputaddr;
 c0036ba:	693b      	ldr	r3, [r7, #16]
 c0036bc:	461a      	mov	r2, r3
 c0036be:	68fb      	ldr	r3, [r7, #12]
 c0036c0:	615a      	str	r2, [r3, #20]
          /* Save the number of bytes that remain to be processed at this point */
          hhash->HashKeyCount  =  Size - (buffercounter + 4U);
 c0036c2:	687a      	ldr	r2, [r7, #4]
 c0036c4:	697b      	ldr	r3, [r7, #20]
 c0036c6:	1ad3      	subs	r3, r2, r3
 c0036c8:	1f1a      	subs	r2, r3, #4
 c0036ca:	68fb      	ldr	r3, [r7, #12]
 c0036cc:	629a      	str	r2, [r3, #40]	; 0x28
 c0036ce:	e009      	b.n	c0036e4 <HASH_WriteData+0xb4>
        }
        else
        {
          /* Unexpected phase: unlock process and report error */
          hhash->State = HAL_HASH_STATE_READY;
 c0036d0:	68fb      	ldr	r3, [r7, #12]
 c0036d2:	2201      	movs	r2, #1
 c0036d4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          __HAL_UNLOCK(hhash);
 c0036d8:	68fb      	ldr	r3, [r7, #12]
 c0036da:	2200      	movs	r2, #0
 c0036dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
          return HAL_ERROR;
 c0036e0:	2301      	movs	r3, #1
 c0036e2:	e00d      	b.n	c003700 <HASH_WriteData+0xd0>
        }

        /* Set the HASH state to Suspended and exit to stop entering data */
        hhash->State = HAL_HASH_STATE_SUSPENDED;
 c0036e4:	68fb      	ldr	r3, [r7, #12]
 c0036e6:	2208      	movs	r2, #8
 c0036e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_OK;
 c0036ec:	2300      	movs	r3, #0
 c0036ee:	e007      	b.n	c003700 <HASH_WriteData+0xd0>
  for (buffercounter = 0U; buffercounter < Size; buffercounter += 4U)
 c0036f0:	697b      	ldr	r3, [r7, #20]
 c0036f2:	3304      	adds	r3, #4
 c0036f4:	617b      	str	r3, [r7, #20]
 c0036f6:	697a      	ldr	r2, [r7, #20]
 c0036f8:	687b      	ldr	r3, [r7, #4]
 c0036fa:	429a      	cmp	r2, r3
 c0036fc:	d3a3      	bcc.n	c003646 <HASH_WriteData+0x16>
      } /* if (__HAL_HASH_GET_FLAG(HASH_FLAG_DINIS))  */
    } /* if ((hhash->SuspendRequest == HAL_HASH_SUSPEND) && ((buffercounter+4) < Size)) */
  }   /* for(buffercounter = 0; buffercounter < Size; buffercounter+=4)                 */

  /* At this point, all the data have been entered to the Peripheral: exit */
  return  HAL_OK;
 c0036fe:	2300      	movs	r3, #0
}
 c003700:	4618      	mov	r0, r3
 c003702:	371c      	adds	r7, #28
 c003704:	46bd      	mov	sp, r7
 c003706:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00370a:	4770      	bx	lr
 c00370c:	520c0400 	.word	0x520c0400

0c003710 <HASH_GetDigest>:
  * @param  pMsgDigest pointer to the computed digest.
  * @param  Size message digest size in bytes.
  * @retval None
  */
static void HASH_GetDigest(uint8_t *pMsgDigest, uint8_t Size)
{
 c003710:	b480      	push	{r7}
 c003712:	b09d      	sub	sp, #116	; 0x74
 c003714:	af00      	add	r7, sp, #0
 c003716:	6078      	str	r0, [r7, #4]
 c003718:	460b      	mov	r3, r1
 c00371a:	70fb      	strb	r3, [r7, #3]
  uint32_t msgdigest = (uint32_t)pMsgDigest;
 c00371c:	687b      	ldr	r3, [r7, #4]
 c00371e:	66fb      	str	r3, [r7, #108]	; 0x6c

  switch (Size)
 c003720:	78fb      	ldrb	r3, [r7, #3]
 c003722:	3b10      	subs	r3, #16
 c003724:	2b10      	cmp	r3, #16
 c003726:	f200 810d 	bhi.w	c003944 <HASH_GetDigest+0x234>
 c00372a:	a201      	add	r2, pc, #4	; (adr r2, c003730 <HASH_GetDigest+0x20>)
 c00372c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c003730:	0c003775 	.word	0x0c003775
 c003734:	0c003945 	.word	0x0c003945
 c003738:	0c003945 	.word	0x0c003945
 c00373c:	0c003945 	.word	0x0c003945
 c003740:	0c0037c1 	.word	0x0c0037c1
 c003744:	0c003945 	.word	0x0c003945
 c003748:	0c003945 	.word	0x0c003945
 c00374c:	0c003945 	.word	0x0c003945
 c003750:	0c003945 	.word	0x0c003945
 c003754:	0c003945 	.word	0x0c003945
 c003758:	0c003945 	.word	0x0c003945
 c00375c:	0c003945 	.word	0x0c003945
 c003760:	0c003821 	.word	0x0c003821
 c003764:	0c003945 	.word	0x0c003945
 c003768:	0c003945 	.word	0x0c003945
 c00376c:	0c003945 	.word	0x0c003945
 c003770:	0c0038a9 	.word	0x0c0038a9
  {
    /* Read the message digest */
    case 16:  /* MD5 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 c003774:	4b77      	ldr	r3, [pc, #476]	; (c003954 <HASH_GetDigest+0x244>)
 c003776:	68da      	ldr	r2, [r3, #12]
 c003778:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00377a:	65fa      	str	r2, [r7, #92]	; 0x5c
  \return               Reversed value
 */
__STATIC_FORCEINLINE uint32_t __REV(uint32_t value)
{
#if (__GNUC__ > 4) || (__GNUC__ == 4 && __GNUC_MINOR__ >= 5)
  return __builtin_bswap32(value);
 c00377c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 c00377e:	ba12      	rev	r2, r2
 c003780:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003784:	3304      	adds	r3, #4
 c003786:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 c003788:	4b72      	ldr	r3, [pc, #456]	; (c003954 <HASH_GetDigest+0x244>)
 c00378a:	691a      	ldr	r2, [r3, #16]
 c00378c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00378e:	663a      	str	r2, [r7, #96]	; 0x60
 c003790:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 c003792:	ba12      	rev	r2, r2
 c003794:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003798:	3304      	adds	r3, #4
 c00379a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 c00379c:	4b6d      	ldr	r3, [pc, #436]	; (c003954 <HASH_GetDigest+0x244>)
 c00379e:	695a      	ldr	r2, [r3, #20]
 c0037a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037a2:	667a      	str	r2, [r7, #100]	; 0x64
 c0037a4:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 c0037a6:	ba12      	rev	r2, r2
 c0037a8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0037aa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037ac:	3304      	adds	r3, #4
 c0037ae:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 c0037b0:	4b68      	ldr	r3, [pc, #416]	; (c003954 <HASH_GetDigest+0x244>)
 c0037b2:	699a      	ldr	r2, [r3, #24]
 c0037b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037b6:	66ba      	str	r2, [r7, #104]	; 0x68
 c0037b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 c0037ba:	ba12      	rev	r2, r2
 c0037bc:	601a      	str	r2, [r3, #0]
      break;
 c0037be:	e0c2      	b.n	c003946 <HASH_GetDigest+0x236>
    case 20:  /* SHA1 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 c0037c0:	4b64      	ldr	r3, [pc, #400]	; (c003954 <HASH_GetDigest+0x244>)
 c0037c2:	68da      	ldr	r2, [r3, #12]
 c0037c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037c6:	64ba      	str	r2, [r7, #72]	; 0x48
 c0037c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0037ca:	ba12      	rev	r2, r2
 c0037cc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0037ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037d0:	3304      	adds	r3, #4
 c0037d2:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 c0037d4:	4b5f      	ldr	r3, [pc, #380]	; (c003954 <HASH_GetDigest+0x244>)
 c0037d6:	691a      	ldr	r2, [r3, #16]
 c0037d8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037da:	64fa      	str	r2, [r7, #76]	; 0x4c
 c0037dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 c0037de:	ba12      	rev	r2, r2
 c0037e0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0037e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037e4:	3304      	adds	r3, #4
 c0037e6:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 c0037e8:	4b5a      	ldr	r3, [pc, #360]	; (c003954 <HASH_GetDigest+0x244>)
 c0037ea:	695a      	ldr	r2, [r3, #20]
 c0037ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037ee:	653a      	str	r2, [r7, #80]	; 0x50
 c0037f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 c0037f2:	ba12      	rev	r2, r2
 c0037f4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0037f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0037f8:	3304      	adds	r3, #4
 c0037fa:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 c0037fc:	4b55      	ldr	r3, [pc, #340]	; (c003954 <HASH_GetDigest+0x244>)
 c0037fe:	699a      	ldr	r2, [r3, #24]
 c003800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003802:	657a      	str	r2, [r7, #84]	; 0x54
 c003804:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 c003806:	ba12      	rev	r2, r2
 c003808:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00380a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00380c:	3304      	adds	r3, #4
 c00380e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 c003810:	4b50      	ldr	r3, [pc, #320]	; (c003954 <HASH_GetDigest+0x244>)
 c003812:	69da      	ldr	r2, [r3, #28]
 c003814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003816:	65ba      	str	r2, [r7, #88]	; 0x58
 c003818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 c00381a:	ba12      	rev	r2, r2
 c00381c:	601a      	str	r2, [r3, #0]
      break;
 c00381e:	e092      	b.n	c003946 <HASH_GetDigest+0x236>
    case 28:  /* SHA224 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 c003820:	4b4c      	ldr	r3, [pc, #304]	; (c003954 <HASH_GetDigest+0x244>)
 c003822:	68da      	ldr	r2, [r3, #12]
 c003824:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003826:	62fa      	str	r2, [r7, #44]	; 0x2c
 c003828:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c00382a:	ba12      	rev	r2, r2
 c00382c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00382e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003830:	3304      	adds	r3, #4
 c003832:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 c003834:	4b47      	ldr	r3, [pc, #284]	; (c003954 <HASH_GetDigest+0x244>)
 c003836:	691a      	ldr	r2, [r3, #16]
 c003838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00383a:	633a      	str	r2, [r7, #48]	; 0x30
 c00383c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c00383e:	ba12      	rev	r2, r2
 c003840:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003842:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003844:	3304      	adds	r3, #4
 c003846:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 c003848:	4b42      	ldr	r3, [pc, #264]	; (c003954 <HASH_GetDigest+0x244>)
 c00384a:	695a      	ldr	r2, [r3, #20]
 c00384c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00384e:	637a      	str	r2, [r7, #52]	; 0x34
 c003850:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 c003852:	ba12      	rev	r2, r2
 c003854:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003856:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003858:	3304      	adds	r3, #4
 c00385a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 c00385c:	4b3d      	ldr	r3, [pc, #244]	; (c003954 <HASH_GetDigest+0x244>)
 c00385e:	699a      	ldr	r2, [r3, #24]
 c003860:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003862:	63ba      	str	r2, [r7, #56]	; 0x38
 c003864:	6bba      	ldr	r2, [r7, #56]	; 0x38
 c003866:	ba12      	rev	r2, r2
 c003868:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00386a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00386c:	3304      	adds	r3, #4
 c00386e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 c003870:	4b38      	ldr	r3, [pc, #224]	; (c003954 <HASH_GetDigest+0x244>)
 c003872:	69da      	ldr	r2, [r3, #28]
 c003874:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003876:	63fa      	str	r2, [r7, #60]	; 0x3c
 c003878:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 c00387a:	ba12      	rev	r2, r2
 c00387c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00387e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003880:	3304      	adds	r3, #4
 c003882:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c003884:	4b34      	ldr	r3, [pc, #208]	; (c003958 <HASH_GetDigest+0x248>)
 c003886:	695a      	ldr	r2, [r3, #20]
 c003888:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00388a:	643a      	str	r2, [r7, #64]	; 0x40
 c00388c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c00388e:	ba12      	rev	r2, r2
 c003890:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003892:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003894:	3304      	adds	r3, #4
 c003896:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c003898:	4b2f      	ldr	r3, [pc, #188]	; (c003958 <HASH_GetDigest+0x248>)
 c00389a:	699a      	ldr	r2, [r3, #24]
 c00389c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00389e:	647a      	str	r2, [r7, #68]	; 0x44
 c0038a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c0038a2:	ba12      	rev	r2, r2
 c0038a4:	601a      	str	r2, [r3, #0]
      break;
 c0038a6:	e04e      	b.n	c003946 <HASH_GetDigest+0x236>
    case 32:   /* SHA256 */
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[0]);
 c0038a8:	4b2a      	ldr	r3, [pc, #168]	; (c003954 <HASH_GetDigest+0x244>)
 c0038aa:	68da      	ldr	r2, [r3, #12]
 c0038ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038ae:	60fa      	str	r2, [r7, #12]
 c0038b0:	68fa      	ldr	r2, [r7, #12]
 c0038b2:	ba12      	rev	r2, r2
 c0038b4:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0038b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038b8:	3304      	adds	r3, #4
 c0038ba:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[1]);
 c0038bc:	4b25      	ldr	r3, [pc, #148]	; (c003954 <HASH_GetDigest+0x244>)
 c0038be:	691a      	ldr	r2, [r3, #16]
 c0038c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038c2:	613a      	str	r2, [r7, #16]
 c0038c4:	693a      	ldr	r2, [r7, #16]
 c0038c6:	ba12      	rev	r2, r2
 c0038c8:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0038ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038cc:	3304      	adds	r3, #4
 c0038ce:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[2]);
 c0038d0:	4b20      	ldr	r3, [pc, #128]	; (c003954 <HASH_GetDigest+0x244>)
 c0038d2:	695a      	ldr	r2, [r3, #20]
 c0038d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038d6:	617a      	str	r2, [r7, #20]
 c0038d8:	697a      	ldr	r2, [r7, #20]
 c0038da:	ba12      	rev	r2, r2
 c0038dc:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0038de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038e0:	3304      	adds	r3, #4
 c0038e2:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[3]);
 c0038e4:	4b1b      	ldr	r3, [pc, #108]	; (c003954 <HASH_GetDigest+0x244>)
 c0038e6:	699a      	ldr	r2, [r3, #24]
 c0038e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038ea:	61ba      	str	r2, [r7, #24]
 c0038ec:	69ba      	ldr	r2, [r7, #24]
 c0038ee:	ba12      	rev	r2, r2
 c0038f0:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c0038f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038f4:	3304      	adds	r3, #4
 c0038f6:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH->HR[4]);
 c0038f8:	4b16      	ldr	r3, [pc, #88]	; (c003954 <HASH_GetDigest+0x244>)
 c0038fa:	69da      	ldr	r2, [r3, #28]
 c0038fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c0038fe:	61fa      	str	r2, [r7, #28]
 c003900:	69fa      	ldr	r2, [r7, #28]
 c003902:	ba12      	rev	r2, r2
 c003904:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c003906:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003908:	3304      	adds	r3, #4
 c00390a:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[5]);
 c00390c:	4b12      	ldr	r3, [pc, #72]	; (c003958 <HASH_GetDigest+0x248>)
 c00390e:	695a      	ldr	r2, [r3, #20]
 c003910:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003912:	623a      	str	r2, [r7, #32]
 c003914:	6a3a      	ldr	r2, [r7, #32]
 c003916:	ba12      	rev	r2, r2
 c003918:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00391a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00391c:	3304      	adds	r3, #4
 c00391e:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[6]);
 c003920:	4b0d      	ldr	r3, [pc, #52]	; (c003958 <HASH_GetDigest+0x248>)
 c003922:	699a      	ldr	r2, [r3, #24]
 c003924:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003926:	627a      	str	r2, [r7, #36]	; 0x24
 c003928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00392a:	ba12      	rev	r2, r2
 c00392c:	601a      	str	r2, [r3, #0]
      msgdigest += 4U;
 c00392e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c003930:	3304      	adds	r3, #4
 c003932:	66fb      	str	r3, [r7, #108]	; 0x6c
      *(uint32_t *)(msgdigest) = __REV(HASH_DIGEST->HR[7]);
 c003934:	4b08      	ldr	r3, [pc, #32]	; (c003958 <HASH_GetDigest+0x248>)
 c003936:	69da      	ldr	r2, [r3, #28]
 c003938:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 c00393a:	62ba      	str	r2, [r7, #40]	; 0x28
 c00393c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 c00393e:	ba12      	rev	r2, r2
 c003940:	601a      	str	r2, [r3, #0]
      break;
 c003942:	e000      	b.n	c003946 <HASH_GetDigest+0x236>
    default:
      break;
 c003944:	bf00      	nop
  }
}
 c003946:	bf00      	nop
 c003948:	3774      	adds	r7, #116	; 0x74
 c00394a:	46bd      	mov	sp, r7
 c00394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003950:	4770      	bx	lr
 c003952:	bf00      	nop
 c003954:	520c0400 	.word	0x520c0400
 c003958:	520c0710 	.word	0x520c0710

0c00395c <HASH_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration.
  * @retval HAL status
  */
static HAL_StatusTypeDef HASH_WaitOnFlagUntilTimeout(HASH_HandleTypeDef *hhash, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Timeout)
{
 c00395c:	b580      	push	{r7, lr}
 c00395e:	b086      	sub	sp, #24
 c003960:	af00      	add	r7, sp, #0
 c003962:	60f8      	str	r0, [r7, #12]
 c003964:	60b9      	str	r1, [r7, #8]
 c003966:	603b      	str	r3, [r7, #0]
 c003968:	4613      	mov	r3, r2
 c00396a:	71fb      	strb	r3, [r7, #7]
  uint32_t tickstart = HAL_GetTick();
 c00396c:	f7fe fdea 	bl	c002544 <HAL_GetTick>
 c003970:	6178      	str	r0, [r7, #20]

  /* Wait until flag is set */
  if (Status == RESET)
 c003972:	79fb      	ldrb	r3, [r7, #7]
 c003974:	2b00      	cmp	r3, #0
 c003976:	d155      	bne.n	c003a24 <HASH_WaitOnFlagUntilTimeout+0xc8>
  {
    while (__HAL_HASH_GET_FLAG(Flag) == RESET)
 c003978:	e01c      	b.n	c0039b4 <HASH_WaitOnFlagUntilTimeout+0x58>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 c00397a:	683b      	ldr	r3, [r7, #0]
 c00397c:	f1b3 3fff 	cmp.w	r3, #4294967295
 c003980:	d018      	beq.n	c0039b4 <HASH_WaitOnFlagUntilTimeout+0x58>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c003982:	f7fe fddf 	bl	c002544 <HAL_GetTick>
 c003986:	4602      	mov	r2, r0
 c003988:	697b      	ldr	r3, [r7, #20]
 c00398a:	1ad3      	subs	r3, r2, r3
 c00398c:	683a      	ldr	r2, [r7, #0]
 c00398e:	429a      	cmp	r2, r3
 c003990:	d302      	bcc.n	c003998 <HASH_WaitOnFlagUntilTimeout+0x3c>
 c003992:	683b      	ldr	r3, [r7, #0]
 c003994:	2b00      	cmp	r3, #0
 c003996:	d10d      	bne.n	c0039b4 <HASH_WaitOnFlagUntilTimeout+0x58>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 c003998:	68fb      	ldr	r3, [r7, #12]
 c00399a:	2201      	movs	r2, #1
 c00399c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 c0039a0:	68fb      	ldr	r3, [r7, #12]
 c0039a2:	2203      	movs	r2, #3
 c0039a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 c0039a8:	68fb      	ldr	r3, [r7, #12]
 c0039aa:	2200      	movs	r2, #0
 c0039ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 c0039b0:	2303      	movs	r3, #3
 c0039b2:	e052      	b.n	c003a5a <HASH_WaitOnFlagUntilTimeout+0xfe>
    while (__HAL_HASH_GET_FLAG(Flag) == RESET)
 c0039b4:	68bb      	ldr	r3, [r7, #8]
 c0039b6:	2b08      	cmp	r3, #8
 c0039b8:	d90a      	bls.n	c0039d0 <HASH_WaitOnFlagUntilTimeout+0x74>
 c0039ba:	4b2a      	ldr	r3, [pc, #168]	; (c003a64 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c0039bc:	681a      	ldr	r2, [r3, #0]
 c0039be:	68bb      	ldr	r3, [r7, #8]
 c0039c0:	4013      	ands	r3, r2
 c0039c2:	68ba      	ldr	r2, [r7, #8]
 c0039c4:	429a      	cmp	r2, r3
 c0039c6:	bf14      	ite	ne
 c0039c8:	2301      	movne	r3, #1
 c0039ca:	2300      	moveq	r3, #0
 c0039cc:	b2db      	uxtb	r3, r3
 c0039ce:	e009      	b.n	c0039e4 <HASH_WaitOnFlagUntilTimeout+0x88>
 c0039d0:	4b24      	ldr	r3, [pc, #144]	; (c003a64 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c0039d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0039d4:	68bb      	ldr	r3, [r7, #8]
 c0039d6:	4013      	ands	r3, r2
 c0039d8:	68ba      	ldr	r2, [r7, #8]
 c0039da:	429a      	cmp	r2, r3
 c0039dc:	bf14      	ite	ne
 c0039de:	2301      	movne	r3, #1
 c0039e0:	2300      	moveq	r3, #0
 c0039e2:	b2db      	uxtb	r3, r3
 c0039e4:	2b00      	cmp	r3, #0
 c0039e6:	d1c8      	bne.n	c00397a <HASH_WaitOnFlagUntilTimeout+0x1e>
 c0039e8:	e036      	b.n	c003a58 <HASH_WaitOnFlagUntilTimeout+0xfc>
  else
  {
    while (__HAL_HASH_GET_FLAG(Flag) != RESET)
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 c0039ea:	683b      	ldr	r3, [r7, #0]
 c0039ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0039f0:	d018      	beq.n	c003a24 <HASH_WaitOnFlagUntilTimeout+0xc8>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 c0039f2:	f7fe fda7 	bl	c002544 <HAL_GetTick>
 c0039f6:	4602      	mov	r2, r0
 c0039f8:	697b      	ldr	r3, [r7, #20]
 c0039fa:	1ad3      	subs	r3, r2, r3
 c0039fc:	683a      	ldr	r2, [r7, #0]
 c0039fe:	429a      	cmp	r2, r3
 c003a00:	d302      	bcc.n	c003a08 <HASH_WaitOnFlagUntilTimeout+0xac>
 c003a02:	683b      	ldr	r3, [r7, #0]
 c003a04:	2b00      	cmp	r3, #0
 c003a06:	d10d      	bne.n	c003a24 <HASH_WaitOnFlagUntilTimeout+0xc8>
        {
          /* Set State to Ready to be able to restart later on */
          hhash->State  = HAL_HASH_STATE_READY;
 c003a08:	68fb      	ldr	r3, [r7, #12]
 c003a0a:	2201      	movs	r2, #1
 c003a0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
          /* Store time out issue in handle status */
          hhash->Status = HAL_TIMEOUT;
 c003a10:	68fb      	ldr	r3, [r7, #12]
 c003a12:	2203      	movs	r2, #3
 c003a14:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

          /* Process Unlocked */
          __HAL_UNLOCK(hhash);
 c003a18:	68fb      	ldr	r3, [r7, #12]
 c003a1a:	2200      	movs	r2, #0
 c003a1c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          return HAL_TIMEOUT;
 c003a20:	2303      	movs	r3, #3
 c003a22:	e01a      	b.n	c003a5a <HASH_WaitOnFlagUntilTimeout+0xfe>
    while (__HAL_HASH_GET_FLAG(Flag) != RESET)
 c003a24:	68bb      	ldr	r3, [r7, #8]
 c003a26:	2b08      	cmp	r3, #8
 c003a28:	d90a      	bls.n	c003a40 <HASH_WaitOnFlagUntilTimeout+0xe4>
 c003a2a:	4b0e      	ldr	r3, [pc, #56]	; (c003a64 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c003a2c:	681a      	ldr	r2, [r3, #0]
 c003a2e:	68bb      	ldr	r3, [r7, #8]
 c003a30:	4013      	ands	r3, r2
 c003a32:	68ba      	ldr	r2, [r7, #8]
 c003a34:	429a      	cmp	r2, r3
 c003a36:	bf0c      	ite	eq
 c003a38:	2301      	moveq	r3, #1
 c003a3a:	2300      	movne	r3, #0
 c003a3c:	b2db      	uxtb	r3, r3
 c003a3e:	e009      	b.n	c003a54 <HASH_WaitOnFlagUntilTimeout+0xf8>
 c003a40:	4b08      	ldr	r3, [pc, #32]	; (c003a64 <HASH_WaitOnFlagUntilTimeout+0x108>)
 c003a42:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c003a44:	68bb      	ldr	r3, [r7, #8]
 c003a46:	4013      	ands	r3, r2
 c003a48:	68ba      	ldr	r2, [r7, #8]
 c003a4a:	429a      	cmp	r2, r3
 c003a4c:	bf0c      	ite	eq
 c003a4e:	2301      	moveq	r3, #1
 c003a50:	2300      	movne	r3, #0
 c003a52:	b2db      	uxtb	r3, r3
 c003a54:	2b00      	cmp	r3, #0
 c003a56:	d1c8      	bne.n	c0039ea <HASH_WaitOnFlagUntilTimeout+0x8e>
        }
      }
    }
  }
  return HAL_OK;
 c003a58:	2300      	movs	r3, #0
}
 c003a5a:	4618      	mov	r0, r3
 c003a5c:	3718      	adds	r7, #24
 c003a5e:	46bd      	mov	sp, r7
 c003a60:	bd80      	pop	{r7, pc}
 c003a62:	bf00      	nop
 c003a64:	520c0400 	.word	0x520c0400

0c003a68 <HASH_Start>:
  * @param  Algorithm HASH algorithm.
  * @retval HAL status
  */
HAL_StatusTypeDef HASH_Start(HASH_HandleTypeDef *hhash, uint8_t *pInBuffer, uint32_t Size, uint8_t *pOutBuffer,
                             uint32_t Timeout, uint32_t Algorithm)
{
 c003a68:	b580      	push	{r7, lr}
 c003a6a:	b088      	sub	sp, #32
 c003a6c:	af00      	add	r7, sp, #0
 c003a6e:	60f8      	str	r0, [r7, #12]
 c003a70:	60b9      	str	r1, [r7, #8]
 c003a72:	607a      	str	r2, [r7, #4]
 c003a74:	603b      	str	r3, [r7, #0]
  uint8_t *pInBuffer_tmp;  /* input data address, input parameter of HASH_WriteData()         */
  uint32_t Size_tmp; /* input data size (in bytes), input parameter of HASH_WriteData() */
  HAL_HASH_StateTypeDef State_tmp = hhash->State;
 c003a76:	68fb      	ldr	r3, [r7, #12]
 c003a78:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c003a7c:	75fb      	strb	r3, [r7, #23]


  /* Initiate HASH processing in case of start or resumption */
  if ((State_tmp == HAL_HASH_STATE_READY) || (State_tmp == HAL_HASH_STATE_SUSPENDED))
 c003a7e:	7dfb      	ldrb	r3, [r7, #23]
 c003a80:	2b01      	cmp	r3, #1
 c003a82:	d003      	beq.n	c003a8c <HASH_Start+0x24>
 c003a84:	7dfb      	ldrb	r3, [r7, #23]
 c003a86:	2b08      	cmp	r3, #8
 c003a88:	f040 80c7 	bne.w	c003c1a <HASH_Start+0x1b2>
  {
    /* Check input parameters */
    if ((pInBuffer == NULL) || (pOutBuffer == NULL))
 c003a8c:	68bb      	ldr	r3, [r7, #8]
 c003a8e:	2b00      	cmp	r3, #0
 c003a90:	d002      	beq.n	c003a98 <HASH_Start+0x30>
 c003a92:	683b      	ldr	r3, [r7, #0]
 c003a94:	2b00      	cmp	r3, #0
 c003a96:	d105      	bne.n	c003aa4 <HASH_Start+0x3c>
    {
      hhash->State = HAL_HASH_STATE_READY;
 c003a98:	68fb      	ldr	r3, [r7, #12]
 c003a9a:	2201      	movs	r2, #1
 c003a9c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      return  HAL_ERROR;
 c003aa0:	2301      	movs	r3, #1
 c003aa2:	e0bb      	b.n	c003c1c <HASH_Start+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hhash);
 c003aa4:	68fb      	ldr	r3, [r7, #12]
 c003aa6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 c003aaa:	2b01      	cmp	r3, #1
 c003aac:	d101      	bne.n	c003ab2 <HASH_Start+0x4a>
 c003aae:	2302      	movs	r3, #2
 c003ab0:	e0b4      	b.n	c003c1c <HASH_Start+0x1b4>
 c003ab2:	68fb      	ldr	r3, [r7, #12]
 c003ab4:	2201      	movs	r2, #1
 c003ab6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Check if initialization phase has not been already performed */
    if (hhash->Phase == HAL_HASH_PHASE_READY)
 c003aba:	68fb      	ldr	r3, [r7, #12]
 c003abc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c003ac0:	2b01      	cmp	r3, #1
 c003ac2:	d123      	bne.n	c003b0c <HASH_Start+0xa4>
    {
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 c003ac4:	68fb      	ldr	r3, [r7, #12]
 c003ac6:	2202      	movs	r2, #2
 c003ac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Select the HASH algorithm, clear HMAC mode and long key selection bit, reset the HASH processor core */
      MODIFY_REG(HASH->CR, HASH_CR_LKEY | HASH_CR_ALGO | HASH_CR_MODE | HASH_CR_INIT, Algorithm | HASH_CR_INIT);
 c003acc:	4b55      	ldr	r3, [pc, #340]	; (c003c24 <HASH_Start+0x1bc>)
 c003ace:	681b      	ldr	r3, [r3, #0]
 c003ad0:	f423 23a0 	bic.w	r3, r3, #327680	; 0x50000
 c003ad4:	f023 03c4 	bic.w	r3, r3, #196	; 0xc4
 c003ad8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c003ada:	4313      	orrs	r3, r2
 c003adc:	4a51      	ldr	r2, [pc, #324]	; (c003c24 <HASH_Start+0x1bc>)
 c003ade:	f043 0304 	orr.w	r3, r3, #4
 c003ae2:	6013      	str	r3, [r2, #0]

      /* Configure the number of valid bits in last word of the message */
      __HAL_HASH_SET_NBVALIDBITS(Size);
 c003ae4:	4b4f      	ldr	r3, [pc, #316]	; (c003c24 <HASH_Start+0x1bc>)
 c003ae6:	689b      	ldr	r3, [r3, #8]
 c003ae8:	f023 021f 	bic.w	r2, r3, #31
 c003aec:	687b      	ldr	r3, [r7, #4]
 c003aee:	f003 0303 	and.w	r3, r3, #3
 c003af2:	00db      	lsls	r3, r3, #3
 c003af4:	494b      	ldr	r1, [pc, #300]	; (c003c24 <HASH_Start+0x1bc>)
 c003af6:	4313      	orrs	r3, r2
 c003af8:	608b      	str	r3, [r1, #8]

      /* pInBuffer_tmp and Size_tmp are initialized to be used afterwards as
      input parameters of HASH_WriteData() */
      pInBuffer_tmp = pInBuffer;   /* pInBuffer_tmp is set to the input data address */
 c003afa:	68bb      	ldr	r3, [r7, #8]
 c003afc:	61fb      	str	r3, [r7, #28]
      Size_tmp = Size;             /* Size_tmp contains the input data size in bytes */
 c003afe:	687b      	ldr	r3, [r7, #4]
 c003b00:	61bb      	str	r3, [r7, #24]

      /* Set the phase */
      hhash->Phase = HAL_HASH_PHASE_PROCESS;
 c003b02:	68fb      	ldr	r3, [r7, #12]
 c003b04:	2202      	movs	r2, #2
 c003b06:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
 c003b0a:	e02f      	b.n	c003b6c <HASH_Start+0x104>
    }
    else if (hhash->Phase == HAL_HASH_PHASE_PROCESS)
 c003b0c:	68fb      	ldr	r3, [r7, #12]
 c003b0e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 c003b12:	2b02      	cmp	r3, #2
 c003b14:	d120      	bne.n	c003b58 <HASH_Start+0xf0>
    {
      /* if the Peripheral has already been initialized, two cases are possible */

      /* Process resumption time ... */
      if (hhash->State == HAL_HASH_STATE_SUSPENDED)
 c003b16:	68fb      	ldr	r3, [r7, #12]
 c003b18:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c003b1c:	b2db      	uxtb	r3, r3
 c003b1e:	2b08      	cmp	r3, #8
 c003b20:	d106      	bne.n	c003b30 <HASH_Start+0xc8>
      {
        /* Since this is resumption, pInBuffer_tmp and Size_tmp are not set
        to the API input parameters but to those saved beforehand by HASH_WriteData()
        when the processing was suspended */
        pInBuffer_tmp = hhash->pHashInBuffPtr;
 c003b22:	68fb      	ldr	r3, [r7, #12]
 c003b24:	68db      	ldr	r3, [r3, #12]
 c003b26:	61fb      	str	r3, [r7, #28]
        Size_tmp = hhash->HashInCount;
 c003b28:	68fb      	ldr	r3, [r7, #12]
 c003b2a:	6a1b      	ldr	r3, [r3, #32]
 c003b2c:	61bb      	str	r3, [r7, #24]
 c003b2e:	e00e      	b.n	c003b4e <HASH_Start+0xe6>
      /* ... or multi-buffer HASH processing end */
      else
      {
        /* pInBuffer_tmp and Size_tmp are initialized to be used afterwards as
        input parameters of HASH_WriteData() */
        pInBuffer_tmp = pInBuffer;
 c003b30:	68bb      	ldr	r3, [r7, #8]
 c003b32:	61fb      	str	r3, [r7, #28]
        Size_tmp = Size;
 c003b34:	687b      	ldr	r3, [r7, #4]
 c003b36:	61bb      	str	r3, [r7, #24]
        /* Configure the number of valid bits in last word of the message */
        __HAL_HASH_SET_NBVALIDBITS(Size);
 c003b38:	4b3a      	ldr	r3, [pc, #232]	; (c003c24 <HASH_Start+0x1bc>)
 c003b3a:	689b      	ldr	r3, [r3, #8]
 c003b3c:	f023 021f 	bic.w	r2, r3, #31
 c003b40:	687b      	ldr	r3, [r7, #4]
 c003b42:	f003 0303 	and.w	r3, r3, #3
 c003b46:	00db      	lsls	r3, r3, #3
 c003b48:	4936      	ldr	r1, [pc, #216]	; (c003c24 <HASH_Start+0x1bc>)
 c003b4a:	4313      	orrs	r3, r2
 c003b4c:	608b      	str	r3, [r1, #8]
      }
      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_BUSY;
 c003b4e:	68fb      	ldr	r3, [r7, #12]
 c003b50:	2202      	movs	r2, #2
 c003b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 c003b56:	e009      	b.n	c003b6c <HASH_Start+0x104>
    }
    else
    {
      /* Phase error */
      hhash->State = HAL_HASH_STATE_READY;
 c003b58:	68fb      	ldr	r3, [r7, #12]
 c003b5a:	2201      	movs	r2, #1
 c003b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hhash);
 c003b60:	68fb      	ldr	r3, [r7, #12]
 c003b62:	2200      	movs	r2, #0
 c003b64:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Return function status */
      return HAL_ERROR;
 c003b68:	2301      	movs	r3, #1
 c003b6a:	e057      	b.n	c003c1c <HASH_Start+0x1b4>
    }


    /* Write input buffer in Data register */
    hhash->Status = HASH_WriteData(hhash, pInBuffer_tmp, Size_tmp);
 c003b6c:	69ba      	ldr	r2, [r7, #24]
 c003b6e:	69f9      	ldr	r1, [r7, #28]
 c003b70:	68f8      	ldr	r0, [r7, #12]
 c003b72:	f7ff fd5d 	bl	c003630 <HASH_WriteData>
 c003b76:	4603      	mov	r3, r0
 c003b78:	461a      	mov	r2, r3
 c003b7a:	68fb      	ldr	r3, [r7, #12]
 c003b7c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (hhash->Status != HAL_OK)
 c003b80:	68fb      	ldr	r3, [r7, #12]
 c003b82:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c003b86:	2b00      	cmp	r3, #0
 c003b88:	d003      	beq.n	c003b92 <HASH_Start+0x12a>
    {
      return hhash->Status;
 c003b8a:	68fb      	ldr	r3, [r7, #12]
 c003b8c:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 c003b90:	e044      	b.n	c003c1c <HASH_Start+0x1b4>
    }

    /* If the process has not been suspended, carry on to digest calculation */
    if (hhash->State != HAL_HASH_STATE_SUSPENDED)
 c003b92:	68fb      	ldr	r3, [r7, #12]
 c003b94:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 c003b98:	b2db      	uxtb	r3, r3
 c003b9a:	2b08      	cmp	r3, #8
 c003b9c:	d037      	beq.n	c003c0e <HASH_Start+0x1a6>
    {
      /* Start the Digest calculation */
      __HAL_HASH_START_DIGEST();
 c003b9e:	4b21      	ldr	r3, [pc, #132]	; (c003c24 <HASH_Start+0x1bc>)
 c003ba0:	689b      	ldr	r3, [r3, #8]
 c003ba2:	4a20      	ldr	r2, [pc, #128]	; (c003c24 <HASH_Start+0x1bc>)
 c003ba4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003ba8:	6093      	str	r3, [r2, #8]

      /* Wait for DCIS flag to be set */
      if (HASH_WaitOnFlagUntilTimeout(hhash, HASH_FLAG_DCIS, RESET, Timeout) != HAL_OK)
 c003baa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c003bac:	2200      	movs	r2, #0
 c003bae:	2102      	movs	r1, #2
 c003bb0:	68f8      	ldr	r0, [r7, #12]
 c003bb2:	f7ff fed3 	bl	c00395c <HASH_WaitOnFlagUntilTimeout>
 c003bb6:	4603      	mov	r3, r0
 c003bb8:	2b00      	cmp	r3, #0
 c003bba:	d001      	beq.n	c003bc0 <HASH_Start+0x158>
      {
        return HAL_TIMEOUT;
 c003bbc:	2303      	movs	r3, #3
 c003bbe:	e02d      	b.n	c003c1c <HASH_Start+0x1b4>
      }

      /* Read the message digest */
      HASH_GetDigest(pOutBuffer, HASH_DIGEST_LENGTH());
 c003bc0:	4b18      	ldr	r3, [pc, #96]	; (c003c24 <HASH_Start+0x1bc>)
 c003bc2:	681a      	ldr	r2, [r3, #0]
 c003bc4:	4b18      	ldr	r3, [pc, #96]	; (c003c28 <HASH_Start+0x1c0>)
 c003bc6:	4013      	ands	r3, r2
 c003bc8:	2b00      	cmp	r3, #0
 c003bca:	d013      	beq.n	c003bf4 <HASH_Start+0x18c>
 c003bcc:	4b15      	ldr	r3, [pc, #84]	; (c003c24 <HASH_Start+0x1bc>)
 c003bce:	681a      	ldr	r2, [r3, #0]
 c003bd0:	4b15      	ldr	r3, [pc, #84]	; (c003c28 <HASH_Start+0x1c0>)
 c003bd2:	4013      	ands	r3, r2
 c003bd4:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 c003bd8:	d00a      	beq.n	c003bf0 <HASH_Start+0x188>
 c003bda:	4b12      	ldr	r3, [pc, #72]	; (c003c24 <HASH_Start+0x1bc>)
 c003bdc:	681a      	ldr	r2, [r3, #0]
 c003bde:	4b12      	ldr	r3, [pc, #72]	; (c003c28 <HASH_Start+0x1c0>)
 c003be0:	4013      	ands	r3, r2
 c003be2:	4a11      	ldr	r2, [pc, #68]	; (c003c28 <HASH_Start+0x1c0>)
 c003be4:	4293      	cmp	r3, r2
 c003be6:	d101      	bne.n	c003bec <HASH_Start+0x184>
 c003be8:	2320      	movs	r3, #32
 c003bea:	e004      	b.n	c003bf6 <HASH_Start+0x18e>
 c003bec:	2310      	movs	r3, #16
 c003bee:	e002      	b.n	c003bf6 <HASH_Start+0x18e>
 c003bf0:	231c      	movs	r3, #28
 c003bf2:	e000      	b.n	c003bf6 <HASH_Start+0x18e>
 c003bf4:	2314      	movs	r3, #20
 c003bf6:	4619      	mov	r1, r3
 c003bf8:	6838      	ldr	r0, [r7, #0]
 c003bfa:	f7ff fd89 	bl	c003710 <HASH_GetDigest>

      /* Change the HASH state */
      hhash->State = HAL_HASH_STATE_READY;
 c003bfe:	68fb      	ldr	r3, [r7, #12]
 c003c00:	2201      	movs	r2, #1
 c003c02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Reset HASH state machine */
      hhash->Phase = HAL_HASH_PHASE_READY;
 c003c06:	68fb      	ldr	r3, [r7, #12]
 c003c08:	2201      	movs	r2, #1
 c003c0a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    }

    /* Process Unlocked */
    __HAL_UNLOCK(hhash);
 c003c0e:	68fb      	ldr	r3, [r7, #12]
 c003c10:	2200      	movs	r2, #0
 c003c12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Return function status */
    return HAL_OK;
 c003c16:	2300      	movs	r3, #0
 c003c18:	e000      	b.n	c003c1c <HASH_Start+0x1b4>

  }
  else
  {
    return HAL_BUSY;
 c003c1a:	2302      	movs	r3, #2
  }
}
 c003c1c:	4618      	mov	r0, r3
 c003c1e:	3720      	adds	r7, #32
 c003c20:	46bd      	mov	sp, r7
 c003c22:	bd80      	pop	{r7, pc}
 c003c24:	520c0400 	.word	0x520c0400
 c003c28:	00040080 	.word	0x00040080

0c003c2c <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c003c2c:	b480      	push	{r7}
 c003c2e:	b085      	sub	sp, #20
 c003c30:	af00      	add	r7, sp, #0
 c003c32:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c003c34:	2300      	movs	r3, #0
 c003c36:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c003c38:	4b0b      	ldr	r3, [pc, #44]	; (c003c68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c003c3a:	681b      	ldr	r3, [r3, #0]
 c003c3c:	f003 0301 	and.w	r3, r3, #1
 c003c40:	2b00      	cmp	r3, #0
 c003c42:	d002      	beq.n	c003c4a <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c003c44:	2301      	movs	r3, #1
 c003c46:	73fb      	strb	r3, [r7, #15]
 c003c48:	e007      	b.n	c003c5a <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c003c4a:	4b07      	ldr	r3, [pc, #28]	; (c003c68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c003c4c:	681b      	ldr	r3, [r3, #0]
 c003c4e:	f023 0204 	bic.w	r2, r3, #4
 c003c52:	4905      	ldr	r1, [pc, #20]	; (c003c68 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c003c54:	687b      	ldr	r3, [r7, #4]
 c003c56:	4313      	orrs	r3, r2
 c003c58:	600b      	str	r3, [r1, #0]
  }

  return status;
 c003c5a:	7bfb      	ldrb	r3, [r7, #15]
}
 c003c5c:	4618      	mov	r0, r3
 c003c5e:	3714      	adds	r7, #20
 c003c60:	46bd      	mov	sp, r7
 c003c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003c66:	4770      	bx	lr
 c003c68:	50030400 	.word	0x50030400

0c003c6c <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c003c6c:	b480      	push	{r7}
 c003c6e:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c003c70:	4b05      	ldr	r3, [pc, #20]	; (c003c88 <HAL_ICACHE_Enable+0x1c>)
 c003c72:	681b      	ldr	r3, [r3, #0]
 c003c74:	4a04      	ldr	r2, [pc, #16]	; (c003c88 <HAL_ICACHE_Enable+0x1c>)
 c003c76:	f043 0301 	orr.w	r3, r3, #1
 c003c7a:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c003c7c:	2300      	movs	r3, #0
}
 c003c7e:	4618      	mov	r0, r3
 c003c80:	46bd      	mov	sp, r7
 c003c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003c86:	4770      	bx	lr
 c003c88:	50030400 	.word	0x50030400

0c003c8c <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c003c8c:	b480      	push	{r7}
 c003c8e:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c003c90:	4b04      	ldr	r3, [pc, #16]	; (c003ca4 <HAL_PWREx_GetVoltageRange+0x18>)
 c003c92:	681b      	ldr	r3, [r3, #0]
 c003c94:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c003c98:	4618      	mov	r0, r3
 c003c9a:	46bd      	mov	sp, r7
 c003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003ca0:	4770      	bx	lr
 c003ca2:	bf00      	nop
 c003ca4:	50007000 	.word	0x50007000

0c003ca8 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c003ca8:	b580      	push	{r7, lr}
 c003caa:	b084      	sub	sp, #16
 c003cac:	af00      	add	r7, sp, #0
 c003cae:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c003cb0:	4b27      	ldr	r3, [pc, #156]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003cb2:	681b      	ldr	r3, [r3, #0]
 c003cb4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c003cb8:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c003cba:	f000 f871 	bl	c003da0 <HAL_PWREx_SMPS_GetEffectiveMode>
 c003cbe:	4603      	mov	r3, r0
 c003cc0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c003cc4:	d101      	bne.n	c003cca <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c003cc6:	2301      	movs	r3, #1
 c003cc8:	e03e      	b.n	c003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c003cca:	4b21      	ldr	r3, [pc, #132]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003ccc:	68db      	ldr	r3, [r3, #12]
 c003cce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c003cd2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c003cd6:	d101      	bne.n	c003cdc <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c003cd8:	2301      	movs	r3, #1
 c003cda:	e035      	b.n	c003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c003cdc:	68ba      	ldr	r2, [r7, #8]
 c003cde:	687b      	ldr	r3, [r7, #4]
 c003ce0:	429a      	cmp	r2, r3
 c003ce2:	d101      	bne.n	c003ce8 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c003ce4:	2300      	movs	r3, #0
 c003ce6:	e02f      	b.n	c003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c003ce8:	4b19      	ldr	r3, [pc, #100]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003cea:	681b      	ldr	r3, [r3, #0]
 c003cec:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c003cf0:	4917      	ldr	r1, [pc, #92]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003cf2:	687b      	ldr	r3, [r7, #4]
 c003cf4:	4313      	orrs	r3, r2
 c003cf6:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c003cf8:	4b16      	ldr	r3, [pc, #88]	; (c003d54 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c003cfa:	681b      	ldr	r3, [r3, #0]
 c003cfc:	095b      	lsrs	r3, r3, #5
 c003cfe:	4a16      	ldr	r2, [pc, #88]	; (c003d58 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c003d00:	fba2 2303 	umull	r2, r3, r2, r3
 c003d04:	09db      	lsrs	r3, r3, #7
 c003d06:	2232      	movs	r2, #50	; 0x32
 c003d08:	fb02 f303 	mul.w	r3, r2, r3
 c003d0c:	4a13      	ldr	r2, [pc, #76]	; (c003d5c <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c003d0e:	fba2 2303 	umull	r2, r3, r2, r3
 c003d12:	08db      	lsrs	r3, r3, #3
 c003d14:	3301      	adds	r3, #1
 c003d16:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c003d18:	e002      	b.n	c003d20 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c003d1a:	68fb      	ldr	r3, [r7, #12]
 c003d1c:	3b01      	subs	r3, #1
 c003d1e:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c003d20:	4b0b      	ldr	r3, [pc, #44]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003d22:	695b      	ldr	r3, [r3, #20]
 c003d24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003d28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003d2c:	d102      	bne.n	c003d34 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c003d2e:	68fb      	ldr	r3, [r7, #12]
 c003d30:	2b00      	cmp	r3, #0
 c003d32:	d1f2      	bne.n	c003d1a <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c003d34:	4b06      	ldr	r3, [pc, #24]	; (c003d50 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003d36:	695b      	ldr	r3, [r3, #20]
 c003d38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003d3c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003d40:	d101      	bne.n	c003d46 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c003d42:	2303      	movs	r3, #3
 c003d44:	e000      	b.n	c003d48 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c003d46:	2300      	movs	r3, #0
}
 c003d48:	4618      	mov	r0, r3
 c003d4a:	3710      	adds	r7, #16
 c003d4c:	46bd      	mov	sp, r7
 c003d4e:	bd80      	pop	{r7, pc}
 c003d50:	50007000 	.word	0x50007000
 c003d54:	300000f8 	.word	0x300000f8
 c003d58:	0a7c5ac5 	.word	0x0a7c5ac5
 c003d5c:	cccccccd 	.word	0xcccccccd

0c003d60 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c003d60:	b480      	push	{r7}
 c003d62:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c003d64:	4b05      	ldr	r3, [pc, #20]	; (c003d7c <HAL_PWREx_EnableVddIO2+0x1c>)
 c003d66:	685b      	ldr	r3, [r3, #4]
 c003d68:	4a04      	ldr	r2, [pc, #16]	; (c003d7c <HAL_PWREx_EnableVddIO2+0x1c>)
 c003d6a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c003d6e:	6053      	str	r3, [r2, #4]
}
 c003d70:	bf00      	nop
 c003d72:	46bd      	mov	sp, r7
 c003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d78:	4770      	bx	lr
 c003d7a:	bf00      	nop
 c003d7c:	50007000 	.word	0x50007000

0c003d80 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c003d80:	b480      	push	{r7}
 c003d82:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c003d84:	4b05      	ldr	r3, [pc, #20]	; (c003d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c003d86:	689b      	ldr	r3, [r3, #8]
 c003d88:	4a04      	ldr	r2, [pc, #16]	; (c003d9c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c003d8a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c003d8e:	6093      	str	r3, [r2, #8]
}
 c003d90:	bf00      	nop
 c003d92:	46bd      	mov	sp, r7
 c003d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d98:	4770      	bx	lr
 c003d9a:	bf00      	nop
 c003d9c:	50007000 	.word	0x50007000

0c003da0 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c003da0:	b480      	push	{r7}
 c003da2:	b083      	sub	sp, #12
 c003da4:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c003da6:	4b0f      	ldr	r3, [pc, #60]	; (c003de4 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c003da8:	691b      	ldr	r3, [r3, #16]
 c003daa:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c003dac:	683b      	ldr	r3, [r7, #0]
 c003dae:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c003db2:	2b00      	cmp	r3, #0
 c003db4:	d003      	beq.n	c003dbe <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c003db6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003dba:	607b      	str	r3, [r7, #4]
 c003dbc:	e00a      	b.n	c003dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c003dbe:	683b      	ldr	r3, [r7, #0]
 c003dc0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c003dc4:	2b00      	cmp	r3, #0
 c003dc6:	d103      	bne.n	c003dd0 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c003dc8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003dcc:	607b      	str	r3, [r7, #4]
 c003dce:	e001      	b.n	c003dd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c003dd0:	2300      	movs	r3, #0
 c003dd2:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c003dd4:	687b      	ldr	r3, [r7, #4]
}
 c003dd6:	4618      	mov	r0, r3
 c003dd8:	370c      	adds	r7, #12
 c003dda:	46bd      	mov	sp, r7
 c003ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003de0:	4770      	bx	lr
 c003de2:	bf00      	nop
 c003de4:	50007000 	.word	0x50007000

0c003de8 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c003de8:	b580      	push	{r7, lr}
 c003dea:	b088      	sub	sp, #32
 c003dec:	af00      	add	r7, sp, #0
 c003dee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c003df0:	687b      	ldr	r3, [r7, #4]
 c003df2:	2b00      	cmp	r3, #0
 c003df4:	d102      	bne.n	c003dfc <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c003df6:	2301      	movs	r3, #1
 c003df8:	f000 bcc2 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003dfc:	4b99      	ldr	r3, [pc, #612]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003dfe:	689b      	ldr	r3, [r3, #8]
 c003e00:	f003 030c 	and.w	r3, r3, #12
 c003e04:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003e06:	4b97      	ldr	r3, [pc, #604]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e08:	68db      	ldr	r3, [r3, #12]
 c003e0a:	f003 0303 	and.w	r3, r3, #3
 c003e0e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c003e10:	687b      	ldr	r3, [r7, #4]
 c003e12:	681b      	ldr	r3, [r3, #0]
 c003e14:	f003 0310 	and.w	r3, r3, #16
 c003e18:	2b00      	cmp	r3, #0
 c003e1a:	f000 80e9 	beq.w	c003ff0 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003e1e:	69bb      	ldr	r3, [r7, #24]
 c003e20:	2b00      	cmp	r3, #0
 c003e22:	d006      	beq.n	c003e32 <HAL_RCC_OscConfig+0x4a>
 c003e24:	69bb      	ldr	r3, [r7, #24]
 c003e26:	2b0c      	cmp	r3, #12
 c003e28:	f040 8083 	bne.w	c003f32 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c003e2c:	697b      	ldr	r3, [r7, #20]
 c003e2e:	2b01      	cmp	r3, #1
 c003e30:	d17f      	bne.n	c003f32 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c003e32:	4b8c      	ldr	r3, [pc, #560]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e34:	681b      	ldr	r3, [r3, #0]
 c003e36:	f003 0302 	and.w	r3, r3, #2
 c003e3a:	2b00      	cmp	r3, #0
 c003e3c:	d006      	beq.n	c003e4c <HAL_RCC_OscConfig+0x64>
 c003e3e:	687b      	ldr	r3, [r7, #4]
 c003e40:	69db      	ldr	r3, [r3, #28]
 c003e42:	2b00      	cmp	r3, #0
 c003e44:	d102      	bne.n	c003e4c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c003e46:	2301      	movs	r3, #1
 c003e48:	f000 bc9a 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c003e4c:	687b      	ldr	r3, [r7, #4]
 c003e4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c003e50:	4b84      	ldr	r3, [pc, #528]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e52:	681b      	ldr	r3, [r3, #0]
 c003e54:	f003 0308 	and.w	r3, r3, #8
 c003e58:	2b00      	cmp	r3, #0
 c003e5a:	d004      	beq.n	c003e66 <HAL_RCC_OscConfig+0x7e>
 c003e5c:	4b81      	ldr	r3, [pc, #516]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e5e:	681b      	ldr	r3, [r3, #0]
 c003e60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003e64:	e005      	b.n	c003e72 <HAL_RCC_OscConfig+0x8a>
 c003e66:	4b7f      	ldr	r3, [pc, #508]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e68:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003e6c:	091b      	lsrs	r3, r3, #4
 c003e6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003e72:	4293      	cmp	r3, r2
 c003e74:	d224      	bcs.n	c003ec0 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003e76:	687b      	ldr	r3, [r7, #4]
 c003e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003e7a:	4618      	mov	r0, r3
 c003e7c:	f000 fe9c 	bl	c004bb8 <RCC_SetFlashLatencyFromMSIRange>
 c003e80:	4603      	mov	r3, r0
 c003e82:	2b00      	cmp	r3, #0
 c003e84:	d002      	beq.n	c003e8c <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c003e86:	2301      	movs	r3, #1
 c003e88:	f000 bc7a 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c003e8c:	4b75      	ldr	r3, [pc, #468]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e8e:	681b      	ldr	r3, [r3, #0]
 c003e90:	4a74      	ldr	r2, [pc, #464]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e92:	f043 0308 	orr.w	r3, r3, #8
 c003e96:	6013      	str	r3, [r2, #0]
 c003e98:	4b72      	ldr	r3, [pc, #456]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003e9a:	681b      	ldr	r3, [r3, #0]
 c003e9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003ea0:	687b      	ldr	r3, [r7, #4]
 c003ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003ea4:	496f      	ldr	r1, [pc, #444]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003ea6:	4313      	orrs	r3, r2
 c003ea8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003eaa:	4b6e      	ldr	r3, [pc, #440]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003eac:	685b      	ldr	r3, [r3, #4]
 c003eae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c003eb2:	687b      	ldr	r3, [r7, #4]
 c003eb4:	6a1b      	ldr	r3, [r3, #32]
 c003eb6:	021b      	lsls	r3, r3, #8
 c003eb8:	496a      	ldr	r1, [pc, #424]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003eba:	4313      	orrs	r3, r2
 c003ebc:	604b      	str	r3, [r1, #4]
 c003ebe:	e026      	b.n	c003f0e <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c003ec0:	4b68      	ldr	r3, [pc, #416]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003ec2:	681b      	ldr	r3, [r3, #0]
 c003ec4:	4a67      	ldr	r2, [pc, #412]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003ec6:	f043 0308 	orr.w	r3, r3, #8
 c003eca:	6013      	str	r3, [r2, #0]
 c003ecc:	4b65      	ldr	r3, [pc, #404]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003ece:	681b      	ldr	r3, [r3, #0]
 c003ed0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003ed4:	687b      	ldr	r3, [r7, #4]
 c003ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003ed8:	4962      	ldr	r1, [pc, #392]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003eda:	4313      	orrs	r3, r2
 c003edc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003ede:	4b61      	ldr	r3, [pc, #388]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003ee0:	685b      	ldr	r3, [r3, #4]
 c003ee2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c003ee6:	687b      	ldr	r3, [r7, #4]
 c003ee8:	6a1b      	ldr	r3, [r3, #32]
 c003eea:	021b      	lsls	r3, r3, #8
 c003eec:	495d      	ldr	r1, [pc, #372]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003eee:	4313      	orrs	r3, r2
 c003ef0:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003ef2:	69bb      	ldr	r3, [r7, #24]
 c003ef4:	2b00      	cmp	r3, #0
 c003ef6:	d10a      	bne.n	c003f0e <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003ef8:	687b      	ldr	r3, [r7, #4]
 c003efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003efc:	4618      	mov	r0, r3
 c003efe:	f000 fe5b 	bl	c004bb8 <RCC_SetFlashLatencyFromMSIRange>
 c003f02:	4603      	mov	r3, r0
 c003f04:	2b00      	cmp	r3, #0
 c003f06:	d002      	beq.n	c003f0e <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c003f08:	2301      	movs	r3, #1
 c003f0a:	f000 bc39 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003f0e:	f000 fe17 	bl	c004b40 <HAL_RCC_GetHCLKFreq>
 c003f12:	4603      	mov	r3, r0
 c003f14:	4a54      	ldr	r2, [pc, #336]	; (c004068 <HAL_RCC_OscConfig+0x280>)
 c003f16:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c003f18:	4b54      	ldr	r3, [pc, #336]	; (c00406c <HAL_RCC_OscConfig+0x284>)
 c003f1a:	681b      	ldr	r3, [r3, #0]
 c003f1c:	4618      	mov	r0, r3
 c003f1e:	f7fe fac1 	bl	c0024a4 <HAL_InitTick>
 c003f22:	4603      	mov	r3, r0
 c003f24:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c003f26:	7bfb      	ldrb	r3, [r7, #15]
 c003f28:	2b00      	cmp	r3, #0
 c003f2a:	d060      	beq.n	c003fee <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c003f2c:	7bfb      	ldrb	r3, [r7, #15]
 c003f2e:	f000 bc27 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c003f32:	687b      	ldr	r3, [r7, #4]
 c003f34:	69db      	ldr	r3, [r3, #28]
 c003f36:	2b00      	cmp	r3, #0
 c003f38:	d039      	beq.n	c003fae <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c003f3a:	4b4a      	ldr	r3, [pc, #296]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f3c:	681b      	ldr	r3, [r3, #0]
 c003f3e:	4a49      	ldr	r2, [pc, #292]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f40:	f043 0301 	orr.w	r3, r3, #1
 c003f44:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c003f46:	f7fe fafd 	bl	c002544 <HAL_GetTick>
 c003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003f4c:	e00f      	b.n	c003f6e <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c003f4e:	f7fe faf9 	bl	c002544 <HAL_GetTick>
 c003f52:	4602      	mov	r2, r0
 c003f54:	693b      	ldr	r3, [r7, #16]
 c003f56:	1ad3      	subs	r3, r2, r3
 c003f58:	2b02      	cmp	r3, #2
 c003f5a:	d908      	bls.n	c003f6e <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003f5c:	4b41      	ldr	r3, [pc, #260]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f5e:	681b      	ldr	r3, [r3, #0]
 c003f60:	f003 0302 	and.w	r3, r3, #2
 c003f64:	2b00      	cmp	r3, #0
 c003f66:	d102      	bne.n	c003f6e <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c003f68:	2303      	movs	r3, #3
 c003f6a:	f000 bc09 	b.w	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003f6e:	4b3d      	ldr	r3, [pc, #244]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f70:	681b      	ldr	r3, [r3, #0]
 c003f72:	f003 0302 	and.w	r3, r3, #2
 c003f76:	2b00      	cmp	r3, #0
 c003f78:	d0e9      	beq.n	c003f4e <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c003f7a:	4b3a      	ldr	r3, [pc, #232]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f7c:	681b      	ldr	r3, [r3, #0]
 c003f7e:	4a39      	ldr	r2, [pc, #228]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f80:	f043 0308 	orr.w	r3, r3, #8
 c003f84:	6013      	str	r3, [r2, #0]
 c003f86:	4b37      	ldr	r3, [pc, #220]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f88:	681b      	ldr	r3, [r3, #0]
 c003f8a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003f8e:	687b      	ldr	r3, [r7, #4]
 c003f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003f92:	4934      	ldr	r1, [pc, #208]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f94:	4313      	orrs	r3, r2
 c003f96:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003f98:	4b32      	ldr	r3, [pc, #200]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003f9a:	685b      	ldr	r3, [r3, #4]
 c003f9c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c003fa0:	687b      	ldr	r3, [r7, #4]
 c003fa2:	6a1b      	ldr	r3, [r3, #32]
 c003fa4:	021b      	lsls	r3, r3, #8
 c003fa6:	492f      	ldr	r1, [pc, #188]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003fa8:	4313      	orrs	r3, r2
 c003faa:	604b      	str	r3, [r1, #4]
 c003fac:	e020      	b.n	c003ff0 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c003fae:	4b2d      	ldr	r3, [pc, #180]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003fb0:	681b      	ldr	r3, [r3, #0]
 c003fb2:	4a2c      	ldr	r2, [pc, #176]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003fb4:	f023 0301 	bic.w	r3, r3, #1
 c003fb8:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c003fba:	f7fe fac3 	bl	c002544 <HAL_GetTick>
 c003fbe:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003fc0:	e00e      	b.n	c003fe0 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c003fc2:	f7fe fabf 	bl	c002544 <HAL_GetTick>
 c003fc6:	4602      	mov	r2, r0
 c003fc8:	693b      	ldr	r3, [r7, #16]
 c003fca:	1ad3      	subs	r3, r2, r3
 c003fcc:	2b02      	cmp	r3, #2
 c003fce:	d907      	bls.n	c003fe0 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003fd0:	4b24      	ldr	r3, [pc, #144]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003fd2:	681b      	ldr	r3, [r3, #0]
 c003fd4:	f003 0302 	and.w	r3, r3, #2
 c003fd8:	2b00      	cmp	r3, #0
 c003fda:	d001      	beq.n	c003fe0 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c003fdc:	2303      	movs	r3, #3
 c003fde:	e3cf      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003fe0:	4b20      	ldr	r3, [pc, #128]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c003fe2:	681b      	ldr	r3, [r3, #0]
 c003fe4:	f003 0302 	and.w	r3, r3, #2
 c003fe8:	2b00      	cmp	r3, #0
 c003fea:	d1ea      	bne.n	c003fc2 <HAL_RCC_OscConfig+0x1da>
 c003fec:	e000      	b.n	c003ff0 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c003fee:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003ff0:	687b      	ldr	r3, [r7, #4]
 c003ff2:	681b      	ldr	r3, [r3, #0]
 c003ff4:	f003 0301 	and.w	r3, r3, #1
 c003ff8:	2b00      	cmp	r3, #0
 c003ffa:	d07e      	beq.n	c0040fa <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003ffc:	69bb      	ldr	r3, [r7, #24]
 c003ffe:	2b08      	cmp	r3, #8
 c004000:	d005      	beq.n	c00400e <HAL_RCC_OscConfig+0x226>
 c004002:	69bb      	ldr	r3, [r7, #24]
 c004004:	2b0c      	cmp	r3, #12
 c004006:	d10e      	bne.n	c004026 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c004008:	697b      	ldr	r3, [r7, #20]
 c00400a:	2b03      	cmp	r3, #3
 c00400c:	d10b      	bne.n	c004026 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c00400e:	4b15      	ldr	r3, [pc, #84]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c004010:	681b      	ldr	r3, [r3, #0]
 c004012:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004016:	2b00      	cmp	r3, #0
 c004018:	d06e      	beq.n	c0040f8 <HAL_RCC_OscConfig+0x310>
 c00401a:	687b      	ldr	r3, [r7, #4]
 c00401c:	685b      	ldr	r3, [r3, #4]
 c00401e:	2b00      	cmp	r3, #0
 c004020:	d16a      	bne.n	c0040f8 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c004022:	2301      	movs	r3, #1
 c004024:	e3ac      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c004026:	687b      	ldr	r3, [r7, #4]
 c004028:	685b      	ldr	r3, [r3, #4]
 c00402a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00402e:	d106      	bne.n	c00403e <HAL_RCC_OscConfig+0x256>
 c004030:	4b0c      	ldr	r3, [pc, #48]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c004032:	681b      	ldr	r3, [r3, #0]
 c004034:	4a0b      	ldr	r2, [pc, #44]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c004036:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00403a:	6013      	str	r3, [r2, #0]
 c00403c:	e024      	b.n	c004088 <HAL_RCC_OscConfig+0x2a0>
 c00403e:	687b      	ldr	r3, [r7, #4]
 c004040:	685b      	ldr	r3, [r3, #4]
 c004042:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c004046:	d113      	bne.n	c004070 <HAL_RCC_OscConfig+0x288>
 c004048:	4b06      	ldr	r3, [pc, #24]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c00404a:	681b      	ldr	r3, [r3, #0]
 c00404c:	4a05      	ldr	r2, [pc, #20]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c00404e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c004052:	6013      	str	r3, [r2, #0]
 c004054:	4b03      	ldr	r3, [pc, #12]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c004056:	681b      	ldr	r3, [r3, #0]
 c004058:	4a02      	ldr	r2, [pc, #8]	; (c004064 <HAL_RCC_OscConfig+0x27c>)
 c00405a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00405e:	6013      	str	r3, [r2, #0]
 c004060:	e012      	b.n	c004088 <HAL_RCC_OscConfig+0x2a0>
 c004062:	bf00      	nop
 c004064:	50021000 	.word	0x50021000
 c004068:	300000f8 	.word	0x300000f8
 c00406c:	300000fc 	.word	0x300000fc
 c004070:	4b8b      	ldr	r3, [pc, #556]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004072:	681b      	ldr	r3, [r3, #0]
 c004074:	4a8a      	ldr	r2, [pc, #552]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004076:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00407a:	6013      	str	r3, [r2, #0]
 c00407c:	4b88      	ldr	r3, [pc, #544]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00407e:	681b      	ldr	r3, [r3, #0]
 c004080:	4a87      	ldr	r2, [pc, #540]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004082:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c004086:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c004088:	687b      	ldr	r3, [r7, #4]
 c00408a:	685b      	ldr	r3, [r3, #4]
 c00408c:	2b00      	cmp	r3, #0
 c00408e:	d019      	beq.n	c0040c4 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004090:	f7fe fa58 	bl	c002544 <HAL_GetTick>
 c004094:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c004096:	e00e      	b.n	c0040b6 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c004098:	f7fe fa54 	bl	c002544 <HAL_GetTick>
 c00409c:	4602      	mov	r2, r0
 c00409e:	693b      	ldr	r3, [r7, #16]
 c0040a0:	1ad3      	subs	r3, r2, r3
 c0040a2:	2b64      	cmp	r3, #100	; 0x64
 c0040a4:	d907      	bls.n	c0040b6 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0040a6:	4b7e      	ldr	r3, [pc, #504]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0040a8:	681b      	ldr	r3, [r3, #0]
 c0040aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040ae:	2b00      	cmp	r3, #0
 c0040b0:	d101      	bne.n	c0040b6 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0040b2:	2303      	movs	r3, #3
 c0040b4:	e364      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0040b6:	4b7a      	ldr	r3, [pc, #488]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0040b8:	681b      	ldr	r3, [r3, #0]
 c0040ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040be:	2b00      	cmp	r3, #0
 c0040c0:	d0ea      	beq.n	c004098 <HAL_RCC_OscConfig+0x2b0>
 c0040c2:	e01a      	b.n	c0040fa <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0040c4:	f7fe fa3e 	bl	c002544 <HAL_GetTick>
 c0040c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0040ca:	e00e      	b.n	c0040ea <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0040cc:	f7fe fa3a 	bl	c002544 <HAL_GetTick>
 c0040d0:	4602      	mov	r2, r0
 c0040d2:	693b      	ldr	r3, [r7, #16]
 c0040d4:	1ad3      	subs	r3, r2, r3
 c0040d6:	2b64      	cmp	r3, #100	; 0x64
 c0040d8:	d907      	bls.n	c0040ea <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0040da:	4b71      	ldr	r3, [pc, #452]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0040dc:	681b      	ldr	r3, [r3, #0]
 c0040de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040e2:	2b00      	cmp	r3, #0
 c0040e4:	d001      	beq.n	c0040ea <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0040e6:	2303      	movs	r3, #3
 c0040e8:	e34a      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0040ea:	4b6d      	ldr	r3, [pc, #436]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0040ec:	681b      	ldr	r3, [r3, #0]
 c0040ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040f2:	2b00      	cmp	r3, #0
 c0040f4:	d1ea      	bne.n	c0040cc <HAL_RCC_OscConfig+0x2e4>
 c0040f6:	e000      	b.n	c0040fa <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0040f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0040fa:	687b      	ldr	r3, [r7, #4]
 c0040fc:	681b      	ldr	r3, [r3, #0]
 c0040fe:	f003 0302 	and.w	r3, r3, #2
 c004102:	2b00      	cmp	r3, #0
 c004104:	d06c      	beq.n	c0041e0 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c004106:	69bb      	ldr	r3, [r7, #24]
 c004108:	2b04      	cmp	r3, #4
 c00410a:	d005      	beq.n	c004118 <HAL_RCC_OscConfig+0x330>
 c00410c:	69bb      	ldr	r3, [r7, #24]
 c00410e:	2b0c      	cmp	r3, #12
 c004110:	d119      	bne.n	c004146 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c004112:	697b      	ldr	r3, [r7, #20]
 c004114:	2b02      	cmp	r3, #2
 c004116:	d116      	bne.n	c004146 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c004118:	4b61      	ldr	r3, [pc, #388]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00411a:	681b      	ldr	r3, [r3, #0]
 c00411c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004120:	2b00      	cmp	r3, #0
 c004122:	d005      	beq.n	c004130 <HAL_RCC_OscConfig+0x348>
 c004124:	687b      	ldr	r3, [r7, #4]
 c004126:	68db      	ldr	r3, [r3, #12]
 c004128:	2b00      	cmp	r3, #0
 c00412a:	d101      	bne.n	c004130 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c00412c:	2301      	movs	r3, #1
 c00412e:	e327      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c004130:	4b5b      	ldr	r3, [pc, #364]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004132:	685b      	ldr	r3, [r3, #4]
 c004134:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c004138:	687b      	ldr	r3, [r7, #4]
 c00413a:	691b      	ldr	r3, [r3, #16]
 c00413c:	061b      	lsls	r3, r3, #24
 c00413e:	4958      	ldr	r1, [pc, #352]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004140:	4313      	orrs	r3, r2
 c004142:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c004144:	e04c      	b.n	c0041e0 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c004146:	687b      	ldr	r3, [r7, #4]
 c004148:	68db      	ldr	r3, [r3, #12]
 c00414a:	2b00      	cmp	r3, #0
 c00414c:	d029      	beq.n	c0041a2 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c00414e:	4b54      	ldr	r3, [pc, #336]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004150:	681b      	ldr	r3, [r3, #0]
 c004152:	4a53      	ldr	r2, [pc, #332]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004154:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004158:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00415a:	f7fe f9f3 	bl	c002544 <HAL_GetTick>
 c00415e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004160:	e00e      	b.n	c004180 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c004162:	f7fe f9ef 	bl	c002544 <HAL_GetTick>
 c004166:	4602      	mov	r2, r0
 c004168:	693b      	ldr	r3, [r7, #16]
 c00416a:	1ad3      	subs	r3, r2, r3
 c00416c:	2b02      	cmp	r3, #2
 c00416e:	d907      	bls.n	c004180 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004170:	4b4b      	ldr	r3, [pc, #300]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004172:	681b      	ldr	r3, [r3, #0]
 c004174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004178:	2b00      	cmp	r3, #0
 c00417a:	d101      	bne.n	c004180 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c00417c:	2303      	movs	r3, #3
 c00417e:	e2ff      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004180:	4b47      	ldr	r3, [pc, #284]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004182:	681b      	ldr	r3, [r3, #0]
 c004184:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004188:	2b00      	cmp	r3, #0
 c00418a:	d0ea      	beq.n	c004162 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c00418c:	4b44      	ldr	r3, [pc, #272]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00418e:	685b      	ldr	r3, [r3, #4]
 c004190:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c004194:	687b      	ldr	r3, [r7, #4]
 c004196:	691b      	ldr	r3, [r3, #16]
 c004198:	061b      	lsls	r3, r3, #24
 c00419a:	4941      	ldr	r1, [pc, #260]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00419c:	4313      	orrs	r3, r2
 c00419e:	604b      	str	r3, [r1, #4]
 c0041a0:	e01e      	b.n	c0041e0 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0041a2:	4b3f      	ldr	r3, [pc, #252]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0041a4:	681b      	ldr	r3, [r3, #0]
 c0041a6:	4a3e      	ldr	r2, [pc, #248]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0041a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0041ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0041ae:	f7fe f9c9 	bl	c002544 <HAL_GetTick>
 c0041b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0041b4:	e00e      	b.n	c0041d4 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0041b6:	f7fe f9c5 	bl	c002544 <HAL_GetTick>
 c0041ba:	4602      	mov	r2, r0
 c0041bc:	693b      	ldr	r3, [r7, #16]
 c0041be:	1ad3      	subs	r3, r2, r3
 c0041c0:	2b02      	cmp	r3, #2
 c0041c2:	d907      	bls.n	c0041d4 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0041c4:	4b36      	ldr	r3, [pc, #216]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0041c6:	681b      	ldr	r3, [r3, #0]
 c0041c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0041cc:	2b00      	cmp	r3, #0
 c0041ce:	d001      	beq.n	c0041d4 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c0041d0:	2303      	movs	r3, #3
 c0041d2:	e2d5      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0041d4:	4b32      	ldr	r3, [pc, #200]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0041d6:	681b      	ldr	r3, [r3, #0]
 c0041d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0041dc:	2b00      	cmp	r3, #0
 c0041de:	d1ea      	bne.n	c0041b6 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0041e0:	687b      	ldr	r3, [r7, #4]
 c0041e2:	681b      	ldr	r3, [r3, #0]
 c0041e4:	f003 0308 	and.w	r3, r3, #8
 c0041e8:	2b00      	cmp	r3, #0
 c0041ea:	d062      	beq.n	c0042b2 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0041ec:	687b      	ldr	r3, [r7, #4]
 c0041ee:	695b      	ldr	r3, [r3, #20]
 c0041f0:	2b00      	cmp	r3, #0
 c0041f2:	d038      	beq.n	c004266 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0041f4:	687b      	ldr	r3, [r7, #4]
 c0041f6:	699b      	ldr	r3, [r3, #24]
 c0041f8:	2b00      	cmp	r3, #0
 c0041fa:	d108      	bne.n	c00420e <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c0041fc:	4b28      	ldr	r3, [pc, #160]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c0041fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004202:	4a27      	ldr	r2, [pc, #156]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004204:	f023 0310 	bic.w	r3, r3, #16
 c004208:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c00420c:	e007      	b.n	c00421e <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c00420e:	4b24      	ldr	r3, [pc, #144]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004210:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004214:	4a22      	ldr	r2, [pc, #136]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004216:	f043 0310 	orr.w	r3, r3, #16
 c00421a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c00421e:	4b20      	ldr	r3, [pc, #128]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004220:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004224:	4a1e      	ldr	r2, [pc, #120]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004226:	f043 0301 	orr.w	r3, r3, #1
 c00422a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00422e:	f7fe f989 	bl	c002544 <HAL_GetTick>
 c004232:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c004234:	e00f      	b.n	c004256 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c004236:	f7fe f985 	bl	c002544 <HAL_GetTick>
 c00423a:	4602      	mov	r2, r0
 c00423c:	693b      	ldr	r3, [r7, #16]
 c00423e:	1ad3      	subs	r3, r2, r3
 c004240:	2b07      	cmp	r3, #7
 c004242:	d908      	bls.n	c004256 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c004244:	4b16      	ldr	r3, [pc, #88]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004246:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00424a:	f003 0302 	and.w	r3, r3, #2
 c00424e:	2b00      	cmp	r3, #0
 c004250:	d101      	bne.n	c004256 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c004252:	2303      	movs	r3, #3
 c004254:	e294      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c004256:	4b12      	ldr	r3, [pc, #72]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004258:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00425c:	f003 0302 	and.w	r3, r3, #2
 c004260:	2b00      	cmp	r3, #0
 c004262:	d0e8      	beq.n	c004236 <HAL_RCC_OscConfig+0x44e>
 c004264:	e025      	b.n	c0042b2 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c004266:	4b0e      	ldr	r3, [pc, #56]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c004268:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00426c:	4a0c      	ldr	r2, [pc, #48]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00426e:	f023 0301 	bic.w	r3, r3, #1
 c004272:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004276:	f7fe f965 	bl	c002544 <HAL_GetTick>
 c00427a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c00427c:	e012      	b.n	c0042a4 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00427e:	f7fe f961 	bl	c002544 <HAL_GetTick>
 c004282:	4602      	mov	r2, r0
 c004284:	693b      	ldr	r3, [r7, #16]
 c004286:	1ad3      	subs	r3, r2, r3
 c004288:	2b07      	cmp	r3, #7
 c00428a:	d90b      	bls.n	c0042a4 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c00428c:	4b04      	ldr	r3, [pc, #16]	; (c0042a0 <HAL_RCC_OscConfig+0x4b8>)
 c00428e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004292:	f003 0302 	and.w	r3, r3, #2
 c004296:	2b00      	cmp	r3, #0
 c004298:	d004      	beq.n	c0042a4 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c00429a:	2303      	movs	r3, #3
 c00429c:	e270      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
 c00429e:	bf00      	nop
 c0042a0:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0042a4:	4ba8      	ldr	r3, [pc, #672]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0042a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0042aa:	f003 0302 	and.w	r3, r3, #2
 c0042ae:	2b00      	cmp	r3, #0
 c0042b0:	d1e5      	bne.n	c00427e <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c0042b2:	687b      	ldr	r3, [r7, #4]
 c0042b4:	681b      	ldr	r3, [r3, #0]
 c0042b6:	f003 0304 	and.w	r3, r3, #4
 c0042ba:	2b00      	cmp	r3, #0
 c0042bc:	f000 812d 	beq.w	c00451a <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0042c0:	2300      	movs	r3, #0
 c0042c2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c0042c4:	4ba0      	ldr	r3, [pc, #640]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0042c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0042c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0042cc:	2b00      	cmp	r3, #0
 c0042ce:	d10d      	bne.n	c0042ec <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0042d0:	4b9d      	ldr	r3, [pc, #628]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0042d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0042d4:	4a9c      	ldr	r2, [pc, #624]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0042d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0042da:	6593      	str	r3, [r2, #88]	; 0x58
 c0042dc:	4b9a      	ldr	r3, [pc, #616]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0042de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0042e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0042e4:	60bb      	str	r3, [r7, #8]
 c0042e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c0042e8:	2301      	movs	r3, #1
 c0042ea:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0042ec:	4b97      	ldr	r3, [pc, #604]	; (c00454c <HAL_RCC_OscConfig+0x764>)
 c0042ee:	681b      	ldr	r3, [r3, #0]
 c0042f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0042f4:	2b00      	cmp	r3, #0
 c0042f6:	d11e      	bne.n	c004336 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0042f8:	4b94      	ldr	r3, [pc, #592]	; (c00454c <HAL_RCC_OscConfig+0x764>)
 c0042fa:	681b      	ldr	r3, [r3, #0]
 c0042fc:	4a93      	ldr	r2, [pc, #588]	; (c00454c <HAL_RCC_OscConfig+0x764>)
 c0042fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004302:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c004304:	f7fe f91e 	bl	c002544 <HAL_GetTick>
 c004308:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00430a:	e00e      	b.n	c00432a <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00430c:	f7fe f91a 	bl	c002544 <HAL_GetTick>
 c004310:	4602      	mov	r2, r0
 c004312:	693b      	ldr	r3, [r7, #16]
 c004314:	1ad3      	subs	r3, r2, r3
 c004316:	2b02      	cmp	r3, #2
 c004318:	d907      	bls.n	c00432a <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00431a:	4b8c      	ldr	r3, [pc, #560]	; (c00454c <HAL_RCC_OscConfig+0x764>)
 c00431c:	681b      	ldr	r3, [r3, #0]
 c00431e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004322:	2b00      	cmp	r3, #0
 c004324:	d101      	bne.n	c00432a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c004326:	2303      	movs	r3, #3
 c004328:	e22a      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00432a:	4b88      	ldr	r3, [pc, #544]	; (c00454c <HAL_RCC_OscConfig+0x764>)
 c00432c:	681b      	ldr	r3, [r3, #0]
 c00432e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004332:	2b00      	cmp	r3, #0
 c004334:	d0ea      	beq.n	c00430c <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c004336:	687b      	ldr	r3, [r7, #4]
 c004338:	689b      	ldr	r3, [r3, #8]
 c00433a:	f003 0301 	and.w	r3, r3, #1
 c00433e:	2b00      	cmp	r3, #0
 c004340:	d01f      	beq.n	c004382 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c004342:	687b      	ldr	r3, [r7, #4]
 c004344:	689b      	ldr	r3, [r3, #8]
 c004346:	f003 0304 	and.w	r3, r3, #4
 c00434a:	2b00      	cmp	r3, #0
 c00434c:	d010      	beq.n	c004370 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00434e:	4b7e      	ldr	r3, [pc, #504]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004350:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004354:	4a7c      	ldr	r2, [pc, #496]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004356:	f043 0304 	orr.w	r3, r3, #4
 c00435a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00435e:	4b7a      	ldr	r3, [pc, #488]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004360:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004364:	4a78      	ldr	r2, [pc, #480]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004366:	f043 0301 	orr.w	r3, r3, #1
 c00436a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c00436e:	e018      	b.n	c0043a2 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c004370:	4b75      	ldr	r3, [pc, #468]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004372:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004376:	4a74      	ldr	r2, [pc, #464]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004378:	f043 0301 	orr.w	r3, r3, #1
 c00437c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c004380:	e00f      	b.n	c0043a2 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c004382:	4b71      	ldr	r3, [pc, #452]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004388:	4a6f      	ldr	r2, [pc, #444]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c00438a:	f023 0301 	bic.w	r3, r3, #1
 c00438e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c004392:	4b6d      	ldr	r3, [pc, #436]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004398:	4a6b      	ldr	r2, [pc, #428]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c00439a:	f023 0304 	bic.w	r3, r3, #4
 c00439e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0043a2:	687b      	ldr	r3, [r7, #4]
 c0043a4:	689b      	ldr	r3, [r3, #8]
 c0043a6:	2b00      	cmp	r3, #0
 c0043a8:	d068      	beq.n	c00447c <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0043aa:	f7fe f8cb 	bl	c002544 <HAL_GetTick>
 c0043ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0043b0:	e011      	b.n	c0043d6 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0043b2:	f7fe f8c7 	bl	c002544 <HAL_GetTick>
 c0043b6:	4602      	mov	r2, r0
 c0043b8:	693b      	ldr	r3, [r7, #16]
 c0043ba:	1ad3      	subs	r3, r2, r3
 c0043bc:	f241 3288 	movw	r2, #5000	; 0x1388
 c0043c0:	4293      	cmp	r3, r2
 c0043c2:	d908      	bls.n	c0043d6 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0043c4:	4b60      	ldr	r3, [pc, #384]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0043c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0043ca:	f003 0302 	and.w	r3, r3, #2
 c0043ce:	2b00      	cmp	r3, #0
 c0043d0:	d101      	bne.n	c0043d6 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c0043d2:	2303      	movs	r3, #3
 c0043d4:	e1d4      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0043d6:	4b5c      	ldr	r3, [pc, #368]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0043d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0043dc:	f003 0302 	and.w	r3, r3, #2
 c0043e0:	2b00      	cmp	r3, #0
 c0043e2:	d0e6      	beq.n	c0043b2 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0043e4:	687b      	ldr	r3, [r7, #4]
 c0043e6:	689b      	ldr	r3, [r3, #8]
 c0043e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0043ec:	2b00      	cmp	r3, #0
 c0043ee:	d022      	beq.n	c004436 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0043f0:	4b55      	ldr	r3, [pc, #340]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0043f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0043f6:	4a54      	ldr	r2, [pc, #336]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0043f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0043fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c004400:	e011      	b.n	c004426 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004402:	f7fe f89f 	bl	c002544 <HAL_GetTick>
 c004406:	4602      	mov	r2, r0
 c004408:	693b      	ldr	r3, [r7, #16]
 c00440a:	1ad3      	subs	r3, r2, r3
 c00440c:	f241 3288 	movw	r2, #5000	; 0x1388
 c004410:	4293      	cmp	r3, r2
 c004412:	d908      	bls.n	c004426 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c004414:	4b4c      	ldr	r3, [pc, #304]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004416:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00441a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00441e:	2b00      	cmp	r3, #0
 c004420:	d101      	bne.n	c004426 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c004422:	2303      	movs	r3, #3
 c004424:	e1ac      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c004426:	4b48      	ldr	r3, [pc, #288]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00442c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004430:	2b00      	cmp	r3, #0
 c004432:	d0e6      	beq.n	c004402 <HAL_RCC_OscConfig+0x61a>
 c004434:	e068      	b.n	c004508 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c004436:	4b44      	ldr	r3, [pc, #272]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004438:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00443c:	4a42      	ldr	r2, [pc, #264]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c00443e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c004442:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c004446:	e011      	b.n	c00446c <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004448:	f7fe f87c 	bl	c002544 <HAL_GetTick>
 c00444c:	4602      	mov	r2, r0
 c00444e:	693b      	ldr	r3, [r7, #16]
 c004450:	1ad3      	subs	r3, r2, r3
 c004452:	f241 3288 	movw	r2, #5000	; 0x1388
 c004456:	4293      	cmp	r3, r2
 c004458:	d908      	bls.n	c00446c <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00445a:	4b3b      	ldr	r3, [pc, #236]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c00445c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004460:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004464:	2b00      	cmp	r3, #0
 c004466:	d001      	beq.n	c00446c <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c004468:	2303      	movs	r3, #3
 c00446a:	e189      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00446c:	4b36      	ldr	r3, [pc, #216]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c00446e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004472:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004476:	2b00      	cmp	r3, #0
 c004478:	d1e6      	bne.n	c004448 <HAL_RCC_OscConfig+0x660>
 c00447a:	e045      	b.n	c004508 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00447c:	f7fe f862 	bl	c002544 <HAL_GetTick>
 c004480:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c004482:	e011      	b.n	c0044a8 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004484:	f7fe f85e 	bl	c002544 <HAL_GetTick>
 c004488:	4602      	mov	r2, r0
 c00448a:	693b      	ldr	r3, [r7, #16]
 c00448c:	1ad3      	subs	r3, r2, r3
 c00448e:	f241 3288 	movw	r2, #5000	; 0x1388
 c004492:	4293      	cmp	r3, r2
 c004494:	d908      	bls.n	c0044a8 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c004496:	4b2c      	ldr	r3, [pc, #176]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00449c:	f003 0302 	and.w	r3, r3, #2
 c0044a0:	2b00      	cmp	r3, #0
 c0044a2:	d001      	beq.n	c0044a8 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c0044a4:	2303      	movs	r3, #3
 c0044a6:	e16b      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0044a8:	4b27      	ldr	r3, [pc, #156]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0044ae:	f003 0302 	and.w	r3, r3, #2
 c0044b2:	2b00      	cmp	r3, #0
 c0044b4:	d1e6      	bne.n	c004484 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0044b6:	4b24      	ldr	r3, [pc, #144]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0044bc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0044c0:	2b00      	cmp	r3, #0
 c0044c2:	d021      	beq.n	c004508 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0044c4:	4b20      	ldr	r3, [pc, #128]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0044ca:	4a1f      	ldr	r2, [pc, #124]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044cc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0044d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0044d4:	e011      	b.n	c0044fa <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0044d6:	f7fe f835 	bl	c002544 <HAL_GetTick>
 c0044da:	4602      	mov	r2, r0
 c0044dc:	693b      	ldr	r3, [r7, #16]
 c0044de:	1ad3      	subs	r3, r2, r3
 c0044e0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0044e4:	4293      	cmp	r3, r2
 c0044e6:	d908      	bls.n	c0044fa <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0044e8:	4b17      	ldr	r3, [pc, #92]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0044ee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0044f2:	2b00      	cmp	r3, #0
 c0044f4:	d001      	beq.n	c0044fa <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c0044f6:	2303      	movs	r3, #3
 c0044f8:	e142      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0044fa:	4b13      	ldr	r3, [pc, #76]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c0044fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004500:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004504:	2b00      	cmp	r3, #0
 c004506:	d1e6      	bne.n	c0044d6 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004508:	7ffb      	ldrb	r3, [r7, #31]
 c00450a:	2b01      	cmp	r3, #1
 c00450c:	d105      	bne.n	c00451a <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c00450e:	4b0e      	ldr	r3, [pc, #56]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004510:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004512:	4a0d      	ldr	r2, [pc, #52]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004514:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004518:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c00451a:	687b      	ldr	r3, [r7, #4]
 c00451c:	681b      	ldr	r3, [r3, #0]
 c00451e:	f003 0320 	and.w	r3, r3, #32
 c004522:	2b00      	cmp	r3, #0
 c004524:	d04f      	beq.n	c0045c6 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c004526:	687b      	ldr	r3, [r7, #4]
 c004528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00452a:	2b00      	cmp	r3, #0
 c00452c:	d028      	beq.n	c004580 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c00452e:	4b06      	ldr	r3, [pc, #24]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004530:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004534:	4a04      	ldr	r2, [pc, #16]	; (c004548 <HAL_RCC_OscConfig+0x760>)
 c004536:	f043 0301 	orr.w	r3, r3, #1
 c00453a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00453e:	f7fe f801 	bl	c002544 <HAL_GetTick>
 c004542:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c004544:	e014      	b.n	c004570 <HAL_RCC_OscConfig+0x788>
 c004546:	bf00      	nop
 c004548:	50021000 	.word	0x50021000
 c00454c:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c004550:	f7fd fff8 	bl	c002544 <HAL_GetTick>
 c004554:	4602      	mov	r2, r0
 c004556:	693b      	ldr	r3, [r7, #16]
 c004558:	1ad3      	subs	r3, r2, r3
 c00455a:	2b02      	cmp	r3, #2
 c00455c:	d908      	bls.n	c004570 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00455e:	4b8a      	ldr	r3, [pc, #552]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004560:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004564:	f003 0302 	and.w	r3, r3, #2
 c004568:	2b00      	cmp	r3, #0
 c00456a:	d101      	bne.n	c004570 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c00456c:	2303      	movs	r3, #3
 c00456e:	e107      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c004570:	4b85      	ldr	r3, [pc, #532]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004572:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004576:	f003 0302 	and.w	r3, r3, #2
 c00457a:	2b00      	cmp	r3, #0
 c00457c:	d0e8      	beq.n	c004550 <HAL_RCC_OscConfig+0x768>
 c00457e:	e022      	b.n	c0045c6 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c004580:	4b81      	ldr	r3, [pc, #516]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004582:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c004586:	4a80      	ldr	r2, [pc, #512]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004588:	f023 0301 	bic.w	r3, r3, #1
 c00458c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004590:	f7fd ffd8 	bl	c002544 <HAL_GetTick>
 c004594:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c004596:	e00f      	b.n	c0045b8 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c004598:	f7fd ffd4 	bl	c002544 <HAL_GetTick>
 c00459c:	4602      	mov	r2, r0
 c00459e:	693b      	ldr	r3, [r7, #16]
 c0045a0:	1ad3      	subs	r3, r2, r3
 c0045a2:	2b02      	cmp	r3, #2
 c0045a4:	d908      	bls.n	c0045b8 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0045a6:	4b78      	ldr	r3, [pc, #480]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0045a8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0045ac:	f003 0302 	and.w	r3, r3, #2
 c0045b0:	2b00      	cmp	r3, #0
 c0045b2:	d001      	beq.n	c0045b8 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0045b4:	2303      	movs	r3, #3
 c0045b6:	e0e3      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0045b8:	4b73      	ldr	r3, [pc, #460]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0045ba:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0045be:	f003 0302 	and.w	r3, r3, #2
 c0045c2:	2b00      	cmp	r3, #0
 c0045c4:	d1e8      	bne.n	c004598 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0045c6:	687b      	ldr	r3, [r7, #4]
 c0045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0045ca:	2b00      	cmp	r3, #0
 c0045cc:	f000 80d7 	beq.w	c00477e <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0045d0:	4b6d      	ldr	r3, [pc, #436]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0045d2:	689b      	ldr	r3, [r3, #8]
 c0045d4:	f003 030c 	and.w	r3, r3, #12
 c0045d8:	2b0c      	cmp	r3, #12
 c0045da:	f000 8091 	beq.w	c004700 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0045de:	687b      	ldr	r3, [r7, #4]
 c0045e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0045e2:	2b02      	cmp	r3, #2
 c0045e4:	d166      	bne.n	c0046b4 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0045e6:	4b68      	ldr	r3, [pc, #416]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0045e8:	681b      	ldr	r3, [r3, #0]
 c0045ea:	4a67      	ldr	r2, [pc, #412]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0045ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0045f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0045f2:	f7fd ffa7 	bl	c002544 <HAL_GetTick>
 c0045f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0045f8:	e00e      	b.n	c004618 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0045fa:	f7fd ffa3 	bl	c002544 <HAL_GetTick>
 c0045fe:	4602      	mov	r2, r0
 c004600:	693b      	ldr	r3, [r7, #16]
 c004602:	1ad3      	subs	r3, r2, r3
 c004604:	2b02      	cmp	r3, #2
 c004606:	d907      	bls.n	c004618 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c004608:	4b5f      	ldr	r3, [pc, #380]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00460a:	681b      	ldr	r3, [r3, #0]
 c00460c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004610:	2b00      	cmp	r3, #0
 c004612:	d001      	beq.n	c004618 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c004614:	2303      	movs	r3, #3
 c004616:	e0b3      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c004618:	4b5b      	ldr	r3, [pc, #364]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00461a:	681b      	ldr	r3, [r3, #0]
 c00461c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004620:	2b00      	cmp	r3, #0
 c004622:	d1ea      	bne.n	c0045fa <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c004624:	4b58      	ldr	r3, [pc, #352]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004626:	68da      	ldr	r2, [r3, #12]
 c004628:	4b58      	ldr	r3, [pc, #352]	; (c00478c <HAL_RCC_OscConfig+0x9a4>)
 c00462a:	4013      	ands	r3, r2
 c00462c:	687a      	ldr	r2, [r7, #4]
 c00462e:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c004630:	687a      	ldr	r2, [r7, #4]
 c004632:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c004634:	3a01      	subs	r2, #1
 c004636:	0112      	lsls	r2, r2, #4
 c004638:	4311      	orrs	r1, r2
 c00463a:	687a      	ldr	r2, [r7, #4]
 c00463c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c00463e:	0212      	lsls	r2, r2, #8
 c004640:	4311      	orrs	r1, r2
 c004642:	687a      	ldr	r2, [r7, #4]
 c004644:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c004646:	0852      	lsrs	r2, r2, #1
 c004648:	3a01      	subs	r2, #1
 c00464a:	0552      	lsls	r2, r2, #21
 c00464c:	4311      	orrs	r1, r2
 c00464e:	687a      	ldr	r2, [r7, #4]
 c004650:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c004652:	0852      	lsrs	r2, r2, #1
 c004654:	3a01      	subs	r2, #1
 c004656:	0652      	lsls	r2, r2, #25
 c004658:	4311      	orrs	r1, r2
 c00465a:	687a      	ldr	r2, [r7, #4]
 c00465c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c00465e:	06d2      	lsls	r2, r2, #27
 c004660:	430a      	orrs	r2, r1
 c004662:	4949      	ldr	r1, [pc, #292]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004664:	4313      	orrs	r3, r2
 c004666:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c004668:	4b47      	ldr	r3, [pc, #284]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00466a:	681b      	ldr	r3, [r3, #0]
 c00466c:	4a46      	ldr	r2, [pc, #280]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00466e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c004672:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c004674:	4b44      	ldr	r3, [pc, #272]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004676:	68db      	ldr	r3, [r3, #12]
 c004678:	4a43      	ldr	r2, [pc, #268]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00467a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00467e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004680:	f7fd ff60 	bl	c002544 <HAL_GetTick>
 c004684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c004686:	e00e      	b.n	c0046a6 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c004688:	f7fd ff5c 	bl	c002544 <HAL_GetTick>
 c00468c:	4602      	mov	r2, r0
 c00468e:	693b      	ldr	r3, [r7, #16]
 c004690:	1ad3      	subs	r3, r2, r3
 c004692:	2b02      	cmp	r3, #2
 c004694:	d907      	bls.n	c0046a6 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c004696:	4b3c      	ldr	r3, [pc, #240]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c004698:	681b      	ldr	r3, [r3, #0]
 c00469a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00469e:	2b00      	cmp	r3, #0
 c0046a0:	d101      	bne.n	c0046a6 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c0046a2:	2303      	movs	r3, #3
 c0046a4:	e06c      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0046a6:	4b38      	ldr	r3, [pc, #224]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046a8:	681b      	ldr	r3, [r3, #0]
 c0046aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0046ae:	2b00      	cmp	r3, #0
 c0046b0:	d0ea      	beq.n	c004688 <HAL_RCC_OscConfig+0x8a0>
 c0046b2:	e064      	b.n	c00477e <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0046b4:	4b34      	ldr	r3, [pc, #208]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046b6:	681b      	ldr	r3, [r3, #0]
 c0046b8:	4a33      	ldr	r2, [pc, #204]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0046be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0046c0:	f7fd ff40 	bl	c002544 <HAL_GetTick>
 c0046c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0046c6:	e00e      	b.n	c0046e6 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0046c8:	f7fd ff3c 	bl	c002544 <HAL_GetTick>
 c0046cc:	4602      	mov	r2, r0
 c0046ce:	693b      	ldr	r3, [r7, #16]
 c0046d0:	1ad3      	subs	r3, r2, r3
 c0046d2:	2b02      	cmp	r3, #2
 c0046d4:	d907      	bls.n	c0046e6 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0046d6:	4b2c      	ldr	r3, [pc, #176]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046d8:	681b      	ldr	r3, [r3, #0]
 c0046da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0046de:	2b00      	cmp	r3, #0
 c0046e0:	d001      	beq.n	c0046e6 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c0046e2:	2303      	movs	r3, #3
 c0046e4:	e04c      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0046e6:	4b28      	ldr	r3, [pc, #160]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046e8:	681b      	ldr	r3, [r3, #0]
 c0046ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0046ee:	2b00      	cmp	r3, #0
 c0046f0:	d1ea      	bne.n	c0046c8 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0046f2:	4b25      	ldr	r3, [pc, #148]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046f4:	68da      	ldr	r2, [r3, #12]
 c0046f6:	4924      	ldr	r1, [pc, #144]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c0046f8:	4b25      	ldr	r3, [pc, #148]	; (c004790 <HAL_RCC_OscConfig+0x9a8>)
 c0046fa:	4013      	ands	r3, r2
 c0046fc:	60cb      	str	r3, [r1, #12]
 c0046fe:	e03e      	b.n	c00477e <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c004700:	687b      	ldr	r3, [r7, #4]
 c004702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004704:	2b01      	cmp	r3, #1
 c004706:	d101      	bne.n	c00470c <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c004708:	2301      	movs	r3, #1
 c00470a:	e039      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c00470c:	4b1e      	ldr	r3, [pc, #120]	; (c004788 <HAL_RCC_OscConfig+0x9a0>)
 c00470e:	68db      	ldr	r3, [r3, #12]
 c004710:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c004712:	697b      	ldr	r3, [r7, #20]
 c004714:	f003 0203 	and.w	r2, r3, #3
 c004718:	687b      	ldr	r3, [r7, #4]
 c00471a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00471c:	429a      	cmp	r2, r3
 c00471e:	d12c      	bne.n	c00477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c004720:	697b      	ldr	r3, [r7, #20]
 c004722:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c004726:	687b      	ldr	r3, [r7, #4]
 c004728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00472a:	3b01      	subs	r3, #1
 c00472c:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00472e:	429a      	cmp	r2, r3
 c004730:	d123      	bne.n	c00477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c004732:	697b      	ldr	r3, [r7, #20]
 c004734:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c004738:	687b      	ldr	r3, [r7, #4]
 c00473a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00473c:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00473e:	429a      	cmp	r2, r3
 c004740:	d11b      	bne.n	c00477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c004742:	697b      	ldr	r3, [r7, #20]
 c004744:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c004748:	687b      	ldr	r3, [r7, #4]
 c00474a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00474c:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00474e:	429a      	cmp	r2, r3
 c004750:	d113      	bne.n	c00477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c004752:	697b      	ldr	r3, [r7, #20]
 c004754:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c004758:	687b      	ldr	r3, [r7, #4]
 c00475a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00475c:	085b      	lsrs	r3, r3, #1
 c00475e:	3b01      	subs	r3, #1
 c004760:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c004762:	429a      	cmp	r2, r3
 c004764:	d109      	bne.n	c00477a <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c004766:	697b      	ldr	r3, [r7, #20]
 c004768:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c00476c:	687b      	ldr	r3, [r7, #4]
 c00476e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c004770:	085b      	lsrs	r3, r3, #1
 c004772:	3b01      	subs	r3, #1
 c004774:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c004776:	429a      	cmp	r2, r3
 c004778:	d001      	beq.n	c00477e <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c00477a:	2301      	movs	r3, #1
 c00477c:	e000      	b.n	c004780 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c00477e:	2300      	movs	r3, #0
}
 c004780:	4618      	mov	r0, r3
 c004782:	3720      	adds	r7, #32
 c004784:	46bd      	mov	sp, r7
 c004786:	bd80      	pop	{r7, pc}
 c004788:	50021000 	.word	0x50021000
 c00478c:	019f800c 	.word	0x019f800c
 c004790:	feeefffc 	.word	0xfeeefffc

0c004794 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c004794:	b580      	push	{r7, lr}
 c004796:	b086      	sub	sp, #24
 c004798:	af00      	add	r7, sp, #0
 c00479a:	6078      	str	r0, [r7, #4]
 c00479c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c00479e:	2300      	movs	r3, #0
 c0047a0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0047a2:	687b      	ldr	r3, [r7, #4]
 c0047a4:	2b00      	cmp	r3, #0
 c0047a6:	d101      	bne.n	c0047ac <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0047a8:	2301      	movs	r3, #1
 c0047aa:	e11c      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0047ac:	4b90      	ldr	r3, [pc, #576]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c0047ae:	681b      	ldr	r3, [r3, #0]
 c0047b0:	f003 030f 	and.w	r3, r3, #15
 c0047b4:	683a      	ldr	r2, [r7, #0]
 c0047b6:	429a      	cmp	r2, r3
 c0047b8:	d910      	bls.n	c0047dc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0047ba:	4b8d      	ldr	r3, [pc, #564]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c0047bc:	681b      	ldr	r3, [r3, #0]
 c0047be:	f023 020f 	bic.w	r2, r3, #15
 c0047c2:	498b      	ldr	r1, [pc, #556]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c0047c4:	683b      	ldr	r3, [r7, #0]
 c0047c6:	4313      	orrs	r3, r2
 c0047c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0047ca:	4b89      	ldr	r3, [pc, #548]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c0047cc:	681b      	ldr	r3, [r3, #0]
 c0047ce:	f003 030f 	and.w	r3, r3, #15
 c0047d2:	683a      	ldr	r2, [r7, #0]
 c0047d4:	429a      	cmp	r2, r3
 c0047d6:	d001      	beq.n	c0047dc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0047d8:	2301      	movs	r3, #1
 c0047da:	e104      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0047dc:	687b      	ldr	r3, [r7, #4]
 c0047de:	681b      	ldr	r3, [r3, #0]
 c0047e0:	f003 0302 	and.w	r3, r3, #2
 c0047e4:	2b00      	cmp	r3, #0
 c0047e6:	d010      	beq.n	c00480a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c0047e8:	687b      	ldr	r3, [r7, #4]
 c0047ea:	689a      	ldr	r2, [r3, #8]
 c0047ec:	4b81      	ldr	r3, [pc, #516]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0047ee:	689b      	ldr	r3, [r3, #8]
 c0047f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0047f4:	429a      	cmp	r2, r3
 c0047f6:	d908      	bls.n	c00480a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0047f8:	4b7e      	ldr	r3, [pc, #504]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0047fa:	689b      	ldr	r3, [r3, #8]
 c0047fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c004800:	687b      	ldr	r3, [r7, #4]
 c004802:	689b      	ldr	r3, [r3, #8]
 c004804:	497b      	ldr	r1, [pc, #492]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004806:	4313      	orrs	r3, r2
 c004808:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c00480a:	687b      	ldr	r3, [r7, #4]
 c00480c:	681b      	ldr	r3, [r3, #0]
 c00480e:	f003 0301 	and.w	r3, r3, #1
 c004812:	2b00      	cmp	r3, #0
 c004814:	f000 8085 	beq.w	c004922 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c004818:	687b      	ldr	r3, [r7, #4]
 c00481a:	685b      	ldr	r3, [r3, #4]
 c00481c:	2b03      	cmp	r3, #3
 c00481e:	d11f      	bne.n	c004860 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c004820:	4b74      	ldr	r3, [pc, #464]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004822:	681b      	ldr	r3, [r3, #0]
 c004824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004828:	2b00      	cmp	r3, #0
 c00482a:	d101      	bne.n	c004830 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c00482c:	2301      	movs	r3, #1
 c00482e:	e0da      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c004830:	f000 fa26 	bl	c004c80 <RCC_GetSysClockFreqFromPLLSource>
 c004834:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c004836:	693b      	ldr	r3, [r7, #16]
 c004838:	4a6f      	ldr	r2, [pc, #444]	; (c0049f8 <HAL_RCC_ClockConfig+0x264>)
 c00483a:	4293      	cmp	r3, r2
 c00483c:	d947      	bls.n	c0048ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c00483e:	4b6d      	ldr	r3, [pc, #436]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004840:	689b      	ldr	r3, [r3, #8]
 c004842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c004846:	2b00      	cmp	r3, #0
 c004848:	d141      	bne.n	c0048ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00484a:	4b6a      	ldr	r3, [pc, #424]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c00484c:	689b      	ldr	r3, [r3, #8]
 c00484e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c004852:	4a68      	ldr	r2, [pc, #416]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004854:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c004858:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00485a:	2380      	movs	r3, #128	; 0x80
 c00485c:	617b      	str	r3, [r7, #20]
 c00485e:	e036      	b.n	c0048ce <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c004860:	687b      	ldr	r3, [r7, #4]
 c004862:	685b      	ldr	r3, [r3, #4]
 c004864:	2b02      	cmp	r3, #2
 c004866:	d107      	bne.n	c004878 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c004868:	4b62      	ldr	r3, [pc, #392]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c00486a:	681b      	ldr	r3, [r3, #0]
 c00486c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004870:	2b00      	cmp	r3, #0
 c004872:	d115      	bne.n	c0048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c004874:	2301      	movs	r3, #1
 c004876:	e0b6      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c004878:	687b      	ldr	r3, [r7, #4]
 c00487a:	685b      	ldr	r3, [r3, #4]
 c00487c:	2b00      	cmp	r3, #0
 c00487e:	d107      	bne.n	c004890 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c004880:	4b5c      	ldr	r3, [pc, #368]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004882:	681b      	ldr	r3, [r3, #0]
 c004884:	f003 0302 	and.w	r3, r3, #2
 c004888:	2b00      	cmp	r3, #0
 c00488a:	d109      	bne.n	c0048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c00488c:	2301      	movs	r3, #1
 c00488e:	e0aa      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c004890:	4b58      	ldr	r3, [pc, #352]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004892:	681b      	ldr	r3, [r3, #0]
 c004894:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004898:	2b00      	cmp	r3, #0
 c00489a:	d101      	bne.n	c0048a0 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c00489c:	2301      	movs	r3, #1
 c00489e:	e0a2      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c0048a0:	f000 f8b0 	bl	c004a04 <HAL_RCC_GetSysClockFreq>
 c0048a4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c0048a6:	693b      	ldr	r3, [r7, #16]
 c0048a8:	4a53      	ldr	r2, [pc, #332]	; (c0049f8 <HAL_RCC_ClockConfig+0x264>)
 c0048aa:	4293      	cmp	r3, r2
 c0048ac:	d90f      	bls.n	c0048ce <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c0048ae:	4b51      	ldr	r3, [pc, #324]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048b0:	689b      	ldr	r3, [r3, #8]
 c0048b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0048b6:	2b00      	cmp	r3, #0
 c0048b8:	d109      	bne.n	c0048ce <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0048ba:	4b4e      	ldr	r3, [pc, #312]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048bc:	689b      	ldr	r3, [r3, #8]
 c0048be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0048c2:	4a4c      	ldr	r2, [pc, #304]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0048c8:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0048ca:	2380      	movs	r3, #128	; 0x80
 c0048cc:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0048ce:	4b49      	ldr	r3, [pc, #292]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048d0:	689b      	ldr	r3, [r3, #8]
 c0048d2:	f023 0203 	bic.w	r2, r3, #3
 c0048d6:	687b      	ldr	r3, [r7, #4]
 c0048d8:	685b      	ldr	r3, [r3, #4]
 c0048da:	4946      	ldr	r1, [pc, #280]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048dc:	4313      	orrs	r3, r2
 c0048de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0048e0:	f7fd fe30 	bl	c002544 <HAL_GetTick>
 c0048e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0048e6:	e013      	b.n	c004910 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0048e8:	f7fd fe2c 	bl	c002544 <HAL_GetTick>
 c0048ec:	4602      	mov	r2, r0
 c0048ee:	68fb      	ldr	r3, [r7, #12]
 c0048f0:	1ad3      	subs	r3, r2, r3
 c0048f2:	f241 3288 	movw	r2, #5000	; 0x1388
 c0048f6:	4293      	cmp	r3, r2
 c0048f8:	d90a      	bls.n	c004910 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0048fa:	4b3e      	ldr	r3, [pc, #248]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0048fc:	689b      	ldr	r3, [r3, #8]
 c0048fe:	f003 020c 	and.w	r2, r3, #12
 c004902:	687b      	ldr	r3, [r7, #4]
 c004904:	685b      	ldr	r3, [r3, #4]
 c004906:	009b      	lsls	r3, r3, #2
 c004908:	429a      	cmp	r2, r3
 c00490a:	d001      	beq.n	c004910 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c00490c:	2303      	movs	r3, #3
 c00490e:	e06a      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c004910:	4b38      	ldr	r3, [pc, #224]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004912:	689b      	ldr	r3, [r3, #8]
 c004914:	f003 020c 	and.w	r2, r3, #12
 c004918:	687b      	ldr	r3, [r7, #4]
 c00491a:	685b      	ldr	r3, [r3, #4]
 c00491c:	009b      	lsls	r3, r3, #2
 c00491e:	429a      	cmp	r2, r3
 c004920:	d1e2      	bne.n	c0048e8 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c004922:	697b      	ldr	r3, [r7, #20]
 c004924:	2b80      	cmp	r3, #128	; 0x80
 c004926:	d105      	bne.n	c004934 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c004928:	4b32      	ldr	r3, [pc, #200]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c00492a:	689b      	ldr	r3, [r3, #8]
 c00492c:	4a31      	ldr	r2, [pc, #196]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c00492e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c004932:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c004934:	687b      	ldr	r3, [r7, #4]
 c004936:	681b      	ldr	r3, [r3, #0]
 c004938:	f003 0302 	and.w	r3, r3, #2
 c00493c:	2b00      	cmp	r3, #0
 c00493e:	d010      	beq.n	c004962 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c004940:	687b      	ldr	r3, [r7, #4]
 c004942:	689a      	ldr	r2, [r3, #8]
 c004944:	4b2b      	ldr	r3, [pc, #172]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004946:	689b      	ldr	r3, [r3, #8]
 c004948:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00494c:	429a      	cmp	r2, r3
 c00494e:	d208      	bcs.n	c004962 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c004950:	4b28      	ldr	r3, [pc, #160]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c004952:	689b      	ldr	r3, [r3, #8]
 c004954:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c004958:	687b      	ldr	r3, [r7, #4]
 c00495a:	689b      	ldr	r3, [r3, #8]
 c00495c:	4925      	ldr	r1, [pc, #148]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c00495e:	4313      	orrs	r3, r2
 c004960:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c004962:	4b23      	ldr	r3, [pc, #140]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c004964:	681b      	ldr	r3, [r3, #0]
 c004966:	f003 030f 	and.w	r3, r3, #15
 c00496a:	683a      	ldr	r2, [r7, #0]
 c00496c:	429a      	cmp	r2, r3
 c00496e:	d210      	bcs.n	c004992 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c004970:	4b1f      	ldr	r3, [pc, #124]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c004972:	681b      	ldr	r3, [r3, #0]
 c004974:	f023 020f 	bic.w	r2, r3, #15
 c004978:	491d      	ldr	r1, [pc, #116]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c00497a:	683b      	ldr	r3, [r7, #0]
 c00497c:	4313      	orrs	r3, r2
 c00497e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c004980:	4b1b      	ldr	r3, [pc, #108]	; (c0049f0 <HAL_RCC_ClockConfig+0x25c>)
 c004982:	681b      	ldr	r3, [r3, #0]
 c004984:	f003 030f 	and.w	r3, r3, #15
 c004988:	683a      	ldr	r2, [r7, #0]
 c00498a:	429a      	cmp	r2, r3
 c00498c:	d001      	beq.n	c004992 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c00498e:	2301      	movs	r3, #1
 c004990:	e029      	b.n	c0049e6 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c004992:	687b      	ldr	r3, [r7, #4]
 c004994:	681b      	ldr	r3, [r3, #0]
 c004996:	f003 0304 	and.w	r3, r3, #4
 c00499a:	2b00      	cmp	r3, #0
 c00499c:	d008      	beq.n	c0049b0 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c00499e:	4b15      	ldr	r3, [pc, #84]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0049a0:	689b      	ldr	r3, [r3, #8]
 c0049a2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0049a6:	687b      	ldr	r3, [r7, #4]
 c0049a8:	68db      	ldr	r3, [r3, #12]
 c0049aa:	4912      	ldr	r1, [pc, #72]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0049ac:	4313      	orrs	r3, r2
 c0049ae:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c0049b0:	687b      	ldr	r3, [r7, #4]
 c0049b2:	681b      	ldr	r3, [r3, #0]
 c0049b4:	f003 0308 	and.w	r3, r3, #8
 c0049b8:	2b00      	cmp	r3, #0
 c0049ba:	d009      	beq.n	c0049d0 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0049bc:	4b0d      	ldr	r3, [pc, #52]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0049be:	689b      	ldr	r3, [r3, #8]
 c0049c0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c0049c4:	687b      	ldr	r3, [r7, #4]
 c0049c6:	691b      	ldr	r3, [r3, #16]
 c0049c8:	00db      	lsls	r3, r3, #3
 c0049ca:	490a      	ldr	r1, [pc, #40]	; (c0049f4 <HAL_RCC_ClockConfig+0x260>)
 c0049cc:	4313      	orrs	r3, r2
 c0049ce:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0049d0:	f000 f8b6 	bl	c004b40 <HAL_RCC_GetHCLKFreq>
 c0049d4:	4603      	mov	r3, r0
 c0049d6:	4a09      	ldr	r2, [pc, #36]	; (c0049fc <HAL_RCC_ClockConfig+0x268>)
 c0049d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0049da:	4b09      	ldr	r3, [pc, #36]	; (c004a00 <HAL_RCC_ClockConfig+0x26c>)
 c0049dc:	681b      	ldr	r3, [r3, #0]
 c0049de:	4618      	mov	r0, r3
 c0049e0:	f7fd fd60 	bl	c0024a4 <HAL_InitTick>
 c0049e4:	4603      	mov	r3, r0
}
 c0049e6:	4618      	mov	r0, r3
 c0049e8:	3718      	adds	r7, #24
 c0049ea:	46bd      	mov	sp, r7
 c0049ec:	bd80      	pop	{r7, pc}
 c0049ee:	bf00      	nop
 c0049f0:	50022000 	.word	0x50022000
 c0049f4:	50021000 	.word	0x50021000
 c0049f8:	04c4b400 	.word	0x04c4b400
 c0049fc:	300000f8 	.word	0x300000f8
 c004a00:	300000fc 	.word	0x300000fc

0c004a04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c004a04:	b480      	push	{r7}
 c004a06:	b089      	sub	sp, #36	; 0x24
 c004a08:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c004a0a:	2300      	movs	r3, #0
 c004a0c:	61fb      	str	r3, [r7, #28]
 c004a0e:	2300      	movs	r3, #0
 c004a10:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c004a12:	4b47      	ldr	r3, [pc, #284]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a14:	689b      	ldr	r3, [r3, #8]
 c004a16:	f003 030c 	and.w	r3, r3, #12
 c004a1a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c004a1c:	4b44      	ldr	r3, [pc, #272]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a1e:	68db      	ldr	r3, [r3, #12]
 c004a20:	f003 0303 	and.w	r3, r3, #3
 c004a24:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c004a26:	693b      	ldr	r3, [r7, #16]
 c004a28:	2b00      	cmp	r3, #0
 c004a2a:	d005      	beq.n	c004a38 <HAL_RCC_GetSysClockFreq+0x34>
 c004a2c:	693b      	ldr	r3, [r7, #16]
 c004a2e:	2b0c      	cmp	r3, #12
 c004a30:	d121      	bne.n	c004a76 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c004a32:	68fb      	ldr	r3, [r7, #12]
 c004a34:	2b01      	cmp	r3, #1
 c004a36:	d11e      	bne.n	c004a76 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c004a38:	4b3d      	ldr	r3, [pc, #244]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a3a:	681b      	ldr	r3, [r3, #0]
 c004a3c:	f003 0308 	and.w	r3, r3, #8
 c004a40:	2b00      	cmp	r3, #0
 c004a42:	d107      	bne.n	c004a54 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c004a44:	4b3a      	ldr	r3, [pc, #232]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004a4a:	0a1b      	lsrs	r3, r3, #8
 c004a4c:	f003 030f 	and.w	r3, r3, #15
 c004a50:	61fb      	str	r3, [r7, #28]
 c004a52:	e005      	b.n	c004a60 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c004a54:	4b36      	ldr	r3, [pc, #216]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a56:	681b      	ldr	r3, [r3, #0]
 c004a58:	091b      	lsrs	r3, r3, #4
 c004a5a:	f003 030f 	and.w	r3, r3, #15
 c004a5e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c004a60:	4a34      	ldr	r2, [pc, #208]	; (c004b34 <HAL_RCC_GetSysClockFreq+0x130>)
 c004a62:	69fb      	ldr	r3, [r7, #28]
 c004a64:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004a68:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c004a6a:	693b      	ldr	r3, [r7, #16]
 c004a6c:	2b00      	cmp	r3, #0
 c004a6e:	d10d      	bne.n	c004a8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c004a70:	69fb      	ldr	r3, [r7, #28]
 c004a72:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c004a74:	e00a      	b.n	c004a8c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c004a76:	693b      	ldr	r3, [r7, #16]
 c004a78:	2b04      	cmp	r3, #4
 c004a7a:	d102      	bne.n	c004a82 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c004a7c:	4b2e      	ldr	r3, [pc, #184]	; (c004b38 <HAL_RCC_GetSysClockFreq+0x134>)
 c004a7e:	61bb      	str	r3, [r7, #24]
 c004a80:	e004      	b.n	c004a8c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c004a82:	693b      	ldr	r3, [r7, #16]
 c004a84:	2b08      	cmp	r3, #8
 c004a86:	d101      	bne.n	c004a8c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c004a88:	4b2c      	ldr	r3, [pc, #176]	; (c004b3c <HAL_RCC_GetSysClockFreq+0x138>)
 c004a8a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c004a8c:	693b      	ldr	r3, [r7, #16]
 c004a8e:	2b0c      	cmp	r3, #12
 c004a90:	d146      	bne.n	c004b20 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c004a92:	4b27      	ldr	r3, [pc, #156]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a94:	68db      	ldr	r3, [r3, #12]
 c004a96:	f003 0303 	and.w	r3, r3, #3
 c004a9a:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c004a9c:	4b24      	ldr	r3, [pc, #144]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004a9e:	68db      	ldr	r3, [r3, #12]
 c004aa0:	091b      	lsrs	r3, r3, #4
 c004aa2:	f003 030f 	and.w	r3, r3, #15
 c004aa6:	3301      	adds	r3, #1
 c004aa8:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c004aaa:	68bb      	ldr	r3, [r7, #8]
 c004aac:	2b02      	cmp	r3, #2
 c004aae:	d003      	beq.n	c004ab8 <HAL_RCC_GetSysClockFreq+0xb4>
 c004ab0:	68bb      	ldr	r3, [r7, #8]
 c004ab2:	2b03      	cmp	r3, #3
 c004ab4:	d00d      	beq.n	c004ad2 <HAL_RCC_GetSysClockFreq+0xce>
 c004ab6:	e019      	b.n	c004aec <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004ab8:	4a1f      	ldr	r2, [pc, #124]	; (c004b38 <HAL_RCC_GetSysClockFreq+0x134>)
 c004aba:	687b      	ldr	r3, [r7, #4]
 c004abc:	fbb2 f3f3 	udiv	r3, r2, r3
 c004ac0:	4a1b      	ldr	r2, [pc, #108]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004ac2:	68d2      	ldr	r2, [r2, #12]
 c004ac4:	0a12      	lsrs	r2, r2, #8
 c004ac6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004aca:	fb02 f303 	mul.w	r3, r2, r3
 c004ace:	617b      	str	r3, [r7, #20]
        break;
 c004ad0:	e019      	b.n	c004b06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004ad2:	4a1a      	ldr	r2, [pc, #104]	; (c004b3c <HAL_RCC_GetSysClockFreq+0x138>)
 c004ad4:	687b      	ldr	r3, [r7, #4]
 c004ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 c004ada:	4a15      	ldr	r2, [pc, #84]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004adc:	68d2      	ldr	r2, [r2, #12]
 c004ade:	0a12      	lsrs	r2, r2, #8
 c004ae0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004ae4:	fb02 f303 	mul.w	r3, r2, r3
 c004ae8:	617b      	str	r3, [r7, #20]
        break;
 c004aea:	e00c      	b.n	c004b06 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004aec:	69fa      	ldr	r2, [r7, #28]
 c004aee:	687b      	ldr	r3, [r7, #4]
 c004af0:	fbb2 f3f3 	udiv	r3, r2, r3
 c004af4:	4a0e      	ldr	r2, [pc, #56]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004af6:	68d2      	ldr	r2, [r2, #12]
 c004af8:	0a12      	lsrs	r2, r2, #8
 c004afa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004afe:	fb02 f303 	mul.w	r3, r2, r3
 c004b02:	617b      	str	r3, [r7, #20]
        break;
 c004b04:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c004b06:	4b0a      	ldr	r3, [pc, #40]	; (c004b30 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004b08:	68db      	ldr	r3, [r3, #12]
 c004b0a:	0e5b      	lsrs	r3, r3, #25
 c004b0c:	f003 0303 	and.w	r3, r3, #3
 c004b10:	3301      	adds	r3, #1
 c004b12:	005b      	lsls	r3, r3, #1
 c004b14:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c004b16:	697a      	ldr	r2, [r7, #20]
 c004b18:	683b      	ldr	r3, [r7, #0]
 c004b1a:	fbb2 f3f3 	udiv	r3, r2, r3
 c004b1e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c004b20:	69bb      	ldr	r3, [r7, #24]
}
 c004b22:	4618      	mov	r0, r3
 c004b24:	3724      	adds	r7, #36	; 0x24
 c004b26:	46bd      	mov	sp, r7
 c004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004b2c:	4770      	bx	lr
 c004b2e:	bf00      	nop
 c004b30:	50021000 	.word	0x50021000
 c004b34:	0c008c98 	.word	0x0c008c98
 c004b38:	00f42400 	.word	0x00f42400
 c004b3c:	007a1200 	.word	0x007a1200

0c004b40 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c004b40:	b580      	push	{r7, lr}
 c004b42:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c004b44:	f7ff ff5e 	bl	c004a04 <HAL_RCC_GetSysClockFreq>
 c004b48:	4602      	mov	r2, r0
 c004b4a:	4b05      	ldr	r3, [pc, #20]	; (c004b60 <HAL_RCC_GetHCLKFreq+0x20>)
 c004b4c:	689b      	ldr	r3, [r3, #8]
 c004b4e:	091b      	lsrs	r3, r3, #4
 c004b50:	f003 030f 	and.w	r3, r3, #15
 c004b54:	4903      	ldr	r1, [pc, #12]	; (c004b64 <HAL_RCC_GetHCLKFreq+0x24>)
 c004b56:	5ccb      	ldrb	r3, [r1, r3]
 c004b58:	fa22 f303 	lsr.w	r3, r2, r3
}
 c004b5c:	4618      	mov	r0, r3
 c004b5e:	bd80      	pop	{r7, pc}
 c004b60:	50021000 	.word	0x50021000
 c004b64:	0c008c80 	.word	0x0c008c80

0c004b68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c004b68:	b580      	push	{r7, lr}
 c004b6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c004b6c:	f7ff ffe8 	bl	c004b40 <HAL_RCC_GetHCLKFreq>
 c004b70:	4602      	mov	r2, r0
 c004b72:	4b05      	ldr	r3, [pc, #20]	; (c004b88 <HAL_RCC_GetPCLK1Freq+0x20>)
 c004b74:	689b      	ldr	r3, [r3, #8]
 c004b76:	0a1b      	lsrs	r3, r3, #8
 c004b78:	f003 0307 	and.w	r3, r3, #7
 c004b7c:	4903      	ldr	r1, [pc, #12]	; (c004b8c <HAL_RCC_GetPCLK1Freq+0x24>)
 c004b7e:	5ccb      	ldrb	r3, [r1, r3]
 c004b80:	fa22 f303 	lsr.w	r3, r2, r3
}
 c004b84:	4618      	mov	r0, r3
 c004b86:	bd80      	pop	{r7, pc}
 c004b88:	50021000 	.word	0x50021000
 c004b8c:	0c008c90 	.word	0x0c008c90

0c004b90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c004b90:	b580      	push	{r7, lr}
 c004b92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c004b94:	f7ff ffd4 	bl	c004b40 <HAL_RCC_GetHCLKFreq>
 c004b98:	4602      	mov	r2, r0
 c004b9a:	4b05      	ldr	r3, [pc, #20]	; (c004bb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 c004b9c:	689b      	ldr	r3, [r3, #8]
 c004b9e:	0adb      	lsrs	r3, r3, #11
 c004ba0:	f003 0307 	and.w	r3, r3, #7
 c004ba4:	4903      	ldr	r1, [pc, #12]	; (c004bb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 c004ba6:	5ccb      	ldrb	r3, [r1, r3]
 c004ba8:	fa22 f303 	lsr.w	r3, r2, r3
}
 c004bac:	4618      	mov	r0, r3
 c004bae:	bd80      	pop	{r7, pc}
 c004bb0:	50021000 	.word	0x50021000
 c004bb4:	0c008c90 	.word	0x0c008c90

0c004bb8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c004bb8:	b580      	push	{r7, lr}
 c004bba:	b086      	sub	sp, #24
 c004bbc:	af00      	add	r7, sp, #0
 c004bbe:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c004bc0:	2300      	movs	r3, #0
 c004bc2:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c004bc4:	4b2c      	ldr	r3, [pc, #176]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004bcc:	2b00      	cmp	r3, #0
 c004bce:	d003      	beq.n	c004bd8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c004bd0:	f7ff f85c 	bl	c003c8c <HAL_PWREx_GetVoltageRange>
 c004bd4:	6138      	str	r0, [r7, #16]
 c004bd6:	e014      	b.n	c004c02 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c004bd8:	4b27      	ldr	r3, [pc, #156]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004bda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004bdc:	4a26      	ldr	r2, [pc, #152]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004bde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004be2:	6593      	str	r3, [r2, #88]	; 0x58
 c004be4:	4b24      	ldr	r3, [pc, #144]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004be6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004be8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004bec:	60fb      	str	r3, [r7, #12]
 c004bee:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c004bf0:	f7ff f84c 	bl	c003c8c <HAL_PWREx_GetVoltageRange>
 c004bf4:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c004bf6:	4b20      	ldr	r3, [pc, #128]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004bf8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004bfa:	4a1f      	ldr	r2, [pc, #124]	; (c004c78 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004bfc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004c00:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c004c02:	693b      	ldr	r3, [r7, #16]
 c004c04:	2b00      	cmp	r3, #0
 c004c06:	d003      	beq.n	c004c10 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c004c08:	693b      	ldr	r3, [r7, #16]
 c004c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004c0e:	d10b      	bne.n	c004c28 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c004c10:	687b      	ldr	r3, [r7, #4]
 c004c12:	2b80      	cmp	r3, #128	; 0x80
 c004c14:	d919      	bls.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c004c16:	687b      	ldr	r3, [r7, #4]
 c004c18:	2ba0      	cmp	r3, #160	; 0xa0
 c004c1a:	d902      	bls.n	c004c22 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c004c1c:	2302      	movs	r3, #2
 c004c1e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c004c20:	e013      	b.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c004c22:	2301      	movs	r3, #1
 c004c24:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c004c26:	e010      	b.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c004c28:	687b      	ldr	r3, [r7, #4]
 c004c2a:	2b80      	cmp	r3, #128	; 0x80
 c004c2c:	d902      	bls.n	c004c34 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c004c2e:	2303      	movs	r3, #3
 c004c30:	617b      	str	r3, [r7, #20]
 c004c32:	e00a      	b.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c004c34:	687b      	ldr	r3, [r7, #4]
 c004c36:	2b80      	cmp	r3, #128	; 0x80
 c004c38:	d102      	bne.n	c004c40 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c004c3a:	2302      	movs	r3, #2
 c004c3c:	617b      	str	r3, [r7, #20]
 c004c3e:	e004      	b.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c004c40:	687b      	ldr	r3, [r7, #4]
 c004c42:	2b70      	cmp	r3, #112	; 0x70
 c004c44:	d101      	bne.n	c004c4a <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c004c46:	2301      	movs	r3, #1
 c004c48:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c004c4a:	4b0c      	ldr	r3, [pc, #48]	; (c004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c004c4c:	681b      	ldr	r3, [r3, #0]
 c004c4e:	f023 020f 	bic.w	r2, r3, #15
 c004c52:	490a      	ldr	r1, [pc, #40]	; (c004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c004c54:	697b      	ldr	r3, [r7, #20]
 c004c56:	4313      	orrs	r3, r2
 c004c58:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c004c5a:	4b08      	ldr	r3, [pc, #32]	; (c004c7c <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c004c5c:	681b      	ldr	r3, [r3, #0]
 c004c5e:	f003 030f 	and.w	r3, r3, #15
 c004c62:	697a      	ldr	r2, [r7, #20]
 c004c64:	429a      	cmp	r2, r3
 c004c66:	d001      	beq.n	c004c6c <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c004c68:	2301      	movs	r3, #1
 c004c6a:	e000      	b.n	c004c6e <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c004c6c:	2300      	movs	r3, #0
}
 c004c6e:	4618      	mov	r0, r3
 c004c70:	3718      	adds	r7, #24
 c004c72:	46bd      	mov	sp, r7
 c004c74:	bd80      	pop	{r7, pc}
 c004c76:	bf00      	nop
 c004c78:	50021000 	.word	0x50021000
 c004c7c:	50022000 	.word	0x50022000

0c004c80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c004c80:	b480      	push	{r7}
 c004c82:	b087      	sub	sp, #28
 c004c84:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c004c86:	4b31      	ldr	r3, [pc, #196]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004c88:	68db      	ldr	r3, [r3, #12]
 c004c8a:	f003 0303 	and.w	r3, r3, #3
 c004c8e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c004c90:	4b2e      	ldr	r3, [pc, #184]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004c92:	68db      	ldr	r3, [r3, #12]
 c004c94:	091b      	lsrs	r3, r3, #4
 c004c96:	f003 030f 	and.w	r3, r3, #15
 c004c9a:	3301      	adds	r3, #1
 c004c9c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c004c9e:	68fb      	ldr	r3, [r7, #12]
 c004ca0:	2b03      	cmp	r3, #3
 c004ca2:	d015      	beq.n	c004cd0 <RCC_GetSysClockFreqFromPLLSource+0x50>
 c004ca4:	68fb      	ldr	r3, [r7, #12]
 c004ca6:	2b03      	cmp	r3, #3
 c004ca8:	d839      	bhi.n	c004d1e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c004caa:	68fb      	ldr	r3, [r7, #12]
 c004cac:	2b01      	cmp	r3, #1
 c004cae:	d01c      	beq.n	c004cea <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c004cb0:	68fb      	ldr	r3, [r7, #12]
 c004cb2:	2b02      	cmp	r3, #2
 c004cb4:	d133      	bne.n	c004d1e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004cb6:	4a26      	ldr	r2, [pc, #152]	; (c004d50 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c004cb8:	68bb      	ldr	r3, [r7, #8]
 c004cba:	fbb2 f3f3 	udiv	r3, r2, r3
 c004cbe:	4a23      	ldr	r2, [pc, #140]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004cc0:	68d2      	ldr	r2, [r2, #12]
 c004cc2:	0a12      	lsrs	r2, r2, #8
 c004cc4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004cc8:	fb02 f303 	mul.w	r3, r2, r3
 c004ccc:	613b      	str	r3, [r7, #16]
      break;
 c004cce:	e029      	b.n	c004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004cd0:	4a20      	ldr	r2, [pc, #128]	; (c004d54 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c004cd2:	68bb      	ldr	r3, [r7, #8]
 c004cd4:	fbb2 f3f3 	udiv	r3, r2, r3
 c004cd8:	4a1c      	ldr	r2, [pc, #112]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004cda:	68d2      	ldr	r2, [r2, #12]
 c004cdc:	0a12      	lsrs	r2, r2, #8
 c004cde:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004ce2:	fb02 f303 	mul.w	r3, r2, r3
 c004ce6:	613b      	str	r3, [r7, #16]
      break;
 c004ce8:	e01c      	b.n	c004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c004cea:	4b18      	ldr	r3, [pc, #96]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004cec:	681b      	ldr	r3, [r3, #0]
 c004cee:	f003 0308 	and.w	r3, r3, #8
 c004cf2:	2b00      	cmp	r3, #0
 c004cf4:	d107      	bne.n	c004d06 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c004cf6:	4b15      	ldr	r3, [pc, #84]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004cf8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004cfc:	0a1b      	lsrs	r3, r3, #8
 c004cfe:	f003 030f 	and.w	r3, r3, #15
 c004d02:	617b      	str	r3, [r7, #20]
 c004d04:	e005      	b.n	c004d12 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c004d06:	4b11      	ldr	r3, [pc, #68]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004d08:	681b      	ldr	r3, [r3, #0]
 c004d0a:	091b      	lsrs	r3, r3, #4
 c004d0c:	f003 030f 	and.w	r3, r3, #15
 c004d10:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c004d12:	4a11      	ldr	r2, [pc, #68]	; (c004d58 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c004d14:	697b      	ldr	r3, [r7, #20]
 c004d16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004d1a:	613b      	str	r3, [r7, #16]
        break;
 c004d1c:	e002      	b.n	c004d24 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c004d1e:	2300      	movs	r3, #0
 c004d20:	613b      	str	r3, [r7, #16]
      break;
 c004d22:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c004d24:	4b09      	ldr	r3, [pc, #36]	; (c004d4c <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004d26:	68db      	ldr	r3, [r3, #12]
 c004d28:	0e5b      	lsrs	r3, r3, #25
 c004d2a:	f003 0303 	and.w	r3, r3, #3
 c004d2e:	3301      	adds	r3, #1
 c004d30:	005b      	lsls	r3, r3, #1
 c004d32:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c004d34:	693a      	ldr	r2, [r7, #16]
 c004d36:	687b      	ldr	r3, [r7, #4]
 c004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 c004d3c:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c004d3e:	683b      	ldr	r3, [r7, #0]
}
 c004d40:	4618      	mov	r0, r3
 c004d42:	371c      	adds	r7, #28
 c004d44:	46bd      	mov	sp, r7
 c004d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004d4a:	4770      	bx	lr
 c004d4c:	50021000 	.word	0x50021000
 c004d50:	00f42400 	.word	0x00f42400
 c004d54:	007a1200 	.word	0x007a1200
 c004d58:	0c008c98 	.word	0x0c008c98

0c004d5c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c004d5c:	b580      	push	{r7, lr}
 c004d5e:	b088      	sub	sp, #32
 c004d60:	af00      	add	r7, sp, #0
 c004d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c004d64:	2300      	movs	r3, #0
 c004d66:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c004d68:	2300      	movs	r3, #0
 c004d6a:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c004d6c:	687b      	ldr	r3, [r7, #4]
 c004d6e:	681b      	ldr	r3, [r3, #0]
 c004d70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c004d74:	2b00      	cmp	r3, #0
 c004d76:	d040      	beq.n	c004dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c004d78:	687b      	ldr	r3, [r7, #4]
 c004d7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004d7c:	2b80      	cmp	r3, #128	; 0x80
 c004d7e:	d02a      	beq.n	c004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c004d80:	2b80      	cmp	r3, #128	; 0x80
 c004d82:	d825      	bhi.n	c004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c004d84:	2b60      	cmp	r3, #96	; 0x60
 c004d86:	d026      	beq.n	c004dd6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c004d88:	2b60      	cmp	r3, #96	; 0x60
 c004d8a:	d821      	bhi.n	c004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c004d8c:	2b40      	cmp	r3, #64	; 0x40
 c004d8e:	d006      	beq.n	c004d9e <HAL_RCCEx_PeriphCLKConfig+0x42>
 c004d90:	2b40      	cmp	r3, #64	; 0x40
 c004d92:	d81d      	bhi.n	c004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c004d94:	2b00      	cmp	r3, #0
 c004d96:	d009      	beq.n	c004dac <HAL_RCCEx_PeriphCLKConfig+0x50>
 c004d98:	2b20      	cmp	r3, #32
 c004d9a:	d010      	beq.n	c004dbe <HAL_RCCEx_PeriphCLKConfig+0x62>
 c004d9c:	e018      	b.n	c004dd0 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c004d9e:	4b8f      	ldr	r3, [pc, #572]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004da0:	68db      	ldr	r3, [r3, #12]
 c004da2:	4a8e      	ldr	r2, [pc, #568]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004da8:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004daa:	e015      	b.n	c004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004dac:	687b      	ldr	r3, [r7, #4]
 c004dae:	3304      	adds	r3, #4
 c004db0:	2100      	movs	r1, #0
 c004db2:	4618      	mov	r0, r3
 c004db4:	f000 fb56 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c004db8:	4603      	mov	r3, r0
 c004dba:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004dbc:	e00c      	b.n	c004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c004dbe:	687b      	ldr	r3, [r7, #4]
 c004dc0:	3320      	adds	r3, #32
 c004dc2:	2100      	movs	r1, #0
 c004dc4:	4618      	mov	r0, r3
 c004dc6:	f000 fc33 	bl	c005630 <RCCEx_PLLSAI2_Config>
 c004dca:	4603      	mov	r3, r0
 c004dcc:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004dce:	e003      	b.n	c004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004dd0:	2301      	movs	r3, #1
 c004dd2:	77fb      	strb	r3, [r7, #31]
        break;
 c004dd4:	e000      	b.n	c004dd8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c004dd6:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004dd8:	7ffb      	ldrb	r3, [r7, #31]
 c004dda:	2b00      	cmp	r3, #0
 c004ddc:	d10b      	bne.n	c004df6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c004dde:	4b7f      	ldr	r3, [pc, #508]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004de0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004de4:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c004de8:	687b      	ldr	r3, [r7, #4]
 c004dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004dec:	497b      	ldr	r1, [pc, #492]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004dee:	4313      	orrs	r3, r2
 c004df0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c004df4:	e001      	b.n	c004dfa <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004df6:	7ffb      	ldrb	r3, [r7, #31]
 c004df8:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c004dfa:	687b      	ldr	r3, [r7, #4]
 c004dfc:	681b      	ldr	r3, [r3, #0]
 c004dfe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c004e02:	2b00      	cmp	r3, #0
 c004e04:	d047      	beq.n	c004e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c004e06:	687b      	ldr	r3, [r7, #4]
 c004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c004e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004e0e:	d030      	beq.n	c004e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004e10:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004e14:	d82a      	bhi.n	c004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004e16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004e1a:	d02a      	beq.n	c004e72 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004e1c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004e20:	d824      	bhi.n	c004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004e22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e26:	d008      	beq.n	c004e3a <HAL_RCCEx_PeriphCLKConfig+0xde>
 c004e28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e2c:	d81e      	bhi.n	c004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004e2e:	2b00      	cmp	r3, #0
 c004e30:	d00a      	beq.n	c004e48 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c004e32:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004e36:	d010      	beq.n	c004e5a <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c004e38:	e018      	b.n	c004e6c <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c004e3a:	4b68      	ldr	r3, [pc, #416]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004e3c:	68db      	ldr	r3, [r3, #12]
 c004e3e:	4a67      	ldr	r2, [pc, #412]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004e40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004e44:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004e46:	e015      	b.n	c004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004e48:	687b      	ldr	r3, [r7, #4]
 c004e4a:	3304      	adds	r3, #4
 c004e4c:	2100      	movs	r1, #0
 c004e4e:	4618      	mov	r0, r3
 c004e50:	f000 fb08 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c004e54:	4603      	mov	r3, r0
 c004e56:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004e58:	e00c      	b.n	c004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c004e5a:	687b      	ldr	r3, [r7, #4]
 c004e5c:	3320      	adds	r3, #32
 c004e5e:	2100      	movs	r1, #0
 c004e60:	4618      	mov	r0, r3
 c004e62:	f000 fbe5 	bl	c005630 <RCCEx_PLLSAI2_Config>
 c004e66:	4603      	mov	r3, r0
 c004e68:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c004e6a:	e003      	b.n	c004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004e6c:	2301      	movs	r3, #1
 c004e6e:	77fb      	strb	r3, [r7, #31]
        break;
 c004e70:	e000      	b.n	c004e74 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c004e72:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004e74:	7ffb      	ldrb	r3, [r7, #31]
 c004e76:	2b00      	cmp	r3, #0
 c004e78:	d10b      	bne.n	c004e92 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c004e7a:	4b58      	ldr	r3, [pc, #352]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004e7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004e80:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c004e84:	687b      	ldr	r3, [r7, #4]
 c004e86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c004e88:	4954      	ldr	r1, [pc, #336]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004e8a:	4313      	orrs	r3, r2
 c004e8c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c004e90:	e001      	b.n	c004e96 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004e92:	7ffb      	ldrb	r3, [r7, #31]
 c004e94:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c004e96:	687b      	ldr	r3, [r7, #4]
 c004e98:	681b      	ldr	r3, [r3, #0]
 c004e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004e9e:	2b00      	cmp	r3, #0
 c004ea0:	f000 80ab 	beq.w	c004ffa <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c004ea4:	2300      	movs	r3, #0
 c004ea6:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004ea8:	4b4c      	ldr	r3, [pc, #304]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004eac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004eb0:	2b00      	cmp	r3, #0
 c004eb2:	d10d      	bne.n	c004ed0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c004eb4:	4b49      	ldr	r3, [pc, #292]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004eb8:	4a48      	ldr	r2, [pc, #288]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004eba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004ebe:	6593      	str	r3, [r2, #88]	; 0x58
 c004ec0:	4b46      	ldr	r3, [pc, #280]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004ec8:	60fb      	str	r3, [r7, #12]
 c004eca:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c004ecc:	2301      	movs	r3, #1
 c004ece:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c004ed0:	4b43      	ldr	r3, [pc, #268]	; (c004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004ed2:	681b      	ldr	r3, [r3, #0]
 c004ed4:	4a42      	ldr	r2, [pc, #264]	; (c004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004ed6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004eda:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004edc:	f7fd fb32 	bl	c002544 <HAL_GetTick>
 c004ee0:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004ee2:	e00f      	b.n	c004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c004ee4:	f7fd fb2e 	bl	c002544 <HAL_GetTick>
 c004ee8:	4602      	mov	r2, r0
 c004eea:	693b      	ldr	r3, [r7, #16]
 c004eec:	1ad3      	subs	r3, r2, r3
 c004eee:	2b02      	cmp	r3, #2
 c004ef0:	d908      	bls.n	c004f04 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004ef2:	4b3b      	ldr	r3, [pc, #236]	; (c004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004ef4:	681b      	ldr	r3, [r3, #0]
 c004ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004efa:	2b00      	cmp	r3, #0
 c004efc:	d109      	bne.n	c004f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c004efe:	2303      	movs	r3, #3
 c004f00:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c004f02:	e006      	b.n	c004f12 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004f04:	4b36      	ldr	r3, [pc, #216]	; (c004fe0 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c004f06:	681b      	ldr	r3, [r3, #0]
 c004f08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004f0c:	2b00      	cmp	r3, #0
 c004f0e:	d0e9      	beq.n	c004ee4 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c004f10:	e000      	b.n	c004f14 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c004f12:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c004f14:	7ffb      	ldrb	r3, [r7, #31]
 c004f16:	2b00      	cmp	r3, #0
 c004f18:	d164      	bne.n	c004fe4 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c004f1a:	4b30      	ldr	r3, [pc, #192]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f20:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004f24:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c004f26:	69bb      	ldr	r3, [r7, #24]
 c004f28:	2b00      	cmp	r3, #0
 c004f2a:	d01f      	beq.n	c004f6c <HAL_RCCEx_PeriphCLKConfig+0x210>
 c004f2c:	687b      	ldr	r3, [r7, #4]
 c004f2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f32:	69ba      	ldr	r2, [r7, #24]
 c004f34:	429a      	cmp	r2, r3
 c004f36:	d019      	beq.n	c004f6c <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c004f38:	4b28      	ldr	r3, [pc, #160]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f3e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c004f42:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c004f44:	4b25      	ldr	r3, [pc, #148]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f4a:	4a24      	ldr	r2, [pc, #144]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004f50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c004f54:	4b21      	ldr	r3, [pc, #132]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f5a:	4a20      	ldr	r2, [pc, #128]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f5c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c004f60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c004f64:	4a1d      	ldr	r2, [pc, #116]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f66:	69bb      	ldr	r3, [r7, #24]
 c004f68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c004f6c:	69bb      	ldr	r3, [r7, #24]
 c004f6e:	f003 0301 	and.w	r3, r3, #1
 c004f72:	2b00      	cmp	r3, #0
 c004f74:	d01f      	beq.n	c004fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c004f76:	f7fd fae5 	bl	c002544 <HAL_GetTick>
 c004f7a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004f7c:	e012      	b.n	c004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004f7e:	f7fd fae1 	bl	c002544 <HAL_GetTick>
 c004f82:	4602      	mov	r2, r0
 c004f84:	693b      	ldr	r3, [r7, #16]
 c004f86:	1ad3      	subs	r3, r2, r3
 c004f88:	f241 3288 	movw	r2, #5000	; 0x1388
 c004f8c:	4293      	cmp	r3, r2
 c004f8e:	d909      	bls.n	c004fa4 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004f90:	4b12      	ldr	r3, [pc, #72]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004f92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004f96:	f003 0302 	and.w	r3, r3, #2
 c004f9a:	2b00      	cmp	r3, #0
 c004f9c:	d10a      	bne.n	c004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c004f9e:	2303      	movs	r3, #3
 c004fa0:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c004fa2:	e007      	b.n	c004fb4 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004fa4:	4b0d      	ldr	r3, [pc, #52]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004fa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004faa:	f003 0302 	and.w	r3, r3, #2
 c004fae:	2b00      	cmp	r3, #0
 c004fb0:	d0e5      	beq.n	c004f7e <HAL_RCCEx_PeriphCLKConfig+0x222>
 c004fb2:	e000      	b.n	c004fb6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c004fb4:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c004fb6:	7ffb      	ldrb	r3, [r7, #31]
 c004fb8:	2b00      	cmp	r3, #0
 c004fba:	d10c      	bne.n	c004fd6 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c004fbc:	4b07      	ldr	r3, [pc, #28]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004fc2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c004fc6:	687b      	ldr	r3, [r7, #4]
 c004fc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004fcc:	4903      	ldr	r1, [pc, #12]	; (c004fdc <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004fce:	4313      	orrs	r3, r2
 c004fd0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c004fd4:	e008      	b.n	c004fe8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c004fd6:	7ffb      	ldrb	r3, [r7, #31]
 c004fd8:	77bb      	strb	r3, [r7, #30]
 c004fda:	e005      	b.n	c004fe8 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c004fdc:	50021000 	.word	0x50021000
 c004fe0:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004fe4:	7ffb      	ldrb	r3, [r7, #31]
 c004fe6:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004fe8:	7dfb      	ldrb	r3, [r7, #23]
 c004fea:	2b01      	cmp	r3, #1
 c004fec:	d105      	bne.n	c004ffa <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c004fee:	4b9c      	ldr	r3, [pc, #624]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004ff0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004ff2:	4a9b      	ldr	r2, [pc, #620]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004ff4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004ff8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c004ffa:	687b      	ldr	r3, [r7, #4]
 c004ffc:	681b      	ldr	r3, [r3, #0]
 c004ffe:	f003 0301 	and.w	r3, r3, #1
 c005002:	2b00      	cmp	r3, #0
 c005004:	d00a      	beq.n	c00501c <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c005006:	4b96      	ldr	r3, [pc, #600]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00500c:	f023 0203 	bic.w	r2, r3, #3
 c005010:	687b      	ldr	r3, [r7, #4]
 c005012:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005014:	4992      	ldr	r1, [pc, #584]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005016:	4313      	orrs	r3, r2
 c005018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c00501c:	687b      	ldr	r3, [r7, #4]
 c00501e:	681b      	ldr	r3, [r3, #0]
 c005020:	f003 0302 	and.w	r3, r3, #2
 c005024:	2b00      	cmp	r3, #0
 c005026:	d00a      	beq.n	c00503e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c005028:	4b8d      	ldr	r3, [pc, #564]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00502a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00502e:	f023 020c 	bic.w	r2, r3, #12
 c005032:	687b      	ldr	r3, [r7, #4]
 c005034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005036:	498a      	ldr	r1, [pc, #552]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005038:	4313      	orrs	r3, r2
 c00503a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c00503e:	687b      	ldr	r3, [r7, #4]
 c005040:	681b      	ldr	r3, [r3, #0]
 c005042:	f003 0304 	and.w	r3, r3, #4
 c005046:	2b00      	cmp	r3, #0
 c005048:	d00a      	beq.n	c005060 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c00504a:	4b85      	ldr	r3, [pc, #532]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00504c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005050:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c005054:	687b      	ldr	r3, [r7, #4]
 c005056:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c005058:	4981      	ldr	r1, [pc, #516]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00505a:	4313      	orrs	r3, r2
 c00505c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c005060:	687b      	ldr	r3, [r7, #4]
 c005062:	681b      	ldr	r3, [r3, #0]
 c005064:	f003 0308 	and.w	r3, r3, #8
 c005068:	2b00      	cmp	r3, #0
 c00506a:	d00a      	beq.n	c005082 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c00506c:	4b7c      	ldr	r3, [pc, #496]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00506e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005072:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c005076:	687b      	ldr	r3, [r7, #4]
 c005078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00507a:	4979      	ldr	r1, [pc, #484]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00507c:	4313      	orrs	r3, r2
 c00507e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c005082:	687b      	ldr	r3, [r7, #4]
 c005084:	681b      	ldr	r3, [r3, #0]
 c005086:	f003 0310 	and.w	r3, r3, #16
 c00508a:	2b00      	cmp	r3, #0
 c00508c:	d00a      	beq.n	c0050a4 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c00508e:	4b74      	ldr	r3, [pc, #464]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005090:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005094:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c005098:	687b      	ldr	r3, [r7, #4]
 c00509a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00509c:	4970      	ldr	r1, [pc, #448]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00509e:	4313      	orrs	r3, r2
 c0050a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0050a4:	687b      	ldr	r3, [r7, #4]
 c0050a6:	681b      	ldr	r3, [r3, #0]
 c0050a8:	f003 0320 	and.w	r3, r3, #32
 c0050ac:	2b00      	cmp	r3, #0
 c0050ae:	d00a      	beq.n	c0050c6 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0050b0:	4b6b      	ldr	r3, [pc, #428]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0050b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0050b6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c0050ba:	687b      	ldr	r3, [r7, #4]
 c0050bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0050be:	4968      	ldr	r1, [pc, #416]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0050c0:	4313      	orrs	r3, r2
 c0050c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0050c6:	687b      	ldr	r3, [r7, #4]
 c0050c8:	681b      	ldr	r3, [r3, #0]
 c0050ca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0050ce:	2b00      	cmp	r3, #0
 c0050d0:	d00a      	beq.n	c0050e8 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c0050d2:	4b63      	ldr	r3, [pc, #396]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0050d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0050d8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c0050dc:	687b      	ldr	r3, [r7, #4]
 c0050de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0050e0:	495f      	ldr	r1, [pc, #380]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0050e2:	4313      	orrs	r3, r2
 c0050e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c0050e8:	687b      	ldr	r3, [r7, #4]
 c0050ea:	681b      	ldr	r3, [r3, #0]
 c0050ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0050f0:	2b00      	cmp	r3, #0
 c0050f2:	d00a      	beq.n	c00510a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c0050f4:	4b5a      	ldr	r3, [pc, #360]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0050f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0050fa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0050fe:	687b      	ldr	r3, [r7, #4]
 c005100:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005102:	4957      	ldr	r1, [pc, #348]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005104:	4313      	orrs	r3, r2
 c005106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c00510a:	687b      	ldr	r3, [r7, #4]
 c00510c:	681b      	ldr	r3, [r3, #0]
 c00510e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c005112:	2b00      	cmp	r3, #0
 c005114:	d00a      	beq.n	c00512c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c005116:	4b52      	ldr	r3, [pc, #328]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005118:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00511c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c005120:	687b      	ldr	r3, [r7, #4]
 c005122:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c005124:	494e      	ldr	r1, [pc, #312]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005126:	4313      	orrs	r3, r2
 c005128:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c00512c:	687b      	ldr	r3, [r7, #4]
 c00512e:	681b      	ldr	r3, [r3, #0]
 c005130:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c005134:	2b00      	cmp	r3, #0
 c005136:	d031      	beq.n	c00519c <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c005138:	687b      	ldr	r3, [r7, #4]
 c00513a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00513c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c005140:	d00e      	beq.n	c005160 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c005142:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c005146:	d814      	bhi.n	c005172 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c005148:	2b00      	cmp	r3, #0
 c00514a:	d015      	beq.n	c005178 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c00514c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c005150:	d10f      	bne.n	c005172 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c005152:	4b43      	ldr	r3, [pc, #268]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005154:	68db      	ldr	r3, [r3, #12]
 c005156:	4a42      	ldr	r2, [pc, #264]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005158:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00515c:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c00515e:	e00c      	b.n	c00517a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c005160:	687b      	ldr	r3, [r7, #4]
 c005162:	3304      	adds	r3, #4
 c005164:	2100      	movs	r1, #0
 c005166:	4618      	mov	r0, r3
 c005168:	f000 f97c 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c00516c:	4603      	mov	r3, r0
 c00516e:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c005170:	e003      	b.n	c00517a <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c005172:	2301      	movs	r3, #1
 c005174:	77fb      	strb	r3, [r7, #31]
        break;
 c005176:	e000      	b.n	c00517a <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c005178:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00517a:	7ffb      	ldrb	r3, [r7, #31]
 c00517c:	2b00      	cmp	r3, #0
 c00517e:	d10b      	bne.n	c005198 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c005180:	4b37      	ldr	r3, [pc, #220]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005186:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c00518a:	687b      	ldr	r3, [r7, #4]
 c00518c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00518e:	4934      	ldr	r1, [pc, #208]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005190:	4313      	orrs	r3, r2
 c005192:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c005196:	e001      	b.n	c00519c <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c005198:	7ffb      	ldrb	r3, [r7, #31]
 c00519a:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c00519c:	687b      	ldr	r3, [r7, #4]
 c00519e:	681b      	ldr	r3, [r3, #0]
 c0051a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0051a4:	2b00      	cmp	r3, #0
 c0051a6:	d00a      	beq.n	c0051be <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0051a8:	4b2d      	ldr	r3, [pc, #180]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0051ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c0051b2:	687b      	ldr	r3, [r7, #4]
 c0051b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0051b6:	492a      	ldr	r1, [pc, #168]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051b8:	4313      	orrs	r3, r2
 c0051ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0051be:	687b      	ldr	r3, [r7, #4]
 c0051c0:	681b      	ldr	r3, [r3, #0]
 c0051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0051c6:	2b00      	cmp	r3, #0
 c0051c8:	d00a      	beq.n	c0051e0 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0051ca:	4b25      	ldr	r3, [pc, #148]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0051d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c0051d4:	687b      	ldr	r3, [r7, #4]
 c0051d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0051d8:	4921      	ldr	r1, [pc, #132]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051da:	4313      	orrs	r3, r2
 c0051dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c0051e0:	687b      	ldr	r3, [r7, #4]
 c0051e2:	681b      	ldr	r3, [r3, #0]
 c0051e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0051e8:	2b00      	cmp	r3, #0
 c0051ea:	d00a      	beq.n	c005202 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c0051ec:	4b1c      	ldr	r3, [pc, #112]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0051f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c0051f6:	687b      	ldr	r3, [r7, #4]
 c0051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0051fa:	4919      	ldr	r1, [pc, #100]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0051fc:	4313      	orrs	r3, r2
 c0051fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c005202:	687b      	ldr	r3, [r7, #4]
 c005204:	681b      	ldr	r3, [r3, #0]
 c005206:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00520a:	2b00      	cmp	r3, #0
 c00520c:	d00a      	beq.n	c005224 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c00520e:	4b14      	ldr	r3, [pc, #80]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005210:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005214:	f023 0203 	bic.w	r2, r3, #3
 c005218:	687b      	ldr	r3, [r7, #4]
 c00521a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00521c:	4910      	ldr	r1, [pc, #64]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00521e:	4313      	orrs	r3, r2
 c005220:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c005224:	687b      	ldr	r3, [r7, #4]
 c005226:	681b      	ldr	r3, [r3, #0]
 c005228:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c00522c:	2b00      	cmp	r3, #0
 c00522e:	d02b      	beq.n	c005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c005230:	4b0b      	ldr	r3, [pc, #44]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005232:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005236:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00523a:	687b      	ldr	r3, [r7, #4]
 c00523c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00523e:	4908      	ldr	r1, [pc, #32]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005240:	4313      	orrs	r3, r2
 c005242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c005246:	687b      	ldr	r3, [r7, #4]
 c005248:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00524a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00524e:	d109      	bne.n	c005264 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c005250:	4b03      	ldr	r3, [pc, #12]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005252:	68db      	ldr	r3, [r3, #12]
 c005254:	4a02      	ldr	r2, [pc, #8]	; (c005260 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c005256:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00525a:	60d3      	str	r3, [r2, #12]
 c00525c:	e014      	b.n	c005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c00525e:	bf00      	nop
 c005260:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c005264:	687b      	ldr	r3, [r7, #4]
 c005266:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c005268:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00526c:	d10c      	bne.n	c005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00526e:	687b      	ldr	r3, [r7, #4]
 c005270:	3304      	adds	r3, #4
 c005272:	2101      	movs	r1, #1
 c005274:	4618      	mov	r0, r3
 c005276:	f000 f8f5 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c00527a:	4603      	mov	r3, r0
 c00527c:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c00527e:	7ffb      	ldrb	r3, [r7, #31]
 c005280:	2b00      	cmp	r3, #0
 c005282:	d001      	beq.n	c005288 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c005284:	7ffb      	ldrb	r3, [r7, #31]
 c005286:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c005288:	687b      	ldr	r3, [r7, #4]
 c00528a:	681b      	ldr	r3, [r3, #0]
 c00528c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c005290:	2b00      	cmp	r3, #0
 c005292:	d04a      	beq.n	c00532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c005294:	687b      	ldr	r3, [r7, #4]
 c005296:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c005298:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00529c:	d108      	bne.n	c0052b0 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c00529e:	4b70      	ldr	r3, [pc, #448]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0052a4:	4a6e      	ldr	r2, [pc, #440]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0052aa:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c0052ae:	e012      	b.n	c0052d6 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c0052b0:	4b6b      	ldr	r3, [pc, #428]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0052b6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0052ba:	687b      	ldr	r3, [r7, #4]
 c0052bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0052be:	4968      	ldr	r1, [pc, #416]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052c0:	4313      	orrs	r3, r2
 c0052c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0052c6:	4b66      	ldr	r3, [pc, #408]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0052cc:	4a64      	ldr	r2, [pc, #400]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0052ce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c0052d2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c0052d6:	687b      	ldr	r3, [r7, #4]
 c0052d8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0052da:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0052de:	d10d      	bne.n	c0052fc <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0052e0:	687b      	ldr	r3, [r7, #4]
 c0052e2:	3304      	adds	r3, #4
 c0052e4:	2101      	movs	r1, #1
 c0052e6:	4618      	mov	r0, r3
 c0052e8:	f000 f8bc 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c0052ec:	4603      	mov	r3, r0
 c0052ee:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0052f0:	7ffb      	ldrb	r3, [r7, #31]
 c0052f2:	2b00      	cmp	r3, #0
 c0052f4:	d019      	beq.n	c00532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c0052f6:	7ffb      	ldrb	r3, [r7, #31]
 c0052f8:	77bb      	strb	r3, [r7, #30]
 c0052fa:	e016      	b.n	c00532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c0052fc:	687b      	ldr	r3, [r7, #4]
 c0052fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c005300:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c005304:	d106      	bne.n	c005314 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c005306:	4b56      	ldr	r3, [pc, #344]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005308:	68db      	ldr	r3, [r3, #12]
 c00530a:	4a55      	ldr	r2, [pc, #340]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00530c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c005310:	60d3      	str	r3, [r2, #12]
 c005312:	e00a      	b.n	c00532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c005314:	687b      	ldr	r3, [r7, #4]
 c005316:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c005318:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c00531c:	d105      	bne.n	c00532a <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00531e:	4b50      	ldr	r3, [pc, #320]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005320:	68db      	ldr	r3, [r3, #12]
 c005322:	4a4f      	ldr	r2, [pc, #316]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005324:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c005328:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00532a:	687b      	ldr	r3, [r7, #4]
 c00532c:	681b      	ldr	r3, [r3, #0]
 c00532e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c005332:	2b00      	cmp	r3, #0
 c005334:	d028      	beq.n	c005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c005336:	4b4a      	ldr	r3, [pc, #296]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00533c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c005340:	687b      	ldr	r3, [r7, #4]
 c005342:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c005344:	4946      	ldr	r1, [pc, #280]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005346:	4313      	orrs	r3, r2
 c005348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c00534c:	687b      	ldr	r3, [r7, #4]
 c00534e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c005350:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c005354:	d106      	bne.n	c005364 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c005356:	4b42      	ldr	r3, [pc, #264]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005358:	68db      	ldr	r3, [r3, #12]
 c00535a:	4a41      	ldr	r2, [pc, #260]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00535c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c005360:	60d3      	str	r3, [r2, #12]
 c005362:	e011      	b.n	c005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c005364:	687b      	ldr	r3, [r7, #4]
 c005366:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c005368:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c00536c:	d10c      	bne.n	c005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00536e:	687b      	ldr	r3, [r7, #4]
 c005370:	3304      	adds	r3, #4
 c005372:	2101      	movs	r1, #1
 c005374:	4618      	mov	r0, r3
 c005376:	f000 f875 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c00537a:	4603      	mov	r3, r0
 c00537c:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00537e:	7ffb      	ldrb	r3, [r7, #31]
 c005380:	2b00      	cmp	r3, #0
 c005382:	d001      	beq.n	c005388 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c005384:	7ffb      	ldrb	r3, [r7, #31]
 c005386:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c005388:	687b      	ldr	r3, [r7, #4]
 c00538a:	681b      	ldr	r3, [r3, #0]
 c00538c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c005390:	2b00      	cmp	r3, #0
 c005392:	d01e      	beq.n	c0053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c005394:	4b32      	ldr	r3, [pc, #200]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00539a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c00539e:	687b      	ldr	r3, [r7, #4]
 c0053a0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0053a4:	492e      	ldr	r1, [pc, #184]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0053a6:	4313      	orrs	r3, r2
 c0053a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0053ac:	687b      	ldr	r3, [r7, #4]
 c0053ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0053b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0053b6:	d10c      	bne.n	c0053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0053b8:	687b      	ldr	r3, [r7, #4]
 c0053ba:	3304      	adds	r3, #4
 c0053bc:	2102      	movs	r1, #2
 c0053be:	4618      	mov	r0, r3
 c0053c0:	f000 f850 	bl	c005464 <RCCEx_PLLSAI1_Config>
 c0053c4:	4603      	mov	r3, r0
 c0053c6:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0053c8:	7ffb      	ldrb	r3, [r7, #31]
 c0053ca:	2b00      	cmp	r3, #0
 c0053cc:	d001      	beq.n	c0053d2 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c0053ce:	7ffb      	ldrb	r3, [r7, #31]
 c0053d0:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0053d2:	687b      	ldr	r3, [r7, #4]
 c0053d4:	681b      	ldr	r3, [r3, #0]
 c0053d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0053da:	2b00      	cmp	r3, #0
 c0053dc:	d00b      	beq.n	c0053f6 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0053de:	4b20      	ldr	r3, [pc, #128]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0053e0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0053e4:	f023 0204 	bic.w	r2, r3, #4
 c0053e8:	687b      	ldr	r3, [r7, #4]
 c0053ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0053ee:	491c      	ldr	r1, [pc, #112]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0053f0:	4313      	orrs	r3, r2
 c0053f2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c0053f6:	687b      	ldr	r3, [r7, #4]
 c0053f8:	681b      	ldr	r3, [r3, #0]
 c0053fa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0053fe:	2b00      	cmp	r3, #0
 c005400:	d00b      	beq.n	c00541a <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c005402:	4b17      	ldr	r3, [pc, #92]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005404:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c005408:	f023 0218 	bic.w	r2, r3, #24
 c00540c:	687b      	ldr	r3, [r7, #4]
 c00540e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005412:	4913      	ldr	r1, [pc, #76]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005414:	4313      	orrs	r3, r2
 c005416:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00541a:	687b      	ldr	r3, [r7, #4]
 c00541c:	681b      	ldr	r3, [r3, #0]
 c00541e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c005422:	2b00      	cmp	r3, #0
 c005424:	d017      	beq.n	c005456 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c005426:	4b0e      	ldr	r3, [pc, #56]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005428:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00542c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c005430:	687b      	ldr	r3, [r7, #4]
 c005432:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c005436:	490a      	ldr	r1, [pc, #40]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005438:	4313      	orrs	r3, r2
 c00543a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00543e:	687b      	ldr	r3, [r7, #4]
 c005440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c005444:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c005448:	d105      	bne.n	c005456 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00544a:	4b05      	ldr	r3, [pc, #20]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00544c:	68db      	ldr	r3, [r3, #12]
 c00544e:	4a04      	ldr	r2, [pc, #16]	; (c005460 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c005450:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c005454:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c005456:	7fbb      	ldrb	r3, [r7, #30]
}
 c005458:	4618      	mov	r0, r3
 c00545a:	3720      	adds	r7, #32
 c00545c:	46bd      	mov	sp, r7
 c00545e:	bd80      	pop	{r7, pc}
 c005460:	50021000 	.word	0x50021000

0c005464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c005464:	b580      	push	{r7, lr}
 c005466:	b084      	sub	sp, #16
 c005468:	af00      	add	r7, sp, #0
 c00546a:	6078      	str	r0, [r7, #4]
 c00546c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00546e:	2300      	movs	r3, #0
 c005470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c005472:	687b      	ldr	r3, [r7, #4]
 c005474:	681b      	ldr	r3, [r3, #0]
 c005476:	2b03      	cmp	r3, #3
 c005478:	d018      	beq.n	c0054ac <RCCEx_PLLSAI1_Config+0x48>
 c00547a:	2b03      	cmp	r3, #3
 c00547c:	d81f      	bhi.n	c0054be <RCCEx_PLLSAI1_Config+0x5a>
 c00547e:	2b01      	cmp	r3, #1
 c005480:	d002      	beq.n	c005488 <RCCEx_PLLSAI1_Config+0x24>
 c005482:	2b02      	cmp	r3, #2
 c005484:	d009      	beq.n	c00549a <RCCEx_PLLSAI1_Config+0x36>
 c005486:	e01a      	b.n	c0054be <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c005488:	4b65      	ldr	r3, [pc, #404]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00548a:	681b      	ldr	r3, [r3, #0]
 c00548c:	f003 0302 	and.w	r3, r3, #2
 c005490:	2b00      	cmp	r3, #0
 c005492:	d117      	bne.n	c0054c4 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c005494:	2301      	movs	r3, #1
 c005496:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c005498:	e014      	b.n	c0054c4 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00549a:	4b61      	ldr	r3, [pc, #388]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00549c:	681b      	ldr	r3, [r3, #0]
 c00549e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0054a2:	2b00      	cmp	r3, #0
 c0054a4:	d110      	bne.n	c0054c8 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0054a6:	2301      	movs	r3, #1
 c0054a8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0054aa:	e00d      	b.n	c0054c8 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0054ac:	4b5c      	ldr	r3, [pc, #368]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0054ae:	681b      	ldr	r3, [r3, #0]
 c0054b0:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0054b4:	2b00      	cmp	r3, #0
 c0054b6:	d109      	bne.n	c0054cc <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0054b8:	2301      	movs	r3, #1
 c0054ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0054bc:	e006      	b.n	c0054cc <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0054be:	2301      	movs	r3, #1
 c0054c0:	73fb      	strb	r3, [r7, #15]
      break;
 c0054c2:	e004      	b.n	c0054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0054c4:	bf00      	nop
 c0054c6:	e002      	b.n	c0054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0054c8:	bf00      	nop
 c0054ca:	e000      	b.n	c0054ce <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0054cc:	bf00      	nop
  }

  if (status == HAL_OK)
 c0054ce:	7bfb      	ldrb	r3, [r7, #15]
 c0054d0:	2b00      	cmp	r3, #0
 c0054d2:	f040 809f 	bne.w	c005614 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c0054d6:	4b52      	ldr	r3, [pc, #328]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0054d8:	681b      	ldr	r3, [r3, #0]
 c0054da:	4a51      	ldr	r2, [pc, #324]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0054dc:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0054e0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0054e2:	f7fd f82f 	bl	c002544 <HAL_GetTick>
 c0054e6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0054e8:	e00f      	b.n	c00550a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0054ea:	f7fd f82b 	bl	c002544 <HAL_GetTick>
 c0054ee:	4602      	mov	r2, r0
 c0054f0:	68bb      	ldr	r3, [r7, #8]
 c0054f2:	1ad3      	subs	r3, r2, r3
 c0054f4:	2b02      	cmp	r3, #2
 c0054f6:	d908      	bls.n	c00550a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0054f8:	4b49      	ldr	r3, [pc, #292]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0054fa:	681b      	ldr	r3, [r3, #0]
 c0054fc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c005500:	2b00      	cmp	r3, #0
 c005502:	d009      	beq.n	c005518 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c005504:	2303      	movs	r3, #3
 c005506:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c005508:	e006      	b.n	c005518 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00550a:	4b45      	ldr	r3, [pc, #276]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00550c:	681b      	ldr	r3, [r3, #0]
 c00550e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c005512:	2b00      	cmp	r3, #0
 c005514:	d1e9      	bne.n	c0054ea <RCCEx_PLLSAI1_Config+0x86>
 c005516:	e000      	b.n	c00551a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c005518:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00551a:	7bfb      	ldrb	r3, [r7, #15]
 c00551c:	2b00      	cmp	r3, #0
 c00551e:	d179      	bne.n	c005614 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c005520:	683b      	ldr	r3, [r7, #0]
 c005522:	2b00      	cmp	r3, #0
 c005524:	d116      	bne.n	c005554 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c005526:	4b3e      	ldr	r3, [pc, #248]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c005528:	691a      	ldr	r2, [r3, #16]
 c00552a:	4b3e      	ldr	r3, [pc, #248]	; (c005624 <RCCEx_PLLSAI1_Config+0x1c0>)
 c00552c:	4013      	ands	r3, r2
 c00552e:	687a      	ldr	r2, [r7, #4]
 c005530:	6892      	ldr	r2, [r2, #8]
 c005532:	0211      	lsls	r1, r2, #8
 c005534:	687a      	ldr	r2, [r7, #4]
 c005536:	68d2      	ldr	r2, [r2, #12]
 c005538:	06d2      	lsls	r2, r2, #27
 c00553a:	4311      	orrs	r1, r2
 c00553c:	687a      	ldr	r2, [r7, #4]
 c00553e:	6852      	ldr	r2, [r2, #4]
 c005540:	3a01      	subs	r2, #1
 c005542:	0112      	lsls	r2, r2, #4
 c005544:	4311      	orrs	r1, r2
 c005546:	687a      	ldr	r2, [r7, #4]
 c005548:	6812      	ldr	r2, [r2, #0]
 c00554a:	430a      	orrs	r2, r1
 c00554c:	4934      	ldr	r1, [pc, #208]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00554e:	4313      	orrs	r3, r2
 c005550:	610b      	str	r3, [r1, #16]
 c005552:	e033      	b.n	c0055bc <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c005554:	683b      	ldr	r3, [r7, #0]
 c005556:	2b01      	cmp	r3, #1
 c005558:	d118      	bne.n	c00558c <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00555a:	4b31      	ldr	r3, [pc, #196]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00555c:	691a      	ldr	r2, [r3, #16]
 c00555e:	4b32      	ldr	r3, [pc, #200]	; (c005628 <RCCEx_PLLSAI1_Config+0x1c4>)
 c005560:	4013      	ands	r3, r2
 c005562:	687a      	ldr	r2, [r7, #4]
 c005564:	6892      	ldr	r2, [r2, #8]
 c005566:	0211      	lsls	r1, r2, #8
 c005568:	687a      	ldr	r2, [r7, #4]
 c00556a:	6912      	ldr	r2, [r2, #16]
 c00556c:	0852      	lsrs	r2, r2, #1
 c00556e:	3a01      	subs	r2, #1
 c005570:	0552      	lsls	r2, r2, #21
 c005572:	4311      	orrs	r1, r2
 c005574:	687a      	ldr	r2, [r7, #4]
 c005576:	6852      	ldr	r2, [r2, #4]
 c005578:	3a01      	subs	r2, #1
 c00557a:	0112      	lsls	r2, r2, #4
 c00557c:	4311      	orrs	r1, r2
 c00557e:	687a      	ldr	r2, [r7, #4]
 c005580:	6812      	ldr	r2, [r2, #0]
 c005582:	430a      	orrs	r2, r1
 c005584:	4926      	ldr	r1, [pc, #152]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c005586:	4313      	orrs	r3, r2
 c005588:	610b      	str	r3, [r1, #16]
 c00558a:	e017      	b.n	c0055bc <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00558c:	4b24      	ldr	r3, [pc, #144]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00558e:	691a      	ldr	r2, [r3, #16]
 c005590:	4b26      	ldr	r3, [pc, #152]	; (c00562c <RCCEx_PLLSAI1_Config+0x1c8>)
 c005592:	4013      	ands	r3, r2
 c005594:	687a      	ldr	r2, [r7, #4]
 c005596:	6892      	ldr	r2, [r2, #8]
 c005598:	0211      	lsls	r1, r2, #8
 c00559a:	687a      	ldr	r2, [r7, #4]
 c00559c:	6952      	ldr	r2, [r2, #20]
 c00559e:	0852      	lsrs	r2, r2, #1
 c0055a0:	3a01      	subs	r2, #1
 c0055a2:	0652      	lsls	r2, r2, #25
 c0055a4:	4311      	orrs	r1, r2
 c0055a6:	687a      	ldr	r2, [r7, #4]
 c0055a8:	6852      	ldr	r2, [r2, #4]
 c0055aa:	3a01      	subs	r2, #1
 c0055ac:	0112      	lsls	r2, r2, #4
 c0055ae:	4311      	orrs	r1, r2
 c0055b0:	687a      	ldr	r2, [r7, #4]
 c0055b2:	6812      	ldr	r2, [r2, #0]
 c0055b4:	430a      	orrs	r2, r1
 c0055b6:	491a      	ldr	r1, [pc, #104]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0055b8:	4313      	orrs	r3, r2
 c0055ba:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0055bc:	4b18      	ldr	r3, [pc, #96]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0055be:	681b      	ldr	r3, [r3, #0]
 c0055c0:	4a17      	ldr	r2, [pc, #92]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0055c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0055c6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0055c8:	f7fc ffbc 	bl	c002544 <HAL_GetTick>
 c0055cc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0055ce:	e00f      	b.n	c0055f0 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0055d0:	f7fc ffb8 	bl	c002544 <HAL_GetTick>
 c0055d4:	4602      	mov	r2, r0
 c0055d6:	68bb      	ldr	r3, [r7, #8]
 c0055d8:	1ad3      	subs	r3, r2, r3
 c0055da:	2b02      	cmp	r3, #2
 c0055dc:	d908      	bls.n	c0055f0 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0055de:	4b10      	ldr	r3, [pc, #64]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0055e0:	681b      	ldr	r3, [r3, #0]
 c0055e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0055e6:	2b00      	cmp	r3, #0
 c0055e8:	d109      	bne.n	c0055fe <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c0055ea:	2303      	movs	r3, #3
 c0055ec:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0055ee:	e006      	b.n	c0055fe <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0055f0:	4b0b      	ldr	r3, [pc, #44]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0055f2:	681b      	ldr	r3, [r3, #0]
 c0055f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0055f8:	2b00      	cmp	r3, #0
 c0055fa:	d0e9      	beq.n	c0055d0 <RCCEx_PLLSAI1_Config+0x16c>
 c0055fc:	e000      	b.n	c005600 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c0055fe:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c005600:	7bfb      	ldrb	r3, [r7, #15]
 c005602:	2b00      	cmp	r3, #0
 c005604:	d106      	bne.n	c005614 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c005606:	4b06      	ldr	r3, [pc, #24]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c005608:	691a      	ldr	r2, [r3, #16]
 c00560a:	687b      	ldr	r3, [r7, #4]
 c00560c:	699b      	ldr	r3, [r3, #24]
 c00560e:	4904      	ldr	r1, [pc, #16]	; (c005620 <RCCEx_PLLSAI1_Config+0x1bc>)
 c005610:	4313      	orrs	r3, r2
 c005612:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c005614:	7bfb      	ldrb	r3, [r7, #15]
}
 c005616:	4618      	mov	r0, r3
 c005618:	3710      	adds	r7, #16
 c00561a:	46bd      	mov	sp, r7
 c00561c:	bd80      	pop	{r7, pc}
 c00561e:	bf00      	nop
 c005620:	50021000 	.word	0x50021000
 c005624:	07ff800c 	.word	0x07ff800c
 c005628:	ff9f800c 	.word	0xff9f800c
 c00562c:	f9ff800c 	.word	0xf9ff800c

0c005630 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c005630:	b580      	push	{r7, lr}
 c005632:	b084      	sub	sp, #16
 c005634:	af00      	add	r7, sp, #0
 c005636:	6078      	str	r0, [r7, #4]
 c005638:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00563a:	2300      	movs	r3, #0
 c00563c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00563e:	687b      	ldr	r3, [r7, #4]
 c005640:	681b      	ldr	r3, [r3, #0]
 c005642:	2b03      	cmp	r3, #3
 c005644:	d018      	beq.n	c005678 <RCCEx_PLLSAI2_Config+0x48>
 c005646:	2b03      	cmp	r3, #3
 c005648:	d81f      	bhi.n	c00568a <RCCEx_PLLSAI2_Config+0x5a>
 c00564a:	2b01      	cmp	r3, #1
 c00564c:	d002      	beq.n	c005654 <RCCEx_PLLSAI2_Config+0x24>
 c00564e:	2b02      	cmp	r3, #2
 c005650:	d009      	beq.n	c005666 <RCCEx_PLLSAI2_Config+0x36>
 c005652:	e01a      	b.n	c00568a <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c005654:	4b4a      	ldr	r3, [pc, #296]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005656:	681b      	ldr	r3, [r3, #0]
 c005658:	f003 0302 	and.w	r3, r3, #2
 c00565c:	2b00      	cmp	r3, #0
 c00565e:	d117      	bne.n	c005690 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c005660:	2301      	movs	r3, #1
 c005662:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c005664:	e014      	b.n	c005690 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c005666:	4b46      	ldr	r3, [pc, #280]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005668:	681b      	ldr	r3, [r3, #0]
 c00566a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00566e:	2b00      	cmp	r3, #0
 c005670:	d110      	bne.n	c005694 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c005672:	2301      	movs	r3, #1
 c005674:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c005676:	e00d      	b.n	c005694 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c005678:	4b41      	ldr	r3, [pc, #260]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c00567a:	681b      	ldr	r3, [r3, #0]
 c00567c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c005680:	2b00      	cmp	r3, #0
 c005682:	d109      	bne.n	c005698 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c005684:	2301      	movs	r3, #1
 c005686:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c005688:	e006      	b.n	c005698 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c00568a:	2301      	movs	r3, #1
 c00568c:	73fb      	strb	r3, [r7, #15]
      break;
 c00568e:	e004      	b.n	c00569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c005690:	bf00      	nop
 c005692:	e002      	b.n	c00569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c005694:	bf00      	nop
 c005696:	e000      	b.n	c00569a <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c005698:	bf00      	nop
  }

  if (status == HAL_OK)
 c00569a:	7bfb      	ldrb	r3, [r7, #15]
 c00569c:	2b00      	cmp	r3, #0
 c00569e:	d169      	bne.n	c005774 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c0056a0:	4b37      	ldr	r3, [pc, #220]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c0056a2:	681b      	ldr	r3, [r3, #0]
 c0056a4:	4a36      	ldr	r2, [pc, #216]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c0056a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0056aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0056ac:	f7fc ff4a 	bl	c002544 <HAL_GetTick>
 c0056b0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0056b2:	e00f      	b.n	c0056d4 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0056b4:	f7fc ff46 	bl	c002544 <HAL_GetTick>
 c0056b8:	4602      	mov	r2, r0
 c0056ba:	68bb      	ldr	r3, [r7, #8]
 c0056bc:	1ad3      	subs	r3, r2, r3
 c0056be:	2b02      	cmp	r3, #2
 c0056c0:	d908      	bls.n	c0056d4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0056c2:	4b2f      	ldr	r3, [pc, #188]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c0056c4:	681b      	ldr	r3, [r3, #0]
 c0056c6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0056ca:	2b00      	cmp	r3, #0
 c0056cc:	d009      	beq.n	c0056e2 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c0056ce:	2303      	movs	r3, #3
 c0056d0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c0056d2:	e006      	b.n	c0056e2 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0056d4:	4b2a      	ldr	r3, [pc, #168]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c0056d6:	681b      	ldr	r3, [r3, #0]
 c0056d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0056dc:	2b00      	cmp	r3, #0
 c0056de:	d1e9      	bne.n	c0056b4 <RCCEx_PLLSAI2_Config+0x84>
 c0056e0:	e000      	b.n	c0056e4 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c0056e2:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c0056e4:	7bfb      	ldrb	r3, [r7, #15]
 c0056e6:	2b00      	cmp	r3, #0
 c0056e8:	d144      	bne.n	c005774 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0056ea:	683b      	ldr	r3, [r7, #0]
 c0056ec:	2b00      	cmp	r3, #0
 c0056ee:	d115      	bne.n	c00571c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c0056f0:	4b23      	ldr	r3, [pc, #140]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c0056f2:	695a      	ldr	r2, [r3, #20]
 c0056f4:	4b23      	ldr	r3, [pc, #140]	; (c005784 <RCCEx_PLLSAI2_Config+0x154>)
 c0056f6:	4013      	ands	r3, r2
 c0056f8:	687a      	ldr	r2, [r7, #4]
 c0056fa:	6892      	ldr	r2, [r2, #8]
 c0056fc:	0211      	lsls	r1, r2, #8
 c0056fe:	687a      	ldr	r2, [r7, #4]
 c005700:	68d2      	ldr	r2, [r2, #12]
 c005702:	06d2      	lsls	r2, r2, #27
 c005704:	4311      	orrs	r1, r2
 c005706:	687a      	ldr	r2, [r7, #4]
 c005708:	6852      	ldr	r2, [r2, #4]
 c00570a:	3a01      	subs	r2, #1
 c00570c:	0112      	lsls	r2, r2, #4
 c00570e:	4311      	orrs	r1, r2
 c005710:	687a      	ldr	r2, [r7, #4]
 c005712:	6812      	ldr	r2, [r2, #0]
 c005714:	430a      	orrs	r2, r1
 c005716:	491a      	ldr	r1, [pc, #104]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005718:	4313      	orrs	r3, r2
 c00571a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c00571c:	4b18      	ldr	r3, [pc, #96]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c00571e:	681b      	ldr	r3, [r3, #0]
 c005720:	4a17      	ldr	r2, [pc, #92]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005722:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c005726:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c005728:	f7fc ff0c 	bl	c002544 <HAL_GetTick>
 c00572c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00572e:	e00f      	b.n	c005750 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c005730:	f7fc ff08 	bl	c002544 <HAL_GetTick>
 c005734:	4602      	mov	r2, r0
 c005736:	68bb      	ldr	r3, [r7, #8]
 c005738:	1ad3      	subs	r3, r2, r3
 c00573a:	2b02      	cmp	r3, #2
 c00573c:	d908      	bls.n	c005750 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00573e:	4b10      	ldr	r3, [pc, #64]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005740:	681b      	ldr	r3, [r3, #0]
 c005742:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c005746:	2b00      	cmp	r3, #0
 c005748:	d109      	bne.n	c00575e <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c00574a:	2303      	movs	r3, #3
 c00574c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00574e:	e006      	b.n	c00575e <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c005750:	4b0b      	ldr	r3, [pc, #44]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005752:	681b      	ldr	r3, [r3, #0]
 c005754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c005758:	2b00      	cmp	r3, #0
 c00575a:	d0e9      	beq.n	c005730 <RCCEx_PLLSAI2_Config+0x100>
 c00575c:	e000      	b.n	c005760 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c00575e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c005760:	7bfb      	ldrb	r3, [r7, #15]
 c005762:	2b00      	cmp	r3, #0
 c005764:	d106      	bne.n	c005774 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c005766:	4b06      	ldr	r3, [pc, #24]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005768:	695a      	ldr	r2, [r3, #20]
 c00576a:	687b      	ldr	r3, [r7, #4]
 c00576c:	691b      	ldr	r3, [r3, #16]
 c00576e:	4904      	ldr	r1, [pc, #16]	; (c005780 <RCCEx_PLLSAI2_Config+0x150>)
 c005770:	4313      	orrs	r3, r2
 c005772:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c005774:	7bfb      	ldrb	r3, [r7, #15]
}
 c005776:	4618      	mov	r0, r3
 c005778:	3710      	adds	r7, #16
 c00577a:	46bd      	mov	sp, r7
 c00577c:	bd80      	pop	{r7, pc}
 c00577e:	bf00      	nop
 c005780:	50021000 	.word	0x50021000
 c005784:	07ff800c 	.word	0x07ff800c

0c005788 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c005788:	b580      	push	{r7, lr}
 c00578a:	b084      	sub	sp, #16
 c00578c:	af00      	add	r7, sp, #0
 c00578e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c005790:	687b      	ldr	r3, [r7, #4]
 c005792:	2b00      	cmp	r3, #0
 c005794:	d101      	bne.n	c00579a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c005796:	2301      	movs	r3, #1
 c005798:	e095      	b.n	c0058c6 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 c00579a:	687b      	ldr	r3, [r7, #4]
 c00579c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00579e:	2b00      	cmp	r3, #0
 c0057a0:	d108      	bne.n	c0057b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 c0057a2:	687b      	ldr	r3, [r7, #4]
 c0057a4:	685b      	ldr	r3, [r3, #4]
 c0057a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0057aa:	d009      	beq.n	c0057c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c0057ac:	687b      	ldr	r3, [r7, #4]
 c0057ae:	2200      	movs	r2, #0
 c0057b0:	61da      	str	r2, [r3, #28]
 c0057b2:	e005      	b.n	c0057c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 c0057b4:	687b      	ldr	r3, [r7, #4]
 c0057b6:	2200      	movs	r2, #0
 c0057b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 c0057ba:	687b      	ldr	r3, [r7, #4]
 c0057bc:	2200      	movs	r2, #0
 c0057be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0057c0:	687b      	ldr	r3, [r7, #4]
 c0057c2:	2200      	movs	r2, #0
 c0057c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c0057c6:	687b      	ldr	r3, [r7, #4]
 c0057c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0057cc:	b2db      	uxtb	r3, r3
 c0057ce:	2b00      	cmp	r3, #0
 c0057d0:	d106      	bne.n	c0057e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c0057d2:	687b      	ldr	r3, [r7, #4]
 c0057d4:	2200      	movs	r2, #0
 c0057d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c0057da:	6878      	ldr	r0, [r7, #4]
 c0057dc:	f7fc fa30 	bl	c001c40 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c0057e0:	687b      	ldr	r3, [r7, #4]
 c0057e2:	2202      	movs	r2, #2
 c0057e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c0057e8:	687b      	ldr	r3, [r7, #4]
 c0057ea:	681b      	ldr	r3, [r3, #0]
 c0057ec:	681a      	ldr	r2, [r3, #0]
 c0057ee:	687b      	ldr	r3, [r7, #4]
 c0057f0:	681b      	ldr	r3, [r3, #0]
 c0057f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0057f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c0057f8:	687b      	ldr	r3, [r7, #4]
 c0057fa:	68db      	ldr	r3, [r3, #12]
 c0057fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005800:	d902      	bls.n	c005808 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 c005802:	2300      	movs	r3, #0
 c005804:	60fb      	str	r3, [r7, #12]
 c005806:	e002      	b.n	c00580e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 c005808:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00580c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 c00580e:	687b      	ldr	r3, [r7, #4]
 c005810:	68db      	ldr	r3, [r3, #12]
 c005812:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 c005816:	d007      	beq.n	c005828 <HAL_SPI_Init+0xa0>
 c005818:	687b      	ldr	r3, [r7, #4]
 c00581a:	68db      	ldr	r3, [r3, #12]
 c00581c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005820:	d002      	beq.n	c005828 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c005822:	687b      	ldr	r3, [r7, #4]
 c005824:	2200      	movs	r2, #0
 c005826:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 c005828:	687b      	ldr	r3, [r7, #4]
 c00582a:	685b      	ldr	r3, [r3, #4]
 c00582c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 c005830:	687b      	ldr	r3, [r7, #4]
 c005832:	689b      	ldr	r3, [r3, #8]
 c005834:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 c005838:	431a      	orrs	r2, r3
 c00583a:	687b      	ldr	r3, [r7, #4]
 c00583c:	691b      	ldr	r3, [r3, #16]
 c00583e:	f003 0302 	and.w	r3, r3, #2
 c005842:	431a      	orrs	r2, r3
 c005844:	687b      	ldr	r3, [r7, #4]
 c005846:	695b      	ldr	r3, [r3, #20]
 c005848:	f003 0301 	and.w	r3, r3, #1
 c00584c:	431a      	orrs	r2, r3
 c00584e:	687b      	ldr	r3, [r7, #4]
 c005850:	699b      	ldr	r3, [r3, #24]
 c005852:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c005856:	431a      	orrs	r2, r3
 c005858:	687b      	ldr	r3, [r7, #4]
 c00585a:	69db      	ldr	r3, [r3, #28]
 c00585c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 c005860:	431a      	orrs	r2, r3
 c005862:	687b      	ldr	r3, [r7, #4]
 c005864:	6a1b      	ldr	r3, [r3, #32]
 c005866:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00586a:	ea42 0103 	orr.w	r1, r2, r3
 c00586e:	687b      	ldr	r3, [r7, #4]
 c005870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005872:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 c005876:	687b      	ldr	r3, [r7, #4]
 c005878:	681b      	ldr	r3, [r3, #0]
 c00587a:	430a      	orrs	r2, r1
 c00587c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 c00587e:	687b      	ldr	r3, [r7, #4]
 c005880:	699b      	ldr	r3, [r3, #24]
 c005882:	0c1b      	lsrs	r3, r3, #16
 c005884:	f003 0204 	and.w	r2, r3, #4
 c005888:	687b      	ldr	r3, [r7, #4]
 c00588a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00588c:	f003 0310 	and.w	r3, r3, #16
 c005890:	431a      	orrs	r2, r3
 c005892:	687b      	ldr	r3, [r7, #4]
 c005894:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c005896:	f003 0308 	and.w	r3, r3, #8
 c00589a:	431a      	orrs	r2, r3
 c00589c:	687b      	ldr	r3, [r7, #4]
 c00589e:	68db      	ldr	r3, [r3, #12]
 c0058a0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 c0058a4:	ea42 0103 	orr.w	r1, r2, r3
 c0058a8:	68fb      	ldr	r3, [r7, #12]
 c0058aa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 c0058ae:	687b      	ldr	r3, [r7, #4]
 c0058b0:	681b      	ldr	r3, [r3, #0]
 c0058b2:	430a      	orrs	r2, r1
 c0058b4:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c0058b6:	687b      	ldr	r3, [r7, #4]
 c0058b8:	2200      	movs	r2, #0
 c0058ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 c0058bc:	687b      	ldr	r3, [r7, #4]
 c0058be:	2201      	movs	r2, #1
 c0058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 c0058c4:	2300      	movs	r3, #0
}
 c0058c6:	4618      	mov	r0, r3
 c0058c8:	3710      	adds	r7, #16
 c0058ca:	46bd      	mov	sp, r7
 c0058cc:	bd80      	pop	{r7, pc}
	...

0c0058d0 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c0058d0:	b580      	push	{r7, lr}
 c0058d2:	b086      	sub	sp, #24
 c0058d4:	af00      	add	r7, sp, #0
 c0058d6:	60f8      	str	r0, [r7, #12]
 c0058d8:	60b9      	str	r1, [r7, #8]
 c0058da:	4613      	mov	r3, r2
 c0058dc:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c0058de:	2300      	movs	r3, #0
 c0058e0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 c0058e2:	68fb      	ldr	r3, [r7, #12]
 c0058e4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c0058e8:	2b01      	cmp	r3, #1
 c0058ea:	d101      	bne.n	c0058f0 <HAL_SPI_Transmit_DMA+0x20>
 c0058ec:	2302      	movs	r3, #2
 c0058ee:	e0d8      	b.n	c005aa2 <HAL_SPI_Transmit_DMA+0x1d2>
 c0058f0:	68fb      	ldr	r3, [r7, #12]
 c0058f2:	2201      	movs	r2, #1
 c0058f4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c0058f8:	68fb      	ldr	r3, [r7, #12]
 c0058fa:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0058fe:	b2db      	uxtb	r3, r3
 c005900:	2b01      	cmp	r3, #1
 c005902:	d002      	beq.n	c00590a <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 c005904:	2302      	movs	r3, #2
 c005906:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005908:	e0c6      	b.n	c005a98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 c00590a:	68bb      	ldr	r3, [r7, #8]
 c00590c:	2b00      	cmp	r3, #0
 c00590e:	d002      	beq.n	c005916 <HAL_SPI_Transmit_DMA+0x46>
 c005910:	88fb      	ldrh	r3, [r7, #6]
 c005912:	2b00      	cmp	r3, #0
 c005914:	d102      	bne.n	c00591c <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 c005916:	2301      	movs	r3, #1
 c005918:	75fb      	strb	r3, [r7, #23]
    goto error;
 c00591a:	e0bd      	b.n	c005a98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 c00591c:	68fb      	ldr	r3, [r7, #12]
 c00591e:	2203      	movs	r2, #3
 c005920:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c005924:	68fb      	ldr	r3, [r7, #12]
 c005926:	2200      	movs	r2, #0
 c005928:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 c00592a:	68fb      	ldr	r3, [r7, #12]
 c00592c:	68ba      	ldr	r2, [r7, #8]
 c00592e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c005930:	68fb      	ldr	r3, [r7, #12]
 c005932:	88fa      	ldrh	r2, [r7, #6]
 c005934:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c005936:	68fb      	ldr	r3, [r7, #12]
 c005938:	88fa      	ldrh	r2, [r7, #6]
 c00593a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 c00593c:	68fb      	ldr	r3, [r7, #12]
 c00593e:	2200      	movs	r2, #0
 c005940:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 c005942:	68fb      	ldr	r3, [r7, #12]
 c005944:	2200      	movs	r2, #0
 c005946:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 c005948:	68fb      	ldr	r3, [r7, #12]
 c00594a:	2200      	movs	r2, #0
 c00594c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 c00594e:	68fb      	ldr	r3, [r7, #12]
 c005950:	2200      	movs	r2, #0
 c005952:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 c005956:	68fb      	ldr	r3, [r7, #12]
 c005958:	2200      	movs	r2, #0
 c00595a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c00595e:	68fb      	ldr	r3, [r7, #12]
 c005960:	689b      	ldr	r3, [r3, #8]
 c005962:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005966:	d10f      	bne.n	c005988 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c005968:	68fb      	ldr	r3, [r7, #12]
 c00596a:	681b      	ldr	r3, [r3, #0]
 c00596c:	681a      	ldr	r2, [r3, #0]
 c00596e:	68fb      	ldr	r3, [r7, #12]
 c005970:	681b      	ldr	r3, [r3, #0]
 c005972:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005976:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 c005978:	68fb      	ldr	r3, [r7, #12]
 c00597a:	681b      	ldr	r3, [r3, #0]
 c00597c:	681a      	ldr	r2, [r3, #0]
 c00597e:	68fb      	ldr	r3, [r7, #12]
 c005980:	681b      	ldr	r3, [r3, #0]
 c005982:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c005986:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 c005988:	68fb      	ldr	r3, [r7, #12]
 c00598a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00598c:	4a47      	ldr	r2, [pc, #284]	; (c005aac <HAL_SPI_Transmit_DMA+0x1dc>)
 c00598e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 c005990:	68fb      	ldr	r3, [r7, #12]
 c005992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005994:	4a46      	ldr	r2, [pc, #280]	; (c005ab0 <HAL_SPI_Transmit_DMA+0x1e0>)
 c005996:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 c005998:	68fb      	ldr	r3, [r7, #12]
 c00599a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00599c:	4a45      	ldr	r2, [pc, #276]	; (c005ab4 <HAL_SPI_Transmit_DMA+0x1e4>)
 c00599e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 c0059a0:	68fb      	ldr	r3, [r7, #12]
 c0059a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0059a4:	2200      	movs	r2, #0
 c0059a6:	641a      	str	r2, [r3, #64]	; 0x40

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c0059a8:	68fb      	ldr	r3, [r7, #12]
 c0059aa:	681b      	ldr	r3, [r3, #0]
 c0059ac:	685a      	ldr	r2, [r3, #4]
 c0059ae:	68fb      	ldr	r3, [r7, #12]
 c0059b0:	681b      	ldr	r3, [r3, #0]
 c0059b2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c0059b6:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 c0059b8:	68fb      	ldr	r3, [r7, #12]
 c0059ba:	68db      	ldr	r3, [r3, #12]
 c0059bc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c0059c0:	d82d      	bhi.n	c005a1e <HAL_SPI_Transmit_DMA+0x14e>
 c0059c2:	68fb      	ldr	r3, [r7, #12]
 c0059c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0059c6:	699b      	ldr	r3, [r3, #24]
 c0059c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0059cc:	d127      	bne.n	c005a1e <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 c0059ce:	68fb      	ldr	r3, [r7, #12]
 c0059d0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0059d2:	b29b      	uxth	r3, r3
 c0059d4:	f003 0301 	and.w	r3, r3, #1
 c0059d8:	2b00      	cmp	r3, #0
 c0059da:	d10f      	bne.n	c0059fc <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c0059dc:	68fb      	ldr	r3, [r7, #12]
 c0059de:	681b      	ldr	r3, [r3, #0]
 c0059e0:	685a      	ldr	r2, [r3, #4]
 c0059e2:	68fb      	ldr	r3, [r7, #12]
 c0059e4:	681b      	ldr	r3, [r3, #0]
 c0059e6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c0059ea:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 c0059ec:	68fb      	ldr	r3, [r7, #12]
 c0059ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0059f0:	b29b      	uxth	r3, r3
 c0059f2:	085b      	lsrs	r3, r3, #1
 c0059f4:	b29a      	uxth	r2, r3
 c0059f6:	68fb      	ldr	r3, [r7, #12]
 c0059f8:	87da      	strh	r2, [r3, #62]	; 0x3e
 c0059fa:	e010      	b.n	c005a1e <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c0059fc:	68fb      	ldr	r3, [r7, #12]
 c0059fe:	681b      	ldr	r3, [r3, #0]
 c005a00:	685a      	ldr	r2, [r3, #4]
 c005a02:	68fb      	ldr	r3, [r7, #12]
 c005a04:	681b      	ldr	r3, [r3, #0]
 c005a06:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c005a0a:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c005a0c:	68fb      	ldr	r3, [r7, #12]
 c005a0e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005a10:	b29b      	uxth	r3, r3
 c005a12:	085b      	lsrs	r3, r3, #1
 c005a14:	b29b      	uxth	r3, r3
 c005a16:	3301      	adds	r3, #1
 c005a18:	b29a      	uxth	r2, r3
 c005a1a:	68fb      	ldr	r3, [r7, #12]
 c005a1c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c005a1e:	68fb      	ldr	r3, [r7, #12]
 c005a20:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c005a22:	68fb      	ldr	r3, [r7, #12]
 c005a24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005a26:	4619      	mov	r1, r3
 c005a28:	68fb      	ldr	r3, [r7, #12]
 c005a2a:	681b      	ldr	r3, [r3, #0]
 c005a2c:	330c      	adds	r3, #12
 c005a2e:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c005a30:	68fb      	ldr	r3, [r7, #12]
 c005a32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005a34:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c005a36:	f7fc ff6d 	bl	c002914 <HAL_DMA_Start_IT>
 c005a3a:	4603      	mov	r3, r0
 c005a3c:	2b00      	cmp	r3, #0
 c005a3e:	d00c      	beq.n	c005a5a <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005a40:	68fb      	ldr	r3, [r7, #12]
 c005a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005a44:	f043 0210 	orr.w	r2, r3, #16
 c005a48:	68fb      	ldr	r3, [r7, #12]
 c005a4a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c005a4c:	2301      	movs	r3, #1
 c005a4e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005a50:	68fb      	ldr	r3, [r7, #12]
 c005a52:	2201      	movs	r2, #1
 c005a54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c005a58:	e01e      	b.n	c005a98 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c005a5a:	68fb      	ldr	r3, [r7, #12]
 c005a5c:	681b      	ldr	r3, [r3, #0]
 c005a5e:	681b      	ldr	r3, [r3, #0]
 c005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005a64:	2b40      	cmp	r3, #64	; 0x40
 c005a66:	d007      	beq.n	c005a78 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c005a68:	68fb      	ldr	r3, [r7, #12]
 c005a6a:	681b      	ldr	r3, [r3, #0]
 c005a6c:	681a      	ldr	r2, [r3, #0]
 c005a6e:	68fb      	ldr	r3, [r7, #12]
 c005a70:	681b      	ldr	r3, [r3, #0]
 c005a72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c005a76:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c005a78:	68fb      	ldr	r3, [r7, #12]
 c005a7a:	681b      	ldr	r3, [r3, #0]
 c005a7c:	685a      	ldr	r2, [r3, #4]
 c005a7e:	68fb      	ldr	r3, [r7, #12]
 c005a80:	681b      	ldr	r3, [r3, #0]
 c005a82:	f042 0220 	orr.w	r2, r2, #32
 c005a86:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c005a88:	68fb      	ldr	r3, [r7, #12]
 c005a8a:	681b      	ldr	r3, [r3, #0]
 c005a8c:	685a      	ldr	r2, [r3, #4]
 c005a8e:	68fb      	ldr	r3, [r7, #12]
 c005a90:	681b      	ldr	r3, [r3, #0]
 c005a92:	f042 0202 	orr.w	r2, r2, #2
 c005a96:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c005a98:	68fb      	ldr	r3, [r7, #12]
 c005a9a:	2200      	movs	r2, #0
 c005a9c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 c005aa2:	4618      	mov	r0, r3
 c005aa4:	3718      	adds	r7, #24
 c005aa6:	46bd      	mov	sp, r7
 c005aa8:	bd80      	pop	{r7, pc}
 c005aaa:	bf00      	nop
 c005aac:	0c006247 	.word	0x0c006247
 c005ab0:	0c006069 	.word	0x0c006069
 c005ab4:	0c00629b 	.word	0x0c00629b

0c005ab8 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c005ab8:	b580      	push	{r7, lr}
 c005aba:	b086      	sub	sp, #24
 c005abc:	af00      	add	r7, sp, #0
 c005abe:	60f8      	str	r0, [r7, #12]
 c005ac0:	60b9      	str	r1, [r7, #8]
 c005ac2:	4613      	mov	r3, r2
 c005ac4:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c005ac6:	2300      	movs	r3, #0
 c005ac8:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c005aca:	68fb      	ldr	r3, [r7, #12]
 c005acc:	689b      	ldr	r3, [r3, #8]
 c005ace:	2b00      	cmp	r3, #0
 c005ad0:	d110      	bne.n	c005af4 <HAL_SPI_Receive_DMA+0x3c>
 c005ad2:	68fb      	ldr	r3, [r7, #12]
 c005ad4:	685b      	ldr	r3, [r3, #4]
 c005ad6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005ada:	d10b      	bne.n	c005af4 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 c005adc:	68fb      	ldr	r3, [r7, #12]
 c005ade:	2204      	movs	r2, #4
 c005ae0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 c005ae4:	88fb      	ldrh	r3, [r7, #6]
 c005ae6:	68ba      	ldr	r2, [r7, #8]
 c005ae8:	68b9      	ldr	r1, [r7, #8]
 c005aea:	68f8      	ldr	r0, [r7, #12]
 c005aec:	f000 f908 	bl	c005d00 <HAL_SPI_TransmitReceive_DMA>
 c005af0:	4603      	mov	r3, r0
 c005af2:	e0fb      	b.n	c005cec <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 c005af4:	68fb      	ldr	r3, [r7, #12]
 c005af6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c005afa:	2b01      	cmp	r3, #1
 c005afc:	d101      	bne.n	c005b02 <HAL_SPI_Receive_DMA+0x4a>
 c005afe:	2302      	movs	r3, #2
 c005b00:	e0f4      	b.n	c005cec <HAL_SPI_Receive_DMA+0x234>
 c005b02:	68fb      	ldr	r3, [r7, #12]
 c005b04:	2201      	movs	r2, #1
 c005b06:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c005b0a:	68fb      	ldr	r3, [r7, #12]
 c005b0c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005b10:	b2db      	uxtb	r3, r3
 c005b12:	2b01      	cmp	r3, #1
 c005b14:	d002      	beq.n	c005b1c <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 c005b16:	2302      	movs	r3, #2
 c005b18:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005b1a:	e0e2      	b.n	c005ce2 <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 c005b1c:	68bb      	ldr	r3, [r7, #8]
 c005b1e:	2b00      	cmp	r3, #0
 c005b20:	d002      	beq.n	c005b28 <HAL_SPI_Receive_DMA+0x70>
 c005b22:	88fb      	ldrh	r3, [r7, #6]
 c005b24:	2b00      	cmp	r3, #0
 c005b26:	d102      	bne.n	c005b2e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 c005b28:	2301      	movs	r3, #1
 c005b2a:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005b2c:	e0d9      	b.n	c005ce2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 c005b2e:	68fb      	ldr	r3, [r7, #12]
 c005b30:	2204      	movs	r2, #4
 c005b32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c005b36:	68fb      	ldr	r3, [r7, #12]
 c005b38:	2200      	movs	r2, #0
 c005b3a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 c005b3c:	68fb      	ldr	r3, [r7, #12]
 c005b3e:	68ba      	ldr	r2, [r7, #8]
 c005b40:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c005b42:	68fb      	ldr	r3, [r7, #12]
 c005b44:	88fa      	ldrh	r2, [r7, #6]
 c005b46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c005b4a:	68fb      	ldr	r3, [r7, #12]
 c005b4c:	88fa      	ldrh	r2, [r7, #6]
 c005b4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c005b52:	68fb      	ldr	r3, [r7, #12]
 c005b54:	2200      	movs	r2, #0
 c005b56:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c005b58:	68fb      	ldr	r3, [r7, #12]
 c005b5a:	2200      	movs	r2, #0
 c005b5c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 c005b5e:	68fb      	ldr	r3, [r7, #12]
 c005b60:	2200      	movs	r2, #0
 c005b62:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 c005b64:	68fb      	ldr	r3, [r7, #12]
 c005b66:	2200      	movs	r2, #0
 c005b68:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005b6a:	68fb      	ldr	r3, [r7, #12]
 c005b6c:	689b      	ldr	r3, [r3, #8]
 c005b6e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005b72:	d10f      	bne.n	c005b94 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c005b74:	68fb      	ldr	r3, [r7, #12]
 c005b76:	681b      	ldr	r3, [r3, #0]
 c005b78:	681a      	ldr	r2, [r3, #0]
 c005b7a:	68fb      	ldr	r3, [r7, #12]
 c005b7c:	681b      	ldr	r3, [r3, #0]
 c005b7e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005b82:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 c005b84:	68fb      	ldr	r3, [r7, #12]
 c005b86:	681b      	ldr	r3, [r3, #0]
 c005b88:	681a      	ldr	r2, [r3, #0]
 c005b8a:	68fb      	ldr	r3, [r7, #12]
 c005b8c:	681b      	ldr	r3, [r3, #0]
 c005b8e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c005b92:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005b94:	68fb      	ldr	r3, [r7, #12]
 c005b96:	681b      	ldr	r3, [r3, #0]
 c005b98:	685a      	ldr	r2, [r3, #4]
 c005b9a:	68fb      	ldr	r3, [r7, #12]
 c005b9c:	681b      	ldr	r3, [r3, #0]
 c005b9e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005ba2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c005ba4:	68fb      	ldr	r3, [r7, #12]
 c005ba6:	68db      	ldr	r3, [r3, #12]
 c005ba8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005bac:	d908      	bls.n	c005bc0 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005bae:	68fb      	ldr	r3, [r7, #12]
 c005bb0:	681b      	ldr	r3, [r3, #0]
 c005bb2:	685a      	ldr	r2, [r3, #4]
 c005bb4:	68fb      	ldr	r3, [r7, #12]
 c005bb6:	681b      	ldr	r3, [r3, #0]
 c005bb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005bbc:	605a      	str	r2, [r3, #4]
 c005bbe:	e042      	b.n	c005c46 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005bc0:	68fb      	ldr	r3, [r7, #12]
 c005bc2:	681b      	ldr	r3, [r3, #0]
 c005bc4:	685a      	ldr	r2, [r3, #4]
 c005bc6:	68fb      	ldr	r3, [r7, #12]
 c005bc8:	681b      	ldr	r3, [r3, #0]
 c005bca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c005bce:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005bd0:	68fb      	ldr	r3, [r7, #12]
 c005bd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005bd4:	699b      	ldr	r3, [r3, #24]
 c005bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005bda:	d134      	bne.n	c005c46 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005bdc:	68fb      	ldr	r3, [r7, #12]
 c005bde:	681b      	ldr	r3, [r3, #0]
 c005be0:	685a      	ldr	r2, [r3, #4]
 c005be2:	68fb      	ldr	r3, [r7, #12]
 c005be4:	681b      	ldr	r3, [r3, #0]
 c005be6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005bea:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c005bec:	68fb      	ldr	r3, [r7, #12]
 c005bee:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005bf2:	b29b      	uxth	r3, r3
 c005bf4:	f003 0301 	and.w	r3, r3, #1
 c005bf8:	2b00      	cmp	r3, #0
 c005bfa:	d111      	bne.n	c005c20 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005bfc:	68fb      	ldr	r3, [r7, #12]
 c005bfe:	681b      	ldr	r3, [r3, #0]
 c005c00:	685a      	ldr	r2, [r3, #4]
 c005c02:	68fb      	ldr	r3, [r7, #12]
 c005c04:	681b      	ldr	r3, [r3, #0]
 c005c06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005c0a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c005c0c:	68fb      	ldr	r3, [r7, #12]
 c005c0e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005c12:	b29b      	uxth	r3, r3
 c005c14:	085b      	lsrs	r3, r3, #1
 c005c16:	b29a      	uxth	r2, r3
 c005c18:	68fb      	ldr	r3, [r7, #12]
 c005c1a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c005c1e:	e012      	b.n	c005c46 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005c20:	68fb      	ldr	r3, [r7, #12]
 c005c22:	681b      	ldr	r3, [r3, #0]
 c005c24:	685a      	ldr	r2, [r3, #4]
 c005c26:	68fb      	ldr	r3, [r7, #12]
 c005c28:	681b      	ldr	r3, [r3, #0]
 c005c2a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005c2e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c005c30:	68fb      	ldr	r3, [r7, #12]
 c005c32:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005c36:	b29b      	uxth	r3, r3
 c005c38:	085b      	lsrs	r3, r3, #1
 c005c3a:	b29b      	uxth	r3, r3
 c005c3c:	3301      	adds	r3, #1
 c005c3e:	b29a      	uxth	r2, r3
 c005c40:	68fb      	ldr	r3, [r7, #12]
 c005c42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c005c46:	68fb      	ldr	r3, [r7, #12]
 c005c48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005c4a:	4a2a      	ldr	r2, [pc, #168]	; (c005cf4 <HAL_SPI_Receive_DMA+0x23c>)
 c005c4c:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 c005c4e:	68fb      	ldr	r3, [r7, #12]
 c005c50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005c52:	4a29      	ldr	r2, [pc, #164]	; (c005cf8 <HAL_SPI_Receive_DMA+0x240>)
 c005c54:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c005c56:	68fb      	ldr	r3, [r7, #12]
 c005c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005c5a:	4a28      	ldr	r2, [pc, #160]	; (c005cfc <HAL_SPI_Receive_DMA+0x244>)
 c005c5c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c005c5e:	68fb      	ldr	r3, [r7, #12]
 c005c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005c62:	2200      	movs	r2, #0
 c005c64:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005c66:	68fb      	ldr	r3, [r7, #12]
 c005c68:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c005c6a:	68fb      	ldr	r3, [r7, #12]
 c005c6c:	681b      	ldr	r3, [r3, #0]
 c005c6e:	330c      	adds	r3, #12
 c005c70:	4619      	mov	r1, r3
 c005c72:	68fb      	ldr	r3, [r7, #12]
 c005c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005c76:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c005c78:	68fb      	ldr	r3, [r7, #12]
 c005c7a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005c7e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005c80:	f7fc fe48 	bl	c002914 <HAL_DMA_Start_IT>
 c005c84:	4603      	mov	r3, r0
 c005c86:	2b00      	cmp	r3, #0
 c005c88:	d00c      	beq.n	c005ca4 <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005c8a:	68fb      	ldr	r3, [r7, #12]
 c005c8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005c8e:	f043 0210 	orr.w	r2, r3, #16
 c005c92:	68fb      	ldr	r3, [r7, #12]
 c005c94:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c005c96:	2301      	movs	r3, #1
 c005c98:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005c9a:	68fb      	ldr	r3, [r7, #12]
 c005c9c:	2201      	movs	r2, #1
 c005c9e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c005ca2:	e01e      	b.n	c005ce2 <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c005ca4:	68fb      	ldr	r3, [r7, #12]
 c005ca6:	681b      	ldr	r3, [r3, #0]
 c005ca8:	681b      	ldr	r3, [r3, #0]
 c005caa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005cae:	2b40      	cmp	r3, #64	; 0x40
 c005cb0:	d007      	beq.n	c005cc2 <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c005cb2:	68fb      	ldr	r3, [r7, #12]
 c005cb4:	681b      	ldr	r3, [r3, #0]
 c005cb6:	681a      	ldr	r2, [r3, #0]
 c005cb8:	68fb      	ldr	r3, [r7, #12]
 c005cba:	681b      	ldr	r3, [r3, #0]
 c005cbc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c005cc0:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c005cc2:	68fb      	ldr	r3, [r7, #12]
 c005cc4:	681b      	ldr	r3, [r3, #0]
 c005cc6:	685a      	ldr	r2, [r3, #4]
 c005cc8:	68fb      	ldr	r3, [r7, #12]
 c005cca:	681b      	ldr	r3, [r3, #0]
 c005ccc:	f042 0220 	orr.w	r2, r2, #32
 c005cd0:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c005cd2:	68fb      	ldr	r3, [r7, #12]
 c005cd4:	681b      	ldr	r3, [r3, #0]
 c005cd6:	685a      	ldr	r2, [r3, #4]
 c005cd8:	68fb      	ldr	r3, [r7, #12]
 c005cda:	681b      	ldr	r3, [r3, #0]
 c005cdc:	f042 0201 	orr.w	r2, r2, #1
 c005ce0:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c005ce2:	68fb      	ldr	r3, [r7, #12]
 c005ce4:	2200      	movs	r2, #0
 c005ce6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005cea:	7dfb      	ldrb	r3, [r7, #23]
}
 c005cec:	4618      	mov	r0, r3
 c005cee:	3718      	adds	r7, #24
 c005cf0:	46bd      	mov	sp, r7
 c005cf2:	bd80      	pop	{r7, pc}
 c005cf4:	0c006263 	.word	0x0c006263
 c005cf8:	0c00610f 	.word	0x0c00610f
 c005cfc:	0c00629b 	.word	0x0c00629b

0c005d00 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 c005d00:	b580      	push	{r7, lr}
 c005d02:	b086      	sub	sp, #24
 c005d04:	af00      	add	r7, sp, #0
 c005d06:	60f8      	str	r0, [r7, #12]
 c005d08:	60b9      	str	r1, [r7, #8]
 c005d0a:	607a      	str	r2, [r7, #4]
 c005d0c:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 c005d0e:	2300      	movs	r3, #0
 c005d10:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 c005d12:	68fb      	ldr	r3, [r7, #12]
 c005d14:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c005d18:	2b01      	cmp	r3, #1
 c005d1a:	d101      	bne.n	c005d20 <HAL_SPI_TransmitReceive_DMA+0x20>
 c005d1c:	2302      	movs	r3, #2
 c005d1e:	e16c      	b.n	c005ffa <HAL_SPI_TransmitReceive_DMA+0x2fa>
 c005d20:	68fb      	ldr	r3, [r7, #12]
 c005d22:	2201      	movs	r2, #1
 c005d24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 c005d28:	68fb      	ldr	r3, [r7, #12]
 c005d2a:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005d2e:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 c005d30:	68fb      	ldr	r3, [r7, #12]
 c005d32:	685b      	ldr	r3, [r3, #4]
 c005d34:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 c005d36:	7dbb      	ldrb	r3, [r7, #22]
 c005d38:	2b01      	cmp	r3, #1
 c005d3a:	d00d      	beq.n	c005d58 <HAL_SPI_TransmitReceive_DMA+0x58>
 c005d3c:	693b      	ldr	r3, [r7, #16]
 c005d3e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005d42:	d106      	bne.n	c005d52 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 c005d44:	68fb      	ldr	r3, [r7, #12]
 c005d46:	689b      	ldr	r3, [r3, #8]
 c005d48:	2b00      	cmp	r3, #0
 c005d4a:	d102      	bne.n	c005d52 <HAL_SPI_TransmitReceive_DMA+0x52>
 c005d4c:	7dbb      	ldrb	r3, [r7, #22]
 c005d4e:	2b04      	cmp	r3, #4
 c005d50:	d002      	beq.n	c005d58 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 c005d52:	2302      	movs	r3, #2
 c005d54:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005d56:	e14b      	b.n	c005ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 c005d58:	68bb      	ldr	r3, [r7, #8]
 c005d5a:	2b00      	cmp	r3, #0
 c005d5c:	d005      	beq.n	c005d6a <HAL_SPI_TransmitReceive_DMA+0x6a>
 c005d5e:	687b      	ldr	r3, [r7, #4]
 c005d60:	2b00      	cmp	r3, #0
 c005d62:	d002      	beq.n	c005d6a <HAL_SPI_TransmitReceive_DMA+0x6a>
 c005d64:	887b      	ldrh	r3, [r7, #2]
 c005d66:	2b00      	cmp	r3, #0
 c005d68:	d102      	bne.n	c005d70 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 c005d6a:	2301      	movs	r3, #1
 c005d6c:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005d6e:	e13f      	b.n	c005ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 c005d70:	68fb      	ldr	r3, [r7, #12]
 c005d72:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005d76:	b2db      	uxtb	r3, r3
 c005d78:	2b04      	cmp	r3, #4
 c005d7a:	d003      	beq.n	c005d84 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 c005d7c:	68fb      	ldr	r3, [r7, #12]
 c005d7e:	2205      	movs	r2, #5
 c005d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c005d84:	68fb      	ldr	r3, [r7, #12]
 c005d86:	2200      	movs	r2, #0
 c005d88:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 c005d8a:	68fb      	ldr	r3, [r7, #12]
 c005d8c:	68ba      	ldr	r2, [r7, #8]
 c005d8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c005d90:	68fb      	ldr	r3, [r7, #12]
 c005d92:	887a      	ldrh	r2, [r7, #2]
 c005d94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c005d96:	68fb      	ldr	r3, [r7, #12]
 c005d98:	887a      	ldrh	r2, [r7, #2]
 c005d9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 c005d9c:	68fb      	ldr	r3, [r7, #12]
 c005d9e:	687a      	ldr	r2, [r7, #4]
 c005da0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c005da2:	68fb      	ldr	r3, [r7, #12]
 c005da4:	887a      	ldrh	r2, [r7, #2]
 c005da6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c005daa:	68fb      	ldr	r3, [r7, #12]
 c005dac:	887a      	ldrh	r2, [r7, #2]
 c005dae:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c005db2:	68fb      	ldr	r3, [r7, #12]
 c005db4:	2200      	movs	r2, #0
 c005db6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c005db8:	68fb      	ldr	r3, [r7, #12]
 c005dba:	2200      	movs	r2, #0
 c005dbc:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 c005dbe:	68fb      	ldr	r3, [r7, #12]
 c005dc0:	681b      	ldr	r3, [r3, #0]
 c005dc2:	685a      	ldr	r2, [r3, #4]
 c005dc4:	68fb      	ldr	r3, [r7, #12]
 c005dc6:	681b      	ldr	r3, [r3, #0]
 c005dc8:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c005dcc:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c005dce:	68fb      	ldr	r3, [r7, #12]
 c005dd0:	68db      	ldr	r3, [r3, #12]
 c005dd2:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005dd6:	d908      	bls.n	c005dea <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005dd8:	68fb      	ldr	r3, [r7, #12]
 c005dda:	681b      	ldr	r3, [r3, #0]
 c005ddc:	685a      	ldr	r2, [r3, #4]
 c005dde:	68fb      	ldr	r3, [r7, #12]
 c005de0:	681b      	ldr	r3, [r3, #0]
 c005de2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005de6:	605a      	str	r2, [r3, #4]
 c005de8:	e06f      	b.n	c005eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005dea:	68fb      	ldr	r3, [r7, #12]
 c005dec:	681b      	ldr	r3, [r3, #0]
 c005dee:	685a      	ldr	r2, [r3, #4]
 c005df0:	68fb      	ldr	r3, [r7, #12]
 c005df2:	681b      	ldr	r3, [r3, #0]
 c005df4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c005df8:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005dfa:	68fb      	ldr	r3, [r7, #12]
 c005dfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005dfe:	699b      	ldr	r3, [r3, #24]
 c005e00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005e04:	d126      	bne.n	c005e54 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 c005e06:	68fb      	ldr	r3, [r7, #12]
 c005e08:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 c005e0a:	f003 0301 	and.w	r3, r3, #1
 c005e0e:	2b00      	cmp	r3, #0
 c005e10:	d10f      	bne.n	c005e32 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c005e12:	68fb      	ldr	r3, [r7, #12]
 c005e14:	681b      	ldr	r3, [r3, #0]
 c005e16:	685a      	ldr	r2, [r3, #4]
 c005e18:	68fb      	ldr	r3, [r7, #12]
 c005e1a:	681b      	ldr	r3, [r3, #0]
 c005e1c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c005e20:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 c005e22:	68fb      	ldr	r3, [r7, #12]
 c005e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005e26:	b29b      	uxth	r3, r3
 c005e28:	085b      	lsrs	r3, r3, #1
 c005e2a:	b29a      	uxth	r2, r3
 c005e2c:	68fb      	ldr	r3, [r7, #12]
 c005e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 c005e30:	e010      	b.n	c005e54 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c005e32:	68fb      	ldr	r3, [r7, #12]
 c005e34:	681b      	ldr	r3, [r3, #0]
 c005e36:	685a      	ldr	r2, [r3, #4]
 c005e38:	68fb      	ldr	r3, [r7, #12]
 c005e3a:	681b      	ldr	r3, [r3, #0]
 c005e3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c005e40:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c005e42:	68fb      	ldr	r3, [r7, #12]
 c005e44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005e46:	b29b      	uxth	r3, r3
 c005e48:	085b      	lsrs	r3, r3, #1
 c005e4a:	b29b      	uxth	r3, r3
 c005e4c:	3301      	adds	r3, #1
 c005e4e:	b29a      	uxth	r2, r3
 c005e50:	68fb      	ldr	r3, [r7, #12]
 c005e52:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005e54:	68fb      	ldr	r3, [r7, #12]
 c005e56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005e58:	699b      	ldr	r3, [r3, #24]
 c005e5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005e5e:	d134      	bne.n	c005eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005e60:	68fb      	ldr	r3, [r7, #12]
 c005e62:	681b      	ldr	r3, [r3, #0]
 c005e64:	685a      	ldr	r2, [r3, #4]
 c005e66:	68fb      	ldr	r3, [r7, #12]
 c005e68:	681b      	ldr	r3, [r3, #0]
 c005e6a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005e6e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c005e70:	68fb      	ldr	r3, [r7, #12]
 c005e72:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005e76:	b29b      	uxth	r3, r3
 c005e78:	f003 0301 	and.w	r3, r3, #1
 c005e7c:	2b00      	cmp	r3, #0
 c005e7e:	d111      	bne.n	c005ea4 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005e80:	68fb      	ldr	r3, [r7, #12]
 c005e82:	681b      	ldr	r3, [r3, #0]
 c005e84:	685a      	ldr	r2, [r3, #4]
 c005e86:	68fb      	ldr	r3, [r7, #12]
 c005e88:	681b      	ldr	r3, [r3, #0]
 c005e8a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005e8e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c005e90:	68fb      	ldr	r3, [r7, #12]
 c005e92:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005e96:	b29b      	uxth	r3, r3
 c005e98:	085b      	lsrs	r3, r3, #1
 c005e9a:	b29a      	uxth	r2, r3
 c005e9c:	68fb      	ldr	r3, [r7, #12]
 c005e9e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c005ea2:	e012      	b.n	c005eca <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005ea4:	68fb      	ldr	r3, [r7, #12]
 c005ea6:	681b      	ldr	r3, [r3, #0]
 c005ea8:	685a      	ldr	r2, [r3, #4]
 c005eaa:	68fb      	ldr	r3, [r7, #12]
 c005eac:	681b      	ldr	r3, [r3, #0]
 c005eae:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005eb2:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c005eb4:	68fb      	ldr	r3, [r7, #12]
 c005eb6:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005eba:	b29b      	uxth	r3, r3
 c005ebc:	085b      	lsrs	r3, r3, #1
 c005ebe:	b29b      	uxth	r3, r3
 c005ec0:	3301      	adds	r3, #1
 c005ec2:	b29a      	uxth	r2, r3
 c005ec4:	68fb      	ldr	r3, [r7, #12]
 c005ec6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 c005eca:	68fb      	ldr	r3, [r7, #12]
 c005ecc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005ed0:	b2db      	uxtb	r3, r3
 c005ed2:	2b04      	cmp	r3, #4
 c005ed4:	d108      	bne.n	c005ee8 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c005ed6:	68fb      	ldr	r3, [r7, #12]
 c005ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005eda:	4a4a      	ldr	r2, [pc, #296]	; (c006004 <HAL_SPI_TransmitReceive_DMA+0x304>)
 c005edc:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 c005ede:	68fb      	ldr	r3, [r7, #12]
 c005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005ee2:	4a49      	ldr	r2, [pc, #292]	; (c006008 <HAL_SPI_TransmitReceive_DMA+0x308>)
 c005ee4:	62da      	str	r2, [r3, #44]	; 0x2c
 c005ee6:	e007      	b.n	c005ef8 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 c005ee8:	68fb      	ldr	r3, [r7, #12]
 c005eea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005eec:	4a47      	ldr	r2, [pc, #284]	; (c00600c <HAL_SPI_TransmitReceive_DMA+0x30c>)
 c005eee:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 c005ef0:	68fb      	ldr	r3, [r7, #12]
 c005ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005ef4:	4a46      	ldr	r2, [pc, #280]	; (c006010 <HAL_SPI_TransmitReceive_DMA+0x310>)
 c005ef6:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c005ef8:	68fb      	ldr	r3, [r7, #12]
 c005efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005efc:	4a45      	ldr	r2, [pc, #276]	; (c006014 <HAL_SPI_TransmitReceive_DMA+0x314>)
 c005efe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c005f00:	68fb      	ldr	r3, [r7, #12]
 c005f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005f04:	2200      	movs	r2, #0
 c005f06:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005f08:	68fb      	ldr	r3, [r7, #12]
 c005f0a:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c005f0c:	68fb      	ldr	r3, [r7, #12]
 c005f0e:	681b      	ldr	r3, [r3, #0]
 c005f10:	330c      	adds	r3, #12
 c005f12:	4619      	mov	r1, r3
 c005f14:	68fb      	ldr	r3, [r7, #12]
 c005f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005f18:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c005f1a:	68fb      	ldr	r3, [r7, #12]
 c005f1c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005f20:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005f22:	f7fc fcf7 	bl	c002914 <HAL_DMA_Start_IT>
 c005f26:	4603      	mov	r3, r0
 c005f28:	2b00      	cmp	r3, #0
 c005f2a:	d00c      	beq.n	c005f46 <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005f2c:	68fb      	ldr	r3, [r7, #12]
 c005f2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005f30:	f043 0210 	orr.w	r2, r3, #16
 c005f34:	68fb      	ldr	r3, [r7, #12]
 c005f36:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c005f38:	2301      	movs	r3, #1
 c005f3a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005f3c:	68fb      	ldr	r3, [r7, #12]
 c005f3e:	2201      	movs	r2, #1
 c005f40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c005f44:	e054      	b.n	c005ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c005f46:	68fb      	ldr	r3, [r7, #12]
 c005f48:	681b      	ldr	r3, [r3, #0]
 c005f4a:	685a      	ldr	r2, [r3, #4]
 c005f4c:	68fb      	ldr	r3, [r7, #12]
 c005f4e:	681b      	ldr	r3, [r3, #0]
 c005f50:	f042 0201 	orr.w	r2, r2, #1
 c005f54:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 c005f56:	68fb      	ldr	r3, [r7, #12]
 c005f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005f5a:	2200      	movs	r2, #0
 c005f5c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 c005f5e:	68fb      	ldr	r3, [r7, #12]
 c005f60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005f62:	2200      	movs	r2, #0
 c005f64:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 c005f66:	68fb      	ldr	r3, [r7, #12]
 c005f68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005f6a:	2200      	movs	r2, #0
 c005f6c:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 c005f6e:	68fb      	ldr	r3, [r7, #12]
 c005f70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005f72:	2200      	movs	r2, #0
 c005f74:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c005f76:	68fb      	ldr	r3, [r7, #12]
 c005f78:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c005f7a:	68fb      	ldr	r3, [r7, #12]
 c005f7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c005f7e:	4619      	mov	r1, r3
 c005f80:	68fb      	ldr	r3, [r7, #12]
 c005f82:	681b      	ldr	r3, [r3, #0]
 c005f84:	330c      	adds	r3, #12
 c005f86:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c005f88:	68fb      	ldr	r3, [r7, #12]
 c005f8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005f8c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c005f8e:	f7fc fcc1 	bl	c002914 <HAL_DMA_Start_IT>
 c005f92:	4603      	mov	r3, r0
 c005f94:	2b00      	cmp	r3, #0
 c005f96:	d00c      	beq.n	c005fb2 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005f98:	68fb      	ldr	r3, [r7, #12]
 c005f9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005f9c:	f043 0210 	orr.w	r2, r3, #16
 c005fa0:	68fb      	ldr	r3, [r7, #12]
 c005fa2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c005fa4:	2301      	movs	r3, #1
 c005fa6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005fa8:	68fb      	ldr	r3, [r7, #12]
 c005faa:	2201      	movs	r2, #1
 c005fac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c005fb0:	e01e      	b.n	c005ff0 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c005fb2:	68fb      	ldr	r3, [r7, #12]
 c005fb4:	681b      	ldr	r3, [r3, #0]
 c005fb6:	681b      	ldr	r3, [r3, #0]
 c005fb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005fbc:	2b40      	cmp	r3, #64	; 0x40
 c005fbe:	d007      	beq.n	c005fd0 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c005fc0:	68fb      	ldr	r3, [r7, #12]
 c005fc2:	681b      	ldr	r3, [r3, #0]
 c005fc4:	681a      	ldr	r2, [r3, #0]
 c005fc6:	68fb      	ldr	r3, [r7, #12]
 c005fc8:	681b      	ldr	r3, [r3, #0]
 c005fca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c005fce:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c005fd0:	68fb      	ldr	r3, [r7, #12]
 c005fd2:	681b      	ldr	r3, [r3, #0]
 c005fd4:	685a      	ldr	r2, [r3, #4]
 c005fd6:	68fb      	ldr	r3, [r7, #12]
 c005fd8:	681b      	ldr	r3, [r3, #0]
 c005fda:	f042 0220 	orr.w	r2, r2, #32
 c005fde:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c005fe0:	68fb      	ldr	r3, [r7, #12]
 c005fe2:	681b      	ldr	r3, [r3, #0]
 c005fe4:	685a      	ldr	r2, [r3, #4]
 c005fe6:	68fb      	ldr	r3, [r7, #12]
 c005fe8:	681b      	ldr	r3, [r3, #0]
 c005fea:	f042 0202 	orr.w	r2, r2, #2
 c005fee:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c005ff0:	68fb      	ldr	r3, [r7, #12]
 c005ff2:	2200      	movs	r2, #0
 c005ff4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005ff8:	7dfb      	ldrb	r3, [r7, #23]
}
 c005ffa:	4618      	mov	r0, r3
 c005ffc:	3718      	adds	r7, #24
 c005ffe:	46bd      	mov	sp, r7
 c006000:	bd80      	pop	{r7, pc}
 c006002:	bf00      	nop
 c006004:	0c006263 	.word	0x0c006263
 c006008:	0c00610f 	.word	0x0c00610f
 c00600c:	0c00627f 	.word	0x0c00627f
 c006010:	0c0061b7 	.word	0x0c0061b7
 c006014:	0c00629b 	.word	0x0c00629b

0c006018 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c006018:	b480      	push	{r7}
 c00601a:	b083      	sub	sp, #12
 c00601c:	af00      	add	r7, sp, #0
 c00601e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 c006020:	bf00      	nop
 c006022:	370c      	adds	r7, #12
 c006024:	46bd      	mov	sp, r7
 c006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00602a:	4770      	bx	lr

0c00602c <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c00602c:	b480      	push	{r7}
 c00602e:	b083      	sub	sp, #12
 c006030:	af00      	add	r7, sp, #0
 c006032:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 c006034:	bf00      	nop
 c006036:	370c      	adds	r7, #12
 c006038:	46bd      	mov	sp, r7
 c00603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00603e:	4770      	bx	lr

0c006040 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c006040:	b480      	push	{r7}
 c006042:	b083      	sub	sp, #12
 c006044:	af00      	add	r7, sp, #0
 c006046:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 c006048:	bf00      	nop
 c00604a:	370c      	adds	r7, #12
 c00604c:	46bd      	mov	sp, r7
 c00604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006052:	4770      	bx	lr

0c006054 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 c006054:	b480      	push	{r7}
 c006056:	b083      	sub	sp, #12
 c006058:	af00      	add	r7, sp, #0
 c00605a:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 c00605c:	bf00      	nop
 c00605e:	370c      	adds	r7, #12
 c006060:	46bd      	mov	sp, r7
 c006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006066:	4770      	bx	lr

0c006068 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 c006068:	b580      	push	{r7, lr}
 c00606a:	b086      	sub	sp, #24
 c00606c:	af00      	add	r7, sp, #0
 c00606e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c006070:	687b      	ldr	r3, [r7, #4]
 c006072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006074:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c006076:	f7fc fa65 	bl	c002544 <HAL_GetTick>
 c00607a:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c00607c:	687b      	ldr	r3, [r7, #4]
 c00607e:	681b      	ldr	r3, [r3, #0]
 c006080:	681b      	ldr	r3, [r3, #0]
 c006082:	f003 0320 	and.w	r3, r3, #32
 c006086:	2b20      	cmp	r3, #32
 c006088:	d03b      	beq.n	c006102 <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c00608a:	697b      	ldr	r3, [r7, #20]
 c00608c:	681b      	ldr	r3, [r3, #0]
 c00608e:	685a      	ldr	r2, [r3, #4]
 c006090:	697b      	ldr	r3, [r7, #20]
 c006092:	681b      	ldr	r3, [r3, #0]
 c006094:	f022 0220 	bic.w	r2, r2, #32
 c006098:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c00609a:	697b      	ldr	r3, [r7, #20]
 c00609c:	681b      	ldr	r3, [r3, #0]
 c00609e:	685a      	ldr	r2, [r3, #4]
 c0060a0:	697b      	ldr	r3, [r7, #20]
 c0060a2:	681b      	ldr	r3, [r3, #0]
 c0060a4:	f022 0202 	bic.w	r2, r2, #2
 c0060a8:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c0060aa:	693a      	ldr	r2, [r7, #16]
 c0060ac:	2164      	movs	r1, #100	; 0x64
 c0060ae:	6978      	ldr	r0, [r7, #20]
 c0060b0:	f000 fa8a 	bl	c0065c8 <SPI_EndRxTxTransaction>
 c0060b4:	4603      	mov	r3, r0
 c0060b6:	2b00      	cmp	r3, #0
 c0060b8:	d005      	beq.n	c0060c6 <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0060ba:	697b      	ldr	r3, [r7, #20]
 c0060bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0060be:	f043 0220 	orr.w	r2, r3, #32
 c0060c2:	697b      	ldr	r3, [r7, #20]
 c0060c4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 c0060c6:	697b      	ldr	r3, [r7, #20]
 c0060c8:	689b      	ldr	r3, [r3, #8]
 c0060ca:	2b00      	cmp	r3, #0
 c0060cc:	d10a      	bne.n	c0060e4 <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 c0060ce:	2300      	movs	r3, #0
 c0060d0:	60fb      	str	r3, [r7, #12]
 c0060d2:	697b      	ldr	r3, [r7, #20]
 c0060d4:	681b      	ldr	r3, [r3, #0]
 c0060d6:	68db      	ldr	r3, [r3, #12]
 c0060d8:	60fb      	str	r3, [r7, #12]
 c0060da:	697b      	ldr	r3, [r7, #20]
 c0060dc:	681b      	ldr	r3, [r3, #0]
 c0060de:	689b      	ldr	r3, [r3, #8]
 c0060e0:	60fb      	str	r3, [r7, #12]
 c0060e2:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 c0060e4:	697b      	ldr	r3, [r7, #20]
 c0060e6:	2200      	movs	r2, #0
 c0060e8:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 c0060ea:	697b      	ldr	r3, [r7, #20]
 c0060ec:	2201      	movs	r2, #1
 c0060ee:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c0060f2:	697b      	ldr	r3, [r7, #20]
 c0060f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0060f6:	2b00      	cmp	r3, #0
 c0060f8:	d003      	beq.n	c006102 <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c0060fa:	6978      	ldr	r0, [r7, #20]
 c0060fc:	f7ff ffaa 	bl	c006054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c006100:	e002      	b.n	c006108 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 c006102:	6978      	ldr	r0, [r7, #20]
 c006104:	f7fa fec4 	bl	c000e90 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c006108:	3718      	adds	r7, #24
 c00610a:	46bd      	mov	sp, r7
 c00610c:	bd80      	pop	{r7, pc}

0c00610e <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c00610e:	b580      	push	{r7, lr}
 c006110:	b084      	sub	sp, #16
 c006112:	af00      	add	r7, sp, #0
 c006114:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c006116:	687b      	ldr	r3, [r7, #4]
 c006118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00611a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c00611c:	f7fc fa12 	bl	c002544 <HAL_GetTick>
 c006120:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c006122:	687b      	ldr	r3, [r7, #4]
 c006124:	681b      	ldr	r3, [r3, #0]
 c006126:	681b      	ldr	r3, [r3, #0]
 c006128:	f003 0320 	and.w	r3, r3, #32
 c00612c:	2b20      	cmp	r3, #32
 c00612e:	d03c      	beq.n	c0061aa <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c006130:	68fb      	ldr	r3, [r7, #12]
 c006132:	681b      	ldr	r3, [r3, #0]
 c006134:	685a      	ldr	r2, [r3, #4]
 c006136:	68fb      	ldr	r3, [r7, #12]
 c006138:	681b      	ldr	r3, [r3, #0]
 c00613a:	f022 0220 	bic.w	r2, r2, #32
 c00613e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c006140:	68fb      	ldr	r3, [r7, #12]
 c006142:	689b      	ldr	r3, [r3, #8]
 c006144:	2b00      	cmp	r3, #0
 c006146:	d10d      	bne.n	c006164 <SPI_DMAReceiveCplt+0x56>
 c006148:	68fb      	ldr	r3, [r7, #12]
 c00614a:	685b      	ldr	r3, [r3, #4]
 c00614c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c006150:	d108      	bne.n	c006164 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c006152:	68fb      	ldr	r3, [r7, #12]
 c006154:	681b      	ldr	r3, [r3, #0]
 c006156:	685a      	ldr	r2, [r3, #4]
 c006158:	68fb      	ldr	r3, [r7, #12]
 c00615a:	681b      	ldr	r3, [r3, #0]
 c00615c:	f022 0203 	bic.w	r2, r2, #3
 c006160:	605a      	str	r2, [r3, #4]
 c006162:	e007      	b.n	c006174 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c006164:	68fb      	ldr	r3, [r7, #12]
 c006166:	681b      	ldr	r3, [r3, #0]
 c006168:	685a      	ldr	r2, [r3, #4]
 c00616a:	68fb      	ldr	r3, [r7, #12]
 c00616c:	681b      	ldr	r3, [r3, #0]
 c00616e:	f022 0201 	bic.w	r2, r2, #1
 c006172:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c006174:	68ba      	ldr	r2, [r7, #8]
 c006176:	2164      	movs	r1, #100	; 0x64
 c006178:	68f8      	ldr	r0, [r7, #12]
 c00617a:	f000 f9cd 	bl	c006518 <SPI_EndRxTransaction>
 c00617e:	4603      	mov	r3, r0
 c006180:	2b00      	cmp	r3, #0
 c006182:	d002      	beq.n	c00618a <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 c006184:	68fb      	ldr	r3, [r7, #12]
 c006186:	2220      	movs	r2, #32
 c006188:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 c00618a:	68fb      	ldr	r3, [r7, #12]
 c00618c:	2200      	movs	r2, #0
 c00618e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c006192:	68fb      	ldr	r3, [r7, #12]
 c006194:	2201      	movs	r2, #1
 c006196:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c00619a:	68fb      	ldr	r3, [r7, #12]
 c00619c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00619e:	2b00      	cmp	r3, #0
 c0061a0:	d003      	beq.n	c0061aa <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c0061a2:	68f8      	ldr	r0, [r7, #12]
 c0061a4:	f7ff ff56 	bl	c006054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c0061a8:	e002      	b.n	c0061b0 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 c0061aa:	68f8      	ldr	r0, [r7, #12]
 c0061ac:	f7fa fe80 	bl	c000eb0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0061b0:	3710      	adds	r7, #16
 c0061b2:	46bd      	mov	sp, r7
 c0061b4:	bd80      	pop	{r7, pc}

0c0061b6 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0061b6:	b580      	push	{r7, lr}
 c0061b8:	b084      	sub	sp, #16
 c0061ba:	af00      	add	r7, sp, #0
 c0061bc:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0061be:	687b      	ldr	r3, [r7, #4]
 c0061c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0061c2:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c0061c4:	f7fc f9be 	bl	c002544 <HAL_GetTick>
 c0061c8:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c0061ca:	687b      	ldr	r3, [r7, #4]
 c0061cc:	681b      	ldr	r3, [r3, #0]
 c0061ce:	681b      	ldr	r3, [r3, #0]
 c0061d0:	f003 0320 	and.w	r3, r3, #32
 c0061d4:	2b20      	cmp	r3, #32
 c0061d6:	d030      	beq.n	c00623a <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c0061d8:	68fb      	ldr	r3, [r7, #12]
 c0061da:	681b      	ldr	r3, [r3, #0]
 c0061dc:	685a      	ldr	r2, [r3, #4]
 c0061de:	68fb      	ldr	r3, [r7, #12]
 c0061e0:	681b      	ldr	r3, [r3, #0]
 c0061e2:	f022 0220 	bic.w	r2, r2, #32
 c0061e6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c0061e8:	68ba      	ldr	r2, [r7, #8]
 c0061ea:	2164      	movs	r1, #100	; 0x64
 c0061ec:	68f8      	ldr	r0, [r7, #12]
 c0061ee:	f000 f9eb 	bl	c0065c8 <SPI_EndRxTxTransaction>
 c0061f2:	4603      	mov	r3, r0
 c0061f4:	2b00      	cmp	r3, #0
 c0061f6:	d005      	beq.n	c006204 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0061f8:	68fb      	ldr	r3, [r7, #12]
 c0061fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0061fc:	f043 0220 	orr.w	r2, r3, #32
 c006200:	68fb      	ldr	r3, [r7, #12]
 c006202:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c006204:	68fb      	ldr	r3, [r7, #12]
 c006206:	681b      	ldr	r3, [r3, #0]
 c006208:	685a      	ldr	r2, [r3, #4]
 c00620a:	68fb      	ldr	r3, [r7, #12]
 c00620c:	681b      	ldr	r3, [r3, #0]
 c00620e:	f022 0203 	bic.w	r2, r2, #3
 c006212:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 c006214:	68fb      	ldr	r3, [r7, #12]
 c006216:	2200      	movs	r2, #0
 c006218:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 c00621a:	68fb      	ldr	r3, [r7, #12]
 c00621c:	2200      	movs	r2, #0
 c00621e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c006222:	68fb      	ldr	r3, [r7, #12]
 c006224:	2201      	movs	r2, #1
 c006226:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c00622a:	68fb      	ldr	r3, [r7, #12]
 c00622c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00622e:	2b00      	cmp	r3, #0
 c006230:	d003      	beq.n	c00623a <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c006232:	68f8      	ldr	r0, [r7, #12]
 c006234:	f7ff ff0e 	bl	c006054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c006238:	e002      	b.n	c006240 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 c00623a:	68f8      	ldr	r0, [r7, #12]
 c00623c:	f7fa fe18 	bl	c000e70 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c006240:	3710      	adds	r7, #16
 c006242:	46bd      	mov	sp, r7
 c006244:	bd80      	pop	{r7, pc}

0c006246 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 c006246:	b580      	push	{r7, lr}
 c006248:	b084      	sub	sp, #16
 c00624a:	af00      	add	r7, sp, #0
 c00624c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00624e:	687b      	ldr	r3, [r7, #4]
 c006250:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006252:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 c006254:	68f8      	ldr	r0, [r7, #12]
 c006256:	f7ff fedf 	bl	c006018 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c00625a:	bf00      	nop
 c00625c:	3710      	adds	r7, #16
 c00625e:	46bd      	mov	sp, r7
 c006260:	bd80      	pop	{r7, pc}

0c006262 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c006262:	b580      	push	{r7, lr}
 c006264:	b084      	sub	sp, #16
 c006266:	af00      	add	r7, sp, #0
 c006268:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00626a:	687b      	ldr	r3, [r7, #4]
 c00626c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00626e:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 c006270:	68f8      	ldr	r0, [r7, #12]
 c006272:	f7ff fedb 	bl	c00602c <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c006276:	bf00      	nop
 c006278:	3710      	adds	r7, #16
 c00627a:	46bd      	mov	sp, r7
 c00627c:	bd80      	pop	{r7, pc}

0c00627e <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c00627e:	b580      	push	{r7, lr}
 c006280:	b084      	sub	sp, #16
 c006282:	af00      	add	r7, sp, #0
 c006284:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c006286:	687b      	ldr	r3, [r7, #4]
 c006288:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00628a:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 c00628c:	68f8      	ldr	r0, [r7, #12]
 c00628e:	f7ff fed7 	bl	c006040 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c006292:	bf00      	nop
 c006294:	3710      	adds	r7, #16
 c006296:	46bd      	mov	sp, r7
 c006298:	bd80      	pop	{r7, pc}

0c00629a <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 c00629a:	b580      	push	{r7, lr}
 c00629c:	b084      	sub	sp, #16
 c00629e:	af00      	add	r7, sp, #0
 c0062a0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0062a2:	687b      	ldr	r3, [r7, #4]
 c0062a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0062a6:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c0062a8:	68fb      	ldr	r3, [r7, #12]
 c0062aa:	681b      	ldr	r3, [r3, #0]
 c0062ac:	685a      	ldr	r2, [r3, #4]
 c0062ae:	68fb      	ldr	r3, [r7, #12]
 c0062b0:	681b      	ldr	r3, [r3, #0]
 c0062b2:	f022 0203 	bic.w	r2, r2, #3
 c0062b6:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c0062b8:	68fb      	ldr	r3, [r7, #12]
 c0062ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0062bc:	f043 0210 	orr.w	r2, r3, #16
 c0062c0:	68fb      	ldr	r3, [r7, #12]
 c0062c2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 c0062c4:	68fb      	ldr	r3, [r7, #12]
 c0062c6:	2201      	movs	r2, #1
 c0062c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 c0062cc:	68f8      	ldr	r0, [r7, #12]
 c0062ce:	f7ff fec1 	bl	c006054 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0062d2:	bf00      	nop
 c0062d4:	3710      	adds	r7, #16
 c0062d6:	46bd      	mov	sp, r7
 c0062d8:	bd80      	pop	{r7, pc}
	...

0c0062dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c0062dc:	b580      	push	{r7, lr}
 c0062de:	b088      	sub	sp, #32
 c0062e0:	af00      	add	r7, sp, #0
 c0062e2:	60f8      	str	r0, [r7, #12]
 c0062e4:	60b9      	str	r1, [r7, #8]
 c0062e6:	603b      	str	r3, [r7, #0]
 c0062e8:	4613      	mov	r3, r2
 c0062ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 c0062ec:	f7fc f92a 	bl	c002544 <HAL_GetTick>
 c0062f0:	4602      	mov	r2, r0
 c0062f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0062f4:	1a9b      	subs	r3, r3, r2
 c0062f6:	683a      	ldr	r2, [r7, #0]
 c0062f8:	4413      	add	r3, r2
 c0062fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 c0062fc:	f7fc f922 	bl	c002544 <HAL_GetTick>
 c006300:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 c006302:	4b39      	ldr	r3, [pc, #228]	; (c0063e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 c006304:	681b      	ldr	r3, [r3, #0]
 c006306:	015b      	lsls	r3, r3, #5
 c006308:	0d1b      	lsrs	r3, r3, #20
 c00630a:	69fa      	ldr	r2, [r7, #28]
 c00630c:	fb02 f303 	mul.w	r3, r2, r3
 c006310:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c006312:	e054      	b.n	c0063be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 c006314:	683b      	ldr	r3, [r7, #0]
 c006316:	f1b3 3fff 	cmp.w	r3, #4294967295
 c00631a:	d050      	beq.n	c0063be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c00631c:	f7fc f912 	bl	c002544 <HAL_GetTick>
 c006320:	4602      	mov	r2, r0
 c006322:	69bb      	ldr	r3, [r7, #24]
 c006324:	1ad3      	subs	r3, r2, r3
 c006326:	69fa      	ldr	r2, [r7, #28]
 c006328:	429a      	cmp	r2, r3
 c00632a:	d902      	bls.n	c006332 <SPI_WaitFlagStateUntilTimeout+0x56>
 c00632c:	69fb      	ldr	r3, [r7, #28]
 c00632e:	2b00      	cmp	r3, #0
 c006330:	d13d      	bne.n	c0063ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c006332:	68fb      	ldr	r3, [r7, #12]
 c006334:	681b      	ldr	r3, [r3, #0]
 c006336:	685a      	ldr	r2, [r3, #4]
 c006338:	68fb      	ldr	r3, [r7, #12]
 c00633a:	681b      	ldr	r3, [r3, #0]
 c00633c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c006340:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c006342:	68fb      	ldr	r3, [r7, #12]
 c006344:	685b      	ldr	r3, [r3, #4]
 c006346:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c00634a:	d111      	bne.n	c006370 <SPI_WaitFlagStateUntilTimeout+0x94>
 c00634c:	68fb      	ldr	r3, [r7, #12]
 c00634e:	689b      	ldr	r3, [r3, #8]
 c006350:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c006354:	d004      	beq.n	c006360 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c006356:	68fb      	ldr	r3, [r7, #12]
 c006358:	689b      	ldr	r3, [r3, #8]
 c00635a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00635e:	d107      	bne.n	c006370 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c006360:	68fb      	ldr	r3, [r7, #12]
 c006362:	681b      	ldr	r3, [r3, #0]
 c006364:	681a      	ldr	r2, [r3, #0]
 c006366:	68fb      	ldr	r3, [r7, #12]
 c006368:	681b      	ldr	r3, [r3, #0]
 c00636a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c00636e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c006370:	68fb      	ldr	r3, [r7, #12]
 c006372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006374:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c006378:	d10f      	bne.n	c00639a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 c00637a:	68fb      	ldr	r3, [r7, #12]
 c00637c:	681b      	ldr	r3, [r3, #0]
 c00637e:	681a      	ldr	r2, [r3, #0]
 c006380:	68fb      	ldr	r3, [r7, #12]
 c006382:	681b      	ldr	r3, [r3, #0]
 c006384:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c006388:	601a      	str	r2, [r3, #0]
 c00638a:	68fb      	ldr	r3, [r7, #12]
 c00638c:	681b      	ldr	r3, [r3, #0]
 c00638e:	681a      	ldr	r2, [r3, #0]
 c006390:	68fb      	ldr	r3, [r7, #12]
 c006392:	681b      	ldr	r3, [r3, #0]
 c006394:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c006398:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c00639a:	68fb      	ldr	r3, [r7, #12]
 c00639c:	2201      	movs	r2, #1
 c00639e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c0063a2:	68fb      	ldr	r3, [r7, #12]
 c0063a4:	2200      	movs	r2, #0
 c0063a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c0063aa:	2303      	movs	r3, #3
 c0063ac:	e017      	b.n	c0063de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c0063ae:	697b      	ldr	r3, [r7, #20]
 c0063b0:	2b00      	cmp	r3, #0
 c0063b2:	d101      	bne.n	c0063b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 c0063b4:	2300      	movs	r3, #0
 c0063b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 c0063b8:	697b      	ldr	r3, [r7, #20]
 c0063ba:	3b01      	subs	r3, #1
 c0063bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c0063be:	68fb      	ldr	r3, [r7, #12]
 c0063c0:	681b      	ldr	r3, [r3, #0]
 c0063c2:	689a      	ldr	r2, [r3, #8]
 c0063c4:	68bb      	ldr	r3, [r7, #8]
 c0063c6:	4013      	ands	r3, r2
 c0063c8:	68ba      	ldr	r2, [r7, #8]
 c0063ca:	429a      	cmp	r2, r3
 c0063cc:	bf0c      	ite	eq
 c0063ce:	2301      	moveq	r3, #1
 c0063d0:	2300      	movne	r3, #0
 c0063d2:	b2db      	uxtb	r3, r3
 c0063d4:	461a      	mov	r2, r3
 c0063d6:	79fb      	ldrb	r3, [r7, #7]
 c0063d8:	429a      	cmp	r2, r3
 c0063da:	d19b      	bne.n	c006314 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 c0063dc:	2300      	movs	r3, #0
}
 c0063de:	4618      	mov	r0, r3
 c0063e0:	3720      	adds	r7, #32
 c0063e2:	46bd      	mov	sp, r7
 c0063e4:	bd80      	pop	{r7, pc}
 c0063e6:	bf00      	nop
 c0063e8:	300000f8 	.word	0x300000f8

0c0063ec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c0063ec:	b580      	push	{r7, lr}
 c0063ee:	b08a      	sub	sp, #40	; 0x28
 c0063f0:	af00      	add	r7, sp, #0
 c0063f2:	60f8      	str	r0, [r7, #12]
 c0063f4:	60b9      	str	r1, [r7, #8]
 c0063f6:	607a      	str	r2, [r7, #4]
 c0063f8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 c0063fa:	2300      	movs	r3, #0
 c0063fc:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 c0063fe:	f7fc f8a1 	bl	c002544 <HAL_GetTick>
 c006402:	4602      	mov	r2, r0
 c006404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c006406:	1a9b      	subs	r3, r3, r2
 c006408:	683a      	ldr	r2, [r7, #0]
 c00640a:	4413      	add	r3, r2
 c00640c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 c00640e:	f7fc f899 	bl	c002544 <HAL_GetTick>
 c006412:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 c006414:	68fb      	ldr	r3, [r7, #12]
 c006416:	681b      	ldr	r3, [r3, #0]
 c006418:	330c      	adds	r3, #12
 c00641a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 c00641c:	4b3d      	ldr	r3, [pc, #244]	; (c006514 <SPI_WaitFifoStateUntilTimeout+0x128>)
 c00641e:	681a      	ldr	r2, [r3, #0]
 c006420:	4613      	mov	r3, r2
 c006422:	009b      	lsls	r3, r3, #2
 c006424:	4413      	add	r3, r2
 c006426:	00da      	lsls	r2, r3, #3
 c006428:	1ad3      	subs	r3, r2, r3
 c00642a:	0d1b      	lsrs	r3, r3, #20
 c00642c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00642e:	fb02 f303 	mul.w	r3, r2, r3
 c006432:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 c006434:	e060      	b.n	c0064f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 c006436:	68bb      	ldr	r3, [r7, #8]
 c006438:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c00643c:	d107      	bne.n	c00644e <SPI_WaitFifoStateUntilTimeout+0x62>
 c00643e:	687b      	ldr	r3, [r7, #4]
 c006440:	2b00      	cmp	r3, #0
 c006442:	d104      	bne.n	c00644e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 c006444:	69fb      	ldr	r3, [r7, #28]
 c006446:	781b      	ldrb	r3, [r3, #0]
 c006448:	b2db      	uxtb	r3, r3
 c00644a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 c00644c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 c00644e:	683b      	ldr	r3, [r7, #0]
 c006450:	f1b3 3fff 	cmp.w	r3, #4294967295
 c006454:	d050      	beq.n	c0064f8 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c006456:	f7fc f875 	bl	c002544 <HAL_GetTick>
 c00645a:	4602      	mov	r2, r0
 c00645c:	6a3b      	ldr	r3, [r7, #32]
 c00645e:	1ad3      	subs	r3, r2, r3
 c006460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c006462:	429a      	cmp	r2, r3
 c006464:	d902      	bls.n	c00646c <SPI_WaitFifoStateUntilTimeout+0x80>
 c006466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006468:	2b00      	cmp	r3, #0
 c00646a:	d13d      	bne.n	c0064e8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c00646c:	68fb      	ldr	r3, [r7, #12]
 c00646e:	681b      	ldr	r3, [r3, #0]
 c006470:	685a      	ldr	r2, [r3, #4]
 c006472:	68fb      	ldr	r3, [r7, #12]
 c006474:	681b      	ldr	r3, [r3, #0]
 c006476:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c00647a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c00647c:	68fb      	ldr	r3, [r7, #12]
 c00647e:	685b      	ldr	r3, [r3, #4]
 c006480:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c006484:	d111      	bne.n	c0064aa <SPI_WaitFifoStateUntilTimeout+0xbe>
 c006486:	68fb      	ldr	r3, [r7, #12]
 c006488:	689b      	ldr	r3, [r3, #8]
 c00648a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00648e:	d004      	beq.n	c00649a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c006490:	68fb      	ldr	r3, [r7, #12]
 c006492:	689b      	ldr	r3, [r3, #8]
 c006494:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006498:	d107      	bne.n	c0064aa <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c00649a:	68fb      	ldr	r3, [r7, #12]
 c00649c:	681b      	ldr	r3, [r3, #0]
 c00649e:	681a      	ldr	r2, [r3, #0]
 c0064a0:	68fb      	ldr	r3, [r7, #12]
 c0064a2:	681b      	ldr	r3, [r3, #0]
 c0064a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0064a8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c0064aa:	68fb      	ldr	r3, [r7, #12]
 c0064ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0064ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0064b2:	d10f      	bne.n	c0064d4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 c0064b4:	68fb      	ldr	r3, [r7, #12]
 c0064b6:	681b      	ldr	r3, [r3, #0]
 c0064b8:	681a      	ldr	r2, [r3, #0]
 c0064ba:	68fb      	ldr	r3, [r7, #12]
 c0064bc:	681b      	ldr	r3, [r3, #0]
 c0064be:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0064c2:	601a      	str	r2, [r3, #0]
 c0064c4:	68fb      	ldr	r3, [r7, #12]
 c0064c6:	681b      	ldr	r3, [r3, #0]
 c0064c8:	681a      	ldr	r2, [r3, #0]
 c0064ca:	68fb      	ldr	r3, [r7, #12]
 c0064cc:	681b      	ldr	r3, [r3, #0]
 c0064ce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c0064d2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c0064d4:	68fb      	ldr	r3, [r7, #12]
 c0064d6:	2201      	movs	r2, #1
 c0064d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c0064dc:	68fb      	ldr	r3, [r7, #12]
 c0064de:	2200      	movs	r2, #0
 c0064e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c0064e4:	2303      	movs	r3, #3
 c0064e6:	e010      	b.n	c00650a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c0064e8:	69bb      	ldr	r3, [r7, #24]
 c0064ea:	2b00      	cmp	r3, #0
 c0064ec:	d101      	bne.n	c0064f2 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 c0064ee:	2300      	movs	r3, #0
 c0064f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 c0064f2:	69bb      	ldr	r3, [r7, #24]
 c0064f4:	3b01      	subs	r3, #1
 c0064f6:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 c0064f8:	68fb      	ldr	r3, [r7, #12]
 c0064fa:	681b      	ldr	r3, [r3, #0]
 c0064fc:	689a      	ldr	r2, [r3, #8]
 c0064fe:	68bb      	ldr	r3, [r7, #8]
 c006500:	4013      	ands	r3, r2
 c006502:	687a      	ldr	r2, [r7, #4]
 c006504:	429a      	cmp	r2, r3
 c006506:	d196      	bne.n	c006436 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 c006508:	2300      	movs	r3, #0
}
 c00650a:	4618      	mov	r0, r3
 c00650c:	3728      	adds	r7, #40	; 0x28
 c00650e:	46bd      	mov	sp, r7
 c006510:	bd80      	pop	{r7, pc}
 c006512:	bf00      	nop
 c006514:	300000f8 	.word	0x300000f8

0c006518 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 c006518:	b580      	push	{r7, lr}
 c00651a:	b086      	sub	sp, #24
 c00651c:	af02      	add	r7, sp, #8
 c00651e:	60f8      	str	r0, [r7, #12]
 c006520:	60b9      	str	r1, [r7, #8]
 c006522:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c006524:	68fb      	ldr	r3, [r7, #12]
 c006526:	685b      	ldr	r3, [r3, #4]
 c006528:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c00652c:	d111      	bne.n	c006552 <SPI_EndRxTransaction+0x3a>
 c00652e:	68fb      	ldr	r3, [r7, #12]
 c006530:	689b      	ldr	r3, [r3, #8]
 c006532:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c006536:	d004      	beq.n	c006542 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c006538:	68fb      	ldr	r3, [r7, #12]
 c00653a:	689b      	ldr	r3, [r3, #8]
 c00653c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006540:	d107      	bne.n	c006552 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 c006542:	68fb      	ldr	r3, [r7, #12]
 c006544:	681b      	ldr	r3, [r3, #0]
 c006546:	681a      	ldr	r2, [r3, #0]
 c006548:	68fb      	ldr	r3, [r7, #12]
 c00654a:	681b      	ldr	r3, [r3, #0]
 c00654c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c006550:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c006552:	687b      	ldr	r3, [r7, #4]
 c006554:	9300      	str	r3, [sp, #0]
 c006556:	68bb      	ldr	r3, [r7, #8]
 c006558:	2200      	movs	r2, #0
 c00655a:	2180      	movs	r1, #128	; 0x80
 c00655c:	68f8      	ldr	r0, [r7, #12]
 c00655e:	f7ff febd 	bl	c0062dc <SPI_WaitFlagStateUntilTimeout>
 c006562:	4603      	mov	r3, r0
 c006564:	2b00      	cmp	r3, #0
 c006566:	d007      	beq.n	c006578 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c006568:	68fb      	ldr	r3, [r7, #12]
 c00656a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00656c:	f043 0220 	orr.w	r2, r3, #32
 c006570:	68fb      	ldr	r3, [r7, #12]
 c006572:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c006574:	2303      	movs	r3, #3
 c006576:	e023      	b.n	c0065c0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c006578:	68fb      	ldr	r3, [r7, #12]
 c00657a:	685b      	ldr	r3, [r3, #4]
 c00657c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c006580:	d11d      	bne.n	c0065be <SPI_EndRxTransaction+0xa6>
 c006582:	68fb      	ldr	r3, [r7, #12]
 c006584:	689b      	ldr	r3, [r3, #8]
 c006586:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00658a:	d004      	beq.n	c006596 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c00658c:	68fb      	ldr	r3, [r7, #12]
 c00658e:	689b      	ldr	r3, [r3, #8]
 c006590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006594:	d113      	bne.n	c0065be <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c006596:	687b      	ldr	r3, [r7, #4]
 c006598:	9300      	str	r3, [sp, #0]
 c00659a:	68bb      	ldr	r3, [r7, #8]
 c00659c:	2200      	movs	r2, #0
 c00659e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c0065a2:	68f8      	ldr	r0, [r7, #12]
 c0065a4:	f7ff ff22 	bl	c0063ec <SPI_WaitFifoStateUntilTimeout>
 c0065a8:	4603      	mov	r3, r0
 c0065aa:	2b00      	cmp	r3, #0
 c0065ac:	d007      	beq.n	c0065be <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0065ae:	68fb      	ldr	r3, [r7, #12]
 c0065b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0065b2:	f043 0220 	orr.w	r2, r3, #32
 c0065b6:	68fb      	ldr	r3, [r7, #12]
 c0065b8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 c0065ba:	2303      	movs	r3, #3
 c0065bc:	e000      	b.n	c0065c0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 c0065be:	2300      	movs	r3, #0
}
 c0065c0:	4618      	mov	r0, r3
 c0065c2:	3710      	adds	r7, #16
 c0065c4:	46bd      	mov	sp, r7
 c0065c6:	bd80      	pop	{r7, pc}

0c0065c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 c0065c8:	b580      	push	{r7, lr}
 c0065ca:	b086      	sub	sp, #24
 c0065cc:	af02      	add	r7, sp, #8
 c0065ce:	60f8      	str	r0, [r7, #12]
 c0065d0:	60b9      	str	r1, [r7, #8]
 c0065d2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c0065d4:	687b      	ldr	r3, [r7, #4]
 c0065d6:	9300      	str	r3, [sp, #0]
 c0065d8:	68bb      	ldr	r3, [r7, #8]
 c0065da:	2200      	movs	r2, #0
 c0065dc:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 c0065e0:	68f8      	ldr	r0, [r7, #12]
 c0065e2:	f7ff ff03 	bl	c0063ec <SPI_WaitFifoStateUntilTimeout>
 c0065e6:	4603      	mov	r3, r0
 c0065e8:	2b00      	cmp	r3, #0
 c0065ea:	d007      	beq.n	c0065fc <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0065ec:	68fb      	ldr	r3, [r7, #12]
 c0065ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0065f0:	f043 0220 	orr.w	r2, r3, #32
 c0065f4:	68fb      	ldr	r3, [r7, #12]
 c0065f6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0065f8:	2303      	movs	r3, #3
 c0065fa:	e027      	b.n	c00664c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c0065fc:	687b      	ldr	r3, [r7, #4]
 c0065fe:	9300      	str	r3, [sp, #0]
 c006600:	68bb      	ldr	r3, [r7, #8]
 c006602:	2200      	movs	r2, #0
 c006604:	2180      	movs	r1, #128	; 0x80
 c006606:	68f8      	ldr	r0, [r7, #12]
 c006608:	f7ff fe68 	bl	c0062dc <SPI_WaitFlagStateUntilTimeout>
 c00660c:	4603      	mov	r3, r0
 c00660e:	2b00      	cmp	r3, #0
 c006610:	d007      	beq.n	c006622 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c006612:	68fb      	ldr	r3, [r7, #12]
 c006614:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c006616:	f043 0220 	orr.w	r2, r3, #32
 c00661a:	68fb      	ldr	r3, [r7, #12]
 c00661c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c00661e:	2303      	movs	r3, #3
 c006620:	e014      	b.n	c00664c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c006622:	687b      	ldr	r3, [r7, #4]
 c006624:	9300      	str	r3, [sp, #0]
 c006626:	68bb      	ldr	r3, [r7, #8]
 c006628:	2200      	movs	r2, #0
 c00662a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c00662e:	68f8      	ldr	r0, [r7, #12]
 c006630:	f7ff fedc 	bl	c0063ec <SPI_WaitFifoStateUntilTimeout>
 c006634:	4603      	mov	r3, r0
 c006636:	2b00      	cmp	r3, #0
 c006638:	d007      	beq.n	c00664a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c00663a:	68fb      	ldr	r3, [r7, #12]
 c00663c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00663e:	f043 0220 	orr.w	r2, r3, #32
 c006642:	68fb      	ldr	r3, [r7, #12]
 c006644:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c006646:	2303      	movs	r3, #3
 c006648:	e000      	b.n	c00664c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 c00664a:	2300      	movs	r3, #0
}
 c00664c:	4618      	mov	r0, r3
 c00664e:	3710      	adds	r7, #16
 c006650:	46bd      	mov	sp, r7
 c006652:	bd80      	pop	{r7, pc}

0c006654 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c006654:	b580      	push	{r7, lr}
 c006656:	b082      	sub	sp, #8
 c006658:	af00      	add	r7, sp, #0
 c00665a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c00665c:	687b      	ldr	r3, [r7, #4]
 c00665e:	2b00      	cmp	r3, #0
 c006660:	d101      	bne.n	c006666 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c006662:	2301      	movs	r3, #1
 c006664:	e042      	b.n	c0066ec <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c006666:	687b      	ldr	r3, [r7, #4]
 c006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00666c:	2b00      	cmp	r3, #0
 c00666e:	d106      	bne.n	c00667e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c006670:	687b      	ldr	r3, [r7, #4]
 c006672:	2200      	movs	r2, #0
 c006674:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c006678:	6878      	ldr	r0, [r7, #4]
 c00667a:	f7fb fbef 	bl	c001e5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00667e:	687b      	ldr	r3, [r7, #4]
 c006680:	2224      	movs	r2, #36	; 0x24
 c006682:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c006686:	687b      	ldr	r3, [r7, #4]
 c006688:	681b      	ldr	r3, [r3, #0]
 c00668a:	681a      	ldr	r2, [r3, #0]
 c00668c:	687b      	ldr	r3, [r7, #4]
 c00668e:	681b      	ldr	r3, [r3, #0]
 c006690:	f022 0201 	bic.w	r2, r2, #1
 c006694:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c006696:	6878      	ldr	r0, [r7, #4]
 c006698:	f000 f8ba 	bl	c006810 <UART_SetConfig>
 c00669c:	4603      	mov	r3, r0
 c00669e:	2b01      	cmp	r3, #1
 c0066a0:	d101      	bne.n	c0066a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c0066a2:	2301      	movs	r3, #1
 c0066a4:	e022      	b.n	c0066ec <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0066a6:	687b      	ldr	r3, [r7, #4]
 c0066a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0066aa:	2b00      	cmp	r3, #0
 c0066ac:	d002      	beq.n	c0066b4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0066ae:	6878      	ldr	r0, [r7, #4]
 c0066b0:	f000 fbac 	bl	c006e0c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0066b4:	687b      	ldr	r3, [r7, #4]
 c0066b6:	681b      	ldr	r3, [r3, #0]
 c0066b8:	685a      	ldr	r2, [r3, #4]
 c0066ba:	687b      	ldr	r3, [r7, #4]
 c0066bc:	681b      	ldr	r3, [r3, #0]
 c0066be:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0066c2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0066c4:	687b      	ldr	r3, [r7, #4]
 c0066c6:	681b      	ldr	r3, [r3, #0]
 c0066c8:	689a      	ldr	r2, [r3, #8]
 c0066ca:	687b      	ldr	r3, [r7, #4]
 c0066cc:	681b      	ldr	r3, [r3, #0]
 c0066ce:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0066d2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0066d4:	687b      	ldr	r3, [r7, #4]
 c0066d6:	681b      	ldr	r3, [r3, #0]
 c0066d8:	681a      	ldr	r2, [r3, #0]
 c0066da:	687b      	ldr	r3, [r7, #4]
 c0066dc:	681b      	ldr	r3, [r3, #0]
 c0066de:	f042 0201 	orr.w	r2, r2, #1
 c0066e2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c0066e4:	6878      	ldr	r0, [r7, #4]
 c0066e6:	f000 fc33 	bl	c006f50 <UART_CheckIdleState>
 c0066ea:	4603      	mov	r3, r0
}
 c0066ec:	4618      	mov	r0, r3
 c0066ee:	3708      	adds	r7, #8
 c0066f0:	46bd      	mov	sp, r7
 c0066f2:	bd80      	pop	{r7, pc}

0c0066f4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c0066f4:	b580      	push	{r7, lr}
 c0066f6:	b08a      	sub	sp, #40	; 0x28
 c0066f8:	af02      	add	r7, sp, #8
 c0066fa:	60f8      	str	r0, [r7, #12]
 c0066fc:	60b9      	str	r1, [r7, #8]
 c0066fe:	603b      	str	r3, [r7, #0]
 c006700:	4613      	mov	r3, r2
 c006702:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c006704:	68fb      	ldr	r3, [r7, #12]
 c006706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00670a:	2b20      	cmp	r3, #32
 c00670c:	d17b      	bne.n	c006806 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c00670e:	68bb      	ldr	r3, [r7, #8]
 c006710:	2b00      	cmp	r3, #0
 c006712:	d002      	beq.n	c00671a <HAL_UART_Transmit+0x26>
 c006714:	88fb      	ldrh	r3, [r7, #6]
 c006716:	2b00      	cmp	r3, #0
 c006718:	d101      	bne.n	c00671e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c00671a:	2301      	movs	r3, #1
 c00671c:	e074      	b.n	c006808 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00671e:	68fb      	ldr	r3, [r7, #12]
 c006720:	2200      	movs	r2, #0
 c006722:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c006726:	68fb      	ldr	r3, [r7, #12]
 c006728:	2221      	movs	r2, #33	; 0x21
 c00672a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00672e:	f7fb ff09 	bl	c002544 <HAL_GetTick>
 c006732:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c006734:	68fb      	ldr	r3, [r7, #12]
 c006736:	88fa      	ldrh	r2, [r7, #6]
 c006738:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c00673c:	68fb      	ldr	r3, [r7, #12]
 c00673e:	88fa      	ldrh	r2, [r7, #6]
 c006740:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c006744:	68fb      	ldr	r3, [r7, #12]
 c006746:	689b      	ldr	r3, [r3, #8]
 c006748:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00674c:	d108      	bne.n	c006760 <HAL_UART_Transmit+0x6c>
 c00674e:	68fb      	ldr	r3, [r7, #12]
 c006750:	691b      	ldr	r3, [r3, #16]
 c006752:	2b00      	cmp	r3, #0
 c006754:	d104      	bne.n	c006760 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c006756:	2300      	movs	r3, #0
 c006758:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c00675a:	68bb      	ldr	r3, [r7, #8]
 c00675c:	61bb      	str	r3, [r7, #24]
 c00675e:	e003      	b.n	c006768 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c006760:	68bb      	ldr	r3, [r7, #8]
 c006762:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c006764:	2300      	movs	r3, #0
 c006766:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c006768:	e030      	b.n	c0067cc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c00676a:	683b      	ldr	r3, [r7, #0]
 c00676c:	9300      	str	r3, [sp, #0]
 c00676e:	697b      	ldr	r3, [r7, #20]
 c006770:	2200      	movs	r2, #0
 c006772:	2180      	movs	r1, #128	; 0x80
 c006774:	68f8      	ldr	r0, [r7, #12]
 c006776:	f000 fc95 	bl	c0070a4 <UART_WaitOnFlagUntilTimeout>
 c00677a:	4603      	mov	r3, r0
 c00677c:	2b00      	cmp	r3, #0
 c00677e:	d005      	beq.n	c00678c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c006780:	68fb      	ldr	r3, [r7, #12]
 c006782:	2220      	movs	r2, #32
 c006784:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c006788:	2303      	movs	r3, #3
 c00678a:	e03d      	b.n	c006808 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c00678c:	69fb      	ldr	r3, [r7, #28]
 c00678e:	2b00      	cmp	r3, #0
 c006790:	d10b      	bne.n	c0067aa <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c006792:	69bb      	ldr	r3, [r7, #24]
 c006794:	881b      	ldrh	r3, [r3, #0]
 c006796:	461a      	mov	r2, r3
 c006798:	68fb      	ldr	r3, [r7, #12]
 c00679a:	681b      	ldr	r3, [r3, #0]
 c00679c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c0067a0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c0067a2:	69bb      	ldr	r3, [r7, #24]
 c0067a4:	3302      	adds	r3, #2
 c0067a6:	61bb      	str	r3, [r7, #24]
 c0067a8:	e007      	b.n	c0067ba <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c0067aa:	69fb      	ldr	r3, [r7, #28]
 c0067ac:	781a      	ldrb	r2, [r3, #0]
 c0067ae:	68fb      	ldr	r3, [r7, #12]
 c0067b0:	681b      	ldr	r3, [r3, #0]
 c0067b2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c0067b4:	69fb      	ldr	r3, [r7, #28]
 c0067b6:	3301      	adds	r3, #1
 c0067b8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c0067ba:	68fb      	ldr	r3, [r7, #12]
 c0067bc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0067c0:	b29b      	uxth	r3, r3
 c0067c2:	3b01      	subs	r3, #1
 c0067c4:	b29a      	uxth	r2, r3
 c0067c6:	68fb      	ldr	r3, [r7, #12]
 c0067c8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c0067cc:	68fb      	ldr	r3, [r7, #12]
 c0067ce:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0067d2:	b29b      	uxth	r3, r3
 c0067d4:	2b00      	cmp	r3, #0
 c0067d6:	d1c8      	bne.n	c00676a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c0067d8:	683b      	ldr	r3, [r7, #0]
 c0067da:	9300      	str	r3, [sp, #0]
 c0067dc:	697b      	ldr	r3, [r7, #20]
 c0067de:	2200      	movs	r2, #0
 c0067e0:	2140      	movs	r1, #64	; 0x40
 c0067e2:	68f8      	ldr	r0, [r7, #12]
 c0067e4:	f000 fc5e 	bl	c0070a4 <UART_WaitOnFlagUntilTimeout>
 c0067e8:	4603      	mov	r3, r0
 c0067ea:	2b00      	cmp	r3, #0
 c0067ec:	d005      	beq.n	c0067fa <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c0067ee:	68fb      	ldr	r3, [r7, #12]
 c0067f0:	2220      	movs	r2, #32
 c0067f2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c0067f6:	2303      	movs	r3, #3
 c0067f8:	e006      	b.n	c006808 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c0067fa:	68fb      	ldr	r3, [r7, #12]
 c0067fc:	2220      	movs	r2, #32
 c0067fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c006802:	2300      	movs	r3, #0
 c006804:	e000      	b.n	c006808 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c006806:	2302      	movs	r3, #2
  }
}
 c006808:	4618      	mov	r0, r3
 c00680a:	3720      	adds	r7, #32
 c00680c:	46bd      	mov	sp, r7
 c00680e:	bd80      	pop	{r7, pc}

0c006810 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c006810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c006814:	b08c      	sub	sp, #48	; 0x30
 c006816:	af00      	add	r7, sp, #0
 c006818:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00681a:	2300      	movs	r3, #0
 c00681c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c006820:	697b      	ldr	r3, [r7, #20]
 c006822:	689a      	ldr	r2, [r3, #8]
 c006824:	697b      	ldr	r3, [r7, #20]
 c006826:	691b      	ldr	r3, [r3, #16]
 c006828:	431a      	orrs	r2, r3
 c00682a:	697b      	ldr	r3, [r7, #20]
 c00682c:	695b      	ldr	r3, [r3, #20]
 c00682e:	431a      	orrs	r2, r3
 c006830:	697b      	ldr	r3, [r7, #20]
 c006832:	69db      	ldr	r3, [r3, #28]
 c006834:	4313      	orrs	r3, r2
 c006836:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c006838:	697b      	ldr	r3, [r7, #20]
 c00683a:	681b      	ldr	r3, [r3, #0]
 c00683c:	681a      	ldr	r2, [r3, #0]
 c00683e:	4baa      	ldr	r3, [pc, #680]	; (c006ae8 <UART_SetConfig+0x2d8>)
 c006840:	4013      	ands	r3, r2
 c006842:	697a      	ldr	r2, [r7, #20]
 c006844:	6812      	ldr	r2, [r2, #0]
 c006846:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c006848:	430b      	orrs	r3, r1
 c00684a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c00684c:	697b      	ldr	r3, [r7, #20]
 c00684e:	681b      	ldr	r3, [r3, #0]
 c006850:	685b      	ldr	r3, [r3, #4]
 c006852:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c006856:	697b      	ldr	r3, [r7, #20]
 c006858:	68da      	ldr	r2, [r3, #12]
 c00685a:	697b      	ldr	r3, [r7, #20]
 c00685c:	681b      	ldr	r3, [r3, #0]
 c00685e:	430a      	orrs	r2, r1
 c006860:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c006862:	697b      	ldr	r3, [r7, #20]
 c006864:	699b      	ldr	r3, [r3, #24]
 c006866:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c006868:	697b      	ldr	r3, [r7, #20]
 c00686a:	681b      	ldr	r3, [r3, #0]
 c00686c:	4a9f      	ldr	r2, [pc, #636]	; (c006aec <UART_SetConfig+0x2dc>)
 c00686e:	4293      	cmp	r3, r2
 c006870:	d004      	beq.n	c00687c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c006872:	697b      	ldr	r3, [r7, #20]
 c006874:	6a1b      	ldr	r3, [r3, #32]
 c006876:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c006878:	4313      	orrs	r3, r2
 c00687a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00687c:	697b      	ldr	r3, [r7, #20]
 c00687e:	681b      	ldr	r3, [r3, #0]
 c006880:	689b      	ldr	r3, [r3, #8]
 c006882:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c006886:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c00688a:	697a      	ldr	r2, [r7, #20]
 c00688c:	6812      	ldr	r2, [r2, #0]
 c00688e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c006890:	430b      	orrs	r3, r1
 c006892:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c006894:	697b      	ldr	r3, [r7, #20]
 c006896:	681b      	ldr	r3, [r3, #0]
 c006898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00689a:	f023 010f 	bic.w	r1, r3, #15
 c00689e:	697b      	ldr	r3, [r7, #20]
 c0068a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0068a2:	697b      	ldr	r3, [r7, #20]
 c0068a4:	681b      	ldr	r3, [r3, #0]
 c0068a6:	430a      	orrs	r2, r1
 c0068a8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0068aa:	697b      	ldr	r3, [r7, #20]
 c0068ac:	681b      	ldr	r3, [r3, #0]
 c0068ae:	4a90      	ldr	r2, [pc, #576]	; (c006af0 <UART_SetConfig+0x2e0>)
 c0068b0:	4293      	cmp	r3, r2
 c0068b2:	d125      	bne.n	c006900 <UART_SetConfig+0xf0>
 c0068b4:	4b8f      	ldr	r3, [pc, #572]	; (c006af4 <UART_SetConfig+0x2e4>)
 c0068b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0068ba:	f003 0303 	and.w	r3, r3, #3
 c0068be:	2b03      	cmp	r3, #3
 c0068c0:	d81a      	bhi.n	c0068f8 <UART_SetConfig+0xe8>
 c0068c2:	a201      	add	r2, pc, #4	; (adr r2, c0068c8 <UART_SetConfig+0xb8>)
 c0068c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0068c8:	0c0068d9 	.word	0x0c0068d9
 c0068cc:	0c0068e9 	.word	0x0c0068e9
 c0068d0:	0c0068e1 	.word	0x0c0068e1
 c0068d4:	0c0068f1 	.word	0x0c0068f1
 c0068d8:	2301      	movs	r3, #1
 c0068da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0068de:	e114      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0068e0:	2302      	movs	r3, #2
 c0068e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0068e6:	e110      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0068e8:	2304      	movs	r3, #4
 c0068ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0068ee:	e10c      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0068f0:	2308      	movs	r3, #8
 c0068f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0068f6:	e108      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0068f8:	2310      	movs	r3, #16
 c0068fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0068fe:	e104      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006900:	697b      	ldr	r3, [r7, #20]
 c006902:	681b      	ldr	r3, [r3, #0]
 c006904:	4a7c      	ldr	r2, [pc, #496]	; (c006af8 <UART_SetConfig+0x2e8>)
 c006906:	4293      	cmp	r3, r2
 c006908:	d138      	bne.n	c00697c <UART_SetConfig+0x16c>
 c00690a:	4b7a      	ldr	r3, [pc, #488]	; (c006af4 <UART_SetConfig+0x2e4>)
 c00690c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006910:	f003 030c 	and.w	r3, r3, #12
 c006914:	2b0c      	cmp	r3, #12
 c006916:	d82d      	bhi.n	c006974 <UART_SetConfig+0x164>
 c006918:	a201      	add	r2, pc, #4	; (adr r2, c006920 <UART_SetConfig+0x110>)
 c00691a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00691e:	bf00      	nop
 c006920:	0c006955 	.word	0x0c006955
 c006924:	0c006975 	.word	0x0c006975
 c006928:	0c006975 	.word	0x0c006975
 c00692c:	0c006975 	.word	0x0c006975
 c006930:	0c006965 	.word	0x0c006965
 c006934:	0c006975 	.word	0x0c006975
 c006938:	0c006975 	.word	0x0c006975
 c00693c:	0c006975 	.word	0x0c006975
 c006940:	0c00695d 	.word	0x0c00695d
 c006944:	0c006975 	.word	0x0c006975
 c006948:	0c006975 	.word	0x0c006975
 c00694c:	0c006975 	.word	0x0c006975
 c006950:	0c00696d 	.word	0x0c00696d
 c006954:	2300      	movs	r3, #0
 c006956:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00695a:	e0d6      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c00695c:	2302      	movs	r3, #2
 c00695e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006962:	e0d2      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006964:	2304      	movs	r3, #4
 c006966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00696a:	e0ce      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c00696c:	2308      	movs	r3, #8
 c00696e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006972:	e0ca      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006974:	2310      	movs	r3, #16
 c006976:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00697a:	e0c6      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c00697c:	697b      	ldr	r3, [r7, #20]
 c00697e:	681b      	ldr	r3, [r3, #0]
 c006980:	4a5e      	ldr	r2, [pc, #376]	; (c006afc <UART_SetConfig+0x2ec>)
 c006982:	4293      	cmp	r3, r2
 c006984:	d125      	bne.n	c0069d2 <UART_SetConfig+0x1c2>
 c006986:	4b5b      	ldr	r3, [pc, #364]	; (c006af4 <UART_SetConfig+0x2e4>)
 c006988:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00698c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c006990:	2b30      	cmp	r3, #48	; 0x30
 c006992:	d016      	beq.n	c0069c2 <UART_SetConfig+0x1b2>
 c006994:	2b30      	cmp	r3, #48	; 0x30
 c006996:	d818      	bhi.n	c0069ca <UART_SetConfig+0x1ba>
 c006998:	2b20      	cmp	r3, #32
 c00699a:	d00a      	beq.n	c0069b2 <UART_SetConfig+0x1a2>
 c00699c:	2b20      	cmp	r3, #32
 c00699e:	d814      	bhi.n	c0069ca <UART_SetConfig+0x1ba>
 c0069a0:	2b00      	cmp	r3, #0
 c0069a2:	d002      	beq.n	c0069aa <UART_SetConfig+0x19a>
 c0069a4:	2b10      	cmp	r3, #16
 c0069a6:	d008      	beq.n	c0069ba <UART_SetConfig+0x1aa>
 c0069a8:	e00f      	b.n	c0069ca <UART_SetConfig+0x1ba>
 c0069aa:	2300      	movs	r3, #0
 c0069ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0069b0:	e0ab      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0069b2:	2302      	movs	r3, #2
 c0069b4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0069b8:	e0a7      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0069ba:	2304      	movs	r3, #4
 c0069bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0069c0:	e0a3      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0069c2:	2308      	movs	r3, #8
 c0069c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0069c8:	e09f      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0069ca:	2310      	movs	r3, #16
 c0069cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0069d0:	e09b      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c0069d2:	697b      	ldr	r3, [r7, #20]
 c0069d4:	681b      	ldr	r3, [r3, #0]
 c0069d6:	4a4a      	ldr	r2, [pc, #296]	; (c006b00 <UART_SetConfig+0x2f0>)
 c0069d8:	4293      	cmp	r3, r2
 c0069da:	d125      	bne.n	c006a28 <UART_SetConfig+0x218>
 c0069dc:	4b45      	ldr	r3, [pc, #276]	; (c006af4 <UART_SetConfig+0x2e4>)
 c0069de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0069e2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c0069e6:	2bc0      	cmp	r3, #192	; 0xc0
 c0069e8:	d016      	beq.n	c006a18 <UART_SetConfig+0x208>
 c0069ea:	2bc0      	cmp	r3, #192	; 0xc0
 c0069ec:	d818      	bhi.n	c006a20 <UART_SetConfig+0x210>
 c0069ee:	2b80      	cmp	r3, #128	; 0x80
 c0069f0:	d00a      	beq.n	c006a08 <UART_SetConfig+0x1f8>
 c0069f2:	2b80      	cmp	r3, #128	; 0x80
 c0069f4:	d814      	bhi.n	c006a20 <UART_SetConfig+0x210>
 c0069f6:	2b00      	cmp	r3, #0
 c0069f8:	d002      	beq.n	c006a00 <UART_SetConfig+0x1f0>
 c0069fa:	2b40      	cmp	r3, #64	; 0x40
 c0069fc:	d008      	beq.n	c006a10 <UART_SetConfig+0x200>
 c0069fe:	e00f      	b.n	c006a20 <UART_SetConfig+0x210>
 c006a00:	2300      	movs	r3, #0
 c006a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a06:	e080      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a08:	2302      	movs	r3, #2
 c006a0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a0e:	e07c      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a10:	2304      	movs	r3, #4
 c006a12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a16:	e078      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a18:	2308      	movs	r3, #8
 c006a1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a1e:	e074      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a20:	2310      	movs	r3, #16
 c006a22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a26:	e070      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a28:	697b      	ldr	r3, [r7, #20]
 c006a2a:	681b      	ldr	r3, [r3, #0]
 c006a2c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c006a30:	d12a      	bne.n	c006a88 <UART_SetConfig+0x278>
 c006a32:	4b30      	ldr	r3, [pc, #192]	; (c006af4 <UART_SetConfig+0x2e4>)
 c006a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006a38:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c006a3c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006a40:	d01a      	beq.n	c006a78 <UART_SetConfig+0x268>
 c006a42:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006a46:	d81b      	bhi.n	c006a80 <UART_SetConfig+0x270>
 c006a48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006a4c:	d00c      	beq.n	c006a68 <UART_SetConfig+0x258>
 c006a4e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006a52:	d815      	bhi.n	c006a80 <UART_SetConfig+0x270>
 c006a54:	2b00      	cmp	r3, #0
 c006a56:	d003      	beq.n	c006a60 <UART_SetConfig+0x250>
 c006a58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c006a5c:	d008      	beq.n	c006a70 <UART_SetConfig+0x260>
 c006a5e:	e00f      	b.n	c006a80 <UART_SetConfig+0x270>
 c006a60:	2300      	movs	r3, #0
 c006a62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a66:	e050      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a68:	2302      	movs	r3, #2
 c006a6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a6e:	e04c      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a70:	2304      	movs	r3, #4
 c006a72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a76:	e048      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a78:	2308      	movs	r3, #8
 c006a7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a7e:	e044      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a80:	2310      	movs	r3, #16
 c006a82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006a86:	e040      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006a88:	697b      	ldr	r3, [r7, #20]
 c006a8a:	681b      	ldr	r3, [r3, #0]
 c006a8c:	4a17      	ldr	r2, [pc, #92]	; (c006aec <UART_SetConfig+0x2dc>)
 c006a8e:	4293      	cmp	r3, r2
 c006a90:	d138      	bne.n	c006b04 <UART_SetConfig+0x2f4>
 c006a92:	4b18      	ldr	r3, [pc, #96]	; (c006af4 <UART_SetConfig+0x2e4>)
 c006a94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006a98:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c006a9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c006aa0:	d01a      	beq.n	c006ad8 <UART_SetConfig+0x2c8>
 c006aa2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c006aa6:	d81b      	bhi.n	c006ae0 <UART_SetConfig+0x2d0>
 c006aa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c006aac:	d00c      	beq.n	c006ac8 <UART_SetConfig+0x2b8>
 c006aae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c006ab2:	d815      	bhi.n	c006ae0 <UART_SetConfig+0x2d0>
 c006ab4:	2b00      	cmp	r3, #0
 c006ab6:	d003      	beq.n	c006ac0 <UART_SetConfig+0x2b0>
 c006ab8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006abc:	d008      	beq.n	c006ad0 <UART_SetConfig+0x2c0>
 c006abe:	e00f      	b.n	c006ae0 <UART_SetConfig+0x2d0>
 c006ac0:	2300      	movs	r3, #0
 c006ac2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006ac6:	e020      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006ac8:	2302      	movs	r3, #2
 c006aca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006ace:	e01c      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006ad0:	2304      	movs	r3, #4
 c006ad2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006ad6:	e018      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006ad8:	2308      	movs	r3, #8
 c006ada:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006ade:	e014      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006ae0:	2310      	movs	r3, #16
 c006ae2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006ae6:	e010      	b.n	c006b0a <UART_SetConfig+0x2fa>
 c006ae8:	cfff69f3 	.word	0xcfff69f3
 c006aec:	50008000 	.word	0x50008000
 c006af0:	50013800 	.word	0x50013800
 c006af4:	50021000 	.word	0x50021000
 c006af8:	50004400 	.word	0x50004400
 c006afc:	50004800 	.word	0x50004800
 c006b00:	50004c00 	.word	0x50004c00
 c006b04:	2310      	movs	r3, #16
 c006b06:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c006b0a:	697b      	ldr	r3, [r7, #20]
 c006b0c:	681b      	ldr	r3, [r3, #0]
 c006b0e:	4ab0      	ldr	r2, [pc, #704]	; (c006dd0 <UART_SetConfig+0x5c0>)
 c006b10:	4293      	cmp	r3, r2
 c006b12:	f040 809b 	bne.w	c006c4c <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c006b16:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c006b1a:	2b08      	cmp	r3, #8
 c006b1c:	d827      	bhi.n	c006b6e <UART_SetConfig+0x35e>
 c006b1e:	a201      	add	r2, pc, #4	; (adr r2, c006b24 <UART_SetConfig+0x314>)
 c006b20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006b24:	0c006b49 	.word	0x0c006b49
 c006b28:	0c006b51 	.word	0x0c006b51
 c006b2c:	0c006b59 	.word	0x0c006b59
 c006b30:	0c006b6f 	.word	0x0c006b6f
 c006b34:	0c006b5f 	.word	0x0c006b5f
 c006b38:	0c006b6f 	.word	0x0c006b6f
 c006b3c:	0c006b6f 	.word	0x0c006b6f
 c006b40:	0c006b6f 	.word	0x0c006b6f
 c006b44:	0c006b67 	.word	0x0c006b67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c006b48:	f7fe f80e 	bl	c004b68 <HAL_RCC_GetPCLK1Freq>
 c006b4c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006b4e:	e014      	b.n	c006b7a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c006b50:	f7fe f81e 	bl	c004b90 <HAL_RCC_GetPCLK2Freq>
 c006b54:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006b56:	e010      	b.n	c006b7a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c006b58:	4b9e      	ldr	r3, [pc, #632]	; (c006dd4 <UART_SetConfig+0x5c4>)
 c006b5a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006b5c:	e00d      	b.n	c006b7a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c006b5e:	f7fd ff51 	bl	c004a04 <HAL_RCC_GetSysClockFreq>
 c006b62:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006b64:	e009      	b.n	c006b7a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c006b66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c006b6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006b6c:	e005      	b.n	c006b7a <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c006b6e:	2300      	movs	r3, #0
 c006b70:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c006b72:	2301      	movs	r3, #1
 c006b74:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c006b78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c006b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006b7c:	2b00      	cmp	r3, #0
 c006b7e:	f000 8130 	beq.w	c006de2 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c006b82:	697b      	ldr	r3, [r7, #20]
 c006b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006b86:	4a94      	ldr	r2, [pc, #592]	; (c006dd8 <UART_SetConfig+0x5c8>)
 c006b88:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006b8c:	461a      	mov	r2, r3
 c006b8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006b90:	fbb3 f3f2 	udiv	r3, r3, r2
 c006b94:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c006b96:	697b      	ldr	r3, [r7, #20]
 c006b98:	685a      	ldr	r2, [r3, #4]
 c006b9a:	4613      	mov	r3, r2
 c006b9c:	005b      	lsls	r3, r3, #1
 c006b9e:	4413      	add	r3, r2
 c006ba0:	69ba      	ldr	r2, [r7, #24]
 c006ba2:	429a      	cmp	r2, r3
 c006ba4:	d305      	bcc.n	c006bb2 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c006ba6:	697b      	ldr	r3, [r7, #20]
 c006ba8:	685b      	ldr	r3, [r3, #4]
 c006baa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c006bac:	69ba      	ldr	r2, [r7, #24]
 c006bae:	429a      	cmp	r2, r3
 c006bb0:	d903      	bls.n	c006bba <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c006bb2:	2301      	movs	r3, #1
 c006bb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c006bb8:	e113      	b.n	c006de2 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006bbc:	2200      	movs	r2, #0
 c006bbe:	60bb      	str	r3, [r7, #8]
 c006bc0:	60fa      	str	r2, [r7, #12]
 c006bc2:	697b      	ldr	r3, [r7, #20]
 c006bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006bc6:	4a84      	ldr	r2, [pc, #528]	; (c006dd8 <UART_SetConfig+0x5c8>)
 c006bc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006bcc:	b29b      	uxth	r3, r3
 c006bce:	2200      	movs	r2, #0
 c006bd0:	603b      	str	r3, [r7, #0]
 c006bd2:	607a      	str	r2, [r7, #4]
 c006bd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006bd8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c006bdc:	f7f9 fbcc 	bl	c000378 <__aeabi_uldivmod>
 c006be0:	4602      	mov	r2, r0
 c006be2:	460b      	mov	r3, r1
 c006be4:	4610      	mov	r0, r2
 c006be6:	4619      	mov	r1, r3
 c006be8:	f04f 0200 	mov.w	r2, #0
 c006bec:	f04f 0300 	mov.w	r3, #0
 c006bf0:	020b      	lsls	r3, r1, #8
 c006bf2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c006bf6:	0202      	lsls	r2, r0, #8
 c006bf8:	6979      	ldr	r1, [r7, #20]
 c006bfa:	6849      	ldr	r1, [r1, #4]
 c006bfc:	0849      	lsrs	r1, r1, #1
 c006bfe:	2000      	movs	r0, #0
 c006c00:	460c      	mov	r4, r1
 c006c02:	4605      	mov	r5, r0
 c006c04:	eb12 0804 	adds.w	r8, r2, r4
 c006c08:	eb43 0905 	adc.w	r9, r3, r5
 c006c0c:	697b      	ldr	r3, [r7, #20]
 c006c0e:	685b      	ldr	r3, [r3, #4]
 c006c10:	2200      	movs	r2, #0
 c006c12:	469a      	mov	sl, r3
 c006c14:	4693      	mov	fp, r2
 c006c16:	4652      	mov	r2, sl
 c006c18:	465b      	mov	r3, fp
 c006c1a:	4640      	mov	r0, r8
 c006c1c:	4649      	mov	r1, r9
 c006c1e:	f7f9 fbab 	bl	c000378 <__aeabi_uldivmod>
 c006c22:	4602      	mov	r2, r0
 c006c24:	460b      	mov	r3, r1
 c006c26:	4613      	mov	r3, r2
 c006c28:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c006c2a:	6a3b      	ldr	r3, [r7, #32]
 c006c2c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006c30:	d308      	bcc.n	c006c44 <UART_SetConfig+0x434>
 c006c32:	6a3b      	ldr	r3, [r7, #32]
 c006c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c006c38:	d204      	bcs.n	c006c44 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c006c3a:	697b      	ldr	r3, [r7, #20]
 c006c3c:	681b      	ldr	r3, [r3, #0]
 c006c3e:	6a3a      	ldr	r2, [r7, #32]
 c006c40:	60da      	str	r2, [r3, #12]
 c006c42:	e0ce      	b.n	c006de2 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c006c44:	2301      	movs	r3, #1
 c006c46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c006c4a:	e0ca      	b.n	c006de2 <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c006c4c:	697b      	ldr	r3, [r7, #20]
 c006c4e:	69db      	ldr	r3, [r3, #28]
 c006c50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c006c54:	d166      	bne.n	c006d24 <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c006c56:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c006c5a:	2b08      	cmp	r3, #8
 c006c5c:	d827      	bhi.n	c006cae <UART_SetConfig+0x49e>
 c006c5e:	a201      	add	r2, pc, #4	; (adr r2, c006c64 <UART_SetConfig+0x454>)
 c006c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006c64:	0c006c89 	.word	0x0c006c89
 c006c68:	0c006c91 	.word	0x0c006c91
 c006c6c:	0c006c99 	.word	0x0c006c99
 c006c70:	0c006caf 	.word	0x0c006caf
 c006c74:	0c006c9f 	.word	0x0c006c9f
 c006c78:	0c006caf 	.word	0x0c006caf
 c006c7c:	0c006caf 	.word	0x0c006caf
 c006c80:	0c006caf 	.word	0x0c006caf
 c006c84:	0c006ca7 	.word	0x0c006ca7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c006c88:	f7fd ff6e 	bl	c004b68 <HAL_RCC_GetPCLK1Freq>
 c006c8c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006c8e:	e014      	b.n	c006cba <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c006c90:	f7fd ff7e 	bl	c004b90 <HAL_RCC_GetPCLK2Freq>
 c006c94:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006c96:	e010      	b.n	c006cba <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c006c98:	4b4e      	ldr	r3, [pc, #312]	; (c006dd4 <UART_SetConfig+0x5c4>)
 c006c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006c9c:	e00d      	b.n	c006cba <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c006c9e:	f7fd feb1 	bl	c004a04 <HAL_RCC_GetSysClockFreq>
 c006ca2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006ca4:	e009      	b.n	c006cba <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c006ca6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c006caa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006cac:	e005      	b.n	c006cba <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c006cae:	2300      	movs	r3, #0
 c006cb0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c006cb2:	2301      	movs	r3, #1
 c006cb4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c006cb8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c006cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006cbc:	2b00      	cmp	r3, #0
 c006cbe:	f000 8090 	beq.w	c006de2 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006cc2:	697b      	ldr	r3, [r7, #20]
 c006cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006cc6:	4a44      	ldr	r2, [pc, #272]	; (c006dd8 <UART_SetConfig+0x5c8>)
 c006cc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006ccc:	461a      	mov	r2, r3
 c006cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006cd0:	fbb3 f3f2 	udiv	r3, r3, r2
 c006cd4:	005a      	lsls	r2, r3, #1
 c006cd6:	697b      	ldr	r3, [r7, #20]
 c006cd8:	685b      	ldr	r3, [r3, #4]
 c006cda:	085b      	lsrs	r3, r3, #1
 c006cdc:	441a      	add	r2, r3
 c006cde:	697b      	ldr	r3, [r7, #20]
 c006ce0:	685b      	ldr	r3, [r3, #4]
 c006ce2:	fbb2 f3f3 	udiv	r3, r2, r3
 c006ce6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c006ce8:	6a3b      	ldr	r3, [r7, #32]
 c006cea:	2b0f      	cmp	r3, #15
 c006cec:	d916      	bls.n	c006d1c <UART_SetConfig+0x50c>
 c006cee:	6a3b      	ldr	r3, [r7, #32]
 c006cf0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006cf4:	d212      	bcs.n	c006d1c <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c006cf6:	6a3b      	ldr	r3, [r7, #32]
 c006cf8:	b29b      	uxth	r3, r3
 c006cfa:	f023 030f 	bic.w	r3, r3, #15
 c006cfe:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c006d00:	6a3b      	ldr	r3, [r7, #32]
 c006d02:	085b      	lsrs	r3, r3, #1
 c006d04:	b29b      	uxth	r3, r3
 c006d06:	f003 0307 	and.w	r3, r3, #7
 c006d0a:	b29a      	uxth	r2, r3
 c006d0c:	8bfb      	ldrh	r3, [r7, #30]
 c006d0e:	4313      	orrs	r3, r2
 c006d10:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c006d12:	697b      	ldr	r3, [r7, #20]
 c006d14:	681b      	ldr	r3, [r3, #0]
 c006d16:	8bfa      	ldrh	r2, [r7, #30]
 c006d18:	60da      	str	r2, [r3, #12]
 c006d1a:	e062      	b.n	c006de2 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c006d1c:	2301      	movs	r3, #1
 c006d1e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c006d22:	e05e      	b.n	c006de2 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c006d24:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c006d28:	2b08      	cmp	r3, #8
 c006d2a:	d828      	bhi.n	c006d7e <UART_SetConfig+0x56e>
 c006d2c:	a201      	add	r2, pc, #4	; (adr r2, c006d34 <UART_SetConfig+0x524>)
 c006d2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c006d32:	bf00      	nop
 c006d34:	0c006d59 	.word	0x0c006d59
 c006d38:	0c006d61 	.word	0x0c006d61
 c006d3c:	0c006d69 	.word	0x0c006d69
 c006d40:	0c006d7f 	.word	0x0c006d7f
 c006d44:	0c006d6f 	.word	0x0c006d6f
 c006d48:	0c006d7f 	.word	0x0c006d7f
 c006d4c:	0c006d7f 	.word	0x0c006d7f
 c006d50:	0c006d7f 	.word	0x0c006d7f
 c006d54:	0c006d77 	.word	0x0c006d77
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c006d58:	f7fd ff06 	bl	c004b68 <HAL_RCC_GetPCLK1Freq>
 c006d5c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006d5e:	e014      	b.n	c006d8a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c006d60:	f7fd ff16 	bl	c004b90 <HAL_RCC_GetPCLK2Freq>
 c006d64:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006d66:	e010      	b.n	c006d8a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c006d68:	4b1a      	ldr	r3, [pc, #104]	; (c006dd4 <UART_SetConfig+0x5c4>)
 c006d6a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006d6c:	e00d      	b.n	c006d8a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c006d6e:	f7fd fe49 	bl	c004a04 <HAL_RCC_GetSysClockFreq>
 c006d72:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c006d74:	e009      	b.n	c006d8a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c006d76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c006d7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006d7c:	e005      	b.n	c006d8a <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c006d7e:	2300      	movs	r3, #0
 c006d80:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c006d82:	2301      	movs	r3, #1
 c006d84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c006d88:	bf00      	nop
    }

    if (pclk != 0U)
 c006d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006d8c:	2b00      	cmp	r3, #0
 c006d8e:	d028      	beq.n	c006de2 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006d90:	697b      	ldr	r3, [r7, #20]
 c006d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c006d94:	4a10      	ldr	r2, [pc, #64]	; (c006dd8 <UART_SetConfig+0x5c8>)
 c006d96:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006d9a:	461a      	mov	r2, r3
 c006d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006d9e:	fbb3 f2f2 	udiv	r2, r3, r2
 c006da2:	697b      	ldr	r3, [r7, #20]
 c006da4:	685b      	ldr	r3, [r3, #4]
 c006da6:	085b      	lsrs	r3, r3, #1
 c006da8:	441a      	add	r2, r3
 c006daa:	697b      	ldr	r3, [r7, #20]
 c006dac:	685b      	ldr	r3, [r3, #4]
 c006dae:	fbb2 f3f3 	udiv	r3, r2, r3
 c006db2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c006db4:	6a3b      	ldr	r3, [r7, #32]
 c006db6:	2b0f      	cmp	r3, #15
 c006db8:	d910      	bls.n	c006ddc <UART_SetConfig+0x5cc>
 c006dba:	6a3b      	ldr	r3, [r7, #32]
 c006dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006dc0:	d20c      	bcs.n	c006ddc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c006dc2:	6a3b      	ldr	r3, [r7, #32]
 c006dc4:	b29a      	uxth	r2, r3
 c006dc6:	697b      	ldr	r3, [r7, #20]
 c006dc8:	681b      	ldr	r3, [r3, #0]
 c006dca:	60da      	str	r2, [r3, #12]
 c006dcc:	e009      	b.n	c006de2 <UART_SetConfig+0x5d2>
 c006dce:	bf00      	nop
 c006dd0:	50008000 	.word	0x50008000
 c006dd4:	00f42400 	.word	0x00f42400
 c006dd8:	0c008cd8 	.word	0x0c008cd8
      }
      else
      {
        ret = HAL_ERROR;
 c006ddc:	2301      	movs	r3, #1
 c006dde:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c006de2:	697b      	ldr	r3, [r7, #20]
 c006de4:	2201      	movs	r2, #1
 c006de6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c006dea:	697b      	ldr	r3, [r7, #20]
 c006dec:	2201      	movs	r2, #1
 c006dee:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c006df2:	697b      	ldr	r3, [r7, #20]
 c006df4:	2200      	movs	r2, #0
 c006df6:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c006df8:	697b      	ldr	r3, [r7, #20]
 c006dfa:	2200      	movs	r2, #0
 c006dfc:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c006dfe:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c006e02:	4618      	mov	r0, r3
 c006e04:	3730      	adds	r7, #48	; 0x30
 c006e06:	46bd      	mov	sp, r7
 c006e08:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c006e0c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c006e0c:	b480      	push	{r7}
 c006e0e:	b083      	sub	sp, #12
 c006e10:	af00      	add	r7, sp, #0
 c006e12:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c006e14:	687b      	ldr	r3, [r7, #4]
 c006e16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006e18:	f003 0301 	and.w	r3, r3, #1
 c006e1c:	2b00      	cmp	r3, #0
 c006e1e:	d00a      	beq.n	c006e36 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c006e20:	687b      	ldr	r3, [r7, #4]
 c006e22:	681b      	ldr	r3, [r3, #0]
 c006e24:	685b      	ldr	r3, [r3, #4]
 c006e26:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c006e2a:	687b      	ldr	r3, [r7, #4]
 c006e2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c006e2e:	687b      	ldr	r3, [r7, #4]
 c006e30:	681b      	ldr	r3, [r3, #0]
 c006e32:	430a      	orrs	r2, r1
 c006e34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c006e36:	687b      	ldr	r3, [r7, #4]
 c006e38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006e3a:	f003 0302 	and.w	r3, r3, #2
 c006e3e:	2b00      	cmp	r3, #0
 c006e40:	d00a      	beq.n	c006e58 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c006e42:	687b      	ldr	r3, [r7, #4]
 c006e44:	681b      	ldr	r3, [r3, #0]
 c006e46:	685b      	ldr	r3, [r3, #4]
 c006e48:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c006e4c:	687b      	ldr	r3, [r7, #4]
 c006e4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c006e50:	687b      	ldr	r3, [r7, #4]
 c006e52:	681b      	ldr	r3, [r3, #0]
 c006e54:	430a      	orrs	r2, r1
 c006e56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c006e58:	687b      	ldr	r3, [r7, #4]
 c006e5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006e5c:	f003 0304 	and.w	r3, r3, #4
 c006e60:	2b00      	cmp	r3, #0
 c006e62:	d00a      	beq.n	c006e7a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c006e64:	687b      	ldr	r3, [r7, #4]
 c006e66:	681b      	ldr	r3, [r3, #0]
 c006e68:	685b      	ldr	r3, [r3, #4]
 c006e6a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c006e6e:	687b      	ldr	r3, [r7, #4]
 c006e70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c006e72:	687b      	ldr	r3, [r7, #4]
 c006e74:	681b      	ldr	r3, [r3, #0]
 c006e76:	430a      	orrs	r2, r1
 c006e78:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c006e7a:	687b      	ldr	r3, [r7, #4]
 c006e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006e7e:	f003 0308 	and.w	r3, r3, #8
 c006e82:	2b00      	cmp	r3, #0
 c006e84:	d00a      	beq.n	c006e9c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c006e86:	687b      	ldr	r3, [r7, #4]
 c006e88:	681b      	ldr	r3, [r3, #0]
 c006e8a:	685b      	ldr	r3, [r3, #4]
 c006e8c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c006e90:	687b      	ldr	r3, [r7, #4]
 c006e92:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c006e94:	687b      	ldr	r3, [r7, #4]
 c006e96:	681b      	ldr	r3, [r3, #0]
 c006e98:	430a      	orrs	r2, r1
 c006e9a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c006e9c:	687b      	ldr	r3, [r7, #4]
 c006e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006ea0:	f003 0310 	and.w	r3, r3, #16
 c006ea4:	2b00      	cmp	r3, #0
 c006ea6:	d00a      	beq.n	c006ebe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c006ea8:	687b      	ldr	r3, [r7, #4]
 c006eaa:	681b      	ldr	r3, [r3, #0]
 c006eac:	689b      	ldr	r3, [r3, #8]
 c006eae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c006eb2:	687b      	ldr	r3, [r7, #4]
 c006eb4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c006eb6:	687b      	ldr	r3, [r7, #4]
 c006eb8:	681b      	ldr	r3, [r3, #0]
 c006eba:	430a      	orrs	r2, r1
 c006ebc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c006ebe:	687b      	ldr	r3, [r7, #4]
 c006ec0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006ec2:	f003 0320 	and.w	r3, r3, #32
 c006ec6:	2b00      	cmp	r3, #0
 c006ec8:	d00a      	beq.n	c006ee0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c006eca:	687b      	ldr	r3, [r7, #4]
 c006ecc:	681b      	ldr	r3, [r3, #0]
 c006ece:	689b      	ldr	r3, [r3, #8]
 c006ed0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c006ed4:	687b      	ldr	r3, [r7, #4]
 c006ed6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c006ed8:	687b      	ldr	r3, [r7, #4]
 c006eda:	681b      	ldr	r3, [r3, #0]
 c006edc:	430a      	orrs	r2, r1
 c006ede:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c006ee0:	687b      	ldr	r3, [r7, #4]
 c006ee2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006ee4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006ee8:	2b00      	cmp	r3, #0
 c006eea:	d01a      	beq.n	c006f22 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c006eec:	687b      	ldr	r3, [r7, #4]
 c006eee:	681b      	ldr	r3, [r3, #0]
 c006ef0:	685b      	ldr	r3, [r3, #4]
 c006ef2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c006ef6:	687b      	ldr	r3, [r7, #4]
 c006ef8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c006efa:	687b      	ldr	r3, [r7, #4]
 c006efc:	681b      	ldr	r3, [r3, #0]
 c006efe:	430a      	orrs	r2, r1
 c006f00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c006f02:	687b      	ldr	r3, [r7, #4]
 c006f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c006f06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c006f0a:	d10a      	bne.n	c006f22 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c006f0c:	687b      	ldr	r3, [r7, #4]
 c006f0e:	681b      	ldr	r3, [r3, #0]
 c006f10:	685b      	ldr	r3, [r3, #4]
 c006f12:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c006f16:	687b      	ldr	r3, [r7, #4]
 c006f18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c006f1a:	687b      	ldr	r3, [r7, #4]
 c006f1c:	681b      	ldr	r3, [r3, #0]
 c006f1e:	430a      	orrs	r2, r1
 c006f20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c006f22:	687b      	ldr	r3, [r7, #4]
 c006f24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006f2a:	2b00      	cmp	r3, #0
 c006f2c:	d00a      	beq.n	c006f44 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c006f2e:	687b      	ldr	r3, [r7, #4]
 c006f30:	681b      	ldr	r3, [r3, #0]
 c006f32:	685b      	ldr	r3, [r3, #4]
 c006f34:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c006f38:	687b      	ldr	r3, [r7, #4]
 c006f3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c006f3c:	687b      	ldr	r3, [r7, #4]
 c006f3e:	681b      	ldr	r3, [r3, #0]
 c006f40:	430a      	orrs	r2, r1
 c006f42:	605a      	str	r2, [r3, #4]
  }
}
 c006f44:	bf00      	nop
 c006f46:	370c      	adds	r7, #12
 c006f48:	46bd      	mov	sp, r7
 c006f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006f4e:	4770      	bx	lr

0c006f50 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c006f50:	b580      	push	{r7, lr}
 c006f52:	b098      	sub	sp, #96	; 0x60
 c006f54:	af02      	add	r7, sp, #8
 c006f56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c006f58:	687b      	ldr	r3, [r7, #4]
 c006f5a:	2200      	movs	r2, #0
 c006f5c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c006f60:	f7fb faf0 	bl	c002544 <HAL_GetTick>
 c006f64:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c006f66:	687b      	ldr	r3, [r7, #4]
 c006f68:	681b      	ldr	r3, [r3, #0]
 c006f6a:	681b      	ldr	r3, [r3, #0]
 c006f6c:	f003 0308 	and.w	r3, r3, #8
 c006f70:	2b08      	cmp	r3, #8
 c006f72:	d12f      	bne.n	c006fd4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c006f74:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c006f78:	9300      	str	r3, [sp, #0]
 c006f7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c006f7c:	2200      	movs	r2, #0
 c006f7e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c006f82:	6878      	ldr	r0, [r7, #4]
 c006f84:	f000 f88e 	bl	c0070a4 <UART_WaitOnFlagUntilTimeout>
 c006f88:	4603      	mov	r3, r0
 c006f8a:	2b00      	cmp	r3, #0
 c006f8c:	d022      	beq.n	c006fd4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c006f8e:	687b      	ldr	r3, [r7, #4]
 c006f90:	681b      	ldr	r3, [r3, #0]
 c006f92:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c006f94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c006f96:	e853 3f00 	ldrex	r3, [r3]
 c006f9a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c006f9e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c006fa2:	653b      	str	r3, [r7, #80]	; 0x50
 c006fa4:	687b      	ldr	r3, [r7, #4]
 c006fa6:	681b      	ldr	r3, [r3, #0]
 c006fa8:	461a      	mov	r2, r3
 c006faa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c006fac:	647b      	str	r3, [r7, #68]	; 0x44
 c006fae:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006fb0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c006fb2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c006fb4:	e841 2300 	strex	r3, r2, [r1]
 c006fb8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c006fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c006fbc:	2b00      	cmp	r3, #0
 c006fbe:	d1e6      	bne.n	c006f8e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c006fc0:	687b      	ldr	r3, [r7, #4]
 c006fc2:	2220      	movs	r2, #32
 c006fc4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c006fc8:	687b      	ldr	r3, [r7, #4]
 c006fca:	2200      	movs	r2, #0
 c006fcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c006fd0:	2303      	movs	r3, #3
 c006fd2:	e063      	b.n	c00709c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c006fd4:	687b      	ldr	r3, [r7, #4]
 c006fd6:	681b      	ldr	r3, [r3, #0]
 c006fd8:	681b      	ldr	r3, [r3, #0]
 c006fda:	f003 0304 	and.w	r3, r3, #4
 c006fde:	2b04      	cmp	r3, #4
 c006fe0:	d149      	bne.n	c007076 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c006fe2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c006fe6:	9300      	str	r3, [sp, #0]
 c006fe8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c006fea:	2200      	movs	r2, #0
 c006fec:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c006ff0:	6878      	ldr	r0, [r7, #4]
 c006ff2:	f000 f857 	bl	c0070a4 <UART_WaitOnFlagUntilTimeout>
 c006ff6:	4603      	mov	r3, r0
 c006ff8:	2b00      	cmp	r3, #0
 c006ffa:	d03c      	beq.n	c007076 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c006ffc:	687b      	ldr	r3, [r7, #4]
 c006ffe:	681b      	ldr	r3, [r3, #0]
 c007000:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c007002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c007004:	e853 3f00 	ldrex	r3, [r3]
 c007008:	623b      	str	r3, [r7, #32]
   return(result);
 c00700a:	6a3b      	ldr	r3, [r7, #32]
 c00700c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c007010:	64fb      	str	r3, [r7, #76]	; 0x4c
 c007012:	687b      	ldr	r3, [r7, #4]
 c007014:	681b      	ldr	r3, [r3, #0]
 c007016:	461a      	mov	r2, r3
 c007018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00701a:	633b      	str	r3, [r7, #48]	; 0x30
 c00701c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00701e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c007020:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c007022:	e841 2300 	strex	r3, r2, [r1]
 c007026:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00702a:	2b00      	cmp	r3, #0
 c00702c:	d1e6      	bne.n	c006ffc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c00702e:	687b      	ldr	r3, [r7, #4]
 c007030:	681b      	ldr	r3, [r3, #0]
 c007032:	3308      	adds	r3, #8
 c007034:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c007036:	693b      	ldr	r3, [r7, #16]
 c007038:	e853 3f00 	ldrex	r3, [r3]
 c00703c:	60fb      	str	r3, [r7, #12]
   return(result);
 c00703e:	68fb      	ldr	r3, [r7, #12]
 c007040:	f023 0301 	bic.w	r3, r3, #1
 c007044:	64bb      	str	r3, [r7, #72]	; 0x48
 c007046:	687b      	ldr	r3, [r7, #4]
 c007048:	681b      	ldr	r3, [r3, #0]
 c00704a:	3308      	adds	r3, #8
 c00704c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c00704e:	61fa      	str	r2, [r7, #28]
 c007050:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c007052:	69b9      	ldr	r1, [r7, #24]
 c007054:	69fa      	ldr	r2, [r7, #28]
 c007056:	e841 2300 	strex	r3, r2, [r1]
 c00705a:	617b      	str	r3, [r7, #20]
   return(result);
 c00705c:	697b      	ldr	r3, [r7, #20]
 c00705e:	2b00      	cmp	r3, #0
 c007060:	d1e5      	bne.n	c00702e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c007062:	687b      	ldr	r3, [r7, #4]
 c007064:	2220      	movs	r2, #32
 c007066:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c00706a:	687b      	ldr	r3, [r7, #4]
 c00706c:	2200      	movs	r2, #0
 c00706e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c007072:	2303      	movs	r3, #3
 c007074:	e012      	b.n	c00709c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c007076:	687b      	ldr	r3, [r7, #4]
 c007078:	2220      	movs	r2, #32
 c00707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c00707e:	687b      	ldr	r3, [r7, #4]
 c007080:	2220      	movs	r2, #32
 c007082:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c007086:	687b      	ldr	r3, [r7, #4]
 c007088:	2200      	movs	r2, #0
 c00708a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c00708c:	687b      	ldr	r3, [r7, #4]
 c00708e:	2200      	movs	r2, #0
 c007090:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c007092:	687b      	ldr	r3, [r7, #4]
 c007094:	2200      	movs	r2, #0
 c007096:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00709a:	2300      	movs	r3, #0
}
 c00709c:	4618      	mov	r0, r3
 c00709e:	3758      	adds	r7, #88	; 0x58
 c0070a0:	46bd      	mov	sp, r7
 c0070a2:	bd80      	pop	{r7, pc}

0c0070a4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c0070a4:	b580      	push	{r7, lr}
 c0070a6:	b084      	sub	sp, #16
 c0070a8:	af00      	add	r7, sp, #0
 c0070aa:	60f8      	str	r0, [r7, #12]
 c0070ac:	60b9      	str	r1, [r7, #8]
 c0070ae:	603b      	str	r3, [r7, #0]
 c0070b0:	4613      	mov	r3, r2
 c0070b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0070b4:	e049      	b.n	c00714a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c0070b6:	69bb      	ldr	r3, [r7, #24]
 c0070b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0070bc:	d045      	beq.n	c00714a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c0070be:	f7fb fa41 	bl	c002544 <HAL_GetTick>
 c0070c2:	4602      	mov	r2, r0
 c0070c4:	683b      	ldr	r3, [r7, #0]
 c0070c6:	1ad3      	subs	r3, r2, r3
 c0070c8:	69ba      	ldr	r2, [r7, #24]
 c0070ca:	429a      	cmp	r2, r3
 c0070cc:	d302      	bcc.n	c0070d4 <UART_WaitOnFlagUntilTimeout+0x30>
 c0070ce:	69bb      	ldr	r3, [r7, #24]
 c0070d0:	2b00      	cmp	r3, #0
 c0070d2:	d101      	bne.n	c0070d8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c0070d4:	2303      	movs	r3, #3
 c0070d6:	e048      	b.n	c00716a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c0070d8:	68fb      	ldr	r3, [r7, #12]
 c0070da:	681b      	ldr	r3, [r3, #0]
 c0070dc:	681b      	ldr	r3, [r3, #0]
 c0070de:	f003 0304 	and.w	r3, r3, #4
 c0070e2:	2b00      	cmp	r3, #0
 c0070e4:	d031      	beq.n	c00714a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c0070e6:	68fb      	ldr	r3, [r7, #12]
 c0070e8:	681b      	ldr	r3, [r3, #0]
 c0070ea:	69db      	ldr	r3, [r3, #28]
 c0070ec:	f003 0308 	and.w	r3, r3, #8
 c0070f0:	2b08      	cmp	r3, #8
 c0070f2:	d110      	bne.n	c007116 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c0070f4:	68fb      	ldr	r3, [r7, #12]
 c0070f6:	681b      	ldr	r3, [r3, #0]
 c0070f8:	2208      	movs	r2, #8
 c0070fa:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c0070fc:	68f8      	ldr	r0, [r7, #12]
 c0070fe:	f000 f838 	bl	c007172 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c007102:	68fb      	ldr	r3, [r7, #12]
 c007104:	2208      	movs	r2, #8
 c007106:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c00710a:	68fb      	ldr	r3, [r7, #12]
 c00710c:	2200      	movs	r2, #0
 c00710e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c007112:	2301      	movs	r3, #1
 c007114:	e029      	b.n	c00716a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c007116:	68fb      	ldr	r3, [r7, #12]
 c007118:	681b      	ldr	r3, [r3, #0]
 c00711a:	69db      	ldr	r3, [r3, #28]
 c00711c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c007120:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c007124:	d111      	bne.n	c00714a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c007126:	68fb      	ldr	r3, [r7, #12]
 c007128:	681b      	ldr	r3, [r3, #0]
 c00712a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c00712e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c007130:	68f8      	ldr	r0, [r7, #12]
 c007132:	f000 f81e 	bl	c007172 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c007136:	68fb      	ldr	r3, [r7, #12]
 c007138:	2220      	movs	r2, #32
 c00713a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00713e:	68fb      	ldr	r3, [r7, #12]
 c007140:	2200      	movs	r2, #0
 c007142:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c007146:	2303      	movs	r3, #3
 c007148:	e00f      	b.n	c00716a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00714a:	68fb      	ldr	r3, [r7, #12]
 c00714c:	681b      	ldr	r3, [r3, #0]
 c00714e:	69da      	ldr	r2, [r3, #28]
 c007150:	68bb      	ldr	r3, [r7, #8]
 c007152:	4013      	ands	r3, r2
 c007154:	68ba      	ldr	r2, [r7, #8]
 c007156:	429a      	cmp	r2, r3
 c007158:	bf0c      	ite	eq
 c00715a:	2301      	moveq	r3, #1
 c00715c:	2300      	movne	r3, #0
 c00715e:	b2db      	uxtb	r3, r3
 c007160:	461a      	mov	r2, r3
 c007162:	79fb      	ldrb	r3, [r7, #7]
 c007164:	429a      	cmp	r2, r3
 c007166:	d0a6      	beq.n	c0070b6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c007168:	2300      	movs	r3, #0
}
 c00716a:	4618      	mov	r0, r3
 c00716c:	3710      	adds	r7, #16
 c00716e:	46bd      	mov	sp, r7
 c007170:	bd80      	pop	{r7, pc}

0c007172 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c007172:	b480      	push	{r7}
 c007174:	b095      	sub	sp, #84	; 0x54
 c007176:	af00      	add	r7, sp, #0
 c007178:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00717a:	687b      	ldr	r3, [r7, #4]
 c00717c:	681b      	ldr	r3, [r3, #0]
 c00717e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c007180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c007182:	e853 3f00 	ldrex	r3, [r3]
 c007186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c007188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00718a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c00718e:	64fb      	str	r3, [r7, #76]	; 0x4c
 c007190:	687b      	ldr	r3, [r7, #4]
 c007192:	681b      	ldr	r3, [r3, #0]
 c007194:	461a      	mov	r2, r3
 c007196:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c007198:	643b      	str	r3, [r7, #64]	; 0x40
 c00719a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00719c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c00719e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c0071a0:	e841 2300 	strex	r3, r2, [r1]
 c0071a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c0071a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0071a8:	2b00      	cmp	r3, #0
 c0071aa:	d1e6      	bne.n	c00717a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c0071ac:	687b      	ldr	r3, [r7, #4]
 c0071ae:	681b      	ldr	r3, [r3, #0]
 c0071b0:	3308      	adds	r3, #8
 c0071b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0071b4:	6a3b      	ldr	r3, [r7, #32]
 c0071b6:	e853 3f00 	ldrex	r3, [r3]
 c0071ba:	61fb      	str	r3, [r7, #28]
   return(result);
 c0071bc:	69fb      	ldr	r3, [r7, #28]
 c0071be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0071c2:	f023 0301 	bic.w	r3, r3, #1
 c0071c6:	64bb      	str	r3, [r7, #72]	; 0x48
 c0071c8:	687b      	ldr	r3, [r7, #4]
 c0071ca:	681b      	ldr	r3, [r3, #0]
 c0071cc:	3308      	adds	r3, #8
 c0071ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0071d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 c0071d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0071d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c0071d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c0071d8:	e841 2300 	strex	r3, r2, [r1]
 c0071dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c0071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0071e0:	2b00      	cmp	r3, #0
 c0071e2:	d1e3      	bne.n	c0071ac <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c0071e4:	687b      	ldr	r3, [r7, #4]
 c0071e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0071e8:	2b01      	cmp	r3, #1
 c0071ea:	d118      	bne.n	c00721e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0071ec:	687b      	ldr	r3, [r7, #4]
 c0071ee:	681b      	ldr	r3, [r3, #0]
 c0071f0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0071f2:	68fb      	ldr	r3, [r7, #12]
 c0071f4:	e853 3f00 	ldrex	r3, [r3]
 c0071f8:	60bb      	str	r3, [r7, #8]
   return(result);
 c0071fa:	68bb      	ldr	r3, [r7, #8]
 c0071fc:	f023 0310 	bic.w	r3, r3, #16
 c007200:	647b      	str	r3, [r7, #68]	; 0x44
 c007202:	687b      	ldr	r3, [r7, #4]
 c007204:	681b      	ldr	r3, [r3, #0]
 c007206:	461a      	mov	r2, r3
 c007208:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00720a:	61bb      	str	r3, [r7, #24]
 c00720c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00720e:	6979      	ldr	r1, [r7, #20]
 c007210:	69ba      	ldr	r2, [r7, #24]
 c007212:	e841 2300 	strex	r3, r2, [r1]
 c007216:	613b      	str	r3, [r7, #16]
   return(result);
 c007218:	693b      	ldr	r3, [r7, #16]
 c00721a:	2b00      	cmp	r3, #0
 c00721c:	d1e6      	bne.n	c0071ec <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c00721e:	687b      	ldr	r3, [r7, #4]
 c007220:	2220      	movs	r2, #32
 c007222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c007226:	687b      	ldr	r3, [r7, #4]
 c007228:	2200      	movs	r2, #0
 c00722a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c00722c:	687b      	ldr	r3, [r7, #4]
 c00722e:	2200      	movs	r2, #0
 c007230:	675a      	str	r2, [r3, #116]	; 0x74
}
 c007232:	bf00      	nop
 c007234:	3754      	adds	r7, #84	; 0x54
 c007236:	46bd      	mov	sp, r7
 c007238:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00723c:	4770      	bx	lr

0c00723e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c00723e:	b480      	push	{r7}
 c007240:	b085      	sub	sp, #20
 c007242:	af00      	add	r7, sp, #0
 c007244:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c007246:	687b      	ldr	r3, [r7, #4]
 c007248:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00724c:	2b01      	cmp	r3, #1
 c00724e:	d101      	bne.n	c007254 <HAL_UARTEx_DisableFifoMode+0x16>
 c007250:	2302      	movs	r3, #2
 c007252:	e027      	b.n	c0072a4 <HAL_UARTEx_DisableFifoMode+0x66>
 c007254:	687b      	ldr	r3, [r7, #4]
 c007256:	2201      	movs	r2, #1
 c007258:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00725c:	687b      	ldr	r3, [r7, #4]
 c00725e:	2224      	movs	r2, #36	; 0x24
 c007260:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007264:	687b      	ldr	r3, [r7, #4]
 c007266:	681b      	ldr	r3, [r3, #0]
 c007268:	681b      	ldr	r3, [r3, #0]
 c00726a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00726c:	687b      	ldr	r3, [r7, #4]
 c00726e:	681b      	ldr	r3, [r3, #0]
 c007270:	681a      	ldr	r2, [r3, #0]
 c007272:	687b      	ldr	r3, [r7, #4]
 c007274:	681b      	ldr	r3, [r3, #0]
 c007276:	f022 0201 	bic.w	r2, r2, #1
 c00727a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c00727c:	68fb      	ldr	r3, [r7, #12]
 c00727e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c007282:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c007284:	687b      	ldr	r3, [r7, #4]
 c007286:	2200      	movs	r2, #0
 c007288:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00728a:	687b      	ldr	r3, [r7, #4]
 c00728c:	681b      	ldr	r3, [r3, #0]
 c00728e:	68fa      	ldr	r2, [r7, #12]
 c007290:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007292:	687b      	ldr	r3, [r7, #4]
 c007294:	2220      	movs	r2, #32
 c007296:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00729a:	687b      	ldr	r3, [r7, #4]
 c00729c:	2200      	movs	r2, #0
 c00729e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c0072a2:	2300      	movs	r3, #0
}
 c0072a4:	4618      	mov	r0, r3
 c0072a6:	3714      	adds	r7, #20
 c0072a8:	46bd      	mov	sp, r7
 c0072aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0072ae:	4770      	bx	lr

0c0072b0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0072b0:	b580      	push	{r7, lr}
 c0072b2:	b084      	sub	sp, #16
 c0072b4:	af00      	add	r7, sp, #0
 c0072b6:	6078      	str	r0, [r7, #4]
 c0072b8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0072ba:	687b      	ldr	r3, [r7, #4]
 c0072bc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0072c0:	2b01      	cmp	r3, #1
 c0072c2:	d101      	bne.n	c0072c8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c0072c4:	2302      	movs	r3, #2
 c0072c6:	e02d      	b.n	c007324 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c0072c8:	687b      	ldr	r3, [r7, #4]
 c0072ca:	2201      	movs	r2, #1
 c0072cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0072d0:	687b      	ldr	r3, [r7, #4]
 c0072d2:	2224      	movs	r2, #36	; 0x24
 c0072d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0072d8:	687b      	ldr	r3, [r7, #4]
 c0072da:	681b      	ldr	r3, [r3, #0]
 c0072dc:	681b      	ldr	r3, [r3, #0]
 c0072de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0072e0:	687b      	ldr	r3, [r7, #4]
 c0072e2:	681b      	ldr	r3, [r3, #0]
 c0072e4:	681a      	ldr	r2, [r3, #0]
 c0072e6:	687b      	ldr	r3, [r7, #4]
 c0072e8:	681b      	ldr	r3, [r3, #0]
 c0072ea:	f022 0201 	bic.w	r2, r2, #1
 c0072ee:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0072f0:	687b      	ldr	r3, [r7, #4]
 c0072f2:	681b      	ldr	r3, [r3, #0]
 c0072f4:	689b      	ldr	r3, [r3, #8]
 c0072f6:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0072fa:	687b      	ldr	r3, [r7, #4]
 c0072fc:	681b      	ldr	r3, [r3, #0]
 c0072fe:	683a      	ldr	r2, [r7, #0]
 c007300:	430a      	orrs	r2, r1
 c007302:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c007304:	6878      	ldr	r0, [r7, #4]
 c007306:	f000 f84f 	bl	c0073a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00730a:	687b      	ldr	r3, [r7, #4]
 c00730c:	681b      	ldr	r3, [r3, #0]
 c00730e:	68fa      	ldr	r2, [r7, #12]
 c007310:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c007312:	687b      	ldr	r3, [r7, #4]
 c007314:	2220      	movs	r2, #32
 c007316:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00731a:	687b      	ldr	r3, [r7, #4]
 c00731c:	2200      	movs	r2, #0
 c00731e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c007322:	2300      	movs	r3, #0
}
 c007324:	4618      	mov	r0, r3
 c007326:	3710      	adds	r7, #16
 c007328:	46bd      	mov	sp, r7
 c00732a:	bd80      	pop	{r7, pc}

0c00732c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00732c:	b580      	push	{r7, lr}
 c00732e:	b084      	sub	sp, #16
 c007330:	af00      	add	r7, sp, #0
 c007332:	6078      	str	r0, [r7, #4]
 c007334:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c007336:	687b      	ldr	r3, [r7, #4]
 c007338:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00733c:	2b01      	cmp	r3, #1
 c00733e:	d101      	bne.n	c007344 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c007340:	2302      	movs	r3, #2
 c007342:	e02d      	b.n	c0073a0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c007344:	687b      	ldr	r3, [r7, #4]
 c007346:	2201      	movs	r2, #1
 c007348:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00734c:	687b      	ldr	r3, [r7, #4]
 c00734e:	2224      	movs	r2, #36	; 0x24
 c007350:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c007354:	687b      	ldr	r3, [r7, #4]
 c007356:	681b      	ldr	r3, [r3, #0]
 c007358:	681b      	ldr	r3, [r3, #0]
 c00735a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00735c:	687b      	ldr	r3, [r7, #4]
 c00735e:	681b      	ldr	r3, [r3, #0]
 c007360:	681a      	ldr	r2, [r3, #0]
 c007362:	687b      	ldr	r3, [r7, #4]
 c007364:	681b      	ldr	r3, [r3, #0]
 c007366:	f022 0201 	bic.w	r2, r2, #1
 c00736a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c00736c:	687b      	ldr	r3, [r7, #4]
 c00736e:	681b      	ldr	r3, [r3, #0]
 c007370:	689b      	ldr	r3, [r3, #8]
 c007372:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c007376:	687b      	ldr	r3, [r7, #4]
 c007378:	681b      	ldr	r3, [r3, #0]
 c00737a:	683a      	ldr	r2, [r7, #0]
 c00737c:	430a      	orrs	r2, r1
 c00737e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c007380:	6878      	ldr	r0, [r7, #4]
 c007382:	f000 f811 	bl	c0073a8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c007386:	687b      	ldr	r3, [r7, #4]
 c007388:	681b      	ldr	r3, [r3, #0]
 c00738a:	68fa      	ldr	r2, [r7, #12]
 c00738c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00738e:	687b      	ldr	r3, [r7, #4]
 c007390:	2220      	movs	r2, #32
 c007392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c007396:	687b      	ldr	r3, [r7, #4]
 c007398:	2200      	movs	r2, #0
 c00739a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00739e:	2300      	movs	r3, #0
}
 c0073a0:	4618      	mov	r0, r3
 c0073a2:	3710      	adds	r7, #16
 c0073a4:	46bd      	mov	sp, r7
 c0073a6:	bd80      	pop	{r7, pc}

0c0073a8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c0073a8:	b480      	push	{r7}
 c0073aa:	b085      	sub	sp, #20
 c0073ac:	af00      	add	r7, sp, #0
 c0073ae:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0073b0:	687b      	ldr	r3, [r7, #4]
 c0073b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0073b4:	2b00      	cmp	r3, #0
 c0073b6:	d108      	bne.n	c0073ca <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c0073b8:	687b      	ldr	r3, [r7, #4]
 c0073ba:	2201      	movs	r2, #1
 c0073bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c0073c0:	687b      	ldr	r3, [r7, #4]
 c0073c2:	2201      	movs	r2, #1
 c0073c4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c0073c8:	e031      	b.n	c00742e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c0073ca:	2308      	movs	r3, #8
 c0073cc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0073ce:	2308      	movs	r3, #8
 c0073d0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0073d2:	687b      	ldr	r3, [r7, #4]
 c0073d4:	681b      	ldr	r3, [r3, #0]
 c0073d6:	689b      	ldr	r3, [r3, #8]
 c0073d8:	0e5b      	lsrs	r3, r3, #25
 c0073da:	b2db      	uxtb	r3, r3
 c0073dc:	f003 0307 	and.w	r3, r3, #7
 c0073e0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0073e2:	687b      	ldr	r3, [r7, #4]
 c0073e4:	681b      	ldr	r3, [r3, #0]
 c0073e6:	689b      	ldr	r3, [r3, #8]
 c0073e8:	0f5b      	lsrs	r3, r3, #29
 c0073ea:	b2db      	uxtb	r3, r3
 c0073ec:	f003 0307 	and.w	r3, r3, #7
 c0073f0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c0073f2:	7bbb      	ldrb	r3, [r7, #14]
 c0073f4:	7b3a      	ldrb	r2, [r7, #12]
 c0073f6:	4911      	ldr	r1, [pc, #68]	; (c00743c <UARTEx_SetNbDataToProcess+0x94>)
 c0073f8:	5c8a      	ldrb	r2, [r1, r2]
 c0073fa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c0073fe:	7b3a      	ldrb	r2, [r7, #12]
 c007400:	490f      	ldr	r1, [pc, #60]	; (c007440 <UARTEx_SetNbDataToProcess+0x98>)
 c007402:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c007404:	fb93 f3f2 	sdiv	r3, r3, r2
 c007408:	b29a      	uxth	r2, r3
 c00740a:	687b      	ldr	r3, [r7, #4]
 c00740c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c007410:	7bfb      	ldrb	r3, [r7, #15]
 c007412:	7b7a      	ldrb	r2, [r7, #13]
 c007414:	4909      	ldr	r1, [pc, #36]	; (c00743c <UARTEx_SetNbDataToProcess+0x94>)
 c007416:	5c8a      	ldrb	r2, [r1, r2]
 c007418:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c00741c:	7b7a      	ldrb	r2, [r7, #13]
 c00741e:	4908      	ldr	r1, [pc, #32]	; (c007440 <UARTEx_SetNbDataToProcess+0x98>)
 c007420:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c007422:	fb93 f3f2 	sdiv	r3, r3, r2
 c007426:	b29a      	uxth	r2, r3
 c007428:	687b      	ldr	r3, [r7, #4]
 c00742a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c00742e:	bf00      	nop
 c007430:	3714      	adds	r7, #20
 c007432:	46bd      	mov	sp, r7
 c007434:	f85d 7b04 	ldr.w	r7, [sp], #4
 c007438:	4770      	bx	lr
 c00743a:	bf00      	nop
 c00743c:	0c008cf0 	.word	0x0c008cf0
 c007440:	0c008cf8 	.word	0x0c008cf8

0c007444 <__errno>:
 c007444:	4b01      	ldr	r3, [pc, #4]	; (c00744c <__errno+0x8>)
 c007446:	6818      	ldr	r0, [r3, #0]
 c007448:	4770      	bx	lr
 c00744a:	bf00      	nop
 c00744c:	30000104 	.word	0x30000104

0c007450 <__libc_init_array>:
 c007450:	b570      	push	{r4, r5, r6, lr}
 c007452:	4d0d      	ldr	r5, [pc, #52]	; (c007488 <__libc_init_array+0x38>)
 c007454:	2600      	movs	r6, #0
 c007456:	4c0d      	ldr	r4, [pc, #52]	; (c00748c <__libc_init_array+0x3c>)
 c007458:	1b64      	subs	r4, r4, r5
 c00745a:	10a4      	asrs	r4, r4, #2
 c00745c:	42a6      	cmp	r6, r4
 c00745e:	d109      	bne.n	c007474 <__libc_init_array+0x24>
 c007460:	4d0b      	ldr	r5, [pc, #44]	; (c007490 <__libc_init_array+0x40>)
 c007462:	2600      	movs	r6, #0
 c007464:	4c0b      	ldr	r4, [pc, #44]	; (c007494 <__libc_init_array+0x44>)
 c007466:	f001 f9ab 	bl	c0087c0 <_init>
 c00746a:	1b64      	subs	r4, r4, r5
 c00746c:	10a4      	asrs	r4, r4, #2
 c00746e:	42a6      	cmp	r6, r4
 c007470:	d105      	bne.n	c00747e <__libc_init_array+0x2e>
 c007472:	bd70      	pop	{r4, r5, r6, pc}
 c007474:	f855 3b04 	ldr.w	r3, [r5], #4
 c007478:	3601      	adds	r6, #1
 c00747a:	4798      	blx	r3
 c00747c:	e7ee      	b.n	c00745c <__libc_init_array+0xc>
 c00747e:	f855 3b04 	ldr.w	r3, [r5], #4
 c007482:	3601      	adds	r6, #1
 c007484:	4798      	blx	r3
 c007486:	e7f2      	b.n	c00746e <__libc_init_array+0x1e>
 c007488:	0c008da0 	.word	0x0c008da0
 c00748c:	0c008da0 	.word	0x0c008da0
 c007490:	0c008da0 	.word	0x0c008da0
 c007494:	0c008da4 	.word	0x0c008da4

0c007498 <memset>:
 c007498:	4402      	add	r2, r0
 c00749a:	4603      	mov	r3, r0
 c00749c:	4293      	cmp	r3, r2
 c00749e:	d100      	bne.n	c0074a2 <memset+0xa>
 c0074a0:	4770      	bx	lr
 c0074a2:	f803 1b01 	strb.w	r1, [r3], #1
 c0074a6:	e7f9      	b.n	c00749c <memset+0x4>

0c0074a8 <iprintf>:
 c0074a8:	b40f      	push	{r0, r1, r2, r3}
 c0074aa:	4b0a      	ldr	r3, [pc, #40]	; (c0074d4 <iprintf+0x2c>)
 c0074ac:	b513      	push	{r0, r1, r4, lr}
 c0074ae:	681c      	ldr	r4, [r3, #0]
 c0074b0:	b124      	cbz	r4, c0074bc <iprintf+0x14>
 c0074b2:	69a3      	ldr	r3, [r4, #24]
 c0074b4:	b913      	cbnz	r3, c0074bc <iprintf+0x14>
 c0074b6:	4620      	mov	r0, r4
 c0074b8:	f000 f89a 	bl	c0075f0 <__sinit>
 c0074bc:	ab05      	add	r3, sp, #20
 c0074be:	9a04      	ldr	r2, [sp, #16]
 c0074c0:	68a1      	ldr	r1, [r4, #8]
 c0074c2:	4620      	mov	r0, r4
 c0074c4:	9301      	str	r3, [sp, #4]
 c0074c6:	f000 fb4d 	bl	c007b64 <_vfiprintf_r>
 c0074ca:	b002      	add	sp, #8
 c0074cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0074d0:	b004      	add	sp, #16
 c0074d2:	4770      	bx	lr
 c0074d4:	30000104 	.word	0x30000104

0c0074d8 <sniprintf>:
 c0074d8:	b40c      	push	{r2, r3}
 c0074da:	4b18      	ldr	r3, [pc, #96]	; (c00753c <sniprintf+0x64>)
 c0074dc:	b530      	push	{r4, r5, lr}
 c0074de:	1e0c      	subs	r4, r1, #0
 c0074e0:	b09d      	sub	sp, #116	; 0x74
 c0074e2:	681d      	ldr	r5, [r3, #0]
 c0074e4:	da08      	bge.n	c0074f8 <sniprintf+0x20>
 c0074e6:	238b      	movs	r3, #139	; 0x8b
 c0074e8:	f04f 30ff 	mov.w	r0, #4294967295
 c0074ec:	602b      	str	r3, [r5, #0]
 c0074ee:	b01d      	add	sp, #116	; 0x74
 c0074f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c0074f4:	b002      	add	sp, #8
 c0074f6:	4770      	bx	lr
 c0074f8:	f44f 7302 	mov.w	r3, #520	; 0x208
 c0074fc:	9002      	str	r0, [sp, #8]
 c0074fe:	9006      	str	r0, [sp, #24]
 c007500:	a902      	add	r1, sp, #8
 c007502:	f8ad 3014 	strh.w	r3, [sp, #20]
 c007506:	bf14      	ite	ne
 c007508:	f104 33ff 	addne.w	r3, r4, #4294967295
 c00750c:	4623      	moveq	r3, r4
 c00750e:	9a20      	ldr	r2, [sp, #128]	; 0x80
 c007510:	4628      	mov	r0, r5
 c007512:	9304      	str	r3, [sp, #16]
 c007514:	9307      	str	r3, [sp, #28]
 c007516:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c00751a:	f8ad 3016 	strh.w	r3, [sp, #22]
 c00751e:	ab21      	add	r3, sp, #132	; 0x84
 c007520:	9301      	str	r3, [sp, #4]
 c007522:	f000 f9f5 	bl	c007910 <_svfiprintf_r>
 c007526:	1c43      	adds	r3, r0, #1
 c007528:	bfbc      	itt	lt
 c00752a:	238b      	movlt	r3, #139	; 0x8b
 c00752c:	602b      	strlt	r3, [r5, #0]
 c00752e:	2c00      	cmp	r4, #0
 c007530:	d0dd      	beq.n	c0074ee <sniprintf+0x16>
 c007532:	9b02      	ldr	r3, [sp, #8]
 c007534:	2200      	movs	r2, #0
 c007536:	701a      	strb	r2, [r3, #0]
 c007538:	e7d9      	b.n	c0074ee <sniprintf+0x16>
 c00753a:	bf00      	nop
 c00753c:	30000104 	.word	0x30000104

0c007540 <std>:
 c007540:	2300      	movs	r3, #0
 c007542:	b510      	push	{r4, lr}
 c007544:	4604      	mov	r4, r0
 c007546:	6083      	str	r3, [r0, #8]
 c007548:	8181      	strh	r1, [r0, #12]
 c00754a:	4619      	mov	r1, r3
 c00754c:	6643      	str	r3, [r0, #100]	; 0x64
 c00754e:	81c2      	strh	r2, [r0, #14]
 c007550:	2208      	movs	r2, #8
 c007552:	6183      	str	r3, [r0, #24]
 c007554:	e9c0 3300 	strd	r3, r3, [r0]
 c007558:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c00755c:	305c      	adds	r0, #92	; 0x5c
 c00755e:	f7ff ff9b 	bl	c007498 <memset>
 c007562:	4b05      	ldr	r3, [pc, #20]	; (c007578 <std+0x38>)
 c007564:	6224      	str	r4, [r4, #32]
 c007566:	6263      	str	r3, [r4, #36]	; 0x24
 c007568:	4b04      	ldr	r3, [pc, #16]	; (c00757c <std+0x3c>)
 c00756a:	62a3      	str	r3, [r4, #40]	; 0x28
 c00756c:	4b04      	ldr	r3, [pc, #16]	; (c007580 <std+0x40>)
 c00756e:	62e3      	str	r3, [r4, #44]	; 0x2c
 c007570:	4b04      	ldr	r3, [pc, #16]	; (c007584 <std+0x44>)
 c007572:	6323      	str	r3, [r4, #48]	; 0x30
 c007574:	bd10      	pop	{r4, pc}
 c007576:	bf00      	nop
 c007578:	0c008111 	.word	0x0c008111
 c00757c:	0c008133 	.word	0x0c008133
 c007580:	0c00816b 	.word	0x0c00816b
 c007584:	0c00818f 	.word	0x0c00818f

0c007588 <_cleanup_r>:
 c007588:	4901      	ldr	r1, [pc, #4]	; (c007590 <_cleanup_r+0x8>)
 c00758a:	f000 b8af 	b.w	c0076ec <_fwalk_reent>
 c00758e:	bf00      	nop
 c007590:	0c008465 	.word	0x0c008465

0c007594 <__sfmoreglue>:
 c007594:	b570      	push	{r4, r5, r6, lr}
 c007596:	2268      	movs	r2, #104	; 0x68
 c007598:	1e4d      	subs	r5, r1, #1
 c00759a:	460e      	mov	r6, r1
 c00759c:	4355      	muls	r5, r2
 c00759e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0075a2:	f000 f8e5 	bl	c007770 <_malloc_r>
 c0075a6:	4604      	mov	r4, r0
 c0075a8:	b140      	cbz	r0, c0075bc <__sfmoreglue+0x28>
 c0075aa:	2100      	movs	r1, #0
 c0075ac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c0075b0:	e9c0 1600 	strd	r1, r6, [r0]
 c0075b4:	300c      	adds	r0, #12
 c0075b6:	60a0      	str	r0, [r4, #8]
 c0075b8:	f7ff ff6e 	bl	c007498 <memset>
 c0075bc:	4620      	mov	r0, r4
 c0075be:	bd70      	pop	{r4, r5, r6, pc}

0c0075c0 <__sfp_lock_acquire>:
 c0075c0:	4801      	ldr	r0, [pc, #4]	; (c0075c8 <__sfp_lock_acquire+0x8>)
 c0075c2:	f000 b8b3 	b.w	c00772c <__retarget_lock_acquire_recursive>
 c0075c6:	bf00      	nop
 c0075c8:	30001c99 	.word	0x30001c99

0c0075cc <__sfp_lock_release>:
 c0075cc:	4801      	ldr	r0, [pc, #4]	; (c0075d4 <__sfp_lock_release+0x8>)
 c0075ce:	f000 b8ae 	b.w	c00772e <__retarget_lock_release_recursive>
 c0075d2:	bf00      	nop
 c0075d4:	30001c99 	.word	0x30001c99

0c0075d8 <__sinit_lock_acquire>:
 c0075d8:	4801      	ldr	r0, [pc, #4]	; (c0075e0 <__sinit_lock_acquire+0x8>)
 c0075da:	f000 b8a7 	b.w	c00772c <__retarget_lock_acquire_recursive>
 c0075de:	bf00      	nop
 c0075e0:	30001c9a 	.word	0x30001c9a

0c0075e4 <__sinit_lock_release>:
 c0075e4:	4801      	ldr	r0, [pc, #4]	; (c0075ec <__sinit_lock_release+0x8>)
 c0075e6:	f000 b8a2 	b.w	c00772e <__retarget_lock_release_recursive>
 c0075ea:	bf00      	nop
 c0075ec:	30001c9a 	.word	0x30001c9a

0c0075f0 <__sinit>:
 c0075f0:	b510      	push	{r4, lr}
 c0075f2:	4604      	mov	r4, r0
 c0075f4:	f7ff fff0 	bl	c0075d8 <__sinit_lock_acquire>
 c0075f8:	69a3      	ldr	r3, [r4, #24]
 c0075fa:	b11b      	cbz	r3, c007604 <__sinit+0x14>
 c0075fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c007600:	f7ff bff0 	b.w	c0075e4 <__sinit_lock_release>
 c007604:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c007608:	6523      	str	r3, [r4, #80]	; 0x50
 c00760a:	4620      	mov	r0, r4
 c00760c:	4b12      	ldr	r3, [pc, #72]	; (c007658 <__sinit+0x68>)
 c00760e:	4a13      	ldr	r2, [pc, #76]	; (c00765c <__sinit+0x6c>)
 c007610:	681b      	ldr	r3, [r3, #0]
 c007612:	62a2      	str	r2, [r4, #40]	; 0x28
 c007614:	42a3      	cmp	r3, r4
 c007616:	bf04      	itt	eq
 c007618:	2301      	moveq	r3, #1
 c00761a:	61a3      	streq	r3, [r4, #24]
 c00761c:	f000 f820 	bl	c007660 <__sfp>
 c007620:	6060      	str	r0, [r4, #4]
 c007622:	4620      	mov	r0, r4
 c007624:	f000 f81c 	bl	c007660 <__sfp>
 c007628:	60a0      	str	r0, [r4, #8]
 c00762a:	4620      	mov	r0, r4
 c00762c:	f000 f818 	bl	c007660 <__sfp>
 c007630:	2200      	movs	r2, #0
 c007632:	2104      	movs	r1, #4
 c007634:	60e0      	str	r0, [r4, #12]
 c007636:	6860      	ldr	r0, [r4, #4]
 c007638:	f7ff ff82 	bl	c007540 <std>
 c00763c:	2201      	movs	r2, #1
 c00763e:	2109      	movs	r1, #9
 c007640:	68a0      	ldr	r0, [r4, #8]
 c007642:	f7ff ff7d 	bl	c007540 <std>
 c007646:	2202      	movs	r2, #2
 c007648:	2112      	movs	r1, #18
 c00764a:	68e0      	ldr	r0, [r4, #12]
 c00764c:	f7ff ff78 	bl	c007540 <std>
 c007650:	2301      	movs	r3, #1
 c007652:	61a3      	str	r3, [r4, #24]
 c007654:	e7d2      	b.n	c0075fc <__sinit+0xc>
 c007656:	bf00      	nop
 c007658:	0c008d00 	.word	0x0c008d00
 c00765c:	0c007589 	.word	0x0c007589

0c007660 <__sfp>:
 c007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007662:	4607      	mov	r7, r0
 c007664:	f7ff ffac 	bl	c0075c0 <__sfp_lock_acquire>
 c007668:	4b1e      	ldr	r3, [pc, #120]	; (c0076e4 <__sfp+0x84>)
 c00766a:	681e      	ldr	r6, [r3, #0]
 c00766c:	69b3      	ldr	r3, [r6, #24]
 c00766e:	b913      	cbnz	r3, c007676 <__sfp+0x16>
 c007670:	4630      	mov	r0, r6
 c007672:	f7ff ffbd 	bl	c0075f0 <__sinit>
 c007676:	3648      	adds	r6, #72	; 0x48
 c007678:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c00767c:	3b01      	subs	r3, #1
 c00767e:	d503      	bpl.n	c007688 <__sfp+0x28>
 c007680:	6833      	ldr	r3, [r6, #0]
 c007682:	b30b      	cbz	r3, c0076c8 <__sfp+0x68>
 c007684:	6836      	ldr	r6, [r6, #0]
 c007686:	e7f7      	b.n	c007678 <__sfp+0x18>
 c007688:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c00768c:	b9d5      	cbnz	r5, c0076c4 <__sfp+0x64>
 c00768e:	4b16      	ldr	r3, [pc, #88]	; (c0076e8 <__sfp+0x88>)
 c007690:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c007694:	6665      	str	r5, [r4, #100]	; 0x64
 c007696:	60e3      	str	r3, [r4, #12]
 c007698:	f000 f847 	bl	c00772a <__retarget_lock_init_recursive>
 c00769c:	f7ff ff96 	bl	c0075cc <__sfp_lock_release>
 c0076a0:	2208      	movs	r2, #8
 c0076a2:	4629      	mov	r1, r5
 c0076a4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0076a8:	6025      	str	r5, [r4, #0]
 c0076aa:	61a5      	str	r5, [r4, #24]
 c0076ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c0076b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c0076b4:	f7ff fef0 	bl	c007498 <memset>
 c0076b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c0076bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c0076c0:	4620      	mov	r0, r4
 c0076c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c0076c4:	3468      	adds	r4, #104	; 0x68
 c0076c6:	e7d9      	b.n	c00767c <__sfp+0x1c>
 c0076c8:	2104      	movs	r1, #4
 c0076ca:	4638      	mov	r0, r7
 c0076cc:	f7ff ff62 	bl	c007594 <__sfmoreglue>
 c0076d0:	4604      	mov	r4, r0
 c0076d2:	6030      	str	r0, [r6, #0]
 c0076d4:	2800      	cmp	r0, #0
 c0076d6:	d1d5      	bne.n	c007684 <__sfp+0x24>
 c0076d8:	f7ff ff78 	bl	c0075cc <__sfp_lock_release>
 c0076dc:	230c      	movs	r3, #12
 c0076de:	603b      	str	r3, [r7, #0]
 c0076e0:	e7ee      	b.n	c0076c0 <__sfp+0x60>
 c0076e2:	bf00      	nop
 c0076e4:	0c008d00 	.word	0x0c008d00
 c0076e8:	ffff0001 	.word	0xffff0001

0c0076ec <_fwalk_reent>:
 c0076ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0076f0:	4606      	mov	r6, r0
 c0076f2:	4688      	mov	r8, r1
 c0076f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c0076f8:	2700      	movs	r7, #0
 c0076fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c0076fe:	f1b9 0901 	subs.w	r9, r9, #1
 c007702:	d505      	bpl.n	c007710 <_fwalk_reent+0x24>
 c007704:	6824      	ldr	r4, [r4, #0]
 c007706:	2c00      	cmp	r4, #0
 c007708:	d1f7      	bne.n	c0076fa <_fwalk_reent+0xe>
 c00770a:	4638      	mov	r0, r7
 c00770c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c007710:	89ab      	ldrh	r3, [r5, #12]
 c007712:	2b01      	cmp	r3, #1
 c007714:	d907      	bls.n	c007726 <_fwalk_reent+0x3a>
 c007716:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c00771a:	3301      	adds	r3, #1
 c00771c:	d003      	beq.n	c007726 <_fwalk_reent+0x3a>
 c00771e:	4629      	mov	r1, r5
 c007720:	4630      	mov	r0, r6
 c007722:	47c0      	blx	r8
 c007724:	4307      	orrs	r7, r0
 c007726:	3568      	adds	r5, #104	; 0x68
 c007728:	e7e9      	b.n	c0076fe <_fwalk_reent+0x12>

0c00772a <__retarget_lock_init_recursive>:
 c00772a:	4770      	bx	lr

0c00772c <__retarget_lock_acquire_recursive>:
 c00772c:	4770      	bx	lr

0c00772e <__retarget_lock_release_recursive>:
 c00772e:	4770      	bx	lr

0c007730 <sbrk_aligned>:
 c007730:	b570      	push	{r4, r5, r6, lr}
 c007732:	4e0e      	ldr	r6, [pc, #56]	; (c00776c <sbrk_aligned+0x3c>)
 c007734:	460c      	mov	r4, r1
 c007736:	4605      	mov	r5, r0
 c007738:	6831      	ldr	r1, [r6, #0]
 c00773a:	b911      	cbnz	r1, c007742 <sbrk_aligned+0x12>
 c00773c:	f000 fcd8 	bl	c0080f0 <_sbrk_r>
 c007740:	6030      	str	r0, [r6, #0]
 c007742:	4621      	mov	r1, r4
 c007744:	4628      	mov	r0, r5
 c007746:	f000 fcd3 	bl	c0080f0 <_sbrk_r>
 c00774a:	1c43      	adds	r3, r0, #1
 c00774c:	d00a      	beq.n	c007764 <sbrk_aligned+0x34>
 c00774e:	1cc4      	adds	r4, r0, #3
 c007750:	f024 0403 	bic.w	r4, r4, #3
 c007754:	42a0      	cmp	r0, r4
 c007756:	d007      	beq.n	c007768 <sbrk_aligned+0x38>
 c007758:	1a21      	subs	r1, r4, r0
 c00775a:	4628      	mov	r0, r5
 c00775c:	f000 fcc8 	bl	c0080f0 <_sbrk_r>
 c007760:	3001      	adds	r0, #1
 c007762:	d101      	bne.n	c007768 <sbrk_aligned+0x38>
 c007764:	f04f 34ff 	mov.w	r4, #4294967295
 c007768:	4620      	mov	r0, r4
 c00776a:	bd70      	pop	{r4, r5, r6, pc}
 c00776c:	30001ca0 	.word	0x30001ca0

0c007770 <_malloc_r>:
 c007770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c007774:	1ccd      	adds	r5, r1, #3
 c007776:	4607      	mov	r7, r0
 c007778:	f025 0503 	bic.w	r5, r5, #3
 c00777c:	3508      	adds	r5, #8
 c00777e:	2d0c      	cmp	r5, #12
 c007780:	bf38      	it	cc
 c007782:	250c      	movcc	r5, #12
 c007784:	2d00      	cmp	r5, #0
 c007786:	db01      	blt.n	c00778c <_malloc_r+0x1c>
 c007788:	42a9      	cmp	r1, r5
 c00778a:	d905      	bls.n	c007798 <_malloc_r+0x28>
 c00778c:	230c      	movs	r3, #12
 c00778e:	2600      	movs	r6, #0
 c007790:	603b      	str	r3, [r7, #0]
 c007792:	4630      	mov	r0, r6
 c007794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c007798:	4e2e      	ldr	r6, [pc, #184]	; (c007854 <_malloc_r+0xe4>)
 c00779a:	f000 ff4d 	bl	c008638 <__malloc_lock>
 c00779e:	6833      	ldr	r3, [r6, #0]
 c0077a0:	461c      	mov	r4, r3
 c0077a2:	bb34      	cbnz	r4, c0077f2 <_malloc_r+0x82>
 c0077a4:	4629      	mov	r1, r5
 c0077a6:	4638      	mov	r0, r7
 c0077a8:	f7ff ffc2 	bl	c007730 <sbrk_aligned>
 c0077ac:	1c43      	adds	r3, r0, #1
 c0077ae:	4604      	mov	r4, r0
 c0077b0:	d14d      	bne.n	c00784e <_malloc_r+0xde>
 c0077b2:	6834      	ldr	r4, [r6, #0]
 c0077b4:	4626      	mov	r6, r4
 c0077b6:	2e00      	cmp	r6, #0
 c0077b8:	d140      	bne.n	c00783c <_malloc_r+0xcc>
 c0077ba:	6823      	ldr	r3, [r4, #0]
 c0077bc:	4631      	mov	r1, r6
 c0077be:	4638      	mov	r0, r7
 c0077c0:	eb04 0803 	add.w	r8, r4, r3
 c0077c4:	f000 fc94 	bl	c0080f0 <_sbrk_r>
 c0077c8:	4580      	cmp	r8, r0
 c0077ca:	d13a      	bne.n	c007842 <_malloc_r+0xd2>
 c0077cc:	6821      	ldr	r1, [r4, #0]
 c0077ce:	3503      	adds	r5, #3
 c0077d0:	4638      	mov	r0, r7
 c0077d2:	1a6d      	subs	r5, r5, r1
 c0077d4:	f025 0503 	bic.w	r5, r5, #3
 c0077d8:	3508      	adds	r5, #8
 c0077da:	2d0c      	cmp	r5, #12
 c0077dc:	bf38      	it	cc
 c0077de:	250c      	movcc	r5, #12
 c0077e0:	4629      	mov	r1, r5
 c0077e2:	f7ff ffa5 	bl	c007730 <sbrk_aligned>
 c0077e6:	3001      	adds	r0, #1
 c0077e8:	d02b      	beq.n	c007842 <_malloc_r+0xd2>
 c0077ea:	6823      	ldr	r3, [r4, #0]
 c0077ec:	442b      	add	r3, r5
 c0077ee:	6023      	str	r3, [r4, #0]
 c0077f0:	e00e      	b.n	c007810 <_malloc_r+0xa0>
 c0077f2:	6822      	ldr	r2, [r4, #0]
 c0077f4:	1b52      	subs	r2, r2, r5
 c0077f6:	d41e      	bmi.n	c007836 <_malloc_r+0xc6>
 c0077f8:	2a0b      	cmp	r2, #11
 c0077fa:	d916      	bls.n	c00782a <_malloc_r+0xba>
 c0077fc:	1961      	adds	r1, r4, r5
 c0077fe:	42a3      	cmp	r3, r4
 c007800:	6025      	str	r5, [r4, #0]
 c007802:	bf18      	it	ne
 c007804:	6059      	strne	r1, [r3, #4]
 c007806:	6863      	ldr	r3, [r4, #4]
 c007808:	bf08      	it	eq
 c00780a:	6031      	streq	r1, [r6, #0]
 c00780c:	5162      	str	r2, [r4, r5]
 c00780e:	604b      	str	r3, [r1, #4]
 c007810:	f104 060b 	add.w	r6, r4, #11
 c007814:	4638      	mov	r0, r7
 c007816:	f000 ff15 	bl	c008644 <__malloc_unlock>
 c00781a:	1d23      	adds	r3, r4, #4
 c00781c:	f026 0607 	bic.w	r6, r6, #7
 c007820:	1af2      	subs	r2, r6, r3
 c007822:	d0b6      	beq.n	c007792 <_malloc_r+0x22>
 c007824:	1b9b      	subs	r3, r3, r6
 c007826:	50a3      	str	r3, [r4, r2]
 c007828:	e7b3      	b.n	c007792 <_malloc_r+0x22>
 c00782a:	6862      	ldr	r2, [r4, #4]
 c00782c:	42a3      	cmp	r3, r4
 c00782e:	bf0c      	ite	eq
 c007830:	6032      	streq	r2, [r6, #0]
 c007832:	605a      	strne	r2, [r3, #4]
 c007834:	e7ec      	b.n	c007810 <_malloc_r+0xa0>
 c007836:	4623      	mov	r3, r4
 c007838:	6864      	ldr	r4, [r4, #4]
 c00783a:	e7b2      	b.n	c0077a2 <_malloc_r+0x32>
 c00783c:	4634      	mov	r4, r6
 c00783e:	6876      	ldr	r6, [r6, #4]
 c007840:	e7b9      	b.n	c0077b6 <_malloc_r+0x46>
 c007842:	230c      	movs	r3, #12
 c007844:	4638      	mov	r0, r7
 c007846:	603b      	str	r3, [r7, #0]
 c007848:	f000 fefc 	bl	c008644 <__malloc_unlock>
 c00784c:	e7a1      	b.n	c007792 <_malloc_r+0x22>
 c00784e:	6025      	str	r5, [r4, #0]
 c007850:	e7de      	b.n	c007810 <_malloc_r+0xa0>
 c007852:	bf00      	nop
 c007854:	30001c9c 	.word	0x30001c9c

0c007858 <__ssputs_r>:
 c007858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00785c:	688e      	ldr	r6, [r1, #8]
 c00785e:	4682      	mov	sl, r0
 c007860:	460c      	mov	r4, r1
 c007862:	4690      	mov	r8, r2
 c007864:	429e      	cmp	r6, r3
 c007866:	461f      	mov	r7, r3
 c007868:	d838      	bhi.n	c0078dc <__ssputs_r+0x84>
 c00786a:	898a      	ldrh	r2, [r1, #12]
 c00786c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 c007870:	d032      	beq.n	c0078d8 <__ssputs_r+0x80>
 c007872:	6825      	ldr	r5, [r4, #0]
 c007874:	3301      	adds	r3, #1
 c007876:	6909      	ldr	r1, [r1, #16]
 c007878:	eba5 0901 	sub.w	r9, r5, r1
 c00787c:	6965      	ldr	r5, [r4, #20]
 c00787e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 c007882:	444b      	add	r3, r9
 c007884:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 c007888:	106d      	asrs	r5, r5, #1
 c00788a:	429d      	cmp	r5, r3
 c00788c:	bf38      	it	cc
 c00788e:	461d      	movcc	r5, r3
 c007890:	0553      	lsls	r3, r2, #21
 c007892:	d531      	bpl.n	c0078f8 <__ssputs_r+0xa0>
 c007894:	4629      	mov	r1, r5
 c007896:	f7ff ff6b 	bl	c007770 <_malloc_r>
 c00789a:	4606      	mov	r6, r0
 c00789c:	b950      	cbnz	r0, c0078b4 <__ssputs_r+0x5c>
 c00789e:	230c      	movs	r3, #12
 c0078a0:	f04f 30ff 	mov.w	r0, #4294967295
 c0078a4:	f8ca 3000 	str.w	r3, [sl]
 c0078a8:	89a3      	ldrh	r3, [r4, #12]
 c0078aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0078ae:	81a3      	strh	r3, [r4, #12]
 c0078b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0078b4:	464a      	mov	r2, r9
 c0078b6:	6921      	ldr	r1, [r4, #16]
 c0078b8:	f000 fe96 	bl	c0085e8 <memcpy>
 c0078bc:	89a3      	ldrh	r3, [r4, #12]
 c0078be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 c0078c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0078c6:	81a3      	strh	r3, [r4, #12]
 c0078c8:	6126      	str	r6, [r4, #16]
 c0078ca:	444e      	add	r6, r9
 c0078cc:	6165      	str	r5, [r4, #20]
 c0078ce:	eba5 0509 	sub.w	r5, r5, r9
 c0078d2:	6026      	str	r6, [r4, #0]
 c0078d4:	463e      	mov	r6, r7
 c0078d6:	60a5      	str	r5, [r4, #8]
 c0078d8:	42be      	cmp	r6, r7
 c0078da:	d900      	bls.n	c0078de <__ssputs_r+0x86>
 c0078dc:	463e      	mov	r6, r7
 c0078de:	4632      	mov	r2, r6
 c0078e0:	4641      	mov	r1, r8
 c0078e2:	6820      	ldr	r0, [r4, #0]
 c0078e4:	f000 fe8d 	bl	c008602 <memmove>
 c0078e8:	68a3      	ldr	r3, [r4, #8]
 c0078ea:	2000      	movs	r0, #0
 c0078ec:	1b9b      	subs	r3, r3, r6
 c0078ee:	60a3      	str	r3, [r4, #8]
 c0078f0:	6823      	ldr	r3, [r4, #0]
 c0078f2:	4433      	add	r3, r6
 c0078f4:	6023      	str	r3, [r4, #0]
 c0078f6:	e7db      	b.n	c0078b0 <__ssputs_r+0x58>
 c0078f8:	462a      	mov	r2, r5
 c0078fa:	f000 fef5 	bl	c0086e8 <_realloc_r>
 c0078fe:	4606      	mov	r6, r0
 c007900:	2800      	cmp	r0, #0
 c007902:	d1e1      	bne.n	c0078c8 <__ssputs_r+0x70>
 c007904:	6921      	ldr	r1, [r4, #16]
 c007906:	4650      	mov	r0, sl
 c007908:	f000 fea2 	bl	c008650 <_free_r>
 c00790c:	e7c7      	b.n	c00789e <__ssputs_r+0x46>
	...

0c007910 <_svfiprintf_r>:
 c007910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c007914:	4698      	mov	r8, r3
 c007916:	898b      	ldrh	r3, [r1, #12]
 c007918:	b09d      	sub	sp, #116	; 0x74
 c00791a:	4607      	mov	r7, r0
 c00791c:	061b      	lsls	r3, r3, #24
 c00791e:	460d      	mov	r5, r1
 c007920:	4614      	mov	r4, r2
 c007922:	d50e      	bpl.n	c007942 <_svfiprintf_r+0x32>
 c007924:	690b      	ldr	r3, [r1, #16]
 c007926:	b963      	cbnz	r3, c007942 <_svfiprintf_r+0x32>
 c007928:	2140      	movs	r1, #64	; 0x40
 c00792a:	f7ff ff21 	bl	c007770 <_malloc_r>
 c00792e:	6028      	str	r0, [r5, #0]
 c007930:	6128      	str	r0, [r5, #16]
 c007932:	b920      	cbnz	r0, c00793e <_svfiprintf_r+0x2e>
 c007934:	230c      	movs	r3, #12
 c007936:	603b      	str	r3, [r7, #0]
 c007938:	f04f 30ff 	mov.w	r0, #4294967295
 c00793c:	e0d1      	b.n	c007ae2 <_svfiprintf_r+0x1d2>
 c00793e:	2340      	movs	r3, #64	; 0x40
 c007940:	616b      	str	r3, [r5, #20]
 c007942:	2300      	movs	r3, #0
 c007944:	f8cd 800c 	str.w	r8, [sp, #12]
 c007948:	f04f 0901 	mov.w	r9, #1
 c00794c:	f8df 81ac 	ldr.w	r8, [pc, #428]	; c007afc <_svfiprintf_r+0x1ec>
 c007950:	9309      	str	r3, [sp, #36]	; 0x24
 c007952:	2320      	movs	r3, #32
 c007954:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c007958:	2330      	movs	r3, #48	; 0x30
 c00795a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c00795e:	4623      	mov	r3, r4
 c007960:	469a      	mov	sl, r3
 c007962:	f813 2b01 	ldrb.w	r2, [r3], #1
 c007966:	b10a      	cbz	r2, c00796c <_svfiprintf_r+0x5c>
 c007968:	2a25      	cmp	r2, #37	; 0x25
 c00796a:	d1f9      	bne.n	c007960 <_svfiprintf_r+0x50>
 c00796c:	ebba 0b04 	subs.w	fp, sl, r4
 c007970:	d00b      	beq.n	c00798a <_svfiprintf_r+0x7a>
 c007972:	465b      	mov	r3, fp
 c007974:	4622      	mov	r2, r4
 c007976:	4629      	mov	r1, r5
 c007978:	4638      	mov	r0, r7
 c00797a:	f7ff ff6d 	bl	c007858 <__ssputs_r>
 c00797e:	3001      	adds	r0, #1
 c007980:	f000 80aa 	beq.w	c007ad8 <_svfiprintf_r+0x1c8>
 c007984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c007986:	445a      	add	r2, fp
 c007988:	9209      	str	r2, [sp, #36]	; 0x24
 c00798a:	f89a 3000 	ldrb.w	r3, [sl]
 c00798e:	2b00      	cmp	r3, #0
 c007990:	f000 80a2 	beq.w	c007ad8 <_svfiprintf_r+0x1c8>
 c007994:	2300      	movs	r3, #0
 c007996:	f04f 32ff 	mov.w	r2, #4294967295
 c00799a:	f10a 0a01 	add.w	sl, sl, #1
 c00799e:	9304      	str	r3, [sp, #16]
 c0079a0:	9307      	str	r3, [sp, #28]
 c0079a2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c0079a6:	931a      	str	r3, [sp, #104]	; 0x68
 c0079a8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c0079ac:	4654      	mov	r4, sl
 c0079ae:	2205      	movs	r2, #5
 c0079b0:	4852      	ldr	r0, [pc, #328]	; (c007afc <_svfiprintf_r+0x1ec>)
 c0079b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0079b6:	f000 fe09 	bl	c0085cc <memchr>
 c0079ba:	9a04      	ldr	r2, [sp, #16]
 c0079bc:	b9d8      	cbnz	r0, c0079f6 <_svfiprintf_r+0xe6>
 c0079be:	06d0      	lsls	r0, r2, #27
 c0079c0:	bf44      	itt	mi
 c0079c2:	2320      	movmi	r3, #32
 c0079c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c0079c8:	0711      	lsls	r1, r2, #28
 c0079ca:	bf44      	itt	mi
 c0079cc:	232b      	movmi	r3, #43	; 0x2b
 c0079ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c0079d2:	f89a 3000 	ldrb.w	r3, [sl]
 c0079d6:	2b2a      	cmp	r3, #42	; 0x2a
 c0079d8:	d015      	beq.n	c007a06 <_svfiprintf_r+0xf6>
 c0079da:	9a07      	ldr	r2, [sp, #28]
 c0079dc:	4654      	mov	r4, sl
 c0079de:	2000      	movs	r0, #0
 c0079e0:	f04f 0c0a 	mov.w	ip, #10
 c0079e4:	4621      	mov	r1, r4
 c0079e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 c0079ea:	3b30      	subs	r3, #48	; 0x30
 c0079ec:	2b09      	cmp	r3, #9
 c0079ee:	d94e      	bls.n	c007a8e <_svfiprintf_r+0x17e>
 c0079f0:	b1b0      	cbz	r0, c007a20 <_svfiprintf_r+0x110>
 c0079f2:	9207      	str	r2, [sp, #28]
 c0079f4:	e014      	b.n	c007a20 <_svfiprintf_r+0x110>
 c0079f6:	eba0 0308 	sub.w	r3, r0, r8
 c0079fa:	46a2      	mov	sl, r4
 c0079fc:	fa09 f303 	lsl.w	r3, r9, r3
 c007a00:	4313      	orrs	r3, r2
 c007a02:	9304      	str	r3, [sp, #16]
 c007a04:	e7d2      	b.n	c0079ac <_svfiprintf_r+0x9c>
 c007a06:	9b03      	ldr	r3, [sp, #12]
 c007a08:	1d19      	adds	r1, r3, #4
 c007a0a:	681b      	ldr	r3, [r3, #0]
 c007a0c:	2b00      	cmp	r3, #0
 c007a0e:	9103      	str	r1, [sp, #12]
 c007a10:	bfbb      	ittet	lt
 c007a12:	425b      	neglt	r3, r3
 c007a14:	f042 0202 	orrlt.w	r2, r2, #2
 c007a18:	9307      	strge	r3, [sp, #28]
 c007a1a:	9307      	strlt	r3, [sp, #28]
 c007a1c:	bfb8      	it	lt
 c007a1e:	9204      	strlt	r2, [sp, #16]
 c007a20:	7823      	ldrb	r3, [r4, #0]
 c007a22:	2b2e      	cmp	r3, #46	; 0x2e
 c007a24:	d10c      	bne.n	c007a40 <_svfiprintf_r+0x130>
 c007a26:	7863      	ldrb	r3, [r4, #1]
 c007a28:	2b2a      	cmp	r3, #42	; 0x2a
 c007a2a:	d135      	bne.n	c007a98 <_svfiprintf_r+0x188>
 c007a2c:	9b03      	ldr	r3, [sp, #12]
 c007a2e:	3402      	adds	r4, #2
 c007a30:	1d1a      	adds	r2, r3, #4
 c007a32:	681b      	ldr	r3, [r3, #0]
 c007a34:	2b00      	cmp	r3, #0
 c007a36:	9203      	str	r2, [sp, #12]
 c007a38:	bfb8      	it	lt
 c007a3a:	f04f 33ff 	movlt.w	r3, #4294967295
 c007a3e:	9305      	str	r3, [sp, #20]
 c007a40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; c007b0c <_svfiprintf_r+0x1fc>
 c007a44:	2203      	movs	r2, #3
 c007a46:	7821      	ldrb	r1, [r4, #0]
 c007a48:	4650      	mov	r0, sl
 c007a4a:	f000 fdbf 	bl	c0085cc <memchr>
 c007a4e:	b140      	cbz	r0, c007a62 <_svfiprintf_r+0x152>
 c007a50:	2340      	movs	r3, #64	; 0x40
 c007a52:	eba0 000a 	sub.w	r0, r0, sl
 c007a56:	3401      	adds	r4, #1
 c007a58:	fa03 f000 	lsl.w	r0, r3, r0
 c007a5c:	9b04      	ldr	r3, [sp, #16]
 c007a5e:	4303      	orrs	r3, r0
 c007a60:	9304      	str	r3, [sp, #16]
 c007a62:	f814 1b01 	ldrb.w	r1, [r4], #1
 c007a66:	2206      	movs	r2, #6
 c007a68:	4825      	ldr	r0, [pc, #148]	; (c007b00 <_svfiprintf_r+0x1f0>)
 c007a6a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c007a6e:	f000 fdad 	bl	c0085cc <memchr>
 c007a72:	2800      	cmp	r0, #0
 c007a74:	d038      	beq.n	c007ae8 <_svfiprintf_r+0x1d8>
 c007a76:	4b23      	ldr	r3, [pc, #140]	; (c007b04 <_svfiprintf_r+0x1f4>)
 c007a78:	bb1b      	cbnz	r3, c007ac2 <_svfiprintf_r+0x1b2>
 c007a7a:	9b03      	ldr	r3, [sp, #12]
 c007a7c:	3307      	adds	r3, #7
 c007a7e:	f023 0307 	bic.w	r3, r3, #7
 c007a82:	3308      	adds	r3, #8
 c007a84:	9303      	str	r3, [sp, #12]
 c007a86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007a88:	4433      	add	r3, r6
 c007a8a:	9309      	str	r3, [sp, #36]	; 0x24
 c007a8c:	e767      	b.n	c00795e <_svfiprintf_r+0x4e>
 c007a8e:	fb0c 3202 	mla	r2, ip, r2, r3
 c007a92:	460c      	mov	r4, r1
 c007a94:	2001      	movs	r0, #1
 c007a96:	e7a5      	b.n	c0079e4 <_svfiprintf_r+0xd4>
 c007a98:	2300      	movs	r3, #0
 c007a9a:	3401      	adds	r4, #1
 c007a9c:	f04f 0c0a 	mov.w	ip, #10
 c007aa0:	4619      	mov	r1, r3
 c007aa2:	9305      	str	r3, [sp, #20]
 c007aa4:	4620      	mov	r0, r4
 c007aa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 c007aaa:	3a30      	subs	r2, #48	; 0x30
 c007aac:	2a09      	cmp	r2, #9
 c007aae:	d903      	bls.n	c007ab8 <_svfiprintf_r+0x1a8>
 c007ab0:	2b00      	cmp	r3, #0
 c007ab2:	d0c5      	beq.n	c007a40 <_svfiprintf_r+0x130>
 c007ab4:	9105      	str	r1, [sp, #20]
 c007ab6:	e7c3      	b.n	c007a40 <_svfiprintf_r+0x130>
 c007ab8:	fb0c 2101 	mla	r1, ip, r1, r2
 c007abc:	4604      	mov	r4, r0
 c007abe:	2301      	movs	r3, #1
 c007ac0:	e7f0      	b.n	c007aa4 <_svfiprintf_r+0x194>
 c007ac2:	ab03      	add	r3, sp, #12
 c007ac4:	462a      	mov	r2, r5
 c007ac6:	a904      	add	r1, sp, #16
 c007ac8:	4638      	mov	r0, r7
 c007aca:	9300      	str	r3, [sp, #0]
 c007acc:	4b0e      	ldr	r3, [pc, #56]	; (c007b08 <_svfiprintf_r+0x1f8>)
 c007ace:	e000      	b.n	c007ad2 <_svfiprintf_r+0x1c2>
 c007ad0:	bf00      	nop
 c007ad2:	1c42      	adds	r2, r0, #1
 c007ad4:	4606      	mov	r6, r0
 c007ad6:	d1d6      	bne.n	c007a86 <_svfiprintf_r+0x176>
 c007ad8:	89ab      	ldrh	r3, [r5, #12]
 c007ada:	065b      	lsls	r3, r3, #25
 c007adc:	f53f af2c 	bmi.w	c007938 <_svfiprintf_r+0x28>
 c007ae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 c007ae2:	b01d      	add	sp, #116	; 0x74
 c007ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c007ae8:	ab03      	add	r3, sp, #12
 c007aea:	462a      	mov	r2, r5
 c007aec:	a904      	add	r1, sp, #16
 c007aee:	4638      	mov	r0, r7
 c007af0:	9300      	str	r3, [sp, #0]
 c007af2:	4b05      	ldr	r3, [pc, #20]	; (c007b08 <_svfiprintf_r+0x1f8>)
 c007af4:	f000 f9d6 	bl	c007ea4 <_printf_i>
 c007af8:	e7eb      	b.n	c007ad2 <_svfiprintf_r+0x1c2>
 c007afa:	bf00      	nop
 c007afc:	0c008d64 	.word	0x0c008d64
 c007b00:	0c008d6e 	.word	0x0c008d6e
 c007b04:	00000000 	.word	0x00000000
 c007b08:	0c007859 	.word	0x0c007859
 c007b0c:	0c008d6a 	.word	0x0c008d6a

0c007b10 <__sfputc_r>:
 c007b10:	6893      	ldr	r3, [r2, #8]
 c007b12:	3b01      	subs	r3, #1
 c007b14:	2b00      	cmp	r3, #0
 c007b16:	6093      	str	r3, [r2, #8]
 c007b18:	b410      	push	{r4}
 c007b1a:	da08      	bge.n	c007b2e <__sfputc_r+0x1e>
 c007b1c:	6994      	ldr	r4, [r2, #24]
 c007b1e:	42a3      	cmp	r3, r4
 c007b20:	db01      	blt.n	c007b26 <__sfputc_r+0x16>
 c007b22:	290a      	cmp	r1, #10
 c007b24:	d103      	bne.n	c007b2e <__sfputc_r+0x1e>
 c007b26:	f85d 4b04 	ldr.w	r4, [sp], #4
 c007b2a:	f000 bb35 	b.w	c008198 <__swbuf_r>
 c007b2e:	6813      	ldr	r3, [r2, #0]
 c007b30:	1c58      	adds	r0, r3, #1
 c007b32:	6010      	str	r0, [r2, #0]
 c007b34:	4608      	mov	r0, r1
 c007b36:	7019      	strb	r1, [r3, #0]
 c007b38:	f85d 4b04 	ldr.w	r4, [sp], #4
 c007b3c:	4770      	bx	lr

0c007b3e <__sfputs_r>:
 c007b3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007b40:	4606      	mov	r6, r0
 c007b42:	460f      	mov	r7, r1
 c007b44:	4614      	mov	r4, r2
 c007b46:	18d5      	adds	r5, r2, r3
 c007b48:	42ac      	cmp	r4, r5
 c007b4a:	d101      	bne.n	c007b50 <__sfputs_r+0x12>
 c007b4c:	2000      	movs	r0, #0
 c007b4e:	e007      	b.n	c007b60 <__sfputs_r+0x22>
 c007b50:	463a      	mov	r2, r7
 c007b52:	f814 1b01 	ldrb.w	r1, [r4], #1
 c007b56:	4630      	mov	r0, r6
 c007b58:	f7ff ffda 	bl	c007b10 <__sfputc_r>
 c007b5c:	1c43      	adds	r3, r0, #1
 c007b5e:	d1f3      	bne.n	c007b48 <__sfputs_r+0xa>
 c007b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c007b64 <_vfiprintf_r>:
 c007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c007b68:	460d      	mov	r5, r1
 c007b6a:	b09d      	sub	sp, #116	; 0x74
 c007b6c:	4614      	mov	r4, r2
 c007b6e:	4698      	mov	r8, r3
 c007b70:	4606      	mov	r6, r0
 c007b72:	b118      	cbz	r0, c007b7c <_vfiprintf_r+0x18>
 c007b74:	6983      	ldr	r3, [r0, #24]
 c007b76:	b90b      	cbnz	r3, c007b7c <_vfiprintf_r+0x18>
 c007b78:	f7ff fd3a 	bl	c0075f0 <__sinit>
 c007b7c:	4b89      	ldr	r3, [pc, #548]	; (c007da4 <_vfiprintf_r+0x240>)
 c007b7e:	429d      	cmp	r5, r3
 c007b80:	d11b      	bne.n	c007bba <_vfiprintf_r+0x56>
 c007b82:	6875      	ldr	r5, [r6, #4]
 c007b84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c007b86:	07d9      	lsls	r1, r3, #31
 c007b88:	d405      	bmi.n	c007b96 <_vfiprintf_r+0x32>
 c007b8a:	89ab      	ldrh	r3, [r5, #12]
 c007b8c:	059a      	lsls	r2, r3, #22
 c007b8e:	d402      	bmi.n	c007b96 <_vfiprintf_r+0x32>
 c007b90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c007b92:	f7ff fdcb 	bl	c00772c <__retarget_lock_acquire_recursive>
 c007b96:	89ab      	ldrh	r3, [r5, #12]
 c007b98:	071b      	lsls	r3, r3, #28
 c007b9a:	d501      	bpl.n	c007ba0 <_vfiprintf_r+0x3c>
 c007b9c:	692b      	ldr	r3, [r5, #16]
 c007b9e:	b9eb      	cbnz	r3, c007bdc <_vfiprintf_r+0x78>
 c007ba0:	4629      	mov	r1, r5
 c007ba2:	4630      	mov	r0, r6
 c007ba4:	f000 fb5c 	bl	c008260 <__swsetup_r>
 c007ba8:	b1c0      	cbz	r0, c007bdc <_vfiprintf_r+0x78>
 c007baa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c007bac:	07dc      	lsls	r4, r3, #31
 c007bae:	d50e      	bpl.n	c007bce <_vfiprintf_r+0x6a>
 c007bb0:	f04f 30ff 	mov.w	r0, #4294967295
 c007bb4:	b01d      	add	sp, #116	; 0x74
 c007bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c007bba:	4b7b      	ldr	r3, [pc, #492]	; (c007da8 <_vfiprintf_r+0x244>)
 c007bbc:	429d      	cmp	r5, r3
 c007bbe:	d101      	bne.n	c007bc4 <_vfiprintf_r+0x60>
 c007bc0:	68b5      	ldr	r5, [r6, #8]
 c007bc2:	e7df      	b.n	c007b84 <_vfiprintf_r+0x20>
 c007bc4:	4b79      	ldr	r3, [pc, #484]	; (c007dac <_vfiprintf_r+0x248>)
 c007bc6:	429d      	cmp	r5, r3
 c007bc8:	bf08      	it	eq
 c007bca:	68f5      	ldreq	r5, [r6, #12]
 c007bcc:	e7da      	b.n	c007b84 <_vfiprintf_r+0x20>
 c007bce:	89ab      	ldrh	r3, [r5, #12]
 c007bd0:	0598      	lsls	r0, r3, #22
 c007bd2:	d4ed      	bmi.n	c007bb0 <_vfiprintf_r+0x4c>
 c007bd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c007bd6:	f7ff fdaa 	bl	c00772e <__retarget_lock_release_recursive>
 c007bda:	e7e9      	b.n	c007bb0 <_vfiprintf_r+0x4c>
 c007bdc:	2300      	movs	r3, #0
 c007bde:	f8cd 800c 	str.w	r8, [sp, #12]
 c007be2:	f04f 0901 	mov.w	r9, #1
 c007be6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c007db0 <_vfiprintf_r+0x24c>
 c007bea:	9309      	str	r3, [sp, #36]	; 0x24
 c007bec:	2320      	movs	r3, #32
 c007bee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c007bf2:	2330      	movs	r3, #48	; 0x30
 c007bf4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c007bf8:	4623      	mov	r3, r4
 c007bfa:	469a      	mov	sl, r3
 c007bfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 c007c00:	b10a      	cbz	r2, c007c06 <_vfiprintf_r+0xa2>
 c007c02:	2a25      	cmp	r2, #37	; 0x25
 c007c04:	d1f9      	bne.n	c007bfa <_vfiprintf_r+0x96>
 c007c06:	ebba 0b04 	subs.w	fp, sl, r4
 c007c0a:	d00b      	beq.n	c007c24 <_vfiprintf_r+0xc0>
 c007c0c:	465b      	mov	r3, fp
 c007c0e:	4622      	mov	r2, r4
 c007c10:	4629      	mov	r1, r5
 c007c12:	4630      	mov	r0, r6
 c007c14:	f7ff ff93 	bl	c007b3e <__sfputs_r>
 c007c18:	3001      	adds	r0, #1
 c007c1a:	f000 80aa 	beq.w	c007d72 <_vfiprintf_r+0x20e>
 c007c1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c007c20:	445a      	add	r2, fp
 c007c22:	9209      	str	r2, [sp, #36]	; 0x24
 c007c24:	f89a 3000 	ldrb.w	r3, [sl]
 c007c28:	2b00      	cmp	r3, #0
 c007c2a:	f000 80a2 	beq.w	c007d72 <_vfiprintf_r+0x20e>
 c007c2e:	2300      	movs	r3, #0
 c007c30:	f04f 32ff 	mov.w	r2, #4294967295
 c007c34:	f10a 0a01 	add.w	sl, sl, #1
 c007c38:	9304      	str	r3, [sp, #16]
 c007c3a:	9307      	str	r3, [sp, #28]
 c007c3c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c007c40:	931a      	str	r3, [sp, #104]	; 0x68
 c007c42:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c007c46:	4654      	mov	r4, sl
 c007c48:	2205      	movs	r2, #5
 c007c4a:	4859      	ldr	r0, [pc, #356]	; (c007db0 <_vfiprintf_r+0x24c>)
 c007c4c:	f814 1b01 	ldrb.w	r1, [r4], #1
 c007c50:	f000 fcbc 	bl	c0085cc <memchr>
 c007c54:	9a04      	ldr	r2, [sp, #16]
 c007c56:	b9d8      	cbnz	r0, c007c90 <_vfiprintf_r+0x12c>
 c007c58:	06d1      	lsls	r1, r2, #27
 c007c5a:	bf44      	itt	mi
 c007c5c:	2320      	movmi	r3, #32
 c007c5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c007c62:	0713      	lsls	r3, r2, #28
 c007c64:	bf44      	itt	mi
 c007c66:	232b      	movmi	r3, #43	; 0x2b
 c007c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c007c6c:	f89a 3000 	ldrb.w	r3, [sl]
 c007c70:	2b2a      	cmp	r3, #42	; 0x2a
 c007c72:	d015      	beq.n	c007ca0 <_vfiprintf_r+0x13c>
 c007c74:	9a07      	ldr	r2, [sp, #28]
 c007c76:	4654      	mov	r4, sl
 c007c78:	2000      	movs	r0, #0
 c007c7a:	f04f 0c0a 	mov.w	ip, #10
 c007c7e:	4621      	mov	r1, r4
 c007c80:	f811 3b01 	ldrb.w	r3, [r1], #1
 c007c84:	3b30      	subs	r3, #48	; 0x30
 c007c86:	2b09      	cmp	r3, #9
 c007c88:	d94e      	bls.n	c007d28 <_vfiprintf_r+0x1c4>
 c007c8a:	b1b0      	cbz	r0, c007cba <_vfiprintf_r+0x156>
 c007c8c:	9207      	str	r2, [sp, #28]
 c007c8e:	e014      	b.n	c007cba <_vfiprintf_r+0x156>
 c007c90:	eba0 0308 	sub.w	r3, r0, r8
 c007c94:	46a2      	mov	sl, r4
 c007c96:	fa09 f303 	lsl.w	r3, r9, r3
 c007c9a:	4313      	orrs	r3, r2
 c007c9c:	9304      	str	r3, [sp, #16]
 c007c9e:	e7d2      	b.n	c007c46 <_vfiprintf_r+0xe2>
 c007ca0:	9b03      	ldr	r3, [sp, #12]
 c007ca2:	1d19      	adds	r1, r3, #4
 c007ca4:	681b      	ldr	r3, [r3, #0]
 c007ca6:	2b00      	cmp	r3, #0
 c007ca8:	9103      	str	r1, [sp, #12]
 c007caa:	bfbb      	ittet	lt
 c007cac:	425b      	neglt	r3, r3
 c007cae:	f042 0202 	orrlt.w	r2, r2, #2
 c007cb2:	9307      	strge	r3, [sp, #28]
 c007cb4:	9307      	strlt	r3, [sp, #28]
 c007cb6:	bfb8      	it	lt
 c007cb8:	9204      	strlt	r2, [sp, #16]
 c007cba:	7823      	ldrb	r3, [r4, #0]
 c007cbc:	2b2e      	cmp	r3, #46	; 0x2e
 c007cbe:	d10c      	bne.n	c007cda <_vfiprintf_r+0x176>
 c007cc0:	7863      	ldrb	r3, [r4, #1]
 c007cc2:	2b2a      	cmp	r3, #42	; 0x2a
 c007cc4:	d135      	bne.n	c007d32 <_vfiprintf_r+0x1ce>
 c007cc6:	9b03      	ldr	r3, [sp, #12]
 c007cc8:	3402      	adds	r4, #2
 c007cca:	1d1a      	adds	r2, r3, #4
 c007ccc:	681b      	ldr	r3, [r3, #0]
 c007cce:	2b00      	cmp	r3, #0
 c007cd0:	9203      	str	r2, [sp, #12]
 c007cd2:	bfb8      	it	lt
 c007cd4:	f04f 33ff 	movlt.w	r3, #4294967295
 c007cd8:	9305      	str	r3, [sp, #20]
 c007cda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c007dc0 <_vfiprintf_r+0x25c>
 c007cde:	2203      	movs	r2, #3
 c007ce0:	7821      	ldrb	r1, [r4, #0]
 c007ce2:	4650      	mov	r0, sl
 c007ce4:	f000 fc72 	bl	c0085cc <memchr>
 c007ce8:	b140      	cbz	r0, c007cfc <_vfiprintf_r+0x198>
 c007cea:	2340      	movs	r3, #64	; 0x40
 c007cec:	eba0 000a 	sub.w	r0, r0, sl
 c007cf0:	3401      	adds	r4, #1
 c007cf2:	fa03 f000 	lsl.w	r0, r3, r0
 c007cf6:	9b04      	ldr	r3, [sp, #16]
 c007cf8:	4303      	orrs	r3, r0
 c007cfa:	9304      	str	r3, [sp, #16]
 c007cfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 c007d00:	2206      	movs	r2, #6
 c007d02:	482c      	ldr	r0, [pc, #176]	; (c007db4 <_vfiprintf_r+0x250>)
 c007d04:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c007d08:	f000 fc60 	bl	c0085cc <memchr>
 c007d0c:	2800      	cmp	r0, #0
 c007d0e:	d03f      	beq.n	c007d90 <_vfiprintf_r+0x22c>
 c007d10:	4b29      	ldr	r3, [pc, #164]	; (c007db8 <_vfiprintf_r+0x254>)
 c007d12:	bb1b      	cbnz	r3, c007d5c <_vfiprintf_r+0x1f8>
 c007d14:	9b03      	ldr	r3, [sp, #12]
 c007d16:	3307      	adds	r3, #7
 c007d18:	f023 0307 	bic.w	r3, r3, #7
 c007d1c:	3308      	adds	r3, #8
 c007d1e:	9303      	str	r3, [sp, #12]
 c007d20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007d22:	443b      	add	r3, r7
 c007d24:	9309      	str	r3, [sp, #36]	; 0x24
 c007d26:	e767      	b.n	c007bf8 <_vfiprintf_r+0x94>
 c007d28:	fb0c 3202 	mla	r2, ip, r2, r3
 c007d2c:	460c      	mov	r4, r1
 c007d2e:	2001      	movs	r0, #1
 c007d30:	e7a5      	b.n	c007c7e <_vfiprintf_r+0x11a>
 c007d32:	2300      	movs	r3, #0
 c007d34:	3401      	adds	r4, #1
 c007d36:	f04f 0c0a 	mov.w	ip, #10
 c007d3a:	4619      	mov	r1, r3
 c007d3c:	9305      	str	r3, [sp, #20]
 c007d3e:	4620      	mov	r0, r4
 c007d40:	f810 2b01 	ldrb.w	r2, [r0], #1
 c007d44:	3a30      	subs	r2, #48	; 0x30
 c007d46:	2a09      	cmp	r2, #9
 c007d48:	d903      	bls.n	c007d52 <_vfiprintf_r+0x1ee>
 c007d4a:	2b00      	cmp	r3, #0
 c007d4c:	d0c5      	beq.n	c007cda <_vfiprintf_r+0x176>
 c007d4e:	9105      	str	r1, [sp, #20]
 c007d50:	e7c3      	b.n	c007cda <_vfiprintf_r+0x176>
 c007d52:	fb0c 2101 	mla	r1, ip, r1, r2
 c007d56:	4604      	mov	r4, r0
 c007d58:	2301      	movs	r3, #1
 c007d5a:	e7f0      	b.n	c007d3e <_vfiprintf_r+0x1da>
 c007d5c:	ab03      	add	r3, sp, #12
 c007d5e:	462a      	mov	r2, r5
 c007d60:	a904      	add	r1, sp, #16
 c007d62:	4630      	mov	r0, r6
 c007d64:	9300      	str	r3, [sp, #0]
 c007d66:	4b15      	ldr	r3, [pc, #84]	; (c007dbc <_vfiprintf_r+0x258>)
 c007d68:	e000      	b.n	c007d6c <_vfiprintf_r+0x208>
 c007d6a:	bf00      	nop
 c007d6c:	4607      	mov	r7, r0
 c007d6e:	1c78      	adds	r0, r7, #1
 c007d70:	d1d6      	bne.n	c007d20 <_vfiprintf_r+0x1bc>
 c007d72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c007d74:	07d9      	lsls	r1, r3, #31
 c007d76:	d405      	bmi.n	c007d84 <_vfiprintf_r+0x220>
 c007d78:	89ab      	ldrh	r3, [r5, #12]
 c007d7a:	059a      	lsls	r2, r3, #22
 c007d7c:	d402      	bmi.n	c007d84 <_vfiprintf_r+0x220>
 c007d7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c007d80:	f7ff fcd5 	bl	c00772e <__retarget_lock_release_recursive>
 c007d84:	89ab      	ldrh	r3, [r5, #12]
 c007d86:	065b      	lsls	r3, r3, #25
 c007d88:	f53f af12 	bmi.w	c007bb0 <_vfiprintf_r+0x4c>
 c007d8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 c007d8e:	e711      	b.n	c007bb4 <_vfiprintf_r+0x50>
 c007d90:	ab03      	add	r3, sp, #12
 c007d92:	462a      	mov	r2, r5
 c007d94:	a904      	add	r1, sp, #16
 c007d96:	4630      	mov	r0, r6
 c007d98:	9300      	str	r3, [sp, #0]
 c007d9a:	4b08      	ldr	r3, [pc, #32]	; (c007dbc <_vfiprintf_r+0x258>)
 c007d9c:	f000 f882 	bl	c007ea4 <_printf_i>
 c007da0:	e7e4      	b.n	c007d6c <_vfiprintf_r+0x208>
 c007da2:	bf00      	nop
 c007da4:	0c008d24 	.word	0x0c008d24
 c007da8:	0c008d44 	.word	0x0c008d44
 c007dac:	0c008d04 	.word	0x0c008d04
 c007db0:	0c008d64 	.word	0x0c008d64
 c007db4:	0c008d6e 	.word	0x0c008d6e
 c007db8:	00000000 	.word	0x00000000
 c007dbc:	0c007b3f 	.word	0x0c007b3f
 c007dc0:	0c008d6a 	.word	0x0c008d6a

0c007dc4 <_printf_common>:
 c007dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c007dc8:	4616      	mov	r6, r2
 c007dca:	4699      	mov	r9, r3
 c007dcc:	688a      	ldr	r2, [r1, #8]
 c007dce:	4607      	mov	r7, r0
 c007dd0:	690b      	ldr	r3, [r1, #16]
 c007dd2:	460c      	mov	r4, r1
 c007dd4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c007dd8:	4293      	cmp	r3, r2
 c007dda:	bfb8      	it	lt
 c007ddc:	4613      	movlt	r3, r2
 c007dde:	6033      	str	r3, [r6, #0]
 c007de0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c007de4:	b10a      	cbz	r2, c007dea <_printf_common+0x26>
 c007de6:	3301      	adds	r3, #1
 c007de8:	6033      	str	r3, [r6, #0]
 c007dea:	6823      	ldr	r3, [r4, #0]
 c007dec:	0699      	lsls	r1, r3, #26
 c007dee:	bf42      	ittt	mi
 c007df0:	6833      	ldrmi	r3, [r6, #0]
 c007df2:	3302      	addmi	r3, #2
 c007df4:	6033      	strmi	r3, [r6, #0]
 c007df6:	6825      	ldr	r5, [r4, #0]
 c007df8:	f015 0506 	ands.w	r5, r5, #6
 c007dfc:	d106      	bne.n	c007e0c <_printf_common+0x48>
 c007dfe:	f104 0a19 	add.w	sl, r4, #25
 c007e02:	68e3      	ldr	r3, [r4, #12]
 c007e04:	6832      	ldr	r2, [r6, #0]
 c007e06:	1a9b      	subs	r3, r3, r2
 c007e08:	42ab      	cmp	r3, r5
 c007e0a:	dc29      	bgt.n	c007e60 <_printf_common+0x9c>
 c007e0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c007e10:	1e13      	subs	r3, r2, #0
 c007e12:	6822      	ldr	r2, [r4, #0]
 c007e14:	bf18      	it	ne
 c007e16:	2301      	movne	r3, #1
 c007e18:	0692      	lsls	r2, r2, #26
 c007e1a:	d42e      	bmi.n	c007e7a <_printf_common+0xb6>
 c007e1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c007e20:	4649      	mov	r1, r9
 c007e22:	4638      	mov	r0, r7
 c007e24:	47c0      	blx	r8
 c007e26:	3001      	adds	r0, #1
 c007e28:	d021      	beq.n	c007e6e <_printf_common+0xaa>
 c007e2a:	6823      	ldr	r3, [r4, #0]
 c007e2c:	341a      	adds	r4, #26
 c007e2e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c007e32:	f003 0306 	and.w	r3, r3, #6
 c007e36:	6832      	ldr	r2, [r6, #0]
 c007e38:	2600      	movs	r6, #0
 c007e3a:	2b04      	cmp	r3, #4
 c007e3c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c007e40:	bf08      	it	eq
 c007e42:	1aad      	subeq	r5, r5, r2
 c007e44:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c007e48:	bf14      	ite	ne
 c007e4a:	2500      	movne	r5, #0
 c007e4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c007e50:	4293      	cmp	r3, r2
 c007e52:	bfc4      	itt	gt
 c007e54:	1a9b      	subgt	r3, r3, r2
 c007e56:	18ed      	addgt	r5, r5, r3
 c007e58:	42b5      	cmp	r5, r6
 c007e5a:	d11a      	bne.n	c007e92 <_printf_common+0xce>
 c007e5c:	2000      	movs	r0, #0
 c007e5e:	e008      	b.n	c007e72 <_printf_common+0xae>
 c007e60:	2301      	movs	r3, #1
 c007e62:	4652      	mov	r2, sl
 c007e64:	4649      	mov	r1, r9
 c007e66:	4638      	mov	r0, r7
 c007e68:	47c0      	blx	r8
 c007e6a:	3001      	adds	r0, #1
 c007e6c:	d103      	bne.n	c007e76 <_printf_common+0xb2>
 c007e6e:	f04f 30ff 	mov.w	r0, #4294967295
 c007e72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c007e76:	3501      	adds	r5, #1
 c007e78:	e7c3      	b.n	c007e02 <_printf_common+0x3e>
 c007e7a:	18e1      	adds	r1, r4, r3
 c007e7c:	1c5a      	adds	r2, r3, #1
 c007e7e:	2030      	movs	r0, #48	; 0x30
 c007e80:	3302      	adds	r3, #2
 c007e82:	4422      	add	r2, r4
 c007e84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c007e88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c007e8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c007e90:	e7c4      	b.n	c007e1c <_printf_common+0x58>
 c007e92:	2301      	movs	r3, #1
 c007e94:	4622      	mov	r2, r4
 c007e96:	4649      	mov	r1, r9
 c007e98:	4638      	mov	r0, r7
 c007e9a:	47c0      	blx	r8
 c007e9c:	3001      	adds	r0, #1
 c007e9e:	d0e6      	beq.n	c007e6e <_printf_common+0xaa>
 c007ea0:	3601      	adds	r6, #1
 c007ea2:	e7d9      	b.n	c007e58 <_printf_common+0x94>

0c007ea4 <_printf_i>:
 c007ea4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c007ea8:	7e0f      	ldrb	r7, [r1, #24]
 c007eaa:	4691      	mov	r9, r2
 c007eac:	4680      	mov	r8, r0
 c007eae:	460c      	mov	r4, r1
 c007eb0:	2f78      	cmp	r7, #120	; 0x78
 c007eb2:	469a      	mov	sl, r3
 c007eb4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c007eb6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c007eba:	d807      	bhi.n	c007ecc <_printf_i+0x28>
 c007ebc:	2f62      	cmp	r7, #98	; 0x62
 c007ebe:	d80a      	bhi.n	c007ed6 <_printf_i+0x32>
 c007ec0:	2f00      	cmp	r7, #0
 c007ec2:	f000 80d8 	beq.w	c008076 <_printf_i+0x1d2>
 c007ec6:	2f58      	cmp	r7, #88	; 0x58
 c007ec8:	f000 80a3 	beq.w	c008012 <_printf_i+0x16e>
 c007ecc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c007ed0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c007ed4:	e03a      	b.n	c007f4c <_printf_i+0xa8>
 c007ed6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c007eda:	2b15      	cmp	r3, #21
 c007edc:	d8f6      	bhi.n	c007ecc <_printf_i+0x28>
 c007ede:	a101      	add	r1, pc, #4	; (adr r1, c007ee4 <_printf_i+0x40>)
 c007ee0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c007ee4:	0c007f3d 	.word	0x0c007f3d
 c007ee8:	0c007f51 	.word	0x0c007f51
 c007eec:	0c007ecd 	.word	0x0c007ecd
 c007ef0:	0c007ecd 	.word	0x0c007ecd
 c007ef4:	0c007ecd 	.word	0x0c007ecd
 c007ef8:	0c007ecd 	.word	0x0c007ecd
 c007efc:	0c007f51 	.word	0x0c007f51
 c007f00:	0c007ecd 	.word	0x0c007ecd
 c007f04:	0c007ecd 	.word	0x0c007ecd
 c007f08:	0c007ecd 	.word	0x0c007ecd
 c007f0c:	0c007ecd 	.word	0x0c007ecd
 c007f10:	0c00805d 	.word	0x0c00805d
 c007f14:	0c007f81 	.word	0x0c007f81
 c007f18:	0c00803f 	.word	0x0c00803f
 c007f1c:	0c007ecd 	.word	0x0c007ecd
 c007f20:	0c007ecd 	.word	0x0c007ecd
 c007f24:	0c00807f 	.word	0x0c00807f
 c007f28:	0c007ecd 	.word	0x0c007ecd
 c007f2c:	0c007f81 	.word	0x0c007f81
 c007f30:	0c007ecd 	.word	0x0c007ecd
 c007f34:	0c007ecd 	.word	0x0c007ecd
 c007f38:	0c008047 	.word	0x0c008047
 c007f3c:	682b      	ldr	r3, [r5, #0]
 c007f3e:	1d1a      	adds	r2, r3, #4
 c007f40:	681b      	ldr	r3, [r3, #0]
 c007f42:	602a      	str	r2, [r5, #0]
 c007f44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c007f48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c007f4c:	2301      	movs	r3, #1
 c007f4e:	e0a3      	b.n	c008098 <_printf_i+0x1f4>
 c007f50:	6820      	ldr	r0, [r4, #0]
 c007f52:	6829      	ldr	r1, [r5, #0]
 c007f54:	0606      	lsls	r6, r0, #24
 c007f56:	f101 0304 	add.w	r3, r1, #4
 c007f5a:	d50a      	bpl.n	c007f72 <_printf_i+0xce>
 c007f5c:	680e      	ldr	r6, [r1, #0]
 c007f5e:	602b      	str	r3, [r5, #0]
 c007f60:	2e00      	cmp	r6, #0
 c007f62:	da03      	bge.n	c007f6c <_printf_i+0xc8>
 c007f64:	232d      	movs	r3, #45	; 0x2d
 c007f66:	4276      	negs	r6, r6
 c007f68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c007f6c:	485e      	ldr	r0, [pc, #376]	; (c0080e8 <_printf_i+0x244>)
 c007f6e:	230a      	movs	r3, #10
 c007f70:	e019      	b.n	c007fa6 <_printf_i+0x102>
 c007f72:	680e      	ldr	r6, [r1, #0]
 c007f74:	f010 0f40 	tst.w	r0, #64	; 0x40
 c007f78:	602b      	str	r3, [r5, #0]
 c007f7a:	bf18      	it	ne
 c007f7c:	b236      	sxthne	r6, r6
 c007f7e:	e7ef      	b.n	c007f60 <_printf_i+0xbc>
 c007f80:	682b      	ldr	r3, [r5, #0]
 c007f82:	6820      	ldr	r0, [r4, #0]
 c007f84:	1d19      	adds	r1, r3, #4
 c007f86:	6029      	str	r1, [r5, #0]
 c007f88:	0601      	lsls	r1, r0, #24
 c007f8a:	d501      	bpl.n	c007f90 <_printf_i+0xec>
 c007f8c:	681e      	ldr	r6, [r3, #0]
 c007f8e:	e002      	b.n	c007f96 <_printf_i+0xf2>
 c007f90:	0646      	lsls	r6, r0, #25
 c007f92:	d5fb      	bpl.n	c007f8c <_printf_i+0xe8>
 c007f94:	881e      	ldrh	r6, [r3, #0]
 c007f96:	2f6f      	cmp	r7, #111	; 0x6f
 c007f98:	4853      	ldr	r0, [pc, #332]	; (c0080e8 <_printf_i+0x244>)
 c007f9a:	bf0c      	ite	eq
 c007f9c:	2308      	moveq	r3, #8
 c007f9e:	230a      	movne	r3, #10
 c007fa0:	2100      	movs	r1, #0
 c007fa2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c007fa6:	6865      	ldr	r5, [r4, #4]
 c007fa8:	2d00      	cmp	r5, #0
 c007faa:	60a5      	str	r5, [r4, #8]
 c007fac:	bfa2      	ittt	ge
 c007fae:	6821      	ldrge	r1, [r4, #0]
 c007fb0:	f021 0104 	bicge.w	r1, r1, #4
 c007fb4:	6021      	strge	r1, [r4, #0]
 c007fb6:	b90e      	cbnz	r6, c007fbc <_printf_i+0x118>
 c007fb8:	2d00      	cmp	r5, #0
 c007fba:	d04d      	beq.n	c008058 <_printf_i+0x1b4>
 c007fbc:	4615      	mov	r5, r2
 c007fbe:	fbb6 f1f3 	udiv	r1, r6, r3
 c007fc2:	fb03 6711 	mls	r7, r3, r1, r6
 c007fc6:	5dc7      	ldrb	r7, [r0, r7]
 c007fc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c007fcc:	4637      	mov	r7, r6
 c007fce:	460e      	mov	r6, r1
 c007fd0:	42bb      	cmp	r3, r7
 c007fd2:	d9f4      	bls.n	c007fbe <_printf_i+0x11a>
 c007fd4:	2b08      	cmp	r3, #8
 c007fd6:	d10b      	bne.n	c007ff0 <_printf_i+0x14c>
 c007fd8:	6823      	ldr	r3, [r4, #0]
 c007fda:	07de      	lsls	r6, r3, #31
 c007fdc:	d508      	bpl.n	c007ff0 <_printf_i+0x14c>
 c007fde:	6923      	ldr	r3, [r4, #16]
 c007fe0:	6861      	ldr	r1, [r4, #4]
 c007fe2:	4299      	cmp	r1, r3
 c007fe4:	bfde      	ittt	le
 c007fe6:	2330      	movle	r3, #48	; 0x30
 c007fe8:	f805 3c01 	strble.w	r3, [r5, #-1]
 c007fec:	f105 35ff 	addle.w	r5, r5, #4294967295
 c007ff0:	1b52      	subs	r2, r2, r5
 c007ff2:	6122      	str	r2, [r4, #16]
 c007ff4:	464b      	mov	r3, r9
 c007ff6:	aa03      	add	r2, sp, #12
 c007ff8:	4621      	mov	r1, r4
 c007ffa:	4640      	mov	r0, r8
 c007ffc:	f8cd a000 	str.w	sl, [sp]
 c008000:	f7ff fee0 	bl	c007dc4 <_printf_common>
 c008004:	3001      	adds	r0, #1
 c008006:	d14c      	bne.n	c0080a2 <_printf_i+0x1fe>
 c008008:	f04f 30ff 	mov.w	r0, #4294967295
 c00800c:	b004      	add	sp, #16
 c00800e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c008012:	4835      	ldr	r0, [pc, #212]	; (c0080e8 <_printf_i+0x244>)
 c008014:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c008018:	6829      	ldr	r1, [r5, #0]
 c00801a:	6823      	ldr	r3, [r4, #0]
 c00801c:	f851 6b04 	ldr.w	r6, [r1], #4
 c008020:	6029      	str	r1, [r5, #0]
 c008022:	061d      	lsls	r5, r3, #24
 c008024:	d514      	bpl.n	c008050 <_printf_i+0x1ac>
 c008026:	07df      	lsls	r7, r3, #31
 c008028:	bf44      	itt	mi
 c00802a:	f043 0320 	orrmi.w	r3, r3, #32
 c00802e:	6023      	strmi	r3, [r4, #0]
 c008030:	b91e      	cbnz	r6, c00803a <_printf_i+0x196>
 c008032:	6823      	ldr	r3, [r4, #0]
 c008034:	f023 0320 	bic.w	r3, r3, #32
 c008038:	6023      	str	r3, [r4, #0]
 c00803a:	2310      	movs	r3, #16
 c00803c:	e7b0      	b.n	c007fa0 <_printf_i+0xfc>
 c00803e:	6823      	ldr	r3, [r4, #0]
 c008040:	f043 0320 	orr.w	r3, r3, #32
 c008044:	6023      	str	r3, [r4, #0]
 c008046:	2378      	movs	r3, #120	; 0x78
 c008048:	4828      	ldr	r0, [pc, #160]	; (c0080ec <_printf_i+0x248>)
 c00804a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c00804e:	e7e3      	b.n	c008018 <_printf_i+0x174>
 c008050:	0659      	lsls	r1, r3, #25
 c008052:	bf48      	it	mi
 c008054:	b2b6      	uxthmi	r6, r6
 c008056:	e7e6      	b.n	c008026 <_printf_i+0x182>
 c008058:	4615      	mov	r5, r2
 c00805a:	e7bb      	b.n	c007fd4 <_printf_i+0x130>
 c00805c:	682b      	ldr	r3, [r5, #0]
 c00805e:	6826      	ldr	r6, [r4, #0]
 c008060:	1d18      	adds	r0, r3, #4
 c008062:	6961      	ldr	r1, [r4, #20]
 c008064:	6028      	str	r0, [r5, #0]
 c008066:	0635      	lsls	r5, r6, #24
 c008068:	681b      	ldr	r3, [r3, #0]
 c00806a:	d501      	bpl.n	c008070 <_printf_i+0x1cc>
 c00806c:	6019      	str	r1, [r3, #0]
 c00806e:	e002      	b.n	c008076 <_printf_i+0x1d2>
 c008070:	0670      	lsls	r0, r6, #25
 c008072:	d5fb      	bpl.n	c00806c <_printf_i+0x1c8>
 c008074:	8019      	strh	r1, [r3, #0]
 c008076:	2300      	movs	r3, #0
 c008078:	4615      	mov	r5, r2
 c00807a:	6123      	str	r3, [r4, #16]
 c00807c:	e7ba      	b.n	c007ff4 <_printf_i+0x150>
 c00807e:	682b      	ldr	r3, [r5, #0]
 c008080:	2100      	movs	r1, #0
 c008082:	1d1a      	adds	r2, r3, #4
 c008084:	602a      	str	r2, [r5, #0]
 c008086:	681d      	ldr	r5, [r3, #0]
 c008088:	6862      	ldr	r2, [r4, #4]
 c00808a:	4628      	mov	r0, r5
 c00808c:	f000 fa9e 	bl	c0085cc <memchr>
 c008090:	b108      	cbz	r0, c008096 <_printf_i+0x1f2>
 c008092:	1b40      	subs	r0, r0, r5
 c008094:	6060      	str	r0, [r4, #4]
 c008096:	6863      	ldr	r3, [r4, #4]
 c008098:	6123      	str	r3, [r4, #16]
 c00809a:	2300      	movs	r3, #0
 c00809c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c0080a0:	e7a8      	b.n	c007ff4 <_printf_i+0x150>
 c0080a2:	6923      	ldr	r3, [r4, #16]
 c0080a4:	462a      	mov	r2, r5
 c0080a6:	4649      	mov	r1, r9
 c0080a8:	4640      	mov	r0, r8
 c0080aa:	47d0      	blx	sl
 c0080ac:	3001      	adds	r0, #1
 c0080ae:	d0ab      	beq.n	c008008 <_printf_i+0x164>
 c0080b0:	6823      	ldr	r3, [r4, #0]
 c0080b2:	079b      	lsls	r3, r3, #30
 c0080b4:	d413      	bmi.n	c0080de <_printf_i+0x23a>
 c0080b6:	68e0      	ldr	r0, [r4, #12]
 c0080b8:	9b03      	ldr	r3, [sp, #12]
 c0080ba:	4298      	cmp	r0, r3
 c0080bc:	bfb8      	it	lt
 c0080be:	4618      	movlt	r0, r3
 c0080c0:	e7a4      	b.n	c00800c <_printf_i+0x168>
 c0080c2:	2301      	movs	r3, #1
 c0080c4:	4632      	mov	r2, r6
 c0080c6:	4649      	mov	r1, r9
 c0080c8:	4640      	mov	r0, r8
 c0080ca:	47d0      	blx	sl
 c0080cc:	3001      	adds	r0, #1
 c0080ce:	d09b      	beq.n	c008008 <_printf_i+0x164>
 c0080d0:	3501      	adds	r5, #1
 c0080d2:	68e3      	ldr	r3, [r4, #12]
 c0080d4:	9903      	ldr	r1, [sp, #12]
 c0080d6:	1a5b      	subs	r3, r3, r1
 c0080d8:	42ab      	cmp	r3, r5
 c0080da:	dcf2      	bgt.n	c0080c2 <_printf_i+0x21e>
 c0080dc:	e7eb      	b.n	c0080b6 <_printf_i+0x212>
 c0080de:	2500      	movs	r5, #0
 c0080e0:	f104 0619 	add.w	r6, r4, #25
 c0080e4:	e7f5      	b.n	c0080d2 <_printf_i+0x22e>
 c0080e6:	bf00      	nop
 c0080e8:	0c008d75 	.word	0x0c008d75
 c0080ec:	0c008d86 	.word	0x0c008d86

0c0080f0 <_sbrk_r>:
 c0080f0:	b538      	push	{r3, r4, r5, lr}
 c0080f2:	2300      	movs	r3, #0
 c0080f4:	4d05      	ldr	r5, [pc, #20]	; (c00810c <_sbrk_r+0x1c>)
 c0080f6:	4604      	mov	r4, r0
 c0080f8:	4608      	mov	r0, r1
 c0080fa:	602b      	str	r3, [r5, #0]
 c0080fc:	f7f9 ffd0 	bl	c0020a0 <_sbrk>
 c008100:	1c43      	adds	r3, r0, #1
 c008102:	d102      	bne.n	c00810a <_sbrk_r+0x1a>
 c008104:	682b      	ldr	r3, [r5, #0]
 c008106:	b103      	cbz	r3, c00810a <_sbrk_r+0x1a>
 c008108:	6023      	str	r3, [r4, #0]
 c00810a:	bd38      	pop	{r3, r4, r5, pc}
 c00810c:	30001ca4 	.word	0x30001ca4

0c008110 <__sread>:
 c008110:	b510      	push	{r4, lr}
 c008112:	460c      	mov	r4, r1
 c008114:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008118:	f000 fb16 	bl	c008748 <_read_r>
 c00811c:	2800      	cmp	r0, #0
 c00811e:	bfab      	itete	ge
 c008120:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c008122:	89a3      	ldrhlt	r3, [r4, #12]
 c008124:	181b      	addge	r3, r3, r0
 c008126:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c00812a:	bfac      	ite	ge
 c00812c:	6563      	strge	r3, [r4, #84]	; 0x54
 c00812e:	81a3      	strhlt	r3, [r4, #12]
 c008130:	bd10      	pop	{r4, pc}

0c008132 <__swrite>:
 c008132:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c008136:	461f      	mov	r7, r3
 c008138:	898b      	ldrh	r3, [r1, #12]
 c00813a:	4605      	mov	r5, r0
 c00813c:	460c      	mov	r4, r1
 c00813e:	05db      	lsls	r3, r3, #23
 c008140:	4616      	mov	r6, r2
 c008142:	d505      	bpl.n	c008150 <__swrite+0x1e>
 c008144:	2302      	movs	r3, #2
 c008146:	2200      	movs	r2, #0
 c008148:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00814c:	f000 f9c6 	bl	c0084dc <_lseek_r>
 c008150:	89a3      	ldrh	r3, [r4, #12]
 c008152:	4632      	mov	r2, r6
 c008154:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c008158:	4628      	mov	r0, r5
 c00815a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c00815e:	81a3      	strh	r3, [r4, #12]
 c008160:	463b      	mov	r3, r7
 c008162:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c008166:	f000 b869 	b.w	c00823c <_write_r>

0c00816a <__sseek>:
 c00816a:	b510      	push	{r4, lr}
 c00816c:	460c      	mov	r4, r1
 c00816e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008172:	f000 f9b3 	bl	c0084dc <_lseek_r>
 c008176:	1c43      	adds	r3, r0, #1
 c008178:	89a3      	ldrh	r3, [r4, #12]
 c00817a:	bf15      	itete	ne
 c00817c:	6560      	strne	r0, [r4, #84]	; 0x54
 c00817e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c008182:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c008186:	81a3      	strheq	r3, [r4, #12]
 c008188:	bf18      	it	ne
 c00818a:	81a3      	strhne	r3, [r4, #12]
 c00818c:	bd10      	pop	{r4, pc}

0c00818e <__sclose>:
 c00818e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008192:	f000 b8d3 	b.w	c00833c <_close_r>
	...

0c008198 <__swbuf_r>:
 c008198:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00819a:	460e      	mov	r6, r1
 c00819c:	4614      	mov	r4, r2
 c00819e:	4605      	mov	r5, r0
 c0081a0:	b118      	cbz	r0, c0081aa <__swbuf_r+0x12>
 c0081a2:	6983      	ldr	r3, [r0, #24]
 c0081a4:	b90b      	cbnz	r3, c0081aa <__swbuf_r+0x12>
 c0081a6:	f7ff fa23 	bl	c0075f0 <__sinit>
 c0081aa:	4b21      	ldr	r3, [pc, #132]	; (c008230 <__swbuf_r+0x98>)
 c0081ac:	429c      	cmp	r4, r3
 c0081ae:	d12b      	bne.n	c008208 <__swbuf_r+0x70>
 c0081b0:	686c      	ldr	r4, [r5, #4]
 c0081b2:	69a3      	ldr	r3, [r4, #24]
 c0081b4:	60a3      	str	r3, [r4, #8]
 c0081b6:	89a3      	ldrh	r3, [r4, #12]
 c0081b8:	071a      	lsls	r2, r3, #28
 c0081ba:	d52f      	bpl.n	c00821c <__swbuf_r+0x84>
 c0081bc:	6923      	ldr	r3, [r4, #16]
 c0081be:	b36b      	cbz	r3, c00821c <__swbuf_r+0x84>
 c0081c0:	6923      	ldr	r3, [r4, #16]
 c0081c2:	b2f6      	uxtb	r6, r6
 c0081c4:	6820      	ldr	r0, [r4, #0]
 c0081c6:	4637      	mov	r7, r6
 c0081c8:	1ac0      	subs	r0, r0, r3
 c0081ca:	6963      	ldr	r3, [r4, #20]
 c0081cc:	4283      	cmp	r3, r0
 c0081ce:	dc04      	bgt.n	c0081da <__swbuf_r+0x42>
 c0081d0:	4621      	mov	r1, r4
 c0081d2:	4628      	mov	r0, r5
 c0081d4:	f000 f946 	bl	c008464 <_fflush_r>
 c0081d8:	bb30      	cbnz	r0, c008228 <__swbuf_r+0x90>
 c0081da:	68a3      	ldr	r3, [r4, #8]
 c0081dc:	3001      	adds	r0, #1
 c0081de:	3b01      	subs	r3, #1
 c0081e0:	60a3      	str	r3, [r4, #8]
 c0081e2:	6823      	ldr	r3, [r4, #0]
 c0081e4:	1c5a      	adds	r2, r3, #1
 c0081e6:	6022      	str	r2, [r4, #0]
 c0081e8:	701e      	strb	r6, [r3, #0]
 c0081ea:	6963      	ldr	r3, [r4, #20]
 c0081ec:	4283      	cmp	r3, r0
 c0081ee:	d004      	beq.n	c0081fa <__swbuf_r+0x62>
 c0081f0:	89a3      	ldrh	r3, [r4, #12]
 c0081f2:	07db      	lsls	r3, r3, #31
 c0081f4:	d506      	bpl.n	c008204 <__swbuf_r+0x6c>
 c0081f6:	2e0a      	cmp	r6, #10
 c0081f8:	d104      	bne.n	c008204 <__swbuf_r+0x6c>
 c0081fa:	4621      	mov	r1, r4
 c0081fc:	4628      	mov	r0, r5
 c0081fe:	f000 f931 	bl	c008464 <_fflush_r>
 c008202:	b988      	cbnz	r0, c008228 <__swbuf_r+0x90>
 c008204:	4638      	mov	r0, r7
 c008206:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c008208:	4b0a      	ldr	r3, [pc, #40]	; (c008234 <__swbuf_r+0x9c>)
 c00820a:	429c      	cmp	r4, r3
 c00820c:	d101      	bne.n	c008212 <__swbuf_r+0x7a>
 c00820e:	68ac      	ldr	r4, [r5, #8]
 c008210:	e7cf      	b.n	c0081b2 <__swbuf_r+0x1a>
 c008212:	4b09      	ldr	r3, [pc, #36]	; (c008238 <__swbuf_r+0xa0>)
 c008214:	429c      	cmp	r4, r3
 c008216:	bf08      	it	eq
 c008218:	68ec      	ldreq	r4, [r5, #12]
 c00821a:	e7ca      	b.n	c0081b2 <__swbuf_r+0x1a>
 c00821c:	4621      	mov	r1, r4
 c00821e:	4628      	mov	r0, r5
 c008220:	f000 f81e 	bl	c008260 <__swsetup_r>
 c008224:	2800      	cmp	r0, #0
 c008226:	d0cb      	beq.n	c0081c0 <__swbuf_r+0x28>
 c008228:	f04f 37ff 	mov.w	r7, #4294967295
 c00822c:	e7ea      	b.n	c008204 <__swbuf_r+0x6c>
 c00822e:	bf00      	nop
 c008230:	0c008d24 	.word	0x0c008d24
 c008234:	0c008d44 	.word	0x0c008d44
 c008238:	0c008d04 	.word	0x0c008d04

0c00823c <_write_r>:
 c00823c:	b538      	push	{r3, r4, r5, lr}
 c00823e:	4604      	mov	r4, r0
 c008240:	4d06      	ldr	r5, [pc, #24]	; (c00825c <_write_r+0x20>)
 c008242:	4608      	mov	r0, r1
 c008244:	4611      	mov	r1, r2
 c008246:	2200      	movs	r2, #0
 c008248:	602a      	str	r2, [r5, #0]
 c00824a:	461a      	mov	r2, r3
 c00824c:	f7f9 fed7 	bl	c001ffe <_write>
 c008250:	1c43      	adds	r3, r0, #1
 c008252:	d102      	bne.n	c00825a <_write_r+0x1e>
 c008254:	682b      	ldr	r3, [r5, #0]
 c008256:	b103      	cbz	r3, c00825a <_write_r+0x1e>
 c008258:	6023      	str	r3, [r4, #0]
 c00825a:	bd38      	pop	{r3, r4, r5, pc}
 c00825c:	30001ca4 	.word	0x30001ca4

0c008260 <__swsetup_r>:
 c008260:	4b32      	ldr	r3, [pc, #200]	; (c00832c <__swsetup_r+0xcc>)
 c008262:	b570      	push	{r4, r5, r6, lr}
 c008264:	681d      	ldr	r5, [r3, #0]
 c008266:	4606      	mov	r6, r0
 c008268:	460c      	mov	r4, r1
 c00826a:	b125      	cbz	r5, c008276 <__swsetup_r+0x16>
 c00826c:	69ab      	ldr	r3, [r5, #24]
 c00826e:	b913      	cbnz	r3, c008276 <__swsetup_r+0x16>
 c008270:	4628      	mov	r0, r5
 c008272:	f7ff f9bd 	bl	c0075f0 <__sinit>
 c008276:	4b2e      	ldr	r3, [pc, #184]	; (c008330 <__swsetup_r+0xd0>)
 c008278:	429c      	cmp	r4, r3
 c00827a:	d10f      	bne.n	c00829c <__swsetup_r+0x3c>
 c00827c:	686c      	ldr	r4, [r5, #4]
 c00827e:	89a3      	ldrh	r3, [r4, #12]
 c008280:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c008284:	0719      	lsls	r1, r3, #28
 c008286:	d42c      	bmi.n	c0082e2 <__swsetup_r+0x82>
 c008288:	06dd      	lsls	r5, r3, #27
 c00828a:	d411      	bmi.n	c0082b0 <__swsetup_r+0x50>
 c00828c:	2309      	movs	r3, #9
 c00828e:	6033      	str	r3, [r6, #0]
 c008290:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c008294:	f04f 30ff 	mov.w	r0, #4294967295
 c008298:	81a3      	strh	r3, [r4, #12]
 c00829a:	e03e      	b.n	c00831a <__swsetup_r+0xba>
 c00829c:	4b25      	ldr	r3, [pc, #148]	; (c008334 <__swsetup_r+0xd4>)
 c00829e:	429c      	cmp	r4, r3
 c0082a0:	d101      	bne.n	c0082a6 <__swsetup_r+0x46>
 c0082a2:	68ac      	ldr	r4, [r5, #8]
 c0082a4:	e7eb      	b.n	c00827e <__swsetup_r+0x1e>
 c0082a6:	4b24      	ldr	r3, [pc, #144]	; (c008338 <__swsetup_r+0xd8>)
 c0082a8:	429c      	cmp	r4, r3
 c0082aa:	bf08      	it	eq
 c0082ac:	68ec      	ldreq	r4, [r5, #12]
 c0082ae:	e7e6      	b.n	c00827e <__swsetup_r+0x1e>
 c0082b0:	0758      	lsls	r0, r3, #29
 c0082b2:	d512      	bpl.n	c0082da <__swsetup_r+0x7a>
 c0082b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c0082b6:	b141      	cbz	r1, c0082ca <__swsetup_r+0x6a>
 c0082b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c0082bc:	4299      	cmp	r1, r3
 c0082be:	d002      	beq.n	c0082c6 <__swsetup_r+0x66>
 c0082c0:	4630      	mov	r0, r6
 c0082c2:	f000 f9c5 	bl	c008650 <_free_r>
 c0082c6:	2300      	movs	r3, #0
 c0082c8:	6363      	str	r3, [r4, #52]	; 0x34
 c0082ca:	89a3      	ldrh	r3, [r4, #12]
 c0082cc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c0082d0:	81a3      	strh	r3, [r4, #12]
 c0082d2:	2300      	movs	r3, #0
 c0082d4:	6063      	str	r3, [r4, #4]
 c0082d6:	6923      	ldr	r3, [r4, #16]
 c0082d8:	6023      	str	r3, [r4, #0]
 c0082da:	89a3      	ldrh	r3, [r4, #12]
 c0082dc:	f043 0308 	orr.w	r3, r3, #8
 c0082e0:	81a3      	strh	r3, [r4, #12]
 c0082e2:	6923      	ldr	r3, [r4, #16]
 c0082e4:	b94b      	cbnz	r3, c0082fa <__swsetup_r+0x9a>
 c0082e6:	89a3      	ldrh	r3, [r4, #12]
 c0082e8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c0082ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0082f0:	d003      	beq.n	c0082fa <__swsetup_r+0x9a>
 c0082f2:	4621      	mov	r1, r4
 c0082f4:	4630      	mov	r0, r6
 c0082f6:	f000 f929 	bl	c00854c <__smakebuf_r>
 c0082fa:	89a0      	ldrh	r0, [r4, #12]
 c0082fc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c008300:	f010 0301 	ands.w	r3, r0, #1
 c008304:	d00a      	beq.n	c00831c <__swsetup_r+0xbc>
 c008306:	2300      	movs	r3, #0
 c008308:	60a3      	str	r3, [r4, #8]
 c00830a:	6963      	ldr	r3, [r4, #20]
 c00830c:	425b      	negs	r3, r3
 c00830e:	61a3      	str	r3, [r4, #24]
 c008310:	6923      	ldr	r3, [r4, #16]
 c008312:	b943      	cbnz	r3, c008326 <__swsetup_r+0xc6>
 c008314:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c008318:	d1ba      	bne.n	c008290 <__swsetup_r+0x30>
 c00831a:	bd70      	pop	{r4, r5, r6, pc}
 c00831c:	0781      	lsls	r1, r0, #30
 c00831e:	bf58      	it	pl
 c008320:	6963      	ldrpl	r3, [r4, #20]
 c008322:	60a3      	str	r3, [r4, #8]
 c008324:	e7f4      	b.n	c008310 <__swsetup_r+0xb0>
 c008326:	2000      	movs	r0, #0
 c008328:	e7f7      	b.n	c00831a <__swsetup_r+0xba>
 c00832a:	bf00      	nop
 c00832c:	30000104 	.word	0x30000104
 c008330:	0c008d24 	.word	0x0c008d24
 c008334:	0c008d44 	.word	0x0c008d44
 c008338:	0c008d04 	.word	0x0c008d04

0c00833c <_close_r>:
 c00833c:	b538      	push	{r3, r4, r5, lr}
 c00833e:	2300      	movs	r3, #0
 c008340:	4d05      	ldr	r5, [pc, #20]	; (c008358 <_close_r+0x1c>)
 c008342:	4604      	mov	r4, r0
 c008344:	4608      	mov	r0, r1
 c008346:	602b      	str	r3, [r5, #0]
 c008348:	f7f9 fe75 	bl	c002036 <_close>
 c00834c:	1c43      	adds	r3, r0, #1
 c00834e:	d102      	bne.n	c008356 <_close_r+0x1a>
 c008350:	682b      	ldr	r3, [r5, #0]
 c008352:	b103      	cbz	r3, c008356 <_close_r+0x1a>
 c008354:	6023      	str	r3, [r4, #0]
 c008356:	bd38      	pop	{r3, r4, r5, pc}
 c008358:	30001ca4 	.word	0x30001ca4

0c00835c <__sflush_r>:
 c00835c:	898a      	ldrh	r2, [r1, #12]
 c00835e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c008362:	4605      	mov	r5, r0
 c008364:	0710      	lsls	r0, r2, #28
 c008366:	460c      	mov	r4, r1
 c008368:	d458      	bmi.n	c00841c <__sflush_r+0xc0>
 c00836a:	684b      	ldr	r3, [r1, #4]
 c00836c:	2b00      	cmp	r3, #0
 c00836e:	dc05      	bgt.n	c00837c <__sflush_r+0x20>
 c008370:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c008372:	2b00      	cmp	r3, #0
 c008374:	dc02      	bgt.n	c00837c <__sflush_r+0x20>
 c008376:	2000      	movs	r0, #0
 c008378:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00837c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00837e:	2e00      	cmp	r6, #0
 c008380:	d0f9      	beq.n	c008376 <__sflush_r+0x1a>
 c008382:	2300      	movs	r3, #0
 c008384:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c008388:	682f      	ldr	r7, [r5, #0]
 c00838a:	602b      	str	r3, [r5, #0]
 c00838c:	d032      	beq.n	c0083f4 <__sflush_r+0x98>
 c00838e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c008390:	89a3      	ldrh	r3, [r4, #12]
 c008392:	075a      	lsls	r2, r3, #29
 c008394:	d505      	bpl.n	c0083a2 <__sflush_r+0x46>
 c008396:	6863      	ldr	r3, [r4, #4]
 c008398:	1ac0      	subs	r0, r0, r3
 c00839a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c00839c:	b10b      	cbz	r3, c0083a2 <__sflush_r+0x46>
 c00839e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c0083a0:	1ac0      	subs	r0, r0, r3
 c0083a2:	2300      	movs	r3, #0
 c0083a4:	4602      	mov	r2, r0
 c0083a6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0083a8:	4628      	mov	r0, r5
 c0083aa:	6a21      	ldr	r1, [r4, #32]
 c0083ac:	47b0      	blx	r6
 c0083ae:	1c43      	adds	r3, r0, #1
 c0083b0:	89a3      	ldrh	r3, [r4, #12]
 c0083b2:	d106      	bne.n	c0083c2 <__sflush_r+0x66>
 c0083b4:	6829      	ldr	r1, [r5, #0]
 c0083b6:	291d      	cmp	r1, #29
 c0083b8:	d82c      	bhi.n	c008414 <__sflush_r+0xb8>
 c0083ba:	4a29      	ldr	r2, [pc, #164]	; (c008460 <__sflush_r+0x104>)
 c0083bc:	40ca      	lsrs	r2, r1
 c0083be:	07d6      	lsls	r6, r2, #31
 c0083c0:	d528      	bpl.n	c008414 <__sflush_r+0xb8>
 c0083c2:	2200      	movs	r2, #0
 c0083c4:	04d9      	lsls	r1, r3, #19
 c0083c6:	6062      	str	r2, [r4, #4]
 c0083c8:	6922      	ldr	r2, [r4, #16]
 c0083ca:	6022      	str	r2, [r4, #0]
 c0083cc:	d504      	bpl.n	c0083d8 <__sflush_r+0x7c>
 c0083ce:	1c42      	adds	r2, r0, #1
 c0083d0:	d101      	bne.n	c0083d6 <__sflush_r+0x7a>
 c0083d2:	682b      	ldr	r3, [r5, #0]
 c0083d4:	b903      	cbnz	r3, c0083d8 <__sflush_r+0x7c>
 c0083d6:	6560      	str	r0, [r4, #84]	; 0x54
 c0083d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c0083da:	602f      	str	r7, [r5, #0]
 c0083dc:	2900      	cmp	r1, #0
 c0083de:	d0ca      	beq.n	c008376 <__sflush_r+0x1a>
 c0083e0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c0083e4:	4299      	cmp	r1, r3
 c0083e6:	d002      	beq.n	c0083ee <__sflush_r+0x92>
 c0083e8:	4628      	mov	r0, r5
 c0083ea:	f000 f931 	bl	c008650 <_free_r>
 c0083ee:	2000      	movs	r0, #0
 c0083f0:	6360      	str	r0, [r4, #52]	; 0x34
 c0083f2:	e7c1      	b.n	c008378 <__sflush_r+0x1c>
 c0083f4:	6a21      	ldr	r1, [r4, #32]
 c0083f6:	2301      	movs	r3, #1
 c0083f8:	4628      	mov	r0, r5
 c0083fa:	47b0      	blx	r6
 c0083fc:	1c41      	adds	r1, r0, #1
 c0083fe:	d1c7      	bne.n	c008390 <__sflush_r+0x34>
 c008400:	682b      	ldr	r3, [r5, #0]
 c008402:	2b00      	cmp	r3, #0
 c008404:	d0c4      	beq.n	c008390 <__sflush_r+0x34>
 c008406:	2b1d      	cmp	r3, #29
 c008408:	d001      	beq.n	c00840e <__sflush_r+0xb2>
 c00840a:	2b16      	cmp	r3, #22
 c00840c:	d101      	bne.n	c008412 <__sflush_r+0xb6>
 c00840e:	602f      	str	r7, [r5, #0]
 c008410:	e7b1      	b.n	c008376 <__sflush_r+0x1a>
 c008412:	89a3      	ldrh	r3, [r4, #12]
 c008414:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c008418:	81a3      	strh	r3, [r4, #12]
 c00841a:	e7ad      	b.n	c008378 <__sflush_r+0x1c>
 c00841c:	690f      	ldr	r7, [r1, #16]
 c00841e:	2f00      	cmp	r7, #0
 c008420:	d0a9      	beq.n	c008376 <__sflush_r+0x1a>
 c008422:	0793      	lsls	r3, r2, #30
 c008424:	680e      	ldr	r6, [r1, #0]
 c008426:	600f      	str	r7, [r1, #0]
 c008428:	bf0c      	ite	eq
 c00842a:	694b      	ldreq	r3, [r1, #20]
 c00842c:	2300      	movne	r3, #0
 c00842e:	eba6 0807 	sub.w	r8, r6, r7
 c008432:	608b      	str	r3, [r1, #8]
 c008434:	f1b8 0f00 	cmp.w	r8, #0
 c008438:	dd9d      	ble.n	c008376 <__sflush_r+0x1a>
 c00843a:	4643      	mov	r3, r8
 c00843c:	463a      	mov	r2, r7
 c00843e:	6a21      	ldr	r1, [r4, #32]
 c008440:	4628      	mov	r0, r5
 c008442:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c008444:	47b0      	blx	r6
 c008446:	2800      	cmp	r0, #0
 c008448:	dc06      	bgt.n	c008458 <__sflush_r+0xfc>
 c00844a:	89a3      	ldrh	r3, [r4, #12]
 c00844c:	f04f 30ff 	mov.w	r0, #4294967295
 c008450:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c008454:	81a3      	strh	r3, [r4, #12]
 c008456:	e78f      	b.n	c008378 <__sflush_r+0x1c>
 c008458:	4407      	add	r7, r0
 c00845a:	eba8 0800 	sub.w	r8, r8, r0
 c00845e:	e7e9      	b.n	c008434 <__sflush_r+0xd8>
 c008460:	20400001 	.word	0x20400001

0c008464 <_fflush_r>:
 c008464:	b538      	push	{r3, r4, r5, lr}
 c008466:	690b      	ldr	r3, [r1, #16]
 c008468:	4605      	mov	r5, r0
 c00846a:	460c      	mov	r4, r1
 c00846c:	b913      	cbnz	r3, c008474 <_fflush_r+0x10>
 c00846e:	2500      	movs	r5, #0
 c008470:	4628      	mov	r0, r5
 c008472:	bd38      	pop	{r3, r4, r5, pc}
 c008474:	b118      	cbz	r0, c00847e <_fflush_r+0x1a>
 c008476:	6983      	ldr	r3, [r0, #24]
 c008478:	b90b      	cbnz	r3, c00847e <_fflush_r+0x1a>
 c00847a:	f7ff f8b9 	bl	c0075f0 <__sinit>
 c00847e:	4b14      	ldr	r3, [pc, #80]	; (c0084d0 <_fflush_r+0x6c>)
 c008480:	429c      	cmp	r4, r3
 c008482:	d11b      	bne.n	c0084bc <_fflush_r+0x58>
 c008484:	686c      	ldr	r4, [r5, #4]
 c008486:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00848a:	2b00      	cmp	r3, #0
 c00848c:	d0ef      	beq.n	c00846e <_fflush_r+0xa>
 c00848e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c008490:	07d0      	lsls	r0, r2, #31
 c008492:	d404      	bmi.n	c00849e <_fflush_r+0x3a>
 c008494:	0599      	lsls	r1, r3, #22
 c008496:	d402      	bmi.n	c00849e <_fflush_r+0x3a>
 c008498:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00849a:	f7ff f947 	bl	c00772c <__retarget_lock_acquire_recursive>
 c00849e:	4628      	mov	r0, r5
 c0084a0:	4621      	mov	r1, r4
 c0084a2:	f7ff ff5b 	bl	c00835c <__sflush_r>
 c0084a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0084a8:	4605      	mov	r5, r0
 c0084aa:	07da      	lsls	r2, r3, #31
 c0084ac:	d4e0      	bmi.n	c008470 <_fflush_r+0xc>
 c0084ae:	89a3      	ldrh	r3, [r4, #12]
 c0084b0:	059b      	lsls	r3, r3, #22
 c0084b2:	d4dd      	bmi.n	c008470 <_fflush_r+0xc>
 c0084b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0084b6:	f7ff f93a 	bl	c00772e <__retarget_lock_release_recursive>
 c0084ba:	e7d9      	b.n	c008470 <_fflush_r+0xc>
 c0084bc:	4b05      	ldr	r3, [pc, #20]	; (c0084d4 <_fflush_r+0x70>)
 c0084be:	429c      	cmp	r4, r3
 c0084c0:	d101      	bne.n	c0084c6 <_fflush_r+0x62>
 c0084c2:	68ac      	ldr	r4, [r5, #8]
 c0084c4:	e7df      	b.n	c008486 <_fflush_r+0x22>
 c0084c6:	4b04      	ldr	r3, [pc, #16]	; (c0084d8 <_fflush_r+0x74>)
 c0084c8:	429c      	cmp	r4, r3
 c0084ca:	bf08      	it	eq
 c0084cc:	68ec      	ldreq	r4, [r5, #12]
 c0084ce:	e7da      	b.n	c008486 <_fflush_r+0x22>
 c0084d0:	0c008d24 	.word	0x0c008d24
 c0084d4:	0c008d44 	.word	0x0c008d44
 c0084d8:	0c008d04 	.word	0x0c008d04

0c0084dc <_lseek_r>:
 c0084dc:	b538      	push	{r3, r4, r5, lr}
 c0084de:	4604      	mov	r4, r0
 c0084e0:	4d06      	ldr	r5, [pc, #24]	; (c0084fc <_lseek_r+0x20>)
 c0084e2:	4608      	mov	r0, r1
 c0084e4:	4611      	mov	r1, r2
 c0084e6:	2200      	movs	r2, #0
 c0084e8:	602a      	str	r2, [r5, #0]
 c0084ea:	461a      	mov	r2, r3
 c0084ec:	f7f9 fdca 	bl	c002084 <_lseek>
 c0084f0:	1c43      	adds	r3, r0, #1
 c0084f2:	d102      	bne.n	c0084fa <_lseek_r+0x1e>
 c0084f4:	682b      	ldr	r3, [r5, #0]
 c0084f6:	b103      	cbz	r3, c0084fa <_lseek_r+0x1e>
 c0084f8:	6023      	str	r3, [r4, #0]
 c0084fa:	bd38      	pop	{r3, r4, r5, pc}
 c0084fc:	30001ca4 	.word	0x30001ca4

0c008500 <__swhatbuf_r>:
 c008500:	b570      	push	{r4, r5, r6, lr}
 c008502:	460e      	mov	r6, r1
 c008504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c008508:	b096      	sub	sp, #88	; 0x58
 c00850a:	4614      	mov	r4, r2
 c00850c:	2900      	cmp	r1, #0
 c00850e:	461d      	mov	r5, r3
 c008510:	da08      	bge.n	c008524 <__swhatbuf_r+0x24>
 c008512:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c008516:	2200      	movs	r2, #0
 c008518:	602a      	str	r2, [r5, #0]
 c00851a:	061a      	lsls	r2, r3, #24
 c00851c:	d410      	bmi.n	c008540 <__swhatbuf_r+0x40>
 c00851e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c008522:	e00e      	b.n	c008542 <__swhatbuf_r+0x42>
 c008524:	466a      	mov	r2, sp
 c008526:	f000 f921 	bl	c00876c <_fstat_r>
 c00852a:	2800      	cmp	r0, #0
 c00852c:	dbf1      	blt.n	c008512 <__swhatbuf_r+0x12>
 c00852e:	9a01      	ldr	r2, [sp, #4]
 c008530:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c008534:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c008538:	425a      	negs	r2, r3
 c00853a:	415a      	adcs	r2, r3
 c00853c:	602a      	str	r2, [r5, #0]
 c00853e:	e7ee      	b.n	c00851e <__swhatbuf_r+0x1e>
 c008540:	2340      	movs	r3, #64	; 0x40
 c008542:	2000      	movs	r0, #0
 c008544:	6023      	str	r3, [r4, #0]
 c008546:	b016      	add	sp, #88	; 0x58
 c008548:	bd70      	pop	{r4, r5, r6, pc}
	...

0c00854c <__smakebuf_r>:
 c00854c:	898b      	ldrh	r3, [r1, #12]
 c00854e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c008550:	079d      	lsls	r5, r3, #30
 c008552:	4606      	mov	r6, r0
 c008554:	460c      	mov	r4, r1
 c008556:	d507      	bpl.n	c008568 <__smakebuf_r+0x1c>
 c008558:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c00855c:	6023      	str	r3, [r4, #0]
 c00855e:	6123      	str	r3, [r4, #16]
 c008560:	2301      	movs	r3, #1
 c008562:	6163      	str	r3, [r4, #20]
 c008564:	b002      	add	sp, #8
 c008566:	bd70      	pop	{r4, r5, r6, pc}
 c008568:	ab01      	add	r3, sp, #4
 c00856a:	466a      	mov	r2, sp
 c00856c:	f7ff ffc8 	bl	c008500 <__swhatbuf_r>
 c008570:	9900      	ldr	r1, [sp, #0]
 c008572:	4605      	mov	r5, r0
 c008574:	4630      	mov	r0, r6
 c008576:	f7ff f8fb 	bl	c007770 <_malloc_r>
 c00857a:	b948      	cbnz	r0, c008590 <__smakebuf_r+0x44>
 c00857c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c008580:	059a      	lsls	r2, r3, #22
 c008582:	d4ef      	bmi.n	c008564 <__smakebuf_r+0x18>
 c008584:	f023 0303 	bic.w	r3, r3, #3
 c008588:	f043 0302 	orr.w	r3, r3, #2
 c00858c:	81a3      	strh	r3, [r4, #12]
 c00858e:	e7e3      	b.n	c008558 <__smakebuf_r+0xc>
 c008590:	4b0d      	ldr	r3, [pc, #52]	; (c0085c8 <__smakebuf_r+0x7c>)
 c008592:	62b3      	str	r3, [r6, #40]	; 0x28
 c008594:	89a3      	ldrh	r3, [r4, #12]
 c008596:	6020      	str	r0, [r4, #0]
 c008598:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00859c:	6120      	str	r0, [r4, #16]
 c00859e:	81a3      	strh	r3, [r4, #12]
 c0085a0:	9b00      	ldr	r3, [sp, #0]
 c0085a2:	6163      	str	r3, [r4, #20]
 c0085a4:	9b01      	ldr	r3, [sp, #4]
 c0085a6:	b15b      	cbz	r3, c0085c0 <__smakebuf_r+0x74>
 c0085a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0085ac:	4630      	mov	r0, r6
 c0085ae:	f000 f8ef 	bl	c008790 <_isatty_r>
 c0085b2:	b128      	cbz	r0, c0085c0 <__smakebuf_r+0x74>
 c0085b4:	89a3      	ldrh	r3, [r4, #12]
 c0085b6:	f023 0303 	bic.w	r3, r3, #3
 c0085ba:	f043 0301 	orr.w	r3, r3, #1
 c0085be:	81a3      	strh	r3, [r4, #12]
 c0085c0:	89a0      	ldrh	r0, [r4, #12]
 c0085c2:	4305      	orrs	r5, r0
 c0085c4:	81a5      	strh	r5, [r4, #12]
 c0085c6:	e7cd      	b.n	c008564 <__smakebuf_r+0x18>
 c0085c8:	0c007589 	.word	0x0c007589

0c0085cc <memchr>:
 c0085cc:	b2c9      	uxtb	r1, r1
 c0085ce:	4402      	add	r2, r0
 c0085d0:	b510      	push	{r4, lr}
 c0085d2:	4290      	cmp	r0, r2
 c0085d4:	4603      	mov	r3, r0
 c0085d6:	d101      	bne.n	c0085dc <memchr+0x10>
 c0085d8:	2300      	movs	r3, #0
 c0085da:	e003      	b.n	c0085e4 <memchr+0x18>
 c0085dc:	781c      	ldrb	r4, [r3, #0]
 c0085de:	3001      	adds	r0, #1
 c0085e0:	428c      	cmp	r4, r1
 c0085e2:	d1f6      	bne.n	c0085d2 <memchr+0x6>
 c0085e4:	4618      	mov	r0, r3
 c0085e6:	bd10      	pop	{r4, pc}

0c0085e8 <memcpy>:
 c0085e8:	440a      	add	r2, r1
 c0085ea:	1e43      	subs	r3, r0, #1
 c0085ec:	4291      	cmp	r1, r2
 c0085ee:	d100      	bne.n	c0085f2 <memcpy+0xa>
 c0085f0:	4770      	bx	lr
 c0085f2:	b510      	push	{r4, lr}
 c0085f4:	f811 4b01 	ldrb.w	r4, [r1], #1
 c0085f8:	4291      	cmp	r1, r2
 c0085fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 c0085fe:	d1f9      	bne.n	c0085f4 <memcpy+0xc>
 c008600:	bd10      	pop	{r4, pc}

0c008602 <memmove>:
 c008602:	4288      	cmp	r0, r1
 c008604:	b510      	push	{r4, lr}
 c008606:	eb01 0402 	add.w	r4, r1, r2
 c00860a:	d902      	bls.n	c008612 <memmove+0x10>
 c00860c:	4284      	cmp	r4, r0
 c00860e:	4623      	mov	r3, r4
 c008610:	d807      	bhi.n	c008622 <memmove+0x20>
 c008612:	1e43      	subs	r3, r0, #1
 c008614:	42a1      	cmp	r1, r4
 c008616:	d008      	beq.n	c00862a <memmove+0x28>
 c008618:	f811 2b01 	ldrb.w	r2, [r1], #1
 c00861c:	f803 2f01 	strb.w	r2, [r3, #1]!
 c008620:	e7f8      	b.n	c008614 <memmove+0x12>
 c008622:	4402      	add	r2, r0
 c008624:	4601      	mov	r1, r0
 c008626:	428a      	cmp	r2, r1
 c008628:	d100      	bne.n	c00862c <memmove+0x2a>
 c00862a:	bd10      	pop	{r4, pc}
 c00862c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 c008630:	f802 4d01 	strb.w	r4, [r2, #-1]!
 c008634:	e7f7      	b.n	c008626 <memmove+0x24>
	...

0c008638 <__malloc_lock>:
 c008638:	4801      	ldr	r0, [pc, #4]	; (c008640 <__malloc_lock+0x8>)
 c00863a:	f7ff b877 	b.w	c00772c <__retarget_lock_acquire_recursive>
 c00863e:	bf00      	nop
 c008640:	30001c98 	.word	0x30001c98

0c008644 <__malloc_unlock>:
 c008644:	4801      	ldr	r0, [pc, #4]	; (c00864c <__malloc_unlock+0x8>)
 c008646:	f7ff b872 	b.w	c00772e <__retarget_lock_release_recursive>
 c00864a:	bf00      	nop
 c00864c:	30001c98 	.word	0x30001c98

0c008650 <_free_r>:
 c008650:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c008652:	2900      	cmp	r1, #0
 c008654:	d043      	beq.n	c0086de <_free_r+0x8e>
 c008656:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00865a:	1f0c      	subs	r4, r1, #4
 c00865c:	9001      	str	r0, [sp, #4]
 c00865e:	2b00      	cmp	r3, #0
 c008660:	bfb8      	it	lt
 c008662:	18e4      	addlt	r4, r4, r3
 c008664:	f7ff ffe8 	bl	c008638 <__malloc_lock>
 c008668:	4a1e      	ldr	r2, [pc, #120]	; (c0086e4 <_free_r+0x94>)
 c00866a:	9801      	ldr	r0, [sp, #4]
 c00866c:	6813      	ldr	r3, [r2, #0]
 c00866e:	b933      	cbnz	r3, c00867e <_free_r+0x2e>
 c008670:	6063      	str	r3, [r4, #4]
 c008672:	6014      	str	r4, [r2, #0]
 c008674:	b003      	add	sp, #12
 c008676:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00867a:	f7ff bfe3 	b.w	c008644 <__malloc_unlock>
 c00867e:	42a3      	cmp	r3, r4
 c008680:	d908      	bls.n	c008694 <_free_r+0x44>
 c008682:	6825      	ldr	r5, [r4, #0]
 c008684:	1961      	adds	r1, r4, r5
 c008686:	428b      	cmp	r3, r1
 c008688:	bf01      	itttt	eq
 c00868a:	6819      	ldreq	r1, [r3, #0]
 c00868c:	685b      	ldreq	r3, [r3, #4]
 c00868e:	1949      	addeq	r1, r1, r5
 c008690:	6021      	streq	r1, [r4, #0]
 c008692:	e7ed      	b.n	c008670 <_free_r+0x20>
 c008694:	461a      	mov	r2, r3
 c008696:	685b      	ldr	r3, [r3, #4]
 c008698:	b10b      	cbz	r3, c00869e <_free_r+0x4e>
 c00869a:	42a3      	cmp	r3, r4
 c00869c:	d9fa      	bls.n	c008694 <_free_r+0x44>
 c00869e:	6811      	ldr	r1, [r2, #0]
 c0086a0:	1855      	adds	r5, r2, r1
 c0086a2:	42a5      	cmp	r5, r4
 c0086a4:	d10b      	bne.n	c0086be <_free_r+0x6e>
 c0086a6:	6824      	ldr	r4, [r4, #0]
 c0086a8:	4421      	add	r1, r4
 c0086aa:	1854      	adds	r4, r2, r1
 c0086ac:	6011      	str	r1, [r2, #0]
 c0086ae:	42a3      	cmp	r3, r4
 c0086b0:	d1e0      	bne.n	c008674 <_free_r+0x24>
 c0086b2:	681c      	ldr	r4, [r3, #0]
 c0086b4:	685b      	ldr	r3, [r3, #4]
 c0086b6:	4421      	add	r1, r4
 c0086b8:	6053      	str	r3, [r2, #4]
 c0086ba:	6011      	str	r1, [r2, #0]
 c0086bc:	e7da      	b.n	c008674 <_free_r+0x24>
 c0086be:	d902      	bls.n	c0086c6 <_free_r+0x76>
 c0086c0:	230c      	movs	r3, #12
 c0086c2:	6003      	str	r3, [r0, #0]
 c0086c4:	e7d6      	b.n	c008674 <_free_r+0x24>
 c0086c6:	6825      	ldr	r5, [r4, #0]
 c0086c8:	1961      	adds	r1, r4, r5
 c0086ca:	428b      	cmp	r3, r1
 c0086cc:	bf02      	ittt	eq
 c0086ce:	6819      	ldreq	r1, [r3, #0]
 c0086d0:	685b      	ldreq	r3, [r3, #4]
 c0086d2:	1949      	addeq	r1, r1, r5
 c0086d4:	6063      	str	r3, [r4, #4]
 c0086d6:	bf08      	it	eq
 c0086d8:	6021      	streq	r1, [r4, #0]
 c0086da:	6054      	str	r4, [r2, #4]
 c0086dc:	e7ca      	b.n	c008674 <_free_r+0x24>
 c0086de:	b003      	add	sp, #12
 c0086e0:	bd30      	pop	{r4, r5, pc}
 c0086e2:	bf00      	nop
 c0086e4:	30001c9c 	.word	0x30001c9c

0c0086e8 <_realloc_r>:
 c0086e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0086ec:	4680      	mov	r8, r0
 c0086ee:	4614      	mov	r4, r2
 c0086f0:	460e      	mov	r6, r1
 c0086f2:	b921      	cbnz	r1, c0086fe <_realloc_r+0x16>
 c0086f4:	4611      	mov	r1, r2
 c0086f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0086fa:	f7ff b839 	b.w	c007770 <_malloc_r>
 c0086fe:	b92a      	cbnz	r2, c00870c <_realloc_r+0x24>
 c008700:	4625      	mov	r5, r4
 c008702:	f7ff ffa5 	bl	c008650 <_free_r>
 c008706:	4628      	mov	r0, r5
 c008708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c00870c:	f000 f850 	bl	c0087b0 <_malloc_usable_size_r>
 c008710:	4284      	cmp	r4, r0
 c008712:	4607      	mov	r7, r0
 c008714:	d802      	bhi.n	c00871c <_realloc_r+0x34>
 c008716:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 c00871a:	d812      	bhi.n	c008742 <_realloc_r+0x5a>
 c00871c:	4621      	mov	r1, r4
 c00871e:	4640      	mov	r0, r8
 c008720:	f7ff f826 	bl	c007770 <_malloc_r>
 c008724:	4605      	mov	r5, r0
 c008726:	2800      	cmp	r0, #0
 c008728:	d0ed      	beq.n	c008706 <_realloc_r+0x1e>
 c00872a:	42bc      	cmp	r4, r7
 c00872c:	4622      	mov	r2, r4
 c00872e:	4631      	mov	r1, r6
 c008730:	bf28      	it	cs
 c008732:	463a      	movcs	r2, r7
 c008734:	f7ff ff58 	bl	c0085e8 <memcpy>
 c008738:	4631      	mov	r1, r6
 c00873a:	4640      	mov	r0, r8
 c00873c:	f7ff ff88 	bl	c008650 <_free_r>
 c008740:	e7e1      	b.n	c008706 <_realloc_r+0x1e>
 c008742:	4635      	mov	r5, r6
 c008744:	e7df      	b.n	c008706 <_realloc_r+0x1e>
	...

0c008748 <_read_r>:
 c008748:	b538      	push	{r3, r4, r5, lr}
 c00874a:	4604      	mov	r4, r0
 c00874c:	4d06      	ldr	r5, [pc, #24]	; (c008768 <_read_r+0x20>)
 c00874e:	4608      	mov	r0, r1
 c008750:	4611      	mov	r1, r2
 c008752:	2200      	movs	r2, #0
 c008754:	602a      	str	r2, [r5, #0]
 c008756:	461a      	mov	r2, r3
 c008758:	f7f9 fc34 	bl	c001fc4 <_read>
 c00875c:	1c43      	adds	r3, r0, #1
 c00875e:	d102      	bne.n	c008766 <_read_r+0x1e>
 c008760:	682b      	ldr	r3, [r5, #0]
 c008762:	b103      	cbz	r3, c008766 <_read_r+0x1e>
 c008764:	6023      	str	r3, [r4, #0]
 c008766:	bd38      	pop	{r3, r4, r5, pc}
 c008768:	30001ca4 	.word	0x30001ca4

0c00876c <_fstat_r>:
 c00876c:	b538      	push	{r3, r4, r5, lr}
 c00876e:	2300      	movs	r3, #0
 c008770:	4d06      	ldr	r5, [pc, #24]	; (c00878c <_fstat_r+0x20>)
 c008772:	4604      	mov	r4, r0
 c008774:	4608      	mov	r0, r1
 c008776:	4611      	mov	r1, r2
 c008778:	602b      	str	r3, [r5, #0]
 c00877a:	f7f9 fc68 	bl	c00204e <_fstat>
 c00877e:	1c43      	adds	r3, r0, #1
 c008780:	d102      	bne.n	c008788 <_fstat_r+0x1c>
 c008782:	682b      	ldr	r3, [r5, #0]
 c008784:	b103      	cbz	r3, c008788 <_fstat_r+0x1c>
 c008786:	6023      	str	r3, [r4, #0]
 c008788:	bd38      	pop	{r3, r4, r5, pc}
 c00878a:	bf00      	nop
 c00878c:	30001ca4 	.word	0x30001ca4

0c008790 <_isatty_r>:
 c008790:	b538      	push	{r3, r4, r5, lr}
 c008792:	2300      	movs	r3, #0
 c008794:	4d05      	ldr	r5, [pc, #20]	; (c0087ac <_isatty_r+0x1c>)
 c008796:	4604      	mov	r4, r0
 c008798:	4608      	mov	r0, r1
 c00879a:	602b      	str	r3, [r5, #0]
 c00879c:	f7f9 fc67 	bl	c00206e <_isatty>
 c0087a0:	1c43      	adds	r3, r0, #1
 c0087a2:	d102      	bne.n	c0087aa <_isatty_r+0x1a>
 c0087a4:	682b      	ldr	r3, [r5, #0]
 c0087a6:	b103      	cbz	r3, c0087aa <_isatty_r+0x1a>
 c0087a8:	6023      	str	r3, [r4, #0]
 c0087aa:	bd38      	pop	{r3, r4, r5, pc}
 c0087ac:	30001ca4 	.word	0x30001ca4

0c0087b0 <_malloc_usable_size_r>:
 c0087b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c0087b4:	1f18      	subs	r0, r3, #4
 c0087b6:	2b00      	cmp	r3, #0
 c0087b8:	bfbc      	itt	lt
 c0087ba:	580b      	ldrlt	r3, [r1, r0]
 c0087bc:	18c0      	addlt	r0, r0, r3
 c0087be:	4770      	bx	lr

0c0087c0 <_init>:
 c0087c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0087c2:	bf00      	nop
 c0087c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0087c6:	bc08      	pop	{r3}
 c0087c8:	469e      	mov	lr, r3
 c0087ca:	4770      	bx	lr

0c0087cc <_fini>:
 c0087cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0087ce:	bf00      	nop
 c0087d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0087d2:	bc08      	pop	{r3}
 c0087d4:	469e      	mov	lr, r3
 c0087d6:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_print_Num>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b868 	b.w	c0010d8 <__acle_se_SECURE_print_Num>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c4 b9c6 	b.w	c00239c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <SECURE_Send_Modified_Mem>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c3 b96c 	b.w	c0012f0 <__acle_se_SECURE_Send_Modified_Mem>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 bd72 	b.w	c001b04 <__acle_se_SECURE_RegisterCallback>

0c03e020 <SECURE_Send_Mem>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b89e 	b.w	c001164 <__acle_se_SECURE_Send_Mem>

0c03e028 <SECURE_print_Log>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c3 b813 	b.w	c001056 <__acle_se_SECURE_print_Log>
	...
