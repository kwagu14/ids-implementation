
Nonblocking_Memory_Forensics_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003018  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  08043210  08043210  00013210  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08043398  08043398  0001800c  2**0
                  CONTENTS
  4 .ARM          00000008  08043398  08043398  00013398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080433a0  080433a0  0001800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080433a0  080433a0  000133a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080433a4  080433a4  000133a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20018000  080433a8  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000100  2001800c  080433b4  0001800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2001810c  080433b4  0001810c  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0001800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012311  00000000  00000000  00018042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f44  00000000  00000000  0002a353  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0002c298  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d60  00000000  00000000  0002d0a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029711  00000000  00000000  0002de00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011d0b  00000000  00000000  00057511  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010d256  00000000  00000000  0006921c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00176472  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003c50  00000000  00000000  001764c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2001800c 	.word	0x2001800c
 8040214:	00000000 	.word	0x00000000
 8040218:	080431d8 	.word	0x080431d8

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018010 	.word	0x20018010
 8040234:	080431d8 	.word	0x080431d8

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b982 	b.w	8040554 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	460f      	mov	r7, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	d148      	bne.n	8040308 <__udivmoddi4+0xa0>
 8040276:	428a      	cmp	r2, r1
 8040278:	4694      	mov	ip, r2
 804027a:	d961      	bls.n	8040340 <__udivmoddi4+0xd8>
 804027c:	fab2 f382 	clz	r3, r2
 8040280:	b143      	cbz	r3, 8040294 <__udivmoddi4+0x2c>
 8040282:	f1c3 0120 	rsb	r1, r3, #32
 8040286:	409f      	lsls	r7, r3
 8040288:	fa02 fc03 	lsl.w	ip, r2, r3
 804028c:	409c      	lsls	r4, r3
 804028e:	fa20 f101 	lsr.w	r1, r0, r1
 8040292:	430f      	orrs	r7, r1
 8040294:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8040298:	fa1f fe8c 	uxth.w	lr, ip
 804029c:	0c22      	lsrs	r2, r4, #16
 804029e:	fbb7 f6f1 	udiv	r6, r7, r1
 80402a2:	fb01 7716 	mls	r7, r1, r6, r7
 80402a6:	fb06 f00e 	mul.w	r0, r6, lr
 80402aa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80402ae:	4290      	cmp	r0, r2
 80402b0:	d908      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b2:	eb1c 0202 	adds.w	r2, ip, r2
 80402b6:	f106 37ff 	add.w	r7, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4290      	cmp	r0, r2
 80402be:	f200 8137 	bhi.w	8040530 <__udivmoddi4+0x2c8>
 80402c2:	463e      	mov	r6, r7
 80402c4:	1a12      	subs	r2, r2, r0
 80402c6:	b2a4      	uxth	r4, r4
 80402c8:	fbb2 f0f1 	udiv	r0, r2, r1
 80402cc:	fb01 2210 	mls	r2, r1, r0, r2
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d908      	bls.n	80402ee <__udivmoddi4+0x86>
 80402dc:	eb1c 0404 	adds.w	r4, ip, r4
 80402e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80402e4:	d202      	bcs.n	80402ec <__udivmoddi4+0x84>
 80402e6:	45a6      	cmp	lr, r4
 80402e8:	f200 811c 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402ec:	4610      	mov	r0, r2
 80402ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f2:	eba4 040e 	sub.w	r4, r4, lr
 80402f6:	2600      	movs	r6, #0
 80402f8:	b11d      	cbz	r5, 8040302 <__udivmoddi4+0x9a>
 80402fa:	40dc      	lsrs	r4, r3
 80402fc:	2300      	movs	r3, #0
 80402fe:	e9c5 4300 	strd	r4, r3, [r5]
 8040302:	4631      	mov	r1, r6
 8040304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040308:	428b      	cmp	r3, r1
 804030a:	d909      	bls.n	8040320 <__udivmoddi4+0xb8>
 804030c:	2d00      	cmp	r5, #0
 804030e:	f000 80fd 	beq.w	804050c <__udivmoddi4+0x2a4>
 8040312:	2600      	movs	r6, #0
 8040314:	e9c5 0100 	strd	r0, r1, [r5]
 8040318:	4630      	mov	r0, r6
 804031a:	4631      	mov	r1, r6
 804031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040320:	fab3 f683 	clz	r6, r3
 8040324:	2e00      	cmp	r6, #0
 8040326:	d14b      	bne.n	80403c0 <__udivmoddi4+0x158>
 8040328:	428b      	cmp	r3, r1
 804032a:	f0c0 80f2 	bcc.w	8040512 <__udivmoddi4+0x2aa>
 804032e:	4282      	cmp	r2, r0
 8040330:	f240 80ef 	bls.w	8040512 <__udivmoddi4+0x2aa>
 8040334:	4630      	mov	r0, r6
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e3      	beq.n	8040302 <__udivmoddi4+0x9a>
 804033a:	e9c5 4700 	strd	r4, r7, [r5]
 804033e:	e7e0      	b.n	8040302 <__udivmoddi4+0x9a>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xdc>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f382 	clz	r3, r2
 8040348:	2b00      	cmp	r3, #0
 804034a:	f040 809d 	bne.w	8040488 <__udivmoddi4+0x220>
 804034e:	1a89      	subs	r1, r1, r2
 8040350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8040354:	b297      	uxth	r7, r2
 8040356:	2601      	movs	r6, #1
 8040358:	0c20      	lsrs	r0, r4, #16
 804035a:	fbb1 f2fe 	udiv	r2, r1, lr
 804035e:	fb0e 1112 	mls	r1, lr, r2, r1
 8040362:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040366:	fb07 f002 	mul.w	r0, r7, r2
 804036a:	4288      	cmp	r0, r1
 804036c:	d90f      	bls.n	804038e <__udivmoddi4+0x126>
 804036e:	eb1c 0101 	adds.w	r1, ip, r1
 8040372:	f102 38ff 	add.w	r8, r2, #4294967295
 8040376:	bf2c      	ite	cs
 8040378:	f04f 0901 	movcs.w	r9, #1
 804037c:	f04f 0900 	movcc.w	r9, #0
 8040380:	4288      	cmp	r0, r1
 8040382:	d903      	bls.n	804038c <__udivmoddi4+0x124>
 8040384:	f1b9 0f00 	cmp.w	r9, #0
 8040388:	f000 80cf 	beq.w	804052a <__udivmoddi4+0x2c2>
 804038c:	4642      	mov	r2, r8
 804038e:	1a09      	subs	r1, r1, r0
 8040390:	b2a4      	uxth	r4, r4
 8040392:	fbb1 f0fe 	udiv	r0, r1, lr
 8040396:	fb0e 1110 	mls	r1, lr, r0, r1
 804039a:	fb00 f707 	mul.w	r7, r0, r7
 804039e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403a2:	42a7      	cmp	r7, r4
 80403a4:	d908      	bls.n	80403b8 <__udivmoddi4+0x150>
 80403a6:	eb1c 0404 	adds.w	r4, ip, r4
 80403aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80403ae:	d202      	bcs.n	80403b6 <__udivmoddi4+0x14e>
 80403b0:	42a7      	cmp	r7, r4
 80403b2:	f200 80b4 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80403b6:	4608      	mov	r0, r1
 80403b8:	1be4      	subs	r4, r4, r7
 80403ba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80403be:	e79b      	b.n	80402f8 <__udivmoddi4+0x90>
 80403c0:	f1c6 0720 	rsb	r7, r6, #32
 80403c4:	40b3      	lsls	r3, r6
 80403c6:	fa01 f406 	lsl.w	r4, r1, r6
 80403ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80403ce:	40f9      	lsrs	r1, r7
 80403d0:	40b2      	lsls	r2, r6
 80403d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403d6:	fa20 f307 	lsr.w	r3, r0, r7
 80403da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403de:	431c      	orrs	r4, r3
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fa00 f306 	lsl.w	r3, r0, r6
 80403e8:	0c20      	lsrs	r0, r4, #16
 80403ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80403ee:	fb09 1118 	mls	r1, r9, r8, r1
 80403f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403f6:	fb08 f00e 	mul.w	r0, r8, lr
 80403fa:	4288      	cmp	r0, r1
 80403fc:	d90f      	bls.n	804041e <__udivmoddi4+0x1b6>
 80403fe:	eb1c 0101 	adds.w	r1, ip, r1
 8040402:	f108 3aff 	add.w	sl, r8, #4294967295
 8040406:	bf2c      	ite	cs
 8040408:	f04f 0b01 	movcs.w	fp, #1
 804040c:	f04f 0b00 	movcc.w	fp, #0
 8040410:	4288      	cmp	r0, r1
 8040412:	d903      	bls.n	804041c <__udivmoddi4+0x1b4>
 8040414:	f1bb 0f00 	cmp.w	fp, #0
 8040418:	f000 808d 	beq.w	8040536 <__udivmoddi4+0x2ce>
 804041c:	46d0      	mov	r8, sl
 804041e:	1a09      	subs	r1, r1, r0
 8040420:	b2a4      	uxth	r4, r4
 8040422:	fbb1 f0f9 	udiv	r0, r1, r9
 8040426:	fb09 1110 	mls	r1, r9, r0, r1
 804042a:	fb00 fe0e 	mul.w	lr, r0, lr
 804042e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040432:	458e      	cmp	lr, r1
 8040434:	d907      	bls.n	8040446 <__udivmoddi4+0x1de>
 8040436:	eb1c 0101 	adds.w	r1, ip, r1
 804043a:	f100 34ff 	add.w	r4, r0, #4294967295
 804043e:	d201      	bcs.n	8040444 <__udivmoddi4+0x1dc>
 8040440:	458e      	cmp	lr, r1
 8040442:	d87f      	bhi.n	8040544 <__udivmoddi4+0x2dc>
 8040444:	4620      	mov	r0, r4
 8040446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804044a:	eba1 010e 	sub.w	r1, r1, lr
 804044e:	fba0 9802 	umull	r9, r8, r0, r2
 8040452:	4541      	cmp	r1, r8
 8040454:	464c      	mov	r4, r9
 8040456:	46c6      	mov	lr, r8
 8040458:	d302      	bcc.n	8040460 <__udivmoddi4+0x1f8>
 804045a:	d106      	bne.n	804046a <__udivmoddi4+0x202>
 804045c:	454b      	cmp	r3, r9
 804045e:	d204      	bcs.n	804046a <__udivmoddi4+0x202>
 8040460:	3801      	subs	r0, #1
 8040462:	ebb9 0402 	subs.w	r4, r9, r2
 8040466:	eb68 0e0c 	sbc.w	lr, r8, ip
 804046a:	2d00      	cmp	r5, #0
 804046c:	d070      	beq.n	8040550 <__udivmoddi4+0x2e8>
 804046e:	1b1a      	subs	r2, r3, r4
 8040470:	eb61 010e 	sbc.w	r1, r1, lr
 8040474:	fa22 f306 	lsr.w	r3, r2, r6
 8040478:	fa01 f707 	lsl.w	r7, r1, r7
 804047c:	40f1      	lsrs	r1, r6
 804047e:	2600      	movs	r6, #0
 8040480:	431f      	orrs	r7, r3
 8040482:	e9c5 7100 	strd	r7, r1, [r5]
 8040486:	e73c      	b.n	8040302 <__udivmoddi4+0x9a>
 8040488:	fa02 fc03 	lsl.w	ip, r2, r3
 804048c:	f1c3 0020 	rsb	r0, r3, #32
 8040490:	fa01 f203 	lsl.w	r2, r1, r3
 8040494:	fa21 f600 	lsr.w	r6, r1, r0
 8040498:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 804049c:	fa24 f100 	lsr.w	r1, r4, r0
 80404a0:	fa1f f78c 	uxth.w	r7, ip
 80404a4:	409c      	lsls	r4, r3
 80404a6:	4311      	orrs	r1, r2
 80404a8:	fbb6 f0fe 	udiv	r0, r6, lr
 80404ac:	0c0a      	lsrs	r2, r1, #16
 80404ae:	fb0e 6610 	mls	r6, lr, r0, r6
 80404b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80404b6:	fb00 f607 	mul.w	r6, r0, r7
 80404ba:	4296      	cmp	r6, r2
 80404bc:	d90e      	bls.n	80404dc <__udivmoddi4+0x274>
 80404be:	eb1c 0202 	adds.w	r2, ip, r2
 80404c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80404c6:	bf2c      	ite	cs
 80404c8:	f04f 0901 	movcs.w	r9, #1
 80404cc:	f04f 0900 	movcc.w	r9, #0
 80404d0:	4296      	cmp	r6, r2
 80404d2:	d902      	bls.n	80404da <__udivmoddi4+0x272>
 80404d4:	f1b9 0f00 	cmp.w	r9, #0
 80404d8:	d031      	beq.n	804053e <__udivmoddi4+0x2d6>
 80404da:	4640      	mov	r0, r8
 80404dc:	1b92      	subs	r2, r2, r6
 80404de:	b289      	uxth	r1, r1
 80404e0:	fbb2 f6fe 	udiv	r6, r2, lr
 80404e4:	fb0e 2216 	mls	r2, lr, r6, r2
 80404e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80404ec:	fb06 f207 	mul.w	r2, r6, r7
 80404f0:	428a      	cmp	r2, r1
 80404f2:	d907      	bls.n	8040504 <__udivmoddi4+0x29c>
 80404f4:	eb1c 0101 	adds.w	r1, ip, r1
 80404f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80404fc:	d201      	bcs.n	8040502 <__udivmoddi4+0x29a>
 80404fe:	428a      	cmp	r2, r1
 8040500:	d823      	bhi.n	804054a <__udivmoddi4+0x2e2>
 8040502:	4646      	mov	r6, r8
 8040504:	1a89      	subs	r1, r1, r2
 8040506:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804050a:	e725      	b.n	8040358 <__udivmoddi4+0xf0>
 804050c:	462e      	mov	r6, r5
 804050e:	4628      	mov	r0, r5
 8040510:	e6f7      	b.n	8040302 <__udivmoddi4+0x9a>
 8040512:	1a84      	subs	r4, r0, r2
 8040514:	eb61 0303 	sbc.w	r3, r1, r3
 8040518:	2001      	movs	r0, #1
 804051a:	461f      	mov	r7, r3
 804051c:	e70b      	b.n	8040336 <__udivmoddi4+0xce>
 804051e:	4464      	add	r4, ip
 8040520:	3802      	subs	r0, #2
 8040522:	e749      	b.n	80403b8 <__udivmoddi4+0x150>
 8040524:	4464      	add	r4, ip
 8040526:	3802      	subs	r0, #2
 8040528:	e6e1      	b.n	80402ee <__udivmoddi4+0x86>
 804052a:	3a02      	subs	r2, #2
 804052c:	4461      	add	r1, ip
 804052e:	e72e      	b.n	804038e <__udivmoddi4+0x126>
 8040530:	3e02      	subs	r6, #2
 8040532:	4462      	add	r2, ip
 8040534:	e6c6      	b.n	80402c4 <__udivmoddi4+0x5c>
 8040536:	f1a8 0802 	sub.w	r8, r8, #2
 804053a:	4461      	add	r1, ip
 804053c:	e76f      	b.n	804041e <__udivmoddi4+0x1b6>
 804053e:	3802      	subs	r0, #2
 8040540:	4462      	add	r2, ip
 8040542:	e7cb      	b.n	80404dc <__udivmoddi4+0x274>
 8040544:	3802      	subs	r0, #2
 8040546:	4461      	add	r1, ip
 8040548:	e77d      	b.n	8040446 <__udivmoddi4+0x1de>
 804054a:	3e02      	subs	r6, #2
 804054c:	4461      	add	r1, ip
 804054e:	e7d9      	b.n	8040504 <__udivmoddi4+0x29c>
 8040550:	462e      	mov	r6, r5
 8040552:	e6d6      	b.n	8040302 <__udivmoddi4+0x9a>

08040554 <__aeabi_idiv0>:
 8040554:	4770      	bx	lr
 8040556:	bf00      	nop

08040558 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040558:	b580      	push	{r7, lr}
 804055a:	b0c2      	sub	sp, #264	; 0x108
 804055c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	uint8_t nsec_buf[261] = {
 804055e:	f507 7384 	add.w	r3, r7, #264	; 0x108
 8040562:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8040566:	4a0a      	ldr	r2, [pc, #40]	; (8040590 <main+0x38>)
 8040568:	4618      	mov	r0, r3
 804056a:	4611      	mov	r1, r2
 804056c:	f240 1305 	movw	r3, #261	; 0x105
 8040570:	461a      	mov	r2, r3
 8040572:	f002 fe1b 	bl	80431ac <memcpy>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8040576:	f000 fa2c 	bl	80409d2 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 804057a:	f000 f8a9 	bl	80406d0 <MX_DMA_Init>
  MX_GPIO_Init();
 804057e:	f000 f8cb 	bl	8040718 <MX_GPIO_Init>
  MX_TIM4_Init();
 8040582:	f000 f807 	bl	8040594 <MX_TIM4_Init>
  MX_USART3_UART_Init();
 8040586:	f000 f855 	bl	8040634 <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */

  //check memory one time
  SECURE_Send_Modified_Mem();
 804058a:	f002 fe31 	bl	80431f0 <__SECURE_Send_Modified_Mem_veneer>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1){
 804058e:	e7fe      	b.n	804058e <main+0x36>
 8040590:	08043210 	.word	0x08043210

08040594 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8040594:	b580      	push	{r7, lr}
 8040596:	b088      	sub	sp, #32
 8040598:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 804059a:	f107 0310 	add.w	r3, r7, #16
 804059e:	2200      	movs	r2, #0
 80405a0:	601a      	str	r2, [r3, #0]
 80405a2:	605a      	str	r2, [r3, #4]
 80405a4:	609a      	str	r2, [r3, #8]
 80405a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80405a8:	1d3b      	adds	r3, r7, #4
 80405aa:	2200      	movs	r2, #0
 80405ac:	601a      	str	r2, [r3, #0]
 80405ae:	605a      	str	r2, [r3, #4]
 80405b0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80405b2:	4b1e      	ldr	r3, [pc, #120]	; (804062c <MX_TIM4_Init+0x98>)
 80405b4:	4a1e      	ldr	r2, [pc, #120]	; (8040630 <MX_TIM4_Init+0x9c>)
 80405b6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 10999;
 80405b8:	4b1c      	ldr	r3, [pc, #112]	; (804062c <MX_TIM4_Init+0x98>)
 80405ba:	f642 22f7 	movw	r2, #10999	; 0x2af7
 80405be:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80405c0:	4b1a      	ldr	r3, [pc, #104]	; (804062c <MX_TIM4_Init+0x98>)
 80405c2:	2200      	movs	r2, #0
 80405c4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 10000;
 80405c6:	4b19      	ldr	r3, [pc, #100]	; (804062c <MX_TIM4_Init+0x98>)
 80405c8:	f242 7210 	movw	r2, #10000	; 0x2710
 80405cc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80405ce:	4b17      	ldr	r3, [pc, #92]	; (804062c <MX_TIM4_Init+0x98>)
 80405d0:	2200      	movs	r2, #0
 80405d2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80405d4:	4b15      	ldr	r3, [pc, #84]	; (804062c <MX_TIM4_Init+0x98>)
 80405d6:	2200      	movs	r2, #0
 80405d8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80405da:	4814      	ldr	r0, [pc, #80]	; (804062c <MX_TIM4_Init+0x98>)
 80405dc:	f001 fb08 	bl	8041bf0 <HAL_TIM_Base_Init>
 80405e0:	4603      	mov	r3, r0
 80405e2:	2b00      	cmp	r3, #0
 80405e4:	d001      	beq.n	80405ea <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 80405e6:	f000 f8e5 	bl	80407b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80405ea:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80405ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80405f0:	f107 0310 	add.w	r3, r7, #16
 80405f4:	4619      	mov	r1, r3
 80405f6:	480d      	ldr	r0, [pc, #52]	; (804062c <MX_TIM4_Init+0x98>)
 80405f8:	f001 fc70 	bl	8041edc <HAL_TIM_ConfigClockSource>
 80405fc:	4603      	mov	r3, r0
 80405fe:	2b00      	cmp	r3, #0
 8040600:	d001      	beq.n	8040606 <MX_TIM4_Init+0x72>
  {
    Error_Handler();
 8040602:	f000 f8d7 	bl	80407b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8040606:	2300      	movs	r3, #0
 8040608:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 804060a:	2300      	movs	r3, #0
 804060c:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 804060e:	1d3b      	adds	r3, r7, #4
 8040610:	4619      	mov	r1, r3
 8040612:	4806      	ldr	r0, [pc, #24]	; (804062c <MX_TIM4_Init+0x98>)
 8040614:	f001 fe94 	bl	8042340 <HAL_TIMEx_MasterConfigSynchronization>
 8040618:	4603      	mov	r3, r0
 804061a:	2b00      	cmp	r3, #0
 804061c:	d001      	beq.n	8040622 <MX_TIM4_Init+0x8e>
  {
    Error_Handler();
 804061e:	f000 f8c9 	bl	80407b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8040622:	bf00      	nop
 8040624:	3720      	adds	r7, #32
 8040626:	46bd      	mov	sp, r7
 8040628:	bd80      	pop	{r7, pc}
 804062a:	bf00      	nop
 804062c:	20018028 	.word	0x20018028
 8040630:	40000800 	.word	0x40000800

08040634 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8040634:	b580      	push	{r7, lr}
 8040636:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8040638:	4b23      	ldr	r3, [pc, #140]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 804063a:	4a24      	ldr	r2, [pc, #144]	; (80406cc <MX_USART3_UART_Init+0x98>)
 804063c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 804063e:	4b22      	ldr	r3, [pc, #136]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040640:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8040644:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8040646:	4b20      	ldr	r3, [pc, #128]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040648:	2200      	movs	r2, #0
 804064a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 804064c:	4b1e      	ldr	r3, [pc, #120]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 804064e:	2200      	movs	r2, #0
 8040650:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_ODD;
 8040652:	4b1d      	ldr	r3, [pc, #116]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040654:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8040658:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 804065a:	4b1b      	ldr	r3, [pc, #108]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 804065c:	220c      	movs	r2, #12
 804065e:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8040660:	4b19      	ldr	r3, [pc, #100]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040662:	2200      	movs	r2, #0
 8040664:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8040666:	4b18      	ldr	r3, [pc, #96]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040668:	2200      	movs	r2, #0
 804066a:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 804066c:	4b16      	ldr	r3, [pc, #88]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 804066e:	2200      	movs	r2, #0
 8040670:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8040672:	4b15      	ldr	r3, [pc, #84]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040674:	2200      	movs	r2, #0
 8040676:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8040678:	4b13      	ldr	r3, [pc, #76]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 804067a:	2200      	movs	r2, #0
 804067c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 804067e:	4812      	ldr	r0, [pc, #72]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040680:	f001 ff04 	bl	804248c <HAL_UART_Init>
 8040684:	4603      	mov	r3, r0
 8040686:	2b00      	cmp	r3, #0
 8040688:	d001      	beq.n	804068e <MX_USART3_UART_Init+0x5a>
  {
    Error_Handler();
 804068a:	f000 f893 	bl	80407b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 804068e:	2100      	movs	r1, #0
 8040690:	480d      	ldr	r0, [pc, #52]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 8040692:	f002 fc9d 	bl	8042fd0 <HAL_UARTEx_SetTxFifoThreshold>
 8040696:	4603      	mov	r3, r0
 8040698:	2b00      	cmp	r3, #0
 804069a:	d001      	beq.n	80406a0 <MX_USART3_UART_Init+0x6c>
  {
    Error_Handler();
 804069c:	f000 f88a 	bl	80407b4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80406a0:	2100      	movs	r1, #0
 80406a2:	4809      	ldr	r0, [pc, #36]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 80406a4:	f002 fcd2 	bl	804304c <HAL_UARTEx_SetRxFifoThreshold>
 80406a8:	4603      	mov	r3, r0
 80406aa:	2b00      	cmp	r3, #0
 80406ac:	d001      	beq.n	80406b2 <MX_USART3_UART_Init+0x7e>
  {
    Error_Handler();
 80406ae:	f000 f881 	bl	80407b4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80406b2:	4805      	ldr	r0, [pc, #20]	; (80406c8 <MX_USART3_UART_Init+0x94>)
 80406b4:	f002 fc53 	bl	8042f5e <HAL_UARTEx_DisableFifoMode>
 80406b8:	4603      	mov	r3, r0
 80406ba:	2b00      	cmp	r3, #0
 80406bc:	d001      	beq.n	80406c2 <MX_USART3_UART_Init+0x8e>
  {
    Error_Handler();
 80406be:	f000 f879 	bl	80407b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80406c2:	bf00      	nop
 80406c4:	bd80      	pop	{r7, pc}
 80406c6:	bf00      	nop
 80406c8:	20018074 	.word	0x20018074
 80406cc:	40004800 	.word	0x40004800

080406d0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80406d0:	b480      	push	{r7}
 80406d2:	b083      	sub	sp, #12
 80406d4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80406d6:	4b0f      	ldr	r3, [pc, #60]	; (8040714 <MX_DMA_Init+0x44>)
 80406d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80406da:	4a0e      	ldr	r2, [pc, #56]	; (8040714 <MX_DMA_Init+0x44>)
 80406dc:	f043 0304 	orr.w	r3, r3, #4
 80406e0:	6493      	str	r3, [r2, #72]	; 0x48
 80406e2:	4b0c      	ldr	r3, [pc, #48]	; (8040714 <MX_DMA_Init+0x44>)
 80406e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80406e6:	f003 0304 	and.w	r3, r3, #4
 80406ea:	607b      	str	r3, [r7, #4]
 80406ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80406ee:	4b09      	ldr	r3, [pc, #36]	; (8040714 <MX_DMA_Init+0x44>)
 80406f0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80406f2:	4a08      	ldr	r2, [pc, #32]	; (8040714 <MX_DMA_Init+0x44>)
 80406f4:	f043 0301 	orr.w	r3, r3, #1
 80406f8:	6493      	str	r3, [r2, #72]	; 0x48
 80406fa:	4b06      	ldr	r3, [pc, #24]	; (8040714 <MX_DMA_Init+0x44>)
 80406fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80406fe:	f003 0301 	and.w	r3, r3, #1
 8040702:	603b      	str	r3, [r7, #0]
 8040704:	683b      	ldr	r3, [r7, #0]

}
 8040706:	bf00      	nop
 8040708:	370c      	adds	r7, #12
 804070a:	46bd      	mov	sp, r7
 804070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040710:	4770      	bx	lr
 8040712:	bf00      	nop
 8040714:	40021000 	.word	0x40021000

08040718 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040718:	b580      	push	{r7, lr}
 804071a:	b088      	sub	sp, #32
 804071c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804071e:	f107 030c 	add.w	r3, r7, #12
 8040722:	2200      	movs	r2, #0
 8040724:	601a      	str	r2, [r3, #0]
 8040726:	605a      	str	r2, [r3, #4]
 8040728:	609a      	str	r2, [r3, #8]
 804072a:	60da      	str	r2, [r3, #12]
 804072c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 804072e:	4b1e      	ldr	r3, [pc, #120]	; (80407a8 <MX_GPIO_Init+0x90>)
 8040730:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040732:	4a1d      	ldr	r2, [pc, #116]	; (80407a8 <MX_GPIO_Init+0x90>)
 8040734:	f043 0304 	orr.w	r3, r3, #4
 8040738:	64d3      	str	r3, [r2, #76]	; 0x4c
 804073a:	4b1b      	ldr	r3, [pc, #108]	; (80407a8 <MX_GPIO_Init+0x90>)
 804073c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804073e:	f003 0304 	and.w	r3, r3, #4
 8040742:	60bb      	str	r3, [r7, #8]
 8040744:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040746:	4b18      	ldr	r3, [pc, #96]	; (80407a8 <MX_GPIO_Init+0x90>)
 8040748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804074a:	4a17      	ldr	r2, [pc, #92]	; (80407a8 <MX_GPIO_Init+0x90>)
 804074c:	f043 0308 	orr.w	r3, r3, #8
 8040750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040752:	4b15      	ldr	r3, [pc, #84]	; (80407a8 <MX_GPIO_Init+0x90>)
 8040754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040756:	f003 0308 	and.w	r3, r3, #8
 804075a:	607b      	str	r3, [r7, #4]
 804075c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(WHITE_LED_GPIO_Port, WHITE_LED_Pin, GPIO_PIN_RESET);
 804075e:	2200      	movs	r2, #0
 8040760:	2140      	movs	r1, #64	; 0x40
 8040762:	4812      	ldr	r0, [pc, #72]	; (80407ac <MX_GPIO_Init+0x94>)
 8040764:	f000 fc3c 	bl	8040fe0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : WHITE_LED_Pin */
  GPIO_InitStruct.Pin = WHITE_LED_Pin;
 8040768:	2340      	movs	r3, #64	; 0x40
 804076a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 804076c:	2301      	movs	r3, #1
 804076e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040770:	2300      	movs	r3, #0
 8040772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040774:	2300      	movs	r3, #0
 8040776:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(WHITE_LED_GPIO_Port, &GPIO_InitStruct);
 8040778:	f107 030c 	add.w	r3, r7, #12
 804077c:	4619      	mov	r1, r3
 804077e:	480b      	ldr	r0, [pc, #44]	; (80407ac <MX_GPIO_Init+0x94>)
 8040780:	f000 faae 	bl	8040ce0 <HAL_GPIO_Init>

  /*Configure GPIO pin : IR_SENSOR_PIN_Pin */
  GPIO_InitStruct.Pin = IR_SENSOR_PIN_Pin;
 8040784:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8040788:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 804078a:	2300      	movs	r3, #0
 804078c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 804078e:	2301      	movs	r3, #1
 8040790:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(IR_SENSOR_PIN_GPIO_Port, &GPIO_InitStruct);
 8040792:	f107 030c 	add.w	r3, r7, #12
 8040796:	4619      	mov	r1, r3
 8040798:	4805      	ldr	r0, [pc, #20]	; (80407b0 <MX_GPIO_Init+0x98>)
 804079a:	f000 faa1 	bl	8040ce0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 804079e:	bf00      	nop
 80407a0:	3720      	adds	r7, #32
 80407a2:	46bd      	mov	sp, r7
 80407a4:	bd80      	pop	{r7, pc}
 80407a6:	bf00      	nop
 80407a8:	40021000 	.word	0x40021000
 80407ac:	42020800 	.word	0x42020800
 80407b0:	42020c00 	.word	0x42020c00

080407b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80407b4:	b480      	push	{r7}
 80407b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80407b8:	b672      	cpsid	i
}
 80407ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80407bc:	e7fe      	b.n	80407bc <Error_Handler+0x8>
	...

080407c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80407c0:	b480      	push	{r7}
 80407c2:	b083      	sub	sp, #12
 80407c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80407c6:	4b0f      	ldr	r3, [pc, #60]	; (8040804 <HAL_MspInit+0x44>)
 80407c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80407ca:	4a0e      	ldr	r2, [pc, #56]	; (8040804 <HAL_MspInit+0x44>)
 80407cc:	f043 0301 	orr.w	r3, r3, #1
 80407d0:	6613      	str	r3, [r2, #96]	; 0x60
 80407d2:	4b0c      	ldr	r3, [pc, #48]	; (8040804 <HAL_MspInit+0x44>)
 80407d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80407d6:	f003 0301 	and.w	r3, r3, #1
 80407da:	607b      	str	r3, [r7, #4]
 80407dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80407de:	4b09      	ldr	r3, [pc, #36]	; (8040804 <HAL_MspInit+0x44>)
 80407e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80407e2:	4a08      	ldr	r2, [pc, #32]	; (8040804 <HAL_MspInit+0x44>)
 80407e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80407e8:	6593      	str	r3, [r2, #88]	; 0x58
 80407ea:	4b06      	ldr	r3, [pc, #24]	; (8040804 <HAL_MspInit+0x44>)
 80407ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80407ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80407f2:	603b      	str	r3, [r7, #0]
 80407f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80407f6:	bf00      	nop
 80407f8:	370c      	adds	r7, #12
 80407fa:	46bd      	mov	sp, r7
 80407fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040800:	4770      	bx	lr
 8040802:	bf00      	nop
 8040804:	40021000 	.word	0x40021000

08040808 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8040808:	b580      	push	{r7, lr}
 804080a:	b084      	sub	sp, #16
 804080c:	af00      	add	r7, sp, #0
 804080e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8040810:	687b      	ldr	r3, [r7, #4]
 8040812:	681b      	ldr	r3, [r3, #0]
 8040814:	4a0d      	ldr	r2, [pc, #52]	; (804084c <HAL_TIM_Base_MspInit+0x44>)
 8040816:	4293      	cmp	r3, r2
 8040818:	d113      	bne.n	8040842 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 804081a:	4b0d      	ldr	r3, [pc, #52]	; (8040850 <HAL_TIM_Base_MspInit+0x48>)
 804081c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804081e:	4a0c      	ldr	r2, [pc, #48]	; (8040850 <HAL_TIM_Base_MspInit+0x48>)
 8040820:	f043 0304 	orr.w	r3, r3, #4
 8040824:	6593      	str	r3, [r2, #88]	; 0x58
 8040826:	4b0a      	ldr	r3, [pc, #40]	; (8040850 <HAL_TIM_Base_MspInit+0x48>)
 8040828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804082a:	f003 0304 	and.w	r3, r3, #4
 804082e:	60fb      	str	r3, [r7, #12]
 8040830:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8040832:	2200      	movs	r2, #0
 8040834:	2100      	movs	r1, #0
 8040836:	202f      	movs	r0, #47	; 0x2f
 8040838:	f000 fa1d 	bl	8040c76 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 804083c:	202f      	movs	r0, #47	; 0x2f
 804083e:	f000 fa34 	bl	8040caa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8040842:	bf00      	nop
 8040844:	3710      	adds	r7, #16
 8040846:	46bd      	mov	sp, r7
 8040848:	bd80      	pop	{r7, pc}
 804084a:	bf00      	nop
 804084c:	40000800 	.word	0x40000800
 8040850:	40021000 	.word	0x40021000

08040854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040854:	b580      	push	{r7, lr}
 8040856:	b0ae      	sub	sp, #184	; 0xb8
 8040858:	af00      	add	r7, sp, #0
 804085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804085c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040860:	2200      	movs	r2, #0
 8040862:	601a      	str	r2, [r3, #0]
 8040864:	605a      	str	r2, [r3, #4]
 8040866:	609a      	str	r2, [r3, #8]
 8040868:	60da      	str	r2, [r3, #12]
 804086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 804086c:	f107 0310 	add.w	r3, r7, #16
 8040870:	2294      	movs	r2, #148	; 0x94
 8040872:	2100      	movs	r1, #0
 8040874:	4618      	mov	r0, r3
 8040876:	f002 fca6 	bl	80431c6 <memset>
  if(huart->Instance==USART3)
 804087a:	687b      	ldr	r3, [r7, #4]
 804087c:	681b      	ldr	r3, [r3, #0]
 804087e:	4a21      	ldr	r2, [pc, #132]	; (8040904 <HAL_UART_MspInit+0xb0>)
 8040880:	4293      	cmp	r3, r2
 8040882:	d13b      	bne.n	80408fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8040884:	2304      	movs	r3, #4
 8040886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8040888:	2300      	movs	r3, #0
 804088a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804088c:	f107 0310 	add.w	r3, r7, #16
 8040890:	4618      	mov	r0, r3
 8040892:	f000 fc97 	bl	80411c4 <HAL_RCCEx_PeriphCLKConfig>
 8040896:	4603      	mov	r3, r0
 8040898:	2b00      	cmp	r3, #0
 804089a:	d001      	beq.n	80408a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 804089c:	f7ff ff8a 	bl	80407b4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80408a0:	4b19      	ldr	r3, [pc, #100]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408a4:	4a18      	ldr	r2, [pc, #96]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80408aa:	6593      	str	r3, [r2, #88]	; 0x58
 80408ac:	4b16      	ldr	r3, [pc, #88]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80408b0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80408b4:	60fb      	str	r3, [r7, #12]
 80408b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80408b8:	4b13      	ldr	r3, [pc, #76]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80408bc:	4a12      	ldr	r2, [pc, #72]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408be:	f043 0304 	orr.w	r3, r3, #4
 80408c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80408c4:	4b10      	ldr	r3, [pc, #64]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80408c8:	f003 0304 	and.w	r3, r3, #4
 80408cc:	60bb      	str	r3, [r7, #8]
 80408ce:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC11     ------> USART3_RX
    PC10     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_10;
 80408d0:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80408d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408d8:	2302      	movs	r3, #2
 80408da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408de:	2300      	movs	r3, #0
 80408e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80408e4:	2300      	movs	r3, #0
 80408e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80408ea:	2307      	movs	r3, #7
 80408ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80408f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80408f4:	4619      	mov	r1, r3
 80408f6:	4805      	ldr	r0, [pc, #20]	; (804090c <HAL_UART_MspInit+0xb8>)
 80408f8:	f000 f9f2 	bl	8040ce0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80408fc:	bf00      	nop
 80408fe:	37b8      	adds	r7, #184	; 0xb8
 8040900:	46bd      	mov	sp, r7
 8040902:	bd80      	pop	{r7, pc}
 8040904:	40004800 	.word	0x40004800
 8040908:	40021000 	.word	0x40021000
 804090c:	42020800 	.word	0x42020800

08040910 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040910:	b480      	push	{r7}
 8040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040914:	e7fe      	b.n	8040914 <MemManage_Handler+0x4>

08040916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040916:	b480      	push	{r7}
 8040918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804091a:	e7fe      	b.n	804091a <UsageFault_Handler+0x4>

0804091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804091c:	b480      	push	{r7}
 804091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040920:	bf00      	nop
 8040922:	46bd      	mov	sp, r7
 8040924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040928:	4770      	bx	lr

0804092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804092a:	b480      	push	{r7}
 804092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804092e:	bf00      	nop
 8040930:	46bd      	mov	sp, r7
 8040932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040936:	4770      	bx	lr

08040938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040938:	b580      	push	{r7, lr}
 804093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804093c:	f000 f8a0 	bl	8040a80 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8040940:	bf00      	nop
 8040942:	bd80      	pop	{r7, pc}

08040944 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8040944:	b580      	push	{r7, lr}
 8040946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
//	SECURE_Send_Mem_Block();
  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8040948:	4802      	ldr	r0, [pc, #8]	; (8040954 <TIM4_IRQHandler+0x10>)
 804094a:	f001 f9a8 	bl	8041c9e <HAL_TIM_IRQHandler>
//  SECURE_Send_Mem_Block();
//  long end = HAL_GetTick();
//  SECURE_print_Num("Total time taken: ", end-start);
//  return;
  /* USER CODE END TIM4_IRQn 1 */
}
 804094e:	bf00      	nop
 8040950:	bd80      	pop	{r7, pc}
 8040952:	bf00      	nop
 8040954:	20018028 	.word	0x20018028

08040958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040958:	b480      	push	{r7}
 804095a:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 804095c:	bf00      	nop
 804095e:	46bd      	mov	sp, r7
 8040960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040964:	4770      	bx	lr
	...

08040968 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040968:	b580      	push	{r7, lr}
 804096a:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 804096c:	f002 fc48 	bl	8043200 <__SECURE_SystemCoreClockUpdate_veneer>
 8040970:	4603      	mov	r3, r0
 8040972:	4a02      	ldr	r2, [pc, #8]	; (804097c <SystemCoreClockUpdate+0x14>)
 8040974:	6013      	str	r3, [r2, #0]
}
 8040976:	bf00      	nop
 8040978:	bd80      	pop	{r7, pc}
 804097a:	bf00      	nop
 804097c:	20018000 	.word	0x20018000

08040980 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040980:	f8df d034 	ldr.w	sp, [pc, #52]	; 80409b8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8040984:	f7ff ffe8 	bl	8040958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040988:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 804098a:	e003      	b.n	8040994 <LoopCopyDataInit>

0804098c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 804098c:	4b0b      	ldr	r3, [pc, #44]	; (80409bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 804098e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040990:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8040992:	3104      	adds	r1, #4

08040994 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8040994:	480a      	ldr	r0, [pc, #40]	; (80409c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8040996:	4b0b      	ldr	r3, [pc, #44]	; (80409c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8040998:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 804099a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 804099c:	d3f6      	bcc.n	804098c <CopyDataInit>
	ldr	r2, =_sbss
 804099e:	4a0a      	ldr	r2, [pc, #40]	; (80409c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 80409a0:	e002      	b.n	80409a8 <LoopFillZerobss>

080409a2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80409a2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80409a4:	f842 3b04 	str.w	r3, [r2], #4

080409a8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80409a8:	4b08      	ldr	r3, [pc, #32]	; (80409cc <LoopForever+0x16>)
	cmp	r2, r3
 80409aa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80409ac:	d3f9      	bcc.n	80409a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80409ae:	f002 fbd9 	bl	8043164 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80409b2:	f7ff fdd1 	bl	8040558 <main>

080409b6 <LoopForever>:

LoopForever:
    b LoopForever
 80409b6:	e7fe      	b.n	80409b6 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80409b8:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80409bc:	080433a8 	.word	0x080433a8
	ldr	r0, =_sdata
 80409c0:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80409c4:	2001800c 	.word	0x2001800c
	ldr	r2, =_sbss
 80409c8:	2001800c 	.word	0x2001800c
	ldr	r3, = _ebss
 80409cc:	2001810c 	.word	0x2001810c

080409d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80409d0:	e7fe      	b.n	80409d0 <ADC1_2_IRQHandler>

080409d2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80409d2:	b580      	push	{r7, lr}
 80409d4:	b082      	sub	sp, #8
 80409d6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80409d8:	2300      	movs	r3, #0
 80409da:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80409dc:	2004      	movs	r0, #4
 80409de:	f000 f93f 	bl	8040c60 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80409e2:	f7ff ffc1 	bl	8040968 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80409e6:	2000      	movs	r0, #0
 80409e8:	f000 f80e 	bl	8040a08 <HAL_InitTick>
 80409ec:	4603      	mov	r3, r0
 80409ee:	2b00      	cmp	r3, #0
 80409f0:	d002      	beq.n	80409f8 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 80409f2:	2301      	movs	r3, #1
 80409f4:	71fb      	strb	r3, [r7, #7]
 80409f6:	e001      	b.n	80409fc <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80409f8:	f7ff fee2 	bl	80407c0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80409fc:	79fb      	ldrb	r3, [r7, #7]
}
 80409fe:	4618      	mov	r0, r3
 8040a00:	3708      	adds	r7, #8
 8040a02:	46bd      	mov	sp, r7
 8040a04:	bd80      	pop	{r7, pc}
	...

08040a08 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040a08:	b580      	push	{r7, lr}
 8040a0a:	b084      	sub	sp, #16
 8040a0c:	af00      	add	r7, sp, #0
 8040a0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040a10:	2300      	movs	r3, #0
 8040a12:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040a14:	4b17      	ldr	r3, [pc, #92]	; (8040a74 <HAL_InitTick+0x6c>)
 8040a16:	781b      	ldrb	r3, [r3, #0]
 8040a18:	2b00      	cmp	r3, #0
 8040a1a:	d023      	beq.n	8040a64 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040a1c:	4b16      	ldr	r3, [pc, #88]	; (8040a78 <HAL_InitTick+0x70>)
 8040a1e:	681a      	ldr	r2, [r3, #0]
 8040a20:	4b14      	ldr	r3, [pc, #80]	; (8040a74 <HAL_InitTick+0x6c>)
 8040a22:	781b      	ldrb	r3, [r3, #0]
 8040a24:	4619      	mov	r1, r3
 8040a26:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040a2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040a2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040a32:	4618      	mov	r0, r3
 8040a34:	f000 f947 	bl	8040cc6 <HAL_SYSTICK_Config>
 8040a38:	4603      	mov	r3, r0
 8040a3a:	2b00      	cmp	r3, #0
 8040a3c:	d10f      	bne.n	8040a5e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040a3e:	687b      	ldr	r3, [r7, #4]
 8040a40:	2b07      	cmp	r3, #7
 8040a42:	d809      	bhi.n	8040a58 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040a44:	2200      	movs	r2, #0
 8040a46:	6879      	ldr	r1, [r7, #4]
 8040a48:	f04f 30ff 	mov.w	r0, #4294967295
 8040a4c:	f000 f913 	bl	8040c76 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040a50:	4a0a      	ldr	r2, [pc, #40]	; (8040a7c <HAL_InitTick+0x74>)
 8040a52:	687b      	ldr	r3, [r7, #4]
 8040a54:	6013      	str	r3, [r2, #0]
 8040a56:	e007      	b.n	8040a68 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040a58:	2301      	movs	r3, #1
 8040a5a:	73fb      	strb	r3, [r7, #15]
 8040a5c:	e004      	b.n	8040a68 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040a5e:	2301      	movs	r3, #1
 8040a60:	73fb      	strb	r3, [r7, #15]
 8040a62:	e001      	b.n	8040a68 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040a64:	2301      	movs	r3, #1
 8040a66:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040a68:	7bfb      	ldrb	r3, [r7, #15]
}
 8040a6a:	4618      	mov	r0, r3
 8040a6c:	3710      	adds	r7, #16
 8040a6e:	46bd      	mov	sp, r7
 8040a70:	bd80      	pop	{r7, pc}
 8040a72:	bf00      	nop
 8040a74:	20018008 	.word	0x20018008
 8040a78:	20018000 	.word	0x20018000
 8040a7c:	20018004 	.word	0x20018004

08040a80 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040a80:	b480      	push	{r7}
 8040a82:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040a84:	4b06      	ldr	r3, [pc, #24]	; (8040aa0 <HAL_IncTick+0x20>)
 8040a86:	781b      	ldrb	r3, [r3, #0]
 8040a88:	461a      	mov	r2, r3
 8040a8a:	4b06      	ldr	r3, [pc, #24]	; (8040aa4 <HAL_IncTick+0x24>)
 8040a8c:	681b      	ldr	r3, [r3, #0]
 8040a8e:	4413      	add	r3, r2
 8040a90:	4a04      	ldr	r2, [pc, #16]	; (8040aa4 <HAL_IncTick+0x24>)
 8040a92:	6013      	str	r3, [r2, #0]
}
 8040a94:	bf00      	nop
 8040a96:	46bd      	mov	sp, r7
 8040a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a9c:	4770      	bx	lr
 8040a9e:	bf00      	nop
 8040aa0:	20018008 	.word	0x20018008
 8040aa4:	20018108 	.word	0x20018108

08040aa8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040aa8:	b480      	push	{r7}
 8040aaa:	af00      	add	r7, sp, #0
  return uwTick;
 8040aac:	4b03      	ldr	r3, [pc, #12]	; (8040abc <HAL_GetTick+0x14>)
 8040aae:	681b      	ldr	r3, [r3, #0]
}
 8040ab0:	4618      	mov	r0, r3
 8040ab2:	46bd      	mov	sp, r7
 8040ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040ab8:	4770      	bx	lr
 8040aba:	bf00      	nop
 8040abc:	20018108 	.word	0x20018108

08040ac0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ac0:	b480      	push	{r7}
 8040ac2:	b085      	sub	sp, #20
 8040ac4:	af00      	add	r7, sp, #0
 8040ac6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040ac8:	687b      	ldr	r3, [r7, #4]
 8040aca:	f003 0307 	and.w	r3, r3, #7
 8040ace:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040ad0:	4b0c      	ldr	r3, [pc, #48]	; (8040b04 <__NVIC_SetPriorityGrouping+0x44>)
 8040ad2:	68db      	ldr	r3, [r3, #12]
 8040ad4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040ad6:	68ba      	ldr	r2, [r7, #8]
 8040ad8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040adc:	4013      	ands	r3, r2
 8040ade:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040ae0:	68fb      	ldr	r3, [r7, #12]
 8040ae2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040ae4:	68bb      	ldr	r3, [r7, #8]
 8040ae6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040ae8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040aec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040af0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040af2:	4a04      	ldr	r2, [pc, #16]	; (8040b04 <__NVIC_SetPriorityGrouping+0x44>)
 8040af4:	68bb      	ldr	r3, [r7, #8]
 8040af6:	60d3      	str	r3, [r2, #12]
}
 8040af8:	bf00      	nop
 8040afa:	3714      	adds	r7, #20
 8040afc:	46bd      	mov	sp, r7
 8040afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b02:	4770      	bx	lr
 8040b04:	e000ed00 	.word	0xe000ed00

08040b08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040b08:	b480      	push	{r7}
 8040b0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040b0c:	4b04      	ldr	r3, [pc, #16]	; (8040b20 <__NVIC_GetPriorityGrouping+0x18>)
 8040b0e:	68db      	ldr	r3, [r3, #12]
 8040b10:	0a1b      	lsrs	r3, r3, #8
 8040b12:	f003 0307 	and.w	r3, r3, #7
}
 8040b16:	4618      	mov	r0, r3
 8040b18:	46bd      	mov	sp, r7
 8040b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b1e:	4770      	bx	lr
 8040b20:	e000ed00 	.word	0xe000ed00

08040b24 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040b24:	b480      	push	{r7}
 8040b26:	b083      	sub	sp, #12
 8040b28:	af00      	add	r7, sp, #0
 8040b2a:	4603      	mov	r3, r0
 8040b2c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040b2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b32:	2b00      	cmp	r3, #0
 8040b34:	db0b      	blt.n	8040b4e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8040b36:	79fb      	ldrb	r3, [r7, #7]
 8040b38:	f003 021f 	and.w	r2, r3, #31
 8040b3c:	4907      	ldr	r1, [pc, #28]	; (8040b5c <__NVIC_EnableIRQ+0x38>)
 8040b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b42:	095b      	lsrs	r3, r3, #5
 8040b44:	2001      	movs	r0, #1
 8040b46:	fa00 f202 	lsl.w	r2, r0, r2
 8040b4a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8040b4e:	bf00      	nop
 8040b50:	370c      	adds	r7, #12
 8040b52:	46bd      	mov	sp, r7
 8040b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b58:	4770      	bx	lr
 8040b5a:	bf00      	nop
 8040b5c:	e000e100 	.word	0xe000e100

08040b60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040b60:	b480      	push	{r7}
 8040b62:	b083      	sub	sp, #12
 8040b64:	af00      	add	r7, sp, #0
 8040b66:	4603      	mov	r3, r0
 8040b68:	6039      	str	r1, [r7, #0]
 8040b6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040b6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b70:	2b00      	cmp	r3, #0
 8040b72:	db0a      	blt.n	8040b8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040b74:	683b      	ldr	r3, [r7, #0]
 8040b76:	b2da      	uxtb	r2, r3
 8040b78:	490c      	ldr	r1, [pc, #48]	; (8040bac <__NVIC_SetPriority+0x4c>)
 8040b7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040b7e:	0152      	lsls	r2, r2, #5
 8040b80:	b2d2      	uxtb	r2, r2
 8040b82:	440b      	add	r3, r1
 8040b84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040b88:	e00a      	b.n	8040ba0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040b8a:	683b      	ldr	r3, [r7, #0]
 8040b8c:	b2da      	uxtb	r2, r3
 8040b8e:	4908      	ldr	r1, [pc, #32]	; (8040bb0 <__NVIC_SetPriority+0x50>)
 8040b90:	79fb      	ldrb	r3, [r7, #7]
 8040b92:	f003 030f 	and.w	r3, r3, #15
 8040b96:	3b04      	subs	r3, #4
 8040b98:	0152      	lsls	r2, r2, #5
 8040b9a:	b2d2      	uxtb	r2, r2
 8040b9c:	440b      	add	r3, r1
 8040b9e:	761a      	strb	r2, [r3, #24]
}
 8040ba0:	bf00      	nop
 8040ba2:	370c      	adds	r7, #12
 8040ba4:	46bd      	mov	sp, r7
 8040ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040baa:	4770      	bx	lr
 8040bac:	e000e100 	.word	0xe000e100
 8040bb0:	e000ed00 	.word	0xe000ed00

08040bb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040bb4:	b480      	push	{r7}
 8040bb6:	b089      	sub	sp, #36	; 0x24
 8040bb8:	af00      	add	r7, sp, #0
 8040bba:	60f8      	str	r0, [r7, #12]
 8040bbc:	60b9      	str	r1, [r7, #8]
 8040bbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040bc0:	68fb      	ldr	r3, [r7, #12]
 8040bc2:	f003 0307 	and.w	r3, r3, #7
 8040bc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040bc8:	69fb      	ldr	r3, [r7, #28]
 8040bca:	f1c3 0307 	rsb	r3, r3, #7
 8040bce:	2b03      	cmp	r3, #3
 8040bd0:	bf28      	it	cs
 8040bd2:	2303      	movcs	r3, #3
 8040bd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040bd6:	69fb      	ldr	r3, [r7, #28]
 8040bd8:	3303      	adds	r3, #3
 8040bda:	2b06      	cmp	r3, #6
 8040bdc:	d902      	bls.n	8040be4 <NVIC_EncodePriority+0x30>
 8040bde:	69fb      	ldr	r3, [r7, #28]
 8040be0:	3b04      	subs	r3, #4
 8040be2:	e000      	b.n	8040be6 <NVIC_EncodePriority+0x32>
 8040be4:	2300      	movs	r3, #0
 8040be6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040be8:	f04f 32ff 	mov.w	r2, #4294967295
 8040bec:	69bb      	ldr	r3, [r7, #24]
 8040bee:	fa02 f303 	lsl.w	r3, r2, r3
 8040bf2:	43da      	mvns	r2, r3
 8040bf4:	68bb      	ldr	r3, [r7, #8]
 8040bf6:	401a      	ands	r2, r3
 8040bf8:	697b      	ldr	r3, [r7, #20]
 8040bfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040bfc:	f04f 31ff 	mov.w	r1, #4294967295
 8040c00:	697b      	ldr	r3, [r7, #20]
 8040c02:	fa01 f303 	lsl.w	r3, r1, r3
 8040c06:	43d9      	mvns	r1, r3
 8040c08:	687b      	ldr	r3, [r7, #4]
 8040c0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c0c:	4313      	orrs	r3, r2
         );
}
 8040c0e:	4618      	mov	r0, r3
 8040c10:	3724      	adds	r7, #36	; 0x24
 8040c12:	46bd      	mov	sp, r7
 8040c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c18:	4770      	bx	lr
	...

08040c1c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040c1c:	b580      	push	{r7, lr}
 8040c1e:	b082      	sub	sp, #8
 8040c20:	af00      	add	r7, sp, #0
 8040c22:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040c24:	687b      	ldr	r3, [r7, #4]
 8040c26:	3b01      	subs	r3, #1
 8040c28:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040c2c:	d301      	bcc.n	8040c32 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040c2e:	2301      	movs	r3, #1
 8040c30:	e00f      	b.n	8040c52 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040c32:	4a0a      	ldr	r2, [pc, #40]	; (8040c5c <SysTick_Config+0x40>)
 8040c34:	687b      	ldr	r3, [r7, #4]
 8040c36:	3b01      	subs	r3, #1
 8040c38:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040c3a:	2107      	movs	r1, #7
 8040c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8040c40:	f7ff ff8e 	bl	8040b60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040c44:	4b05      	ldr	r3, [pc, #20]	; (8040c5c <SysTick_Config+0x40>)
 8040c46:	2200      	movs	r2, #0
 8040c48:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040c4a:	4b04      	ldr	r3, [pc, #16]	; (8040c5c <SysTick_Config+0x40>)
 8040c4c:	2207      	movs	r2, #7
 8040c4e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040c50:	2300      	movs	r3, #0
}
 8040c52:	4618      	mov	r0, r3
 8040c54:	3708      	adds	r7, #8
 8040c56:	46bd      	mov	sp, r7
 8040c58:	bd80      	pop	{r7, pc}
 8040c5a:	bf00      	nop
 8040c5c:	e000e010 	.word	0xe000e010

08040c60 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040c60:	b580      	push	{r7, lr}
 8040c62:	b082      	sub	sp, #8
 8040c64:	af00      	add	r7, sp, #0
 8040c66:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040c68:	6878      	ldr	r0, [r7, #4]
 8040c6a:	f7ff ff29 	bl	8040ac0 <__NVIC_SetPriorityGrouping>
}
 8040c6e:	bf00      	nop
 8040c70:	3708      	adds	r7, #8
 8040c72:	46bd      	mov	sp, r7
 8040c74:	bd80      	pop	{r7, pc}

08040c76 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c76:	b580      	push	{r7, lr}
 8040c78:	b086      	sub	sp, #24
 8040c7a:	af00      	add	r7, sp, #0
 8040c7c:	4603      	mov	r3, r0
 8040c7e:	60b9      	str	r1, [r7, #8]
 8040c80:	607a      	str	r2, [r7, #4]
 8040c82:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040c84:	f7ff ff40 	bl	8040b08 <__NVIC_GetPriorityGrouping>
 8040c88:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040c8a:	687a      	ldr	r2, [r7, #4]
 8040c8c:	68b9      	ldr	r1, [r7, #8]
 8040c8e:	6978      	ldr	r0, [r7, #20]
 8040c90:	f7ff ff90 	bl	8040bb4 <NVIC_EncodePriority>
 8040c94:	4602      	mov	r2, r0
 8040c96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040c9a:	4611      	mov	r1, r2
 8040c9c:	4618      	mov	r0, r3
 8040c9e:	f7ff ff5f 	bl	8040b60 <__NVIC_SetPriority>
}
 8040ca2:	bf00      	nop
 8040ca4:	3718      	adds	r7, #24
 8040ca6:	46bd      	mov	sp, r7
 8040ca8:	bd80      	pop	{r7, pc}

08040caa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8040caa:	b580      	push	{r7, lr}
 8040cac:	b082      	sub	sp, #8
 8040cae:	af00      	add	r7, sp, #0
 8040cb0:	4603      	mov	r3, r0
 8040cb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8040cb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040cb8:	4618      	mov	r0, r3
 8040cba:	f7ff ff33 	bl	8040b24 <__NVIC_EnableIRQ>
}
 8040cbe:	bf00      	nop
 8040cc0:	3708      	adds	r7, #8
 8040cc2:	46bd      	mov	sp, r7
 8040cc4:	bd80      	pop	{r7, pc}

08040cc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040cc6:	b580      	push	{r7, lr}
 8040cc8:	b082      	sub	sp, #8
 8040cca:	af00      	add	r7, sp, #0
 8040ccc:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040cce:	6878      	ldr	r0, [r7, #4]
 8040cd0:	f7ff ffa4 	bl	8040c1c <SysTick_Config>
 8040cd4:	4603      	mov	r3, r0
}
 8040cd6:	4618      	mov	r0, r3
 8040cd8:	3708      	adds	r7, #8
 8040cda:	46bd      	mov	sp, r7
 8040cdc:	bd80      	pop	{r7, pc}
	...

08040ce0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040ce0:	b480      	push	{r7}
 8040ce2:	b087      	sub	sp, #28
 8040ce4:	af00      	add	r7, sp, #0
 8040ce6:	6078      	str	r0, [r7, #4]
 8040ce8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040cea:	2300      	movs	r3, #0
 8040cec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040cee:	e158      	b.n	8040fa2 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040cf0:	683b      	ldr	r3, [r7, #0]
 8040cf2:	681a      	ldr	r2, [r3, #0]
 8040cf4:	2101      	movs	r1, #1
 8040cf6:	697b      	ldr	r3, [r7, #20]
 8040cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8040cfc:	4013      	ands	r3, r2
 8040cfe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8040d00:	68fb      	ldr	r3, [r7, #12]
 8040d02:	2b00      	cmp	r3, #0
 8040d04:	f000 814a 	beq.w	8040f9c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040d08:	683b      	ldr	r3, [r7, #0]
 8040d0a:	685b      	ldr	r3, [r3, #4]
 8040d0c:	f003 0303 	and.w	r3, r3, #3
 8040d10:	2b01      	cmp	r3, #1
 8040d12:	d005      	beq.n	8040d20 <HAL_GPIO_Init+0x40>
 8040d14:	683b      	ldr	r3, [r7, #0]
 8040d16:	685b      	ldr	r3, [r3, #4]
 8040d18:	f003 0303 	and.w	r3, r3, #3
 8040d1c:	2b02      	cmp	r3, #2
 8040d1e:	d130      	bne.n	8040d82 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040d20:	687b      	ldr	r3, [r7, #4]
 8040d22:	689b      	ldr	r3, [r3, #8]
 8040d24:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040d26:	697b      	ldr	r3, [r7, #20]
 8040d28:	005b      	lsls	r3, r3, #1
 8040d2a:	2203      	movs	r2, #3
 8040d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8040d30:	43db      	mvns	r3, r3
 8040d32:	693a      	ldr	r2, [r7, #16]
 8040d34:	4013      	ands	r3, r2
 8040d36:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040d38:	683b      	ldr	r3, [r7, #0]
 8040d3a:	68da      	ldr	r2, [r3, #12]
 8040d3c:	697b      	ldr	r3, [r7, #20]
 8040d3e:	005b      	lsls	r3, r3, #1
 8040d40:	fa02 f303 	lsl.w	r3, r2, r3
 8040d44:	693a      	ldr	r2, [r7, #16]
 8040d46:	4313      	orrs	r3, r2
 8040d48:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040d4a:	687b      	ldr	r3, [r7, #4]
 8040d4c:	693a      	ldr	r2, [r7, #16]
 8040d4e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040d50:	687b      	ldr	r3, [r7, #4]
 8040d52:	685b      	ldr	r3, [r3, #4]
 8040d54:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040d56:	2201      	movs	r2, #1
 8040d58:	697b      	ldr	r3, [r7, #20]
 8040d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8040d5e:	43db      	mvns	r3, r3
 8040d60:	693a      	ldr	r2, [r7, #16]
 8040d62:	4013      	ands	r3, r2
 8040d64:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040d66:	683b      	ldr	r3, [r7, #0]
 8040d68:	685b      	ldr	r3, [r3, #4]
 8040d6a:	091b      	lsrs	r3, r3, #4
 8040d6c:	f003 0201 	and.w	r2, r3, #1
 8040d70:	697b      	ldr	r3, [r7, #20]
 8040d72:	fa02 f303 	lsl.w	r3, r2, r3
 8040d76:	693a      	ldr	r2, [r7, #16]
 8040d78:	4313      	orrs	r3, r2
 8040d7a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040d7c:	687b      	ldr	r3, [r7, #4]
 8040d7e:	693a      	ldr	r2, [r7, #16]
 8040d80:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040d82:	683b      	ldr	r3, [r7, #0]
 8040d84:	685b      	ldr	r3, [r3, #4]
 8040d86:	f003 0303 	and.w	r3, r3, #3
 8040d8a:	2b03      	cmp	r3, #3
 8040d8c:	d017      	beq.n	8040dbe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8040d8e:	687b      	ldr	r3, [r7, #4]
 8040d90:	68db      	ldr	r3, [r3, #12]
 8040d92:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040d94:	697b      	ldr	r3, [r7, #20]
 8040d96:	005b      	lsls	r3, r3, #1
 8040d98:	2203      	movs	r2, #3
 8040d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8040d9e:	43db      	mvns	r3, r3
 8040da0:	693a      	ldr	r2, [r7, #16]
 8040da2:	4013      	ands	r3, r2
 8040da4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040da6:	683b      	ldr	r3, [r7, #0]
 8040da8:	689a      	ldr	r2, [r3, #8]
 8040daa:	697b      	ldr	r3, [r7, #20]
 8040dac:	005b      	lsls	r3, r3, #1
 8040dae:	fa02 f303 	lsl.w	r3, r2, r3
 8040db2:	693a      	ldr	r2, [r7, #16]
 8040db4:	4313      	orrs	r3, r2
 8040db6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040db8:	687b      	ldr	r3, [r7, #4]
 8040dba:	693a      	ldr	r2, [r7, #16]
 8040dbc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040dbe:	683b      	ldr	r3, [r7, #0]
 8040dc0:	685b      	ldr	r3, [r3, #4]
 8040dc2:	f003 0303 	and.w	r3, r3, #3
 8040dc6:	2b02      	cmp	r3, #2
 8040dc8:	d123      	bne.n	8040e12 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040dca:	697b      	ldr	r3, [r7, #20]
 8040dcc:	08da      	lsrs	r2, r3, #3
 8040dce:	687b      	ldr	r3, [r7, #4]
 8040dd0:	3208      	adds	r2, #8
 8040dd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040dd6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040dd8:	697b      	ldr	r3, [r7, #20]
 8040dda:	f003 0307 	and.w	r3, r3, #7
 8040dde:	009b      	lsls	r3, r3, #2
 8040de0:	220f      	movs	r2, #15
 8040de2:	fa02 f303 	lsl.w	r3, r2, r3
 8040de6:	43db      	mvns	r3, r3
 8040de8:	693a      	ldr	r2, [r7, #16]
 8040dea:	4013      	ands	r3, r2
 8040dec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040dee:	683b      	ldr	r3, [r7, #0]
 8040df0:	691a      	ldr	r2, [r3, #16]
 8040df2:	697b      	ldr	r3, [r7, #20]
 8040df4:	f003 0307 	and.w	r3, r3, #7
 8040df8:	009b      	lsls	r3, r3, #2
 8040dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8040dfe:	693a      	ldr	r2, [r7, #16]
 8040e00:	4313      	orrs	r3, r2
 8040e02:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040e04:	697b      	ldr	r3, [r7, #20]
 8040e06:	08da      	lsrs	r2, r3, #3
 8040e08:	687b      	ldr	r3, [r7, #4]
 8040e0a:	3208      	adds	r2, #8
 8040e0c:	6939      	ldr	r1, [r7, #16]
 8040e0e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040e12:	687b      	ldr	r3, [r7, #4]
 8040e14:	681b      	ldr	r3, [r3, #0]
 8040e16:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040e18:	697b      	ldr	r3, [r7, #20]
 8040e1a:	005b      	lsls	r3, r3, #1
 8040e1c:	2203      	movs	r2, #3
 8040e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8040e22:	43db      	mvns	r3, r3
 8040e24:	693a      	ldr	r2, [r7, #16]
 8040e26:	4013      	ands	r3, r2
 8040e28:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040e2a:	683b      	ldr	r3, [r7, #0]
 8040e2c:	685b      	ldr	r3, [r3, #4]
 8040e2e:	f003 0203 	and.w	r2, r3, #3
 8040e32:	697b      	ldr	r3, [r7, #20]
 8040e34:	005b      	lsls	r3, r3, #1
 8040e36:	fa02 f303 	lsl.w	r3, r2, r3
 8040e3a:	693a      	ldr	r2, [r7, #16]
 8040e3c:	4313      	orrs	r3, r2
 8040e3e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040e40:	687b      	ldr	r3, [r7, #4]
 8040e42:	693a      	ldr	r2, [r7, #16]
 8040e44:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040e46:	683b      	ldr	r3, [r7, #0]
 8040e48:	685b      	ldr	r3, [r3, #4]
 8040e4a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040e4e:	2b00      	cmp	r3, #0
 8040e50:	f000 80a4 	beq.w	8040f9c <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040e54:	4a5a      	ldr	r2, [pc, #360]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040e56:	697b      	ldr	r3, [r7, #20]
 8040e58:	089b      	lsrs	r3, r3, #2
 8040e5a:	3318      	adds	r3, #24
 8040e5c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040e60:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040e62:	697b      	ldr	r3, [r7, #20]
 8040e64:	f003 0303 	and.w	r3, r3, #3
 8040e68:	00db      	lsls	r3, r3, #3
 8040e6a:	220f      	movs	r2, #15
 8040e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8040e70:	43db      	mvns	r3, r3
 8040e72:	693a      	ldr	r2, [r7, #16]
 8040e74:	4013      	ands	r3, r2
 8040e76:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040e78:	687b      	ldr	r3, [r7, #4]
 8040e7a:	4a52      	ldr	r2, [pc, #328]	; (8040fc4 <HAL_GPIO_Init+0x2e4>)
 8040e7c:	4293      	cmp	r3, r2
 8040e7e:	d025      	beq.n	8040ecc <HAL_GPIO_Init+0x1ec>
 8040e80:	687b      	ldr	r3, [r7, #4]
 8040e82:	4a51      	ldr	r2, [pc, #324]	; (8040fc8 <HAL_GPIO_Init+0x2e8>)
 8040e84:	4293      	cmp	r3, r2
 8040e86:	d01f      	beq.n	8040ec8 <HAL_GPIO_Init+0x1e8>
 8040e88:	687b      	ldr	r3, [r7, #4]
 8040e8a:	4a50      	ldr	r2, [pc, #320]	; (8040fcc <HAL_GPIO_Init+0x2ec>)
 8040e8c:	4293      	cmp	r3, r2
 8040e8e:	d019      	beq.n	8040ec4 <HAL_GPIO_Init+0x1e4>
 8040e90:	687b      	ldr	r3, [r7, #4]
 8040e92:	4a4f      	ldr	r2, [pc, #316]	; (8040fd0 <HAL_GPIO_Init+0x2f0>)
 8040e94:	4293      	cmp	r3, r2
 8040e96:	d013      	beq.n	8040ec0 <HAL_GPIO_Init+0x1e0>
 8040e98:	687b      	ldr	r3, [r7, #4]
 8040e9a:	4a4e      	ldr	r2, [pc, #312]	; (8040fd4 <HAL_GPIO_Init+0x2f4>)
 8040e9c:	4293      	cmp	r3, r2
 8040e9e:	d00d      	beq.n	8040ebc <HAL_GPIO_Init+0x1dc>
 8040ea0:	687b      	ldr	r3, [r7, #4]
 8040ea2:	4a4d      	ldr	r2, [pc, #308]	; (8040fd8 <HAL_GPIO_Init+0x2f8>)
 8040ea4:	4293      	cmp	r3, r2
 8040ea6:	d007      	beq.n	8040eb8 <HAL_GPIO_Init+0x1d8>
 8040ea8:	687b      	ldr	r3, [r7, #4]
 8040eaa:	4a4c      	ldr	r2, [pc, #304]	; (8040fdc <HAL_GPIO_Init+0x2fc>)
 8040eac:	4293      	cmp	r3, r2
 8040eae:	d101      	bne.n	8040eb4 <HAL_GPIO_Init+0x1d4>
 8040eb0:	2306      	movs	r3, #6
 8040eb2:	e00c      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040eb4:	2307      	movs	r3, #7
 8040eb6:	e00a      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040eb8:	2305      	movs	r3, #5
 8040eba:	e008      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040ebc:	2304      	movs	r3, #4
 8040ebe:	e006      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040ec0:	2303      	movs	r3, #3
 8040ec2:	e004      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040ec4:	2302      	movs	r3, #2
 8040ec6:	e002      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040ec8:	2301      	movs	r3, #1
 8040eca:	e000      	b.n	8040ece <HAL_GPIO_Init+0x1ee>
 8040ecc:	2300      	movs	r3, #0
 8040ece:	697a      	ldr	r2, [r7, #20]
 8040ed0:	f002 0203 	and.w	r2, r2, #3
 8040ed4:	00d2      	lsls	r2, r2, #3
 8040ed6:	4093      	lsls	r3, r2
 8040ed8:	693a      	ldr	r2, [r7, #16]
 8040eda:	4313      	orrs	r3, r2
 8040edc:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040ede:	4938      	ldr	r1, [pc, #224]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040ee0:	697b      	ldr	r3, [r7, #20]
 8040ee2:	089b      	lsrs	r3, r3, #2
 8040ee4:	3318      	adds	r3, #24
 8040ee6:	693a      	ldr	r2, [r7, #16]
 8040ee8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040eec:	4b34      	ldr	r3, [pc, #208]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040eee:	681b      	ldr	r3, [r3, #0]
 8040ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040ef2:	68fb      	ldr	r3, [r7, #12]
 8040ef4:	43db      	mvns	r3, r3
 8040ef6:	693a      	ldr	r2, [r7, #16]
 8040ef8:	4013      	ands	r3, r2
 8040efa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040efc:	683b      	ldr	r3, [r7, #0]
 8040efe:	685b      	ldr	r3, [r3, #4]
 8040f00:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040f04:	2b00      	cmp	r3, #0
 8040f06:	d003      	beq.n	8040f10 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8040f08:	693a      	ldr	r2, [r7, #16]
 8040f0a:	68fb      	ldr	r3, [r7, #12]
 8040f0c:	4313      	orrs	r3, r2
 8040f0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040f10:	4a2b      	ldr	r2, [pc, #172]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f12:	693b      	ldr	r3, [r7, #16]
 8040f14:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040f16:	4b2a      	ldr	r3, [pc, #168]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f18:	685b      	ldr	r3, [r3, #4]
 8040f1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040f1c:	68fb      	ldr	r3, [r7, #12]
 8040f1e:	43db      	mvns	r3, r3
 8040f20:	693a      	ldr	r2, [r7, #16]
 8040f22:	4013      	ands	r3, r2
 8040f24:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040f26:	683b      	ldr	r3, [r7, #0]
 8040f28:	685b      	ldr	r3, [r3, #4]
 8040f2a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040f2e:	2b00      	cmp	r3, #0
 8040f30:	d003      	beq.n	8040f3a <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8040f32:	693a      	ldr	r2, [r7, #16]
 8040f34:	68fb      	ldr	r3, [r7, #12]
 8040f36:	4313      	orrs	r3, r2
 8040f38:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040f3a:	4a21      	ldr	r2, [pc, #132]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f3c:	693b      	ldr	r3, [r7, #16]
 8040f3e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8040f40:	4b1f      	ldr	r3, [pc, #124]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f42:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040f46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040f48:	68fb      	ldr	r3, [r7, #12]
 8040f4a:	43db      	mvns	r3, r3
 8040f4c:	693a      	ldr	r2, [r7, #16]
 8040f4e:	4013      	ands	r3, r2
 8040f50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040f52:	683b      	ldr	r3, [r7, #0]
 8040f54:	685b      	ldr	r3, [r3, #4]
 8040f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040f5a:	2b00      	cmp	r3, #0
 8040f5c:	d003      	beq.n	8040f66 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8040f5e:	693a      	ldr	r2, [r7, #16]
 8040f60:	68fb      	ldr	r3, [r7, #12]
 8040f62:	4313      	orrs	r3, r2
 8040f64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040f66:	4a16      	ldr	r2, [pc, #88]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f68:	693b      	ldr	r3, [r7, #16]
 8040f6a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8040f6e:	4b14      	ldr	r3, [pc, #80]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040f74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040f76:	68fb      	ldr	r3, [r7, #12]
 8040f78:	43db      	mvns	r3, r3
 8040f7a:	693a      	ldr	r2, [r7, #16]
 8040f7c:	4013      	ands	r3, r2
 8040f7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8040f80:	683b      	ldr	r3, [r7, #0]
 8040f82:	685b      	ldr	r3, [r3, #4]
 8040f84:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8040f88:	2b00      	cmp	r3, #0
 8040f8a:	d003      	beq.n	8040f94 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8040f8c:	693a      	ldr	r2, [r7, #16]
 8040f8e:	68fb      	ldr	r3, [r7, #12]
 8040f90:	4313      	orrs	r3, r2
 8040f92:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8040f94:	4a0a      	ldr	r2, [pc, #40]	; (8040fc0 <HAL_GPIO_Init+0x2e0>)
 8040f96:	693b      	ldr	r3, [r7, #16]
 8040f98:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8040f9c:	697b      	ldr	r3, [r7, #20]
 8040f9e:	3301      	adds	r3, #1
 8040fa0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040fa2:	683b      	ldr	r3, [r7, #0]
 8040fa4:	681a      	ldr	r2, [r3, #0]
 8040fa6:	697b      	ldr	r3, [r7, #20]
 8040fa8:	fa22 f303 	lsr.w	r3, r2, r3
 8040fac:	2b00      	cmp	r3, #0
 8040fae:	f47f ae9f 	bne.w	8040cf0 <HAL_GPIO_Init+0x10>
  }
}
 8040fb2:	bf00      	nop
 8040fb4:	bf00      	nop
 8040fb6:	371c      	adds	r7, #28
 8040fb8:	46bd      	mov	sp, r7
 8040fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040fbe:	4770      	bx	lr
 8040fc0:	4002f400 	.word	0x4002f400
 8040fc4:	42020000 	.word	0x42020000
 8040fc8:	42020400 	.word	0x42020400
 8040fcc:	42020800 	.word	0x42020800
 8040fd0:	42020c00 	.word	0x42020c00
 8040fd4:	42021000 	.word	0x42021000
 8040fd8:	42021400 	.word	0x42021400
 8040fdc:	42021800 	.word	0x42021800

08040fe0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8040fe0:	b480      	push	{r7}
 8040fe2:	b083      	sub	sp, #12
 8040fe4:	af00      	add	r7, sp, #0
 8040fe6:	6078      	str	r0, [r7, #4]
 8040fe8:	460b      	mov	r3, r1
 8040fea:	807b      	strh	r3, [r7, #2]
 8040fec:	4613      	mov	r3, r2
 8040fee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8040ff0:	787b      	ldrb	r3, [r7, #1]
 8040ff2:	2b00      	cmp	r3, #0
 8040ff4:	d003      	beq.n	8040ffe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8040ff6:	887a      	ldrh	r2, [r7, #2]
 8040ff8:	687b      	ldr	r3, [r7, #4]
 8040ffa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8040ffc:	e002      	b.n	8041004 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8040ffe:	887a      	ldrh	r2, [r7, #2]
 8041000:	687b      	ldr	r3, [r7, #4]
 8041002:	629a      	str	r2, [r3, #40]	; 0x28
}
 8041004:	bf00      	nop
 8041006:	370c      	adds	r7, #12
 8041008:	46bd      	mov	sp, r7
 804100a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804100e:	4770      	bx	lr

08041010 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041010:	b480      	push	{r7}
 8041012:	b089      	sub	sp, #36	; 0x24
 8041014:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041016:	2300      	movs	r3, #0
 8041018:	61fb      	str	r3, [r7, #28]
 804101a:	2300      	movs	r3, #0
 804101c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 804101e:	4b47      	ldr	r3, [pc, #284]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041020:	689b      	ldr	r3, [r3, #8]
 8041022:	f003 030c 	and.w	r3, r3, #12
 8041026:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041028:	4b44      	ldr	r3, [pc, #272]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 804102a:	68db      	ldr	r3, [r3, #12]
 804102c:	f003 0303 	and.w	r3, r3, #3
 8041030:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041032:	693b      	ldr	r3, [r7, #16]
 8041034:	2b00      	cmp	r3, #0
 8041036:	d005      	beq.n	8041044 <HAL_RCC_GetSysClockFreq+0x34>
 8041038:	693b      	ldr	r3, [r7, #16]
 804103a:	2b0c      	cmp	r3, #12
 804103c:	d121      	bne.n	8041082 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804103e:	68fb      	ldr	r3, [r7, #12]
 8041040:	2b01      	cmp	r3, #1
 8041042:	d11e      	bne.n	8041082 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041044:	4b3d      	ldr	r3, [pc, #244]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041046:	681b      	ldr	r3, [r3, #0]
 8041048:	f003 0308 	and.w	r3, r3, #8
 804104c:	2b00      	cmp	r3, #0
 804104e:	d107      	bne.n	8041060 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041050:	4b3a      	ldr	r3, [pc, #232]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041052:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041056:	0a1b      	lsrs	r3, r3, #8
 8041058:	f003 030f 	and.w	r3, r3, #15
 804105c:	61fb      	str	r3, [r7, #28]
 804105e:	e005      	b.n	804106c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041060:	4b36      	ldr	r3, [pc, #216]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041062:	681b      	ldr	r3, [r3, #0]
 8041064:	091b      	lsrs	r3, r3, #4
 8041066:	f003 030f 	and.w	r3, r3, #15
 804106a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 804106c:	4a34      	ldr	r2, [pc, #208]	; (8041140 <HAL_RCC_GetSysClockFreq+0x130>)
 804106e:	69fb      	ldr	r3, [r7, #28]
 8041070:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041074:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041076:	693b      	ldr	r3, [r7, #16]
 8041078:	2b00      	cmp	r3, #0
 804107a:	d10d      	bne.n	8041098 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 804107c:	69fb      	ldr	r3, [r7, #28]
 804107e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041080:	e00a      	b.n	8041098 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041082:	693b      	ldr	r3, [r7, #16]
 8041084:	2b04      	cmp	r3, #4
 8041086:	d102      	bne.n	804108e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041088:	4b2e      	ldr	r3, [pc, #184]	; (8041144 <HAL_RCC_GetSysClockFreq+0x134>)
 804108a:	61bb      	str	r3, [r7, #24]
 804108c:	e004      	b.n	8041098 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804108e:	693b      	ldr	r3, [r7, #16]
 8041090:	2b08      	cmp	r3, #8
 8041092:	d101      	bne.n	8041098 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041094:	4b2c      	ldr	r3, [pc, #176]	; (8041148 <HAL_RCC_GetSysClockFreq+0x138>)
 8041096:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041098:	693b      	ldr	r3, [r7, #16]
 804109a:	2b0c      	cmp	r3, #12
 804109c:	d146      	bne.n	804112c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804109e:	4b27      	ldr	r3, [pc, #156]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 80410a0:	68db      	ldr	r3, [r3, #12]
 80410a2:	f003 0303 	and.w	r3, r3, #3
 80410a6:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80410a8:	4b24      	ldr	r3, [pc, #144]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 80410aa:	68db      	ldr	r3, [r3, #12]
 80410ac:	091b      	lsrs	r3, r3, #4
 80410ae:	f003 030f 	and.w	r3, r3, #15
 80410b2:	3301      	adds	r3, #1
 80410b4:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 80410b6:	68bb      	ldr	r3, [r7, #8]
 80410b8:	2b02      	cmp	r3, #2
 80410ba:	d003      	beq.n	80410c4 <HAL_RCC_GetSysClockFreq+0xb4>
 80410bc:	68bb      	ldr	r3, [r7, #8]
 80410be:	2b03      	cmp	r3, #3
 80410c0:	d00d      	beq.n	80410de <HAL_RCC_GetSysClockFreq+0xce>
 80410c2:	e019      	b.n	80410f8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80410c4:	4a1f      	ldr	r2, [pc, #124]	; (8041144 <HAL_RCC_GetSysClockFreq+0x134>)
 80410c6:	687b      	ldr	r3, [r7, #4]
 80410c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80410cc:	4a1b      	ldr	r2, [pc, #108]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 80410ce:	68d2      	ldr	r2, [r2, #12]
 80410d0:	0a12      	lsrs	r2, r2, #8
 80410d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80410d6:	fb02 f303 	mul.w	r3, r2, r3
 80410da:	617b      	str	r3, [r7, #20]
        break;
 80410dc:	e019      	b.n	8041112 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80410de:	4a1a      	ldr	r2, [pc, #104]	; (8041148 <HAL_RCC_GetSysClockFreq+0x138>)
 80410e0:	687b      	ldr	r3, [r7, #4]
 80410e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80410e6:	4a15      	ldr	r2, [pc, #84]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 80410e8:	68d2      	ldr	r2, [r2, #12]
 80410ea:	0a12      	lsrs	r2, r2, #8
 80410ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80410f0:	fb02 f303 	mul.w	r3, r2, r3
 80410f4:	617b      	str	r3, [r7, #20]
        break;
 80410f6:	e00c      	b.n	8041112 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80410f8:	69fa      	ldr	r2, [r7, #28]
 80410fa:	687b      	ldr	r3, [r7, #4]
 80410fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8041100:	4a0e      	ldr	r2, [pc, #56]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041102:	68d2      	ldr	r2, [r2, #12]
 8041104:	0a12      	lsrs	r2, r2, #8
 8041106:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 804110a:	fb02 f303 	mul.w	r3, r2, r3
 804110e:	617b      	str	r3, [r7, #20]
        break;
 8041110:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041112:	4b0a      	ldr	r3, [pc, #40]	; (804113c <HAL_RCC_GetSysClockFreq+0x12c>)
 8041114:	68db      	ldr	r3, [r3, #12]
 8041116:	0e5b      	lsrs	r3, r3, #25
 8041118:	f003 0303 	and.w	r3, r3, #3
 804111c:	3301      	adds	r3, #1
 804111e:	005b      	lsls	r3, r3, #1
 8041120:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041122:	697a      	ldr	r2, [r7, #20]
 8041124:	683b      	ldr	r3, [r7, #0]
 8041126:	fbb2 f3f3 	udiv	r3, r2, r3
 804112a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804112c:	69bb      	ldr	r3, [r7, #24]
}
 804112e:	4618      	mov	r0, r3
 8041130:	3724      	adds	r7, #36	; 0x24
 8041132:	46bd      	mov	sp, r7
 8041134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041138:	4770      	bx	lr
 804113a:	bf00      	nop
 804113c:	40021000 	.word	0x40021000
 8041140:	08043330 	.word	0x08043330
 8041144:	00f42400 	.word	0x00f42400
 8041148:	007a1200 	.word	0x007a1200

0804114c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804114c:	b580      	push	{r7, lr}
 804114e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041150:	f7ff ff5e 	bl	8041010 <HAL_RCC_GetSysClockFreq>
 8041154:	4602      	mov	r2, r0
 8041156:	4b05      	ldr	r3, [pc, #20]	; (804116c <HAL_RCC_GetHCLKFreq+0x20>)
 8041158:	689b      	ldr	r3, [r3, #8]
 804115a:	091b      	lsrs	r3, r3, #4
 804115c:	f003 030f 	and.w	r3, r3, #15
 8041160:	4903      	ldr	r1, [pc, #12]	; (8041170 <HAL_RCC_GetHCLKFreq+0x24>)
 8041162:	5ccb      	ldrb	r3, [r1, r3]
 8041164:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041168:	4618      	mov	r0, r3
 804116a:	bd80      	pop	{r7, pc}
 804116c:	40021000 	.word	0x40021000
 8041170:	08043318 	.word	0x08043318

08041174 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041174:	b580      	push	{r7, lr}
 8041176:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041178:	f7ff ffe8 	bl	804114c <HAL_RCC_GetHCLKFreq>
 804117c:	4602      	mov	r2, r0
 804117e:	4b05      	ldr	r3, [pc, #20]	; (8041194 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041180:	689b      	ldr	r3, [r3, #8]
 8041182:	0a1b      	lsrs	r3, r3, #8
 8041184:	f003 0307 	and.w	r3, r3, #7
 8041188:	4903      	ldr	r1, [pc, #12]	; (8041198 <HAL_RCC_GetPCLK1Freq+0x24>)
 804118a:	5ccb      	ldrb	r3, [r1, r3]
 804118c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041190:	4618      	mov	r0, r3
 8041192:	bd80      	pop	{r7, pc}
 8041194:	40021000 	.word	0x40021000
 8041198:	08043328 	.word	0x08043328

0804119c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804119c:	b580      	push	{r7, lr}
 804119e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80411a0:	f7ff ffd4 	bl	804114c <HAL_RCC_GetHCLKFreq>
 80411a4:	4602      	mov	r2, r0
 80411a6:	4b05      	ldr	r3, [pc, #20]	; (80411bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80411a8:	689b      	ldr	r3, [r3, #8]
 80411aa:	0adb      	lsrs	r3, r3, #11
 80411ac:	f003 0307 	and.w	r3, r3, #7
 80411b0:	4903      	ldr	r1, [pc, #12]	; (80411c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80411b2:	5ccb      	ldrb	r3, [r1, r3]
 80411b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80411b8:	4618      	mov	r0, r3
 80411ba:	bd80      	pop	{r7, pc}
 80411bc:	40021000 	.word	0x40021000
 80411c0:	08043328 	.word	0x08043328

080411c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80411c4:	b580      	push	{r7, lr}
 80411c6:	b088      	sub	sp, #32
 80411c8:	af00      	add	r7, sp, #0
 80411ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80411cc:	2300      	movs	r3, #0
 80411ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80411d0:	2300      	movs	r3, #0
 80411d2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80411d4:	687b      	ldr	r3, [r7, #4]
 80411d6:	681b      	ldr	r3, [r3, #0]
 80411d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80411dc:	2b00      	cmp	r3, #0
 80411de:	d040      	beq.n	8041262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 80411e0:	687b      	ldr	r3, [r7, #4]
 80411e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80411e4:	2b80      	cmp	r3, #128	; 0x80
 80411e6:	d02a      	beq.n	804123e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80411e8:	2b80      	cmp	r3, #128	; 0x80
 80411ea:	d825      	bhi.n	8041238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80411ec:	2b60      	cmp	r3, #96	; 0x60
 80411ee:	d026      	beq.n	804123e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80411f0:	2b60      	cmp	r3, #96	; 0x60
 80411f2:	d821      	bhi.n	8041238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80411f4:	2b40      	cmp	r3, #64	; 0x40
 80411f6:	d006      	beq.n	8041206 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80411f8:	2b40      	cmp	r3, #64	; 0x40
 80411fa:	d81d      	bhi.n	8041238 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80411fc:	2b00      	cmp	r3, #0
 80411fe:	d009      	beq.n	8041214 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8041200:	2b20      	cmp	r3, #32
 8041202:	d010      	beq.n	8041226 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8041204:	e018      	b.n	8041238 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041206:	4b8f      	ldr	r3, [pc, #572]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041208:	68db      	ldr	r3, [r3, #12]
 804120a:	4a8e      	ldr	r2, [pc, #568]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804120c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041210:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041212:	e015      	b.n	8041240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8041214:	687b      	ldr	r3, [r7, #4]
 8041216:	3304      	adds	r3, #4
 8041218:	2100      	movs	r1, #0
 804121a:	4618      	mov	r0, r3
 804121c:	f000 fb56 	bl	80418cc <RCCEx_PLLSAI1_Config>
 8041220:	4603      	mov	r3, r0
 8041222:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041224:	e00c      	b.n	8041240 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8041226:	687b      	ldr	r3, [r7, #4]
 8041228:	3320      	adds	r3, #32
 804122a:	2100      	movs	r1, #0
 804122c:	4618      	mov	r0, r3
 804122e:	f000 fc33 	bl	8041a98 <RCCEx_PLLSAI2_Config>
 8041232:	4603      	mov	r3, r0
 8041234:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8041236:	e003      	b.n	8041240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8041238:	2301      	movs	r3, #1
 804123a:	77fb      	strb	r3, [r7, #31]
        break;
 804123c:	e000      	b.n	8041240 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 804123e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8041240:	7ffb      	ldrb	r3, [r7, #31]
 8041242:	2b00      	cmp	r3, #0
 8041244:	d10b      	bne.n	804125e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8041246:	4b7f      	ldr	r3, [pc, #508]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041248:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804124c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 8041250:	687b      	ldr	r3, [r7, #4]
 8041252:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8041254:	497b      	ldr	r1, [pc, #492]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041256:	4313      	orrs	r3, r2
 8041258:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804125c:	e001      	b.n	8041262 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804125e:	7ffb      	ldrb	r3, [r7, #31]
 8041260:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8041262:	687b      	ldr	r3, [r7, #4]
 8041264:	681b      	ldr	r3, [r3, #0]
 8041266:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804126a:	2b00      	cmp	r3, #0
 804126c:	d047      	beq.n	80412fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 804126e:	687b      	ldr	r3, [r7, #4]
 8041270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8041272:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041276:	d030      	beq.n	80412da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8041278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804127c:	d82a      	bhi.n	80412d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804127e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041282:	d02a      	beq.n	80412da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8041284:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8041288:	d824      	bhi.n	80412d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804128a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804128e:	d008      	beq.n	80412a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8041290:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041294:	d81e      	bhi.n	80412d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8041296:	2b00      	cmp	r3, #0
 8041298:	d00a      	beq.n	80412b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 804129a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804129e:	d010      	beq.n	80412c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80412a0:	e018      	b.n	80412d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80412a2:	4b68      	ldr	r3, [pc, #416]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80412a4:	68db      	ldr	r3, [r3, #12]
 80412a6:	4a67      	ldr	r2, [pc, #412]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80412a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80412ac:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80412ae:	e015      	b.n	80412dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80412b0:	687b      	ldr	r3, [r7, #4]
 80412b2:	3304      	adds	r3, #4
 80412b4:	2100      	movs	r1, #0
 80412b6:	4618      	mov	r0, r3
 80412b8:	f000 fb08 	bl	80418cc <RCCEx_PLLSAI1_Config>
 80412bc:	4603      	mov	r3, r0
 80412be:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80412c0:	e00c      	b.n	80412dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80412c2:	687b      	ldr	r3, [r7, #4]
 80412c4:	3320      	adds	r3, #32
 80412c6:	2100      	movs	r1, #0
 80412c8:	4618      	mov	r0, r3
 80412ca:	f000 fbe5 	bl	8041a98 <RCCEx_PLLSAI2_Config>
 80412ce:	4603      	mov	r3, r0
 80412d0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 80412d2:	e003      	b.n	80412dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80412d4:	2301      	movs	r3, #1
 80412d6:	77fb      	strb	r3, [r7, #31]
        break;
 80412d8:	e000      	b.n	80412dc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 80412da:	bf00      	nop
    }

    if (ret == HAL_OK)
 80412dc:	7ffb      	ldrb	r3, [r7, #31]
 80412de:	2b00      	cmp	r3, #0
 80412e0:	d10b      	bne.n	80412fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80412e2:	4b58      	ldr	r3, [pc, #352]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80412e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80412e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80412ec:	687b      	ldr	r3, [r7, #4]
 80412ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80412f0:	4954      	ldr	r1, [pc, #336]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80412f2:	4313      	orrs	r3, r2
 80412f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80412f8:	e001      	b.n	80412fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80412fa:	7ffb      	ldrb	r3, [r7, #31]
 80412fc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80412fe:	687b      	ldr	r3, [r7, #4]
 8041300:	681b      	ldr	r3, [r3, #0]
 8041302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041306:	2b00      	cmp	r3, #0
 8041308:	f000 80ab 	beq.w	8041462 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 804130c:	2300      	movs	r3, #0
 804130e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8041310:	4b4c      	ldr	r3, [pc, #304]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041312:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041314:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041318:	2b00      	cmp	r3, #0
 804131a:	d10d      	bne.n	8041338 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804131c:	4b49      	ldr	r3, [pc, #292]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804131e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041320:	4a48      	ldr	r2, [pc, #288]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041326:	6593      	str	r3, [r2, #88]	; 0x58
 8041328:	4b46      	ldr	r3, [pc, #280]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804132a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804132c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041330:	60fb      	str	r3, [r7, #12]
 8041332:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8041334:	2301      	movs	r3, #1
 8041336:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8041338:	4b43      	ldr	r3, [pc, #268]	; (8041448 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804133a:	681b      	ldr	r3, [r3, #0]
 804133c:	4a42      	ldr	r2, [pc, #264]	; (8041448 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804133e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041342:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8041344:	f7ff fbb0 	bl	8040aa8 <HAL_GetTick>
 8041348:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804134a:	e00f      	b.n	804136c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 804134c:	f7ff fbac 	bl	8040aa8 <HAL_GetTick>
 8041350:	4602      	mov	r2, r0
 8041352:	693b      	ldr	r3, [r7, #16]
 8041354:	1ad3      	subs	r3, r2, r3
 8041356:	2b02      	cmp	r3, #2
 8041358:	d908      	bls.n	804136c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804135a:	4b3b      	ldr	r3, [pc, #236]	; (8041448 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804135c:	681b      	ldr	r3, [r3, #0]
 804135e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041362:	2b00      	cmp	r3, #0
 8041364:	d109      	bne.n	804137a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 8041366:	2303      	movs	r3, #3
 8041368:	77fb      	strb	r3, [r7, #31]
        }
        break;
 804136a:	e006      	b.n	804137a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 804136c:	4b36      	ldr	r3, [pc, #216]	; (8041448 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804136e:	681b      	ldr	r3, [r3, #0]
 8041370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041374:	2b00      	cmp	r3, #0
 8041376:	d0e9      	beq.n	804134c <HAL_RCCEx_PeriphCLKConfig+0x188>
 8041378:	e000      	b.n	804137c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 804137a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 804137c:	7ffb      	ldrb	r3, [r7, #31]
 804137e:	2b00      	cmp	r3, #0
 8041380:	d164      	bne.n	804144c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8041382:	4b30      	ldr	r3, [pc, #192]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041384:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041388:	f403 7340 	and.w	r3, r3, #768	; 0x300
 804138c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 804138e:	69bb      	ldr	r3, [r7, #24]
 8041390:	2b00      	cmp	r3, #0
 8041392:	d01f      	beq.n	80413d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8041394:	687b      	ldr	r3, [r7, #4]
 8041396:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804139a:	69ba      	ldr	r2, [r7, #24]
 804139c:	429a      	cmp	r2, r3
 804139e:	d019      	beq.n	80413d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80413a0:	4b28      	ldr	r3, [pc, #160]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80413aa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80413ac:	4b25      	ldr	r3, [pc, #148]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413b2:	4a24      	ldr	r2, [pc, #144]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80413b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80413bc:	4b21      	ldr	r3, [pc, #132]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413c2:	4a20      	ldr	r2, [pc, #128]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80413c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80413cc:	4a1d      	ldr	r2, [pc, #116]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413ce:	69bb      	ldr	r3, [r7, #24]
 80413d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80413d4:	69bb      	ldr	r3, [r7, #24]
 80413d6:	f003 0301 	and.w	r3, r3, #1
 80413da:	2b00      	cmp	r3, #0
 80413dc:	d01f      	beq.n	804141e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80413de:	f7ff fb63 	bl	8040aa8 <HAL_GetTick>
 80413e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80413e4:	e012      	b.n	804140c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80413e6:	f7ff fb5f 	bl	8040aa8 <HAL_GetTick>
 80413ea:	4602      	mov	r2, r0
 80413ec:	693b      	ldr	r3, [r7, #16]
 80413ee:	1ad3      	subs	r3, r2, r3
 80413f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80413f4:	4293      	cmp	r3, r2
 80413f6:	d909      	bls.n	804140c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80413f8:	4b12      	ldr	r3, [pc, #72]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80413fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80413fe:	f003 0302 	and.w	r3, r3, #2
 8041402:	2b00      	cmp	r3, #0
 8041404:	d10a      	bne.n	804141c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8041406:	2303      	movs	r3, #3
 8041408:	77fb      	strb	r3, [r7, #31]
            }
            break;
 804140a:	e007      	b.n	804141c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804140c:	4b0d      	ldr	r3, [pc, #52]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804140e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041412:	f003 0302 	and.w	r3, r3, #2
 8041416:	2b00      	cmp	r3, #0
 8041418:	d0e5      	beq.n	80413e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 804141a:	e000      	b.n	804141e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 804141c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 804141e:	7ffb      	ldrb	r3, [r7, #31]
 8041420:	2b00      	cmp	r3, #0
 8041422:	d10c      	bne.n	804143e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8041424:	4b07      	ldr	r3, [pc, #28]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041426:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804142a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804142e:	687b      	ldr	r3, [r7, #4]
 8041430:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041434:	4903      	ldr	r1, [pc, #12]	; (8041444 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8041436:	4313      	orrs	r3, r2
 8041438:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 804143c:	e008      	b.n	8041450 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804143e:	7ffb      	ldrb	r3, [r7, #31]
 8041440:	77bb      	strb	r3, [r7, #30]
 8041442:	e005      	b.n	8041450 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 8041444:	40021000 	.word	0x40021000
 8041448:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 804144c:	7ffb      	ldrb	r3, [r7, #31]
 804144e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8041450:	7dfb      	ldrb	r3, [r7, #23]
 8041452:	2b01      	cmp	r3, #1
 8041454:	d105      	bne.n	8041462 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8041456:	4b9c      	ldr	r3, [pc, #624]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804145a:	4a9b      	ldr	r2, [pc, #620]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804145c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041460:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8041462:	687b      	ldr	r3, [r7, #4]
 8041464:	681b      	ldr	r3, [r3, #0]
 8041466:	f003 0301 	and.w	r3, r3, #1
 804146a:	2b00      	cmp	r3, #0
 804146c:	d00a      	beq.n	8041484 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 804146e:	4b96      	ldr	r3, [pc, #600]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041470:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041474:	f023 0203 	bic.w	r2, r3, #3
 8041478:	687b      	ldr	r3, [r7, #4]
 804147a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804147c:	4992      	ldr	r1, [pc, #584]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804147e:	4313      	orrs	r3, r2
 8041480:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8041484:	687b      	ldr	r3, [r7, #4]
 8041486:	681b      	ldr	r3, [r3, #0]
 8041488:	f003 0302 	and.w	r3, r3, #2
 804148c:	2b00      	cmp	r3, #0
 804148e:	d00a      	beq.n	80414a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8041490:	4b8d      	ldr	r3, [pc, #564]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041496:	f023 020c 	bic.w	r2, r3, #12
 804149a:	687b      	ldr	r3, [r7, #4]
 804149c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804149e:	498a      	ldr	r1, [pc, #552]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414a0:	4313      	orrs	r3, r2
 80414a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80414a6:	687b      	ldr	r3, [r7, #4]
 80414a8:	681b      	ldr	r3, [r3, #0]
 80414aa:	f003 0304 	and.w	r3, r3, #4
 80414ae:	2b00      	cmp	r3, #0
 80414b0:	d00a      	beq.n	80414c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80414b2:	4b85      	ldr	r3, [pc, #532]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80414b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80414bc:	687b      	ldr	r3, [r7, #4]
 80414be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80414c0:	4981      	ldr	r1, [pc, #516]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414c2:	4313      	orrs	r3, r2
 80414c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	681b      	ldr	r3, [r3, #0]
 80414cc:	f003 0308 	and.w	r3, r3, #8
 80414d0:	2b00      	cmp	r3, #0
 80414d2:	d00a      	beq.n	80414ea <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80414d4:	4b7c      	ldr	r3, [pc, #496]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80414da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80414de:	687b      	ldr	r3, [r7, #4]
 80414e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80414e2:	4979      	ldr	r1, [pc, #484]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414e4:	4313      	orrs	r3, r2
 80414e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80414ea:	687b      	ldr	r3, [r7, #4]
 80414ec:	681b      	ldr	r3, [r3, #0]
 80414ee:	f003 0310 	and.w	r3, r3, #16
 80414f2:	2b00      	cmp	r3, #0
 80414f4:	d00a      	beq.n	804150c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80414f6:	4b74      	ldr	r3, [pc, #464]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80414f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80414fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8041500:	687b      	ldr	r3, [r7, #4]
 8041502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041504:	4970      	ldr	r1, [pc, #448]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041506:	4313      	orrs	r3, r2
 8041508:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 804150c:	687b      	ldr	r3, [r7, #4]
 804150e:	681b      	ldr	r3, [r3, #0]
 8041510:	f003 0320 	and.w	r3, r3, #32
 8041514:	2b00      	cmp	r3, #0
 8041516:	d00a      	beq.n	804152e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8041518:	4b6b      	ldr	r3, [pc, #428]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804151a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804151e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8041522:	687b      	ldr	r3, [r7, #4]
 8041524:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8041526:	4968      	ldr	r1, [pc, #416]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041528:	4313      	orrs	r3, r2
 804152a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804152e:	687b      	ldr	r3, [r7, #4]
 8041530:	681b      	ldr	r3, [r3, #0]
 8041532:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8041536:	2b00      	cmp	r3, #0
 8041538:	d00a      	beq.n	8041550 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 804153a:	4b63      	ldr	r3, [pc, #396]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804153c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041540:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8041544:	687b      	ldr	r3, [r7, #4]
 8041546:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041548:	495f      	ldr	r1, [pc, #380]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804154a:	4313      	orrs	r3, r2
 804154c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8041550:	687b      	ldr	r3, [r7, #4]
 8041552:	681b      	ldr	r3, [r3, #0]
 8041554:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041558:	2b00      	cmp	r3, #0
 804155a:	d00a      	beq.n	8041572 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 804155c:	4b5a      	ldr	r3, [pc, #360]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804155e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041562:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041566:	687b      	ldr	r3, [r7, #4]
 8041568:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804156a:	4957      	ldr	r1, [pc, #348]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804156c:	4313      	orrs	r3, r2
 804156e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 8041572:	687b      	ldr	r3, [r7, #4]
 8041574:	681b      	ldr	r3, [r3, #0]
 8041576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 804157a:	2b00      	cmp	r3, #0
 804157c:	d00a      	beq.n	8041594 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 804157e:	4b52      	ldr	r3, [pc, #328]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041580:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041584:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8041588:	687b      	ldr	r3, [r7, #4]
 804158a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 804158c:	494e      	ldr	r1, [pc, #312]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804158e:	4313      	orrs	r3, r2
 8041590:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8041594:	687b      	ldr	r3, [r7, #4]
 8041596:	681b      	ldr	r3, [r3, #0]
 8041598:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804159c:	2b00      	cmp	r3, #0
 804159e:	d031      	beq.n	8041604 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80415a0:	687b      	ldr	r3, [r7, #4]
 80415a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80415a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80415a8:	d00e      	beq.n	80415c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 80415aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80415ae:	d814      	bhi.n	80415da <HAL_RCCEx_PeriphCLKConfig+0x416>
 80415b0:	2b00      	cmp	r3, #0
 80415b2:	d015      	beq.n	80415e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 80415b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80415b8:	d10f      	bne.n	80415da <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80415ba:	4b43      	ldr	r3, [pc, #268]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80415bc:	68db      	ldr	r3, [r3, #12]
 80415be:	4a42      	ldr	r2, [pc, #264]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80415c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80415c4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80415c6:	e00c      	b.n	80415e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80415c8:	687b      	ldr	r3, [r7, #4]
 80415ca:	3304      	adds	r3, #4
 80415cc:	2100      	movs	r1, #0
 80415ce:	4618      	mov	r0, r3
 80415d0:	f000 f97c 	bl	80418cc <RCCEx_PLLSAI1_Config>
 80415d4:	4603      	mov	r3, r0
 80415d6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 80415d8:	e003      	b.n	80415e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 80415da:	2301      	movs	r3, #1
 80415dc:	77fb      	strb	r3, [r7, #31]
        break;
 80415de:	e000      	b.n	80415e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 80415e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80415e2:	7ffb      	ldrb	r3, [r7, #31]
 80415e4:	2b00      	cmp	r3, #0
 80415e6:	d10b      	bne.n	8041600 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80415e8:	4b37      	ldr	r3, [pc, #220]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80415ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80415ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80415f2:	687b      	ldr	r3, [r7, #4]
 80415f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80415f6:	4934      	ldr	r1, [pc, #208]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80415f8:	4313      	orrs	r3, r2
 80415fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80415fe:	e001      	b.n	8041604 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8041600:	7ffb      	ldrb	r3, [r7, #31]
 8041602:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8041604:	687b      	ldr	r3, [r7, #4]
 8041606:	681b      	ldr	r3, [r3, #0]
 8041608:	f003 0340 	and.w	r3, r3, #64	; 0x40
 804160c:	2b00      	cmp	r3, #0
 804160e:	d00a      	beq.n	8041626 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8041610:	4b2d      	ldr	r3, [pc, #180]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041616:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804161a:	687b      	ldr	r3, [r7, #4]
 804161c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804161e:	492a      	ldr	r1, [pc, #168]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041620:	4313      	orrs	r3, r2
 8041622:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8041626:	687b      	ldr	r3, [r7, #4]
 8041628:	681b      	ldr	r3, [r3, #0]
 804162a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804162e:	2b00      	cmp	r3, #0
 8041630:	d00a      	beq.n	8041648 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8041632:	4b25      	ldr	r3, [pc, #148]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041638:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 804163c:	687b      	ldr	r3, [r7, #4]
 804163e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8041640:	4921      	ldr	r1, [pc, #132]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041642:	4313      	orrs	r3, r2
 8041644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8041648:	687b      	ldr	r3, [r7, #4]
 804164a:	681b      	ldr	r3, [r3, #0]
 804164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041650:	2b00      	cmp	r3, #0
 8041652:	d00a      	beq.n	804166a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8041654:	4b1c      	ldr	r3, [pc, #112]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804165a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 804165e:	687b      	ldr	r3, [r7, #4]
 8041660:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8041662:	4919      	ldr	r1, [pc, #100]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041664:	4313      	orrs	r3, r2
 8041666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 804166a:	687b      	ldr	r3, [r7, #4]
 804166c:	681b      	ldr	r3, [r3, #0]
 804166e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8041672:	2b00      	cmp	r3, #0
 8041674:	d00a      	beq.n	804168c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8041676:	4b14      	ldr	r3, [pc, #80]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041678:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804167c:	f023 0203 	bic.w	r2, r3, #3
 8041680:	687b      	ldr	r3, [r7, #4]
 8041682:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041684:	4910      	ldr	r1, [pc, #64]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8041686:	4313      	orrs	r3, r2
 8041688:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 804168c:	687b      	ldr	r3, [r7, #4]
 804168e:	681b      	ldr	r3, [r3, #0]
 8041690:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8041694:	2b00      	cmp	r3, #0
 8041696:	d02b      	beq.n	80416f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8041698:	4b0b      	ldr	r3, [pc, #44]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804169a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804169e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80416a2:	687b      	ldr	r3, [r7, #4]
 80416a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80416a6:	4908      	ldr	r1, [pc, #32]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416a8:	4313      	orrs	r3, r2
 80416aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80416ae:	687b      	ldr	r3, [r7, #4]
 80416b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80416b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80416b6:	d109      	bne.n	80416cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80416b8:	4b03      	ldr	r3, [pc, #12]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416ba:	68db      	ldr	r3, [r3, #12]
 80416bc:	4a02      	ldr	r2, [pc, #8]	; (80416c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80416be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80416c2:	60d3      	str	r3, [r2, #12]
 80416c4:	e014      	b.n	80416f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80416c6:	bf00      	nop
 80416c8:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80416cc:	687b      	ldr	r3, [r7, #4]
 80416ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80416d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80416d4:	d10c      	bne.n	80416f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80416d6:	687b      	ldr	r3, [r7, #4]
 80416d8:	3304      	adds	r3, #4
 80416da:	2101      	movs	r1, #1
 80416dc:	4618      	mov	r0, r3
 80416de:	f000 f8f5 	bl	80418cc <RCCEx_PLLSAI1_Config>
 80416e2:	4603      	mov	r3, r0
 80416e4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 80416e6:	7ffb      	ldrb	r3, [r7, #31]
 80416e8:	2b00      	cmp	r3, #0
 80416ea:	d001      	beq.n	80416f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 80416ec:	7ffb      	ldrb	r3, [r7, #31]
 80416ee:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80416f0:	687b      	ldr	r3, [r7, #4]
 80416f2:	681b      	ldr	r3, [r3, #0]
 80416f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80416f8:	2b00      	cmp	r3, #0
 80416fa:	d04a      	beq.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80416fc:	687b      	ldr	r3, [r7, #4]
 80416fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041700:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8041704:	d108      	bne.n	8041718 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8041706:	4b70      	ldr	r3, [pc, #448]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041708:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804170c:	4a6e      	ldr	r2, [pc, #440]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804170e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8041712:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8041716:	e012      	b.n	804173e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8041718:	4b6b      	ldr	r3, [pc, #428]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804171a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804171e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8041722:	687b      	ldr	r3, [r7, #4]
 8041724:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041726:	4968      	ldr	r1, [pc, #416]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041728:	4313      	orrs	r3, r2
 804172a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804172e:	4b66      	ldr	r3, [pc, #408]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041730:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041734:	4a64      	ldr	r2, [pc, #400]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041736:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 804173a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804173e:	687b      	ldr	r3, [r7, #4]
 8041740:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041742:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8041746:	d10d      	bne.n	8041764 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8041748:	687b      	ldr	r3, [r7, #4]
 804174a:	3304      	adds	r3, #4
 804174c:	2101      	movs	r1, #1
 804174e:	4618      	mov	r0, r3
 8041750:	f000 f8bc 	bl	80418cc <RCCEx_PLLSAI1_Config>
 8041754:	4603      	mov	r3, r0
 8041756:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041758:	7ffb      	ldrb	r3, [r7, #31]
 804175a:	2b00      	cmp	r3, #0
 804175c:	d019      	beq.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 804175e:	7ffb      	ldrb	r3, [r7, #31]
 8041760:	77bb      	strb	r3, [r7, #30]
 8041762:	e016      	b.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 8041764:	687b      	ldr	r3, [r7, #4]
 8041766:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041768:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804176c:	d106      	bne.n	804177c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804176e:	4b56      	ldr	r3, [pc, #344]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041770:	68db      	ldr	r3, [r3, #12]
 8041772:	4a55      	ldr	r2, [pc, #340]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041774:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8041778:	60d3      	str	r3, [r2, #12]
 804177a:	e00a      	b.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 804177c:	687b      	ldr	r3, [r7, #4]
 804177e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8041780:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8041784:	d105      	bne.n	8041792 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8041786:	4b50      	ldr	r3, [pc, #320]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041788:	68db      	ldr	r3, [r3, #12]
 804178a:	4a4f      	ldr	r2, [pc, #316]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804178c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041790:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8041792:	687b      	ldr	r3, [r7, #4]
 8041794:	681b      	ldr	r3, [r3, #0]
 8041796:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 804179a:	2b00      	cmp	r3, #0
 804179c:	d028      	beq.n	80417f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 804179e:	4b4a      	ldr	r3, [pc, #296]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80417a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80417a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80417a8:	687b      	ldr	r3, [r7, #4]
 80417aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80417ac:	4946      	ldr	r1, [pc, #280]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80417ae:	4313      	orrs	r3, r2
 80417b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80417b4:	687b      	ldr	r3, [r7, #4]
 80417b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80417b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80417bc:	d106      	bne.n	80417cc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80417be:	4b42      	ldr	r3, [pc, #264]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80417c0:	68db      	ldr	r3, [r3, #12]
 80417c2:	4a41      	ldr	r2, [pc, #260]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80417c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80417c8:	60d3      	str	r3, [r2, #12]
 80417ca:	e011      	b.n	80417f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80417cc:	687b      	ldr	r3, [r7, #4]
 80417ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80417d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80417d4:	d10c      	bne.n	80417f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80417d6:	687b      	ldr	r3, [r7, #4]
 80417d8:	3304      	adds	r3, #4
 80417da:	2101      	movs	r1, #1
 80417dc:	4618      	mov	r0, r3
 80417de:	f000 f875 	bl	80418cc <RCCEx_PLLSAI1_Config>
 80417e2:	4603      	mov	r3, r0
 80417e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80417e6:	7ffb      	ldrb	r3, [r7, #31]
 80417e8:	2b00      	cmp	r3, #0
 80417ea:	d001      	beq.n	80417f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 80417ec:	7ffb      	ldrb	r3, [r7, #31]
 80417ee:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80417f0:	687b      	ldr	r3, [r7, #4]
 80417f2:	681b      	ldr	r3, [r3, #0]
 80417f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80417f8:	2b00      	cmp	r3, #0
 80417fa:	d01e      	beq.n	804183a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80417fc:	4b32      	ldr	r3, [pc, #200]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80417fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8041802:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8041806:	687b      	ldr	r3, [r7, #4]
 8041808:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804180c:	492e      	ldr	r1, [pc, #184]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804180e:	4313      	orrs	r3, r2
 8041810:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8041814:	687b      	ldr	r3, [r7, #4]
 8041816:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 804181a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804181e:	d10c      	bne.n	804183a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8041820:	687b      	ldr	r3, [r7, #4]
 8041822:	3304      	adds	r3, #4
 8041824:	2102      	movs	r1, #2
 8041826:	4618      	mov	r0, r3
 8041828:	f000 f850 	bl	80418cc <RCCEx_PLLSAI1_Config>
 804182c:	4603      	mov	r3, r0
 804182e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8041830:	7ffb      	ldrb	r3, [r7, #31]
 8041832:	2b00      	cmp	r3, #0
 8041834:	d001      	beq.n	804183a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8041836:	7ffb      	ldrb	r3, [r7, #31]
 8041838:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 804183a:	687b      	ldr	r3, [r7, #4]
 804183c:	681b      	ldr	r3, [r3, #0]
 804183e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041842:	2b00      	cmp	r3, #0
 8041844:	d00b      	beq.n	804185e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8041846:	4b20      	ldr	r3, [pc, #128]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041848:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804184c:	f023 0204 	bic.w	r2, r3, #4
 8041850:	687b      	ldr	r3, [r7, #4]
 8041852:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8041856:	491c      	ldr	r1, [pc, #112]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041858:	4313      	orrs	r3, r2
 804185a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 804185e:	687b      	ldr	r3, [r7, #4]
 8041860:	681b      	ldr	r3, [r3, #0]
 8041862:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041866:	2b00      	cmp	r3, #0
 8041868:	d00b      	beq.n	8041882 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 804186a:	4b17      	ldr	r3, [pc, #92]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804186c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041870:	f023 0218 	bic.w	r2, r3, #24
 8041874:	687b      	ldr	r3, [r7, #4]
 8041876:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804187a:	4913      	ldr	r1, [pc, #76]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804187c:	4313      	orrs	r3, r2
 804187e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8041882:	687b      	ldr	r3, [r7, #4]
 8041884:	681b      	ldr	r3, [r3, #0]
 8041886:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 804188a:	2b00      	cmp	r3, #0
 804188c:	d017      	beq.n	80418be <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 804188e:	4b0e      	ldr	r3, [pc, #56]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8041890:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8041894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8041898:	687b      	ldr	r3, [r7, #4]
 804189a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 804189e:	490a      	ldr	r1, [pc, #40]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80418a0:	4313      	orrs	r3, r2
 80418a2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80418a6:	687b      	ldr	r3, [r7, #4]
 80418a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80418ac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80418b0:	d105      	bne.n	80418be <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80418b2:	4b05      	ldr	r3, [pc, #20]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80418b4:	68db      	ldr	r3, [r3, #12]
 80418b6:	4a04      	ldr	r2, [pc, #16]	; (80418c8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80418b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80418bc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 80418be:	7fbb      	ldrb	r3, [r7, #30]
}
 80418c0:	4618      	mov	r0, r3
 80418c2:	3720      	adds	r7, #32
 80418c4:	46bd      	mov	sp, r7
 80418c6:	bd80      	pop	{r7, pc}
 80418c8:	40021000 	.word	0x40021000

080418cc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 80418cc:	b580      	push	{r7, lr}
 80418ce:	b084      	sub	sp, #16
 80418d0:	af00      	add	r7, sp, #0
 80418d2:	6078      	str	r0, [r7, #4]
 80418d4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80418d6:	2300      	movs	r3, #0
 80418d8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 80418da:	687b      	ldr	r3, [r7, #4]
 80418dc:	681b      	ldr	r3, [r3, #0]
 80418de:	2b03      	cmp	r3, #3
 80418e0:	d018      	beq.n	8041914 <RCCEx_PLLSAI1_Config+0x48>
 80418e2:	2b03      	cmp	r3, #3
 80418e4:	d81f      	bhi.n	8041926 <RCCEx_PLLSAI1_Config+0x5a>
 80418e6:	2b01      	cmp	r3, #1
 80418e8:	d002      	beq.n	80418f0 <RCCEx_PLLSAI1_Config+0x24>
 80418ea:	2b02      	cmp	r3, #2
 80418ec:	d009      	beq.n	8041902 <RCCEx_PLLSAI1_Config+0x36>
 80418ee:	e01a      	b.n	8041926 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80418f0:	4b65      	ldr	r3, [pc, #404]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 80418f2:	681b      	ldr	r3, [r3, #0]
 80418f4:	f003 0302 	and.w	r3, r3, #2
 80418f8:	2b00      	cmp	r3, #0
 80418fa:	d117      	bne.n	804192c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 80418fc:	2301      	movs	r3, #1
 80418fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041900:	e014      	b.n	804192c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041902:	4b61      	ldr	r3, [pc, #388]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041904:	681b      	ldr	r3, [r3, #0]
 8041906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804190a:	2b00      	cmp	r3, #0
 804190c:	d110      	bne.n	8041930 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 804190e:	2301      	movs	r3, #1
 8041910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041912:	e00d      	b.n	8041930 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041914:	4b5c      	ldr	r3, [pc, #368]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041916:	681b      	ldr	r3, [r3, #0]
 8041918:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 804191c:	2b00      	cmp	r3, #0
 804191e:	d109      	bne.n	8041934 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8041920:	2301      	movs	r3, #1
 8041922:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041924:	e006      	b.n	8041934 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8041926:	2301      	movs	r3, #1
 8041928:	73fb      	strb	r3, [r7, #15]
      break;
 804192a:	e004      	b.n	8041936 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804192c:	bf00      	nop
 804192e:	e002      	b.n	8041936 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041930:	bf00      	nop
 8041932:	e000      	b.n	8041936 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8041934:	bf00      	nop
  }

  if (status == HAL_OK)
 8041936:	7bfb      	ldrb	r3, [r7, #15]
 8041938:	2b00      	cmp	r3, #0
 804193a:	f040 809f 	bne.w	8041a7c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 804193e:	4b52      	ldr	r3, [pc, #328]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041940:	681b      	ldr	r3, [r3, #0]
 8041942:	4a51      	ldr	r2, [pc, #324]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041944:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8041948:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 804194a:	f7ff f8ad 	bl	8040aa8 <HAL_GetTick>
 804194e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041950:	e00f      	b.n	8041972 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041952:	f7ff f8a9 	bl	8040aa8 <HAL_GetTick>
 8041956:	4602      	mov	r2, r0
 8041958:	68bb      	ldr	r3, [r7, #8]
 804195a:	1ad3      	subs	r3, r2, r3
 804195c:	2b02      	cmp	r3, #2
 804195e:	d908      	bls.n	8041972 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041960:	4b49      	ldr	r3, [pc, #292]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041962:	681b      	ldr	r3, [r3, #0]
 8041964:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041968:	2b00      	cmp	r3, #0
 804196a:	d009      	beq.n	8041980 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 804196c:	2303      	movs	r3, #3
 804196e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8041970:	e006      	b.n	8041980 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8041972:	4b45      	ldr	r3, [pc, #276]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041974:	681b      	ldr	r3, [r3, #0]
 8041976:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804197a:	2b00      	cmp	r3, #0
 804197c:	d1e9      	bne.n	8041952 <RCCEx_PLLSAI1_Config+0x86>
 804197e:	e000      	b.n	8041982 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8041980:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8041982:	7bfb      	ldrb	r3, [r7, #15]
 8041984:	2b00      	cmp	r3, #0
 8041986:	d179      	bne.n	8041a7c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041988:	683b      	ldr	r3, [r7, #0]
 804198a:	2b00      	cmp	r3, #0
 804198c:	d116      	bne.n	80419bc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804198e:	4b3e      	ldr	r3, [pc, #248]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041990:	691a      	ldr	r2, [r3, #16]
 8041992:	4b3e      	ldr	r3, [pc, #248]	; (8041a8c <RCCEx_PLLSAI1_Config+0x1c0>)
 8041994:	4013      	ands	r3, r2
 8041996:	687a      	ldr	r2, [r7, #4]
 8041998:	6892      	ldr	r2, [r2, #8]
 804199a:	0211      	lsls	r1, r2, #8
 804199c:	687a      	ldr	r2, [r7, #4]
 804199e:	68d2      	ldr	r2, [r2, #12]
 80419a0:	06d2      	lsls	r2, r2, #27
 80419a2:	4311      	orrs	r1, r2
 80419a4:	687a      	ldr	r2, [r7, #4]
 80419a6:	6852      	ldr	r2, [r2, #4]
 80419a8:	3a01      	subs	r2, #1
 80419aa:	0112      	lsls	r2, r2, #4
 80419ac:	4311      	orrs	r1, r2
 80419ae:	687a      	ldr	r2, [r7, #4]
 80419b0:	6812      	ldr	r2, [r2, #0]
 80419b2:	430a      	orrs	r2, r1
 80419b4:	4934      	ldr	r1, [pc, #208]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 80419b6:	4313      	orrs	r3, r2
 80419b8:	610b      	str	r3, [r1, #16]
 80419ba:	e033      	b.n	8041a24 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 80419bc:	683b      	ldr	r3, [r7, #0]
 80419be:	2b01      	cmp	r3, #1
 80419c0:	d118      	bne.n	80419f4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80419c2:	4b31      	ldr	r3, [pc, #196]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 80419c4:	691a      	ldr	r2, [r3, #16]
 80419c6:	4b32      	ldr	r3, [pc, #200]	; (8041a90 <RCCEx_PLLSAI1_Config+0x1c4>)
 80419c8:	4013      	ands	r3, r2
 80419ca:	687a      	ldr	r2, [r7, #4]
 80419cc:	6892      	ldr	r2, [r2, #8]
 80419ce:	0211      	lsls	r1, r2, #8
 80419d0:	687a      	ldr	r2, [r7, #4]
 80419d2:	6912      	ldr	r2, [r2, #16]
 80419d4:	0852      	lsrs	r2, r2, #1
 80419d6:	3a01      	subs	r2, #1
 80419d8:	0552      	lsls	r2, r2, #21
 80419da:	4311      	orrs	r1, r2
 80419dc:	687a      	ldr	r2, [r7, #4]
 80419de:	6852      	ldr	r2, [r2, #4]
 80419e0:	3a01      	subs	r2, #1
 80419e2:	0112      	lsls	r2, r2, #4
 80419e4:	4311      	orrs	r1, r2
 80419e6:	687a      	ldr	r2, [r7, #4]
 80419e8:	6812      	ldr	r2, [r2, #0]
 80419ea:	430a      	orrs	r2, r1
 80419ec:	4926      	ldr	r1, [pc, #152]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 80419ee:	4313      	orrs	r3, r2
 80419f0:	610b      	str	r3, [r1, #16]
 80419f2:	e017      	b.n	8041a24 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80419f4:	4b24      	ldr	r3, [pc, #144]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 80419f6:	691a      	ldr	r2, [r3, #16]
 80419f8:	4b26      	ldr	r3, [pc, #152]	; (8041a94 <RCCEx_PLLSAI1_Config+0x1c8>)
 80419fa:	4013      	ands	r3, r2
 80419fc:	687a      	ldr	r2, [r7, #4]
 80419fe:	6892      	ldr	r2, [r2, #8]
 8041a00:	0211      	lsls	r1, r2, #8
 8041a02:	687a      	ldr	r2, [r7, #4]
 8041a04:	6952      	ldr	r2, [r2, #20]
 8041a06:	0852      	lsrs	r2, r2, #1
 8041a08:	3a01      	subs	r2, #1
 8041a0a:	0652      	lsls	r2, r2, #25
 8041a0c:	4311      	orrs	r1, r2
 8041a0e:	687a      	ldr	r2, [r7, #4]
 8041a10:	6852      	ldr	r2, [r2, #4]
 8041a12:	3a01      	subs	r2, #1
 8041a14:	0112      	lsls	r2, r2, #4
 8041a16:	4311      	orrs	r1, r2
 8041a18:	687a      	ldr	r2, [r7, #4]
 8041a1a:	6812      	ldr	r2, [r2, #0]
 8041a1c:	430a      	orrs	r2, r1
 8041a1e:	491a      	ldr	r1, [pc, #104]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a20:	4313      	orrs	r3, r2
 8041a22:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8041a24:	4b18      	ldr	r3, [pc, #96]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a26:	681b      	ldr	r3, [r3, #0]
 8041a28:	4a17      	ldr	r2, [pc, #92]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8041a2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041a30:	f7ff f83a 	bl	8040aa8 <HAL_GetTick>
 8041a34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041a36:	e00f      	b.n	8041a58 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8041a38:	f7ff f836 	bl	8040aa8 <HAL_GetTick>
 8041a3c:	4602      	mov	r2, r0
 8041a3e:	68bb      	ldr	r3, [r7, #8]
 8041a40:	1ad3      	subs	r3, r2, r3
 8041a42:	2b02      	cmp	r3, #2
 8041a44:	d908      	bls.n	8041a58 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041a46:	4b10      	ldr	r3, [pc, #64]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a48:	681b      	ldr	r3, [r3, #0]
 8041a4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041a4e:	2b00      	cmp	r3, #0
 8041a50:	d109      	bne.n	8041a66 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8041a52:	2303      	movs	r3, #3
 8041a54:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8041a56:	e006      	b.n	8041a66 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8041a58:	4b0b      	ldr	r3, [pc, #44]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a5a:	681b      	ldr	r3, [r3, #0]
 8041a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8041a60:	2b00      	cmp	r3, #0
 8041a62:	d0e9      	beq.n	8041a38 <RCCEx_PLLSAI1_Config+0x16c>
 8041a64:	e000      	b.n	8041a68 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8041a66:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8041a68:	7bfb      	ldrb	r3, [r7, #15]
 8041a6a:	2b00      	cmp	r3, #0
 8041a6c:	d106      	bne.n	8041a7c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8041a6e:	4b06      	ldr	r3, [pc, #24]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a70:	691a      	ldr	r2, [r3, #16]
 8041a72:	687b      	ldr	r3, [r7, #4]
 8041a74:	699b      	ldr	r3, [r3, #24]
 8041a76:	4904      	ldr	r1, [pc, #16]	; (8041a88 <RCCEx_PLLSAI1_Config+0x1bc>)
 8041a78:	4313      	orrs	r3, r2
 8041a7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8041a7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8041a7e:	4618      	mov	r0, r3
 8041a80:	3710      	adds	r7, #16
 8041a82:	46bd      	mov	sp, r7
 8041a84:	bd80      	pop	{r7, pc}
 8041a86:	bf00      	nop
 8041a88:	40021000 	.word	0x40021000
 8041a8c:	07ff800c 	.word	0x07ff800c
 8041a90:	ff9f800c 	.word	0xff9f800c
 8041a94:	f9ff800c 	.word	0xf9ff800c

08041a98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8041a98:	b580      	push	{r7, lr}
 8041a9a:	b084      	sub	sp, #16
 8041a9c:	af00      	add	r7, sp, #0
 8041a9e:	6078      	str	r0, [r7, #4]
 8041aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041aa2:	2300      	movs	r3, #0
 8041aa4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8041aa6:	687b      	ldr	r3, [r7, #4]
 8041aa8:	681b      	ldr	r3, [r3, #0]
 8041aaa:	2b03      	cmp	r3, #3
 8041aac:	d018      	beq.n	8041ae0 <RCCEx_PLLSAI2_Config+0x48>
 8041aae:	2b03      	cmp	r3, #3
 8041ab0:	d81f      	bhi.n	8041af2 <RCCEx_PLLSAI2_Config+0x5a>
 8041ab2:	2b01      	cmp	r3, #1
 8041ab4:	d002      	beq.n	8041abc <RCCEx_PLLSAI2_Config+0x24>
 8041ab6:	2b02      	cmp	r3, #2
 8041ab8:	d009      	beq.n	8041ace <RCCEx_PLLSAI2_Config+0x36>
 8041aba:	e01a      	b.n	8041af2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8041abc:	4b4a      	ldr	r3, [pc, #296]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041abe:	681b      	ldr	r3, [r3, #0]
 8041ac0:	f003 0302 	and.w	r3, r3, #2
 8041ac4:	2b00      	cmp	r3, #0
 8041ac6:	d117      	bne.n	8041af8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8041ac8:	2301      	movs	r3, #1
 8041aca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041acc:	e014      	b.n	8041af8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8041ace:	4b46      	ldr	r3, [pc, #280]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041ad0:	681b      	ldr	r3, [r3, #0]
 8041ad2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041ad6:	2b00      	cmp	r3, #0
 8041ad8:	d110      	bne.n	8041afc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8041ada:	2301      	movs	r3, #1
 8041adc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041ade:	e00d      	b.n	8041afc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8041ae0:	4b41      	ldr	r3, [pc, #260]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041ae2:	681b      	ldr	r3, [r3, #0]
 8041ae4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8041ae8:	2b00      	cmp	r3, #0
 8041aea:	d109      	bne.n	8041b00 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8041aec:	2301      	movs	r3, #1
 8041aee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8041af0:	e006      	b.n	8041b00 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8041af2:	2301      	movs	r3, #1
 8041af4:	73fb      	strb	r3, [r7, #15]
      break;
 8041af6:	e004      	b.n	8041b02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041af8:	bf00      	nop
 8041afa:	e002      	b.n	8041b02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041afc:	bf00      	nop
 8041afe:	e000      	b.n	8041b02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8041b00:	bf00      	nop
  }

  if (status == HAL_OK)
 8041b02:	7bfb      	ldrb	r3, [r7, #15]
 8041b04:	2b00      	cmp	r3, #0
 8041b06:	d169      	bne.n	8041bdc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8041b08:	4b37      	ldr	r3, [pc, #220]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b0a:	681b      	ldr	r3, [r3, #0]
 8041b0c:	4a36      	ldr	r2, [pc, #216]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041b12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041b14:	f7fe ffc8 	bl	8040aa8 <HAL_GetTick>
 8041b18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041b1a:	e00f      	b.n	8041b3c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041b1c:	f7fe ffc4 	bl	8040aa8 <HAL_GetTick>
 8041b20:	4602      	mov	r2, r0
 8041b22:	68bb      	ldr	r3, [r7, #8]
 8041b24:	1ad3      	subs	r3, r2, r3
 8041b26:	2b02      	cmp	r3, #2
 8041b28:	d908      	bls.n	8041b3c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041b2a:	4b2f      	ldr	r3, [pc, #188]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b2c:	681b      	ldr	r3, [r3, #0]
 8041b2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041b32:	2b00      	cmp	r3, #0
 8041b34:	d009      	beq.n	8041b4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8041b36:	2303      	movs	r3, #3
 8041b38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8041b3a:	e006      	b.n	8041b4a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8041b3c:	4b2a      	ldr	r3, [pc, #168]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b3e:	681b      	ldr	r3, [r3, #0]
 8041b40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041b44:	2b00      	cmp	r3, #0
 8041b46:	d1e9      	bne.n	8041b1c <RCCEx_PLLSAI2_Config+0x84>
 8041b48:	e000      	b.n	8041b4c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8041b4a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8041b4c:	7bfb      	ldrb	r3, [r7, #15]
 8041b4e:	2b00      	cmp	r3, #0
 8041b50:	d144      	bne.n	8041bdc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8041b52:	683b      	ldr	r3, [r7, #0]
 8041b54:	2b00      	cmp	r3, #0
 8041b56:	d115      	bne.n	8041b84 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8041b58:	4b23      	ldr	r3, [pc, #140]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b5a:	695a      	ldr	r2, [r3, #20]
 8041b5c:	4b23      	ldr	r3, [pc, #140]	; (8041bec <RCCEx_PLLSAI2_Config+0x154>)
 8041b5e:	4013      	ands	r3, r2
 8041b60:	687a      	ldr	r2, [r7, #4]
 8041b62:	6892      	ldr	r2, [r2, #8]
 8041b64:	0211      	lsls	r1, r2, #8
 8041b66:	687a      	ldr	r2, [r7, #4]
 8041b68:	68d2      	ldr	r2, [r2, #12]
 8041b6a:	06d2      	lsls	r2, r2, #27
 8041b6c:	4311      	orrs	r1, r2
 8041b6e:	687a      	ldr	r2, [r7, #4]
 8041b70:	6852      	ldr	r2, [r2, #4]
 8041b72:	3a01      	subs	r2, #1
 8041b74:	0112      	lsls	r2, r2, #4
 8041b76:	4311      	orrs	r1, r2
 8041b78:	687a      	ldr	r2, [r7, #4]
 8041b7a:	6812      	ldr	r2, [r2, #0]
 8041b7c:	430a      	orrs	r2, r1
 8041b7e:	491a      	ldr	r1, [pc, #104]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b80:	4313      	orrs	r3, r2
 8041b82:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8041b84:	4b18      	ldr	r3, [pc, #96]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b86:	681b      	ldr	r3, [r3, #0]
 8041b88:	4a17      	ldr	r2, [pc, #92]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041b8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041b90:	f7fe ff8a 	bl	8040aa8 <HAL_GetTick>
 8041b94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041b96:	e00f      	b.n	8041bb8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8041b98:	f7fe ff86 	bl	8040aa8 <HAL_GetTick>
 8041b9c:	4602      	mov	r2, r0
 8041b9e:	68bb      	ldr	r3, [r7, #8]
 8041ba0:	1ad3      	subs	r3, r2, r3
 8041ba2:	2b02      	cmp	r3, #2
 8041ba4:	d908      	bls.n	8041bb8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041ba6:	4b10      	ldr	r3, [pc, #64]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041ba8:	681b      	ldr	r3, [r3, #0]
 8041baa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041bae:	2b00      	cmp	r3, #0
 8041bb0:	d109      	bne.n	8041bc6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8041bb2:	2303      	movs	r3, #3
 8041bb4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8041bb6:	e006      	b.n	8041bc6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8041bb8:	4b0b      	ldr	r3, [pc, #44]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041bba:	681b      	ldr	r3, [r3, #0]
 8041bbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041bc0:	2b00      	cmp	r3, #0
 8041bc2:	d0e9      	beq.n	8041b98 <RCCEx_PLLSAI2_Config+0x100>
 8041bc4:	e000      	b.n	8041bc8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8041bc6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8041bc8:	7bfb      	ldrb	r3, [r7, #15]
 8041bca:	2b00      	cmp	r3, #0
 8041bcc:	d106      	bne.n	8041bdc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8041bce:	4b06      	ldr	r3, [pc, #24]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041bd0:	695a      	ldr	r2, [r3, #20]
 8041bd2:	687b      	ldr	r3, [r7, #4]
 8041bd4:	691b      	ldr	r3, [r3, #16]
 8041bd6:	4904      	ldr	r1, [pc, #16]	; (8041be8 <RCCEx_PLLSAI2_Config+0x150>)
 8041bd8:	4313      	orrs	r3, r2
 8041bda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8041bdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8041bde:	4618      	mov	r0, r3
 8041be0:	3710      	adds	r7, #16
 8041be2:	46bd      	mov	sp, r7
 8041be4:	bd80      	pop	{r7, pc}
 8041be6:	bf00      	nop
 8041be8:	40021000 	.word	0x40021000
 8041bec:	07ff800c 	.word	0x07ff800c

08041bf0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8041bf0:	b580      	push	{r7, lr}
 8041bf2:	b082      	sub	sp, #8
 8041bf4:	af00      	add	r7, sp, #0
 8041bf6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8041bf8:	687b      	ldr	r3, [r7, #4]
 8041bfa:	2b00      	cmp	r3, #0
 8041bfc:	d101      	bne.n	8041c02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8041bfe:	2301      	movs	r3, #1
 8041c00:	e049      	b.n	8041c96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8041c08:	b2db      	uxtb	r3, r3
 8041c0a:	2b00      	cmp	r3, #0
 8041c0c:	d106      	bne.n	8041c1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8041c0e:	687b      	ldr	r3, [r7, #4]
 8041c10:	2200      	movs	r2, #0
 8041c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8041c16:	6878      	ldr	r0, [r7, #4]
 8041c18:	f7fe fdf6 	bl	8040808 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8041c1c:	687b      	ldr	r3, [r7, #4]
 8041c1e:	2202      	movs	r2, #2
 8041c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8041c24:	687b      	ldr	r3, [r7, #4]
 8041c26:	681a      	ldr	r2, [r3, #0]
 8041c28:	687b      	ldr	r3, [r7, #4]
 8041c2a:	3304      	adds	r3, #4
 8041c2c:	4619      	mov	r1, r3
 8041c2e:	4610      	mov	r0, r2
 8041c30:	f000 fa50 	bl	80420d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8041c34:	687b      	ldr	r3, [r7, #4]
 8041c36:	2201      	movs	r2, #1
 8041c38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041c3c:	687b      	ldr	r3, [r7, #4]
 8041c3e:	2201      	movs	r2, #1
 8041c40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	2201      	movs	r2, #1
 8041c48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8041c4c:	687b      	ldr	r3, [r7, #4]
 8041c4e:	2201      	movs	r2, #1
 8041c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8041c54:	687b      	ldr	r3, [r7, #4]
 8041c56:	2201      	movs	r2, #1
 8041c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8041c5c:	687b      	ldr	r3, [r7, #4]
 8041c5e:	2201      	movs	r2, #1
 8041c60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8041c64:	687b      	ldr	r3, [r7, #4]
 8041c66:	2201      	movs	r2, #1
 8041c68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8041c6c:	687b      	ldr	r3, [r7, #4]
 8041c6e:	2201      	movs	r2, #1
 8041c70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8041c74:	687b      	ldr	r3, [r7, #4]
 8041c76:	2201      	movs	r2, #1
 8041c78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8041c7c:	687b      	ldr	r3, [r7, #4]
 8041c7e:	2201      	movs	r2, #1
 8041c80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8041c84:	687b      	ldr	r3, [r7, #4]
 8041c86:	2201      	movs	r2, #1
 8041c88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8041c8c:	687b      	ldr	r3, [r7, #4]
 8041c8e:	2201      	movs	r2, #1
 8041c90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8041c94:	2300      	movs	r3, #0
}
 8041c96:	4618      	mov	r0, r3
 8041c98:	3708      	adds	r7, #8
 8041c9a:	46bd      	mov	sp, r7
 8041c9c:	bd80      	pop	{r7, pc}

08041c9e <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8041c9e:	b580      	push	{r7, lr}
 8041ca0:	b082      	sub	sp, #8
 8041ca2:	af00      	add	r7, sp, #0
 8041ca4:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8041ca6:	687b      	ldr	r3, [r7, #4]
 8041ca8:	681b      	ldr	r3, [r3, #0]
 8041caa:	691b      	ldr	r3, [r3, #16]
 8041cac:	f003 0302 	and.w	r3, r3, #2
 8041cb0:	2b02      	cmp	r3, #2
 8041cb2:	d122      	bne.n	8041cfa <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8041cb4:	687b      	ldr	r3, [r7, #4]
 8041cb6:	681b      	ldr	r3, [r3, #0]
 8041cb8:	68db      	ldr	r3, [r3, #12]
 8041cba:	f003 0302 	and.w	r3, r3, #2
 8041cbe:	2b02      	cmp	r3, #2
 8041cc0:	d11b      	bne.n	8041cfa <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8041cc2:	687b      	ldr	r3, [r7, #4]
 8041cc4:	681b      	ldr	r3, [r3, #0]
 8041cc6:	f06f 0202 	mvn.w	r2, #2
 8041cca:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8041ccc:	687b      	ldr	r3, [r7, #4]
 8041cce:	2201      	movs	r2, #1
 8041cd0:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8041cd2:	687b      	ldr	r3, [r7, #4]
 8041cd4:	681b      	ldr	r3, [r3, #0]
 8041cd6:	699b      	ldr	r3, [r3, #24]
 8041cd8:	f003 0303 	and.w	r3, r3, #3
 8041cdc:	2b00      	cmp	r3, #0
 8041cde:	d003      	beq.n	8041ce8 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8041ce0:	6878      	ldr	r0, [r7, #4]
 8041ce2:	f000 f9d8 	bl	8042096 <HAL_TIM_IC_CaptureCallback>
 8041ce6:	e005      	b.n	8041cf4 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8041ce8:	6878      	ldr	r0, [r7, #4]
 8041cea:	f000 f9ca 	bl	8042082 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041cee:	6878      	ldr	r0, [r7, #4]
 8041cf0:	f000 f9db 	bl	80420aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041cf4:	687b      	ldr	r3, [r7, #4]
 8041cf6:	2200      	movs	r2, #0
 8041cf8:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8041cfa:	687b      	ldr	r3, [r7, #4]
 8041cfc:	681b      	ldr	r3, [r3, #0]
 8041cfe:	691b      	ldr	r3, [r3, #16]
 8041d00:	f003 0304 	and.w	r3, r3, #4
 8041d04:	2b04      	cmp	r3, #4
 8041d06:	d122      	bne.n	8041d4e <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	681b      	ldr	r3, [r3, #0]
 8041d0c:	68db      	ldr	r3, [r3, #12]
 8041d0e:	f003 0304 	and.w	r3, r3, #4
 8041d12:	2b04      	cmp	r3, #4
 8041d14:	d11b      	bne.n	8041d4e <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8041d16:	687b      	ldr	r3, [r7, #4]
 8041d18:	681b      	ldr	r3, [r3, #0]
 8041d1a:	f06f 0204 	mvn.w	r2, #4
 8041d1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8041d20:	687b      	ldr	r3, [r7, #4]
 8041d22:	2202      	movs	r2, #2
 8041d24:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8041d26:	687b      	ldr	r3, [r7, #4]
 8041d28:	681b      	ldr	r3, [r3, #0]
 8041d2a:	699b      	ldr	r3, [r3, #24]
 8041d2c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041d30:	2b00      	cmp	r3, #0
 8041d32:	d003      	beq.n	8041d3c <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041d34:	6878      	ldr	r0, [r7, #4]
 8041d36:	f000 f9ae 	bl	8042096 <HAL_TIM_IC_CaptureCallback>
 8041d3a:	e005      	b.n	8041d48 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041d3c:	6878      	ldr	r0, [r7, #4]
 8041d3e:	f000 f9a0 	bl	8042082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041d42:	6878      	ldr	r0, [r7, #4]
 8041d44:	f000 f9b1 	bl	80420aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041d48:	687b      	ldr	r3, [r7, #4]
 8041d4a:	2200      	movs	r2, #0
 8041d4c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8041d4e:	687b      	ldr	r3, [r7, #4]
 8041d50:	681b      	ldr	r3, [r3, #0]
 8041d52:	691b      	ldr	r3, [r3, #16]
 8041d54:	f003 0308 	and.w	r3, r3, #8
 8041d58:	2b08      	cmp	r3, #8
 8041d5a:	d122      	bne.n	8041da2 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8041d5c:	687b      	ldr	r3, [r7, #4]
 8041d5e:	681b      	ldr	r3, [r3, #0]
 8041d60:	68db      	ldr	r3, [r3, #12]
 8041d62:	f003 0308 	and.w	r3, r3, #8
 8041d66:	2b08      	cmp	r3, #8
 8041d68:	d11b      	bne.n	8041da2 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8041d6a:	687b      	ldr	r3, [r7, #4]
 8041d6c:	681b      	ldr	r3, [r3, #0]
 8041d6e:	f06f 0208 	mvn.w	r2, #8
 8041d72:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8041d74:	687b      	ldr	r3, [r7, #4]
 8041d76:	2204      	movs	r2, #4
 8041d78:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8041d7a:	687b      	ldr	r3, [r7, #4]
 8041d7c:	681b      	ldr	r3, [r3, #0]
 8041d7e:	69db      	ldr	r3, [r3, #28]
 8041d80:	f003 0303 	and.w	r3, r3, #3
 8041d84:	2b00      	cmp	r3, #0
 8041d86:	d003      	beq.n	8041d90 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041d88:	6878      	ldr	r0, [r7, #4]
 8041d8a:	f000 f984 	bl	8042096 <HAL_TIM_IC_CaptureCallback>
 8041d8e:	e005      	b.n	8041d9c <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041d90:	6878      	ldr	r0, [r7, #4]
 8041d92:	f000 f976 	bl	8042082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041d96:	6878      	ldr	r0, [r7, #4]
 8041d98:	f000 f987 	bl	80420aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	2200      	movs	r2, #0
 8041da0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8041da2:	687b      	ldr	r3, [r7, #4]
 8041da4:	681b      	ldr	r3, [r3, #0]
 8041da6:	691b      	ldr	r3, [r3, #16]
 8041da8:	f003 0310 	and.w	r3, r3, #16
 8041dac:	2b10      	cmp	r3, #16
 8041dae:	d122      	bne.n	8041df6 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8041db0:	687b      	ldr	r3, [r7, #4]
 8041db2:	681b      	ldr	r3, [r3, #0]
 8041db4:	68db      	ldr	r3, [r3, #12]
 8041db6:	f003 0310 	and.w	r3, r3, #16
 8041dba:	2b10      	cmp	r3, #16
 8041dbc:	d11b      	bne.n	8041df6 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8041dbe:	687b      	ldr	r3, [r7, #4]
 8041dc0:	681b      	ldr	r3, [r3, #0]
 8041dc2:	f06f 0210 	mvn.w	r2, #16
 8041dc6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8041dc8:	687b      	ldr	r3, [r7, #4]
 8041dca:	2208      	movs	r2, #8
 8041dcc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8041dce:	687b      	ldr	r3, [r7, #4]
 8041dd0:	681b      	ldr	r3, [r3, #0]
 8041dd2:	69db      	ldr	r3, [r3, #28]
 8041dd4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8041dd8:	2b00      	cmp	r3, #0
 8041dda:	d003      	beq.n	8041de4 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8041ddc:	6878      	ldr	r0, [r7, #4]
 8041dde:	f000 f95a 	bl	8042096 <HAL_TIM_IC_CaptureCallback>
 8041de2:	e005      	b.n	8041df0 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8041de4:	6878      	ldr	r0, [r7, #4]
 8041de6:	f000 f94c 	bl	8042082 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8041dea:	6878      	ldr	r0, [r7, #4]
 8041dec:	f000 f95d 	bl	80420aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8041df0:	687b      	ldr	r3, [r7, #4]
 8041df2:	2200      	movs	r2, #0
 8041df4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8041df6:	687b      	ldr	r3, [r7, #4]
 8041df8:	681b      	ldr	r3, [r3, #0]
 8041dfa:	691b      	ldr	r3, [r3, #16]
 8041dfc:	f003 0301 	and.w	r3, r3, #1
 8041e00:	2b01      	cmp	r3, #1
 8041e02:	d10e      	bne.n	8041e22 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8041e04:	687b      	ldr	r3, [r7, #4]
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	68db      	ldr	r3, [r3, #12]
 8041e0a:	f003 0301 	and.w	r3, r3, #1
 8041e0e:	2b01      	cmp	r3, #1
 8041e10:	d107      	bne.n	8041e22 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8041e12:	687b      	ldr	r3, [r7, #4]
 8041e14:	681b      	ldr	r3, [r3, #0]
 8041e16:	f06f 0201 	mvn.w	r2, #1
 8041e1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8041e1c:	6878      	ldr	r0, [r7, #4]
 8041e1e:	f000 f926 	bl	804206e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8041e22:	687b      	ldr	r3, [r7, #4]
 8041e24:	681b      	ldr	r3, [r3, #0]
 8041e26:	691b      	ldr	r3, [r3, #16]
 8041e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041e2c:	2b80      	cmp	r3, #128	; 0x80
 8041e2e:	d10e      	bne.n	8041e4e <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041e30:	687b      	ldr	r3, [r7, #4]
 8041e32:	681b      	ldr	r3, [r3, #0]
 8041e34:	68db      	ldr	r3, [r3, #12]
 8041e36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041e3a:	2b80      	cmp	r3, #128	; 0x80
 8041e3c:	d107      	bne.n	8041e4e <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8041e3e:	687b      	ldr	r3, [r7, #4]
 8041e40:	681b      	ldr	r3, [r3, #0]
 8041e42:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8041e46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8041e48:	6878      	ldr	r0, [r7, #4]
 8041e4a:	f000 fb0b 	bl	8042464 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8041e4e:	687b      	ldr	r3, [r7, #4]
 8041e50:	681b      	ldr	r3, [r3, #0]
 8041e52:	691b      	ldr	r3, [r3, #16]
 8041e54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8041e58:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8041e5c:	d10e      	bne.n	8041e7c <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8041e5e:	687b      	ldr	r3, [r7, #4]
 8041e60:	681b      	ldr	r3, [r3, #0]
 8041e62:	68db      	ldr	r3, [r3, #12]
 8041e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8041e68:	2b80      	cmp	r3, #128	; 0x80
 8041e6a:	d107      	bne.n	8041e7c <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8041e6c:	687b      	ldr	r3, [r7, #4]
 8041e6e:	681b      	ldr	r3, [r3, #0]
 8041e70:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8041e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8041e76:	6878      	ldr	r0, [r7, #4]
 8041e78:	f000 fafe 	bl	8042478 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8041e7c:	687b      	ldr	r3, [r7, #4]
 8041e7e:	681b      	ldr	r3, [r3, #0]
 8041e80:	691b      	ldr	r3, [r3, #16]
 8041e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041e86:	2b40      	cmp	r3, #64	; 0x40
 8041e88:	d10e      	bne.n	8041ea8 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8041e8a:	687b      	ldr	r3, [r7, #4]
 8041e8c:	681b      	ldr	r3, [r3, #0]
 8041e8e:	68db      	ldr	r3, [r3, #12]
 8041e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041e94:	2b40      	cmp	r3, #64	; 0x40
 8041e96:	d107      	bne.n	8041ea8 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8041e98:	687b      	ldr	r3, [r7, #4]
 8041e9a:	681b      	ldr	r3, [r3, #0]
 8041e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8041ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8041ea2:	6878      	ldr	r0, [r7, #4]
 8041ea4:	f000 f90b 	bl	80420be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8041ea8:	687b      	ldr	r3, [r7, #4]
 8041eaa:	681b      	ldr	r3, [r3, #0]
 8041eac:	691b      	ldr	r3, [r3, #16]
 8041eae:	f003 0320 	and.w	r3, r3, #32
 8041eb2:	2b20      	cmp	r3, #32
 8041eb4:	d10e      	bne.n	8041ed4 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8041eb6:	687b      	ldr	r3, [r7, #4]
 8041eb8:	681b      	ldr	r3, [r3, #0]
 8041eba:	68db      	ldr	r3, [r3, #12]
 8041ebc:	f003 0320 	and.w	r3, r3, #32
 8041ec0:	2b20      	cmp	r3, #32
 8041ec2:	d107      	bne.n	8041ed4 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8041ec4:	687b      	ldr	r3, [r7, #4]
 8041ec6:	681b      	ldr	r3, [r3, #0]
 8041ec8:	f06f 0220 	mvn.w	r2, #32
 8041ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8041ece:	6878      	ldr	r0, [r7, #4]
 8041ed0:	f000 fabe 	bl	8042450 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8041ed4:	bf00      	nop
 8041ed6:	3708      	adds	r7, #8
 8041ed8:	46bd      	mov	sp, r7
 8041eda:	bd80      	pop	{r7, pc}

08041edc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8041edc:	b580      	push	{r7, lr}
 8041ede:	b084      	sub	sp, #16
 8041ee0:	af00      	add	r7, sp, #0
 8041ee2:	6078      	str	r0, [r7, #4]
 8041ee4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8041ee6:	2300      	movs	r3, #0
 8041ee8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8041eea:	687b      	ldr	r3, [r7, #4]
 8041eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8041ef0:	2b01      	cmp	r3, #1
 8041ef2:	d101      	bne.n	8041ef8 <HAL_TIM_ConfigClockSource+0x1c>
 8041ef4:	2302      	movs	r3, #2
 8041ef6:	e0b6      	b.n	8042066 <HAL_TIM_ConfigClockSource+0x18a>
 8041ef8:	687b      	ldr	r3, [r7, #4]
 8041efa:	2201      	movs	r2, #1
 8041efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8041f00:	687b      	ldr	r3, [r7, #4]
 8041f02:	2202      	movs	r2, #2
 8041f04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8041f08:	687b      	ldr	r3, [r7, #4]
 8041f0a:	681b      	ldr	r3, [r3, #0]
 8041f0c:	689b      	ldr	r3, [r3, #8]
 8041f0e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8041f10:	68bb      	ldr	r3, [r7, #8]
 8041f12:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8041f16:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8041f1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8041f1c:	68bb      	ldr	r3, [r7, #8]
 8041f1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8041f22:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8041f24:	687b      	ldr	r3, [r7, #4]
 8041f26:	681b      	ldr	r3, [r3, #0]
 8041f28:	68ba      	ldr	r2, [r7, #8]
 8041f2a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8041f2c:	683b      	ldr	r3, [r7, #0]
 8041f2e:	681b      	ldr	r3, [r3, #0]
 8041f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041f34:	d03e      	beq.n	8041fb4 <HAL_TIM_ConfigClockSource+0xd8>
 8041f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8041f3a:	f200 8087 	bhi.w	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041f42:	f000 8086 	beq.w	8042052 <HAL_TIM_ConfigClockSource+0x176>
 8041f46:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8041f4a:	d87f      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f4c:	2b70      	cmp	r3, #112	; 0x70
 8041f4e:	d01a      	beq.n	8041f86 <HAL_TIM_ConfigClockSource+0xaa>
 8041f50:	2b70      	cmp	r3, #112	; 0x70
 8041f52:	d87b      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f54:	2b60      	cmp	r3, #96	; 0x60
 8041f56:	d050      	beq.n	8041ffa <HAL_TIM_ConfigClockSource+0x11e>
 8041f58:	2b60      	cmp	r3, #96	; 0x60
 8041f5a:	d877      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f5c:	2b50      	cmp	r3, #80	; 0x50
 8041f5e:	d03c      	beq.n	8041fda <HAL_TIM_ConfigClockSource+0xfe>
 8041f60:	2b50      	cmp	r3, #80	; 0x50
 8041f62:	d873      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f64:	2b40      	cmp	r3, #64	; 0x40
 8041f66:	d058      	beq.n	804201a <HAL_TIM_ConfigClockSource+0x13e>
 8041f68:	2b40      	cmp	r3, #64	; 0x40
 8041f6a:	d86f      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f6c:	2b30      	cmp	r3, #48	; 0x30
 8041f6e:	d064      	beq.n	804203a <HAL_TIM_ConfigClockSource+0x15e>
 8041f70:	2b30      	cmp	r3, #48	; 0x30
 8041f72:	d86b      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f74:	2b20      	cmp	r3, #32
 8041f76:	d060      	beq.n	804203a <HAL_TIM_ConfigClockSource+0x15e>
 8041f78:	2b20      	cmp	r3, #32
 8041f7a:	d867      	bhi.n	804204c <HAL_TIM_ConfigClockSource+0x170>
 8041f7c:	2b00      	cmp	r3, #0
 8041f7e:	d05c      	beq.n	804203a <HAL_TIM_ConfigClockSource+0x15e>
 8041f80:	2b10      	cmp	r3, #16
 8041f82:	d05a      	beq.n	804203a <HAL_TIM_ConfigClockSource+0x15e>
 8041f84:	e062      	b.n	804204c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8041f86:	687b      	ldr	r3, [r7, #4]
 8041f88:	6818      	ldr	r0, [r3, #0]
 8041f8a:	683b      	ldr	r3, [r7, #0]
 8041f8c:	6899      	ldr	r1, [r3, #8]
 8041f8e:	683b      	ldr	r3, [r7, #0]
 8041f90:	685a      	ldr	r2, [r3, #4]
 8041f92:	683b      	ldr	r3, [r7, #0]
 8041f94:	68db      	ldr	r3, [r3, #12]
 8041f96:	f000 f9b3 	bl	8042300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8041f9a:	687b      	ldr	r3, [r7, #4]
 8041f9c:	681b      	ldr	r3, [r3, #0]
 8041f9e:	689b      	ldr	r3, [r3, #8]
 8041fa0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8041fa2:	68bb      	ldr	r3, [r7, #8]
 8041fa4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8041fa8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8041faa:	687b      	ldr	r3, [r7, #4]
 8041fac:	681b      	ldr	r3, [r3, #0]
 8041fae:	68ba      	ldr	r2, [r7, #8]
 8041fb0:	609a      	str	r2, [r3, #8]
      break;
 8041fb2:	e04f      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8041fb4:	687b      	ldr	r3, [r7, #4]
 8041fb6:	6818      	ldr	r0, [r3, #0]
 8041fb8:	683b      	ldr	r3, [r7, #0]
 8041fba:	6899      	ldr	r1, [r3, #8]
 8041fbc:	683b      	ldr	r3, [r7, #0]
 8041fbe:	685a      	ldr	r2, [r3, #4]
 8041fc0:	683b      	ldr	r3, [r7, #0]
 8041fc2:	68db      	ldr	r3, [r3, #12]
 8041fc4:	f000 f99c 	bl	8042300 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8041fc8:	687b      	ldr	r3, [r7, #4]
 8041fca:	681b      	ldr	r3, [r3, #0]
 8041fcc:	689a      	ldr	r2, [r3, #8]
 8041fce:	687b      	ldr	r3, [r7, #4]
 8041fd0:	681b      	ldr	r3, [r3, #0]
 8041fd2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8041fd6:	609a      	str	r2, [r3, #8]
      break;
 8041fd8:	e03c      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8041fda:	687b      	ldr	r3, [r7, #4]
 8041fdc:	6818      	ldr	r0, [r3, #0]
 8041fde:	683b      	ldr	r3, [r7, #0]
 8041fe0:	6859      	ldr	r1, [r3, #4]
 8041fe2:	683b      	ldr	r3, [r7, #0]
 8041fe4:	68db      	ldr	r3, [r3, #12]
 8041fe6:	461a      	mov	r2, r3
 8041fe8:	f000 f90e 	bl	8042208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8041fec:	687b      	ldr	r3, [r7, #4]
 8041fee:	681b      	ldr	r3, [r3, #0]
 8041ff0:	2150      	movs	r1, #80	; 0x50
 8041ff2:	4618      	mov	r0, r3
 8041ff4:	f000 f967 	bl	80422c6 <TIM_ITRx_SetConfig>
      break;
 8041ff8:	e02c      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8041ffa:	687b      	ldr	r3, [r7, #4]
 8041ffc:	6818      	ldr	r0, [r3, #0]
 8041ffe:	683b      	ldr	r3, [r7, #0]
 8042000:	6859      	ldr	r1, [r3, #4]
 8042002:	683b      	ldr	r3, [r7, #0]
 8042004:	68db      	ldr	r3, [r3, #12]
 8042006:	461a      	mov	r2, r3
 8042008:	f000 f92d 	bl	8042266 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 804200c:	687b      	ldr	r3, [r7, #4]
 804200e:	681b      	ldr	r3, [r3, #0]
 8042010:	2160      	movs	r1, #96	; 0x60
 8042012:	4618      	mov	r0, r3
 8042014:	f000 f957 	bl	80422c6 <TIM_ITRx_SetConfig>
      break;
 8042018:	e01c      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 804201a:	687b      	ldr	r3, [r7, #4]
 804201c:	6818      	ldr	r0, [r3, #0]
 804201e:	683b      	ldr	r3, [r7, #0]
 8042020:	6859      	ldr	r1, [r3, #4]
 8042022:	683b      	ldr	r3, [r7, #0]
 8042024:	68db      	ldr	r3, [r3, #12]
 8042026:	461a      	mov	r2, r3
 8042028:	f000 f8ee 	bl	8042208 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 804202c:	687b      	ldr	r3, [r7, #4]
 804202e:	681b      	ldr	r3, [r3, #0]
 8042030:	2140      	movs	r1, #64	; 0x40
 8042032:	4618      	mov	r0, r3
 8042034:	f000 f947 	bl	80422c6 <TIM_ITRx_SetConfig>
      break;
 8042038:	e00c      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 804203a:	687b      	ldr	r3, [r7, #4]
 804203c:	681a      	ldr	r2, [r3, #0]
 804203e:	683b      	ldr	r3, [r7, #0]
 8042040:	681b      	ldr	r3, [r3, #0]
 8042042:	4619      	mov	r1, r3
 8042044:	4610      	mov	r0, r2
 8042046:	f000 f93e 	bl	80422c6 <TIM_ITRx_SetConfig>
      break;
 804204a:	e003      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 804204c:	2301      	movs	r3, #1
 804204e:	73fb      	strb	r3, [r7, #15]
      break;
 8042050:	e000      	b.n	8042054 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8042052:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8042054:	687b      	ldr	r3, [r7, #4]
 8042056:	2201      	movs	r2, #1
 8042058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 804205c:	687b      	ldr	r3, [r7, #4]
 804205e:	2200      	movs	r2, #0
 8042060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8042064:	7bfb      	ldrb	r3, [r7, #15]
}
 8042066:	4618      	mov	r0, r3
 8042068:	3710      	adds	r7, #16
 804206a:	46bd      	mov	sp, r7
 804206c:	bd80      	pop	{r7, pc}

0804206e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 804206e:	b480      	push	{r7}
 8042070:	b083      	sub	sp, #12
 8042072:	af00      	add	r7, sp, #0
 8042074:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8042076:	bf00      	nop
 8042078:	370c      	adds	r7, #12
 804207a:	46bd      	mov	sp, r7
 804207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042080:	4770      	bx	lr

08042082 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8042082:	b480      	push	{r7}
 8042084:	b083      	sub	sp, #12
 8042086:	af00      	add	r7, sp, #0
 8042088:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 804208a:	bf00      	nop
 804208c:	370c      	adds	r7, #12
 804208e:	46bd      	mov	sp, r7
 8042090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042094:	4770      	bx	lr

08042096 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8042096:	b480      	push	{r7}
 8042098:	b083      	sub	sp, #12
 804209a:	af00      	add	r7, sp, #0
 804209c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 804209e:	bf00      	nop
 80420a0:	370c      	adds	r7, #12
 80420a2:	46bd      	mov	sp, r7
 80420a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420a8:	4770      	bx	lr

080420aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80420aa:	b480      	push	{r7}
 80420ac:	b083      	sub	sp, #12
 80420ae:	af00      	add	r7, sp, #0
 80420b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80420b2:	bf00      	nop
 80420b4:	370c      	adds	r7, #12
 80420b6:	46bd      	mov	sp, r7
 80420b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420bc:	4770      	bx	lr

080420be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80420be:	b480      	push	{r7}
 80420c0:	b083      	sub	sp, #12
 80420c2:	af00      	add	r7, sp, #0
 80420c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80420c6:	bf00      	nop
 80420c8:	370c      	adds	r7, #12
 80420ca:	46bd      	mov	sp, r7
 80420cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80420d0:	4770      	bx	lr
	...

080420d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80420d4:	b480      	push	{r7}
 80420d6:	b085      	sub	sp, #20
 80420d8:	af00      	add	r7, sp, #0
 80420da:	6078      	str	r0, [r7, #4]
 80420dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80420de:	687b      	ldr	r3, [r7, #4]
 80420e0:	681b      	ldr	r3, [r3, #0]
 80420e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80420e4:	687b      	ldr	r3, [r7, #4]
 80420e6:	4a40      	ldr	r2, [pc, #256]	; (80421e8 <TIM_Base_SetConfig+0x114>)
 80420e8:	4293      	cmp	r3, r2
 80420ea:	d013      	beq.n	8042114 <TIM_Base_SetConfig+0x40>
 80420ec:	687b      	ldr	r3, [r7, #4]
 80420ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80420f2:	d00f      	beq.n	8042114 <TIM_Base_SetConfig+0x40>
 80420f4:	687b      	ldr	r3, [r7, #4]
 80420f6:	4a3d      	ldr	r2, [pc, #244]	; (80421ec <TIM_Base_SetConfig+0x118>)
 80420f8:	4293      	cmp	r3, r2
 80420fa:	d00b      	beq.n	8042114 <TIM_Base_SetConfig+0x40>
 80420fc:	687b      	ldr	r3, [r7, #4]
 80420fe:	4a3c      	ldr	r2, [pc, #240]	; (80421f0 <TIM_Base_SetConfig+0x11c>)
 8042100:	4293      	cmp	r3, r2
 8042102:	d007      	beq.n	8042114 <TIM_Base_SetConfig+0x40>
 8042104:	687b      	ldr	r3, [r7, #4]
 8042106:	4a3b      	ldr	r2, [pc, #236]	; (80421f4 <TIM_Base_SetConfig+0x120>)
 8042108:	4293      	cmp	r3, r2
 804210a:	d003      	beq.n	8042114 <TIM_Base_SetConfig+0x40>
 804210c:	687b      	ldr	r3, [r7, #4]
 804210e:	4a3a      	ldr	r2, [pc, #232]	; (80421f8 <TIM_Base_SetConfig+0x124>)
 8042110:	4293      	cmp	r3, r2
 8042112:	d108      	bne.n	8042126 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8042114:	68fb      	ldr	r3, [r7, #12]
 8042116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 804211a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 804211c:	683b      	ldr	r3, [r7, #0]
 804211e:	685b      	ldr	r3, [r3, #4]
 8042120:	68fa      	ldr	r2, [r7, #12]
 8042122:	4313      	orrs	r3, r2
 8042124:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8042126:	687b      	ldr	r3, [r7, #4]
 8042128:	4a2f      	ldr	r2, [pc, #188]	; (80421e8 <TIM_Base_SetConfig+0x114>)
 804212a:	4293      	cmp	r3, r2
 804212c:	d01f      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 804212e:	687b      	ldr	r3, [r7, #4]
 8042130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8042134:	d01b      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 8042136:	687b      	ldr	r3, [r7, #4]
 8042138:	4a2c      	ldr	r2, [pc, #176]	; (80421ec <TIM_Base_SetConfig+0x118>)
 804213a:	4293      	cmp	r3, r2
 804213c:	d017      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 804213e:	687b      	ldr	r3, [r7, #4]
 8042140:	4a2b      	ldr	r2, [pc, #172]	; (80421f0 <TIM_Base_SetConfig+0x11c>)
 8042142:	4293      	cmp	r3, r2
 8042144:	d013      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 8042146:	687b      	ldr	r3, [r7, #4]
 8042148:	4a2a      	ldr	r2, [pc, #168]	; (80421f4 <TIM_Base_SetConfig+0x120>)
 804214a:	4293      	cmp	r3, r2
 804214c:	d00f      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 804214e:	687b      	ldr	r3, [r7, #4]
 8042150:	4a29      	ldr	r2, [pc, #164]	; (80421f8 <TIM_Base_SetConfig+0x124>)
 8042152:	4293      	cmp	r3, r2
 8042154:	d00b      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 8042156:	687b      	ldr	r3, [r7, #4]
 8042158:	4a28      	ldr	r2, [pc, #160]	; (80421fc <TIM_Base_SetConfig+0x128>)
 804215a:	4293      	cmp	r3, r2
 804215c:	d007      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 804215e:	687b      	ldr	r3, [r7, #4]
 8042160:	4a27      	ldr	r2, [pc, #156]	; (8042200 <TIM_Base_SetConfig+0x12c>)
 8042162:	4293      	cmp	r3, r2
 8042164:	d003      	beq.n	804216e <TIM_Base_SetConfig+0x9a>
 8042166:	687b      	ldr	r3, [r7, #4]
 8042168:	4a26      	ldr	r2, [pc, #152]	; (8042204 <TIM_Base_SetConfig+0x130>)
 804216a:	4293      	cmp	r3, r2
 804216c:	d108      	bne.n	8042180 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 804216e:	68fb      	ldr	r3, [r7, #12]
 8042170:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042174:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8042176:	683b      	ldr	r3, [r7, #0]
 8042178:	68db      	ldr	r3, [r3, #12]
 804217a:	68fa      	ldr	r2, [r7, #12]
 804217c:	4313      	orrs	r3, r2
 804217e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8042180:	68fb      	ldr	r3, [r7, #12]
 8042182:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8042186:	683b      	ldr	r3, [r7, #0]
 8042188:	695b      	ldr	r3, [r3, #20]
 804218a:	4313      	orrs	r3, r2
 804218c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 804218e:	687b      	ldr	r3, [r7, #4]
 8042190:	68fa      	ldr	r2, [r7, #12]
 8042192:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8042194:	683b      	ldr	r3, [r7, #0]
 8042196:	689a      	ldr	r2, [r3, #8]
 8042198:	687b      	ldr	r3, [r7, #4]
 804219a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 804219c:	683b      	ldr	r3, [r7, #0]
 804219e:	681a      	ldr	r2, [r3, #0]
 80421a0:	687b      	ldr	r3, [r7, #4]
 80421a2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80421a4:	687b      	ldr	r3, [r7, #4]
 80421a6:	4a10      	ldr	r2, [pc, #64]	; (80421e8 <TIM_Base_SetConfig+0x114>)
 80421a8:	4293      	cmp	r3, r2
 80421aa:	d00f      	beq.n	80421cc <TIM_Base_SetConfig+0xf8>
 80421ac:	687b      	ldr	r3, [r7, #4]
 80421ae:	4a12      	ldr	r2, [pc, #72]	; (80421f8 <TIM_Base_SetConfig+0x124>)
 80421b0:	4293      	cmp	r3, r2
 80421b2:	d00b      	beq.n	80421cc <TIM_Base_SetConfig+0xf8>
 80421b4:	687b      	ldr	r3, [r7, #4]
 80421b6:	4a11      	ldr	r2, [pc, #68]	; (80421fc <TIM_Base_SetConfig+0x128>)
 80421b8:	4293      	cmp	r3, r2
 80421ba:	d007      	beq.n	80421cc <TIM_Base_SetConfig+0xf8>
 80421bc:	687b      	ldr	r3, [r7, #4]
 80421be:	4a10      	ldr	r2, [pc, #64]	; (8042200 <TIM_Base_SetConfig+0x12c>)
 80421c0:	4293      	cmp	r3, r2
 80421c2:	d003      	beq.n	80421cc <TIM_Base_SetConfig+0xf8>
 80421c4:	687b      	ldr	r3, [r7, #4]
 80421c6:	4a0f      	ldr	r2, [pc, #60]	; (8042204 <TIM_Base_SetConfig+0x130>)
 80421c8:	4293      	cmp	r3, r2
 80421ca:	d103      	bne.n	80421d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80421cc:	683b      	ldr	r3, [r7, #0]
 80421ce:	691a      	ldr	r2, [r3, #16]
 80421d0:	687b      	ldr	r3, [r7, #4]
 80421d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80421d4:	687b      	ldr	r3, [r7, #4]
 80421d6:	2201      	movs	r2, #1
 80421d8:	615a      	str	r2, [r3, #20]
}
 80421da:	bf00      	nop
 80421dc:	3714      	adds	r7, #20
 80421de:	46bd      	mov	sp, r7
 80421e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80421e4:	4770      	bx	lr
 80421e6:	bf00      	nop
 80421e8:	40012c00 	.word	0x40012c00
 80421ec:	40000400 	.word	0x40000400
 80421f0:	40000800 	.word	0x40000800
 80421f4:	40000c00 	.word	0x40000c00
 80421f8:	40013400 	.word	0x40013400
 80421fc:	40014000 	.word	0x40014000
 8042200:	40014400 	.word	0x40014400
 8042204:	40014800 	.word	0x40014800

08042208 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8042208:	b480      	push	{r7}
 804220a:	b087      	sub	sp, #28
 804220c:	af00      	add	r7, sp, #0
 804220e:	60f8      	str	r0, [r7, #12]
 8042210:	60b9      	str	r1, [r7, #8]
 8042212:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8042214:	68fb      	ldr	r3, [r7, #12]
 8042216:	6a1b      	ldr	r3, [r3, #32]
 8042218:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 804221a:	68fb      	ldr	r3, [r7, #12]
 804221c:	6a1b      	ldr	r3, [r3, #32]
 804221e:	f023 0201 	bic.w	r2, r3, #1
 8042222:	68fb      	ldr	r3, [r7, #12]
 8042224:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8042226:	68fb      	ldr	r3, [r7, #12]
 8042228:	699b      	ldr	r3, [r3, #24]
 804222a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 804222c:	693b      	ldr	r3, [r7, #16]
 804222e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8042232:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8042234:	687b      	ldr	r3, [r7, #4]
 8042236:	011b      	lsls	r3, r3, #4
 8042238:	693a      	ldr	r2, [r7, #16]
 804223a:	4313      	orrs	r3, r2
 804223c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 804223e:	697b      	ldr	r3, [r7, #20]
 8042240:	f023 030a 	bic.w	r3, r3, #10
 8042244:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8042246:	697a      	ldr	r2, [r7, #20]
 8042248:	68bb      	ldr	r3, [r7, #8]
 804224a:	4313      	orrs	r3, r2
 804224c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 804224e:	68fb      	ldr	r3, [r7, #12]
 8042250:	693a      	ldr	r2, [r7, #16]
 8042252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8042254:	68fb      	ldr	r3, [r7, #12]
 8042256:	697a      	ldr	r2, [r7, #20]
 8042258:	621a      	str	r2, [r3, #32]
}
 804225a:	bf00      	nop
 804225c:	371c      	adds	r7, #28
 804225e:	46bd      	mov	sp, r7
 8042260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042264:	4770      	bx	lr

08042266 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8042266:	b480      	push	{r7}
 8042268:	b087      	sub	sp, #28
 804226a:	af00      	add	r7, sp, #0
 804226c:	60f8      	str	r0, [r7, #12]
 804226e:	60b9      	str	r1, [r7, #8]
 8042270:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8042272:	68fb      	ldr	r3, [r7, #12]
 8042274:	6a1b      	ldr	r3, [r3, #32]
 8042276:	f023 0210 	bic.w	r2, r3, #16
 804227a:	68fb      	ldr	r3, [r7, #12]
 804227c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 804227e:	68fb      	ldr	r3, [r7, #12]
 8042280:	699b      	ldr	r3, [r3, #24]
 8042282:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8042284:	68fb      	ldr	r3, [r7, #12]
 8042286:	6a1b      	ldr	r3, [r3, #32]
 8042288:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 804228a:	697b      	ldr	r3, [r7, #20]
 804228c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8042290:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8042292:	687b      	ldr	r3, [r7, #4]
 8042294:	031b      	lsls	r3, r3, #12
 8042296:	697a      	ldr	r2, [r7, #20]
 8042298:	4313      	orrs	r3, r2
 804229a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 804229c:	693b      	ldr	r3, [r7, #16]
 804229e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80422a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80422a4:	68bb      	ldr	r3, [r7, #8]
 80422a6:	011b      	lsls	r3, r3, #4
 80422a8:	693a      	ldr	r2, [r7, #16]
 80422aa:	4313      	orrs	r3, r2
 80422ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80422ae:	68fb      	ldr	r3, [r7, #12]
 80422b0:	697a      	ldr	r2, [r7, #20]
 80422b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80422b4:	68fb      	ldr	r3, [r7, #12]
 80422b6:	693a      	ldr	r2, [r7, #16]
 80422b8:	621a      	str	r2, [r3, #32]
}
 80422ba:	bf00      	nop
 80422bc:	371c      	adds	r7, #28
 80422be:	46bd      	mov	sp, r7
 80422c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422c4:	4770      	bx	lr

080422c6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80422c6:	b480      	push	{r7}
 80422c8:	b085      	sub	sp, #20
 80422ca:	af00      	add	r7, sp, #0
 80422cc:	6078      	str	r0, [r7, #4]
 80422ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80422d0:	687b      	ldr	r3, [r7, #4]
 80422d2:	689b      	ldr	r3, [r3, #8]
 80422d4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80422d6:	68fb      	ldr	r3, [r7, #12]
 80422d8:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80422dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80422e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80422e2:	683a      	ldr	r2, [r7, #0]
 80422e4:	68fb      	ldr	r3, [r7, #12]
 80422e6:	4313      	orrs	r3, r2
 80422e8:	f043 0307 	orr.w	r3, r3, #7
 80422ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80422ee:	687b      	ldr	r3, [r7, #4]
 80422f0:	68fa      	ldr	r2, [r7, #12]
 80422f2:	609a      	str	r2, [r3, #8]
}
 80422f4:	bf00      	nop
 80422f6:	3714      	adds	r7, #20
 80422f8:	46bd      	mov	sp, r7
 80422fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80422fe:	4770      	bx	lr

08042300 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8042300:	b480      	push	{r7}
 8042302:	b087      	sub	sp, #28
 8042304:	af00      	add	r7, sp, #0
 8042306:	60f8      	str	r0, [r7, #12]
 8042308:	60b9      	str	r1, [r7, #8]
 804230a:	607a      	str	r2, [r7, #4]
 804230c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 804230e:	68fb      	ldr	r3, [r7, #12]
 8042310:	689b      	ldr	r3, [r3, #8]
 8042312:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8042314:	697b      	ldr	r3, [r7, #20]
 8042316:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 804231a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 804231c:	683b      	ldr	r3, [r7, #0]
 804231e:	021a      	lsls	r2, r3, #8
 8042320:	687b      	ldr	r3, [r7, #4]
 8042322:	431a      	orrs	r2, r3
 8042324:	68bb      	ldr	r3, [r7, #8]
 8042326:	4313      	orrs	r3, r2
 8042328:	697a      	ldr	r2, [r7, #20]
 804232a:	4313      	orrs	r3, r2
 804232c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 804232e:	68fb      	ldr	r3, [r7, #12]
 8042330:	697a      	ldr	r2, [r7, #20]
 8042332:	609a      	str	r2, [r3, #8]
}
 8042334:	bf00      	nop
 8042336:	371c      	adds	r7, #28
 8042338:	46bd      	mov	sp, r7
 804233a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804233e:	4770      	bx	lr

08042340 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8042340:	b480      	push	{r7}
 8042342:	b085      	sub	sp, #20
 8042344:	af00      	add	r7, sp, #0
 8042346:	6078      	str	r0, [r7, #4]
 8042348:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 804234a:	687b      	ldr	r3, [r7, #4]
 804234c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8042350:	2b01      	cmp	r3, #1
 8042352:	d101      	bne.n	8042358 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8042354:	2302      	movs	r3, #2
 8042356:	e068      	b.n	804242a <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8042358:	687b      	ldr	r3, [r7, #4]
 804235a:	2201      	movs	r2, #1
 804235c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8042360:	687b      	ldr	r3, [r7, #4]
 8042362:	2202      	movs	r2, #2
 8042364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8042368:	687b      	ldr	r3, [r7, #4]
 804236a:	681b      	ldr	r3, [r3, #0]
 804236c:	685b      	ldr	r3, [r3, #4]
 804236e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8042370:	687b      	ldr	r3, [r7, #4]
 8042372:	681b      	ldr	r3, [r3, #0]
 8042374:	689b      	ldr	r3, [r3, #8]
 8042376:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8042378:	687b      	ldr	r3, [r7, #4]
 804237a:	681b      	ldr	r3, [r3, #0]
 804237c:	4a2e      	ldr	r2, [pc, #184]	; (8042438 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 804237e:	4293      	cmp	r3, r2
 8042380:	d004      	beq.n	804238c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8042382:	687b      	ldr	r3, [r7, #4]
 8042384:	681b      	ldr	r3, [r3, #0]
 8042386:	4a2d      	ldr	r2, [pc, #180]	; (804243c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8042388:	4293      	cmp	r3, r2
 804238a:	d108      	bne.n	804239e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 804238c:	68fb      	ldr	r3, [r7, #12]
 804238e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8042392:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8042394:	683b      	ldr	r3, [r7, #0]
 8042396:	685b      	ldr	r3, [r3, #4]
 8042398:	68fa      	ldr	r2, [r7, #12]
 804239a:	4313      	orrs	r3, r2
 804239c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 804239e:	68fb      	ldr	r3, [r7, #12]
 80423a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80423a4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80423a6:	683b      	ldr	r3, [r7, #0]
 80423a8:	681b      	ldr	r3, [r3, #0]
 80423aa:	68fa      	ldr	r2, [r7, #12]
 80423ac:	4313      	orrs	r3, r2
 80423ae:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80423b0:	687b      	ldr	r3, [r7, #4]
 80423b2:	681b      	ldr	r3, [r3, #0]
 80423b4:	68fa      	ldr	r2, [r7, #12]
 80423b6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80423b8:	687b      	ldr	r3, [r7, #4]
 80423ba:	681b      	ldr	r3, [r3, #0]
 80423bc:	4a1e      	ldr	r2, [pc, #120]	; (8042438 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80423be:	4293      	cmp	r3, r2
 80423c0:	d01d      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423c2:	687b      	ldr	r3, [r7, #4]
 80423c4:	681b      	ldr	r3, [r3, #0]
 80423c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80423ca:	d018      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423cc:	687b      	ldr	r3, [r7, #4]
 80423ce:	681b      	ldr	r3, [r3, #0]
 80423d0:	4a1b      	ldr	r2, [pc, #108]	; (8042440 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80423d2:	4293      	cmp	r3, r2
 80423d4:	d013      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423d6:	687b      	ldr	r3, [r7, #4]
 80423d8:	681b      	ldr	r3, [r3, #0]
 80423da:	4a1a      	ldr	r2, [pc, #104]	; (8042444 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80423dc:	4293      	cmp	r3, r2
 80423de:	d00e      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423e0:	687b      	ldr	r3, [r7, #4]
 80423e2:	681b      	ldr	r3, [r3, #0]
 80423e4:	4a18      	ldr	r2, [pc, #96]	; (8042448 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80423e6:	4293      	cmp	r3, r2
 80423e8:	d009      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423ea:	687b      	ldr	r3, [r7, #4]
 80423ec:	681b      	ldr	r3, [r3, #0]
 80423ee:	4a13      	ldr	r2, [pc, #76]	; (804243c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80423f0:	4293      	cmp	r3, r2
 80423f2:	d004      	beq.n	80423fe <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 80423f4:	687b      	ldr	r3, [r7, #4]
 80423f6:	681b      	ldr	r3, [r3, #0]
 80423f8:	4a14      	ldr	r2, [pc, #80]	; (804244c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80423fa:	4293      	cmp	r3, r2
 80423fc:	d10c      	bne.n	8042418 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80423fe:	68bb      	ldr	r3, [r7, #8]
 8042400:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8042404:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8042406:	683b      	ldr	r3, [r7, #0]
 8042408:	689b      	ldr	r3, [r3, #8]
 804240a:	68ba      	ldr	r2, [r7, #8]
 804240c:	4313      	orrs	r3, r2
 804240e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8042410:	687b      	ldr	r3, [r7, #4]
 8042412:	681b      	ldr	r3, [r3, #0]
 8042414:	68ba      	ldr	r2, [r7, #8]
 8042416:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8042418:	687b      	ldr	r3, [r7, #4]
 804241a:	2201      	movs	r2, #1
 804241c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8042420:	687b      	ldr	r3, [r7, #4]
 8042422:	2200      	movs	r2, #0
 8042424:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8042428:	2300      	movs	r3, #0
}
 804242a:	4618      	mov	r0, r3
 804242c:	3714      	adds	r7, #20
 804242e:	46bd      	mov	sp, r7
 8042430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042434:	4770      	bx	lr
 8042436:	bf00      	nop
 8042438:	40012c00 	.word	0x40012c00
 804243c:	40013400 	.word	0x40013400
 8042440:	40000400 	.word	0x40000400
 8042444:	40000800 	.word	0x40000800
 8042448:	40000c00 	.word	0x40000c00
 804244c:	40014000 	.word	0x40014000

08042450 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8042450:	b480      	push	{r7}
 8042452:	b083      	sub	sp, #12
 8042454:	af00      	add	r7, sp, #0
 8042456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8042458:	bf00      	nop
 804245a:	370c      	adds	r7, #12
 804245c:	46bd      	mov	sp, r7
 804245e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042462:	4770      	bx	lr

08042464 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8042464:	b480      	push	{r7}
 8042466:	b083      	sub	sp, #12
 8042468:	af00      	add	r7, sp, #0
 804246a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 804246c:	bf00      	nop
 804246e:	370c      	adds	r7, #12
 8042470:	46bd      	mov	sp, r7
 8042472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042476:	4770      	bx	lr

08042478 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8042478:	b480      	push	{r7}
 804247a:	b083      	sub	sp, #12
 804247c:	af00      	add	r7, sp, #0
 804247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8042480:	bf00      	nop
 8042482:	370c      	adds	r7, #12
 8042484:	46bd      	mov	sp, r7
 8042486:	f85d 7b04 	ldr.w	r7, [sp], #4
 804248a:	4770      	bx	lr

0804248c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 804248c:	b580      	push	{r7, lr}
 804248e:	b082      	sub	sp, #8
 8042490:	af00      	add	r7, sp, #0
 8042492:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042494:	687b      	ldr	r3, [r7, #4]
 8042496:	2b00      	cmp	r3, #0
 8042498:	d101      	bne.n	804249e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 804249a:	2301      	movs	r3, #1
 804249c:	e042      	b.n	8042524 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 804249e:	687b      	ldr	r3, [r7, #4]
 80424a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424a4:	2b00      	cmp	r3, #0
 80424a6:	d106      	bne.n	80424b6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80424a8:	687b      	ldr	r3, [r7, #4]
 80424aa:	2200      	movs	r2, #0
 80424ac:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80424b0:	6878      	ldr	r0, [r7, #4]
 80424b2:	f7fe f9cf 	bl	8040854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80424b6:	687b      	ldr	r3, [r7, #4]
 80424b8:	2224      	movs	r2, #36	; 0x24
 80424ba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 80424be:	687b      	ldr	r3, [r7, #4]
 80424c0:	681b      	ldr	r3, [r3, #0]
 80424c2:	681a      	ldr	r2, [r3, #0]
 80424c4:	687b      	ldr	r3, [r7, #4]
 80424c6:	681b      	ldr	r3, [r3, #0]
 80424c8:	f022 0201 	bic.w	r2, r2, #1
 80424cc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80424ce:	6878      	ldr	r0, [r7, #4]
 80424d0:	f000 f82c 	bl	804252c <UART_SetConfig>
 80424d4:	4603      	mov	r3, r0
 80424d6:	2b01      	cmp	r3, #1
 80424d8:	d101      	bne.n	80424de <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80424da:	2301      	movs	r3, #1
 80424dc:	e022      	b.n	8042524 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80424de:	687b      	ldr	r3, [r7, #4]
 80424e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80424e2:	2b00      	cmp	r3, #0
 80424e4:	d002      	beq.n	80424ec <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80424e6:	6878      	ldr	r0, [r7, #4]
 80424e8:	f000 fb20 	bl	8042b2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80424ec:	687b      	ldr	r3, [r7, #4]
 80424ee:	681b      	ldr	r3, [r3, #0]
 80424f0:	685a      	ldr	r2, [r3, #4]
 80424f2:	687b      	ldr	r3, [r7, #4]
 80424f4:	681b      	ldr	r3, [r3, #0]
 80424f6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80424fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80424fc:	687b      	ldr	r3, [r7, #4]
 80424fe:	681b      	ldr	r3, [r3, #0]
 8042500:	689a      	ldr	r2, [r3, #8]
 8042502:	687b      	ldr	r3, [r7, #4]
 8042504:	681b      	ldr	r3, [r3, #0]
 8042506:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 804250a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 804250c:	687b      	ldr	r3, [r7, #4]
 804250e:	681b      	ldr	r3, [r3, #0]
 8042510:	681a      	ldr	r2, [r3, #0]
 8042512:	687b      	ldr	r3, [r7, #4]
 8042514:	681b      	ldr	r3, [r3, #0]
 8042516:	f042 0201 	orr.w	r2, r2, #1
 804251a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 804251c:	6878      	ldr	r0, [r7, #4]
 804251e:	f000 fba7 	bl	8042c70 <UART_CheckIdleState>
 8042522:	4603      	mov	r3, r0
}
 8042524:	4618      	mov	r0, r3
 8042526:	3708      	adds	r7, #8
 8042528:	46bd      	mov	sp, r7
 804252a:	bd80      	pop	{r7, pc}

0804252c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 804252c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042530:	b08c      	sub	sp, #48	; 0x30
 8042532:	af00      	add	r7, sp, #0
 8042534:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042536:	2300      	movs	r3, #0
 8042538:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 804253c:	697b      	ldr	r3, [r7, #20]
 804253e:	689a      	ldr	r2, [r3, #8]
 8042540:	697b      	ldr	r3, [r7, #20]
 8042542:	691b      	ldr	r3, [r3, #16]
 8042544:	431a      	orrs	r2, r3
 8042546:	697b      	ldr	r3, [r7, #20]
 8042548:	695b      	ldr	r3, [r3, #20]
 804254a:	431a      	orrs	r2, r3
 804254c:	697b      	ldr	r3, [r7, #20]
 804254e:	69db      	ldr	r3, [r3, #28]
 8042550:	4313      	orrs	r3, r2
 8042552:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042554:	697b      	ldr	r3, [r7, #20]
 8042556:	681b      	ldr	r3, [r3, #0]
 8042558:	681a      	ldr	r2, [r3, #0]
 804255a:	4baa      	ldr	r3, [pc, #680]	; (8042804 <UART_SetConfig+0x2d8>)
 804255c:	4013      	ands	r3, r2
 804255e:	697a      	ldr	r2, [r7, #20]
 8042560:	6812      	ldr	r2, [r2, #0]
 8042562:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042564:	430b      	orrs	r3, r1
 8042566:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042568:	697b      	ldr	r3, [r7, #20]
 804256a:	681b      	ldr	r3, [r3, #0]
 804256c:	685b      	ldr	r3, [r3, #4]
 804256e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8042572:	697b      	ldr	r3, [r7, #20]
 8042574:	68da      	ldr	r2, [r3, #12]
 8042576:	697b      	ldr	r3, [r7, #20]
 8042578:	681b      	ldr	r3, [r3, #0]
 804257a:	430a      	orrs	r2, r1
 804257c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 804257e:	697b      	ldr	r3, [r7, #20]
 8042580:	699b      	ldr	r3, [r3, #24]
 8042582:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8042584:	697b      	ldr	r3, [r7, #20]
 8042586:	681b      	ldr	r3, [r3, #0]
 8042588:	4a9f      	ldr	r2, [pc, #636]	; (8042808 <UART_SetConfig+0x2dc>)
 804258a:	4293      	cmp	r3, r2
 804258c:	d004      	beq.n	8042598 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 804258e:	697b      	ldr	r3, [r7, #20]
 8042590:	6a1b      	ldr	r3, [r3, #32]
 8042592:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042594:	4313      	orrs	r3, r2
 8042596:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042598:	697b      	ldr	r3, [r7, #20]
 804259a:	681b      	ldr	r3, [r3, #0]
 804259c:	689b      	ldr	r3, [r3, #8]
 804259e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80425a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80425a6:	697a      	ldr	r2, [r7, #20]
 80425a8:	6812      	ldr	r2, [r2, #0]
 80425aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80425ac:	430b      	orrs	r3, r1
 80425ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80425b0:	697b      	ldr	r3, [r7, #20]
 80425b2:	681b      	ldr	r3, [r3, #0]
 80425b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80425b6:	f023 010f 	bic.w	r1, r3, #15
 80425ba:	697b      	ldr	r3, [r7, #20]
 80425bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80425be:	697b      	ldr	r3, [r7, #20]
 80425c0:	681b      	ldr	r3, [r3, #0]
 80425c2:	430a      	orrs	r2, r1
 80425c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80425c6:	697b      	ldr	r3, [r7, #20]
 80425c8:	681b      	ldr	r3, [r3, #0]
 80425ca:	4a90      	ldr	r2, [pc, #576]	; (804280c <UART_SetConfig+0x2e0>)
 80425cc:	4293      	cmp	r3, r2
 80425ce:	d125      	bne.n	804261c <UART_SetConfig+0xf0>
 80425d0:	4b8f      	ldr	r3, [pc, #572]	; (8042810 <UART_SetConfig+0x2e4>)
 80425d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425d6:	f003 0303 	and.w	r3, r3, #3
 80425da:	2b03      	cmp	r3, #3
 80425dc:	d81a      	bhi.n	8042614 <UART_SetConfig+0xe8>
 80425de:	a201      	add	r2, pc, #4	; (adr r2, 80425e4 <UART_SetConfig+0xb8>)
 80425e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80425e4:	080425f5 	.word	0x080425f5
 80425e8:	08042605 	.word	0x08042605
 80425ec:	080425fd 	.word	0x080425fd
 80425f0:	0804260d 	.word	0x0804260d
 80425f4:	2301      	movs	r3, #1
 80425f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80425fa:	e116      	b.n	804282a <UART_SetConfig+0x2fe>
 80425fc:	2302      	movs	r3, #2
 80425fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042602:	e112      	b.n	804282a <UART_SetConfig+0x2fe>
 8042604:	2304      	movs	r3, #4
 8042606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804260a:	e10e      	b.n	804282a <UART_SetConfig+0x2fe>
 804260c:	2308      	movs	r3, #8
 804260e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042612:	e10a      	b.n	804282a <UART_SetConfig+0x2fe>
 8042614:	2310      	movs	r3, #16
 8042616:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804261a:	e106      	b.n	804282a <UART_SetConfig+0x2fe>
 804261c:	697b      	ldr	r3, [r7, #20]
 804261e:	681b      	ldr	r3, [r3, #0]
 8042620:	4a7c      	ldr	r2, [pc, #496]	; (8042814 <UART_SetConfig+0x2e8>)
 8042622:	4293      	cmp	r3, r2
 8042624:	d138      	bne.n	8042698 <UART_SetConfig+0x16c>
 8042626:	4b7a      	ldr	r3, [pc, #488]	; (8042810 <UART_SetConfig+0x2e4>)
 8042628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804262c:	f003 030c 	and.w	r3, r3, #12
 8042630:	2b0c      	cmp	r3, #12
 8042632:	d82d      	bhi.n	8042690 <UART_SetConfig+0x164>
 8042634:	a201      	add	r2, pc, #4	; (adr r2, 804263c <UART_SetConfig+0x110>)
 8042636:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804263a:	bf00      	nop
 804263c:	08042671 	.word	0x08042671
 8042640:	08042691 	.word	0x08042691
 8042644:	08042691 	.word	0x08042691
 8042648:	08042691 	.word	0x08042691
 804264c:	08042681 	.word	0x08042681
 8042650:	08042691 	.word	0x08042691
 8042654:	08042691 	.word	0x08042691
 8042658:	08042691 	.word	0x08042691
 804265c:	08042679 	.word	0x08042679
 8042660:	08042691 	.word	0x08042691
 8042664:	08042691 	.word	0x08042691
 8042668:	08042691 	.word	0x08042691
 804266c:	08042689 	.word	0x08042689
 8042670:	2300      	movs	r3, #0
 8042672:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042676:	e0d8      	b.n	804282a <UART_SetConfig+0x2fe>
 8042678:	2302      	movs	r3, #2
 804267a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804267e:	e0d4      	b.n	804282a <UART_SetConfig+0x2fe>
 8042680:	2304      	movs	r3, #4
 8042682:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042686:	e0d0      	b.n	804282a <UART_SetConfig+0x2fe>
 8042688:	2308      	movs	r3, #8
 804268a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804268e:	e0cc      	b.n	804282a <UART_SetConfig+0x2fe>
 8042690:	2310      	movs	r3, #16
 8042692:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042696:	e0c8      	b.n	804282a <UART_SetConfig+0x2fe>
 8042698:	697b      	ldr	r3, [r7, #20]
 804269a:	681b      	ldr	r3, [r3, #0]
 804269c:	4a5e      	ldr	r2, [pc, #376]	; (8042818 <UART_SetConfig+0x2ec>)
 804269e:	4293      	cmp	r3, r2
 80426a0:	d125      	bne.n	80426ee <UART_SetConfig+0x1c2>
 80426a2:	4b5b      	ldr	r3, [pc, #364]	; (8042810 <UART_SetConfig+0x2e4>)
 80426a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80426ac:	2b30      	cmp	r3, #48	; 0x30
 80426ae:	d016      	beq.n	80426de <UART_SetConfig+0x1b2>
 80426b0:	2b30      	cmp	r3, #48	; 0x30
 80426b2:	d818      	bhi.n	80426e6 <UART_SetConfig+0x1ba>
 80426b4:	2b20      	cmp	r3, #32
 80426b6:	d00a      	beq.n	80426ce <UART_SetConfig+0x1a2>
 80426b8:	2b20      	cmp	r3, #32
 80426ba:	d814      	bhi.n	80426e6 <UART_SetConfig+0x1ba>
 80426bc:	2b00      	cmp	r3, #0
 80426be:	d002      	beq.n	80426c6 <UART_SetConfig+0x19a>
 80426c0:	2b10      	cmp	r3, #16
 80426c2:	d008      	beq.n	80426d6 <UART_SetConfig+0x1aa>
 80426c4:	e00f      	b.n	80426e6 <UART_SetConfig+0x1ba>
 80426c6:	2300      	movs	r3, #0
 80426c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80426cc:	e0ad      	b.n	804282a <UART_SetConfig+0x2fe>
 80426ce:	2302      	movs	r3, #2
 80426d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80426d4:	e0a9      	b.n	804282a <UART_SetConfig+0x2fe>
 80426d6:	2304      	movs	r3, #4
 80426d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80426dc:	e0a5      	b.n	804282a <UART_SetConfig+0x2fe>
 80426de:	2308      	movs	r3, #8
 80426e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80426e4:	e0a1      	b.n	804282a <UART_SetConfig+0x2fe>
 80426e6:	2310      	movs	r3, #16
 80426e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80426ec:	e09d      	b.n	804282a <UART_SetConfig+0x2fe>
 80426ee:	697b      	ldr	r3, [r7, #20]
 80426f0:	681b      	ldr	r3, [r3, #0]
 80426f2:	4a4a      	ldr	r2, [pc, #296]	; (804281c <UART_SetConfig+0x2f0>)
 80426f4:	4293      	cmp	r3, r2
 80426f6:	d125      	bne.n	8042744 <UART_SetConfig+0x218>
 80426f8:	4b45      	ldr	r3, [pc, #276]	; (8042810 <UART_SetConfig+0x2e4>)
 80426fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80426fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042702:	2bc0      	cmp	r3, #192	; 0xc0
 8042704:	d016      	beq.n	8042734 <UART_SetConfig+0x208>
 8042706:	2bc0      	cmp	r3, #192	; 0xc0
 8042708:	d818      	bhi.n	804273c <UART_SetConfig+0x210>
 804270a:	2b80      	cmp	r3, #128	; 0x80
 804270c:	d00a      	beq.n	8042724 <UART_SetConfig+0x1f8>
 804270e:	2b80      	cmp	r3, #128	; 0x80
 8042710:	d814      	bhi.n	804273c <UART_SetConfig+0x210>
 8042712:	2b00      	cmp	r3, #0
 8042714:	d002      	beq.n	804271c <UART_SetConfig+0x1f0>
 8042716:	2b40      	cmp	r3, #64	; 0x40
 8042718:	d008      	beq.n	804272c <UART_SetConfig+0x200>
 804271a:	e00f      	b.n	804273c <UART_SetConfig+0x210>
 804271c:	2300      	movs	r3, #0
 804271e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042722:	e082      	b.n	804282a <UART_SetConfig+0x2fe>
 8042724:	2302      	movs	r3, #2
 8042726:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804272a:	e07e      	b.n	804282a <UART_SetConfig+0x2fe>
 804272c:	2304      	movs	r3, #4
 804272e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042732:	e07a      	b.n	804282a <UART_SetConfig+0x2fe>
 8042734:	2308      	movs	r3, #8
 8042736:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804273a:	e076      	b.n	804282a <UART_SetConfig+0x2fe>
 804273c:	2310      	movs	r3, #16
 804273e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042742:	e072      	b.n	804282a <UART_SetConfig+0x2fe>
 8042744:	697b      	ldr	r3, [r7, #20]
 8042746:	681b      	ldr	r3, [r3, #0]
 8042748:	4a35      	ldr	r2, [pc, #212]	; (8042820 <UART_SetConfig+0x2f4>)
 804274a:	4293      	cmp	r3, r2
 804274c:	d12a      	bne.n	80427a4 <UART_SetConfig+0x278>
 804274e:	4b30      	ldr	r3, [pc, #192]	; (8042810 <UART_SetConfig+0x2e4>)
 8042750:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042754:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042758:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804275c:	d01a      	beq.n	8042794 <UART_SetConfig+0x268>
 804275e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042762:	d81b      	bhi.n	804279c <UART_SetConfig+0x270>
 8042764:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042768:	d00c      	beq.n	8042784 <UART_SetConfig+0x258>
 804276a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 804276e:	d815      	bhi.n	804279c <UART_SetConfig+0x270>
 8042770:	2b00      	cmp	r3, #0
 8042772:	d003      	beq.n	804277c <UART_SetConfig+0x250>
 8042774:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042778:	d008      	beq.n	804278c <UART_SetConfig+0x260>
 804277a:	e00f      	b.n	804279c <UART_SetConfig+0x270>
 804277c:	2300      	movs	r3, #0
 804277e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042782:	e052      	b.n	804282a <UART_SetConfig+0x2fe>
 8042784:	2302      	movs	r3, #2
 8042786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804278a:	e04e      	b.n	804282a <UART_SetConfig+0x2fe>
 804278c:	2304      	movs	r3, #4
 804278e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042792:	e04a      	b.n	804282a <UART_SetConfig+0x2fe>
 8042794:	2308      	movs	r3, #8
 8042796:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 804279a:	e046      	b.n	804282a <UART_SetConfig+0x2fe>
 804279c:	2310      	movs	r3, #16
 804279e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80427a2:	e042      	b.n	804282a <UART_SetConfig+0x2fe>
 80427a4:	697b      	ldr	r3, [r7, #20]
 80427a6:	681b      	ldr	r3, [r3, #0]
 80427a8:	4a17      	ldr	r2, [pc, #92]	; (8042808 <UART_SetConfig+0x2dc>)
 80427aa:	4293      	cmp	r3, r2
 80427ac:	d13a      	bne.n	8042824 <UART_SetConfig+0x2f8>
 80427ae:	4b18      	ldr	r3, [pc, #96]	; (8042810 <UART_SetConfig+0x2e4>)
 80427b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80427b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80427bc:	d01a      	beq.n	80427f4 <UART_SetConfig+0x2c8>
 80427be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80427c2:	d81b      	bhi.n	80427fc <UART_SetConfig+0x2d0>
 80427c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80427c8:	d00c      	beq.n	80427e4 <UART_SetConfig+0x2b8>
 80427ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80427ce:	d815      	bhi.n	80427fc <UART_SetConfig+0x2d0>
 80427d0:	2b00      	cmp	r3, #0
 80427d2:	d003      	beq.n	80427dc <UART_SetConfig+0x2b0>
 80427d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80427d8:	d008      	beq.n	80427ec <UART_SetConfig+0x2c0>
 80427da:	e00f      	b.n	80427fc <UART_SetConfig+0x2d0>
 80427dc:	2300      	movs	r3, #0
 80427de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80427e2:	e022      	b.n	804282a <UART_SetConfig+0x2fe>
 80427e4:	2302      	movs	r3, #2
 80427e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80427ea:	e01e      	b.n	804282a <UART_SetConfig+0x2fe>
 80427ec:	2304      	movs	r3, #4
 80427ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80427f2:	e01a      	b.n	804282a <UART_SetConfig+0x2fe>
 80427f4:	2308      	movs	r3, #8
 80427f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80427fa:	e016      	b.n	804282a <UART_SetConfig+0x2fe>
 80427fc:	2310      	movs	r3, #16
 80427fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042802:	e012      	b.n	804282a <UART_SetConfig+0x2fe>
 8042804:	cfff69f3 	.word	0xcfff69f3
 8042808:	40008000 	.word	0x40008000
 804280c:	40013800 	.word	0x40013800
 8042810:	40021000 	.word	0x40021000
 8042814:	40004400 	.word	0x40004400
 8042818:	40004800 	.word	0x40004800
 804281c:	40004c00 	.word	0x40004c00
 8042820:	40005000 	.word	0x40005000
 8042824:	2310      	movs	r3, #16
 8042826:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 804282a:	697b      	ldr	r3, [r7, #20]
 804282c:	681b      	ldr	r3, [r3, #0]
 804282e:	4ab0      	ldr	r2, [pc, #704]	; (8042af0 <UART_SetConfig+0x5c4>)
 8042830:	4293      	cmp	r3, r2
 8042832:	f040 809b 	bne.w	804296c <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8042836:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 804283a:	2b08      	cmp	r3, #8
 804283c:	d827      	bhi.n	804288e <UART_SetConfig+0x362>
 804283e:	a201      	add	r2, pc, #4	; (adr r2, 8042844 <UART_SetConfig+0x318>)
 8042840:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042844:	08042869 	.word	0x08042869
 8042848:	08042871 	.word	0x08042871
 804284c:	08042879 	.word	0x08042879
 8042850:	0804288f 	.word	0x0804288f
 8042854:	0804287f 	.word	0x0804287f
 8042858:	0804288f 	.word	0x0804288f
 804285c:	0804288f 	.word	0x0804288f
 8042860:	0804288f 	.word	0x0804288f
 8042864:	08042887 	.word	0x08042887
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042868:	f7fe fc84 	bl	8041174 <HAL_RCC_GetPCLK1Freq>
 804286c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804286e:	e014      	b.n	804289a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042870:	f7fe fc94 	bl	804119c <HAL_RCC_GetPCLK2Freq>
 8042874:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042876:	e010      	b.n	804289a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042878:	4b9e      	ldr	r3, [pc, #632]	; (8042af4 <UART_SetConfig+0x5c8>)
 804287a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 804287c:	e00d      	b.n	804289a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804287e:	f7fe fbc7 	bl	8041010 <HAL_RCC_GetSysClockFreq>
 8042882:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042884:	e009      	b.n	804289a <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042886:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804288a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 804288c:	e005      	b.n	804289a <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 804288e:	2300      	movs	r3, #0
 8042890:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042892:	2301      	movs	r3, #1
 8042894:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042898:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 804289a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804289c:	2b00      	cmp	r3, #0
 804289e:	f000 8130 	beq.w	8042b02 <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80428a2:	697b      	ldr	r3, [r7, #20]
 80428a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428a6:	4a94      	ldr	r2, [pc, #592]	; (8042af8 <UART_SetConfig+0x5cc>)
 80428a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80428ac:	461a      	mov	r2, r3
 80428ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80428b0:	fbb3 f3f2 	udiv	r3, r3, r2
 80428b4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80428b6:	697b      	ldr	r3, [r7, #20]
 80428b8:	685a      	ldr	r2, [r3, #4]
 80428ba:	4613      	mov	r3, r2
 80428bc:	005b      	lsls	r3, r3, #1
 80428be:	4413      	add	r3, r2
 80428c0:	69ba      	ldr	r2, [r7, #24]
 80428c2:	429a      	cmp	r2, r3
 80428c4:	d305      	bcc.n	80428d2 <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80428c6:	697b      	ldr	r3, [r7, #20]
 80428c8:	685b      	ldr	r3, [r3, #4]
 80428ca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80428cc:	69ba      	ldr	r2, [r7, #24]
 80428ce:	429a      	cmp	r2, r3
 80428d0:	d903      	bls.n	80428da <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80428d2:	2301      	movs	r3, #1
 80428d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80428d8:	e113      	b.n	8042b02 <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80428da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80428dc:	2200      	movs	r2, #0
 80428de:	60bb      	str	r3, [r7, #8]
 80428e0:	60fa      	str	r2, [r7, #12]
 80428e2:	697b      	ldr	r3, [r7, #20]
 80428e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80428e6:	4a84      	ldr	r2, [pc, #528]	; (8042af8 <UART_SetConfig+0x5cc>)
 80428e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80428ec:	b29b      	uxth	r3, r3
 80428ee:	2200      	movs	r2, #0
 80428f0:	603b      	str	r3, [r7, #0]
 80428f2:	607a      	str	r2, [r7, #4]
 80428f4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80428f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80428fc:	f7fd fc9c 	bl	8040238 <__aeabi_uldivmod>
 8042900:	4602      	mov	r2, r0
 8042902:	460b      	mov	r3, r1
 8042904:	4610      	mov	r0, r2
 8042906:	4619      	mov	r1, r3
 8042908:	f04f 0200 	mov.w	r2, #0
 804290c:	f04f 0300 	mov.w	r3, #0
 8042910:	020b      	lsls	r3, r1, #8
 8042912:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8042916:	0202      	lsls	r2, r0, #8
 8042918:	6979      	ldr	r1, [r7, #20]
 804291a:	6849      	ldr	r1, [r1, #4]
 804291c:	0849      	lsrs	r1, r1, #1
 804291e:	2000      	movs	r0, #0
 8042920:	460c      	mov	r4, r1
 8042922:	4605      	mov	r5, r0
 8042924:	eb12 0804 	adds.w	r8, r2, r4
 8042928:	eb43 0905 	adc.w	r9, r3, r5
 804292c:	697b      	ldr	r3, [r7, #20]
 804292e:	685b      	ldr	r3, [r3, #4]
 8042930:	2200      	movs	r2, #0
 8042932:	469a      	mov	sl, r3
 8042934:	4693      	mov	fp, r2
 8042936:	4652      	mov	r2, sl
 8042938:	465b      	mov	r3, fp
 804293a:	4640      	mov	r0, r8
 804293c:	4649      	mov	r1, r9
 804293e:	f7fd fc7b 	bl	8040238 <__aeabi_uldivmod>
 8042942:	4602      	mov	r2, r0
 8042944:	460b      	mov	r3, r1
 8042946:	4613      	mov	r3, r2
 8042948:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 804294a:	6a3b      	ldr	r3, [r7, #32]
 804294c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042950:	d308      	bcc.n	8042964 <UART_SetConfig+0x438>
 8042952:	6a3b      	ldr	r3, [r7, #32]
 8042954:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042958:	d204      	bcs.n	8042964 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 804295a:	697b      	ldr	r3, [r7, #20]
 804295c:	681b      	ldr	r3, [r3, #0]
 804295e:	6a3a      	ldr	r2, [r7, #32]
 8042960:	60da      	str	r2, [r3, #12]
 8042962:	e0ce      	b.n	8042b02 <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8042964:	2301      	movs	r3, #1
 8042966:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 804296a:	e0ca      	b.n	8042b02 <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 804296c:	697b      	ldr	r3, [r7, #20]
 804296e:	69db      	ldr	r3, [r3, #28]
 8042970:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8042974:	d166      	bne.n	8042a44 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8042976:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 804297a:	2b08      	cmp	r3, #8
 804297c:	d827      	bhi.n	80429ce <UART_SetConfig+0x4a2>
 804297e:	a201      	add	r2, pc, #4	; (adr r2, 8042984 <UART_SetConfig+0x458>)
 8042980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042984:	080429a9 	.word	0x080429a9
 8042988:	080429b1 	.word	0x080429b1
 804298c:	080429b9 	.word	0x080429b9
 8042990:	080429cf 	.word	0x080429cf
 8042994:	080429bf 	.word	0x080429bf
 8042998:	080429cf 	.word	0x080429cf
 804299c:	080429cf 	.word	0x080429cf
 80429a0:	080429cf 	.word	0x080429cf
 80429a4:	080429c7 	.word	0x080429c7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80429a8:	f7fe fbe4 	bl	8041174 <HAL_RCC_GetPCLK1Freq>
 80429ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80429ae:	e014      	b.n	80429da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80429b0:	f7fe fbf4 	bl	804119c <HAL_RCC_GetPCLK2Freq>
 80429b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80429b6:	e010      	b.n	80429da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80429b8:	4b4e      	ldr	r3, [pc, #312]	; (8042af4 <UART_SetConfig+0x5c8>)
 80429ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80429bc:	e00d      	b.n	80429da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80429be:	f7fe fb27 	bl	8041010 <HAL_RCC_GetSysClockFreq>
 80429c2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80429c4:	e009      	b.n	80429da <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80429c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80429ca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80429cc:	e005      	b.n	80429da <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80429ce:	2300      	movs	r3, #0
 80429d0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80429d2:	2301      	movs	r3, #1
 80429d4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80429d8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80429da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429dc:	2b00      	cmp	r3, #0
 80429de:	f000 8090 	beq.w	8042b02 <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80429e2:	697b      	ldr	r3, [r7, #20]
 80429e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80429e6:	4a44      	ldr	r2, [pc, #272]	; (8042af8 <UART_SetConfig+0x5cc>)
 80429e8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80429ec:	461a      	mov	r2, r3
 80429ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80429f0:	fbb3 f3f2 	udiv	r3, r3, r2
 80429f4:	005a      	lsls	r2, r3, #1
 80429f6:	697b      	ldr	r3, [r7, #20]
 80429f8:	685b      	ldr	r3, [r3, #4]
 80429fa:	085b      	lsrs	r3, r3, #1
 80429fc:	441a      	add	r2, r3
 80429fe:	697b      	ldr	r3, [r7, #20]
 8042a00:	685b      	ldr	r3, [r3, #4]
 8042a02:	fbb2 f3f3 	udiv	r3, r2, r3
 8042a06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042a08:	6a3b      	ldr	r3, [r7, #32]
 8042a0a:	2b0f      	cmp	r3, #15
 8042a0c:	d916      	bls.n	8042a3c <UART_SetConfig+0x510>
 8042a0e:	6a3b      	ldr	r3, [r7, #32]
 8042a10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042a14:	d212      	bcs.n	8042a3c <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8042a16:	6a3b      	ldr	r3, [r7, #32]
 8042a18:	b29b      	uxth	r3, r3
 8042a1a:	f023 030f 	bic.w	r3, r3, #15
 8042a1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8042a20:	6a3b      	ldr	r3, [r7, #32]
 8042a22:	085b      	lsrs	r3, r3, #1
 8042a24:	b29b      	uxth	r3, r3
 8042a26:	f003 0307 	and.w	r3, r3, #7
 8042a2a:	b29a      	uxth	r2, r3
 8042a2c:	8bfb      	ldrh	r3, [r7, #30]
 8042a2e:	4313      	orrs	r3, r2
 8042a30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8042a32:	697b      	ldr	r3, [r7, #20]
 8042a34:	681b      	ldr	r3, [r3, #0]
 8042a36:	8bfa      	ldrh	r2, [r7, #30]
 8042a38:	60da      	str	r2, [r3, #12]
 8042a3a:	e062      	b.n	8042b02 <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8042a3c:	2301      	movs	r3, #1
 8042a3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8042a42:	e05e      	b.n	8042b02 <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8042a44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8042a48:	2b08      	cmp	r3, #8
 8042a4a:	d828      	bhi.n	8042a9e <UART_SetConfig+0x572>
 8042a4c:	a201      	add	r2, pc, #4	; (adr r2, 8042a54 <UART_SetConfig+0x528>)
 8042a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042a52:	bf00      	nop
 8042a54:	08042a79 	.word	0x08042a79
 8042a58:	08042a81 	.word	0x08042a81
 8042a5c:	08042a89 	.word	0x08042a89
 8042a60:	08042a9f 	.word	0x08042a9f
 8042a64:	08042a8f 	.word	0x08042a8f
 8042a68:	08042a9f 	.word	0x08042a9f
 8042a6c:	08042a9f 	.word	0x08042a9f
 8042a70:	08042a9f 	.word	0x08042a9f
 8042a74:	08042a97 	.word	0x08042a97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8042a78:	f7fe fb7c 	bl	8041174 <HAL_RCC_GetPCLK1Freq>
 8042a7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042a7e:	e014      	b.n	8042aaa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8042a80:	f7fe fb8c 	bl	804119c <HAL_RCC_GetPCLK2Freq>
 8042a84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042a86:	e010      	b.n	8042aaa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8042a88:	4b1a      	ldr	r3, [pc, #104]	; (8042af4 <UART_SetConfig+0x5c8>)
 8042a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042a8c:	e00d      	b.n	8042aaa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8042a8e:	f7fe fabf 	bl	8041010 <HAL_RCC_GetSysClockFreq>
 8042a92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8042a94:	e009      	b.n	8042aaa <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8042a96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8042a9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8042a9c:	e005      	b.n	8042aaa <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 8042a9e:	2300      	movs	r3, #0
 8042aa0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8042aa2:	2301      	movs	r3, #1
 8042aa4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8042aa8:	bf00      	nop
    }

    if (pclk != 0U)
 8042aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042aac:	2b00      	cmp	r3, #0
 8042aae:	d028      	beq.n	8042b02 <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8042ab0:	697b      	ldr	r3, [r7, #20]
 8042ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8042ab4:	4a10      	ldr	r2, [pc, #64]	; (8042af8 <UART_SetConfig+0x5cc>)
 8042ab6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8042aba:	461a      	mov	r2, r3
 8042abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042abe:	fbb3 f2f2 	udiv	r2, r3, r2
 8042ac2:	697b      	ldr	r3, [r7, #20]
 8042ac4:	685b      	ldr	r3, [r3, #4]
 8042ac6:	085b      	lsrs	r3, r3, #1
 8042ac8:	441a      	add	r2, r3
 8042aca:	697b      	ldr	r3, [r7, #20]
 8042acc:	685b      	ldr	r3, [r3, #4]
 8042ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8042ad2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8042ad4:	6a3b      	ldr	r3, [r7, #32]
 8042ad6:	2b0f      	cmp	r3, #15
 8042ad8:	d910      	bls.n	8042afc <UART_SetConfig+0x5d0>
 8042ada:	6a3b      	ldr	r3, [r7, #32]
 8042adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8042ae0:	d20c      	bcs.n	8042afc <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8042ae2:	6a3b      	ldr	r3, [r7, #32]
 8042ae4:	b29a      	uxth	r2, r3
 8042ae6:	697b      	ldr	r3, [r7, #20]
 8042ae8:	681b      	ldr	r3, [r3, #0]
 8042aea:	60da      	str	r2, [r3, #12]
 8042aec:	e009      	b.n	8042b02 <UART_SetConfig+0x5d6>
 8042aee:	bf00      	nop
 8042af0:	40008000 	.word	0x40008000
 8042af4:	00f42400 	.word	0x00f42400
 8042af8:	08043370 	.word	0x08043370
      }
      else
      {
        ret = HAL_ERROR;
 8042afc:	2301      	movs	r3, #1
 8042afe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8042b02:	697b      	ldr	r3, [r7, #20]
 8042b04:	2201      	movs	r2, #1
 8042b06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8042b0a:	697b      	ldr	r3, [r7, #20]
 8042b0c:	2201      	movs	r2, #1
 8042b0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8042b12:	697b      	ldr	r3, [r7, #20]
 8042b14:	2200      	movs	r2, #0
 8042b16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8042b18:	697b      	ldr	r3, [r7, #20]
 8042b1a:	2200      	movs	r2, #0
 8042b1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8042b1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8042b22:	4618      	mov	r0, r3
 8042b24:	3730      	adds	r7, #48	; 0x30
 8042b26:	46bd      	mov	sp, r7
 8042b28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08042b2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8042b2c:	b480      	push	{r7}
 8042b2e:	b083      	sub	sp, #12
 8042b30:	af00      	add	r7, sp, #0
 8042b32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8042b34:	687b      	ldr	r3, [r7, #4]
 8042b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b38:	f003 0301 	and.w	r3, r3, #1
 8042b3c:	2b00      	cmp	r3, #0
 8042b3e:	d00a      	beq.n	8042b56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8042b40:	687b      	ldr	r3, [r7, #4]
 8042b42:	681b      	ldr	r3, [r3, #0]
 8042b44:	685b      	ldr	r3, [r3, #4]
 8042b46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8042b4a:	687b      	ldr	r3, [r7, #4]
 8042b4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8042b4e:	687b      	ldr	r3, [r7, #4]
 8042b50:	681b      	ldr	r3, [r3, #0]
 8042b52:	430a      	orrs	r2, r1
 8042b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8042b56:	687b      	ldr	r3, [r7, #4]
 8042b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b5a:	f003 0302 	and.w	r3, r3, #2
 8042b5e:	2b00      	cmp	r3, #0
 8042b60:	d00a      	beq.n	8042b78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8042b62:	687b      	ldr	r3, [r7, #4]
 8042b64:	681b      	ldr	r3, [r3, #0]
 8042b66:	685b      	ldr	r3, [r3, #4]
 8042b68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8042b6c:	687b      	ldr	r3, [r7, #4]
 8042b6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042b70:	687b      	ldr	r3, [r7, #4]
 8042b72:	681b      	ldr	r3, [r3, #0]
 8042b74:	430a      	orrs	r2, r1
 8042b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8042b78:	687b      	ldr	r3, [r7, #4]
 8042b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b7c:	f003 0304 	and.w	r3, r3, #4
 8042b80:	2b00      	cmp	r3, #0
 8042b82:	d00a      	beq.n	8042b9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	685b      	ldr	r3, [r3, #4]
 8042b8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8042b8e:	687b      	ldr	r3, [r7, #4]
 8042b90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8042b92:	687b      	ldr	r3, [r7, #4]
 8042b94:	681b      	ldr	r3, [r3, #0]
 8042b96:	430a      	orrs	r2, r1
 8042b98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8042b9a:	687b      	ldr	r3, [r7, #4]
 8042b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042b9e:	f003 0308 	and.w	r3, r3, #8
 8042ba2:	2b00      	cmp	r3, #0
 8042ba4:	d00a      	beq.n	8042bbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8042ba6:	687b      	ldr	r3, [r7, #4]
 8042ba8:	681b      	ldr	r3, [r3, #0]
 8042baa:	685b      	ldr	r3, [r3, #4]
 8042bac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8042bb0:	687b      	ldr	r3, [r7, #4]
 8042bb2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8042bb4:	687b      	ldr	r3, [r7, #4]
 8042bb6:	681b      	ldr	r3, [r3, #0]
 8042bb8:	430a      	orrs	r2, r1
 8042bba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042bc0:	f003 0310 	and.w	r3, r3, #16
 8042bc4:	2b00      	cmp	r3, #0
 8042bc6:	d00a      	beq.n	8042bde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8042bc8:	687b      	ldr	r3, [r7, #4]
 8042bca:	681b      	ldr	r3, [r3, #0]
 8042bcc:	689b      	ldr	r3, [r3, #8]
 8042bce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8042bd2:	687b      	ldr	r3, [r7, #4]
 8042bd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8042bd6:	687b      	ldr	r3, [r7, #4]
 8042bd8:	681b      	ldr	r3, [r3, #0]
 8042bda:	430a      	orrs	r2, r1
 8042bdc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8042bde:	687b      	ldr	r3, [r7, #4]
 8042be0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042be2:	f003 0320 	and.w	r3, r3, #32
 8042be6:	2b00      	cmp	r3, #0
 8042be8:	d00a      	beq.n	8042c00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8042bea:	687b      	ldr	r3, [r7, #4]
 8042bec:	681b      	ldr	r3, [r3, #0]
 8042bee:	689b      	ldr	r3, [r3, #8]
 8042bf0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8042bf4:	687b      	ldr	r3, [r7, #4]
 8042bf6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8042bf8:	687b      	ldr	r3, [r7, #4]
 8042bfa:	681b      	ldr	r3, [r3, #0]
 8042bfc:	430a      	orrs	r2, r1
 8042bfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8042c00:	687b      	ldr	r3, [r7, #4]
 8042c02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042c08:	2b00      	cmp	r3, #0
 8042c0a:	d01a      	beq.n	8042c42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8042c0c:	687b      	ldr	r3, [r7, #4]
 8042c0e:	681b      	ldr	r3, [r3, #0]
 8042c10:	685b      	ldr	r3, [r3, #4]
 8042c12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8042c16:	687b      	ldr	r3, [r7, #4]
 8042c18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8042c1a:	687b      	ldr	r3, [r7, #4]
 8042c1c:	681b      	ldr	r3, [r3, #0]
 8042c1e:	430a      	orrs	r2, r1
 8042c20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8042c22:	687b      	ldr	r3, [r7, #4]
 8042c24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042c26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8042c2a:	d10a      	bne.n	8042c42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8042c2c:	687b      	ldr	r3, [r7, #4]
 8042c2e:	681b      	ldr	r3, [r3, #0]
 8042c30:	685b      	ldr	r3, [r3, #4]
 8042c32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8042c36:	687b      	ldr	r3, [r7, #4]
 8042c38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8042c3a:	687b      	ldr	r3, [r7, #4]
 8042c3c:	681b      	ldr	r3, [r3, #0]
 8042c3e:	430a      	orrs	r2, r1
 8042c40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8042c42:	687b      	ldr	r3, [r7, #4]
 8042c44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042c46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8042c4a:	2b00      	cmp	r3, #0
 8042c4c:	d00a      	beq.n	8042c64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8042c4e:	687b      	ldr	r3, [r7, #4]
 8042c50:	681b      	ldr	r3, [r3, #0]
 8042c52:	685b      	ldr	r3, [r3, #4]
 8042c54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8042c58:	687b      	ldr	r3, [r7, #4]
 8042c5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8042c5c:	687b      	ldr	r3, [r7, #4]
 8042c5e:	681b      	ldr	r3, [r3, #0]
 8042c60:	430a      	orrs	r2, r1
 8042c62:	605a      	str	r2, [r3, #4]
  }
}
 8042c64:	bf00      	nop
 8042c66:	370c      	adds	r7, #12
 8042c68:	46bd      	mov	sp, r7
 8042c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042c6e:	4770      	bx	lr

08042c70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8042c70:	b580      	push	{r7, lr}
 8042c72:	b098      	sub	sp, #96	; 0x60
 8042c74:	af02      	add	r7, sp, #8
 8042c76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042c78:	687b      	ldr	r3, [r7, #4]
 8042c7a:	2200      	movs	r2, #0
 8042c7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8042c80:	f7fd ff12 	bl	8040aa8 <HAL_GetTick>
 8042c84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8042c86:	687b      	ldr	r3, [r7, #4]
 8042c88:	681b      	ldr	r3, [r3, #0]
 8042c8a:	681b      	ldr	r3, [r3, #0]
 8042c8c:	f003 0308 	and.w	r3, r3, #8
 8042c90:	2b08      	cmp	r3, #8
 8042c92:	d12f      	bne.n	8042cf4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042c94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042c98:	9300      	str	r3, [sp, #0]
 8042c9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8042c9c:	2200      	movs	r2, #0
 8042c9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8042ca2:	6878      	ldr	r0, [r7, #4]
 8042ca4:	f000 f88e 	bl	8042dc4 <UART_WaitOnFlagUntilTimeout>
 8042ca8:	4603      	mov	r3, r0
 8042caa:	2b00      	cmp	r3, #0
 8042cac:	d022      	beq.n	8042cf4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8042cae:	687b      	ldr	r3, [r7, #4]
 8042cb0:	681b      	ldr	r3, [r3, #0]
 8042cb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042cb6:	e853 3f00 	ldrex	r3, [r3]
 8042cba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8042cbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042cbe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8042cc2:	653b      	str	r3, [r7, #80]	; 0x50
 8042cc4:	687b      	ldr	r3, [r7, #4]
 8042cc6:	681b      	ldr	r3, [r3, #0]
 8042cc8:	461a      	mov	r2, r3
 8042cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8042ccc:	647b      	str	r3, [r7, #68]	; 0x44
 8042cce:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042cd0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8042cd2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8042cd4:	e841 2300 	strex	r3, r2, [r1]
 8042cd8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8042cda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042cdc:	2b00      	cmp	r3, #0
 8042cde:	d1e6      	bne.n	8042cae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8042ce0:	687b      	ldr	r3, [r7, #4]
 8042ce2:	2220      	movs	r2, #32
 8042ce4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8042ce8:	687b      	ldr	r3, [r7, #4]
 8042cea:	2200      	movs	r2, #0
 8042cec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042cf0:	2303      	movs	r3, #3
 8042cf2:	e063      	b.n	8042dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8042cf4:	687b      	ldr	r3, [r7, #4]
 8042cf6:	681b      	ldr	r3, [r3, #0]
 8042cf8:	681b      	ldr	r3, [r3, #0]
 8042cfa:	f003 0304 	and.w	r3, r3, #4
 8042cfe:	2b04      	cmp	r3, #4
 8042d00:	d149      	bne.n	8042d96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8042d02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8042d06:	9300      	str	r3, [sp, #0]
 8042d08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8042d0a:	2200      	movs	r2, #0
 8042d0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8042d10:	6878      	ldr	r0, [r7, #4]
 8042d12:	f000 f857 	bl	8042dc4 <UART_WaitOnFlagUntilTimeout>
 8042d16:	4603      	mov	r3, r0
 8042d18:	2b00      	cmp	r3, #0
 8042d1a:	d03c      	beq.n	8042d96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8042d1c:	687b      	ldr	r3, [r7, #4]
 8042d1e:	681b      	ldr	r3, [r3, #0]
 8042d20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042d24:	e853 3f00 	ldrex	r3, [r3]
 8042d28:	623b      	str	r3, [r7, #32]
   return(result);
 8042d2a:	6a3b      	ldr	r3, [r7, #32]
 8042d2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8042d30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8042d32:	687b      	ldr	r3, [r7, #4]
 8042d34:	681b      	ldr	r3, [r3, #0]
 8042d36:	461a      	mov	r2, r3
 8042d38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042d3a:	633b      	str	r3, [r7, #48]	; 0x30
 8042d3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042d40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8042d42:	e841 2300 	strex	r3, r2, [r1]
 8042d46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8042d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8042d4a:	2b00      	cmp	r3, #0
 8042d4c:	d1e6      	bne.n	8042d1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8042d4e:	687b      	ldr	r3, [r7, #4]
 8042d50:	681b      	ldr	r3, [r3, #0]
 8042d52:	3308      	adds	r3, #8
 8042d54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042d56:	693b      	ldr	r3, [r7, #16]
 8042d58:	e853 3f00 	ldrex	r3, [r3]
 8042d5c:	60fb      	str	r3, [r7, #12]
   return(result);
 8042d5e:	68fb      	ldr	r3, [r7, #12]
 8042d60:	f023 0301 	bic.w	r3, r3, #1
 8042d64:	64bb      	str	r3, [r7, #72]	; 0x48
 8042d66:	687b      	ldr	r3, [r7, #4]
 8042d68:	681b      	ldr	r3, [r3, #0]
 8042d6a:	3308      	adds	r3, #8
 8042d6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8042d6e:	61fa      	str	r2, [r7, #28]
 8042d70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042d72:	69b9      	ldr	r1, [r7, #24]
 8042d74:	69fa      	ldr	r2, [r7, #28]
 8042d76:	e841 2300 	strex	r3, r2, [r1]
 8042d7a:	617b      	str	r3, [r7, #20]
   return(result);
 8042d7c:	697b      	ldr	r3, [r7, #20]
 8042d7e:	2b00      	cmp	r3, #0
 8042d80:	d1e5      	bne.n	8042d4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8042d82:	687b      	ldr	r3, [r7, #4]
 8042d84:	2220      	movs	r2, #32
 8042d86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8042d8a:	687b      	ldr	r3, [r7, #4]
 8042d8c:	2200      	movs	r2, #0
 8042d8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8042d92:	2303      	movs	r3, #3
 8042d94:	e012      	b.n	8042dbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8042d96:	687b      	ldr	r3, [r7, #4]
 8042d98:	2220      	movs	r2, #32
 8042d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8042d9e:	687b      	ldr	r3, [r7, #4]
 8042da0:	2220      	movs	r2, #32
 8042da2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042da6:	687b      	ldr	r3, [r7, #4]
 8042da8:	2200      	movs	r2, #0
 8042daa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8042dac:	687b      	ldr	r3, [r7, #4]
 8042dae:	2200      	movs	r2, #0
 8042db0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8042db2:	687b      	ldr	r3, [r7, #4]
 8042db4:	2200      	movs	r2, #0
 8042db6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8042dba:	2300      	movs	r3, #0
}
 8042dbc:	4618      	mov	r0, r3
 8042dbe:	3758      	adds	r7, #88	; 0x58
 8042dc0:	46bd      	mov	sp, r7
 8042dc2:	bd80      	pop	{r7, pc}

08042dc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8042dc4:	b580      	push	{r7, lr}
 8042dc6:	b084      	sub	sp, #16
 8042dc8:	af00      	add	r7, sp, #0
 8042dca:	60f8      	str	r0, [r7, #12]
 8042dcc:	60b9      	str	r1, [r7, #8]
 8042dce:	603b      	str	r3, [r7, #0]
 8042dd0:	4613      	mov	r3, r2
 8042dd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042dd4:	e049      	b.n	8042e6a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8042dd6:	69bb      	ldr	r3, [r7, #24]
 8042dd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8042ddc:	d045      	beq.n	8042e6a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8042dde:	f7fd fe63 	bl	8040aa8 <HAL_GetTick>
 8042de2:	4602      	mov	r2, r0
 8042de4:	683b      	ldr	r3, [r7, #0]
 8042de6:	1ad3      	subs	r3, r2, r3
 8042de8:	69ba      	ldr	r2, [r7, #24]
 8042dea:	429a      	cmp	r2, r3
 8042dec:	d302      	bcc.n	8042df4 <UART_WaitOnFlagUntilTimeout+0x30>
 8042dee:	69bb      	ldr	r3, [r7, #24]
 8042df0:	2b00      	cmp	r3, #0
 8042df2:	d101      	bne.n	8042df8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8042df4:	2303      	movs	r3, #3
 8042df6:	e048      	b.n	8042e8a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8042df8:	68fb      	ldr	r3, [r7, #12]
 8042dfa:	681b      	ldr	r3, [r3, #0]
 8042dfc:	681b      	ldr	r3, [r3, #0]
 8042dfe:	f003 0304 	and.w	r3, r3, #4
 8042e02:	2b00      	cmp	r3, #0
 8042e04:	d031      	beq.n	8042e6a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8042e06:	68fb      	ldr	r3, [r7, #12]
 8042e08:	681b      	ldr	r3, [r3, #0]
 8042e0a:	69db      	ldr	r3, [r3, #28]
 8042e0c:	f003 0308 	and.w	r3, r3, #8
 8042e10:	2b08      	cmp	r3, #8
 8042e12:	d110      	bne.n	8042e36 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8042e14:	68fb      	ldr	r3, [r7, #12]
 8042e16:	681b      	ldr	r3, [r3, #0]
 8042e18:	2208      	movs	r2, #8
 8042e1a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8042e1c:	68f8      	ldr	r0, [r7, #12]
 8042e1e:	f000 f838 	bl	8042e92 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8042e22:	68fb      	ldr	r3, [r7, #12]
 8042e24:	2208      	movs	r2, #8
 8042e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8042e2a:	68fb      	ldr	r3, [r7, #12]
 8042e2c:	2200      	movs	r2, #0
 8042e2e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8042e32:	2301      	movs	r3, #1
 8042e34:	e029      	b.n	8042e8a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8042e36:	68fb      	ldr	r3, [r7, #12]
 8042e38:	681b      	ldr	r3, [r3, #0]
 8042e3a:	69db      	ldr	r3, [r3, #28]
 8042e3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042e40:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042e44:	d111      	bne.n	8042e6a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8042e46:	68fb      	ldr	r3, [r7, #12]
 8042e48:	681b      	ldr	r3, [r3, #0]
 8042e4a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042e4e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8042e50:	68f8      	ldr	r0, [r7, #12]
 8042e52:	f000 f81e 	bl	8042e92 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8042e56:	68fb      	ldr	r3, [r7, #12]
 8042e58:	2220      	movs	r2, #32
 8042e5a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8042e5e:	68fb      	ldr	r3, [r7, #12]
 8042e60:	2200      	movs	r2, #0
 8042e62:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8042e66:	2303      	movs	r3, #3
 8042e68:	e00f      	b.n	8042e8a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8042e6a:	68fb      	ldr	r3, [r7, #12]
 8042e6c:	681b      	ldr	r3, [r3, #0]
 8042e6e:	69da      	ldr	r2, [r3, #28]
 8042e70:	68bb      	ldr	r3, [r7, #8]
 8042e72:	4013      	ands	r3, r2
 8042e74:	68ba      	ldr	r2, [r7, #8]
 8042e76:	429a      	cmp	r2, r3
 8042e78:	bf0c      	ite	eq
 8042e7a:	2301      	moveq	r3, #1
 8042e7c:	2300      	movne	r3, #0
 8042e7e:	b2db      	uxtb	r3, r3
 8042e80:	461a      	mov	r2, r3
 8042e82:	79fb      	ldrb	r3, [r7, #7]
 8042e84:	429a      	cmp	r2, r3
 8042e86:	d0a6      	beq.n	8042dd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8042e88:	2300      	movs	r3, #0
}
 8042e8a:	4618      	mov	r0, r3
 8042e8c:	3710      	adds	r7, #16
 8042e8e:	46bd      	mov	sp, r7
 8042e90:	bd80      	pop	{r7, pc}

08042e92 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8042e92:	b480      	push	{r7}
 8042e94:	b095      	sub	sp, #84	; 0x54
 8042e96:	af00      	add	r7, sp, #0
 8042e98:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8042e9a:	687b      	ldr	r3, [r7, #4]
 8042e9c:	681b      	ldr	r3, [r3, #0]
 8042e9e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042ea2:	e853 3f00 	ldrex	r3, [r3]
 8042ea6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8042ea8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8042eaa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8042eae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8042eb0:	687b      	ldr	r3, [r7, #4]
 8042eb2:	681b      	ldr	r3, [r3, #0]
 8042eb4:	461a      	mov	r2, r3
 8042eb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8042eb8:	643b      	str	r3, [r7, #64]	; 0x40
 8042eba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ebc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8042ebe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8042ec0:	e841 2300 	strex	r3, r2, [r1]
 8042ec4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8042ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042ec8:	2b00      	cmp	r3, #0
 8042eca:	d1e6      	bne.n	8042e9a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8042ecc:	687b      	ldr	r3, [r7, #4]
 8042ece:	681b      	ldr	r3, [r3, #0]
 8042ed0:	3308      	adds	r3, #8
 8042ed2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042ed4:	6a3b      	ldr	r3, [r7, #32]
 8042ed6:	e853 3f00 	ldrex	r3, [r3]
 8042eda:	61fb      	str	r3, [r7, #28]
   return(result);
 8042edc:	69fb      	ldr	r3, [r7, #28]
 8042ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042ee2:	f023 0301 	bic.w	r3, r3, #1
 8042ee6:	64bb      	str	r3, [r7, #72]	; 0x48
 8042ee8:	687b      	ldr	r3, [r7, #4]
 8042eea:	681b      	ldr	r3, [r3, #0]
 8042eec:	3308      	adds	r3, #8
 8042eee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8042ef0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8042ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042ef4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8042ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042ef8:	e841 2300 	strex	r3, r2, [r1]
 8042efc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8042efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8042f00:	2b00      	cmp	r3, #0
 8042f02:	d1e3      	bne.n	8042ecc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042f08:	2b01      	cmp	r3, #1
 8042f0a:	d118      	bne.n	8042f3e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8042f0c:	687b      	ldr	r3, [r7, #4]
 8042f0e:	681b      	ldr	r3, [r3, #0]
 8042f10:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8042f12:	68fb      	ldr	r3, [r7, #12]
 8042f14:	e853 3f00 	ldrex	r3, [r3]
 8042f18:	60bb      	str	r3, [r7, #8]
   return(result);
 8042f1a:	68bb      	ldr	r3, [r7, #8]
 8042f1c:	f023 0310 	bic.w	r3, r3, #16
 8042f20:	647b      	str	r3, [r7, #68]	; 0x44
 8042f22:	687b      	ldr	r3, [r7, #4]
 8042f24:	681b      	ldr	r3, [r3, #0]
 8042f26:	461a      	mov	r2, r3
 8042f28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8042f2a:	61bb      	str	r3, [r7, #24]
 8042f2c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8042f2e:	6979      	ldr	r1, [r7, #20]
 8042f30:	69ba      	ldr	r2, [r7, #24]
 8042f32:	e841 2300 	strex	r3, r2, [r1]
 8042f36:	613b      	str	r3, [r7, #16]
   return(result);
 8042f38:	693b      	ldr	r3, [r7, #16]
 8042f3a:	2b00      	cmp	r3, #0
 8042f3c:	d1e6      	bne.n	8042f0c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8042f3e:	687b      	ldr	r3, [r7, #4]
 8042f40:	2220      	movs	r2, #32
 8042f42:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8042f46:	687b      	ldr	r3, [r7, #4]
 8042f48:	2200      	movs	r2, #0
 8042f4a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8042f4c:	687b      	ldr	r3, [r7, #4]
 8042f4e:	2200      	movs	r2, #0
 8042f50:	675a      	str	r2, [r3, #116]	; 0x74
}
 8042f52:	bf00      	nop
 8042f54:	3754      	adds	r7, #84	; 0x54
 8042f56:	46bd      	mov	sp, r7
 8042f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f5c:	4770      	bx	lr

08042f5e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8042f5e:	b480      	push	{r7}
 8042f60:	b085      	sub	sp, #20
 8042f62:	af00      	add	r7, sp, #0
 8042f64:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8042f66:	687b      	ldr	r3, [r7, #4]
 8042f68:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8042f6c:	2b01      	cmp	r3, #1
 8042f6e:	d101      	bne.n	8042f74 <HAL_UARTEx_DisableFifoMode+0x16>
 8042f70:	2302      	movs	r3, #2
 8042f72:	e027      	b.n	8042fc4 <HAL_UARTEx_DisableFifoMode+0x66>
 8042f74:	687b      	ldr	r3, [r7, #4]
 8042f76:	2201      	movs	r2, #1
 8042f78:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8042f7c:	687b      	ldr	r3, [r7, #4]
 8042f7e:	2224      	movs	r2, #36	; 0x24
 8042f80:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8042f84:	687b      	ldr	r3, [r7, #4]
 8042f86:	681b      	ldr	r3, [r3, #0]
 8042f88:	681b      	ldr	r3, [r3, #0]
 8042f8a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8042f8c:	687b      	ldr	r3, [r7, #4]
 8042f8e:	681b      	ldr	r3, [r3, #0]
 8042f90:	681a      	ldr	r2, [r3, #0]
 8042f92:	687b      	ldr	r3, [r7, #4]
 8042f94:	681b      	ldr	r3, [r3, #0]
 8042f96:	f022 0201 	bic.w	r2, r2, #1
 8042f9a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8042f9c:	68fb      	ldr	r3, [r7, #12]
 8042f9e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8042fa2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8042fa4:	687b      	ldr	r3, [r7, #4]
 8042fa6:	2200      	movs	r2, #0
 8042fa8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8042faa:	687b      	ldr	r3, [r7, #4]
 8042fac:	681b      	ldr	r3, [r3, #0]
 8042fae:	68fa      	ldr	r2, [r7, #12]
 8042fb0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8042fb2:	687b      	ldr	r3, [r7, #4]
 8042fb4:	2220      	movs	r2, #32
 8042fb6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8042fba:	687b      	ldr	r3, [r7, #4]
 8042fbc:	2200      	movs	r2, #0
 8042fbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8042fc2:	2300      	movs	r3, #0
}
 8042fc4:	4618      	mov	r0, r3
 8042fc6:	3714      	adds	r7, #20
 8042fc8:	46bd      	mov	sp, r7
 8042fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042fce:	4770      	bx	lr

08042fd0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8042fd0:	b580      	push	{r7, lr}
 8042fd2:	b084      	sub	sp, #16
 8042fd4:	af00      	add	r7, sp, #0
 8042fd6:	6078      	str	r0, [r7, #4]
 8042fd8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8042fda:	687b      	ldr	r3, [r7, #4]
 8042fdc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8042fe0:	2b01      	cmp	r3, #1
 8042fe2:	d101      	bne.n	8042fe8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8042fe4:	2302      	movs	r3, #2
 8042fe6:	e02d      	b.n	8043044 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8042fe8:	687b      	ldr	r3, [r7, #4]
 8042fea:	2201      	movs	r2, #1
 8042fec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8042ff0:	687b      	ldr	r3, [r7, #4]
 8042ff2:	2224      	movs	r2, #36	; 0x24
 8042ff4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8042ff8:	687b      	ldr	r3, [r7, #4]
 8042ffa:	681b      	ldr	r3, [r3, #0]
 8042ffc:	681b      	ldr	r3, [r3, #0]
 8042ffe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043000:	687b      	ldr	r3, [r7, #4]
 8043002:	681b      	ldr	r3, [r3, #0]
 8043004:	681a      	ldr	r2, [r3, #0]
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	681b      	ldr	r3, [r3, #0]
 804300a:	f022 0201 	bic.w	r2, r2, #1
 804300e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8043010:	687b      	ldr	r3, [r7, #4]
 8043012:	681b      	ldr	r3, [r3, #0]
 8043014:	689b      	ldr	r3, [r3, #8]
 8043016:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	681b      	ldr	r3, [r3, #0]
 804301e:	683a      	ldr	r2, [r7, #0]
 8043020:	430a      	orrs	r2, r1
 8043022:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043024:	6878      	ldr	r0, [r7, #4]
 8043026:	f000 f84f 	bl	80430c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 804302a:	687b      	ldr	r3, [r7, #4]
 804302c:	681b      	ldr	r3, [r3, #0]
 804302e:	68fa      	ldr	r2, [r7, #12]
 8043030:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8043032:	687b      	ldr	r3, [r7, #4]
 8043034:	2220      	movs	r2, #32
 8043036:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 804303a:	687b      	ldr	r3, [r7, #4]
 804303c:	2200      	movs	r2, #0
 804303e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8043042:	2300      	movs	r3, #0
}
 8043044:	4618      	mov	r0, r3
 8043046:	3710      	adds	r7, #16
 8043048:	46bd      	mov	sp, r7
 804304a:	bd80      	pop	{r7, pc}

0804304c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 804304c:	b580      	push	{r7, lr}
 804304e:	b084      	sub	sp, #16
 8043050:	af00      	add	r7, sp, #0
 8043052:	6078      	str	r0, [r7, #4]
 8043054:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 804305c:	2b01      	cmp	r3, #1
 804305e:	d101      	bne.n	8043064 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8043060:	2302      	movs	r3, #2
 8043062:	e02d      	b.n	80430c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043064:	687b      	ldr	r3, [r7, #4]
 8043066:	2201      	movs	r2, #1
 8043068:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	2224      	movs	r2, #36	; 0x24
 8043070:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	681b      	ldr	r3, [r3, #0]
 8043078:	681b      	ldr	r3, [r3, #0]
 804307a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 804307c:	687b      	ldr	r3, [r7, #4]
 804307e:	681b      	ldr	r3, [r3, #0]
 8043080:	681a      	ldr	r2, [r3, #0]
 8043082:	687b      	ldr	r3, [r7, #4]
 8043084:	681b      	ldr	r3, [r3, #0]
 8043086:	f022 0201 	bic.w	r2, r2, #1
 804308a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 804308c:	687b      	ldr	r3, [r7, #4]
 804308e:	681b      	ldr	r3, [r3, #0]
 8043090:	689b      	ldr	r3, [r3, #8]
 8043092:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043096:	687b      	ldr	r3, [r7, #4]
 8043098:	681b      	ldr	r3, [r3, #0]
 804309a:	683a      	ldr	r2, [r7, #0]
 804309c:	430a      	orrs	r2, r1
 804309e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80430a0:	6878      	ldr	r0, [r7, #4]
 80430a2:	f000 f811 	bl	80430c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80430a6:	687b      	ldr	r3, [r7, #4]
 80430a8:	681b      	ldr	r3, [r3, #0]
 80430aa:	68fa      	ldr	r2, [r7, #12]
 80430ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80430ae:	687b      	ldr	r3, [r7, #4]
 80430b0:	2220      	movs	r2, #32
 80430b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80430b6:	687b      	ldr	r3, [r7, #4]
 80430b8:	2200      	movs	r2, #0
 80430ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80430be:	2300      	movs	r3, #0
}
 80430c0:	4618      	mov	r0, r3
 80430c2:	3710      	adds	r7, #16
 80430c4:	46bd      	mov	sp, r7
 80430c6:	bd80      	pop	{r7, pc}

080430c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80430c8:	b480      	push	{r7}
 80430ca:	b085      	sub	sp, #20
 80430cc:	af00      	add	r7, sp, #0
 80430ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80430d0:	687b      	ldr	r3, [r7, #4]
 80430d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80430d4:	2b00      	cmp	r3, #0
 80430d6:	d108      	bne.n	80430ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80430d8:	687b      	ldr	r3, [r7, #4]
 80430da:	2201      	movs	r2, #1
 80430dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80430e0:	687b      	ldr	r3, [r7, #4]
 80430e2:	2201      	movs	r2, #1
 80430e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80430e8:	e031      	b.n	804314e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80430ea:	2308      	movs	r3, #8
 80430ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80430ee:	2308      	movs	r3, #8
 80430f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80430f2:	687b      	ldr	r3, [r7, #4]
 80430f4:	681b      	ldr	r3, [r3, #0]
 80430f6:	689b      	ldr	r3, [r3, #8]
 80430f8:	0e5b      	lsrs	r3, r3, #25
 80430fa:	b2db      	uxtb	r3, r3
 80430fc:	f003 0307 	and.w	r3, r3, #7
 8043100:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8043102:	687b      	ldr	r3, [r7, #4]
 8043104:	681b      	ldr	r3, [r3, #0]
 8043106:	689b      	ldr	r3, [r3, #8]
 8043108:	0f5b      	lsrs	r3, r3, #29
 804310a:	b2db      	uxtb	r3, r3
 804310c:	f003 0307 	and.w	r3, r3, #7
 8043110:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8043112:	7bbb      	ldrb	r3, [r7, #14]
 8043114:	7b3a      	ldrb	r2, [r7, #12]
 8043116:	4911      	ldr	r1, [pc, #68]	; (804315c <UARTEx_SetNbDataToProcess+0x94>)
 8043118:	5c8a      	ldrb	r2, [r1, r2]
 804311a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 804311e:	7b3a      	ldrb	r2, [r7, #12]
 8043120:	490f      	ldr	r1, [pc, #60]	; (8043160 <UARTEx_SetNbDataToProcess+0x98>)
 8043122:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8043124:	fb93 f3f2 	sdiv	r3, r3, r2
 8043128:	b29a      	uxth	r2, r3
 804312a:	687b      	ldr	r3, [r7, #4]
 804312c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8043130:	7bfb      	ldrb	r3, [r7, #15]
 8043132:	7b7a      	ldrb	r2, [r7, #13]
 8043134:	4909      	ldr	r1, [pc, #36]	; (804315c <UARTEx_SetNbDataToProcess+0x94>)
 8043136:	5c8a      	ldrb	r2, [r1, r2]
 8043138:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 804313c:	7b7a      	ldrb	r2, [r7, #13]
 804313e:	4908      	ldr	r1, [pc, #32]	; (8043160 <UARTEx_SetNbDataToProcess+0x98>)
 8043140:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8043142:	fb93 f3f2 	sdiv	r3, r3, r2
 8043146:	b29a      	uxth	r2, r3
 8043148:	687b      	ldr	r3, [r7, #4]
 804314a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804314e:	bf00      	nop
 8043150:	3714      	adds	r7, #20
 8043152:	46bd      	mov	sp, r7
 8043154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043158:	4770      	bx	lr
 804315a:	bf00      	nop
 804315c:	08043388 	.word	0x08043388
 8043160:	08043390 	.word	0x08043390

08043164 <__libc_init_array>:
 8043164:	b570      	push	{r4, r5, r6, lr}
 8043166:	4d0d      	ldr	r5, [pc, #52]	; (804319c <__libc_init_array+0x38>)
 8043168:	2600      	movs	r6, #0
 804316a:	4c0d      	ldr	r4, [pc, #52]	; (80431a0 <__libc_init_array+0x3c>)
 804316c:	1b64      	subs	r4, r4, r5
 804316e:	10a4      	asrs	r4, r4, #2
 8043170:	42a6      	cmp	r6, r4
 8043172:	d109      	bne.n	8043188 <__libc_init_array+0x24>
 8043174:	4d0b      	ldr	r5, [pc, #44]	; (80431a4 <__libc_init_array+0x40>)
 8043176:	2600      	movs	r6, #0
 8043178:	4c0b      	ldr	r4, [pc, #44]	; (80431a8 <__libc_init_array+0x44>)
 804317a:	f000 f82d 	bl	80431d8 <_init>
 804317e:	1b64      	subs	r4, r4, r5
 8043180:	10a4      	asrs	r4, r4, #2
 8043182:	42a6      	cmp	r6, r4
 8043184:	d105      	bne.n	8043192 <__libc_init_array+0x2e>
 8043186:	bd70      	pop	{r4, r5, r6, pc}
 8043188:	f855 3b04 	ldr.w	r3, [r5], #4
 804318c:	3601      	adds	r6, #1
 804318e:	4798      	blx	r3
 8043190:	e7ee      	b.n	8043170 <__libc_init_array+0xc>
 8043192:	f855 3b04 	ldr.w	r3, [r5], #4
 8043196:	3601      	adds	r6, #1
 8043198:	4798      	blx	r3
 804319a:	e7f2      	b.n	8043182 <__libc_init_array+0x1e>
 804319c:	080433a0 	.word	0x080433a0
 80431a0:	080433a0 	.word	0x080433a0
 80431a4:	080433a0 	.word	0x080433a0
 80431a8:	080433a4 	.word	0x080433a4

080431ac <memcpy>:
 80431ac:	440a      	add	r2, r1
 80431ae:	1e43      	subs	r3, r0, #1
 80431b0:	4291      	cmp	r1, r2
 80431b2:	d100      	bne.n	80431b6 <memcpy+0xa>
 80431b4:	4770      	bx	lr
 80431b6:	b510      	push	{r4, lr}
 80431b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80431bc:	4291      	cmp	r1, r2
 80431be:	f803 4f01 	strb.w	r4, [r3, #1]!
 80431c2:	d1f9      	bne.n	80431b8 <memcpy+0xc>
 80431c4:	bd10      	pop	{r4, pc}

080431c6 <memset>:
 80431c6:	4402      	add	r2, r0
 80431c8:	4603      	mov	r3, r0
 80431ca:	4293      	cmp	r3, r2
 80431cc:	d100      	bne.n	80431d0 <memset+0xa>
 80431ce:	4770      	bx	lr
 80431d0:	f803 1b01 	strb.w	r1, [r3], #1
 80431d4:	e7f9      	b.n	80431ca <memset+0x4>
	...

080431d8 <_init>:
 80431d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80431da:	bf00      	nop
 80431dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80431de:	bc08      	pop	{r3}
 80431e0:	469e      	mov	lr, r3
 80431e2:	4770      	bx	lr

080431e4 <_fini>:
 80431e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80431e6:	bf00      	nop
 80431e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80431ea:	bc08      	pop	{r3}
 80431ec:	469e      	mov	lr, r3
 80431ee:	4770      	bx	lr

080431f0 <__SECURE_Send_Modified_Mem_veneer>:
 80431f0:	b401      	push	{r0}
 80431f2:	4802      	ldr	r0, [pc, #8]	; (80431fc <__SECURE_Send_Modified_Mem_veneer+0xc>)
 80431f4:	4684      	mov	ip, r0
 80431f6:	bc01      	pop	{r0}
 80431f8:	4760      	bx	ip
 80431fa:	bf00      	nop
 80431fc:	0c03e011 	.word	0x0c03e011

08043200 <__SECURE_SystemCoreClockUpdate_veneer>:
 8043200:	b401      	push	{r0}
 8043202:	4802      	ldr	r0, [pc, #8]	; (804320c <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8043204:	4684      	mov	ip, r0
 8043206:	bc01      	pop	{r0}
 8043208:	4760      	bx	ip
 804320a:	bf00      	nop
 804320c:	0c03e009 	.word	0x0c03e009
