
My_Mem_to_Mem_Example_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006124  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002ac  0c006318  0c006318  00016318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0065c4  0c0065c4  0002e040  2**0
                  CONTENTS
  4 .ARM          00000008  0c0065c4  0c0065c4  000165c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0065cc  0c0065cc  0002e040  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0065cc  0c0065cc  000165cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0065d0  0c0065d0  000165d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  30000000  0c0065d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000040  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          000005a8  30000070  30000070  00030070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000618  30000618  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e040  2**0
                  CONTENTS, READONLY
 13 .debug_info   000113c4  00000000  00000000  0002e076  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002632  00000000  00000000  0003f43a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d48  00000000  00000000  00041a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c70  00000000  00000000  000427b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a11d  00000000  00000000  00043428  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010f52  00000000  00000000  0006d545  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00108c9a  00000000  00000000  0007e497  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00187131  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003650  00000000  00000000  00187184  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000070 	.word	0x30000070
 c000210:	00000000 	.word	0x00000000
 c000214:	0c006300 	.word	0x0c006300

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000074 	.word	0x30000074
 c000230:	0c006300 	.word	0x0c006300

0c000234 <cmse_check_address_range>:
 c000234:	43c3      	mvns	r3, r0
 c000236:	428b      	cmp	r3, r1
 c000238:	d36d      	bcc.n	c000316 <cmse_check_address_range+0xe2>
 c00023a:	f032 031f 	bics.w	r3, r2, #31
 c00023e:	d16a      	bne.n	c000316 <cmse_check_address_range+0xe2>
 c000240:	3901      	subs	r1, #1
 c000242:	f002 0314 	and.w	r3, r2, #20
 c000246:	4401      	add	r1, r0
 c000248:	b500      	push	{lr}
 c00024a:	ea81 0c00 	eor.w	ip, r1, r0
 c00024e:	2b14      	cmp	r3, #20
 c000250:	d80e      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000252:	e8df f003 	tbb	[pc, r3]
 c000256:	0d3f      	.short	0x0d3f
 c000258:	0d480d0d 	.word	0x0d480d0d
 c00025c:	0d0d0d0d 	.word	0x0d0d0d0d
 c000260:	0d0d0d0d 	.word	0x0d0d0d0d
 c000264:	0d510d0d 	.word	0x0d510d0d
 c000268:	0d0d      	.short	0x0d0d
 c00026a:	10          	.byte	0x10
 c00026b:	00          	.byte	0x00
 c00026c:	02db      	lsls	r3, r3, #11
 c00026e:	d400      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c000270:	2000      	movs	r0, #0
 c000272:	f85d fb04 	ldr.w	pc, [sp], #4
 c000276:	f1bc 0f1f 	cmp.w	ip, #31
 c00027a:	e840 f3c0 	ttat	r3, r0
 c00027e:	d904      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000280:	469c      	mov	ip, r3
 c000282:	e841 f3c0 	ttat	r3, r1
 c000286:	459c      	cmp	ip, r3
 c000288:	d1f2      	bne.n	c000270 <cmse_check_address_range+0x3c>
 c00028a:	f022 0214 	bic.w	r2, r2, #20
 c00028e:	3a01      	subs	r2, #1
 c000290:	2a0a      	cmp	r2, #10
 c000292:	d8ed      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000294:	a101      	add	r1, pc, #4	; (adr r1, c00029c <cmse_check_address_range+0x68>)
 c000296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00029a:	bf00      	nop
 c00029c:	0c0002cf 	.word	0x0c0002cf
 c0002a0:	0c000311 	.word	0x0c000311
 c0002a4:	0c0002c9 	.word	0x0c0002c9
 c0002a8:	0c000271 	.word	0x0c000271
 c0002ac:	0c000271 	.word	0x0c000271
 c0002b0:	0c000271 	.word	0x0c000271
 c0002b4:	0c000271 	.word	0x0c000271
 c0002b8:	0c00030b 	.word	0x0c00030b
 c0002bc:	0c0002cf 	.word	0x0c0002cf
 c0002c0:	0c00026d 	.word	0x0c00026d
 c0002c4:	0c0002c9 	.word	0x0c0002c9
 c0002c8:	029a      	lsls	r2, r3, #10
 c0002ca:	d4d2      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002cc:	e7d0      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002ce:	031a      	lsls	r2, r3, #12
 c0002d0:	d4cf      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002d2:	e7cd      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002d4:	f1bc 0f1f 	cmp.w	ip, #31
 c0002d8:	e840 f300 	tt	r3, r0
 c0002dc:	d9d5      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002de:	469c      	mov	ip, r3
 c0002e0:	e841 f300 	tt	r3, r1
 c0002e4:	e7cf      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002e6:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ea:	e840 f340 	ttt	r3, r0
 c0002ee:	d9cc      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002f0:	469c      	mov	ip, r3
 c0002f2:	e841 f340 	ttt	r3, r1
 c0002f6:	e7c6      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002f8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fc:	e840 f380 	tta	r3, r0
 c000300:	d9c3      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000302:	469c      	mov	ip, r3
 c000304:	e841 f380 	tta	r3, r1
 c000308:	e7bd      	b.n	c000286 <cmse_check_address_range+0x52>
 c00030a:	035b      	lsls	r3, r3, #13
 c00030c:	d5b0      	bpl.n	c000270 <cmse_check_address_range+0x3c>
 c00030e:	e7b0      	b.n	c000272 <cmse_check_address_range+0x3e>
 c000310:	0259      	lsls	r1, r3, #9
 c000312:	d5ae      	bpl.n	c000272 <cmse_check_address_range+0x3e>
 c000314:	e7ac      	b.n	c000270 <cmse_check_address_range+0x3c>
 c000316:	2000      	movs	r0, #0
 c000318:	4770      	bx	lr
 c00031a:	bf00      	nop

0c00031c <__gnu_cmse_nonsecure_call>:
 c00031c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000320:	4627      	mov	r7, r4
 c000322:	46a0      	mov	r8, r4
 c000324:	46a1      	mov	r9, r4
 c000326:	46a2      	mov	sl, r4
 c000328:	46a3      	mov	fp, r4
 c00032a:	46a4      	mov	ip, r4
 c00032c:	ed2d 8b10 	vpush	{d8-d15}
 c000330:	f04f 0500 	mov.w	r5, #0
 c000334:	ec45 5b18 	vmov	d8, r5, r5
 c000338:	ec45 5a19 	vmov	s18, s19, r5, r5
 c00033c:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000340:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000344:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000348:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c00034c:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000350:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000354:	eef1 5a10 	vmrs	r5, fpscr
 c000358:	f64f 7660 	movw	r6, #65376	; 0xff60
 c00035c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000360:	4035      	ands	r5, r6
 c000362:	eee1 5a10 	vmsr	fpscr, r5
 c000366:	f384 8800 	msr	CPSR_f, r4
 c00036a:	4625      	mov	r5, r4
 c00036c:	4626      	mov	r6, r4
 c00036e:	47a4      	blxns	r4
 c000370:	ecbd 8b10 	vpop	{d8-d15}
 c000374:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000378 <__aeabi_uldivmod>:
 c000378:	b953      	cbnz	r3, c000390 <__aeabi_uldivmod+0x18>
 c00037a:	b94a      	cbnz	r2, c000390 <__aeabi_uldivmod+0x18>
 c00037c:	2900      	cmp	r1, #0
 c00037e:	bf08      	it	eq
 c000380:	2800      	cmpeq	r0, #0
 c000382:	bf1c      	itt	ne
 c000384:	f04f 31ff 	movne.w	r1, #4294967295
 c000388:	f04f 30ff 	movne.w	r0, #4294967295
 c00038c:	f000 b982 	b.w	c000694 <__aeabi_idiv0>
 c000390:	f1ad 0c08 	sub.w	ip, sp, #8
 c000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000398:	f000 f806 	bl	c0003a8 <__udivmoddi4>
 c00039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0003a4:	b004      	add	sp, #16
 c0003a6:	4770      	bx	lr

0c0003a8 <__udivmoddi4>:
 c0003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0003ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0003ae:	4604      	mov	r4, r0
 c0003b0:	460f      	mov	r7, r1
 c0003b2:	2b00      	cmp	r3, #0
 c0003b4:	d148      	bne.n	c000448 <__udivmoddi4+0xa0>
 c0003b6:	428a      	cmp	r2, r1
 c0003b8:	4694      	mov	ip, r2
 c0003ba:	d961      	bls.n	c000480 <__udivmoddi4+0xd8>
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	b143      	cbz	r3, c0003d4 <__udivmoddi4+0x2c>
 c0003c2:	f1c3 0120 	rsb	r1, r3, #32
 c0003c6:	409f      	lsls	r7, r3
 c0003c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0003cc:	409c      	lsls	r4, r3
 c0003ce:	fa20 f101 	lsr.w	r1, r0, r1
 c0003d2:	430f      	orrs	r7, r1
 c0003d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c0003d8:	fa1f fe8c 	uxth.w	lr, ip
 c0003dc:	0c22      	lsrs	r2, r4, #16
 c0003de:	fbb7 f6f1 	udiv	r6, r7, r1
 c0003e2:	fb01 7716 	mls	r7, r1, r6, r7
 c0003e6:	fb06 f00e 	mul.w	r0, r6, lr
 c0003ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0003ee:	4290      	cmp	r0, r2
 c0003f0:	d908      	bls.n	c000404 <__udivmoddi4+0x5c>
 c0003f2:	eb1c 0202 	adds.w	r2, ip, r2
 c0003f6:	f106 37ff 	add.w	r7, r6, #4294967295
 c0003fa:	d202      	bcs.n	c000402 <__udivmoddi4+0x5a>
 c0003fc:	4290      	cmp	r0, r2
 c0003fe:	f200 8137 	bhi.w	c000670 <__udivmoddi4+0x2c8>
 c000402:	463e      	mov	r6, r7
 c000404:	1a12      	subs	r2, r2, r0
 c000406:	b2a4      	uxth	r4, r4
 c000408:	fbb2 f0f1 	udiv	r0, r2, r1
 c00040c:	fb01 2210 	mls	r2, r1, r0, r2
 c000410:	fb00 fe0e 	mul.w	lr, r0, lr
 c000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000418:	45a6      	cmp	lr, r4
 c00041a:	d908      	bls.n	c00042e <__udivmoddi4+0x86>
 c00041c:	eb1c 0404 	adds.w	r4, ip, r4
 c000420:	f100 32ff 	add.w	r2, r0, #4294967295
 c000424:	d202      	bcs.n	c00042c <__udivmoddi4+0x84>
 c000426:	45a6      	cmp	lr, r4
 c000428:	f200 811c 	bhi.w	c000664 <__udivmoddi4+0x2bc>
 c00042c:	4610      	mov	r0, r2
 c00042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000432:	eba4 040e 	sub.w	r4, r4, lr
 c000436:	2600      	movs	r6, #0
 c000438:	b11d      	cbz	r5, c000442 <__udivmoddi4+0x9a>
 c00043a:	40dc      	lsrs	r4, r3
 c00043c:	2300      	movs	r3, #0
 c00043e:	e9c5 4300 	strd	r4, r3, [r5]
 c000442:	4631      	mov	r1, r6
 c000444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000448:	428b      	cmp	r3, r1
 c00044a:	d909      	bls.n	c000460 <__udivmoddi4+0xb8>
 c00044c:	2d00      	cmp	r5, #0
 c00044e:	f000 80fd 	beq.w	c00064c <__udivmoddi4+0x2a4>
 c000452:	2600      	movs	r6, #0
 c000454:	e9c5 0100 	strd	r0, r1, [r5]
 c000458:	4630      	mov	r0, r6
 c00045a:	4631      	mov	r1, r6
 c00045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000460:	fab3 f683 	clz	r6, r3
 c000464:	2e00      	cmp	r6, #0
 c000466:	d14b      	bne.n	c000500 <__udivmoddi4+0x158>
 c000468:	428b      	cmp	r3, r1
 c00046a:	f0c0 80f2 	bcc.w	c000652 <__udivmoddi4+0x2aa>
 c00046e:	4282      	cmp	r2, r0
 c000470:	f240 80ef 	bls.w	c000652 <__udivmoddi4+0x2aa>
 c000474:	4630      	mov	r0, r6
 c000476:	2d00      	cmp	r5, #0
 c000478:	d0e3      	beq.n	c000442 <__udivmoddi4+0x9a>
 c00047a:	e9c5 4700 	strd	r4, r7, [r5]
 c00047e:	e7e0      	b.n	c000442 <__udivmoddi4+0x9a>
 c000480:	b902      	cbnz	r2, c000484 <__udivmoddi4+0xdc>
 c000482:	deff      	udf	#255	; 0xff
 c000484:	fab2 f382 	clz	r3, r2
 c000488:	2b00      	cmp	r3, #0
 c00048a:	f040 809d 	bne.w	c0005c8 <__udivmoddi4+0x220>
 c00048e:	1a89      	subs	r1, r1, r2
 c000490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000494:	b297      	uxth	r7, r2
 c000496:	2601      	movs	r6, #1
 c000498:	0c20      	lsrs	r0, r4, #16
 c00049a:	fbb1 f2fe 	udiv	r2, r1, lr
 c00049e:	fb0e 1112 	mls	r1, lr, r2, r1
 c0004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0004a6:	fb07 f002 	mul.w	r0, r7, r2
 c0004aa:	4288      	cmp	r0, r1
 c0004ac:	d90f      	bls.n	c0004ce <__udivmoddi4+0x126>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f102 38ff 	add.w	r8, r2, #4294967295
 c0004b6:	bf2c      	ite	cs
 c0004b8:	f04f 0901 	movcs.w	r9, #1
 c0004bc:	f04f 0900 	movcc.w	r9, #0
 c0004c0:	4288      	cmp	r0, r1
 c0004c2:	d903      	bls.n	c0004cc <__udivmoddi4+0x124>
 c0004c4:	f1b9 0f00 	cmp.w	r9, #0
 c0004c8:	f000 80cf 	beq.w	c00066a <__udivmoddi4+0x2c2>
 c0004cc:	4642      	mov	r2, r8
 c0004ce:	1a09      	subs	r1, r1, r0
 c0004d0:	b2a4      	uxth	r4, r4
 c0004d2:	fbb1 f0fe 	udiv	r0, r1, lr
 c0004d6:	fb0e 1110 	mls	r1, lr, r0, r1
 c0004da:	fb00 f707 	mul.w	r7, r0, r7
 c0004de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c0004e2:	42a7      	cmp	r7, r4
 c0004e4:	d908      	bls.n	c0004f8 <__udivmoddi4+0x150>
 c0004e6:	eb1c 0404 	adds.w	r4, ip, r4
 c0004ea:	f100 31ff 	add.w	r1, r0, #4294967295
 c0004ee:	d202      	bcs.n	c0004f6 <__udivmoddi4+0x14e>
 c0004f0:	42a7      	cmp	r7, r4
 c0004f2:	f200 80b4 	bhi.w	c00065e <__udivmoddi4+0x2b6>
 c0004f6:	4608      	mov	r0, r1
 c0004f8:	1be4      	subs	r4, r4, r7
 c0004fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0004fe:	e79b      	b.n	c000438 <__udivmoddi4+0x90>
 c000500:	f1c6 0720 	rsb	r7, r6, #32
 c000504:	40b3      	lsls	r3, r6
 c000506:	fa01 f406 	lsl.w	r4, r1, r6
 c00050a:	fa22 fc07 	lsr.w	ip, r2, r7
 c00050e:	40f9      	lsrs	r1, r7
 c000510:	40b2      	lsls	r2, r6
 c000512:	ea4c 0c03 	orr.w	ip, ip, r3
 c000516:	fa20 f307 	lsr.w	r3, r0, r7
 c00051a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00051e:	431c      	orrs	r4, r3
 c000520:	fa1f fe8c 	uxth.w	lr, ip
 c000524:	fa00 f306 	lsl.w	r3, r0, r6
 c000528:	0c20      	lsrs	r0, r4, #16
 c00052a:	fbb1 f8f9 	udiv	r8, r1, r9
 c00052e:	fb09 1118 	mls	r1, r9, r8, r1
 c000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000536:	fb08 f00e 	mul.w	r0, r8, lr
 c00053a:	4288      	cmp	r0, r1
 c00053c:	d90f      	bls.n	c00055e <__udivmoddi4+0x1b6>
 c00053e:	eb1c 0101 	adds.w	r1, ip, r1
 c000542:	f108 3aff 	add.w	sl, r8, #4294967295
 c000546:	bf2c      	ite	cs
 c000548:	f04f 0b01 	movcs.w	fp, #1
 c00054c:	f04f 0b00 	movcc.w	fp, #0
 c000550:	4288      	cmp	r0, r1
 c000552:	d903      	bls.n	c00055c <__udivmoddi4+0x1b4>
 c000554:	f1bb 0f00 	cmp.w	fp, #0
 c000558:	f000 808d 	beq.w	c000676 <__udivmoddi4+0x2ce>
 c00055c:	46d0      	mov	r8, sl
 c00055e:	1a09      	subs	r1, r1, r0
 c000560:	b2a4      	uxth	r4, r4
 c000562:	fbb1 f0f9 	udiv	r0, r1, r9
 c000566:	fb09 1110 	mls	r1, r9, r0, r1
 c00056a:	fb00 fe0e 	mul.w	lr, r0, lr
 c00056e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000572:	458e      	cmp	lr, r1
 c000574:	d907      	bls.n	c000586 <__udivmoddi4+0x1de>
 c000576:	eb1c 0101 	adds.w	r1, ip, r1
 c00057a:	f100 34ff 	add.w	r4, r0, #4294967295
 c00057e:	d201      	bcs.n	c000584 <__udivmoddi4+0x1dc>
 c000580:	458e      	cmp	lr, r1
 c000582:	d87f      	bhi.n	c000684 <__udivmoddi4+0x2dc>
 c000584:	4620      	mov	r0, r4
 c000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c00058a:	eba1 010e 	sub.w	r1, r1, lr
 c00058e:	fba0 9802 	umull	r9, r8, r0, r2
 c000592:	4541      	cmp	r1, r8
 c000594:	464c      	mov	r4, r9
 c000596:	46c6      	mov	lr, r8
 c000598:	d302      	bcc.n	c0005a0 <__udivmoddi4+0x1f8>
 c00059a:	d106      	bne.n	c0005aa <__udivmoddi4+0x202>
 c00059c:	454b      	cmp	r3, r9
 c00059e:	d204      	bcs.n	c0005aa <__udivmoddi4+0x202>
 c0005a0:	3801      	subs	r0, #1
 c0005a2:	ebb9 0402 	subs.w	r4, r9, r2
 c0005a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0005aa:	2d00      	cmp	r5, #0
 c0005ac:	d070      	beq.n	c000690 <__udivmoddi4+0x2e8>
 c0005ae:	1b1a      	subs	r2, r3, r4
 c0005b0:	eb61 010e 	sbc.w	r1, r1, lr
 c0005b4:	fa22 f306 	lsr.w	r3, r2, r6
 c0005b8:	fa01 f707 	lsl.w	r7, r1, r7
 c0005bc:	40f1      	lsrs	r1, r6
 c0005be:	2600      	movs	r6, #0
 c0005c0:	431f      	orrs	r7, r3
 c0005c2:	e9c5 7100 	strd	r7, r1, [r5]
 c0005c6:	e73c      	b.n	c000442 <__udivmoddi4+0x9a>
 c0005c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0005cc:	f1c3 0020 	rsb	r0, r3, #32
 c0005d0:	fa01 f203 	lsl.w	r2, r1, r3
 c0005d4:	fa21 f600 	lsr.w	r6, r1, r0
 c0005d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c0005dc:	fa24 f100 	lsr.w	r1, r4, r0
 c0005e0:	fa1f f78c 	uxth.w	r7, ip
 c0005e4:	409c      	lsls	r4, r3
 c0005e6:	4311      	orrs	r1, r2
 c0005e8:	fbb6 f0fe 	udiv	r0, r6, lr
 c0005ec:	0c0a      	lsrs	r2, r1, #16
 c0005ee:	fb0e 6610 	mls	r6, lr, r0, r6
 c0005f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0005f6:	fb00 f607 	mul.w	r6, r0, r7
 c0005fa:	4296      	cmp	r6, r2
 c0005fc:	d90e      	bls.n	c00061c <__udivmoddi4+0x274>
 c0005fe:	eb1c 0202 	adds.w	r2, ip, r2
 c000602:	f100 38ff 	add.w	r8, r0, #4294967295
 c000606:	bf2c      	ite	cs
 c000608:	f04f 0901 	movcs.w	r9, #1
 c00060c:	f04f 0900 	movcc.w	r9, #0
 c000610:	4296      	cmp	r6, r2
 c000612:	d902      	bls.n	c00061a <__udivmoddi4+0x272>
 c000614:	f1b9 0f00 	cmp.w	r9, #0
 c000618:	d031      	beq.n	c00067e <__udivmoddi4+0x2d6>
 c00061a:	4640      	mov	r0, r8
 c00061c:	1b92      	subs	r2, r2, r6
 c00061e:	b289      	uxth	r1, r1
 c000620:	fbb2 f6fe 	udiv	r6, r2, lr
 c000624:	fb0e 2216 	mls	r2, lr, r6, r2
 c000628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c00062c:	fb06 f207 	mul.w	r2, r6, r7
 c000630:	428a      	cmp	r2, r1
 c000632:	d907      	bls.n	c000644 <__udivmoddi4+0x29c>
 c000634:	eb1c 0101 	adds.w	r1, ip, r1
 c000638:	f106 38ff 	add.w	r8, r6, #4294967295
 c00063c:	d201      	bcs.n	c000642 <__udivmoddi4+0x29a>
 c00063e:	428a      	cmp	r2, r1
 c000640:	d823      	bhi.n	c00068a <__udivmoddi4+0x2e2>
 c000642:	4646      	mov	r6, r8
 c000644:	1a89      	subs	r1, r1, r2
 c000646:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c00064a:	e725      	b.n	c000498 <__udivmoddi4+0xf0>
 c00064c:	462e      	mov	r6, r5
 c00064e:	4628      	mov	r0, r5
 c000650:	e6f7      	b.n	c000442 <__udivmoddi4+0x9a>
 c000652:	1a84      	subs	r4, r0, r2
 c000654:	eb61 0303 	sbc.w	r3, r1, r3
 c000658:	2001      	movs	r0, #1
 c00065a:	461f      	mov	r7, r3
 c00065c:	e70b      	b.n	c000476 <__udivmoddi4+0xce>
 c00065e:	4464      	add	r4, ip
 c000660:	3802      	subs	r0, #2
 c000662:	e749      	b.n	c0004f8 <__udivmoddi4+0x150>
 c000664:	4464      	add	r4, ip
 c000666:	3802      	subs	r0, #2
 c000668:	e6e1      	b.n	c00042e <__udivmoddi4+0x86>
 c00066a:	3a02      	subs	r2, #2
 c00066c:	4461      	add	r1, ip
 c00066e:	e72e      	b.n	c0004ce <__udivmoddi4+0x126>
 c000670:	3e02      	subs	r6, #2
 c000672:	4462      	add	r2, ip
 c000674:	e6c6      	b.n	c000404 <__udivmoddi4+0x5c>
 c000676:	f1a8 0802 	sub.w	r8, r8, #2
 c00067a:	4461      	add	r1, ip
 c00067c:	e76f      	b.n	c00055e <__udivmoddi4+0x1b6>
 c00067e:	3802      	subs	r0, #2
 c000680:	4462      	add	r2, ip
 c000682:	e7cb      	b.n	c00061c <__udivmoddi4+0x274>
 c000684:	3802      	subs	r0, #2
 c000686:	4461      	add	r1, ip
 c000688:	e77d      	b.n	c000586 <__udivmoddi4+0x1de>
 c00068a:	3e02      	subs	r6, #2
 c00068c:	4461      	add	r1, ip
 c00068e:	e7d9      	b.n	c000644 <__udivmoddi4+0x29c>
 c000690:	462e      	mov	r6, r5
 c000692:	e6d6      	b.n	c000442 <__udivmoddi4+0x9a>

0c000694 <__aeabi_idiv0>:
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop

0c000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000698:	b580      	push	{r7, lr}
 c00069a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l562xx.h file's definitions. */
  /* USER CODE BEGIN 1 */
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c00069c:	4b16      	ldr	r3, [pc, #88]	; (c0006f8 <main+0x60>)
 c00069e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0006a0:	4a15      	ldr	r2, [pc, #84]	; (c0006f8 <main+0x60>)
 c0006a2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c0006a6:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0006a8:	f001 f8ed 	bl	c001886 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006ac:	f000 f876 	bl	c00079c <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006b0:	f000 f8c6 	bl	c000840 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006b4:	f000 fa7a 	bl	c000bac <MX_GPIO_Init>
  MX_DMA_Init();
 c0006b8:	f000 f9a8 	bl	c000a0c <MX_DMA_Init>
  MX_ICACHE_Init();
 c0006bc:	f000 f944 	bl	c000948 <MX_ICACHE_Init>
  MX_USART1_UART_Init();
 c0006c0:	f000 f956 	bl	c000970 <MX_USART1_UART_Init>

  /* USER CODE BEGIN 2 */

  /* DMA1 Channel3: Select Callbacks functions called after Transfer complete and Transfer error */
    HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel3, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToSecureTransferComplete);
 c0006c4:	4a0d      	ldr	r2, [pc, #52]	; (c0006fc <main+0x64>)
 c0006c6:	2100      	movs	r1, #0
 c0006c8:	480d      	ldr	r0, [pc, #52]	; (c000700 <main+0x68>)
 c0006ca:	f001 fc97 	bl	c001ffc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel3, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToSecureTransferError);
 c0006ce:	4a0d      	ldr	r2, [pc, #52]	; (c000704 <main+0x6c>)
 c0006d0:	2104      	movs	r1, #4
 c0006d2:	480b      	ldr	r0, [pc, #44]	; (c000700 <main+0x68>)
 c0006d4:	f001 fc92 	bl	c001ffc <HAL_DMA_RegisterCallback>

    HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToNonSecureTransferComplete);
 c0006d8:	4a0b      	ldr	r2, [pc, #44]	; (c000708 <main+0x70>)
 c0006da:	2100      	movs	r1, #0
 c0006dc:	480b      	ldr	r0, [pc, #44]	; (c00070c <main+0x74>)
 c0006de:	f001 fc8d 	bl	c001ffc <HAL_DMA_RegisterCallback>
    HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToNonSecureTransferError);
 c0006e2:	4a0b      	ldr	r2, [pc, #44]	; (c000710 <main+0x78>)
 c0006e4:	2104      	movs	r1, #4
 c0006e6:	4809      	ldr	r0, [pc, #36]	; (c00070c <main+0x74>)
 c0006e8:	f001 fc88 	bl	c001ffc <HAL_DMA_RegisterCallback>

    HAL_SuspendTick();
 c0006ec:	f001 f942 	bl	c001974 <HAL_SuspendTick>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0006f0:	f000 f810 	bl	c000714 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0006f4:	e7fe      	b.n	c0006f4 <main+0x5c>
 c0006f6:	bf00      	nop
 c0006f8:	e000ed00 	.word	0xe000ed00
 c0006fc:	0c0010fd 	.word	0x0c0010fd
 c000700:	30000120 	.word	0x30000120
 c000704:	0c00117d 	.word	0x0c00117d
 c000708:	0c001191 	.word	0x0c001191
 c00070c:	30000188 	.word	0x30000188
 c000710:	0c001211 	.word	0x0c001211

0c000714 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000714:	b590      	push	{r4, r7, lr}
 c000716:	b083      	sub	sp, #12
 c000718:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00071a:	4b1d      	ldr	r3, [pc, #116]	; (c000790 <NonSecure_Init+0x7c>)
 c00071c:	4a1d      	ldr	r2, [pc, #116]	; (c000794 <NonSecure_Init+0x80>)
 c00071e:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000720:	4b1c      	ldr	r3, [pc, #112]	; (c000794 <NonSecure_Init+0x80>)
 c000722:	681b      	ldr	r3, [r3, #0]
 c000724:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000726:	683b      	ldr	r3, [r7, #0]
 c000728:	f383 8888 	msr	MSP_NS, r3
}
 c00072c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00072e:	4b1a      	ldr	r3, [pc, #104]	; (c000798 <NonSecure_Init+0x84>)
 c000730:	681b      	ldr	r3, [r3, #0]
 c000732:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000734:	687b      	ldr	r3, [r7, #4]
 c000736:	461c      	mov	r4, r3
 c000738:	0864      	lsrs	r4, r4, #1
 c00073a:	0064      	lsls	r4, r4, #1
 c00073c:	4620      	mov	r0, r4
 c00073e:	4621      	mov	r1, r4
 c000740:	4622      	mov	r2, r4
 c000742:	4623      	mov	r3, r4
 c000744:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000748:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00074c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000750:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000754:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000758:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00075c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000760:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000764:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000768:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00076c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000770:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000774:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000778:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00077c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000780:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000784:	f7ff fdca 	bl	c00031c <__gnu_cmse_nonsecure_call>
}
 c000788:	bf00      	nop
 c00078a:	370c      	adds	r7, #12
 c00078c:	46bd      	mov	sp, r7
 c00078e:	bd90      	pop	{r4, r7, pc}
 c000790:	e002ed00 	.word	0xe002ed00
 c000794:	08040000 	.word	0x08040000
 c000798:	08040004 	.word	0x08040004

0c00079c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c00079c:	b580      	push	{r7, lr}
 c00079e:	b098      	sub	sp, #96	; 0x60
 c0007a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0007a2:	f107 0318 	add.w	r3, r7, #24
 c0007a6:	2248      	movs	r2, #72	; 0x48
 c0007a8:	2100      	movs	r1, #0
 c0007aa:	4618      	mov	r0, r3
 c0007ac:	f004 fe04 	bl	c0053b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0007b0:	1d3b      	adds	r3, r7, #4
 c0007b2:	2200      	movs	r2, #0
 c0007b4:	601a      	str	r2, [r3, #0]
 c0007b6:	605a      	str	r2, [r3, #4]
 c0007b8:	609a      	str	r2, [r3, #8]
 c0007ba:	60da      	str	r2, [r3, #12]
 c0007bc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0007be:	2000      	movs	r0, #0
 c0007c0:	f002 f978 	bl	c002ab4 <HAL_PWREx_ControlVoltageScaling>
 c0007c4:	4603      	mov	r3, r0
 c0007c6:	2b00      	cmp	r3, #0
 c0007c8:	d001      	beq.n	c0007ce <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0007ca:	f000 fa37 	bl	c000c3c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0007ce:	2310      	movs	r3, #16
 c0007d0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0007d2:	2301      	movs	r3, #1
 c0007d4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0007d6:	2300      	movs	r3, #0
 c0007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0007da:	23b0      	movs	r3, #176	; 0xb0
 c0007dc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0007de:	2302      	movs	r3, #2
 c0007e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0007e2:	2301      	movs	r3, #1
 c0007e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0007e6:	230c      	movs	r3, #12
 c0007e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0007ea:	2337      	movs	r3, #55	; 0x37
 c0007ec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0007ee:	2307      	movs	r3, #7
 c0007f0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0007f2:	2302      	movs	r3, #2
 c0007f4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0007f6:	2302      	movs	r3, #2
 c0007f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0007fa:	f107 0318 	add.w	r3, r7, #24
 c0007fe:	4618      	mov	r0, r3
 c000800:	f002 f9e8 	bl	c002bd4 <HAL_RCC_OscConfig>
 c000804:	4603      	mov	r3, r0
 c000806:	2b00      	cmp	r3, #0
 c000808:	d001      	beq.n	c00080e <SystemClock_Config+0x72>
  {
    Error_Handler();
 c00080a:	f000 fa17 	bl	c000c3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c00080e:	230f      	movs	r3, #15
 c000810:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000812:	2303      	movs	r3, #3
 c000814:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c000816:	2300      	movs	r3, #0
 c000818:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c00081a:	2300      	movs	r3, #0
 c00081c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c00081e:	2300      	movs	r3, #0
 c000820:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000822:	1d3b      	adds	r3, r7, #4
 c000824:	2105      	movs	r1, #5
 c000826:	4618      	mov	r0, r3
 c000828:	f002 feaa 	bl	c003580 <HAL_RCC_ClockConfig>
 c00082c:	4603      	mov	r3, r0
 c00082e:	2b00      	cmp	r3, #0
 c000830:	d001      	beq.n	c000836 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c000832:	f000 fa03 	bl	c000c3c <Error_Handler>
  }
}
 c000836:	bf00      	nop
 c000838:	3760      	adds	r7, #96	; 0x60
 c00083a:	46bd      	mov	sp, r7
 c00083c:	bd80      	pop	{r7, pc}
	...

0c000840 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000840:	b580      	push	{r7, lr}
 c000842:	b09c      	sub	sp, #112	; 0x70
 c000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000846:	1d3b      	adds	r3, r7, #4
 c000848:	226c      	movs	r2, #108	; 0x6c
 c00084a:	2100      	movs	r1, #0
 c00084c:	4618      	mov	r0, r3
 c00084e:	f004 fdb3 	bl	c0053b8 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000852:	f240 3101 	movw	r1, #769	; 0x301
 c000856:	483a      	ldr	r0, [pc, #232]	; (c000940 <MX_GTZC_S_Init+0x100>)
 c000858:	f001 ff04 	bl	c002664 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00085c:	4603      	mov	r3, r0
 c00085e:	2b00      	cmp	r3, #0
 c000860:	d001      	beq.n	c000866 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c000862:	f000 f9eb 	bl	c000c3c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000866:	2300      	movs	r3, #0
 c000868:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00086a:	2300      	movs	r3, #0
 c00086c:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00086e:	f04f 33ff 	mov.w	r3, #4294967295
 c000872:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000874:	f04f 33ff 	mov.w	r3, #4294967295
 c000878:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00087a:	f04f 33ff 	mov.w	r3, #4294967295
 c00087e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000880:	f04f 33ff 	mov.w	r3, #4294967295
 c000884:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000886:	f04f 33ff 	mov.w	r3, #4294967295
 c00088a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c00088c:	f04f 33ff 	mov.w	r3, #4294967295
 c000890:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000892:	f04f 33ff 	mov.w	r3, #4294967295
 c000896:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000898:	f04f 33ff 	mov.w	r3, #4294967295
 c00089c:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00089e:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0008a4:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a8:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0008aa:	f04f 33ff 	mov.w	r3, #4294967295
 c0008ae:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0008b0:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b4:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0008b6:	2300      	movs	r3, #0
 c0008b8:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0008ba:	2300      	movs	r3, #0
 c0008bc:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0008be:	2300      	movs	r3, #0
 c0008c0:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0008c2:	2300      	movs	r3, #0
 c0008c4:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0008c6:	2300      	movs	r3, #0
 c0008c8:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0008ca:	2300      	movs	r3, #0
 c0008cc:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0008ce:	2300      	movs	r3, #0
 c0008d0:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0008d2:	2300      	movs	r3, #0
 c0008d4:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0008d6:	2300      	movs	r3, #0
 c0008d8:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0008da:	2300      	movs	r3, #0
 c0008dc:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0008de:	2300      	movs	r3, #0
 c0008e0:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0008e2:	2300      	movs	r3, #0
 c0008e4:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0008e6:	2300      	movs	r3, #0
 c0008e8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0008ea:	1d3b      	adds	r3, r7, #4
 c0008ec:	4619      	mov	r1, r3
 c0008ee:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0008f2:	f001 ff8f 	bl	c002814 <HAL_GTZC_MPCBB_ConfigMem>
 c0008f6:	4603      	mov	r3, r0
 c0008f8:	2b00      	cmp	r3, #0
 c0008fa:	d001      	beq.n	c000900 <MX_GTZC_S_Init+0xc0>
  {
    Error_Handler();
 c0008fc:	f000 f99e 	bl	c000c3c <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000900:	2300      	movs	r3, #0
 c000902:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000904:	2300      	movs	r3, #0
 c000906:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000908:	2300      	movs	r3, #0
 c00090a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c00090c:	2300      	movs	r3, #0
 c00090e:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000910:	2300      	movs	r3, #0
 c000912:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000914:	2300      	movs	r3, #0
 c000916:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000918:	2300      	movs	r3, #0
 c00091a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c00091c:	2300      	movs	r3, #0
 c00091e:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000920:	2300      	movs	r3, #0
 c000922:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000924:	1d3b      	adds	r3, r7, #4
 c000926:	4619      	mov	r1, r3
 c000928:	4806      	ldr	r0, [pc, #24]	; (c000944 <MX_GTZC_S_Init+0x104>)
 c00092a:	f001 ff73 	bl	c002814 <HAL_GTZC_MPCBB_ConfigMem>
 c00092e:	4603      	mov	r3, r0
 c000930:	2b00      	cmp	r3, #0
 c000932:	d001      	beq.n	c000938 <MX_GTZC_S_Init+0xf8>
  {
    Error_Handler();
 c000934:	f000 f982 	bl	c000c3c <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000938:	bf00      	nop
 c00093a:	3770      	adds	r7, #112	; 0x70
 c00093c:	46bd      	mov	sp, r7
 c00093e:	bd80      	pop	{r7, pc}
 c000940:	10000001 	.word	0x10000001
 c000944:	30030000 	.word	0x30030000

0c000948 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000948:	b580      	push	{r7, lr}
 c00094a:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c00094c:	2000      	movs	r0, #0
 c00094e:	f002 f873 	bl	c002a38 <HAL_ICACHE_ConfigAssociativityMode>
 c000952:	4603      	mov	r3, r0
 c000954:	2b00      	cmp	r3, #0
 c000956:	d001      	beq.n	c00095c <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000958:	f000 f970 	bl	c000c3c <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c00095c:	f002 f88c 	bl	c002a78 <HAL_ICACHE_Enable>
 c000960:	4603      	mov	r3, r0
 c000962:	2b00      	cmp	r3, #0
 c000964:	d001      	beq.n	c00096a <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c000966:	f000 f969 	bl	c000c3c <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00096a:	bf00      	nop
 c00096c:	bd80      	pop	{r7, pc}
	...

0c000970 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c000970:	b580      	push	{r7, lr}
 c000972:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c000974:	4b23      	ldr	r3, [pc, #140]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c000976:	4a24      	ldr	r2, [pc, #144]	; (c000a08 <MX_USART1_UART_Init+0x98>)
 c000978:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c00097a:	4b22      	ldr	r3, [pc, #136]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c00097c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000980:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000982:	4b20      	ldr	r3, [pc, #128]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c000984:	2200      	movs	r2, #0
 c000986:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000988:	4b1e      	ldr	r3, [pc, #120]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c00098a:	2200      	movs	r2, #0
 c00098c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c00098e:	4b1d      	ldr	r3, [pc, #116]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c000990:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000994:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000996:	4b1b      	ldr	r3, [pc, #108]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c000998:	220c      	movs	r2, #12
 c00099a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c00099c:	4b19      	ldr	r3, [pc, #100]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c00099e:	2200      	movs	r2, #0
 c0009a0:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c0009a2:	4b18      	ldr	r3, [pc, #96]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009a4:	2200      	movs	r2, #0
 c0009a6:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c0009a8:	4b16      	ldr	r3, [pc, #88]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009aa:	2200      	movs	r2, #0
 c0009ac:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c0009ae:	4b15      	ldr	r3, [pc, #84]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009b0:	2200      	movs	r2, #0
 c0009b2:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c0009b4:	4b13      	ldr	r3, [pc, #76]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009b6:	2200      	movs	r2, #0
 c0009b8:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c0009ba:	4812      	ldr	r0, [pc, #72]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009bc:	f003 fdda 	bl	c004574 <HAL_UART_Init>
 c0009c0:	4603      	mov	r3, r0
 c0009c2:	2b00      	cmp	r3, #0
 c0009c4:	d001      	beq.n	c0009ca <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c0009c6:	f000 f939 	bl	c000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0009ca:	2100      	movs	r1, #0
 c0009cc:	480d      	ldr	r0, [pc, #52]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009ce:	f004 fbff 	bl	c0051d0 <HAL_UARTEx_SetTxFifoThreshold>
 c0009d2:	4603      	mov	r3, r0
 c0009d4:	2b00      	cmp	r3, #0
 c0009d6:	d001      	beq.n	c0009dc <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c0009d8:	f000 f930 	bl	c000c3c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c0009dc:	2100      	movs	r1, #0
 c0009de:	4809      	ldr	r0, [pc, #36]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009e0:	f004 fc34 	bl	c00524c <HAL_UARTEx_SetRxFifoThreshold>
 c0009e4:	4603      	mov	r3, r0
 c0009e6:	2b00      	cmp	r3, #0
 c0009e8:	d001      	beq.n	c0009ee <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c0009ea:	f000 f927 	bl	c000c3c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c0009ee:	4805      	ldr	r0, [pc, #20]	; (c000a04 <MX_USART1_UART_Init+0x94>)
 c0009f0:	f004 fbb5 	bl	c00515e <HAL_UARTEx_DisableFifoMode>
 c0009f4:	4603      	mov	r3, r0
 c0009f6:	2b00      	cmp	r3, #0
 c0009f8:	d001      	beq.n	c0009fe <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c0009fa:	f000 f91f 	bl	c000c3c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c0009fe:	bf00      	nop
 c000a00:	bd80      	pop	{r7, pc}
 c000a02:	bf00      	nop
 c000a04:	3000008c 	.word	0x3000008c
 c000a08:	50013800 	.word	0x50013800

0c000a0c <MX_DMA_Init>:
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel2
  *   hdma_memtomem_dma1_channel3
  */
static void MX_DMA_Init(void)
{
 c000a0c:	b580      	push	{r7, lr}
 c000a0e:	b082      	sub	sp, #8
 c000a10:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000a12:	4b61      	ldr	r3, [pc, #388]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a16:	4a60      	ldr	r2, [pc, #384]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a18:	f043 0304 	orr.w	r3, r3, #4
 c000a1c:	6493      	str	r3, [r2, #72]	; 0x48
 c000a1e:	4b5e      	ldr	r3, [pc, #376]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a22:	f003 0304 	and.w	r3, r3, #4
 c000a26:	607b      	str	r3, [r7, #4]
 c000a28:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c000a2a:	4b5b      	ldr	r3, [pc, #364]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a2e:	4a5a      	ldr	r2, [pc, #360]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a30:	f043 0301 	orr.w	r3, r3, #1
 c000a34:	6493      	str	r3, [r2, #72]	; 0x48
 c000a36:	4b58      	ldr	r3, [pc, #352]	; (c000b98 <MX_DMA_Init+0x18c>)
 c000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a3a:	f003 0301 	and.w	r3, r3, #1
 c000a3e:	603b      	str	r3, [r7, #0]
 c000a40:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel3 on DMA1_Channel3 */
  hdma_memtomem_dma1_channel3.Instance = DMA1_Channel3;
 c000a42:	4b56      	ldr	r3, [pc, #344]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a44:	4a56      	ldr	r2, [pc, #344]	; (c000ba0 <MX_DMA_Init+0x194>)
 c000a46:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel3.Init.Request = DMA_REQUEST_MEM2MEM;
 c000a48:	4b54      	ldr	r3, [pc, #336]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a4a:	2200      	movs	r2, #0
 c000a4c:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel3.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000a4e:	4b53      	ldr	r3, [pc, #332]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a50:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000a54:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel3.Init.PeriphInc = DMA_PINC_ENABLE;
 c000a56:	4b51      	ldr	r3, [pc, #324]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a58:	2240      	movs	r2, #64	; 0x40
 c000a5a:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel3.Init.MemInc = DMA_MINC_ENABLE;
 c000a5c:	4b4f      	ldr	r3, [pc, #316]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a5e:	2280      	movs	r2, #128	; 0x80
 c000a60:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c000a62:	4b4e      	ldr	r3, [pc, #312]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a64:	f44f 7200 	mov.w	r2, #512	; 0x200
 c000a68:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c000a6a:	4b4c      	ldr	r3, [pc, #304]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c000a70:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel3.Init.Mode = DMA_NORMAL;
 c000a72:	4b4a      	ldr	r3, [pc, #296]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a74:	2200      	movs	r2, #0
 c000a76:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel3.Init.Priority = DMA_PRIORITY_LOW;
 c000a78:	4b48      	ldr	r3, [pc, #288]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a7a:	2200      	movs	r2, #0
 c000a7c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel3) != HAL_OK)
 c000a7e:	4847      	ldr	r0, [pc, #284]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a80:	f001 f898 	bl	c001bb4 <HAL_DMA_Init>
 c000a84:	4603      	mov	r3, r0
 c000a86:	2b00      	cmp	r3, #0
 c000a88:	d001      	beq.n	c000a8e <MX_DMA_Init+0x82>
  {
    Error_Handler( );
 c000a8a:	f000 f8d7 	bl	c000c3c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel3, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000a8e:	2110      	movs	r1, #16
 c000a90:	4842      	ldr	r0, [pc, #264]	; (c000b9c <MX_DMA_Init+0x190>)
 c000a92:	f001 fb07 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000a96:	4603      	mov	r3, r0
 c000a98:	2b00      	cmp	r3, #0
 c000a9a:	d001      	beq.n	c000aa0 <MX_DMA_Init+0x94>
  {
    Error_Handler( );
 c000a9c:	f000 f8ce 	bl	c000c3c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel3, DMA_CHANNEL_SEC) != HAL_OK)
 c000aa0:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000aa4:	483d      	ldr	r0, [pc, #244]	; (c000b9c <MX_DMA_Init+0x190>)
 c000aa6:	f001 fafd 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000aaa:	4603      	mov	r3, r0
 c000aac:	2b00      	cmp	r3, #0
 c000aae:	d001      	beq.n	c000ab4 <MX_DMA_Init+0xa8>
  {
    Error_Handler( );
 c000ab0:	f000 f8c4 	bl	c000c3c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel3, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000ab4:	2104      	movs	r1, #4
 c000ab6:	4839      	ldr	r0, [pc, #228]	; (c000b9c <MX_DMA_Init+0x190>)
 c000ab8:	f001 faf4 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000abc:	4603      	mov	r3, r0
 c000abe:	2b00      	cmp	r3, #0
 c000ac0:	d001      	beq.n	c000ac6 <MX_DMA_Init+0xba>
  {
    Error_Handler( );
 c000ac2:	f000 f8bb 	bl	c000c3c <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel3, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000ac6:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000aca:	4834      	ldr	r0, [pc, #208]	; (c000b9c <MX_DMA_Init+0x190>)
 c000acc:	f001 faea 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000ad0:	4603      	mov	r3, r0
 c000ad2:	2b00      	cmp	r3, #0
 c000ad4:	d001      	beq.n	c000ada <MX_DMA_Init+0xce>
  {
    Error_Handler( );
 c000ad6:	f000 f8b1 	bl	c000c3c <Error_Handler>
  }


   hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 c000ada:	4b32      	ldr	r3, [pc, #200]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000adc:	4a32      	ldr	r2, [pc, #200]	; (c000ba8 <MX_DMA_Init+0x19c>)
 c000ade:	601a      	str	r2, [r3, #0]
   hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 c000ae0:	4b30      	ldr	r3, [pc, #192]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000ae2:	2200      	movs	r2, #0
 c000ae4:	605a      	str	r2, [r3, #4]
   hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000ae6:	4b2f      	ldr	r3, [pc, #188]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000ae8:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000aec:	609a      	str	r2, [r3, #8]
   hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 c000aee:	4b2d      	ldr	r3, [pc, #180]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000af0:	2240      	movs	r2, #64	; 0x40
 c000af2:	60da      	str	r2, [r3, #12]
   hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 c000af4:	4b2b      	ldr	r3, [pc, #172]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000af6:	2280      	movs	r2, #128	; 0x80
 c000af8:	611a      	str	r2, [r3, #16]
   hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 c000afa:	4b2a      	ldr	r3, [pc, #168]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000afc:	f44f 7200 	mov.w	r2, #512	; 0x200
 c000b00:	615a      	str	r2, [r3, #20]
   hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 c000b02:	4b28      	ldr	r3, [pc, #160]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c000b08:	619a      	str	r2, [r3, #24]
   hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 c000b0a:	4b26      	ldr	r3, [pc, #152]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b0c:	2200      	movs	r2, #0
 c000b0e:	61da      	str	r2, [r3, #28]
   hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 c000b10:	4b24      	ldr	r3, [pc, #144]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b12:	2200      	movs	r2, #0
 c000b14:	621a      	str	r2, [r3, #32]
   if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 c000b16:	4823      	ldr	r0, [pc, #140]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b18:	f001 f84c 	bl	c001bb4 <HAL_DMA_Init>
 c000b1c:	4603      	mov	r3, r0
 c000b1e:	2b00      	cmp	r3, #0
 c000b20:	d001      	beq.n	c000b26 <MX_DMA_Init+0x11a>
   {
     Error_Handler( );
 c000b22:	f000 f88b 	bl	c000c3c <Error_Handler>
   }

   /*  */
   if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b26:	2110      	movs	r1, #16
 c000b28:	481e      	ldr	r0, [pc, #120]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b2a:	f001 fabb 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000b2e:	4603      	mov	r3, r0
 c000b30:	2b00      	cmp	r3, #0
 c000b32:	d001      	beq.n	c000b38 <MX_DMA_Init+0x12c>
   {
     Error_Handler( );
 c000b34:	f000 f882 	bl	c000c3c <Error_Handler>
   }

   /*  */
   if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_SEC) != HAL_OK)
 c000b38:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000b3c:	4819      	ldr	r0, [pc, #100]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b3e:	f001 fab1 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000b42:	4603      	mov	r3, r0
 c000b44:	2b00      	cmp	r3, #0
 c000b46:	d001      	beq.n	c000b4c <MX_DMA_Init+0x140>
   {
     Error_Handler( );
 c000b48:	f000 f878 	bl	c000c3c <Error_Handler>
   }

   /*  */
   if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000b4c:	2104      	movs	r1, #4
 c000b4e:	4815      	ldr	r0, [pc, #84]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b50:	f001 faa8 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000b54:	4603      	mov	r3, r0
 c000b56:	2b00      	cmp	r3, #0
 c000b58:	d001      	beq.n	c000b5e <MX_DMA_Init+0x152>
   {
     Error_Handler( );
 c000b5a:	f000 f86f 	bl	c000c3c <Error_Handler>
   }

   /*  */
   if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_DEST_NSEC) != HAL_OK)
 c000b5e:	2108      	movs	r1, #8
 c000b60:	4810      	ldr	r0, [pc, #64]	; (c000ba4 <MX_DMA_Init+0x198>)
 c000b62:	f001 fa9f 	bl	c0020a4 <HAL_DMA_ConfigChannelAttributes>
 c000b66:	4603      	mov	r3, r0
 c000b68:	2b00      	cmp	r3, #0
 c000b6a:	d001      	beq.n	c000b70 <MX_DMA_Init+0x164>
   {
     Error_Handler( );
 c000b6c:	f000 f866 	bl	c000c3c <Error_Handler>
   }

   /* DMA1_Channel2_IRQn interrupt configuration */
     HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 c000b70:	2200      	movs	r2, #0
 c000b72:	2100      	movs	r1, #0
 c000b74:	201e      	movs	r0, #30
 c000b76:	f000 ffe8 	bl	c001b4a <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 c000b7a:	201e      	movs	r0, #30
 c000b7c:	f000 ffff 	bl	c001b7e <HAL_NVIC_EnableIRQ>

	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 c000b80:	2200      	movs	r2, #0
 c000b82:	2100      	movs	r1, #0
 c000b84:	201f      	movs	r0, #31
 c000b86:	f000 ffe0 	bl	c001b4a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 c000b8a:	201f      	movs	r0, #31
 c000b8c:	f000 fff7 	bl	c001b7e <HAL_NVIC_EnableIRQ>

}
 c000b90:	bf00      	nop
 c000b92:	3708      	adds	r7, #8
 c000b94:	46bd      	mov	sp, r7
 c000b96:	bd80      	pop	{r7, pc}
 c000b98:	50021000 	.word	0x50021000
 c000b9c:	30000120 	.word	0x30000120
 c000ba0:	50020030 	.word	0x50020030
 c000ba4:	30000188 	.word	0x30000188
 c000ba8:	5002001c 	.word	0x5002001c

0c000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000bac:	b580      	push	{r7, lr}
 c000bae:	b084      	sub	sp, #16
 c000bb0:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000bb2:	4b17      	ldr	r3, [pc, #92]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bb6:	4a16      	ldr	r2, [pc, #88]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bb8:	f043 0304 	orr.w	r3, r3, #4
 c000bbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000bbe:	4b14      	ldr	r3, [pc, #80]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bc2:	f003 0304 	and.w	r3, r3, #4
 c000bc6:	60fb      	str	r3, [r7, #12]
 c000bc8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000bca:	4b11      	ldr	r3, [pc, #68]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bce:	4a10      	ldr	r2, [pc, #64]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bd0:	f043 0302 	orr.w	r3, r3, #2
 c000bd4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000bd6:	4b0e      	ldr	r3, [pc, #56]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bda:	f003 0302 	and.w	r3, r3, #2
 c000bde:	60bb      	str	r3, [r7, #8]
 c000be0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000be2:	4b0b      	ldr	r3, [pc, #44]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000be4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000be6:	4a0a      	ldr	r2, [pc, #40]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000be8:	f043 0301 	orr.w	r3, r3, #1
 c000bec:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000bee:	4b08      	ldr	r3, [pc, #32]	; (c000c10 <MX_GPIO_Init+0x64>)
 c000bf0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000bf2:	f003 0301 	and.w	r3, r3, #1
 c000bf6:	607b      	str	r3, [r7, #4]
 c000bf8:	687b      	ldr	r3, [r7, #4]

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c000bfa:	2200      	movs	r2, #0
 c000bfc:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000c00:	4804      	ldr	r0, [pc, #16]	; (c000c14 <MX_GPIO_Init+0x68>)
 c000c02:	f001 fcf7 	bl	c0025f4 <HAL_GPIO_ConfigPinAttributes>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000c06:	bf00      	nop
 c000c08:	3710      	adds	r7, #16
 c000c0a:	46bd      	mov	sp, r7
 c000c0c:	bd80      	pop	{r7, pc}
 c000c0e:	bf00      	nop
 c000c10:	50021000 	.word	0x50021000
 c000c14:	52020800 	.word	0x52020800

0c000c18 <__io_putchar>:

/* USER CODE BEGIN 4 */

/* USER CODE BEGIN 4 */
PUTCHAR_PROTOTYPE
{
 c000c18:	b580      	push	{r7, lr}
 c000c1a:	b082      	sub	sp, #8
 c000c1c:	af00      	add	r7, sp, #0
 c000c1e:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000c20:	1d39      	adds	r1, r7, #4
 c000c22:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000c26:	2201      	movs	r2, #1
 c000c28:	4803      	ldr	r0, [pc, #12]	; (c000c38 <__io_putchar+0x20>)
 c000c2a:	f003 fcf3 	bl	c004614 <HAL_UART_Transmit>

  return ch;
 c000c2e:	687b      	ldr	r3, [r7, #4]
}
 c000c30:	4618      	mov	r0, r3
 c000c32:	3708      	adds	r7, #8
 c000c34:	46bd      	mov	sp, r7
 c000c36:	bd80      	pop	{r7, pc}
 c000c38:	3000008c 	.word	0x3000008c

0c000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000c3c:	b480      	push	{r7}
 c000c3e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000c40:	b672      	cpsid	i
}
 c000c42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000c44:	e7fe      	b.n	c000c44 <Error_Handler+0x8>
	...

0c000c48 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>:
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_DMA_Fetch_NonSecure_Mem(uint32_t *nsc_mem_buffer,
                                                         uint32_t Size,
                                                         void *func)
{
 c000c48:	b580      	push	{r7, lr}
 c000c4a:	b086      	sub	sp, #24
 c000c4c:	af00      	add	r7, sp, #0
 c000c4e:	60f8      	str	r0, [r7, #12]
 c000c50:	60b9      	str	r1, [r7, #8]
 c000c52:	607a      	str	r2, [r7, #4]
  ErrorStatus  ret = ERROR;
 c000c54:	2301      	movs	r3, #1
 c000c56:	75fb      	strb	r3, [r7, #23]

  /* Check that the address range in non-secure */
   if (cmse_check_address_range(nsc_mem_buffer, Size * sizeof(uint32_t), CMSE_NONSECURE))
 c000c58:	68bb      	ldr	r3, [r7, #8]
 c000c5a:	009b      	lsls	r3, r3, #2
 c000c5c:	2212      	movs	r2, #18
 c000c5e:	4619      	mov	r1, r3
 c000c60:	68f8      	ldr	r0, [r7, #12]
 c000c62:	f7ff fae7 	bl	c000234 <cmse_check_address_range>
 c000c66:	4603      	mov	r3, r0
 c000c68:	2b00      	cmp	r3, #0
 c000c6a:	d012      	beq.n	c000c92 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
   {
	   //if so, start the transfer
	   /* Save callback function */
	    pNonSecureToSecureTransferCompleteCallback = func;
 c000c6c:	4a25      	ldr	r2, [pc, #148]	; (c000d04 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xbc>)
 c000c6e:	687b      	ldr	r3, [r7, #4]
 c000c70:	6013      	str	r3, [r2, #0]
	    //start the DMA transfer
	    if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel3,
 c000c72:	68f9      	ldr	r1, [r7, #12]
 c000c74:	4a24      	ldr	r2, [pc, #144]	; (c000d08 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc0>)
 c000c76:	f44f 7380 	mov.w	r3, #256	; 0x100
 c000c7a:	4824      	ldr	r0, [pc, #144]	; (c000d0c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc4>)
 c000c7c:	f001 f842 	bl	c001d04 <HAL_DMA_Start_IT>
 c000c80:	4603      	mov	r3, r0
 c000c82:	2b00      	cmp	r3, #0
 c000c84:	d102      	bne.n	c000c8c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x44>
	                             (uint32_t)nsc_mem_buffer,
	                             (uint32_t)&SEC_Mem_Buffer,
	                             BUFFER_SIZE) == HAL_OK)
		{
		  /* Transfer started */
		  ret = SUCCESS;
 c000c86:	2300      	movs	r3, #0
 c000c88:	75fb      	strb	r3, [r7, #23]
 c000c8a:	e002      	b.n	c000c92 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
		}else{
			printf("transfer was not able to start.\n\r");
 c000c8c:	4820      	ldr	r0, [pc, #128]	; (c000d10 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc8>)
 c000c8e:	f004 fb9b 	bl	c0053c8 <iprintf>
		}

   }

  return ret;
 c000c92:	7dfb      	ldrb	r3, [r7, #23]
}
 c000c94:	4618      	mov	r0, r3
 c000c96:	3718      	adds	r7, #24
 c000c98:	46bd      	mov	sp, r7
 c000c9a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000c9e:	4671      	mov	r1, lr
 c000ca0:	4672      	mov	r2, lr
 c000ca2:	4673      	mov	r3, lr
 c000ca4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000ca8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000cac:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000cb0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000cb4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000cb8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000cbc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000cc0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000cc4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000cc8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000ccc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000cd0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000cd4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000cd8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000cdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ce0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000ce4:	f38e 8c00 	msr	CPSR_fs, lr
 c000ce8:	b410      	push	{r4}
 c000cea:	eef1 ca10 	vmrs	ip, fpscr
 c000cee:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000cf2:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000cf6:	ea0c 0c04 	and.w	ip, ip, r4
 c000cfa:	eee1 ca10 	vmsr	fpscr, ip
 c000cfe:	bc10      	pop	{r4}
 c000d00:	46f4      	mov	ip, lr
 c000d02:	4774      	bxns	lr
 c000d04:	300005f8 	.word	0x300005f8
 c000d08:	300001f0 	.word	0x300001f0
 c000d0c:	30000120 	.word	0x30000120
 c000d10:	0c006318 	.word	0x0c006318

0c000d14 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer>:


CMSE_NS_ENTRY ErrorStatus SECURE_DMA_NonSecure_Mem_Transfer(uint32_t *src_buffer, uint32_t *dest_buffer, uint32_t size, void* func){
 c000d14:	b580      	push	{r7, lr}
 c000d16:	b086      	sub	sp, #24
 c000d18:	af00      	add	r7, sp, #0
 c000d1a:	60f8      	str	r0, [r7, #12]
 c000d1c:	60b9      	str	r1, [r7, #8]
 c000d1e:	607a      	str	r2, [r7, #4]
 c000d20:	603b      	str	r3, [r7, #0]
	ErrorStatus ret = ERROR;
 c000d22:	2301      	movs	r3, #1
 c000d24:	75fb      	strb	r3, [r7, #23]

	 if (cmse_check_address_range(src_buffer, size * sizeof(uint32_t), CMSE_NONSECURE) && cmse_check_address_range(dest_buffer, size * sizeof(uint32_t), CMSE_NONSECURE)){
 c000d26:	687b      	ldr	r3, [r7, #4]
 c000d28:	009b      	lsls	r3, r3, #2
 c000d2a:	2212      	movs	r2, #18
 c000d2c:	4619      	mov	r1, r3
 c000d2e:	68f8      	ldr	r0, [r7, #12]
 c000d30:	f7ff fa80 	bl	c000234 <cmse_check_address_range>
 c000d34:	4603      	mov	r3, r0
 c000d36:	2b00      	cmp	r3, #0
 c000d38:	d01d      	beq.n	c000d76 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x62>
 c000d3a:	687b      	ldr	r3, [r7, #4]
 c000d3c:	009b      	lsls	r3, r3, #2
 c000d3e:	2212      	movs	r2, #18
 c000d40:	4619      	mov	r1, r3
 c000d42:	68b8      	ldr	r0, [r7, #8]
 c000d44:	f7ff fa76 	bl	c000234 <cmse_check_address_range>
 c000d48:	4603      	mov	r3, r0
 c000d4a:	2b00      	cmp	r3, #0
 c000d4c:	d013      	beq.n	c000d76 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x62>
		 	 //if so, start the transfer
		   /* Save callback function */
			pNonSecureToNonSecureTransferCompleteCallback = func;
 c000d4e:	4a28      	ldr	r2, [pc, #160]	; (c000df0 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xdc>)
 c000d50:	683b      	ldr	r3, [r7, #0]
 c000d52:	6013      	str	r3, [r2, #0]
			//start the DMA transfer
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c000d54:	68f9      	ldr	r1, [r7, #12]
 c000d56:	68ba      	ldr	r2, [r7, #8]
 c000d58:	f44f 7380 	mov.w	r3, #256	; 0x100
 c000d5c:	4825      	ldr	r0, [pc, #148]	; (c000df4 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe0>)
 c000d5e:	f000 ffd1 	bl	c001d04 <HAL_DMA_Start_IT>
 c000d62:	4603      	mov	r3, r0
 c000d64:	2b00      	cmp	r3, #0
 c000d66:	d102      	bne.n	c000d6e <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x5a>
									 (uint32_t)src_buffer,
									 (uint32_t)dest_buffer,
									 BUFFER_SIZE) == HAL_OK)
			{
			  /* Transfer started */
			  ret = SUCCESS;
 c000d68:	2300      	movs	r3, #0
 c000d6a:	75fb      	strb	r3, [r7, #23]
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c000d6c:	e006      	b.n	c000d7c <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x68>
			}else{
				printf("transfer was not able to start.\n\r");
 c000d6e:	4822      	ldr	r0, [pc, #136]	; (c000df8 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe4>)
 c000d70:	f004 fb2a 	bl	c0053c8 <iprintf>
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c000d74:	e002      	b.n	c000d7c <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x68>
			}
	 }else{
		 printf("Error: One or both of the buffers supplied are not in non-secure memory range.\n\r");
 c000d76:	4821      	ldr	r0, [pc, #132]	; (c000dfc <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe8>)
 c000d78:	f004 fb26 	bl	c0053c8 <iprintf>
	 }

	 return ret;
 c000d7c:	7dfb      	ldrb	r3, [r7, #23]
}
 c000d7e:	4618      	mov	r0, r3
 c000d80:	3718      	adds	r7, #24
 c000d82:	46bd      	mov	sp, r7
 c000d84:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000d88:	4671      	mov	r1, lr
 c000d8a:	4672      	mov	r2, lr
 c000d8c:	4673      	mov	r3, lr
 c000d8e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000d92:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000d96:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000d9a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000d9e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000da2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000da6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000daa:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000dae:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000db2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000db6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000dba:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000dbe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000dc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000dc6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000dca:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000dce:	f38e 8c00 	msr	CPSR_fs, lr
 c000dd2:	b410      	push	{r4}
 c000dd4:	eef1 ca10 	vmrs	ip, fpscr
 c000dd8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000ddc:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000de0:	ea0c 0c04 	and.w	ip, ip, r4
 c000de4:	eee1 ca10 	vmsr	fpscr, ip
 c000de8:	bc10      	pop	{r4}
 c000dea:	46f4      	mov	ip, lr
 c000dec:	4774      	bxns	lr
 c000dee:	bf00      	nop
 c000df0:	300005fc 	.word	0x300005fc
 c000df4:	30000188 	.word	0x30000188
 c000df8:	0c006318 	.word	0x0c006318
 c000dfc:	0c00633c 	.word	0x0c00633c

0c000e00 <__acle_se_SECURE_DATA_Last_Buffer_Compare>:
  * @brief  Secure service to compare the last data buffer copy from versus the
  *         secure reference buffer
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_DATA_Last_Buffer_Compare(uint32_t* addr)
{
 c000e00:	b580      	push	{r7, lr}
 c000e02:	b084      	sub	sp, #16
 c000e04:	af00      	add	r7, sp, #0
 c000e06:	6078      	str	r0, [r7, #4]
	//used after non-secure to secure mem transfer
  ErrorStatus  ret = SUCCESS;
 c000e08:	2300      	movs	r3, #0
 c000e0a:	72fb      	strb	r3, [r7, #11]
  //print the contents of the first transfer
	 printf("=====================================================================================================================\n\r");
 c000e0c:	4835      	ldr	r0, [pc, #212]	; (c000ee4 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xe4>)
 c000e0e:	f004 fadb 	bl	c0053c8 <iprintf>
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c000e12:	2300      	movs	r3, #0
 c000e14:	60fb      	str	r3, [r7, #12]
 c000e16:	e025      	b.n	c000e64 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x64>
		 if((i+1)%4==1){
 c000e18:	68fb      	ldr	r3, [r7, #12]
 c000e1a:	3301      	adds	r3, #1
 c000e1c:	425a      	negs	r2, r3
 c000e1e:	f003 0303 	and.w	r3, r3, #3
 c000e22:	f002 0203 	and.w	r2, r2, #3
 c000e26:	bf58      	it	pl
 c000e28:	4253      	negpl	r3, r2
 c000e2a:	2b01      	cmp	r3, #1
 c000e2c:	d103      	bne.n	c000e36 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x36>
			 printf("%08p|\t", addr);
 c000e2e:	6879      	ldr	r1, [r7, #4]
 c000e30:	482d      	ldr	r0, [pc, #180]	; (c000ee8 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xe8>)
 c000e32:	f004 fac9 	bl	c0053c8 <iprintf>
		 }
		printf("0x%08x\t", SEC_Mem_Buffer[i]);
 c000e36:	4a2d      	ldr	r2, [pc, #180]	; (c000eec <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xec>)
 c000e38:	68fb      	ldr	r3, [r7, #12]
 c000e3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000e3e:	4619      	mov	r1, r3
 c000e40:	482b      	ldr	r0, [pc, #172]	; (c000ef0 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf0>)
 c000e42:	f004 fac1 	bl	c0053c8 <iprintf>
		if((i+1)%4==0){
 c000e46:	68fb      	ldr	r3, [r7, #12]
 c000e48:	3301      	adds	r3, #1
 c000e4a:	f003 0303 	and.w	r3, r3, #3
 c000e4e:	2b00      	cmp	r3, #0
 c000e50:	d102      	bne.n	c000e58 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x58>
			printf("\n\r");
 c000e52:	4828      	ldr	r0, [pc, #160]	; (c000ef4 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf4>)
 c000e54:	f004 fab8 	bl	c0053c8 <iprintf>
		}
		addr+=1;
 c000e58:	687b      	ldr	r3, [r7, #4]
 c000e5a:	3304      	adds	r3, #4
 c000e5c:	607b      	str	r3, [r7, #4]
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c000e5e:	68fb      	ldr	r3, [r7, #12]
 c000e60:	3301      	adds	r3, #1
 c000e62:	60fb      	str	r3, [r7, #12]
 c000e64:	68fb      	ldr	r3, [r7, #12]
 c000e66:	2bff      	cmp	r3, #255	; 0xff
 c000e68:	d9d6      	bls.n	c000e18 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x18>
	 }
	 printf("\n\r");
 c000e6a:	4822      	ldr	r0, [pc, #136]	; (c000ef4 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf4>)
 c000e6c:	f004 faac 	bl	c0053c8 <iprintf>


  return ret;
 c000e70:	7afb      	ldrb	r3, [r7, #11]
}
 c000e72:	4618      	mov	r0, r3
 c000e74:	3710      	adds	r7, #16
 c000e76:	46bd      	mov	sp, r7
 c000e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000e7c:	4671      	mov	r1, lr
 c000e7e:	4672      	mov	r2, lr
 c000e80:	4673      	mov	r3, lr
 c000e82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000e86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000e8a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000e8e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000e92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000e96:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000e9a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000e9e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ea2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000ea6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000eaa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000eae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000eb2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000ec2:	f38e 8c00 	msr	CPSR_fs, lr
 c000ec6:	b410      	push	{r4}
 c000ec8:	eef1 ca10 	vmrs	ip, fpscr
 c000ecc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000ed0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000ed4:	ea0c 0c04 	and.w	ip, ip, r4
 c000ed8:	eee1 ca10 	vmsr	fpscr, ip
 c000edc:	bc10      	pop	{r4}
 c000ede:	46f4      	mov	ip, lr
 c000ee0:	4774      	bxns	lr
 c000ee2:	bf00      	nop
 c000ee4:	0c006390 	.word	0x0c006390
 c000ee8:	0c006408 	.word	0x0c006408
 c000eec:	300001f0 	.word	0x300001f0
 c000ef0:	0c006410 	.word	0x0c006410
 c000ef4:	0c006418 	.word	0x0c006418

0c000ef8 <__acle_se_SECURE_print_Buffer>:


CMSE_NS_ENTRY ErrorStatus SECURE_print_Buffer(uint32_t * buf, uint32_t size){
 c000ef8:	b580      	push	{r7, lr}
 c000efa:	b084      	sub	sp, #16
 c000efc:	af00      	add	r7, sp, #0
 c000efe:	6078      	str	r0, [r7, #4]
 c000f00:	6039      	str	r1, [r7, #0]
	//print the contents of the first transfer
	 printf("Non-secure memory buffer: \n\r");
 c000f02:	482f      	ldr	r0, [pc, #188]	; (c000fc0 <__acle_se_SECURE_print_Buffer+0xc8>)
 c000f04:	f004 fa60 	bl	c0053c8 <iprintf>
	 printf("===========================================================================================================\n\r");
 c000f08:	482e      	ldr	r0, [pc, #184]	; (c000fc4 <__acle_se_SECURE_print_Buffer+0xcc>)
 c000f0a:	f004 fa5d 	bl	c0053c8 <iprintf>
	 for(int i = 0; i<size; i++){
 c000f0e:	2300      	movs	r3, #0
 c000f10:	60fb      	str	r3, [r7, #12]
 c000f12:	e014      	b.n	c000f3e <__acle_se_SECURE_print_Buffer+0x46>
		printf("0x%08x\t", buf[i]);
 c000f14:	68fb      	ldr	r3, [r7, #12]
 c000f16:	009b      	lsls	r3, r3, #2
 c000f18:	687a      	ldr	r2, [r7, #4]
 c000f1a:	4413      	add	r3, r2
 c000f1c:	681b      	ldr	r3, [r3, #0]
 c000f1e:	4619      	mov	r1, r3
 c000f20:	4829      	ldr	r0, [pc, #164]	; (c000fc8 <__acle_se_SECURE_print_Buffer+0xd0>)
 c000f22:	f004 fa51 	bl	c0053c8 <iprintf>
		if((i+1)%4==0){
 c000f26:	68fb      	ldr	r3, [r7, #12]
 c000f28:	3301      	adds	r3, #1
 c000f2a:	f003 0303 	and.w	r3, r3, #3
 c000f2e:	2b00      	cmp	r3, #0
 c000f30:	d102      	bne.n	c000f38 <__acle_se_SECURE_print_Buffer+0x40>
			printf("\n\r");
 c000f32:	4826      	ldr	r0, [pc, #152]	; (c000fcc <__acle_se_SECURE_print_Buffer+0xd4>)
 c000f34:	f004 fa48 	bl	c0053c8 <iprintf>
	 for(int i = 0; i<size; i++){
 c000f38:	68fb      	ldr	r3, [r7, #12]
 c000f3a:	3301      	adds	r3, #1
 c000f3c:	60fb      	str	r3, [r7, #12]
 c000f3e:	68fb      	ldr	r3, [r7, #12]
 c000f40:	683a      	ldr	r2, [r7, #0]
 c000f42:	429a      	cmp	r2, r3
 c000f44:	d8e6      	bhi.n	c000f14 <__acle_se_SECURE_print_Buffer+0x1c>
		}
	 }
	 printf("\n\r");
 c000f46:	4821      	ldr	r0, [pc, #132]	; (c000fcc <__acle_se_SECURE_print_Buffer+0xd4>)
 c000f48:	f004 fa3e 	bl	c0053c8 <iprintf>
	 return SUCCESS;
 c000f4c:	2300      	movs	r3, #0
}
 c000f4e:	4618      	mov	r0, r3
 c000f50:	3710      	adds	r7, #16
 c000f52:	46bd      	mov	sp, r7
 c000f54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000f58:	4671      	mov	r1, lr
 c000f5a:	4672      	mov	r2, lr
 c000f5c:	4673      	mov	r3, lr
 c000f5e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000f62:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000f66:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000f6a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000f6e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000f72:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000f76:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000f7a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000f7e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000f82:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000f86:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000f8a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000f8e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000f92:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000f96:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000f9a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000f9e:	f38e 8c00 	msr	CPSR_fs, lr
 c000fa2:	b410      	push	{r4}
 c000fa4:	eef1 ca10 	vmrs	ip, fpscr
 c000fa8:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000fac:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000fb0:	ea0c 0c04 	and.w	ip, ip, r4
 c000fb4:	eee1 ca10 	vmsr	fpscr, ip
 c000fb8:	bc10      	pop	{r4}
 c000fba:	46f4      	mov	ip, lr
 c000fbc:	4774      	bxns	lr
 c000fbe:	bf00      	nop
 c000fc0:	0c00641c 	.word	0x0c00641c
 c000fc4:	0c00643c 	.word	0x0c00643c
 c000fc8:	0c006410 	.word	0x0c006410
 c000fcc:	0c006418 	.word	0x0c006418

0c000fd0 <__acle_se_SECURE_print_Log>:


CMSE_NS_ENTRY void SECURE_print_Log(char* string){
 c000fd0:	b580      	push	{r7, lr}
 c000fd2:	b082      	sub	sp, #8
 c000fd4:	af00      	add	r7, sp, #0
 c000fd6:	6078      	str	r0, [r7, #4]
	printf(string);
 c000fd8:	6878      	ldr	r0, [r7, #4]
 c000fda:	f004 f9f5 	bl	c0053c8 <iprintf>
}
 c000fde:	bf00      	nop
 c000fe0:	3708      	adds	r7, #8
 c000fe2:	46bd      	mov	sp, r7
 c000fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000fe8:	4670      	mov	r0, lr
 c000fea:	4671      	mov	r1, lr
 c000fec:	4672      	mov	r2, lr
 c000fee:	4673      	mov	r3, lr
 c000ff0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000ff4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000ff8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000ffc:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001000:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001004:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001008:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00100c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001010:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001014:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001018:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00101c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001020:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001024:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001028:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00102c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001030:	f38e 8c00 	msr	CPSR_fs, lr
 c001034:	b410      	push	{r4}
 c001036:	eef1 ca10 	vmrs	ip, fpscr
 c00103a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00103e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001042:	ea0c 0c04 	and.w	ip, ip, r4
 c001046:	eee1 ca10 	vmsr	fpscr, ip
 c00104a:	bc10      	pop	{r4}
 c00104c:	46f4      	mov	ip, lr
 c00104e:	4774      	bxns	lr

0c001050 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure callback function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001050:	b480      	push	{r7}
 c001052:	b083      	sub	sp, #12
 c001054:	af00      	add	r7, sp, #0
 c001056:	4603      	mov	r3, r0
 c001058:	6039      	str	r1, [r7, #0]
 c00105a:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c00105c:	683b      	ldr	r3, [r7, #0]
 c00105e:	2b00      	cmp	r3, #0
 c001060:	d00d      	beq.n	c00107e <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c001062:	79fb      	ldrb	r3, [r7, #7]
 c001064:	2b00      	cmp	r3, #0
 c001066:	d002      	beq.n	c00106e <__acle_se_SECURE_RegisterCallback+0x1e>
 c001068:	2b01      	cmp	r3, #1
 c00106a:	d004      	beq.n	c001076 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC IT */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c00106c:	e008      	b.n	c001080 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c00106e:	4a21      	ldr	r2, [pc, #132]	; (c0010f4 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001070:	683b      	ldr	r3, [r7, #0]
 c001072:	6013      	str	r3, [r2, #0]
        break;
 c001074:	e004      	b.n	c001080 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c001076:	4a20      	ldr	r2, [pc, #128]	; (c0010f8 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c001078:	683b      	ldr	r3, [r7, #0]
 c00107a:	6013      	str	r3, [r2, #0]
        break;
 c00107c:	e000      	b.n	c001080 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c00107e:	bf00      	nop
}
 c001080:	bf00      	nop
 c001082:	370c      	adds	r7, #12
 c001084:	46bd      	mov	sp, r7
 c001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00108a:	4670      	mov	r0, lr
 c00108c:	4671      	mov	r1, lr
 c00108e:	4672      	mov	r2, lr
 c001090:	4673      	mov	r3, lr
 c001092:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001096:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00109a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00109e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0010a2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0010a6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0010aa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0010ae:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0010b2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0010b6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0010ba:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0010be:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0010c2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0010c6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0010ca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0010ce:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0010d2:	f38e 8c00 	msr	CPSR_fs, lr
 c0010d6:	b410      	push	{r4}
 c0010d8:	eef1 ca10 	vmrs	ip, fpscr
 c0010dc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0010e0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0010e4:	ea0c 0c04 	and.w	ip, ip, r4
 c0010e8:	eee1 ca10 	vmsr	fpscr, ip
 c0010ec:	bc10      	pop	{r4}
 c0010ee:	46f4      	mov	ip, lr
 c0010f0:	4774      	bxns	lr
 c0010f2:	bf00      	nop
 c0010f4:	300005f0 	.word	0x300005f0
 c0010f8:	300005f4 	.word	0x300005f4

0c0010fc <NonSecureToSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void NonSecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c0010fc:	b590      	push	{r4, r7, lr}
 c0010fe:	b085      	sub	sp, #20
 c001100:	af00      	add	r7, sp, #0
 c001102:	6078      	str	r0, [r7, #4]
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pNonSecureToSecureTransferCompleteCallback != (void *)NULL)
 c001104:	4b1c      	ldr	r3, [pc, #112]	; (c001178 <NonSecureToSecureTransferComplete+0x7c>)
 c001106:	681b      	ldr	r3, [r3, #0]
 c001108:	2b00      	cmp	r3, #0
 c00110a:	d02f      	beq.n	c00116c <NonSecureToSecureTransferComplete+0x70>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pNonSecureToSecureTransferCompleteCallback);
 c00110c:	4b1a      	ldr	r3, [pc, #104]	; (c001178 <NonSecureToSecureTransferComplete+0x7c>)
 c00110e:	681b      	ldr	r3, [r3, #0]
 c001110:	f023 0301 	bic.w	r3, r3, #1
 c001114:	60fb      	str	r3, [r7, #12]

   callback_NS();
 c001116:	68fb      	ldr	r3, [r7, #12]
 c001118:	461c      	mov	r4, r3
 c00111a:	0864      	lsrs	r4, r4, #1
 c00111c:	0064      	lsls	r4, r4, #1
 c00111e:	4620      	mov	r0, r4
 c001120:	4621      	mov	r1, r4
 c001122:	4622      	mov	r2, r4
 c001124:	4623      	mov	r3, r4
 c001126:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00112a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00112e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001132:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001136:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00113a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00113e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001142:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001146:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00114a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00114e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001152:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001156:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00115a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00115e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001162:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001166:	f7ff f8d9 	bl	c00031c <__gnu_cmse_nonsecure_call>
  }
  else
  {
    Error_Handler();  /* Something went wrong */
  }
}
 c00116a:	e001      	b.n	c001170 <NonSecureToSecureTransferComplete+0x74>
    Error_Handler();  /* Something went wrong */
 c00116c:	f7ff fd66 	bl	c000c3c <Error_Handler>
}
 c001170:	bf00      	nop
 c001172:	3714      	adds	r7, #20
 c001174:	46bd      	mov	sp, r7
 c001176:	bd90      	pop	{r4, r7, pc}
 c001178:	300005f8 	.word	0x300005f8

0c00117c <NonSecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void NonSecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c00117c:	b580      	push	{r7, lr}
 c00117e:	b082      	sub	sp, #8
 c001180:	af00      	add	r7, sp, #0
 c001182:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c001184:	f7ff fd5a 	bl	c000c3c <Error_Handler>
}
 c001188:	bf00      	nop
 c00118a:	3708      	adds	r7, #8
 c00118c:	46bd      	mov	sp, r7
 c00118e:	bd80      	pop	{r7, pc}

0c001190 <NonSecureToNonSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void NonSecureToNonSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel2)
{
 c001190:	b590      	push	{r4, r7, lr}
 c001192:	b085      	sub	sp, #20
 c001194:	af00      	add	r7, sp, #0
 c001196:	6078      	str	r0, [r7, #4]
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pNonSecureToNonSecureTransferCompleteCallback != (void *)NULL)
 c001198:	4b1c      	ldr	r3, [pc, #112]	; (c00120c <NonSecureToNonSecureTransferComplete+0x7c>)
 c00119a:	681b      	ldr	r3, [r3, #0]
 c00119c:	2b00      	cmp	r3, #0
 c00119e:	d02f      	beq.n	c001200 <NonSecureToNonSecureTransferComplete+0x70>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pNonSecureToNonSecureTransferCompleteCallback);
 c0011a0:	4b1a      	ldr	r3, [pc, #104]	; (c00120c <NonSecureToNonSecureTransferComplete+0x7c>)
 c0011a2:	681b      	ldr	r3, [r3, #0]
 c0011a4:	f023 0301 	bic.w	r3, r3, #1
 c0011a8:	60fb      	str	r3, [r7, #12]

   callback_NS();
 c0011aa:	68fb      	ldr	r3, [r7, #12]
 c0011ac:	461c      	mov	r4, r3
 c0011ae:	0864      	lsrs	r4, r4, #1
 c0011b0:	0064      	lsls	r4, r4, #1
 c0011b2:	4620      	mov	r0, r4
 c0011b4:	4621      	mov	r1, r4
 c0011b6:	4622      	mov	r2, r4
 c0011b8:	4623      	mov	r3, r4
 c0011ba:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0011be:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0011c2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0011c6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0011ca:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0011ce:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0011d2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0011d6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0011da:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0011de:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0011e2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0011e6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0011ea:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0011ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011f2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0011f6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0011fa:	f7ff f88f 	bl	c00031c <__gnu_cmse_nonsecure_call>
  }
  else
  {
    Error_Handler();  /* Something went wrong */
  }
}
 c0011fe:	e001      	b.n	c001204 <NonSecureToNonSecureTransferComplete+0x74>
    Error_Handler();  /* Something went wrong */
 c001200:	f7ff fd1c 	bl	c000c3c <Error_Handler>
}
 c001204:	bf00      	nop
 c001206:	3714      	adds	r7, #20
 c001208:	46bd      	mov	sp, r7
 c00120a:	bd90      	pop	{r4, r7, pc}
 c00120c:	300005fc 	.word	0x300005fc

0c001210 <NonSecureToNonSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void NonSecureToNonSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel2)
{
 c001210:	b580      	push	{r7, lr}
 c001212:	b082      	sub	sp, #8
 c001214:	af00      	add	r7, sp, #0
 c001216:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c001218:	f7ff fd10 	bl	c000c3c <Error_Handler>
}
 c00121c:	bf00      	nop
 c00121e:	3708      	adds	r7, #8
 c001220:	46bd      	mov	sp, r7
 c001222:	bd80      	pop	{r7, pc}

0c001224 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c001224:	b580      	push	{r7, lr}
 c001226:	b084      	sub	sp, #16
 c001228:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c00122a:	4b19      	ldr	r3, [pc, #100]	; (c001290 <HAL_MspInit+0x6c>)
 c00122c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00122e:	4a18      	ldr	r2, [pc, #96]	; (c001290 <HAL_MspInit+0x6c>)
 c001230:	f043 0301 	orr.w	r3, r3, #1
 c001234:	6613      	str	r3, [r2, #96]	; 0x60
 c001236:	4b16      	ldr	r3, [pc, #88]	; (c001290 <HAL_MspInit+0x6c>)
 c001238:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00123a:	f003 0301 	and.w	r3, r3, #1
 c00123e:	60fb      	str	r3, [r7, #12]
 c001240:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c001242:	4b13      	ldr	r3, [pc, #76]	; (c001290 <HAL_MspInit+0x6c>)
 c001244:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001246:	4a12      	ldr	r2, [pc, #72]	; (c001290 <HAL_MspInit+0x6c>)
 c001248:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00124c:	6593      	str	r3, [r2, #88]	; 0x58
 c00124e:	4b10      	ldr	r3, [pc, #64]	; (c001290 <HAL_MspInit+0x6c>)
 c001250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001252:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001256:	60bb      	str	r3, [r7, #8]
 c001258:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c00125a:	4b0d      	ldr	r3, [pc, #52]	; (c001290 <HAL_MspInit+0x6c>)
 c00125c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00125e:	4a0c      	ldr	r2, [pc, #48]	; (c001290 <HAL_MspInit+0x6c>)
 c001260:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c001264:	6493      	str	r3, [r2, #72]	; 0x48
 c001266:	4b0a      	ldr	r3, [pc, #40]	; (c001290 <HAL_MspInit+0x6c>)
 c001268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00126a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00126e:	607b      	str	r3, [r7, #4]
 c001270:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
    /* GTZC_IRQn interrupt configuration */
    HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c001272:	2200      	movs	r2, #0
 c001274:	2100      	movs	r1, #0
 c001276:	2008      	movs	r0, #8
 c001278:	f000 fc67 	bl	c001b4a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c00127c:	2008      	movs	r0, #8
 c00127e:	f000 fc7e 	bl	c001b7e <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c001282:	f001 fc73 	bl	c002b6c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001286:	bf00      	nop
 c001288:	3710      	adds	r7, #16
 c00128a:	46bd      	mov	sp, r7
 c00128c:	bd80      	pop	{r7, pc}
 c00128e:	bf00      	nop
 c001290:	50021000 	.word	0x50021000

0c001294 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c001294:	b580      	push	{r7, lr}
 c001296:	b0ae      	sub	sp, #184	; 0xb8
 c001298:	af00      	add	r7, sp, #0
 c00129a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00129c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c0012a0:	2200      	movs	r2, #0
 c0012a2:	601a      	str	r2, [r3, #0]
 c0012a4:	605a      	str	r2, [r3, #4]
 c0012a6:	609a      	str	r2, [r3, #8]
 c0012a8:	60da      	str	r2, [r3, #12]
 c0012aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c0012ac:	f107 0310 	add.w	r3, r7, #16
 c0012b0:	2294      	movs	r2, #148	; 0x94
 c0012b2:	2100      	movs	r1, #0
 c0012b4:	4618      	mov	r0, r3
 c0012b6:	f004 f87f 	bl	c0053b8 <memset>
  if(huart->Instance==USART1)
 c0012ba:	687b      	ldr	r3, [r7, #4]
 c0012bc:	681b      	ldr	r3, [r3, #0]
 c0012be:	4a21      	ldr	r2, [pc, #132]	; (c001344 <HAL_UART_MspInit+0xb0>)
 c0012c0:	4293      	cmp	r3, r2
 c0012c2:	d13b      	bne.n	c00133c <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c0012c4:	2301      	movs	r3, #1
 c0012c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c0012c8:	2300      	movs	r3, #0
 c0012ca:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0012cc:	f107 0310 	add.w	r3, r7, #16
 c0012d0:	4618      	mov	r0, r3
 c0012d2:	f002 fc39 	bl	c003b48 <HAL_RCCEx_PeriphCLKConfig>
 c0012d6:	4603      	mov	r3, r0
 c0012d8:	2b00      	cmp	r3, #0
 c0012da:	d001      	beq.n	c0012e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c0012dc:	f7ff fcae 	bl	c000c3c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c0012e0:	4b19      	ldr	r3, [pc, #100]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c0012e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0012e4:	4a18      	ldr	r2, [pc, #96]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c0012e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0012ea:	6613      	str	r3, [r2, #96]	; 0x60
 c0012ec:	4b16      	ldr	r3, [pc, #88]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c0012ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0012f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0012f4:	60fb      	str	r3, [r7, #12]
 c0012f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c0012f8:	4b13      	ldr	r3, [pc, #76]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c0012fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0012fc:	4a12      	ldr	r2, [pc, #72]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c0012fe:	f043 0301 	orr.w	r3, r3, #1
 c001302:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001304:	4b10      	ldr	r3, [pc, #64]	; (c001348 <HAL_UART_MspInit+0xb4>)
 c001306:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001308:	f003 0301 	and.w	r3, r3, #1
 c00130c:	60bb      	str	r3, [r7, #8]
 c00130e:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c001310:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c001314:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001318:	2302      	movs	r3, #2
 c00131a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c00131e:	2300      	movs	r3, #0
 c001320:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001324:	2300      	movs	r3, #0
 c001326:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c00132a:	2307      	movs	r3, #7
 c00132c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c001330:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001334:	4619      	mov	r1, r3
 c001336:	4805      	ldr	r0, [pc, #20]	; (c00134c <HAL_UART_MspInit+0xb8>)
 c001338:	f000 ffdc 	bl	c0022f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c00133c:	bf00      	nop
 c00133e:	37b8      	adds	r7, #184	; 0xb8
 c001340:	46bd      	mov	sp, r7
 c001342:	bd80      	pop	{r7, pc}
 c001344:	50013800 	.word	0x50013800
 c001348:	50021000 	.word	0x50021000
 c00134c:	52020000 	.word	0x52020000

0c001350 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001350:	b480      	push	{r7}
 c001352:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c001354:	e7fe      	b.n	c001354 <NMI_Handler+0x4>

0c001356 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001356:	b480      	push	{r7}
 c001358:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c00135a:	e7fe      	b.n	c00135a <HardFault_Handler+0x4>

0c00135c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c00135c:	b480      	push	{r7}
 c00135e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001360:	e7fe      	b.n	c001360 <MemManage_Handler+0x4>

0c001362 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001362:	b480      	push	{r7}
 c001364:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001366:	e7fe      	b.n	c001366 <BusFault_Handler+0x4>

0c001368 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001368:	b480      	push	{r7}
 c00136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c00136c:	e7fe      	b.n	c00136c <UsageFault_Handler+0x4>

0c00136e <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c00136e:	b480      	push	{r7}
 c001370:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001372:	e7fe      	b.n	c001372 <SecureFault_Handler+0x4>

0c001374 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001374:	b480      	push	{r7}
 c001376:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001378:	bf00      	nop
 c00137a:	46bd      	mov	sp, r7
 c00137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001380:	4770      	bx	lr

0c001382 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001382:	b480      	push	{r7}
 c001384:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001386:	bf00      	nop
 c001388:	46bd      	mov	sp, r7
 c00138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00138e:	4770      	bx	lr

0c001390 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001390:	b480      	push	{r7}
 c001392:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001394:	bf00      	nop
 c001396:	46bd      	mov	sp, r7
 c001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00139c:	4770      	bx	lr

0c00139e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00139e:	b580      	push	{r7, lr}
 c0013a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c0013a2:	f000 fac7 	bl	c001934 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c0013a6:	bf00      	nop
 c0013a8:	bd80      	pop	{r7, pc}

0c0013aa <GTZC_IRQHandler>:
/* please refer to the startup file (startup_stm32l5xx.s).                    */
/******************************************************************************/

/* USER CODE BEGIN 1 */
void GTZC_IRQHandler(void)
{
 c0013aa:	b580      	push	{r7, lr}
 c0013ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */

  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c0013ae:	f001 fab5 	bl	c00291c <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */

  /* USER CODE END GTZC_IRQn 1 */
}
 c0013b2:	bf00      	nop
 c0013b4:	bd80      	pop	{r7, pc}
	...

0c0013b8 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 c0013b8:	b580      	push	{r7, lr}
 c0013ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel3);
 c0013bc:	4802      	ldr	r0, [pc, #8]	; (c0013c8 <DMA1_Channel3_IRQHandler+0x10>)
 c0013be:	f000 fd1c 	bl	c001dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c0013c2:	bf00      	nop
 c0013c4:	bd80      	pop	{r7, pc}
 c0013c6:	bf00      	nop
 c0013c8:	30000120 	.word	0x30000120

0c0013cc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 c0013cc:	b580      	push	{r7, lr}
 c0013ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 c0013d0:	4802      	ldr	r0, [pc, #8]	; (c0013dc <DMA1_Channel2_IRQHandler+0x10>)
 c0013d2:	f000 fd12 	bl	c001dfa <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c0013d6:	bf00      	nop
 c0013d8:	bd80      	pop	{r7, pc}
 c0013da:	bf00      	nop
 c0013dc:	30000188 	.word	0x30000188

0c0013e0 <_read>:
 c0013e0:	b580      	push	{r7, lr}
 c0013e2:	b086      	sub	sp, #24
 c0013e4:	af00      	add	r7, sp, #0
 c0013e6:	60f8      	str	r0, [r7, #12]
 c0013e8:	60b9      	str	r1, [r7, #8]
 c0013ea:	607a      	str	r2, [r7, #4]
 c0013ec:	2300      	movs	r3, #0
 c0013ee:	617b      	str	r3, [r7, #20]
 c0013f0:	e00a      	b.n	c001408 <_read+0x28>
 c0013f2:	e000      	b.n	c0013f6 <_read+0x16>
 c0013f4:	bf00      	nop
 c0013f6:	4601      	mov	r1, r0
 c0013f8:	68bb      	ldr	r3, [r7, #8]
 c0013fa:	1c5a      	adds	r2, r3, #1
 c0013fc:	60ba      	str	r2, [r7, #8]
 c0013fe:	b2ca      	uxtb	r2, r1
 c001400:	701a      	strb	r2, [r3, #0]
 c001402:	697b      	ldr	r3, [r7, #20]
 c001404:	3301      	adds	r3, #1
 c001406:	617b      	str	r3, [r7, #20]
 c001408:	697a      	ldr	r2, [r7, #20]
 c00140a:	687b      	ldr	r3, [r7, #4]
 c00140c:	429a      	cmp	r2, r3
 c00140e:	dbf0      	blt.n	c0013f2 <_read+0x12>
 c001410:	687b      	ldr	r3, [r7, #4]
 c001412:	4618      	mov	r0, r3
 c001414:	3718      	adds	r7, #24
 c001416:	46bd      	mov	sp, r7
 c001418:	bd80      	pop	{r7, pc}

0c00141a <_write>:
 c00141a:	b580      	push	{r7, lr}
 c00141c:	b086      	sub	sp, #24
 c00141e:	af00      	add	r7, sp, #0
 c001420:	60f8      	str	r0, [r7, #12]
 c001422:	60b9      	str	r1, [r7, #8]
 c001424:	607a      	str	r2, [r7, #4]
 c001426:	2300      	movs	r3, #0
 c001428:	617b      	str	r3, [r7, #20]
 c00142a:	e009      	b.n	c001440 <_write+0x26>
 c00142c:	68bb      	ldr	r3, [r7, #8]
 c00142e:	1c5a      	adds	r2, r3, #1
 c001430:	60ba      	str	r2, [r7, #8]
 c001432:	781b      	ldrb	r3, [r3, #0]
 c001434:	4618      	mov	r0, r3
 c001436:	f7ff fbef 	bl	c000c18 <__io_putchar>
 c00143a:	697b      	ldr	r3, [r7, #20]
 c00143c:	3301      	adds	r3, #1
 c00143e:	617b      	str	r3, [r7, #20]
 c001440:	697a      	ldr	r2, [r7, #20]
 c001442:	687b      	ldr	r3, [r7, #4]
 c001444:	429a      	cmp	r2, r3
 c001446:	dbf1      	blt.n	c00142c <_write+0x12>
 c001448:	687b      	ldr	r3, [r7, #4]
 c00144a:	4618      	mov	r0, r3
 c00144c:	3718      	adds	r7, #24
 c00144e:	46bd      	mov	sp, r7
 c001450:	bd80      	pop	{r7, pc}

0c001452 <_close>:
 c001452:	b480      	push	{r7}
 c001454:	b083      	sub	sp, #12
 c001456:	af00      	add	r7, sp, #0
 c001458:	6078      	str	r0, [r7, #4]
 c00145a:	f04f 33ff 	mov.w	r3, #4294967295
 c00145e:	4618      	mov	r0, r3
 c001460:	370c      	adds	r7, #12
 c001462:	46bd      	mov	sp, r7
 c001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001468:	4770      	bx	lr

0c00146a <_fstat>:
 c00146a:	b480      	push	{r7}
 c00146c:	b083      	sub	sp, #12
 c00146e:	af00      	add	r7, sp, #0
 c001470:	6078      	str	r0, [r7, #4]
 c001472:	6039      	str	r1, [r7, #0]
 c001474:	683b      	ldr	r3, [r7, #0]
 c001476:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c00147a:	605a      	str	r2, [r3, #4]
 c00147c:	2300      	movs	r3, #0
 c00147e:	4618      	mov	r0, r3
 c001480:	370c      	adds	r7, #12
 c001482:	46bd      	mov	sp, r7
 c001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001488:	4770      	bx	lr

0c00148a <_isatty>:
 c00148a:	b480      	push	{r7}
 c00148c:	b083      	sub	sp, #12
 c00148e:	af00      	add	r7, sp, #0
 c001490:	6078      	str	r0, [r7, #4]
 c001492:	2301      	movs	r3, #1
 c001494:	4618      	mov	r0, r3
 c001496:	370c      	adds	r7, #12
 c001498:	46bd      	mov	sp, r7
 c00149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00149e:	4770      	bx	lr

0c0014a0 <_lseek>:
 c0014a0:	b480      	push	{r7}
 c0014a2:	b085      	sub	sp, #20
 c0014a4:	af00      	add	r7, sp, #0
 c0014a6:	60f8      	str	r0, [r7, #12]
 c0014a8:	60b9      	str	r1, [r7, #8]
 c0014aa:	607a      	str	r2, [r7, #4]
 c0014ac:	2300      	movs	r3, #0
 c0014ae:	4618      	mov	r0, r3
 c0014b0:	3714      	adds	r7, #20
 c0014b2:	46bd      	mov	sp, r7
 c0014b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014b8:	4770      	bx	lr
	...

0c0014bc <_sbrk>:
 c0014bc:	b580      	push	{r7, lr}
 c0014be:	b086      	sub	sp, #24
 c0014c0:	af00      	add	r7, sp, #0
 c0014c2:	6078      	str	r0, [r7, #4]
 c0014c4:	4a14      	ldr	r2, [pc, #80]	; (c001518 <_sbrk+0x5c>)
 c0014c6:	4b15      	ldr	r3, [pc, #84]	; (c00151c <_sbrk+0x60>)
 c0014c8:	1ad3      	subs	r3, r2, r3
 c0014ca:	617b      	str	r3, [r7, #20]
 c0014cc:	697b      	ldr	r3, [r7, #20]
 c0014ce:	613b      	str	r3, [r7, #16]
 c0014d0:	4b13      	ldr	r3, [pc, #76]	; (c001520 <_sbrk+0x64>)
 c0014d2:	681b      	ldr	r3, [r3, #0]
 c0014d4:	2b00      	cmp	r3, #0
 c0014d6:	d102      	bne.n	c0014de <_sbrk+0x22>
 c0014d8:	4b11      	ldr	r3, [pc, #68]	; (c001520 <_sbrk+0x64>)
 c0014da:	4a12      	ldr	r2, [pc, #72]	; (c001524 <_sbrk+0x68>)
 c0014dc:	601a      	str	r2, [r3, #0]
 c0014de:	4b10      	ldr	r3, [pc, #64]	; (c001520 <_sbrk+0x64>)
 c0014e0:	681a      	ldr	r2, [r3, #0]
 c0014e2:	687b      	ldr	r3, [r7, #4]
 c0014e4:	4413      	add	r3, r2
 c0014e6:	693a      	ldr	r2, [r7, #16]
 c0014e8:	429a      	cmp	r2, r3
 c0014ea:	d207      	bcs.n	c0014fc <_sbrk+0x40>
 c0014ec:	f003 ff3a 	bl	c005364 <__errno>
 c0014f0:	4603      	mov	r3, r0
 c0014f2:	220c      	movs	r2, #12
 c0014f4:	601a      	str	r2, [r3, #0]
 c0014f6:	f04f 33ff 	mov.w	r3, #4294967295
 c0014fa:	e009      	b.n	c001510 <_sbrk+0x54>
 c0014fc:	4b08      	ldr	r3, [pc, #32]	; (c001520 <_sbrk+0x64>)
 c0014fe:	681b      	ldr	r3, [r3, #0]
 c001500:	60fb      	str	r3, [r7, #12]
 c001502:	4b07      	ldr	r3, [pc, #28]	; (c001520 <_sbrk+0x64>)
 c001504:	681a      	ldr	r2, [r3, #0]
 c001506:	687b      	ldr	r3, [r7, #4]
 c001508:	4413      	add	r3, r2
 c00150a:	4a05      	ldr	r2, [pc, #20]	; (c001520 <_sbrk+0x64>)
 c00150c:	6013      	str	r3, [r2, #0]
 c00150e:	68fb      	ldr	r3, [r7, #12]
 c001510:	4618      	mov	r0, r3
 c001512:	3718      	adds	r7, #24
 c001514:	46bd      	mov	sp, r7
 c001516:	bd80      	pop	{r7, pc}
 c001518:	30018000 	.word	0x30018000
 c00151c:	00000400 	.word	0x00000400
 c001520:	30000600 	.word	0x30000600
 c001524:	30000618 	.word	0x30000618

0c001528 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001528:	b480      	push	{r7}
 c00152a:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c00152c:	4b2f      	ldr	r3, [pc, #188]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00152e:	2200      	movs	r2, #0
 c001530:	609a      	str	r2, [r3, #8]
 c001532:	4b2e      	ldr	r3, [pc, #184]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001534:	4a2e      	ldr	r2, [pc, #184]	; (c0015f0 <TZ_SAU_Setup+0xc8>)
 c001536:	60da      	str	r2, [r3, #12]
 c001538:	4b2c      	ldr	r3, [pc, #176]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00153a:	4a2e      	ldr	r2, [pc, #184]	; (c0015f4 <TZ_SAU_Setup+0xcc>)
 c00153c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c00153e:	4b2b      	ldr	r3, [pc, #172]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001540:	2201      	movs	r2, #1
 c001542:	609a      	str	r2, [r3, #8]
 c001544:	4b29      	ldr	r3, [pc, #164]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001546:	4a2c      	ldr	r2, [pc, #176]	; (c0015f8 <TZ_SAU_Setup+0xd0>)
 c001548:	60da      	str	r2, [r3, #12]
 c00154a:	4b28      	ldr	r3, [pc, #160]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00154c:	4a2b      	ldr	r2, [pc, #172]	; (c0015fc <TZ_SAU_Setup+0xd4>)
 c00154e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001550:	4b26      	ldr	r3, [pc, #152]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001552:	2202      	movs	r2, #2
 c001554:	609a      	str	r2, [r3, #8]
 c001556:	4b25      	ldr	r3, [pc, #148]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001558:	4a29      	ldr	r2, [pc, #164]	; (c001600 <TZ_SAU_Setup+0xd8>)
 c00155a:	60da      	str	r2, [r3, #12]
 c00155c:	4b23      	ldr	r3, [pc, #140]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00155e:	4a29      	ldr	r2, [pc, #164]	; (c001604 <TZ_SAU_Setup+0xdc>)
 c001560:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001562:	4b22      	ldr	r3, [pc, #136]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001564:	2203      	movs	r2, #3
 c001566:	609a      	str	r2, [r3, #8]
 c001568:	4b20      	ldr	r3, [pc, #128]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00156a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c00156e:	60da      	str	r2, [r3, #12]
 c001570:	4b1e      	ldr	r3, [pc, #120]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001572:	4a25      	ldr	r2, [pc, #148]	; (c001608 <TZ_SAU_Setup+0xe0>)
 c001574:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001576:	4b1d      	ldr	r3, [pc, #116]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001578:	2204      	movs	r2, #4
 c00157a:	609a      	str	r2, [r3, #8]
 c00157c:	4b1b      	ldr	r3, [pc, #108]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00157e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001582:	60da      	str	r2, [r3, #12]
 c001584:	4b19      	ldr	r3, [pc, #100]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001586:	4a21      	ldr	r2, [pc, #132]	; (c00160c <TZ_SAU_Setup+0xe4>)
 c001588:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c00158a:	4b18      	ldr	r3, [pc, #96]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00158c:	2205      	movs	r2, #5
 c00158e:	609a      	str	r2, [r3, #8]
 c001590:	4b16      	ldr	r3, [pc, #88]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001592:	4a1f      	ldr	r2, [pc, #124]	; (c001610 <TZ_SAU_Setup+0xe8>)
 c001594:	60da      	str	r2, [r3, #12]
 c001596:	4b15      	ldr	r3, [pc, #84]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c001598:	4a1e      	ldr	r2, [pc, #120]	; (c001614 <TZ_SAU_Setup+0xec>)
 c00159a:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c00159c:	4b13      	ldr	r3, [pc, #76]	; (c0015ec <TZ_SAU_Setup+0xc4>)
 c00159e:	2201      	movs	r2, #1
 c0015a0:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0015a2:	4b1d      	ldr	r3, [pc, #116]	; (c001618 <TZ_SAU_Setup+0xf0>)
 c0015a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0015a8:	4a1b      	ldr	r2, [pc, #108]	; (c001618 <TZ_SAU_Setup+0xf0>)
 c0015aa:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0015ae:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015b2:	4b1a      	ldr	r3, [pc, #104]	; (c00161c <TZ_SAU_Setup+0xf4>)
 c0015b4:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0015b6:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015ba:	4a18      	ldr	r2, [pc, #96]	; (c00161c <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0015bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0015c0:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0015c2:	4b17      	ldr	r3, [pc, #92]	; (c001620 <TZ_SAU_Setup+0xf8>)
 c0015c4:	2200      	movs	r2, #0
 c0015c6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0015ca:	4b15      	ldr	r3, [pc, #84]	; (c001620 <TZ_SAU_Setup+0xf8>)
 c0015cc:	2200      	movs	r2, #0
 c0015ce:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0015d2:	4b13      	ldr	r3, [pc, #76]	; (c001620 <TZ_SAU_Setup+0xf8>)
 c0015d4:	2200      	movs	r2, #0
 c0015d6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0015da:	4b11      	ldr	r3, [pc, #68]	; (c001620 <TZ_SAU_Setup+0xf8>)
 c0015dc:	2200      	movs	r2, #0
 c0015de:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c0015e2:	bf00      	nop
 c0015e4:	46bd      	mov	sp, r7
 c0015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015ea:	4770      	bx	lr
 c0015ec:	e000edd0 	.word	0xe000edd0
 c0015f0:	0c03e000 	.word	0x0c03e000
 c0015f4:	0c03ffe3 	.word	0x0c03ffe3
 c0015f8:	08040000 	.word	0x08040000
 c0015fc:	0807ffe1 	.word	0x0807ffe1
 c001600:	20018000 	.word	0x20018000
 c001604:	2003ffe1 	.word	0x2003ffe1
 c001608:	4fffffe1 	.word	0x4fffffe1
 c00160c:	9fffffe1 	.word	0x9fffffe1
 c001610:	0bf90000 	.word	0x0bf90000
 c001614:	0bfa8fe1 	.word	0x0bfa8fe1
 c001618:	e000ed00 	.word	0xe000ed00
 c00161c:	e000ef30 	.word	0xe000ef30
 c001620:	e000e100 	.word	0xe000e100

0c001624 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001624:	b580      	push	{r7, lr}
 c001626:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001628:	f7ff ff7e 	bl	c001528 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00162c:	4b08      	ldr	r3, [pc, #32]	; (c001650 <SystemInit+0x2c>)
 c00162e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001632:	4a07      	ldr	r2, [pc, #28]	; (c001650 <SystemInit+0x2c>)
 c001634:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001638:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c00163c:	4b05      	ldr	r3, [pc, #20]	; (c001654 <SystemInit+0x30>)
 c00163e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001642:	4a04      	ldr	r2, [pc, #16]	; (c001654 <SystemInit+0x30>)
 c001644:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001648:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c00164c:	bf00      	nop
 c00164e:	bd80      	pop	{r7, pc}
 c001650:	e000ed00 	.word	0xe000ed00
 c001654:	e002ed00 	.word	0xe002ed00

0c001658 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001658:	b480      	push	{r7}
 c00165a:	b087      	sub	sp, #28
 c00165c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c00165e:	4b4f      	ldr	r3, [pc, #316]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c001660:	681b      	ldr	r3, [r3, #0]
 c001662:	f003 0308 	and.w	r3, r3, #8
 c001666:	2b00      	cmp	r3, #0
 c001668:	d107      	bne.n	c00167a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c00166a:	4b4c      	ldr	r3, [pc, #304]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c00166c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001670:	0a1b      	lsrs	r3, r3, #8
 c001672:	f003 030f 	and.w	r3, r3, #15
 c001676:	617b      	str	r3, [r7, #20]
 c001678:	e005      	b.n	c001686 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c00167a:	4b48      	ldr	r3, [pc, #288]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c00167c:	681b      	ldr	r3, [r3, #0]
 c00167e:	091b      	lsrs	r3, r3, #4
 c001680:	f003 030f 	and.w	r3, r3, #15
 c001684:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001686:	4a46      	ldr	r2, [pc, #280]	; (c0017a0 <SystemCoreClockUpdate+0x148>)
 c001688:	697b      	ldr	r3, [r7, #20]
 c00168a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00168e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001690:	4b42      	ldr	r3, [pc, #264]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c001692:	689b      	ldr	r3, [r3, #8]
 c001694:	f003 030c 	and.w	r3, r3, #12
 c001698:	2b0c      	cmp	r3, #12
 c00169a:	d866      	bhi.n	c00176a <SystemCoreClockUpdate+0x112>
 c00169c:	a201      	add	r2, pc, #4	; (adr r2, c0016a4 <SystemCoreClockUpdate+0x4c>)
 c00169e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0016a2:	bf00      	nop
 c0016a4:	0c0016d9 	.word	0x0c0016d9
 c0016a8:	0c00176b 	.word	0x0c00176b
 c0016ac:	0c00176b 	.word	0x0c00176b
 c0016b0:	0c00176b 	.word	0x0c00176b
 c0016b4:	0c0016e1 	.word	0x0c0016e1
 c0016b8:	0c00176b 	.word	0x0c00176b
 c0016bc:	0c00176b 	.word	0x0c00176b
 c0016c0:	0c00176b 	.word	0x0c00176b
 c0016c4:	0c0016e9 	.word	0x0c0016e9
 c0016c8:	0c00176b 	.word	0x0c00176b
 c0016cc:	0c00176b 	.word	0x0c00176b
 c0016d0:	0c00176b 	.word	0x0c00176b
 c0016d4:	0c0016f1 	.word	0x0c0016f1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c0016d8:	4a32      	ldr	r2, [pc, #200]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c0016da:	697b      	ldr	r3, [r7, #20]
 c0016dc:	6013      	str	r3, [r2, #0]
      break;
 c0016de:	e048      	b.n	c001772 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c0016e0:	4b30      	ldr	r3, [pc, #192]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c0016e2:	4a31      	ldr	r2, [pc, #196]	; (c0017a8 <SystemCoreClockUpdate+0x150>)
 c0016e4:	601a      	str	r2, [r3, #0]
      break;
 c0016e6:	e044      	b.n	c001772 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0016e8:	4b2e      	ldr	r3, [pc, #184]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c0016ea:	4a30      	ldr	r2, [pc, #192]	; (c0017ac <SystemCoreClockUpdate+0x154>)
 c0016ec:	601a      	str	r2, [r3, #0]
      break;
 c0016ee:	e040      	b.n	c001772 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0016f0:	4b2a      	ldr	r3, [pc, #168]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c0016f2:	68db      	ldr	r3, [r3, #12]
 c0016f4:	f003 0303 	and.w	r3, r3, #3
 c0016f8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c0016fa:	4b28      	ldr	r3, [pc, #160]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c0016fc:	68db      	ldr	r3, [r3, #12]
 c0016fe:	091b      	lsrs	r3, r3, #4
 c001700:	f003 030f 	and.w	r3, r3, #15
 c001704:	3301      	adds	r3, #1
 c001706:	60bb      	str	r3, [r7, #8]
 c001708:	68fb      	ldr	r3, [r7, #12]
 c00170a:	2b02      	cmp	r3, #2
 c00170c:	d003      	beq.n	c001716 <SystemCoreClockUpdate+0xbe>
 c00170e:	68fb      	ldr	r3, [r7, #12]
 c001710:	2b03      	cmp	r3, #3
 c001712:	d006      	beq.n	c001722 <SystemCoreClockUpdate+0xca>
 c001714:	e00b      	b.n	c00172e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c001716:	4a24      	ldr	r2, [pc, #144]	; (c0017a8 <SystemCoreClockUpdate+0x150>)
 c001718:	68bb      	ldr	r3, [r7, #8]
 c00171a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00171e:	613b      	str	r3, [r7, #16]
          break;
 c001720:	e00b      	b.n	c00173a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c001722:	4a22      	ldr	r2, [pc, #136]	; (c0017ac <SystemCoreClockUpdate+0x154>)
 c001724:	68bb      	ldr	r3, [r7, #8]
 c001726:	fbb2 f3f3 	udiv	r3, r2, r3
 c00172a:	613b      	str	r3, [r7, #16]
          break;
 c00172c:	e005      	b.n	c00173a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c00172e:	697a      	ldr	r2, [r7, #20]
 c001730:	68bb      	ldr	r3, [r7, #8]
 c001732:	fbb2 f3f3 	udiv	r3, r2, r3
 c001736:	613b      	str	r3, [r7, #16]
          break;
 c001738:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c00173a:	4b18      	ldr	r3, [pc, #96]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c00173c:	68db      	ldr	r3, [r3, #12]
 c00173e:	0a1b      	lsrs	r3, r3, #8
 c001740:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c001744:	693b      	ldr	r3, [r7, #16]
 c001746:	fb02 f303 	mul.w	r3, r2, r3
 c00174a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c00174c:	4b13      	ldr	r3, [pc, #76]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c00174e:	68db      	ldr	r3, [r3, #12]
 c001750:	0e5b      	lsrs	r3, r3, #25
 c001752:	f003 0303 	and.w	r3, r3, #3
 c001756:	3301      	adds	r3, #1
 c001758:	005b      	lsls	r3, r3, #1
 c00175a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c00175c:	693a      	ldr	r2, [r7, #16]
 c00175e:	687b      	ldr	r3, [r7, #4]
 c001760:	fbb2 f3f3 	udiv	r3, r2, r3
 c001764:	4a0f      	ldr	r2, [pc, #60]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c001766:	6013      	str	r3, [r2, #0]
      break;
 c001768:	e003      	b.n	c001772 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c00176a:	4a0e      	ldr	r2, [pc, #56]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c00176c:	697b      	ldr	r3, [r7, #20]
 c00176e:	6013      	str	r3, [r2, #0]
      break;
 c001770:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001772:	4b0a      	ldr	r3, [pc, #40]	; (c00179c <SystemCoreClockUpdate+0x144>)
 c001774:	689b      	ldr	r3, [r3, #8]
 c001776:	091b      	lsrs	r3, r3, #4
 c001778:	f003 030f 	and.w	r3, r3, #15
 c00177c:	4a0c      	ldr	r2, [pc, #48]	; (c0017b0 <SystemCoreClockUpdate+0x158>)
 c00177e:	5cd3      	ldrb	r3, [r2, r3]
 c001780:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001782:	4b08      	ldr	r3, [pc, #32]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c001784:	681a      	ldr	r2, [r3, #0]
 c001786:	683b      	ldr	r3, [r7, #0]
 c001788:	fa22 f303 	lsr.w	r3, r2, r3
 c00178c:	4a05      	ldr	r2, [pc, #20]	; (c0017a4 <SystemCoreClockUpdate+0x14c>)
 c00178e:	6013      	str	r3, [r2, #0]
}
 c001790:	bf00      	nop
 c001792:	371c      	adds	r7, #28
 c001794:	46bd      	mov	sp, r7
 c001796:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00179a:	4770      	bx	lr
 c00179c:	50021000 	.word	0x50021000
 c0017a0:	0c0064c4 	.word	0x0c0064c4
 c0017a4:	30000000 	.word	0x30000000
 c0017a8:	00f42400 	.word	0x00f42400
 c0017ac:	007a1200 	.word	0x007a1200
 c0017b0:	0c0064ac 	.word	0x0c0064ac

0c0017b4 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0017b4:	b580      	push	{r7, lr}
 c0017b6:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0017b8:	f7ff ff4e 	bl	c001658 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0017bc:	4b1c      	ldr	r3, [pc, #112]	; (c001830 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0017be:	681b      	ldr	r3, [r3, #0]
}
 c0017c0:	4618      	mov	r0, r3
 c0017c2:	46bd      	mov	sp, r7
 c0017c4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0017c8:	4671      	mov	r1, lr
 c0017ca:	4672      	mov	r2, lr
 c0017cc:	4673      	mov	r3, lr
 c0017ce:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0017d2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0017d6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0017da:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0017de:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0017e2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0017e6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0017ea:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0017ee:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0017f2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0017f6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0017fa:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0017fe:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001802:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001806:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00180a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00180e:	f38e 8c00 	msr	CPSR_fs, lr
 c001812:	b410      	push	{r4}
 c001814:	eef1 ca10 	vmrs	ip, fpscr
 c001818:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00181c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001820:	ea0c 0c04 	and.w	ip, ip, r4
 c001824:	eee1 ca10 	vmsr	fpscr, ip
 c001828:	bc10      	pop	{r4}
 c00182a:	46f4      	mov	ip, lr
 c00182c:	4774      	bxns	lr
 c00182e:	bf00      	nop
 c001830:	30000000 	.word	0x30000000

0c001834 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001834:	f8df d034 	ldr.w	sp, [pc, #52]	; c00186c <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001838:	f7ff fef4 	bl	c001624 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00183c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00183e:	e003      	b.n	c001848 <LoopCopyDataInit>

0c001840 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001840:	4b0b      	ldr	r3, [pc, #44]	; (c001870 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001842:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001844:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001846:	3104      	adds	r1, #4

0c001848 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001848:	480a      	ldr	r0, [pc, #40]	; (c001874 <LoopForever+0xa>)
	ldr	r3, =_edata
 c00184a:	4b0b      	ldr	r3, [pc, #44]	; (c001878 <LoopForever+0xe>)
	adds	r2, r0, r1
 c00184c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c00184e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001850:	d3f6      	bcc.n	c001840 <CopyDataInit>
	ldr	r2, =_sbss
 c001852:	4a0a      	ldr	r2, [pc, #40]	; (c00187c <LoopForever+0x12>)
	b	LoopFillZerobss
 c001854:	e002      	b.n	c00185c <LoopFillZerobss>

0c001856 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001856:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001858:	f842 3b04 	str.w	r3, [r2], #4

0c00185c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c00185c:	4b08      	ldr	r3, [pc, #32]	; (c001880 <LoopForever+0x16>)
	cmp	r2, r3
 c00185e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001860:	d3f9      	bcc.n	c001856 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001862:	f003 fd85 	bl	c005370 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001866:	f7fe ff17 	bl	c000698 <main>

0c00186a <LoopForever>:

LoopForever:
    b LoopForever
 c00186a:	e7fe      	b.n	c00186a <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c00186c:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001870:	0c0065d4 	.word	0x0c0065d4
	ldr	r0, =_sdata
 c001874:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001878:	30000070 	.word	0x30000070
	ldr	r2, =_sbss
 c00187c:	30000070 	.word	0x30000070
	ldr	r3, = _ebss
 c001880:	30000618 	.word	0x30000618

0c001884 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001884:	e7fe      	b.n	c001884 <ADC1_2_IRQHandler>

0c001886 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001886:	b580      	push	{r7, lr}
 c001888:	b082      	sub	sp, #8
 c00188a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c00188c:	2300      	movs	r3, #0
 c00188e:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001890:	2004      	movs	r0, #4
 c001892:	f000 f94f 	bl	c001b34 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c001896:	f7ff fedf 	bl	c001658 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c00189a:	2000      	movs	r0, #0
 c00189c:	f000 f80e 	bl	c0018bc <HAL_InitTick>
 c0018a0:	4603      	mov	r3, r0
 c0018a2:	2b00      	cmp	r3, #0
 c0018a4:	d002      	beq.n	c0018ac <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0018a6:	2301      	movs	r3, #1
 c0018a8:	71fb      	strb	r3, [r7, #7]
 c0018aa:	e001      	b.n	c0018b0 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0018ac:	f7ff fcba 	bl	c001224 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0018b0:	79fb      	ldrb	r3, [r7, #7]
}
 c0018b2:	4618      	mov	r0, r3
 c0018b4:	3708      	adds	r7, #8
 c0018b6:	46bd      	mov	sp, r7
 c0018b8:	bd80      	pop	{r7, pc}
	...

0c0018bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0018bc:	b580      	push	{r7, lr}
 c0018be:	b084      	sub	sp, #16
 c0018c0:	af00      	add	r7, sp, #0
 c0018c2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0018c4:	2300      	movs	r3, #0
 c0018c6:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0018c8:	4b17      	ldr	r3, [pc, #92]	; (c001928 <HAL_InitTick+0x6c>)
 c0018ca:	781b      	ldrb	r3, [r3, #0]
 c0018cc:	2b00      	cmp	r3, #0
 c0018ce:	d023      	beq.n	c001918 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0018d0:	4b16      	ldr	r3, [pc, #88]	; (c00192c <HAL_InitTick+0x70>)
 c0018d2:	681a      	ldr	r2, [r3, #0]
 c0018d4:	4b14      	ldr	r3, [pc, #80]	; (c001928 <HAL_InitTick+0x6c>)
 c0018d6:	781b      	ldrb	r3, [r3, #0]
 c0018d8:	4619      	mov	r1, r3
 c0018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0018de:	fbb3 f3f1 	udiv	r3, r3, r1
 c0018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0018e6:	4618      	mov	r0, r3
 c0018e8:	f000 f957 	bl	c001b9a <HAL_SYSTICK_Config>
 c0018ec:	4603      	mov	r3, r0
 c0018ee:	2b00      	cmp	r3, #0
 c0018f0:	d10f      	bne.n	c001912 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0018f2:	687b      	ldr	r3, [r7, #4]
 c0018f4:	2b07      	cmp	r3, #7
 c0018f6:	d809      	bhi.n	c00190c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c0018f8:	2200      	movs	r2, #0
 c0018fa:	6879      	ldr	r1, [r7, #4]
 c0018fc:	f04f 30ff 	mov.w	r0, #4294967295
 c001900:	f000 f923 	bl	c001b4a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001904:	4a0a      	ldr	r2, [pc, #40]	; (c001930 <HAL_InitTick+0x74>)
 c001906:	687b      	ldr	r3, [r7, #4]
 c001908:	6013      	str	r3, [r2, #0]
 c00190a:	e007      	b.n	c00191c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c00190c:	2301      	movs	r3, #1
 c00190e:	73fb      	strb	r3, [r7, #15]
 c001910:	e004      	b.n	c00191c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001912:	2301      	movs	r3, #1
 c001914:	73fb      	strb	r3, [r7, #15]
 c001916:	e001      	b.n	c00191c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001918:	2301      	movs	r3, #1
 c00191a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c00191c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00191e:	4618      	mov	r0, r3
 c001920:	3710      	adds	r7, #16
 c001922:	46bd      	mov	sp, r7
 c001924:	bd80      	pop	{r7, pc}
 c001926:	bf00      	nop
 c001928:	30000008 	.word	0x30000008
 c00192c:	30000000 	.word	0x30000000
 c001930:	30000004 	.word	0x30000004

0c001934 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001934:	b480      	push	{r7}
 c001936:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001938:	4b06      	ldr	r3, [pc, #24]	; (c001954 <HAL_IncTick+0x20>)
 c00193a:	781b      	ldrb	r3, [r3, #0]
 c00193c:	461a      	mov	r2, r3
 c00193e:	4b06      	ldr	r3, [pc, #24]	; (c001958 <HAL_IncTick+0x24>)
 c001940:	681b      	ldr	r3, [r3, #0]
 c001942:	4413      	add	r3, r2
 c001944:	4a04      	ldr	r2, [pc, #16]	; (c001958 <HAL_IncTick+0x24>)
 c001946:	6013      	str	r3, [r2, #0]
}
 c001948:	bf00      	nop
 c00194a:	46bd      	mov	sp, r7
 c00194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001950:	4770      	bx	lr
 c001952:	bf00      	nop
 c001954:	30000008 	.word	0x30000008
 c001958:	30000604 	.word	0x30000604

0c00195c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c00195c:	b480      	push	{r7}
 c00195e:	af00      	add	r7, sp, #0
  return uwTick;
 c001960:	4b03      	ldr	r3, [pc, #12]	; (c001970 <HAL_GetTick+0x14>)
 c001962:	681b      	ldr	r3, [r3, #0]
}
 c001964:	4618      	mov	r0, r3
 c001966:	46bd      	mov	sp, r7
 c001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00196c:	4770      	bx	lr
 c00196e:	bf00      	nop
 c001970:	30000604 	.word	0x30000604

0c001974 <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 c001974:	b480      	push	{r7}
 c001976:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 c001978:	4b05      	ldr	r3, [pc, #20]	; (c001990 <HAL_SuspendTick+0x1c>)
 c00197a:	681b      	ldr	r3, [r3, #0]
 c00197c:	4a04      	ldr	r2, [pc, #16]	; (c001990 <HAL_SuspendTick+0x1c>)
 c00197e:	f023 0302 	bic.w	r3, r3, #2
 c001982:	6013      	str	r3, [r2, #0]
}
 c001984:	bf00      	nop
 c001986:	46bd      	mov	sp, r7
 c001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00198c:	4770      	bx	lr
 c00198e:	bf00      	nop
 c001990:	e000e010 	.word	0xe000e010

0c001994 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001994:	b480      	push	{r7}
 c001996:	b085      	sub	sp, #20
 c001998:	af00      	add	r7, sp, #0
 c00199a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c00199c:	687b      	ldr	r3, [r7, #4]
 c00199e:	f003 0307 	and.w	r3, r3, #7
 c0019a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0019a4:	4b0c      	ldr	r3, [pc, #48]	; (c0019d8 <__NVIC_SetPriorityGrouping+0x44>)
 c0019a6:	68db      	ldr	r3, [r3, #12]
 c0019a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0019aa:	68ba      	ldr	r2, [r7, #8]
 c0019ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0019b0:	4013      	ands	r3, r2
 c0019b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0019b4:	68fb      	ldr	r3, [r7, #12]
 c0019b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0019b8:	68bb      	ldr	r3, [r7, #8]
 c0019ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0019bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0019c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0019c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0019c6:	4a04      	ldr	r2, [pc, #16]	; (c0019d8 <__NVIC_SetPriorityGrouping+0x44>)
 c0019c8:	68bb      	ldr	r3, [r7, #8]
 c0019ca:	60d3      	str	r3, [r2, #12]
}
 c0019cc:	bf00      	nop
 c0019ce:	3714      	adds	r7, #20
 c0019d0:	46bd      	mov	sp, r7
 c0019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019d6:	4770      	bx	lr
 c0019d8:	e000ed00 	.word	0xe000ed00

0c0019dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c0019dc:	b480      	push	{r7}
 c0019de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c0019e0:	4b04      	ldr	r3, [pc, #16]	; (c0019f4 <__NVIC_GetPriorityGrouping+0x18>)
 c0019e2:	68db      	ldr	r3, [r3, #12]
 c0019e4:	0a1b      	lsrs	r3, r3, #8
 c0019e6:	f003 0307 	and.w	r3, r3, #7
}
 c0019ea:	4618      	mov	r0, r3
 c0019ec:	46bd      	mov	sp, r7
 c0019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019f2:	4770      	bx	lr
 c0019f4:	e000ed00 	.word	0xe000ed00

0c0019f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0019f8:	b480      	push	{r7}
 c0019fa:	b083      	sub	sp, #12
 c0019fc:	af00      	add	r7, sp, #0
 c0019fe:	4603      	mov	r3, r0
 c001a00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001a02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001a06:	2b00      	cmp	r3, #0
 c001a08:	db0b      	blt.n	c001a22 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001a0a:	79fb      	ldrb	r3, [r7, #7]
 c001a0c:	f003 021f 	and.w	r2, r3, #31
 c001a10:	4907      	ldr	r1, [pc, #28]	; (c001a30 <__NVIC_EnableIRQ+0x38>)
 c001a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001a16:	095b      	lsrs	r3, r3, #5
 c001a18:	2001      	movs	r0, #1
 c001a1a:	fa00 f202 	lsl.w	r2, r0, r2
 c001a1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c001a22:	bf00      	nop
 c001a24:	370c      	adds	r7, #12
 c001a26:	46bd      	mov	sp, r7
 c001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a2c:	4770      	bx	lr
 c001a2e:	bf00      	nop
 c001a30:	e000e100 	.word	0xe000e100

0c001a34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001a34:	b480      	push	{r7}
 c001a36:	b083      	sub	sp, #12
 c001a38:	af00      	add	r7, sp, #0
 c001a3a:	4603      	mov	r3, r0
 c001a3c:	6039      	str	r1, [r7, #0]
 c001a3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001a40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001a44:	2b00      	cmp	r3, #0
 c001a46:	db0a      	blt.n	c001a5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001a48:	683b      	ldr	r3, [r7, #0]
 c001a4a:	b2da      	uxtb	r2, r3
 c001a4c:	490c      	ldr	r1, [pc, #48]	; (c001a80 <__NVIC_SetPriority+0x4c>)
 c001a4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001a52:	0152      	lsls	r2, r2, #5
 c001a54:	b2d2      	uxtb	r2, r2
 c001a56:	440b      	add	r3, r1
 c001a58:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001a5c:	e00a      	b.n	c001a74 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001a5e:	683b      	ldr	r3, [r7, #0]
 c001a60:	b2da      	uxtb	r2, r3
 c001a62:	4908      	ldr	r1, [pc, #32]	; (c001a84 <__NVIC_SetPriority+0x50>)
 c001a64:	79fb      	ldrb	r3, [r7, #7]
 c001a66:	f003 030f 	and.w	r3, r3, #15
 c001a6a:	3b04      	subs	r3, #4
 c001a6c:	0152      	lsls	r2, r2, #5
 c001a6e:	b2d2      	uxtb	r2, r2
 c001a70:	440b      	add	r3, r1
 c001a72:	761a      	strb	r2, [r3, #24]
}
 c001a74:	bf00      	nop
 c001a76:	370c      	adds	r7, #12
 c001a78:	46bd      	mov	sp, r7
 c001a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001a7e:	4770      	bx	lr
 c001a80:	e000e100 	.word	0xe000e100
 c001a84:	e000ed00 	.word	0xe000ed00

0c001a88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001a88:	b480      	push	{r7}
 c001a8a:	b089      	sub	sp, #36	; 0x24
 c001a8c:	af00      	add	r7, sp, #0
 c001a8e:	60f8      	str	r0, [r7, #12]
 c001a90:	60b9      	str	r1, [r7, #8]
 c001a92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001a94:	68fb      	ldr	r3, [r7, #12]
 c001a96:	f003 0307 	and.w	r3, r3, #7
 c001a9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001a9c:	69fb      	ldr	r3, [r7, #28]
 c001a9e:	f1c3 0307 	rsb	r3, r3, #7
 c001aa2:	2b03      	cmp	r3, #3
 c001aa4:	bf28      	it	cs
 c001aa6:	2303      	movcs	r3, #3
 c001aa8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001aaa:	69fb      	ldr	r3, [r7, #28]
 c001aac:	3303      	adds	r3, #3
 c001aae:	2b06      	cmp	r3, #6
 c001ab0:	d902      	bls.n	c001ab8 <NVIC_EncodePriority+0x30>
 c001ab2:	69fb      	ldr	r3, [r7, #28]
 c001ab4:	3b04      	subs	r3, #4
 c001ab6:	e000      	b.n	c001aba <NVIC_EncodePriority+0x32>
 c001ab8:	2300      	movs	r3, #0
 c001aba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001abc:	f04f 32ff 	mov.w	r2, #4294967295
 c001ac0:	69bb      	ldr	r3, [r7, #24]
 c001ac2:	fa02 f303 	lsl.w	r3, r2, r3
 c001ac6:	43da      	mvns	r2, r3
 c001ac8:	68bb      	ldr	r3, [r7, #8]
 c001aca:	401a      	ands	r2, r3
 c001acc:	697b      	ldr	r3, [r7, #20]
 c001ace:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001ad0:	f04f 31ff 	mov.w	r1, #4294967295
 c001ad4:	697b      	ldr	r3, [r7, #20]
 c001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 c001ada:	43d9      	mvns	r1, r3
 c001adc:	687b      	ldr	r3, [r7, #4]
 c001ade:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001ae0:	4313      	orrs	r3, r2
         );
}
 c001ae2:	4618      	mov	r0, r3
 c001ae4:	3724      	adds	r7, #36	; 0x24
 c001ae6:	46bd      	mov	sp, r7
 c001ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001aec:	4770      	bx	lr
	...

0c001af0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001af0:	b580      	push	{r7, lr}
 c001af2:	b082      	sub	sp, #8
 c001af4:	af00      	add	r7, sp, #0
 c001af6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001af8:	687b      	ldr	r3, [r7, #4]
 c001afa:	3b01      	subs	r3, #1
 c001afc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001b00:	d301      	bcc.n	c001b06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001b02:	2301      	movs	r3, #1
 c001b04:	e00f      	b.n	c001b26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001b06:	4a0a      	ldr	r2, [pc, #40]	; (c001b30 <SysTick_Config+0x40>)
 c001b08:	687b      	ldr	r3, [r7, #4]
 c001b0a:	3b01      	subs	r3, #1
 c001b0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001b0e:	2107      	movs	r1, #7
 c001b10:	f04f 30ff 	mov.w	r0, #4294967295
 c001b14:	f7ff ff8e 	bl	c001a34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001b18:	4b05      	ldr	r3, [pc, #20]	; (c001b30 <SysTick_Config+0x40>)
 c001b1a:	2200      	movs	r2, #0
 c001b1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c001b1e:	4b04      	ldr	r3, [pc, #16]	; (c001b30 <SysTick_Config+0x40>)
 c001b20:	2207      	movs	r2, #7
 c001b22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001b24:	2300      	movs	r3, #0
}
 c001b26:	4618      	mov	r0, r3
 c001b28:	3708      	adds	r7, #8
 c001b2a:	46bd      	mov	sp, r7
 c001b2c:	bd80      	pop	{r7, pc}
 c001b2e:	bf00      	nop
 c001b30:	e000e010 	.word	0xe000e010

0c001b34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001b34:	b580      	push	{r7, lr}
 c001b36:	b082      	sub	sp, #8
 c001b38:	af00      	add	r7, sp, #0
 c001b3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c001b3c:	6878      	ldr	r0, [r7, #4]
 c001b3e:	f7ff ff29 	bl	c001994 <__NVIC_SetPriorityGrouping>
}
 c001b42:	bf00      	nop
 c001b44:	3708      	adds	r7, #8
 c001b46:	46bd      	mov	sp, r7
 c001b48:	bd80      	pop	{r7, pc}

0c001b4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001b4a:	b580      	push	{r7, lr}
 c001b4c:	b086      	sub	sp, #24
 c001b4e:	af00      	add	r7, sp, #0
 c001b50:	4603      	mov	r3, r0
 c001b52:	60b9      	str	r1, [r7, #8]
 c001b54:	607a      	str	r2, [r7, #4]
 c001b56:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001b58:	f7ff ff40 	bl	c0019dc <__NVIC_GetPriorityGrouping>
 c001b5c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c001b5e:	687a      	ldr	r2, [r7, #4]
 c001b60:	68b9      	ldr	r1, [r7, #8]
 c001b62:	6978      	ldr	r0, [r7, #20]
 c001b64:	f7ff ff90 	bl	c001a88 <NVIC_EncodePriority>
 c001b68:	4602      	mov	r2, r0
 c001b6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c001b6e:	4611      	mov	r1, r2
 c001b70:	4618      	mov	r0, r3
 c001b72:	f7ff ff5f 	bl	c001a34 <__NVIC_SetPriority>
}
 c001b76:	bf00      	nop
 c001b78:	3718      	adds	r7, #24
 c001b7a:	46bd      	mov	sp, r7
 c001b7c:	bd80      	pop	{r7, pc}

0c001b7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001b7e:	b580      	push	{r7, lr}
 c001b80:	b082      	sub	sp, #8
 c001b82:	af00      	add	r7, sp, #0
 c001b84:	4603      	mov	r3, r0
 c001b86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001b88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001b8c:	4618      	mov	r0, r3
 c001b8e:	f7ff ff33 	bl	c0019f8 <__NVIC_EnableIRQ>
}
 c001b92:	bf00      	nop
 c001b94:	3708      	adds	r7, #8
 c001b96:	46bd      	mov	sp, r7
 c001b98:	bd80      	pop	{r7, pc}

0c001b9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001b9a:	b580      	push	{r7, lr}
 c001b9c:	b082      	sub	sp, #8
 c001b9e:	af00      	add	r7, sp, #0
 c001ba0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c001ba2:	6878      	ldr	r0, [r7, #4]
 c001ba4:	f7ff ffa4 	bl	c001af0 <SysTick_Config>
 c001ba8:	4603      	mov	r3, r0
}
 c001baa:	4618      	mov	r0, r3
 c001bac:	3708      	adds	r7, #8
 c001bae:	46bd      	mov	sp, r7
 c001bb0:	bd80      	pop	{r7, pc}
	...

0c001bb4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c001bb4:	b580      	push	{r7, lr}
 c001bb6:	b084      	sub	sp, #16
 c001bb8:	af00      	add	r7, sp, #0
 c001bba:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c001bbc:	687b      	ldr	r3, [r7, #4]
 c001bbe:	2b00      	cmp	r3, #0
 c001bc0:	d101      	bne.n	c001bc6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c001bc2:	2301      	movs	r3, #1
 c001bc4:	e08d      	b.n	c001ce2 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c001bc6:	687b      	ldr	r3, [r7, #4]
 c001bc8:	681b      	ldr	r3, [r3, #0]
 c001bca:	461a      	mov	r2, r3
 c001bcc:	4b47      	ldr	r3, [pc, #284]	; (c001cec <HAL_DMA_Init+0x138>)
 c001bce:	429a      	cmp	r2, r3
 c001bd0:	d80f      	bhi.n	c001bf2 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c001bd2:	687b      	ldr	r3, [r7, #4]
 c001bd4:	681b      	ldr	r3, [r3, #0]
 c001bd6:	461a      	mov	r2, r3
 c001bd8:	4b45      	ldr	r3, [pc, #276]	; (c001cf0 <HAL_DMA_Init+0x13c>)
 c001bda:	4413      	add	r3, r2
 c001bdc:	4a45      	ldr	r2, [pc, #276]	; (c001cf4 <HAL_DMA_Init+0x140>)
 c001bde:	fba2 2303 	umull	r2, r3, r2, r3
 c001be2:	091b      	lsrs	r3, r3, #4
 c001be4:	009a      	lsls	r2, r3, #2
 c001be6:	687b      	ldr	r3, [r7, #4]
 c001be8:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c001bea:	687b      	ldr	r3, [r7, #4]
 c001bec:	4a42      	ldr	r2, [pc, #264]	; (c001cf8 <HAL_DMA_Init+0x144>)
 c001bee:	649a      	str	r2, [r3, #72]	; 0x48
 c001bf0:	e00e      	b.n	c001c10 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c001bf2:	687b      	ldr	r3, [r7, #4]
 c001bf4:	681b      	ldr	r3, [r3, #0]
 c001bf6:	461a      	mov	r2, r3
 c001bf8:	4b40      	ldr	r3, [pc, #256]	; (c001cfc <HAL_DMA_Init+0x148>)
 c001bfa:	4413      	add	r3, r2
 c001bfc:	4a3d      	ldr	r2, [pc, #244]	; (c001cf4 <HAL_DMA_Init+0x140>)
 c001bfe:	fba2 2303 	umull	r2, r3, r2, r3
 c001c02:	091b      	lsrs	r3, r3, #4
 c001c04:	009a      	lsls	r2, r3, #2
 c001c06:	687b      	ldr	r3, [r7, #4]
 c001c08:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c001c0a:	687b      	ldr	r3, [r7, #4]
 c001c0c:	4a3c      	ldr	r2, [pc, #240]	; (c001d00 <HAL_DMA_Init+0x14c>)
 c001c0e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c001c10:	687b      	ldr	r3, [r7, #4]
 c001c12:	2202      	movs	r2, #2
 c001c14:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c001c18:	687b      	ldr	r3, [r7, #4]
 c001c1a:	681b      	ldr	r3, [r3, #0]
 c001c1c:	681b      	ldr	r3, [r3, #0]
 c001c1e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c001c20:	68fb      	ldr	r3, [r7, #12]
 c001c22:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c001c26:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c001c2a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c001c2c:	687b      	ldr	r3, [r7, #4]
 c001c2e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001c30:	687b      	ldr	r3, [r7, #4]
 c001c32:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c001c34:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001c36:	687b      	ldr	r3, [r7, #4]
 c001c38:	691b      	ldr	r3, [r3, #16]
 c001c3a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c001c3c:	687b      	ldr	r3, [r7, #4]
 c001c3e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001c40:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c001c42:	687b      	ldr	r3, [r7, #4]
 c001c44:	699b      	ldr	r3, [r3, #24]
 c001c46:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c001c48:	687b      	ldr	r3, [r7, #4]
 c001c4a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c001c4c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c001c4e:	687b      	ldr	r3, [r7, #4]
 c001c50:	6a1b      	ldr	r3, [r3, #32]
 c001c52:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c001c54:	68fa      	ldr	r2, [r7, #12]
 c001c56:	4313      	orrs	r3, r2
 c001c58:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c001c5a:	687b      	ldr	r3, [r7, #4]
 c001c5c:	681b      	ldr	r3, [r3, #0]
 c001c5e:	68fa      	ldr	r2, [r7, #12]
 c001c60:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c001c62:	6878      	ldr	r0, [r7, #4]
 c001c64:	f000 fae4 	bl	c002230 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c001c68:	687b      	ldr	r3, [r7, #4]
 c001c6a:	689b      	ldr	r3, [r3, #8]
 c001c6c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c001c70:	d102      	bne.n	c001c78 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c001c72:	687b      	ldr	r3, [r7, #4]
 c001c74:	2200      	movs	r2, #0
 c001c76:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c001c78:	687b      	ldr	r3, [r7, #4]
 c001c7a:	685a      	ldr	r2, [r3, #4]
 c001c7c:	687b      	ldr	r3, [r7, #4]
 c001c7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001c80:	b2d2      	uxtb	r2, r2
 c001c82:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c001c84:	687b      	ldr	r3, [r7, #4]
 c001c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c001c88:	687a      	ldr	r2, [r7, #4]
 c001c8a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c001c8c:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c001c8e:	687b      	ldr	r3, [r7, #4]
 c001c90:	685b      	ldr	r3, [r3, #4]
 c001c92:	2b00      	cmp	r3, #0
 c001c94:	d010      	beq.n	c001cb8 <HAL_DMA_Init+0x104>
 c001c96:	687b      	ldr	r3, [r7, #4]
 c001c98:	685b      	ldr	r3, [r3, #4]
 c001c9a:	2b04      	cmp	r3, #4
 c001c9c:	d80c      	bhi.n	c001cb8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c001c9e:	6878      	ldr	r0, [r7, #4]
 c001ca0:	f000 fb04 	bl	c0022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c001ca4:	687b      	ldr	r3, [r7, #4]
 c001ca6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001ca8:	2200      	movs	r2, #0
 c001caa:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c001cac:	687b      	ldr	r3, [r7, #4]
 c001cae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001cb0:	687a      	ldr	r2, [r7, #4]
 c001cb2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c001cb4:	605a      	str	r2, [r3, #4]
 c001cb6:	e008      	b.n	c001cca <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c001cb8:	687b      	ldr	r3, [r7, #4]
 c001cba:	2200      	movs	r2, #0
 c001cbc:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c001cbe:	687b      	ldr	r3, [r7, #4]
 c001cc0:	2200      	movs	r2, #0
 c001cc2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c001cc4:	687b      	ldr	r3, [r7, #4]
 c001cc6:	2200      	movs	r2, #0
 c001cc8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c001cca:	687b      	ldr	r3, [r7, #4]
 c001ccc:	2200      	movs	r2, #0
 c001cce:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c001cd0:	687b      	ldr	r3, [r7, #4]
 c001cd2:	2201      	movs	r2, #1
 c001cd4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c001cd8:	687b      	ldr	r3, [r7, #4]
 c001cda:	2200      	movs	r2, #0
 c001cdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c001ce0:	2300      	movs	r3, #0
}
 c001ce2:	4618      	mov	r0, r3
 c001ce4:	3710      	adds	r7, #16
 c001ce6:	46bd      	mov	sp, r7
 c001ce8:	bd80      	pop	{r7, pc}
 c001cea:	bf00      	nop
 c001cec:	50020407 	.word	0x50020407
 c001cf0:	affdfff8 	.word	0xaffdfff8
 c001cf4:	cccccccd 	.word	0xcccccccd
 c001cf8:	50020000 	.word	0x50020000
 c001cfc:	affdfbf8 	.word	0xaffdfbf8
 c001d00:	50020400 	.word	0x50020400

0c001d04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c001d04:	b580      	push	{r7, lr}
 c001d06:	b086      	sub	sp, #24
 c001d08:	af00      	add	r7, sp, #0
 c001d0a:	60f8      	str	r0, [r7, #12]
 c001d0c:	60b9      	str	r1, [r7, #8]
 c001d0e:	607a      	str	r2, [r7, #4]
 c001d10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c001d12:	2300      	movs	r3, #0
 c001d14:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c001d16:	68fb      	ldr	r3, [r7, #12]
 c001d18:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c001d1c:	2b01      	cmp	r3, #1
 c001d1e:	d101      	bne.n	c001d24 <HAL_DMA_Start_IT+0x20>
 c001d20:	2302      	movs	r3, #2
 c001d22:	e066      	b.n	c001df2 <HAL_DMA_Start_IT+0xee>
 c001d24:	68fb      	ldr	r3, [r7, #12]
 c001d26:	2201      	movs	r2, #1
 c001d28:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c001d2c:	68fb      	ldr	r3, [r7, #12]
 c001d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c001d32:	b2db      	uxtb	r3, r3
 c001d34:	2b01      	cmp	r3, #1
 c001d36:	d155      	bne.n	c001de4 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c001d38:	68fb      	ldr	r3, [r7, #12]
 c001d3a:	2202      	movs	r2, #2
 c001d3c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c001d40:	68fb      	ldr	r3, [r7, #12]
 c001d42:	2200      	movs	r2, #0
 c001d44:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c001d46:	68fb      	ldr	r3, [r7, #12]
 c001d48:	681b      	ldr	r3, [r3, #0]
 c001d4a:	681a      	ldr	r2, [r3, #0]
 c001d4c:	68fb      	ldr	r3, [r7, #12]
 c001d4e:	681b      	ldr	r3, [r3, #0]
 c001d50:	f022 0201 	bic.w	r2, r2, #1
 c001d54:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c001d56:	683b      	ldr	r3, [r7, #0]
 c001d58:	687a      	ldr	r2, [r7, #4]
 c001d5a:	68b9      	ldr	r1, [r7, #8]
 c001d5c:	68f8      	ldr	r0, [r7, #12]
 c001d5e:	f000 fa29 	bl	c0021b4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c001d62:	68fb      	ldr	r3, [r7, #12]
 c001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001d66:	2b00      	cmp	r3, #0
 c001d68:	d008      	beq.n	c001d7c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c001d6a:	68fb      	ldr	r3, [r7, #12]
 c001d6c:	681b      	ldr	r3, [r3, #0]
 c001d6e:	681a      	ldr	r2, [r3, #0]
 c001d70:	68fb      	ldr	r3, [r7, #12]
 c001d72:	681b      	ldr	r3, [r3, #0]
 c001d74:	f042 020e 	orr.w	r2, r2, #14
 c001d78:	601a      	str	r2, [r3, #0]
 c001d7a:	e00f      	b.n	c001d9c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c001d7c:	68fb      	ldr	r3, [r7, #12]
 c001d7e:	681b      	ldr	r3, [r3, #0]
 c001d80:	681a      	ldr	r2, [r3, #0]
 c001d82:	68fb      	ldr	r3, [r7, #12]
 c001d84:	681b      	ldr	r3, [r3, #0]
 c001d86:	f022 0204 	bic.w	r2, r2, #4
 c001d8a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c001d8c:	68fb      	ldr	r3, [r7, #12]
 c001d8e:	681b      	ldr	r3, [r3, #0]
 c001d90:	681a      	ldr	r2, [r3, #0]
 c001d92:	68fb      	ldr	r3, [r7, #12]
 c001d94:	681b      	ldr	r3, [r3, #0]
 c001d96:	f042 020a 	orr.w	r2, r2, #10
 c001d9a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c001d9c:	68fb      	ldr	r3, [r7, #12]
 c001d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001da0:	681b      	ldr	r3, [r3, #0]
 c001da2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001da6:	2b00      	cmp	r3, #0
 c001da8:	d007      	beq.n	c001dba <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c001daa:	68fb      	ldr	r3, [r7, #12]
 c001dac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001dae:	681a      	ldr	r2, [r3, #0]
 c001db0:	68fb      	ldr	r3, [r7, #12]
 c001db2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c001db4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c001db8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c001dba:	68fb      	ldr	r3, [r7, #12]
 c001dbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001dbe:	2b00      	cmp	r3, #0
 c001dc0:	d007      	beq.n	c001dd2 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c001dc2:	68fb      	ldr	r3, [r7, #12]
 c001dc4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001dc6:	681a      	ldr	r2, [r3, #0]
 c001dc8:	68fb      	ldr	r3, [r7, #12]
 c001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001dcc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c001dd0:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c001dd2:	68fb      	ldr	r3, [r7, #12]
 c001dd4:	681b      	ldr	r3, [r3, #0]
 c001dd6:	681a      	ldr	r2, [r3, #0]
 c001dd8:	68fb      	ldr	r3, [r7, #12]
 c001dda:	681b      	ldr	r3, [r3, #0]
 c001ddc:	f042 0201 	orr.w	r2, r2, #1
 c001de0:	601a      	str	r2, [r3, #0]
 c001de2:	e005      	b.n	c001df0 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c001de4:	68fb      	ldr	r3, [r7, #12]
 c001de6:	2200      	movs	r2, #0
 c001de8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c001dec:	2302      	movs	r3, #2
 c001dee:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c001df0:	7dfb      	ldrb	r3, [r7, #23]
}
 c001df2:	4618      	mov	r0, r3
 c001df4:	3718      	adds	r7, #24
 c001df6:	46bd      	mov	sp, r7
 c001df8:	bd80      	pop	{r7, pc}

0c001dfa <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c001dfa:	b580      	push	{r7, lr}
 c001dfc:	b084      	sub	sp, #16
 c001dfe:	af00      	add	r7, sp, #0
 c001e00:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c001e02:	687b      	ldr	r3, [r7, #4]
 c001e04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001e06:	681b      	ldr	r3, [r3, #0]
 c001e08:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c001e0a:	687b      	ldr	r3, [r7, #4]
 c001e0c:	681b      	ldr	r3, [r3, #0]
 c001e0e:	681b      	ldr	r3, [r3, #0]
 c001e10:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c001e12:	687b      	ldr	r3, [r7, #4]
 c001e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001e16:	f003 031c 	and.w	r3, r3, #28
 c001e1a:	2204      	movs	r2, #4
 c001e1c:	409a      	lsls	r2, r3
 c001e1e:	68fb      	ldr	r3, [r7, #12]
 c001e20:	4013      	ands	r3, r2
 c001e22:	2b00      	cmp	r3, #0
 c001e24:	d053      	beq.n	c001ece <HAL_DMA_IRQHandler+0xd4>
 c001e26:	68bb      	ldr	r3, [r7, #8]
 c001e28:	f003 0304 	and.w	r3, r3, #4
 c001e2c:	2b00      	cmp	r3, #0
 c001e2e:	d04e      	beq.n	c001ece <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001e30:	687b      	ldr	r3, [r7, #4]
 c001e32:	681b      	ldr	r3, [r3, #0]
 c001e34:	681b      	ldr	r3, [r3, #0]
 c001e36:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001e3a:	2b00      	cmp	r3, #0
 c001e3c:	d024      	beq.n	c001e88 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c001e3e:	687b      	ldr	r3, [r7, #4]
 c001e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001e42:	f003 021c 	and.w	r2, r3, #28
 c001e46:	687b      	ldr	r3, [r7, #4]
 c001e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001e4a:	2104      	movs	r1, #4
 c001e4c:	fa01 f202 	lsl.w	r2, r1, r2
 c001e50:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c001e52:	687b      	ldr	r3, [r7, #4]
 c001e54:	681b      	ldr	r3, [r3, #0]
 c001e56:	681b      	ldr	r3, [r3, #0]
 c001e58:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001e5c:	2b00      	cmp	r3, #0
 c001e5e:	d109      	bne.n	c001e74 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c001e60:	687b      	ldr	r3, [r7, #4]
 c001e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001e64:	2b00      	cmp	r3, #0
 c001e66:	f000 80c0 	beq.w	c001fea <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c001e6a:	687b      	ldr	r3, [r7, #4]
 c001e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001e6e:	6878      	ldr	r0, [r7, #4]
 c001e70:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001e72:	e0ba      	b.n	c001fea <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c001e74:	687b      	ldr	r3, [r7, #4]
 c001e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001e78:	2b00      	cmp	r3, #0
 c001e7a:	f000 80b6 	beq.w	c001fea <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c001e7e:	687b      	ldr	r3, [r7, #4]
 c001e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001e82:	6878      	ldr	r0, [r7, #4]
 c001e84:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001e86:	e0b0      	b.n	c001fea <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c001e88:	687b      	ldr	r3, [r7, #4]
 c001e8a:	681b      	ldr	r3, [r3, #0]
 c001e8c:	681b      	ldr	r3, [r3, #0]
 c001e8e:	f003 0320 	and.w	r3, r3, #32
 c001e92:	2b00      	cmp	r3, #0
 c001e94:	d107      	bne.n	c001ea6 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c001e96:	687b      	ldr	r3, [r7, #4]
 c001e98:	681b      	ldr	r3, [r3, #0]
 c001e9a:	681a      	ldr	r2, [r3, #0]
 c001e9c:	687b      	ldr	r3, [r7, #4]
 c001e9e:	681b      	ldr	r3, [r3, #0]
 c001ea0:	f022 0204 	bic.w	r2, r2, #4
 c001ea4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c001ea6:	687b      	ldr	r3, [r7, #4]
 c001ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001eaa:	f003 021c 	and.w	r2, r3, #28
 c001eae:	687b      	ldr	r3, [r7, #4]
 c001eb0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001eb2:	2104      	movs	r1, #4
 c001eb4:	fa01 f202 	lsl.w	r2, r1, r2
 c001eb8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c001eba:	687b      	ldr	r3, [r7, #4]
 c001ebc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001ebe:	2b00      	cmp	r3, #0
 c001ec0:	f000 8093 	beq.w	c001fea <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c001ec4:	687b      	ldr	r3, [r7, #4]
 c001ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001ec8:	6878      	ldr	r0, [r7, #4]
 c001eca:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001ecc:	e08d      	b.n	c001fea <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c001ece:	687b      	ldr	r3, [r7, #4]
 c001ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ed2:	f003 031c 	and.w	r3, r3, #28
 c001ed6:	2202      	movs	r2, #2
 c001ed8:	409a      	lsls	r2, r3
 c001eda:	68fb      	ldr	r3, [r7, #12]
 c001edc:	4013      	ands	r3, r2
 c001ede:	2b00      	cmp	r3, #0
 c001ee0:	d04e      	beq.n	c001f80 <HAL_DMA_IRQHandler+0x186>
 c001ee2:	68bb      	ldr	r3, [r7, #8]
 c001ee4:	f003 0302 	and.w	r3, r3, #2
 c001ee8:	2b00      	cmp	r3, #0
 c001eea:	d049      	beq.n	c001f80 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001eec:	687b      	ldr	r3, [r7, #4]
 c001eee:	681b      	ldr	r3, [r3, #0]
 c001ef0:	681b      	ldr	r3, [r3, #0]
 c001ef2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001ef6:	2b00      	cmp	r3, #0
 c001ef8:	d018      	beq.n	c001f2c <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c001efa:	687b      	ldr	r3, [r7, #4]
 c001efc:	681b      	ldr	r3, [r3, #0]
 c001efe:	681b      	ldr	r3, [r3, #0]
 c001f00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001f04:	2b00      	cmp	r3, #0
 c001f06:	d108      	bne.n	c001f1a <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c001f08:	687b      	ldr	r3, [r7, #4]
 c001f0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001f0c:	2b00      	cmp	r3, #0
 c001f0e:	d06e      	beq.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c001f10:	687b      	ldr	r3, [r7, #4]
 c001f12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001f14:	6878      	ldr	r0, [r7, #4]
 c001f16:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001f18:	e069      	b.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c001f1a:	687b      	ldr	r3, [r7, #4]
 c001f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001f1e:	2b00      	cmp	r3, #0
 c001f20:	d065      	beq.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c001f22:	687b      	ldr	r3, [r7, #4]
 c001f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001f26:	6878      	ldr	r0, [r7, #4]
 c001f28:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001f2a:	e060      	b.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c001f2c:	687b      	ldr	r3, [r7, #4]
 c001f2e:	681b      	ldr	r3, [r3, #0]
 c001f30:	681b      	ldr	r3, [r3, #0]
 c001f32:	f003 0320 	and.w	r3, r3, #32
 c001f36:	2b00      	cmp	r3, #0
 c001f38:	d10b      	bne.n	c001f52 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c001f3a:	687b      	ldr	r3, [r7, #4]
 c001f3c:	681b      	ldr	r3, [r3, #0]
 c001f3e:	681a      	ldr	r2, [r3, #0]
 c001f40:	687b      	ldr	r3, [r7, #4]
 c001f42:	681b      	ldr	r3, [r3, #0]
 c001f44:	f022 020a 	bic.w	r2, r2, #10
 c001f48:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c001f4a:	687b      	ldr	r3, [r7, #4]
 c001f4c:	2201      	movs	r2, #1
 c001f4e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c001f52:	687b      	ldr	r3, [r7, #4]
 c001f54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001f56:	f003 021c 	and.w	r2, r3, #28
 c001f5a:	687b      	ldr	r3, [r7, #4]
 c001f5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001f5e:	2102      	movs	r1, #2
 c001f60:	fa01 f202 	lsl.w	r2, r1, r2
 c001f64:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c001f66:	687b      	ldr	r3, [r7, #4]
 c001f68:	2200      	movs	r2, #0
 c001f6a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c001f6e:	687b      	ldr	r3, [r7, #4]
 c001f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001f72:	2b00      	cmp	r3, #0
 c001f74:	d03b      	beq.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c001f76:	687b      	ldr	r3, [r7, #4]
 c001f78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001f7a:	6878      	ldr	r0, [r7, #4]
 c001f7c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001f7e:	e036      	b.n	c001fee <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c001f80:	687b      	ldr	r3, [r7, #4]
 c001f82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001f84:	f003 031c 	and.w	r3, r3, #28
 c001f88:	2208      	movs	r2, #8
 c001f8a:	409a      	lsls	r2, r3
 c001f8c:	68fb      	ldr	r3, [r7, #12]
 c001f8e:	4013      	ands	r3, r2
 c001f90:	2b00      	cmp	r3, #0
 c001f92:	d02e      	beq.n	c001ff2 <HAL_DMA_IRQHandler+0x1f8>
 c001f94:	68bb      	ldr	r3, [r7, #8]
 c001f96:	f003 0308 	and.w	r3, r3, #8
 c001f9a:	2b00      	cmp	r3, #0
 c001f9c:	d029      	beq.n	c001ff2 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c001f9e:	687b      	ldr	r3, [r7, #4]
 c001fa0:	681b      	ldr	r3, [r3, #0]
 c001fa2:	681a      	ldr	r2, [r3, #0]
 c001fa4:	687b      	ldr	r3, [r7, #4]
 c001fa6:	681b      	ldr	r3, [r3, #0]
 c001fa8:	f022 020e 	bic.w	r2, r2, #14
 c001fac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c001fae:	687b      	ldr	r3, [r7, #4]
 c001fb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001fb2:	f003 021c 	and.w	r2, r3, #28
 c001fb6:	687b      	ldr	r3, [r7, #4]
 c001fb8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001fba:	2101      	movs	r1, #1
 c001fbc:	fa01 f202 	lsl.w	r2, r1, r2
 c001fc0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c001fc2:	687b      	ldr	r3, [r7, #4]
 c001fc4:	2201      	movs	r2, #1
 c001fc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c001fc8:	687b      	ldr	r3, [r7, #4]
 c001fca:	2201      	movs	r2, #1
 c001fcc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c001fd0:	687b      	ldr	r3, [r7, #4]
 c001fd2:	2200      	movs	r2, #0
 c001fd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c001fd8:	687b      	ldr	r3, [r7, #4]
 c001fda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001fdc:	2b00      	cmp	r3, #0
 c001fde:	d008      	beq.n	c001ff2 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c001fe0:	687b      	ldr	r3, [r7, #4]
 c001fe2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001fe4:	6878      	ldr	r0, [r7, #4]
 c001fe6:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c001fe8:	e002      	b.n	c001ff0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001fea:	bf00      	nop
 c001fec:	e000      	b.n	c001ff0 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001fee:	bf00      	nop
  return;
 c001ff0:	bf00      	nop
 c001ff2:	bf00      	nop
}
 c001ff4:	3710      	adds	r7, #16
 c001ff6:	46bd      	mov	sp, r7
 c001ff8:	bd80      	pop	{r7, pc}
	...

0c001ffc <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 c001ffc:	b480      	push	{r7}
 c001ffe:	b087      	sub	sp, #28
 c002000:	af00      	add	r7, sp, #0
 c002002:	60f8      	str	r0, [r7, #12]
 c002004:	460b      	mov	r3, r1
 c002006:	607a      	str	r2, [r7, #4]
 c002008:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 c00200a:	2300      	movs	r3, #0
 c00200c:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 c00200e:	68fb      	ldr	r3, [r7, #12]
 c002010:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c002014:	2b01      	cmp	r3, #1
 c002016:	d101      	bne.n	c00201c <HAL_DMA_RegisterCallback+0x20>
 c002018:	2302      	movs	r3, #2
 c00201a:	e03d      	b.n	c002098 <HAL_DMA_RegisterCallback+0x9c>
 c00201c:	68fb      	ldr	r3, [r7, #12]
 c00201e:	2201      	movs	r2, #1
 c002020:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c002024:	68fb      	ldr	r3, [r7, #12]
 c002026:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c00202a:	b2db      	uxtb	r3, r3
 c00202c:	2b01      	cmp	r3, #1
 c00202e:	d12c      	bne.n	c00208a <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 c002030:	7afb      	ldrb	r3, [r7, #11]
 c002032:	2b05      	cmp	r3, #5
 c002034:	d826      	bhi.n	c002084 <HAL_DMA_RegisterCallback+0x88>
 c002036:	a201      	add	r2, pc, #4	; (adr r2, c00203c <HAL_DMA_RegisterCallback+0x40>)
 c002038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00203c:	0c002055 	.word	0x0c002055
 c002040:	0c00205d 	.word	0x0c00205d
 c002044:	0c002065 	.word	0x0c002065
 c002048:	0c00206d 	.word	0x0c00206d
 c00204c:	0c002075 	.word	0x0c002075
 c002050:	0c00207d 	.word	0x0c00207d
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 c002054:	68fb      	ldr	r3, [r7, #12]
 c002056:	687a      	ldr	r2, [r7, #4]
 c002058:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 c00205a:	e018      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 c00205c:	68fb      	ldr	r3, [r7, #12]
 c00205e:	687a      	ldr	r2, [r7, #4]
 c002060:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 c002062:	e014      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1CPLT_CB_ID:
           hdma->XferM1CpltCallback = pCallback;
 c002064:	68fb      	ldr	r3, [r7, #12]
 c002066:	687a      	ldr	r2, [r7, #4]
 c002068:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 c00206a:	e010      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
           hdma->XferM1HalfCpltCallback = pCallback;
 c00206c:	68fb      	ldr	r3, [r7, #12]
 c00206e:	687a      	ldr	r2, [r7, #4]
 c002070:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 c002072:	e00c      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 c002074:	68fb      	ldr	r3, [r7, #12]
 c002076:	687a      	ldr	r2, [r7, #4]
 c002078:	63da      	str	r2, [r3, #60]	; 0x3c
           break;
 c00207a:	e008      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 c00207c:	68fb      	ldr	r3, [r7, #12]
 c00207e:	687a      	ldr	r2, [r7, #4]
 c002080:	641a      	str	r2, [r3, #64]	; 0x40
           break;
 c002082:	e004      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>

     default:
           status = HAL_ERROR;
 c002084:	2301      	movs	r3, #1
 c002086:	75fb      	strb	r3, [r7, #23]
           break;
 c002088:	e001      	b.n	c00208e <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    status = HAL_ERROR;
 c00208a:	2301      	movs	r3, #1
 c00208c:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 c00208e:	68fb      	ldr	r3, [r7, #12]
 c002090:	2200      	movs	r2, #0
 c002092:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 c002096:	7dfb      	ldrb	r3, [r7, #23]
}
 c002098:	4618      	mov	r0, r3
 c00209a:	371c      	adds	r7, #28
 c00209c:	46bd      	mov	sp, r7
 c00209e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0020a2:	4770      	bx	lr

0c0020a4 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c0020a4:	b480      	push	{r7}
 c0020a6:	b087      	sub	sp, #28
 c0020a8:	af00      	add	r7, sp, #0
 c0020aa:	6078      	str	r0, [r7, #4]
 c0020ac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0020ae:	2300      	movs	r3, #0
 c0020b0:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c0020b2:	687b      	ldr	r3, [r7, #4]
 c0020b4:	2b00      	cmp	r3, #0
 c0020b6:	d103      	bne.n	c0020c0 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c0020b8:	2301      	movs	r3, #1
 c0020ba:	75fb      	strb	r3, [r7, #23]
    return status;
 c0020bc:	7dfb      	ldrb	r3, [r7, #23]
 c0020be:	e073      	b.n	c0021a8 <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c0020c0:	687b      	ldr	r3, [r7, #4]
 c0020c2:	681b      	ldr	r3, [r3, #0]
 c0020c4:	681b      	ldr	r3, [r3, #0]
 c0020c6:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c0020c8:	683b      	ldr	r3, [r7, #0]
 c0020ca:	f003 0310 	and.w	r3, r3, #16
 c0020ce:	2b00      	cmp	r3, #0
 c0020d0:	d00d      	beq.n	c0020ee <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c0020d2:	683b      	ldr	r3, [r7, #0]
 c0020d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0020d8:	2b00      	cmp	r3, #0
 c0020da:	d004      	beq.n	c0020e6 <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c0020dc:	693b      	ldr	r3, [r7, #16]
 c0020de:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0020e2:	613b      	str	r3, [r7, #16]
 c0020e4:	e003      	b.n	c0020ee <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c0020e6:	693b      	ldr	r3, [r7, #16]
 c0020e8:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0020ec:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c0020ee:	687b      	ldr	r3, [r7, #4]
 c0020f0:	681b      	ldr	r3, [r3, #0]
 c0020f2:	681b      	ldr	r3, [r3, #0]
 c0020f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0020f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c0020fc:	d103      	bne.n	c002106 <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c0020fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c002102:	60fb      	str	r3, [r7, #12]
 c002104:	e001      	b.n	c00210a <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c002106:	2300      	movs	r3, #0
 c002108:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c00210a:	683b      	ldr	r3, [r7, #0]
 c00210c:	f003 0302 	and.w	r3, r3, #2
 c002110:	2b00      	cmp	r3, #0
 c002112:	d012      	beq.n	c00213a <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c002114:	683b      	ldr	r3, [r7, #0]
 c002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00211a:	2b00      	cmp	r3, #0
 c00211c:	d007      	beq.n	c00212e <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c00211e:	693b      	ldr	r3, [r7, #16]
 c002120:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c002124:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c002126:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c00212a:	60fb      	str	r3, [r7, #12]
 c00212c:	e005      	b.n	c00213a <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c00212e:	693b      	ldr	r3, [r7, #16]
 c002130:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c002134:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c002136:	2300      	movs	r3, #0
 c002138:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c00213a:	683b      	ldr	r3, [r7, #0]
 c00213c:	f003 0304 	and.w	r3, r3, #4
 c002140:	2b00      	cmp	r3, #0
 c002142:	d013      	beq.n	c00216c <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c002144:	683b      	ldr	r3, [r7, #0]
 c002146:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00214a:	2b00      	cmp	r3, #0
 c00214c:	d00a      	beq.n	c002164 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c00214e:	68fb      	ldr	r3, [r7, #12]
 c002150:	2b00      	cmp	r3, #0
 c002152:	d102      	bne.n	c00215a <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c002154:	2301      	movs	r3, #1
 c002156:	75fb      	strb	r3, [r7, #23]
 c002158:	e008      	b.n	c00216c <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c00215a:	693b      	ldr	r3, [r7, #16]
 c00215c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002160:	613b      	str	r3, [r7, #16]
 c002162:	e003      	b.n	c00216c <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c002164:	693b      	ldr	r3, [r7, #16]
 c002166:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00216a:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c00216c:	683b      	ldr	r3, [r7, #0]
 c00216e:	f003 0308 	and.w	r3, r3, #8
 c002172:	2b00      	cmp	r3, #0
 c002174:	d013      	beq.n	c00219e <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c002176:	683b      	ldr	r3, [r7, #0]
 c002178:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c00217c:	2b00      	cmp	r3, #0
 c00217e:	d00a      	beq.n	c002196 <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c002180:	68fb      	ldr	r3, [r7, #12]
 c002182:	2b00      	cmp	r3, #0
 c002184:	d102      	bne.n	c00218c <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c002186:	2301      	movs	r3, #1
 c002188:	75fb      	strb	r3, [r7, #23]
 c00218a:	e008      	b.n	c00219e <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c00218c:	693b      	ldr	r3, [r7, #16]
 c00218e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002192:	613b      	str	r3, [r7, #16]
 c002194:	e003      	b.n	c00219e <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c002196:	693b      	ldr	r3, [r7, #16]
 c002198:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c00219c:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c00219e:	687b      	ldr	r3, [r7, #4]
 c0021a0:	681b      	ldr	r3, [r3, #0]
 c0021a2:	693a      	ldr	r2, [r7, #16]
 c0021a4:	601a      	str	r2, [r3, #0]

  return status;
 c0021a6:	7dfb      	ldrb	r3, [r7, #23]
}
 c0021a8:	4618      	mov	r0, r3
 c0021aa:	371c      	adds	r7, #28
 c0021ac:	46bd      	mov	sp, r7
 c0021ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0021b2:	4770      	bx	lr

0c0021b4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c0021b4:	b480      	push	{r7}
 c0021b6:	b085      	sub	sp, #20
 c0021b8:	af00      	add	r7, sp, #0
 c0021ba:	60f8      	str	r0, [r7, #12]
 c0021bc:	60b9      	str	r1, [r7, #8]
 c0021be:	607a      	str	r2, [r7, #4]
 c0021c0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c0021c2:	68fb      	ldr	r3, [r7, #12]
 c0021c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0021c6:	68fa      	ldr	r2, [r7, #12]
 c0021c8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0021ca:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c0021cc:	68fb      	ldr	r3, [r7, #12]
 c0021ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0021d0:	2b00      	cmp	r3, #0
 c0021d2:	d004      	beq.n	c0021de <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0021d4:	68fb      	ldr	r3, [r7, #12]
 c0021d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0021d8:	68fa      	ldr	r2, [r7, #12]
 c0021da:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0021dc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c0021de:	68fb      	ldr	r3, [r7, #12]
 c0021e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0021e2:	f003 021c 	and.w	r2, r3, #28
 c0021e6:	68fb      	ldr	r3, [r7, #12]
 c0021e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0021ea:	2101      	movs	r1, #1
 c0021ec:	fa01 f202 	lsl.w	r2, r1, r2
 c0021f0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c0021f2:	68fb      	ldr	r3, [r7, #12]
 c0021f4:	681b      	ldr	r3, [r3, #0]
 c0021f6:	683a      	ldr	r2, [r7, #0]
 c0021f8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c0021fa:	68fb      	ldr	r3, [r7, #12]
 c0021fc:	689b      	ldr	r3, [r3, #8]
 c0021fe:	2b10      	cmp	r3, #16
 c002200:	d108      	bne.n	c002214 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c002202:	68fb      	ldr	r3, [r7, #12]
 c002204:	681b      	ldr	r3, [r3, #0]
 c002206:	687a      	ldr	r2, [r7, #4]
 c002208:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c00220a:	68fb      	ldr	r3, [r7, #12]
 c00220c:	681b      	ldr	r3, [r3, #0]
 c00220e:	68ba      	ldr	r2, [r7, #8]
 c002210:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c002212:	e007      	b.n	c002224 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c002214:	68fb      	ldr	r3, [r7, #12]
 c002216:	681b      	ldr	r3, [r3, #0]
 c002218:	68ba      	ldr	r2, [r7, #8]
 c00221a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c00221c:	68fb      	ldr	r3, [r7, #12]
 c00221e:	681b      	ldr	r3, [r3, #0]
 c002220:	687a      	ldr	r2, [r7, #4]
 c002222:	60da      	str	r2, [r3, #12]
}
 c002224:	bf00      	nop
 c002226:	3714      	adds	r7, #20
 c002228:	46bd      	mov	sp, r7
 c00222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00222e:	4770      	bx	lr

0c002230 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002230:	b480      	push	{r7}
 c002232:	b085      	sub	sp, #20
 c002234:	af00      	add	r7, sp, #0
 c002236:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c002238:	687b      	ldr	r3, [r7, #4]
 c00223a:	681b      	ldr	r3, [r3, #0]
 c00223c:	461a      	mov	r2, r3
 c00223e:	4b17      	ldr	r3, [pc, #92]	; (c00229c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c002240:	429a      	cmp	r2, r3
 c002242:	d80a      	bhi.n	c00225a <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c002244:	687b      	ldr	r3, [r7, #4]
 c002246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002248:	089b      	lsrs	r3, r3, #2
 c00224a:	009b      	lsls	r3, r3, #2
 c00224c:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c002250:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c002254:	687a      	ldr	r2, [r7, #4]
 c002256:	6513      	str	r3, [r2, #80]	; 0x50
 c002258:	e007      	b.n	c00226a <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c00225a:	687b      	ldr	r3, [r7, #4]
 c00225c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00225e:	089b      	lsrs	r3, r3, #2
 c002260:	009a      	lsls	r2, r3, #2
 c002262:	4b0f      	ldr	r3, [pc, #60]	; (c0022a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c002264:	4413      	add	r3, r2
 c002266:	687a      	ldr	r2, [r7, #4]
 c002268:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c00226a:	687b      	ldr	r3, [r7, #4]
 c00226c:	681b      	ldr	r3, [r3, #0]
 c00226e:	b2db      	uxtb	r3, r3
 c002270:	3b08      	subs	r3, #8
 c002272:	4a0c      	ldr	r2, [pc, #48]	; (c0022a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c002274:	fba2 2303 	umull	r2, r3, r2, r3
 c002278:	091b      	lsrs	r3, r3, #4
 c00227a:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c00227c:	687b      	ldr	r3, [r7, #4]
 c00227e:	4a0a      	ldr	r2, [pc, #40]	; (c0022a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c002280:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c002282:	68fb      	ldr	r3, [r7, #12]
 c002284:	f003 031f 	and.w	r3, r3, #31
 c002288:	2201      	movs	r2, #1
 c00228a:	409a      	lsls	r2, r3
 c00228c:	687b      	ldr	r3, [r7, #4]
 c00228e:	659a      	str	r2, [r3, #88]	; 0x58
}
 c002290:	bf00      	nop
 c002292:	3714      	adds	r7, #20
 c002294:	46bd      	mov	sp, r7
 c002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00229a:	4770      	bx	lr
 c00229c:	50020407 	.word	0x50020407
 c0022a0:	50020820 	.word	0x50020820
 c0022a4:	cccccccd 	.word	0xcccccccd
 c0022a8:	50020880 	.word	0x50020880

0c0022ac <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c0022ac:	b480      	push	{r7}
 c0022ae:	b085      	sub	sp, #20
 c0022b0:	af00      	add	r7, sp, #0
 c0022b2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c0022b4:	687b      	ldr	r3, [r7, #4]
 c0022b6:	685b      	ldr	r3, [r3, #4]
 c0022b8:	b2db      	uxtb	r3, r3
 c0022ba:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c0022bc:	68fa      	ldr	r2, [r7, #12]
 c0022be:	4b0b      	ldr	r3, [pc, #44]	; (c0022ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c0022c0:	4413      	add	r3, r2
 c0022c2:	009b      	lsls	r3, r3, #2
 c0022c4:	461a      	mov	r2, r3
 c0022c6:	687b      	ldr	r3, [r7, #4]
 c0022c8:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c0022ca:	687b      	ldr	r3, [r7, #4]
 c0022cc:	4a08      	ldr	r2, [pc, #32]	; (c0022f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c0022ce:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c0022d0:	68fb      	ldr	r3, [r7, #12]
 c0022d2:	3b01      	subs	r3, #1
 c0022d4:	f003 0303 	and.w	r3, r3, #3
 c0022d8:	2201      	movs	r2, #1
 c0022da:	409a      	lsls	r2, r3
 c0022dc:	687b      	ldr	r3, [r7, #4]
 c0022de:	665a      	str	r2, [r3, #100]	; 0x64
}
 c0022e0:	bf00      	nop
 c0022e2:	3714      	adds	r7, #20
 c0022e4:	46bd      	mov	sp, r7
 c0022e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022ea:	4770      	bx	lr
 c0022ec:	1400823f 	.word	0x1400823f
 c0022f0:	50020940 	.word	0x50020940

0c0022f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0022f4:	b480      	push	{r7}
 c0022f6:	b087      	sub	sp, #28
 c0022f8:	af00      	add	r7, sp, #0
 c0022fa:	6078      	str	r0, [r7, #4]
 c0022fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0022fe:	2300      	movs	r3, #0
 c002300:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002302:	e158      	b.n	c0025b6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c002304:	683b      	ldr	r3, [r7, #0]
 c002306:	681a      	ldr	r2, [r3, #0]
 c002308:	2101      	movs	r1, #1
 c00230a:	697b      	ldr	r3, [r7, #20]
 c00230c:	fa01 f303 	lsl.w	r3, r1, r3
 c002310:	4013      	ands	r3, r2
 c002312:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c002314:	68fb      	ldr	r3, [r7, #12]
 c002316:	2b00      	cmp	r3, #0
 c002318:	f000 814a 	beq.w	c0025b0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c00231c:	683b      	ldr	r3, [r7, #0]
 c00231e:	685b      	ldr	r3, [r3, #4]
 c002320:	f003 0303 	and.w	r3, r3, #3
 c002324:	2b01      	cmp	r3, #1
 c002326:	d005      	beq.n	c002334 <HAL_GPIO_Init+0x40>
 c002328:	683b      	ldr	r3, [r7, #0]
 c00232a:	685b      	ldr	r3, [r3, #4]
 c00232c:	f003 0303 	and.w	r3, r3, #3
 c002330:	2b02      	cmp	r3, #2
 c002332:	d130      	bne.n	c002396 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c002334:	687b      	ldr	r3, [r7, #4]
 c002336:	689b      	ldr	r3, [r3, #8]
 c002338:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00233a:	697b      	ldr	r3, [r7, #20]
 c00233c:	005b      	lsls	r3, r3, #1
 c00233e:	2203      	movs	r2, #3
 c002340:	fa02 f303 	lsl.w	r3, r2, r3
 c002344:	43db      	mvns	r3, r3
 c002346:	693a      	ldr	r2, [r7, #16]
 c002348:	4013      	ands	r3, r2
 c00234a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c00234c:	683b      	ldr	r3, [r7, #0]
 c00234e:	68da      	ldr	r2, [r3, #12]
 c002350:	697b      	ldr	r3, [r7, #20]
 c002352:	005b      	lsls	r3, r3, #1
 c002354:	fa02 f303 	lsl.w	r3, r2, r3
 c002358:	693a      	ldr	r2, [r7, #16]
 c00235a:	4313      	orrs	r3, r2
 c00235c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c00235e:	687b      	ldr	r3, [r7, #4]
 c002360:	693a      	ldr	r2, [r7, #16]
 c002362:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c002364:	687b      	ldr	r3, [r7, #4]
 c002366:	685b      	ldr	r3, [r3, #4]
 c002368:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00236a:	2201      	movs	r2, #1
 c00236c:	697b      	ldr	r3, [r7, #20]
 c00236e:	fa02 f303 	lsl.w	r3, r2, r3
 c002372:	43db      	mvns	r3, r3
 c002374:	693a      	ldr	r2, [r7, #16]
 c002376:	4013      	ands	r3, r2
 c002378:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c00237a:	683b      	ldr	r3, [r7, #0]
 c00237c:	685b      	ldr	r3, [r3, #4]
 c00237e:	091b      	lsrs	r3, r3, #4
 c002380:	f003 0201 	and.w	r2, r3, #1
 c002384:	697b      	ldr	r3, [r7, #20]
 c002386:	fa02 f303 	lsl.w	r3, r2, r3
 c00238a:	693a      	ldr	r2, [r7, #16]
 c00238c:	4313      	orrs	r3, r2
 c00238e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c002390:	687b      	ldr	r3, [r7, #4]
 c002392:	693a      	ldr	r2, [r7, #16]
 c002394:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c002396:	683b      	ldr	r3, [r7, #0]
 c002398:	685b      	ldr	r3, [r3, #4]
 c00239a:	f003 0303 	and.w	r3, r3, #3
 c00239e:	2b03      	cmp	r3, #3
 c0023a0:	d017      	beq.n	c0023d2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c0023a2:	687b      	ldr	r3, [r7, #4]
 c0023a4:	68db      	ldr	r3, [r3, #12]
 c0023a6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0023a8:	697b      	ldr	r3, [r7, #20]
 c0023aa:	005b      	lsls	r3, r3, #1
 c0023ac:	2203      	movs	r2, #3
 c0023ae:	fa02 f303 	lsl.w	r3, r2, r3
 c0023b2:	43db      	mvns	r3, r3
 c0023b4:	693a      	ldr	r2, [r7, #16]
 c0023b6:	4013      	ands	r3, r2
 c0023b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c0023ba:	683b      	ldr	r3, [r7, #0]
 c0023bc:	689a      	ldr	r2, [r3, #8]
 c0023be:	697b      	ldr	r3, [r7, #20]
 c0023c0:	005b      	lsls	r3, r3, #1
 c0023c2:	fa02 f303 	lsl.w	r3, r2, r3
 c0023c6:	693a      	ldr	r2, [r7, #16]
 c0023c8:	4313      	orrs	r3, r2
 c0023ca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c0023cc:	687b      	ldr	r3, [r7, #4]
 c0023ce:	693a      	ldr	r2, [r7, #16]
 c0023d0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c0023d2:	683b      	ldr	r3, [r7, #0]
 c0023d4:	685b      	ldr	r3, [r3, #4]
 c0023d6:	f003 0303 	and.w	r3, r3, #3
 c0023da:	2b02      	cmp	r3, #2
 c0023dc:	d123      	bne.n	c002426 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0023de:	697b      	ldr	r3, [r7, #20]
 c0023e0:	08da      	lsrs	r2, r3, #3
 c0023e2:	687b      	ldr	r3, [r7, #4]
 c0023e4:	3208      	adds	r2, #8
 c0023e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0023ea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0023ec:	697b      	ldr	r3, [r7, #20]
 c0023ee:	f003 0307 	and.w	r3, r3, #7
 c0023f2:	009b      	lsls	r3, r3, #2
 c0023f4:	220f      	movs	r2, #15
 c0023f6:	fa02 f303 	lsl.w	r3, r2, r3
 c0023fa:	43db      	mvns	r3, r3
 c0023fc:	693a      	ldr	r2, [r7, #16]
 c0023fe:	4013      	ands	r3, r2
 c002400:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c002402:	683b      	ldr	r3, [r7, #0]
 c002404:	691a      	ldr	r2, [r3, #16]
 c002406:	697b      	ldr	r3, [r7, #20]
 c002408:	f003 0307 	and.w	r3, r3, #7
 c00240c:	009b      	lsls	r3, r3, #2
 c00240e:	fa02 f303 	lsl.w	r3, r2, r3
 c002412:	693a      	ldr	r2, [r7, #16]
 c002414:	4313      	orrs	r3, r2
 c002416:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c002418:	697b      	ldr	r3, [r7, #20]
 c00241a:	08da      	lsrs	r2, r3, #3
 c00241c:	687b      	ldr	r3, [r7, #4]
 c00241e:	3208      	adds	r2, #8
 c002420:	6939      	ldr	r1, [r7, #16]
 c002422:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c002426:	687b      	ldr	r3, [r7, #4]
 c002428:	681b      	ldr	r3, [r3, #0]
 c00242a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c00242c:	697b      	ldr	r3, [r7, #20]
 c00242e:	005b      	lsls	r3, r3, #1
 c002430:	2203      	movs	r2, #3
 c002432:	fa02 f303 	lsl.w	r3, r2, r3
 c002436:	43db      	mvns	r3, r3
 c002438:	693a      	ldr	r2, [r7, #16]
 c00243a:	4013      	ands	r3, r2
 c00243c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c00243e:	683b      	ldr	r3, [r7, #0]
 c002440:	685b      	ldr	r3, [r3, #4]
 c002442:	f003 0203 	and.w	r2, r3, #3
 c002446:	697b      	ldr	r3, [r7, #20]
 c002448:	005b      	lsls	r3, r3, #1
 c00244a:	fa02 f303 	lsl.w	r3, r2, r3
 c00244e:	693a      	ldr	r2, [r7, #16]
 c002450:	4313      	orrs	r3, r2
 c002452:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c002454:	687b      	ldr	r3, [r7, #4]
 c002456:	693a      	ldr	r2, [r7, #16]
 c002458:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c00245a:	683b      	ldr	r3, [r7, #0]
 c00245c:	685b      	ldr	r3, [r3, #4]
 c00245e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c002462:	2b00      	cmp	r3, #0
 c002464:	f000 80a4 	beq.w	c0025b0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c002468:	4a5a      	ldr	r2, [pc, #360]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c00246a:	697b      	ldr	r3, [r7, #20]
 c00246c:	089b      	lsrs	r3, r3, #2
 c00246e:	3318      	adds	r3, #24
 c002470:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002474:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c002476:	697b      	ldr	r3, [r7, #20]
 c002478:	f003 0303 	and.w	r3, r3, #3
 c00247c:	00db      	lsls	r3, r3, #3
 c00247e:	220f      	movs	r2, #15
 c002480:	fa02 f303 	lsl.w	r3, r2, r3
 c002484:	43db      	mvns	r3, r3
 c002486:	693a      	ldr	r2, [r7, #16]
 c002488:	4013      	ands	r3, r2
 c00248a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c00248c:	687b      	ldr	r3, [r7, #4]
 c00248e:	4a52      	ldr	r2, [pc, #328]	; (c0025d8 <HAL_GPIO_Init+0x2e4>)
 c002490:	4293      	cmp	r3, r2
 c002492:	d025      	beq.n	c0024e0 <HAL_GPIO_Init+0x1ec>
 c002494:	687b      	ldr	r3, [r7, #4]
 c002496:	4a51      	ldr	r2, [pc, #324]	; (c0025dc <HAL_GPIO_Init+0x2e8>)
 c002498:	4293      	cmp	r3, r2
 c00249a:	d01f      	beq.n	c0024dc <HAL_GPIO_Init+0x1e8>
 c00249c:	687b      	ldr	r3, [r7, #4]
 c00249e:	4a50      	ldr	r2, [pc, #320]	; (c0025e0 <HAL_GPIO_Init+0x2ec>)
 c0024a0:	4293      	cmp	r3, r2
 c0024a2:	d019      	beq.n	c0024d8 <HAL_GPIO_Init+0x1e4>
 c0024a4:	687b      	ldr	r3, [r7, #4]
 c0024a6:	4a4f      	ldr	r2, [pc, #316]	; (c0025e4 <HAL_GPIO_Init+0x2f0>)
 c0024a8:	4293      	cmp	r3, r2
 c0024aa:	d013      	beq.n	c0024d4 <HAL_GPIO_Init+0x1e0>
 c0024ac:	687b      	ldr	r3, [r7, #4]
 c0024ae:	4a4e      	ldr	r2, [pc, #312]	; (c0025e8 <HAL_GPIO_Init+0x2f4>)
 c0024b0:	4293      	cmp	r3, r2
 c0024b2:	d00d      	beq.n	c0024d0 <HAL_GPIO_Init+0x1dc>
 c0024b4:	687b      	ldr	r3, [r7, #4]
 c0024b6:	4a4d      	ldr	r2, [pc, #308]	; (c0025ec <HAL_GPIO_Init+0x2f8>)
 c0024b8:	4293      	cmp	r3, r2
 c0024ba:	d007      	beq.n	c0024cc <HAL_GPIO_Init+0x1d8>
 c0024bc:	687b      	ldr	r3, [r7, #4]
 c0024be:	4a4c      	ldr	r2, [pc, #304]	; (c0025f0 <HAL_GPIO_Init+0x2fc>)
 c0024c0:	4293      	cmp	r3, r2
 c0024c2:	d101      	bne.n	c0024c8 <HAL_GPIO_Init+0x1d4>
 c0024c4:	2306      	movs	r3, #6
 c0024c6:	e00c      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024c8:	2307      	movs	r3, #7
 c0024ca:	e00a      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024cc:	2305      	movs	r3, #5
 c0024ce:	e008      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024d0:	2304      	movs	r3, #4
 c0024d2:	e006      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024d4:	2303      	movs	r3, #3
 c0024d6:	e004      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024d8:	2302      	movs	r3, #2
 c0024da:	e002      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024dc:	2301      	movs	r3, #1
 c0024de:	e000      	b.n	c0024e2 <HAL_GPIO_Init+0x1ee>
 c0024e0:	2300      	movs	r3, #0
 c0024e2:	697a      	ldr	r2, [r7, #20]
 c0024e4:	f002 0203 	and.w	r2, r2, #3
 c0024e8:	00d2      	lsls	r2, r2, #3
 c0024ea:	4093      	lsls	r3, r2
 c0024ec:	693a      	ldr	r2, [r7, #16]
 c0024ee:	4313      	orrs	r3, r2
 c0024f0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0024f2:	4938      	ldr	r1, [pc, #224]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c0024f4:	697b      	ldr	r3, [r7, #20]
 c0024f6:	089b      	lsrs	r3, r3, #2
 c0024f8:	3318      	adds	r3, #24
 c0024fa:	693a      	ldr	r2, [r7, #16]
 c0024fc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c002500:	4b34      	ldr	r3, [pc, #208]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c002502:	681b      	ldr	r3, [r3, #0]
 c002504:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002506:	68fb      	ldr	r3, [r7, #12]
 c002508:	43db      	mvns	r3, r3
 c00250a:	693a      	ldr	r2, [r7, #16]
 c00250c:	4013      	ands	r3, r2
 c00250e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c002510:	683b      	ldr	r3, [r7, #0]
 c002512:	685b      	ldr	r3, [r3, #4]
 c002514:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002518:	2b00      	cmp	r3, #0
 c00251a:	d003      	beq.n	c002524 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c00251c:	693a      	ldr	r2, [r7, #16]
 c00251e:	68fb      	ldr	r3, [r7, #12]
 c002520:	4313      	orrs	r3, r2
 c002522:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c002524:	4a2b      	ldr	r2, [pc, #172]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c002526:	693b      	ldr	r3, [r7, #16]
 c002528:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c00252a:	4b2a      	ldr	r3, [pc, #168]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c00252c:	685b      	ldr	r3, [r3, #4]
 c00252e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002530:	68fb      	ldr	r3, [r7, #12]
 c002532:	43db      	mvns	r3, r3
 c002534:	693a      	ldr	r2, [r7, #16]
 c002536:	4013      	ands	r3, r2
 c002538:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c00253a:	683b      	ldr	r3, [r7, #0]
 c00253c:	685b      	ldr	r3, [r3, #4]
 c00253e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c002542:	2b00      	cmp	r3, #0
 c002544:	d003      	beq.n	c00254e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c002546:	693a      	ldr	r2, [r7, #16]
 c002548:	68fb      	ldr	r3, [r7, #12]
 c00254a:	4313      	orrs	r3, r2
 c00254c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c00254e:	4a21      	ldr	r2, [pc, #132]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c002550:	693b      	ldr	r3, [r7, #16]
 c002552:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c002554:	4b1f      	ldr	r3, [pc, #124]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c002556:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c00255a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00255c:	68fb      	ldr	r3, [r7, #12]
 c00255e:	43db      	mvns	r3, r3
 c002560:	693a      	ldr	r2, [r7, #16]
 c002562:	4013      	ands	r3, r2
 c002564:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c002566:	683b      	ldr	r3, [r7, #0]
 c002568:	685b      	ldr	r3, [r3, #4]
 c00256a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00256e:	2b00      	cmp	r3, #0
 c002570:	d003      	beq.n	c00257a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c002572:	693a      	ldr	r2, [r7, #16]
 c002574:	68fb      	ldr	r3, [r7, #12]
 c002576:	4313      	orrs	r3, r2
 c002578:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c00257a:	4a16      	ldr	r2, [pc, #88]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c00257c:	693b      	ldr	r3, [r7, #16]
 c00257e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c002582:	4b14      	ldr	r3, [pc, #80]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c002584:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002588:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00258a:	68fb      	ldr	r3, [r7, #12]
 c00258c:	43db      	mvns	r3, r3
 c00258e:	693a      	ldr	r2, [r7, #16]
 c002590:	4013      	ands	r3, r2
 c002592:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c002594:	683b      	ldr	r3, [r7, #0]
 c002596:	685b      	ldr	r3, [r3, #4]
 c002598:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00259c:	2b00      	cmp	r3, #0
 c00259e:	d003      	beq.n	c0025a8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c0025a0:	693a      	ldr	r2, [r7, #16]
 c0025a2:	68fb      	ldr	r3, [r7, #12]
 c0025a4:	4313      	orrs	r3, r2
 c0025a6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0025a8:	4a0a      	ldr	r2, [pc, #40]	; (c0025d4 <HAL_GPIO_Init+0x2e0>)
 c0025aa:	693b      	ldr	r3, [r7, #16]
 c0025ac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c0025b0:	697b      	ldr	r3, [r7, #20]
 c0025b2:	3301      	adds	r3, #1
 c0025b4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0025b6:	683b      	ldr	r3, [r7, #0]
 c0025b8:	681a      	ldr	r2, [r3, #0]
 c0025ba:	697b      	ldr	r3, [r7, #20]
 c0025bc:	fa22 f303 	lsr.w	r3, r2, r3
 c0025c0:	2b00      	cmp	r3, #0
 c0025c2:	f47f ae9f 	bne.w	c002304 <HAL_GPIO_Init+0x10>
  }
}
 c0025c6:	bf00      	nop
 c0025c8:	bf00      	nop
 c0025ca:	371c      	adds	r7, #28
 c0025cc:	46bd      	mov	sp, r7
 c0025ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0025d2:	4770      	bx	lr
 c0025d4:	5002f400 	.word	0x5002f400
 c0025d8:	52020000 	.word	0x52020000
 c0025dc:	52020400 	.word	0x52020400
 c0025e0:	52020800 	.word	0x52020800
 c0025e4:	52020c00 	.word	0x52020c00
 c0025e8:	52021000 	.word	0x52021000
 c0025ec:	52021400 	.word	0x52021400
 c0025f0:	52021800 	.word	0x52021800

0c0025f4 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0025f4:	b480      	push	{r7}
 c0025f6:	b089      	sub	sp, #36	; 0x24
 c0025f8:	af00      	add	r7, sp, #0
 c0025fa:	60f8      	str	r0, [r7, #12]
 c0025fc:	460b      	mov	r3, r1
 c0025fe:	607a      	str	r2, [r7, #4]
 c002600:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c002602:	2300      	movs	r3, #0
 c002604:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c002606:	68fb      	ldr	r3, [r7, #12]
 c002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00260a:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c00260c:	e01b      	b.n	c002646 <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c00260e:	897a      	ldrh	r2, [r7, #10]
 c002610:	2101      	movs	r1, #1
 c002612:	69fb      	ldr	r3, [r7, #28]
 c002614:	fa01 f303 	lsl.w	r3, r1, r3
 c002618:	4013      	ands	r3, r2
 c00261a:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c00261c:	697b      	ldr	r3, [r7, #20]
 c00261e:	2b00      	cmp	r3, #0
 c002620:	d00e      	beq.n	c002640 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c002622:	2201      	movs	r2, #1
 c002624:	69fb      	ldr	r3, [r7, #28]
 c002626:	fa02 f303 	lsl.w	r3, r2, r3
 c00262a:	43db      	mvns	r3, r3
 c00262c:	69ba      	ldr	r2, [r7, #24]
 c00262e:	4013      	ands	r3, r2
 c002630:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c002632:	687a      	ldr	r2, [r7, #4]
 c002634:	69fb      	ldr	r3, [r7, #28]
 c002636:	fa02 f303 	lsl.w	r3, r2, r3
 c00263a:	69ba      	ldr	r2, [r7, #24]
 c00263c:	4313      	orrs	r3, r2
 c00263e:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c002640:	69fb      	ldr	r3, [r7, #28]
 c002642:	3301      	adds	r3, #1
 c002644:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c002646:	897a      	ldrh	r2, [r7, #10]
 c002648:	69fb      	ldr	r3, [r7, #28]
 c00264a:	fa42 f303 	asr.w	r3, r2, r3
 c00264e:	2b00      	cmp	r3, #0
 c002650:	d1dd      	bne.n	c00260e <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c002652:	68fb      	ldr	r3, [r7, #12]
 c002654:	69ba      	ldr	r2, [r7, #24]
 c002656:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002658:	bf00      	nop
 c00265a:	3724      	adds	r7, #36	; 0x24
 c00265c:	46bd      	mov	sp, r7
 c00265e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002662:	4770      	bx	lr

0c002664 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c002664:	b480      	push	{r7}
 c002666:	b085      	sub	sp, #20
 c002668:	af00      	add	r7, sp, #0
 c00266a:	6078      	str	r0, [r7, #4]
 c00266c:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c00266e:	683b      	ldr	r3, [r7, #0]
 c002670:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c002674:	d216      	bcs.n	c0026a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002676:	687b      	ldr	r3, [r7, #4]
 c002678:	0f1b      	lsrs	r3, r3, #28
 c00267a:	015a      	lsls	r2, r3, #5
 c00267c:	687b      	ldr	r3, [r7, #4]
 c00267e:	f003 031f 	and.w	r3, r3, #31
 c002682:	4413      	add	r3, r2
 c002684:	2b32      	cmp	r3, #50	; 0x32
 c002686:	d80d      	bhi.n	c0026a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002688:	687b      	ldr	r3, [r7, #4]
 c00268a:	f003 0320 	and.w	r3, r3, #32
 c00268e:	2b00      	cmp	r3, #0
 c002690:	d00a      	beq.n	c0026a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c002692:	687b      	ldr	r3, [r7, #4]
 c002694:	0f1b      	lsrs	r3, r3, #28
 c002696:	015a      	lsls	r2, r3, #5
 c002698:	687b      	ldr	r3, [r7, #4]
 c00269a:	f003 031f 	and.w	r3, r3, #31
 c00269e:	4413      	add	r3, r2
 c0026a0:	2b00      	cmp	r3, #0
 c0026a2:	d001      	beq.n	c0026a8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c0026a4:	2301      	movs	r3, #1
 c0026a6:	e0a8      	b.n	c0027fa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c0026a8:	687b      	ldr	r3, [r7, #4]
 c0026aa:	f003 0320 	and.w	r3, r3, #32
 c0026ae:	2b00      	cmp	r3, #0
 c0026b0:	d04e      	beq.n	c002750 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0026b2:	683a      	ldr	r2, [r7, #0]
 c0026b4:	f240 1301 	movw	r3, #257	; 0x101
 c0026b8:	4013      	ands	r3, r2
 c0026ba:	f240 1201 	movw	r2, #257	; 0x101
 c0026be:	4293      	cmp	r3, r2
 c0026c0:	d10e      	bne.n	c0026e0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0026c2:	4b51      	ldr	r3, [pc, #324]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026c4:	691b      	ldr	r3, [r3, #16]
 c0026c6:	4b50      	ldr	r3, [pc, #320]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026c8:	f04f 32ff 	mov.w	r2, #4294967295
 c0026cc:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0026ce:	4b4e      	ldr	r3, [pc, #312]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026d0:	695b      	ldr	r3, [r3, #20]
 c0026d2:	4a4d      	ldr	r2, [pc, #308]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026d4:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c0026d8:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c0026dc:	6153      	str	r3, [r2, #20]
 c0026de:	e00f      	b.n	c002700 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0026e0:	683b      	ldr	r3, [r7, #0]
 c0026e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0026e6:	2b00      	cmp	r3, #0
 c0026e8:	d00a      	beq.n	c002700 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0026ea:	4b47      	ldr	r3, [pc, #284]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026ec:	691b      	ldr	r3, [r3, #16]
 c0026ee:	4b46      	ldr	r3, [pc, #280]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026f0:	2200      	movs	r2, #0
 c0026f2:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0026f4:	4b44      	ldr	r3, [pc, #272]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026f6:	695b      	ldr	r3, [r3, #20]
 c0026f8:	4a43      	ldr	r2, [pc, #268]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0026fa:	0cdb      	lsrs	r3, r3, #19
 c0026fc:	04db      	lsls	r3, r3, #19
 c0026fe:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002700:	683a      	ldr	r2, [r7, #0]
 c002702:	f240 2302 	movw	r3, #514	; 0x202
 c002706:	4013      	ands	r3, r2
 c002708:	f240 2202 	movw	r2, #514	; 0x202
 c00270c:	4293      	cmp	r3, r2
 c00270e:	d10e      	bne.n	c00272e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002710:	4b3d      	ldr	r3, [pc, #244]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002712:	6a1b      	ldr	r3, [r3, #32]
 c002714:	4b3c      	ldr	r3, [pc, #240]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002716:	f04f 32ff 	mov.w	r2, #4294967295
 c00271a:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c00271c:	4b3a      	ldr	r3, [pc, #232]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00271e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002720:	4a39      	ldr	r2, [pc, #228]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002722:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002726:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c00272a:	6253      	str	r3, [r2, #36]	; 0x24
 c00272c:	e064      	b.n	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00272e:	683b      	ldr	r3, [r7, #0]
 c002730:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002734:	2b00      	cmp	r3, #0
 c002736:	d05f      	beq.n	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002738:	4b33      	ldr	r3, [pc, #204]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00273a:	6a1b      	ldr	r3, [r3, #32]
 c00273c:	4b32      	ldr	r3, [pc, #200]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00273e:	2200      	movs	r2, #0
 c002740:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002742:	4b31      	ldr	r3, [pc, #196]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002744:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002746:	4a30      	ldr	r2, [pc, #192]	; (c002808 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002748:	0cdb      	lsrs	r3, r3, #19
 c00274a:	04db      	lsls	r3, r3, #19
 c00274c:	6253      	str	r3, [r2, #36]	; 0x24
 c00274e:	e053      	b.n	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002750:	687b      	ldr	r3, [r7, #4]
 c002752:	0f1a      	lsrs	r2, r3, #28
 c002754:	4b2d      	ldr	r3, [pc, #180]	; (c00280c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c002756:	4413      	add	r3, r2
 c002758:	009b      	lsls	r3, r3, #2
 c00275a:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00275c:	683a      	ldr	r2, [r7, #0]
 c00275e:	f240 1301 	movw	r3, #257	; 0x101
 c002762:	4013      	ands	r3, r2
 c002764:	f240 1201 	movw	r2, #257	; 0x101
 c002768:	4293      	cmp	r3, r2
 c00276a:	d10a      	bne.n	c002782 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00276c:	68fb      	ldr	r3, [r7, #12]
 c00276e:	6819      	ldr	r1, [r3, #0]
 c002770:	687b      	ldr	r3, [r7, #4]
 c002772:	f003 031f 	and.w	r3, r3, #31
 c002776:	2201      	movs	r2, #1
 c002778:	409a      	lsls	r2, r3
 c00277a:	68fb      	ldr	r3, [r7, #12]
 c00277c:	430a      	orrs	r2, r1
 c00277e:	601a      	str	r2, [r3, #0]
 c002780:	e010      	b.n	c0027a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002782:	683b      	ldr	r3, [r7, #0]
 c002784:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002788:	2b00      	cmp	r3, #0
 c00278a:	d00b      	beq.n	c0027a4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c00278c:	68fb      	ldr	r3, [r7, #12]
 c00278e:	6819      	ldr	r1, [r3, #0]
 c002790:	687b      	ldr	r3, [r7, #4]
 c002792:	f003 031f 	and.w	r3, r3, #31
 c002796:	2201      	movs	r2, #1
 c002798:	fa02 f303 	lsl.w	r3, r2, r3
 c00279c:	43da      	mvns	r2, r3
 c00279e:	68fb      	ldr	r3, [r7, #12]
 c0027a0:	400a      	ands	r2, r1
 c0027a2:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0027a4:	687b      	ldr	r3, [r7, #4]
 c0027a6:	0f1a      	lsrs	r2, r3, #28
 c0027a8:	4b19      	ldr	r3, [pc, #100]	; (c002810 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c0027aa:	4413      	add	r3, r2
 c0027ac:	009b      	lsls	r3, r3, #2
 c0027ae:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0027b0:	683a      	ldr	r2, [r7, #0]
 c0027b2:	f240 2302 	movw	r3, #514	; 0x202
 c0027b6:	4013      	ands	r3, r2
 c0027b8:	f240 2202 	movw	r2, #514	; 0x202
 c0027bc:	4293      	cmp	r3, r2
 c0027be:	d10a      	bne.n	c0027d6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0027c0:	68fb      	ldr	r3, [r7, #12]
 c0027c2:	6819      	ldr	r1, [r3, #0]
 c0027c4:	687b      	ldr	r3, [r7, #4]
 c0027c6:	f003 031f 	and.w	r3, r3, #31
 c0027ca:	2201      	movs	r2, #1
 c0027cc:	409a      	lsls	r2, r3
 c0027ce:	68fb      	ldr	r3, [r7, #12]
 c0027d0:	430a      	orrs	r2, r1
 c0027d2:	601a      	str	r2, [r3, #0]
 c0027d4:	e010      	b.n	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0027d6:	683b      	ldr	r3, [r7, #0]
 c0027d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0027dc:	2b00      	cmp	r3, #0
 c0027de:	d00b      	beq.n	c0027f8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0027e0:	68fb      	ldr	r3, [r7, #12]
 c0027e2:	6819      	ldr	r1, [r3, #0]
 c0027e4:	687b      	ldr	r3, [r7, #4]
 c0027e6:	f003 031f 	and.w	r3, r3, #31
 c0027ea:	2201      	movs	r2, #1
 c0027ec:	fa02 f303 	lsl.w	r3, r2, r3
 c0027f0:	43da      	mvns	r2, r3
 c0027f2:	68fb      	ldr	r3, [r7, #12]
 c0027f4:	400a      	ands	r2, r1
 c0027f6:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0027f8:	2300      	movs	r3, #0
}
 c0027fa:	4618      	mov	r0, r3
 c0027fc:	3714      	adds	r7, #20
 c0027fe:	46bd      	mov	sp, r7
 c002800:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002804:	4770      	bx	lr
 c002806:	bf00      	nop
 c002808:	50032400 	.word	0x50032400
 c00280c:	1400c904 	.word	0x1400c904
 c002810:	1400c908 	.word	0x1400c908

0c002814 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002814:	b480      	push	{r7}
 c002816:	b089      	sub	sp, #36	; 0x24
 c002818:	af00      	add	r7, sp, #0
 c00281a:	6078      	str	r0, [r7, #4]
 c00281c:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00281e:	687b      	ldr	r3, [r7, #4]
 c002820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002824:	d00b      	beq.n	c00283e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002826:	687b      	ldr	r3, [r7, #4]
 c002828:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00282c:	d007      	beq.n	c00283e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c00282e:	687b      	ldr	r3, [r7, #4]
 c002830:	4a36      	ldr	r2, [pc, #216]	; (c00290c <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c002832:	4293      	cmp	r3, r2
 c002834:	d003      	beq.n	c00283e <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002836:	687b      	ldr	r3, [r7, #4]
 c002838:	4a35      	ldr	r2, [pc, #212]	; (c002910 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c00283a:	4293      	cmp	r3, r2
 c00283c:	d111      	bne.n	c002862 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c00283e:	683b      	ldr	r3, [r7, #0]
 c002840:	681b      	ldr	r3, [r3, #0]
 c002842:	2b00      	cmp	r3, #0
 c002844:	d004      	beq.n	c002850 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002846:	683b      	ldr	r3, [r7, #0]
 c002848:	681b      	ldr	r3, [r3, #0]
 c00284a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c00284e:	d108      	bne.n	c002862 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002850:	683b      	ldr	r3, [r7, #0]
 c002852:	685b      	ldr	r3, [r3, #4]
 c002854:	2b00      	cmp	r3, #0
 c002856:	d006      	beq.n	c002866 <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002858:	683b      	ldr	r3, [r7, #0]
 c00285a:	685b      	ldr	r3, [r3, #4]
 c00285c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002860:	d001      	beq.n	c002866 <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c002862:	2301      	movs	r3, #1
 c002864:	e04b      	b.n	c0028fe <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002866:	683b      	ldr	r3, [r7, #0]
 c002868:	685b      	ldr	r3, [r3, #4]
 c00286a:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c00286c:	683b      	ldr	r3, [r7, #0]
 c00286e:	681b      	ldr	r3, [r3, #0]
 c002870:	693a      	ldr	r2, [r7, #16]
 c002872:	4313      	orrs	r3, r2
 c002874:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002876:	687b      	ldr	r3, [r7, #4]
 c002878:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00287c:	d003      	beq.n	c002886 <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c00287e:	687b      	ldr	r3, [r7, #4]
 c002880:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002884:	d105      	bne.n	c002892 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002886:	4b23      	ldr	r3, [pc, #140]	; (c002914 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002888:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c00288a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c00288e:	61bb      	str	r3, [r7, #24]
 c002890:	e004      	b.n	c00289c <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c002892:	4b21      	ldr	r3, [pc, #132]	; (c002918 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c002894:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c002896:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c00289a:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c00289c:	69bb      	ldr	r3, [r7, #24]
 c00289e:	0b5b      	lsrs	r3, r3, #13
 c0028a0:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c0028a2:	2300      	movs	r3, #0
 c0028a4:	617b      	str	r3, [r7, #20]
 c0028a6:	e00c      	b.n	c0028c2 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c0028a8:	683b      	ldr	r3, [r7, #0]
 c0028aa:	697a      	ldr	r2, [r7, #20]
 c0028ac:	3202      	adds	r2, #2
 c0028ae:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c0028b2:	69fb      	ldr	r3, [r7, #28]
 c0028b4:	697a      	ldr	r2, [r7, #20]
 c0028b6:	3240      	adds	r2, #64	; 0x40
 c0028b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c0028bc:	697b      	ldr	r3, [r7, #20]
 c0028be:	3301      	adds	r3, #1
 c0028c0:	617b      	str	r3, [r7, #20]
 c0028c2:	697a      	ldr	r2, [r7, #20]
 c0028c4:	68fb      	ldr	r3, [r7, #12]
 c0028c6:	429a      	cmp	r2, r3
 c0028c8:	d3ee      	bcc.n	c0028a8 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c0028ca:	69fb      	ldr	r3, [r7, #28]
 c0028cc:	681b      	ldr	r3, [r3, #0]
 c0028ce:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c0028d2:	693b      	ldr	r3, [r7, #16]
 c0028d4:	431a      	orrs	r2, r3
 c0028d6:	69fb      	ldr	r3, [r7, #28]
 c0028d8:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0028da:	69bb      	ldr	r3, [r7, #24]
 c0028dc:	0b5b      	lsrs	r3, r3, #13
 c0028de:	2201      	movs	r2, #1
 c0028e0:	fa02 f303 	lsl.w	r3, r2, r3
 c0028e4:	3b01      	subs	r3, #1
 c0028e6:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0028e8:	69fb      	ldr	r3, [r7, #28]
 c0028ea:	691a      	ldr	r2, [r3, #16]
 c0028ec:	68bb      	ldr	r3, [r7, #8]
 c0028ee:	43db      	mvns	r3, r3
 c0028f0:	401a      	ands	r2, r3
 c0028f2:	683b      	ldr	r3, [r7, #0]
 c0028f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0028f6:	431a      	orrs	r2, r3
 c0028f8:	69fb      	ldr	r3, [r7, #28]
 c0028fa:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c0028fc:	2300      	movs	r3, #0
}
 c0028fe:	4618      	mov	r0, r3
 c002900:	3724      	adds	r7, #36	; 0x24
 c002902:	46bd      	mov	sp, r7
 c002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002908:	4770      	bx	lr
 c00290a:	bf00      	nop
 c00290c:	20030000 	.word	0x20030000
 c002910:	30030000 	.word	0x30030000
 c002914:	50032c00 	.word	0x50032c00
 c002918:	50033000 	.word	0x50033000

0c00291c <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c00291c:	b580      	push	{r7, lr}
 c00291e:	b084      	sub	sp, #16
 c002920:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c002922:	4b3f      	ldr	r3, [pc, #252]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c002924:	681b      	ldr	r3, [r3, #0]
 c002926:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c002928:	4b3d      	ldr	r3, [pc, #244]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c00292a:	691b      	ldr	r3, [r3, #16]
 c00292c:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00292e:	68ba      	ldr	r2, [r7, #8]
 c002930:	687b      	ldr	r3, [r7, #4]
 c002932:	4013      	ands	r3, r2
 c002934:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c002936:	683b      	ldr	r3, [r7, #0]
 c002938:	2b00      	cmp	r3, #0
 c00293a:	d019      	beq.n	c002970 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c00293c:	4a38      	ldr	r2, [pc, #224]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c00293e:	683b      	ldr	r3, [r7, #0]
 c002940:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c002942:	2300      	movs	r3, #0
 c002944:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002946:	e00d      	b.n	c002964 <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c002948:	683a      	ldr	r2, [r7, #0]
 c00294a:	68fb      	ldr	r3, [r7, #12]
 c00294c:	fa22 f303 	lsr.w	r3, r2, r3
 c002950:	f003 0301 	and.w	r3, r3, #1
 c002954:	2b00      	cmp	r3, #0
 c002956:	d002      	beq.n	c00295e <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c002958:	68f8      	ldr	r0, [r7, #12]
 c00295a:	f000 f863 	bl	c002a24 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00295e:	68fb      	ldr	r3, [r7, #12]
 c002960:	3301      	adds	r3, #1
 c002962:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002964:	683a      	ldr	r2, [r7, #0]
 c002966:	68fb      	ldr	r3, [r7, #12]
 c002968:	fa22 f303 	lsr.w	r3, r2, r3
 c00296c:	2b00      	cmp	r3, #0
 c00296e:	d1eb      	bne.n	c002948 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c002970:	4b2b      	ldr	r3, [pc, #172]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c002972:	685b      	ldr	r3, [r3, #4]
 c002974:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c002976:	4b2a      	ldr	r3, [pc, #168]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c002978:	695b      	ldr	r3, [r3, #20]
 c00297a:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c00297c:	68ba      	ldr	r2, [r7, #8]
 c00297e:	687b      	ldr	r3, [r7, #4]
 c002980:	4013      	ands	r3, r2
 c002982:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c002984:	683b      	ldr	r3, [r7, #0]
 c002986:	2b00      	cmp	r3, #0
 c002988:	d01c      	beq.n	c0029c4 <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c00298a:	4a25      	ldr	r2, [pc, #148]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c00298c:	683b      	ldr	r3, [r7, #0]
 c00298e:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c002990:	2300      	movs	r3, #0
 c002992:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002994:	e010      	b.n	c0029b8 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c002996:	683a      	ldr	r2, [r7, #0]
 c002998:	68fb      	ldr	r3, [r7, #12]
 c00299a:	fa22 f303 	lsr.w	r3, r2, r3
 c00299e:	f003 0301 	and.w	r3, r3, #1
 c0029a2:	2b00      	cmp	r3, #0
 c0029a4:	d005      	beq.n	c0029b2 <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c0029a6:	68fb      	ldr	r3, [r7, #12]
 c0029a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0029ac:	4618      	mov	r0, r3
 c0029ae:	f000 f839 	bl	c002a24 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0029b2:	68fb      	ldr	r3, [r7, #12]
 c0029b4:	3301      	adds	r3, #1
 c0029b6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0029b8:	683a      	ldr	r2, [r7, #0]
 c0029ba:	68fb      	ldr	r3, [r7, #12]
 c0029bc:	fa22 f303 	lsr.w	r3, r2, r3
 c0029c0:	2b00      	cmp	r3, #0
 c0029c2:	d1e8      	bne.n	c002996 <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c0029c4:	4b16      	ldr	r3, [pc, #88]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c0029c6:	689b      	ldr	r3, [r3, #8]
 c0029c8:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c0029ca:	4b15      	ldr	r3, [pc, #84]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c0029cc:	699b      	ldr	r3, [r3, #24]
 c0029ce:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0029d0:	68ba      	ldr	r2, [r7, #8]
 c0029d2:	687b      	ldr	r3, [r7, #4]
 c0029d4:	4013      	ands	r3, r2
 c0029d6:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0029d8:	683b      	ldr	r3, [r7, #0]
 c0029da:	2b00      	cmp	r3, #0
 c0029dc:	d01c      	beq.n	c002a18 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0029de:	4a10      	ldr	r2, [pc, #64]	; (c002a20 <HAL_GTZC_IRQHandler+0x104>)
 c0029e0:	683b      	ldr	r3, [r7, #0]
 c0029e2:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0029e4:	2300      	movs	r3, #0
 c0029e6:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0029e8:	e010      	b.n	c002a0c <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c0029ea:	683a      	ldr	r2, [r7, #0]
 c0029ec:	68fb      	ldr	r3, [r7, #12]
 c0029ee:	fa22 f303 	lsr.w	r3, r2, r3
 c0029f2:	f003 0301 	and.w	r3, r3, #1
 c0029f6:	2b00      	cmp	r3, #0
 c0029f8:	d005      	beq.n	c002a06 <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c0029fa:	68fb      	ldr	r3, [r7, #12]
 c0029fc:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c002a00:	4618      	mov	r0, r3
 c002a02:	f000 f80f 	bl	c002a24 <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c002a06:	68fb      	ldr	r3, [r7, #12]
 c002a08:	3301      	adds	r3, #1
 c002a0a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c002a0c:	683a      	ldr	r2, [r7, #0]
 c002a0e:	68fb      	ldr	r3, [r7, #12]
 c002a10:	fa22 f303 	lsr.w	r3, r2, r3
 c002a14:	2b00      	cmp	r3, #0
 c002a16:	d1e8      	bne.n	c0029ea <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c002a18:	bf00      	nop
 c002a1a:	3710      	adds	r7, #16
 c002a1c:	46bd      	mov	sp, r7
 c002a1e:	bd80      	pop	{r7, pc}
 c002a20:	50032800 	.word	0x50032800

0c002a24 <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c002a24:	b480      	push	{r7}
 c002a26:	b083      	sub	sp, #12
 c002a28:	af00      	add	r7, sp, #0
 c002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c002a2c:	bf00      	nop
 c002a2e:	370c      	adds	r7, #12
 c002a30:	46bd      	mov	sp, r7
 c002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a36:	4770      	bx	lr

0c002a38 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c002a38:	b480      	push	{r7}
 c002a3a:	b085      	sub	sp, #20
 c002a3c:	af00      	add	r7, sp, #0
 c002a3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002a40:	2300      	movs	r3, #0
 c002a42:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c002a44:	4b0b      	ldr	r3, [pc, #44]	; (c002a74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002a46:	681b      	ldr	r3, [r3, #0]
 c002a48:	f003 0301 	and.w	r3, r3, #1
 c002a4c:	2b00      	cmp	r3, #0
 c002a4e:	d002      	beq.n	c002a56 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c002a50:	2301      	movs	r3, #1
 c002a52:	73fb      	strb	r3, [r7, #15]
 c002a54:	e007      	b.n	c002a66 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c002a56:	4b07      	ldr	r3, [pc, #28]	; (c002a74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002a58:	681b      	ldr	r3, [r3, #0]
 c002a5a:	f023 0204 	bic.w	r2, r3, #4
 c002a5e:	4905      	ldr	r1, [pc, #20]	; (c002a74 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002a60:	687b      	ldr	r3, [r7, #4]
 c002a62:	4313      	orrs	r3, r2
 c002a64:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002a66:	7bfb      	ldrb	r3, [r7, #15]
}
 c002a68:	4618      	mov	r0, r3
 c002a6a:	3714      	adds	r7, #20
 c002a6c:	46bd      	mov	sp, r7
 c002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a72:	4770      	bx	lr
 c002a74:	50030400 	.word	0x50030400

0c002a78 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002a78:	b480      	push	{r7}
 c002a7a:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002a7c:	4b05      	ldr	r3, [pc, #20]	; (c002a94 <HAL_ICACHE_Enable+0x1c>)
 c002a7e:	681b      	ldr	r3, [r3, #0]
 c002a80:	4a04      	ldr	r2, [pc, #16]	; (c002a94 <HAL_ICACHE_Enable+0x1c>)
 c002a82:	f043 0301 	orr.w	r3, r3, #1
 c002a86:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002a88:	2300      	movs	r3, #0
}
 c002a8a:	4618      	mov	r0, r3
 c002a8c:	46bd      	mov	sp, r7
 c002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002a92:	4770      	bx	lr
 c002a94:	50030400 	.word	0x50030400

0c002a98 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002a98:	b480      	push	{r7}
 c002a9a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c002a9c:	4b04      	ldr	r3, [pc, #16]	; (c002ab0 <HAL_PWREx_GetVoltageRange+0x18>)
 c002a9e:	681b      	ldr	r3, [r3, #0]
 c002aa0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c002aa4:	4618      	mov	r0, r3
 c002aa6:	46bd      	mov	sp, r7
 c002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002aac:	4770      	bx	lr
 c002aae:	bf00      	nop
 c002ab0:	50007000 	.word	0x50007000

0c002ab4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002ab4:	b580      	push	{r7, lr}
 c002ab6:	b084      	sub	sp, #16
 c002ab8:	af00      	add	r7, sp, #0
 c002aba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002abc:	4b27      	ldr	r3, [pc, #156]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002abe:	681b      	ldr	r3, [r3, #0]
 c002ac0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c002ac4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c002ac6:	f000 f861 	bl	c002b8c <HAL_PWREx_SMPS_GetEffectiveMode>
 c002aca:	4603      	mov	r3, r0
 c002acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002ad0:	d101      	bne.n	c002ad6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c002ad2:	2301      	movs	r3, #1
 c002ad4:	e03e      	b.n	c002b54 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002ad6:	4b21      	ldr	r3, [pc, #132]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002ad8:	68db      	ldr	r3, [r3, #12]
 c002ada:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002ae2:	d101      	bne.n	c002ae8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c002ae4:	2301      	movs	r3, #1
 c002ae6:	e035      	b.n	c002b54 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002ae8:	68ba      	ldr	r2, [r7, #8]
 c002aea:	687b      	ldr	r3, [r7, #4]
 c002aec:	429a      	cmp	r2, r3
 c002aee:	d101      	bne.n	c002af4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c002af0:	2300      	movs	r3, #0
 c002af2:	e02f      	b.n	c002b54 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002af4:	4b19      	ldr	r3, [pc, #100]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002af6:	681b      	ldr	r3, [r3, #0]
 c002af8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c002afc:	4917      	ldr	r1, [pc, #92]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002afe:	687b      	ldr	r3, [r7, #4]
 c002b00:	4313      	orrs	r3, r2
 c002b02:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002b04:	4b16      	ldr	r3, [pc, #88]	; (c002b60 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c002b06:	681b      	ldr	r3, [r3, #0]
 c002b08:	095b      	lsrs	r3, r3, #5
 c002b0a:	4a16      	ldr	r2, [pc, #88]	; (c002b64 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c002b0c:	fba2 2303 	umull	r2, r3, r2, r3
 c002b10:	09db      	lsrs	r3, r3, #7
 c002b12:	2232      	movs	r2, #50	; 0x32
 c002b14:	fb02 f303 	mul.w	r3, r2, r3
 c002b18:	4a13      	ldr	r2, [pc, #76]	; (c002b68 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c002b1a:	fba2 2303 	umull	r2, r3, r2, r3
 c002b1e:	08db      	lsrs	r3, r3, #3
 c002b20:	3301      	adds	r3, #1
 c002b22:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002b24:	e002      	b.n	c002b2c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c002b26:	68fb      	ldr	r3, [r7, #12]
 c002b28:	3b01      	subs	r3, #1
 c002b2a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002b2c:	4b0b      	ldr	r3, [pc, #44]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002b2e:	695b      	ldr	r3, [r3, #20]
 c002b30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002b34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002b38:	d102      	bne.n	c002b40 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c002b3a:	68fb      	ldr	r3, [r7, #12]
 c002b3c:	2b00      	cmp	r3, #0
 c002b3e:	d1f2      	bne.n	c002b26 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c002b40:	4b06      	ldr	r3, [pc, #24]	; (c002b5c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002b42:	695b      	ldr	r3, [r3, #20]
 c002b44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002b48:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002b4c:	d101      	bne.n	c002b52 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c002b4e:	2303      	movs	r3, #3
 c002b50:	e000      	b.n	c002b54 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c002b52:	2300      	movs	r3, #0
}
 c002b54:	4618      	mov	r0, r3
 c002b56:	3710      	adds	r7, #16
 c002b58:	46bd      	mov	sp, r7
 c002b5a:	bd80      	pop	{r7, pc}
 c002b5c:	50007000 	.word	0x50007000
 c002b60:	30000000 	.word	0x30000000
 c002b64:	0a7c5ac5 	.word	0x0a7c5ac5
 c002b68:	cccccccd 	.word	0xcccccccd

0c002b6c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c002b6c:	b480      	push	{r7}
 c002b6e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c002b70:	4b05      	ldr	r3, [pc, #20]	; (c002b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002b72:	689b      	ldr	r3, [r3, #8]
 c002b74:	4a04      	ldr	r2, [pc, #16]	; (c002b88 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002b76:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002b7a:	6093      	str	r3, [r2, #8]
}
 c002b7c:	bf00      	nop
 c002b7e:	46bd      	mov	sp, r7
 c002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b84:	4770      	bx	lr
 c002b86:	bf00      	nop
 c002b88:	50007000 	.word	0x50007000

0c002b8c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c002b8c:	b480      	push	{r7}
 c002b8e:	b083      	sub	sp, #12
 c002b90:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c002b92:	4b0f      	ldr	r3, [pc, #60]	; (c002bd0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c002b94:	691b      	ldr	r3, [r3, #16]
 c002b96:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c002b98:	683b      	ldr	r3, [r7, #0]
 c002b9a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c002b9e:	2b00      	cmp	r3, #0
 c002ba0:	d003      	beq.n	c002baa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c002ba2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002ba6:	607b      	str	r3, [r7, #4]
 c002ba8:	e00a      	b.n	c002bc0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c002baa:	683b      	ldr	r3, [r7, #0]
 c002bac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002bb0:	2b00      	cmp	r3, #0
 c002bb2:	d103      	bne.n	c002bbc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c002bb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002bb8:	607b      	str	r3, [r7, #4]
 c002bba:	e001      	b.n	c002bc0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c002bbc:	2300      	movs	r3, #0
 c002bbe:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c002bc0:	687b      	ldr	r3, [r7, #4]
}
 c002bc2:	4618      	mov	r0, r3
 c002bc4:	370c      	adds	r7, #12
 c002bc6:	46bd      	mov	sp, r7
 c002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002bcc:	4770      	bx	lr
 c002bce:	bf00      	nop
 c002bd0:	50007000 	.word	0x50007000

0c002bd4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c002bd4:	b580      	push	{r7, lr}
 c002bd6:	b088      	sub	sp, #32
 c002bd8:	af00      	add	r7, sp, #0
 c002bda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c002bdc:	687b      	ldr	r3, [r7, #4]
 c002bde:	2b00      	cmp	r3, #0
 c002be0:	d102      	bne.n	c002be8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c002be2:	2301      	movs	r3, #1
 c002be4:	f000 bcc2 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c002be8:	4b99      	ldr	r3, [pc, #612]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002bea:	689b      	ldr	r3, [r3, #8]
 c002bec:	f003 030c 	and.w	r3, r3, #12
 c002bf0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c002bf2:	4b97      	ldr	r3, [pc, #604]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002bf4:	68db      	ldr	r3, [r3, #12]
 c002bf6:	f003 0303 	and.w	r3, r3, #3
 c002bfa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c002bfc:	687b      	ldr	r3, [r7, #4]
 c002bfe:	681b      	ldr	r3, [r3, #0]
 c002c00:	f003 0310 	and.w	r3, r3, #16
 c002c04:	2b00      	cmp	r3, #0
 c002c06:	f000 80e9 	beq.w	c002ddc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c002c0a:	69bb      	ldr	r3, [r7, #24]
 c002c0c:	2b00      	cmp	r3, #0
 c002c0e:	d006      	beq.n	c002c1e <HAL_RCC_OscConfig+0x4a>
 c002c10:	69bb      	ldr	r3, [r7, #24]
 c002c12:	2b0c      	cmp	r3, #12
 c002c14:	f040 8083 	bne.w	c002d1e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c002c18:	697b      	ldr	r3, [r7, #20]
 c002c1a:	2b01      	cmp	r3, #1
 c002c1c:	d17f      	bne.n	c002d1e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002c1e:	4b8c      	ldr	r3, [pc, #560]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c20:	681b      	ldr	r3, [r3, #0]
 c002c22:	f003 0302 	and.w	r3, r3, #2
 c002c26:	2b00      	cmp	r3, #0
 c002c28:	d006      	beq.n	c002c38 <HAL_RCC_OscConfig+0x64>
 c002c2a:	687b      	ldr	r3, [r7, #4]
 c002c2c:	69db      	ldr	r3, [r3, #28]
 c002c2e:	2b00      	cmp	r3, #0
 c002c30:	d102      	bne.n	c002c38 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c002c32:	2301      	movs	r3, #1
 c002c34:	f000 bc9a 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c002c38:	687b      	ldr	r3, [r7, #4]
 c002c3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c002c3c:	4b84      	ldr	r3, [pc, #528]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c3e:	681b      	ldr	r3, [r3, #0]
 c002c40:	f003 0308 	and.w	r3, r3, #8
 c002c44:	2b00      	cmp	r3, #0
 c002c46:	d004      	beq.n	c002c52 <HAL_RCC_OscConfig+0x7e>
 c002c48:	4b81      	ldr	r3, [pc, #516]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c4a:	681b      	ldr	r3, [r3, #0]
 c002c4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002c50:	e005      	b.n	c002c5e <HAL_RCC_OscConfig+0x8a>
 c002c52:	4b7f      	ldr	r3, [pc, #508]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002c58:	091b      	lsrs	r3, r3, #4
 c002c5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002c5e:	4293      	cmp	r3, r2
 c002c60:	d224      	bcs.n	c002cac <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002c62:	687b      	ldr	r3, [r7, #4]
 c002c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002c66:	4618      	mov	r0, r3
 c002c68:	f000 fe9c 	bl	c0039a4 <RCC_SetFlashLatencyFromMSIRange>
 c002c6c:	4603      	mov	r3, r0
 c002c6e:	2b00      	cmp	r3, #0
 c002c70:	d002      	beq.n	c002c78 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c002c72:	2301      	movs	r3, #1
 c002c74:	f000 bc7a 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002c78:	4b75      	ldr	r3, [pc, #468]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c7a:	681b      	ldr	r3, [r3, #0]
 c002c7c:	4a74      	ldr	r2, [pc, #464]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c7e:	f043 0308 	orr.w	r3, r3, #8
 c002c82:	6013      	str	r3, [r2, #0]
 c002c84:	4b72      	ldr	r3, [pc, #456]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c86:	681b      	ldr	r3, [r3, #0]
 c002c88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002c8c:	687b      	ldr	r3, [r7, #4]
 c002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002c90:	496f      	ldr	r1, [pc, #444]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c92:	4313      	orrs	r3, r2
 c002c94:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002c96:	4b6e      	ldr	r3, [pc, #440]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002c98:	685b      	ldr	r3, [r3, #4]
 c002c9a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002c9e:	687b      	ldr	r3, [r7, #4]
 c002ca0:	6a1b      	ldr	r3, [r3, #32]
 c002ca2:	021b      	lsls	r3, r3, #8
 c002ca4:	496a      	ldr	r1, [pc, #424]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002ca6:	4313      	orrs	r3, r2
 c002ca8:	604b      	str	r3, [r1, #4]
 c002caa:	e026      	b.n	c002cfa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002cac:	4b68      	ldr	r3, [pc, #416]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002cae:	681b      	ldr	r3, [r3, #0]
 c002cb0:	4a67      	ldr	r2, [pc, #412]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002cb2:	f043 0308 	orr.w	r3, r3, #8
 c002cb6:	6013      	str	r3, [r2, #0]
 c002cb8:	4b65      	ldr	r3, [pc, #404]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002cba:	681b      	ldr	r3, [r3, #0]
 c002cbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002cc0:	687b      	ldr	r3, [r7, #4]
 c002cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002cc4:	4962      	ldr	r1, [pc, #392]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002cc6:	4313      	orrs	r3, r2
 c002cc8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002cca:	4b61      	ldr	r3, [pc, #388]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002ccc:	685b      	ldr	r3, [r3, #4]
 c002cce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002cd2:	687b      	ldr	r3, [r7, #4]
 c002cd4:	6a1b      	ldr	r3, [r3, #32]
 c002cd6:	021b      	lsls	r3, r3, #8
 c002cd8:	495d      	ldr	r1, [pc, #372]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002cda:	4313      	orrs	r3, r2
 c002cdc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002cde:	69bb      	ldr	r3, [r7, #24]
 c002ce0:	2b00      	cmp	r3, #0
 c002ce2:	d10a      	bne.n	c002cfa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c002ce4:	687b      	ldr	r3, [r7, #4]
 c002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002ce8:	4618      	mov	r0, r3
 c002cea:	f000 fe5b 	bl	c0039a4 <RCC_SetFlashLatencyFromMSIRange>
 c002cee:	4603      	mov	r3, r0
 c002cf0:	2b00      	cmp	r3, #0
 c002cf2:	d002      	beq.n	c002cfa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c002cf4:	2301      	movs	r3, #1
 c002cf6:	f000 bc39 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c002cfa:	f000 fe17 	bl	c00392c <HAL_RCC_GetHCLKFreq>
 c002cfe:	4603      	mov	r3, r0
 c002d00:	4a54      	ldr	r2, [pc, #336]	; (c002e54 <HAL_RCC_OscConfig+0x280>)
 c002d02:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c002d04:	4b54      	ldr	r3, [pc, #336]	; (c002e58 <HAL_RCC_OscConfig+0x284>)
 c002d06:	681b      	ldr	r3, [r3, #0]
 c002d08:	4618      	mov	r0, r3
 c002d0a:	f7fe fdd7 	bl	c0018bc <HAL_InitTick>
 c002d0e:	4603      	mov	r3, r0
 c002d10:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c002d12:	7bfb      	ldrb	r3, [r7, #15]
 c002d14:	2b00      	cmp	r3, #0
 c002d16:	d060      	beq.n	c002dda <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c002d18:	7bfb      	ldrb	r3, [r7, #15]
 c002d1a:	f000 bc27 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c002d1e:	687b      	ldr	r3, [r7, #4]
 c002d20:	69db      	ldr	r3, [r3, #28]
 c002d22:	2b00      	cmp	r3, #0
 c002d24:	d039      	beq.n	c002d9a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c002d26:	4b4a      	ldr	r3, [pc, #296]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d28:	681b      	ldr	r3, [r3, #0]
 c002d2a:	4a49      	ldr	r2, [pc, #292]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d2c:	f043 0301 	orr.w	r3, r3, #1
 c002d30:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c002d32:	f7fe fe13 	bl	c00195c <HAL_GetTick>
 c002d36:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002d38:	e00f      	b.n	c002d5a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002d3a:	f7fe fe0f 	bl	c00195c <HAL_GetTick>
 c002d3e:	4602      	mov	r2, r0
 c002d40:	693b      	ldr	r3, [r7, #16]
 c002d42:	1ad3      	subs	r3, r2, r3
 c002d44:	2b02      	cmp	r3, #2
 c002d46:	d908      	bls.n	c002d5a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002d48:	4b41      	ldr	r3, [pc, #260]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d4a:	681b      	ldr	r3, [r3, #0]
 c002d4c:	f003 0302 	and.w	r3, r3, #2
 c002d50:	2b00      	cmp	r3, #0
 c002d52:	d102      	bne.n	c002d5a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c002d54:	2303      	movs	r3, #3
 c002d56:	f000 bc09 	b.w	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002d5a:	4b3d      	ldr	r3, [pc, #244]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d5c:	681b      	ldr	r3, [r3, #0]
 c002d5e:	f003 0302 	and.w	r3, r3, #2
 c002d62:	2b00      	cmp	r3, #0
 c002d64:	d0e9      	beq.n	c002d3a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002d66:	4b3a      	ldr	r3, [pc, #232]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d68:	681b      	ldr	r3, [r3, #0]
 c002d6a:	4a39      	ldr	r2, [pc, #228]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d6c:	f043 0308 	orr.w	r3, r3, #8
 c002d70:	6013      	str	r3, [r2, #0]
 c002d72:	4b37      	ldr	r3, [pc, #220]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d74:	681b      	ldr	r3, [r3, #0]
 c002d76:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002d7a:	687b      	ldr	r3, [r7, #4]
 c002d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002d7e:	4934      	ldr	r1, [pc, #208]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d80:	4313      	orrs	r3, r2
 c002d82:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002d84:	4b32      	ldr	r3, [pc, #200]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d86:	685b      	ldr	r3, [r3, #4]
 c002d88:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002d8c:	687b      	ldr	r3, [r7, #4]
 c002d8e:	6a1b      	ldr	r3, [r3, #32]
 c002d90:	021b      	lsls	r3, r3, #8
 c002d92:	492f      	ldr	r1, [pc, #188]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d94:	4313      	orrs	r3, r2
 c002d96:	604b      	str	r3, [r1, #4]
 c002d98:	e020      	b.n	c002ddc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c002d9a:	4b2d      	ldr	r3, [pc, #180]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002d9c:	681b      	ldr	r3, [r3, #0]
 c002d9e:	4a2c      	ldr	r2, [pc, #176]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002da0:	f023 0301 	bic.w	r3, r3, #1
 c002da4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c002da6:	f7fe fdd9 	bl	c00195c <HAL_GetTick>
 c002daa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002dac:	e00e      	b.n	c002dcc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c002dae:	f7fe fdd5 	bl	c00195c <HAL_GetTick>
 c002db2:	4602      	mov	r2, r0
 c002db4:	693b      	ldr	r3, [r7, #16]
 c002db6:	1ad3      	subs	r3, r2, r3
 c002db8:	2b02      	cmp	r3, #2
 c002dba:	d907      	bls.n	c002dcc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002dbc:	4b24      	ldr	r3, [pc, #144]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002dbe:	681b      	ldr	r3, [r3, #0]
 c002dc0:	f003 0302 	and.w	r3, r3, #2
 c002dc4:	2b00      	cmp	r3, #0
 c002dc6:	d001      	beq.n	c002dcc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c002dc8:	2303      	movs	r3, #3
 c002dca:	e3cf      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002dcc:	4b20      	ldr	r3, [pc, #128]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002dce:	681b      	ldr	r3, [r3, #0]
 c002dd0:	f003 0302 	and.w	r3, r3, #2
 c002dd4:	2b00      	cmp	r3, #0
 c002dd6:	d1ea      	bne.n	c002dae <HAL_RCC_OscConfig+0x1da>
 c002dd8:	e000      	b.n	c002ddc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002dda:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002ddc:	687b      	ldr	r3, [r7, #4]
 c002dde:	681b      	ldr	r3, [r3, #0]
 c002de0:	f003 0301 	and.w	r3, r3, #1
 c002de4:	2b00      	cmp	r3, #0
 c002de6:	d07e      	beq.n	c002ee6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c002de8:	69bb      	ldr	r3, [r7, #24]
 c002dea:	2b08      	cmp	r3, #8
 c002dec:	d005      	beq.n	c002dfa <HAL_RCC_OscConfig+0x226>
 c002dee:	69bb      	ldr	r3, [r7, #24]
 c002df0:	2b0c      	cmp	r3, #12
 c002df2:	d10e      	bne.n	c002e12 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c002df4:	697b      	ldr	r3, [r7, #20]
 c002df6:	2b03      	cmp	r3, #3
 c002df8:	d10b      	bne.n	c002e12 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c002dfa:	4b15      	ldr	r3, [pc, #84]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002dfc:	681b      	ldr	r3, [r3, #0]
 c002dfe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002e02:	2b00      	cmp	r3, #0
 c002e04:	d06e      	beq.n	c002ee4 <HAL_RCC_OscConfig+0x310>
 c002e06:	687b      	ldr	r3, [r7, #4]
 c002e08:	685b      	ldr	r3, [r3, #4]
 c002e0a:	2b00      	cmp	r3, #0
 c002e0c:	d16a      	bne.n	c002ee4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c002e0e:	2301      	movs	r3, #1
 c002e10:	e3ac      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c002e12:	687b      	ldr	r3, [r7, #4]
 c002e14:	685b      	ldr	r3, [r3, #4]
 c002e16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c002e1a:	d106      	bne.n	c002e2a <HAL_RCC_OscConfig+0x256>
 c002e1c:	4b0c      	ldr	r3, [pc, #48]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e1e:	681b      	ldr	r3, [r3, #0]
 c002e20:	4a0b      	ldr	r2, [pc, #44]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e22:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002e26:	6013      	str	r3, [r2, #0]
 c002e28:	e024      	b.n	c002e74 <HAL_RCC_OscConfig+0x2a0>
 c002e2a:	687b      	ldr	r3, [r7, #4]
 c002e2c:	685b      	ldr	r3, [r3, #4]
 c002e2e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c002e32:	d113      	bne.n	c002e5c <HAL_RCC_OscConfig+0x288>
 c002e34:	4b06      	ldr	r3, [pc, #24]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e36:	681b      	ldr	r3, [r3, #0]
 c002e38:	4a05      	ldr	r2, [pc, #20]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002e3e:	6013      	str	r3, [r2, #0]
 c002e40:	4b03      	ldr	r3, [pc, #12]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e42:	681b      	ldr	r3, [r3, #0]
 c002e44:	4a02      	ldr	r2, [pc, #8]	; (c002e50 <HAL_RCC_OscConfig+0x27c>)
 c002e46:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002e4a:	6013      	str	r3, [r2, #0]
 c002e4c:	e012      	b.n	c002e74 <HAL_RCC_OscConfig+0x2a0>
 c002e4e:	bf00      	nop
 c002e50:	50021000 	.word	0x50021000
 c002e54:	30000000 	.word	0x30000000
 c002e58:	30000004 	.word	0x30000004
 c002e5c:	4b8b      	ldr	r3, [pc, #556]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002e5e:	681b      	ldr	r3, [r3, #0]
 c002e60:	4a8a      	ldr	r2, [pc, #552]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c002e66:	6013      	str	r3, [r2, #0]
 c002e68:	4b88      	ldr	r3, [pc, #544]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002e6a:	681b      	ldr	r3, [r3, #0]
 c002e6c:	4a87      	ldr	r2, [pc, #540]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002e6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c002e72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002e74:	687b      	ldr	r3, [r7, #4]
 c002e76:	685b      	ldr	r3, [r3, #4]
 c002e78:	2b00      	cmp	r3, #0
 c002e7a:	d019      	beq.n	c002eb0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002e7c:	f7fe fd6e 	bl	c00195c <HAL_GetTick>
 c002e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002e82:	e00e      	b.n	c002ea2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002e84:	f7fe fd6a 	bl	c00195c <HAL_GetTick>
 c002e88:	4602      	mov	r2, r0
 c002e8a:	693b      	ldr	r3, [r7, #16]
 c002e8c:	1ad3      	subs	r3, r2, r3
 c002e8e:	2b64      	cmp	r3, #100	; 0x64
 c002e90:	d907      	bls.n	c002ea2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002e92:	4b7e      	ldr	r3, [pc, #504]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002e94:	681b      	ldr	r3, [r3, #0]
 c002e96:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002e9a:	2b00      	cmp	r3, #0
 c002e9c:	d101      	bne.n	c002ea2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c002e9e:	2303      	movs	r3, #3
 c002ea0:	e364      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c002ea2:	4b7a      	ldr	r3, [pc, #488]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002ea4:	681b      	ldr	r3, [r3, #0]
 c002ea6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002eaa:	2b00      	cmp	r3, #0
 c002eac:	d0ea      	beq.n	c002e84 <HAL_RCC_OscConfig+0x2b0>
 c002eae:	e01a      	b.n	c002ee6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002eb0:	f7fe fd54 	bl	c00195c <HAL_GetTick>
 c002eb4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002eb6:	e00e      	b.n	c002ed6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002eb8:	f7fe fd50 	bl	c00195c <HAL_GetTick>
 c002ebc:	4602      	mov	r2, r0
 c002ebe:	693b      	ldr	r3, [r7, #16]
 c002ec0:	1ad3      	subs	r3, r2, r3
 c002ec2:	2b64      	cmp	r3, #100	; 0x64
 c002ec4:	d907      	bls.n	c002ed6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002ec6:	4b71      	ldr	r3, [pc, #452]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002ec8:	681b      	ldr	r3, [r3, #0]
 c002eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002ece:	2b00      	cmp	r3, #0
 c002ed0:	d001      	beq.n	c002ed6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c002ed2:	2303      	movs	r3, #3
 c002ed4:	e34a      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002ed6:	4b6d      	ldr	r3, [pc, #436]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002ed8:	681b      	ldr	r3, [r3, #0]
 c002eda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002ede:	2b00      	cmp	r3, #0
 c002ee0:	d1ea      	bne.n	c002eb8 <HAL_RCC_OscConfig+0x2e4>
 c002ee2:	e000      	b.n	c002ee6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c002ee4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c002ee6:	687b      	ldr	r3, [r7, #4]
 c002ee8:	681b      	ldr	r3, [r3, #0]
 c002eea:	f003 0302 	and.w	r3, r3, #2
 c002eee:	2b00      	cmp	r3, #0
 c002ef0:	d06c      	beq.n	c002fcc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c002ef2:	69bb      	ldr	r3, [r7, #24]
 c002ef4:	2b04      	cmp	r3, #4
 c002ef6:	d005      	beq.n	c002f04 <HAL_RCC_OscConfig+0x330>
 c002ef8:	69bb      	ldr	r3, [r7, #24]
 c002efa:	2b0c      	cmp	r3, #12
 c002efc:	d119      	bne.n	c002f32 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c002efe:	697b      	ldr	r3, [r7, #20]
 c002f00:	2b02      	cmp	r3, #2
 c002f02:	d116      	bne.n	c002f32 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c002f04:	4b61      	ldr	r3, [pc, #388]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f06:	681b      	ldr	r3, [r3, #0]
 c002f08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f0c:	2b00      	cmp	r3, #0
 c002f0e:	d005      	beq.n	c002f1c <HAL_RCC_OscConfig+0x348>
 c002f10:	687b      	ldr	r3, [r7, #4]
 c002f12:	68db      	ldr	r3, [r3, #12]
 c002f14:	2b00      	cmp	r3, #0
 c002f16:	d101      	bne.n	c002f1c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c002f18:	2301      	movs	r3, #1
 c002f1a:	e327      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c002f1c:	4b5b      	ldr	r3, [pc, #364]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f1e:	685b      	ldr	r3, [r3, #4]
 c002f20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c002f24:	687b      	ldr	r3, [r7, #4]
 c002f26:	691b      	ldr	r3, [r3, #16]
 c002f28:	061b      	lsls	r3, r3, #24
 c002f2a:	4958      	ldr	r1, [pc, #352]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f2c:	4313      	orrs	r3, r2
 c002f2e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c002f30:	e04c      	b.n	c002fcc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c002f32:	687b      	ldr	r3, [r7, #4]
 c002f34:	68db      	ldr	r3, [r3, #12]
 c002f36:	2b00      	cmp	r3, #0
 c002f38:	d029      	beq.n	c002f8e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c002f3a:	4b54      	ldr	r3, [pc, #336]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f3c:	681b      	ldr	r3, [r3, #0]
 c002f3e:	4a53      	ldr	r2, [pc, #332]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002f44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002f46:	f7fe fd09 	bl	c00195c <HAL_GetTick>
 c002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002f4c:	e00e      	b.n	c002f6c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002f4e:	f7fe fd05 	bl	c00195c <HAL_GetTick>
 c002f52:	4602      	mov	r2, r0
 c002f54:	693b      	ldr	r3, [r7, #16]
 c002f56:	1ad3      	subs	r3, r2, r3
 c002f58:	2b02      	cmp	r3, #2
 c002f5a:	d907      	bls.n	c002f6c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002f5c:	4b4b      	ldr	r3, [pc, #300]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f5e:	681b      	ldr	r3, [r3, #0]
 c002f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f64:	2b00      	cmp	r3, #0
 c002f66:	d101      	bne.n	c002f6c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c002f68:	2303      	movs	r3, #3
 c002f6a:	e2ff      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002f6c:	4b47      	ldr	r3, [pc, #284]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f6e:	681b      	ldr	r3, [r3, #0]
 c002f70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f74:	2b00      	cmp	r3, #0
 c002f76:	d0ea      	beq.n	c002f4e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c002f78:	4b44      	ldr	r3, [pc, #272]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f7a:	685b      	ldr	r3, [r3, #4]
 c002f7c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c002f80:	687b      	ldr	r3, [r7, #4]
 c002f82:	691b      	ldr	r3, [r3, #16]
 c002f84:	061b      	lsls	r3, r3, #24
 c002f86:	4941      	ldr	r1, [pc, #260]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f88:	4313      	orrs	r3, r2
 c002f8a:	604b      	str	r3, [r1, #4]
 c002f8c:	e01e      	b.n	c002fcc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c002f8e:	4b3f      	ldr	r3, [pc, #252]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f90:	681b      	ldr	r3, [r3, #0]
 c002f92:	4a3e      	ldr	r2, [pc, #248]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002f94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c002f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002f9a:	f7fe fcdf 	bl	c00195c <HAL_GetTick>
 c002f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002fa0:	e00e      	b.n	c002fc0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002fa2:	f7fe fcdb 	bl	c00195c <HAL_GetTick>
 c002fa6:	4602      	mov	r2, r0
 c002fa8:	693b      	ldr	r3, [r7, #16]
 c002faa:	1ad3      	subs	r3, r2, r3
 c002fac:	2b02      	cmp	r3, #2
 c002fae:	d907      	bls.n	c002fc0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002fb0:	4b36      	ldr	r3, [pc, #216]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002fb2:	681b      	ldr	r3, [r3, #0]
 c002fb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002fb8:	2b00      	cmp	r3, #0
 c002fba:	d001      	beq.n	c002fc0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c002fbc:	2303      	movs	r3, #3
 c002fbe:	e2d5      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002fc0:	4b32      	ldr	r3, [pc, #200]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002fc2:	681b      	ldr	r3, [r3, #0]
 c002fc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002fc8:	2b00      	cmp	r3, #0
 c002fca:	d1ea      	bne.n	c002fa2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002fcc:	687b      	ldr	r3, [r7, #4]
 c002fce:	681b      	ldr	r3, [r3, #0]
 c002fd0:	f003 0308 	and.w	r3, r3, #8
 c002fd4:	2b00      	cmp	r3, #0
 c002fd6:	d062      	beq.n	c00309e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c002fd8:	687b      	ldr	r3, [r7, #4]
 c002fda:	695b      	ldr	r3, [r3, #20]
 c002fdc:	2b00      	cmp	r3, #0
 c002fde:	d038      	beq.n	c003052 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c002fe0:	687b      	ldr	r3, [r7, #4]
 c002fe2:	699b      	ldr	r3, [r3, #24]
 c002fe4:	2b00      	cmp	r3, #0
 c002fe6:	d108      	bne.n	c002ffa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c002fe8:	4b28      	ldr	r3, [pc, #160]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002fea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002fee:	4a27      	ldr	r2, [pc, #156]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002ff0:	f023 0310 	bic.w	r3, r3, #16
 c002ff4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c002ff8:	e007      	b.n	c00300a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c002ffa:	4b24      	ldr	r3, [pc, #144]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c002ffc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003000:	4a22      	ldr	r2, [pc, #136]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c003002:	f043 0310 	orr.w	r3, r3, #16
 c003006:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c00300a:	4b20      	ldr	r3, [pc, #128]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c00300c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003010:	4a1e      	ldr	r2, [pc, #120]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c003012:	f043 0301 	orr.w	r3, r3, #1
 c003016:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00301a:	f7fe fc9f 	bl	c00195c <HAL_GetTick>
 c00301e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c003020:	e00f      	b.n	c003042 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c003022:	f7fe fc9b 	bl	c00195c <HAL_GetTick>
 c003026:	4602      	mov	r2, r0
 c003028:	693b      	ldr	r3, [r7, #16]
 c00302a:	1ad3      	subs	r3, r2, r3
 c00302c:	2b07      	cmp	r3, #7
 c00302e:	d908      	bls.n	c003042 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c003030:	4b16      	ldr	r3, [pc, #88]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c003032:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003036:	f003 0302 	and.w	r3, r3, #2
 c00303a:	2b00      	cmp	r3, #0
 c00303c:	d101      	bne.n	c003042 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c00303e:	2303      	movs	r3, #3
 c003040:	e294      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c003042:	4b12      	ldr	r3, [pc, #72]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c003044:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003048:	f003 0302 	and.w	r3, r3, #2
 c00304c:	2b00      	cmp	r3, #0
 c00304e:	d0e8      	beq.n	c003022 <HAL_RCC_OscConfig+0x44e>
 c003050:	e025      	b.n	c00309e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c003052:	4b0e      	ldr	r3, [pc, #56]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c003054:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003058:	4a0c      	ldr	r2, [pc, #48]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c00305a:	f023 0301 	bic.w	r3, r3, #1
 c00305e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003062:	f7fe fc7b 	bl	c00195c <HAL_GetTick>
 c003066:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003068:	e012      	b.n	c003090 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00306a:	f7fe fc77 	bl	c00195c <HAL_GetTick>
 c00306e:	4602      	mov	r2, r0
 c003070:	693b      	ldr	r3, [r7, #16]
 c003072:	1ad3      	subs	r3, r2, r3
 c003074:	2b07      	cmp	r3, #7
 c003076:	d90b      	bls.n	c003090 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003078:	4b04      	ldr	r3, [pc, #16]	; (c00308c <HAL_RCC_OscConfig+0x4b8>)
 c00307a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00307e:	f003 0302 	and.w	r3, r3, #2
 c003082:	2b00      	cmp	r3, #0
 c003084:	d004      	beq.n	c003090 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c003086:	2303      	movs	r3, #3
 c003088:	e270      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
 c00308a:	bf00      	nop
 c00308c:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003090:	4ba8      	ldr	r3, [pc, #672]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003096:	f003 0302 	and.w	r3, r3, #2
 c00309a:	2b00      	cmp	r3, #0
 c00309c:	d1e5      	bne.n	c00306a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00309e:	687b      	ldr	r3, [r7, #4]
 c0030a0:	681b      	ldr	r3, [r3, #0]
 c0030a2:	f003 0304 	and.w	r3, r3, #4
 c0030a6:	2b00      	cmp	r3, #0
 c0030a8:	f000 812d 	beq.w	c003306 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0030ac:	2300      	movs	r3, #0
 c0030ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c0030b0:	4ba0      	ldr	r3, [pc, #640]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0030b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0030b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0030b8:	2b00      	cmp	r3, #0
 c0030ba:	d10d      	bne.n	c0030d8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0030bc:	4b9d      	ldr	r3, [pc, #628]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0030be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0030c0:	4a9c      	ldr	r2, [pc, #624]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0030c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0030c6:	6593      	str	r3, [r2, #88]	; 0x58
 c0030c8:	4b9a      	ldr	r3, [pc, #616]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0030ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0030cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0030d0:	60bb      	str	r3, [r7, #8]
 c0030d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c0030d4:	2301      	movs	r3, #1
 c0030d6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0030d8:	4b97      	ldr	r3, [pc, #604]	; (c003338 <HAL_RCC_OscConfig+0x764>)
 c0030da:	681b      	ldr	r3, [r3, #0]
 c0030dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0030e0:	2b00      	cmp	r3, #0
 c0030e2:	d11e      	bne.n	c003122 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0030e4:	4b94      	ldr	r3, [pc, #592]	; (c003338 <HAL_RCC_OscConfig+0x764>)
 c0030e6:	681b      	ldr	r3, [r3, #0]
 c0030e8:	4a93      	ldr	r2, [pc, #588]	; (c003338 <HAL_RCC_OscConfig+0x764>)
 c0030ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0030ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c0030f0:	f7fe fc34 	bl	c00195c <HAL_GetTick>
 c0030f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0030f6:	e00e      	b.n	c003116 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0030f8:	f7fe fc30 	bl	c00195c <HAL_GetTick>
 c0030fc:	4602      	mov	r2, r0
 c0030fe:	693b      	ldr	r3, [r7, #16]
 c003100:	1ad3      	subs	r3, r2, r3
 c003102:	2b02      	cmp	r3, #2
 c003104:	d907      	bls.n	c003116 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003106:	4b8c      	ldr	r3, [pc, #560]	; (c003338 <HAL_RCC_OscConfig+0x764>)
 c003108:	681b      	ldr	r3, [r3, #0]
 c00310a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00310e:	2b00      	cmp	r3, #0
 c003110:	d101      	bne.n	c003116 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c003112:	2303      	movs	r3, #3
 c003114:	e22a      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003116:	4b88      	ldr	r3, [pc, #544]	; (c003338 <HAL_RCC_OscConfig+0x764>)
 c003118:	681b      	ldr	r3, [r3, #0]
 c00311a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00311e:	2b00      	cmp	r3, #0
 c003120:	d0ea      	beq.n	c0030f8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c003122:	687b      	ldr	r3, [r7, #4]
 c003124:	689b      	ldr	r3, [r3, #8]
 c003126:	f003 0301 	and.w	r3, r3, #1
 c00312a:	2b00      	cmp	r3, #0
 c00312c:	d01f      	beq.n	c00316e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c00312e:	687b      	ldr	r3, [r7, #4]
 c003130:	689b      	ldr	r3, [r3, #8]
 c003132:	f003 0304 	and.w	r3, r3, #4
 c003136:	2b00      	cmp	r3, #0
 c003138:	d010      	beq.n	c00315c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00313a:	4b7e      	ldr	r3, [pc, #504]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00313c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003140:	4a7c      	ldr	r2, [pc, #496]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003142:	f043 0304 	orr.w	r3, r3, #4
 c003146:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00314a:	4b7a      	ldr	r3, [pc, #488]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00314c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003150:	4a78      	ldr	r2, [pc, #480]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003152:	f043 0301 	orr.w	r3, r3, #1
 c003156:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c00315a:	e018      	b.n	c00318e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00315c:	4b75      	ldr	r3, [pc, #468]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00315e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003162:	4a74      	ldr	r2, [pc, #464]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003164:	f043 0301 	orr.w	r3, r3, #1
 c003168:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c00316c:	e00f      	b.n	c00318e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c00316e:	4b71      	ldr	r3, [pc, #452]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003170:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003174:	4a6f      	ldr	r2, [pc, #444]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003176:	f023 0301 	bic.w	r3, r3, #1
 c00317a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c00317e:	4b6d      	ldr	r3, [pc, #436]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003180:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003184:	4a6b      	ldr	r2, [pc, #428]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003186:	f023 0304 	bic.w	r3, r3, #4
 c00318a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c00318e:	687b      	ldr	r3, [r7, #4]
 c003190:	689b      	ldr	r3, [r3, #8]
 c003192:	2b00      	cmp	r3, #0
 c003194:	d068      	beq.n	c003268 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003196:	f7fe fbe1 	bl	c00195c <HAL_GetTick>
 c00319a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00319c:	e011      	b.n	c0031c2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00319e:	f7fe fbdd 	bl	c00195c <HAL_GetTick>
 c0031a2:	4602      	mov	r2, r0
 c0031a4:	693b      	ldr	r3, [r7, #16]
 c0031a6:	1ad3      	subs	r3, r2, r3
 c0031a8:	f241 3288 	movw	r2, #5000	; 0x1388
 c0031ac:	4293      	cmp	r3, r2
 c0031ae:	d908      	bls.n	c0031c2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0031b0:	4b60      	ldr	r3, [pc, #384]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0031b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0031b6:	f003 0302 	and.w	r3, r3, #2
 c0031ba:	2b00      	cmp	r3, #0
 c0031bc:	d101      	bne.n	c0031c2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c0031be:	2303      	movs	r3, #3
 c0031c0:	e1d4      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0031c2:	4b5c      	ldr	r3, [pc, #368]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0031c8:	f003 0302 	and.w	r3, r3, #2
 c0031cc:	2b00      	cmp	r3, #0
 c0031ce:	d0e6      	beq.n	c00319e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0031d0:	687b      	ldr	r3, [r7, #4]
 c0031d2:	689b      	ldr	r3, [r3, #8]
 c0031d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0031d8:	2b00      	cmp	r3, #0
 c0031da:	d022      	beq.n	c003222 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0031dc:	4b55      	ldr	r3, [pc, #340]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0031de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0031e2:	4a54      	ldr	r2, [pc, #336]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0031e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0031e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c0031ec:	e011      	b.n	c003212 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0031ee:	f7fe fbb5 	bl	c00195c <HAL_GetTick>
 c0031f2:	4602      	mov	r2, r0
 c0031f4:	693b      	ldr	r3, [r7, #16]
 c0031f6:	1ad3      	subs	r3, r2, r3
 c0031f8:	f241 3288 	movw	r2, #5000	; 0x1388
 c0031fc:	4293      	cmp	r3, r2
 c0031fe:	d908      	bls.n	c003212 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003200:	4b4c      	ldr	r3, [pc, #304]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003206:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00320a:	2b00      	cmp	r3, #0
 c00320c:	d101      	bne.n	c003212 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c00320e:	2303      	movs	r3, #3
 c003210:	e1ac      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003212:	4b48      	ldr	r3, [pc, #288]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003214:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003218:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00321c:	2b00      	cmp	r3, #0
 c00321e:	d0e6      	beq.n	c0031ee <HAL_RCC_OscConfig+0x61a>
 c003220:	e068      	b.n	c0032f4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003222:	4b44      	ldr	r3, [pc, #272]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003224:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003228:	4a42      	ldr	r2, [pc, #264]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00322a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00322e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003232:	e011      	b.n	c003258 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003234:	f7fe fb92 	bl	c00195c <HAL_GetTick>
 c003238:	4602      	mov	r2, r0
 c00323a:	693b      	ldr	r3, [r7, #16]
 c00323c:	1ad3      	subs	r3, r2, r3
 c00323e:	f241 3288 	movw	r2, #5000	; 0x1388
 c003242:	4293      	cmp	r3, r2
 c003244:	d908      	bls.n	c003258 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003246:	4b3b      	ldr	r3, [pc, #236]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003248:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00324c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003250:	2b00      	cmp	r3, #0
 c003252:	d001      	beq.n	c003258 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c003254:	2303      	movs	r3, #3
 c003256:	e189      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003258:	4b36      	ldr	r3, [pc, #216]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00325a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00325e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003262:	2b00      	cmp	r3, #0
 c003264:	d1e6      	bne.n	c003234 <HAL_RCC_OscConfig+0x660>
 c003266:	e045      	b.n	c0032f4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003268:	f7fe fb78 	bl	c00195c <HAL_GetTick>
 c00326c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00326e:	e011      	b.n	c003294 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003270:	f7fe fb74 	bl	c00195c <HAL_GetTick>
 c003274:	4602      	mov	r2, r0
 c003276:	693b      	ldr	r3, [r7, #16]
 c003278:	1ad3      	subs	r3, r2, r3
 c00327a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00327e:	4293      	cmp	r3, r2
 c003280:	d908      	bls.n	c003294 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003282:	4b2c      	ldr	r3, [pc, #176]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003284:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003288:	f003 0302 	and.w	r3, r3, #2
 c00328c:	2b00      	cmp	r3, #0
 c00328e:	d001      	beq.n	c003294 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c003290:	2303      	movs	r3, #3
 c003292:	e16b      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003294:	4b27      	ldr	r3, [pc, #156]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003296:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00329a:	f003 0302 	and.w	r3, r3, #2
 c00329e:	2b00      	cmp	r3, #0
 c0032a0:	d1e6      	bne.n	c003270 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0032a2:	4b24      	ldr	r3, [pc, #144]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0032a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0032ac:	2b00      	cmp	r3, #0
 c0032ae:	d021      	beq.n	c0032f4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0032b0:	4b20      	ldr	r3, [pc, #128]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0032b6:	4a1f      	ldr	r2, [pc, #124]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0032bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0032c0:	e011      	b.n	c0032e6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0032c2:	f7fe fb4b 	bl	c00195c <HAL_GetTick>
 c0032c6:	4602      	mov	r2, r0
 c0032c8:	693b      	ldr	r3, [r7, #16]
 c0032ca:	1ad3      	subs	r3, r2, r3
 c0032cc:	f241 3288 	movw	r2, #5000	; 0x1388
 c0032d0:	4293      	cmp	r3, r2
 c0032d2:	d908      	bls.n	c0032e6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0032d4:	4b17      	ldr	r3, [pc, #92]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0032da:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0032de:	2b00      	cmp	r3, #0
 c0032e0:	d001      	beq.n	c0032e6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c0032e2:	2303      	movs	r3, #3
 c0032e4:	e142      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0032e6:	4b13      	ldr	r3, [pc, #76]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0032ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0032f0:	2b00      	cmp	r3, #0
 c0032f2:	d1e6      	bne.n	c0032c2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0032f4:	7ffb      	ldrb	r3, [r7, #31]
 c0032f6:	2b01      	cmp	r3, #1
 c0032f8:	d105      	bne.n	c003306 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0032fa:	4b0e      	ldr	r3, [pc, #56]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c0032fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0032fe:	4a0d      	ldr	r2, [pc, #52]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003300:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003304:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003306:	687b      	ldr	r3, [r7, #4]
 c003308:	681b      	ldr	r3, [r3, #0]
 c00330a:	f003 0320 	and.w	r3, r3, #32
 c00330e:	2b00      	cmp	r3, #0
 c003310:	d04f      	beq.n	c0033b2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003312:	687b      	ldr	r3, [r7, #4]
 c003314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003316:	2b00      	cmp	r3, #0
 c003318:	d028      	beq.n	c00336c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c00331a:	4b06      	ldr	r3, [pc, #24]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c00331c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003320:	4a04      	ldr	r2, [pc, #16]	; (c003334 <HAL_RCC_OscConfig+0x760>)
 c003322:	f043 0301 	orr.w	r3, r3, #1
 c003326:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00332a:	f7fe fb17 	bl	c00195c <HAL_GetTick>
 c00332e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003330:	e014      	b.n	c00335c <HAL_RCC_OscConfig+0x788>
 c003332:	bf00      	nop
 c003334:	50021000 	.word	0x50021000
 c003338:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00333c:	f7fe fb0e 	bl	c00195c <HAL_GetTick>
 c003340:	4602      	mov	r2, r0
 c003342:	693b      	ldr	r3, [r7, #16]
 c003344:	1ad3      	subs	r3, r2, r3
 c003346:	2b02      	cmp	r3, #2
 c003348:	d908      	bls.n	c00335c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00334a:	4b8a      	ldr	r3, [pc, #552]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c00334c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003350:	f003 0302 	and.w	r3, r3, #2
 c003354:	2b00      	cmp	r3, #0
 c003356:	d101      	bne.n	c00335c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c003358:	2303      	movs	r3, #3
 c00335a:	e107      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c00335c:	4b85      	ldr	r3, [pc, #532]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c00335e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003362:	f003 0302 	and.w	r3, r3, #2
 c003366:	2b00      	cmp	r3, #0
 c003368:	d0e8      	beq.n	c00333c <HAL_RCC_OscConfig+0x768>
 c00336a:	e022      	b.n	c0033b2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c00336c:	4b81      	ldr	r3, [pc, #516]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c00336e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003372:	4a80      	ldr	r2, [pc, #512]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003374:	f023 0301 	bic.w	r3, r3, #1
 c003378:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00337c:	f7fe faee 	bl	c00195c <HAL_GetTick>
 c003380:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003382:	e00f      	b.n	c0033a4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003384:	f7fe faea 	bl	c00195c <HAL_GetTick>
 c003388:	4602      	mov	r2, r0
 c00338a:	693b      	ldr	r3, [r7, #16]
 c00338c:	1ad3      	subs	r3, r2, r3
 c00338e:	2b02      	cmp	r3, #2
 c003390:	d908      	bls.n	c0033a4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003392:	4b78      	ldr	r3, [pc, #480]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003394:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003398:	f003 0302 	and.w	r3, r3, #2
 c00339c:	2b00      	cmp	r3, #0
 c00339e:	d001      	beq.n	c0033a4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0033a0:	2303      	movs	r3, #3
 c0033a2:	e0e3      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0033a4:	4b73      	ldr	r3, [pc, #460]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0033a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0033aa:	f003 0302 	and.w	r3, r3, #2
 c0033ae:	2b00      	cmp	r3, #0
 c0033b0:	d1e8      	bne.n	c003384 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0033b2:	687b      	ldr	r3, [r7, #4]
 c0033b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0033b6:	2b00      	cmp	r3, #0
 c0033b8:	f000 80d7 	beq.w	c00356a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0033bc:	4b6d      	ldr	r3, [pc, #436]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0033be:	689b      	ldr	r3, [r3, #8]
 c0033c0:	f003 030c 	and.w	r3, r3, #12
 c0033c4:	2b0c      	cmp	r3, #12
 c0033c6:	f000 8091 	beq.w	c0034ec <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0033ca:	687b      	ldr	r3, [r7, #4]
 c0033cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0033ce:	2b02      	cmp	r3, #2
 c0033d0:	d166      	bne.n	c0034a0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0033d2:	4b68      	ldr	r3, [pc, #416]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0033d4:	681b      	ldr	r3, [r3, #0]
 c0033d6:	4a67      	ldr	r2, [pc, #412]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0033d8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0033dc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0033de:	f7fe fabd 	bl	c00195c <HAL_GetTick>
 c0033e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0033e4:	e00e      	b.n	c003404 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0033e6:	f7fe fab9 	bl	c00195c <HAL_GetTick>
 c0033ea:	4602      	mov	r2, r0
 c0033ec:	693b      	ldr	r3, [r7, #16]
 c0033ee:	1ad3      	subs	r3, r2, r3
 c0033f0:	2b02      	cmp	r3, #2
 c0033f2:	d907      	bls.n	c003404 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0033f4:	4b5f      	ldr	r3, [pc, #380]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0033f6:	681b      	ldr	r3, [r3, #0]
 c0033f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0033fc:	2b00      	cmp	r3, #0
 c0033fe:	d001      	beq.n	c003404 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c003400:	2303      	movs	r3, #3
 c003402:	e0b3      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003404:	4b5b      	ldr	r3, [pc, #364]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003406:	681b      	ldr	r3, [r3, #0]
 c003408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00340c:	2b00      	cmp	r3, #0
 c00340e:	d1ea      	bne.n	c0033e6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c003410:	4b58      	ldr	r3, [pc, #352]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003412:	68da      	ldr	r2, [r3, #12]
 c003414:	4b58      	ldr	r3, [pc, #352]	; (c003578 <HAL_RCC_OscConfig+0x9a4>)
 c003416:	4013      	ands	r3, r2
 c003418:	687a      	ldr	r2, [r7, #4]
 c00341a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c00341c:	687a      	ldr	r2, [r7, #4]
 c00341e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c003420:	3a01      	subs	r2, #1
 c003422:	0112      	lsls	r2, r2, #4
 c003424:	4311      	orrs	r1, r2
 c003426:	687a      	ldr	r2, [r7, #4]
 c003428:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c00342a:	0212      	lsls	r2, r2, #8
 c00342c:	4311      	orrs	r1, r2
 c00342e:	687a      	ldr	r2, [r7, #4]
 c003430:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c003432:	0852      	lsrs	r2, r2, #1
 c003434:	3a01      	subs	r2, #1
 c003436:	0552      	lsls	r2, r2, #21
 c003438:	4311      	orrs	r1, r2
 c00343a:	687a      	ldr	r2, [r7, #4]
 c00343c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c00343e:	0852      	lsrs	r2, r2, #1
 c003440:	3a01      	subs	r2, #1
 c003442:	0652      	lsls	r2, r2, #25
 c003444:	4311      	orrs	r1, r2
 c003446:	687a      	ldr	r2, [r7, #4]
 c003448:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c00344a:	06d2      	lsls	r2, r2, #27
 c00344c:	430a      	orrs	r2, r1
 c00344e:	4949      	ldr	r1, [pc, #292]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003450:	4313      	orrs	r3, r2
 c003452:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c003454:	4b47      	ldr	r3, [pc, #284]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003456:	681b      	ldr	r3, [r3, #0]
 c003458:	4a46      	ldr	r2, [pc, #280]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c00345a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00345e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c003460:	4b44      	ldr	r3, [pc, #272]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003462:	68db      	ldr	r3, [r3, #12]
 c003464:	4a43      	ldr	r2, [pc, #268]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003466:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c00346a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00346c:	f7fe fa76 	bl	c00195c <HAL_GetTick>
 c003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003472:	e00e      	b.n	c003492 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003474:	f7fe fa72 	bl	c00195c <HAL_GetTick>
 c003478:	4602      	mov	r2, r0
 c00347a:	693b      	ldr	r3, [r7, #16]
 c00347c:	1ad3      	subs	r3, r2, r3
 c00347e:	2b02      	cmp	r3, #2
 c003480:	d907      	bls.n	c003492 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003482:	4b3c      	ldr	r3, [pc, #240]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003484:	681b      	ldr	r3, [r3, #0]
 c003486:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00348a:	2b00      	cmp	r3, #0
 c00348c:	d101      	bne.n	c003492 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c00348e:	2303      	movs	r3, #3
 c003490:	e06c      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003492:	4b38      	ldr	r3, [pc, #224]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c003494:	681b      	ldr	r3, [r3, #0]
 c003496:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00349a:	2b00      	cmp	r3, #0
 c00349c:	d0ea      	beq.n	c003474 <HAL_RCC_OscConfig+0x8a0>
 c00349e:	e064      	b.n	c00356a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0034a0:	4b34      	ldr	r3, [pc, #208]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034a2:	681b      	ldr	r3, [r3, #0]
 c0034a4:	4a33      	ldr	r2, [pc, #204]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0034aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0034ac:	f7fe fa56 	bl	c00195c <HAL_GetTick>
 c0034b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0034b2:	e00e      	b.n	c0034d2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0034b4:	f7fe fa52 	bl	c00195c <HAL_GetTick>
 c0034b8:	4602      	mov	r2, r0
 c0034ba:	693b      	ldr	r3, [r7, #16]
 c0034bc:	1ad3      	subs	r3, r2, r3
 c0034be:	2b02      	cmp	r3, #2
 c0034c0:	d907      	bls.n	c0034d2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0034c2:	4b2c      	ldr	r3, [pc, #176]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034c4:	681b      	ldr	r3, [r3, #0]
 c0034c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0034ca:	2b00      	cmp	r3, #0
 c0034cc:	d001      	beq.n	c0034d2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c0034ce:	2303      	movs	r3, #3
 c0034d0:	e04c      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0034d2:	4b28      	ldr	r3, [pc, #160]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034d4:	681b      	ldr	r3, [r3, #0]
 c0034d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0034da:	2b00      	cmp	r3, #0
 c0034dc:	d1ea      	bne.n	c0034b4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0034de:	4b25      	ldr	r3, [pc, #148]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034e0:	68da      	ldr	r2, [r3, #12]
 c0034e2:	4924      	ldr	r1, [pc, #144]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034e4:	4b25      	ldr	r3, [pc, #148]	; (c00357c <HAL_RCC_OscConfig+0x9a8>)
 c0034e6:	4013      	ands	r3, r2
 c0034e8:	60cb      	str	r3, [r1, #12]
 c0034ea:	e03e      	b.n	c00356a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c0034ec:	687b      	ldr	r3, [r7, #4]
 c0034ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0034f0:	2b01      	cmp	r3, #1
 c0034f2:	d101      	bne.n	c0034f8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c0034f4:	2301      	movs	r3, #1
 c0034f6:	e039      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c0034f8:	4b1e      	ldr	r3, [pc, #120]	; (c003574 <HAL_RCC_OscConfig+0x9a0>)
 c0034fa:	68db      	ldr	r3, [r3, #12]
 c0034fc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0034fe:	697b      	ldr	r3, [r7, #20]
 c003500:	f003 0203 	and.w	r2, r3, #3
 c003504:	687b      	ldr	r3, [r7, #4]
 c003506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003508:	429a      	cmp	r2, r3
 c00350a:	d12c      	bne.n	c003566 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00350c:	697b      	ldr	r3, [r7, #20]
 c00350e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c003512:	687b      	ldr	r3, [r7, #4]
 c003514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003516:	3b01      	subs	r3, #1
 c003518:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c00351a:	429a      	cmp	r2, r3
 c00351c:	d123      	bne.n	c003566 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00351e:	697b      	ldr	r3, [r7, #20]
 c003520:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c003524:	687b      	ldr	r3, [r7, #4]
 c003526:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003528:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c00352a:	429a      	cmp	r2, r3
 c00352c:	d11b      	bne.n	c003566 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00352e:	697b      	ldr	r3, [r7, #20]
 c003530:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c003534:	687b      	ldr	r3, [r7, #4]
 c003536:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003538:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c00353a:	429a      	cmp	r2, r3
 c00353c:	d113      	bne.n	c003566 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00353e:	697b      	ldr	r3, [r7, #20]
 c003540:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c003544:	687b      	ldr	r3, [r7, #4]
 c003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003548:	085b      	lsrs	r3, r3, #1
 c00354a:	3b01      	subs	r3, #1
 c00354c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00354e:	429a      	cmp	r2, r3
 c003550:	d109      	bne.n	c003566 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c003552:	697b      	ldr	r3, [r7, #20]
 c003554:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c003558:	687b      	ldr	r3, [r7, #4]
 c00355a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00355c:	085b      	lsrs	r3, r3, #1
 c00355e:	3b01      	subs	r3, #1
 c003560:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c003562:	429a      	cmp	r2, r3
 c003564:	d001      	beq.n	c00356a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c003566:	2301      	movs	r3, #1
 c003568:	e000      	b.n	c00356c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c00356a:	2300      	movs	r3, #0
}
 c00356c:	4618      	mov	r0, r3
 c00356e:	3720      	adds	r7, #32
 c003570:	46bd      	mov	sp, r7
 c003572:	bd80      	pop	{r7, pc}
 c003574:	50021000 	.word	0x50021000
 c003578:	019f800c 	.word	0x019f800c
 c00357c:	feeefffc 	.word	0xfeeefffc

0c003580 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c003580:	b580      	push	{r7, lr}
 c003582:	b086      	sub	sp, #24
 c003584:	af00      	add	r7, sp, #0
 c003586:	6078      	str	r0, [r7, #4]
 c003588:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c00358a:	2300      	movs	r3, #0
 c00358c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c00358e:	687b      	ldr	r3, [r7, #4]
 c003590:	2b00      	cmp	r3, #0
 c003592:	d101      	bne.n	c003598 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c003594:	2301      	movs	r3, #1
 c003596:	e11c      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003598:	4b90      	ldr	r3, [pc, #576]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c00359a:	681b      	ldr	r3, [r3, #0]
 c00359c:	f003 030f 	and.w	r3, r3, #15
 c0035a0:	683a      	ldr	r2, [r7, #0]
 c0035a2:	429a      	cmp	r2, r3
 c0035a4:	d910      	bls.n	c0035c8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0035a6:	4b8d      	ldr	r3, [pc, #564]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c0035a8:	681b      	ldr	r3, [r3, #0]
 c0035aa:	f023 020f 	bic.w	r2, r3, #15
 c0035ae:	498b      	ldr	r1, [pc, #556]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c0035b0:	683b      	ldr	r3, [r7, #0]
 c0035b2:	4313      	orrs	r3, r2
 c0035b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0035b6:	4b89      	ldr	r3, [pc, #548]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c0035b8:	681b      	ldr	r3, [r3, #0]
 c0035ba:	f003 030f 	and.w	r3, r3, #15
 c0035be:	683a      	ldr	r2, [r7, #0]
 c0035c0:	429a      	cmp	r2, r3
 c0035c2:	d001      	beq.n	c0035c8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0035c4:	2301      	movs	r3, #1
 c0035c6:	e104      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0035c8:	687b      	ldr	r3, [r7, #4]
 c0035ca:	681b      	ldr	r3, [r3, #0]
 c0035cc:	f003 0302 	and.w	r3, r3, #2
 c0035d0:	2b00      	cmp	r3, #0
 c0035d2:	d010      	beq.n	c0035f6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c0035d4:	687b      	ldr	r3, [r7, #4]
 c0035d6:	689a      	ldr	r2, [r3, #8]
 c0035d8:	4b81      	ldr	r3, [pc, #516]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0035da:	689b      	ldr	r3, [r3, #8]
 c0035dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0035e0:	429a      	cmp	r2, r3
 c0035e2:	d908      	bls.n	c0035f6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0035e4:	4b7e      	ldr	r3, [pc, #504]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0035e6:	689b      	ldr	r3, [r3, #8]
 c0035e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0035ec:	687b      	ldr	r3, [r7, #4]
 c0035ee:	689b      	ldr	r3, [r3, #8]
 c0035f0:	497b      	ldr	r1, [pc, #492]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0035f2:	4313      	orrs	r3, r2
 c0035f4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0035f6:	687b      	ldr	r3, [r7, #4]
 c0035f8:	681b      	ldr	r3, [r3, #0]
 c0035fa:	f003 0301 	and.w	r3, r3, #1
 c0035fe:	2b00      	cmp	r3, #0
 c003600:	f000 8085 	beq.w	c00370e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003604:	687b      	ldr	r3, [r7, #4]
 c003606:	685b      	ldr	r3, [r3, #4]
 c003608:	2b03      	cmp	r3, #3
 c00360a:	d11f      	bne.n	c00364c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00360c:	4b74      	ldr	r3, [pc, #464]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00360e:	681b      	ldr	r3, [r3, #0]
 c003610:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003614:	2b00      	cmp	r3, #0
 c003616:	d101      	bne.n	c00361c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c003618:	2301      	movs	r3, #1
 c00361a:	e0da      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c00361c:	f000 fa26 	bl	c003a6c <RCC_GetSysClockFreqFromPLLSource>
 c003620:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c003622:	693b      	ldr	r3, [r7, #16]
 c003624:	4a6f      	ldr	r2, [pc, #444]	; (c0037e4 <HAL_RCC_ClockConfig+0x264>)
 c003626:	4293      	cmp	r3, r2
 c003628:	d947      	bls.n	c0036ba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c00362a:	4b6d      	ldr	r3, [pc, #436]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00362c:	689b      	ldr	r3, [r3, #8]
 c00362e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003632:	2b00      	cmp	r3, #0
 c003634:	d141      	bne.n	c0036ba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003636:	4b6a      	ldr	r3, [pc, #424]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003638:	689b      	ldr	r3, [r3, #8]
 c00363a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00363e:	4a68      	ldr	r2, [pc, #416]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003640:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003644:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003646:	2380      	movs	r3, #128	; 0x80
 c003648:	617b      	str	r3, [r7, #20]
 c00364a:	e036      	b.n	c0036ba <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c00364c:	687b      	ldr	r3, [r7, #4]
 c00364e:	685b      	ldr	r3, [r3, #4]
 c003650:	2b02      	cmp	r3, #2
 c003652:	d107      	bne.n	c003664 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003654:	4b62      	ldr	r3, [pc, #392]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003656:	681b      	ldr	r3, [r3, #0]
 c003658:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00365c:	2b00      	cmp	r3, #0
 c00365e:	d115      	bne.n	c00368c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003660:	2301      	movs	r3, #1
 c003662:	e0b6      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003664:	687b      	ldr	r3, [r7, #4]
 c003666:	685b      	ldr	r3, [r3, #4]
 c003668:	2b00      	cmp	r3, #0
 c00366a:	d107      	bne.n	c00367c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c00366c:	4b5c      	ldr	r3, [pc, #368]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00366e:	681b      	ldr	r3, [r3, #0]
 c003670:	f003 0302 	and.w	r3, r3, #2
 c003674:	2b00      	cmp	r3, #0
 c003676:	d109      	bne.n	c00368c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003678:	2301      	movs	r3, #1
 c00367a:	e0aa      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c00367c:	4b58      	ldr	r3, [pc, #352]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00367e:	681b      	ldr	r3, [r3, #0]
 c003680:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003684:	2b00      	cmp	r3, #0
 c003686:	d101      	bne.n	c00368c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003688:	2301      	movs	r3, #1
 c00368a:	e0a2      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c00368c:	f000 f8b0 	bl	c0037f0 <HAL_RCC_GetSysClockFreq>
 c003690:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c003692:	693b      	ldr	r3, [r7, #16]
 c003694:	4a53      	ldr	r2, [pc, #332]	; (c0037e4 <HAL_RCC_ClockConfig+0x264>)
 c003696:	4293      	cmp	r3, r2
 c003698:	d90f      	bls.n	c0036ba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c00369a:	4b51      	ldr	r3, [pc, #324]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00369c:	689b      	ldr	r3, [r3, #8]
 c00369e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0036a2:	2b00      	cmp	r3, #0
 c0036a4:	d109      	bne.n	c0036ba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0036a6:	4b4e      	ldr	r3, [pc, #312]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036a8:	689b      	ldr	r3, [r3, #8]
 c0036aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0036ae:	4a4c      	ldr	r2, [pc, #304]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0036b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c0036b6:	2380      	movs	r3, #128	; 0x80
 c0036b8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0036ba:	4b49      	ldr	r3, [pc, #292]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036bc:	689b      	ldr	r3, [r3, #8]
 c0036be:	f023 0203 	bic.w	r2, r3, #3
 c0036c2:	687b      	ldr	r3, [r7, #4]
 c0036c4:	685b      	ldr	r3, [r3, #4]
 c0036c6:	4946      	ldr	r1, [pc, #280]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036c8:	4313      	orrs	r3, r2
 c0036ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0036cc:	f7fe f946 	bl	c00195c <HAL_GetTick>
 c0036d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0036d2:	e013      	b.n	c0036fc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0036d4:	f7fe f942 	bl	c00195c <HAL_GetTick>
 c0036d8:	4602      	mov	r2, r0
 c0036da:	68fb      	ldr	r3, [r7, #12]
 c0036dc:	1ad3      	subs	r3, r2, r3
 c0036de:	f241 3288 	movw	r2, #5000	; 0x1388
 c0036e2:	4293      	cmp	r3, r2
 c0036e4:	d90a      	bls.n	c0036fc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0036e6:	4b3e      	ldr	r3, [pc, #248]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036e8:	689b      	ldr	r3, [r3, #8]
 c0036ea:	f003 020c 	and.w	r2, r3, #12
 c0036ee:	687b      	ldr	r3, [r7, #4]
 c0036f0:	685b      	ldr	r3, [r3, #4]
 c0036f2:	009b      	lsls	r3, r3, #2
 c0036f4:	429a      	cmp	r2, r3
 c0036f6:	d001      	beq.n	c0036fc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c0036f8:	2303      	movs	r3, #3
 c0036fa:	e06a      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0036fc:	4b38      	ldr	r3, [pc, #224]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0036fe:	689b      	ldr	r3, [r3, #8]
 c003700:	f003 020c 	and.w	r2, r3, #12
 c003704:	687b      	ldr	r3, [r7, #4]
 c003706:	685b      	ldr	r3, [r3, #4]
 c003708:	009b      	lsls	r3, r3, #2
 c00370a:	429a      	cmp	r2, r3
 c00370c:	d1e2      	bne.n	c0036d4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c00370e:	697b      	ldr	r3, [r7, #20]
 c003710:	2b80      	cmp	r3, #128	; 0x80
 c003712:	d105      	bne.n	c003720 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c003714:	4b32      	ldr	r3, [pc, #200]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003716:	689b      	ldr	r3, [r3, #8]
 c003718:	4a31      	ldr	r2, [pc, #196]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00371a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00371e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003720:	687b      	ldr	r3, [r7, #4]
 c003722:	681b      	ldr	r3, [r3, #0]
 c003724:	f003 0302 	and.w	r3, r3, #2
 c003728:	2b00      	cmp	r3, #0
 c00372a:	d010      	beq.n	c00374e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c00372c:	687b      	ldr	r3, [r7, #4]
 c00372e:	689a      	ldr	r2, [r3, #8]
 c003730:	4b2b      	ldr	r3, [pc, #172]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003732:	689b      	ldr	r3, [r3, #8]
 c003734:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003738:	429a      	cmp	r2, r3
 c00373a:	d208      	bcs.n	c00374e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c00373c:	4b28      	ldr	r3, [pc, #160]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00373e:	689b      	ldr	r3, [r3, #8]
 c003740:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003744:	687b      	ldr	r3, [r7, #4]
 c003746:	689b      	ldr	r3, [r3, #8]
 c003748:	4925      	ldr	r1, [pc, #148]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00374a:	4313      	orrs	r3, r2
 c00374c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00374e:	4b23      	ldr	r3, [pc, #140]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c003750:	681b      	ldr	r3, [r3, #0]
 c003752:	f003 030f 	and.w	r3, r3, #15
 c003756:	683a      	ldr	r2, [r7, #0]
 c003758:	429a      	cmp	r2, r3
 c00375a:	d210      	bcs.n	c00377e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00375c:	4b1f      	ldr	r3, [pc, #124]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c00375e:	681b      	ldr	r3, [r3, #0]
 c003760:	f023 020f 	bic.w	r2, r3, #15
 c003764:	491d      	ldr	r1, [pc, #116]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c003766:	683b      	ldr	r3, [r7, #0]
 c003768:	4313      	orrs	r3, r2
 c00376a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00376c:	4b1b      	ldr	r3, [pc, #108]	; (c0037dc <HAL_RCC_ClockConfig+0x25c>)
 c00376e:	681b      	ldr	r3, [r3, #0]
 c003770:	f003 030f 	and.w	r3, r3, #15
 c003774:	683a      	ldr	r2, [r7, #0]
 c003776:	429a      	cmp	r2, r3
 c003778:	d001      	beq.n	c00377e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c00377a:	2301      	movs	r3, #1
 c00377c:	e029      	b.n	c0037d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00377e:	687b      	ldr	r3, [r7, #4]
 c003780:	681b      	ldr	r3, [r3, #0]
 c003782:	f003 0304 	and.w	r3, r3, #4
 c003786:	2b00      	cmp	r3, #0
 c003788:	d008      	beq.n	c00379c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c00378a:	4b15      	ldr	r3, [pc, #84]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c00378c:	689b      	ldr	r3, [r3, #8]
 c00378e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003792:	687b      	ldr	r3, [r7, #4]
 c003794:	68db      	ldr	r3, [r3, #12]
 c003796:	4912      	ldr	r1, [pc, #72]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c003798:	4313      	orrs	r3, r2
 c00379a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c00379c:	687b      	ldr	r3, [r7, #4]
 c00379e:	681b      	ldr	r3, [r3, #0]
 c0037a0:	f003 0308 	and.w	r3, r3, #8
 c0037a4:	2b00      	cmp	r3, #0
 c0037a6:	d009      	beq.n	c0037bc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c0037a8:	4b0d      	ldr	r3, [pc, #52]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0037aa:	689b      	ldr	r3, [r3, #8]
 c0037ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c0037b0:	687b      	ldr	r3, [r7, #4]
 c0037b2:	691b      	ldr	r3, [r3, #16]
 c0037b4:	00db      	lsls	r3, r3, #3
 c0037b6:	490a      	ldr	r1, [pc, #40]	; (c0037e0 <HAL_RCC_ClockConfig+0x260>)
 c0037b8:	4313      	orrs	r3, r2
 c0037ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0037bc:	f000 f8b6 	bl	c00392c <HAL_RCC_GetHCLKFreq>
 c0037c0:	4603      	mov	r3, r0
 c0037c2:	4a09      	ldr	r2, [pc, #36]	; (c0037e8 <HAL_RCC_ClockConfig+0x268>)
 c0037c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0037c6:	4b09      	ldr	r3, [pc, #36]	; (c0037ec <HAL_RCC_ClockConfig+0x26c>)
 c0037c8:	681b      	ldr	r3, [r3, #0]
 c0037ca:	4618      	mov	r0, r3
 c0037cc:	f7fe f876 	bl	c0018bc <HAL_InitTick>
 c0037d0:	4603      	mov	r3, r0
}
 c0037d2:	4618      	mov	r0, r3
 c0037d4:	3718      	adds	r7, #24
 c0037d6:	46bd      	mov	sp, r7
 c0037d8:	bd80      	pop	{r7, pc}
 c0037da:	bf00      	nop
 c0037dc:	50022000 	.word	0x50022000
 c0037e0:	50021000 	.word	0x50021000
 c0037e4:	04c4b400 	.word	0x04c4b400
 c0037e8:	30000000 	.word	0x30000000
 c0037ec:	30000004 	.word	0x30000004

0c0037f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0037f0:	b480      	push	{r7}
 c0037f2:	b089      	sub	sp, #36	; 0x24
 c0037f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0037f6:	2300      	movs	r3, #0
 c0037f8:	61fb      	str	r3, [r7, #28]
 c0037fa:	2300      	movs	r3, #0
 c0037fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0037fe:	4b47      	ldr	r3, [pc, #284]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003800:	689b      	ldr	r3, [r3, #8]
 c003802:	f003 030c 	and.w	r3, r3, #12
 c003806:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003808:	4b44      	ldr	r3, [pc, #272]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c00380a:	68db      	ldr	r3, [r3, #12]
 c00380c:	f003 0303 	and.w	r3, r3, #3
 c003810:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003812:	693b      	ldr	r3, [r7, #16]
 c003814:	2b00      	cmp	r3, #0
 c003816:	d005      	beq.n	c003824 <HAL_RCC_GetSysClockFreq+0x34>
 c003818:	693b      	ldr	r3, [r7, #16]
 c00381a:	2b0c      	cmp	r3, #12
 c00381c:	d121      	bne.n	c003862 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00381e:	68fb      	ldr	r3, [r7, #12]
 c003820:	2b01      	cmp	r3, #1
 c003822:	d11e      	bne.n	c003862 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003824:	4b3d      	ldr	r3, [pc, #244]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003826:	681b      	ldr	r3, [r3, #0]
 c003828:	f003 0308 	and.w	r3, r3, #8
 c00382c:	2b00      	cmp	r3, #0
 c00382e:	d107      	bne.n	c003840 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003830:	4b3a      	ldr	r3, [pc, #232]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003832:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003836:	0a1b      	lsrs	r3, r3, #8
 c003838:	f003 030f 	and.w	r3, r3, #15
 c00383c:	61fb      	str	r3, [r7, #28]
 c00383e:	e005      	b.n	c00384c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003840:	4b36      	ldr	r3, [pc, #216]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003842:	681b      	ldr	r3, [r3, #0]
 c003844:	091b      	lsrs	r3, r3, #4
 c003846:	f003 030f 	and.w	r3, r3, #15
 c00384a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c00384c:	4a34      	ldr	r2, [pc, #208]	; (c003920 <HAL_RCC_GetSysClockFreq+0x130>)
 c00384e:	69fb      	ldr	r3, [r7, #28]
 c003850:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003854:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003856:	693b      	ldr	r3, [r7, #16]
 c003858:	2b00      	cmp	r3, #0
 c00385a:	d10d      	bne.n	c003878 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c00385c:	69fb      	ldr	r3, [r7, #28]
 c00385e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003860:	e00a      	b.n	c003878 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003862:	693b      	ldr	r3, [r7, #16]
 c003864:	2b04      	cmp	r3, #4
 c003866:	d102      	bne.n	c00386e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003868:	4b2e      	ldr	r3, [pc, #184]	; (c003924 <HAL_RCC_GetSysClockFreq+0x134>)
 c00386a:	61bb      	str	r3, [r7, #24]
 c00386c:	e004      	b.n	c003878 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00386e:	693b      	ldr	r3, [r7, #16]
 c003870:	2b08      	cmp	r3, #8
 c003872:	d101      	bne.n	c003878 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003874:	4b2c      	ldr	r3, [pc, #176]	; (c003928 <HAL_RCC_GetSysClockFreq+0x138>)
 c003876:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003878:	693b      	ldr	r3, [r7, #16]
 c00387a:	2b0c      	cmp	r3, #12
 c00387c:	d146      	bne.n	c00390c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00387e:	4b27      	ldr	r3, [pc, #156]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c003880:	68db      	ldr	r3, [r3, #12]
 c003882:	f003 0303 	and.w	r3, r3, #3
 c003886:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003888:	4b24      	ldr	r3, [pc, #144]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c00388a:	68db      	ldr	r3, [r3, #12]
 c00388c:	091b      	lsrs	r3, r3, #4
 c00388e:	f003 030f 	and.w	r3, r3, #15
 c003892:	3301      	adds	r3, #1
 c003894:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c003896:	68bb      	ldr	r3, [r7, #8]
 c003898:	2b02      	cmp	r3, #2
 c00389a:	d003      	beq.n	c0038a4 <HAL_RCC_GetSysClockFreq+0xb4>
 c00389c:	68bb      	ldr	r3, [r7, #8]
 c00389e:	2b03      	cmp	r3, #3
 c0038a0:	d00d      	beq.n	c0038be <HAL_RCC_GetSysClockFreq+0xce>
 c0038a2:	e019      	b.n	c0038d8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0038a4:	4a1f      	ldr	r2, [pc, #124]	; (c003924 <HAL_RCC_GetSysClockFreq+0x134>)
 c0038a6:	687b      	ldr	r3, [r7, #4]
 c0038a8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0038ac:	4a1b      	ldr	r2, [pc, #108]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c0038ae:	68d2      	ldr	r2, [r2, #12]
 c0038b0:	0a12      	lsrs	r2, r2, #8
 c0038b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0038b6:	fb02 f303 	mul.w	r3, r2, r3
 c0038ba:	617b      	str	r3, [r7, #20]
        break;
 c0038bc:	e019      	b.n	c0038f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0038be:	4a1a      	ldr	r2, [pc, #104]	; (c003928 <HAL_RCC_GetSysClockFreq+0x138>)
 c0038c0:	687b      	ldr	r3, [r7, #4]
 c0038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0038c6:	4a15      	ldr	r2, [pc, #84]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c0038c8:	68d2      	ldr	r2, [r2, #12]
 c0038ca:	0a12      	lsrs	r2, r2, #8
 c0038cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0038d0:	fb02 f303 	mul.w	r3, r2, r3
 c0038d4:	617b      	str	r3, [r7, #20]
        break;
 c0038d6:	e00c      	b.n	c0038f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0038d8:	69fa      	ldr	r2, [r7, #28]
 c0038da:	687b      	ldr	r3, [r7, #4]
 c0038dc:	fbb2 f3f3 	udiv	r3, r2, r3
 c0038e0:	4a0e      	ldr	r2, [pc, #56]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c0038e2:	68d2      	ldr	r2, [r2, #12]
 c0038e4:	0a12      	lsrs	r2, r2, #8
 c0038e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0038ea:	fb02 f303 	mul.w	r3, r2, r3
 c0038ee:	617b      	str	r3, [r7, #20]
        break;
 c0038f0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0038f2:	4b0a      	ldr	r3, [pc, #40]	; (c00391c <HAL_RCC_GetSysClockFreq+0x12c>)
 c0038f4:	68db      	ldr	r3, [r3, #12]
 c0038f6:	0e5b      	lsrs	r3, r3, #25
 c0038f8:	f003 0303 	and.w	r3, r3, #3
 c0038fc:	3301      	adds	r3, #1
 c0038fe:	005b      	lsls	r3, r3, #1
 c003900:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c003902:	697a      	ldr	r2, [r7, #20]
 c003904:	683b      	ldr	r3, [r7, #0]
 c003906:	fbb2 f3f3 	udiv	r3, r2, r3
 c00390a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c00390c:	69bb      	ldr	r3, [r7, #24]
}
 c00390e:	4618      	mov	r0, r3
 c003910:	3724      	adds	r7, #36	; 0x24
 c003912:	46bd      	mov	sp, r7
 c003914:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003918:	4770      	bx	lr
 c00391a:	bf00      	nop
 c00391c:	50021000 	.word	0x50021000
 c003920:	0c0064c4 	.word	0x0c0064c4
 c003924:	00f42400 	.word	0x00f42400
 c003928:	007a1200 	.word	0x007a1200

0c00392c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c00392c:	b580      	push	{r7, lr}
 c00392e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c003930:	f7ff ff5e 	bl	c0037f0 <HAL_RCC_GetSysClockFreq>
 c003934:	4602      	mov	r2, r0
 c003936:	4b05      	ldr	r3, [pc, #20]	; (c00394c <HAL_RCC_GetHCLKFreq+0x20>)
 c003938:	689b      	ldr	r3, [r3, #8]
 c00393a:	091b      	lsrs	r3, r3, #4
 c00393c:	f003 030f 	and.w	r3, r3, #15
 c003940:	4903      	ldr	r1, [pc, #12]	; (c003950 <HAL_RCC_GetHCLKFreq+0x24>)
 c003942:	5ccb      	ldrb	r3, [r1, r3]
 c003944:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003948:	4618      	mov	r0, r3
 c00394a:	bd80      	pop	{r7, pc}
 c00394c:	50021000 	.word	0x50021000
 c003950:	0c0064ac 	.word	0x0c0064ac

0c003954 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003954:	b580      	push	{r7, lr}
 c003956:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c003958:	f7ff ffe8 	bl	c00392c <HAL_RCC_GetHCLKFreq>
 c00395c:	4602      	mov	r2, r0
 c00395e:	4b05      	ldr	r3, [pc, #20]	; (c003974 <HAL_RCC_GetPCLK1Freq+0x20>)
 c003960:	689b      	ldr	r3, [r3, #8]
 c003962:	0a1b      	lsrs	r3, r3, #8
 c003964:	f003 0307 	and.w	r3, r3, #7
 c003968:	4903      	ldr	r1, [pc, #12]	; (c003978 <HAL_RCC_GetPCLK1Freq+0x24>)
 c00396a:	5ccb      	ldrb	r3, [r1, r3]
 c00396c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003970:	4618      	mov	r0, r3
 c003972:	bd80      	pop	{r7, pc}
 c003974:	50021000 	.word	0x50021000
 c003978:	0c0064bc 	.word	0x0c0064bc

0c00397c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c00397c:	b580      	push	{r7, lr}
 c00397e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c003980:	f7ff ffd4 	bl	c00392c <HAL_RCC_GetHCLKFreq>
 c003984:	4602      	mov	r2, r0
 c003986:	4b05      	ldr	r3, [pc, #20]	; (c00399c <HAL_RCC_GetPCLK2Freq+0x20>)
 c003988:	689b      	ldr	r3, [r3, #8]
 c00398a:	0adb      	lsrs	r3, r3, #11
 c00398c:	f003 0307 	and.w	r3, r3, #7
 c003990:	4903      	ldr	r1, [pc, #12]	; (c0039a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 c003992:	5ccb      	ldrb	r3, [r1, r3]
 c003994:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003998:	4618      	mov	r0, r3
 c00399a:	bd80      	pop	{r7, pc}
 c00399c:	50021000 	.word	0x50021000
 c0039a0:	0c0064bc 	.word	0x0c0064bc

0c0039a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c0039a4:	b580      	push	{r7, lr}
 c0039a6:	b086      	sub	sp, #24
 c0039a8:	af00      	add	r7, sp, #0
 c0039aa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c0039ac:	2300      	movs	r3, #0
 c0039ae:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c0039b0:	4b2c      	ldr	r3, [pc, #176]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0039b8:	2b00      	cmp	r3, #0
 c0039ba:	d003      	beq.n	c0039c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c0039bc:	f7ff f86c 	bl	c002a98 <HAL_PWREx_GetVoltageRange>
 c0039c0:	6138      	str	r0, [r7, #16]
 c0039c2:	e014      	b.n	c0039ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c0039c4:	4b27      	ldr	r3, [pc, #156]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039c8:	4a26      	ldr	r2, [pc, #152]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0039ce:	6593      	str	r3, [r2, #88]	; 0x58
 c0039d0:	4b24      	ldr	r3, [pc, #144]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0039d8:	60fb      	str	r3, [r7, #12]
 c0039da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c0039dc:	f7ff f85c 	bl	c002a98 <HAL_PWREx_GetVoltageRange>
 c0039e0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c0039e2:	4b20      	ldr	r3, [pc, #128]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0039e6:	4a1f      	ldr	r2, [pc, #124]	; (c003a64 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0039e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0039ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0039ee:	693b      	ldr	r3, [r7, #16]
 c0039f0:	2b00      	cmp	r3, #0
 c0039f2:	d003      	beq.n	c0039fc <RCC_SetFlashLatencyFromMSIRange+0x58>
 c0039f4:	693b      	ldr	r3, [r7, #16]
 c0039f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0039fa:	d10b      	bne.n	c003a14 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0039fc:	687b      	ldr	r3, [r7, #4]
 c0039fe:	2b80      	cmp	r3, #128	; 0x80
 c003a00:	d919      	bls.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c003a02:	687b      	ldr	r3, [r7, #4]
 c003a04:	2ba0      	cmp	r3, #160	; 0xa0
 c003a06:	d902      	bls.n	c003a0e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003a08:	2302      	movs	r3, #2
 c003a0a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003a0c:	e013      	b.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003a0e:	2301      	movs	r3, #1
 c003a10:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003a12:	e010      	b.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c003a14:	687b      	ldr	r3, [r7, #4]
 c003a16:	2b80      	cmp	r3, #128	; 0x80
 c003a18:	d902      	bls.n	c003a20 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c003a1a:	2303      	movs	r3, #3
 c003a1c:	617b      	str	r3, [r7, #20]
 c003a1e:	e00a      	b.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c003a20:	687b      	ldr	r3, [r7, #4]
 c003a22:	2b80      	cmp	r3, #128	; 0x80
 c003a24:	d102      	bne.n	c003a2c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003a26:	2302      	movs	r3, #2
 c003a28:	617b      	str	r3, [r7, #20]
 c003a2a:	e004      	b.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c003a2c:	687b      	ldr	r3, [r7, #4]
 c003a2e:	2b70      	cmp	r3, #112	; 0x70
 c003a30:	d101      	bne.n	c003a36 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003a32:	2301      	movs	r3, #1
 c003a34:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003a36:	4b0c      	ldr	r3, [pc, #48]	; (c003a68 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003a38:	681b      	ldr	r3, [r3, #0]
 c003a3a:	f023 020f 	bic.w	r2, r3, #15
 c003a3e:	490a      	ldr	r1, [pc, #40]	; (c003a68 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003a40:	697b      	ldr	r3, [r7, #20]
 c003a42:	4313      	orrs	r3, r2
 c003a44:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003a46:	4b08      	ldr	r3, [pc, #32]	; (c003a68 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003a48:	681b      	ldr	r3, [r3, #0]
 c003a4a:	f003 030f 	and.w	r3, r3, #15
 c003a4e:	697a      	ldr	r2, [r7, #20]
 c003a50:	429a      	cmp	r2, r3
 c003a52:	d001      	beq.n	c003a58 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c003a54:	2301      	movs	r3, #1
 c003a56:	e000      	b.n	c003a5a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c003a58:	2300      	movs	r3, #0
}
 c003a5a:	4618      	mov	r0, r3
 c003a5c:	3718      	adds	r7, #24
 c003a5e:	46bd      	mov	sp, r7
 c003a60:	bd80      	pop	{r7, pc}
 c003a62:	bf00      	nop
 c003a64:	50021000 	.word	0x50021000
 c003a68:	50022000 	.word	0x50022000

0c003a6c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c003a6c:	b480      	push	{r7}
 c003a6e:	b087      	sub	sp, #28
 c003a70:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c003a72:	4b31      	ldr	r3, [pc, #196]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003a74:	68db      	ldr	r3, [r3, #12]
 c003a76:	f003 0303 	and.w	r3, r3, #3
 c003a7a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003a7c:	4b2e      	ldr	r3, [pc, #184]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003a7e:	68db      	ldr	r3, [r3, #12]
 c003a80:	091b      	lsrs	r3, r3, #4
 c003a82:	f003 030f 	and.w	r3, r3, #15
 c003a86:	3301      	adds	r3, #1
 c003a88:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c003a8a:	68fb      	ldr	r3, [r7, #12]
 c003a8c:	2b03      	cmp	r3, #3
 c003a8e:	d015      	beq.n	c003abc <RCC_GetSysClockFreqFromPLLSource+0x50>
 c003a90:	68fb      	ldr	r3, [r7, #12]
 c003a92:	2b03      	cmp	r3, #3
 c003a94:	d839      	bhi.n	c003b0a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c003a96:	68fb      	ldr	r3, [r7, #12]
 c003a98:	2b01      	cmp	r3, #1
 c003a9a:	d01c      	beq.n	c003ad6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c003a9c:	68fb      	ldr	r3, [r7, #12]
 c003a9e:	2b02      	cmp	r3, #2
 c003aa0:	d133      	bne.n	c003b0a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003aa2:	4a26      	ldr	r2, [pc, #152]	; (c003b3c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c003aa4:	68bb      	ldr	r3, [r7, #8]
 c003aa6:	fbb2 f3f3 	udiv	r3, r2, r3
 c003aaa:	4a23      	ldr	r2, [pc, #140]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003aac:	68d2      	ldr	r2, [r2, #12]
 c003aae:	0a12      	lsrs	r2, r2, #8
 c003ab0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003ab4:	fb02 f303 	mul.w	r3, r2, r3
 c003ab8:	613b      	str	r3, [r7, #16]
      break;
 c003aba:	e029      	b.n	c003b10 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003abc:	4a20      	ldr	r2, [pc, #128]	; (c003b40 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c003abe:	68bb      	ldr	r3, [r7, #8]
 c003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 c003ac4:	4a1c      	ldr	r2, [pc, #112]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ac6:	68d2      	ldr	r2, [r2, #12]
 c003ac8:	0a12      	lsrs	r2, r2, #8
 c003aca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003ace:	fb02 f303 	mul.w	r3, r2, r3
 c003ad2:	613b      	str	r3, [r7, #16]
      break;
 c003ad4:	e01c      	b.n	c003b10 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003ad6:	4b18      	ldr	r3, [pc, #96]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ad8:	681b      	ldr	r3, [r3, #0]
 c003ada:	f003 0308 	and.w	r3, r3, #8
 c003ade:	2b00      	cmp	r3, #0
 c003ae0:	d107      	bne.n	c003af2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003ae2:	4b15      	ldr	r3, [pc, #84]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ae4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003ae8:	0a1b      	lsrs	r3, r3, #8
 c003aea:	f003 030f 	and.w	r3, r3, #15
 c003aee:	617b      	str	r3, [r7, #20]
 c003af0:	e005      	b.n	c003afe <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003af2:	4b11      	ldr	r3, [pc, #68]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003af4:	681b      	ldr	r3, [r3, #0]
 c003af6:	091b      	lsrs	r3, r3, #4
 c003af8:	f003 030f 	and.w	r3, r3, #15
 c003afc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c003afe:	4a11      	ldr	r2, [pc, #68]	; (c003b44 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c003b00:	697b      	ldr	r3, [r7, #20]
 c003b02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003b06:	613b      	str	r3, [r7, #16]
        break;
 c003b08:	e002      	b.n	c003b10 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c003b0a:	2300      	movs	r3, #0
 c003b0c:	613b      	str	r3, [r7, #16]
      break;
 c003b0e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003b10:	4b09      	ldr	r3, [pc, #36]	; (c003b38 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003b12:	68db      	ldr	r3, [r3, #12]
 c003b14:	0e5b      	lsrs	r3, r3, #25
 c003b16:	f003 0303 	and.w	r3, r3, #3
 c003b1a:	3301      	adds	r3, #1
 c003b1c:	005b      	lsls	r3, r3, #1
 c003b1e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c003b20:	693a      	ldr	r2, [r7, #16]
 c003b22:	687b      	ldr	r3, [r7, #4]
 c003b24:	fbb2 f3f3 	udiv	r3, r2, r3
 c003b28:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c003b2a:	683b      	ldr	r3, [r7, #0]
}
 c003b2c:	4618      	mov	r0, r3
 c003b2e:	371c      	adds	r7, #28
 c003b30:	46bd      	mov	sp, r7
 c003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003b36:	4770      	bx	lr
 c003b38:	50021000 	.word	0x50021000
 c003b3c:	00f42400 	.word	0x00f42400
 c003b40:	007a1200 	.word	0x007a1200
 c003b44:	0c0064c4 	.word	0x0c0064c4

0c003b48 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c003b48:	b580      	push	{r7, lr}
 c003b4a:	b088      	sub	sp, #32
 c003b4c:	af00      	add	r7, sp, #0
 c003b4e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c003b50:	2300      	movs	r3, #0
 c003b52:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003b54:	2300      	movs	r3, #0
 c003b56:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003b58:	687b      	ldr	r3, [r7, #4]
 c003b5a:	681b      	ldr	r3, [r3, #0]
 c003b5c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003b60:	2b00      	cmp	r3, #0
 c003b62:	d040      	beq.n	c003be6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c003b64:	687b      	ldr	r3, [r7, #4]
 c003b66:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003b68:	2b80      	cmp	r3, #128	; 0x80
 c003b6a:	d02a      	beq.n	c003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003b6c:	2b80      	cmp	r3, #128	; 0x80
 c003b6e:	d825      	bhi.n	c003bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003b70:	2b60      	cmp	r3, #96	; 0x60
 c003b72:	d026      	beq.n	c003bc2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003b74:	2b60      	cmp	r3, #96	; 0x60
 c003b76:	d821      	bhi.n	c003bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003b78:	2b40      	cmp	r3, #64	; 0x40
 c003b7a:	d006      	beq.n	c003b8a <HAL_RCCEx_PeriphCLKConfig+0x42>
 c003b7c:	2b40      	cmp	r3, #64	; 0x40
 c003b7e:	d81d      	bhi.n	c003bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003b80:	2b00      	cmp	r3, #0
 c003b82:	d009      	beq.n	c003b98 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c003b84:	2b20      	cmp	r3, #32
 c003b86:	d010      	beq.n	c003baa <HAL_RCCEx_PeriphCLKConfig+0x62>
 c003b88:	e018      	b.n	c003bbc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003b8a:	4b8f      	ldr	r3, [pc, #572]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003b8c:	68db      	ldr	r3, [r3, #12]
 c003b8e:	4a8e      	ldr	r2, [pc, #568]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003b94:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003b96:	e015      	b.n	c003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003b98:	687b      	ldr	r3, [r7, #4]
 c003b9a:	3304      	adds	r3, #4
 c003b9c:	2100      	movs	r1, #0
 c003b9e:	4618      	mov	r0, r3
 c003ba0:	f000 fb56 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c003ba4:	4603      	mov	r3, r0
 c003ba6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003ba8:	e00c      	b.n	c003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003baa:	687b      	ldr	r3, [r7, #4]
 c003bac:	3320      	adds	r3, #32
 c003bae:	2100      	movs	r1, #0
 c003bb0:	4618      	mov	r0, r3
 c003bb2:	f000 fc33 	bl	c00441c <RCCEx_PLLSAI2_Config>
 c003bb6:	4603      	mov	r3, r0
 c003bb8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003bba:	e003      	b.n	c003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003bbc:	2301      	movs	r3, #1
 c003bbe:	77fb      	strb	r3, [r7, #31]
        break;
 c003bc0:	e000      	b.n	c003bc4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c003bc2:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003bc4:	7ffb      	ldrb	r3, [r7, #31]
 c003bc6:	2b00      	cmp	r3, #0
 c003bc8:	d10b      	bne.n	c003be2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003bca:	4b7f      	ldr	r3, [pc, #508]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003bcc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003bd0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c003bd4:	687b      	ldr	r3, [r7, #4]
 c003bd6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003bd8:	497b      	ldr	r1, [pc, #492]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003bda:	4313      	orrs	r3, r2
 c003bdc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003be0:	e001      	b.n	c003be6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003be2:	7ffb      	ldrb	r3, [r7, #31]
 c003be4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003be6:	687b      	ldr	r3, [r7, #4]
 c003be8:	681b      	ldr	r3, [r3, #0]
 c003bea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c003bee:	2b00      	cmp	r3, #0
 c003bf0:	d047      	beq.n	c003c82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c003bf2:	687b      	ldr	r3, [r7, #4]
 c003bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003bf6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003bfa:	d030      	beq.n	c003c5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 c003bfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003c00:	d82a      	bhi.n	c003c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003c02:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003c06:	d02a      	beq.n	c003c5e <HAL_RCCEx_PeriphCLKConfig+0x116>
 c003c08:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c003c0c:	d824      	bhi.n	c003c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003c0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003c12:	d008      	beq.n	c003c26 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c003c14:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003c18:	d81e      	bhi.n	c003c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c003c1a:	2b00      	cmp	r3, #0
 c003c1c:	d00a      	beq.n	c003c34 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c003c1e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c003c22:	d010      	beq.n	c003c46 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c003c24:	e018      	b.n	c003c58 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003c26:	4b68      	ldr	r3, [pc, #416]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003c28:	68db      	ldr	r3, [r3, #12]
 c003c2a:	4a67      	ldr	r2, [pc, #412]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003c2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003c30:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003c32:	e015      	b.n	c003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003c34:	687b      	ldr	r3, [r7, #4]
 c003c36:	3304      	adds	r3, #4
 c003c38:	2100      	movs	r1, #0
 c003c3a:	4618      	mov	r0, r3
 c003c3c:	f000 fb08 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c003c40:	4603      	mov	r3, r0
 c003c42:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003c44:	e00c      	b.n	c003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003c46:	687b      	ldr	r3, [r7, #4]
 c003c48:	3320      	adds	r3, #32
 c003c4a:	2100      	movs	r1, #0
 c003c4c:	4618      	mov	r0, r3
 c003c4e:	f000 fbe5 	bl	c00441c <RCCEx_PLLSAI2_Config>
 c003c52:	4603      	mov	r3, r0
 c003c54:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003c56:	e003      	b.n	c003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003c58:	2301      	movs	r3, #1
 c003c5a:	77fb      	strb	r3, [r7, #31]
        break;
 c003c5c:	e000      	b.n	c003c60 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c003c5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003c60:	7ffb      	ldrb	r3, [r7, #31]
 c003c62:	2b00      	cmp	r3, #0
 c003c64:	d10b      	bne.n	c003c7e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c003c66:	4b58      	ldr	r3, [pc, #352]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003c68:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003c6c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003c70:	687b      	ldr	r3, [r7, #4]
 c003c72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003c74:	4954      	ldr	r1, [pc, #336]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003c76:	4313      	orrs	r3, r2
 c003c78:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003c7c:	e001      	b.n	c003c82 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003c7e:	7ffb      	ldrb	r3, [r7, #31]
 c003c80:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c003c82:	687b      	ldr	r3, [r7, #4]
 c003c84:	681b      	ldr	r3, [r3, #0]
 c003c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003c8a:	2b00      	cmp	r3, #0
 c003c8c:	f000 80ab 	beq.w	c003de6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c003c90:	2300      	movs	r3, #0
 c003c92:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003c94:	4b4c      	ldr	r3, [pc, #304]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003c96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003c9c:	2b00      	cmp	r3, #0
 c003c9e:	d10d      	bne.n	c003cbc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c003ca0:	4b49      	ldr	r3, [pc, #292]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003ca4:	4a48      	ldr	r2, [pc, #288]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ca6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003caa:	6593      	str	r3, [r2, #88]	; 0x58
 c003cac:	4b46      	ldr	r3, [pc, #280]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003cb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003cb4:	60fb      	str	r3, [r7, #12]
 c003cb6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c003cb8:	2301      	movs	r3, #1
 c003cba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003cbc:	4b43      	ldr	r3, [pc, #268]	; (c003dcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c003cbe:	681b      	ldr	r3, [r3, #0]
 c003cc0:	4a42      	ldr	r2, [pc, #264]	; (c003dcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c003cc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003cc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c003cc8:	f7fd fe48 	bl	c00195c <HAL_GetTick>
 c003ccc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c003cce:	e00f      	b.n	c003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003cd0:	f7fd fe44 	bl	c00195c <HAL_GetTick>
 c003cd4:	4602      	mov	r2, r0
 c003cd6:	693b      	ldr	r3, [r7, #16]
 c003cd8:	1ad3      	subs	r3, r2, r3
 c003cda:	2b02      	cmp	r3, #2
 c003cdc:	d908      	bls.n	c003cf0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c003cde:	4b3b      	ldr	r3, [pc, #236]	; (c003dcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c003ce0:	681b      	ldr	r3, [r3, #0]
 c003ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003ce6:	2b00      	cmp	r3, #0
 c003ce8:	d109      	bne.n	c003cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c003cea:	2303      	movs	r3, #3
 c003cec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c003cee:	e006      	b.n	c003cfe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c003cf0:	4b36      	ldr	r3, [pc, #216]	; (c003dcc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c003cf2:	681b      	ldr	r3, [r3, #0]
 c003cf4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003cf8:	2b00      	cmp	r3, #0
 c003cfa:	d0e9      	beq.n	c003cd0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c003cfc:	e000      	b.n	c003d00 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c003cfe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c003d00:	7ffb      	ldrb	r3, [r7, #31]
 c003d02:	2b00      	cmp	r3, #0
 c003d04:	d164      	bne.n	c003dd0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c003d06:	4b30      	ldr	r3, [pc, #192]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d0c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c003d10:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c003d12:	69bb      	ldr	r3, [r7, #24]
 c003d14:	2b00      	cmp	r3, #0
 c003d16:	d01f      	beq.n	c003d58 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c003d18:	687b      	ldr	r3, [r7, #4]
 c003d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d1e:	69ba      	ldr	r2, [r7, #24]
 c003d20:	429a      	cmp	r2, r3
 c003d22:	d019      	beq.n	c003d58 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c003d24:	4b28      	ldr	r3, [pc, #160]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c003d2e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c003d30:	4b25      	ldr	r3, [pc, #148]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d36:	4a24      	ldr	r2, [pc, #144]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003d3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c003d40:	4b21      	ldr	r3, [pc, #132]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d46:	4a20      	ldr	r2, [pc, #128]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c003d4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c003d50:	4a1d      	ldr	r2, [pc, #116]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d52:	69bb      	ldr	r3, [r7, #24]
 c003d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c003d58:	69bb      	ldr	r3, [r7, #24]
 c003d5a:	f003 0301 	and.w	r3, r3, #1
 c003d5e:	2b00      	cmp	r3, #0
 c003d60:	d01f      	beq.n	c003da2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003d62:	f7fd fdfb 	bl	c00195c <HAL_GetTick>
 c003d66:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003d68:	e012      	b.n	c003d90 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003d6a:	f7fd fdf7 	bl	c00195c <HAL_GetTick>
 c003d6e:	4602      	mov	r2, r0
 c003d70:	693b      	ldr	r3, [r7, #16]
 c003d72:	1ad3      	subs	r3, r2, r3
 c003d74:	f241 3288 	movw	r2, #5000	; 0x1388
 c003d78:	4293      	cmp	r3, r2
 c003d7a:	d909      	bls.n	c003d90 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003d7c:	4b12      	ldr	r3, [pc, #72]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d82:	f003 0302 	and.w	r3, r3, #2
 c003d86:	2b00      	cmp	r3, #0
 c003d88:	d10a      	bne.n	c003da0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c003d8a:	2303      	movs	r3, #3
 c003d8c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c003d8e:	e007      	b.n	c003da0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003d90:	4b0d      	ldr	r3, [pc, #52]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003d96:	f003 0302 	and.w	r3, r3, #2
 c003d9a:	2b00      	cmp	r3, #0
 c003d9c:	d0e5      	beq.n	c003d6a <HAL_RCCEx_PeriphCLKConfig+0x222>
 c003d9e:	e000      	b.n	c003da2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c003da0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c003da2:	7ffb      	ldrb	r3, [r7, #31]
 c003da4:	2b00      	cmp	r3, #0
 c003da6:	d10c      	bne.n	c003dc2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c003da8:	4b07      	ldr	r3, [pc, #28]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003daa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003dae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c003db2:	687b      	ldr	r3, [r7, #4]
 c003db4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003db8:	4903      	ldr	r1, [pc, #12]	; (c003dc8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003dba:	4313      	orrs	r3, r2
 c003dbc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c003dc0:	e008      	b.n	c003dd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c003dc2:	7ffb      	ldrb	r3, [r7, #31]
 c003dc4:	77bb      	strb	r3, [r7, #30]
 c003dc6:	e005      	b.n	c003dd4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c003dc8:	50021000 	.word	0x50021000
 c003dcc:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003dd0:	7ffb      	ldrb	r3, [r7, #31]
 c003dd2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003dd4:	7dfb      	ldrb	r3, [r7, #23]
 c003dd6:	2b01      	cmp	r3, #1
 c003dd8:	d105      	bne.n	c003de6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003dda:	4b9c      	ldr	r3, [pc, #624]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ddc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003dde:	4a9b      	ldr	r2, [pc, #620]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003de0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003de4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c003de6:	687b      	ldr	r3, [r7, #4]
 c003de8:	681b      	ldr	r3, [r3, #0]
 c003dea:	f003 0301 	and.w	r3, r3, #1
 c003dee:	2b00      	cmp	r3, #0
 c003df0:	d00a      	beq.n	c003e08 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c003df2:	4b96      	ldr	r3, [pc, #600]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003df4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003df8:	f023 0203 	bic.w	r2, r3, #3
 c003dfc:	687b      	ldr	r3, [r7, #4]
 c003dfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003e00:	4992      	ldr	r1, [pc, #584]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e02:	4313      	orrs	r3, r2
 c003e04:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c003e08:	687b      	ldr	r3, [r7, #4]
 c003e0a:	681b      	ldr	r3, [r3, #0]
 c003e0c:	f003 0302 	and.w	r3, r3, #2
 c003e10:	2b00      	cmp	r3, #0
 c003e12:	d00a      	beq.n	c003e2a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c003e14:	4b8d      	ldr	r3, [pc, #564]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003e1a:	f023 020c 	bic.w	r2, r3, #12
 c003e1e:	687b      	ldr	r3, [r7, #4]
 c003e20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003e22:	498a      	ldr	r1, [pc, #552]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e24:	4313      	orrs	r3, r2
 c003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c003e2a:	687b      	ldr	r3, [r7, #4]
 c003e2c:	681b      	ldr	r3, [r3, #0]
 c003e2e:	f003 0304 	and.w	r3, r3, #4
 c003e32:	2b00      	cmp	r3, #0
 c003e34:	d00a      	beq.n	c003e4c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c003e36:	4b85      	ldr	r3, [pc, #532]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003e3c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c003e40:	687b      	ldr	r3, [r7, #4]
 c003e42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003e44:	4981      	ldr	r1, [pc, #516]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e46:	4313      	orrs	r3, r2
 c003e48:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003e4c:	687b      	ldr	r3, [r7, #4]
 c003e4e:	681b      	ldr	r3, [r3, #0]
 c003e50:	f003 0308 	and.w	r3, r3, #8
 c003e54:	2b00      	cmp	r3, #0
 c003e56:	d00a      	beq.n	c003e6e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c003e58:	4b7c      	ldr	r3, [pc, #496]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003e5e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c003e62:	687b      	ldr	r3, [r7, #4]
 c003e64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003e66:	4979      	ldr	r1, [pc, #484]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e68:	4313      	orrs	r3, r2
 c003e6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c003e6e:	687b      	ldr	r3, [r7, #4]
 c003e70:	681b      	ldr	r3, [r3, #0]
 c003e72:	f003 0310 	and.w	r3, r3, #16
 c003e76:	2b00      	cmp	r3, #0
 c003e78:	d00a      	beq.n	c003e90 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c003e7a:	4b74      	ldr	r3, [pc, #464]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003e80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c003e84:	687b      	ldr	r3, [r7, #4]
 c003e86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003e88:	4970      	ldr	r1, [pc, #448]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e8a:	4313      	orrs	r3, r2
 c003e8c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c003e90:	687b      	ldr	r3, [r7, #4]
 c003e92:	681b      	ldr	r3, [r3, #0]
 c003e94:	f003 0320 	and.w	r3, r3, #32
 c003e98:	2b00      	cmp	r3, #0
 c003e9a:	d00a      	beq.n	c003eb2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c003e9c:	4b6b      	ldr	r3, [pc, #428]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003e9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003ea2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c003ea6:	687b      	ldr	r3, [r7, #4]
 c003ea8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003eaa:	4968      	ldr	r1, [pc, #416]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003eac:	4313      	orrs	r3, r2
 c003eae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c003eb2:	687b      	ldr	r3, [r7, #4]
 c003eb4:	681b      	ldr	r3, [r3, #0]
 c003eb6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003eba:	2b00      	cmp	r3, #0
 c003ebc:	d00a      	beq.n	c003ed4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c003ebe:	4b63      	ldr	r3, [pc, #396]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ec0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003ec4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c003ec8:	687b      	ldr	r3, [r7, #4]
 c003eca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c003ecc:	495f      	ldr	r1, [pc, #380]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ece:	4313      	orrs	r3, r2
 c003ed0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003ed4:	687b      	ldr	r3, [r7, #4]
 c003ed6:	681b      	ldr	r3, [r3, #0]
 c003ed8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003edc:	2b00      	cmp	r3, #0
 c003ede:	d00a      	beq.n	c003ef6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c003ee0:	4b5a      	ldr	r3, [pc, #360]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003ee6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c003eea:	687b      	ldr	r3, [r7, #4]
 c003eec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c003eee:	4957      	ldr	r1, [pc, #348]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ef0:	4313      	orrs	r3, r2
 c003ef2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c003ef6:	687b      	ldr	r3, [r7, #4]
 c003ef8:	681b      	ldr	r3, [r3, #0]
 c003efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c003efe:	2b00      	cmp	r3, #0
 c003f00:	d00a      	beq.n	c003f18 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c003f02:	4b52      	ldr	r3, [pc, #328]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003f08:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c003f0c:	687b      	ldr	r3, [r7, #4]
 c003f0e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c003f10:	494e      	ldr	r1, [pc, #312]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f12:	4313      	orrs	r3, r2
 c003f14:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c003f18:	687b      	ldr	r3, [r7, #4]
 c003f1a:	681b      	ldr	r3, [r3, #0]
 c003f1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003f20:	2b00      	cmp	r3, #0
 c003f22:	d031      	beq.n	c003f88 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c003f24:	687b      	ldr	r3, [r7, #4]
 c003f26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c003f28:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c003f2c:	d00e      	beq.n	c003f4c <HAL_RCCEx_PeriphCLKConfig+0x404>
 c003f2e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c003f32:	d814      	bhi.n	c003f5e <HAL_RCCEx_PeriphCLKConfig+0x416>
 c003f34:	2b00      	cmp	r3, #0
 c003f36:	d015      	beq.n	c003f64 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c003f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c003f3c:	d10f      	bne.n	c003f5e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003f3e:	4b43      	ldr	r3, [pc, #268]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f40:	68db      	ldr	r3, [r3, #12]
 c003f42:	4a42      	ldr	r2, [pc, #264]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003f48:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003f4a:	e00c      	b.n	c003f66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003f4c:	687b      	ldr	r3, [r7, #4]
 c003f4e:	3304      	adds	r3, #4
 c003f50:	2100      	movs	r1, #0
 c003f52:	4618      	mov	r0, r3
 c003f54:	f000 f97c 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c003f58:	4603      	mov	r3, r0
 c003f5a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003f5c:	e003      	b.n	c003f66 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c003f5e:	2301      	movs	r3, #1
 c003f60:	77fb      	strb	r3, [r7, #31]
        break;
 c003f62:	e000      	b.n	c003f66 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c003f64:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003f66:	7ffb      	ldrb	r3, [r7, #31]
 c003f68:	2b00      	cmp	r3, #0
 c003f6a:	d10b      	bne.n	c003f84 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c003f6c:	4b37      	ldr	r3, [pc, #220]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003f72:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c003f76:	687b      	ldr	r3, [r7, #4]
 c003f78:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c003f7a:	4934      	ldr	r1, [pc, #208]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f7c:	4313      	orrs	r3, r2
 c003f7e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c003f82:	e001      	b.n	c003f88 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003f84:	7ffb      	ldrb	r3, [r7, #31]
 c003f86:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003f88:	687b      	ldr	r3, [r7, #4]
 c003f8a:	681b      	ldr	r3, [r3, #0]
 c003f8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003f90:	2b00      	cmp	r3, #0
 c003f92:	d00a      	beq.n	c003faa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c003f94:	4b2d      	ldr	r3, [pc, #180]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003f9a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c003f9e:	687b      	ldr	r3, [r7, #4]
 c003fa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003fa2:	492a      	ldr	r1, [pc, #168]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003fa4:	4313      	orrs	r3, r2
 c003fa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c003faa:	687b      	ldr	r3, [r7, #4]
 c003fac:	681b      	ldr	r3, [r3, #0]
 c003fae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003fb2:	2b00      	cmp	r3, #0
 c003fb4:	d00a      	beq.n	c003fcc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c003fb6:	4b25      	ldr	r3, [pc, #148]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003fb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003fbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c003fc0:	687b      	ldr	r3, [r7, #4]
 c003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c003fc4:	4921      	ldr	r1, [pc, #132]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003fc6:	4313      	orrs	r3, r2
 c003fc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c003fcc:	687b      	ldr	r3, [r7, #4]
 c003fce:	681b      	ldr	r3, [r3, #0]
 c003fd0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003fd4:	2b00      	cmp	r3, #0
 c003fd6:	d00a      	beq.n	c003fee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c003fd8:	4b1c      	ldr	r3, [pc, #112]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003fda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003fde:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c003fe2:	687b      	ldr	r3, [r7, #4]
 c003fe4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c003fe6:	4919      	ldr	r1, [pc, #100]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003fe8:	4313      	orrs	r3, r2
 c003fea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c003fee:	687b      	ldr	r3, [r7, #4]
 c003ff0:	681b      	ldr	r3, [r3, #0]
 c003ff2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003ff6:	2b00      	cmp	r3, #0
 c003ff8:	d00a      	beq.n	c004010 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c003ffa:	4b14      	ldr	r3, [pc, #80]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ffc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004000:	f023 0203 	bic.w	r2, r3, #3
 c004004:	687b      	ldr	r3, [r7, #4]
 c004006:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004008:	4910      	ldr	r1, [pc, #64]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00400a:	4313      	orrs	r3, r2
 c00400c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c004010:	687b      	ldr	r3, [r7, #4]
 c004012:	681b      	ldr	r3, [r3, #0]
 c004014:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c004018:	2b00      	cmp	r3, #0
 c00401a:	d02b      	beq.n	c004074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c00401c:	4b0b      	ldr	r3, [pc, #44]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00401e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004022:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c004026:	687b      	ldr	r3, [r7, #4]
 c004028:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00402a:	4908      	ldr	r1, [pc, #32]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00402c:	4313      	orrs	r3, r2
 c00402e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c004032:	687b      	ldr	r3, [r7, #4]
 c004034:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004036:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00403a:	d109      	bne.n	c004050 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00403c:	4b03      	ldr	r3, [pc, #12]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00403e:	68db      	ldr	r3, [r3, #12]
 c004040:	4a02      	ldr	r2, [pc, #8]	; (c00404c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004042:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004046:	60d3      	str	r3, [r2, #12]
 c004048:	e014      	b.n	c004074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c00404a:	bf00      	nop
 c00404c:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c004050:	687b      	ldr	r3, [r7, #4]
 c004052:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004054:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004058:	d10c      	bne.n	c004074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00405a:	687b      	ldr	r3, [r7, #4]
 c00405c:	3304      	adds	r3, #4
 c00405e:	2101      	movs	r1, #1
 c004060:	4618      	mov	r0, r3
 c004062:	f000 f8f5 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c004066:	4603      	mov	r3, r0
 c004068:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c00406a:	7ffb      	ldrb	r3, [r7, #31]
 c00406c:	2b00      	cmp	r3, #0
 c00406e:	d001      	beq.n	c004074 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c004070:	7ffb      	ldrb	r3, [r7, #31]
 c004072:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c004074:	687b      	ldr	r3, [r7, #4]
 c004076:	681b      	ldr	r3, [r3, #0]
 c004078:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c00407c:	2b00      	cmp	r3, #0
 c00407e:	d04a      	beq.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c004080:	687b      	ldr	r3, [r7, #4]
 c004082:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004084:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004088:	d108      	bne.n	c00409c <HAL_RCCEx_PeriphCLKConfig+0x554>
 c00408a:	4b70      	ldr	r3, [pc, #448]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00408c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004090:	4a6e      	ldr	r2, [pc, #440]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c004096:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c00409a:	e012      	b.n	c0040c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c00409c:	4b6b      	ldr	r3, [pc, #428]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00409e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0040a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0040a6:	687b      	ldr	r3, [r7, #4]
 c0040a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0040aa:	4968      	ldr	r1, [pc, #416]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0040ac:	4313      	orrs	r3, r2
 c0040ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0040b2:	4b66      	ldr	r3, [pc, #408]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0040b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0040b8:	4a64      	ldr	r2, [pc, #400]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0040ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c0040be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c0040c2:	687b      	ldr	r3, [r7, #4]
 c0040c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0040c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0040ca:	d10d      	bne.n	c0040e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0040cc:	687b      	ldr	r3, [r7, #4]
 c0040ce:	3304      	adds	r3, #4
 c0040d0:	2101      	movs	r1, #1
 c0040d2:	4618      	mov	r0, r3
 c0040d4:	f000 f8bc 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c0040d8:	4603      	mov	r3, r0
 c0040da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0040dc:	7ffb      	ldrb	r3, [r7, #31]
 c0040de:	2b00      	cmp	r3, #0
 c0040e0:	d019      	beq.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c0040e2:	7ffb      	ldrb	r3, [r7, #31]
 c0040e4:	77bb      	strb	r3, [r7, #30]
 c0040e6:	e016      	b.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c0040e8:	687b      	ldr	r3, [r7, #4]
 c0040ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0040ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0040f0:	d106      	bne.n	c004100 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0040f2:	4b56      	ldr	r3, [pc, #344]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0040f4:	68db      	ldr	r3, [r3, #12]
 c0040f6:	4a55      	ldr	r2, [pc, #340]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0040f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0040fc:	60d3      	str	r3, [r2, #12]
 c0040fe:	e00a      	b.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c004100:	687b      	ldr	r3, [r7, #4]
 c004102:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004104:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004108:	d105      	bne.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00410a:	4b50      	ldr	r3, [pc, #320]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00410c:	68db      	ldr	r3, [r3, #12]
 c00410e:	4a4f      	ldr	r2, [pc, #316]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004110:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004114:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c004116:	687b      	ldr	r3, [r7, #4]
 c004118:	681b      	ldr	r3, [r3, #0]
 c00411a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00411e:	2b00      	cmp	r3, #0
 c004120:	d028      	beq.n	c004174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c004122:	4b4a      	ldr	r3, [pc, #296]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004124:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004128:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00412c:	687b      	ldr	r3, [r7, #4]
 c00412e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004130:	4946      	ldr	r1, [pc, #280]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004132:	4313      	orrs	r3, r2
 c004134:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c004138:	687b      	ldr	r3, [r7, #4]
 c00413a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00413c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004140:	d106      	bne.n	c004150 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004142:	4b42      	ldr	r3, [pc, #264]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004144:	68db      	ldr	r3, [r3, #12]
 c004146:	4a41      	ldr	r2, [pc, #260]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004148:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00414c:	60d3      	str	r3, [r2, #12]
 c00414e:	e011      	b.n	c004174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c004150:	687b      	ldr	r3, [r7, #4]
 c004152:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004154:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004158:	d10c      	bne.n	c004174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c00415a:	687b      	ldr	r3, [r7, #4]
 c00415c:	3304      	adds	r3, #4
 c00415e:	2101      	movs	r1, #1
 c004160:	4618      	mov	r0, r3
 c004162:	f000 f875 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c004166:	4603      	mov	r3, r0
 c004168:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c00416a:	7ffb      	ldrb	r3, [r7, #31]
 c00416c:	2b00      	cmp	r3, #0
 c00416e:	d001      	beq.n	c004174 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c004170:	7ffb      	ldrb	r3, [r7, #31]
 c004172:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c004174:	687b      	ldr	r3, [r7, #4]
 c004176:	681b      	ldr	r3, [r3, #0]
 c004178:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c00417c:	2b00      	cmp	r3, #0
 c00417e:	d01e      	beq.n	c0041be <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c004180:	4b32      	ldr	r3, [pc, #200]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004182:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004186:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c00418a:	687b      	ldr	r3, [r7, #4]
 c00418c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004190:	492e      	ldr	r1, [pc, #184]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004192:	4313      	orrs	r3, r2
 c004194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c004198:	687b      	ldr	r3, [r7, #4]
 c00419a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c00419e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0041a2:	d10c      	bne.n	c0041be <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0041a4:	687b      	ldr	r3, [r7, #4]
 c0041a6:	3304      	adds	r3, #4
 c0041a8:	2102      	movs	r1, #2
 c0041aa:	4618      	mov	r0, r3
 c0041ac:	f000 f850 	bl	c004250 <RCCEx_PLLSAI1_Config>
 c0041b0:	4603      	mov	r3, r0
 c0041b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0041b4:	7ffb      	ldrb	r3, [r7, #31]
 c0041b6:	2b00      	cmp	r3, #0
 c0041b8:	d001      	beq.n	c0041be <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c0041ba:	7ffb      	ldrb	r3, [r7, #31]
 c0041bc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0041be:	687b      	ldr	r3, [r7, #4]
 c0041c0:	681b      	ldr	r3, [r3, #0]
 c0041c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0041c6:	2b00      	cmp	r3, #0
 c0041c8:	d00b      	beq.n	c0041e2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0041ca:	4b20      	ldr	r3, [pc, #128]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0041cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0041d0:	f023 0204 	bic.w	r2, r3, #4
 c0041d4:	687b      	ldr	r3, [r7, #4]
 c0041d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0041da:	491c      	ldr	r1, [pc, #112]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0041dc:	4313      	orrs	r3, r2
 c0041de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c0041e2:	687b      	ldr	r3, [r7, #4]
 c0041e4:	681b      	ldr	r3, [r3, #0]
 c0041e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0041ea:	2b00      	cmp	r3, #0
 c0041ec:	d00b      	beq.n	c004206 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c0041ee:	4b17      	ldr	r3, [pc, #92]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0041f0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0041f4:	f023 0218 	bic.w	r2, r3, #24
 c0041f8:	687b      	ldr	r3, [r7, #4]
 c0041fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0041fe:	4913      	ldr	r1, [pc, #76]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004200:	4313      	orrs	r3, r2
 c004202:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c004206:	687b      	ldr	r3, [r7, #4]
 c004208:	681b      	ldr	r3, [r3, #0]
 c00420a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c00420e:	2b00      	cmp	r3, #0
 c004210:	d017      	beq.n	c004242 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c004212:	4b0e      	ldr	r3, [pc, #56]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004214:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004218:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c00421c:	687b      	ldr	r3, [r7, #4]
 c00421e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004222:	490a      	ldr	r1, [pc, #40]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004224:	4313      	orrs	r3, r2
 c004226:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c00422a:	687b      	ldr	r3, [r7, #4]
 c00422c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004230:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004234:	d105      	bne.n	c004242 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004236:	4b05      	ldr	r3, [pc, #20]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004238:	68db      	ldr	r3, [r3, #12]
 c00423a:	4a04      	ldr	r2, [pc, #16]	; (c00424c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00423c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004240:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c004242:	7fbb      	ldrb	r3, [r7, #30]
}
 c004244:	4618      	mov	r0, r3
 c004246:	3720      	adds	r7, #32
 c004248:	46bd      	mov	sp, r7
 c00424a:	bd80      	pop	{r7, pc}
 c00424c:	50021000 	.word	0x50021000

0c004250 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c004250:	b580      	push	{r7, lr}
 c004252:	b084      	sub	sp, #16
 c004254:	af00      	add	r7, sp, #0
 c004256:	6078      	str	r0, [r7, #4]
 c004258:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00425a:	2300      	movs	r3, #0
 c00425c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c00425e:	687b      	ldr	r3, [r7, #4]
 c004260:	681b      	ldr	r3, [r3, #0]
 c004262:	2b03      	cmp	r3, #3
 c004264:	d018      	beq.n	c004298 <RCCEx_PLLSAI1_Config+0x48>
 c004266:	2b03      	cmp	r3, #3
 c004268:	d81f      	bhi.n	c0042aa <RCCEx_PLLSAI1_Config+0x5a>
 c00426a:	2b01      	cmp	r3, #1
 c00426c:	d002      	beq.n	c004274 <RCCEx_PLLSAI1_Config+0x24>
 c00426e:	2b02      	cmp	r3, #2
 c004270:	d009      	beq.n	c004286 <RCCEx_PLLSAI1_Config+0x36>
 c004272:	e01a      	b.n	c0042aa <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004274:	4b65      	ldr	r3, [pc, #404]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004276:	681b      	ldr	r3, [r3, #0]
 c004278:	f003 0302 	and.w	r3, r3, #2
 c00427c:	2b00      	cmp	r3, #0
 c00427e:	d117      	bne.n	c0042b0 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c004280:	2301      	movs	r3, #1
 c004282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004284:	e014      	b.n	c0042b0 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004286:	4b61      	ldr	r3, [pc, #388]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004288:	681b      	ldr	r3, [r3, #0]
 c00428a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00428e:	2b00      	cmp	r3, #0
 c004290:	d110      	bne.n	c0042b4 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c004292:	2301      	movs	r3, #1
 c004294:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004296:	e00d      	b.n	c0042b4 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c004298:	4b5c      	ldr	r3, [pc, #368]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00429a:	681b      	ldr	r3, [r3, #0]
 c00429c:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0042a0:	2b00      	cmp	r3, #0
 c0042a2:	d109      	bne.n	c0042b8 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0042a4:	2301      	movs	r3, #1
 c0042a6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0042a8:	e006      	b.n	c0042b8 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0042aa:	2301      	movs	r3, #1
 c0042ac:	73fb      	strb	r3, [r7, #15]
      break;
 c0042ae:	e004      	b.n	c0042ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0042b0:	bf00      	nop
 c0042b2:	e002      	b.n	c0042ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0042b4:	bf00      	nop
 c0042b6:	e000      	b.n	c0042ba <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0042b8:	bf00      	nop
  }

  if (status == HAL_OK)
 c0042ba:	7bfb      	ldrb	r3, [r7, #15]
 c0042bc:	2b00      	cmp	r3, #0
 c0042be:	f040 809f 	bne.w	c004400 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c0042c2:	4b52      	ldr	r3, [pc, #328]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0042c4:	681b      	ldr	r3, [r3, #0]
 c0042c6:	4a51      	ldr	r2, [pc, #324]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0042c8:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0042cc:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0042ce:	f7fd fb45 	bl	c00195c <HAL_GetTick>
 c0042d2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0042d4:	e00f      	b.n	c0042f6 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0042d6:	f7fd fb41 	bl	c00195c <HAL_GetTick>
 c0042da:	4602      	mov	r2, r0
 c0042dc:	68bb      	ldr	r3, [r7, #8]
 c0042de:	1ad3      	subs	r3, r2, r3
 c0042e0:	2b02      	cmp	r3, #2
 c0042e2:	d908      	bls.n	c0042f6 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0042e4:	4b49      	ldr	r3, [pc, #292]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0042e6:	681b      	ldr	r3, [r3, #0]
 c0042e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0042ec:	2b00      	cmp	r3, #0
 c0042ee:	d009      	beq.n	c004304 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c0042f0:	2303      	movs	r3, #3
 c0042f2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c0042f4:	e006      	b.n	c004304 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0042f6:	4b45      	ldr	r3, [pc, #276]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0042f8:	681b      	ldr	r3, [r3, #0]
 c0042fa:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0042fe:	2b00      	cmp	r3, #0
 c004300:	d1e9      	bne.n	c0042d6 <RCCEx_PLLSAI1_Config+0x86>
 c004302:	e000      	b.n	c004306 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c004304:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004306:	7bfb      	ldrb	r3, [r7, #15]
 c004308:	2b00      	cmp	r3, #0
 c00430a:	d179      	bne.n	c004400 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c00430c:	683b      	ldr	r3, [r7, #0]
 c00430e:	2b00      	cmp	r3, #0
 c004310:	d116      	bne.n	c004340 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004312:	4b3e      	ldr	r3, [pc, #248]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004314:	691a      	ldr	r2, [r3, #16]
 c004316:	4b3e      	ldr	r3, [pc, #248]	; (c004410 <RCCEx_PLLSAI1_Config+0x1c0>)
 c004318:	4013      	ands	r3, r2
 c00431a:	687a      	ldr	r2, [r7, #4]
 c00431c:	6892      	ldr	r2, [r2, #8]
 c00431e:	0211      	lsls	r1, r2, #8
 c004320:	687a      	ldr	r2, [r7, #4]
 c004322:	68d2      	ldr	r2, [r2, #12]
 c004324:	06d2      	lsls	r2, r2, #27
 c004326:	4311      	orrs	r1, r2
 c004328:	687a      	ldr	r2, [r7, #4]
 c00432a:	6852      	ldr	r2, [r2, #4]
 c00432c:	3a01      	subs	r2, #1
 c00432e:	0112      	lsls	r2, r2, #4
 c004330:	4311      	orrs	r1, r2
 c004332:	687a      	ldr	r2, [r7, #4]
 c004334:	6812      	ldr	r2, [r2, #0]
 c004336:	430a      	orrs	r2, r1
 c004338:	4934      	ldr	r1, [pc, #208]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00433a:	4313      	orrs	r3, r2
 c00433c:	610b      	str	r3, [r1, #16]
 c00433e:	e033      	b.n	c0043a8 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c004340:	683b      	ldr	r3, [r7, #0]
 c004342:	2b01      	cmp	r3, #1
 c004344:	d118      	bne.n	c004378 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004346:	4b31      	ldr	r3, [pc, #196]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004348:	691a      	ldr	r2, [r3, #16]
 c00434a:	4b32      	ldr	r3, [pc, #200]	; (c004414 <RCCEx_PLLSAI1_Config+0x1c4>)
 c00434c:	4013      	ands	r3, r2
 c00434e:	687a      	ldr	r2, [r7, #4]
 c004350:	6892      	ldr	r2, [r2, #8]
 c004352:	0211      	lsls	r1, r2, #8
 c004354:	687a      	ldr	r2, [r7, #4]
 c004356:	6912      	ldr	r2, [r2, #16]
 c004358:	0852      	lsrs	r2, r2, #1
 c00435a:	3a01      	subs	r2, #1
 c00435c:	0552      	lsls	r2, r2, #21
 c00435e:	4311      	orrs	r1, r2
 c004360:	687a      	ldr	r2, [r7, #4]
 c004362:	6852      	ldr	r2, [r2, #4]
 c004364:	3a01      	subs	r2, #1
 c004366:	0112      	lsls	r2, r2, #4
 c004368:	4311      	orrs	r1, r2
 c00436a:	687a      	ldr	r2, [r7, #4]
 c00436c:	6812      	ldr	r2, [r2, #0]
 c00436e:	430a      	orrs	r2, r1
 c004370:	4926      	ldr	r1, [pc, #152]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c004372:	4313      	orrs	r3, r2
 c004374:	610b      	str	r3, [r1, #16]
 c004376:	e017      	b.n	c0043a8 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004378:	4b24      	ldr	r3, [pc, #144]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c00437a:	691a      	ldr	r2, [r3, #16]
 c00437c:	4b26      	ldr	r3, [pc, #152]	; (c004418 <RCCEx_PLLSAI1_Config+0x1c8>)
 c00437e:	4013      	ands	r3, r2
 c004380:	687a      	ldr	r2, [r7, #4]
 c004382:	6892      	ldr	r2, [r2, #8]
 c004384:	0211      	lsls	r1, r2, #8
 c004386:	687a      	ldr	r2, [r7, #4]
 c004388:	6952      	ldr	r2, [r2, #20]
 c00438a:	0852      	lsrs	r2, r2, #1
 c00438c:	3a01      	subs	r2, #1
 c00438e:	0652      	lsls	r2, r2, #25
 c004390:	4311      	orrs	r1, r2
 c004392:	687a      	ldr	r2, [r7, #4]
 c004394:	6852      	ldr	r2, [r2, #4]
 c004396:	3a01      	subs	r2, #1
 c004398:	0112      	lsls	r2, r2, #4
 c00439a:	4311      	orrs	r1, r2
 c00439c:	687a      	ldr	r2, [r7, #4]
 c00439e:	6812      	ldr	r2, [r2, #0]
 c0043a0:	430a      	orrs	r2, r1
 c0043a2:	491a      	ldr	r1, [pc, #104]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043a4:	4313      	orrs	r3, r2
 c0043a6:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0043a8:	4b18      	ldr	r3, [pc, #96]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043aa:	681b      	ldr	r3, [r3, #0]
 c0043ac:	4a17      	ldr	r2, [pc, #92]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0043b2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0043b4:	f7fd fad2 	bl	c00195c <HAL_GetTick>
 c0043b8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0043ba:	e00f      	b.n	c0043dc <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0043bc:	f7fd face 	bl	c00195c <HAL_GetTick>
 c0043c0:	4602      	mov	r2, r0
 c0043c2:	68bb      	ldr	r3, [r7, #8]
 c0043c4:	1ad3      	subs	r3, r2, r3
 c0043c6:	2b02      	cmp	r3, #2
 c0043c8:	d908      	bls.n	c0043dc <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0043ca:	4b10      	ldr	r3, [pc, #64]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043cc:	681b      	ldr	r3, [r3, #0]
 c0043ce:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0043d2:	2b00      	cmp	r3, #0
 c0043d4:	d109      	bne.n	c0043ea <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c0043d6:	2303      	movs	r3, #3
 c0043d8:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0043da:	e006      	b.n	c0043ea <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0043dc:	4b0b      	ldr	r3, [pc, #44]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043de:	681b      	ldr	r3, [r3, #0]
 c0043e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0043e4:	2b00      	cmp	r3, #0
 c0043e6:	d0e9      	beq.n	c0043bc <RCCEx_PLLSAI1_Config+0x16c>
 c0043e8:	e000      	b.n	c0043ec <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c0043ea:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c0043ec:	7bfb      	ldrb	r3, [r7, #15]
 c0043ee:	2b00      	cmp	r3, #0
 c0043f0:	d106      	bne.n	c004400 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c0043f2:	4b06      	ldr	r3, [pc, #24]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043f4:	691a      	ldr	r2, [r3, #16]
 c0043f6:	687b      	ldr	r3, [r7, #4]
 c0043f8:	699b      	ldr	r3, [r3, #24]
 c0043fa:	4904      	ldr	r1, [pc, #16]	; (c00440c <RCCEx_PLLSAI1_Config+0x1bc>)
 c0043fc:	4313      	orrs	r3, r2
 c0043fe:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c004400:	7bfb      	ldrb	r3, [r7, #15]
}
 c004402:	4618      	mov	r0, r3
 c004404:	3710      	adds	r7, #16
 c004406:	46bd      	mov	sp, r7
 c004408:	bd80      	pop	{r7, pc}
 c00440a:	bf00      	nop
 c00440c:	50021000 	.word	0x50021000
 c004410:	07ff800c 	.word	0x07ff800c
 c004414:	ff9f800c 	.word	0xff9f800c
 c004418:	f9ff800c 	.word	0xf9ff800c

0c00441c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c00441c:	b580      	push	{r7, lr}
 c00441e:	b084      	sub	sp, #16
 c004420:	af00      	add	r7, sp, #0
 c004422:	6078      	str	r0, [r7, #4]
 c004424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c004426:	2300      	movs	r3, #0
 c004428:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c00442a:	687b      	ldr	r3, [r7, #4]
 c00442c:	681b      	ldr	r3, [r3, #0]
 c00442e:	2b03      	cmp	r3, #3
 c004430:	d018      	beq.n	c004464 <RCCEx_PLLSAI2_Config+0x48>
 c004432:	2b03      	cmp	r3, #3
 c004434:	d81f      	bhi.n	c004476 <RCCEx_PLLSAI2_Config+0x5a>
 c004436:	2b01      	cmp	r3, #1
 c004438:	d002      	beq.n	c004440 <RCCEx_PLLSAI2_Config+0x24>
 c00443a:	2b02      	cmp	r3, #2
 c00443c:	d009      	beq.n	c004452 <RCCEx_PLLSAI2_Config+0x36>
 c00443e:	e01a      	b.n	c004476 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004440:	4b4a      	ldr	r3, [pc, #296]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004442:	681b      	ldr	r3, [r3, #0]
 c004444:	f003 0302 	and.w	r3, r3, #2
 c004448:	2b00      	cmp	r3, #0
 c00444a:	d117      	bne.n	c00447c <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c00444c:	2301      	movs	r3, #1
 c00444e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004450:	e014      	b.n	c00447c <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004452:	4b46      	ldr	r3, [pc, #280]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004454:	681b      	ldr	r3, [r3, #0]
 c004456:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00445a:	2b00      	cmp	r3, #0
 c00445c:	d110      	bne.n	c004480 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c00445e:	2301      	movs	r3, #1
 c004460:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004462:	e00d      	b.n	c004480 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c004464:	4b41      	ldr	r3, [pc, #260]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004466:	681b      	ldr	r3, [r3, #0]
 c004468:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c00446c:	2b00      	cmp	r3, #0
 c00446e:	d109      	bne.n	c004484 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c004470:	2301      	movs	r3, #1
 c004472:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004474:	e006      	b.n	c004484 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c004476:	2301      	movs	r3, #1
 c004478:	73fb      	strb	r3, [r7, #15]
      break;
 c00447a:	e004      	b.n	c004486 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c00447c:	bf00      	nop
 c00447e:	e002      	b.n	c004486 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004480:	bf00      	nop
 c004482:	e000      	b.n	c004486 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004484:	bf00      	nop
  }

  if (status == HAL_OK)
 c004486:	7bfb      	ldrb	r3, [r7, #15]
 c004488:	2b00      	cmp	r3, #0
 c00448a:	d169      	bne.n	c004560 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c00448c:	4b37      	ldr	r3, [pc, #220]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00448e:	681b      	ldr	r3, [r3, #0]
 c004490:	4a36      	ldr	r2, [pc, #216]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004492:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004496:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c004498:	f7fd fa60 	bl	c00195c <HAL_GetTick>
 c00449c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c00449e:	e00f      	b.n	c0044c0 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0044a0:	f7fd fa5c 	bl	c00195c <HAL_GetTick>
 c0044a4:	4602      	mov	r2, r0
 c0044a6:	68bb      	ldr	r3, [r7, #8]
 c0044a8:	1ad3      	subs	r3, r2, r3
 c0044aa:	2b02      	cmp	r3, #2
 c0044ac:	d908      	bls.n	c0044c0 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0044ae:	4b2f      	ldr	r3, [pc, #188]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c0044b0:	681b      	ldr	r3, [r3, #0]
 c0044b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0044b6:	2b00      	cmp	r3, #0
 c0044b8:	d009      	beq.n	c0044ce <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c0044ba:	2303      	movs	r3, #3
 c0044bc:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c0044be:	e006      	b.n	c0044ce <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0044c0:	4b2a      	ldr	r3, [pc, #168]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c0044c2:	681b      	ldr	r3, [r3, #0]
 c0044c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0044c8:	2b00      	cmp	r3, #0
 c0044ca:	d1e9      	bne.n	c0044a0 <RCCEx_PLLSAI2_Config+0x84>
 c0044cc:	e000      	b.n	c0044d0 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c0044ce:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c0044d0:	7bfb      	ldrb	r3, [r7, #15]
 c0044d2:	2b00      	cmp	r3, #0
 c0044d4:	d144      	bne.n	c004560 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0044d6:	683b      	ldr	r3, [r7, #0]
 c0044d8:	2b00      	cmp	r3, #0
 c0044da:	d115      	bne.n	c004508 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c0044dc:	4b23      	ldr	r3, [pc, #140]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c0044de:	695a      	ldr	r2, [r3, #20]
 c0044e0:	4b23      	ldr	r3, [pc, #140]	; (c004570 <RCCEx_PLLSAI2_Config+0x154>)
 c0044e2:	4013      	ands	r3, r2
 c0044e4:	687a      	ldr	r2, [r7, #4]
 c0044e6:	6892      	ldr	r2, [r2, #8]
 c0044e8:	0211      	lsls	r1, r2, #8
 c0044ea:	687a      	ldr	r2, [r7, #4]
 c0044ec:	68d2      	ldr	r2, [r2, #12]
 c0044ee:	06d2      	lsls	r2, r2, #27
 c0044f0:	4311      	orrs	r1, r2
 c0044f2:	687a      	ldr	r2, [r7, #4]
 c0044f4:	6852      	ldr	r2, [r2, #4]
 c0044f6:	3a01      	subs	r2, #1
 c0044f8:	0112      	lsls	r2, r2, #4
 c0044fa:	4311      	orrs	r1, r2
 c0044fc:	687a      	ldr	r2, [r7, #4]
 c0044fe:	6812      	ldr	r2, [r2, #0]
 c004500:	430a      	orrs	r2, r1
 c004502:	491a      	ldr	r1, [pc, #104]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004504:	4313      	orrs	r3, r2
 c004506:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c004508:	4b18      	ldr	r3, [pc, #96]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00450a:	681b      	ldr	r3, [r3, #0]
 c00450c:	4a17      	ldr	r2, [pc, #92]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00450e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004512:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004514:	f7fd fa22 	bl	c00195c <HAL_GetTick>
 c004518:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00451a:	e00f      	b.n	c00453c <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c00451c:	f7fd fa1e 	bl	c00195c <HAL_GetTick>
 c004520:	4602      	mov	r2, r0
 c004522:	68bb      	ldr	r3, [r7, #8]
 c004524:	1ad3      	subs	r3, r2, r3
 c004526:	2b02      	cmp	r3, #2
 c004528:	d908      	bls.n	c00453c <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00452a:	4b10      	ldr	r3, [pc, #64]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00452c:	681b      	ldr	r3, [r3, #0]
 c00452e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004532:	2b00      	cmp	r3, #0
 c004534:	d109      	bne.n	c00454a <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c004536:	2303      	movs	r3, #3
 c004538:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c00453a:	e006      	b.n	c00454a <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c00453c:	4b0b      	ldr	r3, [pc, #44]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00453e:	681b      	ldr	r3, [r3, #0]
 c004540:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004544:	2b00      	cmp	r3, #0
 c004546:	d0e9      	beq.n	c00451c <RCCEx_PLLSAI2_Config+0x100>
 c004548:	e000      	b.n	c00454c <RCCEx_PLLSAI2_Config+0x130>
          break;
 c00454a:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c00454c:	7bfb      	ldrb	r3, [r7, #15]
 c00454e:	2b00      	cmp	r3, #0
 c004550:	d106      	bne.n	c004560 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c004552:	4b06      	ldr	r3, [pc, #24]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c004554:	695a      	ldr	r2, [r3, #20]
 c004556:	687b      	ldr	r3, [r7, #4]
 c004558:	691b      	ldr	r3, [r3, #16]
 c00455a:	4904      	ldr	r1, [pc, #16]	; (c00456c <RCCEx_PLLSAI2_Config+0x150>)
 c00455c:	4313      	orrs	r3, r2
 c00455e:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c004560:	7bfb      	ldrb	r3, [r7, #15]
}
 c004562:	4618      	mov	r0, r3
 c004564:	3710      	adds	r7, #16
 c004566:	46bd      	mov	sp, r7
 c004568:	bd80      	pop	{r7, pc}
 c00456a:	bf00      	nop
 c00456c:	50021000 	.word	0x50021000
 c004570:	07ff800c 	.word	0x07ff800c

0c004574 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c004574:	b580      	push	{r7, lr}
 c004576:	b082      	sub	sp, #8
 c004578:	af00      	add	r7, sp, #0
 c00457a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c00457c:	687b      	ldr	r3, [r7, #4]
 c00457e:	2b00      	cmp	r3, #0
 c004580:	d101      	bne.n	c004586 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c004582:	2301      	movs	r3, #1
 c004584:	e042      	b.n	c00460c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c004586:	687b      	ldr	r3, [r7, #4]
 c004588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00458c:	2b00      	cmp	r3, #0
 c00458e:	d106      	bne.n	c00459e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c004590:	687b      	ldr	r3, [r7, #4]
 c004592:	2200      	movs	r2, #0
 c004594:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c004598:	6878      	ldr	r0, [r7, #4]
 c00459a:	f7fc fe7b 	bl	c001294 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00459e:	687b      	ldr	r3, [r7, #4]
 c0045a0:	2224      	movs	r2, #36	; 0x24
 c0045a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c0045a6:	687b      	ldr	r3, [r7, #4]
 c0045a8:	681b      	ldr	r3, [r3, #0]
 c0045aa:	681a      	ldr	r2, [r3, #0]
 c0045ac:	687b      	ldr	r3, [r7, #4]
 c0045ae:	681b      	ldr	r3, [r3, #0]
 c0045b0:	f022 0201 	bic.w	r2, r2, #1
 c0045b4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0045b6:	6878      	ldr	r0, [r7, #4]
 c0045b8:	f000 f8ba 	bl	c004730 <UART_SetConfig>
 c0045bc:	4603      	mov	r3, r0
 c0045be:	2b01      	cmp	r3, #1
 c0045c0:	d101      	bne.n	c0045c6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c0045c2:	2301      	movs	r3, #1
 c0045c4:	e022      	b.n	c00460c <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0045c6:	687b      	ldr	r3, [r7, #4]
 c0045c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0045ca:	2b00      	cmp	r3, #0
 c0045cc:	d002      	beq.n	c0045d4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0045ce:	6878      	ldr	r0, [r7, #4]
 c0045d0:	f000 fbac 	bl	c004d2c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0045d4:	687b      	ldr	r3, [r7, #4]
 c0045d6:	681b      	ldr	r3, [r3, #0]
 c0045d8:	685a      	ldr	r2, [r3, #4]
 c0045da:	687b      	ldr	r3, [r7, #4]
 c0045dc:	681b      	ldr	r3, [r3, #0]
 c0045de:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0045e2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0045e4:	687b      	ldr	r3, [r7, #4]
 c0045e6:	681b      	ldr	r3, [r3, #0]
 c0045e8:	689a      	ldr	r2, [r3, #8]
 c0045ea:	687b      	ldr	r3, [r7, #4]
 c0045ec:	681b      	ldr	r3, [r3, #0]
 c0045ee:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0045f2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0045f4:	687b      	ldr	r3, [r7, #4]
 c0045f6:	681b      	ldr	r3, [r3, #0]
 c0045f8:	681a      	ldr	r2, [r3, #0]
 c0045fa:	687b      	ldr	r3, [r7, #4]
 c0045fc:	681b      	ldr	r3, [r3, #0]
 c0045fe:	f042 0201 	orr.w	r2, r2, #1
 c004602:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c004604:	6878      	ldr	r0, [r7, #4]
 c004606:	f000 fc33 	bl	c004e70 <UART_CheckIdleState>
 c00460a:	4603      	mov	r3, r0
}
 c00460c:	4618      	mov	r0, r3
 c00460e:	3708      	adds	r7, #8
 c004610:	46bd      	mov	sp, r7
 c004612:	bd80      	pop	{r7, pc}

0c004614 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c004614:	b580      	push	{r7, lr}
 c004616:	b08a      	sub	sp, #40	; 0x28
 c004618:	af02      	add	r7, sp, #8
 c00461a:	60f8      	str	r0, [r7, #12]
 c00461c:	60b9      	str	r1, [r7, #8]
 c00461e:	603b      	str	r3, [r7, #0]
 c004620:	4613      	mov	r3, r2
 c004622:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c004624:	68fb      	ldr	r3, [r7, #12]
 c004626:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00462a:	2b20      	cmp	r3, #32
 c00462c:	d17b      	bne.n	c004726 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c00462e:	68bb      	ldr	r3, [r7, #8]
 c004630:	2b00      	cmp	r3, #0
 c004632:	d002      	beq.n	c00463a <HAL_UART_Transmit+0x26>
 c004634:	88fb      	ldrh	r3, [r7, #6]
 c004636:	2b00      	cmp	r3, #0
 c004638:	d101      	bne.n	c00463e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c00463a:	2301      	movs	r3, #1
 c00463c:	e074      	b.n	c004728 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00463e:	68fb      	ldr	r3, [r7, #12]
 c004640:	2200      	movs	r2, #0
 c004642:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c004646:	68fb      	ldr	r3, [r7, #12]
 c004648:	2221      	movs	r2, #33	; 0x21
 c00464a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00464e:	f7fd f985 	bl	c00195c <HAL_GetTick>
 c004652:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c004654:	68fb      	ldr	r3, [r7, #12]
 c004656:	88fa      	ldrh	r2, [r7, #6]
 c004658:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c00465c:	68fb      	ldr	r3, [r7, #12]
 c00465e:	88fa      	ldrh	r2, [r7, #6]
 c004660:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c004664:	68fb      	ldr	r3, [r7, #12]
 c004666:	689b      	ldr	r3, [r3, #8]
 c004668:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00466c:	d108      	bne.n	c004680 <HAL_UART_Transmit+0x6c>
 c00466e:	68fb      	ldr	r3, [r7, #12]
 c004670:	691b      	ldr	r3, [r3, #16]
 c004672:	2b00      	cmp	r3, #0
 c004674:	d104      	bne.n	c004680 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c004676:	2300      	movs	r3, #0
 c004678:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c00467a:	68bb      	ldr	r3, [r7, #8]
 c00467c:	61bb      	str	r3, [r7, #24]
 c00467e:	e003      	b.n	c004688 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c004680:	68bb      	ldr	r3, [r7, #8]
 c004682:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c004684:	2300      	movs	r3, #0
 c004686:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c004688:	e030      	b.n	c0046ec <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c00468a:	683b      	ldr	r3, [r7, #0]
 c00468c:	9300      	str	r3, [sp, #0]
 c00468e:	697b      	ldr	r3, [r7, #20]
 c004690:	2200      	movs	r2, #0
 c004692:	2180      	movs	r1, #128	; 0x80
 c004694:	68f8      	ldr	r0, [r7, #12]
 c004696:	f000 fc95 	bl	c004fc4 <UART_WaitOnFlagUntilTimeout>
 c00469a:	4603      	mov	r3, r0
 c00469c:	2b00      	cmp	r3, #0
 c00469e:	d005      	beq.n	c0046ac <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c0046a0:	68fb      	ldr	r3, [r7, #12]
 c0046a2:	2220      	movs	r2, #32
 c0046a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c0046a8:	2303      	movs	r3, #3
 c0046aa:	e03d      	b.n	c004728 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c0046ac:	69fb      	ldr	r3, [r7, #28]
 c0046ae:	2b00      	cmp	r3, #0
 c0046b0:	d10b      	bne.n	c0046ca <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0046b2:	69bb      	ldr	r3, [r7, #24]
 c0046b4:	881b      	ldrh	r3, [r3, #0]
 c0046b6:	461a      	mov	r2, r3
 c0046b8:	68fb      	ldr	r3, [r7, #12]
 c0046ba:	681b      	ldr	r3, [r3, #0]
 c0046bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c0046c0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c0046c2:	69bb      	ldr	r3, [r7, #24]
 c0046c4:	3302      	adds	r3, #2
 c0046c6:	61bb      	str	r3, [r7, #24]
 c0046c8:	e007      	b.n	c0046da <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c0046ca:	69fb      	ldr	r3, [r7, #28]
 c0046cc:	781a      	ldrb	r2, [r3, #0]
 c0046ce:	68fb      	ldr	r3, [r7, #12]
 c0046d0:	681b      	ldr	r3, [r3, #0]
 c0046d2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c0046d4:	69fb      	ldr	r3, [r7, #28]
 c0046d6:	3301      	adds	r3, #1
 c0046d8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c0046da:	68fb      	ldr	r3, [r7, #12]
 c0046dc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0046e0:	b29b      	uxth	r3, r3
 c0046e2:	3b01      	subs	r3, #1
 c0046e4:	b29a      	uxth	r2, r3
 c0046e6:	68fb      	ldr	r3, [r7, #12]
 c0046e8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c0046ec:	68fb      	ldr	r3, [r7, #12]
 c0046ee:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0046f2:	b29b      	uxth	r3, r3
 c0046f4:	2b00      	cmp	r3, #0
 c0046f6:	d1c8      	bne.n	c00468a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c0046f8:	683b      	ldr	r3, [r7, #0]
 c0046fa:	9300      	str	r3, [sp, #0]
 c0046fc:	697b      	ldr	r3, [r7, #20]
 c0046fe:	2200      	movs	r2, #0
 c004700:	2140      	movs	r1, #64	; 0x40
 c004702:	68f8      	ldr	r0, [r7, #12]
 c004704:	f000 fc5e 	bl	c004fc4 <UART_WaitOnFlagUntilTimeout>
 c004708:	4603      	mov	r3, r0
 c00470a:	2b00      	cmp	r3, #0
 c00470c:	d005      	beq.n	c00471a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c00470e:	68fb      	ldr	r3, [r7, #12]
 c004710:	2220      	movs	r2, #32
 c004712:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c004716:	2303      	movs	r3, #3
 c004718:	e006      	b.n	c004728 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c00471a:	68fb      	ldr	r3, [r7, #12]
 c00471c:	2220      	movs	r2, #32
 c00471e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c004722:	2300      	movs	r3, #0
 c004724:	e000      	b.n	c004728 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c004726:	2302      	movs	r3, #2
  }
}
 c004728:	4618      	mov	r0, r3
 c00472a:	3720      	adds	r7, #32
 c00472c:	46bd      	mov	sp, r7
 c00472e:	bd80      	pop	{r7, pc}

0c004730 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c004730:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c004734:	b08c      	sub	sp, #48	; 0x30
 c004736:	af00      	add	r7, sp, #0
 c004738:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00473a:	2300      	movs	r3, #0
 c00473c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c004740:	697b      	ldr	r3, [r7, #20]
 c004742:	689a      	ldr	r2, [r3, #8]
 c004744:	697b      	ldr	r3, [r7, #20]
 c004746:	691b      	ldr	r3, [r3, #16]
 c004748:	431a      	orrs	r2, r3
 c00474a:	697b      	ldr	r3, [r7, #20]
 c00474c:	695b      	ldr	r3, [r3, #20]
 c00474e:	431a      	orrs	r2, r3
 c004750:	697b      	ldr	r3, [r7, #20]
 c004752:	69db      	ldr	r3, [r3, #28]
 c004754:	4313      	orrs	r3, r2
 c004756:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c004758:	697b      	ldr	r3, [r7, #20]
 c00475a:	681b      	ldr	r3, [r3, #0]
 c00475c:	681a      	ldr	r2, [r3, #0]
 c00475e:	4baa      	ldr	r3, [pc, #680]	; (c004a08 <UART_SetConfig+0x2d8>)
 c004760:	4013      	ands	r3, r2
 c004762:	697a      	ldr	r2, [r7, #20]
 c004764:	6812      	ldr	r2, [r2, #0]
 c004766:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004768:	430b      	orrs	r3, r1
 c00476a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c00476c:	697b      	ldr	r3, [r7, #20]
 c00476e:	681b      	ldr	r3, [r3, #0]
 c004770:	685b      	ldr	r3, [r3, #4]
 c004772:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c004776:	697b      	ldr	r3, [r7, #20]
 c004778:	68da      	ldr	r2, [r3, #12]
 c00477a:	697b      	ldr	r3, [r7, #20]
 c00477c:	681b      	ldr	r3, [r3, #0]
 c00477e:	430a      	orrs	r2, r1
 c004780:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c004782:	697b      	ldr	r3, [r7, #20]
 c004784:	699b      	ldr	r3, [r3, #24]
 c004786:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c004788:	697b      	ldr	r3, [r7, #20]
 c00478a:	681b      	ldr	r3, [r3, #0]
 c00478c:	4a9f      	ldr	r2, [pc, #636]	; (c004a0c <UART_SetConfig+0x2dc>)
 c00478e:	4293      	cmp	r3, r2
 c004790:	d004      	beq.n	c00479c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c004792:	697b      	ldr	r3, [r7, #20]
 c004794:	6a1b      	ldr	r3, [r3, #32]
 c004796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c004798:	4313      	orrs	r3, r2
 c00479a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00479c:	697b      	ldr	r3, [r7, #20]
 c00479e:	681b      	ldr	r3, [r3, #0]
 c0047a0:	689b      	ldr	r3, [r3, #8]
 c0047a2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c0047a6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c0047aa:	697a      	ldr	r2, [r7, #20]
 c0047ac:	6812      	ldr	r2, [r2, #0]
 c0047ae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c0047b0:	430b      	orrs	r3, r1
 c0047b2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0047b4:	697b      	ldr	r3, [r7, #20]
 c0047b6:	681b      	ldr	r3, [r3, #0]
 c0047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0047ba:	f023 010f 	bic.w	r1, r3, #15
 c0047be:	697b      	ldr	r3, [r7, #20]
 c0047c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0047c2:	697b      	ldr	r3, [r7, #20]
 c0047c4:	681b      	ldr	r3, [r3, #0]
 c0047c6:	430a      	orrs	r2, r1
 c0047c8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0047ca:	697b      	ldr	r3, [r7, #20]
 c0047cc:	681b      	ldr	r3, [r3, #0]
 c0047ce:	4a90      	ldr	r2, [pc, #576]	; (c004a10 <UART_SetConfig+0x2e0>)
 c0047d0:	4293      	cmp	r3, r2
 c0047d2:	d125      	bne.n	c004820 <UART_SetConfig+0xf0>
 c0047d4:	4b8f      	ldr	r3, [pc, #572]	; (c004a14 <UART_SetConfig+0x2e4>)
 c0047d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0047da:	f003 0303 	and.w	r3, r3, #3
 c0047de:	2b03      	cmp	r3, #3
 c0047e0:	d81a      	bhi.n	c004818 <UART_SetConfig+0xe8>
 c0047e2:	a201      	add	r2, pc, #4	; (adr r2, c0047e8 <UART_SetConfig+0xb8>)
 c0047e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0047e8:	0c0047f9 	.word	0x0c0047f9
 c0047ec:	0c004809 	.word	0x0c004809
 c0047f0:	0c004801 	.word	0x0c004801
 c0047f4:	0c004811 	.word	0x0c004811
 c0047f8:	2301      	movs	r3, #1
 c0047fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0047fe:	e114      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004800:	2302      	movs	r3, #2
 c004802:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004806:	e110      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004808:	2304      	movs	r3, #4
 c00480a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00480e:	e10c      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004810:	2308      	movs	r3, #8
 c004812:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004816:	e108      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004818:	2310      	movs	r3, #16
 c00481a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00481e:	e104      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004820:	697b      	ldr	r3, [r7, #20]
 c004822:	681b      	ldr	r3, [r3, #0]
 c004824:	4a7c      	ldr	r2, [pc, #496]	; (c004a18 <UART_SetConfig+0x2e8>)
 c004826:	4293      	cmp	r3, r2
 c004828:	d138      	bne.n	c00489c <UART_SetConfig+0x16c>
 c00482a:	4b7a      	ldr	r3, [pc, #488]	; (c004a14 <UART_SetConfig+0x2e4>)
 c00482c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004830:	f003 030c 	and.w	r3, r3, #12
 c004834:	2b0c      	cmp	r3, #12
 c004836:	d82d      	bhi.n	c004894 <UART_SetConfig+0x164>
 c004838:	a201      	add	r2, pc, #4	; (adr r2, c004840 <UART_SetConfig+0x110>)
 c00483a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00483e:	bf00      	nop
 c004840:	0c004875 	.word	0x0c004875
 c004844:	0c004895 	.word	0x0c004895
 c004848:	0c004895 	.word	0x0c004895
 c00484c:	0c004895 	.word	0x0c004895
 c004850:	0c004885 	.word	0x0c004885
 c004854:	0c004895 	.word	0x0c004895
 c004858:	0c004895 	.word	0x0c004895
 c00485c:	0c004895 	.word	0x0c004895
 c004860:	0c00487d 	.word	0x0c00487d
 c004864:	0c004895 	.word	0x0c004895
 c004868:	0c004895 	.word	0x0c004895
 c00486c:	0c004895 	.word	0x0c004895
 c004870:	0c00488d 	.word	0x0c00488d
 c004874:	2300      	movs	r3, #0
 c004876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00487a:	e0d6      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c00487c:	2302      	movs	r3, #2
 c00487e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004882:	e0d2      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004884:	2304      	movs	r3, #4
 c004886:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00488a:	e0ce      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c00488c:	2308      	movs	r3, #8
 c00488e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004892:	e0ca      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004894:	2310      	movs	r3, #16
 c004896:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00489a:	e0c6      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c00489c:	697b      	ldr	r3, [r7, #20]
 c00489e:	681b      	ldr	r3, [r3, #0]
 c0048a0:	4a5e      	ldr	r2, [pc, #376]	; (c004a1c <UART_SetConfig+0x2ec>)
 c0048a2:	4293      	cmp	r3, r2
 c0048a4:	d125      	bne.n	c0048f2 <UART_SetConfig+0x1c2>
 c0048a6:	4b5b      	ldr	r3, [pc, #364]	; (c004a14 <UART_SetConfig+0x2e4>)
 c0048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0048ac:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0048b0:	2b30      	cmp	r3, #48	; 0x30
 c0048b2:	d016      	beq.n	c0048e2 <UART_SetConfig+0x1b2>
 c0048b4:	2b30      	cmp	r3, #48	; 0x30
 c0048b6:	d818      	bhi.n	c0048ea <UART_SetConfig+0x1ba>
 c0048b8:	2b20      	cmp	r3, #32
 c0048ba:	d00a      	beq.n	c0048d2 <UART_SetConfig+0x1a2>
 c0048bc:	2b20      	cmp	r3, #32
 c0048be:	d814      	bhi.n	c0048ea <UART_SetConfig+0x1ba>
 c0048c0:	2b00      	cmp	r3, #0
 c0048c2:	d002      	beq.n	c0048ca <UART_SetConfig+0x19a>
 c0048c4:	2b10      	cmp	r3, #16
 c0048c6:	d008      	beq.n	c0048da <UART_SetConfig+0x1aa>
 c0048c8:	e00f      	b.n	c0048ea <UART_SetConfig+0x1ba>
 c0048ca:	2300      	movs	r3, #0
 c0048cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0048d0:	e0ab      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0048d2:	2302      	movs	r3, #2
 c0048d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0048d8:	e0a7      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0048da:	2304      	movs	r3, #4
 c0048dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0048e0:	e0a3      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0048e2:	2308      	movs	r3, #8
 c0048e4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0048e8:	e09f      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0048ea:	2310      	movs	r3, #16
 c0048ec:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0048f0:	e09b      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0048f2:	697b      	ldr	r3, [r7, #20]
 c0048f4:	681b      	ldr	r3, [r3, #0]
 c0048f6:	4a4a      	ldr	r2, [pc, #296]	; (c004a20 <UART_SetConfig+0x2f0>)
 c0048f8:	4293      	cmp	r3, r2
 c0048fa:	d125      	bne.n	c004948 <UART_SetConfig+0x218>
 c0048fc:	4b45      	ldr	r3, [pc, #276]	; (c004a14 <UART_SetConfig+0x2e4>)
 c0048fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004902:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c004906:	2bc0      	cmp	r3, #192	; 0xc0
 c004908:	d016      	beq.n	c004938 <UART_SetConfig+0x208>
 c00490a:	2bc0      	cmp	r3, #192	; 0xc0
 c00490c:	d818      	bhi.n	c004940 <UART_SetConfig+0x210>
 c00490e:	2b80      	cmp	r3, #128	; 0x80
 c004910:	d00a      	beq.n	c004928 <UART_SetConfig+0x1f8>
 c004912:	2b80      	cmp	r3, #128	; 0x80
 c004914:	d814      	bhi.n	c004940 <UART_SetConfig+0x210>
 c004916:	2b00      	cmp	r3, #0
 c004918:	d002      	beq.n	c004920 <UART_SetConfig+0x1f0>
 c00491a:	2b40      	cmp	r3, #64	; 0x40
 c00491c:	d008      	beq.n	c004930 <UART_SetConfig+0x200>
 c00491e:	e00f      	b.n	c004940 <UART_SetConfig+0x210>
 c004920:	2300      	movs	r3, #0
 c004922:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004926:	e080      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004928:	2302      	movs	r3, #2
 c00492a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00492e:	e07c      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004930:	2304      	movs	r3, #4
 c004932:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004936:	e078      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004938:	2308      	movs	r3, #8
 c00493a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00493e:	e074      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004940:	2310      	movs	r3, #16
 c004942:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004946:	e070      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004948:	697b      	ldr	r3, [r7, #20]
 c00494a:	681b      	ldr	r3, [r3, #0]
 c00494c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c004950:	d12a      	bne.n	c0049a8 <UART_SetConfig+0x278>
 c004952:	4b30      	ldr	r3, [pc, #192]	; (c004a14 <UART_SetConfig+0x2e4>)
 c004954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004958:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00495c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004960:	d01a      	beq.n	c004998 <UART_SetConfig+0x268>
 c004962:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004966:	d81b      	bhi.n	c0049a0 <UART_SetConfig+0x270>
 c004968:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00496c:	d00c      	beq.n	c004988 <UART_SetConfig+0x258>
 c00496e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004972:	d815      	bhi.n	c0049a0 <UART_SetConfig+0x270>
 c004974:	2b00      	cmp	r3, #0
 c004976:	d003      	beq.n	c004980 <UART_SetConfig+0x250>
 c004978:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00497c:	d008      	beq.n	c004990 <UART_SetConfig+0x260>
 c00497e:	e00f      	b.n	c0049a0 <UART_SetConfig+0x270>
 c004980:	2300      	movs	r3, #0
 c004982:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004986:	e050      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004988:	2302      	movs	r3, #2
 c00498a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00498e:	e04c      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004990:	2304      	movs	r3, #4
 c004992:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004996:	e048      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004998:	2308      	movs	r3, #8
 c00499a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00499e:	e044      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0049a0:	2310      	movs	r3, #16
 c0049a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0049a6:	e040      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0049a8:	697b      	ldr	r3, [r7, #20]
 c0049aa:	681b      	ldr	r3, [r3, #0]
 c0049ac:	4a17      	ldr	r2, [pc, #92]	; (c004a0c <UART_SetConfig+0x2dc>)
 c0049ae:	4293      	cmp	r3, r2
 c0049b0:	d138      	bne.n	c004a24 <UART_SetConfig+0x2f4>
 c0049b2:	4b18      	ldr	r3, [pc, #96]	; (c004a14 <UART_SetConfig+0x2e4>)
 c0049b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0049b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c0049bc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0049c0:	d01a      	beq.n	c0049f8 <UART_SetConfig+0x2c8>
 c0049c2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0049c6:	d81b      	bhi.n	c004a00 <UART_SetConfig+0x2d0>
 c0049c8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0049cc:	d00c      	beq.n	c0049e8 <UART_SetConfig+0x2b8>
 c0049ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0049d2:	d815      	bhi.n	c004a00 <UART_SetConfig+0x2d0>
 c0049d4:	2b00      	cmp	r3, #0
 c0049d6:	d003      	beq.n	c0049e0 <UART_SetConfig+0x2b0>
 c0049d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0049dc:	d008      	beq.n	c0049f0 <UART_SetConfig+0x2c0>
 c0049de:	e00f      	b.n	c004a00 <UART_SetConfig+0x2d0>
 c0049e0:	2300      	movs	r3, #0
 c0049e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0049e6:	e020      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0049e8:	2302      	movs	r3, #2
 c0049ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0049ee:	e01c      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0049f0:	2304      	movs	r3, #4
 c0049f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0049f6:	e018      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c0049f8:	2308      	movs	r3, #8
 c0049fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0049fe:	e014      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004a00:	2310      	movs	r3, #16
 c004a02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004a06:	e010      	b.n	c004a2a <UART_SetConfig+0x2fa>
 c004a08:	cfff69f3 	.word	0xcfff69f3
 c004a0c:	50008000 	.word	0x50008000
 c004a10:	50013800 	.word	0x50013800
 c004a14:	50021000 	.word	0x50021000
 c004a18:	50004400 	.word	0x50004400
 c004a1c:	50004800 	.word	0x50004800
 c004a20:	50004c00 	.word	0x50004c00
 c004a24:	2310      	movs	r3, #16
 c004a26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c004a2a:	697b      	ldr	r3, [r7, #20]
 c004a2c:	681b      	ldr	r3, [r3, #0]
 c004a2e:	4ab0      	ldr	r2, [pc, #704]	; (c004cf0 <UART_SetConfig+0x5c0>)
 c004a30:	4293      	cmp	r3, r2
 c004a32:	f040 809b 	bne.w	c004b6c <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c004a36:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c004a3a:	2b08      	cmp	r3, #8
 c004a3c:	d827      	bhi.n	c004a8e <UART_SetConfig+0x35e>
 c004a3e:	a201      	add	r2, pc, #4	; (adr r2, c004a44 <UART_SetConfig+0x314>)
 c004a40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004a44:	0c004a69 	.word	0x0c004a69
 c004a48:	0c004a71 	.word	0x0c004a71
 c004a4c:	0c004a79 	.word	0x0c004a79
 c004a50:	0c004a8f 	.word	0x0c004a8f
 c004a54:	0c004a7f 	.word	0x0c004a7f
 c004a58:	0c004a8f 	.word	0x0c004a8f
 c004a5c:	0c004a8f 	.word	0x0c004a8f
 c004a60:	0c004a8f 	.word	0x0c004a8f
 c004a64:	0c004a87 	.word	0x0c004a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004a68:	f7fe ff74 	bl	c003954 <HAL_RCC_GetPCLK1Freq>
 c004a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004a6e:	e014      	b.n	c004a9a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004a70:	f7fe ff84 	bl	c00397c <HAL_RCC_GetPCLK2Freq>
 c004a74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004a76:	e010      	b.n	c004a9a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c004a78:	4b9e      	ldr	r3, [pc, #632]	; (c004cf4 <UART_SetConfig+0x5c4>)
 c004a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004a7c:	e00d      	b.n	c004a9a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004a7e:	f7fe feb7 	bl	c0037f0 <HAL_RCC_GetSysClockFreq>
 c004a82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004a84:	e009      	b.n	c004a9a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c004a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004a8c:	e005      	b.n	c004a9a <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c004a8e:	2300      	movs	r3, #0
 c004a90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c004a92:	2301      	movs	r3, #1
 c004a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c004a98:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004a9c:	2b00      	cmp	r3, #0
 c004a9e:	f000 8130 	beq.w	c004d02 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c004aa2:	697b      	ldr	r3, [r7, #20]
 c004aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004aa6:	4a94      	ldr	r2, [pc, #592]	; (c004cf8 <UART_SetConfig+0x5c8>)
 c004aa8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004aac:	461a      	mov	r2, r3
 c004aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 c004ab4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004ab6:	697b      	ldr	r3, [r7, #20]
 c004ab8:	685a      	ldr	r2, [r3, #4]
 c004aba:	4613      	mov	r3, r2
 c004abc:	005b      	lsls	r3, r3, #1
 c004abe:	4413      	add	r3, r2
 c004ac0:	69ba      	ldr	r2, [r7, #24]
 c004ac2:	429a      	cmp	r2, r3
 c004ac4:	d305      	bcc.n	c004ad2 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c004ac6:	697b      	ldr	r3, [r7, #20]
 c004ac8:	685b      	ldr	r3, [r3, #4]
 c004aca:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004acc:	69ba      	ldr	r2, [r7, #24]
 c004ace:	429a      	cmp	r2, r3
 c004ad0:	d903      	bls.n	c004ada <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c004ad2:	2301      	movs	r3, #1
 c004ad4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004ad8:	e113      	b.n	c004d02 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004adc:	2200      	movs	r2, #0
 c004ade:	60bb      	str	r3, [r7, #8]
 c004ae0:	60fa      	str	r2, [r7, #12]
 c004ae2:	697b      	ldr	r3, [r7, #20]
 c004ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ae6:	4a84      	ldr	r2, [pc, #528]	; (c004cf8 <UART_SetConfig+0x5c8>)
 c004ae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004aec:	b29b      	uxth	r3, r3
 c004aee:	2200      	movs	r2, #0
 c004af0:	603b      	str	r3, [r7, #0]
 c004af2:	607a      	str	r2, [r7, #4]
 c004af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004af8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c004afc:	f7fb fc3c 	bl	c000378 <__aeabi_uldivmod>
 c004b00:	4602      	mov	r2, r0
 c004b02:	460b      	mov	r3, r1
 c004b04:	4610      	mov	r0, r2
 c004b06:	4619      	mov	r1, r3
 c004b08:	f04f 0200 	mov.w	r2, #0
 c004b0c:	f04f 0300 	mov.w	r3, #0
 c004b10:	020b      	lsls	r3, r1, #8
 c004b12:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c004b16:	0202      	lsls	r2, r0, #8
 c004b18:	6979      	ldr	r1, [r7, #20]
 c004b1a:	6849      	ldr	r1, [r1, #4]
 c004b1c:	0849      	lsrs	r1, r1, #1
 c004b1e:	2000      	movs	r0, #0
 c004b20:	460c      	mov	r4, r1
 c004b22:	4605      	mov	r5, r0
 c004b24:	eb12 0804 	adds.w	r8, r2, r4
 c004b28:	eb43 0905 	adc.w	r9, r3, r5
 c004b2c:	697b      	ldr	r3, [r7, #20]
 c004b2e:	685b      	ldr	r3, [r3, #4]
 c004b30:	2200      	movs	r2, #0
 c004b32:	469a      	mov	sl, r3
 c004b34:	4693      	mov	fp, r2
 c004b36:	4652      	mov	r2, sl
 c004b38:	465b      	mov	r3, fp
 c004b3a:	4640      	mov	r0, r8
 c004b3c:	4649      	mov	r1, r9
 c004b3e:	f7fb fc1b 	bl	c000378 <__aeabi_uldivmod>
 c004b42:	4602      	mov	r2, r0
 c004b44:	460b      	mov	r3, r1
 c004b46:	4613      	mov	r3, r2
 c004b48:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c004b4a:	6a3b      	ldr	r3, [r7, #32]
 c004b4c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004b50:	d308      	bcc.n	c004b64 <UART_SetConfig+0x434>
 c004b52:	6a3b      	ldr	r3, [r7, #32]
 c004b54:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004b58:	d204      	bcs.n	c004b64 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c004b5a:	697b      	ldr	r3, [r7, #20]
 c004b5c:	681b      	ldr	r3, [r3, #0]
 c004b5e:	6a3a      	ldr	r2, [r7, #32]
 c004b60:	60da      	str	r2, [r3, #12]
 c004b62:	e0ce      	b.n	c004d02 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c004b64:	2301      	movs	r3, #1
 c004b66:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004b6a:	e0ca      	b.n	c004d02 <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c004b6c:	697b      	ldr	r3, [r7, #20]
 c004b6e:	69db      	ldr	r3, [r3, #28]
 c004b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004b74:	d166      	bne.n	c004c44 <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c004b76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c004b7a:	2b08      	cmp	r3, #8
 c004b7c:	d827      	bhi.n	c004bce <UART_SetConfig+0x49e>
 c004b7e:	a201      	add	r2, pc, #4	; (adr r2, c004b84 <UART_SetConfig+0x454>)
 c004b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004b84:	0c004ba9 	.word	0x0c004ba9
 c004b88:	0c004bb1 	.word	0x0c004bb1
 c004b8c:	0c004bb9 	.word	0x0c004bb9
 c004b90:	0c004bcf 	.word	0x0c004bcf
 c004b94:	0c004bbf 	.word	0x0c004bbf
 c004b98:	0c004bcf 	.word	0x0c004bcf
 c004b9c:	0c004bcf 	.word	0x0c004bcf
 c004ba0:	0c004bcf 	.word	0x0c004bcf
 c004ba4:	0c004bc7 	.word	0x0c004bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004ba8:	f7fe fed4 	bl	c003954 <HAL_RCC_GetPCLK1Freq>
 c004bac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004bae:	e014      	b.n	c004bda <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004bb0:	f7fe fee4 	bl	c00397c <HAL_RCC_GetPCLK2Freq>
 c004bb4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004bb6:	e010      	b.n	c004bda <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c004bb8:	4b4e      	ldr	r3, [pc, #312]	; (c004cf4 <UART_SetConfig+0x5c4>)
 c004bba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004bbc:	e00d      	b.n	c004bda <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004bbe:	f7fe fe17 	bl	c0037f0 <HAL_RCC_GetSysClockFreq>
 c004bc2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004bc4:	e009      	b.n	c004bda <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c004bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004bca:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004bcc:	e005      	b.n	c004bda <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c004bce:	2300      	movs	r3, #0
 c004bd0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c004bd2:	2301      	movs	r3, #1
 c004bd4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c004bd8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004bdc:	2b00      	cmp	r3, #0
 c004bde:	f000 8090 	beq.w	c004d02 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004be2:	697b      	ldr	r3, [r7, #20]
 c004be4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004be6:	4a44      	ldr	r2, [pc, #272]	; (c004cf8 <UART_SetConfig+0x5c8>)
 c004be8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004bec:	461a      	mov	r2, r3
 c004bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004bf0:	fbb3 f3f2 	udiv	r3, r3, r2
 c004bf4:	005a      	lsls	r2, r3, #1
 c004bf6:	697b      	ldr	r3, [r7, #20]
 c004bf8:	685b      	ldr	r3, [r3, #4]
 c004bfa:	085b      	lsrs	r3, r3, #1
 c004bfc:	441a      	add	r2, r3
 c004bfe:	697b      	ldr	r3, [r7, #20]
 c004c00:	685b      	ldr	r3, [r3, #4]
 c004c02:	fbb2 f3f3 	udiv	r3, r2, r3
 c004c06:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c004c08:	6a3b      	ldr	r3, [r7, #32]
 c004c0a:	2b0f      	cmp	r3, #15
 c004c0c:	d916      	bls.n	c004c3c <UART_SetConfig+0x50c>
 c004c0e:	6a3b      	ldr	r3, [r7, #32]
 c004c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004c14:	d212      	bcs.n	c004c3c <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c004c16:	6a3b      	ldr	r3, [r7, #32]
 c004c18:	b29b      	uxth	r3, r3
 c004c1a:	f023 030f 	bic.w	r3, r3, #15
 c004c1e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c004c20:	6a3b      	ldr	r3, [r7, #32]
 c004c22:	085b      	lsrs	r3, r3, #1
 c004c24:	b29b      	uxth	r3, r3
 c004c26:	f003 0307 	and.w	r3, r3, #7
 c004c2a:	b29a      	uxth	r2, r3
 c004c2c:	8bfb      	ldrh	r3, [r7, #30]
 c004c2e:	4313      	orrs	r3, r2
 c004c30:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c004c32:	697b      	ldr	r3, [r7, #20]
 c004c34:	681b      	ldr	r3, [r3, #0]
 c004c36:	8bfa      	ldrh	r2, [r7, #30]
 c004c38:	60da      	str	r2, [r3, #12]
 c004c3a:	e062      	b.n	c004d02 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c004c3c:	2301      	movs	r3, #1
 c004c3e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004c42:	e05e      	b.n	c004d02 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c004c44:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c004c48:	2b08      	cmp	r3, #8
 c004c4a:	d828      	bhi.n	c004c9e <UART_SetConfig+0x56e>
 c004c4c:	a201      	add	r2, pc, #4	; (adr r2, c004c54 <UART_SetConfig+0x524>)
 c004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004c52:	bf00      	nop
 c004c54:	0c004c79 	.word	0x0c004c79
 c004c58:	0c004c81 	.word	0x0c004c81
 c004c5c:	0c004c89 	.word	0x0c004c89
 c004c60:	0c004c9f 	.word	0x0c004c9f
 c004c64:	0c004c8f 	.word	0x0c004c8f
 c004c68:	0c004c9f 	.word	0x0c004c9f
 c004c6c:	0c004c9f 	.word	0x0c004c9f
 c004c70:	0c004c9f 	.word	0x0c004c9f
 c004c74:	0c004c97 	.word	0x0c004c97
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004c78:	f7fe fe6c 	bl	c003954 <HAL_RCC_GetPCLK1Freq>
 c004c7c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004c7e:	e014      	b.n	c004caa <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004c80:	f7fe fe7c 	bl	c00397c <HAL_RCC_GetPCLK2Freq>
 c004c84:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004c86:	e010      	b.n	c004caa <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c004c88:	4b1a      	ldr	r3, [pc, #104]	; (c004cf4 <UART_SetConfig+0x5c4>)
 c004c8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004c8c:	e00d      	b.n	c004caa <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004c8e:	f7fe fdaf 	bl	c0037f0 <HAL_RCC_GetSysClockFreq>
 c004c92:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004c94:	e009      	b.n	c004caa <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c004c96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004c9a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004c9c:	e005      	b.n	c004caa <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c004c9e:	2300      	movs	r3, #0
 c004ca0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c004ca2:	2301      	movs	r3, #1
 c004ca4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c004ca8:	bf00      	nop
    }

    if (pclk != 0U)
 c004caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004cac:	2b00      	cmp	r3, #0
 c004cae:	d028      	beq.n	c004d02 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004cb0:	697b      	ldr	r3, [r7, #20]
 c004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004cb4:	4a10      	ldr	r2, [pc, #64]	; (c004cf8 <UART_SetConfig+0x5c8>)
 c004cb6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004cba:	461a      	mov	r2, r3
 c004cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004cbe:	fbb3 f2f2 	udiv	r2, r3, r2
 c004cc2:	697b      	ldr	r3, [r7, #20]
 c004cc4:	685b      	ldr	r3, [r3, #4]
 c004cc6:	085b      	lsrs	r3, r3, #1
 c004cc8:	441a      	add	r2, r3
 c004cca:	697b      	ldr	r3, [r7, #20]
 c004ccc:	685b      	ldr	r3, [r3, #4]
 c004cce:	fbb2 f3f3 	udiv	r3, r2, r3
 c004cd2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c004cd4:	6a3b      	ldr	r3, [r7, #32]
 c004cd6:	2b0f      	cmp	r3, #15
 c004cd8:	d910      	bls.n	c004cfc <UART_SetConfig+0x5cc>
 c004cda:	6a3b      	ldr	r3, [r7, #32]
 c004cdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c004ce0:	d20c      	bcs.n	c004cfc <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c004ce2:	6a3b      	ldr	r3, [r7, #32]
 c004ce4:	b29a      	uxth	r2, r3
 c004ce6:	697b      	ldr	r3, [r7, #20]
 c004ce8:	681b      	ldr	r3, [r3, #0]
 c004cea:	60da      	str	r2, [r3, #12]
 c004cec:	e009      	b.n	c004d02 <UART_SetConfig+0x5d2>
 c004cee:	bf00      	nop
 c004cf0:	50008000 	.word	0x50008000
 c004cf4:	00f42400 	.word	0x00f42400
 c004cf8:	0c006504 	.word	0x0c006504
      }
      else
      {
        ret = HAL_ERROR;
 c004cfc:	2301      	movs	r3, #1
 c004cfe:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c004d02:	697b      	ldr	r3, [r7, #20]
 c004d04:	2201      	movs	r2, #1
 c004d06:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c004d0a:	697b      	ldr	r3, [r7, #20]
 c004d0c:	2201      	movs	r2, #1
 c004d0e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c004d12:	697b      	ldr	r3, [r7, #20]
 c004d14:	2200      	movs	r2, #0
 c004d16:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c004d18:	697b      	ldr	r3, [r7, #20]
 c004d1a:	2200      	movs	r2, #0
 c004d1c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c004d1e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c004d22:	4618      	mov	r0, r3
 c004d24:	3730      	adds	r7, #48	; 0x30
 c004d26:	46bd      	mov	sp, r7
 c004d28:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c004d2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c004d2c:	b480      	push	{r7}
 c004d2e:	b083      	sub	sp, #12
 c004d30:	af00      	add	r7, sp, #0
 c004d32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c004d34:	687b      	ldr	r3, [r7, #4]
 c004d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004d38:	f003 0301 	and.w	r3, r3, #1
 c004d3c:	2b00      	cmp	r3, #0
 c004d3e:	d00a      	beq.n	c004d56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c004d40:	687b      	ldr	r3, [r7, #4]
 c004d42:	681b      	ldr	r3, [r3, #0]
 c004d44:	685b      	ldr	r3, [r3, #4]
 c004d46:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c004d4a:	687b      	ldr	r3, [r7, #4]
 c004d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c004d4e:	687b      	ldr	r3, [r7, #4]
 c004d50:	681b      	ldr	r3, [r3, #0]
 c004d52:	430a      	orrs	r2, r1
 c004d54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c004d56:	687b      	ldr	r3, [r7, #4]
 c004d58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004d5a:	f003 0302 	and.w	r3, r3, #2
 c004d5e:	2b00      	cmp	r3, #0
 c004d60:	d00a      	beq.n	c004d78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c004d62:	687b      	ldr	r3, [r7, #4]
 c004d64:	681b      	ldr	r3, [r3, #0]
 c004d66:	685b      	ldr	r3, [r3, #4]
 c004d68:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c004d6c:	687b      	ldr	r3, [r7, #4]
 c004d6e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c004d70:	687b      	ldr	r3, [r7, #4]
 c004d72:	681b      	ldr	r3, [r3, #0]
 c004d74:	430a      	orrs	r2, r1
 c004d76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c004d78:	687b      	ldr	r3, [r7, #4]
 c004d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004d7c:	f003 0304 	and.w	r3, r3, #4
 c004d80:	2b00      	cmp	r3, #0
 c004d82:	d00a      	beq.n	c004d9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c004d84:	687b      	ldr	r3, [r7, #4]
 c004d86:	681b      	ldr	r3, [r3, #0]
 c004d88:	685b      	ldr	r3, [r3, #4]
 c004d8a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c004d8e:	687b      	ldr	r3, [r7, #4]
 c004d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c004d92:	687b      	ldr	r3, [r7, #4]
 c004d94:	681b      	ldr	r3, [r3, #0]
 c004d96:	430a      	orrs	r2, r1
 c004d98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c004d9a:	687b      	ldr	r3, [r7, #4]
 c004d9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004d9e:	f003 0308 	and.w	r3, r3, #8
 c004da2:	2b00      	cmp	r3, #0
 c004da4:	d00a      	beq.n	c004dbc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c004da6:	687b      	ldr	r3, [r7, #4]
 c004da8:	681b      	ldr	r3, [r3, #0]
 c004daa:	685b      	ldr	r3, [r3, #4]
 c004dac:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c004db0:	687b      	ldr	r3, [r7, #4]
 c004db2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c004db4:	687b      	ldr	r3, [r7, #4]
 c004db6:	681b      	ldr	r3, [r3, #0]
 c004db8:	430a      	orrs	r2, r1
 c004dba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c004dbc:	687b      	ldr	r3, [r7, #4]
 c004dbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004dc0:	f003 0310 	and.w	r3, r3, #16
 c004dc4:	2b00      	cmp	r3, #0
 c004dc6:	d00a      	beq.n	c004dde <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c004dc8:	687b      	ldr	r3, [r7, #4]
 c004dca:	681b      	ldr	r3, [r3, #0]
 c004dcc:	689b      	ldr	r3, [r3, #8]
 c004dce:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c004dd2:	687b      	ldr	r3, [r7, #4]
 c004dd4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c004dd6:	687b      	ldr	r3, [r7, #4]
 c004dd8:	681b      	ldr	r3, [r3, #0]
 c004dda:	430a      	orrs	r2, r1
 c004ddc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c004dde:	687b      	ldr	r3, [r7, #4]
 c004de0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004de2:	f003 0320 	and.w	r3, r3, #32
 c004de6:	2b00      	cmp	r3, #0
 c004de8:	d00a      	beq.n	c004e00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c004dea:	687b      	ldr	r3, [r7, #4]
 c004dec:	681b      	ldr	r3, [r3, #0]
 c004dee:	689b      	ldr	r3, [r3, #8]
 c004df0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c004df4:	687b      	ldr	r3, [r7, #4]
 c004df6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c004df8:	687b      	ldr	r3, [r7, #4]
 c004dfa:	681b      	ldr	r3, [r3, #0]
 c004dfc:	430a      	orrs	r2, r1
 c004dfe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c004e00:	687b      	ldr	r3, [r7, #4]
 c004e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004e04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004e08:	2b00      	cmp	r3, #0
 c004e0a:	d01a      	beq.n	c004e42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c004e0c:	687b      	ldr	r3, [r7, #4]
 c004e0e:	681b      	ldr	r3, [r3, #0]
 c004e10:	685b      	ldr	r3, [r3, #4]
 c004e12:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c004e16:	687b      	ldr	r3, [r7, #4]
 c004e18:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c004e1a:	687b      	ldr	r3, [r7, #4]
 c004e1c:	681b      	ldr	r3, [r3, #0]
 c004e1e:	430a      	orrs	r2, r1
 c004e20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c004e22:	687b      	ldr	r3, [r7, #4]
 c004e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c004e26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004e2a:	d10a      	bne.n	c004e42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c004e2c:	687b      	ldr	r3, [r7, #4]
 c004e2e:	681b      	ldr	r3, [r3, #0]
 c004e30:	685b      	ldr	r3, [r3, #4]
 c004e32:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c004e36:	687b      	ldr	r3, [r7, #4]
 c004e38:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c004e3a:	687b      	ldr	r3, [r7, #4]
 c004e3c:	681b      	ldr	r3, [r3, #0]
 c004e3e:	430a      	orrs	r2, r1
 c004e40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c004e42:	687b      	ldr	r3, [r7, #4]
 c004e44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004e46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004e4a:	2b00      	cmp	r3, #0
 c004e4c:	d00a      	beq.n	c004e64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c004e4e:	687b      	ldr	r3, [r7, #4]
 c004e50:	681b      	ldr	r3, [r3, #0]
 c004e52:	685b      	ldr	r3, [r3, #4]
 c004e54:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c004e58:	687b      	ldr	r3, [r7, #4]
 c004e5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c004e5c:	687b      	ldr	r3, [r7, #4]
 c004e5e:	681b      	ldr	r3, [r3, #0]
 c004e60:	430a      	orrs	r2, r1
 c004e62:	605a      	str	r2, [r3, #4]
  }
}
 c004e64:	bf00      	nop
 c004e66:	370c      	adds	r7, #12
 c004e68:	46bd      	mov	sp, r7
 c004e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e6e:	4770      	bx	lr

0c004e70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c004e70:	b580      	push	{r7, lr}
 c004e72:	b098      	sub	sp, #96	; 0x60
 c004e74:	af02      	add	r7, sp, #8
 c004e76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c004e78:	687b      	ldr	r3, [r7, #4]
 c004e7a:	2200      	movs	r2, #0
 c004e7c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c004e80:	f7fc fd6c 	bl	c00195c <HAL_GetTick>
 c004e84:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c004e86:	687b      	ldr	r3, [r7, #4]
 c004e88:	681b      	ldr	r3, [r3, #0]
 c004e8a:	681b      	ldr	r3, [r3, #0]
 c004e8c:	f003 0308 	and.w	r3, r3, #8
 c004e90:	2b08      	cmp	r3, #8
 c004e92:	d12f      	bne.n	c004ef4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c004e94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c004e98:	9300      	str	r3, [sp, #0]
 c004e9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c004e9c:	2200      	movs	r2, #0
 c004e9e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c004ea2:	6878      	ldr	r0, [r7, #4]
 c004ea4:	f000 f88e 	bl	c004fc4 <UART_WaitOnFlagUntilTimeout>
 c004ea8:	4603      	mov	r3, r0
 c004eaa:	2b00      	cmp	r3, #0
 c004eac:	d022      	beq.n	c004ef4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c004eae:	687b      	ldr	r3, [r7, #4]
 c004eb0:	681b      	ldr	r3, [r3, #0]
 c004eb2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c004eb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c004eb6:	e853 3f00 	ldrex	r3, [r3]
 c004eba:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c004ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c004ebe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c004ec2:	653b      	str	r3, [r7, #80]	; 0x50
 c004ec4:	687b      	ldr	r3, [r7, #4]
 c004ec6:	681b      	ldr	r3, [r3, #0]
 c004ec8:	461a      	mov	r2, r3
 c004eca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c004ecc:	647b      	str	r3, [r7, #68]	; 0x44
 c004ece:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c004ed0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c004ed2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c004ed4:	e841 2300 	strex	r3, r2, [r1]
 c004ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c004eda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c004edc:	2b00      	cmp	r3, #0
 c004ede:	d1e6      	bne.n	c004eae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c004ee0:	687b      	ldr	r3, [r7, #4]
 c004ee2:	2220      	movs	r2, #32
 c004ee4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c004ee8:	687b      	ldr	r3, [r7, #4]
 c004eea:	2200      	movs	r2, #0
 c004eec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c004ef0:	2303      	movs	r3, #3
 c004ef2:	e063      	b.n	c004fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c004ef4:	687b      	ldr	r3, [r7, #4]
 c004ef6:	681b      	ldr	r3, [r3, #0]
 c004ef8:	681b      	ldr	r3, [r3, #0]
 c004efa:	f003 0304 	and.w	r3, r3, #4
 c004efe:	2b04      	cmp	r3, #4
 c004f00:	d149      	bne.n	c004f96 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c004f02:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c004f06:	9300      	str	r3, [sp, #0]
 c004f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c004f0a:	2200      	movs	r2, #0
 c004f0c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c004f10:	6878      	ldr	r0, [r7, #4]
 c004f12:	f000 f857 	bl	c004fc4 <UART_WaitOnFlagUntilTimeout>
 c004f16:	4603      	mov	r3, r0
 c004f18:	2b00      	cmp	r3, #0
 c004f1a:	d03c      	beq.n	c004f96 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c004f1c:	687b      	ldr	r3, [r7, #4]
 c004f1e:	681b      	ldr	r3, [r3, #0]
 c004f20:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c004f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004f24:	e853 3f00 	ldrex	r3, [r3]
 c004f28:	623b      	str	r3, [r7, #32]
   return(result);
 c004f2a:	6a3b      	ldr	r3, [r7, #32]
 c004f2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c004f30:	64fb      	str	r3, [r7, #76]	; 0x4c
 c004f32:	687b      	ldr	r3, [r7, #4]
 c004f34:	681b      	ldr	r3, [r3, #0]
 c004f36:	461a      	mov	r2, r3
 c004f38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c004f3a:	633b      	str	r3, [r7, #48]	; 0x30
 c004f3c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c004f3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004f40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c004f42:	e841 2300 	strex	r3, r2, [r1]
 c004f46:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c004f48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c004f4a:	2b00      	cmp	r3, #0
 c004f4c:	d1e6      	bne.n	c004f1c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c004f4e:	687b      	ldr	r3, [r7, #4]
 c004f50:	681b      	ldr	r3, [r3, #0]
 c004f52:	3308      	adds	r3, #8
 c004f54:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c004f56:	693b      	ldr	r3, [r7, #16]
 c004f58:	e853 3f00 	ldrex	r3, [r3]
 c004f5c:	60fb      	str	r3, [r7, #12]
   return(result);
 c004f5e:	68fb      	ldr	r3, [r7, #12]
 c004f60:	f023 0301 	bic.w	r3, r3, #1
 c004f64:	64bb      	str	r3, [r7, #72]	; 0x48
 c004f66:	687b      	ldr	r3, [r7, #4]
 c004f68:	681b      	ldr	r3, [r3, #0]
 c004f6a:	3308      	adds	r3, #8
 c004f6c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c004f6e:	61fa      	str	r2, [r7, #28]
 c004f70:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c004f72:	69b9      	ldr	r1, [r7, #24]
 c004f74:	69fa      	ldr	r2, [r7, #28]
 c004f76:	e841 2300 	strex	r3, r2, [r1]
 c004f7a:	617b      	str	r3, [r7, #20]
   return(result);
 c004f7c:	697b      	ldr	r3, [r7, #20]
 c004f7e:	2b00      	cmp	r3, #0
 c004f80:	d1e5      	bne.n	c004f4e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c004f82:	687b      	ldr	r3, [r7, #4]
 c004f84:	2220      	movs	r2, #32
 c004f86:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c004f8a:	687b      	ldr	r3, [r7, #4]
 c004f8c:	2200      	movs	r2, #0
 c004f8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c004f92:	2303      	movs	r3, #3
 c004f94:	e012      	b.n	c004fbc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c004f96:	687b      	ldr	r3, [r7, #4]
 c004f98:	2220      	movs	r2, #32
 c004f9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c004f9e:	687b      	ldr	r3, [r7, #4]
 c004fa0:	2220      	movs	r2, #32
 c004fa2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c004fa6:	687b      	ldr	r3, [r7, #4]
 c004fa8:	2200      	movs	r2, #0
 c004faa:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c004fac:	687b      	ldr	r3, [r7, #4]
 c004fae:	2200      	movs	r2, #0
 c004fb0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c004fb2:	687b      	ldr	r3, [r7, #4]
 c004fb4:	2200      	movs	r2, #0
 c004fb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c004fba:	2300      	movs	r3, #0
}
 c004fbc:	4618      	mov	r0, r3
 c004fbe:	3758      	adds	r7, #88	; 0x58
 c004fc0:	46bd      	mov	sp, r7
 c004fc2:	bd80      	pop	{r7, pc}

0c004fc4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c004fc4:	b580      	push	{r7, lr}
 c004fc6:	b084      	sub	sp, #16
 c004fc8:	af00      	add	r7, sp, #0
 c004fca:	60f8      	str	r0, [r7, #12]
 c004fcc:	60b9      	str	r1, [r7, #8]
 c004fce:	603b      	str	r3, [r7, #0]
 c004fd0:	4613      	mov	r3, r2
 c004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c004fd4:	e049      	b.n	c00506a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c004fd6:	69bb      	ldr	r3, [r7, #24]
 c004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 c004fdc:	d045      	beq.n	c00506a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c004fde:	f7fc fcbd 	bl	c00195c <HAL_GetTick>
 c004fe2:	4602      	mov	r2, r0
 c004fe4:	683b      	ldr	r3, [r7, #0]
 c004fe6:	1ad3      	subs	r3, r2, r3
 c004fe8:	69ba      	ldr	r2, [r7, #24]
 c004fea:	429a      	cmp	r2, r3
 c004fec:	d302      	bcc.n	c004ff4 <UART_WaitOnFlagUntilTimeout+0x30>
 c004fee:	69bb      	ldr	r3, [r7, #24]
 c004ff0:	2b00      	cmp	r3, #0
 c004ff2:	d101      	bne.n	c004ff8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c004ff4:	2303      	movs	r3, #3
 c004ff6:	e048      	b.n	c00508a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c004ff8:	68fb      	ldr	r3, [r7, #12]
 c004ffa:	681b      	ldr	r3, [r3, #0]
 c004ffc:	681b      	ldr	r3, [r3, #0]
 c004ffe:	f003 0304 	and.w	r3, r3, #4
 c005002:	2b00      	cmp	r3, #0
 c005004:	d031      	beq.n	c00506a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c005006:	68fb      	ldr	r3, [r7, #12]
 c005008:	681b      	ldr	r3, [r3, #0]
 c00500a:	69db      	ldr	r3, [r3, #28]
 c00500c:	f003 0308 	and.w	r3, r3, #8
 c005010:	2b08      	cmp	r3, #8
 c005012:	d110      	bne.n	c005036 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c005014:	68fb      	ldr	r3, [r7, #12]
 c005016:	681b      	ldr	r3, [r3, #0]
 c005018:	2208      	movs	r2, #8
 c00501a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c00501c:	68f8      	ldr	r0, [r7, #12]
 c00501e:	f000 f838 	bl	c005092 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c005022:	68fb      	ldr	r3, [r7, #12]
 c005024:	2208      	movs	r2, #8
 c005026:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c00502a:	68fb      	ldr	r3, [r7, #12]
 c00502c:	2200      	movs	r2, #0
 c00502e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c005032:	2301      	movs	r3, #1
 c005034:	e029      	b.n	c00508a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c005036:	68fb      	ldr	r3, [r7, #12]
 c005038:	681b      	ldr	r3, [r3, #0]
 c00503a:	69db      	ldr	r3, [r3, #28]
 c00503c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005040:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005044:	d111      	bne.n	c00506a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c005046:	68fb      	ldr	r3, [r7, #12]
 c005048:	681b      	ldr	r3, [r3, #0]
 c00504a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c00504e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c005050:	68f8      	ldr	r0, [r7, #12]
 c005052:	f000 f81e 	bl	c005092 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c005056:	68fb      	ldr	r3, [r7, #12]
 c005058:	2220      	movs	r2, #32
 c00505a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c00505e:	68fb      	ldr	r3, [r7, #12]
 c005060:	2200      	movs	r2, #0
 c005062:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c005066:	2303      	movs	r3, #3
 c005068:	e00f      	b.n	c00508a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00506a:	68fb      	ldr	r3, [r7, #12]
 c00506c:	681b      	ldr	r3, [r3, #0]
 c00506e:	69da      	ldr	r2, [r3, #28]
 c005070:	68bb      	ldr	r3, [r7, #8]
 c005072:	4013      	ands	r3, r2
 c005074:	68ba      	ldr	r2, [r7, #8]
 c005076:	429a      	cmp	r2, r3
 c005078:	bf0c      	ite	eq
 c00507a:	2301      	moveq	r3, #1
 c00507c:	2300      	movne	r3, #0
 c00507e:	b2db      	uxtb	r3, r3
 c005080:	461a      	mov	r2, r3
 c005082:	79fb      	ldrb	r3, [r7, #7]
 c005084:	429a      	cmp	r2, r3
 c005086:	d0a6      	beq.n	c004fd6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c005088:	2300      	movs	r3, #0
}
 c00508a:	4618      	mov	r0, r3
 c00508c:	3710      	adds	r7, #16
 c00508e:	46bd      	mov	sp, r7
 c005090:	bd80      	pop	{r7, pc}

0c005092 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c005092:	b480      	push	{r7}
 c005094:	b095      	sub	sp, #84	; 0x54
 c005096:	af00      	add	r7, sp, #0
 c005098:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00509a:	687b      	ldr	r3, [r7, #4]
 c00509c:	681b      	ldr	r3, [r3, #0]
 c00509e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0050a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0050a2:	e853 3f00 	ldrex	r3, [r3]
 c0050a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c0050a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0050aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c0050ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 c0050b0:	687b      	ldr	r3, [r7, #4]
 c0050b2:	681b      	ldr	r3, [r3, #0]
 c0050b4:	461a      	mov	r2, r3
 c0050b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0050b8:	643b      	str	r3, [r7, #64]	; 0x40
 c0050ba:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0050bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c0050be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c0050c0:	e841 2300 	strex	r3, r2, [r1]
 c0050c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c0050c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0050c8:	2b00      	cmp	r3, #0
 c0050ca:	d1e6      	bne.n	c00509a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c0050cc:	687b      	ldr	r3, [r7, #4]
 c0050ce:	681b      	ldr	r3, [r3, #0]
 c0050d0:	3308      	adds	r3, #8
 c0050d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0050d4:	6a3b      	ldr	r3, [r7, #32]
 c0050d6:	e853 3f00 	ldrex	r3, [r3]
 c0050da:	61fb      	str	r3, [r7, #28]
   return(result);
 c0050dc:	69fb      	ldr	r3, [r7, #28]
 c0050de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0050e2:	f023 0301 	bic.w	r3, r3, #1
 c0050e6:	64bb      	str	r3, [r7, #72]	; 0x48
 c0050e8:	687b      	ldr	r3, [r7, #4]
 c0050ea:	681b      	ldr	r3, [r3, #0]
 c0050ec:	3308      	adds	r3, #8
 c0050ee:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0050f0:	62fa      	str	r2, [r7, #44]	; 0x2c
 c0050f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0050f4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c0050f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c0050f8:	e841 2300 	strex	r3, r2, [r1]
 c0050fc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c0050fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005100:	2b00      	cmp	r3, #0
 c005102:	d1e3      	bne.n	c0050cc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c005104:	687b      	ldr	r3, [r7, #4]
 c005106:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c005108:	2b01      	cmp	r3, #1
 c00510a:	d118      	bne.n	c00513e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c00510c:	687b      	ldr	r3, [r7, #4]
 c00510e:	681b      	ldr	r3, [r3, #0]
 c005110:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005112:	68fb      	ldr	r3, [r7, #12]
 c005114:	e853 3f00 	ldrex	r3, [r3]
 c005118:	60bb      	str	r3, [r7, #8]
   return(result);
 c00511a:	68bb      	ldr	r3, [r7, #8]
 c00511c:	f023 0310 	bic.w	r3, r3, #16
 c005120:	647b      	str	r3, [r7, #68]	; 0x44
 c005122:	687b      	ldr	r3, [r7, #4]
 c005124:	681b      	ldr	r3, [r3, #0]
 c005126:	461a      	mov	r2, r3
 c005128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c00512a:	61bb      	str	r3, [r7, #24]
 c00512c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00512e:	6979      	ldr	r1, [r7, #20]
 c005130:	69ba      	ldr	r2, [r7, #24]
 c005132:	e841 2300 	strex	r3, r2, [r1]
 c005136:	613b      	str	r3, [r7, #16]
   return(result);
 c005138:	693b      	ldr	r3, [r7, #16]
 c00513a:	2b00      	cmp	r3, #0
 c00513c:	d1e6      	bne.n	c00510c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c00513e:	687b      	ldr	r3, [r7, #4]
 c005140:	2220      	movs	r2, #32
 c005142:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c005146:	687b      	ldr	r3, [r7, #4]
 c005148:	2200      	movs	r2, #0
 c00514a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c00514c:	687b      	ldr	r3, [r7, #4]
 c00514e:	2200      	movs	r2, #0
 c005150:	675a      	str	r2, [r3, #116]	; 0x74
}
 c005152:	bf00      	nop
 c005154:	3754      	adds	r7, #84	; 0x54
 c005156:	46bd      	mov	sp, r7
 c005158:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00515c:	4770      	bx	lr

0c00515e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c00515e:	b480      	push	{r7}
 c005160:	b085      	sub	sp, #20
 c005162:	af00      	add	r7, sp, #0
 c005164:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c005166:	687b      	ldr	r3, [r7, #4]
 c005168:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00516c:	2b01      	cmp	r3, #1
 c00516e:	d101      	bne.n	c005174 <HAL_UARTEx_DisableFifoMode+0x16>
 c005170:	2302      	movs	r3, #2
 c005172:	e027      	b.n	c0051c4 <HAL_UARTEx_DisableFifoMode+0x66>
 c005174:	687b      	ldr	r3, [r7, #4]
 c005176:	2201      	movs	r2, #1
 c005178:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00517c:	687b      	ldr	r3, [r7, #4]
 c00517e:	2224      	movs	r2, #36	; 0x24
 c005180:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005184:	687b      	ldr	r3, [r7, #4]
 c005186:	681b      	ldr	r3, [r3, #0]
 c005188:	681b      	ldr	r3, [r3, #0]
 c00518a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00518c:	687b      	ldr	r3, [r7, #4]
 c00518e:	681b      	ldr	r3, [r3, #0]
 c005190:	681a      	ldr	r2, [r3, #0]
 c005192:	687b      	ldr	r3, [r7, #4]
 c005194:	681b      	ldr	r3, [r3, #0]
 c005196:	f022 0201 	bic.w	r2, r2, #1
 c00519a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c00519c:	68fb      	ldr	r3, [r7, #12]
 c00519e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c0051a2:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c0051a4:	687b      	ldr	r3, [r7, #4]
 c0051a6:	2200      	movs	r2, #0
 c0051a8:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0051aa:	687b      	ldr	r3, [r7, #4]
 c0051ac:	681b      	ldr	r3, [r3, #0]
 c0051ae:	68fa      	ldr	r2, [r7, #12]
 c0051b0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0051b2:	687b      	ldr	r3, [r7, #4]
 c0051b4:	2220      	movs	r2, #32
 c0051b6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0051ba:	687b      	ldr	r3, [r7, #4]
 c0051bc:	2200      	movs	r2, #0
 c0051be:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c0051c2:	2300      	movs	r3, #0
}
 c0051c4:	4618      	mov	r0, r3
 c0051c6:	3714      	adds	r7, #20
 c0051c8:	46bd      	mov	sp, r7
 c0051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0051ce:	4770      	bx	lr

0c0051d0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0051d0:	b580      	push	{r7, lr}
 c0051d2:	b084      	sub	sp, #16
 c0051d4:	af00      	add	r7, sp, #0
 c0051d6:	6078      	str	r0, [r7, #4]
 c0051d8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0051da:	687b      	ldr	r3, [r7, #4]
 c0051dc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0051e0:	2b01      	cmp	r3, #1
 c0051e2:	d101      	bne.n	c0051e8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c0051e4:	2302      	movs	r3, #2
 c0051e6:	e02d      	b.n	c005244 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c0051e8:	687b      	ldr	r3, [r7, #4]
 c0051ea:	2201      	movs	r2, #1
 c0051ec:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0051f0:	687b      	ldr	r3, [r7, #4]
 c0051f2:	2224      	movs	r2, #36	; 0x24
 c0051f4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0051f8:	687b      	ldr	r3, [r7, #4]
 c0051fa:	681b      	ldr	r3, [r3, #0]
 c0051fc:	681b      	ldr	r3, [r3, #0]
 c0051fe:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005200:	687b      	ldr	r3, [r7, #4]
 c005202:	681b      	ldr	r3, [r3, #0]
 c005204:	681a      	ldr	r2, [r3, #0]
 c005206:	687b      	ldr	r3, [r7, #4]
 c005208:	681b      	ldr	r3, [r3, #0]
 c00520a:	f022 0201 	bic.w	r2, r2, #1
 c00520e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c005210:	687b      	ldr	r3, [r7, #4]
 c005212:	681b      	ldr	r3, [r3, #0]
 c005214:	689b      	ldr	r3, [r3, #8]
 c005216:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c00521a:	687b      	ldr	r3, [r7, #4]
 c00521c:	681b      	ldr	r3, [r3, #0]
 c00521e:	683a      	ldr	r2, [r7, #0]
 c005220:	430a      	orrs	r2, r1
 c005222:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c005224:	6878      	ldr	r0, [r7, #4]
 c005226:	f000 f84f 	bl	c0052c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00522a:	687b      	ldr	r3, [r7, #4]
 c00522c:	681b      	ldr	r3, [r3, #0]
 c00522e:	68fa      	ldr	r2, [r7, #12]
 c005230:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005232:	687b      	ldr	r3, [r7, #4]
 c005234:	2220      	movs	r2, #32
 c005236:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00523a:	687b      	ldr	r3, [r7, #4]
 c00523c:	2200      	movs	r2, #0
 c00523e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c005242:	2300      	movs	r3, #0
}
 c005244:	4618      	mov	r0, r3
 c005246:	3710      	adds	r7, #16
 c005248:	46bd      	mov	sp, r7
 c00524a:	bd80      	pop	{r7, pc}

0c00524c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00524c:	b580      	push	{r7, lr}
 c00524e:	b084      	sub	sp, #16
 c005250:	af00      	add	r7, sp, #0
 c005252:	6078      	str	r0, [r7, #4]
 c005254:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c005256:	687b      	ldr	r3, [r7, #4]
 c005258:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00525c:	2b01      	cmp	r3, #1
 c00525e:	d101      	bne.n	c005264 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c005260:	2302      	movs	r3, #2
 c005262:	e02d      	b.n	c0052c0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c005264:	687b      	ldr	r3, [r7, #4]
 c005266:	2201      	movs	r2, #1
 c005268:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00526c:	687b      	ldr	r3, [r7, #4]
 c00526e:	2224      	movs	r2, #36	; 0x24
 c005270:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005274:	687b      	ldr	r3, [r7, #4]
 c005276:	681b      	ldr	r3, [r3, #0]
 c005278:	681b      	ldr	r3, [r3, #0]
 c00527a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00527c:	687b      	ldr	r3, [r7, #4]
 c00527e:	681b      	ldr	r3, [r3, #0]
 c005280:	681a      	ldr	r2, [r3, #0]
 c005282:	687b      	ldr	r3, [r7, #4]
 c005284:	681b      	ldr	r3, [r3, #0]
 c005286:	f022 0201 	bic.w	r2, r2, #1
 c00528a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c00528c:	687b      	ldr	r3, [r7, #4]
 c00528e:	681b      	ldr	r3, [r3, #0]
 c005290:	689b      	ldr	r3, [r3, #8]
 c005292:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c005296:	687b      	ldr	r3, [r7, #4]
 c005298:	681b      	ldr	r3, [r3, #0]
 c00529a:	683a      	ldr	r2, [r7, #0]
 c00529c:	430a      	orrs	r2, r1
 c00529e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0052a0:	6878      	ldr	r0, [r7, #4]
 c0052a2:	f000 f811 	bl	c0052c8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0052a6:	687b      	ldr	r3, [r7, #4]
 c0052a8:	681b      	ldr	r3, [r3, #0]
 c0052aa:	68fa      	ldr	r2, [r7, #12]
 c0052ac:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0052ae:	687b      	ldr	r3, [r7, #4]
 c0052b0:	2220      	movs	r2, #32
 c0052b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0052b6:	687b      	ldr	r3, [r7, #4]
 c0052b8:	2200      	movs	r2, #0
 c0052ba:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c0052be:	2300      	movs	r3, #0
}
 c0052c0:	4618      	mov	r0, r3
 c0052c2:	3710      	adds	r7, #16
 c0052c4:	46bd      	mov	sp, r7
 c0052c6:	bd80      	pop	{r7, pc}

0c0052c8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c0052c8:	b480      	push	{r7}
 c0052ca:	b085      	sub	sp, #20
 c0052cc:	af00      	add	r7, sp, #0
 c0052ce:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0052d0:	687b      	ldr	r3, [r7, #4]
 c0052d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0052d4:	2b00      	cmp	r3, #0
 c0052d6:	d108      	bne.n	c0052ea <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c0052d8:	687b      	ldr	r3, [r7, #4]
 c0052da:	2201      	movs	r2, #1
 c0052dc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c0052e0:	687b      	ldr	r3, [r7, #4]
 c0052e2:	2201      	movs	r2, #1
 c0052e4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c0052e8:	e031      	b.n	c00534e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c0052ea:	2308      	movs	r3, #8
 c0052ec:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0052ee:	2308      	movs	r3, #8
 c0052f0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0052f2:	687b      	ldr	r3, [r7, #4]
 c0052f4:	681b      	ldr	r3, [r3, #0]
 c0052f6:	689b      	ldr	r3, [r3, #8]
 c0052f8:	0e5b      	lsrs	r3, r3, #25
 c0052fa:	b2db      	uxtb	r3, r3
 c0052fc:	f003 0307 	and.w	r3, r3, #7
 c005300:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c005302:	687b      	ldr	r3, [r7, #4]
 c005304:	681b      	ldr	r3, [r3, #0]
 c005306:	689b      	ldr	r3, [r3, #8]
 c005308:	0f5b      	lsrs	r3, r3, #29
 c00530a:	b2db      	uxtb	r3, r3
 c00530c:	f003 0307 	and.w	r3, r3, #7
 c005310:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c005312:	7bbb      	ldrb	r3, [r7, #14]
 c005314:	7b3a      	ldrb	r2, [r7, #12]
 c005316:	4911      	ldr	r1, [pc, #68]	; (c00535c <UARTEx_SetNbDataToProcess+0x94>)
 c005318:	5c8a      	ldrb	r2, [r1, r2]
 c00531a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c00531e:	7b3a      	ldrb	r2, [r7, #12]
 c005320:	490f      	ldr	r1, [pc, #60]	; (c005360 <UARTEx_SetNbDataToProcess+0x98>)
 c005322:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c005324:	fb93 f3f2 	sdiv	r3, r3, r2
 c005328:	b29a      	uxth	r2, r3
 c00532a:	687b      	ldr	r3, [r7, #4]
 c00532c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c005330:	7bfb      	ldrb	r3, [r7, #15]
 c005332:	7b7a      	ldrb	r2, [r7, #13]
 c005334:	4909      	ldr	r1, [pc, #36]	; (c00535c <UARTEx_SetNbDataToProcess+0x94>)
 c005336:	5c8a      	ldrb	r2, [r1, r2]
 c005338:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c00533c:	7b7a      	ldrb	r2, [r7, #13]
 c00533e:	4908      	ldr	r1, [pc, #32]	; (c005360 <UARTEx_SetNbDataToProcess+0x98>)
 c005340:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c005342:	fb93 f3f2 	sdiv	r3, r3, r2
 c005346:	b29a      	uxth	r2, r3
 c005348:	687b      	ldr	r3, [r7, #4]
 c00534a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c00534e:	bf00      	nop
 c005350:	3714      	adds	r7, #20
 c005352:	46bd      	mov	sp, r7
 c005354:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005358:	4770      	bx	lr
 c00535a:	bf00      	nop
 c00535c:	0c00651c 	.word	0x0c00651c
 c005360:	0c006524 	.word	0x0c006524

0c005364 <__errno>:
 c005364:	4b01      	ldr	r3, [pc, #4]	; (c00536c <__errno+0x8>)
 c005366:	6818      	ldr	r0, [r3, #0]
 c005368:	4770      	bx	lr
 c00536a:	bf00      	nop
 c00536c:	3000000c 	.word	0x3000000c

0c005370 <__libc_init_array>:
 c005370:	b570      	push	{r4, r5, r6, lr}
 c005372:	4d0d      	ldr	r5, [pc, #52]	; (c0053a8 <__libc_init_array+0x38>)
 c005374:	2600      	movs	r6, #0
 c005376:	4c0d      	ldr	r4, [pc, #52]	; (c0053ac <__libc_init_array+0x3c>)
 c005378:	1b64      	subs	r4, r4, r5
 c00537a:	10a4      	asrs	r4, r4, #2
 c00537c:	42a6      	cmp	r6, r4
 c00537e:	d109      	bne.n	c005394 <__libc_init_array+0x24>
 c005380:	4d0b      	ldr	r5, [pc, #44]	; (c0053b0 <__libc_init_array+0x40>)
 c005382:	2600      	movs	r6, #0
 c005384:	4c0b      	ldr	r4, [pc, #44]	; (c0053b4 <__libc_init_array+0x44>)
 c005386:	f000 ffbb 	bl	c006300 <_init>
 c00538a:	1b64      	subs	r4, r4, r5
 c00538c:	10a4      	asrs	r4, r4, #2
 c00538e:	42a6      	cmp	r6, r4
 c005390:	d105      	bne.n	c00539e <__libc_init_array+0x2e>
 c005392:	bd70      	pop	{r4, r5, r6, pc}
 c005394:	f855 3b04 	ldr.w	r3, [r5], #4
 c005398:	3601      	adds	r6, #1
 c00539a:	4798      	blx	r3
 c00539c:	e7ee      	b.n	c00537c <__libc_init_array+0xc>
 c00539e:	f855 3b04 	ldr.w	r3, [r5], #4
 c0053a2:	3601      	adds	r6, #1
 c0053a4:	4798      	blx	r3
 c0053a6:	e7f2      	b.n	c00538e <__libc_init_array+0x1e>
 c0053a8:	0c0065cc 	.word	0x0c0065cc
 c0053ac:	0c0065cc 	.word	0x0c0065cc
 c0053b0:	0c0065cc 	.word	0x0c0065cc
 c0053b4:	0c0065d0 	.word	0x0c0065d0

0c0053b8 <memset>:
 c0053b8:	4402      	add	r2, r0
 c0053ba:	4603      	mov	r3, r0
 c0053bc:	4293      	cmp	r3, r2
 c0053be:	d100      	bne.n	c0053c2 <memset+0xa>
 c0053c0:	4770      	bx	lr
 c0053c2:	f803 1b01 	strb.w	r1, [r3], #1
 c0053c6:	e7f9      	b.n	c0053bc <memset+0x4>

0c0053c8 <iprintf>:
 c0053c8:	b40f      	push	{r0, r1, r2, r3}
 c0053ca:	4b0a      	ldr	r3, [pc, #40]	; (c0053f4 <iprintf+0x2c>)
 c0053cc:	b513      	push	{r0, r1, r4, lr}
 c0053ce:	681c      	ldr	r4, [r3, #0]
 c0053d0:	b124      	cbz	r4, c0053dc <iprintf+0x14>
 c0053d2:	69a3      	ldr	r3, [r4, #24]
 c0053d4:	b913      	cbnz	r3, c0053dc <iprintf+0x14>
 c0053d6:	4620      	mov	r0, r4
 c0053d8:	f000 f866 	bl	c0054a8 <__sinit>
 c0053dc:	ab05      	add	r3, sp, #20
 c0053de:	9a04      	ldr	r2, [sp, #16]
 c0053e0:	68a1      	ldr	r1, [r4, #8]
 c0053e2:	4620      	mov	r0, r4
 c0053e4:	9301      	str	r3, [sp, #4]
 c0053e6:	f000 f9bd 	bl	c005764 <_vfiprintf_r>
 c0053ea:	b002      	add	sp, #8
 c0053ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0053f0:	b004      	add	sp, #16
 c0053f2:	4770      	bx	lr
 c0053f4:	3000000c 	.word	0x3000000c

0c0053f8 <std>:
 c0053f8:	2300      	movs	r3, #0
 c0053fa:	b510      	push	{r4, lr}
 c0053fc:	4604      	mov	r4, r0
 c0053fe:	6083      	str	r3, [r0, #8]
 c005400:	8181      	strh	r1, [r0, #12]
 c005402:	4619      	mov	r1, r3
 c005404:	6643      	str	r3, [r0, #100]	; 0x64
 c005406:	81c2      	strh	r2, [r0, #14]
 c005408:	2208      	movs	r2, #8
 c00540a:	6183      	str	r3, [r0, #24]
 c00540c:	e9c0 3300 	strd	r3, r3, [r0]
 c005410:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c005414:	305c      	adds	r0, #92	; 0x5c
 c005416:	f7ff ffcf 	bl	c0053b8 <memset>
 c00541a:	4b05      	ldr	r3, [pc, #20]	; (c005430 <std+0x38>)
 c00541c:	6224      	str	r4, [r4, #32]
 c00541e:	6263      	str	r3, [r4, #36]	; 0x24
 c005420:	4b04      	ldr	r3, [pc, #16]	; (c005434 <std+0x3c>)
 c005422:	62a3      	str	r3, [r4, #40]	; 0x28
 c005424:	4b04      	ldr	r3, [pc, #16]	; (c005438 <std+0x40>)
 c005426:	62e3      	str	r3, [r4, #44]	; 0x2c
 c005428:	4b04      	ldr	r3, [pc, #16]	; (c00543c <std+0x44>)
 c00542a:	6323      	str	r3, [r4, #48]	; 0x30
 c00542c:	bd10      	pop	{r4, pc}
 c00542e:	bf00      	nop
 c005430:	0c005d11 	.word	0x0c005d11
 c005434:	0c005d33 	.word	0x0c005d33
 c005438:	0c005d6b 	.word	0x0c005d6b
 c00543c:	0c005d8f 	.word	0x0c005d8f

0c005440 <_cleanup_r>:
 c005440:	4901      	ldr	r1, [pc, #4]	; (c005448 <_cleanup_r+0x8>)
 c005442:	f000 b8af 	b.w	c0055a4 <_fwalk_reent>
 c005446:	bf00      	nop
 c005448:	0c006065 	.word	0x0c006065

0c00544c <__sfmoreglue>:
 c00544c:	b570      	push	{r4, r5, r6, lr}
 c00544e:	2268      	movs	r2, #104	; 0x68
 c005450:	1e4d      	subs	r5, r1, #1
 c005452:	460e      	mov	r6, r1
 c005454:	4355      	muls	r5, r2
 c005456:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c00545a:	f000 f8e5 	bl	c005628 <_malloc_r>
 c00545e:	4604      	mov	r4, r0
 c005460:	b140      	cbz	r0, c005474 <__sfmoreglue+0x28>
 c005462:	2100      	movs	r1, #0
 c005464:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c005468:	e9c0 1600 	strd	r1, r6, [r0]
 c00546c:	300c      	adds	r0, #12
 c00546e:	60a0      	str	r0, [r4, #8]
 c005470:	f7ff ffa2 	bl	c0053b8 <memset>
 c005474:	4620      	mov	r0, r4
 c005476:	bd70      	pop	{r4, r5, r6, pc}

0c005478 <__sfp_lock_acquire>:
 c005478:	4801      	ldr	r0, [pc, #4]	; (c005480 <__sfp_lock_acquire+0x8>)
 c00547a:	f000 b8b3 	b.w	c0055e4 <__retarget_lock_acquire_recursive>
 c00547e:	bf00      	nop
 c005480:	30000609 	.word	0x30000609

0c005484 <__sfp_lock_release>:
 c005484:	4801      	ldr	r0, [pc, #4]	; (c00548c <__sfp_lock_release+0x8>)
 c005486:	f000 b8ae 	b.w	c0055e6 <__retarget_lock_release_recursive>
 c00548a:	bf00      	nop
 c00548c:	30000609 	.word	0x30000609

0c005490 <__sinit_lock_acquire>:
 c005490:	4801      	ldr	r0, [pc, #4]	; (c005498 <__sinit_lock_acquire+0x8>)
 c005492:	f000 b8a7 	b.w	c0055e4 <__retarget_lock_acquire_recursive>
 c005496:	bf00      	nop
 c005498:	3000060a 	.word	0x3000060a

0c00549c <__sinit_lock_release>:
 c00549c:	4801      	ldr	r0, [pc, #4]	; (c0054a4 <__sinit_lock_release+0x8>)
 c00549e:	f000 b8a2 	b.w	c0055e6 <__retarget_lock_release_recursive>
 c0054a2:	bf00      	nop
 c0054a4:	3000060a 	.word	0x3000060a

0c0054a8 <__sinit>:
 c0054a8:	b510      	push	{r4, lr}
 c0054aa:	4604      	mov	r4, r0
 c0054ac:	f7ff fff0 	bl	c005490 <__sinit_lock_acquire>
 c0054b0:	69a3      	ldr	r3, [r4, #24]
 c0054b2:	b11b      	cbz	r3, c0054bc <__sinit+0x14>
 c0054b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0054b8:	f7ff bff0 	b.w	c00549c <__sinit_lock_release>
 c0054bc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c0054c0:	6523      	str	r3, [r4, #80]	; 0x50
 c0054c2:	4620      	mov	r0, r4
 c0054c4:	4b12      	ldr	r3, [pc, #72]	; (c005510 <__sinit+0x68>)
 c0054c6:	4a13      	ldr	r2, [pc, #76]	; (c005514 <__sinit+0x6c>)
 c0054c8:	681b      	ldr	r3, [r3, #0]
 c0054ca:	62a2      	str	r2, [r4, #40]	; 0x28
 c0054cc:	42a3      	cmp	r3, r4
 c0054ce:	bf04      	itt	eq
 c0054d0:	2301      	moveq	r3, #1
 c0054d2:	61a3      	streq	r3, [r4, #24]
 c0054d4:	f000 f820 	bl	c005518 <__sfp>
 c0054d8:	6060      	str	r0, [r4, #4]
 c0054da:	4620      	mov	r0, r4
 c0054dc:	f000 f81c 	bl	c005518 <__sfp>
 c0054e0:	60a0      	str	r0, [r4, #8]
 c0054e2:	4620      	mov	r0, r4
 c0054e4:	f000 f818 	bl	c005518 <__sfp>
 c0054e8:	2200      	movs	r2, #0
 c0054ea:	2104      	movs	r1, #4
 c0054ec:	60e0      	str	r0, [r4, #12]
 c0054ee:	6860      	ldr	r0, [r4, #4]
 c0054f0:	f7ff ff82 	bl	c0053f8 <std>
 c0054f4:	2201      	movs	r2, #1
 c0054f6:	2109      	movs	r1, #9
 c0054f8:	68a0      	ldr	r0, [r4, #8]
 c0054fa:	f7ff ff7d 	bl	c0053f8 <std>
 c0054fe:	2202      	movs	r2, #2
 c005500:	2112      	movs	r1, #18
 c005502:	68e0      	ldr	r0, [r4, #12]
 c005504:	f7ff ff78 	bl	c0053f8 <std>
 c005508:	2301      	movs	r3, #1
 c00550a:	61a3      	str	r3, [r4, #24]
 c00550c:	e7d2      	b.n	c0054b4 <__sinit+0xc>
 c00550e:	bf00      	nop
 c005510:	0c00652c 	.word	0x0c00652c
 c005514:	0c005441 	.word	0x0c005441

0c005518 <__sfp>:
 c005518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00551a:	4607      	mov	r7, r0
 c00551c:	f7ff ffac 	bl	c005478 <__sfp_lock_acquire>
 c005520:	4b1e      	ldr	r3, [pc, #120]	; (c00559c <__sfp+0x84>)
 c005522:	681e      	ldr	r6, [r3, #0]
 c005524:	69b3      	ldr	r3, [r6, #24]
 c005526:	b913      	cbnz	r3, c00552e <__sfp+0x16>
 c005528:	4630      	mov	r0, r6
 c00552a:	f7ff ffbd 	bl	c0054a8 <__sinit>
 c00552e:	3648      	adds	r6, #72	; 0x48
 c005530:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c005534:	3b01      	subs	r3, #1
 c005536:	d503      	bpl.n	c005540 <__sfp+0x28>
 c005538:	6833      	ldr	r3, [r6, #0]
 c00553a:	b30b      	cbz	r3, c005580 <__sfp+0x68>
 c00553c:	6836      	ldr	r6, [r6, #0]
 c00553e:	e7f7      	b.n	c005530 <__sfp+0x18>
 c005540:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c005544:	b9d5      	cbnz	r5, c00557c <__sfp+0x64>
 c005546:	4b16      	ldr	r3, [pc, #88]	; (c0055a0 <__sfp+0x88>)
 c005548:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c00554c:	6665      	str	r5, [r4, #100]	; 0x64
 c00554e:	60e3      	str	r3, [r4, #12]
 c005550:	f000 f847 	bl	c0055e2 <__retarget_lock_init_recursive>
 c005554:	f7ff ff96 	bl	c005484 <__sfp_lock_release>
 c005558:	2208      	movs	r2, #8
 c00555a:	4629      	mov	r1, r5
 c00555c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c005560:	6025      	str	r5, [r4, #0]
 c005562:	61a5      	str	r5, [r4, #24]
 c005564:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c005568:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c00556c:	f7ff ff24 	bl	c0053b8 <memset>
 c005570:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c005574:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c005578:	4620      	mov	r0, r4
 c00557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00557c:	3468      	adds	r4, #104	; 0x68
 c00557e:	e7d9      	b.n	c005534 <__sfp+0x1c>
 c005580:	2104      	movs	r1, #4
 c005582:	4638      	mov	r0, r7
 c005584:	f7ff ff62 	bl	c00544c <__sfmoreglue>
 c005588:	4604      	mov	r4, r0
 c00558a:	6030      	str	r0, [r6, #0]
 c00558c:	2800      	cmp	r0, #0
 c00558e:	d1d5      	bne.n	c00553c <__sfp+0x24>
 c005590:	f7ff ff78 	bl	c005484 <__sfp_lock_release>
 c005594:	230c      	movs	r3, #12
 c005596:	603b      	str	r3, [r7, #0]
 c005598:	e7ee      	b.n	c005578 <__sfp+0x60>
 c00559a:	bf00      	nop
 c00559c:	0c00652c 	.word	0x0c00652c
 c0055a0:	ffff0001 	.word	0xffff0001

0c0055a4 <_fwalk_reent>:
 c0055a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c0055a8:	4606      	mov	r6, r0
 c0055aa:	4688      	mov	r8, r1
 c0055ac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c0055b0:	2700      	movs	r7, #0
 c0055b2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c0055b6:	f1b9 0901 	subs.w	r9, r9, #1
 c0055ba:	d505      	bpl.n	c0055c8 <_fwalk_reent+0x24>
 c0055bc:	6824      	ldr	r4, [r4, #0]
 c0055be:	2c00      	cmp	r4, #0
 c0055c0:	d1f7      	bne.n	c0055b2 <_fwalk_reent+0xe>
 c0055c2:	4638      	mov	r0, r7
 c0055c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0055c8:	89ab      	ldrh	r3, [r5, #12]
 c0055ca:	2b01      	cmp	r3, #1
 c0055cc:	d907      	bls.n	c0055de <_fwalk_reent+0x3a>
 c0055ce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c0055d2:	3301      	adds	r3, #1
 c0055d4:	d003      	beq.n	c0055de <_fwalk_reent+0x3a>
 c0055d6:	4629      	mov	r1, r5
 c0055d8:	4630      	mov	r0, r6
 c0055da:	47c0      	blx	r8
 c0055dc:	4307      	orrs	r7, r0
 c0055de:	3568      	adds	r5, #104	; 0x68
 c0055e0:	e7e9      	b.n	c0055b6 <_fwalk_reent+0x12>

0c0055e2 <__retarget_lock_init_recursive>:
 c0055e2:	4770      	bx	lr

0c0055e4 <__retarget_lock_acquire_recursive>:
 c0055e4:	4770      	bx	lr

0c0055e6 <__retarget_lock_release_recursive>:
 c0055e6:	4770      	bx	lr

0c0055e8 <sbrk_aligned>:
 c0055e8:	b570      	push	{r4, r5, r6, lr}
 c0055ea:	4e0e      	ldr	r6, [pc, #56]	; (c005624 <sbrk_aligned+0x3c>)
 c0055ec:	460c      	mov	r4, r1
 c0055ee:	4605      	mov	r5, r0
 c0055f0:	6831      	ldr	r1, [r6, #0]
 c0055f2:	b911      	cbnz	r1, c0055fa <sbrk_aligned+0x12>
 c0055f4:	f000 fb7c 	bl	c005cf0 <_sbrk_r>
 c0055f8:	6030      	str	r0, [r6, #0]
 c0055fa:	4621      	mov	r1, r4
 c0055fc:	4628      	mov	r0, r5
 c0055fe:	f000 fb77 	bl	c005cf0 <_sbrk_r>
 c005602:	1c43      	adds	r3, r0, #1
 c005604:	d00a      	beq.n	c00561c <sbrk_aligned+0x34>
 c005606:	1cc4      	adds	r4, r0, #3
 c005608:	f024 0403 	bic.w	r4, r4, #3
 c00560c:	42a0      	cmp	r0, r4
 c00560e:	d007      	beq.n	c005620 <sbrk_aligned+0x38>
 c005610:	1a21      	subs	r1, r4, r0
 c005612:	4628      	mov	r0, r5
 c005614:	f000 fb6c 	bl	c005cf0 <_sbrk_r>
 c005618:	3001      	adds	r0, #1
 c00561a:	d101      	bne.n	c005620 <sbrk_aligned+0x38>
 c00561c:	f04f 34ff 	mov.w	r4, #4294967295
 c005620:	4620      	mov	r0, r4
 c005622:	bd70      	pop	{r4, r5, r6, pc}
 c005624:	30000610 	.word	0x30000610

0c005628 <_malloc_r>:
 c005628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00562c:	1ccd      	adds	r5, r1, #3
 c00562e:	4607      	mov	r7, r0
 c005630:	f025 0503 	bic.w	r5, r5, #3
 c005634:	3508      	adds	r5, #8
 c005636:	2d0c      	cmp	r5, #12
 c005638:	bf38      	it	cc
 c00563a:	250c      	movcc	r5, #12
 c00563c:	2d00      	cmp	r5, #0
 c00563e:	db01      	blt.n	c005644 <_malloc_r+0x1c>
 c005640:	42a9      	cmp	r1, r5
 c005642:	d905      	bls.n	c005650 <_malloc_r+0x28>
 c005644:	230c      	movs	r3, #12
 c005646:	2600      	movs	r6, #0
 c005648:	603b      	str	r3, [r7, #0]
 c00564a:	4630      	mov	r0, r6
 c00564c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c005650:	4e2e      	ldr	r6, [pc, #184]	; (c00570c <_malloc_r+0xe4>)
 c005652:	f000 fdc9 	bl	c0061e8 <__malloc_lock>
 c005656:	6833      	ldr	r3, [r6, #0]
 c005658:	461c      	mov	r4, r3
 c00565a:	bb34      	cbnz	r4, c0056aa <_malloc_r+0x82>
 c00565c:	4629      	mov	r1, r5
 c00565e:	4638      	mov	r0, r7
 c005660:	f7ff ffc2 	bl	c0055e8 <sbrk_aligned>
 c005664:	1c43      	adds	r3, r0, #1
 c005666:	4604      	mov	r4, r0
 c005668:	d14d      	bne.n	c005706 <_malloc_r+0xde>
 c00566a:	6834      	ldr	r4, [r6, #0]
 c00566c:	4626      	mov	r6, r4
 c00566e:	2e00      	cmp	r6, #0
 c005670:	d140      	bne.n	c0056f4 <_malloc_r+0xcc>
 c005672:	6823      	ldr	r3, [r4, #0]
 c005674:	4631      	mov	r1, r6
 c005676:	4638      	mov	r0, r7
 c005678:	eb04 0803 	add.w	r8, r4, r3
 c00567c:	f000 fb38 	bl	c005cf0 <_sbrk_r>
 c005680:	4580      	cmp	r8, r0
 c005682:	d13a      	bne.n	c0056fa <_malloc_r+0xd2>
 c005684:	6821      	ldr	r1, [r4, #0]
 c005686:	3503      	adds	r5, #3
 c005688:	4638      	mov	r0, r7
 c00568a:	1a6d      	subs	r5, r5, r1
 c00568c:	f025 0503 	bic.w	r5, r5, #3
 c005690:	3508      	adds	r5, #8
 c005692:	2d0c      	cmp	r5, #12
 c005694:	bf38      	it	cc
 c005696:	250c      	movcc	r5, #12
 c005698:	4629      	mov	r1, r5
 c00569a:	f7ff ffa5 	bl	c0055e8 <sbrk_aligned>
 c00569e:	3001      	adds	r0, #1
 c0056a0:	d02b      	beq.n	c0056fa <_malloc_r+0xd2>
 c0056a2:	6823      	ldr	r3, [r4, #0]
 c0056a4:	442b      	add	r3, r5
 c0056a6:	6023      	str	r3, [r4, #0]
 c0056a8:	e00e      	b.n	c0056c8 <_malloc_r+0xa0>
 c0056aa:	6822      	ldr	r2, [r4, #0]
 c0056ac:	1b52      	subs	r2, r2, r5
 c0056ae:	d41e      	bmi.n	c0056ee <_malloc_r+0xc6>
 c0056b0:	2a0b      	cmp	r2, #11
 c0056b2:	d916      	bls.n	c0056e2 <_malloc_r+0xba>
 c0056b4:	1961      	adds	r1, r4, r5
 c0056b6:	42a3      	cmp	r3, r4
 c0056b8:	6025      	str	r5, [r4, #0]
 c0056ba:	bf18      	it	ne
 c0056bc:	6059      	strne	r1, [r3, #4]
 c0056be:	6863      	ldr	r3, [r4, #4]
 c0056c0:	bf08      	it	eq
 c0056c2:	6031      	streq	r1, [r6, #0]
 c0056c4:	5162      	str	r2, [r4, r5]
 c0056c6:	604b      	str	r3, [r1, #4]
 c0056c8:	f104 060b 	add.w	r6, r4, #11
 c0056cc:	4638      	mov	r0, r7
 c0056ce:	f000 fd91 	bl	c0061f4 <__malloc_unlock>
 c0056d2:	1d23      	adds	r3, r4, #4
 c0056d4:	f026 0607 	bic.w	r6, r6, #7
 c0056d8:	1af2      	subs	r2, r6, r3
 c0056da:	d0b6      	beq.n	c00564a <_malloc_r+0x22>
 c0056dc:	1b9b      	subs	r3, r3, r6
 c0056de:	50a3      	str	r3, [r4, r2]
 c0056e0:	e7b3      	b.n	c00564a <_malloc_r+0x22>
 c0056e2:	6862      	ldr	r2, [r4, #4]
 c0056e4:	42a3      	cmp	r3, r4
 c0056e6:	bf0c      	ite	eq
 c0056e8:	6032      	streq	r2, [r6, #0]
 c0056ea:	605a      	strne	r2, [r3, #4]
 c0056ec:	e7ec      	b.n	c0056c8 <_malloc_r+0xa0>
 c0056ee:	4623      	mov	r3, r4
 c0056f0:	6864      	ldr	r4, [r4, #4]
 c0056f2:	e7b2      	b.n	c00565a <_malloc_r+0x32>
 c0056f4:	4634      	mov	r4, r6
 c0056f6:	6876      	ldr	r6, [r6, #4]
 c0056f8:	e7b9      	b.n	c00566e <_malloc_r+0x46>
 c0056fa:	230c      	movs	r3, #12
 c0056fc:	4638      	mov	r0, r7
 c0056fe:	603b      	str	r3, [r7, #0]
 c005700:	f000 fd78 	bl	c0061f4 <__malloc_unlock>
 c005704:	e7a1      	b.n	c00564a <_malloc_r+0x22>
 c005706:	6025      	str	r5, [r4, #0]
 c005708:	e7de      	b.n	c0056c8 <_malloc_r+0xa0>
 c00570a:	bf00      	nop
 c00570c:	3000060c 	.word	0x3000060c

0c005710 <__sfputc_r>:
 c005710:	6893      	ldr	r3, [r2, #8]
 c005712:	3b01      	subs	r3, #1
 c005714:	2b00      	cmp	r3, #0
 c005716:	6093      	str	r3, [r2, #8]
 c005718:	b410      	push	{r4}
 c00571a:	da08      	bge.n	c00572e <__sfputc_r+0x1e>
 c00571c:	6994      	ldr	r4, [r2, #24]
 c00571e:	42a3      	cmp	r3, r4
 c005720:	db01      	blt.n	c005726 <__sfputc_r+0x16>
 c005722:	290a      	cmp	r1, #10
 c005724:	d103      	bne.n	c00572e <__sfputc_r+0x1e>
 c005726:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00572a:	f000 bb35 	b.w	c005d98 <__swbuf_r>
 c00572e:	6813      	ldr	r3, [r2, #0]
 c005730:	1c58      	adds	r0, r3, #1
 c005732:	6010      	str	r0, [r2, #0]
 c005734:	4608      	mov	r0, r1
 c005736:	7019      	strb	r1, [r3, #0]
 c005738:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00573c:	4770      	bx	lr

0c00573e <__sfputs_r>:
 c00573e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005740:	4606      	mov	r6, r0
 c005742:	460f      	mov	r7, r1
 c005744:	4614      	mov	r4, r2
 c005746:	18d5      	adds	r5, r2, r3
 c005748:	42ac      	cmp	r4, r5
 c00574a:	d101      	bne.n	c005750 <__sfputs_r+0x12>
 c00574c:	2000      	movs	r0, #0
 c00574e:	e007      	b.n	c005760 <__sfputs_r+0x22>
 c005750:	463a      	mov	r2, r7
 c005752:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005756:	4630      	mov	r0, r6
 c005758:	f7ff ffda 	bl	c005710 <__sfputc_r>
 c00575c:	1c43      	adds	r3, r0, #1
 c00575e:	d1f3      	bne.n	c005748 <__sfputs_r+0xa>
 c005760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c005764 <_vfiprintf_r>:
 c005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c005768:	460d      	mov	r5, r1
 c00576a:	b09d      	sub	sp, #116	; 0x74
 c00576c:	4614      	mov	r4, r2
 c00576e:	4698      	mov	r8, r3
 c005770:	4606      	mov	r6, r0
 c005772:	b118      	cbz	r0, c00577c <_vfiprintf_r+0x18>
 c005774:	6983      	ldr	r3, [r0, #24]
 c005776:	b90b      	cbnz	r3, c00577c <_vfiprintf_r+0x18>
 c005778:	f7ff fe96 	bl	c0054a8 <__sinit>
 c00577c:	4b89      	ldr	r3, [pc, #548]	; (c0059a4 <_vfiprintf_r+0x240>)
 c00577e:	429d      	cmp	r5, r3
 c005780:	d11b      	bne.n	c0057ba <_vfiprintf_r+0x56>
 c005782:	6875      	ldr	r5, [r6, #4]
 c005784:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c005786:	07d9      	lsls	r1, r3, #31
 c005788:	d405      	bmi.n	c005796 <_vfiprintf_r+0x32>
 c00578a:	89ab      	ldrh	r3, [r5, #12]
 c00578c:	059a      	lsls	r2, r3, #22
 c00578e:	d402      	bmi.n	c005796 <_vfiprintf_r+0x32>
 c005790:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c005792:	f7ff ff27 	bl	c0055e4 <__retarget_lock_acquire_recursive>
 c005796:	89ab      	ldrh	r3, [r5, #12]
 c005798:	071b      	lsls	r3, r3, #28
 c00579a:	d501      	bpl.n	c0057a0 <_vfiprintf_r+0x3c>
 c00579c:	692b      	ldr	r3, [r5, #16]
 c00579e:	b9eb      	cbnz	r3, c0057dc <_vfiprintf_r+0x78>
 c0057a0:	4629      	mov	r1, r5
 c0057a2:	4630      	mov	r0, r6
 c0057a4:	f000 fb5c 	bl	c005e60 <__swsetup_r>
 c0057a8:	b1c0      	cbz	r0, c0057dc <_vfiprintf_r+0x78>
 c0057aa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0057ac:	07dc      	lsls	r4, r3, #31
 c0057ae:	d50e      	bpl.n	c0057ce <_vfiprintf_r+0x6a>
 c0057b0:	f04f 30ff 	mov.w	r0, #4294967295
 c0057b4:	b01d      	add	sp, #116	; 0x74
 c0057b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0057ba:	4b7b      	ldr	r3, [pc, #492]	; (c0059a8 <_vfiprintf_r+0x244>)
 c0057bc:	429d      	cmp	r5, r3
 c0057be:	d101      	bne.n	c0057c4 <_vfiprintf_r+0x60>
 c0057c0:	68b5      	ldr	r5, [r6, #8]
 c0057c2:	e7df      	b.n	c005784 <_vfiprintf_r+0x20>
 c0057c4:	4b79      	ldr	r3, [pc, #484]	; (c0059ac <_vfiprintf_r+0x248>)
 c0057c6:	429d      	cmp	r5, r3
 c0057c8:	bf08      	it	eq
 c0057ca:	68f5      	ldreq	r5, [r6, #12]
 c0057cc:	e7da      	b.n	c005784 <_vfiprintf_r+0x20>
 c0057ce:	89ab      	ldrh	r3, [r5, #12]
 c0057d0:	0598      	lsls	r0, r3, #22
 c0057d2:	d4ed      	bmi.n	c0057b0 <_vfiprintf_r+0x4c>
 c0057d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0057d6:	f7ff ff06 	bl	c0055e6 <__retarget_lock_release_recursive>
 c0057da:	e7e9      	b.n	c0057b0 <_vfiprintf_r+0x4c>
 c0057dc:	2300      	movs	r3, #0
 c0057de:	f8cd 800c 	str.w	r8, [sp, #12]
 c0057e2:	f04f 0901 	mov.w	r9, #1
 c0057e6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c0059b0 <_vfiprintf_r+0x24c>
 c0057ea:	9309      	str	r3, [sp, #36]	; 0x24
 c0057ec:	2320      	movs	r3, #32
 c0057ee:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c0057f2:	2330      	movs	r3, #48	; 0x30
 c0057f4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c0057f8:	4623      	mov	r3, r4
 c0057fa:	469a      	mov	sl, r3
 c0057fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 c005800:	b10a      	cbz	r2, c005806 <_vfiprintf_r+0xa2>
 c005802:	2a25      	cmp	r2, #37	; 0x25
 c005804:	d1f9      	bne.n	c0057fa <_vfiprintf_r+0x96>
 c005806:	ebba 0b04 	subs.w	fp, sl, r4
 c00580a:	d00b      	beq.n	c005824 <_vfiprintf_r+0xc0>
 c00580c:	465b      	mov	r3, fp
 c00580e:	4622      	mov	r2, r4
 c005810:	4629      	mov	r1, r5
 c005812:	4630      	mov	r0, r6
 c005814:	f7ff ff93 	bl	c00573e <__sfputs_r>
 c005818:	3001      	adds	r0, #1
 c00581a:	f000 80aa 	beq.w	c005972 <_vfiprintf_r+0x20e>
 c00581e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c005820:	445a      	add	r2, fp
 c005822:	9209      	str	r2, [sp, #36]	; 0x24
 c005824:	f89a 3000 	ldrb.w	r3, [sl]
 c005828:	2b00      	cmp	r3, #0
 c00582a:	f000 80a2 	beq.w	c005972 <_vfiprintf_r+0x20e>
 c00582e:	2300      	movs	r3, #0
 c005830:	f04f 32ff 	mov.w	r2, #4294967295
 c005834:	f10a 0a01 	add.w	sl, sl, #1
 c005838:	9304      	str	r3, [sp, #16]
 c00583a:	9307      	str	r3, [sp, #28]
 c00583c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c005840:	931a      	str	r3, [sp, #104]	; 0x68
 c005842:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c005846:	4654      	mov	r4, sl
 c005848:	2205      	movs	r2, #5
 c00584a:	4859      	ldr	r0, [pc, #356]	; (c0059b0 <_vfiprintf_r+0x24c>)
 c00584c:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005850:	f000 fcbc 	bl	c0061cc <memchr>
 c005854:	9a04      	ldr	r2, [sp, #16]
 c005856:	b9d8      	cbnz	r0, c005890 <_vfiprintf_r+0x12c>
 c005858:	06d1      	lsls	r1, r2, #27
 c00585a:	bf44      	itt	mi
 c00585c:	2320      	movmi	r3, #32
 c00585e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c005862:	0713      	lsls	r3, r2, #28
 c005864:	bf44      	itt	mi
 c005866:	232b      	movmi	r3, #43	; 0x2b
 c005868:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c00586c:	f89a 3000 	ldrb.w	r3, [sl]
 c005870:	2b2a      	cmp	r3, #42	; 0x2a
 c005872:	d015      	beq.n	c0058a0 <_vfiprintf_r+0x13c>
 c005874:	9a07      	ldr	r2, [sp, #28]
 c005876:	4654      	mov	r4, sl
 c005878:	2000      	movs	r0, #0
 c00587a:	f04f 0c0a 	mov.w	ip, #10
 c00587e:	4621      	mov	r1, r4
 c005880:	f811 3b01 	ldrb.w	r3, [r1], #1
 c005884:	3b30      	subs	r3, #48	; 0x30
 c005886:	2b09      	cmp	r3, #9
 c005888:	d94e      	bls.n	c005928 <_vfiprintf_r+0x1c4>
 c00588a:	b1b0      	cbz	r0, c0058ba <_vfiprintf_r+0x156>
 c00588c:	9207      	str	r2, [sp, #28]
 c00588e:	e014      	b.n	c0058ba <_vfiprintf_r+0x156>
 c005890:	eba0 0308 	sub.w	r3, r0, r8
 c005894:	46a2      	mov	sl, r4
 c005896:	fa09 f303 	lsl.w	r3, r9, r3
 c00589a:	4313      	orrs	r3, r2
 c00589c:	9304      	str	r3, [sp, #16]
 c00589e:	e7d2      	b.n	c005846 <_vfiprintf_r+0xe2>
 c0058a0:	9b03      	ldr	r3, [sp, #12]
 c0058a2:	1d19      	adds	r1, r3, #4
 c0058a4:	681b      	ldr	r3, [r3, #0]
 c0058a6:	2b00      	cmp	r3, #0
 c0058a8:	9103      	str	r1, [sp, #12]
 c0058aa:	bfbb      	ittet	lt
 c0058ac:	425b      	neglt	r3, r3
 c0058ae:	f042 0202 	orrlt.w	r2, r2, #2
 c0058b2:	9307      	strge	r3, [sp, #28]
 c0058b4:	9307      	strlt	r3, [sp, #28]
 c0058b6:	bfb8      	it	lt
 c0058b8:	9204      	strlt	r2, [sp, #16]
 c0058ba:	7823      	ldrb	r3, [r4, #0]
 c0058bc:	2b2e      	cmp	r3, #46	; 0x2e
 c0058be:	d10c      	bne.n	c0058da <_vfiprintf_r+0x176>
 c0058c0:	7863      	ldrb	r3, [r4, #1]
 c0058c2:	2b2a      	cmp	r3, #42	; 0x2a
 c0058c4:	d135      	bne.n	c005932 <_vfiprintf_r+0x1ce>
 c0058c6:	9b03      	ldr	r3, [sp, #12]
 c0058c8:	3402      	adds	r4, #2
 c0058ca:	1d1a      	adds	r2, r3, #4
 c0058cc:	681b      	ldr	r3, [r3, #0]
 c0058ce:	2b00      	cmp	r3, #0
 c0058d0:	9203      	str	r2, [sp, #12]
 c0058d2:	bfb8      	it	lt
 c0058d4:	f04f 33ff 	movlt.w	r3, #4294967295
 c0058d8:	9305      	str	r3, [sp, #20]
 c0058da:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c0059c0 <_vfiprintf_r+0x25c>
 c0058de:	2203      	movs	r2, #3
 c0058e0:	7821      	ldrb	r1, [r4, #0]
 c0058e2:	4650      	mov	r0, sl
 c0058e4:	f000 fc72 	bl	c0061cc <memchr>
 c0058e8:	b140      	cbz	r0, c0058fc <_vfiprintf_r+0x198>
 c0058ea:	2340      	movs	r3, #64	; 0x40
 c0058ec:	eba0 000a 	sub.w	r0, r0, sl
 c0058f0:	3401      	adds	r4, #1
 c0058f2:	fa03 f000 	lsl.w	r0, r3, r0
 c0058f6:	9b04      	ldr	r3, [sp, #16]
 c0058f8:	4303      	orrs	r3, r0
 c0058fa:	9304      	str	r3, [sp, #16]
 c0058fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005900:	2206      	movs	r2, #6
 c005902:	482c      	ldr	r0, [pc, #176]	; (c0059b4 <_vfiprintf_r+0x250>)
 c005904:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c005908:	f000 fc60 	bl	c0061cc <memchr>
 c00590c:	2800      	cmp	r0, #0
 c00590e:	d03f      	beq.n	c005990 <_vfiprintf_r+0x22c>
 c005910:	4b29      	ldr	r3, [pc, #164]	; (c0059b8 <_vfiprintf_r+0x254>)
 c005912:	bb1b      	cbnz	r3, c00595c <_vfiprintf_r+0x1f8>
 c005914:	9b03      	ldr	r3, [sp, #12]
 c005916:	3307      	adds	r3, #7
 c005918:	f023 0307 	bic.w	r3, r3, #7
 c00591c:	3308      	adds	r3, #8
 c00591e:	9303      	str	r3, [sp, #12]
 c005920:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005922:	443b      	add	r3, r7
 c005924:	9309      	str	r3, [sp, #36]	; 0x24
 c005926:	e767      	b.n	c0057f8 <_vfiprintf_r+0x94>
 c005928:	fb0c 3202 	mla	r2, ip, r2, r3
 c00592c:	460c      	mov	r4, r1
 c00592e:	2001      	movs	r0, #1
 c005930:	e7a5      	b.n	c00587e <_vfiprintf_r+0x11a>
 c005932:	2300      	movs	r3, #0
 c005934:	3401      	adds	r4, #1
 c005936:	f04f 0c0a 	mov.w	ip, #10
 c00593a:	4619      	mov	r1, r3
 c00593c:	9305      	str	r3, [sp, #20]
 c00593e:	4620      	mov	r0, r4
 c005940:	f810 2b01 	ldrb.w	r2, [r0], #1
 c005944:	3a30      	subs	r2, #48	; 0x30
 c005946:	2a09      	cmp	r2, #9
 c005948:	d903      	bls.n	c005952 <_vfiprintf_r+0x1ee>
 c00594a:	2b00      	cmp	r3, #0
 c00594c:	d0c5      	beq.n	c0058da <_vfiprintf_r+0x176>
 c00594e:	9105      	str	r1, [sp, #20]
 c005950:	e7c3      	b.n	c0058da <_vfiprintf_r+0x176>
 c005952:	fb0c 2101 	mla	r1, ip, r1, r2
 c005956:	4604      	mov	r4, r0
 c005958:	2301      	movs	r3, #1
 c00595a:	e7f0      	b.n	c00593e <_vfiprintf_r+0x1da>
 c00595c:	ab03      	add	r3, sp, #12
 c00595e:	462a      	mov	r2, r5
 c005960:	a904      	add	r1, sp, #16
 c005962:	4630      	mov	r0, r6
 c005964:	9300      	str	r3, [sp, #0]
 c005966:	4b15      	ldr	r3, [pc, #84]	; (c0059bc <_vfiprintf_r+0x258>)
 c005968:	e000      	b.n	c00596c <_vfiprintf_r+0x208>
 c00596a:	bf00      	nop
 c00596c:	4607      	mov	r7, r0
 c00596e:	1c78      	adds	r0, r7, #1
 c005970:	d1d6      	bne.n	c005920 <_vfiprintf_r+0x1bc>
 c005972:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c005974:	07d9      	lsls	r1, r3, #31
 c005976:	d405      	bmi.n	c005984 <_vfiprintf_r+0x220>
 c005978:	89ab      	ldrh	r3, [r5, #12]
 c00597a:	059a      	lsls	r2, r3, #22
 c00597c:	d402      	bmi.n	c005984 <_vfiprintf_r+0x220>
 c00597e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c005980:	f7ff fe31 	bl	c0055e6 <__retarget_lock_release_recursive>
 c005984:	89ab      	ldrh	r3, [r5, #12]
 c005986:	065b      	lsls	r3, r3, #25
 c005988:	f53f af12 	bmi.w	c0057b0 <_vfiprintf_r+0x4c>
 c00598c:	9809      	ldr	r0, [sp, #36]	; 0x24
 c00598e:	e711      	b.n	c0057b4 <_vfiprintf_r+0x50>
 c005990:	ab03      	add	r3, sp, #12
 c005992:	462a      	mov	r2, r5
 c005994:	a904      	add	r1, sp, #16
 c005996:	4630      	mov	r0, r6
 c005998:	9300      	str	r3, [sp, #0]
 c00599a:	4b08      	ldr	r3, [pc, #32]	; (c0059bc <_vfiprintf_r+0x258>)
 c00599c:	f000 f882 	bl	c005aa4 <_printf_i>
 c0059a0:	e7e4      	b.n	c00596c <_vfiprintf_r+0x208>
 c0059a2:	bf00      	nop
 c0059a4:	0c006550 	.word	0x0c006550
 c0059a8:	0c006570 	.word	0x0c006570
 c0059ac:	0c006530 	.word	0x0c006530
 c0059b0:	0c006590 	.word	0x0c006590
 c0059b4:	0c00659a 	.word	0x0c00659a
 c0059b8:	00000000 	.word	0x00000000
 c0059bc:	0c00573f 	.word	0x0c00573f
 c0059c0:	0c006596 	.word	0x0c006596

0c0059c4 <_printf_common>:
 c0059c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0059c8:	4616      	mov	r6, r2
 c0059ca:	4699      	mov	r9, r3
 c0059cc:	688a      	ldr	r2, [r1, #8]
 c0059ce:	4607      	mov	r7, r0
 c0059d0:	690b      	ldr	r3, [r1, #16]
 c0059d2:	460c      	mov	r4, r1
 c0059d4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c0059d8:	4293      	cmp	r3, r2
 c0059da:	bfb8      	it	lt
 c0059dc:	4613      	movlt	r3, r2
 c0059de:	6033      	str	r3, [r6, #0]
 c0059e0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c0059e4:	b10a      	cbz	r2, c0059ea <_printf_common+0x26>
 c0059e6:	3301      	adds	r3, #1
 c0059e8:	6033      	str	r3, [r6, #0]
 c0059ea:	6823      	ldr	r3, [r4, #0]
 c0059ec:	0699      	lsls	r1, r3, #26
 c0059ee:	bf42      	ittt	mi
 c0059f0:	6833      	ldrmi	r3, [r6, #0]
 c0059f2:	3302      	addmi	r3, #2
 c0059f4:	6033      	strmi	r3, [r6, #0]
 c0059f6:	6825      	ldr	r5, [r4, #0]
 c0059f8:	f015 0506 	ands.w	r5, r5, #6
 c0059fc:	d106      	bne.n	c005a0c <_printf_common+0x48>
 c0059fe:	f104 0a19 	add.w	sl, r4, #25
 c005a02:	68e3      	ldr	r3, [r4, #12]
 c005a04:	6832      	ldr	r2, [r6, #0]
 c005a06:	1a9b      	subs	r3, r3, r2
 c005a08:	42ab      	cmp	r3, r5
 c005a0a:	dc29      	bgt.n	c005a60 <_printf_common+0x9c>
 c005a0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c005a10:	1e13      	subs	r3, r2, #0
 c005a12:	6822      	ldr	r2, [r4, #0]
 c005a14:	bf18      	it	ne
 c005a16:	2301      	movne	r3, #1
 c005a18:	0692      	lsls	r2, r2, #26
 c005a1a:	d42e      	bmi.n	c005a7a <_printf_common+0xb6>
 c005a1c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c005a20:	4649      	mov	r1, r9
 c005a22:	4638      	mov	r0, r7
 c005a24:	47c0      	blx	r8
 c005a26:	3001      	adds	r0, #1
 c005a28:	d021      	beq.n	c005a6e <_printf_common+0xaa>
 c005a2a:	6823      	ldr	r3, [r4, #0]
 c005a2c:	341a      	adds	r4, #26
 c005a2e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c005a32:	f003 0306 	and.w	r3, r3, #6
 c005a36:	6832      	ldr	r2, [r6, #0]
 c005a38:	2600      	movs	r6, #0
 c005a3a:	2b04      	cmp	r3, #4
 c005a3c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c005a40:	bf08      	it	eq
 c005a42:	1aad      	subeq	r5, r5, r2
 c005a44:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c005a48:	bf14      	ite	ne
 c005a4a:	2500      	movne	r5, #0
 c005a4c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c005a50:	4293      	cmp	r3, r2
 c005a52:	bfc4      	itt	gt
 c005a54:	1a9b      	subgt	r3, r3, r2
 c005a56:	18ed      	addgt	r5, r5, r3
 c005a58:	42b5      	cmp	r5, r6
 c005a5a:	d11a      	bne.n	c005a92 <_printf_common+0xce>
 c005a5c:	2000      	movs	r0, #0
 c005a5e:	e008      	b.n	c005a72 <_printf_common+0xae>
 c005a60:	2301      	movs	r3, #1
 c005a62:	4652      	mov	r2, sl
 c005a64:	4649      	mov	r1, r9
 c005a66:	4638      	mov	r0, r7
 c005a68:	47c0      	blx	r8
 c005a6a:	3001      	adds	r0, #1
 c005a6c:	d103      	bne.n	c005a76 <_printf_common+0xb2>
 c005a6e:	f04f 30ff 	mov.w	r0, #4294967295
 c005a72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005a76:	3501      	adds	r5, #1
 c005a78:	e7c3      	b.n	c005a02 <_printf_common+0x3e>
 c005a7a:	18e1      	adds	r1, r4, r3
 c005a7c:	1c5a      	adds	r2, r3, #1
 c005a7e:	2030      	movs	r0, #48	; 0x30
 c005a80:	3302      	adds	r3, #2
 c005a82:	4422      	add	r2, r4
 c005a84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c005a88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c005a8c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c005a90:	e7c4      	b.n	c005a1c <_printf_common+0x58>
 c005a92:	2301      	movs	r3, #1
 c005a94:	4622      	mov	r2, r4
 c005a96:	4649      	mov	r1, r9
 c005a98:	4638      	mov	r0, r7
 c005a9a:	47c0      	blx	r8
 c005a9c:	3001      	adds	r0, #1
 c005a9e:	d0e6      	beq.n	c005a6e <_printf_common+0xaa>
 c005aa0:	3601      	adds	r6, #1
 c005aa2:	e7d9      	b.n	c005a58 <_printf_common+0x94>

0c005aa4 <_printf_i>:
 c005aa4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c005aa8:	7e0f      	ldrb	r7, [r1, #24]
 c005aaa:	4691      	mov	r9, r2
 c005aac:	4680      	mov	r8, r0
 c005aae:	460c      	mov	r4, r1
 c005ab0:	2f78      	cmp	r7, #120	; 0x78
 c005ab2:	469a      	mov	sl, r3
 c005ab4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c005ab6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c005aba:	d807      	bhi.n	c005acc <_printf_i+0x28>
 c005abc:	2f62      	cmp	r7, #98	; 0x62
 c005abe:	d80a      	bhi.n	c005ad6 <_printf_i+0x32>
 c005ac0:	2f00      	cmp	r7, #0
 c005ac2:	f000 80d8 	beq.w	c005c76 <_printf_i+0x1d2>
 c005ac6:	2f58      	cmp	r7, #88	; 0x58
 c005ac8:	f000 80a3 	beq.w	c005c12 <_printf_i+0x16e>
 c005acc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005ad0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c005ad4:	e03a      	b.n	c005b4c <_printf_i+0xa8>
 c005ad6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c005ada:	2b15      	cmp	r3, #21
 c005adc:	d8f6      	bhi.n	c005acc <_printf_i+0x28>
 c005ade:	a101      	add	r1, pc, #4	; (adr r1, c005ae4 <_printf_i+0x40>)
 c005ae0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c005ae4:	0c005b3d 	.word	0x0c005b3d
 c005ae8:	0c005b51 	.word	0x0c005b51
 c005aec:	0c005acd 	.word	0x0c005acd
 c005af0:	0c005acd 	.word	0x0c005acd
 c005af4:	0c005acd 	.word	0x0c005acd
 c005af8:	0c005acd 	.word	0x0c005acd
 c005afc:	0c005b51 	.word	0x0c005b51
 c005b00:	0c005acd 	.word	0x0c005acd
 c005b04:	0c005acd 	.word	0x0c005acd
 c005b08:	0c005acd 	.word	0x0c005acd
 c005b0c:	0c005acd 	.word	0x0c005acd
 c005b10:	0c005c5d 	.word	0x0c005c5d
 c005b14:	0c005b81 	.word	0x0c005b81
 c005b18:	0c005c3f 	.word	0x0c005c3f
 c005b1c:	0c005acd 	.word	0x0c005acd
 c005b20:	0c005acd 	.word	0x0c005acd
 c005b24:	0c005c7f 	.word	0x0c005c7f
 c005b28:	0c005acd 	.word	0x0c005acd
 c005b2c:	0c005b81 	.word	0x0c005b81
 c005b30:	0c005acd 	.word	0x0c005acd
 c005b34:	0c005acd 	.word	0x0c005acd
 c005b38:	0c005c47 	.word	0x0c005c47
 c005b3c:	682b      	ldr	r3, [r5, #0]
 c005b3e:	1d1a      	adds	r2, r3, #4
 c005b40:	681b      	ldr	r3, [r3, #0]
 c005b42:	602a      	str	r2, [r5, #0]
 c005b44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005b48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c005b4c:	2301      	movs	r3, #1
 c005b4e:	e0a3      	b.n	c005c98 <_printf_i+0x1f4>
 c005b50:	6820      	ldr	r0, [r4, #0]
 c005b52:	6829      	ldr	r1, [r5, #0]
 c005b54:	0606      	lsls	r6, r0, #24
 c005b56:	f101 0304 	add.w	r3, r1, #4
 c005b5a:	d50a      	bpl.n	c005b72 <_printf_i+0xce>
 c005b5c:	680e      	ldr	r6, [r1, #0]
 c005b5e:	602b      	str	r3, [r5, #0]
 c005b60:	2e00      	cmp	r6, #0
 c005b62:	da03      	bge.n	c005b6c <_printf_i+0xc8>
 c005b64:	232d      	movs	r3, #45	; 0x2d
 c005b66:	4276      	negs	r6, r6
 c005b68:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c005b6c:	485e      	ldr	r0, [pc, #376]	; (c005ce8 <_printf_i+0x244>)
 c005b6e:	230a      	movs	r3, #10
 c005b70:	e019      	b.n	c005ba6 <_printf_i+0x102>
 c005b72:	680e      	ldr	r6, [r1, #0]
 c005b74:	f010 0f40 	tst.w	r0, #64	; 0x40
 c005b78:	602b      	str	r3, [r5, #0]
 c005b7a:	bf18      	it	ne
 c005b7c:	b236      	sxthne	r6, r6
 c005b7e:	e7ef      	b.n	c005b60 <_printf_i+0xbc>
 c005b80:	682b      	ldr	r3, [r5, #0]
 c005b82:	6820      	ldr	r0, [r4, #0]
 c005b84:	1d19      	adds	r1, r3, #4
 c005b86:	6029      	str	r1, [r5, #0]
 c005b88:	0601      	lsls	r1, r0, #24
 c005b8a:	d501      	bpl.n	c005b90 <_printf_i+0xec>
 c005b8c:	681e      	ldr	r6, [r3, #0]
 c005b8e:	e002      	b.n	c005b96 <_printf_i+0xf2>
 c005b90:	0646      	lsls	r6, r0, #25
 c005b92:	d5fb      	bpl.n	c005b8c <_printf_i+0xe8>
 c005b94:	881e      	ldrh	r6, [r3, #0]
 c005b96:	2f6f      	cmp	r7, #111	; 0x6f
 c005b98:	4853      	ldr	r0, [pc, #332]	; (c005ce8 <_printf_i+0x244>)
 c005b9a:	bf0c      	ite	eq
 c005b9c:	2308      	moveq	r3, #8
 c005b9e:	230a      	movne	r3, #10
 c005ba0:	2100      	movs	r1, #0
 c005ba2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c005ba6:	6865      	ldr	r5, [r4, #4]
 c005ba8:	2d00      	cmp	r5, #0
 c005baa:	60a5      	str	r5, [r4, #8]
 c005bac:	bfa2      	ittt	ge
 c005bae:	6821      	ldrge	r1, [r4, #0]
 c005bb0:	f021 0104 	bicge.w	r1, r1, #4
 c005bb4:	6021      	strge	r1, [r4, #0]
 c005bb6:	b90e      	cbnz	r6, c005bbc <_printf_i+0x118>
 c005bb8:	2d00      	cmp	r5, #0
 c005bba:	d04d      	beq.n	c005c58 <_printf_i+0x1b4>
 c005bbc:	4615      	mov	r5, r2
 c005bbe:	fbb6 f1f3 	udiv	r1, r6, r3
 c005bc2:	fb03 6711 	mls	r7, r3, r1, r6
 c005bc6:	5dc7      	ldrb	r7, [r0, r7]
 c005bc8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c005bcc:	4637      	mov	r7, r6
 c005bce:	460e      	mov	r6, r1
 c005bd0:	42bb      	cmp	r3, r7
 c005bd2:	d9f4      	bls.n	c005bbe <_printf_i+0x11a>
 c005bd4:	2b08      	cmp	r3, #8
 c005bd6:	d10b      	bne.n	c005bf0 <_printf_i+0x14c>
 c005bd8:	6823      	ldr	r3, [r4, #0]
 c005bda:	07de      	lsls	r6, r3, #31
 c005bdc:	d508      	bpl.n	c005bf0 <_printf_i+0x14c>
 c005bde:	6923      	ldr	r3, [r4, #16]
 c005be0:	6861      	ldr	r1, [r4, #4]
 c005be2:	4299      	cmp	r1, r3
 c005be4:	bfde      	ittt	le
 c005be6:	2330      	movle	r3, #48	; 0x30
 c005be8:	f805 3c01 	strble.w	r3, [r5, #-1]
 c005bec:	f105 35ff 	addle.w	r5, r5, #4294967295
 c005bf0:	1b52      	subs	r2, r2, r5
 c005bf2:	6122      	str	r2, [r4, #16]
 c005bf4:	464b      	mov	r3, r9
 c005bf6:	aa03      	add	r2, sp, #12
 c005bf8:	4621      	mov	r1, r4
 c005bfa:	4640      	mov	r0, r8
 c005bfc:	f8cd a000 	str.w	sl, [sp]
 c005c00:	f7ff fee0 	bl	c0059c4 <_printf_common>
 c005c04:	3001      	adds	r0, #1
 c005c06:	d14c      	bne.n	c005ca2 <_printf_i+0x1fe>
 c005c08:	f04f 30ff 	mov.w	r0, #4294967295
 c005c0c:	b004      	add	sp, #16
 c005c0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005c12:	4835      	ldr	r0, [pc, #212]	; (c005ce8 <_printf_i+0x244>)
 c005c14:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c005c18:	6829      	ldr	r1, [r5, #0]
 c005c1a:	6823      	ldr	r3, [r4, #0]
 c005c1c:	f851 6b04 	ldr.w	r6, [r1], #4
 c005c20:	6029      	str	r1, [r5, #0]
 c005c22:	061d      	lsls	r5, r3, #24
 c005c24:	d514      	bpl.n	c005c50 <_printf_i+0x1ac>
 c005c26:	07df      	lsls	r7, r3, #31
 c005c28:	bf44      	itt	mi
 c005c2a:	f043 0320 	orrmi.w	r3, r3, #32
 c005c2e:	6023      	strmi	r3, [r4, #0]
 c005c30:	b91e      	cbnz	r6, c005c3a <_printf_i+0x196>
 c005c32:	6823      	ldr	r3, [r4, #0]
 c005c34:	f023 0320 	bic.w	r3, r3, #32
 c005c38:	6023      	str	r3, [r4, #0]
 c005c3a:	2310      	movs	r3, #16
 c005c3c:	e7b0      	b.n	c005ba0 <_printf_i+0xfc>
 c005c3e:	6823      	ldr	r3, [r4, #0]
 c005c40:	f043 0320 	orr.w	r3, r3, #32
 c005c44:	6023      	str	r3, [r4, #0]
 c005c46:	2378      	movs	r3, #120	; 0x78
 c005c48:	4828      	ldr	r0, [pc, #160]	; (c005cec <_printf_i+0x248>)
 c005c4a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c005c4e:	e7e3      	b.n	c005c18 <_printf_i+0x174>
 c005c50:	0659      	lsls	r1, r3, #25
 c005c52:	bf48      	it	mi
 c005c54:	b2b6      	uxthmi	r6, r6
 c005c56:	e7e6      	b.n	c005c26 <_printf_i+0x182>
 c005c58:	4615      	mov	r5, r2
 c005c5a:	e7bb      	b.n	c005bd4 <_printf_i+0x130>
 c005c5c:	682b      	ldr	r3, [r5, #0]
 c005c5e:	6826      	ldr	r6, [r4, #0]
 c005c60:	1d18      	adds	r0, r3, #4
 c005c62:	6961      	ldr	r1, [r4, #20]
 c005c64:	6028      	str	r0, [r5, #0]
 c005c66:	0635      	lsls	r5, r6, #24
 c005c68:	681b      	ldr	r3, [r3, #0]
 c005c6a:	d501      	bpl.n	c005c70 <_printf_i+0x1cc>
 c005c6c:	6019      	str	r1, [r3, #0]
 c005c6e:	e002      	b.n	c005c76 <_printf_i+0x1d2>
 c005c70:	0670      	lsls	r0, r6, #25
 c005c72:	d5fb      	bpl.n	c005c6c <_printf_i+0x1c8>
 c005c74:	8019      	strh	r1, [r3, #0]
 c005c76:	2300      	movs	r3, #0
 c005c78:	4615      	mov	r5, r2
 c005c7a:	6123      	str	r3, [r4, #16]
 c005c7c:	e7ba      	b.n	c005bf4 <_printf_i+0x150>
 c005c7e:	682b      	ldr	r3, [r5, #0]
 c005c80:	2100      	movs	r1, #0
 c005c82:	1d1a      	adds	r2, r3, #4
 c005c84:	602a      	str	r2, [r5, #0]
 c005c86:	681d      	ldr	r5, [r3, #0]
 c005c88:	6862      	ldr	r2, [r4, #4]
 c005c8a:	4628      	mov	r0, r5
 c005c8c:	f000 fa9e 	bl	c0061cc <memchr>
 c005c90:	b108      	cbz	r0, c005c96 <_printf_i+0x1f2>
 c005c92:	1b40      	subs	r0, r0, r5
 c005c94:	6060      	str	r0, [r4, #4]
 c005c96:	6863      	ldr	r3, [r4, #4]
 c005c98:	6123      	str	r3, [r4, #16]
 c005c9a:	2300      	movs	r3, #0
 c005c9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c005ca0:	e7a8      	b.n	c005bf4 <_printf_i+0x150>
 c005ca2:	6923      	ldr	r3, [r4, #16]
 c005ca4:	462a      	mov	r2, r5
 c005ca6:	4649      	mov	r1, r9
 c005ca8:	4640      	mov	r0, r8
 c005caa:	47d0      	blx	sl
 c005cac:	3001      	adds	r0, #1
 c005cae:	d0ab      	beq.n	c005c08 <_printf_i+0x164>
 c005cb0:	6823      	ldr	r3, [r4, #0]
 c005cb2:	079b      	lsls	r3, r3, #30
 c005cb4:	d413      	bmi.n	c005cde <_printf_i+0x23a>
 c005cb6:	68e0      	ldr	r0, [r4, #12]
 c005cb8:	9b03      	ldr	r3, [sp, #12]
 c005cba:	4298      	cmp	r0, r3
 c005cbc:	bfb8      	it	lt
 c005cbe:	4618      	movlt	r0, r3
 c005cc0:	e7a4      	b.n	c005c0c <_printf_i+0x168>
 c005cc2:	2301      	movs	r3, #1
 c005cc4:	4632      	mov	r2, r6
 c005cc6:	4649      	mov	r1, r9
 c005cc8:	4640      	mov	r0, r8
 c005cca:	47d0      	blx	sl
 c005ccc:	3001      	adds	r0, #1
 c005cce:	d09b      	beq.n	c005c08 <_printf_i+0x164>
 c005cd0:	3501      	adds	r5, #1
 c005cd2:	68e3      	ldr	r3, [r4, #12]
 c005cd4:	9903      	ldr	r1, [sp, #12]
 c005cd6:	1a5b      	subs	r3, r3, r1
 c005cd8:	42ab      	cmp	r3, r5
 c005cda:	dcf2      	bgt.n	c005cc2 <_printf_i+0x21e>
 c005cdc:	e7eb      	b.n	c005cb6 <_printf_i+0x212>
 c005cde:	2500      	movs	r5, #0
 c005ce0:	f104 0619 	add.w	r6, r4, #25
 c005ce4:	e7f5      	b.n	c005cd2 <_printf_i+0x22e>
 c005ce6:	bf00      	nop
 c005ce8:	0c0065a1 	.word	0x0c0065a1
 c005cec:	0c0065b2 	.word	0x0c0065b2

0c005cf0 <_sbrk_r>:
 c005cf0:	b538      	push	{r3, r4, r5, lr}
 c005cf2:	2300      	movs	r3, #0
 c005cf4:	4d05      	ldr	r5, [pc, #20]	; (c005d0c <_sbrk_r+0x1c>)
 c005cf6:	4604      	mov	r4, r0
 c005cf8:	4608      	mov	r0, r1
 c005cfa:	602b      	str	r3, [r5, #0]
 c005cfc:	f7fb fbde 	bl	c0014bc <_sbrk>
 c005d00:	1c43      	adds	r3, r0, #1
 c005d02:	d102      	bne.n	c005d0a <_sbrk_r+0x1a>
 c005d04:	682b      	ldr	r3, [r5, #0]
 c005d06:	b103      	cbz	r3, c005d0a <_sbrk_r+0x1a>
 c005d08:	6023      	str	r3, [r4, #0]
 c005d0a:	bd38      	pop	{r3, r4, r5, pc}
 c005d0c:	30000614 	.word	0x30000614

0c005d10 <__sread>:
 c005d10:	b510      	push	{r4, lr}
 c005d12:	460c      	mov	r4, r1
 c005d14:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c005d18:	f000 fabe 	bl	c006298 <_read_r>
 c005d1c:	2800      	cmp	r0, #0
 c005d1e:	bfab      	itete	ge
 c005d20:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c005d22:	89a3      	ldrhlt	r3, [r4, #12]
 c005d24:	181b      	addge	r3, r3, r0
 c005d26:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c005d2a:	bfac      	ite	ge
 c005d2c:	6563      	strge	r3, [r4, #84]	; 0x54
 c005d2e:	81a3      	strhlt	r3, [r4, #12]
 c005d30:	bd10      	pop	{r4, pc}

0c005d32 <__swrite>:
 c005d32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c005d36:	461f      	mov	r7, r3
 c005d38:	898b      	ldrh	r3, [r1, #12]
 c005d3a:	4605      	mov	r5, r0
 c005d3c:	460c      	mov	r4, r1
 c005d3e:	05db      	lsls	r3, r3, #23
 c005d40:	4616      	mov	r6, r2
 c005d42:	d505      	bpl.n	c005d50 <__swrite+0x1e>
 c005d44:	2302      	movs	r3, #2
 c005d46:	2200      	movs	r2, #0
 c005d48:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c005d4c:	f000 f9c6 	bl	c0060dc <_lseek_r>
 c005d50:	89a3      	ldrh	r3, [r4, #12]
 c005d52:	4632      	mov	r2, r6
 c005d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c005d58:	4628      	mov	r0, r5
 c005d5a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c005d5e:	81a3      	strh	r3, [r4, #12]
 c005d60:	463b      	mov	r3, r7
 c005d62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c005d66:	f000 b869 	b.w	c005e3c <_write_r>

0c005d6a <__sseek>:
 c005d6a:	b510      	push	{r4, lr}
 c005d6c:	460c      	mov	r4, r1
 c005d6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c005d72:	f000 f9b3 	bl	c0060dc <_lseek_r>
 c005d76:	1c43      	adds	r3, r0, #1
 c005d78:	89a3      	ldrh	r3, [r4, #12]
 c005d7a:	bf15      	itete	ne
 c005d7c:	6560      	strne	r0, [r4, #84]	; 0x54
 c005d7e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c005d82:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c005d86:	81a3      	strheq	r3, [r4, #12]
 c005d88:	bf18      	it	ne
 c005d8a:	81a3      	strhne	r3, [r4, #12]
 c005d8c:	bd10      	pop	{r4, pc}

0c005d8e <__sclose>:
 c005d8e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c005d92:	f000 b8d3 	b.w	c005f3c <_close_r>
	...

0c005d98 <__swbuf_r>:
 c005d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005d9a:	460e      	mov	r6, r1
 c005d9c:	4614      	mov	r4, r2
 c005d9e:	4605      	mov	r5, r0
 c005da0:	b118      	cbz	r0, c005daa <__swbuf_r+0x12>
 c005da2:	6983      	ldr	r3, [r0, #24]
 c005da4:	b90b      	cbnz	r3, c005daa <__swbuf_r+0x12>
 c005da6:	f7ff fb7f 	bl	c0054a8 <__sinit>
 c005daa:	4b21      	ldr	r3, [pc, #132]	; (c005e30 <__swbuf_r+0x98>)
 c005dac:	429c      	cmp	r4, r3
 c005dae:	d12b      	bne.n	c005e08 <__swbuf_r+0x70>
 c005db0:	686c      	ldr	r4, [r5, #4]
 c005db2:	69a3      	ldr	r3, [r4, #24]
 c005db4:	60a3      	str	r3, [r4, #8]
 c005db6:	89a3      	ldrh	r3, [r4, #12]
 c005db8:	071a      	lsls	r2, r3, #28
 c005dba:	d52f      	bpl.n	c005e1c <__swbuf_r+0x84>
 c005dbc:	6923      	ldr	r3, [r4, #16]
 c005dbe:	b36b      	cbz	r3, c005e1c <__swbuf_r+0x84>
 c005dc0:	6923      	ldr	r3, [r4, #16]
 c005dc2:	b2f6      	uxtb	r6, r6
 c005dc4:	6820      	ldr	r0, [r4, #0]
 c005dc6:	4637      	mov	r7, r6
 c005dc8:	1ac0      	subs	r0, r0, r3
 c005dca:	6963      	ldr	r3, [r4, #20]
 c005dcc:	4283      	cmp	r3, r0
 c005dce:	dc04      	bgt.n	c005dda <__swbuf_r+0x42>
 c005dd0:	4621      	mov	r1, r4
 c005dd2:	4628      	mov	r0, r5
 c005dd4:	f000 f946 	bl	c006064 <_fflush_r>
 c005dd8:	bb30      	cbnz	r0, c005e28 <__swbuf_r+0x90>
 c005dda:	68a3      	ldr	r3, [r4, #8]
 c005ddc:	3001      	adds	r0, #1
 c005dde:	3b01      	subs	r3, #1
 c005de0:	60a3      	str	r3, [r4, #8]
 c005de2:	6823      	ldr	r3, [r4, #0]
 c005de4:	1c5a      	adds	r2, r3, #1
 c005de6:	6022      	str	r2, [r4, #0]
 c005de8:	701e      	strb	r6, [r3, #0]
 c005dea:	6963      	ldr	r3, [r4, #20]
 c005dec:	4283      	cmp	r3, r0
 c005dee:	d004      	beq.n	c005dfa <__swbuf_r+0x62>
 c005df0:	89a3      	ldrh	r3, [r4, #12]
 c005df2:	07db      	lsls	r3, r3, #31
 c005df4:	d506      	bpl.n	c005e04 <__swbuf_r+0x6c>
 c005df6:	2e0a      	cmp	r6, #10
 c005df8:	d104      	bne.n	c005e04 <__swbuf_r+0x6c>
 c005dfa:	4621      	mov	r1, r4
 c005dfc:	4628      	mov	r0, r5
 c005dfe:	f000 f931 	bl	c006064 <_fflush_r>
 c005e02:	b988      	cbnz	r0, c005e28 <__swbuf_r+0x90>
 c005e04:	4638      	mov	r0, r7
 c005e06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c005e08:	4b0a      	ldr	r3, [pc, #40]	; (c005e34 <__swbuf_r+0x9c>)
 c005e0a:	429c      	cmp	r4, r3
 c005e0c:	d101      	bne.n	c005e12 <__swbuf_r+0x7a>
 c005e0e:	68ac      	ldr	r4, [r5, #8]
 c005e10:	e7cf      	b.n	c005db2 <__swbuf_r+0x1a>
 c005e12:	4b09      	ldr	r3, [pc, #36]	; (c005e38 <__swbuf_r+0xa0>)
 c005e14:	429c      	cmp	r4, r3
 c005e16:	bf08      	it	eq
 c005e18:	68ec      	ldreq	r4, [r5, #12]
 c005e1a:	e7ca      	b.n	c005db2 <__swbuf_r+0x1a>
 c005e1c:	4621      	mov	r1, r4
 c005e1e:	4628      	mov	r0, r5
 c005e20:	f000 f81e 	bl	c005e60 <__swsetup_r>
 c005e24:	2800      	cmp	r0, #0
 c005e26:	d0cb      	beq.n	c005dc0 <__swbuf_r+0x28>
 c005e28:	f04f 37ff 	mov.w	r7, #4294967295
 c005e2c:	e7ea      	b.n	c005e04 <__swbuf_r+0x6c>
 c005e2e:	bf00      	nop
 c005e30:	0c006550 	.word	0x0c006550
 c005e34:	0c006570 	.word	0x0c006570
 c005e38:	0c006530 	.word	0x0c006530

0c005e3c <_write_r>:
 c005e3c:	b538      	push	{r3, r4, r5, lr}
 c005e3e:	4604      	mov	r4, r0
 c005e40:	4d06      	ldr	r5, [pc, #24]	; (c005e5c <_write_r+0x20>)
 c005e42:	4608      	mov	r0, r1
 c005e44:	4611      	mov	r1, r2
 c005e46:	2200      	movs	r2, #0
 c005e48:	602a      	str	r2, [r5, #0]
 c005e4a:	461a      	mov	r2, r3
 c005e4c:	f7fb fae5 	bl	c00141a <_write>
 c005e50:	1c43      	adds	r3, r0, #1
 c005e52:	d102      	bne.n	c005e5a <_write_r+0x1e>
 c005e54:	682b      	ldr	r3, [r5, #0]
 c005e56:	b103      	cbz	r3, c005e5a <_write_r+0x1e>
 c005e58:	6023      	str	r3, [r4, #0]
 c005e5a:	bd38      	pop	{r3, r4, r5, pc}
 c005e5c:	30000614 	.word	0x30000614

0c005e60 <__swsetup_r>:
 c005e60:	4b32      	ldr	r3, [pc, #200]	; (c005f2c <__swsetup_r+0xcc>)
 c005e62:	b570      	push	{r4, r5, r6, lr}
 c005e64:	681d      	ldr	r5, [r3, #0]
 c005e66:	4606      	mov	r6, r0
 c005e68:	460c      	mov	r4, r1
 c005e6a:	b125      	cbz	r5, c005e76 <__swsetup_r+0x16>
 c005e6c:	69ab      	ldr	r3, [r5, #24]
 c005e6e:	b913      	cbnz	r3, c005e76 <__swsetup_r+0x16>
 c005e70:	4628      	mov	r0, r5
 c005e72:	f7ff fb19 	bl	c0054a8 <__sinit>
 c005e76:	4b2e      	ldr	r3, [pc, #184]	; (c005f30 <__swsetup_r+0xd0>)
 c005e78:	429c      	cmp	r4, r3
 c005e7a:	d10f      	bne.n	c005e9c <__swsetup_r+0x3c>
 c005e7c:	686c      	ldr	r4, [r5, #4]
 c005e7e:	89a3      	ldrh	r3, [r4, #12]
 c005e80:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c005e84:	0719      	lsls	r1, r3, #28
 c005e86:	d42c      	bmi.n	c005ee2 <__swsetup_r+0x82>
 c005e88:	06dd      	lsls	r5, r3, #27
 c005e8a:	d411      	bmi.n	c005eb0 <__swsetup_r+0x50>
 c005e8c:	2309      	movs	r3, #9
 c005e8e:	6033      	str	r3, [r6, #0]
 c005e90:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c005e94:	f04f 30ff 	mov.w	r0, #4294967295
 c005e98:	81a3      	strh	r3, [r4, #12]
 c005e9a:	e03e      	b.n	c005f1a <__swsetup_r+0xba>
 c005e9c:	4b25      	ldr	r3, [pc, #148]	; (c005f34 <__swsetup_r+0xd4>)
 c005e9e:	429c      	cmp	r4, r3
 c005ea0:	d101      	bne.n	c005ea6 <__swsetup_r+0x46>
 c005ea2:	68ac      	ldr	r4, [r5, #8]
 c005ea4:	e7eb      	b.n	c005e7e <__swsetup_r+0x1e>
 c005ea6:	4b24      	ldr	r3, [pc, #144]	; (c005f38 <__swsetup_r+0xd8>)
 c005ea8:	429c      	cmp	r4, r3
 c005eaa:	bf08      	it	eq
 c005eac:	68ec      	ldreq	r4, [r5, #12]
 c005eae:	e7e6      	b.n	c005e7e <__swsetup_r+0x1e>
 c005eb0:	0758      	lsls	r0, r3, #29
 c005eb2:	d512      	bpl.n	c005eda <__swsetup_r+0x7a>
 c005eb4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c005eb6:	b141      	cbz	r1, c005eca <__swsetup_r+0x6a>
 c005eb8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c005ebc:	4299      	cmp	r1, r3
 c005ebe:	d002      	beq.n	c005ec6 <__swsetup_r+0x66>
 c005ec0:	4630      	mov	r0, r6
 c005ec2:	f000 f99d 	bl	c006200 <_free_r>
 c005ec6:	2300      	movs	r3, #0
 c005ec8:	6363      	str	r3, [r4, #52]	; 0x34
 c005eca:	89a3      	ldrh	r3, [r4, #12]
 c005ecc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c005ed0:	81a3      	strh	r3, [r4, #12]
 c005ed2:	2300      	movs	r3, #0
 c005ed4:	6063      	str	r3, [r4, #4]
 c005ed6:	6923      	ldr	r3, [r4, #16]
 c005ed8:	6023      	str	r3, [r4, #0]
 c005eda:	89a3      	ldrh	r3, [r4, #12]
 c005edc:	f043 0308 	orr.w	r3, r3, #8
 c005ee0:	81a3      	strh	r3, [r4, #12]
 c005ee2:	6923      	ldr	r3, [r4, #16]
 c005ee4:	b94b      	cbnz	r3, c005efa <__swsetup_r+0x9a>
 c005ee6:	89a3      	ldrh	r3, [r4, #12]
 c005ee8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c005eec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005ef0:	d003      	beq.n	c005efa <__swsetup_r+0x9a>
 c005ef2:	4621      	mov	r1, r4
 c005ef4:	4630      	mov	r0, r6
 c005ef6:	f000 f929 	bl	c00614c <__smakebuf_r>
 c005efa:	89a0      	ldrh	r0, [r4, #12]
 c005efc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c005f00:	f010 0301 	ands.w	r3, r0, #1
 c005f04:	d00a      	beq.n	c005f1c <__swsetup_r+0xbc>
 c005f06:	2300      	movs	r3, #0
 c005f08:	60a3      	str	r3, [r4, #8]
 c005f0a:	6963      	ldr	r3, [r4, #20]
 c005f0c:	425b      	negs	r3, r3
 c005f0e:	61a3      	str	r3, [r4, #24]
 c005f10:	6923      	ldr	r3, [r4, #16]
 c005f12:	b943      	cbnz	r3, c005f26 <__swsetup_r+0xc6>
 c005f14:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c005f18:	d1ba      	bne.n	c005e90 <__swsetup_r+0x30>
 c005f1a:	bd70      	pop	{r4, r5, r6, pc}
 c005f1c:	0781      	lsls	r1, r0, #30
 c005f1e:	bf58      	it	pl
 c005f20:	6963      	ldrpl	r3, [r4, #20]
 c005f22:	60a3      	str	r3, [r4, #8]
 c005f24:	e7f4      	b.n	c005f10 <__swsetup_r+0xb0>
 c005f26:	2000      	movs	r0, #0
 c005f28:	e7f7      	b.n	c005f1a <__swsetup_r+0xba>
 c005f2a:	bf00      	nop
 c005f2c:	3000000c 	.word	0x3000000c
 c005f30:	0c006550 	.word	0x0c006550
 c005f34:	0c006570 	.word	0x0c006570
 c005f38:	0c006530 	.word	0x0c006530

0c005f3c <_close_r>:
 c005f3c:	b538      	push	{r3, r4, r5, lr}
 c005f3e:	2300      	movs	r3, #0
 c005f40:	4d05      	ldr	r5, [pc, #20]	; (c005f58 <_close_r+0x1c>)
 c005f42:	4604      	mov	r4, r0
 c005f44:	4608      	mov	r0, r1
 c005f46:	602b      	str	r3, [r5, #0]
 c005f48:	f7fb fa83 	bl	c001452 <_close>
 c005f4c:	1c43      	adds	r3, r0, #1
 c005f4e:	d102      	bne.n	c005f56 <_close_r+0x1a>
 c005f50:	682b      	ldr	r3, [r5, #0]
 c005f52:	b103      	cbz	r3, c005f56 <_close_r+0x1a>
 c005f54:	6023      	str	r3, [r4, #0]
 c005f56:	bd38      	pop	{r3, r4, r5, pc}
 c005f58:	30000614 	.word	0x30000614

0c005f5c <__sflush_r>:
 c005f5c:	898a      	ldrh	r2, [r1, #12]
 c005f5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c005f62:	4605      	mov	r5, r0
 c005f64:	0710      	lsls	r0, r2, #28
 c005f66:	460c      	mov	r4, r1
 c005f68:	d458      	bmi.n	c00601c <__sflush_r+0xc0>
 c005f6a:	684b      	ldr	r3, [r1, #4]
 c005f6c:	2b00      	cmp	r3, #0
 c005f6e:	dc05      	bgt.n	c005f7c <__sflush_r+0x20>
 c005f70:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c005f72:	2b00      	cmp	r3, #0
 c005f74:	dc02      	bgt.n	c005f7c <__sflush_r+0x20>
 c005f76:	2000      	movs	r0, #0
 c005f78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c005f7c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c005f7e:	2e00      	cmp	r6, #0
 c005f80:	d0f9      	beq.n	c005f76 <__sflush_r+0x1a>
 c005f82:	2300      	movs	r3, #0
 c005f84:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c005f88:	682f      	ldr	r7, [r5, #0]
 c005f8a:	602b      	str	r3, [r5, #0]
 c005f8c:	d032      	beq.n	c005ff4 <__sflush_r+0x98>
 c005f8e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c005f90:	89a3      	ldrh	r3, [r4, #12]
 c005f92:	075a      	lsls	r2, r3, #29
 c005f94:	d505      	bpl.n	c005fa2 <__sflush_r+0x46>
 c005f96:	6863      	ldr	r3, [r4, #4]
 c005f98:	1ac0      	subs	r0, r0, r3
 c005f9a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c005f9c:	b10b      	cbz	r3, c005fa2 <__sflush_r+0x46>
 c005f9e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c005fa0:	1ac0      	subs	r0, r0, r3
 c005fa2:	2300      	movs	r3, #0
 c005fa4:	4602      	mov	r2, r0
 c005fa6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c005fa8:	4628      	mov	r0, r5
 c005faa:	6a21      	ldr	r1, [r4, #32]
 c005fac:	47b0      	blx	r6
 c005fae:	1c43      	adds	r3, r0, #1
 c005fb0:	89a3      	ldrh	r3, [r4, #12]
 c005fb2:	d106      	bne.n	c005fc2 <__sflush_r+0x66>
 c005fb4:	6829      	ldr	r1, [r5, #0]
 c005fb6:	291d      	cmp	r1, #29
 c005fb8:	d82c      	bhi.n	c006014 <__sflush_r+0xb8>
 c005fba:	4a29      	ldr	r2, [pc, #164]	; (c006060 <__sflush_r+0x104>)
 c005fbc:	40ca      	lsrs	r2, r1
 c005fbe:	07d6      	lsls	r6, r2, #31
 c005fc0:	d528      	bpl.n	c006014 <__sflush_r+0xb8>
 c005fc2:	2200      	movs	r2, #0
 c005fc4:	04d9      	lsls	r1, r3, #19
 c005fc6:	6062      	str	r2, [r4, #4]
 c005fc8:	6922      	ldr	r2, [r4, #16]
 c005fca:	6022      	str	r2, [r4, #0]
 c005fcc:	d504      	bpl.n	c005fd8 <__sflush_r+0x7c>
 c005fce:	1c42      	adds	r2, r0, #1
 c005fd0:	d101      	bne.n	c005fd6 <__sflush_r+0x7a>
 c005fd2:	682b      	ldr	r3, [r5, #0]
 c005fd4:	b903      	cbnz	r3, c005fd8 <__sflush_r+0x7c>
 c005fd6:	6560      	str	r0, [r4, #84]	; 0x54
 c005fd8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c005fda:	602f      	str	r7, [r5, #0]
 c005fdc:	2900      	cmp	r1, #0
 c005fde:	d0ca      	beq.n	c005f76 <__sflush_r+0x1a>
 c005fe0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c005fe4:	4299      	cmp	r1, r3
 c005fe6:	d002      	beq.n	c005fee <__sflush_r+0x92>
 c005fe8:	4628      	mov	r0, r5
 c005fea:	f000 f909 	bl	c006200 <_free_r>
 c005fee:	2000      	movs	r0, #0
 c005ff0:	6360      	str	r0, [r4, #52]	; 0x34
 c005ff2:	e7c1      	b.n	c005f78 <__sflush_r+0x1c>
 c005ff4:	6a21      	ldr	r1, [r4, #32]
 c005ff6:	2301      	movs	r3, #1
 c005ff8:	4628      	mov	r0, r5
 c005ffa:	47b0      	blx	r6
 c005ffc:	1c41      	adds	r1, r0, #1
 c005ffe:	d1c7      	bne.n	c005f90 <__sflush_r+0x34>
 c006000:	682b      	ldr	r3, [r5, #0]
 c006002:	2b00      	cmp	r3, #0
 c006004:	d0c4      	beq.n	c005f90 <__sflush_r+0x34>
 c006006:	2b1d      	cmp	r3, #29
 c006008:	d001      	beq.n	c00600e <__sflush_r+0xb2>
 c00600a:	2b16      	cmp	r3, #22
 c00600c:	d101      	bne.n	c006012 <__sflush_r+0xb6>
 c00600e:	602f      	str	r7, [r5, #0]
 c006010:	e7b1      	b.n	c005f76 <__sflush_r+0x1a>
 c006012:	89a3      	ldrh	r3, [r4, #12]
 c006014:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c006018:	81a3      	strh	r3, [r4, #12]
 c00601a:	e7ad      	b.n	c005f78 <__sflush_r+0x1c>
 c00601c:	690f      	ldr	r7, [r1, #16]
 c00601e:	2f00      	cmp	r7, #0
 c006020:	d0a9      	beq.n	c005f76 <__sflush_r+0x1a>
 c006022:	0793      	lsls	r3, r2, #30
 c006024:	680e      	ldr	r6, [r1, #0]
 c006026:	600f      	str	r7, [r1, #0]
 c006028:	bf0c      	ite	eq
 c00602a:	694b      	ldreq	r3, [r1, #20]
 c00602c:	2300      	movne	r3, #0
 c00602e:	eba6 0807 	sub.w	r8, r6, r7
 c006032:	608b      	str	r3, [r1, #8]
 c006034:	f1b8 0f00 	cmp.w	r8, #0
 c006038:	dd9d      	ble.n	c005f76 <__sflush_r+0x1a>
 c00603a:	4643      	mov	r3, r8
 c00603c:	463a      	mov	r2, r7
 c00603e:	6a21      	ldr	r1, [r4, #32]
 c006040:	4628      	mov	r0, r5
 c006042:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c006044:	47b0      	blx	r6
 c006046:	2800      	cmp	r0, #0
 c006048:	dc06      	bgt.n	c006058 <__sflush_r+0xfc>
 c00604a:	89a3      	ldrh	r3, [r4, #12]
 c00604c:	f04f 30ff 	mov.w	r0, #4294967295
 c006050:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c006054:	81a3      	strh	r3, [r4, #12]
 c006056:	e78f      	b.n	c005f78 <__sflush_r+0x1c>
 c006058:	4407      	add	r7, r0
 c00605a:	eba8 0800 	sub.w	r8, r8, r0
 c00605e:	e7e9      	b.n	c006034 <__sflush_r+0xd8>
 c006060:	20400001 	.word	0x20400001

0c006064 <_fflush_r>:
 c006064:	b538      	push	{r3, r4, r5, lr}
 c006066:	690b      	ldr	r3, [r1, #16]
 c006068:	4605      	mov	r5, r0
 c00606a:	460c      	mov	r4, r1
 c00606c:	b913      	cbnz	r3, c006074 <_fflush_r+0x10>
 c00606e:	2500      	movs	r5, #0
 c006070:	4628      	mov	r0, r5
 c006072:	bd38      	pop	{r3, r4, r5, pc}
 c006074:	b118      	cbz	r0, c00607e <_fflush_r+0x1a>
 c006076:	6983      	ldr	r3, [r0, #24]
 c006078:	b90b      	cbnz	r3, c00607e <_fflush_r+0x1a>
 c00607a:	f7ff fa15 	bl	c0054a8 <__sinit>
 c00607e:	4b14      	ldr	r3, [pc, #80]	; (c0060d0 <_fflush_r+0x6c>)
 c006080:	429c      	cmp	r4, r3
 c006082:	d11b      	bne.n	c0060bc <_fflush_r+0x58>
 c006084:	686c      	ldr	r4, [r5, #4]
 c006086:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00608a:	2b00      	cmp	r3, #0
 c00608c:	d0ef      	beq.n	c00606e <_fflush_r+0xa>
 c00608e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c006090:	07d0      	lsls	r0, r2, #31
 c006092:	d404      	bmi.n	c00609e <_fflush_r+0x3a>
 c006094:	0599      	lsls	r1, r3, #22
 c006096:	d402      	bmi.n	c00609e <_fflush_r+0x3a>
 c006098:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00609a:	f7ff faa3 	bl	c0055e4 <__retarget_lock_acquire_recursive>
 c00609e:	4628      	mov	r0, r5
 c0060a0:	4621      	mov	r1, r4
 c0060a2:	f7ff ff5b 	bl	c005f5c <__sflush_r>
 c0060a6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c0060a8:	4605      	mov	r5, r0
 c0060aa:	07da      	lsls	r2, r3, #31
 c0060ac:	d4e0      	bmi.n	c006070 <_fflush_r+0xc>
 c0060ae:	89a3      	ldrh	r3, [r4, #12]
 c0060b0:	059b      	lsls	r3, r3, #22
 c0060b2:	d4dd      	bmi.n	c006070 <_fflush_r+0xc>
 c0060b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0060b6:	f7ff fa96 	bl	c0055e6 <__retarget_lock_release_recursive>
 c0060ba:	e7d9      	b.n	c006070 <_fflush_r+0xc>
 c0060bc:	4b05      	ldr	r3, [pc, #20]	; (c0060d4 <_fflush_r+0x70>)
 c0060be:	429c      	cmp	r4, r3
 c0060c0:	d101      	bne.n	c0060c6 <_fflush_r+0x62>
 c0060c2:	68ac      	ldr	r4, [r5, #8]
 c0060c4:	e7df      	b.n	c006086 <_fflush_r+0x22>
 c0060c6:	4b04      	ldr	r3, [pc, #16]	; (c0060d8 <_fflush_r+0x74>)
 c0060c8:	429c      	cmp	r4, r3
 c0060ca:	bf08      	it	eq
 c0060cc:	68ec      	ldreq	r4, [r5, #12]
 c0060ce:	e7da      	b.n	c006086 <_fflush_r+0x22>
 c0060d0:	0c006550 	.word	0x0c006550
 c0060d4:	0c006570 	.word	0x0c006570
 c0060d8:	0c006530 	.word	0x0c006530

0c0060dc <_lseek_r>:
 c0060dc:	b538      	push	{r3, r4, r5, lr}
 c0060de:	4604      	mov	r4, r0
 c0060e0:	4d06      	ldr	r5, [pc, #24]	; (c0060fc <_lseek_r+0x20>)
 c0060e2:	4608      	mov	r0, r1
 c0060e4:	4611      	mov	r1, r2
 c0060e6:	2200      	movs	r2, #0
 c0060e8:	602a      	str	r2, [r5, #0]
 c0060ea:	461a      	mov	r2, r3
 c0060ec:	f7fb f9d8 	bl	c0014a0 <_lseek>
 c0060f0:	1c43      	adds	r3, r0, #1
 c0060f2:	d102      	bne.n	c0060fa <_lseek_r+0x1e>
 c0060f4:	682b      	ldr	r3, [r5, #0]
 c0060f6:	b103      	cbz	r3, c0060fa <_lseek_r+0x1e>
 c0060f8:	6023      	str	r3, [r4, #0]
 c0060fa:	bd38      	pop	{r3, r4, r5, pc}
 c0060fc:	30000614 	.word	0x30000614

0c006100 <__swhatbuf_r>:
 c006100:	b570      	push	{r4, r5, r6, lr}
 c006102:	460e      	mov	r6, r1
 c006104:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006108:	b096      	sub	sp, #88	; 0x58
 c00610a:	4614      	mov	r4, r2
 c00610c:	2900      	cmp	r1, #0
 c00610e:	461d      	mov	r5, r3
 c006110:	da08      	bge.n	c006124 <__swhatbuf_r+0x24>
 c006112:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c006116:	2200      	movs	r2, #0
 c006118:	602a      	str	r2, [r5, #0]
 c00611a:	061a      	lsls	r2, r3, #24
 c00611c:	d410      	bmi.n	c006140 <__swhatbuf_r+0x40>
 c00611e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c006122:	e00e      	b.n	c006142 <__swhatbuf_r+0x42>
 c006124:	466a      	mov	r2, sp
 c006126:	f000 f8c9 	bl	c0062bc <_fstat_r>
 c00612a:	2800      	cmp	r0, #0
 c00612c:	dbf1      	blt.n	c006112 <__swhatbuf_r+0x12>
 c00612e:	9a01      	ldr	r2, [sp, #4]
 c006130:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c006134:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c006138:	425a      	negs	r2, r3
 c00613a:	415a      	adcs	r2, r3
 c00613c:	602a      	str	r2, [r5, #0]
 c00613e:	e7ee      	b.n	c00611e <__swhatbuf_r+0x1e>
 c006140:	2340      	movs	r3, #64	; 0x40
 c006142:	2000      	movs	r0, #0
 c006144:	6023      	str	r3, [r4, #0]
 c006146:	b016      	add	sp, #88	; 0x58
 c006148:	bd70      	pop	{r4, r5, r6, pc}
	...

0c00614c <__smakebuf_r>:
 c00614c:	898b      	ldrh	r3, [r1, #12]
 c00614e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c006150:	079d      	lsls	r5, r3, #30
 c006152:	4606      	mov	r6, r0
 c006154:	460c      	mov	r4, r1
 c006156:	d507      	bpl.n	c006168 <__smakebuf_r+0x1c>
 c006158:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c00615c:	6023      	str	r3, [r4, #0]
 c00615e:	6123      	str	r3, [r4, #16]
 c006160:	2301      	movs	r3, #1
 c006162:	6163      	str	r3, [r4, #20]
 c006164:	b002      	add	sp, #8
 c006166:	bd70      	pop	{r4, r5, r6, pc}
 c006168:	ab01      	add	r3, sp, #4
 c00616a:	466a      	mov	r2, sp
 c00616c:	f7ff ffc8 	bl	c006100 <__swhatbuf_r>
 c006170:	9900      	ldr	r1, [sp, #0]
 c006172:	4605      	mov	r5, r0
 c006174:	4630      	mov	r0, r6
 c006176:	f7ff fa57 	bl	c005628 <_malloc_r>
 c00617a:	b948      	cbnz	r0, c006190 <__smakebuf_r+0x44>
 c00617c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c006180:	059a      	lsls	r2, r3, #22
 c006182:	d4ef      	bmi.n	c006164 <__smakebuf_r+0x18>
 c006184:	f023 0303 	bic.w	r3, r3, #3
 c006188:	f043 0302 	orr.w	r3, r3, #2
 c00618c:	81a3      	strh	r3, [r4, #12]
 c00618e:	e7e3      	b.n	c006158 <__smakebuf_r+0xc>
 c006190:	4b0d      	ldr	r3, [pc, #52]	; (c0061c8 <__smakebuf_r+0x7c>)
 c006192:	62b3      	str	r3, [r6, #40]	; 0x28
 c006194:	89a3      	ldrh	r3, [r4, #12]
 c006196:	6020      	str	r0, [r4, #0]
 c006198:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00619c:	6120      	str	r0, [r4, #16]
 c00619e:	81a3      	strh	r3, [r4, #12]
 c0061a0:	9b00      	ldr	r3, [sp, #0]
 c0061a2:	6163      	str	r3, [r4, #20]
 c0061a4:	9b01      	ldr	r3, [sp, #4]
 c0061a6:	b15b      	cbz	r3, c0061c0 <__smakebuf_r+0x74>
 c0061a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0061ac:	4630      	mov	r0, r6
 c0061ae:	f000 f897 	bl	c0062e0 <_isatty_r>
 c0061b2:	b128      	cbz	r0, c0061c0 <__smakebuf_r+0x74>
 c0061b4:	89a3      	ldrh	r3, [r4, #12]
 c0061b6:	f023 0303 	bic.w	r3, r3, #3
 c0061ba:	f043 0301 	orr.w	r3, r3, #1
 c0061be:	81a3      	strh	r3, [r4, #12]
 c0061c0:	89a0      	ldrh	r0, [r4, #12]
 c0061c2:	4305      	orrs	r5, r0
 c0061c4:	81a5      	strh	r5, [r4, #12]
 c0061c6:	e7cd      	b.n	c006164 <__smakebuf_r+0x18>
 c0061c8:	0c005441 	.word	0x0c005441

0c0061cc <memchr>:
 c0061cc:	b2c9      	uxtb	r1, r1
 c0061ce:	4402      	add	r2, r0
 c0061d0:	b510      	push	{r4, lr}
 c0061d2:	4290      	cmp	r0, r2
 c0061d4:	4603      	mov	r3, r0
 c0061d6:	d101      	bne.n	c0061dc <memchr+0x10>
 c0061d8:	2300      	movs	r3, #0
 c0061da:	e003      	b.n	c0061e4 <memchr+0x18>
 c0061dc:	781c      	ldrb	r4, [r3, #0]
 c0061de:	3001      	adds	r0, #1
 c0061e0:	428c      	cmp	r4, r1
 c0061e2:	d1f6      	bne.n	c0061d2 <memchr+0x6>
 c0061e4:	4618      	mov	r0, r3
 c0061e6:	bd10      	pop	{r4, pc}

0c0061e8 <__malloc_lock>:
 c0061e8:	4801      	ldr	r0, [pc, #4]	; (c0061f0 <__malloc_lock+0x8>)
 c0061ea:	f7ff b9fb 	b.w	c0055e4 <__retarget_lock_acquire_recursive>
 c0061ee:	bf00      	nop
 c0061f0:	30000608 	.word	0x30000608

0c0061f4 <__malloc_unlock>:
 c0061f4:	4801      	ldr	r0, [pc, #4]	; (c0061fc <__malloc_unlock+0x8>)
 c0061f6:	f7ff b9f6 	b.w	c0055e6 <__retarget_lock_release_recursive>
 c0061fa:	bf00      	nop
 c0061fc:	30000608 	.word	0x30000608

0c006200 <_free_r>:
 c006200:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c006202:	2900      	cmp	r1, #0
 c006204:	d043      	beq.n	c00628e <_free_r+0x8e>
 c006206:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00620a:	1f0c      	subs	r4, r1, #4
 c00620c:	9001      	str	r0, [sp, #4]
 c00620e:	2b00      	cmp	r3, #0
 c006210:	bfb8      	it	lt
 c006212:	18e4      	addlt	r4, r4, r3
 c006214:	f7ff ffe8 	bl	c0061e8 <__malloc_lock>
 c006218:	4a1e      	ldr	r2, [pc, #120]	; (c006294 <_free_r+0x94>)
 c00621a:	9801      	ldr	r0, [sp, #4]
 c00621c:	6813      	ldr	r3, [r2, #0]
 c00621e:	b933      	cbnz	r3, c00622e <_free_r+0x2e>
 c006220:	6063      	str	r3, [r4, #4]
 c006222:	6014      	str	r4, [r2, #0]
 c006224:	b003      	add	sp, #12
 c006226:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00622a:	f7ff bfe3 	b.w	c0061f4 <__malloc_unlock>
 c00622e:	42a3      	cmp	r3, r4
 c006230:	d908      	bls.n	c006244 <_free_r+0x44>
 c006232:	6825      	ldr	r5, [r4, #0]
 c006234:	1961      	adds	r1, r4, r5
 c006236:	428b      	cmp	r3, r1
 c006238:	bf01      	itttt	eq
 c00623a:	6819      	ldreq	r1, [r3, #0]
 c00623c:	685b      	ldreq	r3, [r3, #4]
 c00623e:	1949      	addeq	r1, r1, r5
 c006240:	6021      	streq	r1, [r4, #0]
 c006242:	e7ed      	b.n	c006220 <_free_r+0x20>
 c006244:	461a      	mov	r2, r3
 c006246:	685b      	ldr	r3, [r3, #4]
 c006248:	b10b      	cbz	r3, c00624e <_free_r+0x4e>
 c00624a:	42a3      	cmp	r3, r4
 c00624c:	d9fa      	bls.n	c006244 <_free_r+0x44>
 c00624e:	6811      	ldr	r1, [r2, #0]
 c006250:	1855      	adds	r5, r2, r1
 c006252:	42a5      	cmp	r5, r4
 c006254:	d10b      	bne.n	c00626e <_free_r+0x6e>
 c006256:	6824      	ldr	r4, [r4, #0]
 c006258:	4421      	add	r1, r4
 c00625a:	1854      	adds	r4, r2, r1
 c00625c:	6011      	str	r1, [r2, #0]
 c00625e:	42a3      	cmp	r3, r4
 c006260:	d1e0      	bne.n	c006224 <_free_r+0x24>
 c006262:	681c      	ldr	r4, [r3, #0]
 c006264:	685b      	ldr	r3, [r3, #4]
 c006266:	4421      	add	r1, r4
 c006268:	6053      	str	r3, [r2, #4]
 c00626a:	6011      	str	r1, [r2, #0]
 c00626c:	e7da      	b.n	c006224 <_free_r+0x24>
 c00626e:	d902      	bls.n	c006276 <_free_r+0x76>
 c006270:	230c      	movs	r3, #12
 c006272:	6003      	str	r3, [r0, #0]
 c006274:	e7d6      	b.n	c006224 <_free_r+0x24>
 c006276:	6825      	ldr	r5, [r4, #0]
 c006278:	1961      	adds	r1, r4, r5
 c00627a:	428b      	cmp	r3, r1
 c00627c:	bf02      	ittt	eq
 c00627e:	6819      	ldreq	r1, [r3, #0]
 c006280:	685b      	ldreq	r3, [r3, #4]
 c006282:	1949      	addeq	r1, r1, r5
 c006284:	6063      	str	r3, [r4, #4]
 c006286:	bf08      	it	eq
 c006288:	6021      	streq	r1, [r4, #0]
 c00628a:	6054      	str	r4, [r2, #4]
 c00628c:	e7ca      	b.n	c006224 <_free_r+0x24>
 c00628e:	b003      	add	sp, #12
 c006290:	bd30      	pop	{r4, r5, pc}
 c006292:	bf00      	nop
 c006294:	3000060c 	.word	0x3000060c

0c006298 <_read_r>:
 c006298:	b538      	push	{r3, r4, r5, lr}
 c00629a:	4604      	mov	r4, r0
 c00629c:	4d06      	ldr	r5, [pc, #24]	; (c0062b8 <_read_r+0x20>)
 c00629e:	4608      	mov	r0, r1
 c0062a0:	4611      	mov	r1, r2
 c0062a2:	2200      	movs	r2, #0
 c0062a4:	602a      	str	r2, [r5, #0]
 c0062a6:	461a      	mov	r2, r3
 c0062a8:	f7fb f89a 	bl	c0013e0 <_read>
 c0062ac:	1c43      	adds	r3, r0, #1
 c0062ae:	d102      	bne.n	c0062b6 <_read_r+0x1e>
 c0062b0:	682b      	ldr	r3, [r5, #0]
 c0062b2:	b103      	cbz	r3, c0062b6 <_read_r+0x1e>
 c0062b4:	6023      	str	r3, [r4, #0]
 c0062b6:	bd38      	pop	{r3, r4, r5, pc}
 c0062b8:	30000614 	.word	0x30000614

0c0062bc <_fstat_r>:
 c0062bc:	b538      	push	{r3, r4, r5, lr}
 c0062be:	2300      	movs	r3, #0
 c0062c0:	4d06      	ldr	r5, [pc, #24]	; (c0062dc <_fstat_r+0x20>)
 c0062c2:	4604      	mov	r4, r0
 c0062c4:	4608      	mov	r0, r1
 c0062c6:	4611      	mov	r1, r2
 c0062c8:	602b      	str	r3, [r5, #0]
 c0062ca:	f7fb f8ce 	bl	c00146a <_fstat>
 c0062ce:	1c43      	adds	r3, r0, #1
 c0062d0:	d102      	bne.n	c0062d8 <_fstat_r+0x1c>
 c0062d2:	682b      	ldr	r3, [r5, #0]
 c0062d4:	b103      	cbz	r3, c0062d8 <_fstat_r+0x1c>
 c0062d6:	6023      	str	r3, [r4, #0]
 c0062d8:	bd38      	pop	{r3, r4, r5, pc}
 c0062da:	bf00      	nop
 c0062dc:	30000614 	.word	0x30000614

0c0062e0 <_isatty_r>:
 c0062e0:	b538      	push	{r3, r4, r5, lr}
 c0062e2:	2300      	movs	r3, #0
 c0062e4:	4d05      	ldr	r5, [pc, #20]	; (c0062fc <_isatty_r+0x1c>)
 c0062e6:	4604      	mov	r4, r0
 c0062e8:	4608      	mov	r0, r1
 c0062ea:	602b      	str	r3, [r5, #0]
 c0062ec:	f7fb f8cd 	bl	c00148a <_isatty>
 c0062f0:	1c43      	adds	r3, r0, #1
 c0062f2:	d102      	bne.n	c0062fa <_isatty_r+0x1a>
 c0062f4:	682b      	ldr	r3, [r5, #0]
 c0062f6:	b103      	cbz	r3, c0062fa <_isatty_r+0x1a>
 c0062f8:	6023      	str	r3, [r4, #0]
 c0062fa:	bd38      	pop	{r3, r4, r5, pc}
 c0062fc:	30000614 	.word	0x30000614

0c006300 <_init>:
 c006300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006302:	bf00      	nop
 c006304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006306:	bc08      	pop	{r3}
 c006308:	469e      	mov	lr, r3
 c00630a:	4770      	bx	lr

0c00630c <_fini>:
 c00630c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00630e:	bf00      	nop
 c006310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c006312:	bc08      	pop	{r3}
 c006314:	469e      	mov	lr, r3
 c006316:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_print_Buffer>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 bf78 	b.w	c000ef8 <__acle_se_SECURE_print_Buffer>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 bbd2 	b.w	c0017b4 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <SECURE_DMA_NonSecure_Mem_Transfer>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 be7e 	b.w	c000d14 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer>

0c03e018 <SECURE_RegisterCallback>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c3 b818 	b.w	c001050 <__acle_se_SECURE_RegisterCallback>

0c03e020 <SECURE_DMA_Fetch_NonSecure_Mem>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c2 be10 	b.w	c000c48 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>

0c03e028 <SECURE_DATA_Last_Buffer_Compare>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c2 bee8 	b.w	c000e00 <__acle_se_SECURE_DATA_Last_Buffer_Compare>

0c03e030 <SECURE_print_Log>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c2 bfcc 	b.w	c000fd0 <__acle_se_SECURE_print_Log>
	...
