
SPI_based_memory_acquisition_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007888  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000c28  0c007a7c  0c007a7c  00017a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0086a4  0c0086a4  0002e080  2**0
                  CONTENTS
  4 .ARM          00000008  0c0086a4  0c0086a4  000186a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0086ac  0c0086ac  0002e080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0086ac  0c0086ac  000186ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0086b0  0c0086b0  000186b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  30000000  0c0086b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000080  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000ae4  300000a8  300000a8  000300a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  30000b8c  30000b8c  000300a8  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e080  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013a2c  00000000  00000000  0002e0b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000029fb  00000000  00000000  00041ae2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f98  00000000  00000000  000444e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00045478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a77b  00000000  00000000  00046328  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000135c9  00000000  00000000  00070aa3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b2c5  00000000  00000000  0008406c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018f331  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000040e8  00000000  00000000  0018f384  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	300000a8 	.word	0x300000a8
 c000210:	00000000 	.word	0x00000000
 c000214:	0c007a64 	.word	0x0c007a64

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	300000ac 	.word	0x300000ac
 c000230:	0c007a64 	.word	0x0c007a64

0c000234 <cmse_check_address_range>:
 c000234:	43c3      	mvns	r3, r0
 c000236:	428b      	cmp	r3, r1
 c000238:	d36d      	bcc.n	c000316 <cmse_check_address_range+0xe2>
 c00023a:	f032 031f 	bics.w	r3, r2, #31
 c00023e:	d16a      	bne.n	c000316 <cmse_check_address_range+0xe2>
 c000240:	3901      	subs	r1, #1
 c000242:	f002 0314 	and.w	r3, r2, #20
 c000246:	4401      	add	r1, r0
 c000248:	b500      	push	{lr}
 c00024a:	ea81 0c00 	eor.w	ip, r1, r0
 c00024e:	2b14      	cmp	r3, #20
 c000250:	d80e      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000252:	e8df f003 	tbb	[pc, r3]
 c000256:	0d3f      	.short	0x0d3f
 c000258:	0d480d0d 	.word	0x0d480d0d
 c00025c:	0d0d0d0d 	.word	0x0d0d0d0d
 c000260:	0d0d0d0d 	.word	0x0d0d0d0d
 c000264:	0d510d0d 	.word	0x0d510d0d
 c000268:	0d0d      	.short	0x0d0d
 c00026a:	10          	.byte	0x10
 c00026b:	00          	.byte	0x00
 c00026c:	02db      	lsls	r3, r3, #11
 c00026e:	d400      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c000270:	2000      	movs	r0, #0
 c000272:	f85d fb04 	ldr.w	pc, [sp], #4
 c000276:	f1bc 0f1f 	cmp.w	ip, #31
 c00027a:	e840 f3c0 	ttat	r3, r0
 c00027e:	d904      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000280:	469c      	mov	ip, r3
 c000282:	e841 f3c0 	ttat	r3, r1
 c000286:	459c      	cmp	ip, r3
 c000288:	d1f2      	bne.n	c000270 <cmse_check_address_range+0x3c>
 c00028a:	f022 0214 	bic.w	r2, r2, #20
 c00028e:	3a01      	subs	r2, #1
 c000290:	2a0a      	cmp	r2, #10
 c000292:	d8ed      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000294:	a101      	add	r1, pc, #4	; (adr r1, c00029c <cmse_check_address_range+0x68>)
 c000296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00029a:	bf00      	nop
 c00029c:	0c0002cf 	.word	0x0c0002cf
 c0002a0:	0c000311 	.word	0x0c000311
 c0002a4:	0c0002c9 	.word	0x0c0002c9
 c0002a8:	0c000271 	.word	0x0c000271
 c0002ac:	0c000271 	.word	0x0c000271
 c0002b0:	0c000271 	.word	0x0c000271
 c0002b4:	0c000271 	.word	0x0c000271
 c0002b8:	0c00030b 	.word	0x0c00030b
 c0002bc:	0c0002cf 	.word	0x0c0002cf
 c0002c0:	0c00026d 	.word	0x0c00026d
 c0002c4:	0c0002c9 	.word	0x0c0002c9
 c0002c8:	029a      	lsls	r2, r3, #10
 c0002ca:	d4d2      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002cc:	e7d0      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002ce:	031a      	lsls	r2, r3, #12
 c0002d0:	d4cf      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002d2:	e7cd      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002d4:	f1bc 0f1f 	cmp.w	ip, #31
 c0002d8:	e840 f300 	tt	r3, r0
 c0002dc:	d9d5      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002de:	469c      	mov	ip, r3
 c0002e0:	e841 f300 	tt	r3, r1
 c0002e4:	e7cf      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002e6:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ea:	e840 f340 	ttt	r3, r0
 c0002ee:	d9cc      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002f0:	469c      	mov	ip, r3
 c0002f2:	e841 f340 	ttt	r3, r1
 c0002f6:	e7c6      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002f8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fc:	e840 f380 	tta	r3, r0
 c000300:	d9c3      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000302:	469c      	mov	ip, r3
 c000304:	e841 f380 	tta	r3, r1
 c000308:	e7bd      	b.n	c000286 <cmse_check_address_range+0x52>
 c00030a:	035b      	lsls	r3, r3, #13
 c00030c:	d5b0      	bpl.n	c000270 <cmse_check_address_range+0x3c>
 c00030e:	e7b0      	b.n	c000272 <cmse_check_address_range+0x3e>
 c000310:	0259      	lsls	r1, r3, #9
 c000312:	d5ae      	bpl.n	c000272 <cmse_check_address_range+0x3e>
 c000314:	e7ac      	b.n	c000270 <cmse_check_address_range+0x3c>
 c000316:	2000      	movs	r0, #0
 c000318:	4770      	bx	lr
 c00031a:	bf00      	nop

0c00031c <__gnu_cmse_nonsecure_call>:
 c00031c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000320:	4627      	mov	r7, r4
 c000322:	46a0      	mov	r8, r4
 c000324:	46a1      	mov	r9, r4
 c000326:	46a2      	mov	sl, r4
 c000328:	46a3      	mov	fp, r4
 c00032a:	46a4      	mov	ip, r4
 c00032c:	ed2d 8b10 	vpush	{d8-d15}
 c000330:	f04f 0500 	mov.w	r5, #0
 c000334:	ec45 5b18 	vmov	d8, r5, r5
 c000338:	ec45 5a19 	vmov	s18, s19, r5, r5
 c00033c:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000340:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000344:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000348:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c00034c:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000350:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000354:	eef1 5a10 	vmrs	r5, fpscr
 c000358:	f64f 7660 	movw	r6, #65376	; 0xff60
 c00035c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000360:	4035      	ands	r5, r6
 c000362:	eee1 5a10 	vmsr	fpscr, r5
 c000366:	f384 8800 	msr	CPSR_f, r4
 c00036a:	4625      	mov	r5, r4
 c00036c:	4626      	mov	r6, r4
 c00036e:	47a4      	blxns	r4
 c000370:	ecbd 8b10 	vpop	{d8-d15}
 c000374:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000378 <__aeabi_uldivmod>:
 c000378:	b953      	cbnz	r3, c000390 <__aeabi_uldivmod+0x18>
 c00037a:	b94a      	cbnz	r2, c000390 <__aeabi_uldivmod+0x18>
 c00037c:	2900      	cmp	r1, #0
 c00037e:	bf08      	it	eq
 c000380:	2800      	cmpeq	r0, #0
 c000382:	bf1c      	itt	ne
 c000384:	f04f 31ff 	movne.w	r1, #4294967295
 c000388:	f04f 30ff 	movne.w	r0, #4294967295
 c00038c:	f000 b982 	b.w	c000694 <__aeabi_idiv0>
 c000390:	f1ad 0c08 	sub.w	ip, sp, #8
 c000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000398:	f000 f806 	bl	c0003a8 <__udivmoddi4>
 c00039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0003a4:	b004      	add	sp, #16
 c0003a6:	4770      	bx	lr

0c0003a8 <__udivmoddi4>:
 c0003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0003ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0003ae:	4604      	mov	r4, r0
 c0003b0:	460f      	mov	r7, r1
 c0003b2:	2b00      	cmp	r3, #0
 c0003b4:	d148      	bne.n	c000448 <__udivmoddi4+0xa0>
 c0003b6:	428a      	cmp	r2, r1
 c0003b8:	4694      	mov	ip, r2
 c0003ba:	d961      	bls.n	c000480 <__udivmoddi4+0xd8>
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	b143      	cbz	r3, c0003d4 <__udivmoddi4+0x2c>
 c0003c2:	f1c3 0120 	rsb	r1, r3, #32
 c0003c6:	409f      	lsls	r7, r3
 c0003c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0003cc:	409c      	lsls	r4, r3
 c0003ce:	fa20 f101 	lsr.w	r1, r0, r1
 c0003d2:	430f      	orrs	r7, r1
 c0003d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c0003d8:	fa1f fe8c 	uxth.w	lr, ip
 c0003dc:	0c22      	lsrs	r2, r4, #16
 c0003de:	fbb7 f6f1 	udiv	r6, r7, r1
 c0003e2:	fb01 7716 	mls	r7, r1, r6, r7
 c0003e6:	fb06 f00e 	mul.w	r0, r6, lr
 c0003ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0003ee:	4290      	cmp	r0, r2
 c0003f0:	d908      	bls.n	c000404 <__udivmoddi4+0x5c>
 c0003f2:	eb1c 0202 	adds.w	r2, ip, r2
 c0003f6:	f106 37ff 	add.w	r7, r6, #4294967295
 c0003fa:	d202      	bcs.n	c000402 <__udivmoddi4+0x5a>
 c0003fc:	4290      	cmp	r0, r2
 c0003fe:	f200 8137 	bhi.w	c000670 <__udivmoddi4+0x2c8>
 c000402:	463e      	mov	r6, r7
 c000404:	1a12      	subs	r2, r2, r0
 c000406:	b2a4      	uxth	r4, r4
 c000408:	fbb2 f0f1 	udiv	r0, r2, r1
 c00040c:	fb01 2210 	mls	r2, r1, r0, r2
 c000410:	fb00 fe0e 	mul.w	lr, r0, lr
 c000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000418:	45a6      	cmp	lr, r4
 c00041a:	d908      	bls.n	c00042e <__udivmoddi4+0x86>
 c00041c:	eb1c 0404 	adds.w	r4, ip, r4
 c000420:	f100 32ff 	add.w	r2, r0, #4294967295
 c000424:	d202      	bcs.n	c00042c <__udivmoddi4+0x84>
 c000426:	45a6      	cmp	lr, r4
 c000428:	f200 811c 	bhi.w	c000664 <__udivmoddi4+0x2bc>
 c00042c:	4610      	mov	r0, r2
 c00042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000432:	eba4 040e 	sub.w	r4, r4, lr
 c000436:	2600      	movs	r6, #0
 c000438:	b11d      	cbz	r5, c000442 <__udivmoddi4+0x9a>
 c00043a:	40dc      	lsrs	r4, r3
 c00043c:	2300      	movs	r3, #0
 c00043e:	e9c5 4300 	strd	r4, r3, [r5]
 c000442:	4631      	mov	r1, r6
 c000444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000448:	428b      	cmp	r3, r1
 c00044a:	d909      	bls.n	c000460 <__udivmoddi4+0xb8>
 c00044c:	2d00      	cmp	r5, #0
 c00044e:	f000 80fd 	beq.w	c00064c <__udivmoddi4+0x2a4>
 c000452:	2600      	movs	r6, #0
 c000454:	e9c5 0100 	strd	r0, r1, [r5]
 c000458:	4630      	mov	r0, r6
 c00045a:	4631      	mov	r1, r6
 c00045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000460:	fab3 f683 	clz	r6, r3
 c000464:	2e00      	cmp	r6, #0
 c000466:	d14b      	bne.n	c000500 <__udivmoddi4+0x158>
 c000468:	428b      	cmp	r3, r1
 c00046a:	f0c0 80f2 	bcc.w	c000652 <__udivmoddi4+0x2aa>
 c00046e:	4282      	cmp	r2, r0
 c000470:	f240 80ef 	bls.w	c000652 <__udivmoddi4+0x2aa>
 c000474:	4630      	mov	r0, r6
 c000476:	2d00      	cmp	r5, #0
 c000478:	d0e3      	beq.n	c000442 <__udivmoddi4+0x9a>
 c00047a:	e9c5 4700 	strd	r4, r7, [r5]
 c00047e:	e7e0      	b.n	c000442 <__udivmoddi4+0x9a>
 c000480:	b902      	cbnz	r2, c000484 <__udivmoddi4+0xdc>
 c000482:	deff      	udf	#255	; 0xff
 c000484:	fab2 f382 	clz	r3, r2
 c000488:	2b00      	cmp	r3, #0
 c00048a:	f040 809d 	bne.w	c0005c8 <__udivmoddi4+0x220>
 c00048e:	1a89      	subs	r1, r1, r2
 c000490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000494:	b297      	uxth	r7, r2
 c000496:	2601      	movs	r6, #1
 c000498:	0c20      	lsrs	r0, r4, #16
 c00049a:	fbb1 f2fe 	udiv	r2, r1, lr
 c00049e:	fb0e 1112 	mls	r1, lr, r2, r1
 c0004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0004a6:	fb07 f002 	mul.w	r0, r7, r2
 c0004aa:	4288      	cmp	r0, r1
 c0004ac:	d90f      	bls.n	c0004ce <__udivmoddi4+0x126>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f102 38ff 	add.w	r8, r2, #4294967295
 c0004b6:	bf2c      	ite	cs
 c0004b8:	f04f 0901 	movcs.w	r9, #1
 c0004bc:	f04f 0900 	movcc.w	r9, #0
 c0004c0:	4288      	cmp	r0, r1
 c0004c2:	d903      	bls.n	c0004cc <__udivmoddi4+0x124>
 c0004c4:	f1b9 0f00 	cmp.w	r9, #0
 c0004c8:	f000 80cf 	beq.w	c00066a <__udivmoddi4+0x2c2>
 c0004cc:	4642      	mov	r2, r8
 c0004ce:	1a09      	subs	r1, r1, r0
 c0004d0:	b2a4      	uxth	r4, r4
 c0004d2:	fbb1 f0fe 	udiv	r0, r1, lr
 c0004d6:	fb0e 1110 	mls	r1, lr, r0, r1
 c0004da:	fb00 f707 	mul.w	r7, r0, r7
 c0004de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c0004e2:	42a7      	cmp	r7, r4
 c0004e4:	d908      	bls.n	c0004f8 <__udivmoddi4+0x150>
 c0004e6:	eb1c 0404 	adds.w	r4, ip, r4
 c0004ea:	f100 31ff 	add.w	r1, r0, #4294967295
 c0004ee:	d202      	bcs.n	c0004f6 <__udivmoddi4+0x14e>
 c0004f0:	42a7      	cmp	r7, r4
 c0004f2:	f200 80b4 	bhi.w	c00065e <__udivmoddi4+0x2b6>
 c0004f6:	4608      	mov	r0, r1
 c0004f8:	1be4      	subs	r4, r4, r7
 c0004fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0004fe:	e79b      	b.n	c000438 <__udivmoddi4+0x90>
 c000500:	f1c6 0720 	rsb	r7, r6, #32
 c000504:	40b3      	lsls	r3, r6
 c000506:	fa01 f406 	lsl.w	r4, r1, r6
 c00050a:	fa22 fc07 	lsr.w	ip, r2, r7
 c00050e:	40f9      	lsrs	r1, r7
 c000510:	40b2      	lsls	r2, r6
 c000512:	ea4c 0c03 	orr.w	ip, ip, r3
 c000516:	fa20 f307 	lsr.w	r3, r0, r7
 c00051a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00051e:	431c      	orrs	r4, r3
 c000520:	fa1f fe8c 	uxth.w	lr, ip
 c000524:	fa00 f306 	lsl.w	r3, r0, r6
 c000528:	0c20      	lsrs	r0, r4, #16
 c00052a:	fbb1 f8f9 	udiv	r8, r1, r9
 c00052e:	fb09 1118 	mls	r1, r9, r8, r1
 c000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000536:	fb08 f00e 	mul.w	r0, r8, lr
 c00053a:	4288      	cmp	r0, r1
 c00053c:	d90f      	bls.n	c00055e <__udivmoddi4+0x1b6>
 c00053e:	eb1c 0101 	adds.w	r1, ip, r1
 c000542:	f108 3aff 	add.w	sl, r8, #4294967295
 c000546:	bf2c      	ite	cs
 c000548:	f04f 0b01 	movcs.w	fp, #1
 c00054c:	f04f 0b00 	movcc.w	fp, #0
 c000550:	4288      	cmp	r0, r1
 c000552:	d903      	bls.n	c00055c <__udivmoddi4+0x1b4>
 c000554:	f1bb 0f00 	cmp.w	fp, #0
 c000558:	f000 808d 	beq.w	c000676 <__udivmoddi4+0x2ce>
 c00055c:	46d0      	mov	r8, sl
 c00055e:	1a09      	subs	r1, r1, r0
 c000560:	b2a4      	uxth	r4, r4
 c000562:	fbb1 f0f9 	udiv	r0, r1, r9
 c000566:	fb09 1110 	mls	r1, r9, r0, r1
 c00056a:	fb00 fe0e 	mul.w	lr, r0, lr
 c00056e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000572:	458e      	cmp	lr, r1
 c000574:	d907      	bls.n	c000586 <__udivmoddi4+0x1de>
 c000576:	eb1c 0101 	adds.w	r1, ip, r1
 c00057a:	f100 34ff 	add.w	r4, r0, #4294967295
 c00057e:	d201      	bcs.n	c000584 <__udivmoddi4+0x1dc>
 c000580:	458e      	cmp	lr, r1
 c000582:	d87f      	bhi.n	c000684 <__udivmoddi4+0x2dc>
 c000584:	4620      	mov	r0, r4
 c000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c00058a:	eba1 010e 	sub.w	r1, r1, lr
 c00058e:	fba0 9802 	umull	r9, r8, r0, r2
 c000592:	4541      	cmp	r1, r8
 c000594:	464c      	mov	r4, r9
 c000596:	46c6      	mov	lr, r8
 c000598:	d302      	bcc.n	c0005a0 <__udivmoddi4+0x1f8>
 c00059a:	d106      	bne.n	c0005aa <__udivmoddi4+0x202>
 c00059c:	454b      	cmp	r3, r9
 c00059e:	d204      	bcs.n	c0005aa <__udivmoddi4+0x202>
 c0005a0:	3801      	subs	r0, #1
 c0005a2:	ebb9 0402 	subs.w	r4, r9, r2
 c0005a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0005aa:	2d00      	cmp	r5, #0
 c0005ac:	d070      	beq.n	c000690 <__udivmoddi4+0x2e8>
 c0005ae:	1b1a      	subs	r2, r3, r4
 c0005b0:	eb61 010e 	sbc.w	r1, r1, lr
 c0005b4:	fa22 f306 	lsr.w	r3, r2, r6
 c0005b8:	fa01 f707 	lsl.w	r7, r1, r7
 c0005bc:	40f1      	lsrs	r1, r6
 c0005be:	2600      	movs	r6, #0
 c0005c0:	431f      	orrs	r7, r3
 c0005c2:	e9c5 7100 	strd	r7, r1, [r5]
 c0005c6:	e73c      	b.n	c000442 <__udivmoddi4+0x9a>
 c0005c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0005cc:	f1c3 0020 	rsb	r0, r3, #32
 c0005d0:	fa01 f203 	lsl.w	r2, r1, r3
 c0005d4:	fa21 f600 	lsr.w	r6, r1, r0
 c0005d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c0005dc:	fa24 f100 	lsr.w	r1, r4, r0
 c0005e0:	fa1f f78c 	uxth.w	r7, ip
 c0005e4:	409c      	lsls	r4, r3
 c0005e6:	4311      	orrs	r1, r2
 c0005e8:	fbb6 f0fe 	udiv	r0, r6, lr
 c0005ec:	0c0a      	lsrs	r2, r1, #16
 c0005ee:	fb0e 6610 	mls	r6, lr, r0, r6
 c0005f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0005f6:	fb00 f607 	mul.w	r6, r0, r7
 c0005fa:	4296      	cmp	r6, r2
 c0005fc:	d90e      	bls.n	c00061c <__udivmoddi4+0x274>
 c0005fe:	eb1c 0202 	adds.w	r2, ip, r2
 c000602:	f100 38ff 	add.w	r8, r0, #4294967295
 c000606:	bf2c      	ite	cs
 c000608:	f04f 0901 	movcs.w	r9, #1
 c00060c:	f04f 0900 	movcc.w	r9, #0
 c000610:	4296      	cmp	r6, r2
 c000612:	d902      	bls.n	c00061a <__udivmoddi4+0x272>
 c000614:	f1b9 0f00 	cmp.w	r9, #0
 c000618:	d031      	beq.n	c00067e <__udivmoddi4+0x2d6>
 c00061a:	4640      	mov	r0, r8
 c00061c:	1b92      	subs	r2, r2, r6
 c00061e:	b289      	uxth	r1, r1
 c000620:	fbb2 f6fe 	udiv	r6, r2, lr
 c000624:	fb0e 2216 	mls	r2, lr, r6, r2
 c000628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c00062c:	fb06 f207 	mul.w	r2, r6, r7
 c000630:	428a      	cmp	r2, r1
 c000632:	d907      	bls.n	c000644 <__udivmoddi4+0x29c>
 c000634:	eb1c 0101 	adds.w	r1, ip, r1
 c000638:	f106 38ff 	add.w	r8, r6, #4294967295
 c00063c:	d201      	bcs.n	c000642 <__udivmoddi4+0x29a>
 c00063e:	428a      	cmp	r2, r1
 c000640:	d823      	bhi.n	c00068a <__udivmoddi4+0x2e2>
 c000642:	4646      	mov	r6, r8
 c000644:	1a89      	subs	r1, r1, r2
 c000646:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c00064a:	e725      	b.n	c000498 <__udivmoddi4+0xf0>
 c00064c:	462e      	mov	r6, r5
 c00064e:	4628      	mov	r0, r5
 c000650:	e6f7      	b.n	c000442 <__udivmoddi4+0x9a>
 c000652:	1a84      	subs	r4, r0, r2
 c000654:	eb61 0303 	sbc.w	r3, r1, r3
 c000658:	2001      	movs	r0, #1
 c00065a:	461f      	mov	r7, r3
 c00065c:	e70b      	b.n	c000476 <__udivmoddi4+0xce>
 c00065e:	4464      	add	r4, ip
 c000660:	3802      	subs	r0, #2
 c000662:	e749      	b.n	c0004f8 <__udivmoddi4+0x150>
 c000664:	4464      	add	r4, ip
 c000666:	3802      	subs	r0, #2
 c000668:	e6e1      	b.n	c00042e <__udivmoddi4+0x86>
 c00066a:	3a02      	subs	r2, #2
 c00066c:	4461      	add	r1, ip
 c00066e:	e72e      	b.n	c0004ce <__udivmoddi4+0x126>
 c000670:	3e02      	subs	r6, #2
 c000672:	4462      	add	r2, ip
 c000674:	e6c6      	b.n	c000404 <__udivmoddi4+0x5c>
 c000676:	f1a8 0802 	sub.w	r8, r8, #2
 c00067a:	4461      	add	r1, ip
 c00067c:	e76f      	b.n	c00055e <__udivmoddi4+0x1b6>
 c00067e:	3802      	subs	r0, #2
 c000680:	4462      	add	r2, ip
 c000682:	e7cb      	b.n	c00061c <__udivmoddi4+0x274>
 c000684:	3802      	subs	r0, #2
 c000686:	4461      	add	r1, ip
 c000688:	e77d      	b.n	c000586 <__udivmoddi4+0x1de>
 c00068a:	3e02      	subs	r6, #2
 c00068c:	4461      	add	r1, ip
 c00068e:	e7d9      	b.n	c000644 <__udivmoddi4+0x29c>
 c000690:	462e      	mov	r6, r5
 c000692:	e6d6      	b.n	c000442 <__udivmoddi4+0x9a>

0c000694 <__aeabi_idiv0>:
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop

0c000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000698:	b580      	push	{r7, lr}
 c00069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00069c:	f001 fda7 	bl	c0021ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006a0:	f000 f874 	bl	c00078c <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006a4:	f000 f8c4 	bl	c000830 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006a8:	f000 face 	bl	c000c48 <MX_GPIO_Init>
  MX_DMA_Init();
 c0006ac:	f000 f9ee 	bl	c000a8c <MX_DMA_Init>
  MX_ICACHE_Init();
 c0006b0:	f000 f94c 	bl	c00094c <MX_ICACHE_Init>
  MX_SPI3_Init();
 c0006b4:	f000 f95e 	bl	c000974 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 c0006b8:	f000 f99a 	bl	c0009f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //register callbacks
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToSecureTransferComplete);
 c0006bc:	4a0b      	ldr	r2, [pc, #44]	; (c0006ec <main+0x54>)
 c0006be:	2100      	movs	r1, #0
 c0006c0:	480b      	ldr	r0, [pc, #44]	; (c0006f0 <main+0x58>)
 c0006c2:	f002 f93f 	bl	c002944 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToSecureTransferError);
 c0006c6:	4a0b      	ldr	r2, [pc, #44]	; (c0006f4 <main+0x5c>)
 c0006c8:	2104      	movs	r1, #4
 c0006ca:	4809      	ldr	r0, [pc, #36]	; (c0006f0 <main+0x58>)
 c0006cc:	f002 f93a 	bl	c002944 <HAL_DMA_RegisterCallback>
  //these are non-secure to non-secure transfer callbacks; may be able to delete in future
  //HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToNonSecureTransferComplete);
  //HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToNonSecureTransferError);
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel5, HAL_DMA_XFER_CPLT_CB_ID, SecureToSecureTransferComplete);
 c0006d0:	4a09      	ldr	r2, [pc, #36]	; (c0006f8 <main+0x60>)
 c0006d2:	2100      	movs	r1, #0
 c0006d4:	4809      	ldr	r0, [pc, #36]	; (c0006fc <main+0x64>)
 c0006d6:	f002 f935 	bl	c002944 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel5, HAL_DMA_XFER_ERROR_CB_ID, SecureToSecureTransferError);
 c0006da:	4a09      	ldr	r2, [pc, #36]	; (c000700 <main+0x68>)
 c0006dc:	2104      	movs	r1, #4
 c0006de:	4807      	ldr	r0, [pc, #28]	; (c0006fc <main+0x64>)
 c0006e0:	f002 f930 	bl	c002944 <HAL_DMA_RegisterCallback>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0006e4:	f000 f80e 	bl	c000704 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0006e8:	e7fe      	b.n	c0006e8 <main+0x50>
 c0006ea:	bf00      	nop
 c0006ec:	0c0018b9 	.word	0x0c0018b9
 c0006f0:	30000290 	.word	0x30000290
 c0006f4:	0c001939 	.word	0x0c001939
 c0006f8:	0c000e2d 	.word	0x0c000e2d
 c0006fc:	300002f8 	.word	0x300002f8
 c000700:	0c000e4d 	.word	0x0c000e4d

0c000704 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000704:	b590      	push	{r4, r7, lr}
 c000706:	b083      	sub	sp, #12
 c000708:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00070a:	4b1d      	ldr	r3, [pc, #116]	; (c000780 <NonSecure_Init+0x7c>)
 c00070c:	4a1d      	ldr	r2, [pc, #116]	; (c000784 <NonSecure_Init+0x80>)
 c00070e:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000710:	4b1c      	ldr	r3, [pc, #112]	; (c000784 <NonSecure_Init+0x80>)
 c000712:	681b      	ldr	r3, [r3, #0]
 c000714:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000716:	683b      	ldr	r3, [r7, #0]
 c000718:	f383 8888 	msr	MSP_NS, r3
}
 c00071c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00071e:	4b1a      	ldr	r3, [pc, #104]	; (c000788 <NonSecure_Init+0x84>)
 c000720:	681b      	ldr	r3, [r3, #0]
 c000722:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000724:	687b      	ldr	r3, [r7, #4]
 c000726:	461c      	mov	r4, r3
 c000728:	0864      	lsrs	r4, r4, #1
 c00072a:	0064      	lsls	r4, r4, #1
 c00072c:	4620      	mov	r0, r4
 c00072e:	4621      	mov	r1, r4
 c000730:	4622      	mov	r2, r4
 c000732:	4623      	mov	r3, r4
 c000734:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000738:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00073c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000740:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000744:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000748:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00074c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000750:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000754:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000758:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00075c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000760:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000764:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00076c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000770:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000774:	f7ff fdd2 	bl	c00031c <__gnu_cmse_nonsecure_call>
}
 c000778:	bf00      	nop
 c00077a:	370c      	adds	r7, #12
 c00077c:	46bd      	mov	sp, r7
 c00077e:	bd90      	pop	{r4, r7, pc}
 c000780:	e002ed00 	.word	0xe002ed00
 c000784:	08040000 	.word	0x08040000
 c000788:	08040004 	.word	0x08040004

0c00078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c00078c:	b580      	push	{r7, lr}
 c00078e:	b098      	sub	sp, #96	; 0x60
 c000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000792:	f107 0318 	add.w	r3, r7, #24
 c000796:	2248      	movs	r2, #72	; 0x48
 c000798:	2100      	movs	r1, #0
 c00079a:	4618      	mov	r0, r3
 c00079c:	f006 f9bd 	bl	c006b1a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0007a0:	1d3b      	adds	r3, r7, #4
 c0007a2:	2200      	movs	r2, #0
 c0007a4:	601a      	str	r2, [r3, #0]
 c0007a6:	605a      	str	r2, [r3, #4]
 c0007a8:	609a      	str	r2, [r3, #8]
 c0007aa:	60da      	str	r2, [r3, #12]
 c0007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0007ae:	2000      	movs	r0, #0
 c0007b0:	f002 fdae 	bl	c003310 <HAL_PWREx_ControlVoltageScaling>
 c0007b4:	4603      	mov	r3, r0
 c0007b6:	2b00      	cmp	r3, #0
 c0007b8:	d001      	beq.n	c0007be <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0007ba:	f000 fb51 	bl	c000e60 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0007be:	2310      	movs	r3, #16
 c0007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0007c2:	2301      	movs	r3, #1
 c0007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0007c6:	2300      	movs	r3, #0
 c0007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0007ca:	23b0      	movs	r3, #176	; 0xb0
 c0007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0007ce:	2302      	movs	r3, #2
 c0007d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0007d2:	2301      	movs	r3, #1
 c0007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0007d6:	230c      	movs	r3, #12
 c0007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0007da:	2337      	movs	r3, #55	; 0x37
 c0007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0007de:	2307      	movs	r3, #7
 c0007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0007e2:	2302      	movs	r3, #2
 c0007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0007e6:	2302      	movs	r3, #2
 c0007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0007ea:	f107 0318 	add.w	r3, r7, #24
 c0007ee:	4618      	mov	r0, r3
 c0007f0:	f002 fe2e 	bl	c003450 <HAL_RCC_OscConfig>
 c0007f4:	4603      	mov	r3, r0
 c0007f6:	2b00      	cmp	r3, #0
 c0007f8:	d001      	beq.n	c0007fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 c0007fa:	f000 fb31 	bl	c000e60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0007fe:	230f      	movs	r3, #15
 c000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000802:	2303      	movs	r3, #3
 c000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c000806:	2300      	movs	r3, #0
 c000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c00080a:	2300      	movs	r3, #0
 c00080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c00080e:	2300      	movs	r3, #0
 c000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000812:	1d3b      	adds	r3, r7, #4
 c000814:	2105      	movs	r1, #5
 c000816:	4618      	mov	r0, r3
 c000818:	f003 faf0 	bl	c003dfc <HAL_RCC_ClockConfig>
 c00081c:	4603      	mov	r3, r0
 c00081e:	2b00      	cmp	r3, #0
 c000820:	d001      	beq.n	c000826 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c000822:	f000 fb1d 	bl	c000e60 <Error_Handler>
  }
}
 c000826:	bf00      	nop
 c000828:	3760      	adds	r7, #96	; 0x60
 c00082a:	46bd      	mov	sp, r7
 c00082c:	bd80      	pop	{r7, pc}
	...

0c000830 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000830:	b580      	push	{r7, lr}
 c000832:	b09c      	sub	sp, #112	; 0x70
 c000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000836:	1d3b      	adds	r3, r7, #4
 c000838:	226c      	movs	r2, #108	; 0x6c
 c00083a:	2100      	movs	r1, #0
 c00083c:	4618      	mov	r0, r3
 c00083e:	f006 f96c 	bl	c006b1a <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000842:	f240 3101 	movw	r1, #769	; 0x301
 c000846:	2009      	movs	r0, #9
 c000848:	f002 fbc8 	bl	c002fdc <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00084c:	4603      	mov	r3, r0
 c00084e:	2b00      	cmp	r3, #0
 c000850:	d001      	beq.n	c000856 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c000852:	f000 fb05 	bl	c000e60 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000856:	f240 3101 	movw	r1, #769	; 0x301
 c00085a:	483a      	ldr	r0, [pc, #232]	; (c000944 <MX_GTZC_S_Init+0x114>)
 c00085c:	f002 fbbe 	bl	c002fdc <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000860:	4603      	mov	r3, r0
 c000862:	2b00      	cmp	r3, #0
 c000864:	d001      	beq.n	c00086a <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c000866:	f000 fafb 	bl	c000e60 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00086a:	2300      	movs	r3, #0
 c00086c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00086e:	2300      	movs	r3, #0
 c000870:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000872:	f04f 33ff 	mov.w	r3, #4294967295
 c000876:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000878:	f04f 33ff 	mov.w	r3, #4294967295
 c00087c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00087e:	f04f 33ff 	mov.w	r3, #4294967295
 c000882:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000884:	f04f 33ff 	mov.w	r3, #4294967295
 c000888:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c00088a:	f04f 33ff 	mov.w	r3, #4294967295
 c00088e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000890:	f04f 33ff 	mov.w	r3, #4294967295
 c000894:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000896:	f04f 33ff 	mov.w	r3, #4294967295
 c00089a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00089c:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0008a2:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0008a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0008ac:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0008ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0008b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0008ba:	2300      	movs	r3, #0
 c0008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0008be:	2300      	movs	r3, #0
 c0008c0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0008c2:	2300      	movs	r3, #0
 c0008c4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0008c6:	2300      	movs	r3, #0
 c0008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0008ca:	2300      	movs	r3, #0
 c0008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0008ce:	2300      	movs	r3, #0
 c0008d0:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0008d2:	2300      	movs	r3, #0
 c0008d4:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0008d6:	2300      	movs	r3, #0
 c0008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0008da:	2300      	movs	r3, #0
 c0008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0008de:	2300      	movs	r3, #0
 c0008e0:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0008e2:	2300      	movs	r3, #0
 c0008e4:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0008e6:	2300      	movs	r3, #0
 c0008e8:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0008ea:	2300      	movs	r3, #0
 c0008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0008ee:	1d3b      	adds	r3, r7, #4
 c0008f0:	4619      	mov	r1, r3
 c0008f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0008f6:	f002 fc49 	bl	c00318c <HAL_GTZC_MPCBB_ConfigMem>
 c0008fa:	4603      	mov	r3, r0
 c0008fc:	2b00      	cmp	r3, #0
 c0008fe:	d001      	beq.n	c000904 <MX_GTZC_S_Init+0xd4>
  {
    Error_Handler();
 c000900:	f000 faae 	bl	c000e60 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000904:	2300      	movs	r3, #0
 c000906:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000908:	2300      	movs	r3, #0
 c00090a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00090c:	2300      	movs	r3, #0
 c00090e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000910:	2300      	movs	r3, #0
 c000912:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000914:	2300      	movs	r3, #0
 c000916:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000918:	2300      	movs	r3, #0
 c00091a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00091c:	2300      	movs	r3, #0
 c00091e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000920:	2300      	movs	r3, #0
 c000922:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000924:	2300      	movs	r3, #0
 c000926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000928:	1d3b      	adds	r3, r7, #4
 c00092a:	4619      	mov	r1, r3
 c00092c:	4806      	ldr	r0, [pc, #24]	; (c000948 <MX_GTZC_S_Init+0x118>)
 c00092e:	f002 fc2d 	bl	c00318c <HAL_GTZC_MPCBB_ConfigMem>
 c000932:	4603      	mov	r3, r0
 c000934:	2b00      	cmp	r3, #0
 c000936:	d001      	beq.n	c00093c <MX_GTZC_S_Init+0x10c>
  {
    Error_Handler();
 c000938:	f000 fa92 	bl	c000e60 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00093c:	bf00      	nop
 c00093e:	3770      	adds	r7, #112	; 0x70
 c000940:	46bd      	mov	sp, r7
 c000942:	bd80      	pop	{r7, pc}
 c000944:	10000001 	.word	0x10000001
 c000948:	30030000 	.word	0x30030000

0c00094c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c00094c:	b580      	push	{r7, lr}
 c00094e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000950:	2000      	movs	r0, #0
 c000952:	f002 fc9f 	bl	c003294 <HAL_ICACHE_ConfigAssociativityMode>
 c000956:	4603      	mov	r3, r0
 c000958:	2b00      	cmp	r3, #0
 c00095a:	d001      	beq.n	c000960 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c00095c:	f000 fa80 	bl	c000e60 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000960:	f002 fcb8 	bl	c0032d4 <HAL_ICACHE_Enable>
 c000964:	4603      	mov	r3, r0
 c000966:	2b00      	cmp	r3, #0
 c000968:	d001      	beq.n	c00096e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c00096a:	f000 fa79 	bl	c000e60 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00096e:	bf00      	nop
 c000970:	bd80      	pop	{r7, pc}
	...

0c000974 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 c000974:	b580      	push	{r7, lr}
 c000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 c000978:	4b1b      	ldr	r3, [pc, #108]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00097a:	4a1c      	ldr	r2, [pc, #112]	; (c0009ec <MX_SPI3_Init+0x78>)
 c00097c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 c00097e:	4b1a      	ldr	r3, [pc, #104]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 c000984:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 c000986:	4b18      	ldr	r3, [pc, #96]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000988:	2200      	movs	r2, #0
 c00098a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 c00098c:	4b16      	ldr	r3, [pc, #88]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00098e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 c000992:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 c000994:	4b14      	ldr	r3, [pc, #80]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000996:	2200      	movs	r2, #0
 c000998:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 c00099a:	4b13      	ldr	r3, [pc, #76]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00099c:	2200      	movs	r2, #0
 c00099e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 c0009a0:	4b11      	ldr	r3, [pc, #68]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0009a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 c0009a8:	4b0f      	ldr	r3, [pc, #60]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009aa:	2238      	movs	r2, #56	; 0x38
 c0009ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c0009ae:	4b0e      	ldr	r3, [pc, #56]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009b0:	2200      	movs	r2, #0
 c0009b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 c0009b4:	4b0c      	ldr	r3, [pc, #48]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009b6:	2200      	movs	r2, #0
 c0009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0009ba:	4b0b      	ldr	r3, [pc, #44]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009bc:	2200      	movs	r2, #0
 c0009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 c0009c0:	4b09      	ldr	r3, [pc, #36]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009c2:	2207      	movs	r2, #7
 c0009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 c0009c6:	4b08      	ldr	r3, [pc, #32]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009c8:	2200      	movs	r2, #0
 c0009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c0009cc:	4b06      	ldr	r3, [pc, #24]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009ce:	2208      	movs	r2, #8
 c0009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 c0009d2:	4805      	ldr	r0, [pc, #20]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009d4:	f004 fa0c 	bl	c004df0 <HAL_SPI_Init>
 c0009d8:	4603      	mov	r3, r0
 c0009da:	2b00      	cmp	r3, #0
 c0009dc:	d001      	beq.n	c0009e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 c0009de:	f000 fa3f 	bl	c000e60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 c0009e2:	bf00      	nop
 c0009e4:	bd80      	pop	{r7, pc}
 c0009e6:	bf00      	nop
 c0009e8:	300000c4 	.word	0x300000c4
 c0009ec:	50003c00 	.word	0x50003c00

0c0009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c0009f0:	b580      	push	{r7, lr}
 c0009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c0009f4:	4b23      	ldr	r3, [pc, #140]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c0009f6:	4a24      	ldr	r2, [pc, #144]	; (c000a88 <MX_USART1_UART_Init+0x98>)
 c0009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c0009fa:	4b22      	ldr	r3, [pc, #136]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c0009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000a02:	4b20      	ldr	r3, [pc, #128]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a04:	2200      	movs	r2, #0
 c000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000a08:	4b1e      	ldr	r3, [pc, #120]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a0a:	2200      	movs	r2, #0
 c000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c000a0e:	4b1d      	ldr	r3, [pc, #116]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000a14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000a16:	4b1b      	ldr	r3, [pc, #108]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a18:	220c      	movs	r2, #12
 c000a1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000a1c:	4b19      	ldr	r3, [pc, #100]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a1e:	2200      	movs	r2, #0
 c000a20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000a22:	4b18      	ldr	r3, [pc, #96]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a24:	2200      	movs	r2, #0
 c000a26:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000a28:	4b16      	ldr	r3, [pc, #88]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a2a:	2200      	movs	r2, #0
 c000a2c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000a2e:	4b15      	ldr	r3, [pc, #84]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a30:	2200      	movs	r2, #0
 c000a32:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000a34:	4b13      	ldr	r3, [pc, #76]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a36:	2200      	movs	r2, #0
 c000a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c000a3a:	4812      	ldr	r0, [pc, #72]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a3c:	f005 f93e 	bl	c005cbc <HAL_UART_Init>
 c000a40:	4603      	mov	r3, r0
 c000a42:	2b00      	cmp	r3, #0
 c000a44:	d001      	beq.n	c000a4a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c000a46:	f000 fa0b 	bl	c000e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a4a:	2100      	movs	r1, #0
 c000a4c:	480d      	ldr	r0, [pc, #52]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a4e:	f005 ff63 	bl	c006918 <HAL_UARTEx_SetTxFifoThreshold>
 c000a52:	4603      	mov	r3, r0
 c000a54:	2b00      	cmp	r3, #0
 c000a56:	d001      	beq.n	c000a5c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c000a58:	f000 fa02 	bl	c000e60 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a5c:	2100      	movs	r1, #0
 c000a5e:	4809      	ldr	r0, [pc, #36]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a60:	f005 ff98 	bl	c006994 <HAL_UARTEx_SetRxFifoThreshold>
 c000a64:	4603      	mov	r3, r0
 c000a66:	2b00      	cmp	r3, #0
 c000a68:	d001      	beq.n	c000a6e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c000a6a:	f000 f9f9 	bl	c000e60 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000a6e:	4805      	ldr	r0, [pc, #20]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a70:	f005 ff19 	bl	c0068a6 <HAL_UARTEx_DisableFifoMode>
 c000a74:	4603      	mov	r3, r0
 c000a76:	2b00      	cmp	r3, #0
 c000a78:	d001      	beq.n	c000a7e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c000a7a:	f000 f9f1 	bl	c000e60 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c000a7e:	bf00      	nop
 c000a80:	bd80      	pop	{r7, pc}
 c000a82:	bf00      	nop
 c000a84:	300001f8 	.word	0x300001f8
 c000a88:	50013800 	.word	0x50013800

0c000a8c <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void)
{
 c000a8c:	b580      	push	{r7, lr}
 c000a8e:	b082      	sub	sp, #8
 c000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000a92:	4b68      	ldr	r3, [pc, #416]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a96:	4a67      	ldr	r2, [pc, #412]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000a98:	f043 0304 	orr.w	r3, r3, #4
 c000a9c:	6493      	str	r3, [r2, #72]	; 0x48
 c000a9e:	4b65      	ldr	r3, [pc, #404]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aa2:	f003 0304 	and.w	r3, r3, #4
 c000aa6:	607b      	str	r3, [r7, #4]
 c000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c000aaa:	4b62      	ldr	r3, [pc, #392]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aae:	4a61      	ldr	r2, [pc, #388]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ab0:	f043 0301 	orr.w	r3, r3, #1
 c000ab4:	6493      	str	r3, [r2, #72]	; 0x48
 c000ab6:	4b5f      	ldr	r3, [pc, #380]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aba:	f003 0301 	and.w	r3, r3, #1
 c000abe:	603b      	str	r3, [r7, #0]
 c000ac0:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 c000ac2:	4b5d      	ldr	r3, [pc, #372]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ac4:	4a5d      	ldr	r2, [pc, #372]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000ac6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 c000ac8:	4b5b      	ldr	r3, [pc, #364]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000aca:	2200      	movs	r2, #0
 c000acc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000ace:	4b5a      	ldr	r3, [pc, #360]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000ad4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 c000ad6:	4b58      	ldr	r3, [pc, #352]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ad8:	2240      	movs	r2, #64	; 0x40
 c000ada:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 c000adc:	4b56      	ldr	r3, [pc, #344]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ade:	2280      	movs	r2, #128	; 0x80
 c000ae0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000ae2:	4b55      	ldr	r3, [pc, #340]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ae4:	2200      	movs	r2, #0
 c000ae6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000ae8:	4b53      	ldr	r3, [pc, #332]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000aea:	2200      	movs	r2, #0
 c000aec:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 c000aee:	4b52      	ldr	r3, [pc, #328]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000af0:	2200      	movs	r2, #0
 c000af2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 c000af4:	4b50      	ldr	r3, [pc, #320]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000af6:	2200      	movs	r2, #0
 c000af8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 c000afa:	484f      	ldr	r0, [pc, #316]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000afc:	f001 fcfe 	bl	c0024fc <HAL_DMA_Init>
 c000b00:	4603      	mov	r3, r0
 c000b02:	2b00      	cmp	r3, #0
 c000b04:	d001      	beq.n	c000b0a <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 c000b06:	f000 f9ab 	bl	c000e60 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b0a:	2110      	movs	r1, #16
 c000b0c:	484a      	ldr	r0, [pc, #296]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000b0e:	f001 ff6d 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000b12:	4603      	mov	r3, r0
 c000b14:	2b00      	cmp	r3, #0
 c000b16:	d001      	beq.n	c000b1c <MX_DMA_Init+0x90>
  {
    Error_Handler( );
 c000b18:	f000 f9a2 	bl	c000e60 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SEC) != HAL_OK)
 c000b1c:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000b20:	4845      	ldr	r0, [pc, #276]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000b22:	f001 ff63 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000b26:	4603      	mov	r3, r0
 c000b28:	2b00      	cmp	r3, #0
 c000b2a:	d001      	beq.n	c000b30 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 c000b2c:	f000 f998 	bl	c000e60 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000b30:	2104      	movs	r1, #4
 c000b32:	4841      	ldr	r0, [pc, #260]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000b34:	f001 ff5a 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000b38:	4603      	mov	r3, r0
 c000b3a:	2b00      	cmp	r3, #0
 c000b3c:	d001      	beq.n	c000b42 <MX_DMA_Init+0xb6>
  {
    Error_Handler( );
 c000b3e:	f000 f98f 	bl	c000e60 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000b42:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000b46:	483c      	ldr	r0, [pc, #240]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000b48:	f001 ff50 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000b4c:	4603      	mov	r3, r0
 c000b4e:	2b00      	cmp	r3, #0
 c000b50:	d001      	beq.n	c000b56 <MX_DMA_Init+0xca>
  {
    Error_Handler( );
 c000b52:	f000 f985 	bl	c000e60 <Error_Handler>
//  {
//    Error_Handler( );
//  }

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
    hdma_memtomem_dma1_channel5.Instance = DMA1_Channel5;
 c000b56:	4b3a      	ldr	r3, [pc, #232]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b58:	4a3a      	ldr	r2, [pc, #232]	; (c000c44 <MX_DMA_Init+0x1b8>)
 c000b5a:	601a      	str	r2, [r3, #0]
    hdma_memtomem_dma1_channel5.Init.Request = DMA_REQUEST_MEM2MEM;
 c000b5c:	4b38      	ldr	r3, [pc, #224]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b5e:	2200      	movs	r2, #0
 c000b60:	605a      	str	r2, [r3, #4]
    hdma_memtomem_dma1_channel5.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000b62:	4b37      	ldr	r3, [pc, #220]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000b68:	609a      	str	r2, [r3, #8]
    hdma_memtomem_dma1_channel5.Init.PeriphInc = DMA_PINC_ENABLE;
 c000b6a:	4b35      	ldr	r3, [pc, #212]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b6c:	2240      	movs	r2, #64	; 0x40
 c000b6e:	60da      	str	r2, [r3, #12]
    hdma_memtomem_dma1_channel5.Init.MemInc = DMA_MINC_ENABLE;
 c000b70:	4b33      	ldr	r3, [pc, #204]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b72:	2280      	movs	r2, #128	; 0x80
 c000b74:	611a      	str	r2, [r3, #16]
    hdma_memtomem_dma1_channel5.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000b76:	4b32      	ldr	r3, [pc, #200]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b78:	2200      	movs	r2, #0
 c000b7a:	615a      	str	r2, [r3, #20]
    hdma_memtomem_dma1_channel5.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000b7c:	4b30      	ldr	r3, [pc, #192]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b7e:	2200      	movs	r2, #0
 c000b80:	619a      	str	r2, [r3, #24]
    hdma_memtomem_dma1_channel5.Init.Mode = DMA_NORMAL;
 c000b82:	4b2f      	ldr	r3, [pc, #188]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b84:	2200      	movs	r2, #0
 c000b86:	61da      	str	r2, [r3, #28]
    hdma_memtomem_dma1_channel5.Init.Priority = DMA_PRIORITY_LOW;
 c000b88:	4b2d      	ldr	r3, [pc, #180]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b8a:	2200      	movs	r2, #0
 c000b8c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_memtomem_dma1_channel5) != HAL_OK)
 c000b8e:	482c      	ldr	r0, [pc, #176]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b90:	f001 fcb4 	bl	c0024fc <HAL_DMA_Init>
 c000b94:	4603      	mov	r3, r0
 c000b96:	2b00      	cmp	r3, #0
 c000b98:	d001      	beq.n	c000b9e <MX_DMA_Init+0x112>
    {
      Error_Handler( );
 c000b9a:	f000 f961 	bl	c000e60 <Error_Handler>
    }

    /*  */
    if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel5, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b9e:	2110      	movs	r1, #16
 c000ba0:	4827      	ldr	r0, [pc, #156]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000ba2:	f001 ff23 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000ba6:	4603      	mov	r3, r0
 c000ba8:	2b00      	cmp	r3, #0
 c000baa:	d001      	beq.n	c000bb0 <MX_DMA_Init+0x124>
    {
      Error_Handler( );
 c000bac:	f000 f958 	bl	c000e60 <Error_Handler>
    }

    /*  */
    if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel5, DMA_CHANNEL_SEC) != HAL_OK)
 c000bb0:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000bb4:	4822      	ldr	r0, [pc, #136]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000bb6:	f001 ff19 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000bba:	4603      	mov	r3, r0
 c000bbc:	2b00      	cmp	r3, #0
 c000bbe:	d001      	beq.n	c000bc4 <MX_DMA_Init+0x138>
    {
      Error_Handler( );
 c000bc0:	f000 f94e 	bl	c000e60 <Error_Handler>
    }

    /*  */
    if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel5, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c000bc4:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c000bc8:	481d      	ldr	r0, [pc, #116]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000bca:	f001 ff0f 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000bce:	4603      	mov	r3, r0
 c000bd0:	2b00      	cmp	r3, #0
 c000bd2:	d001      	beq.n	c000bd8 <MX_DMA_Init+0x14c>
    {
      Error_Handler( );
 c000bd4:	f000 f944 	bl	c000e60 <Error_Handler>
    }

    /*  */
    if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel5, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000bd8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000bdc:	4818      	ldr	r0, [pc, #96]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000bde:	f001 ff05 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c000be2:	4603      	mov	r3, r0
 c000be4:	2b00      	cmp	r3, #0
 c000be6:	d001      	beq.n	c000bec <MX_DMA_Init+0x160>
    {
      Error_Handler( );
 c000be8:	f000 f93a 	bl	c000e60 <Error_Handler>
    }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 c000bec:	2200      	movs	r2, #0
 c000bee:	2100      	movs	r1, #0
 c000bf0:	201d      	movs	r0, #29
 c000bf2:	f001 fc4e 	bl	c002492 <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 c000bf6:	201d      	movs	r0, #29
 c000bf8:	f001 fc65 	bl	c0024c6 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
//	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
//	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 c000bfc:	2200      	movs	r2, #0
 c000bfe:	2100      	movs	r1, #0
 c000c00:	201f      	movs	r0, #31
 c000c02:	f001 fc46 	bl	c002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 c000c06:	201f      	movs	r0, #31
 c000c08:	f001 fc5d 	bl	c0024c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 c000c0c:	2200      	movs	r2, #0
 c000c0e:	2100      	movs	r1, #0
 c000c10:	2020      	movs	r0, #32
 c000c12:	f001 fc3e 	bl	c002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 c000c16:	2020      	movs	r0, #32
 c000c18:	f001 fc55 	bl	c0024c6 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 c000c1c:	2200      	movs	r2, #0
 c000c1e:	2100      	movs	r1, #0
 c000c20:	2021      	movs	r0, #33	; 0x21
 c000c22:	f001 fc36 	bl	c002492 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 c000c26:	2021      	movs	r0, #33	; 0x21
 c000c28:	f001 fc4d 	bl	c0024c6 <HAL_NVIC_EnableIRQ>

}
 c000c2c:	bf00      	nop
 c000c2e:	3708      	adds	r7, #8
 c000c30:	46bd      	mov	sp, r7
 c000c32:	bd80      	pop	{r7, pc}
 c000c34:	50021000 	.word	0x50021000
 c000c38:	30000290 	.word	0x30000290
 c000c3c:	50020008 	.word	0x50020008
 c000c40:	300002f8 	.word	0x300002f8
 c000c44:	50020058 	.word	0x50020058

0c000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000c48:	b580      	push	{r7, lr}
 c000c4a:	b08a      	sub	sp, #40	; 0x28
 c000c4c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000c4e:	f107 0314 	add.w	r3, r7, #20
 c000c52:	2200      	movs	r2, #0
 c000c54:	601a      	str	r2, [r3, #0]
 c000c56:	605a      	str	r2, [r3, #4]
 c000c58:	609a      	str	r2, [r3, #8]
 c000c5a:	60da      	str	r2, [r3, #12]
 c000c5c:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000c5e:	4b2e      	ldr	r3, [pc, #184]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c62:	4a2d      	ldr	r2, [pc, #180]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c64:	f043 0308 	orr.w	r3, r3, #8
 c000c68:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c6a:	4b2b      	ldr	r3, [pc, #172]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c6e:	f003 0308 	and.w	r3, r3, #8
 c000c72:	613b      	str	r3, [r7, #16]
 c000c74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000c76:	4b28      	ldr	r3, [pc, #160]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c7a:	4a27      	ldr	r2, [pc, #156]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c7c:	f043 0302 	orr.w	r3, r3, #2
 c000c80:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c82:	4b25      	ldr	r3, [pc, #148]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c86:	f003 0302 	and.w	r3, r3, #2
 c000c8a:	60fb      	str	r3, [r7, #12]
 c000c8c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000c8e:	4b22      	ldr	r3, [pc, #136]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c92:	4a21      	ldr	r2, [pc, #132]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000c98:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c9a:	4b1f      	ldr	r3, [pc, #124]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000c9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000ca2:	60bb      	str	r3, [r7, #8]
 c000ca4:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c000ca6:	f002 fb8f 	bl	c0033c8 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000caa:	4b1b      	ldr	r3, [pc, #108]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cae:	4a1a      	ldr	r2, [pc, #104]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cb0:	f043 0304 	orr.w	r3, r3, #4
 c000cb4:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cb6:	4b18      	ldr	r3, [pc, #96]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cba:	f003 0304 	and.w	r3, r3, #4
 c000cbe:	607b      	str	r3, [r7, #4]
 c000cc0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000cc2:	4b15      	ldr	r3, [pc, #84]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cc6:	4a14      	ldr	r2, [pc, #80]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cc8:	f043 0301 	orr.w	r3, r3, #1
 c000ccc:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cce:	4b12      	ldr	r3, [pc, #72]	; (c000d18 <MX_GPIO_Init+0xd0>)
 c000cd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cd2:	f003 0301 	and.w	r3, r3, #1
 c000cd6:	603b      	str	r3, [r7, #0]
 c000cd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000cda:	2201      	movs	r2, #1
 c000cdc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000ce0:	480e      	ldr	r0, [pc, #56]	; (c000d1c <MX_GPIO_Init+0xd4>)
 c000ce2:	f002 f92b 	bl	c002f3c <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c000ce6:	2200      	movs	r2, #0
 c000ce8:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000cec:	480c      	ldr	r0, [pc, #48]	; (c000d20 <MX_GPIO_Init+0xd8>)
 c000cee:	f002 f93d 	bl	c002f6c <HAL_GPIO_ConfigPinAttributes>

  //this pin is used as the CS pin for SPI communication
  //for STM32 microcontrollers, this pin must be configured and controlled manually.
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000cf2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000cf6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000cf8:	2301      	movs	r3, #1
 c000cfa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000cfc:	2301      	movs	r3, #1
 c000cfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000d00:	2300      	movs	r3, #0
 c000d02:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000d04:	f107 0314 	add.w	r3, r7, #20
 c000d08:	4619      	mov	r1, r3
 c000d0a:	4804      	ldr	r0, [pc, #16]	; (c000d1c <MX_GPIO_Init+0xd4>)
 c000d0c:	f001 ff96 	bl	c002c3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 c000d10:	bf00      	nop
 c000d12:	3728      	adds	r7, #40	; 0x28
 c000d14:	46bd      	mov	sp, r7
 c000d16:	bd80      	pop	{r7, pc}
 c000d18:	50021000 	.word	0x50021000
 c000d1c:	52020400 	.word	0x52020400
 c000d20:	52020800 	.word	0x52020800

0c000d24 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000d24:	b480      	push	{r7}
 c000d26:	b083      	sub	sp, #12
 c000d28:	af00      	add	r7, sp, #0
 c000d2a:	6078      	str	r0, [r7, #4]
//  printf("SPI Transfer complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000d2c:	4b04      	ldr	r3, [pc, #16]	; (c000d40 <HAL_SPI_TxRxCpltCallback+0x1c>)
 c000d2e:	2201      	movs	r2, #1
 c000d30:	601a      	str	r2, [r3, #0]
}
 c000d32:	bf00      	nop
 c000d34:	370c      	adds	r7, #12
 c000d36:	46bd      	mov	sp, r7
 c000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d3c:	4770      	bx	lr
 c000d3e:	bf00      	nop
 c000d40:	30000360 	.word	0x30000360

0c000d44 <HAL_SPI_TxCpltCallback>:


void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000d44:	b480      	push	{r7}
 c000d46:	b083      	sub	sp, #12
 c000d48:	af00      	add	r7, sp, #0
 c000d4a:	6078      	str	r0, [r7, #4]
//  printf("SPI transmission complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000d4c:	4b04      	ldr	r3, [pc, #16]	; (c000d60 <HAL_SPI_TxCpltCallback+0x1c>)
 c000d4e:	2201      	movs	r2, #1
 c000d50:	601a      	str	r2, [r3, #0]
}
 c000d52:	bf00      	nop
 c000d54:	370c      	adds	r7, #12
 c000d56:	46bd      	mov	sp, r7
 c000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d5c:	4770      	bx	lr
 c000d5e:	bf00      	nop
 c000d60:	30000360 	.word	0x30000360

0c000d64 <HAL_SPI_RxCpltCallback>:


void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000d64:	b480      	push	{r7}
 c000d66:	b083      	sub	sp, #12
 c000d68:	af00      	add	r7, sp, #0
 c000d6a:	6078      	str	r0, [r7, #4]
//  printf("SPI Reception complete.\n\r");
  wTransferState = TRANSFER_COMPLETE;
 c000d6c:	4b04      	ldr	r3, [pc, #16]	; (c000d80 <HAL_SPI_RxCpltCallback+0x1c>)
 c000d6e:	2201      	movs	r2, #1
 c000d70:	601a      	str	r2, [r3, #0]
}
 c000d72:	bf00      	nop
 c000d74:	370c      	adds	r7, #12
 c000d76:	46bd      	mov	sp, r7
 c000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000d7c:	4770      	bx	lr
 c000d7e:	bf00      	nop
 c000d80:	30000360 	.word	0x30000360

0c000d84 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 c000d84:	b580      	push	{r7, lr}
 c000d86:	b082      	sub	sp, #8
 c000d88:	af00      	add	r7, sp, #0
 c000d8a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000d8c:	1d39      	adds	r1, r7, #4
 c000d8e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000d92:	2201      	movs	r2, #1
 c000d94:	4803      	ldr	r0, [pc, #12]	; (c000da4 <__io_putchar+0x20>)
 c000d96:	f004 ffe1 	bl	c005d5c <HAL_UART_Transmit>

  return ch;
 c000d9a:	687b      	ldr	r3, [r7, #4]
}
 c000d9c:	4618      	mov	r0, r3
 c000d9e:	3708      	adds	r7, #8
 c000da0:	46bd      	mov	sp, r7
 c000da2:	bd80      	pop	{r7, pc}
 c000da4:	300001f8 	.word	0x300001f8

0c000da8 <SearchForSig>:



//Returns position if s1 is substring of s2; -1 otherwise
int SearchForSig(uint8_t* signal, int sizeOfSig, uint8_t* data, int dataSize)
{
 c000da8:	b480      	push	{r7}
 c000daa:	b08b      	sub	sp, #44	; 0x2c
 c000dac:	af00      	add	r7, sp, #0
 c000dae:	60f8      	str	r0, [r7, #12]
 c000db0:	60b9      	str	r1, [r7, #8]
 c000db2:	607a      	str	r2, [r7, #4]
 c000db4:	603b      	str	r3, [r7, #0]
    int M = sizeOfSig;
 c000db6:	68bb      	ldr	r3, [r7, #8]
 c000db8:	61bb      	str	r3, [r7, #24]
    int N = dataSize;
 c000dba:	683b      	ldr	r3, [r7, #0]
 c000dbc:	617b      	str	r3, [r7, #20]
    int retval = -1;
 c000dbe:	f04f 33ff 	mov.w	r3, #4294967295
 c000dc2:	627b      	str	r3, [r7, #36]	; 0x24


    /* A loop to slide signal one by one while comparing */
    for (int i = 0; i <= N - M; i++) {
 c000dc4:	2300      	movs	r3, #0
 c000dc6:	623b      	str	r3, [r7, #32]
 c000dc8:	e022      	b.n	c000e10 <SearchForSig+0x68>
      int j;

        //for current index i, check for signal match
      for (j = 0; j < M; j++){
 c000dca:	2300      	movs	r3, #0
 c000dcc:	61fb      	str	r3, [r7, #28]
 c000dce:	e00f      	b.n	c000df0 <SearchForSig+0x48>
        if (data[i + j] != signal[j]){
 c000dd0:	6a3a      	ldr	r2, [r7, #32]
 c000dd2:	69fb      	ldr	r3, [r7, #28]
 c000dd4:	4413      	add	r3, r2
 c000dd6:	461a      	mov	r2, r3
 c000dd8:	687b      	ldr	r3, [r7, #4]
 c000dda:	4413      	add	r3, r2
 c000ddc:	781a      	ldrb	r2, [r3, #0]
 c000dde:	69fb      	ldr	r3, [r7, #28]
 c000de0:	68f9      	ldr	r1, [r7, #12]
 c000de2:	440b      	add	r3, r1
 c000de4:	781b      	ldrb	r3, [r3, #0]
 c000de6:	429a      	cmp	r2, r3
 c000de8:	d107      	bne.n	c000dfa <SearchForSig+0x52>
      for (j = 0; j < M; j++){
 c000dea:	69fb      	ldr	r3, [r7, #28]
 c000dec:	3301      	adds	r3, #1
 c000dee:	61fb      	str	r3, [r7, #28]
 c000df0:	69fa      	ldr	r2, [r7, #28]
 c000df2:	69bb      	ldr	r3, [r7, #24]
 c000df4:	429a      	cmp	r2, r3
 c000df6:	dbeb      	blt.n	c000dd0 <SearchForSig+0x28>
 c000df8:	e000      	b.n	c000dfc <SearchForSig+0x54>
          break;
 c000dfa:	bf00      	nop
        }
      }
      if (j == M){
 c000dfc:	69fa      	ldr	r2, [r7, #28]
 c000dfe:	69bb      	ldr	r3, [r7, #24]
 c000e00:	429a      	cmp	r2, r3
 c000e02:	d102      	bne.n	c000e0a <SearchForSig+0x62>
          retval = i;
 c000e04:	6a3b      	ldr	r3, [r7, #32]
 c000e06:	627b      	str	r3, [r7, #36]	; 0x24
          break;
 c000e08:	e008      	b.n	c000e1c <SearchForSig+0x74>
    for (int i = 0; i <= N - M; i++) {
 c000e0a:	6a3b      	ldr	r3, [r7, #32]
 c000e0c:	3301      	adds	r3, #1
 c000e0e:	623b      	str	r3, [r7, #32]
 c000e10:	697a      	ldr	r2, [r7, #20]
 c000e12:	69bb      	ldr	r3, [r7, #24]
 c000e14:	1ad3      	subs	r3, r2, r3
 c000e16:	6a3a      	ldr	r2, [r7, #32]
 c000e18:	429a      	cmp	r2, r3
 c000e1a:	ddd6      	ble.n	c000dca <SearchForSig+0x22>
      }
    }

    return retval;
 c000e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 c000e1e:	4618      	mov	r0, r3
 c000e20:	372c      	adds	r7, #44	; 0x2c
 c000e22:	46bd      	mov	sp, r7
 c000e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e28:	4770      	bx	lr
	...

0c000e2c <SecureToSecureTransferComplete>:



void SecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c000e2c:	b480      	push	{r7}
 c000e2e:	b083      	sub	sp, #12
 c000e30:	af00      	add	r7, sp, #0
 c000e32:	6078      	str	r0, [r7, #4]
	//this is the non-secure callback function. Set the variables upon completion
	SecureToSecureTransferCompleteDetected = 1;
 c000e34:	4b04      	ldr	r3, [pc, #16]	; (c000e48 <SecureToSecureTransferComplete+0x1c>)
 c000e36:	2201      	movs	r2, #1
 c000e38:	601a      	str	r2, [r3, #0]
}
 c000e3a:	bf00      	nop
 c000e3c:	370c      	adds	r7, #12
 c000e3e:	46bd      	mov	sp, r7
 c000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e44:	4770      	bx	lr
 c000e46:	bf00      	nop
 c000e48:	3000028c 	.word	0x3000028c

0c000e4c <SecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void SecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c000e4c:	b580      	push	{r7, lr}
 c000e4e:	b082      	sub	sp, #8
 c000e50:	af00      	add	r7, sp, #0
 c000e52:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c000e54:	f000 f804 	bl	c000e60 <Error_Handler>
}
 c000e58:	bf00      	nop
 c000e5a:	3708      	adds	r7, #8
 c000e5c:	46bd      	mov	sp, r7
 c000e5e:	bd80      	pop	{r7, pc}

0c000e60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000e60:	b480      	push	{r7}
 c000e62:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000e64:	b672      	cpsid	i
}
 c000e66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000e68:	e7fe      	b.n	c000e68 <Error_Handler+0x8>
	...

0c000e6c <__acle_se_SECURE_SPI_Receive_Classification>:
/* Private functions ---------------------------------------------------------*/



//must be called after a spi transaction has completed; checks rx for a classification
CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Receive_Classification(){
 c000e6c:	b580      	push	{r7, lr}
 c000e6e:	b086      	sub	sp, #24
 c000e70:	af00      	add	r7, sp, #0

	ErrorStatus ret = SUCCESS;
 c000e72:	2300      	movs	r3, #0
 c000e74:	74fb      	strb	r3, [r7, #19]
	int containsStartClassification;
	int containsEndClassification;
	//perform a new rx operation
	wTransferState = TRANSFER_WAIT;
 c000e76:	4b5c      	ldr	r3, [pc, #368]	; (c000fe8 <__acle_se_SECURE_SPI_Receive_Classification+0x17c>)
 c000e78:	2200      	movs	r2, #0
 c000e7a:	601a      	str	r2, [r3, #0]
	if (HAL_SPI_Receive_DMA(&hspi3, (uint8_t *)aRxBuffer, BUFFER_SIZE) != HAL_OK)
 c000e7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c000e80:	495a      	ldr	r1, [pc, #360]	; (c000fec <__acle_se_SECURE_SPI_Receive_Classification+0x180>)
 c000e82:	485b      	ldr	r0, [pc, #364]	; (c000ff0 <__acle_se_SECURE_SPI_Receive_Classification+0x184>)
 c000e84:	f004 f94c 	bl	c005120 <HAL_SPI_Receive_DMA>
 c000e88:	4603      	mov	r3, r0
 c000e8a:	2b00      	cmp	r3, #0
 c000e8c:	d004      	beq.n	c000e98 <__acle_se_SECURE_SPI_Receive_Classification+0x2c>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up RX.\n\r");
 c000e8e:	4859      	ldr	r0, [pc, #356]	; (c000ff4 <__acle_se_SECURE_SPI_Receive_Classification+0x188>)
 c000e90:	f005 fe4c 	bl	c006b2c <iprintf>
		 Error_Handler();
 c000e94:	f7ff ffe4 	bl	c000e60 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c000e98:	bf00      	nop
 c000e9a:	4b53      	ldr	r3, [pc, #332]	; (c000fe8 <__acle_se_SECURE_SPI_Receive_Classification+0x17c>)
 c000e9c:	681b      	ldr	r3, [r3, #0]
 c000e9e:	2b00      	cmp	r3, #0
 c000ea0:	d0fb      	beq.n	c000e9a <__acle_se_SECURE_SPI_Receive_Classification+0x2e>
	 {
	 }

	//check SPI transfer state
	if(wTransferState == TRANSFER_COMPLETE){
 c000ea2:	4b51      	ldr	r3, [pc, #324]	; (c000fe8 <__acle_se_SECURE_SPI_Receive_Classification+0x17c>)
 c000ea4:	681b      	ldr	r3, [r3, #0]
 c000ea6:	2b01      	cmp	r3, #1
 c000ea8:	d162      	bne.n	c000f70 <__acle_se_SECURE_SPI_Receive_Classification+0x104>

		//print the buffer received.
		printf("Buffer received from SPI: \n\r");
 c000eaa:	4853      	ldr	r0, [pc, #332]	; (c000ff8 <__acle_se_SECURE_SPI_Receive_Classification+0x18c>)
 c000eac:	f005 fe3e 	bl	c006b2c <iprintf>
		for(int i = 0; i < BUFFER_SIZE; i++){
 c000eb0:	2300      	movs	r3, #0
 c000eb2:	617b      	str	r3, [r7, #20]
 c000eb4:	e00a      	b.n	c000ecc <__acle_se_SECURE_SPI_Receive_Classification+0x60>
			printf("%d\t", aRxBuffer[i]);
 c000eb6:	4a4d      	ldr	r2, [pc, #308]	; (c000fec <__acle_se_SECURE_SPI_Receive_Classification+0x180>)
 c000eb8:	697b      	ldr	r3, [r7, #20]
 c000eba:	4413      	add	r3, r2
 c000ebc:	781b      	ldrb	r3, [r3, #0]
 c000ebe:	4619      	mov	r1, r3
 c000ec0:	484e      	ldr	r0, [pc, #312]	; (c000ffc <__acle_se_SECURE_SPI_Receive_Classification+0x190>)
 c000ec2:	f005 fe33 	bl	c006b2c <iprintf>
		for(int i = 0; i < BUFFER_SIZE; i++){
 c000ec6:	697b      	ldr	r3, [r7, #20]
 c000ec8:	3301      	adds	r3, #1
 c000eca:	617b      	str	r3, [r7, #20]
 c000ecc:	697b      	ldr	r3, [r7, #20]
 c000ece:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c000ed2:	d3f0      	bcc.n	c000eb6 <__acle_se_SECURE_SPI_Receive_Classification+0x4a>
		}
		printf("\n\r");
 c000ed4:	484a      	ldr	r0, [pc, #296]	; (c001000 <__acle_se_SECURE_SPI_Receive_Classification+0x194>)
 c000ed6:	f005 fe29 	bl	c006b2c <iprintf>

		//if the transfer completed, look for the start and end signals in the SPI rx buffer
		containsStartClassification = SearchForSig(START_CLASSIFICATION_SIG, START_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c000eda:	4b4a      	ldr	r3, [pc, #296]	; (c001004 <__acle_se_SECURE_SPI_Receive_Classification+0x198>)
 c000edc:	6819      	ldr	r1, [r3, #0]
 c000ede:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000ee2:	4a42      	ldr	r2, [pc, #264]	; (c000fec <__acle_se_SECURE_SPI_Receive_Classification+0x180>)
 c000ee4:	4848      	ldr	r0, [pc, #288]	; (c001008 <__acle_se_SECURE_SPI_Receive_Classification+0x19c>)
 c000ee6:	f7ff ff5f 	bl	c000da8 <SearchForSig>
 c000eea:	60f8      	str	r0, [r7, #12]
		containsEndClassification = SearchForSig(END_CLASSIFICATION_SIG, END_CLASSIFICATION_SIZE, aRxBuffer, BUFFER_SIZE);
 c000eec:	4b47      	ldr	r3, [pc, #284]	; (c00100c <__acle_se_SECURE_SPI_Receive_Classification+0x1a0>)
 c000eee:	6819      	ldr	r1, [r3, #0]
 c000ef0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000ef4:	4a3d      	ldr	r2, [pc, #244]	; (c000fec <__acle_se_SECURE_SPI_Receive_Classification+0x180>)
 c000ef6:	4846      	ldr	r0, [pc, #280]	; (c001010 <__acle_se_SECURE_SPI_Receive_Classification+0x1a4>)
 c000ef8:	f7ff ff56 	bl	c000da8 <SearchForSig>
 c000efc:	60b8      	str	r0, [r7, #8]
		if(containsStartClassification >= 0 && containsEndClassification >= 0){
 c000efe:	68fb      	ldr	r3, [r7, #12]
 c000f00:	2b00      	cmp	r3, #0
 c000f02:	db37      	blt.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
 c000f04:	68bb      	ldr	r3, [r7, #8]
 c000f06:	2b00      	cmp	r3, #0
 c000f08:	db34      	blt.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
			//The start and end signals were found; make sure there's only one element between them
			if(containsStartClassification == containsEndClassification - START_CLASSIFICATION_SIZE - 1){
 c000f0a:	4b3e      	ldr	r3, [pc, #248]	; (c001004 <__acle_se_SECURE_SPI_Receive_Classification+0x198>)
 c000f0c:	681b      	ldr	r3, [r3, #0]
 c000f0e:	68ba      	ldr	r2, [r7, #8]
 c000f10:	1ad3      	subs	r3, r2, r3
 c000f12:	3b01      	subs	r3, #1
 c000f14:	68fa      	ldr	r2, [r7, #12]
 c000f16:	429a      	cmp	r2, r3
 c000f18:	d121      	bne.n	c000f5e <__acle_se_SECURE_SPI_Receive_Classification+0xf2>
				//try to extract the classification
				printf("Classification found. Extracting...\n\r");
 c000f1a:	483e      	ldr	r0, [pc, #248]	; (c001014 <__acle_se_SECURE_SPI_Receive_Classification+0x1a8>)
 c000f1c:	f005 fe06 	bl	c006b2c <iprintf>
				int classificationInd = containsEndClassification - 1;
 c000f20:	68bb      	ldr	r3, [r7, #8]
 c000f22:	3b01      	subs	r3, #1
 c000f24:	607b      	str	r3, [r7, #4]
				uint8_t classification = aRxBuffer[classificationInd];
 c000f26:	4a31      	ldr	r2, [pc, #196]	; (c000fec <__acle_se_SECURE_SPI_Receive_Classification+0x180>)
 c000f28:	687b      	ldr	r3, [r7, #4]
 c000f2a:	4413      	add	r3, r2
 c000f2c:	781b      	ldrb	r3, [r3, #0]
 c000f2e:	70fb      	strb	r3, [r7, #3]
				printf("Classification: %c\n\r", classification);
 c000f30:	78fb      	ldrb	r3, [r7, #3]
 c000f32:	4619      	mov	r1, r3
 c000f34:	4838      	ldr	r0, [pc, #224]	; (c001018 <__acle_se_SECURE_SPI_Receive_Classification+0x1ac>)
 c000f36:	f005 fdf9 	bl	c006b2c <iprintf>
				if(classification == '1'){
 c000f3a:	78fb      	ldrb	r3, [r7, #3]
 c000f3c:	2b31      	cmp	r3, #49	; 0x31
 c000f3e:	d103      	bne.n	c000f48 <__acle_se_SECURE_SPI_Receive_Classification+0xdc>
					printf("Memory was found to be benign.\n\r");
 c000f40:	4836      	ldr	r0, [pc, #216]	; (c00101c <__acle_se_SECURE_SPI_Receive_Classification+0x1b0>)
 c000f42:	f005 fdf3 	bl	c006b2c <iprintf>
 c000f46:	e015      	b.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
				}else if(classification == '0'){
 c000f48:	78fb      	ldrb	r3, [r7, #3]
 c000f4a:	2b30      	cmp	r3, #48	; 0x30
 c000f4c:	d103      	bne.n	c000f56 <__acle_se_SECURE_SPI_Receive_Classification+0xea>
					printf("Memory was found to be malicious.\n\r");
 c000f4e:	4834      	ldr	r0, [pc, #208]	; (c001020 <__acle_se_SECURE_SPI_Receive_Classification+0x1b4>)
 c000f50:	f005 fdec 	bl	c006b2c <iprintf>
 c000f54:	e00e      	b.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
				}else{
					printf("ERROR. A classification other than 1 or 0 found!");
 c000f56:	4833      	ldr	r0, [pc, #204]	; (c001024 <__acle_se_SECURE_SPI_Receive_Classification+0x1b8>)
 c000f58:	f005 fde8 	bl	c006b2c <iprintf>
 c000f5c:	e00a      	b.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
				}
			}else{
				printf("Error: the SPI classification stream is incorrectly formatted.\n\r");
 c000f5e:	4832      	ldr	r0, [pc, #200]	; (c001028 <__acle_se_SECURE_SPI_Receive_Classification+0x1bc>)
 c000f60:	f005 fde4 	bl	c006b2c <iprintf>
				printf("Start classification: %d, End classification: %d\n\r", containsStartClassification, containsEndClassification);
 c000f64:	68ba      	ldr	r2, [r7, #8]
 c000f66:	68f9      	ldr	r1, [r7, #12]
 c000f68:	4830      	ldr	r0, [pc, #192]	; (c00102c <__acle_se_SECURE_SPI_Receive_Classification+0x1c0>)
 c000f6a:	f005 fddf 	bl	c006b2c <iprintf>
 c000f6e:	e001      	b.n	c000f74 <__acle_se_SECURE_SPI_Receive_Classification+0x108>
			}
		}
	}else{
		//if transfer didn't complete
		Error_Handler();
 c000f70:	f7ff ff76 	bl	c000e60 <Error_Handler>
	}
	return ret;
 c000f74:	7cfb      	ldrb	r3, [r7, #19]

}
 c000f76:	4618      	mov	r0, r3
 c000f78:	3718      	adds	r7, #24
 c000f7a:	46bd      	mov	sp, r7
 c000f7c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000f80:	4671      	mov	r1, lr
 c000f82:	4672      	mov	r2, lr
 c000f84:	4673      	mov	r3, lr
 c000f86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000f8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000f8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000f92:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000f96:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000f9a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000f9e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000fa2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000fa6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000faa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000fae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000fb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000fb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000fba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000fbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000fc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000fc6:	f38e 8c00 	msr	CPSR_fs, lr
 c000fca:	b410      	push	{r4}
 c000fcc:	eef1 ca10 	vmrs	ip, fpscr
 c000fd0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000fd4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000fd8:	ea0c 0c04 	and.w	ip, ip, r4
 c000fdc:	eee1 ca10 	vmsr	fpscr, ip
 c000fe0:	bc10      	pop	{r4}
 c000fe2:	46f4      	mov	ip, lr
 c000fe4:	4774      	bxns	lr
 c000fe6:	bf00      	nop
 c000fe8:	30000360 	.word	0x30000360
 c000fec:	30000764 	.word	0x30000764
 c000ff0:	300000c4 	.word	0x300000c4
 c000ff4:	0c007a7c 	.word	0x0c007a7c
 c000ff8:	0c007aa4 	.word	0x0c007aa4
 c000ffc:	0c007ac4 	.word	0x0c007ac4
 c001000:	0c007ac8 	.word	0x0c007ac8
 c001004:	30000034 	.word	0x30000034
 c001008:	30000000 	.word	0x30000000
 c00100c:	30000030 	.word	0x30000030
 c001010:	30000018 	.word	0x30000018
 c001014:	0c007acc 	.word	0x0c007acc
 c001018:	0c007af4 	.word	0x0c007af4
 c00101c:	0c007b0c 	.word	0x0c007b0c
 c001020:	0c007b30 	.word	0x0c007b30
 c001024:	0c007b54 	.word	0x0c007b54
 c001028:	0c007b88 	.word	0x0c007b88
 c00102c:	0c007bcc 	.word	0x0c007bcc

0c001030 <__acle_se_SECURE_Mem_Ready>:

//this allows the non-secure environment to set the mem_ready variable
CMSE_NS_ENTRY void SECURE_Mem_Ready(){
 c001030:	b480      	push	{r7}
 c001032:	af00      	add	r7, sp, #0
	mem_ready = 1;
 c001034:	4b1d      	ldr	r3, [pc, #116]	; (c0010ac <__acle_se_SECURE_Mem_Ready+0x7c>)
 c001036:	2201      	movs	r2, #1
 c001038:	701a      	strb	r2, [r3, #0]
}
 c00103a:	bf00      	nop
 c00103c:	46bd      	mov	sp, r7
 c00103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001042:	4670      	mov	r0, lr
 c001044:	4671      	mov	r1, lr
 c001046:	4672      	mov	r2, lr
 c001048:	4673      	mov	r3, lr
 c00104a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00104e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001052:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001056:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00105a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00105e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001062:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001066:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00106a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00106e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001072:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001076:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00107a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00107e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001082:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001086:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00108a:	f38e 8c00 	msr	CPSR_fs, lr
 c00108e:	b410      	push	{r4}
 c001090:	eef1 ca10 	vmrs	ip, fpscr
 c001094:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001098:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00109c:	ea0c 0c04 	and.w	ip, ip, r4
 c0010a0:	eee1 ca10 	vmsr	fpscr, ip
 c0010a4:	bc10      	pop	{r4}
 c0010a6:	46f4      	mov	ip, lr
 c0010a8:	4774      	bxns	lr
 c0010aa:	bf00      	nop
 c0010ac:	30000b64 	.word	0x30000b64

0c0010b0 <__acle_se_SECURE_Poll_Mem_Ready>:

//allows the non-secure environment to read the mem_ready variable
CMSE_NS_ENTRY int SECURE_Poll_Mem_Ready(){
 c0010b0:	b480      	push	{r7}
 c0010b2:	af00      	add	r7, sp, #0
	return mem_ready;
 c0010b4:	4b1c      	ldr	r3, [pc, #112]	; (c001128 <__acle_se_SECURE_Poll_Mem_Ready+0x78>)
 c0010b6:	781b      	ldrb	r3, [r3, #0]
}
 c0010b8:	4618      	mov	r0, r3
 c0010ba:	46bd      	mov	sp, r7
 c0010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010c0:	4671      	mov	r1, lr
 c0010c2:	4672      	mov	r2, lr
 c0010c4:	4673      	mov	r3, lr
 c0010c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0010ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0010ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0010d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0010d6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0010da:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0010de:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0010e2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0010e6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0010ea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0010ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0010f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0010f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0010fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0010fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001102:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001106:	f38e 8c00 	msr	CPSR_fs, lr
 c00110a:	b410      	push	{r4}
 c00110c:	eef1 ca10 	vmrs	ip, fpscr
 c001110:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001114:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001118:	ea0c 0c04 	and.w	ip, ip, r4
 c00111c:	eee1 ca10 	vmsr	fpscr, ip
 c001120:	bc10      	pop	{r4}
 c001122:	46f4      	mov	ip, lr
 c001124:	4774      	bxns	lr
 c001126:	bf00      	nop
 c001128:	30000b64 	.word	0x30000b64

0c00112c <__acle_se_SECURE_SPI_Send_Start_Signal>:
//	blockNum++;
//}



CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Send_Start_Signal(){
 c00112c:	b580      	push	{r7, lr}
 c00112e:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 c001132:	af00      	add	r7, sp, #0
	ErrorStatus ret = SUCCESS;
 c001134:	2300      	movs	r3, #0
 c001136:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	wTransferState = TRANSFER_WAIT;
 c00113a:	4b34      	ldr	r3, [pc, #208]	; (c00120c <__acle_se_SECURE_SPI_Send_Start_Signal+0xe0>)
 c00113c:	2200      	movs	r2, #0
 c00113e:	601a      	str	r2, [r3, #0]
	uint8_t start_signal
 c001140:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 c001144:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 c001148:	4a31      	ldr	r2, [pc, #196]	; (c001210 <__acle_se_SECURE_SPI_Send_Start_Signal+0xe4>)
 c00114a:	4618      	mov	r0, r3
 c00114c:	4611      	mov	r1, r2
 c00114e:	f240 4301 	movw	r3, #1025	; 0x401
 c001152:	461a      	mov	r2, r3
 c001154:	f005 fcd4 	bl	c006b00 <memcpy>

	printf("Sending the start transmission signal...\n\r");
 c001158:	482e      	ldr	r0, [pc, #184]	; (c001214 <__acle_se_SECURE_SPI_Send_Start_Signal+0xe8>)
 c00115a:	f005 fce7 	bl	c006b2c <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)start_signal, BUFFER_SIZE) != HAL_OK)
 c00115e:	1d3b      	adds	r3, r7, #4
 c001160:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c001164:	4619      	mov	r1, r3
 c001166:	482c      	ldr	r0, [pc, #176]	; (c001218 <__acle_se_SECURE_SPI_Send_Start_Signal+0xec>)
 c001168:	f003 fee6 	bl	c004f38 <HAL_SPI_Transmit_DMA>
 c00116c:	4603      	mov	r3, r0
 c00116e:	2b00      	cmp	r3, #0
 c001170:	d004      	beq.n	c00117c <__acle_se_SECURE_SPI_Send_Start_Signal+0x50>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c001172:	482a      	ldr	r0, [pc, #168]	; (c00121c <__acle_se_SECURE_SPI_Send_Start_Signal+0xf0>)
 c001174:	f005 fcda 	bl	c006b2c <iprintf>
		 Error_Handler();
 c001178:	f7ff fe72 	bl	c000e60 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c00117c:	bf00      	nop
 c00117e:	4b23      	ldr	r3, [pc, #140]	; (c00120c <__acle_se_SECURE_SPI_Send_Start_Signal+0xe0>)
 c001180:	681b      	ldr	r3, [r3, #0]
 c001182:	2b00      	cmp	r3, #0
 c001184:	d0fb      	beq.n	c00117e <__acle_se_SECURE_SPI_Send_Start_Signal+0x52>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c001186:	4b21      	ldr	r3, [pc, #132]	; (c00120c <__acle_se_SECURE_SPI_Send_Start_Signal+0xe0>)
 c001188:	681b      	ldr	r3, [r3, #0]
 c00118a:	2b01      	cmp	r3, #1
 c00118c:	d002      	beq.n	c001194 <__acle_se_SECURE_SPI_Send_Start_Signal+0x68>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   Error_Handler();
 c00118e:	f7ff fe67 	bl	c000e60 <Error_Handler>
		   break;
 c001192:	e000      	b.n	c001196 <__acle_se_SECURE_SPI_Send_Start_Signal+0x6a>
		   break;
 c001194:	bf00      	nop
	 }
	 return ret;
 c001196:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
}
 c00119a:	4618      	mov	r0, r3
 c00119c:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 c0011a0:	46bd      	mov	sp, r7
 c0011a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0011a6:	4671      	mov	r1, lr
 c0011a8:	4672      	mov	r2, lr
 c0011aa:	4673      	mov	r3, lr
 c0011ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0011b0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0011b4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0011b8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0011bc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0011c0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0011c4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0011c8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0011cc:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0011d0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0011d4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0011d8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0011dc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0011e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011e4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0011e8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0011ec:	f38e 8c00 	msr	CPSR_fs, lr
 c0011f0:	b410      	push	{r4}
 c0011f2:	eef1 ca10 	vmrs	ip, fpscr
 c0011f6:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0011fa:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0011fe:	ea0c 0c04 	and.w	ip, ip, r4
 c001202:	eee1 ca10 	vmsr	fpscr, ip
 c001206:	bc10      	pop	{r4}
 c001208:	46f4      	mov	ip, lr
 c00120a:	4774      	bxns	lr
 c00120c:	30000360 	.word	0x30000360
 c001210:	0c007c54 	.word	0x0c007c54
 c001214:	0c007c00 	.word	0x0c007c00
 c001218:	300000c4 	.word	0x300000c4
 c00121c:	0c007c2c 	.word	0x0c007c2c

0c001220 <__acle_se_SECURE_SPI_Send_End_Signal>:


CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Send_End_Signal(){
 c001220:	b580      	push	{r7, lr}
 c001222:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 c001226:	af00      	add	r7, sp, #0
	ErrorStatus ret = SUCCESS;
 c001228:	2300      	movs	r3, #0
 c00122a:	f887 3407 	strb.w	r3, [r7, #1031]	; 0x407
	wTransferState = TRANSFER_WAIT;
 c00122e:	4b34      	ldr	r3, [pc, #208]	; (c001300 <__acle_se_SECURE_SPI_Send_End_Signal+0xe0>)
 c001230:	2200      	movs	r2, #0
 c001232:	601a      	str	r2, [r3, #0]
	uint8_t end_signal
 c001234:	f507 6381 	add.w	r3, r7, #1032	; 0x408
 c001238:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 c00123c:	4a31      	ldr	r2, [pc, #196]	; (c001304 <__acle_se_SECURE_SPI_Send_End_Signal+0xe4>)
 c00123e:	4618      	mov	r0, r3
 c001240:	4611      	mov	r1, r2
 c001242:	f240 4301 	movw	r3, #1025	; 0x401
 c001246:	461a      	mov	r2, r3
 c001248:	f005 fc5a 	bl	c006b00 <memcpy>

	printf("Sending the end transmission signal...\n\r");
 c00124c:	482e      	ldr	r0, [pc, #184]	; (c001308 <__acle_se_SECURE_SPI_Send_End_Signal+0xe8>)
 c00124e:	f005 fc6d 	bl	c006b2c <iprintf>
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *)end_signal, BUFFER_SIZE) != HAL_OK)
 c001252:	1d3b      	adds	r3, r7, #4
 c001254:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c001258:	4619      	mov	r1, r3
 c00125a:	482c      	ldr	r0, [pc, #176]	; (c00130c <__acle_se_SECURE_SPI_Send_End_Signal+0xec>)
 c00125c:	f003 fe6c 	bl	c004f38 <HAL_SPI_Transmit_DMA>
 c001260:	4603      	mov	r3, r0
 c001262:	2b00      	cmp	r3, #0
 c001264:	d004      	beq.n	c001270 <__acle_se_SECURE_SPI_Send_End_Signal+0x50>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c001266:	482a      	ldr	r0, [pc, #168]	; (c001310 <__acle_se_SECURE_SPI_Send_End_Signal+0xf0>)
 c001268:	f005 fc60 	bl	c006b2c <iprintf>
		 Error_Handler();
 c00126c:	f7ff fdf8 	bl	c000e60 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001270:	bf00      	nop
 c001272:	4b23      	ldr	r3, [pc, #140]	; (c001300 <__acle_se_SECURE_SPI_Send_End_Signal+0xe0>)
 c001274:	681b      	ldr	r3, [r3, #0]
 c001276:	2b00      	cmp	r3, #0
 c001278:	d0fb      	beq.n	c001272 <__acle_se_SECURE_SPI_Send_End_Signal+0x52>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c00127a:	4b21      	ldr	r3, [pc, #132]	; (c001300 <__acle_se_SECURE_SPI_Send_End_Signal+0xe0>)
 c00127c:	681b      	ldr	r3, [r3, #0]
 c00127e:	2b01      	cmp	r3, #1
 c001280:	d002      	beq.n	c001288 <__acle_se_SECURE_SPI_Send_End_Signal+0x68>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   Error_Handler();
 c001282:	f7ff fded 	bl	c000e60 <Error_Handler>
		   break;
 c001286:	e000      	b.n	c00128a <__acle_se_SECURE_SPI_Send_End_Signal+0x6a>
		   break;
 c001288:	bf00      	nop
	 }
	 return ret;
 c00128a:	f897 3407 	ldrb.w	r3, [r7, #1031]	; 0x407
}
 c00128e:	4618      	mov	r0, r3
 c001290:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 c001294:	46bd      	mov	sp, r7
 c001296:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00129a:	4671      	mov	r1, lr
 c00129c:	4672      	mov	r2, lr
 c00129e:	4673      	mov	r3, lr
 c0012a0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0012a4:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0012a8:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0012ac:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0012b0:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0012b4:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0012b8:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0012bc:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0012c0:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0012c4:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0012c8:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0012cc:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0012d0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0012d4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0012d8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0012dc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0012e0:	f38e 8c00 	msr	CPSR_fs, lr
 c0012e4:	b410      	push	{r4}
 c0012e6:	eef1 ca10 	vmrs	ip, fpscr
 c0012ea:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0012ee:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0012f2:	ea0c 0c04 	and.w	ip, ip, r4
 c0012f6:	eee1 ca10 	vmsr	fpscr, ip
 c0012fa:	bc10      	pop	{r4}
 c0012fc:	46f4      	mov	ip, lr
 c0012fe:	4774      	bxns	lr
 c001300:	30000360 	.word	0x30000360
 c001304:	0c008084 	.word	0x0c008084
 c001308:	0c008058 	.word	0x0c008058
 c00130c:	300000c4 	.word	0x300000c4
 c001310:	0c007c2c 	.word	0x0c007c2c

0c001314 <__acle_se_SECURE_SPI_Send_Data>:

/**
  * @brief  Secure service to send non-secure memory to secure SPI port.
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Send_Data(){
 c001314:	b580      	push	{r7, lr}
 c001316:	b082      	sub	sp, #8
 c001318:	af00      	add	r7, sp, #0

	ErrorStatus ret = SUCCESS;
 c00131a:	2300      	movs	r3, #0
 c00131c:	71fb      	strb	r3, [r7, #7]

	wTransferState = TRANSFER_WAIT;
 c00131e:	4b2d      	ldr	r3, [pc, #180]	; (c0013d4 <__acle_se_SECURE_SPI_Send_Data+0xc0>)
 c001320:	2200      	movs	r2, #0
 c001322:	601a      	str	r2, [r3, #0]
	/*** send the current memory block from the non-secure flash bank to SPI ***/
//	printf("Sending memory to the ESP32...\n\r");
	if (HAL_SPI_Transmit_DMA(&hspi3, (uint8_t *) SEC_Mem_Buffer, BUFFER_SIZE) != HAL_OK)
 c001324:	f44f 6280 	mov.w	r2, #1024	; 0x400
 c001328:	492b      	ldr	r1, [pc, #172]	; (c0013d8 <__acle_se_SECURE_SPI_Send_Data+0xc4>)
 c00132a:	482c      	ldr	r0, [pc, #176]	; (c0013dc <__acle_se_SECURE_SPI_Send_Data+0xc8>)
 c00132c:	f003 fe04 	bl	c004f38 <HAL_SPI_Transmit_DMA>
 c001330:	4603      	mov	r3, r0
 c001332:	2b00      	cmp	r3, #0
 c001334:	d004      	beq.n	c001340 <__acle_se_SECURE_SPI_Send_Data+0x2c>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up tx.\n\r");
 c001336:	482a      	ldr	r0, [pc, #168]	; (c0013e0 <__acle_se_SECURE_SPI_Send_Data+0xcc>)
 c001338:	f005 fbf8 	bl	c006b2c <iprintf>
		 Error_Handler();
 c00133c:	f7ff fd90 	bl	c000e60 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c001340:	bf00      	nop
 c001342:	4b24      	ldr	r3, [pc, #144]	; (c0013d4 <__acle_se_SECURE_SPI_Send_Data+0xc0>)
 c001344:	681b      	ldr	r3, [r3, #0]
 c001346:	2b00      	cmp	r3, #0
 c001348:	d0fb      	beq.n	c001342 <__acle_se_SECURE_SPI_Send_Data+0x2e>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c00134a:	4b22      	ldr	r3, [pc, #136]	; (c0013d4 <__acle_se_SECURE_SPI_Send_Data+0xc0>)
 c00134c:	681b      	ldr	r3, [r3, #0]
 c00134e:	2b01      	cmp	r3, #1
 c001350:	d005      	beq.n	c00135e <__acle_se_SECURE_SPI_Send_Data+0x4a>
	 {
		 case TRANSFER_COMPLETE:
//		 printf("The memory dump was transferred successfully.\n\r");
		   break;
		 default :
		   printf("There was an error in transferring the memory dump.\n\r");
 c001352:	4824      	ldr	r0, [pc, #144]	; (c0013e4 <__acle_se_SECURE_SPI_Send_Data+0xd0>)
 c001354:	f005 fbea 	bl	c006b2c <iprintf>
		   Error_Handler();
 c001358:	f7ff fd82 	bl	c000e60 <Error_Handler>
		   break;
 c00135c:	e000      	b.n	c001360 <__acle_se_SECURE_SPI_Send_Data+0x4c>
		   break;
 c00135e:	bf00      	nop
	 }


	return ret;
 c001360:	79fb      	ldrb	r3, [r7, #7]


}
 c001362:	4618      	mov	r0, r3
 c001364:	3708      	adds	r7, #8
 c001366:	46bd      	mov	sp, r7
 c001368:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c00136c:	4671      	mov	r1, lr
 c00136e:	4672      	mov	r2, lr
 c001370:	4673      	mov	r3, lr
 c001372:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001376:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00137a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00137e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001382:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001386:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00138a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00138e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001392:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001396:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00139a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00139e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0013a2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013a6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013aa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0013ae:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0013b2:	f38e 8c00 	msr	CPSR_fs, lr
 c0013b6:	b410      	push	{r4}
 c0013b8:	eef1 ca10 	vmrs	ip, fpscr
 c0013bc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0013c0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0013c4:	ea0c 0c04 	and.w	ip, ip, r4
 c0013c8:	eee1 ca10 	vmsr	fpscr, ip
 c0013cc:	bc10      	pop	{r4}
 c0013ce:	46f4      	mov	ip, lr
 c0013d0:	4774      	bxns	lr
 c0013d2:	bf00      	nop
 c0013d4:	30000360 	.word	0x30000360
 c0013d8:	30000364 	.word	0x30000364
 c0013dc:	300000c4 	.word	0x300000c4
 c0013e0:	0c007c2c 	.word	0x0c007c2c
 c0013e4:	0c008488 	.word	0x0c008488

0c0013e8 <__acle_se_SECURE_SPI_Toggle_Comm>:
/**
  * @brief  Secure service to toggle SPI communication on or off. Must be called @ beginning and end of SPI transmission
  * @param state	SPI ON: 0 and SPI OFF: 1
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Toggle_Comm(int state){
 c0013e8:	b580      	push	{r7, lr}
 c0013ea:	b084      	sub	sp, #16
 c0013ec:	af00      	add	r7, sp, #0
 c0013ee:	6078      	str	r0, [r7, #4]
	ErrorStatus ret = SUCCESS;
 c0013f0:	2300      	movs	r3, #0
 c0013f2:	73fb      	strb	r3, [r7, #15]
	if(state > 0){
 c0013f4:	687b      	ldr	r3, [r7, #4]
 c0013f6:	2b00      	cmp	r3, #0
 c0013f8:	dd06      	ble.n	c001408 <__acle_se_SECURE_SPI_Toggle_Comm+0x20>
		//off state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c0013fa:	2201      	movs	r2, #1
 c0013fc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c001400:	4821      	ldr	r0, [pc, #132]	; (c001488 <__acle_se_SECURE_SPI_Toggle_Comm+0xa0>)
 c001402:	f001 fd9b 	bl	c002f3c <HAL_GPIO_WritePin>
 c001406:	e005      	b.n	c001414 <__acle_se_SECURE_SPI_Toggle_Comm+0x2c>

	}else{
		//on state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 c001408:	2200      	movs	r2, #0
 c00140a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c00140e:	481e      	ldr	r0, [pc, #120]	; (c001488 <__acle_se_SECURE_SPI_Toggle_Comm+0xa0>)
 c001410:	f001 fd94 	bl	c002f3c <HAL_GPIO_WritePin>
	}
	return ret;
 c001414:	7bfb      	ldrb	r3, [r7, #15]
}
 c001416:	4618      	mov	r0, r3
 c001418:	3710      	adds	r7, #16
 c00141a:	46bd      	mov	sp, r7
 c00141c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001420:	4671      	mov	r1, lr
 c001422:	4672      	mov	r2, lr
 c001424:	4673      	mov	r3, lr
 c001426:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00142a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00142e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001432:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001436:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00143a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00143e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001442:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001446:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00144a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00144e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001452:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001456:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00145a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00145e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001462:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001466:	f38e 8c00 	msr	CPSR_fs, lr
 c00146a:	b410      	push	{r4}
 c00146c:	eef1 ca10 	vmrs	ip, fpscr
 c001470:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001474:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001478:	ea0c 0c04 	and.w	ip, ip, r4
 c00147c:	eee1 ca10 	vmsr	fpscr, ip
 c001480:	bc10      	pop	{r4}
 c001482:	46f4      	mov	ip, lr
 c001484:	4774      	bxns	lr
 c001486:	bf00      	nop
 c001488:	52020400 	.word	0x52020400

0c00148c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>:
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_DMA_Fetch_NonSecure_Mem(uint32_t *nsc_mem_buffer,
                                                         uint32_t Size,
                                                         void *func)
{
 c00148c:	b580      	push	{r7, lr}
 c00148e:	b086      	sub	sp, #24
 c001490:	af00      	add	r7, sp, #0
 c001492:	60f8      	str	r0, [r7, #12]
 c001494:	60b9      	str	r1, [r7, #8]
 c001496:	607a      	str	r2, [r7, #4]
  ErrorStatus  ret = ERROR;
 c001498:	2301      	movs	r3, #1
 c00149a:	75fb      	strb	r3, [r7, #23]

  /* Check that the address range in non-secure */
   if (cmse_check_address_range(nsc_mem_buffer, Size * sizeof(uint32_t), CMSE_NONSECURE))
 c00149c:	68bb      	ldr	r3, [r7, #8]
 c00149e:	009b      	lsls	r3, r3, #2
 c0014a0:	2212      	movs	r2, #18
 c0014a2:	4619      	mov	r1, r3
 c0014a4:	68f8      	ldr	r0, [r7, #12]
 c0014a6:	f7fe fec5 	bl	c000234 <cmse_check_address_range>
 c0014aa:	4603      	mov	r3, r0
 c0014ac:	2b00      	cmp	r3, #0
 c0014ae:	d012      	beq.n	c0014d6 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
   {
	   //if so, start the transfer
	   /* Save callback function */
	    pNonSecureToSecureTransferCompleteCallback = func;
 c0014b0:	4a25      	ldr	r2, [pc, #148]	; (c001548 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xbc>)
 c0014b2:	687b      	ldr	r3, [r7, #4]
 c0014b4:	6013      	str	r3, [r2, #0]
	    //start the DMA transfer
	    if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,
 c0014b6:	68f9      	ldr	r1, [r7, #12]
 c0014b8:	4a24      	ldr	r2, [pc, #144]	; (c00154c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc0>)
 c0014ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c0014be:	4824      	ldr	r0, [pc, #144]	; (c001550 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc4>)
 c0014c0:	f001 f8c4 	bl	c00264c <HAL_DMA_Start_IT>
 c0014c4:	4603      	mov	r3, r0
 c0014c6:	2b00      	cmp	r3, #0
 c0014c8:	d102      	bne.n	c0014d0 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x44>
	                             (uint32_t)nsc_mem_buffer,
	                             (uint32_t)&SEC_Mem_Buffer,
	                             BUFFER_SIZE) == HAL_OK)
		{
		  /* Transfer started */
		  ret = SUCCESS;
 c0014ca:	2300      	movs	r3, #0
 c0014cc:	75fb      	strb	r3, [r7, #23]
 c0014ce:	e002      	b.n	c0014d6 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
		}else{
			printf("transfer was not able to start.\n\r");
 c0014d0:	4820      	ldr	r0, [pc, #128]	; (c001554 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc8>)
 c0014d2:	f005 fb2b 	bl	c006b2c <iprintf>
		}

   }

  return ret;
 c0014d6:	7dfb      	ldrb	r3, [r7, #23]
}
 c0014d8:	4618      	mov	r0, r3
 c0014da:	3718      	adds	r7, #24
 c0014dc:	46bd      	mov	sp, r7
 c0014de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0014e2:	4671      	mov	r1, lr
 c0014e4:	4672      	mov	r2, lr
 c0014e6:	4673      	mov	r3, lr
 c0014e8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0014ec:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0014f0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0014f4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0014f8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0014fc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001500:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001504:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001508:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00150c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001510:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001514:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001518:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00151c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001520:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001524:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001528:	f38e 8c00 	msr	CPSR_fs, lr
 c00152c:	b410      	push	{r4}
 c00152e:	eef1 ca10 	vmrs	ip, fpscr
 c001532:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001536:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00153a:	ea0c 0c04 	and.w	ip, ip, r4
 c00153e:	eee1 ca10 	vmsr	fpscr, ip
 c001542:	bc10      	pop	{r4}
 c001544:	46f4      	mov	ip, lr
 c001546:	4774      	bxns	lr
 c001548:	30000b70 	.word	0x30000b70
 c00154c:	30000364 	.word	0x30000364
 c001550:	30000290 	.word	0x30000290
 c001554:	0c0084c0 	.word	0x0c0084c0

0c001558 <__acle_se_SECURE_print_Buffer>:




//secure service for printing out buffers
CMSE_NS_ENTRY ErrorStatus SECURE_print_Buffer(uint32_t * buf, uint32_t size){
 c001558:	b580      	push	{r7, lr}
 c00155a:	b084      	sub	sp, #16
 c00155c:	af00      	add	r7, sp, #0
 c00155e:	6078      	str	r0, [r7, #4]
 c001560:	6039      	str	r1, [r7, #0]
	//print the contents of the first transfer
	 printf("Non-secure memory buffer: \n\r");
 c001562:	482f      	ldr	r0, [pc, #188]	; (c001620 <__acle_se_SECURE_print_Buffer+0xc8>)
 c001564:	f005 fae2 	bl	c006b2c <iprintf>
	 printf("===========================================================================================================\n\r");
 c001568:	482e      	ldr	r0, [pc, #184]	; (c001624 <__acle_se_SECURE_print_Buffer+0xcc>)
 c00156a:	f005 fadf 	bl	c006b2c <iprintf>
	 for(int i = 0; i<size; i++){
 c00156e:	2300      	movs	r3, #0
 c001570:	60fb      	str	r3, [r7, #12]
 c001572:	e014      	b.n	c00159e <__acle_se_SECURE_print_Buffer+0x46>
		printf("0x%08x\t", buf[i]);
 c001574:	68fb      	ldr	r3, [r7, #12]
 c001576:	009b      	lsls	r3, r3, #2
 c001578:	687a      	ldr	r2, [r7, #4]
 c00157a:	4413      	add	r3, r2
 c00157c:	681b      	ldr	r3, [r3, #0]
 c00157e:	4619      	mov	r1, r3
 c001580:	4829      	ldr	r0, [pc, #164]	; (c001628 <__acle_se_SECURE_print_Buffer+0xd0>)
 c001582:	f005 fad3 	bl	c006b2c <iprintf>
		if((i+1)%4==0){
 c001586:	68fb      	ldr	r3, [r7, #12]
 c001588:	3301      	adds	r3, #1
 c00158a:	f003 0303 	and.w	r3, r3, #3
 c00158e:	2b00      	cmp	r3, #0
 c001590:	d102      	bne.n	c001598 <__acle_se_SECURE_print_Buffer+0x40>
			printf("\n\r");
 c001592:	4826      	ldr	r0, [pc, #152]	; (c00162c <__acle_se_SECURE_print_Buffer+0xd4>)
 c001594:	f005 faca 	bl	c006b2c <iprintf>
	 for(int i = 0; i<size; i++){
 c001598:	68fb      	ldr	r3, [r7, #12]
 c00159a:	3301      	adds	r3, #1
 c00159c:	60fb      	str	r3, [r7, #12]
 c00159e:	68fb      	ldr	r3, [r7, #12]
 c0015a0:	683a      	ldr	r2, [r7, #0]
 c0015a2:	429a      	cmp	r2, r3
 c0015a4:	d8e6      	bhi.n	c001574 <__acle_se_SECURE_print_Buffer+0x1c>
		}
	 }
	 printf("\n\r");
 c0015a6:	4821      	ldr	r0, [pc, #132]	; (c00162c <__acle_se_SECURE_print_Buffer+0xd4>)
 c0015a8:	f005 fac0 	bl	c006b2c <iprintf>
	 return SUCCESS;
 c0015ac:	2300      	movs	r3, #0
}
 c0015ae:	4618      	mov	r0, r3
 c0015b0:	3710      	adds	r7, #16
 c0015b2:	46bd      	mov	sp, r7
 c0015b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0015b8:	4671      	mov	r1, lr
 c0015ba:	4672      	mov	r2, lr
 c0015bc:	4673      	mov	r3, lr
 c0015be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0015c2:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0015c6:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0015ca:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0015ce:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0015d2:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0015d6:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0015da:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0015de:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0015e2:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0015e6:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0015ea:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0015ee:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0015f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0015f6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0015fa:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0015fe:	f38e 8c00 	msr	CPSR_fs, lr
 c001602:	b410      	push	{r4}
 c001604:	eef1 ca10 	vmrs	ip, fpscr
 c001608:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00160c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001610:	ea0c 0c04 	and.w	ip, ip, r4
 c001614:	eee1 ca10 	vmsr	fpscr, ip
 c001618:	bc10      	pop	{r4}
 c00161a:	46f4      	mov	ip, lr
 c00161c:	4774      	bxns	lr
 c00161e:	bf00      	nop
 c001620:	0c0084e4 	.word	0x0c0084e4
 c001624:	0c008504 	.word	0x0c008504
 c001628:	0c008574 	.word	0x0c008574
 c00162c:	0c007ac8 	.word	0x0c007ac8

0c001630 <__acle_se_SECURE_print_Log>:


//secure service for logging messages
CMSE_NS_ENTRY void SECURE_print_Log(char* string){
 c001630:	b580      	push	{r7, lr}
 c001632:	b082      	sub	sp, #8
 c001634:	af00      	add	r7, sp, #0
 c001636:	6078      	str	r0, [r7, #4]
	printf(string);
 c001638:	6878      	ldr	r0, [r7, #4]
 c00163a:	f005 fa77 	bl	c006b2c <iprintf>
}
 c00163e:	bf00      	nop
 c001640:	3708      	adds	r7, #8
 c001642:	46bd      	mov	sp, r7
 c001644:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001648:	4670      	mov	r0, lr
 c00164a:	4671      	mov	r1, lr
 c00164c:	4672      	mov	r2, lr
 c00164e:	4673      	mov	r3, lr
 c001650:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001654:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001658:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00165c:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001660:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001664:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001668:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00166c:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001670:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001674:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001678:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00167c:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001680:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001684:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001688:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00168c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001690:	f38e 8c00 	msr	CPSR_fs, lr
 c001694:	b410      	push	{r4}
 c001696:	eef1 ca10 	vmrs	ip, fpscr
 c00169a:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00169e:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0016a2:	ea0c 0c04 	and.w	ip, ip, r4
 c0016a6:	eee1 ca10 	vmsr	fpscr, ip
 c0016aa:	bc10      	pop	{r4}
 c0016ac:	46f4      	mov	ip, lr
 c0016ae:	4774      	bxns	lr

0c0016b0 <__acle_se_SECURE_print_Num>:


//secure service for logging messages
CMSE_NS_ENTRY void SECURE_print_Num(int num){
 c0016b0:	b580      	push	{r7, lr}
 c0016b2:	b082      	sub	sp, #8
 c0016b4:	af00      	add	r7, sp, #0
 c0016b6:	6078      	str	r0, [r7, #4]
	printf("%d\n\r", num);
 c0016b8:	6879      	ldr	r1, [r7, #4]
 c0016ba:	481e      	ldr	r0, [pc, #120]	; (c001734 <__acle_se_SECURE_print_Num+0x84>)
 c0016bc:	f005 fa36 	bl	c006b2c <iprintf>
}
 c0016c0:	bf00      	nop
 c0016c2:	3708      	adds	r7, #8
 c0016c4:	46bd      	mov	sp, r7
 c0016c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0016ca:	4670      	mov	r0, lr
 c0016cc:	4671      	mov	r1, lr
 c0016ce:	4672      	mov	r2, lr
 c0016d0:	4673      	mov	r3, lr
 c0016d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0016d6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0016da:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0016de:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0016e2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0016e6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0016ea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0016ee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0016f2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0016f6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0016fa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0016fe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001702:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001706:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00170a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00170e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001712:	f38e 8c00 	msr	CPSR_fs, lr
 c001716:	b410      	push	{r4}
 c001718:	eef1 ca10 	vmrs	ip, fpscr
 c00171c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001720:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001724:	ea0c 0c04 	and.w	ip, ip, r4
 c001728:	eee1 ca10 	vmsr	fpscr, ip
 c00172c:	bc10      	pop	{r4}
 c00172e:	46f4      	mov	ip, lr
 c001730:	4774      	bxns	lr
 c001732:	bf00      	nop
 c001734:	0c00857c 	.word	0x0c00857c

0c001738 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c001738:	b480      	push	{r7}
 c00173a:	b083      	sub	sp, #12
 c00173c:	af00      	add	r7, sp, #0
 c00173e:	4603      	mov	r3, r0
 c001740:	6039      	str	r1, [r7, #0]
 c001742:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001744:	683b      	ldr	r3, [r7, #0]
 c001746:	2b00      	cmp	r3, #0
 c001748:	d00d      	beq.n	c001766 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00174a:	79fb      	ldrb	r3, [r7, #7]
 c00174c:	2b00      	cmp	r3, #0
 c00174e:	d002      	beq.n	c001756 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001750:	2b01      	cmp	r3, #1
 c001752:	d004      	beq.n	c00175e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001754:	e008      	b.n	c001768 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c001756:	4a21      	ldr	r2, [pc, #132]	; (c0017dc <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001758:	683b      	ldr	r3, [r7, #0]
 c00175a:	6013      	str	r3, [r2, #0]
        break;
 c00175c:	e004      	b.n	c001768 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c00175e:	4a20      	ldr	r2, [pc, #128]	; (c0017e0 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c001760:	683b      	ldr	r3, [r7, #0]
 c001762:	6013      	str	r3, [r2, #0]
        break;
 c001764:	e000      	b.n	c001768 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c001766:	bf00      	nop
}
 c001768:	bf00      	nop
 c00176a:	370c      	adds	r7, #12
 c00176c:	46bd      	mov	sp, r7
 c00176e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001772:	4670      	mov	r0, lr
 c001774:	4671      	mov	r1, lr
 c001776:	4672      	mov	r2, lr
 c001778:	4673      	mov	r3, lr
 c00177a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00177e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001782:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001786:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00178a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00178e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001792:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001796:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00179a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00179e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0017a2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0017a6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0017aa:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0017ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0017b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0017b6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0017ba:	f38e 8c00 	msr	CPSR_fs, lr
 c0017be:	b410      	push	{r4}
 c0017c0:	eef1 ca10 	vmrs	ip, fpscr
 c0017c4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0017c8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0017cc:	ea0c 0c04 	and.w	ip, ip, r4
 c0017d0:	eee1 ca10 	vmsr	fpscr, ip
 c0017d4:	bc10      	pop	{r4}
 c0017d6:	46f4      	mov	ip, lr
 c0017d8:	4774      	bxns	lr
 c0017da:	bf00      	nop
 c0017dc:	30000b68 	.word	0x30000b68
 c0017e0:	30000b6c 	.word	0x30000b6c

0c0017e4 <__acle_se_SECURE_DATA_Last_Buffer_Compare>:



//used in non-secure environment to check the secure memory buffer for successful transfer.
CMSE_NS_ENTRY ErrorStatus SECURE_DATA_Last_Buffer_Compare(uint32_t* addr)
{
 c0017e4:	b580      	push	{r7, lr}
 c0017e6:	b084      	sub	sp, #16
 c0017e8:	af00      	add	r7, sp, #0
 c0017ea:	6078      	str	r0, [r7, #4]
	//used after non-secure to secure mem transfer
  ErrorStatus  ret = SUCCESS;
 c0017ec:	2300      	movs	r3, #0
 c0017ee:	72fb      	strb	r3, [r7, #11]
  //print the contents of the first transfer
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c0017f0:	2300      	movs	r3, #0
 c0017f2:	60fb      	str	r3, [r7, #12]
 c0017f4:	e01c      	b.n	c001830 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x4c>
//		 if((i+1)%16==1){
//			 printf("%08p|\t", addr);
//		 }
		 //we'll print out bytes at a time
		printf("0x%02x\t", SEC_Mem_Buffer[i]);
 c0017f6:	4a2d      	ldr	r2, [pc, #180]	; (c0018ac <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xc8>)
 c0017f8:	68fb      	ldr	r3, [r7, #12]
 c0017fa:	4413      	add	r3, r2
 c0017fc:	781b      	ldrb	r3, [r3, #0]
 c0017fe:	4619      	mov	r1, r3
 c001800:	482b      	ldr	r0, [pc, #172]	; (c0018b0 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xcc>)
 c001802:	f005 f993 	bl	c006b2c <iprintf>
		if((i+1)%16==0){
 c001806:	68fb      	ldr	r3, [r7, #12]
 c001808:	3301      	adds	r3, #1
 c00180a:	f003 030f 	and.w	r3, r3, #15
 c00180e:	2b00      	cmp	r3, #0
 c001810:	d102      	bne.n	c001818 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x34>
			printf("\n\r");
 c001812:	4828      	ldr	r0, [pc, #160]	; (c0018b4 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xd0>)
 c001814:	f005 f98a 	bl	c006b2c <iprintf>
		}
		if((i+1)%4==0){
 c001818:	68fb      	ldr	r3, [r7, #12]
 c00181a:	3301      	adds	r3, #1
 c00181c:	f003 0303 	and.w	r3, r3, #3
 c001820:	2b00      	cmp	r3, #0
 c001822:	d102      	bne.n	c00182a <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x46>
			addr+=1;
 c001824:	687b      	ldr	r3, [r7, #4]
 c001826:	3304      	adds	r3, #4
 c001828:	607b      	str	r3, [r7, #4]
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c00182a:	68fb      	ldr	r3, [r7, #12]
 c00182c:	3301      	adds	r3, #1
 c00182e:	60fb      	str	r3, [r7, #12]
 c001830:	68fb      	ldr	r3, [r7, #12]
 c001832:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001836:	d3de      	bcc.n	c0017f6 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x12>
		}
	 }


  return ret;
 c001838:	7afb      	ldrb	r3, [r7, #11]
}
 c00183a:	4618      	mov	r0, r3
 c00183c:	3710      	adds	r7, #16
 c00183e:	46bd      	mov	sp, r7
 c001840:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001844:	4671      	mov	r1, lr
 c001846:	4672      	mov	r2, lr
 c001848:	4673      	mov	r3, lr
 c00184a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00184e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001852:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001856:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00185a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00185e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001862:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001866:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00186a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00186e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001872:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001876:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00187a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00187e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001886:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00188a:	f38e 8c00 	msr	CPSR_fs, lr
 c00188e:	b410      	push	{r4}
 c001890:	eef1 ca10 	vmrs	ip, fpscr
 c001894:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001898:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00189c:	ea0c 0c04 	and.w	ip, ip, r4
 c0018a0:	eee1 ca10 	vmsr	fpscr, ip
 c0018a4:	bc10      	pop	{r4}
 c0018a6:	46f4      	mov	ip, lr
 c0018a8:	4774      	bxns	lr
 c0018aa:	bf00      	nop
 c0018ac:	30000364 	.word	0x30000364
 c0018b0:	0c008584 	.word	0x0c008584
 c0018b4:	0c007ac8 	.word	0x0c007ac8

0c0018b8 <NonSecureToSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void NonSecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c0018b8:	b590      	push	{r4, r7, lr}
 c0018ba:	b085      	sub	sp, #20
 c0018bc:	af00      	add	r7, sp, #0
 c0018be:	6078      	str	r0, [r7, #4]
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pNonSecureToSecureTransferCompleteCallback != (void *)NULL)
 c0018c0:	4b1c      	ldr	r3, [pc, #112]	; (c001934 <NonSecureToSecureTransferComplete+0x7c>)
 c0018c2:	681b      	ldr	r3, [r3, #0]
 c0018c4:	2b00      	cmp	r3, #0
 c0018c6:	d02f      	beq.n	c001928 <NonSecureToSecureTransferComplete+0x70>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pNonSecureToSecureTransferCompleteCallback);
 c0018c8:	4b1a      	ldr	r3, [pc, #104]	; (c001934 <NonSecureToSecureTransferComplete+0x7c>)
 c0018ca:	681b      	ldr	r3, [r3, #0]
 c0018cc:	f023 0301 	bic.w	r3, r3, #1
 c0018d0:	60fb      	str	r3, [r7, #12]

   callback_NS();
 c0018d2:	68fb      	ldr	r3, [r7, #12]
 c0018d4:	461c      	mov	r4, r3
 c0018d6:	0864      	lsrs	r4, r4, #1
 c0018d8:	0064      	lsls	r4, r4, #1
 c0018da:	4620      	mov	r0, r4
 c0018dc:	4621      	mov	r1, r4
 c0018de:	4622      	mov	r2, r4
 c0018e0:	4623      	mov	r3, r4
 c0018e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0018e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0018ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0018ee:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0018f2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0018f6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0018fa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0018fe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001902:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001906:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00190a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00190e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001912:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001916:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00191a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00191e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001922:	f7fe fcfb 	bl	c00031c <__gnu_cmse_nonsecure_call>
  }
  else
  {
    Error_Handler();  /* Something went wrong */
  }
}
 c001926:	e001      	b.n	c00192c <NonSecureToSecureTransferComplete+0x74>
    Error_Handler();  /* Something went wrong */
 c001928:	f7ff fa9a 	bl	c000e60 <Error_Handler>
}
 c00192c:	bf00      	nop
 c00192e:	3714      	adds	r7, #20
 c001930:	46bd      	mov	sp, r7
 c001932:	bd90      	pop	{r4, r7, pc}
 c001934:	30000b70 	.word	0x30000b70

0c001938 <NonSecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void NonSecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c001938:	b580      	push	{r7, lr}
 c00193a:	b082      	sub	sp, #8
 c00193c:	af00      	add	r7, sp, #0
 c00193e:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c001940:	f7ff fa8e 	bl	c000e60 <Error_Handler>
}
 c001944:	bf00      	nop
 c001946:	3708      	adds	r7, #8
 c001948:	46bd      	mov	sp, r7
 c00194a:	bd80      	pop	{r7, pc}

0c00194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c00194c:	b580      	push	{r7, lr}
 c00194e:	b084      	sub	sp, #16
 c001950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c001952:	4b15      	ldr	r3, [pc, #84]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001954:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001956:	4a14      	ldr	r2, [pc, #80]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001958:	f043 0301 	orr.w	r3, r3, #1
 c00195c:	6613      	str	r3, [r2, #96]	; 0x60
 c00195e:	4b12      	ldr	r3, [pc, #72]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001962:	f003 0301 	and.w	r3, r3, #1
 c001966:	60fb      	str	r3, [r7, #12]
 c001968:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c00196a:	4b0f      	ldr	r3, [pc, #60]	; (c0019a8 <HAL_MspInit+0x5c>)
 c00196c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00196e:	4a0e      	ldr	r2, [pc, #56]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001974:	6593      	str	r3, [r2, #88]	; 0x58
 c001976:	4b0c      	ldr	r3, [pc, #48]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00197a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00197e:	60bb      	str	r3, [r7, #8]
 c001980:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c001982:	4b09      	ldr	r3, [pc, #36]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001984:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001986:	4a08      	ldr	r2, [pc, #32]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c00198c:	6493      	str	r3, [r2, #72]	; 0x48
 c00198e:	4b06      	ldr	r3, [pc, #24]	; (c0019a8 <HAL_MspInit+0x5c>)
 c001990:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c001996:	607b      	str	r3, [r7, #4]
 c001998:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c00199a:	f001 fd25 	bl	c0033e8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c00199e:	bf00      	nop
 c0019a0:	3710      	adds	r7, #16
 c0019a2:	46bd      	mov	sp, r7
 c0019a4:	bd80      	pop	{r7, pc}
 c0019a6:	bf00      	nop
 c0019a8:	50021000 	.word	0x50021000

0c0019ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c0019ac:	b580      	push	{r7, lr}
 c0019ae:	b08c      	sub	sp, #48	; 0x30
 c0019b0:	af00      	add	r7, sp, #0
 c0019b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c0019b4:	f107 031c 	add.w	r3, r7, #28
 c0019b8:	2200      	movs	r2, #0
 c0019ba:	601a      	str	r2, [r3, #0]
 c0019bc:	605a      	str	r2, [r3, #4]
 c0019be:	609a      	str	r2, [r3, #8]
 c0019c0:	60da      	str	r2, [r3, #12]
 c0019c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 c0019c4:	687b      	ldr	r3, [r7, #4]
 c0019c6:	681b      	ldr	r3, [r3, #0]
 c0019c8:	4a7d      	ldr	r2, [pc, #500]	; (c001bc0 <HAL_SPI_MspInit+0x214>)
 c0019ca:	4293      	cmp	r3, r2
 c0019cc:	f040 80f4 	bne.w	c001bb8 <HAL_SPI_MspInit+0x20c>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 c0019d0:	4b7c      	ldr	r3, [pc, #496]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0019d4:	4a7b      	ldr	r2, [pc, #492]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c0019da:	6593      	str	r3, [r2, #88]	; 0x58
 c0019dc:	4b79      	ldr	r3, [pc, #484]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0019e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0019e4:	61bb      	str	r3, [r7, #24]
 c0019e6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c0019e8:	4b76      	ldr	r3, [pc, #472]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0019ec:	4a75      	ldr	r2, [pc, #468]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019ee:	f043 0308 	orr.w	r3, r3, #8
 c0019f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0019f4:	4b73      	ldr	r3, [pc, #460]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c0019f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0019f8:	f003 0308 	and.w	r3, r3, #8
 c0019fc:	617b      	str	r3, [r7, #20]
 c0019fe:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 c001a00:	4b70      	ldr	r3, [pc, #448]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a04:	4a6f      	ldr	r2, [pc, #444]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a06:	f043 0302 	orr.w	r3, r3, #2
 c001a0a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001a0c:	4b6d      	ldr	r3, [pc, #436]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a10:	f003 0302 	and.w	r3, r3, #2
 c001a14:	613b      	str	r3, [r7, #16]
 c001a16:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001a18:	4b6a      	ldr	r3, [pc, #424]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a1c:	4a69      	ldr	r2, [pc, #420]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c001a22:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001a24:	4b67      	ldr	r3, [pc, #412]	; (c001bc4 <HAL_SPI_MspInit+0x218>)
 c001a26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c001a2c:	60fb      	str	r3, [r7, #12]
 c001a2e:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 c001a30:	f001 fcca 	bl	c0033c8 <HAL_PWREx_EnableVddIO2>
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB4 (NJTRST)     ------> SPI3_MISO
    PG9     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 c001a34:	2340      	movs	r3, #64	; 0x40
 c001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001a38:	2302      	movs	r3, #2
 c001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 c001a3c:	2302      	movs	r3, #2
 c001a3e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001a40:	2300      	movs	r3, #0
 c001a42:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 c001a44:	2305      	movs	r3, #5
 c001a46:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c001a48:	f107 031c 	add.w	r3, r7, #28
 c001a4c:	4619      	mov	r1, r3
 c001a4e:	485e      	ldr	r0, [pc, #376]	; (c001bc8 <HAL_SPI_MspInit+0x21c>)
 c001a50:	f001 f8f4 	bl	c002c3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 c001a54:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c001a58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001a5a:	2302      	movs	r3, #2
 c001a5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001a5e:	2300      	movs	r3, #0
 c001a60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001a62:	2300      	movs	r3, #0
 c001a64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c001a66:	2306      	movs	r3, #6
 c001a68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001a6a:	f107 031c 	add.w	r3, r7, #28
 c001a6e:	4619      	mov	r1, r3
 c001a70:	4856      	ldr	r0, [pc, #344]	; (c001bcc <HAL_SPI_MspInit+0x220>)
 c001a72:	f001 f8e3 	bl	c002c3c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel4;
 c001a76:	4b56      	ldr	r3, [pc, #344]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a78:	4a56      	ldr	r2, [pc, #344]	; (c001bd4 <HAL_SPI_MspInit+0x228>)
 c001a7a:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 c001a7c:	4b54      	ldr	r3, [pc, #336]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a7e:	220f      	movs	r2, #15
 c001a80:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 c001a82:	4b53      	ldr	r3, [pc, #332]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a84:	2200      	movs	r2, #0
 c001a86:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 c001a88:	4b51      	ldr	r3, [pc, #324]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a8a:	2200      	movs	r2, #0
 c001a8c:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 c001a8e:	4b50      	ldr	r3, [pc, #320]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a90:	2280      	movs	r2, #128	; 0x80
 c001a92:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c001a94:	4b4e      	ldr	r3, [pc, #312]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a96:	2200      	movs	r2, #0
 c001a98:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c001a9a:	4b4d      	ldr	r3, [pc, #308]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001a9c:	2200      	movs	r2, #0
 c001a9e:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 c001aa0:	4b4b      	ldr	r3, [pc, #300]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001aa2:	2200      	movs	r2, #0
 c001aa4:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 c001aa6:	4b4a      	ldr	r3, [pc, #296]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001aa8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c001aac:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 c001aae:	4848      	ldr	r0, [pc, #288]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001ab0:	f000 fd24 	bl	c0024fc <HAL_DMA_Init>
 c001ab4:	4603      	mov	r3, r0
 c001ab6:	2b00      	cmp	r3, #0
 c001ab8:	d001      	beq.n	c001abe <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 c001aba:	f7ff f9d1 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001abe:	2110      	movs	r1, #16
 c001ac0:	4843      	ldr	r0, [pc, #268]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001ac2:	f000 ff93 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001ac6:	4603      	mov	r3, r0
 c001ac8:	2b00      	cmp	r3, #0
 c001aca:	d001      	beq.n	c001ad0 <HAL_SPI_MspInit+0x124>
    {
      Error_Handler();
 c001acc:	f7ff f9c8 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SEC) != HAL_OK)
 c001ad0:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001ad4:	483e      	ldr	r0, [pc, #248]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001ad6:	f000 ff89 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001ada:	4603      	mov	r3, r0
 c001adc:	2b00      	cmp	r3, #0
 c001ade:	d001      	beq.n	c001ae4 <HAL_SPI_MspInit+0x138>
    {
      Error_Handler();
 c001ae0:	f7ff f9be 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001ae4:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001ae8:	4839      	ldr	r0, [pc, #228]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001aea:	f000 ff7f 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001aee:	4603      	mov	r3, r0
 c001af0:	2b00      	cmp	r3, #0
 c001af2:	d001      	beq.n	c001af8 <HAL_SPI_MspInit+0x14c>
    {
      Error_Handler();
 c001af4:	f7ff f9b4 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001af8:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001afc:	4834      	ldr	r0, [pc, #208]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001afe:	f000 ff75 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001b02:	4603      	mov	r3, r0
 c001b04:	2b00      	cmp	r3, #0
 c001b06:	d001      	beq.n	c001b0c <HAL_SPI_MspInit+0x160>
    {
      Error_Handler();
 c001b08:	f7ff f9aa 	bl	c000e60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 c001b0c:	687b      	ldr	r3, [r7, #4]
 c001b0e:	4a30      	ldr	r2, [pc, #192]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001b10:	659a      	str	r2, [r3, #88]	; 0x58
 c001b12:	4a2f      	ldr	r2, [pc, #188]	; (c001bd0 <HAL_SPI_MspInit+0x224>)
 c001b14:	687b      	ldr	r3, [r7, #4]
 c001b16:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 c001b18:	4b2f      	ldr	r3, [pc, #188]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b1a:	4a30      	ldr	r2, [pc, #192]	; (c001bdc <HAL_SPI_MspInit+0x230>)
 c001b1c:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 c001b1e:	4b2e      	ldr	r3, [pc, #184]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b20:	2210      	movs	r2, #16
 c001b22:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 c001b24:	4b2c      	ldr	r3, [pc, #176]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b26:	2210      	movs	r2, #16
 c001b28:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 c001b2a:	4b2b      	ldr	r3, [pc, #172]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b2c:	2200      	movs	r2, #0
 c001b2e:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 c001b30:	4b29      	ldr	r3, [pc, #164]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b32:	2280      	movs	r2, #128	; 0x80
 c001b34:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c001b36:	4b28      	ldr	r3, [pc, #160]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b38:	2200      	movs	r2, #0
 c001b3a:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c001b3c:	4b26      	ldr	r3, [pc, #152]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b3e:	2200      	movs	r2, #0
 c001b40:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 c001b42:	4b25      	ldr	r3, [pc, #148]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b44:	2200      	movs	r2, #0
 c001b46:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 c001b48:	4b23      	ldr	r3, [pc, #140]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b4a:	2200      	movs	r2, #0
 c001b4c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 c001b4e:	4822      	ldr	r0, [pc, #136]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b50:	f000 fcd4 	bl	c0024fc <HAL_DMA_Init>
 c001b54:	4603      	mov	r3, r0
 c001b56:	2b00      	cmp	r3, #0
 c001b58:	d001      	beq.n	c001b5e <HAL_SPI_MspInit+0x1b2>
    {
      Error_Handler();
 c001b5a:	f7ff f981 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001b5e:	2110      	movs	r1, #16
 c001b60:	481d      	ldr	r0, [pc, #116]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b62:	f000 ff43 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001b66:	4603      	mov	r3, r0
 c001b68:	2b00      	cmp	r3, #0
 c001b6a:	d001      	beq.n	c001b70 <HAL_SPI_MspInit+0x1c4>
    {
      Error_Handler();
 c001b6c:	f7ff f978 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SEC) != HAL_OK)
 c001b70:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c001b74:	4818      	ldr	r0, [pc, #96]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b76:	f000 ff39 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001b7a:	4603      	mov	r3, r0
 c001b7c:	2b00      	cmp	r3, #0
 c001b7e:	d001      	beq.n	c001b84 <HAL_SPI_MspInit+0x1d8>
    {
      Error_Handler();
 c001b80:	f7ff f96e 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c001b84:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c001b88:	4813      	ldr	r0, [pc, #76]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b8a:	f000 ff2f 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001b8e:	4603      	mov	r3, r0
 c001b90:	2b00      	cmp	r3, #0
 c001b92:	d001      	beq.n	c001b98 <HAL_SPI_MspInit+0x1ec>
    {
      Error_Handler();
 c001b94:	f7ff f964 	bl	c000e60 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c001b98:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001b9c:	480e      	ldr	r0, [pc, #56]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001b9e:	f000 ff25 	bl	c0029ec <HAL_DMA_ConfigChannelAttributes>
 c001ba2:	4603      	mov	r3, r0
 c001ba4:	2b00      	cmp	r3, #0
 c001ba6:	d001      	beq.n	c001bac <HAL_SPI_MspInit+0x200>
    {
      Error_Handler();
 c001ba8:	f7ff f95a 	bl	c000e60 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 c001bac:	687b      	ldr	r3, [r7, #4]
 c001bae:	4a0a      	ldr	r2, [pc, #40]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001bb0:	655a      	str	r2, [r3, #84]	; 0x54
 c001bb2:	4a09      	ldr	r2, [pc, #36]	; (c001bd8 <HAL_SPI_MspInit+0x22c>)
 c001bb4:	687b      	ldr	r3, [r7, #4]
 c001bb6:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 c001bb8:	bf00      	nop
 c001bba:	3730      	adds	r7, #48	; 0x30
 c001bbc:	46bd      	mov	sp, r7
 c001bbe:	bd80      	pop	{r7, pc}
 c001bc0:	50003c00 	.word	0x50003c00
 c001bc4:	50021000 	.word	0x50021000
 c001bc8:	52020c00 	.word	0x52020c00
 c001bcc:	52021800 	.word	0x52021800
 c001bd0:	30000128 	.word	0x30000128
 c001bd4:	50020044 	.word	0x50020044
 c001bd8:	30000190 	.word	0x30000190
 c001bdc:	50020030 	.word	0x50020030

0c001be0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c001be0:	b580      	push	{r7, lr}
 c001be2:	b0ae      	sub	sp, #184	; 0xb8
 c001be4:	af00      	add	r7, sp, #0
 c001be6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001be8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001bec:	2200      	movs	r2, #0
 c001bee:	601a      	str	r2, [r3, #0]
 c001bf0:	605a      	str	r2, [r3, #4]
 c001bf2:	609a      	str	r2, [r3, #8]
 c001bf4:	60da      	str	r2, [r3, #12]
 c001bf6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001bf8:	f107 0310 	add.w	r3, r7, #16
 c001bfc:	2294      	movs	r2, #148	; 0x94
 c001bfe:	2100      	movs	r1, #0
 c001c00:	4618      	mov	r0, r3
 c001c02:	f004 ff8a 	bl	c006b1a <memset>
  if(huart->Instance==USART1)
 c001c06:	687b      	ldr	r3, [r7, #4]
 c001c08:	681b      	ldr	r3, [r3, #0]
 c001c0a:	4a21      	ldr	r2, [pc, #132]	; (c001c90 <HAL_UART_MspInit+0xb0>)
 c001c0c:	4293      	cmp	r3, r2
 c001c0e:	d13b      	bne.n	c001c88 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c001c10:	2301      	movs	r3, #1
 c001c12:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c001c14:	2300      	movs	r3, #0
 c001c16:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c001c18:	f107 0310 	add.w	r3, r7, #16
 c001c1c:	4618      	mov	r0, r3
 c001c1e:	f002 fbd1 	bl	c0043c4 <HAL_RCCEx_PeriphCLKConfig>
 c001c22:	4603      	mov	r3, r0
 c001c24:	2b00      	cmp	r3, #0
 c001c26:	d001      	beq.n	c001c2c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c001c28:	f7ff f91a 	bl	c000e60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c001c2c:	4b19      	ldr	r3, [pc, #100]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001c30:	4a18      	ldr	r2, [pc, #96]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c32:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001c36:	6613      	str	r3, [r2, #96]	; 0x60
 c001c38:	4b16      	ldr	r3, [pc, #88]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001c3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c001c40:	60fb      	str	r3, [r7, #12]
 c001c42:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c001c44:	4b13      	ldr	r3, [pc, #76]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c46:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c48:	4a12      	ldr	r2, [pc, #72]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c4a:	f043 0301 	orr.w	r3, r3, #1
 c001c4e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001c50:	4b10      	ldr	r3, [pc, #64]	; (c001c94 <HAL_UART_MspInit+0xb4>)
 c001c52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001c54:	f003 0301 	and.w	r3, r3, #1
 c001c58:	60bb      	str	r3, [r7, #8]
 c001c5a:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c001c5c:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c001c60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001c64:	2302      	movs	r3, #2
 c001c66:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001c6a:	2300      	movs	r3, #0
 c001c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c001c70:	2300      	movs	r3, #0
 c001c72:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c001c76:	2307      	movs	r3, #7
 c001c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c001c7c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001c80:	4619      	mov	r1, r3
 c001c82:	4805      	ldr	r0, [pc, #20]	; (c001c98 <HAL_UART_MspInit+0xb8>)
 c001c84:	f000 ffda 	bl	c002c3c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c001c88:	bf00      	nop
 c001c8a:	37b8      	adds	r7, #184	; 0xb8
 c001c8c:	46bd      	mov	sp, r7
 c001c8e:	bd80      	pop	{r7, pc}
 c001c90:	50013800 	.word	0x50013800
 c001c94:	50021000 	.word	0x50021000
 c001c98:	52020000 	.word	0x52020000

0c001c9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001c9c:	b480      	push	{r7}
 c001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c001ca0:	e7fe      	b.n	c001ca0 <NMI_Handler+0x4>

0c001ca2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c001ca2:	b480      	push	{r7}
 c001ca4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001ca6:	e7fe      	b.n	c001ca6 <HardFault_Handler+0x4>

0c001ca8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001ca8:	b480      	push	{r7}
 c001caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001cac:	e7fe      	b.n	c001cac <MemManage_Handler+0x4>

0c001cae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c001cae:	b480      	push	{r7}
 c001cb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c001cb2:	e7fe      	b.n	c001cb2 <BusFault_Handler+0x4>

0c001cb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001cb4:	b480      	push	{r7}
 c001cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001cb8:	e7fe      	b.n	c001cb8 <UsageFault_Handler+0x4>

0c001cba <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001cba:	b480      	push	{r7}
 c001cbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c001cbe:	e7fe      	b.n	c001cbe <SecureFault_Handler+0x4>

0c001cc0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c001cc0:	b480      	push	{r7}
 c001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001cc4:	bf00      	nop
 c001cc6:	46bd      	mov	sp, r7
 c001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ccc:	4770      	bx	lr

0c001cce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c001cce:	b480      	push	{r7}
 c001cd0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c001cd2:	bf00      	nop
 c001cd4:	46bd      	mov	sp, r7
 c001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001cda:	4770      	bx	lr

0c001cdc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001cdc:	b480      	push	{r7}
 c001cde:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c001ce0:	bf00      	nop
 c001ce2:	46bd      	mov	sp, r7
 c001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ce8:	4770      	bx	lr

0c001cea <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001cea:	b580      	push	{r7, lr}
 c001cec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c001cee:	f000 fad5 	bl	c00229c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c001cf2:	bf00      	nop
 c001cf4:	bd80      	pop	{r7, pc}
	...

0c001cf8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 c001cf8:	b580      	push	{r7, lr}
 c001cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 c001cfc:	4802      	ldr	r0, [pc, #8]	; (c001d08 <DMA1_Channel1_IRQHandler+0x10>)
 c001cfe:	f000 fd20 	bl	c002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c001d02:	bf00      	nop
 c001d04:	bd80      	pop	{r7, pc}
 c001d06:	bf00      	nop
 c001d08:	30000290 	.word	0x30000290

0c001d0c <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 c001d0c:	b580      	push	{r7, lr}
 c001d0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 c001d10:	4802      	ldr	r0, [pc, #8]	; (c001d1c <DMA1_Channel3_IRQHandler+0x10>)
 c001d12:	f000 fd16 	bl	c002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c001d16:	bf00      	nop
 c001d18:	bd80      	pop	{r7, pc}
 c001d1a:	bf00      	nop
 c001d1c:	30000190 	.word	0x30000190

0c001d20 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 c001d20:	b580      	push	{r7, lr}
 c001d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 c001d24:	4802      	ldr	r0, [pc, #8]	; (c001d30 <DMA1_Channel4_IRQHandler+0x10>)
 c001d26:	f000 fd0c 	bl	c002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 c001d2a:	bf00      	nop
 c001d2c:	bd80      	pop	{r7, pc}
 c001d2e:	bf00      	nop
 c001d30:	30000128 	.word	0x30000128

0c001d34 <DMA1_Channel5_IRQHandler>:

void DMA1_Channel5_IRQHandler(void)
{
 c001d34:	b580      	push	{r7, lr}
 c001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel5);
 c001d38:	4802      	ldr	r0, [pc, #8]	; (c001d44 <DMA1_Channel5_IRQHandler+0x10>)
 c001d3a:	f000 fd02 	bl	c002742 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 c001d3e:	bf00      	nop
 c001d40:	bd80      	pop	{r7, pc}
 c001d42:	bf00      	nop
 c001d44:	300002f8 	.word	0x300002f8

0c001d48 <_read>:
 c001d48:	b580      	push	{r7, lr}
 c001d4a:	b086      	sub	sp, #24
 c001d4c:	af00      	add	r7, sp, #0
 c001d4e:	60f8      	str	r0, [r7, #12]
 c001d50:	60b9      	str	r1, [r7, #8]
 c001d52:	607a      	str	r2, [r7, #4]
 c001d54:	2300      	movs	r3, #0
 c001d56:	617b      	str	r3, [r7, #20]
 c001d58:	e00a      	b.n	c001d70 <_read+0x28>
 c001d5a:	e000      	b.n	c001d5e <_read+0x16>
 c001d5c:	bf00      	nop
 c001d5e:	4601      	mov	r1, r0
 c001d60:	68bb      	ldr	r3, [r7, #8]
 c001d62:	1c5a      	adds	r2, r3, #1
 c001d64:	60ba      	str	r2, [r7, #8]
 c001d66:	b2ca      	uxtb	r2, r1
 c001d68:	701a      	strb	r2, [r3, #0]
 c001d6a:	697b      	ldr	r3, [r7, #20]
 c001d6c:	3301      	adds	r3, #1
 c001d6e:	617b      	str	r3, [r7, #20]
 c001d70:	697a      	ldr	r2, [r7, #20]
 c001d72:	687b      	ldr	r3, [r7, #4]
 c001d74:	429a      	cmp	r2, r3
 c001d76:	dbf0      	blt.n	c001d5a <_read+0x12>
 c001d78:	687b      	ldr	r3, [r7, #4]
 c001d7a:	4618      	mov	r0, r3
 c001d7c:	3718      	adds	r7, #24
 c001d7e:	46bd      	mov	sp, r7
 c001d80:	bd80      	pop	{r7, pc}

0c001d82 <_write>:
 c001d82:	b580      	push	{r7, lr}
 c001d84:	b086      	sub	sp, #24
 c001d86:	af00      	add	r7, sp, #0
 c001d88:	60f8      	str	r0, [r7, #12]
 c001d8a:	60b9      	str	r1, [r7, #8]
 c001d8c:	607a      	str	r2, [r7, #4]
 c001d8e:	2300      	movs	r3, #0
 c001d90:	617b      	str	r3, [r7, #20]
 c001d92:	e009      	b.n	c001da8 <_write+0x26>
 c001d94:	68bb      	ldr	r3, [r7, #8]
 c001d96:	1c5a      	adds	r2, r3, #1
 c001d98:	60ba      	str	r2, [r7, #8]
 c001d9a:	781b      	ldrb	r3, [r3, #0]
 c001d9c:	4618      	mov	r0, r3
 c001d9e:	f7fe fff1 	bl	c000d84 <__io_putchar>
 c001da2:	697b      	ldr	r3, [r7, #20]
 c001da4:	3301      	adds	r3, #1
 c001da6:	617b      	str	r3, [r7, #20]
 c001da8:	697a      	ldr	r2, [r7, #20]
 c001daa:	687b      	ldr	r3, [r7, #4]
 c001dac:	429a      	cmp	r2, r3
 c001dae:	dbf1      	blt.n	c001d94 <_write+0x12>
 c001db0:	687b      	ldr	r3, [r7, #4]
 c001db2:	4618      	mov	r0, r3
 c001db4:	3718      	adds	r7, #24
 c001db6:	46bd      	mov	sp, r7
 c001db8:	bd80      	pop	{r7, pc}

0c001dba <_close>:
 c001dba:	b480      	push	{r7}
 c001dbc:	b083      	sub	sp, #12
 c001dbe:	af00      	add	r7, sp, #0
 c001dc0:	6078      	str	r0, [r7, #4]
 c001dc2:	f04f 33ff 	mov.w	r3, #4294967295
 c001dc6:	4618      	mov	r0, r3
 c001dc8:	370c      	adds	r7, #12
 c001dca:	46bd      	mov	sp, r7
 c001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001dd0:	4770      	bx	lr

0c001dd2 <_fstat>:
 c001dd2:	b480      	push	{r7}
 c001dd4:	b083      	sub	sp, #12
 c001dd6:	af00      	add	r7, sp, #0
 c001dd8:	6078      	str	r0, [r7, #4]
 c001dda:	6039      	str	r1, [r7, #0]
 c001ddc:	683b      	ldr	r3, [r7, #0]
 c001dde:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c001de2:	605a      	str	r2, [r3, #4]
 c001de4:	2300      	movs	r3, #0
 c001de6:	4618      	mov	r0, r3
 c001de8:	370c      	adds	r7, #12
 c001dea:	46bd      	mov	sp, r7
 c001dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001df0:	4770      	bx	lr

0c001df2 <_isatty>:
 c001df2:	b480      	push	{r7}
 c001df4:	b083      	sub	sp, #12
 c001df6:	af00      	add	r7, sp, #0
 c001df8:	6078      	str	r0, [r7, #4]
 c001dfa:	2301      	movs	r3, #1
 c001dfc:	4618      	mov	r0, r3
 c001dfe:	370c      	adds	r7, #12
 c001e00:	46bd      	mov	sp, r7
 c001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e06:	4770      	bx	lr

0c001e08 <_lseek>:
 c001e08:	b480      	push	{r7}
 c001e0a:	b085      	sub	sp, #20
 c001e0c:	af00      	add	r7, sp, #0
 c001e0e:	60f8      	str	r0, [r7, #12]
 c001e10:	60b9      	str	r1, [r7, #8]
 c001e12:	607a      	str	r2, [r7, #4]
 c001e14:	2300      	movs	r3, #0
 c001e16:	4618      	mov	r0, r3
 c001e18:	3714      	adds	r7, #20
 c001e1a:	46bd      	mov	sp, r7
 c001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e20:	4770      	bx	lr
	...

0c001e24 <_sbrk>:
 c001e24:	b580      	push	{r7, lr}
 c001e26:	b086      	sub	sp, #24
 c001e28:	af00      	add	r7, sp, #0
 c001e2a:	6078      	str	r0, [r7, #4]
 c001e2c:	4a14      	ldr	r2, [pc, #80]	; (c001e80 <_sbrk+0x5c>)
 c001e2e:	4b15      	ldr	r3, [pc, #84]	; (c001e84 <_sbrk+0x60>)
 c001e30:	1ad3      	subs	r3, r2, r3
 c001e32:	617b      	str	r3, [r7, #20]
 c001e34:	697b      	ldr	r3, [r7, #20]
 c001e36:	613b      	str	r3, [r7, #16]
 c001e38:	4b13      	ldr	r3, [pc, #76]	; (c001e88 <_sbrk+0x64>)
 c001e3a:	681b      	ldr	r3, [r3, #0]
 c001e3c:	2b00      	cmp	r3, #0
 c001e3e:	d102      	bne.n	c001e46 <_sbrk+0x22>
 c001e40:	4b11      	ldr	r3, [pc, #68]	; (c001e88 <_sbrk+0x64>)
 c001e42:	4a12      	ldr	r2, [pc, #72]	; (c001e8c <_sbrk+0x68>)
 c001e44:	601a      	str	r2, [r3, #0]
 c001e46:	4b10      	ldr	r3, [pc, #64]	; (c001e88 <_sbrk+0x64>)
 c001e48:	681a      	ldr	r2, [r3, #0]
 c001e4a:	687b      	ldr	r3, [r7, #4]
 c001e4c:	4413      	add	r3, r2
 c001e4e:	693a      	ldr	r2, [r7, #16]
 c001e50:	429a      	cmp	r2, r3
 c001e52:	d207      	bcs.n	c001e64 <_sbrk+0x40>
 c001e54:	f004 fe2a 	bl	c006aac <__errno>
 c001e58:	4603      	mov	r3, r0
 c001e5a:	220c      	movs	r2, #12
 c001e5c:	601a      	str	r2, [r3, #0]
 c001e5e:	f04f 33ff 	mov.w	r3, #4294967295
 c001e62:	e009      	b.n	c001e78 <_sbrk+0x54>
 c001e64:	4b08      	ldr	r3, [pc, #32]	; (c001e88 <_sbrk+0x64>)
 c001e66:	681b      	ldr	r3, [r3, #0]
 c001e68:	60fb      	str	r3, [r7, #12]
 c001e6a:	4b07      	ldr	r3, [pc, #28]	; (c001e88 <_sbrk+0x64>)
 c001e6c:	681a      	ldr	r2, [r3, #0]
 c001e6e:	687b      	ldr	r3, [r7, #4]
 c001e70:	4413      	add	r3, r2
 c001e72:	4a05      	ldr	r2, [pc, #20]	; (c001e88 <_sbrk+0x64>)
 c001e74:	6013      	str	r3, [r2, #0]
 c001e76:	68fb      	ldr	r3, [r7, #12]
 c001e78:	4618      	mov	r0, r3
 c001e7a:	3718      	adds	r7, #24
 c001e7c:	46bd      	mov	sp, r7
 c001e7e:	bd80      	pop	{r7, pc}
 c001e80:	30018000 	.word	0x30018000
 c001e84:	00000400 	.word	0x00000400
 c001e88:	30000b74 	.word	0x30000b74
 c001e8c:	30000b90 	.word	0x30000b90

0c001e90 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001e90:	b480      	push	{r7}
 c001e92:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001e94:	4b2f      	ldr	r3, [pc, #188]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001e96:	2200      	movs	r2, #0
 c001e98:	609a      	str	r2, [r3, #8]
 c001e9a:	4b2e      	ldr	r3, [pc, #184]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001e9c:	4a2e      	ldr	r2, [pc, #184]	; (c001f58 <TZ_SAU_Setup+0xc8>)
 c001e9e:	60da      	str	r2, [r3, #12]
 c001ea0:	4b2c      	ldr	r3, [pc, #176]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ea2:	4a2e      	ldr	r2, [pc, #184]	; (c001f5c <TZ_SAU_Setup+0xcc>)
 c001ea4:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001ea6:	4b2b      	ldr	r3, [pc, #172]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ea8:	2201      	movs	r2, #1
 c001eaa:	609a      	str	r2, [r3, #8]
 c001eac:	4b29      	ldr	r3, [pc, #164]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001eae:	4a2c      	ldr	r2, [pc, #176]	; (c001f60 <TZ_SAU_Setup+0xd0>)
 c001eb0:	60da      	str	r2, [r3, #12]
 c001eb2:	4b28      	ldr	r3, [pc, #160]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001eb4:	4a2b      	ldr	r2, [pc, #172]	; (c001f64 <TZ_SAU_Setup+0xd4>)
 c001eb6:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001eb8:	4b26      	ldr	r3, [pc, #152]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001eba:	2202      	movs	r2, #2
 c001ebc:	609a      	str	r2, [r3, #8]
 c001ebe:	4b25      	ldr	r3, [pc, #148]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ec0:	4a29      	ldr	r2, [pc, #164]	; (c001f68 <TZ_SAU_Setup+0xd8>)
 c001ec2:	60da      	str	r2, [r3, #12]
 c001ec4:	4b23      	ldr	r3, [pc, #140]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ec6:	4a29      	ldr	r2, [pc, #164]	; (c001f6c <TZ_SAU_Setup+0xdc>)
 c001ec8:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001eca:	4b22      	ldr	r3, [pc, #136]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ecc:	2203      	movs	r2, #3
 c001ece:	609a      	str	r2, [r3, #8]
 c001ed0:	4b20      	ldr	r3, [pc, #128]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ed2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001ed6:	60da      	str	r2, [r3, #12]
 c001ed8:	4b1e      	ldr	r3, [pc, #120]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001eda:	4a25      	ldr	r2, [pc, #148]	; (c001f70 <TZ_SAU_Setup+0xe0>)
 c001edc:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001ede:	4b1d      	ldr	r3, [pc, #116]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ee0:	2204      	movs	r2, #4
 c001ee2:	609a      	str	r2, [r3, #8]
 c001ee4:	4b1b      	ldr	r3, [pc, #108]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ee6:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001eea:	60da      	str	r2, [r3, #12]
 c001eec:	4b19      	ldr	r3, [pc, #100]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001eee:	4a21      	ldr	r2, [pc, #132]	; (c001f74 <TZ_SAU_Setup+0xe4>)
 c001ef0:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001ef2:	4b18      	ldr	r3, [pc, #96]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001ef4:	2205      	movs	r2, #5
 c001ef6:	609a      	str	r2, [r3, #8]
 c001ef8:	4b16      	ldr	r3, [pc, #88]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001efa:	4a1f      	ldr	r2, [pc, #124]	; (c001f78 <TZ_SAU_Setup+0xe8>)
 c001efc:	60da      	str	r2, [r3, #12]
 c001efe:	4b15      	ldr	r3, [pc, #84]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001f00:	4a1e      	ldr	r2, [pc, #120]	; (c001f7c <TZ_SAU_Setup+0xec>)
 c001f02:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001f04:	4b13      	ldr	r3, [pc, #76]	; (c001f54 <TZ_SAU_Setup+0xc4>)
 c001f06:	2201      	movs	r2, #1
 c001f08:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001f0a:	4b1d      	ldr	r3, [pc, #116]	; (c001f80 <TZ_SAU_Setup+0xf0>)
 c001f0c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001f10:	4a1b      	ldr	r2, [pc, #108]	; (c001f80 <TZ_SAU_Setup+0xf0>)
 c001f12:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001f16:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f1a:	4b1a      	ldr	r3, [pc, #104]	; (c001f84 <TZ_SAU_Setup+0xf4>)
 c001f1c:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001f1e:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f22:	4a18      	ldr	r2, [pc, #96]	; (c001f84 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001f28:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001f2a:	4b17      	ldr	r3, [pc, #92]	; (c001f88 <TZ_SAU_Setup+0xf8>)
 c001f2c:	2200      	movs	r2, #0
 c001f2e:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001f32:	4b15      	ldr	r3, [pc, #84]	; (c001f88 <TZ_SAU_Setup+0xf8>)
 c001f34:	2200      	movs	r2, #0
 c001f36:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001f3a:	4b13      	ldr	r3, [pc, #76]	; (c001f88 <TZ_SAU_Setup+0xf8>)
 c001f3c:	2200      	movs	r2, #0
 c001f3e:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001f42:	4b11      	ldr	r3, [pc, #68]	; (c001f88 <TZ_SAU_Setup+0xf8>)
 c001f44:	2200      	movs	r2, #0
 c001f46:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001f4a:	bf00      	nop
 c001f4c:	46bd      	mov	sp, r7
 c001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f52:	4770      	bx	lr
 c001f54:	e000edd0 	.word	0xe000edd0
 c001f58:	0c03e000 	.word	0x0c03e000
 c001f5c:	0c03ffe3 	.word	0x0c03ffe3
 c001f60:	08040000 	.word	0x08040000
 c001f64:	0807ffe1 	.word	0x0807ffe1
 c001f68:	20018000 	.word	0x20018000
 c001f6c:	2003ffe1 	.word	0x2003ffe1
 c001f70:	4fffffe1 	.word	0x4fffffe1
 c001f74:	9fffffe1 	.word	0x9fffffe1
 c001f78:	0bf90000 	.word	0x0bf90000
 c001f7c:	0bfa8fe1 	.word	0x0bfa8fe1
 c001f80:	e000ed00 	.word	0xe000ed00
 c001f84:	e000ef30 	.word	0xe000ef30
 c001f88:	e000e100 	.word	0xe000e100

0c001f8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001f8c:	b580      	push	{r7, lr}
 c001f8e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001f90:	f7ff ff7e 	bl	c001e90 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001f94:	4b08      	ldr	r3, [pc, #32]	; (c001fb8 <SystemInit+0x2c>)
 c001f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001f9a:	4a07      	ldr	r2, [pc, #28]	; (c001fb8 <SystemInit+0x2c>)
 c001f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001fa4:	4b05      	ldr	r3, [pc, #20]	; (c001fbc <SystemInit+0x30>)
 c001fa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001faa:	4a04      	ldr	r2, [pc, #16]	; (c001fbc <SystemInit+0x30>)
 c001fac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001fb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001fb4:	bf00      	nop
 c001fb6:	bd80      	pop	{r7, pc}
 c001fb8:	e000ed00 	.word	0xe000ed00
 c001fbc:	e002ed00 	.word	0xe002ed00

0c001fc0 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001fc0:	b480      	push	{r7}
 c001fc2:	b087      	sub	sp, #28
 c001fc4:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001fc6:	4b4f      	ldr	r3, [pc, #316]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c001fc8:	681b      	ldr	r3, [r3, #0]
 c001fca:	f003 0308 	and.w	r3, r3, #8
 c001fce:	2b00      	cmp	r3, #0
 c001fd0:	d107      	bne.n	c001fe2 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001fd2:	4b4c      	ldr	r3, [pc, #304]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c001fd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001fd8:	0a1b      	lsrs	r3, r3, #8
 c001fda:	f003 030f 	and.w	r3, r3, #15
 c001fde:	617b      	str	r3, [r7, #20]
 c001fe0:	e005      	b.n	c001fee <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c001fe2:	4b48      	ldr	r3, [pc, #288]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c001fe4:	681b      	ldr	r3, [r3, #0]
 c001fe6:	091b      	lsrs	r3, r3, #4
 c001fe8:	f003 030f 	and.w	r3, r3, #15
 c001fec:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001fee:	4a46      	ldr	r2, [pc, #280]	; (c002108 <SystemCoreClockUpdate+0x148>)
 c001ff0:	697b      	ldr	r3, [r7, #20]
 c001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001ff6:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001ff8:	4b42      	ldr	r3, [pc, #264]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c001ffa:	689b      	ldr	r3, [r3, #8]
 c001ffc:	f003 030c 	and.w	r3, r3, #12
 c002000:	2b0c      	cmp	r3, #12
 c002002:	d866      	bhi.n	c0020d2 <SystemCoreClockUpdate+0x112>
 c002004:	a201      	add	r2, pc, #4	; (adr r2, c00200c <SystemCoreClockUpdate+0x4c>)
 c002006:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00200a:	bf00      	nop
 c00200c:	0c002041 	.word	0x0c002041
 c002010:	0c0020d3 	.word	0x0c0020d3
 c002014:	0c0020d3 	.word	0x0c0020d3
 c002018:	0c0020d3 	.word	0x0c0020d3
 c00201c:	0c002049 	.word	0x0c002049
 c002020:	0c0020d3 	.word	0x0c0020d3
 c002024:	0c0020d3 	.word	0x0c0020d3
 c002028:	0c0020d3 	.word	0x0c0020d3
 c00202c:	0c002051 	.word	0x0c002051
 c002030:	0c0020d3 	.word	0x0c0020d3
 c002034:	0c0020d3 	.word	0x0c0020d3
 c002038:	0c0020d3 	.word	0x0c0020d3
 c00203c:	0c002059 	.word	0x0c002059
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c002040:	4a32      	ldr	r2, [pc, #200]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c002042:	697b      	ldr	r3, [r7, #20]
 c002044:	6013      	str	r3, [r2, #0]
      break;
 c002046:	e048      	b.n	c0020da <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c002048:	4b30      	ldr	r3, [pc, #192]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c00204a:	4a31      	ldr	r2, [pc, #196]	; (c002110 <SystemCoreClockUpdate+0x150>)
 c00204c:	601a      	str	r2, [r3, #0]
      break;
 c00204e:	e044      	b.n	c0020da <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c002050:	4b2e      	ldr	r3, [pc, #184]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c002052:	4a30      	ldr	r2, [pc, #192]	; (c002114 <SystemCoreClockUpdate+0x154>)
 c002054:	601a      	str	r2, [r3, #0]
      break;
 c002056:	e040      	b.n	c0020da <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002058:	4b2a      	ldr	r3, [pc, #168]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c00205a:	68db      	ldr	r3, [r3, #12]
 c00205c:	f003 0303 	and.w	r3, r3, #3
 c002060:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c002062:	4b28      	ldr	r3, [pc, #160]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c002064:	68db      	ldr	r3, [r3, #12]
 c002066:	091b      	lsrs	r3, r3, #4
 c002068:	f003 030f 	and.w	r3, r3, #15
 c00206c:	3301      	adds	r3, #1
 c00206e:	60bb      	str	r3, [r7, #8]
 c002070:	68fb      	ldr	r3, [r7, #12]
 c002072:	2b02      	cmp	r3, #2
 c002074:	d003      	beq.n	c00207e <SystemCoreClockUpdate+0xbe>
 c002076:	68fb      	ldr	r3, [r7, #12]
 c002078:	2b03      	cmp	r3, #3
 c00207a:	d006      	beq.n	c00208a <SystemCoreClockUpdate+0xca>
 c00207c:	e00b      	b.n	c002096 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00207e:	4a24      	ldr	r2, [pc, #144]	; (c002110 <SystemCoreClockUpdate+0x150>)
 c002080:	68bb      	ldr	r3, [r7, #8]
 c002082:	fbb2 f3f3 	udiv	r3, r2, r3
 c002086:	613b      	str	r3, [r7, #16]
          break;
 c002088:	e00b      	b.n	c0020a2 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00208a:	4a22      	ldr	r2, [pc, #136]	; (c002114 <SystemCoreClockUpdate+0x154>)
 c00208c:	68bb      	ldr	r3, [r7, #8]
 c00208e:	fbb2 f3f3 	udiv	r3, r2, r3
 c002092:	613b      	str	r3, [r7, #16]
          break;
 c002094:	e005      	b.n	c0020a2 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c002096:	697a      	ldr	r2, [r7, #20]
 c002098:	68bb      	ldr	r3, [r7, #8]
 c00209a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00209e:	613b      	str	r3, [r7, #16]
          break;
 c0020a0:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c0020a2:	4b18      	ldr	r3, [pc, #96]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c0020a4:	68db      	ldr	r3, [r3, #12]
 c0020a6:	0a1b      	lsrs	r3, r3, #8
 c0020a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c0020ac:	693b      	ldr	r3, [r7, #16]
 c0020ae:	fb02 f303 	mul.w	r3, r2, r3
 c0020b2:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c0020b4:	4b13      	ldr	r3, [pc, #76]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c0020b6:	68db      	ldr	r3, [r3, #12]
 c0020b8:	0e5b      	lsrs	r3, r3, #25
 c0020ba:	f003 0303 	and.w	r3, r3, #3
 c0020be:	3301      	adds	r3, #1
 c0020c0:	005b      	lsls	r3, r3, #1
 c0020c2:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c0020c4:	693a      	ldr	r2, [r7, #16]
 c0020c6:	687b      	ldr	r3, [r7, #4]
 c0020c8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0020cc:	4a0f      	ldr	r2, [pc, #60]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c0020ce:	6013      	str	r3, [r2, #0]
      break;
 c0020d0:	e003      	b.n	c0020da <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c0020d2:	4a0e      	ldr	r2, [pc, #56]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c0020d4:	697b      	ldr	r3, [r7, #20]
 c0020d6:	6013      	str	r3, [r2, #0]
      break;
 c0020d8:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c0020da:	4b0a      	ldr	r3, [pc, #40]	; (c002104 <SystemCoreClockUpdate+0x144>)
 c0020dc:	689b      	ldr	r3, [r3, #8]
 c0020de:	091b      	lsrs	r3, r3, #4
 c0020e0:	f003 030f 	and.w	r3, r3, #15
 c0020e4:	4a0c      	ldr	r2, [pc, #48]	; (c002118 <SystemCoreClockUpdate+0x158>)
 c0020e6:	5cd3      	ldrb	r3, [r2, r3]
 c0020e8:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c0020ea:	4b08      	ldr	r3, [pc, #32]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c0020ec:	681a      	ldr	r2, [r3, #0]
 c0020ee:	683b      	ldr	r3, [r7, #0]
 c0020f0:	fa22 f303 	lsr.w	r3, r2, r3
 c0020f4:	4a05      	ldr	r2, [pc, #20]	; (c00210c <SystemCoreClockUpdate+0x14c>)
 c0020f6:	6013      	str	r3, [r2, #0]
}
 c0020f8:	bf00      	nop
 c0020fa:	371c      	adds	r7, #28
 c0020fc:	46bd      	mov	sp, r7
 c0020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002102:	4770      	bx	lr
 c002104:	50021000 	.word	0x50021000
 c002108:	0c0085a4 	.word	0x0c0085a4
 c00210c:	30000038 	.word	0x30000038
 c002110:	00f42400 	.word	0x00f42400
 c002114:	007a1200 	.word	0x007a1200
 c002118:	0c00858c 	.word	0x0c00858c

0c00211c <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c00211c:	b580      	push	{r7, lr}
 c00211e:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c002120:	f7ff ff4e 	bl	c001fc0 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c002124:	4b1c      	ldr	r3, [pc, #112]	; (c002198 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c002126:	681b      	ldr	r3, [r3, #0]
}
 c002128:	4618      	mov	r0, r3
 c00212a:	46bd      	mov	sp, r7
 c00212c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c002130:	4671      	mov	r1, lr
 c002132:	4672      	mov	r2, lr
 c002134:	4673      	mov	r3, lr
 c002136:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00213a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00213e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c002142:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c002146:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00214a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00214e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c002152:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c002156:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00215a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00215e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c002162:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c002166:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00216a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00216e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c002172:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c002176:	f38e 8c00 	msr	CPSR_fs, lr
 c00217a:	b410      	push	{r4}
 c00217c:	eef1 ca10 	vmrs	ip, fpscr
 c002180:	f64f 7460 	movw	r4, #65376	; 0xff60
 c002184:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c002188:	ea0c 0c04 	and.w	ip, ip, r4
 c00218c:	eee1 ca10 	vmsr	fpscr, ip
 c002190:	bc10      	pop	{r4}
 c002192:	46f4      	mov	ip, lr
 c002194:	4774      	bxns	lr
 c002196:	bf00      	nop
 c002198:	30000038 	.word	0x30000038

0c00219c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c00219c:	f8df d034 	ldr.w	sp, [pc, #52]	; c0021d4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c0021a0:	f7ff fef4 	bl	c001f8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c0021a4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c0021a6:	e003      	b.n	c0021b0 <LoopCopyDataInit>

0c0021a8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0021a8:	4b0b      	ldr	r3, [pc, #44]	; (c0021d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0021aa:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0021ac:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0021ae:	3104      	adds	r1, #4

0c0021b0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0021b0:	480a      	ldr	r0, [pc, #40]	; (c0021dc <LoopForever+0xa>)
	ldr	r3, =_edata
 c0021b2:	4b0b      	ldr	r3, [pc, #44]	; (c0021e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0021b4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0021b6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0021b8:	d3f6      	bcc.n	c0021a8 <CopyDataInit>
	ldr	r2, =_sbss
 c0021ba:	4a0a      	ldr	r2, [pc, #40]	; (c0021e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 c0021bc:	e002      	b.n	c0021c4 <LoopFillZerobss>

0c0021be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0021be:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0021c0:	f842 3b04 	str.w	r3, [r2], #4

0c0021c4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0021c4:	4b08      	ldr	r3, [pc, #32]	; (c0021e8 <LoopForever+0x16>)
	cmp	r2, r3
 c0021c6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0021c8:	d3f9      	bcc.n	c0021be <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0021ca:	f004 fc75 	bl	c006ab8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0021ce:	f7fe fa63 	bl	c000698 <main>

0c0021d2 <LoopForever>:

LoopForever:
    b LoopForever
 c0021d2:	e7fe      	b.n	c0021d2 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0021d4:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0021d8:	0c0086b4 	.word	0x0c0086b4
	ldr	r0, =_sdata
 c0021dc:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0021e0:	300000a8 	.word	0x300000a8
	ldr	r2, =_sbss
 c0021e4:	300000a8 	.word	0x300000a8
	ldr	r3, = _ebss
 c0021e8:	30000b8c 	.word	0x30000b8c

0c0021ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0021ec:	e7fe      	b.n	c0021ec <ADC1_2_IRQHandler>

0c0021ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c0021ee:	b580      	push	{r7, lr}
 c0021f0:	b082      	sub	sp, #8
 c0021f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c0021f4:	2300      	movs	r3, #0
 c0021f6:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c0021f8:	2004      	movs	r0, #4
 c0021fa:	f000 f93f 	bl	c00247c <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c0021fe:	f7ff fedf 	bl	c001fc0 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c002202:	2000      	movs	r0, #0
 c002204:	f000 f80e 	bl	c002224 <HAL_InitTick>
 c002208:	4603      	mov	r3, r0
 c00220a:	2b00      	cmp	r3, #0
 c00220c:	d002      	beq.n	c002214 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c00220e:	2301      	movs	r3, #1
 c002210:	71fb      	strb	r3, [r7, #7]
 c002212:	e001      	b.n	c002218 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c002214:	f7ff fb9a 	bl	c00194c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c002218:	79fb      	ldrb	r3, [r7, #7]
}
 c00221a:	4618      	mov	r0, r3
 c00221c:	3708      	adds	r7, #8
 c00221e:	46bd      	mov	sp, r7
 c002220:	bd80      	pop	{r7, pc}
	...

0c002224 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c002224:	b580      	push	{r7, lr}
 c002226:	b084      	sub	sp, #16
 c002228:	af00      	add	r7, sp, #0
 c00222a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c00222c:	2300      	movs	r3, #0
 c00222e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c002230:	4b17      	ldr	r3, [pc, #92]	; (c002290 <HAL_InitTick+0x6c>)
 c002232:	781b      	ldrb	r3, [r3, #0]
 c002234:	2b00      	cmp	r3, #0
 c002236:	d023      	beq.n	c002280 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c002238:	4b16      	ldr	r3, [pc, #88]	; (c002294 <HAL_InitTick+0x70>)
 c00223a:	681a      	ldr	r2, [r3, #0]
 c00223c:	4b14      	ldr	r3, [pc, #80]	; (c002290 <HAL_InitTick+0x6c>)
 c00223e:	781b      	ldrb	r3, [r3, #0]
 c002240:	4619      	mov	r1, r3
 c002242:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c002246:	fbb3 f3f1 	udiv	r3, r3, r1
 c00224a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00224e:	4618      	mov	r0, r3
 c002250:	f000 f947 	bl	c0024e2 <HAL_SYSTICK_Config>
 c002254:	4603      	mov	r3, r0
 c002256:	2b00      	cmp	r3, #0
 c002258:	d10f      	bne.n	c00227a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c00225a:	687b      	ldr	r3, [r7, #4]
 c00225c:	2b07      	cmp	r3, #7
 c00225e:	d809      	bhi.n	c002274 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c002260:	2200      	movs	r2, #0
 c002262:	6879      	ldr	r1, [r7, #4]
 c002264:	f04f 30ff 	mov.w	r0, #4294967295
 c002268:	f000 f913 	bl	c002492 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c00226c:	4a0a      	ldr	r2, [pc, #40]	; (c002298 <HAL_InitTick+0x74>)
 c00226e:	687b      	ldr	r3, [r7, #4]
 c002270:	6013      	str	r3, [r2, #0]
 c002272:	e007      	b.n	c002284 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c002274:	2301      	movs	r3, #1
 c002276:	73fb      	strb	r3, [r7, #15]
 c002278:	e004      	b.n	c002284 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00227a:	2301      	movs	r3, #1
 c00227c:	73fb      	strb	r3, [r7, #15]
 c00227e:	e001      	b.n	c002284 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c002280:	2301      	movs	r3, #1
 c002282:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c002284:	7bfb      	ldrb	r3, [r7, #15]
}
 c002286:	4618      	mov	r0, r3
 c002288:	3710      	adds	r7, #16
 c00228a:	46bd      	mov	sp, r7
 c00228c:	bd80      	pop	{r7, pc}
 c00228e:	bf00      	nop
 c002290:	30000040 	.word	0x30000040
 c002294:	30000038 	.word	0x30000038
 c002298:	3000003c 	.word	0x3000003c

0c00229c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c00229c:	b480      	push	{r7}
 c00229e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c0022a0:	4b06      	ldr	r3, [pc, #24]	; (c0022bc <HAL_IncTick+0x20>)
 c0022a2:	781b      	ldrb	r3, [r3, #0]
 c0022a4:	461a      	mov	r2, r3
 c0022a6:	4b06      	ldr	r3, [pc, #24]	; (c0022c0 <HAL_IncTick+0x24>)
 c0022a8:	681b      	ldr	r3, [r3, #0]
 c0022aa:	4413      	add	r3, r2
 c0022ac:	4a04      	ldr	r2, [pc, #16]	; (c0022c0 <HAL_IncTick+0x24>)
 c0022ae:	6013      	str	r3, [r2, #0]
}
 c0022b0:	bf00      	nop
 c0022b2:	46bd      	mov	sp, r7
 c0022b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022b8:	4770      	bx	lr
 c0022ba:	bf00      	nop
 c0022bc:	30000040 	.word	0x30000040
 c0022c0:	30000b78 	.word	0x30000b78

0c0022c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c0022c4:	b480      	push	{r7}
 c0022c6:	af00      	add	r7, sp, #0
  return uwTick;
 c0022c8:	4b03      	ldr	r3, [pc, #12]	; (c0022d8 <HAL_GetTick+0x14>)
 c0022ca:	681b      	ldr	r3, [r3, #0]
}
 c0022cc:	4618      	mov	r0, r3
 c0022ce:	46bd      	mov	sp, r7
 c0022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0022d4:	4770      	bx	lr
 c0022d6:	bf00      	nop
 c0022d8:	30000b78 	.word	0x30000b78

0c0022dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0022dc:	b480      	push	{r7}
 c0022de:	b085      	sub	sp, #20
 c0022e0:	af00      	add	r7, sp, #0
 c0022e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0022e4:	687b      	ldr	r3, [r7, #4]
 c0022e6:	f003 0307 	and.w	r3, r3, #7
 c0022ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0022ec:	4b0c      	ldr	r3, [pc, #48]	; (c002320 <__NVIC_SetPriorityGrouping+0x44>)
 c0022ee:	68db      	ldr	r3, [r3, #12]
 c0022f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0022f2:	68ba      	ldr	r2, [r7, #8]
 c0022f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0022f8:	4013      	ands	r3, r2
 c0022fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0022fc:	68fb      	ldr	r3, [r7, #12]
 c0022fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c002300:	68bb      	ldr	r3, [r7, #8]
 c002302:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c002304:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c002308:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c00230c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c00230e:	4a04      	ldr	r2, [pc, #16]	; (c002320 <__NVIC_SetPriorityGrouping+0x44>)
 c002310:	68bb      	ldr	r3, [r7, #8]
 c002312:	60d3      	str	r3, [r2, #12]
}
 c002314:	bf00      	nop
 c002316:	3714      	adds	r7, #20
 c002318:	46bd      	mov	sp, r7
 c00231a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00231e:	4770      	bx	lr
 c002320:	e000ed00 	.word	0xe000ed00

0c002324 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c002324:	b480      	push	{r7}
 c002326:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c002328:	4b04      	ldr	r3, [pc, #16]	; (c00233c <__NVIC_GetPriorityGrouping+0x18>)
 c00232a:	68db      	ldr	r3, [r3, #12]
 c00232c:	0a1b      	lsrs	r3, r3, #8
 c00232e:	f003 0307 	and.w	r3, r3, #7
}
 c002332:	4618      	mov	r0, r3
 c002334:	46bd      	mov	sp, r7
 c002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00233a:	4770      	bx	lr
 c00233c:	e000ed00 	.word	0xe000ed00

0c002340 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c002340:	b480      	push	{r7}
 c002342:	b083      	sub	sp, #12
 c002344:	af00      	add	r7, sp, #0
 c002346:	4603      	mov	r3, r0
 c002348:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c00234a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00234e:	2b00      	cmp	r3, #0
 c002350:	db0b      	blt.n	c00236a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c002352:	79fb      	ldrb	r3, [r7, #7]
 c002354:	f003 021f 	and.w	r2, r3, #31
 c002358:	4907      	ldr	r1, [pc, #28]	; (c002378 <__NVIC_EnableIRQ+0x38>)
 c00235a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00235e:	095b      	lsrs	r3, r3, #5
 c002360:	2001      	movs	r0, #1
 c002362:	fa00 f202 	lsl.w	r2, r0, r2
 c002366:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c00236a:	bf00      	nop
 c00236c:	370c      	adds	r7, #12
 c00236e:	46bd      	mov	sp, r7
 c002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002374:	4770      	bx	lr
 c002376:	bf00      	nop
 c002378:	e000e100 	.word	0xe000e100

0c00237c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c00237c:	b480      	push	{r7}
 c00237e:	b083      	sub	sp, #12
 c002380:	af00      	add	r7, sp, #0
 c002382:	4603      	mov	r3, r0
 c002384:	6039      	str	r1, [r7, #0]
 c002386:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c002388:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00238c:	2b00      	cmp	r3, #0
 c00238e:	db0a      	blt.n	c0023a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c002390:	683b      	ldr	r3, [r7, #0]
 c002392:	b2da      	uxtb	r2, r3
 c002394:	490c      	ldr	r1, [pc, #48]	; (c0023c8 <__NVIC_SetPriority+0x4c>)
 c002396:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c00239a:	0152      	lsls	r2, r2, #5
 c00239c:	b2d2      	uxtb	r2, r2
 c00239e:	440b      	add	r3, r1
 c0023a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c0023a4:	e00a      	b.n	c0023bc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c0023a6:	683b      	ldr	r3, [r7, #0]
 c0023a8:	b2da      	uxtb	r2, r3
 c0023aa:	4908      	ldr	r1, [pc, #32]	; (c0023cc <__NVIC_SetPriority+0x50>)
 c0023ac:	79fb      	ldrb	r3, [r7, #7]
 c0023ae:	f003 030f 	and.w	r3, r3, #15
 c0023b2:	3b04      	subs	r3, #4
 c0023b4:	0152      	lsls	r2, r2, #5
 c0023b6:	b2d2      	uxtb	r2, r2
 c0023b8:	440b      	add	r3, r1
 c0023ba:	761a      	strb	r2, [r3, #24]
}
 c0023bc:	bf00      	nop
 c0023be:	370c      	adds	r7, #12
 c0023c0:	46bd      	mov	sp, r7
 c0023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023c6:	4770      	bx	lr
 c0023c8:	e000e100 	.word	0xe000e100
 c0023cc:	e000ed00 	.word	0xe000ed00

0c0023d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0023d0:	b480      	push	{r7}
 c0023d2:	b089      	sub	sp, #36	; 0x24
 c0023d4:	af00      	add	r7, sp, #0
 c0023d6:	60f8      	str	r0, [r7, #12]
 c0023d8:	60b9      	str	r1, [r7, #8]
 c0023da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0023dc:	68fb      	ldr	r3, [r7, #12]
 c0023de:	f003 0307 	and.w	r3, r3, #7
 c0023e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0023e4:	69fb      	ldr	r3, [r7, #28]
 c0023e6:	f1c3 0307 	rsb	r3, r3, #7
 c0023ea:	2b03      	cmp	r3, #3
 c0023ec:	bf28      	it	cs
 c0023ee:	2303      	movcs	r3, #3
 c0023f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0023f2:	69fb      	ldr	r3, [r7, #28]
 c0023f4:	3303      	adds	r3, #3
 c0023f6:	2b06      	cmp	r3, #6
 c0023f8:	d902      	bls.n	c002400 <NVIC_EncodePriority+0x30>
 c0023fa:	69fb      	ldr	r3, [r7, #28]
 c0023fc:	3b04      	subs	r3, #4
 c0023fe:	e000      	b.n	c002402 <NVIC_EncodePriority+0x32>
 c002400:	2300      	movs	r3, #0
 c002402:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c002404:	f04f 32ff 	mov.w	r2, #4294967295
 c002408:	69bb      	ldr	r3, [r7, #24]
 c00240a:	fa02 f303 	lsl.w	r3, r2, r3
 c00240e:	43da      	mvns	r2, r3
 c002410:	68bb      	ldr	r3, [r7, #8]
 c002412:	401a      	ands	r2, r3
 c002414:	697b      	ldr	r3, [r7, #20]
 c002416:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c002418:	f04f 31ff 	mov.w	r1, #4294967295
 c00241c:	697b      	ldr	r3, [r7, #20]
 c00241e:	fa01 f303 	lsl.w	r3, r1, r3
 c002422:	43d9      	mvns	r1, r3
 c002424:	687b      	ldr	r3, [r7, #4]
 c002426:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c002428:	4313      	orrs	r3, r2
         );
}
 c00242a:	4618      	mov	r0, r3
 c00242c:	3724      	adds	r7, #36	; 0x24
 c00242e:	46bd      	mov	sp, r7
 c002430:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002434:	4770      	bx	lr
	...

0c002438 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c002438:	b580      	push	{r7, lr}
 c00243a:	b082      	sub	sp, #8
 c00243c:	af00      	add	r7, sp, #0
 c00243e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c002440:	687b      	ldr	r3, [r7, #4]
 c002442:	3b01      	subs	r3, #1
 c002444:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c002448:	d301      	bcc.n	c00244e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c00244a:	2301      	movs	r3, #1
 c00244c:	e00f      	b.n	c00246e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c00244e:	4a0a      	ldr	r2, [pc, #40]	; (c002478 <SysTick_Config+0x40>)
 c002450:	687b      	ldr	r3, [r7, #4]
 c002452:	3b01      	subs	r3, #1
 c002454:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c002456:	2107      	movs	r1, #7
 c002458:	f04f 30ff 	mov.w	r0, #4294967295
 c00245c:	f7ff ff8e 	bl	c00237c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c002460:	4b05      	ldr	r3, [pc, #20]	; (c002478 <SysTick_Config+0x40>)
 c002462:	2200      	movs	r2, #0
 c002464:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c002466:	4b04      	ldr	r3, [pc, #16]	; (c002478 <SysTick_Config+0x40>)
 c002468:	2207      	movs	r2, #7
 c00246a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c00246c:	2300      	movs	r3, #0
}
 c00246e:	4618      	mov	r0, r3
 c002470:	3708      	adds	r7, #8
 c002472:	46bd      	mov	sp, r7
 c002474:	bd80      	pop	{r7, pc}
 c002476:	bf00      	nop
 c002478:	e000e010 	.word	0xe000e010

0c00247c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c00247c:	b580      	push	{r7, lr}
 c00247e:	b082      	sub	sp, #8
 c002480:	af00      	add	r7, sp, #0
 c002482:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c002484:	6878      	ldr	r0, [r7, #4]
 c002486:	f7ff ff29 	bl	c0022dc <__NVIC_SetPriorityGrouping>
}
 c00248a:	bf00      	nop
 c00248c:	3708      	adds	r7, #8
 c00248e:	46bd      	mov	sp, r7
 c002490:	bd80      	pop	{r7, pc}

0c002492 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c002492:	b580      	push	{r7, lr}
 c002494:	b086      	sub	sp, #24
 c002496:	af00      	add	r7, sp, #0
 c002498:	4603      	mov	r3, r0
 c00249a:	60b9      	str	r1, [r7, #8]
 c00249c:	607a      	str	r2, [r7, #4]
 c00249e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c0024a0:	f7ff ff40 	bl	c002324 <__NVIC_GetPriorityGrouping>
 c0024a4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c0024a6:	687a      	ldr	r2, [r7, #4]
 c0024a8:	68b9      	ldr	r1, [r7, #8]
 c0024aa:	6978      	ldr	r0, [r7, #20]
 c0024ac:	f7ff ff90 	bl	c0023d0 <NVIC_EncodePriority>
 c0024b0:	4602      	mov	r2, r0
 c0024b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c0024b6:	4611      	mov	r1, r2
 c0024b8:	4618      	mov	r0, r3
 c0024ba:	f7ff ff5f 	bl	c00237c <__NVIC_SetPriority>
}
 c0024be:	bf00      	nop
 c0024c0:	3718      	adds	r7, #24
 c0024c2:	46bd      	mov	sp, r7
 c0024c4:	bd80      	pop	{r7, pc}

0c0024c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0024c6:	b580      	push	{r7, lr}
 c0024c8:	b082      	sub	sp, #8
 c0024ca:	af00      	add	r7, sp, #0
 c0024cc:	4603      	mov	r3, r0
 c0024ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0024d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0024d4:	4618      	mov	r0, r3
 c0024d6:	f7ff ff33 	bl	c002340 <__NVIC_EnableIRQ>
}
 c0024da:	bf00      	nop
 c0024dc:	3708      	adds	r7, #8
 c0024de:	46bd      	mov	sp, r7
 c0024e0:	bd80      	pop	{r7, pc}

0c0024e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0024e2:	b580      	push	{r7, lr}
 c0024e4:	b082      	sub	sp, #8
 c0024e6:	af00      	add	r7, sp, #0
 c0024e8:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0024ea:	6878      	ldr	r0, [r7, #4]
 c0024ec:	f7ff ffa4 	bl	c002438 <SysTick_Config>
 c0024f0:	4603      	mov	r3, r0
}
 c0024f2:	4618      	mov	r0, r3
 c0024f4:	3708      	adds	r7, #8
 c0024f6:	46bd      	mov	sp, r7
 c0024f8:	bd80      	pop	{r7, pc}
	...

0c0024fc <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c0024fc:	b580      	push	{r7, lr}
 c0024fe:	b084      	sub	sp, #16
 c002500:	af00      	add	r7, sp, #0
 c002502:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c002504:	687b      	ldr	r3, [r7, #4]
 c002506:	2b00      	cmp	r3, #0
 c002508:	d101      	bne.n	c00250e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c00250a:	2301      	movs	r3, #1
 c00250c:	e08d      	b.n	c00262a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c00250e:	687b      	ldr	r3, [r7, #4]
 c002510:	681b      	ldr	r3, [r3, #0]
 c002512:	461a      	mov	r2, r3
 c002514:	4b47      	ldr	r3, [pc, #284]	; (c002634 <HAL_DMA_Init+0x138>)
 c002516:	429a      	cmp	r2, r3
 c002518:	d80f      	bhi.n	c00253a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c00251a:	687b      	ldr	r3, [r7, #4]
 c00251c:	681b      	ldr	r3, [r3, #0]
 c00251e:	461a      	mov	r2, r3
 c002520:	4b45      	ldr	r3, [pc, #276]	; (c002638 <HAL_DMA_Init+0x13c>)
 c002522:	4413      	add	r3, r2
 c002524:	4a45      	ldr	r2, [pc, #276]	; (c00263c <HAL_DMA_Init+0x140>)
 c002526:	fba2 2303 	umull	r2, r3, r2, r3
 c00252a:	091b      	lsrs	r3, r3, #4
 c00252c:	009a      	lsls	r2, r3, #2
 c00252e:	687b      	ldr	r3, [r7, #4]
 c002530:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c002532:	687b      	ldr	r3, [r7, #4]
 c002534:	4a42      	ldr	r2, [pc, #264]	; (c002640 <HAL_DMA_Init+0x144>)
 c002536:	649a      	str	r2, [r3, #72]	; 0x48
 c002538:	e00e      	b.n	c002558 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c00253a:	687b      	ldr	r3, [r7, #4]
 c00253c:	681b      	ldr	r3, [r3, #0]
 c00253e:	461a      	mov	r2, r3
 c002540:	4b40      	ldr	r3, [pc, #256]	; (c002644 <HAL_DMA_Init+0x148>)
 c002542:	4413      	add	r3, r2
 c002544:	4a3d      	ldr	r2, [pc, #244]	; (c00263c <HAL_DMA_Init+0x140>)
 c002546:	fba2 2303 	umull	r2, r3, r2, r3
 c00254a:	091b      	lsrs	r3, r3, #4
 c00254c:	009a      	lsls	r2, r3, #2
 c00254e:	687b      	ldr	r3, [r7, #4]
 c002550:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c002552:	687b      	ldr	r3, [r7, #4]
 c002554:	4a3c      	ldr	r2, [pc, #240]	; (c002648 <HAL_DMA_Init+0x14c>)
 c002556:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c002558:	687b      	ldr	r3, [r7, #4]
 c00255a:	2202      	movs	r2, #2
 c00255c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c002560:	687b      	ldr	r3, [r7, #4]
 c002562:	681b      	ldr	r3, [r3, #0]
 c002564:	681b      	ldr	r3, [r3, #0]
 c002566:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c002568:	68fb      	ldr	r3, [r7, #12]
 c00256a:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c00256e:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c002572:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c002574:	687b      	ldr	r3, [r7, #4]
 c002576:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002578:	687b      	ldr	r3, [r7, #4]
 c00257a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c00257c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c00257e:	687b      	ldr	r3, [r7, #4]
 c002580:	691b      	ldr	r3, [r3, #16]
 c002582:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002584:	687b      	ldr	r3, [r7, #4]
 c002586:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002588:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00258a:	687b      	ldr	r3, [r7, #4]
 c00258c:	699b      	ldr	r3, [r3, #24]
 c00258e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c002590:	687b      	ldr	r3, [r7, #4]
 c002592:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002594:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	6a1b      	ldr	r3, [r3, #32]
 c00259a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c00259c:	68fa      	ldr	r2, [r7, #12]
 c00259e:	4313      	orrs	r3, r2
 c0025a0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c0025a2:	687b      	ldr	r3, [r7, #4]
 c0025a4:	681b      	ldr	r3, [r3, #0]
 c0025a6:	68fa      	ldr	r2, [r7, #12]
 c0025a8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c0025aa:	6878      	ldr	r0, [r7, #4]
 c0025ac:	f000 fae4 	bl	c002b78 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c0025b0:	687b      	ldr	r3, [r7, #4]
 c0025b2:	689b      	ldr	r3, [r3, #8]
 c0025b4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0025b8:	d102      	bne.n	c0025c0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c0025ba:	687b      	ldr	r3, [r7, #4]
 c0025bc:	2200      	movs	r2, #0
 c0025be:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c0025c0:	687b      	ldr	r3, [r7, #4]
 c0025c2:	685a      	ldr	r2, [r3, #4]
 c0025c4:	687b      	ldr	r3, [r7, #4]
 c0025c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0025c8:	b2d2      	uxtb	r2, r2
 c0025ca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c0025cc:	687b      	ldr	r3, [r7, #4]
 c0025ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0025d0:	687a      	ldr	r2, [r7, #4]
 c0025d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0025d4:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c0025d6:	687b      	ldr	r3, [r7, #4]
 c0025d8:	685b      	ldr	r3, [r3, #4]
 c0025da:	2b00      	cmp	r3, #0
 c0025dc:	d010      	beq.n	c002600 <HAL_DMA_Init+0x104>
 c0025de:	687b      	ldr	r3, [r7, #4]
 c0025e0:	685b      	ldr	r3, [r3, #4]
 c0025e2:	2b04      	cmp	r3, #4
 c0025e4:	d80c      	bhi.n	c002600 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c0025e6:	6878      	ldr	r0, [r7, #4]
 c0025e8:	f000 fb04 	bl	c002bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c0025ec:	687b      	ldr	r3, [r7, #4]
 c0025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0025f0:	2200      	movs	r2, #0
 c0025f2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0025f4:	687b      	ldr	r3, [r7, #4]
 c0025f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0025f8:	687a      	ldr	r2, [r7, #4]
 c0025fa:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0025fc:	605a      	str	r2, [r3, #4]
 c0025fe:	e008      	b.n	c002612 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c002600:	687b      	ldr	r3, [r7, #4]
 c002602:	2200      	movs	r2, #0
 c002604:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c002606:	687b      	ldr	r3, [r7, #4]
 c002608:	2200      	movs	r2, #0
 c00260a:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c00260c:	687b      	ldr	r3, [r7, #4]
 c00260e:	2200      	movs	r2, #0
 c002610:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c002612:	687b      	ldr	r3, [r7, #4]
 c002614:	2200      	movs	r2, #0
 c002616:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c002618:	687b      	ldr	r3, [r7, #4]
 c00261a:	2201      	movs	r2, #1
 c00261c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c002620:	687b      	ldr	r3, [r7, #4]
 c002622:	2200      	movs	r2, #0
 c002624:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c002628:	2300      	movs	r3, #0
}
 c00262a:	4618      	mov	r0, r3
 c00262c:	3710      	adds	r7, #16
 c00262e:	46bd      	mov	sp, r7
 c002630:	bd80      	pop	{r7, pc}
 c002632:	bf00      	nop
 c002634:	50020407 	.word	0x50020407
 c002638:	affdfff8 	.word	0xaffdfff8
 c00263c:	cccccccd 	.word	0xcccccccd
 c002640:	50020000 	.word	0x50020000
 c002644:	affdfbf8 	.word	0xaffdfbf8
 c002648:	50020400 	.word	0x50020400

0c00264c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c00264c:	b580      	push	{r7, lr}
 c00264e:	b086      	sub	sp, #24
 c002650:	af00      	add	r7, sp, #0
 c002652:	60f8      	str	r0, [r7, #12]
 c002654:	60b9      	str	r1, [r7, #8]
 c002656:	607a      	str	r2, [r7, #4]
 c002658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00265a:	2300      	movs	r3, #0
 c00265c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c00265e:	68fb      	ldr	r3, [r7, #12]
 c002660:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c002664:	2b01      	cmp	r3, #1
 c002666:	d101      	bne.n	c00266c <HAL_DMA_Start_IT+0x20>
 c002668:	2302      	movs	r3, #2
 c00266a:	e066      	b.n	c00273a <HAL_DMA_Start_IT+0xee>
 c00266c:	68fb      	ldr	r3, [r7, #12]
 c00266e:	2201      	movs	r2, #1
 c002670:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c002674:	68fb      	ldr	r3, [r7, #12]
 c002676:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c00267a:	b2db      	uxtb	r3, r3
 c00267c:	2b01      	cmp	r3, #1
 c00267e:	d155      	bne.n	c00272c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c002680:	68fb      	ldr	r3, [r7, #12]
 c002682:	2202      	movs	r2, #2
 c002684:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c002688:	68fb      	ldr	r3, [r7, #12]
 c00268a:	2200      	movs	r2, #0
 c00268c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c00268e:	68fb      	ldr	r3, [r7, #12]
 c002690:	681b      	ldr	r3, [r3, #0]
 c002692:	681a      	ldr	r2, [r3, #0]
 c002694:	68fb      	ldr	r3, [r7, #12]
 c002696:	681b      	ldr	r3, [r3, #0]
 c002698:	f022 0201 	bic.w	r2, r2, #1
 c00269c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c00269e:	683b      	ldr	r3, [r7, #0]
 c0026a0:	687a      	ldr	r2, [r7, #4]
 c0026a2:	68b9      	ldr	r1, [r7, #8]
 c0026a4:	68f8      	ldr	r0, [r7, #12]
 c0026a6:	f000 fa29 	bl	c002afc <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c0026aa:	68fb      	ldr	r3, [r7, #12]
 c0026ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0026ae:	2b00      	cmp	r3, #0
 c0026b0:	d008      	beq.n	c0026c4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c0026b2:	68fb      	ldr	r3, [r7, #12]
 c0026b4:	681b      	ldr	r3, [r3, #0]
 c0026b6:	681a      	ldr	r2, [r3, #0]
 c0026b8:	68fb      	ldr	r3, [r7, #12]
 c0026ba:	681b      	ldr	r3, [r3, #0]
 c0026bc:	f042 020e 	orr.w	r2, r2, #14
 c0026c0:	601a      	str	r2, [r3, #0]
 c0026c2:	e00f      	b.n	c0026e4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c0026c4:	68fb      	ldr	r3, [r7, #12]
 c0026c6:	681b      	ldr	r3, [r3, #0]
 c0026c8:	681a      	ldr	r2, [r3, #0]
 c0026ca:	68fb      	ldr	r3, [r7, #12]
 c0026cc:	681b      	ldr	r3, [r3, #0]
 c0026ce:	f022 0204 	bic.w	r2, r2, #4
 c0026d2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c0026d4:	68fb      	ldr	r3, [r7, #12]
 c0026d6:	681b      	ldr	r3, [r3, #0]
 c0026d8:	681a      	ldr	r2, [r3, #0]
 c0026da:	68fb      	ldr	r3, [r7, #12]
 c0026dc:	681b      	ldr	r3, [r3, #0]
 c0026de:	f042 020a 	orr.w	r2, r2, #10
 c0026e2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c0026e4:	68fb      	ldr	r3, [r7, #12]
 c0026e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0026e8:	681b      	ldr	r3, [r3, #0]
 c0026ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0026ee:	2b00      	cmp	r3, #0
 c0026f0:	d007      	beq.n	c002702 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c0026f2:	68fb      	ldr	r3, [r7, #12]
 c0026f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0026f6:	681a      	ldr	r2, [r3, #0]
 c0026f8:	68fb      	ldr	r3, [r7, #12]
 c0026fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0026fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c002700:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c002702:	68fb      	ldr	r3, [r7, #12]
 c002704:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002706:	2b00      	cmp	r3, #0
 c002708:	d007      	beq.n	c00271a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c00270a:	68fb      	ldr	r3, [r7, #12]
 c00270c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00270e:	681a      	ldr	r2, [r3, #0]
 c002710:	68fb      	ldr	r3, [r7, #12]
 c002712:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002714:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c002718:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c00271a:	68fb      	ldr	r3, [r7, #12]
 c00271c:	681b      	ldr	r3, [r3, #0]
 c00271e:	681a      	ldr	r2, [r3, #0]
 c002720:	68fb      	ldr	r3, [r7, #12]
 c002722:	681b      	ldr	r3, [r3, #0]
 c002724:	f042 0201 	orr.w	r2, r2, #1
 c002728:	601a      	str	r2, [r3, #0]
 c00272a:	e005      	b.n	c002738 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c00272c:	68fb      	ldr	r3, [r7, #12]
 c00272e:	2200      	movs	r2, #0
 c002730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c002734:	2302      	movs	r3, #2
 c002736:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c002738:	7dfb      	ldrb	r3, [r7, #23]
}
 c00273a:	4618      	mov	r0, r3
 c00273c:	3718      	adds	r7, #24
 c00273e:	46bd      	mov	sp, r7
 c002740:	bd80      	pop	{r7, pc}

0c002742 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c002742:	b580      	push	{r7, lr}
 c002744:	b084      	sub	sp, #16
 c002746:	af00      	add	r7, sp, #0
 c002748:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c00274a:	687b      	ldr	r3, [r7, #4]
 c00274c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00274e:	681b      	ldr	r3, [r3, #0]
 c002750:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c002752:	687b      	ldr	r3, [r7, #4]
 c002754:	681b      	ldr	r3, [r3, #0]
 c002756:	681b      	ldr	r3, [r3, #0]
 c002758:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c00275a:	687b      	ldr	r3, [r7, #4]
 c00275c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00275e:	f003 031c 	and.w	r3, r3, #28
 c002762:	2204      	movs	r2, #4
 c002764:	409a      	lsls	r2, r3
 c002766:	68fb      	ldr	r3, [r7, #12]
 c002768:	4013      	ands	r3, r2
 c00276a:	2b00      	cmp	r3, #0
 c00276c:	d053      	beq.n	c002816 <HAL_DMA_IRQHandler+0xd4>
 c00276e:	68bb      	ldr	r3, [r7, #8]
 c002770:	f003 0304 	and.w	r3, r3, #4
 c002774:	2b00      	cmp	r3, #0
 c002776:	d04e      	beq.n	c002816 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002778:	687b      	ldr	r3, [r7, #4]
 c00277a:	681b      	ldr	r3, [r3, #0]
 c00277c:	681b      	ldr	r3, [r3, #0]
 c00277e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002782:	2b00      	cmp	r3, #0
 c002784:	d024      	beq.n	c0027d0 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c002786:	687b      	ldr	r3, [r7, #4]
 c002788:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00278a:	f003 021c 	and.w	r2, r3, #28
 c00278e:	687b      	ldr	r3, [r7, #4]
 c002790:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002792:	2104      	movs	r1, #4
 c002794:	fa01 f202 	lsl.w	r2, r1, r2
 c002798:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c00279a:	687b      	ldr	r3, [r7, #4]
 c00279c:	681b      	ldr	r3, [r3, #0]
 c00279e:	681b      	ldr	r3, [r3, #0]
 c0027a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0027a4:	2b00      	cmp	r3, #0
 c0027a6:	d109      	bne.n	c0027bc <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c0027a8:	687b      	ldr	r3, [r7, #4]
 c0027aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0027ac:	2b00      	cmp	r3, #0
 c0027ae:	f000 80c0 	beq.w	c002932 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c0027b2:	687b      	ldr	r3, [r7, #4]
 c0027b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0027b6:	6878      	ldr	r0, [r7, #4]
 c0027b8:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0027ba:	e0ba      	b.n	c002932 <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c0027bc:	687b      	ldr	r3, [r7, #4]
 c0027be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027c0:	2b00      	cmp	r3, #0
 c0027c2:	f000 80b6 	beq.w	c002932 <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c0027c6:	687b      	ldr	r3, [r7, #4]
 c0027c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0027ca:	6878      	ldr	r0, [r7, #4]
 c0027cc:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0027ce:	e0b0      	b.n	c002932 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c0027d0:	687b      	ldr	r3, [r7, #4]
 c0027d2:	681b      	ldr	r3, [r3, #0]
 c0027d4:	681b      	ldr	r3, [r3, #0]
 c0027d6:	f003 0320 	and.w	r3, r3, #32
 c0027da:	2b00      	cmp	r3, #0
 c0027dc:	d107      	bne.n	c0027ee <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c0027de:	687b      	ldr	r3, [r7, #4]
 c0027e0:	681b      	ldr	r3, [r3, #0]
 c0027e2:	681a      	ldr	r2, [r3, #0]
 c0027e4:	687b      	ldr	r3, [r7, #4]
 c0027e6:	681b      	ldr	r3, [r3, #0]
 c0027e8:	f022 0204 	bic.w	r2, r2, #4
 c0027ec:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c0027ee:	687b      	ldr	r3, [r7, #4]
 c0027f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0027f2:	f003 021c 	and.w	r2, r3, #28
 c0027f6:	687b      	ldr	r3, [r7, #4]
 c0027f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0027fa:	2104      	movs	r1, #4
 c0027fc:	fa01 f202 	lsl.w	r2, r1, r2
 c002800:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c002802:	687b      	ldr	r3, [r7, #4]
 c002804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002806:	2b00      	cmp	r3, #0
 c002808:	f000 8093 	beq.w	c002932 <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c00280c:	687b      	ldr	r3, [r7, #4]
 c00280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002810:	6878      	ldr	r0, [r7, #4]
 c002812:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002814:	e08d      	b.n	c002932 <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c002816:	687b      	ldr	r3, [r7, #4]
 c002818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00281a:	f003 031c 	and.w	r3, r3, #28
 c00281e:	2202      	movs	r2, #2
 c002820:	409a      	lsls	r2, r3
 c002822:	68fb      	ldr	r3, [r7, #12]
 c002824:	4013      	ands	r3, r2
 c002826:	2b00      	cmp	r3, #0
 c002828:	d04e      	beq.n	c0028c8 <HAL_DMA_IRQHandler+0x186>
 c00282a:	68bb      	ldr	r3, [r7, #8]
 c00282c:	f003 0302 	and.w	r3, r3, #2
 c002830:	2b00      	cmp	r3, #0
 c002832:	d049      	beq.n	c0028c8 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002834:	687b      	ldr	r3, [r7, #4]
 c002836:	681b      	ldr	r3, [r3, #0]
 c002838:	681b      	ldr	r3, [r3, #0]
 c00283a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00283e:	2b00      	cmp	r3, #0
 c002840:	d018      	beq.n	c002874 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c002842:	687b      	ldr	r3, [r7, #4]
 c002844:	681b      	ldr	r3, [r3, #0]
 c002846:	681b      	ldr	r3, [r3, #0]
 c002848:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00284c:	2b00      	cmp	r3, #0
 c00284e:	d108      	bne.n	c002862 <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c002850:	687b      	ldr	r3, [r7, #4]
 c002852:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002854:	2b00      	cmp	r3, #0
 c002856:	d06e      	beq.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c002858:	687b      	ldr	r3, [r7, #4]
 c00285a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00285c:	6878      	ldr	r0, [r7, #4]
 c00285e:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002860:	e069      	b.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c002862:	687b      	ldr	r3, [r7, #4]
 c002864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002866:	2b00      	cmp	r3, #0
 c002868:	d065      	beq.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c00286a:	687b      	ldr	r3, [r7, #4]
 c00286c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00286e:	6878      	ldr	r0, [r7, #4]
 c002870:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002872:	e060      	b.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c002874:	687b      	ldr	r3, [r7, #4]
 c002876:	681b      	ldr	r3, [r3, #0]
 c002878:	681b      	ldr	r3, [r3, #0]
 c00287a:	f003 0320 	and.w	r3, r3, #32
 c00287e:	2b00      	cmp	r3, #0
 c002880:	d10b      	bne.n	c00289a <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c002882:	687b      	ldr	r3, [r7, #4]
 c002884:	681b      	ldr	r3, [r3, #0]
 c002886:	681a      	ldr	r2, [r3, #0]
 c002888:	687b      	ldr	r3, [r7, #4]
 c00288a:	681b      	ldr	r3, [r3, #0]
 c00288c:	f022 020a 	bic.w	r2, r2, #10
 c002890:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c002892:	687b      	ldr	r3, [r7, #4]
 c002894:	2201      	movs	r2, #1
 c002896:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c00289a:	687b      	ldr	r3, [r7, #4]
 c00289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00289e:	f003 021c 	and.w	r2, r3, #28
 c0028a2:	687b      	ldr	r3, [r7, #4]
 c0028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0028a6:	2102      	movs	r1, #2
 c0028a8:	fa01 f202 	lsl.w	r2, r1, r2
 c0028ac:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c0028ae:	687b      	ldr	r3, [r7, #4]
 c0028b0:	2200      	movs	r2, #0
 c0028b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c0028b6:	687b      	ldr	r3, [r7, #4]
 c0028b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0028ba:	2b00      	cmp	r3, #0
 c0028bc:	d03b      	beq.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c0028be:	687b      	ldr	r3, [r7, #4]
 c0028c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0028c2:	6878      	ldr	r0, [r7, #4]
 c0028c4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0028c6:	e036      	b.n	c002936 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c0028c8:	687b      	ldr	r3, [r7, #4]
 c0028ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0028cc:	f003 031c 	and.w	r3, r3, #28
 c0028d0:	2208      	movs	r2, #8
 c0028d2:	409a      	lsls	r2, r3
 c0028d4:	68fb      	ldr	r3, [r7, #12]
 c0028d6:	4013      	ands	r3, r2
 c0028d8:	2b00      	cmp	r3, #0
 c0028da:	d02e      	beq.n	c00293a <HAL_DMA_IRQHandler+0x1f8>
 c0028dc:	68bb      	ldr	r3, [r7, #8]
 c0028de:	f003 0308 	and.w	r3, r3, #8
 c0028e2:	2b00      	cmp	r3, #0
 c0028e4:	d029      	beq.n	c00293a <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c0028e6:	687b      	ldr	r3, [r7, #4]
 c0028e8:	681b      	ldr	r3, [r3, #0]
 c0028ea:	681a      	ldr	r2, [r3, #0]
 c0028ec:	687b      	ldr	r3, [r7, #4]
 c0028ee:	681b      	ldr	r3, [r3, #0]
 c0028f0:	f022 020e 	bic.w	r2, r2, #14
 c0028f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c0028f6:	687b      	ldr	r3, [r7, #4]
 c0028f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0028fa:	f003 021c 	and.w	r2, r3, #28
 c0028fe:	687b      	ldr	r3, [r7, #4]
 c002900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002902:	2101      	movs	r1, #1
 c002904:	fa01 f202 	lsl.w	r2, r1, r2
 c002908:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c00290a:	687b      	ldr	r3, [r7, #4]
 c00290c:	2201      	movs	r2, #1
 c00290e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c002910:	687b      	ldr	r3, [r7, #4]
 c002912:	2201      	movs	r2, #1
 c002914:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c002918:	687b      	ldr	r3, [r7, #4]
 c00291a:	2200      	movs	r2, #0
 c00291c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c002920:	687b      	ldr	r3, [r7, #4]
 c002922:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002924:	2b00      	cmp	r3, #0
 c002926:	d008      	beq.n	c00293a <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c002928:	687b      	ldr	r3, [r7, #4]
 c00292a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00292c:	6878      	ldr	r0, [r7, #4]
 c00292e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c002930:	e002      	b.n	c002938 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002932:	bf00      	nop
 c002934:	e000      	b.n	c002938 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002936:	bf00      	nop
  return;
 c002938:	bf00      	nop
 c00293a:	bf00      	nop
}
 c00293c:	3710      	adds	r7, #16
 c00293e:	46bd      	mov	sp, r7
 c002940:	bd80      	pop	{r7, pc}
	...

0c002944 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 c002944:	b480      	push	{r7}
 c002946:	b087      	sub	sp, #28
 c002948:	af00      	add	r7, sp, #0
 c00294a:	60f8      	str	r0, [r7, #12]
 c00294c:	460b      	mov	r3, r1
 c00294e:	607a      	str	r2, [r7, #4]
 c002950:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 c002952:	2300      	movs	r3, #0
 c002954:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 c002956:	68fb      	ldr	r3, [r7, #12]
 c002958:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c00295c:	2b01      	cmp	r3, #1
 c00295e:	d101      	bne.n	c002964 <HAL_DMA_RegisterCallback+0x20>
 c002960:	2302      	movs	r3, #2
 c002962:	e03d      	b.n	c0029e0 <HAL_DMA_RegisterCallback+0x9c>
 c002964:	68fb      	ldr	r3, [r7, #12]
 c002966:	2201      	movs	r2, #1
 c002968:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c00296c:	68fb      	ldr	r3, [r7, #12]
 c00296e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c002972:	b2db      	uxtb	r3, r3
 c002974:	2b01      	cmp	r3, #1
 c002976:	d12c      	bne.n	c0029d2 <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 c002978:	7afb      	ldrb	r3, [r7, #11]
 c00297a:	2b05      	cmp	r3, #5
 c00297c:	d826      	bhi.n	c0029cc <HAL_DMA_RegisterCallback+0x88>
 c00297e:	a201      	add	r2, pc, #4	; (adr r2, c002984 <HAL_DMA_RegisterCallback+0x40>)
 c002980:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002984:	0c00299d 	.word	0x0c00299d
 c002988:	0c0029a5 	.word	0x0c0029a5
 c00298c:	0c0029ad 	.word	0x0c0029ad
 c002990:	0c0029b5 	.word	0x0c0029b5
 c002994:	0c0029bd 	.word	0x0c0029bd
 c002998:	0c0029c5 	.word	0x0c0029c5
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 c00299c:	68fb      	ldr	r3, [r7, #12]
 c00299e:	687a      	ldr	r2, [r7, #4]
 c0029a0:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 c0029a2:	e018      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 c0029a4:	68fb      	ldr	r3, [r7, #12]
 c0029a6:	687a      	ldr	r2, [r7, #4]
 c0029a8:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 c0029aa:	e014      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1CPLT_CB_ID:
           hdma->XferM1CpltCallback = pCallback;
 c0029ac:	68fb      	ldr	r3, [r7, #12]
 c0029ae:	687a      	ldr	r2, [r7, #4]
 c0029b0:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 c0029b2:	e010      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
           hdma->XferM1HalfCpltCallback = pCallback;
 c0029b4:	68fb      	ldr	r3, [r7, #12]
 c0029b6:	687a      	ldr	r2, [r7, #4]
 c0029b8:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 c0029ba:	e00c      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 c0029bc:	68fb      	ldr	r3, [r7, #12]
 c0029be:	687a      	ldr	r2, [r7, #4]
 c0029c0:	63da      	str	r2, [r3, #60]	; 0x3c
           break;
 c0029c2:	e008      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 c0029c4:	68fb      	ldr	r3, [r7, #12]
 c0029c6:	687a      	ldr	r2, [r7, #4]
 c0029c8:	641a      	str	r2, [r3, #64]	; 0x40
           break;
 c0029ca:	e004      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>

     default:
           status = HAL_ERROR;
 c0029cc:	2301      	movs	r3, #1
 c0029ce:	75fb      	strb	r3, [r7, #23]
           break;
 c0029d0:	e001      	b.n	c0029d6 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    status = HAL_ERROR;
 c0029d2:	2301      	movs	r3, #1
 c0029d4:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 c0029d6:	68fb      	ldr	r3, [r7, #12]
 c0029d8:	2200      	movs	r2, #0
 c0029da:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 c0029de:	7dfb      	ldrb	r3, [r7, #23]
}
 c0029e0:	4618      	mov	r0, r3
 c0029e2:	371c      	adds	r7, #28
 c0029e4:	46bd      	mov	sp, r7
 c0029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0029ea:	4770      	bx	lr

0c0029ec <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c0029ec:	b480      	push	{r7}
 c0029ee:	b087      	sub	sp, #28
 c0029f0:	af00      	add	r7, sp, #0
 c0029f2:	6078      	str	r0, [r7, #4]
 c0029f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0029f6:	2300      	movs	r3, #0
 c0029f8:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c0029fa:	687b      	ldr	r3, [r7, #4]
 c0029fc:	2b00      	cmp	r3, #0
 c0029fe:	d103      	bne.n	c002a08 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c002a00:	2301      	movs	r3, #1
 c002a02:	75fb      	strb	r3, [r7, #23]
    return status;
 c002a04:	7dfb      	ldrb	r3, [r7, #23]
 c002a06:	e073      	b.n	c002af0 <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c002a08:	687b      	ldr	r3, [r7, #4]
 c002a0a:	681b      	ldr	r3, [r3, #0]
 c002a0c:	681b      	ldr	r3, [r3, #0]
 c002a0e:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c002a10:	683b      	ldr	r3, [r7, #0]
 c002a12:	f003 0310 	and.w	r3, r3, #16
 c002a16:	2b00      	cmp	r3, #0
 c002a18:	d00d      	beq.n	c002a36 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c002a1a:	683b      	ldr	r3, [r7, #0]
 c002a1c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002a20:	2b00      	cmp	r3, #0
 c002a22:	d004      	beq.n	c002a2e <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c002a24:	693b      	ldr	r3, [r7, #16]
 c002a26:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c002a2a:	613b      	str	r3, [r7, #16]
 c002a2c:	e003      	b.n	c002a36 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c002a2e:	693b      	ldr	r3, [r7, #16]
 c002a30:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c002a34:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c002a36:	687b      	ldr	r3, [r7, #4]
 c002a38:	681b      	ldr	r3, [r3, #0]
 c002a3a:	681b      	ldr	r3, [r3, #0]
 c002a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002a40:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c002a44:	d103      	bne.n	c002a4e <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c002a46:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c002a4a:	60fb      	str	r3, [r7, #12]
 c002a4c:	e001      	b.n	c002a52 <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c002a4e:	2300      	movs	r3, #0
 c002a50:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c002a52:	683b      	ldr	r3, [r7, #0]
 c002a54:	f003 0302 	and.w	r3, r3, #2
 c002a58:	2b00      	cmp	r3, #0
 c002a5a:	d012      	beq.n	c002a82 <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c002a5c:	683b      	ldr	r3, [r7, #0]
 c002a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002a62:	2b00      	cmp	r3, #0
 c002a64:	d007      	beq.n	c002a76 <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c002a66:	693b      	ldr	r3, [r7, #16]
 c002a68:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c002a6c:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c002a6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c002a72:	60fb      	str	r3, [r7, #12]
 c002a74:	e005      	b.n	c002a82 <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c002a76:	693b      	ldr	r3, [r7, #16]
 c002a78:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c002a7c:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c002a7e:	2300      	movs	r3, #0
 c002a80:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c002a82:	683b      	ldr	r3, [r7, #0]
 c002a84:	f003 0304 	and.w	r3, r3, #4
 c002a88:	2b00      	cmp	r3, #0
 c002a8a:	d013      	beq.n	c002ab4 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c002a8c:	683b      	ldr	r3, [r7, #0]
 c002a8e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c002a92:	2b00      	cmp	r3, #0
 c002a94:	d00a      	beq.n	c002aac <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c002a96:	68fb      	ldr	r3, [r7, #12]
 c002a98:	2b00      	cmp	r3, #0
 c002a9a:	d102      	bne.n	c002aa2 <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c002a9c:	2301      	movs	r3, #1
 c002a9e:	75fb      	strb	r3, [r7, #23]
 c002aa0:	e008      	b.n	c002ab4 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c002aa2:	693b      	ldr	r3, [r7, #16]
 c002aa4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002aa8:	613b      	str	r3, [r7, #16]
 c002aaa:	e003      	b.n	c002ab4 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c002aac:	693b      	ldr	r3, [r7, #16]
 c002aae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c002ab2:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c002ab4:	683b      	ldr	r3, [r7, #0]
 c002ab6:	f003 0308 	and.w	r3, r3, #8
 c002aba:	2b00      	cmp	r3, #0
 c002abc:	d013      	beq.n	c002ae6 <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c002abe:	683b      	ldr	r3, [r7, #0]
 c002ac0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002ac4:	2b00      	cmp	r3, #0
 c002ac6:	d00a      	beq.n	c002ade <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c002ac8:	68fb      	ldr	r3, [r7, #12]
 c002aca:	2b00      	cmp	r3, #0
 c002acc:	d102      	bne.n	c002ad4 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c002ace:	2301      	movs	r3, #1
 c002ad0:	75fb      	strb	r3, [r7, #23]
 c002ad2:	e008      	b.n	c002ae6 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c002ad4:	693b      	ldr	r3, [r7, #16]
 c002ad6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002ada:	613b      	str	r3, [r7, #16]
 c002adc:	e003      	b.n	c002ae6 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c002ade:	693b      	ldr	r3, [r7, #16]
 c002ae0:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c002ae4:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c002ae6:	687b      	ldr	r3, [r7, #4]
 c002ae8:	681b      	ldr	r3, [r3, #0]
 c002aea:	693a      	ldr	r2, [r7, #16]
 c002aec:	601a      	str	r2, [r3, #0]

  return status;
 c002aee:	7dfb      	ldrb	r3, [r7, #23]
}
 c002af0:	4618      	mov	r0, r3
 c002af2:	371c      	adds	r7, #28
 c002af4:	46bd      	mov	sp, r7
 c002af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002afa:	4770      	bx	lr

0c002afc <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002afc:	b480      	push	{r7}
 c002afe:	b085      	sub	sp, #20
 c002b00:	af00      	add	r7, sp, #0
 c002b02:	60f8      	str	r0, [r7, #12]
 c002b04:	60b9      	str	r1, [r7, #8]
 c002b06:	607a      	str	r2, [r7, #4]
 c002b08:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c002b0a:	68fb      	ldr	r3, [r7, #12]
 c002b0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c002b0e:	68fa      	ldr	r2, [r7, #12]
 c002b10:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c002b12:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c002b14:	68fb      	ldr	r3, [r7, #12]
 c002b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c002b18:	2b00      	cmp	r3, #0
 c002b1a:	d004      	beq.n	c002b26 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c002b1c:	68fb      	ldr	r3, [r7, #12]
 c002b1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002b20:	68fa      	ldr	r2, [r7, #12]
 c002b22:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c002b24:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c002b26:	68fb      	ldr	r3, [r7, #12]
 c002b28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b2a:	f003 021c 	and.w	r2, r3, #28
 c002b2e:	68fb      	ldr	r3, [r7, #12]
 c002b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002b32:	2101      	movs	r1, #1
 c002b34:	fa01 f202 	lsl.w	r2, r1, r2
 c002b38:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c002b3a:	68fb      	ldr	r3, [r7, #12]
 c002b3c:	681b      	ldr	r3, [r3, #0]
 c002b3e:	683a      	ldr	r2, [r7, #0]
 c002b40:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c002b42:	68fb      	ldr	r3, [r7, #12]
 c002b44:	689b      	ldr	r3, [r3, #8]
 c002b46:	2b10      	cmp	r3, #16
 c002b48:	d108      	bne.n	c002b5c <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c002b4a:	68fb      	ldr	r3, [r7, #12]
 c002b4c:	681b      	ldr	r3, [r3, #0]
 c002b4e:	687a      	ldr	r2, [r7, #4]
 c002b50:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c002b52:	68fb      	ldr	r3, [r7, #12]
 c002b54:	681b      	ldr	r3, [r3, #0]
 c002b56:	68ba      	ldr	r2, [r7, #8]
 c002b58:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c002b5a:	e007      	b.n	c002b6c <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c002b5c:	68fb      	ldr	r3, [r7, #12]
 c002b5e:	681b      	ldr	r3, [r3, #0]
 c002b60:	68ba      	ldr	r2, [r7, #8]
 c002b62:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c002b64:	68fb      	ldr	r3, [r7, #12]
 c002b66:	681b      	ldr	r3, [r3, #0]
 c002b68:	687a      	ldr	r2, [r7, #4]
 c002b6a:	60da      	str	r2, [r3, #12]
}
 c002b6c:	bf00      	nop
 c002b6e:	3714      	adds	r7, #20
 c002b70:	46bd      	mov	sp, r7
 c002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b76:	4770      	bx	lr

0c002b78 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002b78:	b480      	push	{r7}
 c002b7a:	b085      	sub	sp, #20
 c002b7c:	af00      	add	r7, sp, #0
 c002b7e:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c002b80:	687b      	ldr	r3, [r7, #4]
 c002b82:	681b      	ldr	r3, [r3, #0]
 c002b84:	461a      	mov	r2, r3
 c002b86:	4b17      	ldr	r3, [pc, #92]	; (c002be4 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c002b88:	429a      	cmp	r2, r3
 c002b8a:	d80a      	bhi.n	c002ba2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c002b8c:	687b      	ldr	r3, [r7, #4]
 c002b8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002b90:	089b      	lsrs	r3, r3, #2
 c002b92:	009b      	lsls	r3, r3, #2
 c002b94:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c002b98:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c002b9c:	687a      	ldr	r2, [r7, #4]
 c002b9e:	6513      	str	r3, [r2, #80]	; 0x50
 c002ba0:	e007      	b.n	c002bb2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c002ba2:	687b      	ldr	r3, [r7, #4]
 c002ba4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002ba6:	089b      	lsrs	r3, r3, #2
 c002ba8:	009a      	lsls	r2, r3, #2
 c002baa:	4b0f      	ldr	r3, [pc, #60]	; (c002be8 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c002bac:	4413      	add	r3, r2
 c002bae:	687a      	ldr	r2, [r7, #4]
 c002bb0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c002bb2:	687b      	ldr	r3, [r7, #4]
 c002bb4:	681b      	ldr	r3, [r3, #0]
 c002bb6:	b2db      	uxtb	r3, r3
 c002bb8:	3b08      	subs	r3, #8
 c002bba:	4a0c      	ldr	r2, [pc, #48]	; (c002bec <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c002bbc:	fba2 2303 	umull	r2, r3, r2, r3
 c002bc0:	091b      	lsrs	r3, r3, #4
 c002bc2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c002bc4:	687b      	ldr	r3, [r7, #4]
 c002bc6:	4a0a      	ldr	r2, [pc, #40]	; (c002bf0 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c002bc8:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c002bca:	68fb      	ldr	r3, [r7, #12]
 c002bcc:	f003 031f 	and.w	r3, r3, #31
 c002bd0:	2201      	movs	r2, #1
 c002bd2:	409a      	lsls	r2, r3
 c002bd4:	687b      	ldr	r3, [r7, #4]
 c002bd6:	659a      	str	r2, [r3, #88]	; 0x58
}
 c002bd8:	bf00      	nop
 c002bda:	3714      	adds	r7, #20
 c002bdc:	46bd      	mov	sp, r7
 c002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002be2:	4770      	bx	lr
 c002be4:	50020407 	.word	0x50020407
 c002be8:	50020820 	.word	0x50020820
 c002bec:	cccccccd 	.word	0xcccccccd
 c002bf0:	50020880 	.word	0x50020880

0c002bf4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002bf4:	b480      	push	{r7}
 c002bf6:	b085      	sub	sp, #20
 c002bf8:	af00      	add	r7, sp, #0
 c002bfa:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c002bfc:	687b      	ldr	r3, [r7, #4]
 c002bfe:	685b      	ldr	r3, [r3, #4]
 c002c00:	b2db      	uxtb	r3, r3
 c002c02:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c002c04:	68fa      	ldr	r2, [r7, #12]
 c002c06:	4b0b      	ldr	r3, [pc, #44]	; (c002c34 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c002c08:	4413      	add	r3, r2
 c002c0a:	009b      	lsls	r3, r3, #2
 c002c0c:	461a      	mov	r2, r3
 c002c0e:	687b      	ldr	r3, [r7, #4]
 c002c10:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c002c12:	687b      	ldr	r3, [r7, #4]
 c002c14:	4a08      	ldr	r2, [pc, #32]	; (c002c38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c002c16:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c002c18:	68fb      	ldr	r3, [r7, #12]
 c002c1a:	3b01      	subs	r3, #1
 c002c1c:	f003 0303 	and.w	r3, r3, #3
 c002c20:	2201      	movs	r2, #1
 c002c22:	409a      	lsls	r2, r3
 c002c24:	687b      	ldr	r3, [r7, #4]
 c002c26:	665a      	str	r2, [r3, #100]	; 0x64
}
 c002c28:	bf00      	nop
 c002c2a:	3714      	adds	r7, #20
 c002c2c:	46bd      	mov	sp, r7
 c002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002c32:	4770      	bx	lr
 c002c34:	1400823f 	.word	0x1400823f
 c002c38:	50020940 	.word	0x50020940

0c002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c002c3c:	b480      	push	{r7}
 c002c3e:	b087      	sub	sp, #28
 c002c40:	af00      	add	r7, sp, #0
 c002c42:	6078      	str	r0, [r7, #4]
 c002c44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c002c46:	2300      	movs	r3, #0
 c002c48:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002c4a:	e158      	b.n	c002efe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c002c4c:	683b      	ldr	r3, [r7, #0]
 c002c4e:	681a      	ldr	r2, [r3, #0]
 c002c50:	2101      	movs	r1, #1
 c002c52:	697b      	ldr	r3, [r7, #20]
 c002c54:	fa01 f303 	lsl.w	r3, r1, r3
 c002c58:	4013      	ands	r3, r2
 c002c5a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c002c5c:	68fb      	ldr	r3, [r7, #12]
 c002c5e:	2b00      	cmp	r3, #0
 c002c60:	f000 814a 	beq.w	c002ef8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c002c64:	683b      	ldr	r3, [r7, #0]
 c002c66:	685b      	ldr	r3, [r3, #4]
 c002c68:	f003 0303 	and.w	r3, r3, #3
 c002c6c:	2b01      	cmp	r3, #1
 c002c6e:	d005      	beq.n	c002c7c <HAL_GPIO_Init+0x40>
 c002c70:	683b      	ldr	r3, [r7, #0]
 c002c72:	685b      	ldr	r3, [r3, #4]
 c002c74:	f003 0303 	and.w	r3, r3, #3
 c002c78:	2b02      	cmp	r3, #2
 c002c7a:	d130      	bne.n	c002cde <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c002c7c:	687b      	ldr	r3, [r7, #4]
 c002c7e:	689b      	ldr	r3, [r3, #8]
 c002c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c002c82:	697b      	ldr	r3, [r7, #20]
 c002c84:	005b      	lsls	r3, r3, #1
 c002c86:	2203      	movs	r2, #3
 c002c88:	fa02 f303 	lsl.w	r3, r2, r3
 c002c8c:	43db      	mvns	r3, r3
 c002c8e:	693a      	ldr	r2, [r7, #16]
 c002c90:	4013      	ands	r3, r2
 c002c92:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c002c94:	683b      	ldr	r3, [r7, #0]
 c002c96:	68da      	ldr	r2, [r3, #12]
 c002c98:	697b      	ldr	r3, [r7, #20]
 c002c9a:	005b      	lsls	r3, r3, #1
 c002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 c002ca0:	693a      	ldr	r2, [r7, #16]
 c002ca2:	4313      	orrs	r3, r2
 c002ca4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c002ca6:	687b      	ldr	r3, [r7, #4]
 c002ca8:	693a      	ldr	r2, [r7, #16]
 c002caa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c002cac:	687b      	ldr	r3, [r7, #4]
 c002cae:	685b      	ldr	r3, [r3, #4]
 c002cb0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c002cb2:	2201      	movs	r2, #1
 c002cb4:	697b      	ldr	r3, [r7, #20]
 c002cb6:	fa02 f303 	lsl.w	r3, r2, r3
 c002cba:	43db      	mvns	r3, r3
 c002cbc:	693a      	ldr	r2, [r7, #16]
 c002cbe:	4013      	ands	r3, r2
 c002cc0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c002cc2:	683b      	ldr	r3, [r7, #0]
 c002cc4:	685b      	ldr	r3, [r3, #4]
 c002cc6:	091b      	lsrs	r3, r3, #4
 c002cc8:	f003 0201 	and.w	r2, r3, #1
 c002ccc:	697b      	ldr	r3, [r7, #20]
 c002cce:	fa02 f303 	lsl.w	r3, r2, r3
 c002cd2:	693a      	ldr	r2, [r7, #16]
 c002cd4:	4313      	orrs	r3, r2
 c002cd6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c002cd8:	687b      	ldr	r3, [r7, #4]
 c002cda:	693a      	ldr	r2, [r7, #16]
 c002cdc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c002cde:	683b      	ldr	r3, [r7, #0]
 c002ce0:	685b      	ldr	r3, [r3, #4]
 c002ce2:	f003 0303 	and.w	r3, r3, #3
 c002ce6:	2b03      	cmp	r3, #3
 c002ce8:	d017      	beq.n	c002d1a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c002cea:	687b      	ldr	r3, [r7, #4]
 c002cec:	68db      	ldr	r3, [r3, #12]
 c002cee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c002cf0:	697b      	ldr	r3, [r7, #20]
 c002cf2:	005b      	lsls	r3, r3, #1
 c002cf4:	2203      	movs	r2, #3
 c002cf6:	fa02 f303 	lsl.w	r3, r2, r3
 c002cfa:	43db      	mvns	r3, r3
 c002cfc:	693a      	ldr	r2, [r7, #16]
 c002cfe:	4013      	ands	r3, r2
 c002d00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c002d02:	683b      	ldr	r3, [r7, #0]
 c002d04:	689a      	ldr	r2, [r3, #8]
 c002d06:	697b      	ldr	r3, [r7, #20]
 c002d08:	005b      	lsls	r3, r3, #1
 c002d0a:	fa02 f303 	lsl.w	r3, r2, r3
 c002d0e:	693a      	ldr	r2, [r7, #16]
 c002d10:	4313      	orrs	r3, r2
 c002d12:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c002d14:	687b      	ldr	r3, [r7, #4]
 c002d16:	693a      	ldr	r2, [r7, #16]
 c002d18:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c002d1a:	683b      	ldr	r3, [r7, #0]
 c002d1c:	685b      	ldr	r3, [r3, #4]
 c002d1e:	f003 0303 	and.w	r3, r3, #3
 c002d22:	2b02      	cmp	r3, #2
 c002d24:	d123      	bne.n	c002d6e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c002d26:	697b      	ldr	r3, [r7, #20]
 c002d28:	08da      	lsrs	r2, r3, #3
 c002d2a:	687b      	ldr	r3, [r7, #4]
 c002d2c:	3208      	adds	r2, #8
 c002d2e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c002d32:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c002d34:	697b      	ldr	r3, [r7, #20]
 c002d36:	f003 0307 	and.w	r3, r3, #7
 c002d3a:	009b      	lsls	r3, r3, #2
 c002d3c:	220f      	movs	r2, #15
 c002d3e:	fa02 f303 	lsl.w	r3, r2, r3
 c002d42:	43db      	mvns	r3, r3
 c002d44:	693a      	ldr	r2, [r7, #16]
 c002d46:	4013      	ands	r3, r2
 c002d48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c002d4a:	683b      	ldr	r3, [r7, #0]
 c002d4c:	691a      	ldr	r2, [r3, #16]
 c002d4e:	697b      	ldr	r3, [r7, #20]
 c002d50:	f003 0307 	and.w	r3, r3, #7
 c002d54:	009b      	lsls	r3, r3, #2
 c002d56:	fa02 f303 	lsl.w	r3, r2, r3
 c002d5a:	693a      	ldr	r2, [r7, #16]
 c002d5c:	4313      	orrs	r3, r2
 c002d5e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c002d60:	697b      	ldr	r3, [r7, #20]
 c002d62:	08da      	lsrs	r2, r3, #3
 c002d64:	687b      	ldr	r3, [r7, #4]
 c002d66:	3208      	adds	r2, #8
 c002d68:	6939      	ldr	r1, [r7, #16]
 c002d6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c002d6e:	687b      	ldr	r3, [r7, #4]
 c002d70:	681b      	ldr	r3, [r3, #0]
 c002d72:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c002d74:	697b      	ldr	r3, [r7, #20]
 c002d76:	005b      	lsls	r3, r3, #1
 c002d78:	2203      	movs	r2, #3
 c002d7a:	fa02 f303 	lsl.w	r3, r2, r3
 c002d7e:	43db      	mvns	r3, r3
 c002d80:	693a      	ldr	r2, [r7, #16]
 c002d82:	4013      	ands	r3, r2
 c002d84:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c002d86:	683b      	ldr	r3, [r7, #0]
 c002d88:	685b      	ldr	r3, [r3, #4]
 c002d8a:	f003 0203 	and.w	r2, r3, #3
 c002d8e:	697b      	ldr	r3, [r7, #20]
 c002d90:	005b      	lsls	r3, r3, #1
 c002d92:	fa02 f303 	lsl.w	r3, r2, r3
 c002d96:	693a      	ldr	r2, [r7, #16]
 c002d98:	4313      	orrs	r3, r2
 c002d9a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c002d9c:	687b      	ldr	r3, [r7, #4]
 c002d9e:	693a      	ldr	r2, [r7, #16]
 c002da0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c002da2:	683b      	ldr	r3, [r7, #0]
 c002da4:	685b      	ldr	r3, [r3, #4]
 c002da6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c002daa:	2b00      	cmp	r3, #0
 c002dac:	f000 80a4 	beq.w	c002ef8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c002db0:	4a5a      	ldr	r2, [pc, #360]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002db2:	697b      	ldr	r3, [r7, #20]
 c002db4:	089b      	lsrs	r3, r3, #2
 c002db6:	3318      	adds	r3, #24
 c002db8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002dbc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c002dbe:	697b      	ldr	r3, [r7, #20]
 c002dc0:	f003 0303 	and.w	r3, r3, #3
 c002dc4:	00db      	lsls	r3, r3, #3
 c002dc6:	220f      	movs	r2, #15
 c002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 c002dcc:	43db      	mvns	r3, r3
 c002dce:	693a      	ldr	r2, [r7, #16]
 c002dd0:	4013      	ands	r3, r2
 c002dd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c002dd4:	687b      	ldr	r3, [r7, #4]
 c002dd6:	4a52      	ldr	r2, [pc, #328]	; (c002f20 <HAL_GPIO_Init+0x2e4>)
 c002dd8:	4293      	cmp	r3, r2
 c002dda:	d025      	beq.n	c002e28 <HAL_GPIO_Init+0x1ec>
 c002ddc:	687b      	ldr	r3, [r7, #4]
 c002dde:	4a51      	ldr	r2, [pc, #324]	; (c002f24 <HAL_GPIO_Init+0x2e8>)
 c002de0:	4293      	cmp	r3, r2
 c002de2:	d01f      	beq.n	c002e24 <HAL_GPIO_Init+0x1e8>
 c002de4:	687b      	ldr	r3, [r7, #4]
 c002de6:	4a50      	ldr	r2, [pc, #320]	; (c002f28 <HAL_GPIO_Init+0x2ec>)
 c002de8:	4293      	cmp	r3, r2
 c002dea:	d019      	beq.n	c002e20 <HAL_GPIO_Init+0x1e4>
 c002dec:	687b      	ldr	r3, [r7, #4]
 c002dee:	4a4f      	ldr	r2, [pc, #316]	; (c002f2c <HAL_GPIO_Init+0x2f0>)
 c002df0:	4293      	cmp	r3, r2
 c002df2:	d013      	beq.n	c002e1c <HAL_GPIO_Init+0x1e0>
 c002df4:	687b      	ldr	r3, [r7, #4]
 c002df6:	4a4e      	ldr	r2, [pc, #312]	; (c002f30 <HAL_GPIO_Init+0x2f4>)
 c002df8:	4293      	cmp	r3, r2
 c002dfa:	d00d      	beq.n	c002e18 <HAL_GPIO_Init+0x1dc>
 c002dfc:	687b      	ldr	r3, [r7, #4]
 c002dfe:	4a4d      	ldr	r2, [pc, #308]	; (c002f34 <HAL_GPIO_Init+0x2f8>)
 c002e00:	4293      	cmp	r3, r2
 c002e02:	d007      	beq.n	c002e14 <HAL_GPIO_Init+0x1d8>
 c002e04:	687b      	ldr	r3, [r7, #4]
 c002e06:	4a4c      	ldr	r2, [pc, #304]	; (c002f38 <HAL_GPIO_Init+0x2fc>)
 c002e08:	4293      	cmp	r3, r2
 c002e0a:	d101      	bne.n	c002e10 <HAL_GPIO_Init+0x1d4>
 c002e0c:	2306      	movs	r3, #6
 c002e0e:	e00c      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e10:	2307      	movs	r3, #7
 c002e12:	e00a      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e14:	2305      	movs	r3, #5
 c002e16:	e008      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e18:	2304      	movs	r3, #4
 c002e1a:	e006      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e1c:	2303      	movs	r3, #3
 c002e1e:	e004      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e20:	2302      	movs	r3, #2
 c002e22:	e002      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e24:	2301      	movs	r3, #1
 c002e26:	e000      	b.n	c002e2a <HAL_GPIO_Init+0x1ee>
 c002e28:	2300      	movs	r3, #0
 c002e2a:	697a      	ldr	r2, [r7, #20]
 c002e2c:	f002 0203 	and.w	r2, r2, #3
 c002e30:	00d2      	lsls	r2, r2, #3
 c002e32:	4093      	lsls	r3, r2
 c002e34:	693a      	ldr	r2, [r7, #16]
 c002e36:	4313      	orrs	r3, r2
 c002e38:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c002e3a:	4938      	ldr	r1, [pc, #224]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e3c:	697b      	ldr	r3, [r7, #20]
 c002e3e:	089b      	lsrs	r3, r3, #2
 c002e40:	3318      	adds	r3, #24
 c002e42:	693a      	ldr	r2, [r7, #16]
 c002e44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c002e48:	4b34      	ldr	r3, [pc, #208]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e4a:	681b      	ldr	r3, [r3, #0]
 c002e4c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002e4e:	68fb      	ldr	r3, [r7, #12]
 c002e50:	43db      	mvns	r3, r3
 c002e52:	693a      	ldr	r2, [r7, #16]
 c002e54:	4013      	ands	r3, r2
 c002e56:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c002e58:	683b      	ldr	r3, [r7, #0]
 c002e5a:	685b      	ldr	r3, [r3, #4]
 c002e5c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c002e60:	2b00      	cmp	r3, #0
 c002e62:	d003      	beq.n	c002e6c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c002e64:	693a      	ldr	r2, [r7, #16]
 c002e66:	68fb      	ldr	r3, [r7, #12]
 c002e68:	4313      	orrs	r3, r2
 c002e6a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c002e6c:	4a2b      	ldr	r2, [pc, #172]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e6e:	693b      	ldr	r3, [r7, #16]
 c002e70:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c002e72:	4b2a      	ldr	r3, [pc, #168]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e74:	685b      	ldr	r3, [r3, #4]
 c002e76:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002e78:	68fb      	ldr	r3, [r7, #12]
 c002e7a:	43db      	mvns	r3, r3
 c002e7c:	693a      	ldr	r2, [r7, #16]
 c002e7e:	4013      	ands	r3, r2
 c002e80:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c002e82:	683b      	ldr	r3, [r7, #0]
 c002e84:	685b      	ldr	r3, [r3, #4]
 c002e86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c002e8a:	2b00      	cmp	r3, #0
 c002e8c:	d003      	beq.n	c002e96 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c002e8e:	693a      	ldr	r2, [r7, #16]
 c002e90:	68fb      	ldr	r3, [r7, #12]
 c002e92:	4313      	orrs	r3, r2
 c002e94:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c002e96:	4a21      	ldr	r2, [pc, #132]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e98:	693b      	ldr	r3, [r7, #16]
 c002e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c002e9c:	4b1f      	ldr	r3, [pc, #124]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002e9e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c002ea2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002ea4:	68fb      	ldr	r3, [r7, #12]
 c002ea6:	43db      	mvns	r3, r3
 c002ea8:	693a      	ldr	r2, [r7, #16]
 c002eaa:	4013      	ands	r3, r2
 c002eac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c002eae:	683b      	ldr	r3, [r7, #0]
 c002eb0:	685b      	ldr	r3, [r3, #4]
 c002eb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002eb6:	2b00      	cmp	r3, #0
 c002eb8:	d003      	beq.n	c002ec2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c002eba:	693a      	ldr	r2, [r7, #16]
 c002ebc:	68fb      	ldr	r3, [r7, #12]
 c002ebe:	4313      	orrs	r3, r2
 c002ec0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c002ec2:	4a16      	ldr	r2, [pc, #88]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002ec4:	693b      	ldr	r3, [r7, #16]
 c002ec6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c002eca:	4b14      	ldr	r3, [pc, #80]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002ecc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002ed2:	68fb      	ldr	r3, [r7, #12]
 c002ed4:	43db      	mvns	r3, r3
 c002ed6:	693a      	ldr	r2, [r7, #16]
 c002ed8:	4013      	ands	r3, r2
 c002eda:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c002edc:	683b      	ldr	r3, [r7, #0]
 c002ede:	685b      	ldr	r3, [r3, #4]
 c002ee0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002ee4:	2b00      	cmp	r3, #0
 c002ee6:	d003      	beq.n	c002ef0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c002ee8:	693a      	ldr	r2, [r7, #16]
 c002eea:	68fb      	ldr	r3, [r7, #12]
 c002eec:	4313      	orrs	r3, r2
 c002eee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c002ef0:	4a0a      	ldr	r2, [pc, #40]	; (c002f1c <HAL_GPIO_Init+0x2e0>)
 c002ef2:	693b      	ldr	r3, [r7, #16]
 c002ef4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c002ef8:	697b      	ldr	r3, [r7, #20]
 c002efa:	3301      	adds	r3, #1
 c002efc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002efe:	683b      	ldr	r3, [r7, #0]
 c002f00:	681a      	ldr	r2, [r3, #0]
 c002f02:	697b      	ldr	r3, [r7, #20]
 c002f04:	fa22 f303 	lsr.w	r3, r2, r3
 c002f08:	2b00      	cmp	r3, #0
 c002f0a:	f47f ae9f 	bne.w	c002c4c <HAL_GPIO_Init+0x10>
  }
}
 c002f0e:	bf00      	nop
 c002f10:	bf00      	nop
 c002f12:	371c      	adds	r7, #28
 c002f14:	46bd      	mov	sp, r7
 c002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f1a:	4770      	bx	lr
 c002f1c:	5002f400 	.word	0x5002f400
 c002f20:	52020000 	.word	0x52020000
 c002f24:	52020400 	.word	0x52020400
 c002f28:	52020800 	.word	0x52020800
 c002f2c:	52020c00 	.word	0x52020c00
 c002f30:	52021000 	.word	0x52021000
 c002f34:	52021400 	.word	0x52021400
 c002f38:	52021800 	.word	0x52021800

0c002f3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c002f3c:	b480      	push	{r7}
 c002f3e:	b083      	sub	sp, #12
 c002f40:	af00      	add	r7, sp, #0
 c002f42:	6078      	str	r0, [r7, #4]
 c002f44:	460b      	mov	r3, r1
 c002f46:	807b      	strh	r3, [r7, #2]
 c002f48:	4613      	mov	r3, r2
 c002f4a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c002f4c:	787b      	ldrb	r3, [r7, #1]
 c002f4e:	2b00      	cmp	r3, #0
 c002f50:	d003      	beq.n	c002f5a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002f52:	887a      	ldrh	r2, [r7, #2]
 c002f54:	687b      	ldr	r3, [r7, #4]
 c002f56:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c002f58:	e002      	b.n	c002f60 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c002f5a:	887a      	ldrh	r2, [r7, #2]
 c002f5c:	687b      	ldr	r3, [r7, #4]
 c002f5e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c002f60:	bf00      	nop
 c002f62:	370c      	adds	r7, #12
 c002f64:	46bd      	mov	sp, r7
 c002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f6a:	4770      	bx	lr

0c002f6c <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c002f6c:	b480      	push	{r7}
 c002f6e:	b089      	sub	sp, #36	; 0x24
 c002f70:	af00      	add	r7, sp, #0
 c002f72:	60f8      	str	r0, [r7, #12]
 c002f74:	460b      	mov	r3, r1
 c002f76:	607a      	str	r2, [r7, #4]
 c002f78:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c002f7a:	2300      	movs	r3, #0
 c002f7c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c002f7e:	68fb      	ldr	r3, [r7, #12]
 c002f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002f82:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c002f84:	e01b      	b.n	c002fbe <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c002f86:	897a      	ldrh	r2, [r7, #10]
 c002f88:	2101      	movs	r1, #1
 c002f8a:	69fb      	ldr	r3, [r7, #28]
 c002f8c:	fa01 f303 	lsl.w	r3, r1, r3
 c002f90:	4013      	ands	r3, r2
 c002f92:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c002f94:	697b      	ldr	r3, [r7, #20]
 c002f96:	2b00      	cmp	r3, #0
 c002f98:	d00e      	beq.n	c002fb8 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c002f9a:	2201      	movs	r2, #1
 c002f9c:	69fb      	ldr	r3, [r7, #28]
 c002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 c002fa2:	43db      	mvns	r3, r3
 c002fa4:	69ba      	ldr	r2, [r7, #24]
 c002fa6:	4013      	ands	r3, r2
 c002fa8:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c002faa:	687a      	ldr	r2, [r7, #4]
 c002fac:	69fb      	ldr	r3, [r7, #28]
 c002fae:	fa02 f303 	lsl.w	r3, r2, r3
 c002fb2:	69ba      	ldr	r2, [r7, #24]
 c002fb4:	4313      	orrs	r3, r2
 c002fb6:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c002fb8:	69fb      	ldr	r3, [r7, #28]
 c002fba:	3301      	adds	r3, #1
 c002fbc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c002fbe:	897a      	ldrh	r2, [r7, #10]
 c002fc0:	69fb      	ldr	r3, [r7, #28]
 c002fc2:	fa42 f303 	asr.w	r3, r2, r3
 c002fc6:	2b00      	cmp	r3, #0
 c002fc8:	d1dd      	bne.n	c002f86 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c002fca:	68fb      	ldr	r3, [r7, #12]
 c002fcc:	69ba      	ldr	r2, [r7, #24]
 c002fce:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002fd0:	bf00      	nop
 c002fd2:	3724      	adds	r7, #36	; 0x24
 c002fd4:	46bd      	mov	sp, r7
 c002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002fda:	4770      	bx	lr

0c002fdc <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c002fdc:	b480      	push	{r7}
 c002fde:	b085      	sub	sp, #20
 c002fe0:	af00      	add	r7, sp, #0
 c002fe2:	6078      	str	r0, [r7, #4]
 c002fe4:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002fe6:	683b      	ldr	r3, [r7, #0]
 c002fe8:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c002fec:	d216      	bcs.n	c00301c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002fee:	687b      	ldr	r3, [r7, #4]
 c002ff0:	0f1b      	lsrs	r3, r3, #28
 c002ff2:	015a      	lsls	r2, r3, #5
 c002ff4:	687b      	ldr	r3, [r7, #4]
 c002ff6:	f003 031f 	and.w	r3, r3, #31
 c002ffa:	4413      	add	r3, r2
 c002ffc:	2b32      	cmp	r3, #50	; 0x32
 c002ffe:	d80d      	bhi.n	c00301c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c003000:	687b      	ldr	r3, [r7, #4]
 c003002:	f003 0320 	and.w	r3, r3, #32
 c003006:	2b00      	cmp	r3, #0
 c003008:	d00a      	beq.n	c003020 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c00300a:	687b      	ldr	r3, [r7, #4]
 c00300c:	0f1b      	lsrs	r3, r3, #28
 c00300e:	015a      	lsls	r2, r3, #5
 c003010:	687b      	ldr	r3, [r7, #4]
 c003012:	f003 031f 	and.w	r3, r3, #31
 c003016:	4413      	add	r3, r2
 c003018:	2b00      	cmp	r3, #0
 c00301a:	d001      	beq.n	c003020 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c00301c:	2301      	movs	r3, #1
 c00301e:	e0a8      	b.n	c003172 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c003020:	687b      	ldr	r3, [r7, #4]
 c003022:	f003 0320 	and.w	r3, r3, #32
 c003026:	2b00      	cmp	r3, #0
 c003028:	d04e      	beq.n	c0030c8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00302a:	683a      	ldr	r2, [r7, #0]
 c00302c:	f240 1301 	movw	r3, #257	; 0x101
 c003030:	4013      	ands	r3, r2
 c003032:	f240 1201 	movw	r2, #257	; 0x101
 c003036:	4293      	cmp	r3, r2
 c003038:	d10e      	bne.n	c003058 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00303a:	4b51      	ldr	r3, [pc, #324]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00303c:	691b      	ldr	r3, [r3, #16]
 c00303e:	4b50      	ldr	r3, [pc, #320]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003040:	f04f 32ff 	mov.w	r2, #4294967295
 c003044:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c003046:	4b4e      	ldr	r3, [pc, #312]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003048:	695b      	ldr	r3, [r3, #20]
 c00304a:	4a4d      	ldr	r2, [pc, #308]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00304c:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c003050:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c003054:	6153      	str	r3, [r2, #20]
 c003056:	e00f      	b.n	c003078 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c003058:	683b      	ldr	r3, [r7, #0]
 c00305a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00305e:	2b00      	cmp	r3, #0
 c003060:	d00a      	beq.n	c003078 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c003062:	4b47      	ldr	r3, [pc, #284]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003064:	691b      	ldr	r3, [r3, #16]
 c003066:	4b46      	ldr	r3, [pc, #280]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003068:	2200      	movs	r2, #0
 c00306a:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c00306c:	4b44      	ldr	r3, [pc, #272]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00306e:	695b      	ldr	r3, [r3, #20]
 c003070:	4a43      	ldr	r2, [pc, #268]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003072:	0cdb      	lsrs	r3, r3, #19
 c003074:	04db      	lsls	r3, r3, #19
 c003076:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c003078:	683a      	ldr	r2, [r7, #0]
 c00307a:	f240 2302 	movw	r3, #514	; 0x202
 c00307e:	4013      	ands	r3, r2
 c003080:	f240 2202 	movw	r2, #514	; 0x202
 c003084:	4293      	cmp	r3, r2
 c003086:	d10e      	bne.n	c0030a6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c003088:	4b3d      	ldr	r3, [pc, #244]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00308a:	6a1b      	ldr	r3, [r3, #32]
 c00308c:	4b3c      	ldr	r3, [pc, #240]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00308e:	f04f 32ff 	mov.w	r2, #4294967295
 c003092:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c003094:	4b3a      	ldr	r3, [pc, #232]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c003096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003098:	4a39      	ldr	r2, [pc, #228]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00309a:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c00309e:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c0030a2:	6253      	str	r3, [r2, #36]	; 0x24
 c0030a4:	e064      	b.n	c003170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0030a6:	683b      	ldr	r3, [r7, #0]
 c0030a8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0030ac:	2b00      	cmp	r3, #0
 c0030ae:	d05f      	beq.n	c003170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0030b0:	4b33      	ldr	r3, [pc, #204]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0030b2:	6a1b      	ldr	r3, [r3, #32]
 c0030b4:	4b32      	ldr	r3, [pc, #200]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0030b6:	2200      	movs	r2, #0
 c0030b8:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0030ba:	4b31      	ldr	r3, [pc, #196]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0030bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0030be:	4a30      	ldr	r2, [pc, #192]	; (c003180 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0030c0:	0cdb      	lsrs	r3, r3, #19
 c0030c2:	04db      	lsls	r3, r3, #19
 c0030c4:	6253      	str	r3, [r2, #36]	; 0x24
 c0030c6:	e053      	b.n	c003170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c0030c8:	687b      	ldr	r3, [r7, #4]
 c0030ca:	0f1a      	lsrs	r2, r3, #28
 c0030cc:	4b2d      	ldr	r3, [pc, #180]	; (c003184 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c0030ce:	4413      	add	r3, r2
 c0030d0:	009b      	lsls	r3, r3, #2
 c0030d2:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c0030d4:	683a      	ldr	r2, [r7, #0]
 c0030d6:	f240 1301 	movw	r3, #257	; 0x101
 c0030da:	4013      	ands	r3, r2
 c0030dc:	f240 1201 	movw	r2, #257	; 0x101
 c0030e0:	4293      	cmp	r3, r2
 c0030e2:	d10a      	bne.n	c0030fa <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c0030e4:	68fb      	ldr	r3, [r7, #12]
 c0030e6:	6819      	ldr	r1, [r3, #0]
 c0030e8:	687b      	ldr	r3, [r7, #4]
 c0030ea:	f003 031f 	and.w	r3, r3, #31
 c0030ee:	2201      	movs	r2, #1
 c0030f0:	409a      	lsls	r2, r3
 c0030f2:	68fb      	ldr	r3, [r7, #12]
 c0030f4:	430a      	orrs	r2, r1
 c0030f6:	601a      	str	r2, [r3, #0]
 c0030f8:	e010      	b.n	c00311c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c0030fa:	683b      	ldr	r3, [r7, #0]
 c0030fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003100:	2b00      	cmp	r3, #0
 c003102:	d00b      	beq.n	c00311c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c003104:	68fb      	ldr	r3, [r7, #12]
 c003106:	6819      	ldr	r1, [r3, #0]
 c003108:	687b      	ldr	r3, [r7, #4]
 c00310a:	f003 031f 	and.w	r3, r3, #31
 c00310e:	2201      	movs	r2, #1
 c003110:	fa02 f303 	lsl.w	r3, r2, r3
 c003114:	43da      	mvns	r2, r3
 c003116:	68fb      	ldr	r3, [r7, #12]
 c003118:	400a      	ands	r2, r1
 c00311a:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00311c:	687b      	ldr	r3, [r7, #4]
 c00311e:	0f1a      	lsrs	r2, r3, #28
 c003120:	4b19      	ldr	r3, [pc, #100]	; (c003188 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c003122:	4413      	add	r3, r2
 c003124:	009b      	lsls	r3, r3, #2
 c003126:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c003128:	683a      	ldr	r2, [r7, #0]
 c00312a:	f240 2302 	movw	r3, #514	; 0x202
 c00312e:	4013      	ands	r3, r2
 c003130:	f240 2202 	movw	r2, #514	; 0x202
 c003134:	4293      	cmp	r3, r2
 c003136:	d10a      	bne.n	c00314e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c003138:	68fb      	ldr	r3, [r7, #12]
 c00313a:	6819      	ldr	r1, [r3, #0]
 c00313c:	687b      	ldr	r3, [r7, #4]
 c00313e:	f003 031f 	and.w	r3, r3, #31
 c003142:	2201      	movs	r2, #1
 c003144:	409a      	lsls	r2, r3
 c003146:	68fb      	ldr	r3, [r7, #12]
 c003148:	430a      	orrs	r2, r1
 c00314a:	601a      	str	r2, [r3, #0]
 c00314c:	e010      	b.n	c003170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00314e:	683b      	ldr	r3, [r7, #0]
 c003150:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003154:	2b00      	cmp	r3, #0
 c003156:	d00b      	beq.n	c003170 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c003158:	68fb      	ldr	r3, [r7, #12]
 c00315a:	6819      	ldr	r1, [r3, #0]
 c00315c:	687b      	ldr	r3, [r7, #4]
 c00315e:	f003 031f 	and.w	r3, r3, #31
 c003162:	2201      	movs	r2, #1
 c003164:	fa02 f303 	lsl.w	r3, r2, r3
 c003168:	43da      	mvns	r2, r3
 c00316a:	68fb      	ldr	r3, [r7, #12]
 c00316c:	400a      	ands	r2, r1
 c00316e:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c003170:	2300      	movs	r3, #0
}
 c003172:	4618      	mov	r0, r3
 c003174:	3714      	adds	r7, #20
 c003176:	46bd      	mov	sp, r7
 c003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00317c:	4770      	bx	lr
 c00317e:	bf00      	nop
 c003180:	50032400 	.word	0x50032400
 c003184:	1400c904 	.word	0x1400c904
 c003188:	1400c908 	.word	0x1400c908

0c00318c <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c00318c:	b480      	push	{r7}
 c00318e:	b089      	sub	sp, #36	; 0x24
 c003190:	af00      	add	r7, sp, #0
 c003192:	6078      	str	r0, [r7, #4]
 c003194:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c003196:	687b      	ldr	r3, [r7, #4]
 c003198:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c00319c:	d00b      	beq.n	c0031b6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c00319e:	687b      	ldr	r3, [r7, #4]
 c0031a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0031a4:	d007      	beq.n	c0031b6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0031a6:	687b      	ldr	r3, [r7, #4]
 c0031a8:	4a36      	ldr	r2, [pc, #216]	; (c003284 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0031aa:	4293      	cmp	r3, r2
 c0031ac:	d003      	beq.n	c0031b6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0031ae:	687b      	ldr	r3, [r7, #4]
 c0031b0:	4a35      	ldr	r2, [pc, #212]	; (c003288 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0031b2:	4293      	cmp	r3, r2
 c0031b4:	d111      	bne.n	c0031da <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0031b6:	683b      	ldr	r3, [r7, #0]
 c0031b8:	681b      	ldr	r3, [r3, #0]
 c0031ba:	2b00      	cmp	r3, #0
 c0031bc:	d004      	beq.n	c0031c8 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0031be:	683b      	ldr	r3, [r7, #0]
 c0031c0:	681b      	ldr	r3, [r3, #0]
 c0031c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c0031c6:	d108      	bne.n	c0031da <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c0031c8:	683b      	ldr	r3, [r7, #0]
 c0031ca:	685b      	ldr	r3, [r3, #4]
 c0031cc:	2b00      	cmp	r3, #0
 c0031ce:	d006      	beq.n	c0031de <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c0031d0:	683b      	ldr	r3, [r7, #0]
 c0031d2:	685b      	ldr	r3, [r3, #4]
 c0031d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c0031d8:	d001      	beq.n	c0031de <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c0031da:	2301      	movs	r3, #1
 c0031dc:	e04b      	b.n	c003276 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c0031de:	683b      	ldr	r3, [r7, #0]
 c0031e0:	685b      	ldr	r3, [r3, #4]
 c0031e2:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c0031e4:	683b      	ldr	r3, [r7, #0]
 c0031e6:	681b      	ldr	r3, [r3, #0]
 c0031e8:	693a      	ldr	r2, [r7, #16]
 c0031ea:	4313      	orrs	r3, r2
 c0031ec:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0031ee:	687b      	ldr	r3, [r7, #4]
 c0031f0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0031f4:	d003      	beq.n	c0031fe <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c0031f6:	687b      	ldr	r3, [r7, #4]
 c0031f8:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0031fc:	d105      	bne.n	c00320a <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c0031fe:	4b23      	ldr	r3, [pc, #140]	; (c00328c <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c003200:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c003202:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c003206:	61bb      	str	r3, [r7, #24]
 c003208:	e004      	b.n	c003214 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c00320a:	4b21      	ldr	r3, [pc, #132]	; (c003290 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c00320c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00320e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c003212:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c003214:	69bb      	ldr	r3, [r7, #24]
 c003216:	0b5b      	lsrs	r3, r3, #13
 c003218:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c00321a:	2300      	movs	r3, #0
 c00321c:	617b      	str	r3, [r7, #20]
 c00321e:	e00c      	b.n	c00323a <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c003220:	683b      	ldr	r3, [r7, #0]
 c003222:	697a      	ldr	r2, [r7, #20]
 c003224:	3202      	adds	r2, #2
 c003226:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00322a:	69fb      	ldr	r3, [r7, #28]
 c00322c:	697a      	ldr	r2, [r7, #20]
 c00322e:	3240      	adds	r2, #64	; 0x40
 c003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c003234:	697b      	ldr	r3, [r7, #20]
 c003236:	3301      	adds	r3, #1
 c003238:	617b      	str	r3, [r7, #20]
 c00323a:	697a      	ldr	r2, [r7, #20]
 c00323c:	68fb      	ldr	r3, [r7, #12]
 c00323e:	429a      	cmp	r2, r3
 c003240:	d3ee      	bcc.n	c003220 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c003242:	69fb      	ldr	r3, [r7, #28]
 c003244:	681b      	ldr	r3, [r3, #0]
 c003246:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00324a:	693b      	ldr	r3, [r7, #16]
 c00324c:	431a      	orrs	r2, r3
 c00324e:	69fb      	ldr	r3, [r7, #28]
 c003250:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c003252:	69bb      	ldr	r3, [r7, #24]
 c003254:	0b5b      	lsrs	r3, r3, #13
 c003256:	2201      	movs	r2, #1
 c003258:	fa02 f303 	lsl.w	r3, r2, r3
 c00325c:	3b01      	subs	r3, #1
 c00325e:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c003260:	69fb      	ldr	r3, [r7, #28]
 c003262:	691a      	ldr	r2, [r3, #16]
 c003264:	68bb      	ldr	r3, [r7, #8]
 c003266:	43db      	mvns	r3, r3
 c003268:	401a      	ands	r2, r3
 c00326a:	683b      	ldr	r3, [r7, #0]
 c00326c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c00326e:	431a      	orrs	r2, r3
 c003270:	69fb      	ldr	r3, [r7, #28]
 c003272:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c003274:	2300      	movs	r3, #0
}
 c003276:	4618      	mov	r0, r3
 c003278:	3724      	adds	r7, #36	; 0x24
 c00327a:	46bd      	mov	sp, r7
 c00327c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003280:	4770      	bx	lr
 c003282:	bf00      	nop
 c003284:	20030000 	.word	0x20030000
 c003288:	30030000 	.word	0x30030000
 c00328c:	50032c00 	.word	0x50032c00
 c003290:	50033000 	.word	0x50033000

0c003294 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c003294:	b480      	push	{r7}
 c003296:	b085      	sub	sp, #20
 c003298:	af00      	add	r7, sp, #0
 c00329a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c00329c:	2300      	movs	r3, #0
 c00329e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c0032a0:	4b0b      	ldr	r3, [pc, #44]	; (c0032d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0032a2:	681b      	ldr	r3, [r3, #0]
 c0032a4:	f003 0301 	and.w	r3, r3, #1
 c0032a8:	2b00      	cmp	r3, #0
 c0032aa:	d002      	beq.n	c0032b2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c0032ac:	2301      	movs	r3, #1
 c0032ae:	73fb      	strb	r3, [r7, #15]
 c0032b0:	e007      	b.n	c0032c2 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c0032b2:	4b07      	ldr	r3, [pc, #28]	; (c0032d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0032b4:	681b      	ldr	r3, [r3, #0]
 c0032b6:	f023 0204 	bic.w	r2, r3, #4
 c0032ba:	4905      	ldr	r1, [pc, #20]	; (c0032d0 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0032bc:	687b      	ldr	r3, [r7, #4]
 c0032be:	4313      	orrs	r3, r2
 c0032c0:	600b      	str	r3, [r1, #0]
  }

  return status;
 c0032c2:	7bfb      	ldrb	r3, [r7, #15]
}
 c0032c4:	4618      	mov	r0, r3
 c0032c6:	3714      	adds	r7, #20
 c0032c8:	46bd      	mov	sp, r7
 c0032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0032ce:	4770      	bx	lr
 c0032d0:	50030400 	.word	0x50030400

0c0032d4 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c0032d4:	b480      	push	{r7}
 c0032d6:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c0032d8:	4b05      	ldr	r3, [pc, #20]	; (c0032f0 <HAL_ICACHE_Enable+0x1c>)
 c0032da:	681b      	ldr	r3, [r3, #0]
 c0032dc:	4a04      	ldr	r2, [pc, #16]	; (c0032f0 <HAL_ICACHE_Enable+0x1c>)
 c0032de:	f043 0301 	orr.w	r3, r3, #1
 c0032e2:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c0032e4:	2300      	movs	r3, #0
}
 c0032e6:	4618      	mov	r0, r3
 c0032e8:	46bd      	mov	sp, r7
 c0032ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0032ee:	4770      	bx	lr
 c0032f0:	50030400 	.word	0x50030400

0c0032f4 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c0032f4:	b480      	push	{r7}
 c0032f6:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c0032f8:	4b04      	ldr	r3, [pc, #16]	; (c00330c <HAL_PWREx_GetVoltageRange+0x18>)
 c0032fa:	681b      	ldr	r3, [r3, #0]
 c0032fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c003300:	4618      	mov	r0, r3
 c003302:	46bd      	mov	sp, r7
 c003304:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003308:	4770      	bx	lr
 c00330a:	bf00      	nop
 c00330c:	50007000 	.word	0x50007000

0c003310 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c003310:	b580      	push	{r7, lr}
 c003312:	b084      	sub	sp, #16
 c003314:	af00      	add	r7, sp, #0
 c003316:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c003318:	4b27      	ldr	r3, [pc, #156]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00331a:	681b      	ldr	r3, [r3, #0]
 c00331c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c003320:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c003322:	f000 f871 	bl	c003408 <HAL_PWREx_SMPS_GetEffectiveMode>
 c003326:	4603      	mov	r3, r0
 c003328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00332c:	d101      	bne.n	c003332 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c00332e:	2301      	movs	r3, #1
 c003330:	e03e      	b.n	c0033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c003332:	4b21      	ldr	r3, [pc, #132]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003334:	68db      	ldr	r3, [r3, #12]
 c003336:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00333a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00333e:	d101      	bne.n	c003344 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c003340:	2301      	movs	r3, #1
 c003342:	e035      	b.n	c0033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c003344:	68ba      	ldr	r2, [r7, #8]
 c003346:	687b      	ldr	r3, [r7, #4]
 c003348:	429a      	cmp	r2, r3
 c00334a:	d101      	bne.n	c003350 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c00334c:	2300      	movs	r3, #0
 c00334e:	e02f      	b.n	c0033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c003350:	4b19      	ldr	r3, [pc, #100]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c003352:	681b      	ldr	r3, [r3, #0]
 c003354:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c003358:	4917      	ldr	r1, [pc, #92]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00335a:	687b      	ldr	r3, [r7, #4]
 c00335c:	4313      	orrs	r3, r2
 c00335e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c003360:	4b16      	ldr	r3, [pc, #88]	; (c0033bc <HAL_PWREx_ControlVoltageScaling+0xac>)
 c003362:	681b      	ldr	r3, [r3, #0]
 c003364:	095b      	lsrs	r3, r3, #5
 c003366:	4a16      	ldr	r2, [pc, #88]	; (c0033c0 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c003368:	fba2 2303 	umull	r2, r3, r2, r3
 c00336c:	09db      	lsrs	r3, r3, #7
 c00336e:	2232      	movs	r2, #50	; 0x32
 c003370:	fb02 f303 	mul.w	r3, r2, r3
 c003374:	4a13      	ldr	r2, [pc, #76]	; (c0033c4 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c003376:	fba2 2303 	umull	r2, r3, r2, r3
 c00337a:	08db      	lsrs	r3, r3, #3
 c00337c:	3301      	adds	r3, #1
 c00337e:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c003380:	e002      	b.n	c003388 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c003382:	68fb      	ldr	r3, [r7, #12]
 c003384:	3b01      	subs	r3, #1
 c003386:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c003388:	4b0b      	ldr	r3, [pc, #44]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00338a:	695b      	ldr	r3, [r3, #20]
 c00338c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003390:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c003394:	d102      	bne.n	c00339c <HAL_PWREx_ControlVoltageScaling+0x8c>
 c003396:	68fb      	ldr	r3, [r7, #12]
 c003398:	2b00      	cmp	r3, #0
 c00339a:	d1f2      	bne.n	c003382 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c00339c:	4b06      	ldr	r3, [pc, #24]	; (c0033b8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00339e:	695b      	ldr	r3, [r3, #20]
 c0033a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0033a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0033a8:	d101      	bne.n	c0033ae <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c0033aa:	2303      	movs	r3, #3
 c0033ac:	e000      	b.n	c0033b0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c0033ae:	2300      	movs	r3, #0
}
 c0033b0:	4618      	mov	r0, r3
 c0033b2:	3710      	adds	r7, #16
 c0033b4:	46bd      	mov	sp, r7
 c0033b6:	bd80      	pop	{r7, pc}
 c0033b8:	50007000 	.word	0x50007000
 c0033bc:	30000038 	.word	0x30000038
 c0033c0:	0a7c5ac5 	.word	0x0a7c5ac5
 c0033c4:	cccccccd 	.word	0xcccccccd

0c0033c8 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c0033c8:	b480      	push	{r7}
 c0033ca:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c0033cc:	4b05      	ldr	r3, [pc, #20]	; (c0033e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c0033ce:	685b      	ldr	r3, [r3, #4]
 c0033d0:	4a04      	ldr	r2, [pc, #16]	; (c0033e4 <HAL_PWREx_EnableVddIO2+0x1c>)
 c0033d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c0033d6:	6053      	str	r3, [r2, #4]
}
 c0033d8:	bf00      	nop
 c0033da:	46bd      	mov	sp, r7
 c0033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0033e0:	4770      	bx	lr
 c0033e2:	bf00      	nop
 c0033e4:	50007000 	.word	0x50007000

0c0033e8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c0033e8:	b480      	push	{r7}
 c0033ea:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c0033ec:	4b05      	ldr	r3, [pc, #20]	; (c003404 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0033ee:	689b      	ldr	r3, [r3, #8]
 c0033f0:	4a04      	ldr	r2, [pc, #16]	; (c003404 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c0033f2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0033f6:	6093      	str	r3, [r2, #8]
}
 c0033f8:	bf00      	nop
 c0033fa:	46bd      	mov	sp, r7
 c0033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003400:	4770      	bx	lr
 c003402:	bf00      	nop
 c003404:	50007000 	.word	0x50007000

0c003408 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c003408:	b480      	push	{r7}
 c00340a:	b083      	sub	sp, #12
 c00340c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c00340e:	4b0f      	ldr	r3, [pc, #60]	; (c00344c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c003410:	691b      	ldr	r3, [r3, #16]
 c003412:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c003414:	683b      	ldr	r3, [r7, #0]
 c003416:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00341a:	2b00      	cmp	r3, #0
 c00341c:	d003      	beq.n	c003426 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c00341e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c003422:	607b      	str	r3, [r7, #4]
 c003424:	e00a      	b.n	c00343c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c003426:	683b      	ldr	r3, [r7, #0]
 c003428:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00342c:	2b00      	cmp	r3, #0
 c00342e:	d103      	bne.n	c003438 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c003430:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c003434:	607b      	str	r3, [r7, #4]
 c003436:	e001      	b.n	c00343c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c003438:	2300      	movs	r3, #0
 c00343a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c00343c:	687b      	ldr	r3, [r7, #4]
}
 c00343e:	4618      	mov	r0, r3
 c003440:	370c      	adds	r7, #12
 c003442:	46bd      	mov	sp, r7
 c003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003448:	4770      	bx	lr
 c00344a:	bf00      	nop
 c00344c:	50007000 	.word	0x50007000

0c003450 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c003450:	b580      	push	{r7, lr}
 c003452:	b088      	sub	sp, #32
 c003454:	af00      	add	r7, sp, #0
 c003456:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c003458:	687b      	ldr	r3, [r7, #4]
 c00345a:	2b00      	cmp	r3, #0
 c00345c:	d102      	bne.n	c003464 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c00345e:	2301      	movs	r3, #1
 c003460:	f000 bcc2 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003464:	4b99      	ldr	r3, [pc, #612]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003466:	689b      	ldr	r3, [r3, #8]
 c003468:	f003 030c 	and.w	r3, r3, #12
 c00346c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00346e:	4b97      	ldr	r3, [pc, #604]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003470:	68db      	ldr	r3, [r3, #12]
 c003472:	f003 0303 	and.w	r3, r3, #3
 c003476:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c003478:	687b      	ldr	r3, [r7, #4]
 c00347a:	681b      	ldr	r3, [r3, #0]
 c00347c:	f003 0310 	and.w	r3, r3, #16
 c003480:	2b00      	cmp	r3, #0
 c003482:	f000 80e9 	beq.w	c003658 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003486:	69bb      	ldr	r3, [r7, #24]
 c003488:	2b00      	cmp	r3, #0
 c00348a:	d006      	beq.n	c00349a <HAL_RCC_OscConfig+0x4a>
 c00348c:	69bb      	ldr	r3, [r7, #24]
 c00348e:	2b0c      	cmp	r3, #12
 c003490:	f040 8083 	bne.w	c00359a <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c003494:	697b      	ldr	r3, [r7, #20]
 c003496:	2b01      	cmp	r3, #1
 c003498:	d17f      	bne.n	c00359a <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c00349a:	4b8c      	ldr	r3, [pc, #560]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00349c:	681b      	ldr	r3, [r3, #0]
 c00349e:	f003 0302 	and.w	r3, r3, #2
 c0034a2:	2b00      	cmp	r3, #0
 c0034a4:	d006      	beq.n	c0034b4 <HAL_RCC_OscConfig+0x64>
 c0034a6:	687b      	ldr	r3, [r7, #4]
 c0034a8:	69db      	ldr	r3, [r3, #28]
 c0034aa:	2b00      	cmp	r3, #0
 c0034ac:	d102      	bne.n	c0034b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c0034ae:	2301      	movs	r3, #1
 c0034b0:	f000 bc9a 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0034b4:	687b      	ldr	r3, [r7, #4]
 c0034b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0034b8:	4b84      	ldr	r3, [pc, #528]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0034ba:	681b      	ldr	r3, [r3, #0]
 c0034bc:	f003 0308 	and.w	r3, r3, #8
 c0034c0:	2b00      	cmp	r3, #0
 c0034c2:	d004      	beq.n	c0034ce <HAL_RCC_OscConfig+0x7e>
 c0034c4:	4b81      	ldr	r3, [pc, #516]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0034c6:	681b      	ldr	r3, [r3, #0]
 c0034c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0034cc:	e005      	b.n	c0034da <HAL_RCC_OscConfig+0x8a>
 c0034ce:	4b7f      	ldr	r3, [pc, #508]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0034d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034d4:	091b      	lsrs	r3, r3, #4
 c0034d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0034da:	4293      	cmp	r3, r2
 c0034dc:	d224      	bcs.n	c003528 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0034de:	687b      	ldr	r3, [r7, #4]
 c0034e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0034e2:	4618      	mov	r0, r3
 c0034e4:	f000 fe9c 	bl	c004220 <RCC_SetFlashLatencyFromMSIRange>
 c0034e8:	4603      	mov	r3, r0
 c0034ea:	2b00      	cmp	r3, #0
 c0034ec:	d002      	beq.n	c0034f4 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c0034ee:	2301      	movs	r3, #1
 c0034f0:	f000 bc7a 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0034f4:	4b75      	ldr	r3, [pc, #468]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0034f6:	681b      	ldr	r3, [r3, #0]
 c0034f8:	4a74      	ldr	r2, [pc, #464]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0034fa:	f043 0308 	orr.w	r3, r3, #8
 c0034fe:	6013      	str	r3, [r2, #0]
 c003500:	4b72      	ldr	r3, [pc, #456]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003502:	681b      	ldr	r3, [r3, #0]
 c003504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003508:	687b      	ldr	r3, [r7, #4]
 c00350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00350c:	496f      	ldr	r1, [pc, #444]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00350e:	4313      	orrs	r3, r2
 c003510:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003512:	4b6e      	ldr	r3, [pc, #440]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003514:	685b      	ldr	r3, [r3, #4]
 c003516:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00351a:	687b      	ldr	r3, [r7, #4]
 c00351c:	6a1b      	ldr	r3, [r3, #32]
 c00351e:	021b      	lsls	r3, r3, #8
 c003520:	496a      	ldr	r1, [pc, #424]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003522:	4313      	orrs	r3, r2
 c003524:	604b      	str	r3, [r1, #4]
 c003526:	e026      	b.n	c003576 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c003528:	4b68      	ldr	r3, [pc, #416]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00352a:	681b      	ldr	r3, [r3, #0]
 c00352c:	4a67      	ldr	r2, [pc, #412]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00352e:	f043 0308 	orr.w	r3, r3, #8
 c003532:	6013      	str	r3, [r2, #0]
 c003534:	4b65      	ldr	r3, [pc, #404]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003536:	681b      	ldr	r3, [r3, #0]
 c003538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00353c:	687b      	ldr	r3, [r7, #4]
 c00353e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003540:	4962      	ldr	r1, [pc, #392]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003542:	4313      	orrs	r3, r2
 c003544:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003546:	4b61      	ldr	r3, [pc, #388]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003548:	685b      	ldr	r3, [r3, #4]
 c00354a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00354e:	687b      	ldr	r3, [r7, #4]
 c003550:	6a1b      	ldr	r3, [r3, #32]
 c003552:	021b      	lsls	r3, r3, #8
 c003554:	495d      	ldr	r1, [pc, #372]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003556:	4313      	orrs	r3, r2
 c003558:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00355a:	69bb      	ldr	r3, [r7, #24]
 c00355c:	2b00      	cmp	r3, #0
 c00355e:	d10a      	bne.n	c003576 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c003560:	687b      	ldr	r3, [r7, #4]
 c003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003564:	4618      	mov	r0, r3
 c003566:	f000 fe5b 	bl	c004220 <RCC_SetFlashLatencyFromMSIRange>
 c00356a:	4603      	mov	r3, r0
 c00356c:	2b00      	cmp	r3, #0
 c00356e:	d002      	beq.n	c003576 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c003570:	2301      	movs	r3, #1
 c003572:	f000 bc39 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003576:	f000 fe17 	bl	c0041a8 <HAL_RCC_GetHCLKFreq>
 c00357a:	4603      	mov	r3, r0
 c00357c:	4a54      	ldr	r2, [pc, #336]	; (c0036d0 <HAL_RCC_OscConfig+0x280>)
 c00357e:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c003580:	4b54      	ldr	r3, [pc, #336]	; (c0036d4 <HAL_RCC_OscConfig+0x284>)
 c003582:	681b      	ldr	r3, [r3, #0]
 c003584:	4618      	mov	r0, r3
 c003586:	f7fe fe4d 	bl	c002224 <HAL_InitTick>
 c00358a:	4603      	mov	r3, r0
 c00358c:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c00358e:	7bfb      	ldrb	r3, [r7, #15]
 c003590:	2b00      	cmp	r3, #0
 c003592:	d060      	beq.n	c003656 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c003594:	7bfb      	ldrb	r3, [r7, #15]
 c003596:	f000 bc27 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c00359a:	687b      	ldr	r3, [r7, #4]
 c00359c:	69db      	ldr	r3, [r3, #28]
 c00359e:	2b00      	cmp	r3, #0
 c0035a0:	d039      	beq.n	c003616 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c0035a2:	4b4a      	ldr	r3, [pc, #296]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035a4:	681b      	ldr	r3, [r3, #0]
 c0035a6:	4a49      	ldr	r2, [pc, #292]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035a8:	f043 0301 	orr.w	r3, r3, #1
 c0035ac:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0035ae:	f7fe fe89 	bl	c0022c4 <HAL_GetTick>
 c0035b2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0035b4:	e00f      	b.n	c0035d6 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0035b6:	f7fe fe85 	bl	c0022c4 <HAL_GetTick>
 c0035ba:	4602      	mov	r2, r0
 c0035bc:	693b      	ldr	r3, [r7, #16]
 c0035be:	1ad3      	subs	r3, r2, r3
 c0035c0:	2b02      	cmp	r3, #2
 c0035c2:	d908      	bls.n	c0035d6 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0035c4:	4b41      	ldr	r3, [pc, #260]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035c6:	681b      	ldr	r3, [r3, #0]
 c0035c8:	f003 0302 	and.w	r3, r3, #2
 c0035cc:	2b00      	cmp	r3, #0
 c0035ce:	d102      	bne.n	c0035d6 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c0035d0:	2303      	movs	r3, #3
 c0035d2:	f000 bc09 	b.w	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0035d6:	4b3d      	ldr	r3, [pc, #244]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035d8:	681b      	ldr	r3, [r3, #0]
 c0035da:	f003 0302 	and.w	r3, r3, #2
 c0035de:	2b00      	cmp	r3, #0
 c0035e0:	d0e9      	beq.n	c0035b6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0035e2:	4b3a      	ldr	r3, [pc, #232]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035e4:	681b      	ldr	r3, [r3, #0]
 c0035e6:	4a39      	ldr	r2, [pc, #228]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035e8:	f043 0308 	orr.w	r3, r3, #8
 c0035ec:	6013      	str	r3, [r2, #0]
 c0035ee:	4b37      	ldr	r3, [pc, #220]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035f0:	681b      	ldr	r3, [r3, #0]
 c0035f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0035f6:	687b      	ldr	r3, [r7, #4]
 c0035f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0035fa:	4934      	ldr	r1, [pc, #208]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0035fc:	4313      	orrs	r3, r2
 c0035fe:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c003600:	4b32      	ldr	r3, [pc, #200]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003602:	685b      	ldr	r3, [r3, #4]
 c003604:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c003608:	687b      	ldr	r3, [r7, #4]
 c00360a:	6a1b      	ldr	r3, [r3, #32]
 c00360c:	021b      	lsls	r3, r3, #8
 c00360e:	492f      	ldr	r1, [pc, #188]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003610:	4313      	orrs	r3, r2
 c003612:	604b      	str	r3, [r1, #4]
 c003614:	e020      	b.n	c003658 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c003616:	4b2d      	ldr	r3, [pc, #180]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003618:	681b      	ldr	r3, [r3, #0]
 c00361a:	4a2c      	ldr	r2, [pc, #176]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00361c:	f023 0301 	bic.w	r3, r3, #1
 c003620:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c003622:	f7fe fe4f 	bl	c0022c4 <HAL_GetTick>
 c003626:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003628:	e00e      	b.n	c003648 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00362a:	f7fe fe4b 	bl	c0022c4 <HAL_GetTick>
 c00362e:	4602      	mov	r2, r0
 c003630:	693b      	ldr	r3, [r7, #16]
 c003632:	1ad3      	subs	r3, r2, r3
 c003634:	2b02      	cmp	r3, #2
 c003636:	d907      	bls.n	c003648 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003638:	4b24      	ldr	r3, [pc, #144]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00363a:	681b      	ldr	r3, [r3, #0]
 c00363c:	f003 0302 	and.w	r3, r3, #2
 c003640:	2b00      	cmp	r3, #0
 c003642:	d001      	beq.n	c003648 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c003644:	2303      	movs	r3, #3
 c003646:	e3cf      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c003648:	4b20      	ldr	r3, [pc, #128]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00364a:	681b      	ldr	r3, [r3, #0]
 c00364c:	f003 0302 	and.w	r3, r3, #2
 c003650:	2b00      	cmp	r3, #0
 c003652:	d1ea      	bne.n	c00362a <HAL_RCC_OscConfig+0x1da>
 c003654:	e000      	b.n	c003658 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c003656:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c003658:	687b      	ldr	r3, [r7, #4]
 c00365a:	681b      	ldr	r3, [r3, #0]
 c00365c:	f003 0301 	and.w	r3, r3, #1
 c003660:	2b00      	cmp	r3, #0
 c003662:	d07e      	beq.n	c003762 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003664:	69bb      	ldr	r3, [r7, #24]
 c003666:	2b08      	cmp	r3, #8
 c003668:	d005      	beq.n	c003676 <HAL_RCC_OscConfig+0x226>
 c00366a:	69bb      	ldr	r3, [r7, #24]
 c00366c:	2b0c      	cmp	r3, #12
 c00366e:	d10e      	bne.n	c00368e <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c003670:	697b      	ldr	r3, [r7, #20]
 c003672:	2b03      	cmp	r3, #3
 c003674:	d10b      	bne.n	c00368e <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003676:	4b15      	ldr	r3, [pc, #84]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c003678:	681b      	ldr	r3, [r3, #0]
 c00367a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00367e:	2b00      	cmp	r3, #0
 c003680:	d06e      	beq.n	c003760 <HAL_RCC_OscConfig+0x310>
 c003682:	687b      	ldr	r3, [r7, #4]
 c003684:	685b      	ldr	r3, [r3, #4]
 c003686:	2b00      	cmp	r3, #0
 c003688:	d16a      	bne.n	c003760 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c00368a:	2301      	movs	r3, #1
 c00368c:	e3ac      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c00368e:	687b      	ldr	r3, [r7, #4]
 c003690:	685b      	ldr	r3, [r3, #4]
 c003692:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c003696:	d106      	bne.n	c0036a6 <HAL_RCC_OscConfig+0x256>
 c003698:	4b0c      	ldr	r3, [pc, #48]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00369a:	681b      	ldr	r3, [r3, #0]
 c00369c:	4a0b      	ldr	r2, [pc, #44]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c00369e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036a2:	6013      	str	r3, [r2, #0]
 c0036a4:	e024      	b.n	c0036f0 <HAL_RCC_OscConfig+0x2a0>
 c0036a6:	687b      	ldr	r3, [r7, #4]
 c0036a8:	685b      	ldr	r3, [r3, #4]
 c0036aa:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c0036ae:	d113      	bne.n	c0036d8 <HAL_RCC_OscConfig+0x288>
 c0036b0:	4b06      	ldr	r3, [pc, #24]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0036b2:	681b      	ldr	r3, [r3, #0]
 c0036b4:	4a05      	ldr	r2, [pc, #20]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0036b6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0036ba:	6013      	str	r3, [r2, #0]
 c0036bc:	4b03      	ldr	r3, [pc, #12]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0036be:	681b      	ldr	r3, [r3, #0]
 c0036c0:	4a02      	ldr	r2, [pc, #8]	; (c0036cc <HAL_RCC_OscConfig+0x27c>)
 c0036c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036c6:	6013      	str	r3, [r2, #0]
 c0036c8:	e012      	b.n	c0036f0 <HAL_RCC_OscConfig+0x2a0>
 c0036ca:	bf00      	nop
 c0036cc:	50021000 	.word	0x50021000
 c0036d0:	30000038 	.word	0x30000038
 c0036d4:	3000003c 	.word	0x3000003c
 c0036d8:	4b8b      	ldr	r3, [pc, #556]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0036da:	681b      	ldr	r3, [r3, #0]
 c0036dc:	4a8a      	ldr	r2, [pc, #552]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0036de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0036e2:	6013      	str	r3, [r2, #0]
 c0036e4:	4b88      	ldr	r3, [pc, #544]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0036e6:	681b      	ldr	r3, [r3, #0]
 c0036e8:	4a87      	ldr	r2, [pc, #540]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0036ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c0036ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c0036f0:	687b      	ldr	r3, [r7, #4]
 c0036f2:	685b      	ldr	r3, [r3, #4]
 c0036f4:	2b00      	cmp	r3, #0
 c0036f6:	d019      	beq.n	c00372c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0036f8:	f7fe fde4 	bl	c0022c4 <HAL_GetTick>
 c0036fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0036fe:	e00e      	b.n	c00371e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c003700:	f7fe fde0 	bl	c0022c4 <HAL_GetTick>
 c003704:	4602      	mov	r2, r0
 c003706:	693b      	ldr	r3, [r7, #16]
 c003708:	1ad3      	subs	r3, r2, r3
 c00370a:	2b64      	cmp	r3, #100	; 0x64
 c00370c:	d907      	bls.n	c00371e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00370e:	4b7e      	ldr	r3, [pc, #504]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003710:	681b      	ldr	r3, [r3, #0]
 c003712:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003716:	2b00      	cmp	r3, #0
 c003718:	d101      	bne.n	c00371e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c00371a:	2303      	movs	r3, #3
 c00371c:	e364      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00371e:	4b7a      	ldr	r3, [pc, #488]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003720:	681b      	ldr	r3, [r3, #0]
 c003722:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003726:	2b00      	cmp	r3, #0
 c003728:	d0ea      	beq.n	c003700 <HAL_RCC_OscConfig+0x2b0>
 c00372a:	e01a      	b.n	c003762 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00372c:	f7fe fdca 	bl	c0022c4 <HAL_GetTick>
 c003730:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003732:	e00e      	b.n	c003752 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c003734:	f7fe fdc6 	bl	c0022c4 <HAL_GetTick>
 c003738:	4602      	mov	r2, r0
 c00373a:	693b      	ldr	r3, [r7, #16]
 c00373c:	1ad3      	subs	r3, r2, r3
 c00373e:	2b64      	cmp	r3, #100	; 0x64
 c003740:	d907      	bls.n	c003752 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003742:	4b71      	ldr	r3, [pc, #452]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003744:	681b      	ldr	r3, [r3, #0]
 c003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00374a:	2b00      	cmp	r3, #0
 c00374c:	d001      	beq.n	c003752 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c00374e:	2303      	movs	r3, #3
 c003750:	e34a      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c003752:	4b6d      	ldr	r3, [pc, #436]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003754:	681b      	ldr	r3, [r3, #0]
 c003756:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00375a:	2b00      	cmp	r3, #0
 c00375c:	d1ea      	bne.n	c003734 <HAL_RCC_OscConfig+0x2e4>
 c00375e:	e000      	b.n	c003762 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003760:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c003762:	687b      	ldr	r3, [r7, #4]
 c003764:	681b      	ldr	r3, [r3, #0]
 c003766:	f003 0302 	and.w	r3, r3, #2
 c00376a:	2b00      	cmp	r3, #0
 c00376c:	d06c      	beq.n	c003848 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c00376e:	69bb      	ldr	r3, [r7, #24]
 c003770:	2b04      	cmp	r3, #4
 c003772:	d005      	beq.n	c003780 <HAL_RCC_OscConfig+0x330>
 c003774:	69bb      	ldr	r3, [r7, #24]
 c003776:	2b0c      	cmp	r3, #12
 c003778:	d119      	bne.n	c0037ae <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c00377a:	697b      	ldr	r3, [r7, #20]
 c00377c:	2b02      	cmp	r3, #2
 c00377e:	d116      	bne.n	c0037ae <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c003780:	4b61      	ldr	r3, [pc, #388]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003782:	681b      	ldr	r3, [r3, #0]
 c003784:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003788:	2b00      	cmp	r3, #0
 c00378a:	d005      	beq.n	c003798 <HAL_RCC_OscConfig+0x348>
 c00378c:	687b      	ldr	r3, [r7, #4]
 c00378e:	68db      	ldr	r3, [r3, #12]
 c003790:	2b00      	cmp	r3, #0
 c003792:	d101      	bne.n	c003798 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c003794:	2301      	movs	r3, #1
 c003796:	e327      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c003798:	4b5b      	ldr	r3, [pc, #364]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00379a:	685b      	ldr	r3, [r3, #4]
 c00379c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0037a0:	687b      	ldr	r3, [r7, #4]
 c0037a2:	691b      	ldr	r3, [r3, #16]
 c0037a4:	061b      	lsls	r3, r3, #24
 c0037a6:	4958      	ldr	r1, [pc, #352]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037a8:	4313      	orrs	r3, r2
 c0037aa:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0037ac:	e04c      	b.n	c003848 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0037ae:	687b      	ldr	r3, [r7, #4]
 c0037b0:	68db      	ldr	r3, [r3, #12]
 c0037b2:	2b00      	cmp	r3, #0
 c0037b4:	d029      	beq.n	c00380a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c0037b6:	4b54      	ldr	r3, [pc, #336]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037b8:	681b      	ldr	r3, [r3, #0]
 c0037ba:	4a53      	ldr	r2, [pc, #332]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0037c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0037c2:	f7fe fd7f 	bl	c0022c4 <HAL_GetTick>
 c0037c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037c8:	e00e      	b.n	c0037e8 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0037ca:	f7fe fd7b 	bl	c0022c4 <HAL_GetTick>
 c0037ce:	4602      	mov	r2, r0
 c0037d0:	693b      	ldr	r3, [r7, #16]
 c0037d2:	1ad3      	subs	r3, r2, r3
 c0037d4:	2b02      	cmp	r3, #2
 c0037d6:	d907      	bls.n	c0037e8 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037d8:	4b4b      	ldr	r3, [pc, #300]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037da:	681b      	ldr	r3, [r3, #0]
 c0037dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0037e0:	2b00      	cmp	r3, #0
 c0037e2:	d101      	bne.n	c0037e8 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c0037e4:	2303      	movs	r3, #3
 c0037e6:	e2ff      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c0037e8:	4b47      	ldr	r3, [pc, #284]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037ea:	681b      	ldr	r3, [r3, #0]
 c0037ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0037f0:	2b00      	cmp	r3, #0
 c0037f2:	d0ea      	beq.n	c0037ca <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0037f4:	4b44      	ldr	r3, [pc, #272]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0037f6:	685b      	ldr	r3, [r3, #4]
 c0037f8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0037fc:	687b      	ldr	r3, [r7, #4]
 c0037fe:	691b      	ldr	r3, [r3, #16]
 c003800:	061b      	lsls	r3, r3, #24
 c003802:	4941      	ldr	r1, [pc, #260]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003804:	4313      	orrs	r3, r2
 c003806:	604b      	str	r3, [r1, #4]
 c003808:	e01e      	b.n	c003848 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c00380a:	4b3f      	ldr	r3, [pc, #252]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00380c:	681b      	ldr	r3, [r3, #0]
 c00380e:	4a3e      	ldr	r2, [pc, #248]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003810:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c003814:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003816:	f7fe fd55 	bl	c0022c4 <HAL_GetTick>
 c00381a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00381c:	e00e      	b.n	c00383c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c00381e:	f7fe fd51 	bl	c0022c4 <HAL_GetTick>
 c003822:	4602      	mov	r2, r0
 c003824:	693b      	ldr	r3, [r7, #16]
 c003826:	1ad3      	subs	r3, r2, r3
 c003828:	2b02      	cmp	r3, #2
 c00382a:	d907      	bls.n	c00383c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00382c:	4b36      	ldr	r3, [pc, #216]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00382e:	681b      	ldr	r3, [r3, #0]
 c003830:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003834:	2b00      	cmp	r3, #0
 c003836:	d001      	beq.n	c00383c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c003838:	2303      	movs	r3, #3
 c00383a:	e2d5      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c00383c:	4b32      	ldr	r3, [pc, #200]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00383e:	681b      	ldr	r3, [r3, #0]
 c003840:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003844:	2b00      	cmp	r3, #0
 c003846:	d1ea      	bne.n	c00381e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c003848:	687b      	ldr	r3, [r7, #4]
 c00384a:	681b      	ldr	r3, [r3, #0]
 c00384c:	f003 0308 	and.w	r3, r3, #8
 c003850:	2b00      	cmp	r3, #0
 c003852:	d062      	beq.n	c00391a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c003854:	687b      	ldr	r3, [r7, #4]
 c003856:	695b      	ldr	r3, [r3, #20]
 c003858:	2b00      	cmp	r3, #0
 c00385a:	d038      	beq.n	c0038ce <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c00385c:	687b      	ldr	r3, [r7, #4]
 c00385e:	699b      	ldr	r3, [r3, #24]
 c003860:	2b00      	cmp	r3, #0
 c003862:	d108      	bne.n	c003876 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003864:	4b28      	ldr	r3, [pc, #160]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003866:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00386a:	4a27      	ldr	r2, [pc, #156]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00386c:	f023 0310 	bic.w	r3, r3, #16
 c003870:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c003874:	e007      	b.n	c003886 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003876:	4b24      	ldr	r3, [pc, #144]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003878:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00387c:	4a22      	ldr	r2, [pc, #136]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00387e:	f043 0310 	orr.w	r3, r3, #16
 c003882:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c003886:	4b20      	ldr	r3, [pc, #128]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c003888:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00388c:	4a1e      	ldr	r2, [pc, #120]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c00388e:	f043 0301 	orr.w	r3, r3, #1
 c003892:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003896:	f7fe fd15 	bl	c0022c4 <HAL_GetTick>
 c00389a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00389c:	e00f      	b.n	c0038be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00389e:	f7fe fd11 	bl	c0022c4 <HAL_GetTick>
 c0038a2:	4602      	mov	r2, r0
 c0038a4:	693b      	ldr	r3, [r7, #16]
 c0038a6:	1ad3      	subs	r3, r2, r3
 c0038a8:	2b07      	cmp	r3, #7
 c0038aa:	d908      	bls.n	c0038be <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0038ac:	4b16      	ldr	r3, [pc, #88]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0038ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0038b2:	f003 0302 	and.w	r3, r3, #2
 c0038b6:	2b00      	cmp	r3, #0
 c0038b8:	d101      	bne.n	c0038be <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c0038ba:	2303      	movs	r3, #3
 c0038bc:	e294      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c0038be:	4b12      	ldr	r3, [pc, #72]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0038c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0038c4:	f003 0302 	and.w	r3, r3, #2
 c0038c8:	2b00      	cmp	r3, #0
 c0038ca:	d0e8      	beq.n	c00389e <HAL_RCC_OscConfig+0x44e>
 c0038cc:	e025      	b.n	c00391a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c0038ce:	4b0e      	ldr	r3, [pc, #56]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0038d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0038d4:	4a0c      	ldr	r2, [pc, #48]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0038d6:	f023 0301 	bic.w	r3, r3, #1
 c0038da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0038de:	f7fe fcf1 	bl	c0022c4 <HAL_GetTick>
 c0038e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0038e4:	e012      	b.n	c00390c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c0038e6:	f7fe fced 	bl	c0022c4 <HAL_GetTick>
 c0038ea:	4602      	mov	r2, r0
 c0038ec:	693b      	ldr	r3, [r7, #16]
 c0038ee:	1ad3      	subs	r3, r2, r3
 c0038f0:	2b07      	cmp	r3, #7
 c0038f2:	d90b      	bls.n	c00390c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0038f4:	4b04      	ldr	r3, [pc, #16]	; (c003908 <HAL_RCC_OscConfig+0x4b8>)
 c0038f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0038fa:	f003 0302 	and.w	r3, r3, #2
 c0038fe:	2b00      	cmp	r3, #0
 c003900:	d004      	beq.n	c00390c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c003902:	2303      	movs	r3, #3
 c003904:	e270      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
 c003906:	bf00      	nop
 c003908:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c00390c:	4ba8      	ldr	r3, [pc, #672]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c00390e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003912:	f003 0302 	and.w	r3, r3, #2
 c003916:	2b00      	cmp	r3, #0
 c003918:	d1e5      	bne.n	c0038e6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c00391a:	687b      	ldr	r3, [r7, #4]
 c00391c:	681b      	ldr	r3, [r3, #0]
 c00391e:	f003 0304 	and.w	r3, r3, #4
 c003922:	2b00      	cmp	r3, #0
 c003924:	f000 812d 	beq.w	c003b82 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c003928:	2300      	movs	r3, #0
 c00392a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c00392c:	4ba0      	ldr	r3, [pc, #640]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c00392e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003930:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003934:	2b00      	cmp	r3, #0
 c003936:	d10d      	bne.n	c003954 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c003938:	4b9d      	ldr	r3, [pc, #628]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c00393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00393c:	4a9c      	ldr	r2, [pc, #624]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c00393e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003942:	6593      	str	r3, [r2, #88]	; 0x58
 c003944:	4b9a      	ldr	r3, [pc, #616]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003946:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003948:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00394c:	60bb      	str	r3, [r7, #8]
 c00394e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c003950:	2301      	movs	r3, #1
 c003952:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003954:	4b97      	ldr	r3, [pc, #604]	; (c003bb4 <HAL_RCC_OscConfig+0x764>)
 c003956:	681b      	ldr	r3, [r3, #0]
 c003958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00395c:	2b00      	cmp	r3, #0
 c00395e:	d11e      	bne.n	c00399e <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003960:	4b94      	ldr	r3, [pc, #592]	; (c003bb4 <HAL_RCC_OscConfig+0x764>)
 c003962:	681b      	ldr	r3, [r3, #0]
 c003964:	4a93      	ldr	r2, [pc, #588]	; (c003bb4 <HAL_RCC_OscConfig+0x764>)
 c003966:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00396a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c00396c:	f7fe fcaa 	bl	c0022c4 <HAL_GetTick>
 c003970:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003972:	e00e      	b.n	c003992 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003974:	f7fe fca6 	bl	c0022c4 <HAL_GetTick>
 c003978:	4602      	mov	r2, r0
 c00397a:	693b      	ldr	r3, [r7, #16]
 c00397c:	1ad3      	subs	r3, r2, r3
 c00397e:	2b02      	cmp	r3, #2
 c003980:	d907      	bls.n	c003992 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003982:	4b8c      	ldr	r3, [pc, #560]	; (c003bb4 <HAL_RCC_OscConfig+0x764>)
 c003984:	681b      	ldr	r3, [r3, #0]
 c003986:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00398a:	2b00      	cmp	r3, #0
 c00398c:	d101      	bne.n	c003992 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c00398e:	2303      	movs	r3, #3
 c003990:	e22a      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c003992:	4b88      	ldr	r3, [pc, #544]	; (c003bb4 <HAL_RCC_OscConfig+0x764>)
 c003994:	681b      	ldr	r3, [r3, #0]
 c003996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00399a:	2b00      	cmp	r3, #0
 c00399c:	d0ea      	beq.n	c003974 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00399e:	687b      	ldr	r3, [r7, #4]
 c0039a0:	689b      	ldr	r3, [r3, #8]
 c0039a2:	f003 0301 	and.w	r3, r3, #1
 c0039a6:	2b00      	cmp	r3, #0
 c0039a8:	d01f      	beq.n	c0039ea <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c0039aa:	687b      	ldr	r3, [r7, #4]
 c0039ac:	689b      	ldr	r3, [r3, #8]
 c0039ae:	f003 0304 	and.w	r3, r3, #4
 c0039b2:	2b00      	cmp	r3, #0
 c0039b4:	d010      	beq.n	c0039d8 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0039b6:	4b7e      	ldr	r3, [pc, #504]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0039bc:	4a7c      	ldr	r2, [pc, #496]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039be:	f043 0304 	orr.w	r3, r3, #4
 c0039c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0039c6:	4b7a      	ldr	r3, [pc, #488]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0039cc:	4a78      	ldr	r2, [pc, #480]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039ce:	f043 0301 	orr.w	r3, r3, #1
 c0039d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0039d6:	e018      	b.n	c003a0a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0039d8:	4b75      	ldr	r3, [pc, #468]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0039de:	4a74      	ldr	r2, [pc, #464]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039e0:	f043 0301 	orr.w	r3, r3, #1
 c0039e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c0039e8:	e00f      	b.n	c003a0a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c0039ea:	4b71      	ldr	r3, [pc, #452]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0039f0:	4a6f      	ldr	r2, [pc, #444]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039f2:	f023 0301 	bic.w	r3, r3, #1
 c0039f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c0039fa:	4b6d      	ldr	r3, [pc, #436]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c0039fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a00:	4a6b      	ldr	r2, [pc, #428]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a02:	f023 0304 	bic.w	r3, r3, #4
 c003a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c003a0a:	687b      	ldr	r3, [r7, #4]
 c003a0c:	689b      	ldr	r3, [r3, #8]
 c003a0e:	2b00      	cmp	r3, #0
 c003a10:	d068      	beq.n	c003ae4 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003a12:	f7fe fc57 	bl	c0022c4 <HAL_GetTick>
 c003a16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a18:	e011      	b.n	c003a3e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003a1a:	f7fe fc53 	bl	c0022c4 <HAL_GetTick>
 c003a1e:	4602      	mov	r2, r0
 c003a20:	693b      	ldr	r3, [r7, #16]
 c003a22:	1ad3      	subs	r3, r2, r3
 c003a24:	f241 3288 	movw	r2, #5000	; 0x1388
 c003a28:	4293      	cmp	r3, r2
 c003a2a:	d908      	bls.n	c003a3e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a2c:	4b60      	ldr	r3, [pc, #384]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a32:	f003 0302 	and.w	r3, r3, #2
 c003a36:	2b00      	cmp	r3, #0
 c003a38:	d101      	bne.n	c003a3e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c003a3a:	2303      	movs	r3, #3
 c003a3c:	e1d4      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003a3e:	4b5c      	ldr	r3, [pc, #368]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a44:	f003 0302 	and.w	r3, r3, #2
 c003a48:	2b00      	cmp	r3, #0
 c003a4a:	d0e6      	beq.n	c003a1a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c003a4c:	687b      	ldr	r3, [r7, #4]
 c003a4e:	689b      	ldr	r3, [r3, #8]
 c003a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003a54:	2b00      	cmp	r3, #0
 c003a56:	d022      	beq.n	c003a9e <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003a58:	4b55      	ldr	r3, [pc, #340]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a5e:	4a54      	ldr	r2, [pc, #336]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003a64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003a68:	e011      	b.n	c003a8e <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003a6a:	f7fe fc2b 	bl	c0022c4 <HAL_GetTick>
 c003a6e:	4602      	mov	r2, r0
 c003a70:	693b      	ldr	r3, [r7, #16]
 c003a72:	1ad3      	subs	r3, r2, r3
 c003a74:	f241 3288 	movw	r2, #5000	; 0x1388
 c003a78:	4293      	cmp	r3, r2
 c003a7a:	d908      	bls.n	c003a8e <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003a7c:	4b4c      	ldr	r3, [pc, #304]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a82:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003a86:	2b00      	cmp	r3, #0
 c003a88:	d101      	bne.n	c003a8e <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c003a8a:	2303      	movs	r3, #3
 c003a8c:	e1ac      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003a8e:	4b48      	ldr	r3, [pc, #288]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003a90:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003a98:	2b00      	cmp	r3, #0
 c003a9a:	d0e6      	beq.n	c003a6a <HAL_RCC_OscConfig+0x61a>
 c003a9c:	e068      	b.n	c003b70 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003a9e:	4b44      	ldr	r3, [pc, #272]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003aa0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003aa4:	4a42      	ldr	r2, [pc, #264]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003aa6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003aaa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003aae:	e011      	b.n	c003ad4 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003ab0:	f7fe fc08 	bl	c0022c4 <HAL_GetTick>
 c003ab4:	4602      	mov	r2, r0
 c003ab6:	693b      	ldr	r3, [r7, #16]
 c003ab8:	1ad3      	subs	r3, r2, r3
 c003aba:	f241 3288 	movw	r2, #5000	; 0x1388
 c003abe:	4293      	cmp	r3, r2
 c003ac0:	d908      	bls.n	c003ad4 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003ac2:	4b3b      	ldr	r3, [pc, #236]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003ac8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003acc:	2b00      	cmp	r3, #0
 c003ace:	d001      	beq.n	c003ad4 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c003ad0:	2303      	movs	r3, #3
 c003ad2:	e189      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003ad4:	4b36      	ldr	r3, [pc, #216]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003ada:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003ade:	2b00      	cmp	r3, #0
 c003ae0:	d1e6      	bne.n	c003ab0 <HAL_RCC_OscConfig+0x660>
 c003ae2:	e045      	b.n	c003b70 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003ae4:	f7fe fbee 	bl	c0022c4 <HAL_GetTick>
 c003ae8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003aea:	e011      	b.n	c003b10 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003aec:	f7fe fbea 	bl	c0022c4 <HAL_GetTick>
 c003af0:	4602      	mov	r2, r0
 c003af2:	693b      	ldr	r3, [r7, #16]
 c003af4:	1ad3      	subs	r3, r2, r3
 c003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 c003afa:	4293      	cmp	r3, r2
 c003afc:	d908      	bls.n	c003b10 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003afe:	4b2c      	ldr	r3, [pc, #176]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b04:	f003 0302 	and.w	r3, r3, #2
 c003b08:	2b00      	cmp	r3, #0
 c003b0a:	d001      	beq.n	c003b10 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c003b0c:	2303      	movs	r3, #3
 c003b0e:	e16b      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003b10:	4b27      	ldr	r3, [pc, #156]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b16:	f003 0302 	and.w	r3, r3, #2
 c003b1a:	2b00      	cmp	r3, #0
 c003b1c:	d1e6      	bne.n	c003aec <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c003b1e:	4b24      	ldr	r3, [pc, #144]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003b28:	2b00      	cmp	r3, #0
 c003b2a:	d021      	beq.n	c003b70 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c003b2c:	4b20      	ldr	r3, [pc, #128]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b32:	4a1f      	ldr	r2, [pc, #124]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003b38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003b3c:	e011      	b.n	c003b62 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003b3e:	f7fe fbc1 	bl	c0022c4 <HAL_GetTick>
 c003b42:	4602      	mov	r2, r0
 c003b44:	693b      	ldr	r3, [r7, #16]
 c003b46:	1ad3      	subs	r3, r2, r3
 c003b48:	f241 3288 	movw	r2, #5000	; 0x1388
 c003b4c:	4293      	cmp	r3, r2
 c003b4e:	d908      	bls.n	c003b62 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003b50:	4b17      	ldr	r3, [pc, #92]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b56:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003b5a:	2b00      	cmp	r3, #0
 c003b5c:	d001      	beq.n	c003b62 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c003b5e:	2303      	movs	r3, #3
 c003b60:	e142      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003b62:	4b13      	ldr	r3, [pc, #76]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003b68:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003b6c:	2b00      	cmp	r3, #0
 c003b6e:	d1e6      	bne.n	c003b3e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003b70:	7ffb      	ldrb	r3, [r7, #31]
 c003b72:	2b01      	cmp	r3, #1
 c003b74:	d105      	bne.n	c003b82 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003b76:	4b0e      	ldr	r3, [pc, #56]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003b7a:	4a0d      	ldr	r2, [pc, #52]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003b80:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c003b82:	687b      	ldr	r3, [r7, #4]
 c003b84:	681b      	ldr	r3, [r3, #0]
 c003b86:	f003 0320 	and.w	r3, r3, #32
 c003b8a:	2b00      	cmp	r3, #0
 c003b8c:	d04f      	beq.n	c003c2e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c003b8e:	687b      	ldr	r3, [r7, #4]
 c003b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c003b92:	2b00      	cmp	r3, #0
 c003b94:	d028      	beq.n	c003be8 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c003b96:	4b06      	ldr	r3, [pc, #24]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b98:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003b9c:	4a04      	ldr	r2, [pc, #16]	; (c003bb0 <HAL_RCC_OscConfig+0x760>)
 c003b9e:	f043 0301 	orr.w	r3, r3, #1
 c003ba2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003ba6:	f7fe fb8d 	bl	c0022c4 <HAL_GetTick>
 c003baa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003bac:	e014      	b.n	c003bd8 <HAL_RCC_OscConfig+0x788>
 c003bae:	bf00      	nop
 c003bb0:	50021000 	.word	0x50021000
 c003bb4:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003bb8:	f7fe fb84 	bl	c0022c4 <HAL_GetTick>
 c003bbc:	4602      	mov	r2, r0
 c003bbe:	693b      	ldr	r3, [r7, #16]
 c003bc0:	1ad3      	subs	r3, r2, r3
 c003bc2:	2b02      	cmp	r3, #2
 c003bc4:	d908      	bls.n	c003bd8 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003bc6:	4b8a      	ldr	r3, [pc, #552]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003bc8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003bcc:	f003 0302 	and.w	r3, r3, #2
 c003bd0:	2b00      	cmp	r3, #0
 c003bd2:	d101      	bne.n	c003bd8 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c003bd4:	2303      	movs	r3, #3
 c003bd6:	e107      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003bd8:	4b85      	ldr	r3, [pc, #532]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003bda:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003bde:	f003 0302 	and.w	r3, r3, #2
 c003be2:	2b00      	cmp	r3, #0
 c003be4:	d0e8      	beq.n	c003bb8 <HAL_RCC_OscConfig+0x768>
 c003be6:	e022      	b.n	c003c2e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c003be8:	4b81      	ldr	r3, [pc, #516]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003bea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003bee:	4a80      	ldr	r2, [pc, #512]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003bf0:	f023 0301 	bic.w	r3, r3, #1
 c003bf4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003bf8:	f7fe fb64 	bl	c0022c4 <HAL_GetTick>
 c003bfc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003bfe:	e00f      	b.n	c003c20 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003c00:	f7fe fb60 	bl	c0022c4 <HAL_GetTick>
 c003c04:	4602      	mov	r2, r0
 c003c06:	693b      	ldr	r3, [r7, #16]
 c003c08:	1ad3      	subs	r3, r2, r3
 c003c0a:	2b02      	cmp	r3, #2
 c003c0c:	d908      	bls.n	c003c20 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003c0e:	4b78      	ldr	r3, [pc, #480]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c10:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003c14:	f003 0302 	and.w	r3, r3, #2
 c003c18:	2b00      	cmp	r3, #0
 c003c1a:	d001      	beq.n	c003c20 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c003c1c:	2303      	movs	r3, #3
 c003c1e:	e0e3      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c003c20:	4b73      	ldr	r3, [pc, #460]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c22:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003c26:	f003 0302 	and.w	r3, r3, #2
 c003c2a:	2b00      	cmp	r3, #0
 c003c2c:	d1e8      	bne.n	c003c00 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c003c2e:	687b      	ldr	r3, [r7, #4]
 c003c30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003c32:	2b00      	cmp	r3, #0
 c003c34:	f000 80d7 	beq.w	c003de6 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003c38:	4b6d      	ldr	r3, [pc, #436]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c3a:	689b      	ldr	r3, [r3, #8]
 c003c3c:	f003 030c 	and.w	r3, r3, #12
 c003c40:	2b0c      	cmp	r3, #12
 c003c42:	f000 8091 	beq.w	c003d68 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c003c46:	687b      	ldr	r3, [r7, #4]
 c003c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003c4a:	2b02      	cmp	r3, #2
 c003c4c:	d166      	bne.n	c003d1c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c003c4e:	4b68      	ldr	r3, [pc, #416]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c50:	681b      	ldr	r3, [r3, #0]
 c003c52:	4a67      	ldr	r2, [pc, #412]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c54:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003c58:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003c5a:	f7fe fb33 	bl	c0022c4 <HAL_GetTick>
 c003c5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003c60:	e00e      	b.n	c003c80 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003c62:	f7fe fb2f 	bl	c0022c4 <HAL_GetTick>
 c003c66:	4602      	mov	r2, r0
 c003c68:	693b      	ldr	r3, [r7, #16]
 c003c6a:	1ad3      	subs	r3, r2, r3
 c003c6c:	2b02      	cmp	r3, #2
 c003c6e:	d907      	bls.n	c003c80 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003c70:	4b5f      	ldr	r3, [pc, #380]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c72:	681b      	ldr	r3, [r3, #0]
 c003c74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003c78:	2b00      	cmp	r3, #0
 c003c7a:	d001      	beq.n	c003c80 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c003c7c:	2303      	movs	r3, #3
 c003c7e:	e0b3      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003c80:	4b5b      	ldr	r3, [pc, #364]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c82:	681b      	ldr	r3, [r3, #0]
 c003c84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003c88:	2b00      	cmp	r3, #0
 c003c8a:	d1ea      	bne.n	c003c62 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c003c8c:	4b58      	ldr	r3, [pc, #352]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003c8e:	68da      	ldr	r2, [r3, #12]
 c003c90:	4b58      	ldr	r3, [pc, #352]	; (c003df4 <HAL_RCC_OscConfig+0x9a4>)
 c003c92:	4013      	ands	r3, r2
 c003c94:	687a      	ldr	r2, [r7, #4]
 c003c96:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c003c98:	687a      	ldr	r2, [r7, #4]
 c003c9a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c003c9c:	3a01      	subs	r2, #1
 c003c9e:	0112      	lsls	r2, r2, #4
 c003ca0:	4311      	orrs	r1, r2
 c003ca2:	687a      	ldr	r2, [r7, #4]
 c003ca4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c003ca6:	0212      	lsls	r2, r2, #8
 c003ca8:	4311      	orrs	r1, r2
 c003caa:	687a      	ldr	r2, [r7, #4]
 c003cac:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c003cae:	0852      	lsrs	r2, r2, #1
 c003cb0:	3a01      	subs	r2, #1
 c003cb2:	0552      	lsls	r2, r2, #21
 c003cb4:	4311      	orrs	r1, r2
 c003cb6:	687a      	ldr	r2, [r7, #4]
 c003cb8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c003cba:	0852      	lsrs	r2, r2, #1
 c003cbc:	3a01      	subs	r2, #1
 c003cbe:	0652      	lsls	r2, r2, #25
 c003cc0:	4311      	orrs	r1, r2
 c003cc2:	687a      	ldr	r2, [r7, #4]
 c003cc4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c003cc6:	06d2      	lsls	r2, r2, #27
 c003cc8:	430a      	orrs	r2, r1
 c003cca:	4949      	ldr	r1, [pc, #292]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003ccc:	4313      	orrs	r3, r2
 c003cce:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c003cd0:	4b47      	ldr	r3, [pc, #284]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003cd2:	681b      	ldr	r3, [r3, #0]
 c003cd4:	4a46      	ldr	r2, [pc, #280]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003cd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003cda:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c003cdc:	4b44      	ldr	r3, [pc, #272]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003cde:	68db      	ldr	r3, [r3, #12]
 c003ce0:	4a43      	ldr	r2, [pc, #268]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003ce2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003ce6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003ce8:	f7fe faec 	bl	c0022c4 <HAL_GetTick>
 c003cec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003cee:	e00e      	b.n	c003d0e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003cf0:	f7fe fae8 	bl	c0022c4 <HAL_GetTick>
 c003cf4:	4602      	mov	r2, r0
 c003cf6:	693b      	ldr	r3, [r7, #16]
 c003cf8:	1ad3      	subs	r3, r2, r3
 c003cfa:	2b02      	cmp	r3, #2
 c003cfc:	d907      	bls.n	c003d0e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003cfe:	4b3c      	ldr	r3, [pc, #240]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d00:	681b      	ldr	r3, [r3, #0]
 c003d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003d06:	2b00      	cmp	r3, #0
 c003d08:	d101      	bne.n	c003d0e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c003d0a:	2303      	movs	r3, #3
 c003d0c:	e06c      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003d0e:	4b38      	ldr	r3, [pc, #224]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d10:	681b      	ldr	r3, [r3, #0]
 c003d12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003d16:	2b00      	cmp	r3, #0
 c003d18:	d0ea      	beq.n	c003cf0 <HAL_RCC_OscConfig+0x8a0>
 c003d1a:	e064      	b.n	c003de6 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c003d1c:	4b34      	ldr	r3, [pc, #208]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d1e:	681b      	ldr	r3, [r3, #0]
 c003d20:	4a33      	ldr	r2, [pc, #204]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d22:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c003d26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003d28:	f7fe facc 	bl	c0022c4 <HAL_GetTick>
 c003d2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003d2e:	e00e      	b.n	c003d4e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c003d30:	f7fe fac8 	bl	c0022c4 <HAL_GetTick>
 c003d34:	4602      	mov	r2, r0
 c003d36:	693b      	ldr	r3, [r7, #16]
 c003d38:	1ad3      	subs	r3, r2, r3
 c003d3a:	2b02      	cmp	r3, #2
 c003d3c:	d907      	bls.n	c003d4e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003d3e:	4b2c      	ldr	r3, [pc, #176]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d40:	681b      	ldr	r3, [r3, #0]
 c003d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003d46:	2b00      	cmp	r3, #0
 c003d48:	d001      	beq.n	c003d4e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c003d4a:	2303      	movs	r3, #3
 c003d4c:	e04c      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c003d4e:	4b28      	ldr	r3, [pc, #160]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d50:	681b      	ldr	r3, [r3, #0]
 c003d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003d56:	2b00      	cmp	r3, #0
 c003d58:	d1ea      	bne.n	c003d30 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c003d5a:	4b25      	ldr	r3, [pc, #148]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d5c:	68da      	ldr	r2, [r3, #12]
 c003d5e:	4924      	ldr	r1, [pc, #144]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d60:	4b25      	ldr	r3, [pc, #148]	; (c003df8 <HAL_RCC_OscConfig+0x9a8>)
 c003d62:	4013      	ands	r3, r2
 c003d64:	60cb      	str	r3, [r1, #12]
 c003d66:	e03e      	b.n	c003de6 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c003d68:	687b      	ldr	r3, [r7, #4]
 c003d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003d6c:	2b01      	cmp	r3, #1
 c003d6e:	d101      	bne.n	c003d74 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c003d70:	2301      	movs	r3, #1
 c003d72:	e039      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c003d74:	4b1e      	ldr	r3, [pc, #120]	; (c003df0 <HAL_RCC_OscConfig+0x9a0>)
 c003d76:	68db      	ldr	r3, [r3, #12]
 c003d78:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003d7a:	697b      	ldr	r3, [r7, #20]
 c003d7c:	f003 0203 	and.w	r2, r3, #3
 c003d80:	687b      	ldr	r3, [r7, #4]
 c003d82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003d84:	429a      	cmp	r2, r3
 c003d86:	d12c      	bne.n	c003de2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003d88:	697b      	ldr	r3, [r7, #20]
 c003d8a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c003d8e:	687b      	ldr	r3, [r7, #4]
 c003d90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c003d92:	3b01      	subs	r3, #1
 c003d94:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003d96:	429a      	cmp	r2, r3
 c003d98:	d123      	bne.n	c003de2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003d9a:	697b      	ldr	r3, [r7, #20]
 c003d9c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c003da0:	687b      	ldr	r3, [r7, #4]
 c003da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003da4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003da6:	429a      	cmp	r2, r3
 c003da8:	d11b      	bne.n	c003de2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c003daa:	697b      	ldr	r3, [r7, #20]
 c003dac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c003db0:	687b      	ldr	r3, [r7, #4]
 c003db2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003db4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003db6:	429a      	cmp	r2, r3
 c003db8:	d113      	bne.n	c003de2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c003dba:	697b      	ldr	r3, [r7, #20]
 c003dbc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c003dc0:	687b      	ldr	r3, [r7, #4]
 c003dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003dc4:	085b      	lsrs	r3, r3, #1
 c003dc6:	3b01      	subs	r3, #1
 c003dc8:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c003dca:	429a      	cmp	r2, r3
 c003dcc:	d109      	bne.n	c003de2 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c003dce:	697b      	ldr	r3, [r7, #20]
 c003dd0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c003dd4:	687b      	ldr	r3, [r7, #4]
 c003dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003dd8:	085b      	lsrs	r3, r3, #1
 c003dda:	3b01      	subs	r3, #1
 c003ddc:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c003dde:	429a      	cmp	r2, r3
 c003de0:	d001      	beq.n	c003de6 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c003de2:	2301      	movs	r3, #1
 c003de4:	e000      	b.n	c003de8 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c003de6:	2300      	movs	r3, #0
}
 c003de8:	4618      	mov	r0, r3
 c003dea:	3720      	adds	r7, #32
 c003dec:	46bd      	mov	sp, r7
 c003dee:	bd80      	pop	{r7, pc}
 c003df0:	50021000 	.word	0x50021000
 c003df4:	019f800c 	.word	0x019f800c
 c003df8:	feeefffc 	.word	0xfeeefffc

0c003dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c003dfc:	b580      	push	{r7, lr}
 c003dfe:	b086      	sub	sp, #24
 c003e00:	af00      	add	r7, sp, #0
 c003e02:	6078      	str	r0, [r7, #4]
 c003e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c003e06:	2300      	movs	r3, #0
 c003e08:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c003e0a:	687b      	ldr	r3, [r7, #4]
 c003e0c:	2b00      	cmp	r3, #0
 c003e0e:	d101      	bne.n	c003e14 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c003e10:	2301      	movs	r3, #1
 c003e12:	e11c      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003e14:	4b90      	ldr	r3, [pc, #576]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003e16:	681b      	ldr	r3, [r3, #0]
 c003e18:	f003 030f 	and.w	r3, r3, #15
 c003e1c:	683a      	ldr	r2, [r7, #0]
 c003e1e:	429a      	cmp	r2, r3
 c003e20:	d910      	bls.n	c003e44 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003e22:	4b8d      	ldr	r3, [pc, #564]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003e24:	681b      	ldr	r3, [r3, #0]
 c003e26:	f023 020f 	bic.w	r2, r3, #15
 c003e2a:	498b      	ldr	r1, [pc, #556]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003e2c:	683b      	ldr	r3, [r7, #0]
 c003e2e:	4313      	orrs	r3, r2
 c003e30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003e32:	4b89      	ldr	r3, [pc, #548]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003e34:	681b      	ldr	r3, [r3, #0]
 c003e36:	f003 030f 	and.w	r3, r3, #15
 c003e3a:	683a      	ldr	r2, [r7, #0]
 c003e3c:	429a      	cmp	r2, r3
 c003e3e:	d001      	beq.n	c003e44 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c003e40:	2301      	movs	r3, #1
 c003e42:	e104      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003e44:	687b      	ldr	r3, [r7, #4]
 c003e46:	681b      	ldr	r3, [r3, #0]
 c003e48:	f003 0302 	and.w	r3, r3, #2
 c003e4c:	2b00      	cmp	r3, #0
 c003e4e:	d010      	beq.n	c003e72 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003e50:	687b      	ldr	r3, [r7, #4]
 c003e52:	689a      	ldr	r2, [r3, #8]
 c003e54:	4b81      	ldr	r3, [pc, #516]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003e56:	689b      	ldr	r3, [r3, #8]
 c003e58:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003e5c:	429a      	cmp	r2, r3
 c003e5e:	d908      	bls.n	c003e72 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003e60:	4b7e      	ldr	r3, [pc, #504]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003e62:	689b      	ldr	r3, [r3, #8]
 c003e64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003e68:	687b      	ldr	r3, [r7, #4]
 c003e6a:	689b      	ldr	r3, [r3, #8]
 c003e6c:	497b      	ldr	r1, [pc, #492]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003e6e:	4313      	orrs	r3, r2
 c003e70:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c003e72:	687b      	ldr	r3, [r7, #4]
 c003e74:	681b      	ldr	r3, [r3, #0]
 c003e76:	f003 0301 	and.w	r3, r3, #1
 c003e7a:	2b00      	cmp	r3, #0
 c003e7c:	f000 8085 	beq.w	c003f8a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003e80:	687b      	ldr	r3, [r7, #4]
 c003e82:	685b      	ldr	r3, [r3, #4]
 c003e84:	2b03      	cmp	r3, #3
 c003e86:	d11f      	bne.n	c003ec8 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003e88:	4b74      	ldr	r3, [pc, #464]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003e8a:	681b      	ldr	r3, [r3, #0]
 c003e8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003e90:	2b00      	cmp	r3, #0
 c003e92:	d101      	bne.n	c003e98 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c003e94:	2301      	movs	r3, #1
 c003e96:	e0da      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c003e98:	f000 fa26 	bl	c0042e8 <RCC_GetSysClockFreqFromPLLSource>
 c003e9c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c003e9e:	693b      	ldr	r3, [r7, #16]
 c003ea0:	4a6f      	ldr	r2, [pc, #444]	; (c004060 <HAL_RCC_ClockConfig+0x264>)
 c003ea2:	4293      	cmp	r3, r2
 c003ea4:	d947      	bls.n	c003f36 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003ea6:	4b6d      	ldr	r3, [pc, #436]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003ea8:	689b      	ldr	r3, [r3, #8]
 c003eaa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003eae:	2b00      	cmp	r3, #0
 c003eb0:	d141      	bne.n	c003f36 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003eb2:	4b6a      	ldr	r3, [pc, #424]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003eb4:	689b      	ldr	r3, [r3, #8]
 c003eb6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003eba:	4a68      	ldr	r2, [pc, #416]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003ebc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003ec0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003ec2:	2380      	movs	r3, #128	; 0x80
 c003ec4:	617b      	str	r3, [r7, #20]
 c003ec6:	e036      	b.n	c003f36 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003ec8:	687b      	ldr	r3, [r7, #4]
 c003eca:	685b      	ldr	r3, [r3, #4]
 c003ecc:	2b02      	cmp	r3, #2
 c003ece:	d107      	bne.n	c003ee0 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003ed0:	4b62      	ldr	r3, [pc, #392]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003ed2:	681b      	ldr	r3, [r3, #0]
 c003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003ed8:	2b00      	cmp	r3, #0
 c003eda:	d115      	bne.n	c003f08 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003edc:	2301      	movs	r3, #1
 c003ede:	e0b6      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003ee0:	687b      	ldr	r3, [r7, #4]
 c003ee2:	685b      	ldr	r3, [r3, #4]
 c003ee4:	2b00      	cmp	r3, #0
 c003ee6:	d107      	bne.n	c003ef8 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003ee8:	4b5c      	ldr	r3, [pc, #368]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003eea:	681b      	ldr	r3, [r3, #0]
 c003eec:	f003 0302 	and.w	r3, r3, #2
 c003ef0:	2b00      	cmp	r3, #0
 c003ef2:	d109      	bne.n	c003f08 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003ef4:	2301      	movs	r3, #1
 c003ef6:	e0aa      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003ef8:	4b58      	ldr	r3, [pc, #352]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003efa:	681b      	ldr	r3, [r3, #0]
 c003efc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003f00:	2b00      	cmp	r3, #0
 c003f02:	d101      	bne.n	c003f08 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003f04:	2301      	movs	r3, #1
 c003f06:	e0a2      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c003f08:	f000 f8b0 	bl	c00406c <HAL_RCC_GetSysClockFreq>
 c003f0c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c003f0e:	693b      	ldr	r3, [r7, #16]
 c003f10:	4a53      	ldr	r2, [pc, #332]	; (c004060 <HAL_RCC_ClockConfig+0x264>)
 c003f12:	4293      	cmp	r3, r2
 c003f14:	d90f      	bls.n	c003f36 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003f16:	4b51      	ldr	r3, [pc, #324]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f18:	689b      	ldr	r3, [r3, #8]
 c003f1a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003f1e:	2b00      	cmp	r3, #0
 c003f20:	d109      	bne.n	c003f36 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003f22:	4b4e      	ldr	r3, [pc, #312]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f24:	689b      	ldr	r3, [r3, #8]
 c003f26:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003f2a:	4a4c      	ldr	r2, [pc, #304]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003f30:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003f32:	2380      	movs	r3, #128	; 0x80
 c003f34:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c003f36:	4b49      	ldr	r3, [pc, #292]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f38:	689b      	ldr	r3, [r3, #8]
 c003f3a:	f023 0203 	bic.w	r2, r3, #3
 c003f3e:	687b      	ldr	r3, [r7, #4]
 c003f40:	685b      	ldr	r3, [r3, #4]
 c003f42:	4946      	ldr	r1, [pc, #280]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f44:	4313      	orrs	r3, r2
 c003f46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003f48:	f7fe f9bc 	bl	c0022c4 <HAL_GetTick>
 c003f4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003f4e:	e013      	b.n	c003f78 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003f50:	f7fe f9b8 	bl	c0022c4 <HAL_GetTick>
 c003f54:	4602      	mov	r2, r0
 c003f56:	68fb      	ldr	r3, [r7, #12]
 c003f58:	1ad3      	subs	r3, r2, r3
 c003f5a:	f241 3288 	movw	r2, #5000	; 0x1388
 c003f5e:	4293      	cmp	r3, r2
 c003f60:	d90a      	bls.n	c003f78 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003f62:	4b3e      	ldr	r3, [pc, #248]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f64:	689b      	ldr	r3, [r3, #8]
 c003f66:	f003 020c 	and.w	r2, r3, #12
 c003f6a:	687b      	ldr	r3, [r7, #4]
 c003f6c:	685b      	ldr	r3, [r3, #4]
 c003f6e:	009b      	lsls	r3, r3, #2
 c003f70:	429a      	cmp	r2, r3
 c003f72:	d001      	beq.n	c003f78 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c003f74:	2303      	movs	r3, #3
 c003f76:	e06a      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003f78:	4b38      	ldr	r3, [pc, #224]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f7a:	689b      	ldr	r3, [r3, #8]
 c003f7c:	f003 020c 	and.w	r2, r3, #12
 c003f80:	687b      	ldr	r3, [r7, #4]
 c003f82:	685b      	ldr	r3, [r3, #4]
 c003f84:	009b      	lsls	r3, r3, #2
 c003f86:	429a      	cmp	r2, r3
 c003f88:	d1e2      	bne.n	c003f50 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c003f8a:	697b      	ldr	r3, [r7, #20]
 c003f8c:	2b80      	cmp	r3, #128	; 0x80
 c003f8e:	d105      	bne.n	c003f9c <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c003f90:	4b32      	ldr	r3, [pc, #200]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f92:	689b      	ldr	r3, [r3, #8]
 c003f94:	4a31      	ldr	r2, [pc, #196]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003f96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003f9a:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003f9c:	687b      	ldr	r3, [r7, #4]
 c003f9e:	681b      	ldr	r3, [r3, #0]
 c003fa0:	f003 0302 	and.w	r3, r3, #2
 c003fa4:	2b00      	cmp	r3, #0
 c003fa6:	d010      	beq.n	c003fca <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003fa8:	687b      	ldr	r3, [r7, #4]
 c003faa:	689a      	ldr	r2, [r3, #8]
 c003fac:	4b2b      	ldr	r3, [pc, #172]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003fae:	689b      	ldr	r3, [r3, #8]
 c003fb0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003fb4:	429a      	cmp	r2, r3
 c003fb6:	d208      	bcs.n	c003fca <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003fb8:	4b28      	ldr	r3, [pc, #160]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003fba:	689b      	ldr	r3, [r3, #8]
 c003fbc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003fc0:	687b      	ldr	r3, [r7, #4]
 c003fc2:	689b      	ldr	r3, [r3, #8]
 c003fc4:	4925      	ldr	r1, [pc, #148]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c003fc6:	4313      	orrs	r3, r2
 c003fc8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003fca:	4b23      	ldr	r3, [pc, #140]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003fcc:	681b      	ldr	r3, [r3, #0]
 c003fce:	f003 030f 	and.w	r3, r3, #15
 c003fd2:	683a      	ldr	r2, [r7, #0]
 c003fd4:	429a      	cmp	r2, r3
 c003fd6:	d210      	bcs.n	c003ffa <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003fd8:	4b1f      	ldr	r3, [pc, #124]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003fda:	681b      	ldr	r3, [r3, #0]
 c003fdc:	f023 020f 	bic.w	r2, r3, #15
 c003fe0:	491d      	ldr	r1, [pc, #116]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003fe2:	683b      	ldr	r3, [r7, #0]
 c003fe4:	4313      	orrs	r3, r2
 c003fe6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003fe8:	4b1b      	ldr	r3, [pc, #108]	; (c004058 <HAL_RCC_ClockConfig+0x25c>)
 c003fea:	681b      	ldr	r3, [r3, #0]
 c003fec:	f003 030f 	and.w	r3, r3, #15
 c003ff0:	683a      	ldr	r2, [r7, #0]
 c003ff2:	429a      	cmp	r2, r3
 c003ff4:	d001      	beq.n	c003ffa <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c003ff6:	2301      	movs	r3, #1
 c003ff8:	e029      	b.n	c00404e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003ffa:	687b      	ldr	r3, [r7, #4]
 c003ffc:	681b      	ldr	r3, [r3, #0]
 c003ffe:	f003 0304 	and.w	r3, r3, #4
 c004002:	2b00      	cmp	r3, #0
 c004004:	d008      	beq.n	c004018 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c004006:	4b15      	ldr	r3, [pc, #84]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c004008:	689b      	ldr	r3, [r3, #8]
 c00400a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00400e:	687b      	ldr	r3, [r7, #4]
 c004010:	68db      	ldr	r3, [r3, #12]
 c004012:	4912      	ldr	r1, [pc, #72]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c004014:	4313      	orrs	r3, r2
 c004016:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c004018:	687b      	ldr	r3, [r7, #4]
 c00401a:	681b      	ldr	r3, [r3, #0]
 c00401c:	f003 0308 	and.w	r3, r3, #8
 c004020:	2b00      	cmp	r3, #0
 c004022:	d009      	beq.n	c004038 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c004024:	4b0d      	ldr	r3, [pc, #52]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c004026:	689b      	ldr	r3, [r3, #8]
 c004028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c00402c:	687b      	ldr	r3, [r7, #4]
 c00402e:	691b      	ldr	r3, [r3, #16]
 c004030:	00db      	lsls	r3, r3, #3
 c004032:	490a      	ldr	r1, [pc, #40]	; (c00405c <HAL_RCC_ClockConfig+0x260>)
 c004034:	4313      	orrs	r3, r2
 c004036:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c004038:	f000 f8b6 	bl	c0041a8 <HAL_RCC_GetHCLKFreq>
 c00403c:	4603      	mov	r3, r0
 c00403e:	4a09      	ldr	r2, [pc, #36]	; (c004064 <HAL_RCC_ClockConfig+0x268>)
 c004040:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c004042:	4b09      	ldr	r3, [pc, #36]	; (c004068 <HAL_RCC_ClockConfig+0x26c>)
 c004044:	681b      	ldr	r3, [r3, #0]
 c004046:	4618      	mov	r0, r3
 c004048:	f7fe f8ec 	bl	c002224 <HAL_InitTick>
 c00404c:	4603      	mov	r3, r0
}
 c00404e:	4618      	mov	r0, r3
 c004050:	3718      	adds	r7, #24
 c004052:	46bd      	mov	sp, r7
 c004054:	bd80      	pop	{r7, pc}
 c004056:	bf00      	nop
 c004058:	50022000 	.word	0x50022000
 c00405c:	50021000 	.word	0x50021000
 c004060:	04c4b400 	.word	0x04c4b400
 c004064:	30000038 	.word	0x30000038
 c004068:	3000003c 	.word	0x3000003c

0c00406c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c00406c:	b480      	push	{r7}
 c00406e:	b089      	sub	sp, #36	; 0x24
 c004070:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c004072:	2300      	movs	r3, #0
 c004074:	61fb      	str	r3, [r7, #28]
 c004076:	2300      	movs	r3, #0
 c004078:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c00407a:	4b47      	ldr	r3, [pc, #284]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00407c:	689b      	ldr	r3, [r3, #8]
 c00407e:	f003 030c 	and.w	r3, r3, #12
 c004082:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c004084:	4b44      	ldr	r3, [pc, #272]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004086:	68db      	ldr	r3, [r3, #12]
 c004088:	f003 0303 	and.w	r3, r3, #3
 c00408c:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c00408e:	693b      	ldr	r3, [r7, #16]
 c004090:	2b00      	cmp	r3, #0
 c004092:	d005      	beq.n	c0040a0 <HAL_RCC_GetSysClockFreq+0x34>
 c004094:	693b      	ldr	r3, [r7, #16]
 c004096:	2b0c      	cmp	r3, #12
 c004098:	d121      	bne.n	c0040de <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c00409a:	68fb      	ldr	r3, [r7, #12]
 c00409c:	2b01      	cmp	r3, #1
 c00409e:	d11e      	bne.n	c0040de <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0040a0:	4b3d      	ldr	r3, [pc, #244]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0040a2:	681b      	ldr	r3, [r3, #0]
 c0040a4:	f003 0308 	and.w	r3, r3, #8
 c0040a8:	2b00      	cmp	r3, #0
 c0040aa:	d107      	bne.n	c0040bc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0040ac:	4b3a      	ldr	r3, [pc, #232]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0040ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0040b2:	0a1b      	lsrs	r3, r3, #8
 c0040b4:	f003 030f 	and.w	r3, r3, #15
 c0040b8:	61fb      	str	r3, [r7, #28]
 c0040ba:	e005      	b.n	c0040c8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0040bc:	4b36      	ldr	r3, [pc, #216]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0040be:	681b      	ldr	r3, [r3, #0]
 c0040c0:	091b      	lsrs	r3, r3, #4
 c0040c2:	f003 030f 	and.w	r3, r3, #15
 c0040c6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c0040c8:	4a34      	ldr	r2, [pc, #208]	; (c00419c <HAL_RCC_GetSysClockFreq+0x130>)
 c0040ca:	69fb      	ldr	r3, [r7, #28]
 c0040cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0040d0:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0040d2:	693b      	ldr	r3, [r7, #16]
 c0040d4:	2b00      	cmp	r3, #0
 c0040d6:	d10d      	bne.n	c0040f4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c0040d8:	69fb      	ldr	r3, [r7, #28]
 c0040da:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0040dc:	e00a      	b.n	c0040f4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c0040de:	693b      	ldr	r3, [r7, #16]
 c0040e0:	2b04      	cmp	r3, #4
 c0040e2:	d102      	bne.n	c0040ea <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c0040e4:	4b2e      	ldr	r3, [pc, #184]	; (c0041a0 <HAL_RCC_GetSysClockFreq+0x134>)
 c0040e6:	61bb      	str	r3, [r7, #24]
 c0040e8:	e004      	b.n	c0040f4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c0040ea:	693b      	ldr	r3, [r7, #16]
 c0040ec:	2b08      	cmp	r3, #8
 c0040ee:	d101      	bne.n	c0040f4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c0040f0:	4b2c      	ldr	r3, [pc, #176]	; (c0041a4 <HAL_RCC_GetSysClockFreq+0x138>)
 c0040f2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0040f4:	693b      	ldr	r3, [r7, #16]
 c0040f6:	2b0c      	cmp	r3, #12
 c0040f8:	d146      	bne.n	c004188 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0040fa:	4b27      	ldr	r3, [pc, #156]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0040fc:	68db      	ldr	r3, [r3, #12]
 c0040fe:	f003 0303 	and.w	r3, r3, #3
 c004102:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c004104:	4b24      	ldr	r3, [pc, #144]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004106:	68db      	ldr	r3, [r3, #12]
 c004108:	091b      	lsrs	r3, r3, #4
 c00410a:	f003 030f 	and.w	r3, r3, #15
 c00410e:	3301      	adds	r3, #1
 c004110:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c004112:	68bb      	ldr	r3, [r7, #8]
 c004114:	2b02      	cmp	r3, #2
 c004116:	d003      	beq.n	c004120 <HAL_RCC_GetSysClockFreq+0xb4>
 c004118:	68bb      	ldr	r3, [r7, #8]
 c00411a:	2b03      	cmp	r3, #3
 c00411c:	d00d      	beq.n	c00413a <HAL_RCC_GetSysClockFreq+0xce>
 c00411e:	e019      	b.n	c004154 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004120:	4a1f      	ldr	r2, [pc, #124]	; (c0041a0 <HAL_RCC_GetSysClockFreq+0x134>)
 c004122:	687b      	ldr	r3, [r7, #4]
 c004124:	fbb2 f3f3 	udiv	r3, r2, r3
 c004128:	4a1b      	ldr	r2, [pc, #108]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00412a:	68d2      	ldr	r2, [r2, #12]
 c00412c:	0a12      	lsrs	r2, r2, #8
 c00412e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004132:	fb02 f303 	mul.w	r3, r2, r3
 c004136:	617b      	str	r3, [r7, #20]
        break;
 c004138:	e019      	b.n	c00416e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00413a:	4a1a      	ldr	r2, [pc, #104]	; (c0041a4 <HAL_RCC_GetSysClockFreq+0x138>)
 c00413c:	687b      	ldr	r3, [r7, #4]
 c00413e:	fbb2 f3f3 	udiv	r3, r2, r3
 c004142:	4a15      	ldr	r2, [pc, #84]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004144:	68d2      	ldr	r2, [r2, #12]
 c004146:	0a12      	lsrs	r2, r2, #8
 c004148:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00414c:	fb02 f303 	mul.w	r3, r2, r3
 c004150:	617b      	str	r3, [r7, #20]
        break;
 c004152:	e00c      	b.n	c00416e <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004154:	69fa      	ldr	r2, [r7, #28]
 c004156:	687b      	ldr	r3, [r7, #4]
 c004158:	fbb2 f3f3 	udiv	r3, r2, r3
 c00415c:	4a0e      	ldr	r2, [pc, #56]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00415e:	68d2      	ldr	r2, [r2, #12]
 c004160:	0a12      	lsrs	r2, r2, #8
 c004162:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004166:	fb02 f303 	mul.w	r3, r2, r3
 c00416a:	617b      	str	r3, [r7, #20]
        break;
 c00416c:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00416e:	4b0a      	ldr	r3, [pc, #40]	; (c004198 <HAL_RCC_GetSysClockFreq+0x12c>)
 c004170:	68db      	ldr	r3, [r3, #12]
 c004172:	0e5b      	lsrs	r3, r3, #25
 c004174:	f003 0303 	and.w	r3, r3, #3
 c004178:	3301      	adds	r3, #1
 c00417a:	005b      	lsls	r3, r3, #1
 c00417c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c00417e:	697a      	ldr	r2, [r7, #20]
 c004180:	683b      	ldr	r3, [r7, #0]
 c004182:	fbb2 f3f3 	udiv	r3, r2, r3
 c004186:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c004188:	69bb      	ldr	r3, [r7, #24]
}
 c00418a:	4618      	mov	r0, r3
 c00418c:	3724      	adds	r7, #36	; 0x24
 c00418e:	46bd      	mov	sp, r7
 c004190:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004194:	4770      	bx	lr
 c004196:	bf00      	nop
 c004198:	50021000 	.word	0x50021000
 c00419c:	0c0085a4 	.word	0x0c0085a4
 c0041a0:	00f42400 	.word	0x00f42400
 c0041a4:	007a1200 	.word	0x007a1200

0c0041a8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0041a8:	b580      	push	{r7, lr}
 c0041aa:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0041ac:	f7ff ff5e 	bl	c00406c <HAL_RCC_GetSysClockFreq>
 c0041b0:	4602      	mov	r2, r0
 c0041b2:	4b05      	ldr	r3, [pc, #20]	; (c0041c8 <HAL_RCC_GetHCLKFreq+0x20>)
 c0041b4:	689b      	ldr	r3, [r3, #8]
 c0041b6:	091b      	lsrs	r3, r3, #4
 c0041b8:	f003 030f 	and.w	r3, r3, #15
 c0041bc:	4903      	ldr	r1, [pc, #12]	; (c0041cc <HAL_RCC_GetHCLKFreq+0x24>)
 c0041be:	5ccb      	ldrb	r3, [r1, r3]
 c0041c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0041c4:	4618      	mov	r0, r3
 c0041c6:	bd80      	pop	{r7, pc}
 c0041c8:	50021000 	.word	0x50021000
 c0041cc:	0c00858c 	.word	0x0c00858c

0c0041d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c0041d0:	b580      	push	{r7, lr}
 c0041d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c0041d4:	f7ff ffe8 	bl	c0041a8 <HAL_RCC_GetHCLKFreq>
 c0041d8:	4602      	mov	r2, r0
 c0041da:	4b05      	ldr	r3, [pc, #20]	; (c0041f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 c0041dc:	689b      	ldr	r3, [r3, #8]
 c0041de:	0a1b      	lsrs	r3, r3, #8
 c0041e0:	f003 0307 	and.w	r3, r3, #7
 c0041e4:	4903      	ldr	r1, [pc, #12]	; (c0041f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 c0041e6:	5ccb      	ldrb	r3, [r1, r3]
 c0041e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 c0041ec:	4618      	mov	r0, r3
 c0041ee:	bd80      	pop	{r7, pc}
 c0041f0:	50021000 	.word	0x50021000
 c0041f4:	0c00859c 	.word	0x0c00859c

0c0041f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c0041f8:	b580      	push	{r7, lr}
 c0041fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c0041fc:	f7ff ffd4 	bl	c0041a8 <HAL_RCC_GetHCLKFreq>
 c004200:	4602      	mov	r2, r0
 c004202:	4b05      	ldr	r3, [pc, #20]	; (c004218 <HAL_RCC_GetPCLK2Freq+0x20>)
 c004204:	689b      	ldr	r3, [r3, #8]
 c004206:	0adb      	lsrs	r3, r3, #11
 c004208:	f003 0307 	and.w	r3, r3, #7
 c00420c:	4903      	ldr	r1, [pc, #12]	; (c00421c <HAL_RCC_GetPCLK2Freq+0x24>)
 c00420e:	5ccb      	ldrb	r3, [r1, r3]
 c004210:	fa22 f303 	lsr.w	r3, r2, r3
}
 c004214:	4618      	mov	r0, r3
 c004216:	bd80      	pop	{r7, pc}
 c004218:	50021000 	.word	0x50021000
 c00421c:	0c00859c 	.word	0x0c00859c

0c004220 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c004220:	b580      	push	{r7, lr}
 c004222:	b086      	sub	sp, #24
 c004224:	af00      	add	r7, sp, #0
 c004226:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c004228:	2300      	movs	r3, #0
 c00422a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c00422c:	4b2c      	ldr	r3, [pc, #176]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00422e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004230:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004234:	2b00      	cmp	r3, #0
 c004236:	d003      	beq.n	c004240 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c004238:	f7ff f85c 	bl	c0032f4 <HAL_PWREx_GetVoltageRange>
 c00423c:	6138      	str	r0, [r7, #16]
 c00423e:	e014      	b.n	c00426a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c004240:	4b27      	ldr	r3, [pc, #156]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004244:	4a26      	ldr	r2, [pc, #152]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004246:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00424a:	6593      	str	r3, [r2, #88]	; 0x58
 c00424c:	4b24      	ldr	r3, [pc, #144]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00424e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004250:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004254:	60fb      	str	r3, [r7, #12]
 c004256:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c004258:	f7ff f84c 	bl	c0032f4 <HAL_PWREx_GetVoltageRange>
 c00425c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c00425e:	4b20      	ldr	r3, [pc, #128]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004262:	4a1f      	ldr	r2, [pc, #124]	; (c0042e0 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c004264:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004268:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c00426a:	693b      	ldr	r3, [r7, #16]
 c00426c:	2b00      	cmp	r3, #0
 c00426e:	d003      	beq.n	c004278 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c004270:	693b      	ldr	r3, [r7, #16]
 c004272:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004276:	d10b      	bne.n	c004290 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c004278:	687b      	ldr	r3, [r7, #4]
 c00427a:	2b80      	cmp	r3, #128	; 0x80
 c00427c:	d919      	bls.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c00427e:	687b      	ldr	r3, [r7, #4]
 c004280:	2ba0      	cmp	r3, #160	; 0xa0
 c004282:	d902      	bls.n	c00428a <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c004284:	2302      	movs	r3, #2
 c004286:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c004288:	e013      	b.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c00428a:	2301      	movs	r3, #1
 c00428c:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c00428e:	e010      	b.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c004290:	687b      	ldr	r3, [r7, #4]
 c004292:	2b80      	cmp	r3, #128	; 0x80
 c004294:	d902      	bls.n	c00429c <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c004296:	2303      	movs	r3, #3
 c004298:	617b      	str	r3, [r7, #20]
 c00429a:	e00a      	b.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c00429c:	687b      	ldr	r3, [r7, #4]
 c00429e:	2b80      	cmp	r3, #128	; 0x80
 c0042a0:	d102      	bne.n	c0042a8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0042a2:	2302      	movs	r3, #2
 c0042a4:	617b      	str	r3, [r7, #20]
 c0042a6:	e004      	b.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0042a8:	687b      	ldr	r3, [r7, #4]
 c0042aa:	2b70      	cmp	r3, #112	; 0x70
 c0042ac:	d101      	bne.n	c0042b2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0042ae:	2301      	movs	r3, #1
 c0042b0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0042b2:	4b0c      	ldr	r3, [pc, #48]	; (c0042e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0042b4:	681b      	ldr	r3, [r3, #0]
 c0042b6:	f023 020f 	bic.w	r2, r3, #15
 c0042ba:	490a      	ldr	r1, [pc, #40]	; (c0042e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0042bc:	697b      	ldr	r3, [r7, #20]
 c0042be:	4313      	orrs	r3, r2
 c0042c0:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0042c2:	4b08      	ldr	r3, [pc, #32]	; (c0042e4 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0042c4:	681b      	ldr	r3, [r3, #0]
 c0042c6:	f003 030f 	and.w	r3, r3, #15
 c0042ca:	697a      	ldr	r2, [r7, #20]
 c0042cc:	429a      	cmp	r2, r3
 c0042ce:	d001      	beq.n	c0042d4 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c0042d0:	2301      	movs	r3, #1
 c0042d2:	e000      	b.n	c0042d6 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c0042d4:	2300      	movs	r3, #0
}
 c0042d6:	4618      	mov	r0, r3
 c0042d8:	3718      	adds	r7, #24
 c0042da:	46bd      	mov	sp, r7
 c0042dc:	bd80      	pop	{r7, pc}
 c0042de:	bf00      	nop
 c0042e0:	50021000 	.word	0x50021000
 c0042e4:	50022000 	.word	0x50022000

0c0042e8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c0042e8:	b480      	push	{r7}
 c0042ea:	b087      	sub	sp, #28
 c0042ec:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c0042ee:	4b31      	ldr	r3, [pc, #196]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0042f0:	68db      	ldr	r3, [r3, #12]
 c0042f2:	f003 0303 	and.w	r3, r3, #3
 c0042f6:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c0042f8:	4b2e      	ldr	r3, [pc, #184]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0042fa:	68db      	ldr	r3, [r3, #12]
 c0042fc:	091b      	lsrs	r3, r3, #4
 c0042fe:	f003 030f 	and.w	r3, r3, #15
 c004302:	3301      	adds	r3, #1
 c004304:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c004306:	68fb      	ldr	r3, [r7, #12]
 c004308:	2b03      	cmp	r3, #3
 c00430a:	d015      	beq.n	c004338 <RCC_GetSysClockFreqFromPLLSource+0x50>
 c00430c:	68fb      	ldr	r3, [r7, #12]
 c00430e:	2b03      	cmp	r3, #3
 c004310:	d839      	bhi.n	c004386 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c004312:	68fb      	ldr	r3, [r7, #12]
 c004314:	2b01      	cmp	r3, #1
 c004316:	d01c      	beq.n	c004352 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c004318:	68fb      	ldr	r3, [r7, #12]
 c00431a:	2b02      	cmp	r3, #2
 c00431c:	d133      	bne.n	c004386 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00431e:	4a26      	ldr	r2, [pc, #152]	; (c0043b8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c004320:	68bb      	ldr	r3, [r7, #8]
 c004322:	fbb2 f3f3 	udiv	r3, r2, r3
 c004326:	4a23      	ldr	r2, [pc, #140]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004328:	68d2      	ldr	r2, [r2, #12]
 c00432a:	0a12      	lsrs	r2, r2, #8
 c00432c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c004330:	fb02 f303 	mul.w	r3, r2, r3
 c004334:	613b      	str	r3, [r7, #16]
      break;
 c004336:	e029      	b.n	c00438c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c004338:	4a20      	ldr	r2, [pc, #128]	; (c0043bc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c00433a:	68bb      	ldr	r3, [r7, #8]
 c00433c:	fbb2 f3f3 	udiv	r3, r2, r3
 c004340:	4a1c      	ldr	r2, [pc, #112]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004342:	68d2      	ldr	r2, [r2, #12]
 c004344:	0a12      	lsrs	r2, r2, #8
 c004346:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00434a:	fb02 f303 	mul.w	r3, r2, r3
 c00434e:	613b      	str	r3, [r7, #16]
      break;
 c004350:	e01c      	b.n	c00438c <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c004352:	4b18      	ldr	r3, [pc, #96]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004354:	681b      	ldr	r3, [r3, #0]
 c004356:	f003 0308 	and.w	r3, r3, #8
 c00435a:	2b00      	cmp	r3, #0
 c00435c:	d107      	bne.n	c00436e <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00435e:	4b15      	ldr	r3, [pc, #84]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004360:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c004364:	0a1b      	lsrs	r3, r3, #8
 c004366:	f003 030f 	and.w	r3, r3, #15
 c00436a:	617b      	str	r3, [r7, #20]
 c00436c:	e005      	b.n	c00437a <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c00436e:	4b11      	ldr	r3, [pc, #68]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c004370:	681b      	ldr	r3, [r3, #0]
 c004372:	091b      	lsrs	r3, r3, #4
 c004374:	f003 030f 	and.w	r3, r3, #15
 c004378:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c00437a:	4a11      	ldr	r2, [pc, #68]	; (c0043c0 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c00437c:	697b      	ldr	r3, [r7, #20]
 c00437e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c004382:	613b      	str	r3, [r7, #16]
        break;
 c004384:	e002      	b.n	c00438c <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c004386:	2300      	movs	r3, #0
 c004388:	613b      	str	r3, [r7, #16]
      break;
 c00438a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c00438c:	4b09      	ldr	r3, [pc, #36]	; (c0043b4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00438e:	68db      	ldr	r3, [r3, #12]
 c004390:	0e5b      	lsrs	r3, r3, #25
 c004392:	f003 0303 	and.w	r3, r3, #3
 c004396:	3301      	adds	r3, #1
 c004398:	005b      	lsls	r3, r3, #1
 c00439a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c00439c:	693a      	ldr	r2, [r7, #16]
 c00439e:	687b      	ldr	r3, [r7, #4]
 c0043a0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0043a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c0043a6:	683b      	ldr	r3, [r7, #0]
}
 c0043a8:	4618      	mov	r0, r3
 c0043aa:	371c      	adds	r7, #28
 c0043ac:	46bd      	mov	sp, r7
 c0043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0043b2:	4770      	bx	lr
 c0043b4:	50021000 	.word	0x50021000
 c0043b8:	00f42400 	.word	0x00f42400
 c0043bc:	007a1200 	.word	0x007a1200
 c0043c0:	0c0085a4 	.word	0x0c0085a4

0c0043c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c0043c4:	b580      	push	{r7, lr}
 c0043c6:	b088      	sub	sp, #32
 c0043c8:	af00      	add	r7, sp, #0
 c0043ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c0043cc:	2300      	movs	r3, #0
 c0043ce:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c0043d0:	2300      	movs	r3, #0
 c0043d2:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c0043d4:	687b      	ldr	r3, [r7, #4]
 c0043d6:	681b      	ldr	r3, [r3, #0]
 c0043d8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0043dc:	2b00      	cmp	r3, #0
 c0043de:	d040      	beq.n	c004462 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c0043e0:	687b      	ldr	r3, [r7, #4]
 c0043e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c0043e4:	2b80      	cmp	r3, #128	; 0x80
 c0043e6:	d02a      	beq.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c0043e8:	2b80      	cmp	r3, #128	; 0x80
 c0043ea:	d825      	bhi.n	c004438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0043ec:	2b60      	cmp	r3, #96	; 0x60
 c0043ee:	d026      	beq.n	c00443e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c0043f0:	2b60      	cmp	r3, #96	; 0x60
 c0043f2:	d821      	bhi.n	c004438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0043f4:	2b40      	cmp	r3, #64	; 0x40
 c0043f6:	d006      	beq.n	c004406 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c0043f8:	2b40      	cmp	r3, #64	; 0x40
 c0043fa:	d81d      	bhi.n	c004438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c0043fc:	2b00      	cmp	r3, #0
 c0043fe:	d009      	beq.n	c004414 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c004400:	2b20      	cmp	r3, #32
 c004402:	d010      	beq.n	c004426 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c004404:	e018      	b.n	c004438 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c004406:	4b8f      	ldr	r3, [pc, #572]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004408:	68db      	ldr	r3, [r3, #12]
 c00440a:	4a8e      	ldr	r2, [pc, #568]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00440c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004410:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004412:	e015      	b.n	c004440 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004414:	687b      	ldr	r3, [r7, #4]
 c004416:	3304      	adds	r3, #4
 c004418:	2100      	movs	r1, #0
 c00441a:	4618      	mov	r0, r3
 c00441c:	f000 fb56 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c004420:	4603      	mov	r3, r0
 c004422:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004424:	e00c      	b.n	c004440 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c004426:	687b      	ldr	r3, [r7, #4]
 c004428:	3320      	adds	r3, #32
 c00442a:	2100      	movs	r1, #0
 c00442c:	4618      	mov	r0, r3
 c00442e:	f000 fc33 	bl	c004c98 <RCCEx_PLLSAI2_Config>
 c004432:	4603      	mov	r3, r0
 c004434:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c004436:	e003      	b.n	c004440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004438:	2301      	movs	r3, #1
 c00443a:	77fb      	strb	r3, [r7, #31]
        break;
 c00443c:	e000      	b.n	c004440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c00443e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004440:	7ffb      	ldrb	r3, [r7, #31]
 c004442:	2b00      	cmp	r3, #0
 c004444:	d10b      	bne.n	c00445e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c004446:	4b7f      	ldr	r3, [pc, #508]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004448:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00444c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c004450:	687b      	ldr	r3, [r7, #4]
 c004452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c004454:	497b      	ldr	r1, [pc, #492]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004456:	4313      	orrs	r3, r2
 c004458:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c00445c:	e001      	b.n	c004462 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00445e:	7ffb      	ldrb	r3, [r7, #31]
 c004460:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c004462:	687b      	ldr	r3, [r7, #4]
 c004464:	681b      	ldr	r3, [r3, #0]
 c004466:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00446a:	2b00      	cmp	r3, #0
 c00446c:	d047      	beq.n	c0044fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c00446e:	687b      	ldr	r3, [r7, #4]
 c004470:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c004472:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004476:	d030      	beq.n	c0044da <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004478:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00447c:	d82a      	bhi.n	c0044d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00447e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004482:	d02a      	beq.n	c0044da <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004484:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004488:	d824      	bhi.n	c0044d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00448a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00448e:	d008      	beq.n	c0044a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c004490:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004494:	d81e      	bhi.n	c0044d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004496:	2b00      	cmp	r3, #0
 c004498:	d00a      	beq.n	c0044b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c00449a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00449e:	d010      	beq.n	c0044c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c0044a0:	e018      	b.n	c0044d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0044a2:	4b68      	ldr	r3, [pc, #416]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0044a4:	68db      	ldr	r3, [r3, #12]
 c0044a6:	4a67      	ldr	r2, [pc, #412]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0044a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0044ac:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0044ae:	e015      	b.n	c0044dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0044b0:	687b      	ldr	r3, [r7, #4]
 c0044b2:	3304      	adds	r3, #4
 c0044b4:	2100      	movs	r1, #0
 c0044b6:	4618      	mov	r0, r3
 c0044b8:	f000 fb08 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c0044bc:	4603      	mov	r3, r0
 c0044be:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0044c0:	e00c      	b.n	c0044dc <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c0044c2:	687b      	ldr	r3, [r7, #4]
 c0044c4:	3320      	adds	r3, #32
 c0044c6:	2100      	movs	r1, #0
 c0044c8:	4618      	mov	r0, r3
 c0044ca:	f000 fbe5 	bl	c004c98 <RCCEx_PLLSAI2_Config>
 c0044ce:	4603      	mov	r3, r0
 c0044d0:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0044d2:	e003      	b.n	c0044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c0044d4:	2301      	movs	r3, #1
 c0044d6:	77fb      	strb	r3, [r7, #31]
        break;
 c0044d8:	e000      	b.n	c0044dc <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c0044da:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0044dc:	7ffb      	ldrb	r3, [r7, #31]
 c0044de:	2b00      	cmp	r3, #0
 c0044e0:	d10b      	bne.n	c0044fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c0044e2:	4b58      	ldr	r3, [pc, #352]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0044e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0044e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c0044ec:	687b      	ldr	r3, [r7, #4]
 c0044ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0044f0:	4954      	ldr	r1, [pc, #336]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0044f2:	4313      	orrs	r3, r2
 c0044f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c0044f8:	e001      	b.n	c0044fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0044fa:	7ffb      	ldrb	r3, [r7, #31]
 c0044fc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c0044fe:	687b      	ldr	r3, [r7, #4]
 c004500:	681b      	ldr	r3, [r3, #0]
 c004502:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c004506:	2b00      	cmp	r3, #0
 c004508:	f000 80ab 	beq.w	c004662 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00450c:	2300      	movs	r3, #0
 c00450e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c004510:	4b4c      	ldr	r3, [pc, #304]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004512:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004514:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004518:	2b00      	cmp	r3, #0
 c00451a:	d10d      	bne.n	c004538 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00451c:	4b49      	ldr	r3, [pc, #292]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00451e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004520:	4a48      	ldr	r2, [pc, #288]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004522:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004526:	6593      	str	r3, [r2, #88]	; 0x58
 c004528:	4b46      	ldr	r3, [pc, #280]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00452c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c004530:	60fb      	str	r3, [r7, #12]
 c004532:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c004534:	2301      	movs	r3, #1
 c004536:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c004538:	4b43      	ldr	r3, [pc, #268]	; (c004648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00453a:	681b      	ldr	r3, [r3, #0]
 c00453c:	4a42      	ldr	r2, [pc, #264]	; (c004648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00453e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c004542:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c004544:	f7fd febe 	bl	c0022c4 <HAL_GetTick>
 c004548:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00454a:	e00f      	b.n	c00456c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00454c:	f7fd feba 	bl	c0022c4 <HAL_GetTick>
 c004550:	4602      	mov	r2, r0
 c004552:	693b      	ldr	r3, [r7, #16]
 c004554:	1ad3      	subs	r3, r2, r3
 c004556:	2b02      	cmp	r3, #2
 c004558:	d908      	bls.n	c00456c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00455a:	4b3b      	ldr	r3, [pc, #236]	; (c004648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00455c:	681b      	ldr	r3, [r3, #0]
 c00455e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004562:	2b00      	cmp	r3, #0
 c004564:	d109      	bne.n	c00457a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c004566:	2303      	movs	r3, #3
 c004568:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c00456a:	e006      	b.n	c00457a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00456c:	4b36      	ldr	r3, [pc, #216]	; (c004648 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00456e:	681b      	ldr	r3, [r3, #0]
 c004570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004574:	2b00      	cmp	r3, #0
 c004576:	d0e9      	beq.n	c00454c <HAL_RCCEx_PeriphCLKConfig+0x188>
 c004578:	e000      	b.n	c00457c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c00457a:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c00457c:	7ffb      	ldrb	r3, [r7, #31]
 c00457e:	2b00      	cmp	r3, #0
 c004580:	d164      	bne.n	c00464c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c004582:	4b30      	ldr	r3, [pc, #192]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004584:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004588:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00458c:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c00458e:	69bb      	ldr	r3, [r7, #24]
 c004590:	2b00      	cmp	r3, #0
 c004592:	d01f      	beq.n	c0045d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c004594:	687b      	ldr	r3, [r7, #4]
 c004596:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00459a:	69ba      	ldr	r2, [r7, #24]
 c00459c:	429a      	cmp	r2, r3
 c00459e:	d019      	beq.n	c0045d4 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0045a0:	4b28      	ldr	r3, [pc, #160]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0045a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0045aa:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0045ac:	4b25      	ldr	r3, [pc, #148]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0045b2:	4a24      	ldr	r2, [pc, #144]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0045b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0045bc:	4b21      	ldr	r3, [pc, #132]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0045c2:	4a20      	ldr	r2, [pc, #128]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045c4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c0045c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c0045cc:	4a1d      	ldr	r2, [pc, #116]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045ce:	69bb      	ldr	r3, [r7, #24]
 c0045d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c0045d4:	69bb      	ldr	r3, [r7, #24]
 c0045d6:	f003 0301 	and.w	r3, r3, #1
 c0045da:	2b00      	cmp	r3, #0
 c0045dc:	d01f      	beq.n	c00461e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0045de:	f7fd fe71 	bl	c0022c4 <HAL_GetTick>
 c0045e2:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0045e4:	e012      	b.n	c00460c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0045e6:	f7fd fe6d 	bl	c0022c4 <HAL_GetTick>
 c0045ea:	4602      	mov	r2, r0
 c0045ec:	693b      	ldr	r3, [r7, #16]
 c0045ee:	1ad3      	subs	r3, r2, r3
 c0045f0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0045f4:	4293      	cmp	r3, r2
 c0045f6:	d909      	bls.n	c00460c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0045f8:	4b12      	ldr	r3, [pc, #72]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0045fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0045fe:	f003 0302 	and.w	r3, r3, #2
 c004602:	2b00      	cmp	r3, #0
 c004604:	d10a      	bne.n	c00461c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c004606:	2303      	movs	r3, #3
 c004608:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00460a:	e007      	b.n	c00461c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00460c:	4b0d      	ldr	r3, [pc, #52]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00460e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004612:	f003 0302 	and.w	r3, r3, #2
 c004616:	2b00      	cmp	r3, #0
 c004618:	d0e5      	beq.n	c0045e6 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c00461a:	e000      	b.n	c00461e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c00461c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c00461e:	7ffb      	ldrb	r3, [r7, #31]
 c004620:	2b00      	cmp	r3, #0
 c004622:	d10c      	bne.n	c00463e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c004624:	4b07      	ldr	r3, [pc, #28]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00462a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c00462e:	687b      	ldr	r3, [r7, #4]
 c004630:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004634:	4903      	ldr	r1, [pc, #12]	; (c004644 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004636:	4313      	orrs	r3, r2
 c004638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c00463c:	e008      	b.n	c004650 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00463e:	7ffb      	ldrb	r3, [r7, #31]
 c004640:	77bb      	strb	r3, [r7, #30]
 c004642:	e005      	b.n	c004650 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c004644:	50021000 	.word	0x50021000
 c004648:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00464c:	7ffb      	ldrb	r3, [r7, #31]
 c00464e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c004650:	7dfb      	ldrb	r3, [r7, #23]
 c004652:	2b01      	cmp	r3, #1
 c004654:	d105      	bne.n	c004662 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c004656:	4b9c      	ldr	r3, [pc, #624]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004658:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00465a:	4a9b      	ldr	r2, [pc, #620]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00465c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004660:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c004662:	687b      	ldr	r3, [r7, #4]
 c004664:	681b      	ldr	r3, [r3, #0]
 c004666:	f003 0301 	and.w	r3, r3, #1
 c00466a:	2b00      	cmp	r3, #0
 c00466c:	d00a      	beq.n	c004684 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c00466e:	4b96      	ldr	r3, [pc, #600]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004670:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004674:	f023 0203 	bic.w	r2, r3, #3
 c004678:	687b      	ldr	r3, [r7, #4]
 c00467a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00467c:	4992      	ldr	r1, [pc, #584]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00467e:	4313      	orrs	r3, r2
 c004680:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c004684:	687b      	ldr	r3, [r7, #4]
 c004686:	681b      	ldr	r3, [r3, #0]
 c004688:	f003 0302 	and.w	r3, r3, #2
 c00468c:	2b00      	cmp	r3, #0
 c00468e:	d00a      	beq.n	c0046a6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c004690:	4b8d      	ldr	r3, [pc, #564]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004696:	f023 020c 	bic.w	r2, r3, #12
 c00469a:	687b      	ldr	r3, [r7, #4]
 c00469c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00469e:	498a      	ldr	r1, [pc, #552]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046a0:	4313      	orrs	r3, r2
 c0046a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0046a6:	687b      	ldr	r3, [r7, #4]
 c0046a8:	681b      	ldr	r3, [r3, #0]
 c0046aa:	f003 0304 	and.w	r3, r3, #4
 c0046ae:	2b00      	cmp	r3, #0
 c0046b0:	d00a      	beq.n	c0046c8 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0046b2:	4b85      	ldr	r3, [pc, #532]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0046b8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0046bc:	687b      	ldr	r3, [r7, #4]
 c0046be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0046c0:	4981      	ldr	r1, [pc, #516]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046c2:	4313      	orrs	r3, r2
 c0046c4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c0046c8:	687b      	ldr	r3, [r7, #4]
 c0046ca:	681b      	ldr	r3, [r3, #0]
 c0046cc:	f003 0308 	and.w	r3, r3, #8
 c0046d0:	2b00      	cmp	r3, #0
 c0046d2:	d00a      	beq.n	c0046ea <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c0046d4:	4b7c      	ldr	r3, [pc, #496]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0046da:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c0046de:	687b      	ldr	r3, [r7, #4]
 c0046e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0046e2:	4979      	ldr	r1, [pc, #484]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046e4:	4313      	orrs	r3, r2
 c0046e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c0046ea:	687b      	ldr	r3, [r7, #4]
 c0046ec:	681b      	ldr	r3, [r3, #0]
 c0046ee:	f003 0310 	and.w	r3, r3, #16
 c0046f2:	2b00      	cmp	r3, #0
 c0046f4:	d00a      	beq.n	c00470c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c0046f6:	4b74      	ldr	r3, [pc, #464]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0046f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0046fc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c004700:	687b      	ldr	r3, [r7, #4]
 c004702:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c004704:	4970      	ldr	r1, [pc, #448]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004706:	4313      	orrs	r3, r2
 c004708:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c00470c:	687b      	ldr	r3, [r7, #4]
 c00470e:	681b      	ldr	r3, [r3, #0]
 c004710:	f003 0320 	and.w	r3, r3, #32
 c004714:	2b00      	cmp	r3, #0
 c004716:	d00a      	beq.n	c00472e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c004718:	4b6b      	ldr	r3, [pc, #428]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00471a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00471e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c004722:	687b      	ldr	r3, [r7, #4]
 c004724:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c004726:	4968      	ldr	r1, [pc, #416]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004728:	4313      	orrs	r3, r2
 c00472a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c00472e:	687b      	ldr	r3, [r7, #4]
 c004730:	681b      	ldr	r3, [r3, #0]
 c004732:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004736:	2b00      	cmp	r3, #0
 c004738:	d00a      	beq.n	c004750 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00473a:	4b63      	ldr	r3, [pc, #396]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00473c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004740:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c004744:	687b      	ldr	r3, [r7, #4]
 c004746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c004748:	495f      	ldr	r1, [pc, #380]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00474a:	4313      	orrs	r3, r2
 c00474c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c004750:	687b      	ldr	r3, [r7, #4]
 c004752:	681b      	ldr	r3, [r3, #0]
 c004754:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004758:	2b00      	cmp	r3, #0
 c00475a:	d00a      	beq.n	c004772 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c00475c:	4b5a      	ldr	r3, [pc, #360]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00475e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004762:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c004766:	687b      	ldr	r3, [r7, #4]
 c004768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00476a:	4957      	ldr	r1, [pc, #348]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00476c:	4313      	orrs	r3, r2
 c00476e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c004772:	687b      	ldr	r3, [r7, #4]
 c004774:	681b      	ldr	r3, [r3, #0]
 c004776:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00477a:	2b00      	cmp	r3, #0
 c00477c:	d00a      	beq.n	c004794 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c00477e:	4b52      	ldr	r3, [pc, #328]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004780:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c004788:	687b      	ldr	r3, [r7, #4]
 c00478a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c00478c:	494e      	ldr	r1, [pc, #312]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00478e:	4313      	orrs	r3, r2
 c004790:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c004794:	687b      	ldr	r3, [r7, #4]
 c004796:	681b      	ldr	r3, [r3, #0]
 c004798:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c00479c:	2b00      	cmp	r3, #0
 c00479e:	d031      	beq.n	c004804 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c0047a0:	687b      	ldr	r3, [r7, #4]
 c0047a2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0047a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0047a8:	d00e      	beq.n	c0047c8 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c0047aa:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0047ae:	d814      	bhi.n	c0047da <HAL_RCCEx_PeriphCLKConfig+0x416>
 c0047b0:	2b00      	cmp	r3, #0
 c0047b2:	d015      	beq.n	c0047e0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c0047b4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0047b8:	d10f      	bne.n	c0047da <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0047ba:	4b43      	ldr	r3, [pc, #268]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0047bc:	68db      	ldr	r3, [r3, #12]
 c0047be:	4a42      	ldr	r2, [pc, #264]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0047c0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0047c4:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c0047c6:	e00c      	b.n	c0047e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0047c8:	687b      	ldr	r3, [r7, #4]
 c0047ca:	3304      	adds	r3, #4
 c0047cc:	2100      	movs	r1, #0
 c0047ce:	4618      	mov	r0, r3
 c0047d0:	f000 f97c 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c0047d4:	4603      	mov	r3, r0
 c0047d6:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c0047d8:	e003      	b.n	c0047e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c0047da:	2301      	movs	r3, #1
 c0047dc:	77fb      	strb	r3, [r7, #31]
        break;
 c0047de:	e000      	b.n	c0047e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c0047e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 c0047e2:	7ffb      	ldrb	r3, [r7, #31]
 c0047e4:	2b00      	cmp	r3, #0
 c0047e6:	d10b      	bne.n	c004800 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c0047e8:	4b37      	ldr	r3, [pc, #220]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0047ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0047ee:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c0047f2:	687b      	ldr	r3, [r7, #4]
 c0047f4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0047f6:	4934      	ldr	r1, [pc, #208]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0047f8:	4313      	orrs	r3, r2
 c0047fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0047fe:	e001      	b.n	c004804 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004800:	7ffb      	ldrb	r3, [r7, #31]
 c004802:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c004804:	687b      	ldr	r3, [r7, #4]
 c004806:	681b      	ldr	r3, [r3, #0]
 c004808:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00480c:	2b00      	cmp	r3, #0
 c00480e:	d00a      	beq.n	c004826 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c004810:	4b2d      	ldr	r3, [pc, #180]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004816:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c00481a:	687b      	ldr	r3, [r7, #4]
 c00481c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00481e:	492a      	ldr	r1, [pc, #168]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004820:	4313      	orrs	r3, r2
 c004822:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c004826:	687b      	ldr	r3, [r7, #4]
 c004828:	681b      	ldr	r3, [r3, #0]
 c00482a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c00482e:	2b00      	cmp	r3, #0
 c004830:	d00a      	beq.n	c004848 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c004832:	4b25      	ldr	r3, [pc, #148]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004834:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004838:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c00483c:	687b      	ldr	r3, [r7, #4]
 c00483e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c004840:	4921      	ldr	r1, [pc, #132]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004842:	4313      	orrs	r3, r2
 c004844:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c004848:	687b      	ldr	r3, [r7, #4]
 c00484a:	681b      	ldr	r3, [r3, #0]
 c00484c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004850:	2b00      	cmp	r3, #0
 c004852:	d00a      	beq.n	c00486a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c004854:	4b1c      	ldr	r3, [pc, #112]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00485a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c00485e:	687b      	ldr	r3, [r7, #4]
 c004860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004862:	4919      	ldr	r1, [pc, #100]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004864:	4313      	orrs	r3, r2
 c004866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c00486a:	687b      	ldr	r3, [r7, #4]
 c00486c:	681b      	ldr	r3, [r3, #0]
 c00486e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c004872:	2b00      	cmp	r3, #0
 c004874:	d00a      	beq.n	c00488c <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c004876:	4b14      	ldr	r3, [pc, #80]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004878:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00487c:	f023 0203 	bic.w	r2, r3, #3
 c004880:	687b      	ldr	r3, [r7, #4]
 c004882:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004884:	4910      	ldr	r1, [pc, #64]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004886:	4313      	orrs	r3, r2
 c004888:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c00488c:	687b      	ldr	r3, [r7, #4]
 c00488e:	681b      	ldr	r3, [r3, #0]
 c004890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c004894:	2b00      	cmp	r3, #0
 c004896:	d02b      	beq.n	c0048f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c004898:	4b0b      	ldr	r3, [pc, #44]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00489a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00489e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0048a2:	687b      	ldr	r3, [r7, #4]
 c0048a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0048a6:	4908      	ldr	r1, [pc, #32]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0048a8:	4313      	orrs	r3, r2
 c0048aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c0048ae:	687b      	ldr	r3, [r7, #4]
 c0048b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0048b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0048b6:	d109      	bne.n	c0048cc <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0048b8:	4b03      	ldr	r3, [pc, #12]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0048ba:	68db      	ldr	r3, [r3, #12]
 c0048bc:	4a02      	ldr	r2, [pc, #8]	; (c0048c8 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0048be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0048c2:	60d3      	str	r3, [r2, #12]
 c0048c4:	e014      	b.n	c0048f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c0048c6:	bf00      	nop
 c0048c8:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c0048cc:	687b      	ldr	r3, [r7, #4]
 c0048ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c0048d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0048d4:	d10c      	bne.n	c0048f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0048d6:	687b      	ldr	r3, [r7, #4]
 c0048d8:	3304      	adds	r3, #4
 c0048da:	2101      	movs	r1, #1
 c0048dc:	4618      	mov	r0, r3
 c0048de:	f000 f8f5 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c0048e2:	4603      	mov	r3, r0
 c0048e4:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c0048e6:	7ffb      	ldrb	r3, [r7, #31]
 c0048e8:	2b00      	cmp	r3, #0
 c0048ea:	d001      	beq.n	c0048f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c0048ec:	7ffb      	ldrb	r3, [r7, #31]
 c0048ee:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c0048f0:	687b      	ldr	r3, [r7, #4]
 c0048f2:	681b      	ldr	r3, [r3, #0]
 c0048f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c0048f8:	2b00      	cmp	r3, #0
 c0048fa:	d04a      	beq.n	c004992 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c0048fc:	687b      	ldr	r3, [r7, #4]
 c0048fe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004900:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004904:	d108      	bne.n	c004918 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c004906:	4b70      	ldr	r3, [pc, #448]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004908:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00490c:	4a6e      	ldr	r2, [pc, #440]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00490e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c004912:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c004916:	e012      	b.n	c00493e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c004918:	4b6b      	ldr	r3, [pc, #428]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00491a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00491e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c004922:	687b      	ldr	r3, [r7, #4]
 c004924:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004926:	4968      	ldr	r1, [pc, #416]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004928:	4313      	orrs	r3, r2
 c00492a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00492e:	4b66      	ldr	r3, [pc, #408]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004934:	4a64      	ldr	r2, [pc, #400]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004936:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c00493a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c00493e:	687b      	ldr	r3, [r7, #4]
 c004940:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004942:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004946:	d10d      	bne.n	c004964 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c004948:	687b      	ldr	r3, [r7, #4]
 c00494a:	3304      	adds	r3, #4
 c00494c:	2101      	movs	r1, #1
 c00494e:	4618      	mov	r0, r3
 c004950:	f000 f8bc 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c004954:	4603      	mov	r3, r0
 c004956:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c004958:	7ffb      	ldrb	r3, [r7, #31]
 c00495a:	2b00      	cmp	r3, #0
 c00495c:	d019      	beq.n	c004992 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c00495e:	7ffb      	ldrb	r3, [r7, #31]
 c004960:	77bb      	strb	r3, [r7, #30]
 c004962:	e016      	b.n	c004992 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c004964:	687b      	ldr	r3, [r7, #4]
 c004966:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004968:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c00496c:	d106      	bne.n	c00497c <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00496e:	4b56      	ldr	r3, [pc, #344]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004970:	68db      	ldr	r3, [r3, #12]
 c004972:	4a55      	ldr	r2, [pc, #340]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004974:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004978:	60d3      	str	r3, [r2, #12]
 c00497a:	e00a      	b.n	c004992 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c00497c:	687b      	ldr	r3, [r7, #4]
 c00497e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004980:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004984:	d105      	bne.n	c004992 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c004986:	4b50      	ldr	r3, [pc, #320]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004988:	68db      	ldr	r3, [r3, #12]
 c00498a:	4a4f      	ldr	r2, [pc, #316]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00498c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004990:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c004992:	687b      	ldr	r3, [r7, #4]
 c004994:	681b      	ldr	r3, [r3, #0]
 c004996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00499a:	2b00      	cmp	r3, #0
 c00499c:	d028      	beq.n	c0049f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c00499e:	4b4a      	ldr	r3, [pc, #296]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0049a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0049a4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0049a8:	687b      	ldr	r3, [r7, #4]
 c0049aa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0049ac:	4946      	ldr	r1, [pc, #280]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0049ae:	4313      	orrs	r3, r2
 c0049b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c0049b4:	687b      	ldr	r3, [r7, #4]
 c0049b6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0049b8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c0049bc:	d106      	bne.n	c0049cc <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0049be:	4b42      	ldr	r3, [pc, #264]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0049c0:	68db      	ldr	r3, [r3, #12]
 c0049c2:	4a41      	ldr	r2, [pc, #260]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0049c4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0049c8:	60d3      	str	r3, [r2, #12]
 c0049ca:	e011      	b.n	c0049f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c0049cc:	687b      	ldr	r3, [r7, #4]
 c0049ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c0049d0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0049d4:	d10c      	bne.n	c0049f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0049d6:	687b      	ldr	r3, [r7, #4]
 c0049d8:	3304      	adds	r3, #4
 c0049da:	2101      	movs	r1, #1
 c0049dc:	4618      	mov	r0, r3
 c0049de:	f000 f875 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c0049e2:	4603      	mov	r3, r0
 c0049e4:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0049e6:	7ffb      	ldrb	r3, [r7, #31]
 c0049e8:	2b00      	cmp	r3, #0
 c0049ea:	d001      	beq.n	c0049f0 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c0049ec:	7ffb      	ldrb	r3, [r7, #31]
 c0049ee:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c0049f0:	687b      	ldr	r3, [r7, #4]
 c0049f2:	681b      	ldr	r3, [r3, #0]
 c0049f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0049f8:	2b00      	cmp	r3, #0
 c0049fa:	d01e      	beq.n	c004a3a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c0049fc:	4b32      	ldr	r3, [pc, #200]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0049fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004a02:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c004a06:	687b      	ldr	r3, [r7, #4]
 c004a08:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004a0c:	492e      	ldr	r1, [pc, #184]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a0e:	4313      	orrs	r3, r2
 c004a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c004a14:	687b      	ldr	r3, [r7, #4]
 c004a16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c004a1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c004a1e:	d10c      	bne.n	c004a3a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c004a20:	687b      	ldr	r3, [r7, #4]
 c004a22:	3304      	adds	r3, #4
 c004a24:	2102      	movs	r1, #2
 c004a26:	4618      	mov	r0, r3
 c004a28:	f000 f850 	bl	c004acc <RCCEx_PLLSAI1_Config>
 c004a2c:	4603      	mov	r3, r0
 c004a2e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c004a30:	7ffb      	ldrb	r3, [r7, #31]
 c004a32:	2b00      	cmp	r3, #0
 c004a34:	d001      	beq.n	c004a3a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c004a36:	7ffb      	ldrb	r3, [r7, #31]
 c004a38:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c004a3a:	687b      	ldr	r3, [r7, #4]
 c004a3c:	681b      	ldr	r3, [r3, #0]
 c004a3e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c004a42:	2b00      	cmp	r3, #0
 c004a44:	d00b      	beq.n	c004a5e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c004a46:	4b20      	ldr	r3, [pc, #128]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004a4c:	f023 0204 	bic.w	r2, r3, #4
 c004a50:	687b      	ldr	r3, [r7, #4]
 c004a52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c004a56:	491c      	ldr	r1, [pc, #112]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a58:	4313      	orrs	r3, r2
 c004a5a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c004a5e:	687b      	ldr	r3, [r7, #4]
 c004a60:	681b      	ldr	r3, [r3, #0]
 c004a62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c004a66:	2b00      	cmp	r3, #0
 c004a68:	d00b      	beq.n	c004a82 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c004a6a:	4b17      	ldr	r3, [pc, #92]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a6c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004a70:	f023 0218 	bic.w	r2, r3, #24
 c004a74:	687b      	ldr	r3, [r7, #4]
 c004a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004a7a:	4913      	ldr	r1, [pc, #76]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a7c:	4313      	orrs	r3, r2
 c004a7e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c004a82:	687b      	ldr	r3, [r7, #4]
 c004a84:	681b      	ldr	r3, [r3, #0]
 c004a86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c004a8a:	2b00      	cmp	r3, #0
 c004a8c:	d017      	beq.n	c004abe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c004a8e:	4b0e      	ldr	r3, [pc, #56]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004a90:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004a94:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c004a98:	687b      	ldr	r3, [r7, #4]
 c004a9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004a9e:	490a      	ldr	r1, [pc, #40]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004aa0:	4313      	orrs	r3, r2
 c004aa2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c004aa6:	687b      	ldr	r3, [r7, #4]
 c004aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004aac:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c004ab0:	d105      	bne.n	c004abe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004ab2:	4b05      	ldr	r3, [pc, #20]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004ab4:	68db      	ldr	r3, [r3, #12]
 c004ab6:	4a04      	ldr	r2, [pc, #16]	; (c004ac8 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004ab8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004abc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c004abe:	7fbb      	ldrb	r3, [r7, #30]
}
 c004ac0:	4618      	mov	r0, r3
 c004ac2:	3720      	adds	r7, #32
 c004ac4:	46bd      	mov	sp, r7
 c004ac6:	bd80      	pop	{r7, pc}
 c004ac8:	50021000 	.word	0x50021000

0c004acc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c004acc:	b580      	push	{r7, lr}
 c004ace:	b084      	sub	sp, #16
 c004ad0:	af00      	add	r7, sp, #0
 c004ad2:	6078      	str	r0, [r7, #4]
 c004ad4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c004ad6:	2300      	movs	r3, #0
 c004ad8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c004ada:	687b      	ldr	r3, [r7, #4]
 c004adc:	681b      	ldr	r3, [r3, #0]
 c004ade:	2b03      	cmp	r3, #3
 c004ae0:	d018      	beq.n	c004b14 <RCCEx_PLLSAI1_Config+0x48>
 c004ae2:	2b03      	cmp	r3, #3
 c004ae4:	d81f      	bhi.n	c004b26 <RCCEx_PLLSAI1_Config+0x5a>
 c004ae6:	2b01      	cmp	r3, #1
 c004ae8:	d002      	beq.n	c004af0 <RCCEx_PLLSAI1_Config+0x24>
 c004aea:	2b02      	cmp	r3, #2
 c004aec:	d009      	beq.n	c004b02 <RCCEx_PLLSAI1_Config+0x36>
 c004aee:	e01a      	b.n	c004b26 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004af0:	4b65      	ldr	r3, [pc, #404]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004af2:	681b      	ldr	r3, [r3, #0]
 c004af4:	f003 0302 	and.w	r3, r3, #2
 c004af8:	2b00      	cmp	r3, #0
 c004afa:	d117      	bne.n	c004b2c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c004afc:	2301      	movs	r3, #1
 c004afe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004b00:	e014      	b.n	c004b2c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004b02:	4b61      	ldr	r3, [pc, #388]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b04:	681b      	ldr	r3, [r3, #0]
 c004b06:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004b0a:	2b00      	cmp	r3, #0
 c004b0c:	d110      	bne.n	c004b30 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c004b0e:	2301      	movs	r3, #1
 c004b10:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004b12:	e00d      	b.n	c004b30 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c004b14:	4b5c      	ldr	r3, [pc, #368]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b16:	681b      	ldr	r3, [r3, #0]
 c004b18:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c004b1c:	2b00      	cmp	r3, #0
 c004b1e:	d109      	bne.n	c004b34 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c004b20:	2301      	movs	r3, #1
 c004b22:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004b24:	e006      	b.n	c004b34 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c004b26:	2301      	movs	r3, #1
 c004b28:	73fb      	strb	r3, [r7, #15]
      break;
 c004b2a:	e004      	b.n	c004b36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004b2c:	bf00      	nop
 c004b2e:	e002      	b.n	c004b36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004b30:	bf00      	nop
 c004b32:	e000      	b.n	c004b36 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c004b34:	bf00      	nop
  }

  if (status == HAL_OK)
 c004b36:	7bfb      	ldrb	r3, [r7, #15]
 c004b38:	2b00      	cmp	r3, #0
 c004b3a:	f040 809f 	bne.w	c004c7c <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c004b3e:	4b52      	ldr	r3, [pc, #328]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b40:	681b      	ldr	r3, [r3, #0]
 c004b42:	4a51      	ldr	r2, [pc, #324]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b44:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c004b48:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c004b4a:	f7fd fbbb 	bl	c0022c4 <HAL_GetTick>
 c004b4e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004b50:	e00f      	b.n	c004b72 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c004b52:	f7fd fbb7 	bl	c0022c4 <HAL_GetTick>
 c004b56:	4602      	mov	r2, r0
 c004b58:	68bb      	ldr	r3, [r7, #8]
 c004b5a:	1ad3      	subs	r3, r2, r3
 c004b5c:	2b02      	cmp	r3, #2
 c004b5e:	d908      	bls.n	c004b72 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004b60:	4b49      	ldr	r3, [pc, #292]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b62:	681b      	ldr	r3, [r3, #0]
 c004b64:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004b68:	2b00      	cmp	r3, #0
 c004b6a:	d009      	beq.n	c004b80 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c004b6c:	2303      	movs	r3, #3
 c004b6e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c004b70:	e006      	b.n	c004b80 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c004b72:	4b45      	ldr	r3, [pc, #276]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b74:	681b      	ldr	r3, [r3, #0]
 c004b76:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004b7a:	2b00      	cmp	r3, #0
 c004b7c:	d1e9      	bne.n	c004b52 <RCCEx_PLLSAI1_Config+0x86>
 c004b7e:	e000      	b.n	c004b82 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c004b80:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004b82:	7bfb      	ldrb	r3, [r7, #15]
 c004b84:	2b00      	cmp	r3, #0
 c004b86:	d179      	bne.n	c004c7c <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c004b88:	683b      	ldr	r3, [r7, #0]
 c004b8a:	2b00      	cmp	r3, #0
 c004b8c:	d116      	bne.n	c004bbc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004b8e:	4b3e      	ldr	r3, [pc, #248]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004b90:	691a      	ldr	r2, [r3, #16]
 c004b92:	4b3e      	ldr	r3, [pc, #248]	; (c004c8c <RCCEx_PLLSAI1_Config+0x1c0>)
 c004b94:	4013      	ands	r3, r2
 c004b96:	687a      	ldr	r2, [r7, #4]
 c004b98:	6892      	ldr	r2, [r2, #8]
 c004b9a:	0211      	lsls	r1, r2, #8
 c004b9c:	687a      	ldr	r2, [r7, #4]
 c004b9e:	68d2      	ldr	r2, [r2, #12]
 c004ba0:	06d2      	lsls	r2, r2, #27
 c004ba2:	4311      	orrs	r1, r2
 c004ba4:	687a      	ldr	r2, [r7, #4]
 c004ba6:	6852      	ldr	r2, [r2, #4]
 c004ba8:	3a01      	subs	r2, #1
 c004baa:	0112      	lsls	r2, r2, #4
 c004bac:	4311      	orrs	r1, r2
 c004bae:	687a      	ldr	r2, [r7, #4]
 c004bb0:	6812      	ldr	r2, [r2, #0]
 c004bb2:	430a      	orrs	r2, r1
 c004bb4:	4934      	ldr	r1, [pc, #208]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004bb6:	4313      	orrs	r3, r2
 c004bb8:	610b      	str	r3, [r1, #16]
 c004bba:	e033      	b.n	c004c24 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c004bbc:	683b      	ldr	r3, [r7, #0]
 c004bbe:	2b01      	cmp	r3, #1
 c004bc0:	d118      	bne.n	c004bf4 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004bc2:	4b31      	ldr	r3, [pc, #196]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004bc4:	691a      	ldr	r2, [r3, #16]
 c004bc6:	4b32      	ldr	r3, [pc, #200]	; (c004c90 <RCCEx_PLLSAI1_Config+0x1c4>)
 c004bc8:	4013      	ands	r3, r2
 c004bca:	687a      	ldr	r2, [r7, #4]
 c004bcc:	6892      	ldr	r2, [r2, #8]
 c004bce:	0211      	lsls	r1, r2, #8
 c004bd0:	687a      	ldr	r2, [r7, #4]
 c004bd2:	6912      	ldr	r2, [r2, #16]
 c004bd4:	0852      	lsrs	r2, r2, #1
 c004bd6:	3a01      	subs	r2, #1
 c004bd8:	0552      	lsls	r2, r2, #21
 c004bda:	4311      	orrs	r1, r2
 c004bdc:	687a      	ldr	r2, [r7, #4]
 c004bde:	6852      	ldr	r2, [r2, #4]
 c004be0:	3a01      	subs	r2, #1
 c004be2:	0112      	lsls	r2, r2, #4
 c004be4:	4311      	orrs	r1, r2
 c004be6:	687a      	ldr	r2, [r7, #4]
 c004be8:	6812      	ldr	r2, [r2, #0]
 c004bea:	430a      	orrs	r2, r1
 c004bec:	4926      	ldr	r1, [pc, #152]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004bee:	4313      	orrs	r3, r2
 c004bf0:	610b      	str	r3, [r1, #16]
 c004bf2:	e017      	b.n	c004c24 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004bf4:	4b24      	ldr	r3, [pc, #144]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004bf6:	691a      	ldr	r2, [r3, #16]
 c004bf8:	4b26      	ldr	r3, [pc, #152]	; (c004c94 <RCCEx_PLLSAI1_Config+0x1c8>)
 c004bfa:	4013      	ands	r3, r2
 c004bfc:	687a      	ldr	r2, [r7, #4]
 c004bfe:	6892      	ldr	r2, [r2, #8]
 c004c00:	0211      	lsls	r1, r2, #8
 c004c02:	687a      	ldr	r2, [r7, #4]
 c004c04:	6952      	ldr	r2, [r2, #20]
 c004c06:	0852      	lsrs	r2, r2, #1
 c004c08:	3a01      	subs	r2, #1
 c004c0a:	0652      	lsls	r2, r2, #25
 c004c0c:	4311      	orrs	r1, r2
 c004c0e:	687a      	ldr	r2, [r7, #4]
 c004c10:	6852      	ldr	r2, [r2, #4]
 c004c12:	3a01      	subs	r2, #1
 c004c14:	0112      	lsls	r2, r2, #4
 c004c16:	4311      	orrs	r1, r2
 c004c18:	687a      	ldr	r2, [r7, #4]
 c004c1a:	6812      	ldr	r2, [r2, #0]
 c004c1c:	430a      	orrs	r2, r1
 c004c1e:	491a      	ldr	r1, [pc, #104]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c20:	4313      	orrs	r3, r2
 c004c22:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c004c24:	4b18      	ldr	r3, [pc, #96]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c26:	681b      	ldr	r3, [r3, #0]
 c004c28:	4a17      	ldr	r2, [pc, #92]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c2a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c004c2e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004c30:	f7fd fb48 	bl	c0022c4 <HAL_GetTick>
 c004c34:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c004c36:	e00f      	b.n	c004c58 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c004c38:	f7fd fb44 	bl	c0022c4 <HAL_GetTick>
 c004c3c:	4602      	mov	r2, r0
 c004c3e:	68bb      	ldr	r3, [r7, #8]
 c004c40:	1ad3      	subs	r3, r2, r3
 c004c42:	2b02      	cmp	r3, #2
 c004c44:	d908      	bls.n	c004c58 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c004c46:	4b10      	ldr	r3, [pc, #64]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c48:	681b      	ldr	r3, [r3, #0]
 c004c4a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004c4e:	2b00      	cmp	r3, #0
 c004c50:	d109      	bne.n	c004c66 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c004c52:	2303      	movs	r3, #3
 c004c54:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c004c56:	e006      	b.n	c004c66 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c004c58:	4b0b      	ldr	r3, [pc, #44]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c5a:	681b      	ldr	r3, [r3, #0]
 c004c5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004c60:	2b00      	cmp	r3, #0
 c004c62:	d0e9      	beq.n	c004c38 <RCCEx_PLLSAI1_Config+0x16c>
 c004c64:	e000      	b.n	c004c68 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c004c66:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004c68:	7bfb      	ldrb	r3, [r7, #15]
 c004c6a:	2b00      	cmp	r3, #0
 c004c6c:	d106      	bne.n	c004c7c <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c004c6e:	4b06      	ldr	r3, [pc, #24]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c70:	691a      	ldr	r2, [r3, #16]
 c004c72:	687b      	ldr	r3, [r7, #4]
 c004c74:	699b      	ldr	r3, [r3, #24]
 c004c76:	4904      	ldr	r1, [pc, #16]	; (c004c88 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004c78:	4313      	orrs	r3, r2
 c004c7a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c004c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 c004c7e:	4618      	mov	r0, r3
 c004c80:	3710      	adds	r7, #16
 c004c82:	46bd      	mov	sp, r7
 c004c84:	bd80      	pop	{r7, pc}
 c004c86:	bf00      	nop
 c004c88:	50021000 	.word	0x50021000
 c004c8c:	07ff800c 	.word	0x07ff800c
 c004c90:	ff9f800c 	.word	0xff9f800c
 c004c94:	f9ff800c 	.word	0xf9ff800c

0c004c98 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c004c98:	b580      	push	{r7, lr}
 c004c9a:	b084      	sub	sp, #16
 c004c9c:	af00      	add	r7, sp, #0
 c004c9e:	6078      	str	r0, [r7, #4]
 c004ca0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c004ca2:	2300      	movs	r3, #0
 c004ca4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c004ca6:	687b      	ldr	r3, [r7, #4]
 c004ca8:	681b      	ldr	r3, [r3, #0]
 c004caa:	2b03      	cmp	r3, #3
 c004cac:	d018      	beq.n	c004ce0 <RCCEx_PLLSAI2_Config+0x48>
 c004cae:	2b03      	cmp	r3, #3
 c004cb0:	d81f      	bhi.n	c004cf2 <RCCEx_PLLSAI2_Config+0x5a>
 c004cb2:	2b01      	cmp	r3, #1
 c004cb4:	d002      	beq.n	c004cbc <RCCEx_PLLSAI2_Config+0x24>
 c004cb6:	2b02      	cmp	r3, #2
 c004cb8:	d009      	beq.n	c004cce <RCCEx_PLLSAI2_Config+0x36>
 c004cba:	e01a      	b.n	c004cf2 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004cbc:	4b4a      	ldr	r3, [pc, #296]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004cbe:	681b      	ldr	r3, [r3, #0]
 c004cc0:	f003 0302 	and.w	r3, r3, #2
 c004cc4:	2b00      	cmp	r3, #0
 c004cc6:	d117      	bne.n	c004cf8 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c004cc8:	2301      	movs	r3, #1
 c004cca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004ccc:	e014      	b.n	c004cf8 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c004cce:	4b46      	ldr	r3, [pc, #280]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004cd0:	681b      	ldr	r3, [r3, #0]
 c004cd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004cd6:	2b00      	cmp	r3, #0
 c004cd8:	d110      	bne.n	c004cfc <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c004cda:	2301      	movs	r3, #1
 c004cdc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004cde:	e00d      	b.n	c004cfc <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c004ce0:	4b41      	ldr	r3, [pc, #260]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004ce2:	681b      	ldr	r3, [r3, #0]
 c004ce4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c004ce8:	2b00      	cmp	r3, #0
 c004cea:	d109      	bne.n	c004d00 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c004cec:	2301      	movs	r3, #1
 c004cee:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004cf0:	e006      	b.n	c004d00 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c004cf2:	2301      	movs	r3, #1
 c004cf4:	73fb      	strb	r3, [r7, #15]
      break;
 c004cf6:	e004      	b.n	c004d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004cf8:	bf00      	nop
 c004cfa:	e002      	b.n	c004d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004cfc:	bf00      	nop
 c004cfe:	e000      	b.n	c004d02 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004d00:	bf00      	nop
  }

  if (status == HAL_OK)
 c004d02:	7bfb      	ldrb	r3, [r7, #15]
 c004d04:	2b00      	cmp	r3, #0
 c004d06:	d169      	bne.n	c004ddc <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c004d08:	4b37      	ldr	r3, [pc, #220]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d0a:	681b      	ldr	r3, [r3, #0]
 c004d0c:	4a36      	ldr	r2, [pc, #216]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c004d12:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c004d14:	f7fd fad6 	bl	c0022c4 <HAL_GetTick>
 c004d18:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c004d1a:	e00f      	b.n	c004d3c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004d1c:	f7fd fad2 	bl	c0022c4 <HAL_GetTick>
 c004d20:	4602      	mov	r2, r0
 c004d22:	68bb      	ldr	r3, [r7, #8]
 c004d24:	1ad3      	subs	r3, r2, r3
 c004d26:	2b02      	cmp	r3, #2
 c004d28:	d908      	bls.n	c004d3c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c004d2a:	4b2f      	ldr	r3, [pc, #188]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d2c:	681b      	ldr	r3, [r3, #0]
 c004d2e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004d32:	2b00      	cmp	r3, #0
 c004d34:	d009      	beq.n	c004d4a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c004d36:	2303      	movs	r3, #3
 c004d38:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c004d3a:	e006      	b.n	c004d4a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c004d3c:	4b2a      	ldr	r3, [pc, #168]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d3e:	681b      	ldr	r3, [r3, #0]
 c004d40:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004d44:	2b00      	cmp	r3, #0
 c004d46:	d1e9      	bne.n	c004d1c <RCCEx_PLLSAI2_Config+0x84>
 c004d48:	e000      	b.n	c004d4c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c004d4a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c004d4c:	7bfb      	ldrb	r3, [r7, #15]
 c004d4e:	2b00      	cmp	r3, #0
 c004d50:	d144      	bne.n	c004ddc <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c004d52:	683b      	ldr	r3, [r7, #0]
 c004d54:	2b00      	cmp	r3, #0
 c004d56:	d115      	bne.n	c004d84 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c004d58:	4b23      	ldr	r3, [pc, #140]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d5a:	695a      	ldr	r2, [r3, #20]
 c004d5c:	4b23      	ldr	r3, [pc, #140]	; (c004dec <RCCEx_PLLSAI2_Config+0x154>)
 c004d5e:	4013      	ands	r3, r2
 c004d60:	687a      	ldr	r2, [r7, #4]
 c004d62:	6892      	ldr	r2, [r2, #8]
 c004d64:	0211      	lsls	r1, r2, #8
 c004d66:	687a      	ldr	r2, [r7, #4]
 c004d68:	68d2      	ldr	r2, [r2, #12]
 c004d6a:	06d2      	lsls	r2, r2, #27
 c004d6c:	4311      	orrs	r1, r2
 c004d6e:	687a      	ldr	r2, [r7, #4]
 c004d70:	6852      	ldr	r2, [r2, #4]
 c004d72:	3a01      	subs	r2, #1
 c004d74:	0112      	lsls	r2, r2, #4
 c004d76:	4311      	orrs	r1, r2
 c004d78:	687a      	ldr	r2, [r7, #4]
 c004d7a:	6812      	ldr	r2, [r2, #0]
 c004d7c:	430a      	orrs	r2, r1
 c004d7e:	491a      	ldr	r1, [pc, #104]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d80:	4313      	orrs	r3, r2
 c004d82:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c004d84:	4b18      	ldr	r3, [pc, #96]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d86:	681b      	ldr	r3, [r3, #0]
 c004d88:	4a17      	ldr	r2, [pc, #92]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004d8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c004d8e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c004d90:	f7fd fa98 	bl	c0022c4 <HAL_GetTick>
 c004d94:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004d96:	e00f      	b.n	c004db8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004d98:	f7fd fa94 	bl	c0022c4 <HAL_GetTick>
 c004d9c:	4602      	mov	r2, r0
 c004d9e:	68bb      	ldr	r3, [r7, #8]
 c004da0:	1ad3      	subs	r3, r2, r3
 c004da2:	2b02      	cmp	r3, #2
 c004da4:	d908      	bls.n	c004db8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004da6:	4b10      	ldr	r3, [pc, #64]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004da8:	681b      	ldr	r3, [r3, #0]
 c004daa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004dae:	2b00      	cmp	r3, #0
 c004db0:	d109      	bne.n	c004dc6 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c004db2:	2303      	movs	r3, #3
 c004db4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c004db6:	e006      	b.n	c004dc6 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004db8:	4b0b      	ldr	r3, [pc, #44]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004dba:	681b      	ldr	r3, [r3, #0]
 c004dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004dc0:	2b00      	cmp	r3, #0
 c004dc2:	d0e9      	beq.n	c004d98 <RCCEx_PLLSAI2_Config+0x100>
 c004dc4:	e000      	b.n	c004dc8 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c004dc6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004dc8:	7bfb      	ldrb	r3, [r7, #15]
 c004dca:	2b00      	cmp	r3, #0
 c004dcc:	d106      	bne.n	c004ddc <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c004dce:	4b06      	ldr	r3, [pc, #24]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004dd0:	695a      	ldr	r2, [r3, #20]
 c004dd2:	687b      	ldr	r3, [r7, #4]
 c004dd4:	691b      	ldr	r3, [r3, #16]
 c004dd6:	4904      	ldr	r1, [pc, #16]	; (c004de8 <RCCEx_PLLSAI2_Config+0x150>)
 c004dd8:	4313      	orrs	r3, r2
 c004dda:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c004ddc:	7bfb      	ldrb	r3, [r7, #15]
}
 c004dde:	4618      	mov	r0, r3
 c004de0:	3710      	adds	r7, #16
 c004de2:	46bd      	mov	sp, r7
 c004de4:	bd80      	pop	{r7, pc}
 c004de6:	bf00      	nop
 c004de8:	50021000 	.word	0x50021000
 c004dec:	07ff800c 	.word	0x07ff800c

0c004df0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c004df0:	b580      	push	{r7, lr}
 c004df2:	b084      	sub	sp, #16
 c004df4:	af00      	add	r7, sp, #0
 c004df6:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c004df8:	687b      	ldr	r3, [r7, #4]
 c004dfa:	2b00      	cmp	r3, #0
 c004dfc:	d101      	bne.n	c004e02 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c004dfe:	2301      	movs	r3, #1
 c004e00:	e095      	b.n	c004f2e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 c004e02:	687b      	ldr	r3, [r7, #4]
 c004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004e06:	2b00      	cmp	r3, #0
 c004e08:	d108      	bne.n	c004e1c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 c004e0a:	687b      	ldr	r3, [r7, #4]
 c004e0c:	685b      	ldr	r3, [r3, #4]
 c004e0e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004e12:	d009      	beq.n	c004e28 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c004e14:	687b      	ldr	r3, [r7, #4]
 c004e16:	2200      	movs	r2, #0
 c004e18:	61da      	str	r2, [r3, #28]
 c004e1a:	e005      	b.n	c004e28 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 c004e1c:	687b      	ldr	r3, [r7, #4]
 c004e1e:	2200      	movs	r2, #0
 c004e20:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 c004e22:	687b      	ldr	r3, [r7, #4]
 c004e24:	2200      	movs	r2, #0
 c004e26:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004e28:	687b      	ldr	r3, [r7, #4]
 c004e2a:	2200      	movs	r2, #0
 c004e2c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c004e2e:	687b      	ldr	r3, [r7, #4]
 c004e30:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004e34:	b2db      	uxtb	r3, r3
 c004e36:	2b00      	cmp	r3, #0
 c004e38:	d106      	bne.n	c004e48 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c004e3a:	687b      	ldr	r3, [r7, #4]
 c004e3c:	2200      	movs	r2, #0
 c004e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c004e42:	6878      	ldr	r0, [r7, #4]
 c004e44:	f7fc fdb2 	bl	c0019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c004e48:	687b      	ldr	r3, [r7, #4]
 c004e4a:	2202      	movs	r2, #2
 c004e4c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c004e50:	687b      	ldr	r3, [r7, #4]
 c004e52:	681b      	ldr	r3, [r3, #0]
 c004e54:	681a      	ldr	r2, [r3, #0]
 c004e56:	687b      	ldr	r3, [r7, #4]
 c004e58:	681b      	ldr	r3, [r3, #0]
 c004e5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004e5e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c004e60:	687b      	ldr	r3, [r7, #4]
 c004e62:	68db      	ldr	r3, [r3, #12]
 c004e64:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004e68:	d902      	bls.n	c004e70 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 c004e6a:	2300      	movs	r3, #0
 c004e6c:	60fb      	str	r3, [r7, #12]
 c004e6e:	e002      	b.n	c004e76 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 c004e70:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c004e74:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 c004e76:	687b      	ldr	r3, [r7, #4]
 c004e78:	68db      	ldr	r3, [r3, #12]
 c004e7a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 c004e7e:	d007      	beq.n	c004e90 <HAL_SPI_Init+0xa0>
 c004e80:	687b      	ldr	r3, [r7, #4]
 c004e82:	68db      	ldr	r3, [r3, #12]
 c004e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004e88:	d002      	beq.n	c004e90 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004e8a:	687b      	ldr	r3, [r7, #4]
 c004e8c:	2200      	movs	r2, #0
 c004e8e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 c004e90:	687b      	ldr	r3, [r7, #4]
 c004e92:	685b      	ldr	r3, [r3, #4]
 c004e94:	f403 7282 	and.w	r2, r3, #260	; 0x104
 c004e98:	687b      	ldr	r3, [r7, #4]
 c004e9a:	689b      	ldr	r3, [r3, #8]
 c004e9c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 c004ea0:	431a      	orrs	r2, r3
 c004ea2:	687b      	ldr	r3, [r7, #4]
 c004ea4:	691b      	ldr	r3, [r3, #16]
 c004ea6:	f003 0302 	and.w	r3, r3, #2
 c004eaa:	431a      	orrs	r2, r3
 c004eac:	687b      	ldr	r3, [r7, #4]
 c004eae:	695b      	ldr	r3, [r3, #20]
 c004eb0:	f003 0301 	and.w	r3, r3, #1
 c004eb4:	431a      	orrs	r2, r3
 c004eb6:	687b      	ldr	r3, [r7, #4]
 c004eb8:	699b      	ldr	r3, [r3, #24]
 c004eba:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004ebe:	431a      	orrs	r2, r3
 c004ec0:	687b      	ldr	r3, [r7, #4]
 c004ec2:	69db      	ldr	r3, [r3, #28]
 c004ec4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 c004ec8:	431a      	orrs	r2, r3
 c004eca:	687b      	ldr	r3, [r7, #4]
 c004ecc:	6a1b      	ldr	r3, [r3, #32]
 c004ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004ed2:	ea42 0103 	orr.w	r1, r2, r3
 c004ed6:	687b      	ldr	r3, [r7, #4]
 c004ed8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004eda:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 c004ede:	687b      	ldr	r3, [r7, #4]
 c004ee0:	681b      	ldr	r3, [r3, #0]
 c004ee2:	430a      	orrs	r2, r1
 c004ee4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 c004ee6:	687b      	ldr	r3, [r7, #4]
 c004ee8:	699b      	ldr	r3, [r3, #24]
 c004eea:	0c1b      	lsrs	r3, r3, #16
 c004eec:	f003 0204 	and.w	r2, r3, #4
 c004ef0:	687b      	ldr	r3, [r7, #4]
 c004ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004ef4:	f003 0310 	and.w	r3, r3, #16
 c004ef8:	431a      	orrs	r2, r3
 c004efa:	687b      	ldr	r3, [r7, #4]
 c004efc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004efe:	f003 0308 	and.w	r3, r3, #8
 c004f02:	431a      	orrs	r2, r3
 c004f04:	687b      	ldr	r3, [r7, #4]
 c004f06:	68db      	ldr	r3, [r3, #12]
 c004f08:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 c004f0c:	ea42 0103 	orr.w	r1, r2, r3
 c004f10:	68fb      	ldr	r3, [r7, #12]
 c004f12:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 c004f16:	687b      	ldr	r3, [r7, #4]
 c004f18:	681b      	ldr	r3, [r3, #0]
 c004f1a:	430a      	orrs	r2, r1
 c004f1c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c004f1e:	687b      	ldr	r3, [r7, #4]
 c004f20:	2200      	movs	r2, #0
 c004f22:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 c004f24:	687b      	ldr	r3, [r7, #4]
 c004f26:	2201      	movs	r2, #1
 c004f28:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 c004f2c:	2300      	movs	r3, #0
}
 c004f2e:	4618      	mov	r0, r3
 c004f30:	3710      	adds	r7, #16
 c004f32:	46bd      	mov	sp, r7
 c004f34:	bd80      	pop	{r7, pc}
	...

0c004f38 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c004f38:	b580      	push	{r7, lr}
 c004f3a:	b086      	sub	sp, #24
 c004f3c:	af00      	add	r7, sp, #0
 c004f3e:	60f8      	str	r0, [r7, #12]
 c004f40:	60b9      	str	r1, [r7, #8]
 c004f42:	4613      	mov	r3, r2
 c004f44:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004f46:	2300      	movs	r3, #0
 c004f48:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 c004f4a:	68fb      	ldr	r3, [r7, #12]
 c004f4c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004f50:	2b01      	cmp	r3, #1
 c004f52:	d101      	bne.n	c004f58 <HAL_SPI_Transmit_DMA+0x20>
 c004f54:	2302      	movs	r3, #2
 c004f56:	e0d8      	b.n	c00510a <HAL_SPI_Transmit_DMA+0x1d2>
 c004f58:	68fb      	ldr	r3, [r7, #12]
 c004f5a:	2201      	movs	r2, #1
 c004f5c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c004f60:	68fb      	ldr	r3, [r7, #12]
 c004f62:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004f66:	b2db      	uxtb	r3, r3
 c004f68:	2b01      	cmp	r3, #1
 c004f6a:	d002      	beq.n	c004f72 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 c004f6c:	2302      	movs	r3, #2
 c004f6e:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004f70:	e0c6      	b.n	c005100 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  if ((pData == NULL) || (Size == 0U))
 c004f72:	68bb      	ldr	r3, [r7, #8]
 c004f74:	2b00      	cmp	r3, #0
 c004f76:	d002      	beq.n	c004f7e <HAL_SPI_Transmit_DMA+0x46>
 c004f78:	88fb      	ldrh	r3, [r7, #6]
 c004f7a:	2b00      	cmp	r3, #0
 c004f7c:	d102      	bne.n	c004f84 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 c004f7e:	2301      	movs	r3, #1
 c004f80:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004f82:	e0bd      	b.n	c005100 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 c004f84:	68fb      	ldr	r3, [r7, #12]
 c004f86:	2203      	movs	r2, #3
 c004f88:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c004f8c:	68fb      	ldr	r3, [r7, #12]
 c004f8e:	2200      	movs	r2, #0
 c004f90:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 c004f92:	68fb      	ldr	r3, [r7, #12]
 c004f94:	68ba      	ldr	r2, [r7, #8]
 c004f96:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c004f98:	68fb      	ldr	r3, [r7, #12]
 c004f9a:	88fa      	ldrh	r2, [r7, #6]
 c004f9c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c004f9e:	68fb      	ldr	r3, [r7, #12]
 c004fa0:	88fa      	ldrh	r2, [r7, #6]
 c004fa2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 c004fa4:	68fb      	ldr	r3, [r7, #12]
 c004fa6:	2200      	movs	r2, #0
 c004fa8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 c004faa:	68fb      	ldr	r3, [r7, #12]
 c004fac:	2200      	movs	r2, #0
 c004fae:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 c004fb0:	68fb      	ldr	r3, [r7, #12]
 c004fb2:	2200      	movs	r2, #0
 c004fb4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 c004fb6:	68fb      	ldr	r3, [r7, #12]
 c004fb8:	2200      	movs	r2, #0
 c004fba:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 c004fbe:	68fb      	ldr	r3, [r7, #12]
 c004fc0:	2200      	movs	r2, #0
 c004fc2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c004fc6:	68fb      	ldr	r3, [r7, #12]
 c004fc8:	689b      	ldr	r3, [r3, #8]
 c004fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004fce:	d10f      	bne.n	c004ff0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c004fd0:	68fb      	ldr	r3, [r7, #12]
 c004fd2:	681b      	ldr	r3, [r3, #0]
 c004fd4:	681a      	ldr	r2, [r3, #0]
 c004fd6:	68fb      	ldr	r3, [r7, #12]
 c004fd8:	681b      	ldr	r3, [r3, #0]
 c004fda:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004fde:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 c004fe0:	68fb      	ldr	r3, [r7, #12]
 c004fe2:	681b      	ldr	r3, [r3, #0]
 c004fe4:	681a      	ldr	r2, [r3, #0]
 c004fe6:	68fb      	ldr	r3, [r7, #12]
 c004fe8:	681b      	ldr	r3, [r3, #0]
 c004fea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c004fee:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 c004ff0:	68fb      	ldr	r3, [r7, #12]
 c004ff2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004ff4:	4a47      	ldr	r2, [pc, #284]	; (c005114 <HAL_SPI_Transmit_DMA+0x1dc>)
 c004ff6:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 c004ff8:	68fb      	ldr	r3, [r7, #12]
 c004ffa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004ffc:	4a46      	ldr	r2, [pc, #280]	; (c005118 <HAL_SPI_Transmit_DMA+0x1e0>)
 c004ffe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 c005000:	68fb      	ldr	r3, [r7, #12]
 c005002:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005004:	4a45      	ldr	r2, [pc, #276]	; (c00511c <HAL_SPI_Transmit_DMA+0x1e4>)
 c005006:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 c005008:	68fb      	ldr	r3, [r7, #12]
 c00500a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00500c:	2200      	movs	r2, #0
 c00500e:	641a      	str	r2, [r3, #64]	; 0x40

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c005010:	68fb      	ldr	r3, [r7, #12]
 c005012:	681b      	ldr	r3, [r3, #0]
 c005014:	685a      	ldr	r2, [r3, #4]
 c005016:	68fb      	ldr	r3, [r7, #12]
 c005018:	681b      	ldr	r3, [r3, #0]
 c00501a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c00501e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 c005020:	68fb      	ldr	r3, [r7, #12]
 c005022:	68db      	ldr	r3, [r3, #12]
 c005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005028:	d82d      	bhi.n	c005086 <HAL_SPI_Transmit_DMA+0x14e>
 c00502a:	68fb      	ldr	r3, [r7, #12]
 c00502c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00502e:	699b      	ldr	r3, [r3, #24]
 c005030:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005034:	d127      	bne.n	c005086 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 c005036:	68fb      	ldr	r3, [r7, #12]
 c005038:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c00503a:	b29b      	uxth	r3, r3
 c00503c:	f003 0301 	and.w	r3, r3, #1
 c005040:	2b00      	cmp	r3, #0
 c005042:	d10f      	bne.n	c005064 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c005044:	68fb      	ldr	r3, [r7, #12]
 c005046:	681b      	ldr	r3, [r3, #0]
 c005048:	685a      	ldr	r2, [r3, #4]
 c00504a:	68fb      	ldr	r3, [r7, #12]
 c00504c:	681b      	ldr	r3, [r3, #0]
 c00504e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c005052:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 c005054:	68fb      	ldr	r3, [r7, #12]
 c005056:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005058:	b29b      	uxth	r3, r3
 c00505a:	085b      	lsrs	r3, r3, #1
 c00505c:	b29a      	uxth	r2, r3
 c00505e:	68fb      	ldr	r3, [r7, #12]
 c005060:	87da      	strh	r2, [r3, #62]	; 0x3e
 c005062:	e010      	b.n	c005086 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c005064:	68fb      	ldr	r3, [r7, #12]
 c005066:	681b      	ldr	r3, [r3, #0]
 c005068:	685a      	ldr	r2, [r3, #4]
 c00506a:	68fb      	ldr	r3, [r7, #12]
 c00506c:	681b      	ldr	r3, [r3, #0]
 c00506e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c005072:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c005074:	68fb      	ldr	r3, [r7, #12]
 c005076:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c005078:	b29b      	uxth	r3, r3
 c00507a:	085b      	lsrs	r3, r3, #1
 c00507c:	b29b      	uxth	r3, r3
 c00507e:	3301      	adds	r3, #1
 c005080:	b29a      	uxth	r2, r3
 c005082:	68fb      	ldr	r3, [r7, #12]
 c005084:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c005086:	68fb      	ldr	r3, [r7, #12]
 c005088:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c00508a:	68fb      	ldr	r3, [r7, #12]
 c00508c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00508e:	4619      	mov	r1, r3
 c005090:	68fb      	ldr	r3, [r7, #12]
 c005092:	681b      	ldr	r3, [r3, #0]
 c005094:	330c      	adds	r3, #12
 c005096:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c005098:	68fb      	ldr	r3, [r7, #12]
 c00509a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c00509c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c00509e:	f7fd fad5 	bl	c00264c <HAL_DMA_Start_IT>
 c0050a2:	4603      	mov	r3, r0
 c0050a4:	2b00      	cmp	r3, #0
 c0050a6:	d00c      	beq.n	c0050c2 <HAL_SPI_Transmit_DMA+0x18a>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c0050a8:	68fb      	ldr	r3, [r7, #12]
 c0050aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0050ac:	f043 0210 	orr.w	r2, r3, #16
 c0050b0:	68fb      	ldr	r3, [r7, #12]
 c0050b2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c0050b4:	2301      	movs	r3, #1
 c0050b6:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c0050b8:	68fb      	ldr	r3, [r7, #12]
 c0050ba:	2201      	movs	r2, #1
 c0050bc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c0050c0:	e01e      	b.n	c005100 <HAL_SPI_Transmit_DMA+0x1c8>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c0050c2:	68fb      	ldr	r3, [r7, #12]
 c0050c4:	681b      	ldr	r3, [r3, #0]
 c0050c6:	681b      	ldr	r3, [r3, #0]
 c0050c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0050cc:	2b40      	cmp	r3, #64	; 0x40
 c0050ce:	d007      	beq.n	c0050e0 <HAL_SPI_Transmit_DMA+0x1a8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c0050d0:	68fb      	ldr	r3, [r7, #12]
 c0050d2:	681b      	ldr	r3, [r3, #0]
 c0050d4:	681a      	ldr	r2, [r3, #0]
 c0050d6:	68fb      	ldr	r3, [r7, #12]
 c0050d8:	681b      	ldr	r3, [r3, #0]
 c0050da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c0050de:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c0050e0:	68fb      	ldr	r3, [r7, #12]
 c0050e2:	681b      	ldr	r3, [r3, #0]
 c0050e4:	685a      	ldr	r2, [r3, #4]
 c0050e6:	68fb      	ldr	r3, [r7, #12]
 c0050e8:	681b      	ldr	r3, [r3, #0]
 c0050ea:	f042 0220 	orr.w	r2, r2, #32
 c0050ee:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c0050f0:	68fb      	ldr	r3, [r7, #12]
 c0050f2:	681b      	ldr	r3, [r3, #0]
 c0050f4:	685a      	ldr	r2, [r3, #4]
 c0050f6:	68fb      	ldr	r3, [r7, #12]
 c0050f8:	681b      	ldr	r3, [r3, #0]
 c0050fa:	f042 0202 	orr.w	r2, r2, #2
 c0050fe:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c005100:	68fb      	ldr	r3, [r7, #12]
 c005102:	2200      	movs	r2, #0
 c005104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005108:	7dfb      	ldrb	r3, [r7, #23]
}
 c00510a:	4618      	mov	r0, r3
 c00510c:	3718      	adds	r7, #24
 c00510e:	46bd      	mov	sp, r7
 c005110:	bd80      	pop	{r7, pc}
 c005112:	bf00      	nop
 c005114:	0c0058af 	.word	0x0c0058af
 c005118:	0c0056d1 	.word	0x0c0056d1
 c00511c:	0c005903 	.word	0x0c005903

0c005120 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 c005120:	b580      	push	{r7, lr}
 c005122:	b086      	sub	sp, #24
 c005124:	af00      	add	r7, sp, #0
 c005126:	60f8      	str	r0, [r7, #12]
 c005128:	60b9      	str	r1, [r7, #8]
 c00512a:	4613      	mov	r3, r2
 c00512c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 c00512e:	2300      	movs	r3, #0
 c005130:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c005132:	68fb      	ldr	r3, [r7, #12]
 c005134:	689b      	ldr	r3, [r3, #8]
 c005136:	2b00      	cmp	r3, #0
 c005138:	d110      	bne.n	c00515c <HAL_SPI_Receive_DMA+0x3c>
 c00513a:	68fb      	ldr	r3, [r7, #12]
 c00513c:	685b      	ldr	r3, [r3, #4]
 c00513e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005142:	d10b      	bne.n	c00515c <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 c005144:	68fb      	ldr	r3, [r7, #12]
 c005146:	2204      	movs	r2, #4
 c005148:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 c00514c:	88fb      	ldrh	r3, [r7, #6]
 c00514e:	68ba      	ldr	r2, [r7, #8]
 c005150:	68b9      	ldr	r1, [r7, #8]
 c005152:	68f8      	ldr	r0, [r7, #12]
 c005154:	f000 f908 	bl	c005368 <HAL_SPI_TransmitReceive_DMA>
 c005158:	4603      	mov	r3, r0
 c00515a:	e0fb      	b.n	c005354 <HAL_SPI_Receive_DMA+0x234>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 c00515c:	68fb      	ldr	r3, [r7, #12]
 c00515e:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c005162:	2b01      	cmp	r3, #1
 c005164:	d101      	bne.n	c00516a <HAL_SPI_Receive_DMA+0x4a>
 c005166:	2302      	movs	r3, #2
 c005168:	e0f4      	b.n	c005354 <HAL_SPI_Receive_DMA+0x234>
 c00516a:	68fb      	ldr	r3, [r7, #12]
 c00516c:	2201      	movs	r2, #1
 c00516e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 c005172:	68fb      	ldr	r3, [r7, #12]
 c005174:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005178:	b2db      	uxtb	r3, r3
 c00517a:	2b01      	cmp	r3, #1
 c00517c:	d002      	beq.n	c005184 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 c00517e:	2302      	movs	r3, #2
 c005180:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005182:	e0e2      	b.n	c00534a <HAL_SPI_Receive_DMA+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 c005184:	68bb      	ldr	r3, [r7, #8]
 c005186:	2b00      	cmp	r3, #0
 c005188:	d002      	beq.n	c005190 <HAL_SPI_Receive_DMA+0x70>
 c00518a:	88fb      	ldrh	r3, [r7, #6]
 c00518c:	2b00      	cmp	r3, #0
 c00518e:	d102      	bne.n	c005196 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 c005190:	2301      	movs	r3, #1
 c005192:	75fb      	strb	r3, [r7, #23]
    goto error;
 c005194:	e0d9      	b.n	c00534a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 c005196:	68fb      	ldr	r3, [r7, #12]
 c005198:	2204      	movs	r2, #4
 c00519a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c00519e:	68fb      	ldr	r3, [r7, #12]
 c0051a0:	2200      	movs	r2, #0
 c0051a2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 c0051a4:	68fb      	ldr	r3, [r7, #12]
 c0051a6:	68ba      	ldr	r2, [r7, #8]
 c0051a8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c0051aa:	68fb      	ldr	r3, [r7, #12]
 c0051ac:	88fa      	ldrh	r2, [r7, #6]
 c0051ae:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c0051b2:	68fb      	ldr	r3, [r7, #12]
 c0051b4:	88fa      	ldrh	r2, [r7, #6]
 c0051b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c0051ba:	68fb      	ldr	r3, [r7, #12]
 c0051bc:	2200      	movs	r2, #0
 c0051be:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c0051c0:	68fb      	ldr	r3, [r7, #12]
 c0051c2:	2200      	movs	r2, #0
 c0051c4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 c0051c6:	68fb      	ldr	r3, [r7, #12]
 c0051c8:	2200      	movs	r2, #0
 c0051ca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 c0051cc:	68fb      	ldr	r3, [r7, #12]
 c0051ce:	2200      	movs	r2, #0
 c0051d0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0051d2:	68fb      	ldr	r3, [r7, #12]
 c0051d4:	689b      	ldr	r3, [r3, #8]
 c0051d6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0051da:	d10f      	bne.n	c0051fc <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 c0051dc:	68fb      	ldr	r3, [r7, #12]
 c0051de:	681b      	ldr	r3, [r3, #0]
 c0051e0:	681a      	ldr	r2, [r3, #0]
 c0051e2:	68fb      	ldr	r3, [r7, #12]
 c0051e4:	681b      	ldr	r3, [r3, #0]
 c0051e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0051ea:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 c0051ec:	68fb      	ldr	r3, [r7, #12]
 c0051ee:	681b      	ldr	r3, [r3, #0]
 c0051f0:	681a      	ldr	r2, [r3, #0]
 c0051f2:	68fb      	ldr	r3, [r7, #12]
 c0051f4:	681b      	ldr	r3, [r3, #0]
 c0051f6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c0051fa:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c0051fc:	68fb      	ldr	r3, [r7, #12]
 c0051fe:	681b      	ldr	r3, [r3, #0]
 c005200:	685a      	ldr	r2, [r3, #4]
 c005202:	68fb      	ldr	r3, [r7, #12]
 c005204:	681b      	ldr	r3, [r3, #0]
 c005206:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c00520a:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c00520c:	68fb      	ldr	r3, [r7, #12]
 c00520e:	68db      	ldr	r3, [r3, #12]
 c005210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c005214:	d908      	bls.n	c005228 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005216:	68fb      	ldr	r3, [r7, #12]
 c005218:	681b      	ldr	r3, [r3, #0]
 c00521a:	685a      	ldr	r2, [r3, #4]
 c00521c:	68fb      	ldr	r3, [r7, #12]
 c00521e:	681b      	ldr	r3, [r3, #0]
 c005220:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005224:	605a      	str	r2, [r3, #4]
 c005226:	e042      	b.n	c0052ae <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005228:	68fb      	ldr	r3, [r7, #12]
 c00522a:	681b      	ldr	r3, [r3, #0]
 c00522c:	685a      	ldr	r2, [r3, #4]
 c00522e:	68fb      	ldr	r3, [r7, #12]
 c005230:	681b      	ldr	r3, [r3, #0]
 c005232:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c005236:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005238:	68fb      	ldr	r3, [r7, #12]
 c00523a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00523c:	699b      	ldr	r3, [r3, #24]
 c00523e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005242:	d134      	bne.n	c0052ae <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005244:	68fb      	ldr	r3, [r7, #12]
 c005246:	681b      	ldr	r3, [r3, #0]
 c005248:	685a      	ldr	r2, [r3, #4]
 c00524a:	68fb      	ldr	r3, [r7, #12]
 c00524c:	681b      	ldr	r3, [r3, #0]
 c00524e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c005252:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c005254:	68fb      	ldr	r3, [r7, #12]
 c005256:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c00525a:	b29b      	uxth	r3, r3
 c00525c:	f003 0301 	and.w	r3, r3, #1
 c005260:	2b00      	cmp	r3, #0
 c005262:	d111      	bne.n	c005288 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005264:	68fb      	ldr	r3, [r7, #12]
 c005266:	681b      	ldr	r3, [r3, #0]
 c005268:	685a      	ldr	r2, [r3, #4]
 c00526a:	68fb      	ldr	r3, [r7, #12]
 c00526c:	681b      	ldr	r3, [r3, #0]
 c00526e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005272:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c005274:	68fb      	ldr	r3, [r7, #12]
 c005276:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c00527a:	b29b      	uxth	r3, r3
 c00527c:	085b      	lsrs	r3, r3, #1
 c00527e:	b29a      	uxth	r2, r3
 c005280:	68fb      	ldr	r3, [r7, #12]
 c005282:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c005286:	e012      	b.n	c0052ae <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c005288:	68fb      	ldr	r3, [r7, #12]
 c00528a:	681b      	ldr	r3, [r3, #0]
 c00528c:	685a      	ldr	r2, [r3, #4]
 c00528e:	68fb      	ldr	r3, [r7, #12]
 c005290:	681b      	ldr	r3, [r3, #0]
 c005292:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005296:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c005298:	68fb      	ldr	r3, [r7, #12]
 c00529a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c00529e:	b29b      	uxth	r3, r3
 c0052a0:	085b      	lsrs	r3, r3, #1
 c0052a2:	b29b      	uxth	r3, r3
 c0052a4:	3301      	adds	r3, #1
 c0052a6:	b29a      	uxth	r2, r3
 c0052a8:	68fb      	ldr	r3, [r7, #12]
 c0052aa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c0052ae:	68fb      	ldr	r3, [r7, #12]
 c0052b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0052b2:	4a2a      	ldr	r2, [pc, #168]	; (c00535c <HAL_SPI_Receive_DMA+0x23c>)
 c0052b4:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 c0052b6:	68fb      	ldr	r3, [r7, #12]
 c0052b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0052ba:	4a29      	ldr	r2, [pc, #164]	; (c005360 <HAL_SPI_Receive_DMA+0x240>)
 c0052bc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c0052be:	68fb      	ldr	r3, [r7, #12]
 c0052c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0052c2:	4a28      	ldr	r2, [pc, #160]	; (c005364 <HAL_SPI_Receive_DMA+0x244>)
 c0052c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c0052c6:	68fb      	ldr	r3, [r7, #12]
 c0052c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0052ca:	2200      	movs	r2, #0
 c0052cc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c0052ce:	68fb      	ldr	r3, [r7, #12]
 c0052d0:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c0052d2:	68fb      	ldr	r3, [r7, #12]
 c0052d4:	681b      	ldr	r3, [r3, #0]
 c0052d6:	330c      	adds	r3, #12
 c0052d8:	4619      	mov	r1, r3
 c0052da:	68fb      	ldr	r3, [r7, #12]
 c0052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c0052de:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c0052e0:	68fb      	ldr	r3, [r7, #12]
 c0052e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c0052e6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c0052e8:	f7fd f9b0 	bl	c00264c <HAL_DMA_Start_IT>
 c0052ec:	4603      	mov	r3, r0
 c0052ee:	2b00      	cmp	r3, #0
 c0052f0:	d00c      	beq.n	c00530c <HAL_SPI_Receive_DMA+0x1ec>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c0052f2:	68fb      	ldr	r3, [r7, #12]
 c0052f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0052f6:	f043 0210 	orr.w	r2, r3, #16
 c0052fa:	68fb      	ldr	r3, [r7, #12]
 c0052fc:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c0052fe:	2301      	movs	r3, #1
 c005300:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005302:	68fb      	ldr	r3, [r7, #12]
 c005304:	2201      	movs	r2, #1
 c005306:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c00530a:	e01e      	b.n	c00534a <HAL_SPI_Receive_DMA+0x22a>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c00530c:	68fb      	ldr	r3, [r7, #12]
 c00530e:	681b      	ldr	r3, [r3, #0]
 c005310:	681b      	ldr	r3, [r3, #0]
 c005312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005316:	2b40      	cmp	r3, #64	; 0x40
 c005318:	d007      	beq.n	c00532a <HAL_SPI_Receive_DMA+0x20a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c00531a:	68fb      	ldr	r3, [r7, #12]
 c00531c:	681b      	ldr	r3, [r3, #0]
 c00531e:	681a      	ldr	r2, [r3, #0]
 c005320:	68fb      	ldr	r3, [r7, #12]
 c005322:	681b      	ldr	r3, [r3, #0]
 c005324:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c005328:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c00532a:	68fb      	ldr	r3, [r7, #12]
 c00532c:	681b      	ldr	r3, [r3, #0]
 c00532e:	685a      	ldr	r2, [r3, #4]
 c005330:	68fb      	ldr	r3, [r7, #12]
 c005332:	681b      	ldr	r3, [r3, #0]
 c005334:	f042 0220 	orr.w	r2, r2, #32
 c005338:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c00533a:	68fb      	ldr	r3, [r7, #12]
 c00533c:	681b      	ldr	r3, [r3, #0]
 c00533e:	685a      	ldr	r2, [r3, #4]
 c005340:	68fb      	ldr	r3, [r7, #12]
 c005342:	681b      	ldr	r3, [r3, #0]
 c005344:	f042 0201 	orr.w	r2, r2, #1
 c005348:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c00534a:	68fb      	ldr	r3, [r7, #12]
 c00534c:	2200      	movs	r2, #0
 c00534e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005352:	7dfb      	ldrb	r3, [r7, #23]
}
 c005354:	4618      	mov	r0, r3
 c005356:	3718      	adds	r7, #24
 c005358:	46bd      	mov	sp, r7
 c00535a:	bd80      	pop	{r7, pc}
 c00535c:	0c0058cb 	.word	0x0c0058cb
 c005360:	0c005777 	.word	0x0c005777
 c005364:	0c005903 	.word	0x0c005903

0c005368 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 c005368:	b580      	push	{r7, lr}
 c00536a:	b086      	sub	sp, #24
 c00536c:	af00      	add	r7, sp, #0
 c00536e:	60f8      	str	r0, [r7, #12]
 c005370:	60b9      	str	r1, [r7, #8]
 c005372:	607a      	str	r2, [r7, #4]
 c005374:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 c005376:	2300      	movs	r3, #0
 c005378:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 c00537a:	68fb      	ldr	r3, [r7, #12]
 c00537c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c005380:	2b01      	cmp	r3, #1
 c005382:	d101      	bne.n	c005388 <HAL_SPI_TransmitReceive_DMA+0x20>
 c005384:	2302      	movs	r3, #2
 c005386:	e16c      	b.n	c005662 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 c005388:	68fb      	ldr	r3, [r7, #12]
 c00538a:	2201      	movs	r2, #1
 c00538c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 c005390:	68fb      	ldr	r3, [r7, #12]
 c005392:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005396:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 c005398:	68fb      	ldr	r3, [r7, #12]
 c00539a:	685b      	ldr	r3, [r3, #4]
 c00539c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 c00539e:	7dbb      	ldrb	r3, [r7, #22]
 c0053a0:	2b01      	cmp	r3, #1
 c0053a2:	d00d      	beq.n	c0053c0 <HAL_SPI_TransmitReceive_DMA+0x58>
 c0053a4:	693b      	ldr	r3, [r7, #16]
 c0053a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0053aa:	d106      	bne.n	c0053ba <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 c0053ac:	68fb      	ldr	r3, [r7, #12]
 c0053ae:	689b      	ldr	r3, [r3, #8]
 c0053b0:	2b00      	cmp	r3, #0
 c0053b2:	d102      	bne.n	c0053ba <HAL_SPI_TransmitReceive_DMA+0x52>
 c0053b4:	7dbb      	ldrb	r3, [r7, #22]
 c0053b6:	2b04      	cmp	r3, #4
 c0053b8:	d002      	beq.n	c0053c0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 c0053ba:	2302      	movs	r3, #2
 c0053bc:	75fb      	strb	r3, [r7, #23]
    goto error;
 c0053be:	e14b      	b.n	c005658 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 c0053c0:	68bb      	ldr	r3, [r7, #8]
 c0053c2:	2b00      	cmp	r3, #0
 c0053c4:	d005      	beq.n	c0053d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c0053c6:	687b      	ldr	r3, [r7, #4]
 c0053c8:	2b00      	cmp	r3, #0
 c0053ca:	d002      	beq.n	c0053d2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c0053cc:	887b      	ldrh	r3, [r7, #2]
 c0053ce:	2b00      	cmp	r3, #0
 c0053d0:	d102      	bne.n	c0053d8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 c0053d2:	2301      	movs	r3, #1
 c0053d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 c0053d6:	e13f      	b.n	c005658 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 c0053d8:	68fb      	ldr	r3, [r7, #12]
 c0053da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0053de:	b2db      	uxtb	r3, r3
 c0053e0:	2b04      	cmp	r3, #4
 c0053e2:	d003      	beq.n	c0053ec <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 c0053e4:	68fb      	ldr	r3, [r7, #12]
 c0053e6:	2205      	movs	r2, #5
 c0053e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c0053ec:	68fb      	ldr	r3, [r7, #12]
 c0053ee:	2200      	movs	r2, #0
 c0053f0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 c0053f2:	68fb      	ldr	r3, [r7, #12]
 c0053f4:	68ba      	ldr	r2, [r7, #8]
 c0053f6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c0053f8:	68fb      	ldr	r3, [r7, #12]
 c0053fa:	887a      	ldrh	r2, [r7, #2]
 c0053fc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c0053fe:	68fb      	ldr	r3, [r7, #12]
 c005400:	887a      	ldrh	r2, [r7, #2]
 c005402:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 c005404:	68fb      	ldr	r3, [r7, #12]
 c005406:	687a      	ldr	r2, [r7, #4]
 c005408:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c00540a:	68fb      	ldr	r3, [r7, #12]
 c00540c:	887a      	ldrh	r2, [r7, #2]
 c00540e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c005412:	68fb      	ldr	r3, [r7, #12]
 c005414:	887a      	ldrh	r2, [r7, #2]
 c005416:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c00541a:	68fb      	ldr	r3, [r7, #12]
 c00541c:	2200      	movs	r2, #0
 c00541e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c005420:	68fb      	ldr	r3, [r7, #12]
 c005422:	2200      	movs	r2, #0
 c005424:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 c005426:	68fb      	ldr	r3, [r7, #12]
 c005428:	681b      	ldr	r3, [r3, #0]
 c00542a:	685a      	ldr	r2, [r3, #4]
 c00542c:	68fb      	ldr	r3, [r7, #12]
 c00542e:	681b      	ldr	r3, [r3, #0]
 c005430:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c005434:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c005436:	68fb      	ldr	r3, [r7, #12]
 c005438:	68db      	ldr	r3, [r3, #12]
 c00543a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c00543e:	d908      	bls.n	c005452 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005440:	68fb      	ldr	r3, [r7, #12]
 c005442:	681b      	ldr	r3, [r3, #0]
 c005444:	685a      	ldr	r2, [r3, #4]
 c005446:	68fb      	ldr	r3, [r7, #12]
 c005448:	681b      	ldr	r3, [r3, #0]
 c00544a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c00544e:	605a      	str	r2, [r3, #4]
 c005450:	e06f      	b.n	c005532 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c005452:	68fb      	ldr	r3, [r7, #12]
 c005454:	681b      	ldr	r3, [r3, #0]
 c005456:	685a      	ldr	r2, [r3, #4]
 c005458:	68fb      	ldr	r3, [r7, #12]
 c00545a:	681b      	ldr	r3, [r3, #0]
 c00545c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c005460:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c005462:	68fb      	ldr	r3, [r7, #12]
 c005464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c005466:	699b      	ldr	r3, [r3, #24]
 c005468:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00546c:	d126      	bne.n	c0054bc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 c00546e:	68fb      	ldr	r3, [r7, #12]
 c005470:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 c005472:	f003 0301 	and.w	r3, r3, #1
 c005476:	2b00      	cmp	r3, #0
 c005478:	d10f      	bne.n	c00549a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c00547a:	68fb      	ldr	r3, [r7, #12]
 c00547c:	681b      	ldr	r3, [r3, #0]
 c00547e:	685a      	ldr	r2, [r3, #4]
 c005480:	68fb      	ldr	r3, [r7, #12]
 c005482:	681b      	ldr	r3, [r3, #0]
 c005484:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c005488:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 c00548a:	68fb      	ldr	r3, [r7, #12]
 c00548c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c00548e:	b29b      	uxth	r3, r3
 c005490:	085b      	lsrs	r3, r3, #1
 c005492:	b29a      	uxth	r2, r3
 c005494:	68fb      	ldr	r3, [r7, #12]
 c005496:	87da      	strh	r2, [r3, #62]	; 0x3e
 c005498:	e010      	b.n	c0054bc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c00549a:	68fb      	ldr	r3, [r7, #12]
 c00549c:	681b      	ldr	r3, [r3, #0]
 c00549e:	685a      	ldr	r2, [r3, #4]
 c0054a0:	68fb      	ldr	r3, [r7, #12]
 c0054a2:	681b      	ldr	r3, [r3, #0]
 c0054a4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c0054a8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c0054aa:	68fb      	ldr	r3, [r7, #12]
 c0054ac:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0054ae:	b29b      	uxth	r3, r3
 c0054b0:	085b      	lsrs	r3, r3, #1
 c0054b2:	b29b      	uxth	r3, r3
 c0054b4:	3301      	adds	r3, #1
 c0054b6:	b29a      	uxth	r2, r3
 c0054b8:	68fb      	ldr	r3, [r7, #12]
 c0054ba:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c0054bc:	68fb      	ldr	r3, [r7, #12]
 c0054be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0054c0:	699b      	ldr	r3, [r3, #24]
 c0054c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0054c6:	d134      	bne.n	c005532 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c0054c8:	68fb      	ldr	r3, [r7, #12]
 c0054ca:	681b      	ldr	r3, [r3, #0]
 c0054cc:	685a      	ldr	r2, [r3, #4]
 c0054ce:	68fb      	ldr	r3, [r7, #12]
 c0054d0:	681b      	ldr	r3, [r3, #0]
 c0054d2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c0054d6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c0054d8:	68fb      	ldr	r3, [r7, #12]
 c0054da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c0054de:	b29b      	uxth	r3, r3
 c0054e0:	f003 0301 	and.w	r3, r3, #1
 c0054e4:	2b00      	cmp	r3, #0
 c0054e6:	d111      	bne.n	c00550c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c0054e8:	68fb      	ldr	r3, [r7, #12]
 c0054ea:	681b      	ldr	r3, [r3, #0]
 c0054ec:	685a      	ldr	r2, [r3, #4]
 c0054ee:	68fb      	ldr	r3, [r7, #12]
 c0054f0:	681b      	ldr	r3, [r3, #0]
 c0054f2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0054f6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c0054f8:	68fb      	ldr	r3, [r7, #12]
 c0054fa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c0054fe:	b29b      	uxth	r3, r3
 c005500:	085b      	lsrs	r3, r3, #1
 c005502:	b29a      	uxth	r2, r3
 c005504:	68fb      	ldr	r3, [r7, #12]
 c005506:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c00550a:	e012      	b.n	c005532 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c00550c:	68fb      	ldr	r3, [r7, #12]
 c00550e:	681b      	ldr	r3, [r3, #0]
 c005510:	685a      	ldr	r2, [r3, #4]
 c005512:	68fb      	ldr	r3, [r7, #12]
 c005514:	681b      	ldr	r3, [r3, #0]
 c005516:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c00551a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c00551c:	68fb      	ldr	r3, [r7, #12]
 c00551e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005522:	b29b      	uxth	r3, r3
 c005524:	085b      	lsrs	r3, r3, #1
 c005526:	b29b      	uxth	r3, r3
 c005528:	3301      	adds	r3, #1
 c00552a:	b29a      	uxth	r2, r3
 c00552c:	68fb      	ldr	r3, [r7, #12]
 c00552e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 c005532:	68fb      	ldr	r3, [r7, #12]
 c005534:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c005538:	b2db      	uxtb	r3, r3
 c00553a:	2b04      	cmp	r3, #4
 c00553c:	d108      	bne.n	c005550 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c00553e:	68fb      	ldr	r3, [r7, #12]
 c005540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005542:	4a4a      	ldr	r2, [pc, #296]	; (c00566c <HAL_SPI_TransmitReceive_DMA+0x304>)
 c005544:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 c005546:	68fb      	ldr	r3, [r7, #12]
 c005548:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00554a:	4a49      	ldr	r2, [pc, #292]	; (c005670 <HAL_SPI_TransmitReceive_DMA+0x308>)
 c00554c:	62da      	str	r2, [r3, #44]	; 0x2c
 c00554e:	e007      	b.n	c005560 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 c005550:	68fb      	ldr	r3, [r7, #12]
 c005552:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005554:	4a47      	ldr	r2, [pc, #284]	; (c005674 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 c005556:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 c005558:	68fb      	ldr	r3, [r7, #12]
 c00555a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00555c:	4a46      	ldr	r2, [pc, #280]	; (c005678 <HAL_SPI_TransmitReceive_DMA+0x310>)
 c00555e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c005560:	68fb      	ldr	r3, [r7, #12]
 c005562:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c005564:	4a45      	ldr	r2, [pc, #276]	; (c00567c <HAL_SPI_TransmitReceive_DMA+0x314>)
 c005566:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c005568:	68fb      	ldr	r3, [r7, #12]
 c00556a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00556c:	2200      	movs	r2, #0
 c00556e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c005570:	68fb      	ldr	r3, [r7, #12]
 c005572:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c005574:	68fb      	ldr	r3, [r7, #12]
 c005576:	681b      	ldr	r3, [r3, #0]
 c005578:	330c      	adds	r3, #12
 c00557a:	4619      	mov	r1, r3
 c00557c:	68fb      	ldr	r3, [r7, #12]
 c00557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c005580:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c005582:	68fb      	ldr	r3, [r7, #12]
 c005584:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c005588:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c00558a:	f7fd f85f 	bl	c00264c <HAL_DMA_Start_IT>
 c00558e:	4603      	mov	r3, r0
 c005590:	2b00      	cmp	r3, #0
 c005592:	d00c      	beq.n	c0055ae <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005594:	68fb      	ldr	r3, [r7, #12]
 c005596:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005598:	f043 0210 	orr.w	r2, r3, #16
 c00559c:	68fb      	ldr	r3, [r7, #12]
 c00559e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c0055a0:	2301      	movs	r3, #1
 c0055a2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c0055a4:	68fb      	ldr	r3, [r7, #12]
 c0055a6:	2201      	movs	r2, #1
 c0055a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c0055ac:	e054      	b.n	c005658 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c0055ae:	68fb      	ldr	r3, [r7, #12]
 c0055b0:	681b      	ldr	r3, [r3, #0]
 c0055b2:	685a      	ldr	r2, [r3, #4]
 c0055b4:	68fb      	ldr	r3, [r7, #12]
 c0055b6:	681b      	ldr	r3, [r3, #0]
 c0055b8:	f042 0201 	orr.w	r2, r2, #1
 c0055bc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 c0055be:	68fb      	ldr	r3, [r7, #12]
 c0055c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0055c2:	2200      	movs	r2, #0
 c0055c4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 c0055c6:	68fb      	ldr	r3, [r7, #12]
 c0055c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0055ca:	2200      	movs	r2, #0
 c0055cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 c0055ce:	68fb      	ldr	r3, [r7, #12]
 c0055d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0055d2:	2200      	movs	r2, #0
 c0055d4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 c0055d6:	68fb      	ldr	r3, [r7, #12]
 c0055d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0055da:	2200      	movs	r2, #0
 c0055dc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c0055de:	68fb      	ldr	r3, [r7, #12]
 c0055e0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c0055e2:	68fb      	ldr	r3, [r7, #12]
 c0055e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0055e6:	4619      	mov	r1, r3
 c0055e8:	68fb      	ldr	r3, [r7, #12]
 c0055ea:	681b      	ldr	r3, [r3, #0]
 c0055ec:	330c      	adds	r3, #12
 c0055ee:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c0055f0:	68fb      	ldr	r3, [r7, #12]
 c0055f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0055f4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c0055f6:	f7fd f829 	bl	c00264c <HAL_DMA_Start_IT>
 c0055fa:	4603      	mov	r3, r0
 c0055fc:	2b00      	cmp	r3, #0
 c0055fe:	d00c      	beq.n	c00561a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005600:	68fb      	ldr	r3, [r7, #12]
 c005602:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005604:	f043 0210 	orr.w	r2, r3, #16
 c005608:	68fb      	ldr	r3, [r7, #12]
 c00560a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c00560c:	2301      	movs	r3, #1
 c00560e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c005610:	68fb      	ldr	r3, [r7, #12]
 c005612:	2201      	movs	r2, #1
 c005614:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c005618:	e01e      	b.n	c005658 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c00561a:	68fb      	ldr	r3, [r7, #12]
 c00561c:	681b      	ldr	r3, [r3, #0]
 c00561e:	681b      	ldr	r3, [r3, #0]
 c005620:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005624:	2b40      	cmp	r3, #64	; 0x40
 c005626:	d007      	beq.n	c005638 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c005628:	68fb      	ldr	r3, [r7, #12]
 c00562a:	681b      	ldr	r3, [r3, #0]
 c00562c:	681a      	ldr	r2, [r3, #0]
 c00562e:	68fb      	ldr	r3, [r7, #12]
 c005630:	681b      	ldr	r3, [r3, #0]
 c005632:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c005636:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c005638:	68fb      	ldr	r3, [r7, #12]
 c00563a:	681b      	ldr	r3, [r3, #0]
 c00563c:	685a      	ldr	r2, [r3, #4]
 c00563e:	68fb      	ldr	r3, [r7, #12]
 c005640:	681b      	ldr	r3, [r3, #0]
 c005642:	f042 0220 	orr.w	r2, r2, #32
 c005646:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c005648:	68fb      	ldr	r3, [r7, #12]
 c00564a:	681b      	ldr	r3, [r3, #0]
 c00564c:	685a      	ldr	r2, [r3, #4]
 c00564e:	68fb      	ldr	r3, [r7, #12]
 c005650:	681b      	ldr	r3, [r3, #0]
 c005652:	f042 0202 	orr.w	r2, r2, #2
 c005656:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c005658:	68fb      	ldr	r3, [r7, #12]
 c00565a:	2200      	movs	r2, #0
 c00565c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c005660:	7dfb      	ldrb	r3, [r7, #23]
}
 c005662:	4618      	mov	r0, r3
 c005664:	3718      	adds	r7, #24
 c005666:	46bd      	mov	sp, r7
 c005668:	bd80      	pop	{r7, pc}
 c00566a:	bf00      	nop
 c00566c:	0c0058cb 	.word	0x0c0058cb
 c005670:	0c005777 	.word	0x0c005777
 c005674:	0c0058e7 	.word	0x0c0058e7
 c005678:	0c00581f 	.word	0x0c00581f
 c00567c:	0c005903 	.word	0x0c005903

0c005680 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c005680:	b480      	push	{r7}
 c005682:	b083      	sub	sp, #12
 c005684:	af00      	add	r7, sp, #0
 c005686:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 c005688:	bf00      	nop
 c00568a:	370c      	adds	r7, #12
 c00568c:	46bd      	mov	sp, r7
 c00568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005692:	4770      	bx	lr

0c005694 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c005694:	b480      	push	{r7}
 c005696:	b083      	sub	sp, #12
 c005698:	af00      	add	r7, sp, #0
 c00569a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 c00569c:	bf00      	nop
 c00569e:	370c      	adds	r7, #12
 c0056a0:	46bd      	mov	sp, r7
 c0056a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056a6:	4770      	bx	lr

0c0056a8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c0056a8:	b480      	push	{r7}
 c0056aa:	b083      	sub	sp, #12
 c0056ac:	af00      	add	r7, sp, #0
 c0056ae:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 c0056b0:	bf00      	nop
 c0056b2:	370c      	adds	r7, #12
 c0056b4:	46bd      	mov	sp, r7
 c0056b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056ba:	4770      	bx	lr

0c0056bc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 c0056bc:	b480      	push	{r7}
 c0056be:	b083      	sub	sp, #12
 c0056c0:	af00      	add	r7, sp, #0
 c0056c2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 c0056c4:	bf00      	nop
 c0056c6:	370c      	adds	r7, #12
 c0056c8:	46bd      	mov	sp, r7
 c0056ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0056ce:	4770      	bx	lr

0c0056d0 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 c0056d0:	b580      	push	{r7, lr}
 c0056d2:	b086      	sub	sp, #24
 c0056d4:	af00      	add	r7, sp, #0
 c0056d6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0056d8:	687b      	ldr	r3, [r7, #4]
 c0056da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0056dc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c0056de:	f7fc fdf1 	bl	c0022c4 <HAL_GetTick>
 c0056e2:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c0056e4:	687b      	ldr	r3, [r7, #4]
 c0056e6:	681b      	ldr	r3, [r3, #0]
 c0056e8:	681b      	ldr	r3, [r3, #0]
 c0056ea:	f003 0320 	and.w	r3, r3, #32
 c0056ee:	2b20      	cmp	r3, #32
 c0056f0:	d03b      	beq.n	c00576a <SPI_DMATransmitCplt+0x9a>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c0056f2:	697b      	ldr	r3, [r7, #20]
 c0056f4:	681b      	ldr	r3, [r3, #0]
 c0056f6:	685a      	ldr	r2, [r3, #4]
 c0056f8:	697b      	ldr	r3, [r7, #20]
 c0056fa:	681b      	ldr	r3, [r3, #0]
 c0056fc:	f022 0220 	bic.w	r2, r2, #32
 c005700:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c005702:	697b      	ldr	r3, [r7, #20]
 c005704:	681b      	ldr	r3, [r3, #0]
 c005706:	685a      	ldr	r2, [r3, #4]
 c005708:	697b      	ldr	r3, [r7, #20]
 c00570a:	681b      	ldr	r3, [r3, #0]
 c00570c:	f022 0202 	bic.w	r2, r2, #2
 c005710:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c005712:	693a      	ldr	r2, [r7, #16]
 c005714:	2164      	movs	r1, #100	; 0x64
 c005716:	6978      	ldr	r0, [r7, #20]
 c005718:	f000 fa8a 	bl	c005c30 <SPI_EndRxTxTransaction>
 c00571c:	4603      	mov	r3, r0
 c00571e:	2b00      	cmp	r3, #0
 c005720:	d005      	beq.n	c00572e <SPI_DMATransmitCplt+0x5e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005722:	697b      	ldr	r3, [r7, #20]
 c005724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005726:	f043 0220 	orr.w	r2, r3, #32
 c00572a:	697b      	ldr	r3, [r7, #20]
 c00572c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 c00572e:	697b      	ldr	r3, [r7, #20]
 c005730:	689b      	ldr	r3, [r3, #8]
 c005732:	2b00      	cmp	r3, #0
 c005734:	d10a      	bne.n	c00574c <SPI_DMATransmitCplt+0x7c>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 c005736:	2300      	movs	r3, #0
 c005738:	60fb      	str	r3, [r7, #12]
 c00573a:	697b      	ldr	r3, [r7, #20]
 c00573c:	681b      	ldr	r3, [r3, #0]
 c00573e:	68db      	ldr	r3, [r3, #12]
 c005740:	60fb      	str	r3, [r7, #12]
 c005742:	697b      	ldr	r3, [r7, #20]
 c005744:	681b      	ldr	r3, [r3, #0]
 c005746:	689b      	ldr	r3, [r3, #8]
 c005748:	60fb      	str	r3, [r7, #12]
 c00574a:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 c00574c:	697b      	ldr	r3, [r7, #20]
 c00574e:	2200      	movs	r2, #0
 c005750:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 c005752:	697b      	ldr	r3, [r7, #20]
 c005754:	2201      	movs	r2, #1
 c005756:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c00575a:	697b      	ldr	r3, [r7, #20]
 c00575c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00575e:	2b00      	cmp	r3, #0
 c005760:	d003      	beq.n	c00576a <SPI_DMATransmitCplt+0x9a>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c005762:	6978      	ldr	r0, [r7, #20]
 c005764:	f7ff ffaa 	bl	c0056bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c005768:	e002      	b.n	c005770 <SPI_DMATransmitCplt+0xa0>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 c00576a:	6978      	ldr	r0, [r7, #20]
 c00576c:	f7fb faea 	bl	c000d44 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c005770:	3718      	adds	r7, #24
 c005772:	46bd      	mov	sp, r7
 c005774:	bd80      	pop	{r7, pc}

0c005776 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c005776:	b580      	push	{r7, lr}
 c005778:	b084      	sub	sp, #16
 c00577a:	af00      	add	r7, sp, #0
 c00577c:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00577e:	687b      	ldr	r3, [r7, #4]
 c005780:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005782:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c005784:	f7fc fd9e 	bl	c0022c4 <HAL_GetTick>
 c005788:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c00578a:	687b      	ldr	r3, [r7, #4]
 c00578c:	681b      	ldr	r3, [r3, #0]
 c00578e:	681b      	ldr	r3, [r3, #0]
 c005790:	f003 0320 	and.w	r3, r3, #32
 c005794:	2b20      	cmp	r3, #32
 c005796:	d03c      	beq.n	c005812 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c005798:	68fb      	ldr	r3, [r7, #12]
 c00579a:	681b      	ldr	r3, [r3, #0]
 c00579c:	685a      	ldr	r2, [r3, #4]
 c00579e:	68fb      	ldr	r3, [r7, #12]
 c0057a0:	681b      	ldr	r3, [r3, #0]
 c0057a2:	f022 0220 	bic.w	r2, r2, #32
 c0057a6:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c0057a8:	68fb      	ldr	r3, [r7, #12]
 c0057aa:	689b      	ldr	r3, [r3, #8]
 c0057ac:	2b00      	cmp	r3, #0
 c0057ae:	d10d      	bne.n	c0057cc <SPI_DMAReceiveCplt+0x56>
 c0057b0:	68fb      	ldr	r3, [r7, #12]
 c0057b2:	685b      	ldr	r3, [r3, #4]
 c0057b4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0057b8:	d108      	bne.n	c0057cc <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c0057ba:	68fb      	ldr	r3, [r7, #12]
 c0057bc:	681b      	ldr	r3, [r3, #0]
 c0057be:	685a      	ldr	r2, [r3, #4]
 c0057c0:	68fb      	ldr	r3, [r7, #12]
 c0057c2:	681b      	ldr	r3, [r3, #0]
 c0057c4:	f022 0203 	bic.w	r2, r2, #3
 c0057c8:	605a      	str	r2, [r3, #4]
 c0057ca:	e007      	b.n	c0057dc <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c0057cc:	68fb      	ldr	r3, [r7, #12]
 c0057ce:	681b      	ldr	r3, [r3, #0]
 c0057d0:	685a      	ldr	r2, [r3, #4]
 c0057d2:	68fb      	ldr	r3, [r7, #12]
 c0057d4:	681b      	ldr	r3, [r3, #0]
 c0057d6:	f022 0201 	bic.w	r2, r2, #1
 c0057da:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c0057dc:	68ba      	ldr	r2, [r7, #8]
 c0057de:	2164      	movs	r1, #100	; 0x64
 c0057e0:	68f8      	ldr	r0, [r7, #12]
 c0057e2:	f000 f9cd 	bl	c005b80 <SPI_EndRxTransaction>
 c0057e6:	4603      	mov	r3, r0
 c0057e8:	2b00      	cmp	r3, #0
 c0057ea:	d002      	beq.n	c0057f2 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 c0057ec:	68fb      	ldr	r3, [r7, #12]
 c0057ee:	2220      	movs	r2, #32
 c0057f0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 c0057f2:	68fb      	ldr	r3, [r7, #12]
 c0057f4:	2200      	movs	r2, #0
 c0057f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c0057fa:	68fb      	ldr	r3, [r7, #12]
 c0057fc:	2201      	movs	r2, #1
 c0057fe:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c005802:	68fb      	ldr	r3, [r7, #12]
 c005804:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005806:	2b00      	cmp	r3, #0
 c005808:	d003      	beq.n	c005812 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c00580a:	68f8      	ldr	r0, [r7, #12]
 c00580c:	f7ff ff56 	bl	c0056bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c005810:	e002      	b.n	c005818 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 c005812:	68f8      	ldr	r0, [r7, #12]
 c005814:	f7fb faa6 	bl	c000d64 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c005818:	3710      	adds	r7, #16
 c00581a:	46bd      	mov	sp, r7
 c00581c:	bd80      	pop	{r7, pc}

0c00581e <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c00581e:	b580      	push	{r7, lr}
 c005820:	b084      	sub	sp, #16
 c005822:	af00      	add	r7, sp, #0
 c005824:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c005826:	687b      	ldr	r3, [r7, #4]
 c005828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00582a:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c00582c:	f7fc fd4a 	bl	c0022c4 <HAL_GetTick>
 c005830:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c005832:	687b      	ldr	r3, [r7, #4]
 c005834:	681b      	ldr	r3, [r3, #0]
 c005836:	681b      	ldr	r3, [r3, #0]
 c005838:	f003 0320 	and.w	r3, r3, #32
 c00583c:	2b20      	cmp	r3, #32
 c00583e:	d030      	beq.n	c0058a2 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c005840:	68fb      	ldr	r3, [r7, #12]
 c005842:	681b      	ldr	r3, [r3, #0]
 c005844:	685a      	ldr	r2, [r3, #4]
 c005846:	68fb      	ldr	r3, [r7, #12]
 c005848:	681b      	ldr	r3, [r3, #0]
 c00584a:	f022 0220 	bic.w	r2, r2, #32
 c00584e:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c005850:	68ba      	ldr	r2, [r7, #8]
 c005852:	2164      	movs	r1, #100	; 0x64
 c005854:	68f8      	ldr	r0, [r7, #12]
 c005856:	f000 f9eb 	bl	c005c30 <SPI_EndRxTxTransaction>
 c00585a:	4603      	mov	r3, r0
 c00585c:	2b00      	cmp	r3, #0
 c00585e:	d005      	beq.n	c00586c <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005860:	68fb      	ldr	r3, [r7, #12]
 c005862:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005864:	f043 0220 	orr.w	r2, r3, #32
 c005868:	68fb      	ldr	r3, [r7, #12]
 c00586a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c00586c:	68fb      	ldr	r3, [r7, #12]
 c00586e:	681b      	ldr	r3, [r3, #0]
 c005870:	685a      	ldr	r2, [r3, #4]
 c005872:	68fb      	ldr	r3, [r7, #12]
 c005874:	681b      	ldr	r3, [r3, #0]
 c005876:	f022 0203 	bic.w	r2, r2, #3
 c00587a:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 c00587c:	68fb      	ldr	r3, [r7, #12]
 c00587e:	2200      	movs	r2, #0
 c005880:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 c005882:	68fb      	ldr	r3, [r7, #12]
 c005884:	2200      	movs	r2, #0
 c005886:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c00588a:	68fb      	ldr	r3, [r7, #12]
 c00588c:	2201      	movs	r2, #1
 c00588e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c005892:	68fb      	ldr	r3, [r7, #12]
 c005894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005896:	2b00      	cmp	r3, #0
 c005898:	d003      	beq.n	c0058a2 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c00589a:	68f8      	ldr	r0, [r7, #12]
 c00589c:	f7ff ff0e 	bl	c0056bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c0058a0:	e002      	b.n	c0058a8 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 c0058a2:	68f8      	ldr	r0, [r7, #12]
 c0058a4:	f7fb fa3e 	bl	c000d24 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0058a8:	3710      	adds	r7, #16
 c0058aa:	46bd      	mov	sp, r7
 c0058ac:	bd80      	pop	{r7, pc}

0c0058ae <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 c0058ae:	b580      	push	{r7, lr}
 c0058b0:	b084      	sub	sp, #16
 c0058b2:	af00      	add	r7, sp, #0
 c0058b4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0058b6:	687b      	ldr	r3, [r7, #4]
 c0058b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0058ba:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 c0058bc:	68f8      	ldr	r0, [r7, #12]
 c0058be:	f7ff fedf 	bl	c005680 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0058c2:	bf00      	nop
 c0058c4:	3710      	adds	r7, #16
 c0058c6:	46bd      	mov	sp, r7
 c0058c8:	bd80      	pop	{r7, pc}

0c0058ca <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0058ca:	b580      	push	{r7, lr}
 c0058cc:	b084      	sub	sp, #16
 c0058ce:	af00      	add	r7, sp, #0
 c0058d0:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0058d2:	687b      	ldr	r3, [r7, #4]
 c0058d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0058d6:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 c0058d8:	68f8      	ldr	r0, [r7, #12]
 c0058da:	f7ff fedb 	bl	c005694 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0058de:	bf00      	nop
 c0058e0:	3710      	adds	r7, #16
 c0058e2:	46bd      	mov	sp, r7
 c0058e4:	bd80      	pop	{r7, pc}

0c0058e6 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0058e6:	b580      	push	{r7, lr}
 c0058e8:	b084      	sub	sp, #16
 c0058ea:	af00      	add	r7, sp, #0
 c0058ec:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0058ee:	687b      	ldr	r3, [r7, #4]
 c0058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0058f2:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 c0058f4:	68f8      	ldr	r0, [r7, #12]
 c0058f6:	f7ff fed7 	bl	c0056a8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c0058fa:	bf00      	nop
 c0058fc:	3710      	adds	r7, #16
 c0058fe:	46bd      	mov	sp, r7
 c005900:	bd80      	pop	{r7, pc}

0c005902 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 c005902:	b580      	push	{r7, lr}
 c005904:	b084      	sub	sp, #16
 c005906:	af00      	add	r7, sp, #0
 c005908:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00590a:	687b      	ldr	r3, [r7, #4]
 c00590c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00590e:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c005910:	68fb      	ldr	r3, [r7, #12]
 c005912:	681b      	ldr	r3, [r3, #0]
 c005914:	685a      	ldr	r2, [r3, #4]
 c005916:	68fb      	ldr	r3, [r7, #12]
 c005918:	681b      	ldr	r3, [r3, #0]
 c00591a:	f022 0203 	bic.w	r2, r2, #3
 c00591e:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c005920:	68fb      	ldr	r3, [r7, #12]
 c005922:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005924:	f043 0210 	orr.w	r2, r3, #16
 c005928:	68fb      	ldr	r3, [r7, #12]
 c00592a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 c00592c:	68fb      	ldr	r3, [r7, #12]
 c00592e:	2201      	movs	r2, #1
 c005930:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 c005934:	68f8      	ldr	r0, [r7, #12]
 c005936:	f7ff fec1 	bl	c0056bc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c00593a:	bf00      	nop
 c00593c:	3710      	adds	r7, #16
 c00593e:	46bd      	mov	sp, r7
 c005940:	bd80      	pop	{r7, pc}
	...

0c005944 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c005944:	b580      	push	{r7, lr}
 c005946:	b088      	sub	sp, #32
 c005948:	af00      	add	r7, sp, #0
 c00594a:	60f8      	str	r0, [r7, #12]
 c00594c:	60b9      	str	r1, [r7, #8]
 c00594e:	603b      	str	r3, [r7, #0]
 c005950:	4613      	mov	r3, r2
 c005952:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 c005954:	f7fc fcb6 	bl	c0022c4 <HAL_GetTick>
 c005958:	4602      	mov	r2, r0
 c00595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c00595c:	1a9b      	subs	r3, r3, r2
 c00595e:	683a      	ldr	r2, [r7, #0]
 c005960:	4413      	add	r3, r2
 c005962:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 c005964:	f7fc fcae 	bl	c0022c4 <HAL_GetTick>
 c005968:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 c00596a:	4b39      	ldr	r3, [pc, #228]	; (c005a50 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 c00596c:	681b      	ldr	r3, [r3, #0]
 c00596e:	015b      	lsls	r3, r3, #5
 c005970:	0d1b      	lsrs	r3, r3, #20
 c005972:	69fa      	ldr	r2, [r7, #28]
 c005974:	fb02 f303 	mul.w	r3, r2, r3
 c005978:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c00597a:	e054      	b.n	c005a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 c00597c:	683b      	ldr	r3, [r7, #0]
 c00597e:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005982:	d050      	beq.n	c005a26 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c005984:	f7fc fc9e 	bl	c0022c4 <HAL_GetTick>
 c005988:	4602      	mov	r2, r0
 c00598a:	69bb      	ldr	r3, [r7, #24]
 c00598c:	1ad3      	subs	r3, r2, r3
 c00598e:	69fa      	ldr	r2, [r7, #28]
 c005990:	429a      	cmp	r2, r3
 c005992:	d902      	bls.n	c00599a <SPI_WaitFlagStateUntilTimeout+0x56>
 c005994:	69fb      	ldr	r3, [r7, #28]
 c005996:	2b00      	cmp	r3, #0
 c005998:	d13d      	bne.n	c005a16 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c00599a:	68fb      	ldr	r3, [r7, #12]
 c00599c:	681b      	ldr	r3, [r3, #0]
 c00599e:	685a      	ldr	r2, [r3, #4]
 c0059a0:	68fb      	ldr	r3, [r7, #12]
 c0059a2:	681b      	ldr	r3, [r3, #0]
 c0059a4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c0059a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0059aa:	68fb      	ldr	r3, [r7, #12]
 c0059ac:	685b      	ldr	r3, [r3, #4]
 c0059ae:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0059b2:	d111      	bne.n	c0059d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 c0059b4:	68fb      	ldr	r3, [r7, #12]
 c0059b6:	689b      	ldr	r3, [r3, #8]
 c0059b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0059bc:	d004      	beq.n	c0059c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0059be:	68fb      	ldr	r3, [r7, #12]
 c0059c0:	689b      	ldr	r3, [r3, #8]
 c0059c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0059c6:	d107      	bne.n	c0059d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c0059c8:	68fb      	ldr	r3, [r7, #12]
 c0059ca:	681b      	ldr	r3, [r3, #0]
 c0059cc:	681a      	ldr	r2, [r3, #0]
 c0059ce:	68fb      	ldr	r3, [r7, #12]
 c0059d0:	681b      	ldr	r3, [r3, #0]
 c0059d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0059d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c0059d8:	68fb      	ldr	r3, [r7, #12]
 c0059da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0059dc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0059e0:	d10f      	bne.n	c005a02 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 c0059e2:	68fb      	ldr	r3, [r7, #12]
 c0059e4:	681b      	ldr	r3, [r3, #0]
 c0059e6:	681a      	ldr	r2, [r3, #0]
 c0059e8:	68fb      	ldr	r3, [r7, #12]
 c0059ea:	681b      	ldr	r3, [r3, #0]
 c0059ec:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0059f0:	601a      	str	r2, [r3, #0]
 c0059f2:	68fb      	ldr	r3, [r7, #12]
 c0059f4:	681b      	ldr	r3, [r3, #0]
 c0059f6:	681a      	ldr	r2, [r3, #0]
 c0059f8:	68fb      	ldr	r3, [r7, #12]
 c0059fa:	681b      	ldr	r3, [r3, #0]
 c0059fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005a00:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c005a02:	68fb      	ldr	r3, [r7, #12]
 c005a04:	2201      	movs	r2, #1
 c005a06:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c005a0a:	68fb      	ldr	r3, [r7, #12]
 c005a0c:	2200      	movs	r2, #0
 c005a0e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c005a12:	2303      	movs	r3, #3
 c005a14:	e017      	b.n	c005a46 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c005a16:	697b      	ldr	r3, [r7, #20]
 c005a18:	2b00      	cmp	r3, #0
 c005a1a:	d101      	bne.n	c005a20 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 c005a1c:	2300      	movs	r3, #0
 c005a1e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 c005a20:	697b      	ldr	r3, [r7, #20]
 c005a22:	3b01      	subs	r3, #1
 c005a24:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c005a26:	68fb      	ldr	r3, [r7, #12]
 c005a28:	681b      	ldr	r3, [r3, #0]
 c005a2a:	689a      	ldr	r2, [r3, #8]
 c005a2c:	68bb      	ldr	r3, [r7, #8]
 c005a2e:	4013      	ands	r3, r2
 c005a30:	68ba      	ldr	r2, [r7, #8]
 c005a32:	429a      	cmp	r2, r3
 c005a34:	bf0c      	ite	eq
 c005a36:	2301      	moveq	r3, #1
 c005a38:	2300      	movne	r3, #0
 c005a3a:	b2db      	uxtb	r3, r3
 c005a3c:	461a      	mov	r2, r3
 c005a3e:	79fb      	ldrb	r3, [r7, #7]
 c005a40:	429a      	cmp	r2, r3
 c005a42:	d19b      	bne.n	c00597c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 c005a44:	2300      	movs	r3, #0
}
 c005a46:	4618      	mov	r0, r3
 c005a48:	3720      	adds	r7, #32
 c005a4a:	46bd      	mov	sp, r7
 c005a4c:	bd80      	pop	{r7, pc}
 c005a4e:	bf00      	nop
 c005a50:	30000038 	.word	0x30000038

0c005a54 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c005a54:	b580      	push	{r7, lr}
 c005a56:	b08a      	sub	sp, #40	; 0x28
 c005a58:	af00      	add	r7, sp, #0
 c005a5a:	60f8      	str	r0, [r7, #12]
 c005a5c:	60b9      	str	r1, [r7, #8]
 c005a5e:	607a      	str	r2, [r7, #4]
 c005a60:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 c005a62:	2300      	movs	r3, #0
 c005a64:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 c005a66:	f7fc fc2d 	bl	c0022c4 <HAL_GetTick>
 c005a6a:	4602      	mov	r2, r0
 c005a6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c005a6e:	1a9b      	subs	r3, r3, r2
 c005a70:	683a      	ldr	r2, [r7, #0]
 c005a72:	4413      	add	r3, r2
 c005a74:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 c005a76:	f7fc fc25 	bl	c0022c4 <HAL_GetTick>
 c005a7a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 c005a7c:	68fb      	ldr	r3, [r7, #12]
 c005a7e:	681b      	ldr	r3, [r3, #0]
 c005a80:	330c      	adds	r3, #12
 c005a82:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 c005a84:	4b3d      	ldr	r3, [pc, #244]	; (c005b7c <SPI_WaitFifoStateUntilTimeout+0x128>)
 c005a86:	681a      	ldr	r2, [r3, #0]
 c005a88:	4613      	mov	r3, r2
 c005a8a:	009b      	lsls	r3, r3, #2
 c005a8c:	4413      	add	r3, r2
 c005a8e:	00da      	lsls	r2, r3, #3
 c005a90:	1ad3      	subs	r3, r2, r3
 c005a92:	0d1b      	lsrs	r3, r3, #20
 c005a94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005a96:	fb02 f303 	mul.w	r3, r2, r3
 c005a9a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 c005a9c:	e060      	b.n	c005b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 c005a9e:	68bb      	ldr	r3, [r7, #8]
 c005aa0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c005aa4:	d107      	bne.n	c005ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
 c005aa6:	687b      	ldr	r3, [r7, #4]
 c005aa8:	2b00      	cmp	r3, #0
 c005aaa:	d104      	bne.n	c005ab6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 c005aac:	69fb      	ldr	r3, [r7, #28]
 c005aae:	781b      	ldrb	r3, [r3, #0]
 c005ab0:	b2db      	uxtb	r3, r3
 c005ab2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 c005ab4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 c005ab6:	683b      	ldr	r3, [r7, #0]
 c005ab8:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005abc:	d050      	beq.n	c005b60 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c005abe:	f7fc fc01 	bl	c0022c4 <HAL_GetTick>
 c005ac2:	4602      	mov	r2, r0
 c005ac4:	6a3b      	ldr	r3, [r7, #32]
 c005ac6:	1ad3      	subs	r3, r2, r3
 c005ac8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005aca:	429a      	cmp	r2, r3
 c005acc:	d902      	bls.n	c005ad4 <SPI_WaitFifoStateUntilTimeout+0x80>
 c005ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005ad0:	2b00      	cmp	r3, #0
 c005ad2:	d13d      	bne.n	c005b50 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c005ad4:	68fb      	ldr	r3, [r7, #12]
 c005ad6:	681b      	ldr	r3, [r3, #0]
 c005ad8:	685a      	ldr	r2, [r3, #4]
 c005ada:	68fb      	ldr	r3, [r7, #12]
 c005adc:	681b      	ldr	r3, [r3, #0]
 c005ade:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c005ae2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005ae4:	68fb      	ldr	r3, [r7, #12]
 c005ae6:	685b      	ldr	r3, [r3, #4]
 c005ae8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005aec:	d111      	bne.n	c005b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
 c005aee:	68fb      	ldr	r3, [r7, #12]
 c005af0:	689b      	ldr	r3, [r3, #8]
 c005af2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005af6:	d004      	beq.n	c005b02 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c005af8:	68fb      	ldr	r3, [r7, #12]
 c005afa:	689b      	ldr	r3, [r3, #8]
 c005afc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005b00:	d107      	bne.n	c005b12 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c005b02:	68fb      	ldr	r3, [r7, #12]
 c005b04:	681b      	ldr	r3, [r3, #0]
 c005b06:	681a      	ldr	r2, [r3, #0]
 c005b08:	68fb      	ldr	r3, [r7, #12]
 c005b0a:	681b      	ldr	r3, [r3, #0]
 c005b0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005b10:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c005b12:	68fb      	ldr	r3, [r7, #12]
 c005b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005b1a:	d10f      	bne.n	c005b3c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 c005b1c:	68fb      	ldr	r3, [r7, #12]
 c005b1e:	681b      	ldr	r3, [r3, #0]
 c005b20:	681a      	ldr	r2, [r3, #0]
 c005b22:	68fb      	ldr	r3, [r7, #12]
 c005b24:	681b      	ldr	r3, [r3, #0]
 c005b26:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005b2a:	601a      	str	r2, [r3, #0]
 c005b2c:	68fb      	ldr	r3, [r7, #12]
 c005b2e:	681b      	ldr	r3, [r3, #0]
 c005b30:	681a      	ldr	r2, [r3, #0]
 c005b32:	68fb      	ldr	r3, [r7, #12]
 c005b34:	681b      	ldr	r3, [r3, #0]
 c005b36:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c005b3a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c005b3c:	68fb      	ldr	r3, [r7, #12]
 c005b3e:	2201      	movs	r2, #1
 c005b40:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c005b44:	68fb      	ldr	r3, [r7, #12]
 c005b46:	2200      	movs	r2, #0
 c005b48:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c005b4c:	2303      	movs	r3, #3
 c005b4e:	e010      	b.n	c005b72 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c005b50:	69bb      	ldr	r3, [r7, #24]
 c005b52:	2b00      	cmp	r3, #0
 c005b54:	d101      	bne.n	c005b5a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 c005b56:	2300      	movs	r3, #0
 c005b58:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 c005b5a:	69bb      	ldr	r3, [r7, #24]
 c005b5c:	3b01      	subs	r3, #1
 c005b5e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 c005b60:	68fb      	ldr	r3, [r7, #12]
 c005b62:	681b      	ldr	r3, [r3, #0]
 c005b64:	689a      	ldr	r2, [r3, #8]
 c005b66:	68bb      	ldr	r3, [r7, #8]
 c005b68:	4013      	ands	r3, r2
 c005b6a:	687a      	ldr	r2, [r7, #4]
 c005b6c:	429a      	cmp	r2, r3
 c005b6e:	d196      	bne.n	c005a9e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 c005b70:	2300      	movs	r3, #0
}
 c005b72:	4618      	mov	r0, r3
 c005b74:	3728      	adds	r7, #40	; 0x28
 c005b76:	46bd      	mov	sp, r7
 c005b78:	bd80      	pop	{r7, pc}
 c005b7a:	bf00      	nop
 c005b7c:	30000038 	.word	0x30000038

0c005b80 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 c005b80:	b580      	push	{r7, lr}
 c005b82:	b086      	sub	sp, #24
 c005b84:	af02      	add	r7, sp, #8
 c005b86:	60f8      	str	r0, [r7, #12]
 c005b88:	60b9      	str	r1, [r7, #8]
 c005b8a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005b8c:	68fb      	ldr	r3, [r7, #12]
 c005b8e:	685b      	ldr	r3, [r3, #4]
 c005b90:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005b94:	d111      	bne.n	c005bba <SPI_EndRxTransaction+0x3a>
 c005b96:	68fb      	ldr	r3, [r7, #12]
 c005b98:	689b      	ldr	r3, [r3, #8]
 c005b9a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005b9e:	d004      	beq.n	c005baa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c005ba0:	68fb      	ldr	r3, [r7, #12]
 c005ba2:	689b      	ldr	r3, [r3, #8]
 c005ba4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005ba8:	d107      	bne.n	c005bba <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 c005baa:	68fb      	ldr	r3, [r7, #12]
 c005bac:	681b      	ldr	r3, [r3, #0]
 c005bae:	681a      	ldr	r2, [r3, #0]
 c005bb0:	68fb      	ldr	r3, [r7, #12]
 c005bb2:	681b      	ldr	r3, [r3, #0]
 c005bb4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005bb8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c005bba:	687b      	ldr	r3, [r7, #4]
 c005bbc:	9300      	str	r3, [sp, #0]
 c005bbe:	68bb      	ldr	r3, [r7, #8]
 c005bc0:	2200      	movs	r2, #0
 c005bc2:	2180      	movs	r1, #128	; 0x80
 c005bc4:	68f8      	ldr	r0, [r7, #12]
 c005bc6:	f7ff febd 	bl	c005944 <SPI_WaitFlagStateUntilTimeout>
 c005bca:	4603      	mov	r3, r0
 c005bcc:	2b00      	cmp	r3, #0
 c005bce:	d007      	beq.n	c005be0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005bd0:	68fb      	ldr	r3, [r7, #12]
 c005bd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005bd4:	f043 0220 	orr.w	r2, r3, #32
 c005bd8:	68fb      	ldr	r3, [r7, #12]
 c005bda:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005bdc:	2303      	movs	r3, #3
 c005bde:	e023      	b.n	c005c28 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005be0:	68fb      	ldr	r3, [r7, #12]
 c005be2:	685b      	ldr	r3, [r3, #4]
 c005be4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005be8:	d11d      	bne.n	c005c26 <SPI_EndRxTransaction+0xa6>
 c005bea:	68fb      	ldr	r3, [r7, #12]
 c005bec:	689b      	ldr	r3, [r3, #8]
 c005bee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005bf2:	d004      	beq.n	c005bfe <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c005bf4:	68fb      	ldr	r3, [r7, #12]
 c005bf6:	689b      	ldr	r3, [r3, #8]
 c005bf8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005bfc:	d113      	bne.n	c005c26 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005bfe:	687b      	ldr	r3, [r7, #4]
 c005c00:	9300      	str	r3, [sp, #0]
 c005c02:	68bb      	ldr	r3, [r7, #8]
 c005c04:	2200      	movs	r2, #0
 c005c06:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c005c0a:	68f8      	ldr	r0, [r7, #12]
 c005c0c:	f7ff ff22 	bl	c005a54 <SPI_WaitFifoStateUntilTimeout>
 c005c10:	4603      	mov	r3, r0
 c005c12:	2b00      	cmp	r3, #0
 c005c14:	d007      	beq.n	c005c26 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005c16:	68fb      	ldr	r3, [r7, #12]
 c005c18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005c1a:	f043 0220 	orr.w	r2, r3, #32
 c005c1e:	68fb      	ldr	r3, [r7, #12]
 c005c20:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 c005c22:	2303      	movs	r3, #3
 c005c24:	e000      	b.n	c005c28 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 c005c26:	2300      	movs	r3, #0
}
 c005c28:	4618      	mov	r0, r3
 c005c2a:	3710      	adds	r7, #16
 c005c2c:	46bd      	mov	sp, r7
 c005c2e:	bd80      	pop	{r7, pc}

0c005c30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 c005c30:	b580      	push	{r7, lr}
 c005c32:	b086      	sub	sp, #24
 c005c34:	af02      	add	r7, sp, #8
 c005c36:	60f8      	str	r0, [r7, #12]
 c005c38:	60b9      	str	r1, [r7, #8]
 c005c3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005c3c:	687b      	ldr	r3, [r7, #4]
 c005c3e:	9300      	str	r3, [sp, #0]
 c005c40:	68bb      	ldr	r3, [r7, #8]
 c005c42:	2200      	movs	r2, #0
 c005c44:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 c005c48:	68f8      	ldr	r0, [r7, #12]
 c005c4a:	f7ff ff03 	bl	c005a54 <SPI_WaitFifoStateUntilTimeout>
 c005c4e:	4603      	mov	r3, r0
 c005c50:	2b00      	cmp	r3, #0
 c005c52:	d007      	beq.n	c005c64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005c54:	68fb      	ldr	r3, [r7, #12]
 c005c56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005c58:	f043 0220 	orr.w	r2, r3, #32
 c005c5c:	68fb      	ldr	r3, [r7, #12]
 c005c5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005c60:	2303      	movs	r3, #3
 c005c62:	e027      	b.n	c005cb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c005c64:	687b      	ldr	r3, [r7, #4]
 c005c66:	9300      	str	r3, [sp, #0]
 c005c68:	68bb      	ldr	r3, [r7, #8]
 c005c6a:	2200      	movs	r2, #0
 c005c6c:	2180      	movs	r1, #128	; 0x80
 c005c6e:	68f8      	ldr	r0, [r7, #12]
 c005c70:	f7ff fe68 	bl	c005944 <SPI_WaitFlagStateUntilTimeout>
 c005c74:	4603      	mov	r3, r0
 c005c76:	2b00      	cmp	r3, #0
 c005c78:	d007      	beq.n	c005c8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005c7a:	68fb      	ldr	r3, [r7, #12]
 c005c7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005c7e:	f043 0220 	orr.w	r2, r3, #32
 c005c82:	68fb      	ldr	r3, [r7, #12]
 c005c84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005c86:	2303      	movs	r3, #3
 c005c88:	e014      	b.n	c005cb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005c8a:	687b      	ldr	r3, [r7, #4]
 c005c8c:	9300      	str	r3, [sp, #0]
 c005c8e:	68bb      	ldr	r3, [r7, #8]
 c005c90:	2200      	movs	r2, #0
 c005c92:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c005c96:	68f8      	ldr	r0, [r7, #12]
 c005c98:	f7ff fedc 	bl	c005a54 <SPI_WaitFifoStateUntilTimeout>
 c005c9c:	4603      	mov	r3, r0
 c005c9e:	2b00      	cmp	r3, #0
 c005ca0:	d007      	beq.n	c005cb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005ca2:	68fb      	ldr	r3, [r7, #12]
 c005ca4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005ca6:	f043 0220 	orr.w	r2, r3, #32
 c005caa:	68fb      	ldr	r3, [r7, #12]
 c005cac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005cae:	2303      	movs	r3, #3
 c005cb0:	e000      	b.n	c005cb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 c005cb2:	2300      	movs	r3, #0
}
 c005cb4:	4618      	mov	r0, r3
 c005cb6:	3710      	adds	r7, #16
 c005cb8:	46bd      	mov	sp, r7
 c005cba:	bd80      	pop	{r7, pc}

0c005cbc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c005cbc:	b580      	push	{r7, lr}
 c005cbe:	b082      	sub	sp, #8
 c005cc0:	af00      	add	r7, sp, #0
 c005cc2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c005cc4:	687b      	ldr	r3, [r7, #4]
 c005cc6:	2b00      	cmp	r3, #0
 c005cc8:	d101      	bne.n	c005cce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c005cca:	2301      	movs	r3, #1
 c005ccc:	e042      	b.n	c005d54 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c005cce:	687b      	ldr	r3, [r7, #4]
 c005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005cd4:	2b00      	cmp	r3, #0
 c005cd6:	d106      	bne.n	c005ce6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c005cd8:	687b      	ldr	r3, [r7, #4]
 c005cda:	2200      	movs	r2, #0
 c005cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c005ce0:	6878      	ldr	r0, [r7, #4]
 c005ce2:	f7fb ff7d 	bl	c001be0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c005ce6:	687b      	ldr	r3, [r7, #4]
 c005ce8:	2224      	movs	r2, #36	; 0x24
 c005cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c005cee:	687b      	ldr	r3, [r7, #4]
 c005cf0:	681b      	ldr	r3, [r3, #0]
 c005cf2:	681a      	ldr	r2, [r3, #0]
 c005cf4:	687b      	ldr	r3, [r7, #4]
 c005cf6:	681b      	ldr	r3, [r3, #0]
 c005cf8:	f022 0201 	bic.w	r2, r2, #1
 c005cfc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c005cfe:	6878      	ldr	r0, [r7, #4]
 c005d00:	f000 f8ba 	bl	c005e78 <UART_SetConfig>
 c005d04:	4603      	mov	r3, r0
 c005d06:	2b01      	cmp	r3, #1
 c005d08:	d101      	bne.n	c005d0e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c005d0a:	2301      	movs	r3, #1
 c005d0c:	e022      	b.n	c005d54 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c005d0e:	687b      	ldr	r3, [r7, #4]
 c005d10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005d12:	2b00      	cmp	r3, #0
 c005d14:	d002      	beq.n	c005d1c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c005d16:	6878      	ldr	r0, [r7, #4]
 c005d18:	f000 fbac 	bl	c006474 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c005d1c:	687b      	ldr	r3, [r7, #4]
 c005d1e:	681b      	ldr	r3, [r3, #0]
 c005d20:	685a      	ldr	r2, [r3, #4]
 c005d22:	687b      	ldr	r3, [r7, #4]
 c005d24:	681b      	ldr	r3, [r3, #0]
 c005d26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c005d2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c005d2c:	687b      	ldr	r3, [r7, #4]
 c005d2e:	681b      	ldr	r3, [r3, #0]
 c005d30:	689a      	ldr	r2, [r3, #8]
 c005d32:	687b      	ldr	r3, [r7, #4]
 c005d34:	681b      	ldr	r3, [r3, #0]
 c005d36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c005d3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c005d3c:	687b      	ldr	r3, [r7, #4]
 c005d3e:	681b      	ldr	r3, [r3, #0]
 c005d40:	681a      	ldr	r2, [r3, #0]
 c005d42:	687b      	ldr	r3, [r7, #4]
 c005d44:	681b      	ldr	r3, [r3, #0]
 c005d46:	f042 0201 	orr.w	r2, r2, #1
 c005d4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c005d4c:	6878      	ldr	r0, [r7, #4]
 c005d4e:	f000 fc33 	bl	c0065b8 <UART_CheckIdleState>
 c005d52:	4603      	mov	r3, r0
}
 c005d54:	4618      	mov	r0, r3
 c005d56:	3708      	adds	r7, #8
 c005d58:	46bd      	mov	sp, r7
 c005d5a:	bd80      	pop	{r7, pc}

0c005d5c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c005d5c:	b580      	push	{r7, lr}
 c005d5e:	b08a      	sub	sp, #40	; 0x28
 c005d60:	af02      	add	r7, sp, #8
 c005d62:	60f8      	str	r0, [r7, #12]
 c005d64:	60b9      	str	r1, [r7, #8]
 c005d66:	603b      	str	r3, [r7, #0]
 c005d68:	4613      	mov	r3, r2
 c005d6a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c005d6c:	68fb      	ldr	r3, [r7, #12]
 c005d6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005d72:	2b20      	cmp	r3, #32
 c005d74:	d17b      	bne.n	c005e6e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c005d76:	68bb      	ldr	r3, [r7, #8]
 c005d78:	2b00      	cmp	r3, #0
 c005d7a:	d002      	beq.n	c005d82 <HAL_UART_Transmit+0x26>
 c005d7c:	88fb      	ldrh	r3, [r7, #6]
 c005d7e:	2b00      	cmp	r3, #0
 c005d80:	d101      	bne.n	c005d86 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c005d82:	2301      	movs	r3, #1
 c005d84:	e074      	b.n	c005e70 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c005d86:	68fb      	ldr	r3, [r7, #12]
 c005d88:	2200      	movs	r2, #0
 c005d8a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c005d8e:	68fb      	ldr	r3, [r7, #12]
 c005d90:	2221      	movs	r2, #33	; 0x21
 c005d92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c005d96:	f7fc fa95 	bl	c0022c4 <HAL_GetTick>
 c005d9a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c005d9c:	68fb      	ldr	r3, [r7, #12]
 c005d9e:	88fa      	ldrh	r2, [r7, #6]
 c005da0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c005da4:	68fb      	ldr	r3, [r7, #12]
 c005da6:	88fa      	ldrh	r2, [r7, #6]
 c005da8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c005dac:	68fb      	ldr	r3, [r7, #12]
 c005dae:	689b      	ldr	r3, [r3, #8]
 c005db0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c005db4:	d108      	bne.n	c005dc8 <HAL_UART_Transmit+0x6c>
 c005db6:	68fb      	ldr	r3, [r7, #12]
 c005db8:	691b      	ldr	r3, [r3, #16]
 c005dba:	2b00      	cmp	r3, #0
 c005dbc:	d104      	bne.n	c005dc8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c005dbe:	2300      	movs	r3, #0
 c005dc0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c005dc2:	68bb      	ldr	r3, [r7, #8]
 c005dc4:	61bb      	str	r3, [r7, #24]
 c005dc6:	e003      	b.n	c005dd0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c005dc8:	68bb      	ldr	r3, [r7, #8]
 c005dca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c005dcc:	2300      	movs	r3, #0
 c005dce:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c005dd0:	e030      	b.n	c005e34 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c005dd2:	683b      	ldr	r3, [r7, #0]
 c005dd4:	9300      	str	r3, [sp, #0]
 c005dd6:	697b      	ldr	r3, [r7, #20]
 c005dd8:	2200      	movs	r2, #0
 c005dda:	2180      	movs	r1, #128	; 0x80
 c005ddc:	68f8      	ldr	r0, [r7, #12]
 c005dde:	f000 fc95 	bl	c00670c <UART_WaitOnFlagUntilTimeout>
 c005de2:	4603      	mov	r3, r0
 c005de4:	2b00      	cmp	r3, #0
 c005de6:	d005      	beq.n	c005df4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c005de8:	68fb      	ldr	r3, [r7, #12]
 c005dea:	2220      	movs	r2, #32
 c005dec:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c005df0:	2303      	movs	r3, #3
 c005df2:	e03d      	b.n	c005e70 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c005df4:	69fb      	ldr	r3, [r7, #28]
 c005df6:	2b00      	cmp	r3, #0
 c005df8:	d10b      	bne.n	c005e12 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c005dfa:	69bb      	ldr	r3, [r7, #24]
 c005dfc:	881b      	ldrh	r3, [r3, #0]
 c005dfe:	461a      	mov	r2, r3
 c005e00:	68fb      	ldr	r3, [r7, #12]
 c005e02:	681b      	ldr	r3, [r3, #0]
 c005e04:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c005e08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c005e0a:	69bb      	ldr	r3, [r7, #24]
 c005e0c:	3302      	adds	r3, #2
 c005e0e:	61bb      	str	r3, [r7, #24]
 c005e10:	e007      	b.n	c005e22 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c005e12:	69fb      	ldr	r3, [r7, #28]
 c005e14:	781a      	ldrb	r2, [r3, #0]
 c005e16:	68fb      	ldr	r3, [r7, #12]
 c005e18:	681b      	ldr	r3, [r3, #0]
 c005e1a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c005e1c:	69fb      	ldr	r3, [r7, #28]
 c005e1e:	3301      	adds	r3, #1
 c005e20:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c005e22:	68fb      	ldr	r3, [r7, #12]
 c005e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c005e28:	b29b      	uxth	r3, r3
 c005e2a:	3b01      	subs	r3, #1
 c005e2c:	b29a      	uxth	r2, r3
 c005e2e:	68fb      	ldr	r3, [r7, #12]
 c005e30:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c005e34:	68fb      	ldr	r3, [r7, #12]
 c005e36:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c005e3a:	b29b      	uxth	r3, r3
 c005e3c:	2b00      	cmp	r3, #0
 c005e3e:	d1c8      	bne.n	c005dd2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c005e40:	683b      	ldr	r3, [r7, #0]
 c005e42:	9300      	str	r3, [sp, #0]
 c005e44:	697b      	ldr	r3, [r7, #20]
 c005e46:	2200      	movs	r2, #0
 c005e48:	2140      	movs	r1, #64	; 0x40
 c005e4a:	68f8      	ldr	r0, [r7, #12]
 c005e4c:	f000 fc5e 	bl	c00670c <UART_WaitOnFlagUntilTimeout>
 c005e50:	4603      	mov	r3, r0
 c005e52:	2b00      	cmp	r3, #0
 c005e54:	d005      	beq.n	c005e62 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c005e56:	68fb      	ldr	r3, [r7, #12]
 c005e58:	2220      	movs	r2, #32
 c005e5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c005e5e:	2303      	movs	r3, #3
 c005e60:	e006      	b.n	c005e70 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c005e62:	68fb      	ldr	r3, [r7, #12]
 c005e64:	2220      	movs	r2, #32
 c005e66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c005e6a:	2300      	movs	r3, #0
 c005e6c:	e000      	b.n	c005e70 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c005e6e:	2302      	movs	r3, #2
  }
}
 c005e70:	4618      	mov	r0, r3
 c005e72:	3720      	adds	r7, #32
 c005e74:	46bd      	mov	sp, r7
 c005e76:	bd80      	pop	{r7, pc}

0c005e78 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c005e78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c005e7c:	b08c      	sub	sp, #48	; 0x30
 c005e7e:	af00      	add	r7, sp, #0
 c005e80:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c005e82:	2300      	movs	r3, #0
 c005e84:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c005e88:	697b      	ldr	r3, [r7, #20]
 c005e8a:	689a      	ldr	r2, [r3, #8]
 c005e8c:	697b      	ldr	r3, [r7, #20]
 c005e8e:	691b      	ldr	r3, [r3, #16]
 c005e90:	431a      	orrs	r2, r3
 c005e92:	697b      	ldr	r3, [r7, #20]
 c005e94:	695b      	ldr	r3, [r3, #20]
 c005e96:	431a      	orrs	r2, r3
 c005e98:	697b      	ldr	r3, [r7, #20]
 c005e9a:	69db      	ldr	r3, [r3, #28]
 c005e9c:	4313      	orrs	r3, r2
 c005e9e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c005ea0:	697b      	ldr	r3, [r7, #20]
 c005ea2:	681b      	ldr	r3, [r3, #0]
 c005ea4:	681a      	ldr	r2, [r3, #0]
 c005ea6:	4baa      	ldr	r3, [pc, #680]	; (c006150 <UART_SetConfig+0x2d8>)
 c005ea8:	4013      	ands	r3, r2
 c005eaa:	697a      	ldr	r2, [r7, #20]
 c005eac:	6812      	ldr	r2, [r2, #0]
 c005eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005eb0:	430b      	orrs	r3, r1
 c005eb2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c005eb4:	697b      	ldr	r3, [r7, #20]
 c005eb6:	681b      	ldr	r3, [r3, #0]
 c005eb8:	685b      	ldr	r3, [r3, #4]
 c005eba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c005ebe:	697b      	ldr	r3, [r7, #20]
 c005ec0:	68da      	ldr	r2, [r3, #12]
 c005ec2:	697b      	ldr	r3, [r7, #20]
 c005ec4:	681b      	ldr	r3, [r3, #0]
 c005ec6:	430a      	orrs	r2, r1
 c005ec8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c005eca:	697b      	ldr	r3, [r7, #20]
 c005ecc:	699b      	ldr	r3, [r3, #24]
 c005ece:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c005ed0:	697b      	ldr	r3, [r7, #20]
 c005ed2:	681b      	ldr	r3, [r3, #0]
 c005ed4:	4a9f      	ldr	r2, [pc, #636]	; (c006154 <UART_SetConfig+0x2dc>)
 c005ed6:	4293      	cmp	r3, r2
 c005ed8:	d004      	beq.n	c005ee4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c005eda:	697b      	ldr	r3, [r7, #20]
 c005edc:	6a1b      	ldr	r3, [r3, #32]
 c005ede:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c005ee0:	4313      	orrs	r3, r2
 c005ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c005ee4:	697b      	ldr	r3, [r7, #20]
 c005ee6:	681b      	ldr	r3, [r3, #0]
 c005ee8:	689b      	ldr	r3, [r3, #8]
 c005eea:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c005eee:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c005ef2:	697a      	ldr	r2, [r7, #20]
 c005ef4:	6812      	ldr	r2, [r2, #0]
 c005ef6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005ef8:	430b      	orrs	r3, r1
 c005efa:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c005efc:	697b      	ldr	r3, [r7, #20]
 c005efe:	681b      	ldr	r3, [r3, #0]
 c005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c005f02:	f023 010f 	bic.w	r1, r3, #15
 c005f06:	697b      	ldr	r3, [r7, #20]
 c005f08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c005f0a:	697b      	ldr	r3, [r7, #20]
 c005f0c:	681b      	ldr	r3, [r3, #0]
 c005f0e:	430a      	orrs	r2, r1
 c005f10:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c005f12:	697b      	ldr	r3, [r7, #20]
 c005f14:	681b      	ldr	r3, [r3, #0]
 c005f16:	4a90      	ldr	r2, [pc, #576]	; (c006158 <UART_SetConfig+0x2e0>)
 c005f18:	4293      	cmp	r3, r2
 c005f1a:	d125      	bne.n	c005f68 <UART_SetConfig+0xf0>
 c005f1c:	4b8f      	ldr	r3, [pc, #572]	; (c00615c <UART_SetConfig+0x2e4>)
 c005f1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f22:	f003 0303 	and.w	r3, r3, #3
 c005f26:	2b03      	cmp	r3, #3
 c005f28:	d81a      	bhi.n	c005f60 <UART_SetConfig+0xe8>
 c005f2a:	a201      	add	r2, pc, #4	; (adr r2, c005f30 <UART_SetConfig+0xb8>)
 c005f2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005f30:	0c005f41 	.word	0x0c005f41
 c005f34:	0c005f51 	.word	0x0c005f51
 c005f38:	0c005f49 	.word	0x0c005f49
 c005f3c:	0c005f59 	.word	0x0c005f59
 c005f40:	2301      	movs	r3, #1
 c005f42:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005f46:	e114      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005f48:	2302      	movs	r3, #2
 c005f4a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005f4e:	e110      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005f50:	2304      	movs	r3, #4
 c005f52:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005f56:	e10c      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005f58:	2308      	movs	r3, #8
 c005f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005f5e:	e108      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005f60:	2310      	movs	r3, #16
 c005f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005f66:	e104      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005f68:	697b      	ldr	r3, [r7, #20]
 c005f6a:	681b      	ldr	r3, [r3, #0]
 c005f6c:	4a7c      	ldr	r2, [pc, #496]	; (c006160 <UART_SetConfig+0x2e8>)
 c005f6e:	4293      	cmp	r3, r2
 c005f70:	d138      	bne.n	c005fe4 <UART_SetConfig+0x16c>
 c005f72:	4b7a      	ldr	r3, [pc, #488]	; (c00615c <UART_SetConfig+0x2e4>)
 c005f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005f78:	f003 030c 	and.w	r3, r3, #12
 c005f7c:	2b0c      	cmp	r3, #12
 c005f7e:	d82d      	bhi.n	c005fdc <UART_SetConfig+0x164>
 c005f80:	a201      	add	r2, pc, #4	; (adr r2, c005f88 <UART_SetConfig+0x110>)
 c005f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005f86:	bf00      	nop
 c005f88:	0c005fbd 	.word	0x0c005fbd
 c005f8c:	0c005fdd 	.word	0x0c005fdd
 c005f90:	0c005fdd 	.word	0x0c005fdd
 c005f94:	0c005fdd 	.word	0x0c005fdd
 c005f98:	0c005fcd 	.word	0x0c005fcd
 c005f9c:	0c005fdd 	.word	0x0c005fdd
 c005fa0:	0c005fdd 	.word	0x0c005fdd
 c005fa4:	0c005fdd 	.word	0x0c005fdd
 c005fa8:	0c005fc5 	.word	0x0c005fc5
 c005fac:	0c005fdd 	.word	0x0c005fdd
 c005fb0:	0c005fdd 	.word	0x0c005fdd
 c005fb4:	0c005fdd 	.word	0x0c005fdd
 c005fb8:	0c005fd5 	.word	0x0c005fd5
 c005fbc:	2300      	movs	r3, #0
 c005fbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005fc2:	e0d6      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005fc4:	2302      	movs	r3, #2
 c005fc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005fca:	e0d2      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005fcc:	2304      	movs	r3, #4
 c005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005fd2:	e0ce      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005fd4:	2308      	movs	r3, #8
 c005fd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005fda:	e0ca      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005fdc:	2310      	movs	r3, #16
 c005fde:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005fe2:	e0c6      	b.n	c006172 <UART_SetConfig+0x2fa>
 c005fe4:	697b      	ldr	r3, [r7, #20]
 c005fe6:	681b      	ldr	r3, [r3, #0]
 c005fe8:	4a5e      	ldr	r2, [pc, #376]	; (c006164 <UART_SetConfig+0x2ec>)
 c005fea:	4293      	cmp	r3, r2
 c005fec:	d125      	bne.n	c00603a <UART_SetConfig+0x1c2>
 c005fee:	4b5b      	ldr	r3, [pc, #364]	; (c00615c <UART_SetConfig+0x2e4>)
 c005ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005ff4:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c005ff8:	2b30      	cmp	r3, #48	; 0x30
 c005ffa:	d016      	beq.n	c00602a <UART_SetConfig+0x1b2>
 c005ffc:	2b30      	cmp	r3, #48	; 0x30
 c005ffe:	d818      	bhi.n	c006032 <UART_SetConfig+0x1ba>
 c006000:	2b20      	cmp	r3, #32
 c006002:	d00a      	beq.n	c00601a <UART_SetConfig+0x1a2>
 c006004:	2b20      	cmp	r3, #32
 c006006:	d814      	bhi.n	c006032 <UART_SetConfig+0x1ba>
 c006008:	2b00      	cmp	r3, #0
 c00600a:	d002      	beq.n	c006012 <UART_SetConfig+0x19a>
 c00600c:	2b10      	cmp	r3, #16
 c00600e:	d008      	beq.n	c006022 <UART_SetConfig+0x1aa>
 c006010:	e00f      	b.n	c006032 <UART_SetConfig+0x1ba>
 c006012:	2300      	movs	r3, #0
 c006014:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006018:	e0ab      	b.n	c006172 <UART_SetConfig+0x2fa>
 c00601a:	2302      	movs	r3, #2
 c00601c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006020:	e0a7      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006022:	2304      	movs	r3, #4
 c006024:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006028:	e0a3      	b.n	c006172 <UART_SetConfig+0x2fa>
 c00602a:	2308      	movs	r3, #8
 c00602c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006030:	e09f      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006032:	2310      	movs	r3, #16
 c006034:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006038:	e09b      	b.n	c006172 <UART_SetConfig+0x2fa>
 c00603a:	697b      	ldr	r3, [r7, #20]
 c00603c:	681b      	ldr	r3, [r3, #0]
 c00603e:	4a4a      	ldr	r2, [pc, #296]	; (c006168 <UART_SetConfig+0x2f0>)
 c006040:	4293      	cmp	r3, r2
 c006042:	d125      	bne.n	c006090 <UART_SetConfig+0x218>
 c006044:	4b45      	ldr	r3, [pc, #276]	; (c00615c <UART_SetConfig+0x2e4>)
 c006046:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00604a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c00604e:	2bc0      	cmp	r3, #192	; 0xc0
 c006050:	d016      	beq.n	c006080 <UART_SetConfig+0x208>
 c006052:	2bc0      	cmp	r3, #192	; 0xc0
 c006054:	d818      	bhi.n	c006088 <UART_SetConfig+0x210>
 c006056:	2b80      	cmp	r3, #128	; 0x80
 c006058:	d00a      	beq.n	c006070 <UART_SetConfig+0x1f8>
 c00605a:	2b80      	cmp	r3, #128	; 0x80
 c00605c:	d814      	bhi.n	c006088 <UART_SetConfig+0x210>
 c00605e:	2b00      	cmp	r3, #0
 c006060:	d002      	beq.n	c006068 <UART_SetConfig+0x1f0>
 c006062:	2b40      	cmp	r3, #64	; 0x40
 c006064:	d008      	beq.n	c006078 <UART_SetConfig+0x200>
 c006066:	e00f      	b.n	c006088 <UART_SetConfig+0x210>
 c006068:	2300      	movs	r3, #0
 c00606a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00606e:	e080      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006070:	2302      	movs	r3, #2
 c006072:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006076:	e07c      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006078:	2304      	movs	r3, #4
 c00607a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00607e:	e078      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006080:	2308      	movs	r3, #8
 c006082:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006086:	e074      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006088:	2310      	movs	r3, #16
 c00608a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00608e:	e070      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006090:	697b      	ldr	r3, [r7, #20]
 c006092:	681b      	ldr	r3, [r3, #0]
 c006094:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c006098:	d12a      	bne.n	c0060f0 <UART_SetConfig+0x278>
 c00609a:	4b30      	ldr	r3, [pc, #192]	; (c00615c <UART_SetConfig+0x2e4>)
 c00609c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0060a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0060a4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0060a8:	d01a      	beq.n	c0060e0 <UART_SetConfig+0x268>
 c0060aa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0060ae:	d81b      	bhi.n	c0060e8 <UART_SetConfig+0x270>
 c0060b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0060b4:	d00c      	beq.n	c0060d0 <UART_SetConfig+0x258>
 c0060b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0060ba:	d815      	bhi.n	c0060e8 <UART_SetConfig+0x270>
 c0060bc:	2b00      	cmp	r3, #0
 c0060be:	d003      	beq.n	c0060c8 <UART_SetConfig+0x250>
 c0060c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0060c4:	d008      	beq.n	c0060d8 <UART_SetConfig+0x260>
 c0060c6:	e00f      	b.n	c0060e8 <UART_SetConfig+0x270>
 c0060c8:	2300      	movs	r3, #0
 c0060ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0060ce:	e050      	b.n	c006172 <UART_SetConfig+0x2fa>
 c0060d0:	2302      	movs	r3, #2
 c0060d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0060d6:	e04c      	b.n	c006172 <UART_SetConfig+0x2fa>
 c0060d8:	2304      	movs	r3, #4
 c0060da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0060de:	e048      	b.n	c006172 <UART_SetConfig+0x2fa>
 c0060e0:	2308      	movs	r3, #8
 c0060e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0060e6:	e044      	b.n	c006172 <UART_SetConfig+0x2fa>
 c0060e8:	2310      	movs	r3, #16
 c0060ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0060ee:	e040      	b.n	c006172 <UART_SetConfig+0x2fa>
 c0060f0:	697b      	ldr	r3, [r7, #20]
 c0060f2:	681b      	ldr	r3, [r3, #0]
 c0060f4:	4a17      	ldr	r2, [pc, #92]	; (c006154 <UART_SetConfig+0x2dc>)
 c0060f6:	4293      	cmp	r3, r2
 c0060f8:	d138      	bne.n	c00616c <UART_SetConfig+0x2f4>
 c0060fa:	4b18      	ldr	r3, [pc, #96]	; (c00615c <UART_SetConfig+0x2e4>)
 c0060fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c006100:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c006104:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c006108:	d01a      	beq.n	c006140 <UART_SetConfig+0x2c8>
 c00610a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c00610e:	d81b      	bhi.n	c006148 <UART_SetConfig+0x2d0>
 c006110:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c006114:	d00c      	beq.n	c006130 <UART_SetConfig+0x2b8>
 c006116:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00611a:	d815      	bhi.n	c006148 <UART_SetConfig+0x2d0>
 c00611c:	2b00      	cmp	r3, #0
 c00611e:	d003      	beq.n	c006128 <UART_SetConfig+0x2b0>
 c006120:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c006124:	d008      	beq.n	c006138 <UART_SetConfig+0x2c0>
 c006126:	e00f      	b.n	c006148 <UART_SetConfig+0x2d0>
 c006128:	2300      	movs	r3, #0
 c00612a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00612e:	e020      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006130:	2302      	movs	r3, #2
 c006132:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006136:	e01c      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006138:	2304      	movs	r3, #4
 c00613a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00613e:	e018      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006140:	2308      	movs	r3, #8
 c006142:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c006146:	e014      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006148:	2310      	movs	r3, #16
 c00614a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00614e:	e010      	b.n	c006172 <UART_SetConfig+0x2fa>
 c006150:	cfff69f3 	.word	0xcfff69f3
 c006154:	50008000 	.word	0x50008000
 c006158:	50013800 	.word	0x50013800
 c00615c:	50021000 	.word	0x50021000
 c006160:	50004400 	.word	0x50004400
 c006164:	50004800 	.word	0x50004800
 c006168:	50004c00 	.word	0x50004c00
 c00616c:	2310      	movs	r3, #16
 c00616e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c006172:	697b      	ldr	r3, [r7, #20]
 c006174:	681b      	ldr	r3, [r3, #0]
 c006176:	4ab0      	ldr	r2, [pc, #704]	; (c006438 <UART_SetConfig+0x5c0>)
 c006178:	4293      	cmp	r3, r2
 c00617a:	f040 809b 	bne.w	c0062b4 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c00617e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c006182:	2b08      	cmp	r3, #8
 c006184:	d827      	bhi.n	c0061d6 <UART_SetConfig+0x35e>
 c006186:	a201      	add	r2, pc, #4	; (adr r2, c00618c <UART_SetConfig+0x314>)
 c006188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00618c:	0c0061b1 	.word	0x0c0061b1
 c006190:	0c0061b9 	.word	0x0c0061b9
 c006194:	0c0061c1 	.word	0x0c0061c1
 c006198:	0c0061d7 	.word	0x0c0061d7
 c00619c:	0c0061c7 	.word	0x0c0061c7
 c0061a0:	0c0061d7 	.word	0x0c0061d7
 c0061a4:	0c0061d7 	.word	0x0c0061d7
 c0061a8:	0c0061d7 	.word	0x0c0061d7
 c0061ac:	0c0061cf 	.word	0x0c0061cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0061b0:	f7fe f80e 	bl	c0041d0 <HAL_RCC_GetPCLK1Freq>
 c0061b4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0061b6:	e014      	b.n	c0061e2 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0061b8:	f7fe f81e 	bl	c0041f8 <HAL_RCC_GetPCLK2Freq>
 c0061bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0061be:	e010      	b.n	c0061e2 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0061c0:	4b9e      	ldr	r3, [pc, #632]	; (c00643c <UART_SetConfig+0x5c4>)
 c0061c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0061c4:	e00d      	b.n	c0061e2 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0061c6:	f7fd ff51 	bl	c00406c <HAL_RCC_GetSysClockFreq>
 c0061ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0061cc:	e009      	b.n	c0061e2 <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0061ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0061d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0061d4:	e005      	b.n	c0061e2 <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c0061d6:	2300      	movs	r3, #0
 c0061d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0061da:	2301      	movs	r3, #1
 c0061dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0061e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c0061e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0061e4:	2b00      	cmp	r3, #0
 c0061e6:	f000 8130 	beq.w	c00644a <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c0061ea:	697b      	ldr	r3, [r7, #20]
 c0061ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0061ee:	4a94      	ldr	r2, [pc, #592]	; (c006440 <UART_SetConfig+0x5c8>)
 c0061f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0061f4:	461a      	mov	r2, r3
 c0061f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0061f8:	fbb3 f3f2 	udiv	r3, r3, r2
 c0061fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0061fe:	697b      	ldr	r3, [r7, #20]
 c006200:	685a      	ldr	r2, [r3, #4]
 c006202:	4613      	mov	r3, r2
 c006204:	005b      	lsls	r3, r3, #1
 c006206:	4413      	add	r3, r2
 c006208:	69ba      	ldr	r2, [r7, #24]
 c00620a:	429a      	cmp	r2, r3
 c00620c:	d305      	bcc.n	c00621a <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c00620e:	697b      	ldr	r3, [r7, #20]
 c006210:	685b      	ldr	r3, [r3, #4]
 c006212:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c006214:	69ba      	ldr	r2, [r7, #24]
 c006216:	429a      	cmp	r2, r3
 c006218:	d903      	bls.n	c006222 <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c00621a:	2301      	movs	r3, #1
 c00621c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c006220:	e113      	b.n	c00644a <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c006222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006224:	2200      	movs	r2, #0
 c006226:	60bb      	str	r3, [r7, #8]
 c006228:	60fa      	str	r2, [r7, #12]
 c00622a:	697b      	ldr	r3, [r7, #20]
 c00622c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00622e:	4a84      	ldr	r2, [pc, #528]	; (c006440 <UART_SetConfig+0x5c8>)
 c006230:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006234:	b29b      	uxth	r3, r3
 c006236:	2200      	movs	r2, #0
 c006238:	603b      	str	r3, [r7, #0]
 c00623a:	607a      	str	r2, [r7, #4]
 c00623c:	e9d7 2300 	ldrd	r2, r3, [r7]
 c006240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c006244:	f7fa f898 	bl	c000378 <__aeabi_uldivmod>
 c006248:	4602      	mov	r2, r0
 c00624a:	460b      	mov	r3, r1
 c00624c:	4610      	mov	r0, r2
 c00624e:	4619      	mov	r1, r3
 c006250:	f04f 0200 	mov.w	r2, #0
 c006254:	f04f 0300 	mov.w	r3, #0
 c006258:	020b      	lsls	r3, r1, #8
 c00625a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c00625e:	0202      	lsls	r2, r0, #8
 c006260:	6979      	ldr	r1, [r7, #20]
 c006262:	6849      	ldr	r1, [r1, #4]
 c006264:	0849      	lsrs	r1, r1, #1
 c006266:	2000      	movs	r0, #0
 c006268:	460c      	mov	r4, r1
 c00626a:	4605      	mov	r5, r0
 c00626c:	eb12 0804 	adds.w	r8, r2, r4
 c006270:	eb43 0905 	adc.w	r9, r3, r5
 c006274:	697b      	ldr	r3, [r7, #20]
 c006276:	685b      	ldr	r3, [r3, #4]
 c006278:	2200      	movs	r2, #0
 c00627a:	469a      	mov	sl, r3
 c00627c:	4693      	mov	fp, r2
 c00627e:	4652      	mov	r2, sl
 c006280:	465b      	mov	r3, fp
 c006282:	4640      	mov	r0, r8
 c006284:	4649      	mov	r1, r9
 c006286:	f7fa f877 	bl	c000378 <__aeabi_uldivmod>
 c00628a:	4602      	mov	r2, r0
 c00628c:	460b      	mov	r3, r1
 c00628e:	4613      	mov	r3, r2
 c006290:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c006292:	6a3b      	ldr	r3, [r7, #32]
 c006294:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c006298:	d308      	bcc.n	c0062ac <UART_SetConfig+0x434>
 c00629a:	6a3b      	ldr	r3, [r7, #32]
 c00629c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0062a0:	d204      	bcs.n	c0062ac <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c0062a2:	697b      	ldr	r3, [r7, #20]
 c0062a4:	681b      	ldr	r3, [r3, #0]
 c0062a6:	6a3a      	ldr	r2, [r7, #32]
 c0062a8:	60da      	str	r2, [r3, #12]
 c0062aa:	e0ce      	b.n	c00644a <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c0062ac:	2301      	movs	r3, #1
 c0062ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c0062b2:	e0ca      	b.n	c00644a <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c0062b4:	697b      	ldr	r3, [r7, #20]
 c0062b6:	69db      	ldr	r3, [r3, #28]
 c0062b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0062bc:	d166      	bne.n	c00638c <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c0062be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c0062c2:	2b08      	cmp	r3, #8
 c0062c4:	d827      	bhi.n	c006316 <UART_SetConfig+0x49e>
 c0062c6:	a201      	add	r2, pc, #4	; (adr r2, c0062cc <UART_SetConfig+0x454>)
 c0062c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0062cc:	0c0062f1 	.word	0x0c0062f1
 c0062d0:	0c0062f9 	.word	0x0c0062f9
 c0062d4:	0c006301 	.word	0x0c006301
 c0062d8:	0c006317 	.word	0x0c006317
 c0062dc:	0c006307 	.word	0x0c006307
 c0062e0:	0c006317 	.word	0x0c006317
 c0062e4:	0c006317 	.word	0x0c006317
 c0062e8:	0c006317 	.word	0x0c006317
 c0062ec:	0c00630f 	.word	0x0c00630f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0062f0:	f7fd ff6e 	bl	c0041d0 <HAL_RCC_GetPCLK1Freq>
 c0062f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0062f6:	e014      	b.n	c006322 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0062f8:	f7fd ff7e 	bl	c0041f8 <HAL_RCC_GetPCLK2Freq>
 c0062fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0062fe:	e010      	b.n	c006322 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c006300:	4b4e      	ldr	r3, [pc, #312]	; (c00643c <UART_SetConfig+0x5c4>)
 c006302:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006304:	e00d      	b.n	c006322 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c006306:	f7fd feb1 	bl	c00406c <HAL_RCC_GetSysClockFreq>
 c00630a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00630c:	e009      	b.n	c006322 <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00630e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c006312:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c006314:	e005      	b.n	c006322 <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c006316:	2300      	movs	r3, #0
 c006318:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c00631a:	2301      	movs	r3, #1
 c00631c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c006320:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c006322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006324:	2b00      	cmp	r3, #0
 c006326:	f000 8090 	beq.w	c00644a <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c00632a:	697b      	ldr	r3, [r7, #20]
 c00632c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00632e:	4a44      	ldr	r2, [pc, #272]	; (c006440 <UART_SetConfig+0x5c8>)
 c006330:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006334:	461a      	mov	r2, r3
 c006336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006338:	fbb3 f3f2 	udiv	r3, r3, r2
 c00633c:	005a      	lsls	r2, r3, #1
 c00633e:	697b      	ldr	r3, [r7, #20]
 c006340:	685b      	ldr	r3, [r3, #4]
 c006342:	085b      	lsrs	r3, r3, #1
 c006344:	441a      	add	r2, r3
 c006346:	697b      	ldr	r3, [r7, #20]
 c006348:	685b      	ldr	r3, [r3, #4]
 c00634a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00634e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c006350:	6a3b      	ldr	r3, [r7, #32]
 c006352:	2b0f      	cmp	r3, #15
 c006354:	d916      	bls.n	c006384 <UART_SetConfig+0x50c>
 c006356:	6a3b      	ldr	r3, [r7, #32]
 c006358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c00635c:	d212      	bcs.n	c006384 <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c00635e:	6a3b      	ldr	r3, [r7, #32]
 c006360:	b29b      	uxth	r3, r3
 c006362:	f023 030f 	bic.w	r3, r3, #15
 c006366:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c006368:	6a3b      	ldr	r3, [r7, #32]
 c00636a:	085b      	lsrs	r3, r3, #1
 c00636c:	b29b      	uxth	r3, r3
 c00636e:	f003 0307 	and.w	r3, r3, #7
 c006372:	b29a      	uxth	r2, r3
 c006374:	8bfb      	ldrh	r3, [r7, #30]
 c006376:	4313      	orrs	r3, r2
 c006378:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c00637a:	697b      	ldr	r3, [r7, #20]
 c00637c:	681b      	ldr	r3, [r3, #0]
 c00637e:	8bfa      	ldrh	r2, [r7, #30]
 c006380:	60da      	str	r2, [r3, #12]
 c006382:	e062      	b.n	c00644a <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c006384:	2301      	movs	r3, #1
 c006386:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c00638a:	e05e      	b.n	c00644a <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c00638c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c006390:	2b08      	cmp	r3, #8
 c006392:	d828      	bhi.n	c0063e6 <UART_SetConfig+0x56e>
 c006394:	a201      	add	r2, pc, #4	; (adr r2, c00639c <UART_SetConfig+0x524>)
 c006396:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00639a:	bf00      	nop
 c00639c:	0c0063c1 	.word	0x0c0063c1
 c0063a0:	0c0063c9 	.word	0x0c0063c9
 c0063a4:	0c0063d1 	.word	0x0c0063d1
 c0063a8:	0c0063e7 	.word	0x0c0063e7
 c0063ac:	0c0063d7 	.word	0x0c0063d7
 c0063b0:	0c0063e7 	.word	0x0c0063e7
 c0063b4:	0c0063e7 	.word	0x0c0063e7
 c0063b8:	0c0063e7 	.word	0x0c0063e7
 c0063bc:	0c0063df 	.word	0x0c0063df
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c0063c0:	f7fd ff06 	bl	c0041d0 <HAL_RCC_GetPCLK1Freq>
 c0063c4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0063c6:	e014      	b.n	c0063f2 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0063c8:	f7fd ff16 	bl	c0041f8 <HAL_RCC_GetPCLK2Freq>
 c0063cc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0063ce:	e010      	b.n	c0063f2 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0063d0:	4b1a      	ldr	r3, [pc, #104]	; (c00643c <UART_SetConfig+0x5c4>)
 c0063d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0063d4:	e00d      	b.n	c0063f2 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0063d6:	f7fd fe49 	bl	c00406c <HAL_RCC_GetSysClockFreq>
 c0063da:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0063dc:	e009      	b.n	c0063f2 <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0063de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0063e2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0063e4:	e005      	b.n	c0063f2 <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c0063e6:	2300      	movs	r3, #0
 c0063e8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0063ea:	2301      	movs	r3, #1
 c0063ec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0063f0:	bf00      	nop
    }

    if (pclk != 0U)
 c0063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0063f4:	2b00      	cmp	r3, #0
 c0063f6:	d028      	beq.n	c00644a <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0063f8:	697b      	ldr	r3, [r7, #20]
 c0063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0063fc:	4a10      	ldr	r2, [pc, #64]	; (c006440 <UART_SetConfig+0x5c8>)
 c0063fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c006402:	461a      	mov	r2, r3
 c006404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006406:	fbb3 f2f2 	udiv	r2, r3, r2
 c00640a:	697b      	ldr	r3, [r7, #20]
 c00640c:	685b      	ldr	r3, [r3, #4]
 c00640e:	085b      	lsrs	r3, r3, #1
 c006410:	441a      	add	r2, r3
 c006412:	697b      	ldr	r3, [r7, #20]
 c006414:	685b      	ldr	r3, [r3, #4]
 c006416:	fbb2 f3f3 	udiv	r3, r2, r3
 c00641a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00641c:	6a3b      	ldr	r3, [r7, #32]
 c00641e:	2b0f      	cmp	r3, #15
 c006420:	d910      	bls.n	c006444 <UART_SetConfig+0x5cc>
 c006422:	6a3b      	ldr	r3, [r7, #32]
 c006424:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c006428:	d20c      	bcs.n	c006444 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c00642a:	6a3b      	ldr	r3, [r7, #32]
 c00642c:	b29a      	uxth	r2, r3
 c00642e:	697b      	ldr	r3, [r7, #20]
 c006430:	681b      	ldr	r3, [r3, #0]
 c006432:	60da      	str	r2, [r3, #12]
 c006434:	e009      	b.n	c00644a <UART_SetConfig+0x5d2>
 c006436:	bf00      	nop
 c006438:	50008000 	.word	0x50008000
 c00643c:	00f42400 	.word	0x00f42400
 c006440:	0c0085e4 	.word	0x0c0085e4
      }
      else
      {
        ret = HAL_ERROR;
 c006444:	2301      	movs	r3, #1
 c006446:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c00644a:	697b      	ldr	r3, [r7, #20]
 c00644c:	2201      	movs	r2, #1
 c00644e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c006452:	697b      	ldr	r3, [r7, #20]
 c006454:	2201      	movs	r2, #1
 c006456:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c00645a:	697b      	ldr	r3, [r7, #20]
 c00645c:	2200      	movs	r2, #0
 c00645e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c006460:	697b      	ldr	r3, [r7, #20]
 c006462:	2200      	movs	r2, #0
 c006464:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c006466:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c00646a:	4618      	mov	r0, r3
 c00646c:	3730      	adds	r7, #48	; 0x30
 c00646e:	46bd      	mov	sp, r7
 c006470:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c006474 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c006474:	b480      	push	{r7}
 c006476:	b083      	sub	sp, #12
 c006478:	af00      	add	r7, sp, #0
 c00647a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c00647c:	687b      	ldr	r3, [r7, #4]
 c00647e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006480:	f003 0301 	and.w	r3, r3, #1
 c006484:	2b00      	cmp	r3, #0
 c006486:	d00a      	beq.n	c00649e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c006488:	687b      	ldr	r3, [r7, #4]
 c00648a:	681b      	ldr	r3, [r3, #0]
 c00648c:	685b      	ldr	r3, [r3, #4]
 c00648e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c006492:	687b      	ldr	r3, [r7, #4]
 c006494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c006496:	687b      	ldr	r3, [r7, #4]
 c006498:	681b      	ldr	r3, [r3, #0]
 c00649a:	430a      	orrs	r2, r1
 c00649c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c00649e:	687b      	ldr	r3, [r7, #4]
 c0064a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0064a2:	f003 0302 	and.w	r3, r3, #2
 c0064a6:	2b00      	cmp	r3, #0
 c0064a8:	d00a      	beq.n	c0064c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c0064aa:	687b      	ldr	r3, [r7, #4]
 c0064ac:	681b      	ldr	r3, [r3, #0]
 c0064ae:	685b      	ldr	r3, [r3, #4]
 c0064b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c0064b4:	687b      	ldr	r3, [r7, #4]
 c0064b6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c0064b8:	687b      	ldr	r3, [r7, #4]
 c0064ba:	681b      	ldr	r3, [r3, #0]
 c0064bc:	430a      	orrs	r2, r1
 c0064be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c0064c0:	687b      	ldr	r3, [r7, #4]
 c0064c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0064c4:	f003 0304 	and.w	r3, r3, #4
 c0064c8:	2b00      	cmp	r3, #0
 c0064ca:	d00a      	beq.n	c0064e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c0064cc:	687b      	ldr	r3, [r7, #4]
 c0064ce:	681b      	ldr	r3, [r3, #0]
 c0064d0:	685b      	ldr	r3, [r3, #4]
 c0064d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c0064d6:	687b      	ldr	r3, [r7, #4]
 c0064d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c0064da:	687b      	ldr	r3, [r7, #4]
 c0064dc:	681b      	ldr	r3, [r3, #0]
 c0064de:	430a      	orrs	r2, r1
 c0064e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c0064e2:	687b      	ldr	r3, [r7, #4]
 c0064e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0064e6:	f003 0308 	and.w	r3, r3, #8
 c0064ea:	2b00      	cmp	r3, #0
 c0064ec:	d00a      	beq.n	c006504 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c0064ee:	687b      	ldr	r3, [r7, #4]
 c0064f0:	681b      	ldr	r3, [r3, #0]
 c0064f2:	685b      	ldr	r3, [r3, #4]
 c0064f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c0064f8:	687b      	ldr	r3, [r7, #4]
 c0064fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c0064fc:	687b      	ldr	r3, [r7, #4]
 c0064fe:	681b      	ldr	r3, [r3, #0]
 c006500:	430a      	orrs	r2, r1
 c006502:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c006504:	687b      	ldr	r3, [r7, #4]
 c006506:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c006508:	f003 0310 	and.w	r3, r3, #16
 c00650c:	2b00      	cmp	r3, #0
 c00650e:	d00a      	beq.n	c006526 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c006510:	687b      	ldr	r3, [r7, #4]
 c006512:	681b      	ldr	r3, [r3, #0]
 c006514:	689b      	ldr	r3, [r3, #8]
 c006516:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c00651a:	687b      	ldr	r3, [r7, #4]
 c00651c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c00651e:	687b      	ldr	r3, [r7, #4]
 c006520:	681b      	ldr	r3, [r3, #0]
 c006522:	430a      	orrs	r2, r1
 c006524:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c006526:	687b      	ldr	r3, [r7, #4]
 c006528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00652a:	f003 0320 	and.w	r3, r3, #32
 c00652e:	2b00      	cmp	r3, #0
 c006530:	d00a      	beq.n	c006548 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c006532:	687b      	ldr	r3, [r7, #4]
 c006534:	681b      	ldr	r3, [r3, #0]
 c006536:	689b      	ldr	r3, [r3, #8]
 c006538:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c00653c:	687b      	ldr	r3, [r7, #4]
 c00653e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c006540:	687b      	ldr	r3, [r7, #4]
 c006542:	681b      	ldr	r3, [r3, #0]
 c006544:	430a      	orrs	r2, r1
 c006546:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c006548:	687b      	ldr	r3, [r7, #4]
 c00654a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00654c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c006550:	2b00      	cmp	r3, #0
 c006552:	d01a      	beq.n	c00658a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c006554:	687b      	ldr	r3, [r7, #4]
 c006556:	681b      	ldr	r3, [r3, #0]
 c006558:	685b      	ldr	r3, [r3, #4]
 c00655a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c00655e:	687b      	ldr	r3, [r7, #4]
 c006560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c006562:	687b      	ldr	r3, [r7, #4]
 c006564:	681b      	ldr	r3, [r3, #0]
 c006566:	430a      	orrs	r2, r1
 c006568:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c00656a:	687b      	ldr	r3, [r7, #4]
 c00656c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c00656e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c006572:	d10a      	bne.n	c00658a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c006574:	687b      	ldr	r3, [r7, #4]
 c006576:	681b      	ldr	r3, [r3, #0]
 c006578:	685b      	ldr	r3, [r3, #4]
 c00657a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c00657e:	687b      	ldr	r3, [r7, #4]
 c006580:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c006582:	687b      	ldr	r3, [r7, #4]
 c006584:	681b      	ldr	r3, [r3, #0]
 c006586:	430a      	orrs	r2, r1
 c006588:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c00658a:	687b      	ldr	r3, [r7, #4]
 c00658c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00658e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c006592:	2b00      	cmp	r3, #0
 c006594:	d00a      	beq.n	c0065ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c006596:	687b      	ldr	r3, [r7, #4]
 c006598:	681b      	ldr	r3, [r3, #0]
 c00659a:	685b      	ldr	r3, [r3, #4]
 c00659c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c0065a0:	687b      	ldr	r3, [r7, #4]
 c0065a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c0065a4:	687b      	ldr	r3, [r7, #4]
 c0065a6:	681b      	ldr	r3, [r3, #0]
 c0065a8:	430a      	orrs	r2, r1
 c0065aa:	605a      	str	r2, [r3, #4]
  }
}
 c0065ac:	bf00      	nop
 c0065ae:	370c      	adds	r7, #12
 c0065b0:	46bd      	mov	sp, r7
 c0065b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0065b6:	4770      	bx	lr

0c0065b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c0065b8:	b580      	push	{r7, lr}
 c0065ba:	b098      	sub	sp, #96	; 0x60
 c0065bc:	af02      	add	r7, sp, #8
 c0065be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c0065c0:	687b      	ldr	r3, [r7, #4]
 c0065c2:	2200      	movs	r2, #0
 c0065c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c0065c8:	f7fb fe7c 	bl	c0022c4 <HAL_GetTick>
 c0065cc:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c0065ce:	687b      	ldr	r3, [r7, #4]
 c0065d0:	681b      	ldr	r3, [r3, #0]
 c0065d2:	681b      	ldr	r3, [r3, #0]
 c0065d4:	f003 0308 	and.w	r3, r3, #8
 c0065d8:	2b08      	cmp	r3, #8
 c0065da:	d12f      	bne.n	c00663c <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c0065dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c0065e0:	9300      	str	r3, [sp, #0]
 c0065e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c0065e4:	2200      	movs	r2, #0
 c0065e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c0065ea:	6878      	ldr	r0, [r7, #4]
 c0065ec:	f000 f88e 	bl	c00670c <UART_WaitOnFlagUntilTimeout>
 c0065f0:	4603      	mov	r3, r0
 c0065f2:	2b00      	cmp	r3, #0
 c0065f4:	d022      	beq.n	c00663c <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c0065f6:	687b      	ldr	r3, [r7, #4]
 c0065f8:	681b      	ldr	r3, [r3, #0]
 c0065fa:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0065fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c0065fe:	e853 3f00 	ldrex	r3, [r3]
 c006602:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c006604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c006606:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c00660a:	653b      	str	r3, [r7, #80]	; 0x50
 c00660c:	687b      	ldr	r3, [r7, #4]
 c00660e:	681b      	ldr	r3, [r3, #0]
 c006610:	461a      	mov	r2, r3
 c006612:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c006614:	647b      	str	r3, [r7, #68]	; 0x44
 c006616:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006618:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c00661a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c00661c:	e841 2300 	strex	r3, r2, [r1]
 c006620:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c006622:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c006624:	2b00      	cmp	r3, #0
 c006626:	d1e6      	bne.n	c0065f6 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c006628:	687b      	ldr	r3, [r7, #4]
 c00662a:	2220      	movs	r2, #32
 c00662c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c006630:	687b      	ldr	r3, [r7, #4]
 c006632:	2200      	movs	r2, #0
 c006634:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c006638:	2303      	movs	r3, #3
 c00663a:	e063      	b.n	c006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c00663c:	687b      	ldr	r3, [r7, #4]
 c00663e:	681b      	ldr	r3, [r3, #0]
 c006640:	681b      	ldr	r3, [r3, #0]
 c006642:	f003 0304 	and.w	r3, r3, #4
 c006646:	2b04      	cmp	r3, #4
 c006648:	d149      	bne.n	c0066de <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c00664a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c00664e:	9300      	str	r3, [sp, #0]
 c006650:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c006652:	2200      	movs	r2, #0
 c006654:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c006658:	6878      	ldr	r0, [r7, #4]
 c00665a:	f000 f857 	bl	c00670c <UART_WaitOnFlagUntilTimeout>
 c00665e:	4603      	mov	r3, r0
 c006660:	2b00      	cmp	r3, #0
 c006662:	d03c      	beq.n	c0066de <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c006664:	687b      	ldr	r3, [r7, #4]
 c006666:	681b      	ldr	r3, [r3, #0]
 c006668:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00666a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00666c:	e853 3f00 	ldrex	r3, [r3]
 c006670:	623b      	str	r3, [r7, #32]
   return(result);
 c006672:	6a3b      	ldr	r3, [r7, #32]
 c006674:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c006678:	64fb      	str	r3, [r7, #76]	; 0x4c
 c00667a:	687b      	ldr	r3, [r7, #4]
 c00667c:	681b      	ldr	r3, [r3, #0]
 c00667e:	461a      	mov	r2, r3
 c006680:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c006682:	633b      	str	r3, [r7, #48]	; 0x30
 c006684:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006686:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c006688:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c00668a:	e841 2300 	strex	r3, r2, [r1]
 c00668e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c006692:	2b00      	cmp	r3, #0
 c006694:	d1e6      	bne.n	c006664 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c006696:	687b      	ldr	r3, [r7, #4]
 c006698:	681b      	ldr	r3, [r3, #0]
 c00669a:	3308      	adds	r3, #8
 c00669c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00669e:	693b      	ldr	r3, [r7, #16]
 c0066a0:	e853 3f00 	ldrex	r3, [r3]
 c0066a4:	60fb      	str	r3, [r7, #12]
   return(result);
 c0066a6:	68fb      	ldr	r3, [r7, #12]
 c0066a8:	f023 0301 	bic.w	r3, r3, #1
 c0066ac:	64bb      	str	r3, [r7, #72]	; 0x48
 c0066ae:	687b      	ldr	r3, [r7, #4]
 c0066b0:	681b      	ldr	r3, [r3, #0]
 c0066b2:	3308      	adds	r3, #8
 c0066b4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c0066b6:	61fa      	str	r2, [r7, #28]
 c0066b8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0066ba:	69b9      	ldr	r1, [r7, #24]
 c0066bc:	69fa      	ldr	r2, [r7, #28]
 c0066be:	e841 2300 	strex	r3, r2, [r1]
 c0066c2:	617b      	str	r3, [r7, #20]
   return(result);
 c0066c4:	697b      	ldr	r3, [r7, #20]
 c0066c6:	2b00      	cmp	r3, #0
 c0066c8:	d1e5      	bne.n	c006696 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c0066ca:	687b      	ldr	r3, [r7, #4]
 c0066cc:	2220      	movs	r2, #32
 c0066ce:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c0066d2:	687b      	ldr	r3, [r7, #4]
 c0066d4:	2200      	movs	r2, #0
 c0066d6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c0066da:	2303      	movs	r3, #3
 c0066dc:	e012      	b.n	c006704 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c0066de:	687b      	ldr	r3, [r7, #4]
 c0066e0:	2220      	movs	r2, #32
 c0066e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c0066e6:	687b      	ldr	r3, [r7, #4]
 c0066e8:	2220      	movs	r2, #32
 c0066ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0066ee:	687b      	ldr	r3, [r7, #4]
 c0066f0:	2200      	movs	r2, #0
 c0066f2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c0066f4:	687b      	ldr	r3, [r7, #4]
 c0066f6:	2200      	movs	r2, #0
 c0066f8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c0066fa:	687b      	ldr	r3, [r7, #4]
 c0066fc:	2200      	movs	r2, #0
 c0066fe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c006702:	2300      	movs	r3, #0
}
 c006704:	4618      	mov	r0, r3
 c006706:	3758      	adds	r7, #88	; 0x58
 c006708:	46bd      	mov	sp, r7
 c00670a:	bd80      	pop	{r7, pc}

0c00670c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c00670c:	b580      	push	{r7, lr}
 c00670e:	b084      	sub	sp, #16
 c006710:	af00      	add	r7, sp, #0
 c006712:	60f8      	str	r0, [r7, #12]
 c006714:	60b9      	str	r1, [r7, #8]
 c006716:	603b      	str	r3, [r7, #0]
 c006718:	4613      	mov	r3, r2
 c00671a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c00671c:	e049      	b.n	c0067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c00671e:	69bb      	ldr	r3, [r7, #24]
 c006720:	f1b3 3fff 	cmp.w	r3, #4294967295
 c006724:	d045      	beq.n	c0067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c006726:	f7fb fdcd 	bl	c0022c4 <HAL_GetTick>
 c00672a:	4602      	mov	r2, r0
 c00672c:	683b      	ldr	r3, [r7, #0]
 c00672e:	1ad3      	subs	r3, r2, r3
 c006730:	69ba      	ldr	r2, [r7, #24]
 c006732:	429a      	cmp	r2, r3
 c006734:	d302      	bcc.n	c00673c <UART_WaitOnFlagUntilTimeout+0x30>
 c006736:	69bb      	ldr	r3, [r7, #24]
 c006738:	2b00      	cmp	r3, #0
 c00673a:	d101      	bne.n	c006740 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c00673c:	2303      	movs	r3, #3
 c00673e:	e048      	b.n	c0067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c006740:	68fb      	ldr	r3, [r7, #12]
 c006742:	681b      	ldr	r3, [r3, #0]
 c006744:	681b      	ldr	r3, [r3, #0]
 c006746:	f003 0304 	and.w	r3, r3, #4
 c00674a:	2b00      	cmp	r3, #0
 c00674c:	d031      	beq.n	c0067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c00674e:	68fb      	ldr	r3, [r7, #12]
 c006750:	681b      	ldr	r3, [r3, #0]
 c006752:	69db      	ldr	r3, [r3, #28]
 c006754:	f003 0308 	and.w	r3, r3, #8
 c006758:	2b08      	cmp	r3, #8
 c00675a:	d110      	bne.n	c00677e <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c00675c:	68fb      	ldr	r3, [r7, #12]
 c00675e:	681b      	ldr	r3, [r3, #0]
 c006760:	2208      	movs	r2, #8
 c006762:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c006764:	68f8      	ldr	r0, [r7, #12]
 c006766:	f000 f838 	bl	c0067da <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c00676a:	68fb      	ldr	r3, [r7, #12]
 c00676c:	2208      	movs	r2, #8
 c00676e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c006772:	68fb      	ldr	r3, [r7, #12]
 c006774:	2200      	movs	r2, #0
 c006776:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c00677a:	2301      	movs	r3, #1
 c00677c:	e029      	b.n	c0067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c00677e:	68fb      	ldr	r3, [r7, #12]
 c006780:	681b      	ldr	r3, [r3, #0]
 c006782:	69db      	ldr	r3, [r3, #28]
 c006784:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c00678c:	d111      	bne.n	c0067b2 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c00678e:	68fb      	ldr	r3, [r7, #12]
 c006790:	681b      	ldr	r3, [r3, #0]
 c006792:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c006796:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c006798:	68f8      	ldr	r0, [r7, #12]
 c00679a:	f000 f81e 	bl	c0067da <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c00679e:	68fb      	ldr	r3, [r7, #12]
 c0067a0:	2220      	movs	r2, #32
 c0067a2:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0067a6:	68fb      	ldr	r3, [r7, #12]
 c0067a8:	2200      	movs	r2, #0
 c0067aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c0067ae:	2303      	movs	r3, #3
 c0067b0:	e00f      	b.n	c0067d2 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0067b2:	68fb      	ldr	r3, [r7, #12]
 c0067b4:	681b      	ldr	r3, [r3, #0]
 c0067b6:	69da      	ldr	r2, [r3, #28]
 c0067b8:	68bb      	ldr	r3, [r7, #8]
 c0067ba:	4013      	ands	r3, r2
 c0067bc:	68ba      	ldr	r2, [r7, #8]
 c0067be:	429a      	cmp	r2, r3
 c0067c0:	bf0c      	ite	eq
 c0067c2:	2301      	moveq	r3, #1
 c0067c4:	2300      	movne	r3, #0
 c0067c6:	b2db      	uxtb	r3, r3
 c0067c8:	461a      	mov	r2, r3
 c0067ca:	79fb      	ldrb	r3, [r7, #7]
 c0067cc:	429a      	cmp	r2, r3
 c0067ce:	d0a6      	beq.n	c00671e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c0067d0:	2300      	movs	r3, #0
}
 c0067d2:	4618      	mov	r0, r3
 c0067d4:	3710      	adds	r7, #16
 c0067d6:	46bd      	mov	sp, r7
 c0067d8:	bd80      	pop	{r7, pc}

0c0067da <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c0067da:	b480      	push	{r7}
 c0067dc:	b095      	sub	sp, #84	; 0x54
 c0067de:	af00      	add	r7, sp, #0
 c0067e0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c0067e2:	687b      	ldr	r3, [r7, #4]
 c0067e4:	681b      	ldr	r3, [r3, #0]
 c0067e6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0067e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c0067ea:	e853 3f00 	ldrex	r3, [r3]
 c0067ee:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c0067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0067f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c0067f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 c0067f8:	687b      	ldr	r3, [r7, #4]
 c0067fa:	681b      	ldr	r3, [r3, #0]
 c0067fc:	461a      	mov	r2, r3
 c0067fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c006800:	643b      	str	r3, [r7, #64]	; 0x40
 c006802:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006804:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c006806:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c006808:	e841 2300 	strex	r3, r2, [r1]
 c00680c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c00680e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c006810:	2b00      	cmp	r3, #0
 c006812:	d1e6      	bne.n	c0067e2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c006814:	687b      	ldr	r3, [r7, #4]
 c006816:	681b      	ldr	r3, [r3, #0]
 c006818:	3308      	adds	r3, #8
 c00681a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00681c:	6a3b      	ldr	r3, [r7, #32]
 c00681e:	e853 3f00 	ldrex	r3, [r3]
 c006822:	61fb      	str	r3, [r7, #28]
   return(result);
 c006824:	69fb      	ldr	r3, [r7, #28]
 c006826:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00682a:	f023 0301 	bic.w	r3, r3, #1
 c00682e:	64bb      	str	r3, [r7, #72]	; 0x48
 c006830:	687b      	ldr	r3, [r7, #4]
 c006832:	681b      	ldr	r3, [r3, #0]
 c006834:	3308      	adds	r3, #8
 c006836:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c006838:	62fa      	str	r2, [r7, #44]	; 0x2c
 c00683a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c00683c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c00683e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c006840:	e841 2300 	strex	r3, r2, [r1]
 c006844:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c006846:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c006848:	2b00      	cmp	r3, #0
 c00684a:	d1e3      	bne.n	c006814 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c00684c:	687b      	ldr	r3, [r7, #4]
 c00684e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c006850:	2b01      	cmp	r3, #1
 c006852:	d118      	bne.n	c006886 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c006854:	687b      	ldr	r3, [r7, #4]
 c006856:	681b      	ldr	r3, [r3, #0]
 c006858:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c00685a:	68fb      	ldr	r3, [r7, #12]
 c00685c:	e853 3f00 	ldrex	r3, [r3]
 c006860:	60bb      	str	r3, [r7, #8]
   return(result);
 c006862:	68bb      	ldr	r3, [r7, #8]
 c006864:	f023 0310 	bic.w	r3, r3, #16
 c006868:	647b      	str	r3, [r7, #68]	; 0x44
 c00686a:	687b      	ldr	r3, [r7, #4]
 c00686c:	681b      	ldr	r3, [r3, #0]
 c00686e:	461a      	mov	r2, r3
 c006870:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c006872:	61bb      	str	r3, [r7, #24]
 c006874:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c006876:	6979      	ldr	r1, [r7, #20]
 c006878:	69ba      	ldr	r2, [r7, #24]
 c00687a:	e841 2300 	strex	r3, r2, [r1]
 c00687e:	613b      	str	r3, [r7, #16]
   return(result);
 c006880:	693b      	ldr	r3, [r7, #16]
 c006882:	2b00      	cmp	r3, #0
 c006884:	d1e6      	bne.n	c006854 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c006886:	687b      	ldr	r3, [r7, #4]
 c006888:	2220      	movs	r2, #32
 c00688a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00688e:	687b      	ldr	r3, [r7, #4]
 c006890:	2200      	movs	r2, #0
 c006892:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c006894:	687b      	ldr	r3, [r7, #4]
 c006896:	2200      	movs	r2, #0
 c006898:	675a      	str	r2, [r3, #116]	; 0x74
}
 c00689a:	bf00      	nop
 c00689c:	3754      	adds	r7, #84	; 0x54
 c00689e:	46bd      	mov	sp, r7
 c0068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0068a4:	4770      	bx	lr

0c0068a6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c0068a6:	b480      	push	{r7}
 c0068a8:	b085      	sub	sp, #20
 c0068aa:	af00      	add	r7, sp, #0
 c0068ac:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0068ae:	687b      	ldr	r3, [r7, #4]
 c0068b0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0068b4:	2b01      	cmp	r3, #1
 c0068b6:	d101      	bne.n	c0068bc <HAL_UARTEx_DisableFifoMode+0x16>
 c0068b8:	2302      	movs	r3, #2
 c0068ba:	e027      	b.n	c00690c <HAL_UARTEx_DisableFifoMode+0x66>
 c0068bc:	687b      	ldr	r3, [r7, #4]
 c0068be:	2201      	movs	r2, #1
 c0068c0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0068c4:	687b      	ldr	r3, [r7, #4]
 c0068c6:	2224      	movs	r2, #36	; 0x24
 c0068c8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0068cc:	687b      	ldr	r3, [r7, #4]
 c0068ce:	681b      	ldr	r3, [r3, #0]
 c0068d0:	681b      	ldr	r3, [r3, #0]
 c0068d2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0068d4:	687b      	ldr	r3, [r7, #4]
 c0068d6:	681b      	ldr	r3, [r3, #0]
 c0068d8:	681a      	ldr	r2, [r3, #0]
 c0068da:	687b      	ldr	r3, [r7, #4]
 c0068dc:	681b      	ldr	r3, [r3, #0]
 c0068de:	f022 0201 	bic.w	r2, r2, #1
 c0068e2:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c0068e4:	68fb      	ldr	r3, [r7, #12]
 c0068e6:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c0068ea:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c0068ec:	687b      	ldr	r3, [r7, #4]
 c0068ee:	2200      	movs	r2, #0
 c0068f0:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0068f2:	687b      	ldr	r3, [r7, #4]
 c0068f4:	681b      	ldr	r3, [r3, #0]
 c0068f6:	68fa      	ldr	r2, [r7, #12]
 c0068f8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0068fa:	687b      	ldr	r3, [r7, #4]
 c0068fc:	2220      	movs	r2, #32
 c0068fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006902:	687b      	ldr	r3, [r7, #4]
 c006904:	2200      	movs	r2, #0
 c006906:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00690a:	2300      	movs	r3, #0
}
 c00690c:	4618      	mov	r0, r3
 c00690e:	3714      	adds	r7, #20
 c006910:	46bd      	mov	sp, r7
 c006912:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006916:	4770      	bx	lr

0c006918 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c006918:	b580      	push	{r7, lr}
 c00691a:	b084      	sub	sp, #16
 c00691c:	af00      	add	r7, sp, #0
 c00691e:	6078      	str	r0, [r7, #4]
 c006920:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006922:	687b      	ldr	r3, [r7, #4]
 c006924:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c006928:	2b01      	cmp	r3, #1
 c00692a:	d101      	bne.n	c006930 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c00692c:	2302      	movs	r3, #2
 c00692e:	e02d      	b.n	c00698c <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c006930:	687b      	ldr	r3, [r7, #4]
 c006932:	2201      	movs	r2, #1
 c006934:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c006938:	687b      	ldr	r3, [r7, #4]
 c00693a:	2224      	movs	r2, #36	; 0x24
 c00693c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006940:	687b      	ldr	r3, [r7, #4]
 c006942:	681b      	ldr	r3, [r3, #0]
 c006944:	681b      	ldr	r3, [r3, #0]
 c006946:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c006948:	687b      	ldr	r3, [r7, #4]
 c00694a:	681b      	ldr	r3, [r3, #0]
 c00694c:	681a      	ldr	r2, [r3, #0]
 c00694e:	687b      	ldr	r3, [r7, #4]
 c006950:	681b      	ldr	r3, [r3, #0]
 c006952:	f022 0201 	bic.w	r2, r2, #1
 c006956:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c006958:	687b      	ldr	r3, [r7, #4]
 c00695a:	681b      	ldr	r3, [r3, #0]
 c00695c:	689b      	ldr	r3, [r3, #8]
 c00695e:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c006962:	687b      	ldr	r3, [r7, #4]
 c006964:	681b      	ldr	r3, [r3, #0]
 c006966:	683a      	ldr	r2, [r7, #0]
 c006968:	430a      	orrs	r2, r1
 c00696a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c00696c:	6878      	ldr	r0, [r7, #4]
 c00696e:	f000 f84f 	bl	c006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006972:	687b      	ldr	r3, [r7, #4]
 c006974:	681b      	ldr	r3, [r3, #0]
 c006976:	68fa      	ldr	r2, [r7, #12]
 c006978:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00697a:	687b      	ldr	r3, [r7, #4]
 c00697c:	2220      	movs	r2, #32
 c00697e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c006982:	687b      	ldr	r3, [r7, #4]
 c006984:	2200      	movs	r2, #0
 c006986:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00698a:	2300      	movs	r3, #0
}
 c00698c:	4618      	mov	r0, r3
 c00698e:	3710      	adds	r7, #16
 c006990:	46bd      	mov	sp, r7
 c006992:	bd80      	pop	{r7, pc}

0c006994 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c006994:	b580      	push	{r7, lr}
 c006996:	b084      	sub	sp, #16
 c006998:	af00      	add	r7, sp, #0
 c00699a:	6078      	str	r0, [r7, #4]
 c00699c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00699e:	687b      	ldr	r3, [r7, #4]
 c0069a0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0069a4:	2b01      	cmp	r3, #1
 c0069a6:	d101      	bne.n	c0069ac <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0069a8:	2302      	movs	r3, #2
 c0069aa:	e02d      	b.n	c006a08 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0069ac:	687b      	ldr	r3, [r7, #4]
 c0069ae:	2201      	movs	r2, #1
 c0069b0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c0069b4:	687b      	ldr	r3, [r7, #4]
 c0069b6:	2224      	movs	r2, #36	; 0x24
 c0069b8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c0069bc:	687b      	ldr	r3, [r7, #4]
 c0069be:	681b      	ldr	r3, [r3, #0]
 c0069c0:	681b      	ldr	r3, [r3, #0]
 c0069c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c0069c4:	687b      	ldr	r3, [r7, #4]
 c0069c6:	681b      	ldr	r3, [r3, #0]
 c0069c8:	681a      	ldr	r2, [r3, #0]
 c0069ca:	687b      	ldr	r3, [r7, #4]
 c0069cc:	681b      	ldr	r3, [r3, #0]
 c0069ce:	f022 0201 	bic.w	r2, r2, #1
 c0069d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c0069d4:	687b      	ldr	r3, [r7, #4]
 c0069d6:	681b      	ldr	r3, [r3, #0]
 c0069d8:	689b      	ldr	r3, [r3, #8]
 c0069da:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c0069de:	687b      	ldr	r3, [r7, #4]
 c0069e0:	681b      	ldr	r3, [r3, #0]
 c0069e2:	683a      	ldr	r2, [r7, #0]
 c0069e4:	430a      	orrs	r2, r1
 c0069e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0069e8:	6878      	ldr	r0, [r7, #4]
 c0069ea:	f000 f811 	bl	c006a10 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0069ee:	687b      	ldr	r3, [r7, #4]
 c0069f0:	681b      	ldr	r3, [r3, #0]
 c0069f2:	68fa      	ldr	r2, [r7, #12]
 c0069f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0069f6:	687b      	ldr	r3, [r7, #4]
 c0069f8:	2220      	movs	r2, #32
 c0069fa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0069fe:	687b      	ldr	r3, [r7, #4]
 c006a00:	2200      	movs	r2, #0
 c006a02:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c006a06:	2300      	movs	r3, #0
}
 c006a08:	4618      	mov	r0, r3
 c006a0a:	3710      	adds	r7, #16
 c006a0c:	46bd      	mov	sp, r7
 c006a0e:	bd80      	pop	{r7, pc}

0c006a10 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c006a10:	b480      	push	{r7}
 c006a12:	b085      	sub	sp, #20
 c006a14:	af00      	add	r7, sp, #0
 c006a16:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c006a18:	687b      	ldr	r3, [r7, #4]
 c006a1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c006a1c:	2b00      	cmp	r3, #0
 c006a1e:	d108      	bne.n	c006a32 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c006a20:	687b      	ldr	r3, [r7, #4]
 c006a22:	2201      	movs	r2, #1
 c006a24:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c006a28:	687b      	ldr	r3, [r7, #4]
 c006a2a:	2201      	movs	r2, #1
 c006a2c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c006a30:	e031      	b.n	c006a96 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c006a32:	2308      	movs	r3, #8
 c006a34:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c006a36:	2308      	movs	r3, #8
 c006a38:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c006a3a:	687b      	ldr	r3, [r7, #4]
 c006a3c:	681b      	ldr	r3, [r3, #0]
 c006a3e:	689b      	ldr	r3, [r3, #8]
 c006a40:	0e5b      	lsrs	r3, r3, #25
 c006a42:	b2db      	uxtb	r3, r3
 c006a44:	f003 0307 	and.w	r3, r3, #7
 c006a48:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c006a4a:	687b      	ldr	r3, [r7, #4]
 c006a4c:	681b      	ldr	r3, [r3, #0]
 c006a4e:	689b      	ldr	r3, [r3, #8]
 c006a50:	0f5b      	lsrs	r3, r3, #29
 c006a52:	b2db      	uxtb	r3, r3
 c006a54:	f003 0307 	and.w	r3, r3, #7
 c006a58:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006a5a:	7bbb      	ldrb	r3, [r7, #14]
 c006a5c:	7b3a      	ldrb	r2, [r7, #12]
 c006a5e:	4911      	ldr	r1, [pc, #68]	; (c006aa4 <UARTEx_SetNbDataToProcess+0x94>)
 c006a60:	5c8a      	ldrb	r2, [r1, r2]
 c006a62:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c006a66:	7b3a      	ldrb	r2, [r7, #12]
 c006a68:	490f      	ldr	r1, [pc, #60]	; (c006aa8 <UARTEx_SetNbDataToProcess+0x98>)
 c006a6a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006a6c:	fb93 f3f2 	sdiv	r3, r3, r2
 c006a70:	b29a      	uxth	r2, r3
 c006a72:	687b      	ldr	r3, [r7, #4]
 c006a74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006a78:	7bfb      	ldrb	r3, [r7, #15]
 c006a7a:	7b7a      	ldrb	r2, [r7, #13]
 c006a7c:	4909      	ldr	r1, [pc, #36]	; (c006aa4 <UARTEx_SetNbDataToProcess+0x94>)
 c006a7e:	5c8a      	ldrb	r2, [r1, r2]
 c006a80:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c006a84:	7b7a      	ldrb	r2, [r7, #13]
 c006a86:	4908      	ldr	r1, [pc, #32]	; (c006aa8 <UARTEx_SetNbDataToProcess+0x98>)
 c006a88:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006a8a:	fb93 f3f2 	sdiv	r3, r3, r2
 c006a8e:	b29a      	uxth	r2, r3
 c006a90:	687b      	ldr	r3, [r7, #4]
 c006a92:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c006a96:	bf00      	nop
 c006a98:	3714      	adds	r7, #20
 c006a9a:	46bd      	mov	sp, r7
 c006a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006aa0:	4770      	bx	lr
 c006aa2:	bf00      	nop
 c006aa4:	0c0085fc 	.word	0x0c0085fc
 c006aa8:	0c008604 	.word	0x0c008604

0c006aac <__errno>:
 c006aac:	4b01      	ldr	r3, [pc, #4]	; (c006ab4 <__errno+0x8>)
 c006aae:	6818      	ldr	r0, [r3, #0]
 c006ab0:	4770      	bx	lr
 c006ab2:	bf00      	nop
 c006ab4:	30000044 	.word	0x30000044

0c006ab8 <__libc_init_array>:
 c006ab8:	b570      	push	{r4, r5, r6, lr}
 c006aba:	4d0d      	ldr	r5, [pc, #52]	; (c006af0 <__libc_init_array+0x38>)
 c006abc:	2600      	movs	r6, #0
 c006abe:	4c0d      	ldr	r4, [pc, #52]	; (c006af4 <__libc_init_array+0x3c>)
 c006ac0:	1b64      	subs	r4, r4, r5
 c006ac2:	10a4      	asrs	r4, r4, #2
 c006ac4:	42a6      	cmp	r6, r4
 c006ac6:	d109      	bne.n	c006adc <__libc_init_array+0x24>
 c006ac8:	4d0b      	ldr	r5, [pc, #44]	; (c006af8 <__libc_init_array+0x40>)
 c006aca:	2600      	movs	r6, #0
 c006acc:	4c0b      	ldr	r4, [pc, #44]	; (c006afc <__libc_init_array+0x44>)
 c006ace:	f000 ffc9 	bl	c007a64 <_init>
 c006ad2:	1b64      	subs	r4, r4, r5
 c006ad4:	10a4      	asrs	r4, r4, #2
 c006ad6:	42a6      	cmp	r6, r4
 c006ad8:	d105      	bne.n	c006ae6 <__libc_init_array+0x2e>
 c006ada:	bd70      	pop	{r4, r5, r6, pc}
 c006adc:	f855 3b04 	ldr.w	r3, [r5], #4
 c006ae0:	3601      	adds	r6, #1
 c006ae2:	4798      	blx	r3
 c006ae4:	e7ee      	b.n	c006ac4 <__libc_init_array+0xc>
 c006ae6:	f855 3b04 	ldr.w	r3, [r5], #4
 c006aea:	3601      	adds	r6, #1
 c006aec:	4798      	blx	r3
 c006aee:	e7f2      	b.n	c006ad6 <__libc_init_array+0x1e>
 c006af0:	0c0086ac 	.word	0x0c0086ac
 c006af4:	0c0086ac 	.word	0x0c0086ac
 c006af8:	0c0086ac 	.word	0x0c0086ac
 c006afc:	0c0086b0 	.word	0x0c0086b0

0c006b00 <memcpy>:
 c006b00:	440a      	add	r2, r1
 c006b02:	1e43      	subs	r3, r0, #1
 c006b04:	4291      	cmp	r1, r2
 c006b06:	d100      	bne.n	c006b0a <memcpy+0xa>
 c006b08:	4770      	bx	lr
 c006b0a:	b510      	push	{r4, lr}
 c006b0c:	f811 4b01 	ldrb.w	r4, [r1], #1
 c006b10:	4291      	cmp	r1, r2
 c006b12:	f803 4f01 	strb.w	r4, [r3, #1]!
 c006b16:	d1f9      	bne.n	c006b0c <memcpy+0xc>
 c006b18:	bd10      	pop	{r4, pc}

0c006b1a <memset>:
 c006b1a:	4402      	add	r2, r0
 c006b1c:	4603      	mov	r3, r0
 c006b1e:	4293      	cmp	r3, r2
 c006b20:	d100      	bne.n	c006b24 <memset+0xa>
 c006b22:	4770      	bx	lr
 c006b24:	f803 1b01 	strb.w	r1, [r3], #1
 c006b28:	e7f9      	b.n	c006b1e <memset+0x4>
	...

0c006b2c <iprintf>:
 c006b2c:	b40f      	push	{r0, r1, r2, r3}
 c006b2e:	4b0a      	ldr	r3, [pc, #40]	; (c006b58 <iprintf+0x2c>)
 c006b30:	b513      	push	{r0, r1, r4, lr}
 c006b32:	681c      	ldr	r4, [r3, #0]
 c006b34:	b124      	cbz	r4, c006b40 <iprintf+0x14>
 c006b36:	69a3      	ldr	r3, [r4, #24]
 c006b38:	b913      	cbnz	r3, c006b40 <iprintf+0x14>
 c006b3a:	4620      	mov	r0, r4
 c006b3c:	f000 f866 	bl	c006c0c <__sinit>
 c006b40:	ab05      	add	r3, sp, #20
 c006b42:	9a04      	ldr	r2, [sp, #16]
 c006b44:	68a1      	ldr	r1, [r4, #8]
 c006b46:	4620      	mov	r0, r4
 c006b48:	9301      	str	r3, [sp, #4]
 c006b4a:	f000 f9bd 	bl	c006ec8 <_vfiprintf_r>
 c006b4e:	b002      	add	sp, #8
 c006b50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c006b54:	b004      	add	sp, #16
 c006b56:	4770      	bx	lr
 c006b58:	30000044 	.word	0x30000044

0c006b5c <std>:
 c006b5c:	2300      	movs	r3, #0
 c006b5e:	b510      	push	{r4, lr}
 c006b60:	4604      	mov	r4, r0
 c006b62:	6083      	str	r3, [r0, #8]
 c006b64:	8181      	strh	r1, [r0, #12]
 c006b66:	4619      	mov	r1, r3
 c006b68:	6643      	str	r3, [r0, #100]	; 0x64
 c006b6a:	81c2      	strh	r2, [r0, #14]
 c006b6c:	2208      	movs	r2, #8
 c006b6e:	6183      	str	r3, [r0, #24]
 c006b70:	e9c0 3300 	strd	r3, r3, [r0]
 c006b74:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c006b78:	305c      	adds	r0, #92	; 0x5c
 c006b7a:	f7ff ffce 	bl	c006b1a <memset>
 c006b7e:	4b05      	ldr	r3, [pc, #20]	; (c006b94 <std+0x38>)
 c006b80:	6224      	str	r4, [r4, #32]
 c006b82:	6263      	str	r3, [r4, #36]	; 0x24
 c006b84:	4b04      	ldr	r3, [pc, #16]	; (c006b98 <std+0x3c>)
 c006b86:	62a3      	str	r3, [r4, #40]	; 0x28
 c006b88:	4b04      	ldr	r3, [pc, #16]	; (c006b9c <std+0x40>)
 c006b8a:	62e3      	str	r3, [r4, #44]	; 0x2c
 c006b8c:	4b04      	ldr	r3, [pc, #16]	; (c006ba0 <std+0x44>)
 c006b8e:	6323      	str	r3, [r4, #48]	; 0x30
 c006b90:	bd10      	pop	{r4, pc}
 c006b92:	bf00      	nop
 c006b94:	0c007475 	.word	0x0c007475
 c006b98:	0c007497 	.word	0x0c007497
 c006b9c:	0c0074cf 	.word	0x0c0074cf
 c006ba0:	0c0074f3 	.word	0x0c0074f3

0c006ba4 <_cleanup_r>:
 c006ba4:	4901      	ldr	r1, [pc, #4]	; (c006bac <_cleanup_r+0x8>)
 c006ba6:	f000 b8af 	b.w	c006d08 <_fwalk_reent>
 c006baa:	bf00      	nop
 c006bac:	0c0077c9 	.word	0x0c0077c9

0c006bb0 <__sfmoreglue>:
 c006bb0:	b570      	push	{r4, r5, r6, lr}
 c006bb2:	2268      	movs	r2, #104	; 0x68
 c006bb4:	1e4d      	subs	r5, r1, #1
 c006bb6:	460e      	mov	r6, r1
 c006bb8:	4355      	muls	r5, r2
 c006bba:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c006bbe:	f000 f8e5 	bl	c006d8c <_malloc_r>
 c006bc2:	4604      	mov	r4, r0
 c006bc4:	b140      	cbz	r0, c006bd8 <__sfmoreglue+0x28>
 c006bc6:	2100      	movs	r1, #0
 c006bc8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c006bcc:	e9c0 1600 	strd	r1, r6, [r0]
 c006bd0:	300c      	adds	r0, #12
 c006bd2:	60a0      	str	r0, [r4, #8]
 c006bd4:	f7ff ffa1 	bl	c006b1a <memset>
 c006bd8:	4620      	mov	r0, r4
 c006bda:	bd70      	pop	{r4, r5, r6, pc}

0c006bdc <__sfp_lock_acquire>:
 c006bdc:	4801      	ldr	r0, [pc, #4]	; (c006be4 <__sfp_lock_acquire+0x8>)
 c006bde:	f000 b8b3 	b.w	c006d48 <__retarget_lock_acquire_recursive>
 c006be2:	bf00      	nop
 c006be4:	30000b7d 	.word	0x30000b7d

0c006be8 <__sfp_lock_release>:
 c006be8:	4801      	ldr	r0, [pc, #4]	; (c006bf0 <__sfp_lock_release+0x8>)
 c006bea:	f000 b8ae 	b.w	c006d4a <__retarget_lock_release_recursive>
 c006bee:	bf00      	nop
 c006bf0:	30000b7d 	.word	0x30000b7d

0c006bf4 <__sinit_lock_acquire>:
 c006bf4:	4801      	ldr	r0, [pc, #4]	; (c006bfc <__sinit_lock_acquire+0x8>)
 c006bf6:	f000 b8a7 	b.w	c006d48 <__retarget_lock_acquire_recursive>
 c006bfa:	bf00      	nop
 c006bfc:	30000b7e 	.word	0x30000b7e

0c006c00 <__sinit_lock_release>:
 c006c00:	4801      	ldr	r0, [pc, #4]	; (c006c08 <__sinit_lock_release+0x8>)
 c006c02:	f000 b8a2 	b.w	c006d4a <__retarget_lock_release_recursive>
 c006c06:	bf00      	nop
 c006c08:	30000b7e 	.word	0x30000b7e

0c006c0c <__sinit>:
 c006c0c:	b510      	push	{r4, lr}
 c006c0e:	4604      	mov	r4, r0
 c006c10:	f7ff fff0 	bl	c006bf4 <__sinit_lock_acquire>
 c006c14:	69a3      	ldr	r3, [r4, #24]
 c006c16:	b11b      	cbz	r3, c006c20 <__sinit+0x14>
 c006c18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c006c1c:	f7ff bff0 	b.w	c006c00 <__sinit_lock_release>
 c006c20:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c006c24:	6523      	str	r3, [r4, #80]	; 0x50
 c006c26:	4620      	mov	r0, r4
 c006c28:	4b12      	ldr	r3, [pc, #72]	; (c006c74 <__sinit+0x68>)
 c006c2a:	4a13      	ldr	r2, [pc, #76]	; (c006c78 <__sinit+0x6c>)
 c006c2c:	681b      	ldr	r3, [r3, #0]
 c006c2e:	62a2      	str	r2, [r4, #40]	; 0x28
 c006c30:	42a3      	cmp	r3, r4
 c006c32:	bf04      	itt	eq
 c006c34:	2301      	moveq	r3, #1
 c006c36:	61a3      	streq	r3, [r4, #24]
 c006c38:	f000 f820 	bl	c006c7c <__sfp>
 c006c3c:	6060      	str	r0, [r4, #4]
 c006c3e:	4620      	mov	r0, r4
 c006c40:	f000 f81c 	bl	c006c7c <__sfp>
 c006c44:	60a0      	str	r0, [r4, #8]
 c006c46:	4620      	mov	r0, r4
 c006c48:	f000 f818 	bl	c006c7c <__sfp>
 c006c4c:	2200      	movs	r2, #0
 c006c4e:	2104      	movs	r1, #4
 c006c50:	60e0      	str	r0, [r4, #12]
 c006c52:	6860      	ldr	r0, [r4, #4]
 c006c54:	f7ff ff82 	bl	c006b5c <std>
 c006c58:	2201      	movs	r2, #1
 c006c5a:	2109      	movs	r1, #9
 c006c5c:	68a0      	ldr	r0, [r4, #8]
 c006c5e:	f7ff ff7d 	bl	c006b5c <std>
 c006c62:	2202      	movs	r2, #2
 c006c64:	2112      	movs	r1, #18
 c006c66:	68e0      	ldr	r0, [r4, #12]
 c006c68:	f7ff ff78 	bl	c006b5c <std>
 c006c6c:	2301      	movs	r3, #1
 c006c6e:	61a3      	str	r3, [r4, #24]
 c006c70:	e7d2      	b.n	c006c18 <__sinit+0xc>
 c006c72:	bf00      	nop
 c006c74:	0c00860c 	.word	0x0c00860c
 c006c78:	0c006ba5 	.word	0x0c006ba5

0c006c7c <__sfp>:
 c006c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006c7e:	4607      	mov	r7, r0
 c006c80:	f7ff ffac 	bl	c006bdc <__sfp_lock_acquire>
 c006c84:	4b1e      	ldr	r3, [pc, #120]	; (c006d00 <__sfp+0x84>)
 c006c86:	681e      	ldr	r6, [r3, #0]
 c006c88:	69b3      	ldr	r3, [r6, #24]
 c006c8a:	b913      	cbnz	r3, c006c92 <__sfp+0x16>
 c006c8c:	4630      	mov	r0, r6
 c006c8e:	f7ff ffbd 	bl	c006c0c <__sinit>
 c006c92:	3648      	adds	r6, #72	; 0x48
 c006c94:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c006c98:	3b01      	subs	r3, #1
 c006c9a:	d503      	bpl.n	c006ca4 <__sfp+0x28>
 c006c9c:	6833      	ldr	r3, [r6, #0]
 c006c9e:	b30b      	cbz	r3, c006ce4 <__sfp+0x68>
 c006ca0:	6836      	ldr	r6, [r6, #0]
 c006ca2:	e7f7      	b.n	c006c94 <__sfp+0x18>
 c006ca4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c006ca8:	b9d5      	cbnz	r5, c006ce0 <__sfp+0x64>
 c006caa:	4b16      	ldr	r3, [pc, #88]	; (c006d04 <__sfp+0x88>)
 c006cac:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c006cb0:	6665      	str	r5, [r4, #100]	; 0x64
 c006cb2:	60e3      	str	r3, [r4, #12]
 c006cb4:	f000 f847 	bl	c006d46 <__retarget_lock_init_recursive>
 c006cb8:	f7ff ff96 	bl	c006be8 <__sfp_lock_release>
 c006cbc:	2208      	movs	r2, #8
 c006cbe:	4629      	mov	r1, r5
 c006cc0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c006cc4:	6025      	str	r5, [r4, #0]
 c006cc6:	61a5      	str	r5, [r4, #24]
 c006cc8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c006ccc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c006cd0:	f7ff ff23 	bl	c006b1a <memset>
 c006cd4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c006cd8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c006cdc:	4620      	mov	r0, r4
 c006cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c006ce0:	3468      	adds	r4, #104	; 0x68
 c006ce2:	e7d9      	b.n	c006c98 <__sfp+0x1c>
 c006ce4:	2104      	movs	r1, #4
 c006ce6:	4638      	mov	r0, r7
 c006ce8:	f7ff ff62 	bl	c006bb0 <__sfmoreglue>
 c006cec:	4604      	mov	r4, r0
 c006cee:	6030      	str	r0, [r6, #0]
 c006cf0:	2800      	cmp	r0, #0
 c006cf2:	d1d5      	bne.n	c006ca0 <__sfp+0x24>
 c006cf4:	f7ff ff78 	bl	c006be8 <__sfp_lock_release>
 c006cf8:	230c      	movs	r3, #12
 c006cfa:	603b      	str	r3, [r7, #0]
 c006cfc:	e7ee      	b.n	c006cdc <__sfp+0x60>
 c006cfe:	bf00      	nop
 c006d00:	0c00860c 	.word	0x0c00860c
 c006d04:	ffff0001 	.word	0xffff0001

0c006d08 <_fwalk_reent>:
 c006d08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c006d0c:	4606      	mov	r6, r0
 c006d0e:	4688      	mov	r8, r1
 c006d10:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c006d14:	2700      	movs	r7, #0
 c006d16:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c006d1a:	f1b9 0901 	subs.w	r9, r9, #1
 c006d1e:	d505      	bpl.n	c006d2c <_fwalk_reent+0x24>
 c006d20:	6824      	ldr	r4, [r4, #0]
 c006d22:	2c00      	cmp	r4, #0
 c006d24:	d1f7      	bne.n	c006d16 <_fwalk_reent+0xe>
 c006d26:	4638      	mov	r0, r7
 c006d28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c006d2c:	89ab      	ldrh	r3, [r5, #12]
 c006d2e:	2b01      	cmp	r3, #1
 c006d30:	d907      	bls.n	c006d42 <_fwalk_reent+0x3a>
 c006d32:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c006d36:	3301      	adds	r3, #1
 c006d38:	d003      	beq.n	c006d42 <_fwalk_reent+0x3a>
 c006d3a:	4629      	mov	r1, r5
 c006d3c:	4630      	mov	r0, r6
 c006d3e:	47c0      	blx	r8
 c006d40:	4307      	orrs	r7, r0
 c006d42:	3568      	adds	r5, #104	; 0x68
 c006d44:	e7e9      	b.n	c006d1a <_fwalk_reent+0x12>

0c006d46 <__retarget_lock_init_recursive>:
 c006d46:	4770      	bx	lr

0c006d48 <__retarget_lock_acquire_recursive>:
 c006d48:	4770      	bx	lr

0c006d4a <__retarget_lock_release_recursive>:
 c006d4a:	4770      	bx	lr

0c006d4c <sbrk_aligned>:
 c006d4c:	b570      	push	{r4, r5, r6, lr}
 c006d4e:	4e0e      	ldr	r6, [pc, #56]	; (c006d88 <sbrk_aligned+0x3c>)
 c006d50:	460c      	mov	r4, r1
 c006d52:	4605      	mov	r5, r0
 c006d54:	6831      	ldr	r1, [r6, #0]
 c006d56:	b911      	cbnz	r1, c006d5e <sbrk_aligned+0x12>
 c006d58:	f000 fb7c 	bl	c007454 <_sbrk_r>
 c006d5c:	6030      	str	r0, [r6, #0]
 c006d5e:	4621      	mov	r1, r4
 c006d60:	4628      	mov	r0, r5
 c006d62:	f000 fb77 	bl	c007454 <_sbrk_r>
 c006d66:	1c43      	adds	r3, r0, #1
 c006d68:	d00a      	beq.n	c006d80 <sbrk_aligned+0x34>
 c006d6a:	1cc4      	adds	r4, r0, #3
 c006d6c:	f024 0403 	bic.w	r4, r4, #3
 c006d70:	42a0      	cmp	r0, r4
 c006d72:	d007      	beq.n	c006d84 <sbrk_aligned+0x38>
 c006d74:	1a21      	subs	r1, r4, r0
 c006d76:	4628      	mov	r0, r5
 c006d78:	f000 fb6c 	bl	c007454 <_sbrk_r>
 c006d7c:	3001      	adds	r0, #1
 c006d7e:	d101      	bne.n	c006d84 <sbrk_aligned+0x38>
 c006d80:	f04f 34ff 	mov.w	r4, #4294967295
 c006d84:	4620      	mov	r0, r4
 c006d86:	bd70      	pop	{r4, r5, r6, pc}
 c006d88:	30000b84 	.word	0x30000b84

0c006d8c <_malloc_r>:
 c006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c006d90:	1ccd      	adds	r5, r1, #3
 c006d92:	4607      	mov	r7, r0
 c006d94:	f025 0503 	bic.w	r5, r5, #3
 c006d98:	3508      	adds	r5, #8
 c006d9a:	2d0c      	cmp	r5, #12
 c006d9c:	bf38      	it	cc
 c006d9e:	250c      	movcc	r5, #12
 c006da0:	2d00      	cmp	r5, #0
 c006da2:	db01      	blt.n	c006da8 <_malloc_r+0x1c>
 c006da4:	42a9      	cmp	r1, r5
 c006da6:	d905      	bls.n	c006db4 <_malloc_r+0x28>
 c006da8:	230c      	movs	r3, #12
 c006daa:	2600      	movs	r6, #0
 c006dac:	603b      	str	r3, [r7, #0]
 c006dae:	4630      	mov	r0, r6
 c006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c006db4:	4e2e      	ldr	r6, [pc, #184]	; (c006e70 <_malloc_r+0xe4>)
 c006db6:	f000 fdc9 	bl	c00794c <__malloc_lock>
 c006dba:	6833      	ldr	r3, [r6, #0]
 c006dbc:	461c      	mov	r4, r3
 c006dbe:	bb34      	cbnz	r4, c006e0e <_malloc_r+0x82>
 c006dc0:	4629      	mov	r1, r5
 c006dc2:	4638      	mov	r0, r7
 c006dc4:	f7ff ffc2 	bl	c006d4c <sbrk_aligned>
 c006dc8:	1c43      	adds	r3, r0, #1
 c006dca:	4604      	mov	r4, r0
 c006dcc:	d14d      	bne.n	c006e6a <_malloc_r+0xde>
 c006dce:	6834      	ldr	r4, [r6, #0]
 c006dd0:	4626      	mov	r6, r4
 c006dd2:	2e00      	cmp	r6, #0
 c006dd4:	d140      	bne.n	c006e58 <_malloc_r+0xcc>
 c006dd6:	6823      	ldr	r3, [r4, #0]
 c006dd8:	4631      	mov	r1, r6
 c006dda:	4638      	mov	r0, r7
 c006ddc:	eb04 0803 	add.w	r8, r4, r3
 c006de0:	f000 fb38 	bl	c007454 <_sbrk_r>
 c006de4:	4580      	cmp	r8, r0
 c006de6:	d13a      	bne.n	c006e5e <_malloc_r+0xd2>
 c006de8:	6821      	ldr	r1, [r4, #0]
 c006dea:	3503      	adds	r5, #3
 c006dec:	4638      	mov	r0, r7
 c006dee:	1a6d      	subs	r5, r5, r1
 c006df0:	f025 0503 	bic.w	r5, r5, #3
 c006df4:	3508      	adds	r5, #8
 c006df6:	2d0c      	cmp	r5, #12
 c006df8:	bf38      	it	cc
 c006dfa:	250c      	movcc	r5, #12
 c006dfc:	4629      	mov	r1, r5
 c006dfe:	f7ff ffa5 	bl	c006d4c <sbrk_aligned>
 c006e02:	3001      	adds	r0, #1
 c006e04:	d02b      	beq.n	c006e5e <_malloc_r+0xd2>
 c006e06:	6823      	ldr	r3, [r4, #0]
 c006e08:	442b      	add	r3, r5
 c006e0a:	6023      	str	r3, [r4, #0]
 c006e0c:	e00e      	b.n	c006e2c <_malloc_r+0xa0>
 c006e0e:	6822      	ldr	r2, [r4, #0]
 c006e10:	1b52      	subs	r2, r2, r5
 c006e12:	d41e      	bmi.n	c006e52 <_malloc_r+0xc6>
 c006e14:	2a0b      	cmp	r2, #11
 c006e16:	d916      	bls.n	c006e46 <_malloc_r+0xba>
 c006e18:	1961      	adds	r1, r4, r5
 c006e1a:	42a3      	cmp	r3, r4
 c006e1c:	6025      	str	r5, [r4, #0]
 c006e1e:	bf18      	it	ne
 c006e20:	6059      	strne	r1, [r3, #4]
 c006e22:	6863      	ldr	r3, [r4, #4]
 c006e24:	bf08      	it	eq
 c006e26:	6031      	streq	r1, [r6, #0]
 c006e28:	5162      	str	r2, [r4, r5]
 c006e2a:	604b      	str	r3, [r1, #4]
 c006e2c:	f104 060b 	add.w	r6, r4, #11
 c006e30:	4638      	mov	r0, r7
 c006e32:	f000 fd91 	bl	c007958 <__malloc_unlock>
 c006e36:	1d23      	adds	r3, r4, #4
 c006e38:	f026 0607 	bic.w	r6, r6, #7
 c006e3c:	1af2      	subs	r2, r6, r3
 c006e3e:	d0b6      	beq.n	c006dae <_malloc_r+0x22>
 c006e40:	1b9b      	subs	r3, r3, r6
 c006e42:	50a3      	str	r3, [r4, r2]
 c006e44:	e7b3      	b.n	c006dae <_malloc_r+0x22>
 c006e46:	6862      	ldr	r2, [r4, #4]
 c006e48:	42a3      	cmp	r3, r4
 c006e4a:	bf0c      	ite	eq
 c006e4c:	6032      	streq	r2, [r6, #0]
 c006e4e:	605a      	strne	r2, [r3, #4]
 c006e50:	e7ec      	b.n	c006e2c <_malloc_r+0xa0>
 c006e52:	4623      	mov	r3, r4
 c006e54:	6864      	ldr	r4, [r4, #4]
 c006e56:	e7b2      	b.n	c006dbe <_malloc_r+0x32>
 c006e58:	4634      	mov	r4, r6
 c006e5a:	6876      	ldr	r6, [r6, #4]
 c006e5c:	e7b9      	b.n	c006dd2 <_malloc_r+0x46>
 c006e5e:	230c      	movs	r3, #12
 c006e60:	4638      	mov	r0, r7
 c006e62:	603b      	str	r3, [r7, #0]
 c006e64:	f000 fd78 	bl	c007958 <__malloc_unlock>
 c006e68:	e7a1      	b.n	c006dae <_malloc_r+0x22>
 c006e6a:	6025      	str	r5, [r4, #0]
 c006e6c:	e7de      	b.n	c006e2c <_malloc_r+0xa0>
 c006e6e:	bf00      	nop
 c006e70:	30000b80 	.word	0x30000b80

0c006e74 <__sfputc_r>:
 c006e74:	6893      	ldr	r3, [r2, #8]
 c006e76:	3b01      	subs	r3, #1
 c006e78:	2b00      	cmp	r3, #0
 c006e7a:	6093      	str	r3, [r2, #8]
 c006e7c:	b410      	push	{r4}
 c006e7e:	da08      	bge.n	c006e92 <__sfputc_r+0x1e>
 c006e80:	6994      	ldr	r4, [r2, #24]
 c006e82:	42a3      	cmp	r3, r4
 c006e84:	db01      	blt.n	c006e8a <__sfputc_r+0x16>
 c006e86:	290a      	cmp	r1, #10
 c006e88:	d103      	bne.n	c006e92 <__sfputc_r+0x1e>
 c006e8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 c006e8e:	f000 bb35 	b.w	c0074fc <__swbuf_r>
 c006e92:	6813      	ldr	r3, [r2, #0]
 c006e94:	1c58      	adds	r0, r3, #1
 c006e96:	6010      	str	r0, [r2, #0]
 c006e98:	4608      	mov	r0, r1
 c006e9a:	7019      	strb	r1, [r3, #0]
 c006e9c:	f85d 4b04 	ldr.w	r4, [sp], #4
 c006ea0:	4770      	bx	lr

0c006ea2 <__sfputs_r>:
 c006ea2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006ea4:	4606      	mov	r6, r0
 c006ea6:	460f      	mov	r7, r1
 c006ea8:	4614      	mov	r4, r2
 c006eaa:	18d5      	adds	r5, r2, r3
 c006eac:	42ac      	cmp	r4, r5
 c006eae:	d101      	bne.n	c006eb4 <__sfputs_r+0x12>
 c006eb0:	2000      	movs	r0, #0
 c006eb2:	e007      	b.n	c006ec4 <__sfputs_r+0x22>
 c006eb4:	463a      	mov	r2, r7
 c006eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006eba:	4630      	mov	r0, r6
 c006ebc:	f7ff ffda 	bl	c006e74 <__sfputc_r>
 c006ec0:	1c43      	adds	r3, r0, #1
 c006ec2:	d1f3      	bne.n	c006eac <__sfputs_r+0xa>
 c006ec4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c006ec8 <_vfiprintf_r>:
 c006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c006ecc:	460d      	mov	r5, r1
 c006ece:	b09d      	sub	sp, #116	; 0x74
 c006ed0:	4614      	mov	r4, r2
 c006ed2:	4698      	mov	r8, r3
 c006ed4:	4606      	mov	r6, r0
 c006ed6:	b118      	cbz	r0, c006ee0 <_vfiprintf_r+0x18>
 c006ed8:	6983      	ldr	r3, [r0, #24]
 c006eda:	b90b      	cbnz	r3, c006ee0 <_vfiprintf_r+0x18>
 c006edc:	f7ff fe96 	bl	c006c0c <__sinit>
 c006ee0:	4b89      	ldr	r3, [pc, #548]	; (c007108 <_vfiprintf_r+0x240>)
 c006ee2:	429d      	cmp	r5, r3
 c006ee4:	d11b      	bne.n	c006f1e <_vfiprintf_r+0x56>
 c006ee6:	6875      	ldr	r5, [r6, #4]
 c006ee8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006eea:	07d9      	lsls	r1, r3, #31
 c006eec:	d405      	bmi.n	c006efa <_vfiprintf_r+0x32>
 c006eee:	89ab      	ldrh	r3, [r5, #12]
 c006ef0:	059a      	lsls	r2, r3, #22
 c006ef2:	d402      	bmi.n	c006efa <_vfiprintf_r+0x32>
 c006ef4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006ef6:	f7ff ff27 	bl	c006d48 <__retarget_lock_acquire_recursive>
 c006efa:	89ab      	ldrh	r3, [r5, #12]
 c006efc:	071b      	lsls	r3, r3, #28
 c006efe:	d501      	bpl.n	c006f04 <_vfiprintf_r+0x3c>
 c006f00:	692b      	ldr	r3, [r5, #16]
 c006f02:	b9eb      	cbnz	r3, c006f40 <_vfiprintf_r+0x78>
 c006f04:	4629      	mov	r1, r5
 c006f06:	4630      	mov	r0, r6
 c006f08:	f000 fb5c 	bl	c0075c4 <__swsetup_r>
 c006f0c:	b1c0      	cbz	r0, c006f40 <_vfiprintf_r+0x78>
 c006f0e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006f10:	07dc      	lsls	r4, r3, #31
 c006f12:	d50e      	bpl.n	c006f32 <_vfiprintf_r+0x6a>
 c006f14:	f04f 30ff 	mov.w	r0, #4294967295
 c006f18:	b01d      	add	sp, #116	; 0x74
 c006f1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c006f1e:	4b7b      	ldr	r3, [pc, #492]	; (c00710c <_vfiprintf_r+0x244>)
 c006f20:	429d      	cmp	r5, r3
 c006f22:	d101      	bne.n	c006f28 <_vfiprintf_r+0x60>
 c006f24:	68b5      	ldr	r5, [r6, #8]
 c006f26:	e7df      	b.n	c006ee8 <_vfiprintf_r+0x20>
 c006f28:	4b79      	ldr	r3, [pc, #484]	; (c007110 <_vfiprintf_r+0x248>)
 c006f2a:	429d      	cmp	r5, r3
 c006f2c:	bf08      	it	eq
 c006f2e:	68f5      	ldreq	r5, [r6, #12]
 c006f30:	e7da      	b.n	c006ee8 <_vfiprintf_r+0x20>
 c006f32:	89ab      	ldrh	r3, [r5, #12]
 c006f34:	0598      	lsls	r0, r3, #22
 c006f36:	d4ed      	bmi.n	c006f14 <_vfiprintf_r+0x4c>
 c006f38:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006f3a:	f7ff ff06 	bl	c006d4a <__retarget_lock_release_recursive>
 c006f3e:	e7e9      	b.n	c006f14 <_vfiprintf_r+0x4c>
 c006f40:	2300      	movs	r3, #0
 c006f42:	f8cd 800c 	str.w	r8, [sp, #12]
 c006f46:	f04f 0901 	mov.w	r9, #1
 c006f4a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c007114 <_vfiprintf_r+0x24c>
 c006f4e:	9309      	str	r3, [sp, #36]	; 0x24
 c006f50:	2320      	movs	r3, #32
 c006f52:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c006f56:	2330      	movs	r3, #48	; 0x30
 c006f58:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c006f5c:	4623      	mov	r3, r4
 c006f5e:	469a      	mov	sl, r3
 c006f60:	f813 2b01 	ldrb.w	r2, [r3], #1
 c006f64:	b10a      	cbz	r2, c006f6a <_vfiprintf_r+0xa2>
 c006f66:	2a25      	cmp	r2, #37	; 0x25
 c006f68:	d1f9      	bne.n	c006f5e <_vfiprintf_r+0x96>
 c006f6a:	ebba 0b04 	subs.w	fp, sl, r4
 c006f6e:	d00b      	beq.n	c006f88 <_vfiprintf_r+0xc0>
 c006f70:	465b      	mov	r3, fp
 c006f72:	4622      	mov	r2, r4
 c006f74:	4629      	mov	r1, r5
 c006f76:	4630      	mov	r0, r6
 c006f78:	f7ff ff93 	bl	c006ea2 <__sfputs_r>
 c006f7c:	3001      	adds	r0, #1
 c006f7e:	f000 80aa 	beq.w	c0070d6 <_vfiprintf_r+0x20e>
 c006f82:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c006f84:	445a      	add	r2, fp
 c006f86:	9209      	str	r2, [sp, #36]	; 0x24
 c006f88:	f89a 3000 	ldrb.w	r3, [sl]
 c006f8c:	2b00      	cmp	r3, #0
 c006f8e:	f000 80a2 	beq.w	c0070d6 <_vfiprintf_r+0x20e>
 c006f92:	2300      	movs	r3, #0
 c006f94:	f04f 32ff 	mov.w	r2, #4294967295
 c006f98:	f10a 0a01 	add.w	sl, sl, #1
 c006f9c:	9304      	str	r3, [sp, #16]
 c006f9e:	9307      	str	r3, [sp, #28]
 c006fa0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c006fa4:	931a      	str	r3, [sp, #104]	; 0x68
 c006fa6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c006faa:	4654      	mov	r4, sl
 c006fac:	2205      	movs	r2, #5
 c006fae:	4859      	ldr	r0, [pc, #356]	; (c007114 <_vfiprintf_r+0x24c>)
 c006fb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006fb4:	f000 fcbc 	bl	c007930 <memchr>
 c006fb8:	9a04      	ldr	r2, [sp, #16]
 c006fba:	b9d8      	cbnz	r0, c006ff4 <_vfiprintf_r+0x12c>
 c006fbc:	06d1      	lsls	r1, r2, #27
 c006fbe:	bf44      	itt	mi
 c006fc0:	2320      	movmi	r3, #32
 c006fc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006fc6:	0713      	lsls	r3, r2, #28
 c006fc8:	bf44      	itt	mi
 c006fca:	232b      	movmi	r3, #43	; 0x2b
 c006fcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006fd0:	f89a 3000 	ldrb.w	r3, [sl]
 c006fd4:	2b2a      	cmp	r3, #42	; 0x2a
 c006fd6:	d015      	beq.n	c007004 <_vfiprintf_r+0x13c>
 c006fd8:	9a07      	ldr	r2, [sp, #28]
 c006fda:	4654      	mov	r4, sl
 c006fdc:	2000      	movs	r0, #0
 c006fde:	f04f 0c0a 	mov.w	ip, #10
 c006fe2:	4621      	mov	r1, r4
 c006fe4:	f811 3b01 	ldrb.w	r3, [r1], #1
 c006fe8:	3b30      	subs	r3, #48	; 0x30
 c006fea:	2b09      	cmp	r3, #9
 c006fec:	d94e      	bls.n	c00708c <_vfiprintf_r+0x1c4>
 c006fee:	b1b0      	cbz	r0, c00701e <_vfiprintf_r+0x156>
 c006ff0:	9207      	str	r2, [sp, #28]
 c006ff2:	e014      	b.n	c00701e <_vfiprintf_r+0x156>
 c006ff4:	eba0 0308 	sub.w	r3, r0, r8
 c006ff8:	46a2      	mov	sl, r4
 c006ffa:	fa09 f303 	lsl.w	r3, r9, r3
 c006ffe:	4313      	orrs	r3, r2
 c007000:	9304      	str	r3, [sp, #16]
 c007002:	e7d2      	b.n	c006faa <_vfiprintf_r+0xe2>
 c007004:	9b03      	ldr	r3, [sp, #12]
 c007006:	1d19      	adds	r1, r3, #4
 c007008:	681b      	ldr	r3, [r3, #0]
 c00700a:	2b00      	cmp	r3, #0
 c00700c:	9103      	str	r1, [sp, #12]
 c00700e:	bfbb      	ittet	lt
 c007010:	425b      	neglt	r3, r3
 c007012:	f042 0202 	orrlt.w	r2, r2, #2
 c007016:	9307      	strge	r3, [sp, #28]
 c007018:	9307      	strlt	r3, [sp, #28]
 c00701a:	bfb8      	it	lt
 c00701c:	9204      	strlt	r2, [sp, #16]
 c00701e:	7823      	ldrb	r3, [r4, #0]
 c007020:	2b2e      	cmp	r3, #46	; 0x2e
 c007022:	d10c      	bne.n	c00703e <_vfiprintf_r+0x176>
 c007024:	7863      	ldrb	r3, [r4, #1]
 c007026:	2b2a      	cmp	r3, #42	; 0x2a
 c007028:	d135      	bne.n	c007096 <_vfiprintf_r+0x1ce>
 c00702a:	9b03      	ldr	r3, [sp, #12]
 c00702c:	3402      	adds	r4, #2
 c00702e:	1d1a      	adds	r2, r3, #4
 c007030:	681b      	ldr	r3, [r3, #0]
 c007032:	2b00      	cmp	r3, #0
 c007034:	9203      	str	r2, [sp, #12]
 c007036:	bfb8      	it	lt
 c007038:	f04f 33ff 	movlt.w	r3, #4294967295
 c00703c:	9305      	str	r3, [sp, #20]
 c00703e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c007124 <_vfiprintf_r+0x25c>
 c007042:	2203      	movs	r2, #3
 c007044:	7821      	ldrb	r1, [r4, #0]
 c007046:	4650      	mov	r0, sl
 c007048:	f000 fc72 	bl	c007930 <memchr>
 c00704c:	b140      	cbz	r0, c007060 <_vfiprintf_r+0x198>
 c00704e:	2340      	movs	r3, #64	; 0x40
 c007050:	eba0 000a 	sub.w	r0, r0, sl
 c007054:	3401      	adds	r4, #1
 c007056:	fa03 f000 	lsl.w	r0, r3, r0
 c00705a:	9b04      	ldr	r3, [sp, #16]
 c00705c:	4303      	orrs	r3, r0
 c00705e:	9304      	str	r3, [sp, #16]
 c007060:	f814 1b01 	ldrb.w	r1, [r4], #1
 c007064:	2206      	movs	r2, #6
 c007066:	482c      	ldr	r0, [pc, #176]	; (c007118 <_vfiprintf_r+0x250>)
 c007068:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c00706c:	f000 fc60 	bl	c007930 <memchr>
 c007070:	2800      	cmp	r0, #0
 c007072:	d03f      	beq.n	c0070f4 <_vfiprintf_r+0x22c>
 c007074:	4b29      	ldr	r3, [pc, #164]	; (c00711c <_vfiprintf_r+0x254>)
 c007076:	bb1b      	cbnz	r3, c0070c0 <_vfiprintf_r+0x1f8>
 c007078:	9b03      	ldr	r3, [sp, #12]
 c00707a:	3307      	adds	r3, #7
 c00707c:	f023 0307 	bic.w	r3, r3, #7
 c007080:	3308      	adds	r3, #8
 c007082:	9303      	str	r3, [sp, #12]
 c007084:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c007086:	443b      	add	r3, r7
 c007088:	9309      	str	r3, [sp, #36]	; 0x24
 c00708a:	e767      	b.n	c006f5c <_vfiprintf_r+0x94>
 c00708c:	fb0c 3202 	mla	r2, ip, r2, r3
 c007090:	460c      	mov	r4, r1
 c007092:	2001      	movs	r0, #1
 c007094:	e7a5      	b.n	c006fe2 <_vfiprintf_r+0x11a>
 c007096:	2300      	movs	r3, #0
 c007098:	3401      	adds	r4, #1
 c00709a:	f04f 0c0a 	mov.w	ip, #10
 c00709e:	4619      	mov	r1, r3
 c0070a0:	9305      	str	r3, [sp, #20]
 c0070a2:	4620      	mov	r0, r4
 c0070a4:	f810 2b01 	ldrb.w	r2, [r0], #1
 c0070a8:	3a30      	subs	r2, #48	; 0x30
 c0070aa:	2a09      	cmp	r2, #9
 c0070ac:	d903      	bls.n	c0070b6 <_vfiprintf_r+0x1ee>
 c0070ae:	2b00      	cmp	r3, #0
 c0070b0:	d0c5      	beq.n	c00703e <_vfiprintf_r+0x176>
 c0070b2:	9105      	str	r1, [sp, #20]
 c0070b4:	e7c3      	b.n	c00703e <_vfiprintf_r+0x176>
 c0070b6:	fb0c 2101 	mla	r1, ip, r1, r2
 c0070ba:	4604      	mov	r4, r0
 c0070bc:	2301      	movs	r3, #1
 c0070be:	e7f0      	b.n	c0070a2 <_vfiprintf_r+0x1da>
 c0070c0:	ab03      	add	r3, sp, #12
 c0070c2:	462a      	mov	r2, r5
 c0070c4:	a904      	add	r1, sp, #16
 c0070c6:	4630      	mov	r0, r6
 c0070c8:	9300      	str	r3, [sp, #0]
 c0070ca:	4b15      	ldr	r3, [pc, #84]	; (c007120 <_vfiprintf_r+0x258>)
 c0070cc:	e000      	b.n	c0070d0 <_vfiprintf_r+0x208>
 c0070ce:	bf00      	nop
 c0070d0:	4607      	mov	r7, r0
 c0070d2:	1c78      	adds	r0, r7, #1
 c0070d4:	d1d6      	bne.n	c007084 <_vfiprintf_r+0x1bc>
 c0070d6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c0070d8:	07d9      	lsls	r1, r3, #31
 c0070da:	d405      	bmi.n	c0070e8 <_vfiprintf_r+0x220>
 c0070dc:	89ab      	ldrh	r3, [r5, #12]
 c0070de:	059a      	lsls	r2, r3, #22
 c0070e0:	d402      	bmi.n	c0070e8 <_vfiprintf_r+0x220>
 c0070e2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0070e4:	f7ff fe31 	bl	c006d4a <__retarget_lock_release_recursive>
 c0070e8:	89ab      	ldrh	r3, [r5, #12]
 c0070ea:	065b      	lsls	r3, r3, #25
 c0070ec:	f53f af12 	bmi.w	c006f14 <_vfiprintf_r+0x4c>
 c0070f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 c0070f2:	e711      	b.n	c006f18 <_vfiprintf_r+0x50>
 c0070f4:	ab03      	add	r3, sp, #12
 c0070f6:	462a      	mov	r2, r5
 c0070f8:	a904      	add	r1, sp, #16
 c0070fa:	4630      	mov	r0, r6
 c0070fc:	9300      	str	r3, [sp, #0]
 c0070fe:	4b08      	ldr	r3, [pc, #32]	; (c007120 <_vfiprintf_r+0x258>)
 c007100:	f000 f882 	bl	c007208 <_printf_i>
 c007104:	e7e4      	b.n	c0070d0 <_vfiprintf_r+0x208>
 c007106:	bf00      	nop
 c007108:	0c008630 	.word	0x0c008630
 c00710c:	0c008650 	.word	0x0c008650
 c007110:	0c008610 	.word	0x0c008610
 c007114:	0c008670 	.word	0x0c008670
 c007118:	0c00867a 	.word	0x0c00867a
 c00711c:	00000000 	.word	0x00000000
 c007120:	0c006ea3 	.word	0x0c006ea3
 c007124:	0c008676 	.word	0x0c008676

0c007128 <_printf_common>:
 c007128:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c00712c:	4616      	mov	r6, r2
 c00712e:	4699      	mov	r9, r3
 c007130:	688a      	ldr	r2, [r1, #8]
 c007132:	4607      	mov	r7, r0
 c007134:	690b      	ldr	r3, [r1, #16]
 c007136:	460c      	mov	r4, r1
 c007138:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c00713c:	4293      	cmp	r3, r2
 c00713e:	bfb8      	it	lt
 c007140:	4613      	movlt	r3, r2
 c007142:	6033      	str	r3, [r6, #0]
 c007144:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c007148:	b10a      	cbz	r2, c00714e <_printf_common+0x26>
 c00714a:	3301      	adds	r3, #1
 c00714c:	6033      	str	r3, [r6, #0]
 c00714e:	6823      	ldr	r3, [r4, #0]
 c007150:	0699      	lsls	r1, r3, #26
 c007152:	bf42      	ittt	mi
 c007154:	6833      	ldrmi	r3, [r6, #0]
 c007156:	3302      	addmi	r3, #2
 c007158:	6033      	strmi	r3, [r6, #0]
 c00715a:	6825      	ldr	r5, [r4, #0]
 c00715c:	f015 0506 	ands.w	r5, r5, #6
 c007160:	d106      	bne.n	c007170 <_printf_common+0x48>
 c007162:	f104 0a19 	add.w	sl, r4, #25
 c007166:	68e3      	ldr	r3, [r4, #12]
 c007168:	6832      	ldr	r2, [r6, #0]
 c00716a:	1a9b      	subs	r3, r3, r2
 c00716c:	42ab      	cmp	r3, r5
 c00716e:	dc29      	bgt.n	c0071c4 <_printf_common+0x9c>
 c007170:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c007174:	1e13      	subs	r3, r2, #0
 c007176:	6822      	ldr	r2, [r4, #0]
 c007178:	bf18      	it	ne
 c00717a:	2301      	movne	r3, #1
 c00717c:	0692      	lsls	r2, r2, #26
 c00717e:	d42e      	bmi.n	c0071de <_printf_common+0xb6>
 c007180:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c007184:	4649      	mov	r1, r9
 c007186:	4638      	mov	r0, r7
 c007188:	47c0      	blx	r8
 c00718a:	3001      	adds	r0, #1
 c00718c:	d021      	beq.n	c0071d2 <_printf_common+0xaa>
 c00718e:	6823      	ldr	r3, [r4, #0]
 c007190:	341a      	adds	r4, #26
 c007192:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c007196:	f003 0306 	and.w	r3, r3, #6
 c00719a:	6832      	ldr	r2, [r6, #0]
 c00719c:	2600      	movs	r6, #0
 c00719e:	2b04      	cmp	r3, #4
 c0071a0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c0071a4:	bf08      	it	eq
 c0071a6:	1aad      	subeq	r5, r5, r2
 c0071a8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c0071ac:	bf14      	ite	ne
 c0071ae:	2500      	movne	r5, #0
 c0071b0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c0071b4:	4293      	cmp	r3, r2
 c0071b6:	bfc4      	itt	gt
 c0071b8:	1a9b      	subgt	r3, r3, r2
 c0071ba:	18ed      	addgt	r5, r5, r3
 c0071bc:	42b5      	cmp	r5, r6
 c0071be:	d11a      	bne.n	c0071f6 <_printf_common+0xce>
 c0071c0:	2000      	movs	r0, #0
 c0071c2:	e008      	b.n	c0071d6 <_printf_common+0xae>
 c0071c4:	2301      	movs	r3, #1
 c0071c6:	4652      	mov	r2, sl
 c0071c8:	4649      	mov	r1, r9
 c0071ca:	4638      	mov	r0, r7
 c0071cc:	47c0      	blx	r8
 c0071ce:	3001      	adds	r0, #1
 c0071d0:	d103      	bne.n	c0071da <_printf_common+0xb2>
 c0071d2:	f04f 30ff 	mov.w	r0, #4294967295
 c0071d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0071da:	3501      	adds	r5, #1
 c0071dc:	e7c3      	b.n	c007166 <_printf_common+0x3e>
 c0071de:	18e1      	adds	r1, r4, r3
 c0071e0:	1c5a      	adds	r2, r3, #1
 c0071e2:	2030      	movs	r0, #48	; 0x30
 c0071e4:	3302      	adds	r3, #2
 c0071e6:	4422      	add	r2, r4
 c0071e8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c0071ec:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c0071f0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c0071f4:	e7c4      	b.n	c007180 <_printf_common+0x58>
 c0071f6:	2301      	movs	r3, #1
 c0071f8:	4622      	mov	r2, r4
 c0071fa:	4649      	mov	r1, r9
 c0071fc:	4638      	mov	r0, r7
 c0071fe:	47c0      	blx	r8
 c007200:	3001      	adds	r0, #1
 c007202:	d0e6      	beq.n	c0071d2 <_printf_common+0xaa>
 c007204:	3601      	adds	r6, #1
 c007206:	e7d9      	b.n	c0071bc <_printf_common+0x94>

0c007208 <_printf_i>:
 c007208:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c00720c:	7e0f      	ldrb	r7, [r1, #24]
 c00720e:	4691      	mov	r9, r2
 c007210:	4680      	mov	r8, r0
 c007212:	460c      	mov	r4, r1
 c007214:	2f78      	cmp	r7, #120	; 0x78
 c007216:	469a      	mov	sl, r3
 c007218:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c00721a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c00721e:	d807      	bhi.n	c007230 <_printf_i+0x28>
 c007220:	2f62      	cmp	r7, #98	; 0x62
 c007222:	d80a      	bhi.n	c00723a <_printf_i+0x32>
 c007224:	2f00      	cmp	r7, #0
 c007226:	f000 80d8 	beq.w	c0073da <_printf_i+0x1d2>
 c00722a:	2f58      	cmp	r7, #88	; 0x58
 c00722c:	f000 80a3 	beq.w	c007376 <_printf_i+0x16e>
 c007230:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c007234:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c007238:	e03a      	b.n	c0072b0 <_printf_i+0xa8>
 c00723a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c00723e:	2b15      	cmp	r3, #21
 c007240:	d8f6      	bhi.n	c007230 <_printf_i+0x28>
 c007242:	a101      	add	r1, pc, #4	; (adr r1, c007248 <_printf_i+0x40>)
 c007244:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c007248:	0c0072a1 	.word	0x0c0072a1
 c00724c:	0c0072b5 	.word	0x0c0072b5
 c007250:	0c007231 	.word	0x0c007231
 c007254:	0c007231 	.word	0x0c007231
 c007258:	0c007231 	.word	0x0c007231
 c00725c:	0c007231 	.word	0x0c007231
 c007260:	0c0072b5 	.word	0x0c0072b5
 c007264:	0c007231 	.word	0x0c007231
 c007268:	0c007231 	.word	0x0c007231
 c00726c:	0c007231 	.word	0x0c007231
 c007270:	0c007231 	.word	0x0c007231
 c007274:	0c0073c1 	.word	0x0c0073c1
 c007278:	0c0072e5 	.word	0x0c0072e5
 c00727c:	0c0073a3 	.word	0x0c0073a3
 c007280:	0c007231 	.word	0x0c007231
 c007284:	0c007231 	.word	0x0c007231
 c007288:	0c0073e3 	.word	0x0c0073e3
 c00728c:	0c007231 	.word	0x0c007231
 c007290:	0c0072e5 	.word	0x0c0072e5
 c007294:	0c007231 	.word	0x0c007231
 c007298:	0c007231 	.word	0x0c007231
 c00729c:	0c0073ab 	.word	0x0c0073ab
 c0072a0:	682b      	ldr	r3, [r5, #0]
 c0072a2:	1d1a      	adds	r2, r3, #4
 c0072a4:	681b      	ldr	r3, [r3, #0]
 c0072a6:	602a      	str	r2, [r5, #0]
 c0072a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0072ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c0072b0:	2301      	movs	r3, #1
 c0072b2:	e0a3      	b.n	c0073fc <_printf_i+0x1f4>
 c0072b4:	6820      	ldr	r0, [r4, #0]
 c0072b6:	6829      	ldr	r1, [r5, #0]
 c0072b8:	0606      	lsls	r6, r0, #24
 c0072ba:	f101 0304 	add.w	r3, r1, #4
 c0072be:	d50a      	bpl.n	c0072d6 <_printf_i+0xce>
 c0072c0:	680e      	ldr	r6, [r1, #0]
 c0072c2:	602b      	str	r3, [r5, #0]
 c0072c4:	2e00      	cmp	r6, #0
 c0072c6:	da03      	bge.n	c0072d0 <_printf_i+0xc8>
 c0072c8:	232d      	movs	r3, #45	; 0x2d
 c0072ca:	4276      	negs	r6, r6
 c0072cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c0072d0:	485e      	ldr	r0, [pc, #376]	; (c00744c <_printf_i+0x244>)
 c0072d2:	230a      	movs	r3, #10
 c0072d4:	e019      	b.n	c00730a <_printf_i+0x102>
 c0072d6:	680e      	ldr	r6, [r1, #0]
 c0072d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 c0072dc:	602b      	str	r3, [r5, #0]
 c0072de:	bf18      	it	ne
 c0072e0:	b236      	sxthne	r6, r6
 c0072e2:	e7ef      	b.n	c0072c4 <_printf_i+0xbc>
 c0072e4:	682b      	ldr	r3, [r5, #0]
 c0072e6:	6820      	ldr	r0, [r4, #0]
 c0072e8:	1d19      	adds	r1, r3, #4
 c0072ea:	6029      	str	r1, [r5, #0]
 c0072ec:	0601      	lsls	r1, r0, #24
 c0072ee:	d501      	bpl.n	c0072f4 <_printf_i+0xec>
 c0072f0:	681e      	ldr	r6, [r3, #0]
 c0072f2:	e002      	b.n	c0072fa <_printf_i+0xf2>
 c0072f4:	0646      	lsls	r6, r0, #25
 c0072f6:	d5fb      	bpl.n	c0072f0 <_printf_i+0xe8>
 c0072f8:	881e      	ldrh	r6, [r3, #0]
 c0072fa:	2f6f      	cmp	r7, #111	; 0x6f
 c0072fc:	4853      	ldr	r0, [pc, #332]	; (c00744c <_printf_i+0x244>)
 c0072fe:	bf0c      	ite	eq
 c007300:	2308      	moveq	r3, #8
 c007302:	230a      	movne	r3, #10
 c007304:	2100      	movs	r1, #0
 c007306:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c00730a:	6865      	ldr	r5, [r4, #4]
 c00730c:	2d00      	cmp	r5, #0
 c00730e:	60a5      	str	r5, [r4, #8]
 c007310:	bfa2      	ittt	ge
 c007312:	6821      	ldrge	r1, [r4, #0]
 c007314:	f021 0104 	bicge.w	r1, r1, #4
 c007318:	6021      	strge	r1, [r4, #0]
 c00731a:	b90e      	cbnz	r6, c007320 <_printf_i+0x118>
 c00731c:	2d00      	cmp	r5, #0
 c00731e:	d04d      	beq.n	c0073bc <_printf_i+0x1b4>
 c007320:	4615      	mov	r5, r2
 c007322:	fbb6 f1f3 	udiv	r1, r6, r3
 c007326:	fb03 6711 	mls	r7, r3, r1, r6
 c00732a:	5dc7      	ldrb	r7, [r0, r7]
 c00732c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c007330:	4637      	mov	r7, r6
 c007332:	460e      	mov	r6, r1
 c007334:	42bb      	cmp	r3, r7
 c007336:	d9f4      	bls.n	c007322 <_printf_i+0x11a>
 c007338:	2b08      	cmp	r3, #8
 c00733a:	d10b      	bne.n	c007354 <_printf_i+0x14c>
 c00733c:	6823      	ldr	r3, [r4, #0]
 c00733e:	07de      	lsls	r6, r3, #31
 c007340:	d508      	bpl.n	c007354 <_printf_i+0x14c>
 c007342:	6923      	ldr	r3, [r4, #16]
 c007344:	6861      	ldr	r1, [r4, #4]
 c007346:	4299      	cmp	r1, r3
 c007348:	bfde      	ittt	le
 c00734a:	2330      	movle	r3, #48	; 0x30
 c00734c:	f805 3c01 	strble.w	r3, [r5, #-1]
 c007350:	f105 35ff 	addle.w	r5, r5, #4294967295
 c007354:	1b52      	subs	r2, r2, r5
 c007356:	6122      	str	r2, [r4, #16]
 c007358:	464b      	mov	r3, r9
 c00735a:	aa03      	add	r2, sp, #12
 c00735c:	4621      	mov	r1, r4
 c00735e:	4640      	mov	r0, r8
 c007360:	f8cd a000 	str.w	sl, [sp]
 c007364:	f7ff fee0 	bl	c007128 <_printf_common>
 c007368:	3001      	adds	r0, #1
 c00736a:	d14c      	bne.n	c007406 <_printf_i+0x1fe>
 c00736c:	f04f 30ff 	mov.w	r0, #4294967295
 c007370:	b004      	add	sp, #16
 c007372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c007376:	4835      	ldr	r0, [pc, #212]	; (c00744c <_printf_i+0x244>)
 c007378:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c00737c:	6829      	ldr	r1, [r5, #0]
 c00737e:	6823      	ldr	r3, [r4, #0]
 c007380:	f851 6b04 	ldr.w	r6, [r1], #4
 c007384:	6029      	str	r1, [r5, #0]
 c007386:	061d      	lsls	r5, r3, #24
 c007388:	d514      	bpl.n	c0073b4 <_printf_i+0x1ac>
 c00738a:	07df      	lsls	r7, r3, #31
 c00738c:	bf44      	itt	mi
 c00738e:	f043 0320 	orrmi.w	r3, r3, #32
 c007392:	6023      	strmi	r3, [r4, #0]
 c007394:	b91e      	cbnz	r6, c00739e <_printf_i+0x196>
 c007396:	6823      	ldr	r3, [r4, #0]
 c007398:	f023 0320 	bic.w	r3, r3, #32
 c00739c:	6023      	str	r3, [r4, #0]
 c00739e:	2310      	movs	r3, #16
 c0073a0:	e7b0      	b.n	c007304 <_printf_i+0xfc>
 c0073a2:	6823      	ldr	r3, [r4, #0]
 c0073a4:	f043 0320 	orr.w	r3, r3, #32
 c0073a8:	6023      	str	r3, [r4, #0]
 c0073aa:	2378      	movs	r3, #120	; 0x78
 c0073ac:	4828      	ldr	r0, [pc, #160]	; (c007450 <_printf_i+0x248>)
 c0073ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c0073b2:	e7e3      	b.n	c00737c <_printf_i+0x174>
 c0073b4:	0659      	lsls	r1, r3, #25
 c0073b6:	bf48      	it	mi
 c0073b8:	b2b6      	uxthmi	r6, r6
 c0073ba:	e7e6      	b.n	c00738a <_printf_i+0x182>
 c0073bc:	4615      	mov	r5, r2
 c0073be:	e7bb      	b.n	c007338 <_printf_i+0x130>
 c0073c0:	682b      	ldr	r3, [r5, #0]
 c0073c2:	6826      	ldr	r6, [r4, #0]
 c0073c4:	1d18      	adds	r0, r3, #4
 c0073c6:	6961      	ldr	r1, [r4, #20]
 c0073c8:	6028      	str	r0, [r5, #0]
 c0073ca:	0635      	lsls	r5, r6, #24
 c0073cc:	681b      	ldr	r3, [r3, #0]
 c0073ce:	d501      	bpl.n	c0073d4 <_printf_i+0x1cc>
 c0073d0:	6019      	str	r1, [r3, #0]
 c0073d2:	e002      	b.n	c0073da <_printf_i+0x1d2>
 c0073d4:	0670      	lsls	r0, r6, #25
 c0073d6:	d5fb      	bpl.n	c0073d0 <_printf_i+0x1c8>
 c0073d8:	8019      	strh	r1, [r3, #0]
 c0073da:	2300      	movs	r3, #0
 c0073dc:	4615      	mov	r5, r2
 c0073de:	6123      	str	r3, [r4, #16]
 c0073e0:	e7ba      	b.n	c007358 <_printf_i+0x150>
 c0073e2:	682b      	ldr	r3, [r5, #0]
 c0073e4:	2100      	movs	r1, #0
 c0073e6:	1d1a      	adds	r2, r3, #4
 c0073e8:	602a      	str	r2, [r5, #0]
 c0073ea:	681d      	ldr	r5, [r3, #0]
 c0073ec:	6862      	ldr	r2, [r4, #4]
 c0073ee:	4628      	mov	r0, r5
 c0073f0:	f000 fa9e 	bl	c007930 <memchr>
 c0073f4:	b108      	cbz	r0, c0073fa <_printf_i+0x1f2>
 c0073f6:	1b40      	subs	r0, r0, r5
 c0073f8:	6060      	str	r0, [r4, #4]
 c0073fa:	6863      	ldr	r3, [r4, #4]
 c0073fc:	6123      	str	r3, [r4, #16]
 c0073fe:	2300      	movs	r3, #0
 c007400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c007404:	e7a8      	b.n	c007358 <_printf_i+0x150>
 c007406:	6923      	ldr	r3, [r4, #16]
 c007408:	462a      	mov	r2, r5
 c00740a:	4649      	mov	r1, r9
 c00740c:	4640      	mov	r0, r8
 c00740e:	47d0      	blx	sl
 c007410:	3001      	adds	r0, #1
 c007412:	d0ab      	beq.n	c00736c <_printf_i+0x164>
 c007414:	6823      	ldr	r3, [r4, #0]
 c007416:	079b      	lsls	r3, r3, #30
 c007418:	d413      	bmi.n	c007442 <_printf_i+0x23a>
 c00741a:	68e0      	ldr	r0, [r4, #12]
 c00741c:	9b03      	ldr	r3, [sp, #12]
 c00741e:	4298      	cmp	r0, r3
 c007420:	bfb8      	it	lt
 c007422:	4618      	movlt	r0, r3
 c007424:	e7a4      	b.n	c007370 <_printf_i+0x168>
 c007426:	2301      	movs	r3, #1
 c007428:	4632      	mov	r2, r6
 c00742a:	4649      	mov	r1, r9
 c00742c:	4640      	mov	r0, r8
 c00742e:	47d0      	blx	sl
 c007430:	3001      	adds	r0, #1
 c007432:	d09b      	beq.n	c00736c <_printf_i+0x164>
 c007434:	3501      	adds	r5, #1
 c007436:	68e3      	ldr	r3, [r4, #12]
 c007438:	9903      	ldr	r1, [sp, #12]
 c00743a:	1a5b      	subs	r3, r3, r1
 c00743c:	42ab      	cmp	r3, r5
 c00743e:	dcf2      	bgt.n	c007426 <_printf_i+0x21e>
 c007440:	e7eb      	b.n	c00741a <_printf_i+0x212>
 c007442:	2500      	movs	r5, #0
 c007444:	f104 0619 	add.w	r6, r4, #25
 c007448:	e7f5      	b.n	c007436 <_printf_i+0x22e>
 c00744a:	bf00      	nop
 c00744c:	0c008681 	.word	0x0c008681
 c007450:	0c008692 	.word	0x0c008692

0c007454 <_sbrk_r>:
 c007454:	b538      	push	{r3, r4, r5, lr}
 c007456:	2300      	movs	r3, #0
 c007458:	4d05      	ldr	r5, [pc, #20]	; (c007470 <_sbrk_r+0x1c>)
 c00745a:	4604      	mov	r4, r0
 c00745c:	4608      	mov	r0, r1
 c00745e:	602b      	str	r3, [r5, #0]
 c007460:	f7fa fce0 	bl	c001e24 <_sbrk>
 c007464:	1c43      	adds	r3, r0, #1
 c007466:	d102      	bne.n	c00746e <_sbrk_r+0x1a>
 c007468:	682b      	ldr	r3, [r5, #0]
 c00746a:	b103      	cbz	r3, c00746e <_sbrk_r+0x1a>
 c00746c:	6023      	str	r3, [r4, #0]
 c00746e:	bd38      	pop	{r3, r4, r5, pc}
 c007470:	30000b88 	.word	0x30000b88

0c007474 <__sread>:
 c007474:	b510      	push	{r4, lr}
 c007476:	460c      	mov	r4, r1
 c007478:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00747c:	f000 fabe 	bl	c0079fc <_read_r>
 c007480:	2800      	cmp	r0, #0
 c007482:	bfab      	itete	ge
 c007484:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c007486:	89a3      	ldrhlt	r3, [r4, #12]
 c007488:	181b      	addge	r3, r3, r0
 c00748a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c00748e:	bfac      	ite	ge
 c007490:	6563      	strge	r3, [r4, #84]	; 0x54
 c007492:	81a3      	strhlt	r3, [r4, #12]
 c007494:	bd10      	pop	{r4, pc}

0c007496 <__swrite>:
 c007496:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00749a:	461f      	mov	r7, r3
 c00749c:	898b      	ldrh	r3, [r1, #12]
 c00749e:	4605      	mov	r5, r0
 c0074a0:	460c      	mov	r4, r1
 c0074a2:	05db      	lsls	r3, r3, #23
 c0074a4:	4616      	mov	r6, r2
 c0074a6:	d505      	bpl.n	c0074b4 <__swrite+0x1e>
 c0074a8:	2302      	movs	r3, #2
 c0074aa:	2200      	movs	r2, #0
 c0074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0074b0:	f000 f9c6 	bl	c007840 <_lseek_r>
 c0074b4:	89a3      	ldrh	r3, [r4, #12]
 c0074b6:	4632      	mov	r2, r6
 c0074b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0074bc:	4628      	mov	r0, r5
 c0074be:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c0074c2:	81a3      	strh	r3, [r4, #12]
 c0074c4:	463b      	mov	r3, r7
 c0074c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0074ca:	f000 b869 	b.w	c0075a0 <_write_r>

0c0074ce <__sseek>:
 c0074ce:	b510      	push	{r4, lr}
 c0074d0:	460c      	mov	r4, r1
 c0074d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0074d6:	f000 f9b3 	bl	c007840 <_lseek_r>
 c0074da:	1c43      	adds	r3, r0, #1
 c0074dc:	89a3      	ldrh	r3, [r4, #12]
 c0074de:	bf15      	itete	ne
 c0074e0:	6560      	strne	r0, [r4, #84]	; 0x54
 c0074e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c0074e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c0074ea:	81a3      	strheq	r3, [r4, #12]
 c0074ec:	bf18      	it	ne
 c0074ee:	81a3      	strhne	r3, [r4, #12]
 c0074f0:	bd10      	pop	{r4, pc}

0c0074f2 <__sclose>:
 c0074f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0074f6:	f000 b8d3 	b.w	c0076a0 <_close_r>
	...

0c0074fc <__swbuf_r>:
 c0074fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0074fe:	460e      	mov	r6, r1
 c007500:	4614      	mov	r4, r2
 c007502:	4605      	mov	r5, r0
 c007504:	b118      	cbz	r0, c00750e <__swbuf_r+0x12>
 c007506:	6983      	ldr	r3, [r0, #24]
 c007508:	b90b      	cbnz	r3, c00750e <__swbuf_r+0x12>
 c00750a:	f7ff fb7f 	bl	c006c0c <__sinit>
 c00750e:	4b21      	ldr	r3, [pc, #132]	; (c007594 <__swbuf_r+0x98>)
 c007510:	429c      	cmp	r4, r3
 c007512:	d12b      	bne.n	c00756c <__swbuf_r+0x70>
 c007514:	686c      	ldr	r4, [r5, #4]
 c007516:	69a3      	ldr	r3, [r4, #24]
 c007518:	60a3      	str	r3, [r4, #8]
 c00751a:	89a3      	ldrh	r3, [r4, #12]
 c00751c:	071a      	lsls	r2, r3, #28
 c00751e:	d52f      	bpl.n	c007580 <__swbuf_r+0x84>
 c007520:	6923      	ldr	r3, [r4, #16]
 c007522:	b36b      	cbz	r3, c007580 <__swbuf_r+0x84>
 c007524:	6923      	ldr	r3, [r4, #16]
 c007526:	b2f6      	uxtb	r6, r6
 c007528:	6820      	ldr	r0, [r4, #0]
 c00752a:	4637      	mov	r7, r6
 c00752c:	1ac0      	subs	r0, r0, r3
 c00752e:	6963      	ldr	r3, [r4, #20]
 c007530:	4283      	cmp	r3, r0
 c007532:	dc04      	bgt.n	c00753e <__swbuf_r+0x42>
 c007534:	4621      	mov	r1, r4
 c007536:	4628      	mov	r0, r5
 c007538:	f000 f946 	bl	c0077c8 <_fflush_r>
 c00753c:	bb30      	cbnz	r0, c00758c <__swbuf_r+0x90>
 c00753e:	68a3      	ldr	r3, [r4, #8]
 c007540:	3001      	adds	r0, #1
 c007542:	3b01      	subs	r3, #1
 c007544:	60a3      	str	r3, [r4, #8]
 c007546:	6823      	ldr	r3, [r4, #0]
 c007548:	1c5a      	adds	r2, r3, #1
 c00754a:	6022      	str	r2, [r4, #0]
 c00754c:	701e      	strb	r6, [r3, #0]
 c00754e:	6963      	ldr	r3, [r4, #20]
 c007550:	4283      	cmp	r3, r0
 c007552:	d004      	beq.n	c00755e <__swbuf_r+0x62>
 c007554:	89a3      	ldrh	r3, [r4, #12]
 c007556:	07db      	lsls	r3, r3, #31
 c007558:	d506      	bpl.n	c007568 <__swbuf_r+0x6c>
 c00755a:	2e0a      	cmp	r6, #10
 c00755c:	d104      	bne.n	c007568 <__swbuf_r+0x6c>
 c00755e:	4621      	mov	r1, r4
 c007560:	4628      	mov	r0, r5
 c007562:	f000 f931 	bl	c0077c8 <_fflush_r>
 c007566:	b988      	cbnz	r0, c00758c <__swbuf_r+0x90>
 c007568:	4638      	mov	r0, r7
 c00756a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00756c:	4b0a      	ldr	r3, [pc, #40]	; (c007598 <__swbuf_r+0x9c>)
 c00756e:	429c      	cmp	r4, r3
 c007570:	d101      	bne.n	c007576 <__swbuf_r+0x7a>
 c007572:	68ac      	ldr	r4, [r5, #8]
 c007574:	e7cf      	b.n	c007516 <__swbuf_r+0x1a>
 c007576:	4b09      	ldr	r3, [pc, #36]	; (c00759c <__swbuf_r+0xa0>)
 c007578:	429c      	cmp	r4, r3
 c00757a:	bf08      	it	eq
 c00757c:	68ec      	ldreq	r4, [r5, #12]
 c00757e:	e7ca      	b.n	c007516 <__swbuf_r+0x1a>
 c007580:	4621      	mov	r1, r4
 c007582:	4628      	mov	r0, r5
 c007584:	f000 f81e 	bl	c0075c4 <__swsetup_r>
 c007588:	2800      	cmp	r0, #0
 c00758a:	d0cb      	beq.n	c007524 <__swbuf_r+0x28>
 c00758c:	f04f 37ff 	mov.w	r7, #4294967295
 c007590:	e7ea      	b.n	c007568 <__swbuf_r+0x6c>
 c007592:	bf00      	nop
 c007594:	0c008630 	.word	0x0c008630
 c007598:	0c008650 	.word	0x0c008650
 c00759c:	0c008610 	.word	0x0c008610

0c0075a0 <_write_r>:
 c0075a0:	b538      	push	{r3, r4, r5, lr}
 c0075a2:	4604      	mov	r4, r0
 c0075a4:	4d06      	ldr	r5, [pc, #24]	; (c0075c0 <_write_r+0x20>)
 c0075a6:	4608      	mov	r0, r1
 c0075a8:	4611      	mov	r1, r2
 c0075aa:	2200      	movs	r2, #0
 c0075ac:	602a      	str	r2, [r5, #0]
 c0075ae:	461a      	mov	r2, r3
 c0075b0:	f7fa fbe7 	bl	c001d82 <_write>
 c0075b4:	1c43      	adds	r3, r0, #1
 c0075b6:	d102      	bne.n	c0075be <_write_r+0x1e>
 c0075b8:	682b      	ldr	r3, [r5, #0]
 c0075ba:	b103      	cbz	r3, c0075be <_write_r+0x1e>
 c0075bc:	6023      	str	r3, [r4, #0]
 c0075be:	bd38      	pop	{r3, r4, r5, pc}
 c0075c0:	30000b88 	.word	0x30000b88

0c0075c4 <__swsetup_r>:
 c0075c4:	4b32      	ldr	r3, [pc, #200]	; (c007690 <__swsetup_r+0xcc>)
 c0075c6:	b570      	push	{r4, r5, r6, lr}
 c0075c8:	681d      	ldr	r5, [r3, #0]
 c0075ca:	4606      	mov	r6, r0
 c0075cc:	460c      	mov	r4, r1
 c0075ce:	b125      	cbz	r5, c0075da <__swsetup_r+0x16>
 c0075d0:	69ab      	ldr	r3, [r5, #24]
 c0075d2:	b913      	cbnz	r3, c0075da <__swsetup_r+0x16>
 c0075d4:	4628      	mov	r0, r5
 c0075d6:	f7ff fb19 	bl	c006c0c <__sinit>
 c0075da:	4b2e      	ldr	r3, [pc, #184]	; (c007694 <__swsetup_r+0xd0>)
 c0075dc:	429c      	cmp	r4, r3
 c0075de:	d10f      	bne.n	c007600 <__swsetup_r+0x3c>
 c0075e0:	686c      	ldr	r4, [r5, #4]
 c0075e2:	89a3      	ldrh	r3, [r4, #12]
 c0075e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c0075e8:	0719      	lsls	r1, r3, #28
 c0075ea:	d42c      	bmi.n	c007646 <__swsetup_r+0x82>
 c0075ec:	06dd      	lsls	r5, r3, #27
 c0075ee:	d411      	bmi.n	c007614 <__swsetup_r+0x50>
 c0075f0:	2309      	movs	r3, #9
 c0075f2:	6033      	str	r3, [r6, #0]
 c0075f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c0075f8:	f04f 30ff 	mov.w	r0, #4294967295
 c0075fc:	81a3      	strh	r3, [r4, #12]
 c0075fe:	e03e      	b.n	c00767e <__swsetup_r+0xba>
 c007600:	4b25      	ldr	r3, [pc, #148]	; (c007698 <__swsetup_r+0xd4>)
 c007602:	429c      	cmp	r4, r3
 c007604:	d101      	bne.n	c00760a <__swsetup_r+0x46>
 c007606:	68ac      	ldr	r4, [r5, #8]
 c007608:	e7eb      	b.n	c0075e2 <__swsetup_r+0x1e>
 c00760a:	4b24      	ldr	r3, [pc, #144]	; (c00769c <__swsetup_r+0xd8>)
 c00760c:	429c      	cmp	r4, r3
 c00760e:	bf08      	it	eq
 c007610:	68ec      	ldreq	r4, [r5, #12]
 c007612:	e7e6      	b.n	c0075e2 <__swsetup_r+0x1e>
 c007614:	0758      	lsls	r0, r3, #29
 c007616:	d512      	bpl.n	c00763e <__swsetup_r+0x7a>
 c007618:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00761a:	b141      	cbz	r1, c00762e <__swsetup_r+0x6a>
 c00761c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c007620:	4299      	cmp	r1, r3
 c007622:	d002      	beq.n	c00762a <__swsetup_r+0x66>
 c007624:	4630      	mov	r0, r6
 c007626:	f000 f99d 	bl	c007964 <_free_r>
 c00762a:	2300      	movs	r3, #0
 c00762c:	6363      	str	r3, [r4, #52]	; 0x34
 c00762e:	89a3      	ldrh	r3, [r4, #12]
 c007630:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c007634:	81a3      	strh	r3, [r4, #12]
 c007636:	2300      	movs	r3, #0
 c007638:	6063      	str	r3, [r4, #4]
 c00763a:	6923      	ldr	r3, [r4, #16]
 c00763c:	6023      	str	r3, [r4, #0]
 c00763e:	89a3      	ldrh	r3, [r4, #12]
 c007640:	f043 0308 	orr.w	r3, r3, #8
 c007644:	81a3      	strh	r3, [r4, #12]
 c007646:	6923      	ldr	r3, [r4, #16]
 c007648:	b94b      	cbnz	r3, c00765e <__swsetup_r+0x9a>
 c00764a:	89a3      	ldrh	r3, [r4, #12]
 c00764c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c007650:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c007654:	d003      	beq.n	c00765e <__swsetup_r+0x9a>
 c007656:	4621      	mov	r1, r4
 c007658:	4630      	mov	r0, r6
 c00765a:	f000 f929 	bl	c0078b0 <__smakebuf_r>
 c00765e:	89a0      	ldrh	r0, [r4, #12]
 c007660:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c007664:	f010 0301 	ands.w	r3, r0, #1
 c007668:	d00a      	beq.n	c007680 <__swsetup_r+0xbc>
 c00766a:	2300      	movs	r3, #0
 c00766c:	60a3      	str	r3, [r4, #8]
 c00766e:	6963      	ldr	r3, [r4, #20]
 c007670:	425b      	negs	r3, r3
 c007672:	61a3      	str	r3, [r4, #24]
 c007674:	6923      	ldr	r3, [r4, #16]
 c007676:	b943      	cbnz	r3, c00768a <__swsetup_r+0xc6>
 c007678:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c00767c:	d1ba      	bne.n	c0075f4 <__swsetup_r+0x30>
 c00767e:	bd70      	pop	{r4, r5, r6, pc}
 c007680:	0781      	lsls	r1, r0, #30
 c007682:	bf58      	it	pl
 c007684:	6963      	ldrpl	r3, [r4, #20]
 c007686:	60a3      	str	r3, [r4, #8]
 c007688:	e7f4      	b.n	c007674 <__swsetup_r+0xb0>
 c00768a:	2000      	movs	r0, #0
 c00768c:	e7f7      	b.n	c00767e <__swsetup_r+0xba>
 c00768e:	bf00      	nop
 c007690:	30000044 	.word	0x30000044
 c007694:	0c008630 	.word	0x0c008630
 c007698:	0c008650 	.word	0x0c008650
 c00769c:	0c008610 	.word	0x0c008610

0c0076a0 <_close_r>:
 c0076a0:	b538      	push	{r3, r4, r5, lr}
 c0076a2:	2300      	movs	r3, #0
 c0076a4:	4d05      	ldr	r5, [pc, #20]	; (c0076bc <_close_r+0x1c>)
 c0076a6:	4604      	mov	r4, r0
 c0076a8:	4608      	mov	r0, r1
 c0076aa:	602b      	str	r3, [r5, #0]
 c0076ac:	f7fa fb85 	bl	c001dba <_close>
 c0076b0:	1c43      	adds	r3, r0, #1
 c0076b2:	d102      	bne.n	c0076ba <_close_r+0x1a>
 c0076b4:	682b      	ldr	r3, [r5, #0]
 c0076b6:	b103      	cbz	r3, c0076ba <_close_r+0x1a>
 c0076b8:	6023      	str	r3, [r4, #0]
 c0076ba:	bd38      	pop	{r3, r4, r5, pc}
 c0076bc:	30000b88 	.word	0x30000b88

0c0076c0 <__sflush_r>:
 c0076c0:	898a      	ldrh	r2, [r1, #12]
 c0076c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0076c6:	4605      	mov	r5, r0
 c0076c8:	0710      	lsls	r0, r2, #28
 c0076ca:	460c      	mov	r4, r1
 c0076cc:	d458      	bmi.n	c007780 <__sflush_r+0xc0>
 c0076ce:	684b      	ldr	r3, [r1, #4]
 c0076d0:	2b00      	cmp	r3, #0
 c0076d2:	dc05      	bgt.n	c0076e0 <__sflush_r+0x20>
 c0076d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c0076d6:	2b00      	cmp	r3, #0
 c0076d8:	dc02      	bgt.n	c0076e0 <__sflush_r+0x20>
 c0076da:	2000      	movs	r0, #0
 c0076dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c0076e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c0076e2:	2e00      	cmp	r6, #0
 c0076e4:	d0f9      	beq.n	c0076da <__sflush_r+0x1a>
 c0076e6:	2300      	movs	r3, #0
 c0076e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c0076ec:	682f      	ldr	r7, [r5, #0]
 c0076ee:	602b      	str	r3, [r5, #0]
 c0076f0:	d032      	beq.n	c007758 <__sflush_r+0x98>
 c0076f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c0076f4:	89a3      	ldrh	r3, [r4, #12]
 c0076f6:	075a      	lsls	r2, r3, #29
 c0076f8:	d505      	bpl.n	c007706 <__sflush_r+0x46>
 c0076fa:	6863      	ldr	r3, [r4, #4]
 c0076fc:	1ac0      	subs	r0, r0, r3
 c0076fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c007700:	b10b      	cbz	r3, c007706 <__sflush_r+0x46>
 c007702:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c007704:	1ac0      	subs	r0, r0, r3
 c007706:	2300      	movs	r3, #0
 c007708:	4602      	mov	r2, r0
 c00770a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00770c:	4628      	mov	r0, r5
 c00770e:	6a21      	ldr	r1, [r4, #32]
 c007710:	47b0      	blx	r6
 c007712:	1c43      	adds	r3, r0, #1
 c007714:	89a3      	ldrh	r3, [r4, #12]
 c007716:	d106      	bne.n	c007726 <__sflush_r+0x66>
 c007718:	6829      	ldr	r1, [r5, #0]
 c00771a:	291d      	cmp	r1, #29
 c00771c:	d82c      	bhi.n	c007778 <__sflush_r+0xb8>
 c00771e:	4a29      	ldr	r2, [pc, #164]	; (c0077c4 <__sflush_r+0x104>)
 c007720:	40ca      	lsrs	r2, r1
 c007722:	07d6      	lsls	r6, r2, #31
 c007724:	d528      	bpl.n	c007778 <__sflush_r+0xb8>
 c007726:	2200      	movs	r2, #0
 c007728:	04d9      	lsls	r1, r3, #19
 c00772a:	6062      	str	r2, [r4, #4]
 c00772c:	6922      	ldr	r2, [r4, #16]
 c00772e:	6022      	str	r2, [r4, #0]
 c007730:	d504      	bpl.n	c00773c <__sflush_r+0x7c>
 c007732:	1c42      	adds	r2, r0, #1
 c007734:	d101      	bne.n	c00773a <__sflush_r+0x7a>
 c007736:	682b      	ldr	r3, [r5, #0]
 c007738:	b903      	cbnz	r3, c00773c <__sflush_r+0x7c>
 c00773a:	6560      	str	r0, [r4, #84]	; 0x54
 c00773c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00773e:	602f      	str	r7, [r5, #0]
 c007740:	2900      	cmp	r1, #0
 c007742:	d0ca      	beq.n	c0076da <__sflush_r+0x1a>
 c007744:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c007748:	4299      	cmp	r1, r3
 c00774a:	d002      	beq.n	c007752 <__sflush_r+0x92>
 c00774c:	4628      	mov	r0, r5
 c00774e:	f000 f909 	bl	c007964 <_free_r>
 c007752:	2000      	movs	r0, #0
 c007754:	6360      	str	r0, [r4, #52]	; 0x34
 c007756:	e7c1      	b.n	c0076dc <__sflush_r+0x1c>
 c007758:	6a21      	ldr	r1, [r4, #32]
 c00775a:	2301      	movs	r3, #1
 c00775c:	4628      	mov	r0, r5
 c00775e:	47b0      	blx	r6
 c007760:	1c41      	adds	r1, r0, #1
 c007762:	d1c7      	bne.n	c0076f4 <__sflush_r+0x34>
 c007764:	682b      	ldr	r3, [r5, #0]
 c007766:	2b00      	cmp	r3, #0
 c007768:	d0c4      	beq.n	c0076f4 <__sflush_r+0x34>
 c00776a:	2b1d      	cmp	r3, #29
 c00776c:	d001      	beq.n	c007772 <__sflush_r+0xb2>
 c00776e:	2b16      	cmp	r3, #22
 c007770:	d101      	bne.n	c007776 <__sflush_r+0xb6>
 c007772:	602f      	str	r7, [r5, #0]
 c007774:	e7b1      	b.n	c0076da <__sflush_r+0x1a>
 c007776:	89a3      	ldrh	r3, [r4, #12]
 c007778:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00777c:	81a3      	strh	r3, [r4, #12]
 c00777e:	e7ad      	b.n	c0076dc <__sflush_r+0x1c>
 c007780:	690f      	ldr	r7, [r1, #16]
 c007782:	2f00      	cmp	r7, #0
 c007784:	d0a9      	beq.n	c0076da <__sflush_r+0x1a>
 c007786:	0793      	lsls	r3, r2, #30
 c007788:	680e      	ldr	r6, [r1, #0]
 c00778a:	600f      	str	r7, [r1, #0]
 c00778c:	bf0c      	ite	eq
 c00778e:	694b      	ldreq	r3, [r1, #20]
 c007790:	2300      	movne	r3, #0
 c007792:	eba6 0807 	sub.w	r8, r6, r7
 c007796:	608b      	str	r3, [r1, #8]
 c007798:	f1b8 0f00 	cmp.w	r8, #0
 c00779c:	dd9d      	ble.n	c0076da <__sflush_r+0x1a>
 c00779e:	4643      	mov	r3, r8
 c0077a0:	463a      	mov	r2, r7
 c0077a2:	6a21      	ldr	r1, [r4, #32]
 c0077a4:	4628      	mov	r0, r5
 c0077a6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c0077a8:	47b0      	blx	r6
 c0077aa:	2800      	cmp	r0, #0
 c0077ac:	dc06      	bgt.n	c0077bc <__sflush_r+0xfc>
 c0077ae:	89a3      	ldrh	r3, [r4, #12]
 c0077b0:	f04f 30ff 	mov.w	r0, #4294967295
 c0077b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0077b8:	81a3      	strh	r3, [r4, #12]
 c0077ba:	e78f      	b.n	c0076dc <__sflush_r+0x1c>
 c0077bc:	4407      	add	r7, r0
 c0077be:	eba8 0800 	sub.w	r8, r8, r0
 c0077c2:	e7e9      	b.n	c007798 <__sflush_r+0xd8>
 c0077c4:	20400001 	.word	0x20400001

0c0077c8 <_fflush_r>:
 c0077c8:	b538      	push	{r3, r4, r5, lr}
 c0077ca:	690b      	ldr	r3, [r1, #16]
 c0077cc:	4605      	mov	r5, r0
 c0077ce:	460c      	mov	r4, r1
 c0077d0:	b913      	cbnz	r3, c0077d8 <_fflush_r+0x10>
 c0077d2:	2500      	movs	r5, #0
 c0077d4:	4628      	mov	r0, r5
 c0077d6:	bd38      	pop	{r3, r4, r5, pc}
 c0077d8:	b118      	cbz	r0, c0077e2 <_fflush_r+0x1a>
 c0077da:	6983      	ldr	r3, [r0, #24]
 c0077dc:	b90b      	cbnz	r3, c0077e2 <_fflush_r+0x1a>
 c0077de:	f7ff fa15 	bl	c006c0c <__sinit>
 c0077e2:	4b14      	ldr	r3, [pc, #80]	; (c007834 <_fflush_r+0x6c>)
 c0077e4:	429c      	cmp	r4, r3
 c0077e6:	d11b      	bne.n	c007820 <_fflush_r+0x58>
 c0077e8:	686c      	ldr	r4, [r5, #4]
 c0077ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0077ee:	2b00      	cmp	r3, #0
 c0077f0:	d0ef      	beq.n	c0077d2 <_fflush_r+0xa>
 c0077f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c0077f4:	07d0      	lsls	r0, r2, #31
 c0077f6:	d404      	bmi.n	c007802 <_fflush_r+0x3a>
 c0077f8:	0599      	lsls	r1, r3, #22
 c0077fa:	d402      	bmi.n	c007802 <_fflush_r+0x3a>
 c0077fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c0077fe:	f7ff faa3 	bl	c006d48 <__retarget_lock_acquire_recursive>
 c007802:	4628      	mov	r0, r5
 c007804:	4621      	mov	r1, r4
 c007806:	f7ff ff5b 	bl	c0076c0 <__sflush_r>
 c00780a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00780c:	4605      	mov	r5, r0
 c00780e:	07da      	lsls	r2, r3, #31
 c007810:	d4e0      	bmi.n	c0077d4 <_fflush_r+0xc>
 c007812:	89a3      	ldrh	r3, [r4, #12]
 c007814:	059b      	lsls	r3, r3, #22
 c007816:	d4dd      	bmi.n	c0077d4 <_fflush_r+0xc>
 c007818:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00781a:	f7ff fa96 	bl	c006d4a <__retarget_lock_release_recursive>
 c00781e:	e7d9      	b.n	c0077d4 <_fflush_r+0xc>
 c007820:	4b05      	ldr	r3, [pc, #20]	; (c007838 <_fflush_r+0x70>)
 c007822:	429c      	cmp	r4, r3
 c007824:	d101      	bne.n	c00782a <_fflush_r+0x62>
 c007826:	68ac      	ldr	r4, [r5, #8]
 c007828:	e7df      	b.n	c0077ea <_fflush_r+0x22>
 c00782a:	4b04      	ldr	r3, [pc, #16]	; (c00783c <_fflush_r+0x74>)
 c00782c:	429c      	cmp	r4, r3
 c00782e:	bf08      	it	eq
 c007830:	68ec      	ldreq	r4, [r5, #12]
 c007832:	e7da      	b.n	c0077ea <_fflush_r+0x22>
 c007834:	0c008630 	.word	0x0c008630
 c007838:	0c008650 	.word	0x0c008650
 c00783c:	0c008610 	.word	0x0c008610

0c007840 <_lseek_r>:
 c007840:	b538      	push	{r3, r4, r5, lr}
 c007842:	4604      	mov	r4, r0
 c007844:	4d06      	ldr	r5, [pc, #24]	; (c007860 <_lseek_r+0x20>)
 c007846:	4608      	mov	r0, r1
 c007848:	4611      	mov	r1, r2
 c00784a:	2200      	movs	r2, #0
 c00784c:	602a      	str	r2, [r5, #0]
 c00784e:	461a      	mov	r2, r3
 c007850:	f7fa fada 	bl	c001e08 <_lseek>
 c007854:	1c43      	adds	r3, r0, #1
 c007856:	d102      	bne.n	c00785e <_lseek_r+0x1e>
 c007858:	682b      	ldr	r3, [r5, #0]
 c00785a:	b103      	cbz	r3, c00785e <_lseek_r+0x1e>
 c00785c:	6023      	str	r3, [r4, #0]
 c00785e:	bd38      	pop	{r3, r4, r5, pc}
 c007860:	30000b88 	.word	0x30000b88

0c007864 <__swhatbuf_r>:
 c007864:	b570      	push	{r4, r5, r6, lr}
 c007866:	460e      	mov	r6, r1
 c007868:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00786c:	b096      	sub	sp, #88	; 0x58
 c00786e:	4614      	mov	r4, r2
 c007870:	2900      	cmp	r1, #0
 c007872:	461d      	mov	r5, r3
 c007874:	da08      	bge.n	c007888 <__swhatbuf_r+0x24>
 c007876:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c00787a:	2200      	movs	r2, #0
 c00787c:	602a      	str	r2, [r5, #0]
 c00787e:	061a      	lsls	r2, r3, #24
 c007880:	d410      	bmi.n	c0078a4 <__swhatbuf_r+0x40>
 c007882:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c007886:	e00e      	b.n	c0078a6 <__swhatbuf_r+0x42>
 c007888:	466a      	mov	r2, sp
 c00788a:	f000 f8c9 	bl	c007a20 <_fstat_r>
 c00788e:	2800      	cmp	r0, #0
 c007890:	dbf1      	blt.n	c007876 <__swhatbuf_r+0x12>
 c007892:	9a01      	ldr	r2, [sp, #4]
 c007894:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c007898:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c00789c:	425a      	negs	r2, r3
 c00789e:	415a      	adcs	r2, r3
 c0078a0:	602a      	str	r2, [r5, #0]
 c0078a2:	e7ee      	b.n	c007882 <__swhatbuf_r+0x1e>
 c0078a4:	2340      	movs	r3, #64	; 0x40
 c0078a6:	2000      	movs	r0, #0
 c0078a8:	6023      	str	r3, [r4, #0]
 c0078aa:	b016      	add	sp, #88	; 0x58
 c0078ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0c0078b0 <__smakebuf_r>:
 c0078b0:	898b      	ldrh	r3, [r1, #12]
 c0078b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c0078b4:	079d      	lsls	r5, r3, #30
 c0078b6:	4606      	mov	r6, r0
 c0078b8:	460c      	mov	r4, r1
 c0078ba:	d507      	bpl.n	c0078cc <__smakebuf_r+0x1c>
 c0078bc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c0078c0:	6023      	str	r3, [r4, #0]
 c0078c2:	6123      	str	r3, [r4, #16]
 c0078c4:	2301      	movs	r3, #1
 c0078c6:	6163      	str	r3, [r4, #20]
 c0078c8:	b002      	add	sp, #8
 c0078ca:	bd70      	pop	{r4, r5, r6, pc}
 c0078cc:	ab01      	add	r3, sp, #4
 c0078ce:	466a      	mov	r2, sp
 c0078d0:	f7ff ffc8 	bl	c007864 <__swhatbuf_r>
 c0078d4:	9900      	ldr	r1, [sp, #0]
 c0078d6:	4605      	mov	r5, r0
 c0078d8:	4630      	mov	r0, r6
 c0078da:	f7ff fa57 	bl	c006d8c <_malloc_r>
 c0078de:	b948      	cbnz	r0, c0078f4 <__smakebuf_r+0x44>
 c0078e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c0078e4:	059a      	lsls	r2, r3, #22
 c0078e6:	d4ef      	bmi.n	c0078c8 <__smakebuf_r+0x18>
 c0078e8:	f023 0303 	bic.w	r3, r3, #3
 c0078ec:	f043 0302 	orr.w	r3, r3, #2
 c0078f0:	81a3      	strh	r3, [r4, #12]
 c0078f2:	e7e3      	b.n	c0078bc <__smakebuf_r+0xc>
 c0078f4:	4b0d      	ldr	r3, [pc, #52]	; (c00792c <__smakebuf_r+0x7c>)
 c0078f6:	62b3      	str	r3, [r6, #40]	; 0x28
 c0078f8:	89a3      	ldrh	r3, [r4, #12]
 c0078fa:	6020      	str	r0, [r4, #0]
 c0078fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c007900:	6120      	str	r0, [r4, #16]
 c007902:	81a3      	strh	r3, [r4, #12]
 c007904:	9b00      	ldr	r3, [sp, #0]
 c007906:	6163      	str	r3, [r4, #20]
 c007908:	9b01      	ldr	r3, [sp, #4]
 c00790a:	b15b      	cbz	r3, c007924 <__smakebuf_r+0x74>
 c00790c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c007910:	4630      	mov	r0, r6
 c007912:	f000 f897 	bl	c007a44 <_isatty_r>
 c007916:	b128      	cbz	r0, c007924 <__smakebuf_r+0x74>
 c007918:	89a3      	ldrh	r3, [r4, #12]
 c00791a:	f023 0303 	bic.w	r3, r3, #3
 c00791e:	f043 0301 	orr.w	r3, r3, #1
 c007922:	81a3      	strh	r3, [r4, #12]
 c007924:	89a0      	ldrh	r0, [r4, #12]
 c007926:	4305      	orrs	r5, r0
 c007928:	81a5      	strh	r5, [r4, #12]
 c00792a:	e7cd      	b.n	c0078c8 <__smakebuf_r+0x18>
 c00792c:	0c006ba5 	.word	0x0c006ba5

0c007930 <memchr>:
 c007930:	b2c9      	uxtb	r1, r1
 c007932:	4402      	add	r2, r0
 c007934:	b510      	push	{r4, lr}
 c007936:	4290      	cmp	r0, r2
 c007938:	4603      	mov	r3, r0
 c00793a:	d101      	bne.n	c007940 <memchr+0x10>
 c00793c:	2300      	movs	r3, #0
 c00793e:	e003      	b.n	c007948 <memchr+0x18>
 c007940:	781c      	ldrb	r4, [r3, #0]
 c007942:	3001      	adds	r0, #1
 c007944:	428c      	cmp	r4, r1
 c007946:	d1f6      	bne.n	c007936 <memchr+0x6>
 c007948:	4618      	mov	r0, r3
 c00794a:	bd10      	pop	{r4, pc}

0c00794c <__malloc_lock>:
 c00794c:	4801      	ldr	r0, [pc, #4]	; (c007954 <__malloc_lock+0x8>)
 c00794e:	f7ff b9fb 	b.w	c006d48 <__retarget_lock_acquire_recursive>
 c007952:	bf00      	nop
 c007954:	30000b7c 	.word	0x30000b7c

0c007958 <__malloc_unlock>:
 c007958:	4801      	ldr	r0, [pc, #4]	; (c007960 <__malloc_unlock+0x8>)
 c00795a:	f7ff b9f6 	b.w	c006d4a <__retarget_lock_release_recursive>
 c00795e:	bf00      	nop
 c007960:	30000b7c 	.word	0x30000b7c

0c007964 <_free_r>:
 c007964:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c007966:	2900      	cmp	r1, #0
 c007968:	d043      	beq.n	c0079f2 <_free_r+0x8e>
 c00796a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00796e:	1f0c      	subs	r4, r1, #4
 c007970:	9001      	str	r0, [sp, #4]
 c007972:	2b00      	cmp	r3, #0
 c007974:	bfb8      	it	lt
 c007976:	18e4      	addlt	r4, r4, r3
 c007978:	f7ff ffe8 	bl	c00794c <__malloc_lock>
 c00797c:	4a1e      	ldr	r2, [pc, #120]	; (c0079f8 <_free_r+0x94>)
 c00797e:	9801      	ldr	r0, [sp, #4]
 c007980:	6813      	ldr	r3, [r2, #0]
 c007982:	b933      	cbnz	r3, c007992 <_free_r+0x2e>
 c007984:	6063      	str	r3, [r4, #4]
 c007986:	6014      	str	r4, [r2, #0]
 c007988:	b003      	add	sp, #12
 c00798a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00798e:	f7ff bfe3 	b.w	c007958 <__malloc_unlock>
 c007992:	42a3      	cmp	r3, r4
 c007994:	d908      	bls.n	c0079a8 <_free_r+0x44>
 c007996:	6825      	ldr	r5, [r4, #0]
 c007998:	1961      	adds	r1, r4, r5
 c00799a:	428b      	cmp	r3, r1
 c00799c:	bf01      	itttt	eq
 c00799e:	6819      	ldreq	r1, [r3, #0]
 c0079a0:	685b      	ldreq	r3, [r3, #4]
 c0079a2:	1949      	addeq	r1, r1, r5
 c0079a4:	6021      	streq	r1, [r4, #0]
 c0079a6:	e7ed      	b.n	c007984 <_free_r+0x20>
 c0079a8:	461a      	mov	r2, r3
 c0079aa:	685b      	ldr	r3, [r3, #4]
 c0079ac:	b10b      	cbz	r3, c0079b2 <_free_r+0x4e>
 c0079ae:	42a3      	cmp	r3, r4
 c0079b0:	d9fa      	bls.n	c0079a8 <_free_r+0x44>
 c0079b2:	6811      	ldr	r1, [r2, #0]
 c0079b4:	1855      	adds	r5, r2, r1
 c0079b6:	42a5      	cmp	r5, r4
 c0079b8:	d10b      	bne.n	c0079d2 <_free_r+0x6e>
 c0079ba:	6824      	ldr	r4, [r4, #0]
 c0079bc:	4421      	add	r1, r4
 c0079be:	1854      	adds	r4, r2, r1
 c0079c0:	6011      	str	r1, [r2, #0]
 c0079c2:	42a3      	cmp	r3, r4
 c0079c4:	d1e0      	bne.n	c007988 <_free_r+0x24>
 c0079c6:	681c      	ldr	r4, [r3, #0]
 c0079c8:	685b      	ldr	r3, [r3, #4]
 c0079ca:	4421      	add	r1, r4
 c0079cc:	6053      	str	r3, [r2, #4]
 c0079ce:	6011      	str	r1, [r2, #0]
 c0079d0:	e7da      	b.n	c007988 <_free_r+0x24>
 c0079d2:	d902      	bls.n	c0079da <_free_r+0x76>
 c0079d4:	230c      	movs	r3, #12
 c0079d6:	6003      	str	r3, [r0, #0]
 c0079d8:	e7d6      	b.n	c007988 <_free_r+0x24>
 c0079da:	6825      	ldr	r5, [r4, #0]
 c0079dc:	1961      	adds	r1, r4, r5
 c0079de:	428b      	cmp	r3, r1
 c0079e0:	bf02      	ittt	eq
 c0079e2:	6819      	ldreq	r1, [r3, #0]
 c0079e4:	685b      	ldreq	r3, [r3, #4]
 c0079e6:	1949      	addeq	r1, r1, r5
 c0079e8:	6063      	str	r3, [r4, #4]
 c0079ea:	bf08      	it	eq
 c0079ec:	6021      	streq	r1, [r4, #0]
 c0079ee:	6054      	str	r4, [r2, #4]
 c0079f0:	e7ca      	b.n	c007988 <_free_r+0x24>
 c0079f2:	b003      	add	sp, #12
 c0079f4:	bd30      	pop	{r4, r5, pc}
 c0079f6:	bf00      	nop
 c0079f8:	30000b80 	.word	0x30000b80

0c0079fc <_read_r>:
 c0079fc:	b538      	push	{r3, r4, r5, lr}
 c0079fe:	4604      	mov	r4, r0
 c007a00:	4d06      	ldr	r5, [pc, #24]	; (c007a1c <_read_r+0x20>)
 c007a02:	4608      	mov	r0, r1
 c007a04:	4611      	mov	r1, r2
 c007a06:	2200      	movs	r2, #0
 c007a08:	602a      	str	r2, [r5, #0]
 c007a0a:	461a      	mov	r2, r3
 c007a0c:	f7fa f99c 	bl	c001d48 <_read>
 c007a10:	1c43      	adds	r3, r0, #1
 c007a12:	d102      	bne.n	c007a1a <_read_r+0x1e>
 c007a14:	682b      	ldr	r3, [r5, #0]
 c007a16:	b103      	cbz	r3, c007a1a <_read_r+0x1e>
 c007a18:	6023      	str	r3, [r4, #0]
 c007a1a:	bd38      	pop	{r3, r4, r5, pc}
 c007a1c:	30000b88 	.word	0x30000b88

0c007a20 <_fstat_r>:
 c007a20:	b538      	push	{r3, r4, r5, lr}
 c007a22:	2300      	movs	r3, #0
 c007a24:	4d06      	ldr	r5, [pc, #24]	; (c007a40 <_fstat_r+0x20>)
 c007a26:	4604      	mov	r4, r0
 c007a28:	4608      	mov	r0, r1
 c007a2a:	4611      	mov	r1, r2
 c007a2c:	602b      	str	r3, [r5, #0]
 c007a2e:	f7fa f9d0 	bl	c001dd2 <_fstat>
 c007a32:	1c43      	adds	r3, r0, #1
 c007a34:	d102      	bne.n	c007a3c <_fstat_r+0x1c>
 c007a36:	682b      	ldr	r3, [r5, #0]
 c007a38:	b103      	cbz	r3, c007a3c <_fstat_r+0x1c>
 c007a3a:	6023      	str	r3, [r4, #0]
 c007a3c:	bd38      	pop	{r3, r4, r5, pc}
 c007a3e:	bf00      	nop
 c007a40:	30000b88 	.word	0x30000b88

0c007a44 <_isatty_r>:
 c007a44:	b538      	push	{r3, r4, r5, lr}
 c007a46:	2300      	movs	r3, #0
 c007a48:	4d05      	ldr	r5, [pc, #20]	; (c007a60 <_isatty_r+0x1c>)
 c007a4a:	4604      	mov	r4, r0
 c007a4c:	4608      	mov	r0, r1
 c007a4e:	602b      	str	r3, [r5, #0]
 c007a50:	f7fa f9cf 	bl	c001df2 <_isatty>
 c007a54:	1c43      	adds	r3, r0, #1
 c007a56:	d102      	bne.n	c007a5e <_isatty_r+0x1a>
 c007a58:	682b      	ldr	r3, [r5, #0]
 c007a5a:	b103      	cbz	r3, c007a5e <_isatty_r+0x1a>
 c007a5c:	6023      	str	r3, [r4, #0]
 c007a5e:	bd38      	pop	{r3, r4, r5, pc}
 c007a60:	30000b88 	.word	0x30000b88

0c007a64 <_init>:
 c007a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007a66:	bf00      	nop
 c007a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c007a6a:	bc08      	pop	{r3}
 c007a6c:	469e      	mov	lr, r3
 c007a6e:	4770      	bx	lr

0c007a70 <_fini>:
 c007a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c007a72:	bf00      	nop
 c007a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c007a76:	bc08      	pop	{r3}
 c007a78:	469e      	mov	lr, r3
 c007a7a:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_print_Num>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 bb54 	b.w	c0016b0 <__acle_se_SECURE_print_Num>

0c03e008 <SECURE_print_Buffer>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 baa4 	b.w	c001558 <__acle_se_SECURE_print_Buffer>

0c03e010 <SECURE_SystemCoreClockUpdate>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c4 b882 	b.w	c00211c <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e018 <SECURE_SPI_Receive_Classification>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bf26 	b.w	c000e6c <__acle_se_SECURE_SPI_Receive_Classification>

0c03e020 <SECURE_Mem_Ready>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b804 	b.w	c001030 <__acle_se_SECURE_Mem_Ready>

0c03e028 <SECURE_SPI_Send_Start_Signal>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c3 b87e 	b.w	c00112c <__acle_se_SECURE_SPI_Send_Start_Signal>

0c03e030 <SECURE_SPI_Send_End_Signal>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c3 b8f4 	b.w	c001220 <__acle_se_SECURE_SPI_Send_End_Signal>

0c03e038 <SECURE_SPI_Toggle_Comm>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c3 b9d4 	b.w	c0013e8 <__acle_se_SECURE_SPI_Toggle_Comm>

0c03e040 <SECURE_RegisterCallback>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c3 bb78 	b.w	c001738 <__acle_se_SECURE_RegisterCallback>

0c03e048 <SECURE_DMA_Fetch_NonSecure_Mem>:
 c03e048:	e97f e97f 	sg
 c03e04c:	f7c3 ba1e 	b.w	c00148c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>

0c03e050 <SECURE_DATA_Last_Buffer_Compare>:
 c03e050:	e97f e97f 	sg
 c03e054:	f7c3 bbc6 	b.w	c0017e4 <__acle_se_SECURE_DATA_Last_Buffer_Compare>

0c03e058 <SECURE_Poll_Mem_Ready>:
 c03e058:	e97f e97f 	sg
 c03e05c:	f7c3 b828 	b.w	c0010b0 <__acle_se_SECURE_Poll_Mem_Ready>

0c03e060 <SECURE_print_Log>:
 c03e060:	e97f e97f 	sg
 c03e064:	f7c3 bae4 	b.w	c001630 <__acle_se_SECURE_print_Log>

0c03e068 <SECURE_SPI_Send_Data>:
 c03e068:	e97f e97f 	sg
 c03e06c:	f7c3 b952 	b.w	c001314 <__acle_se_SECURE_SPI_Send_Data>
	...
