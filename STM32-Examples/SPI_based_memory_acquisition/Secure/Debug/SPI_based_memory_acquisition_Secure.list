
SPI_based_memory_acquisition_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f14  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000348  0c007108  0c007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c007450  0c007450  0002e060  2**0
                  CONTENTS
  4 .ARM          00000008  0c007450  0c007450  00017450  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c007458  0c007458  0002e060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c007458  0c007458  00017458  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c00745c  0c00745c  0001745c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  30000000  0c007460  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000060  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000ae0  30000070  30000070  00030070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000b50  30000b50  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e060  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013692  00000000  00000000  0002e096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000296c  00000000  00000000  00041728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00044098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000e70  00000000  00000000  00044ff0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a6f1  00000000  00000000  00045e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013411  00000000  00000000  00070551  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010b03d  00000000  00000000  00083962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0018e99f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003fa4  00000000  00000000  0018e9f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000070 	.word	0x30000070
 c000210:	00000000 	.word	0x00000000
 c000214:	0c0070f0 	.word	0x0c0070f0

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000074 	.word	0x30000074
 c000230:	0c0070f0 	.word	0x0c0070f0

0c000234 <cmse_check_address_range>:
 c000234:	43c3      	mvns	r3, r0
 c000236:	428b      	cmp	r3, r1
 c000238:	d36d      	bcc.n	c000316 <cmse_check_address_range+0xe2>
 c00023a:	f032 031f 	bics.w	r3, r2, #31
 c00023e:	d16a      	bne.n	c000316 <cmse_check_address_range+0xe2>
 c000240:	3901      	subs	r1, #1
 c000242:	f002 0314 	and.w	r3, r2, #20
 c000246:	4401      	add	r1, r0
 c000248:	b500      	push	{lr}
 c00024a:	ea81 0c00 	eor.w	ip, r1, r0
 c00024e:	2b14      	cmp	r3, #20
 c000250:	d80e      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000252:	e8df f003 	tbb	[pc, r3]
 c000256:	0d3f      	.short	0x0d3f
 c000258:	0d480d0d 	.word	0x0d480d0d
 c00025c:	0d0d0d0d 	.word	0x0d0d0d0d
 c000260:	0d0d0d0d 	.word	0x0d0d0d0d
 c000264:	0d510d0d 	.word	0x0d510d0d
 c000268:	0d0d      	.short	0x0d0d
 c00026a:	10          	.byte	0x10
 c00026b:	00          	.byte	0x00
 c00026c:	02db      	lsls	r3, r3, #11
 c00026e:	d400      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c000270:	2000      	movs	r0, #0
 c000272:	f85d fb04 	ldr.w	pc, [sp], #4
 c000276:	f1bc 0f1f 	cmp.w	ip, #31
 c00027a:	e840 f3c0 	ttat	r3, r0
 c00027e:	d904      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000280:	469c      	mov	ip, r3
 c000282:	e841 f3c0 	ttat	r3, r1
 c000286:	459c      	cmp	ip, r3
 c000288:	d1f2      	bne.n	c000270 <cmse_check_address_range+0x3c>
 c00028a:	f022 0214 	bic.w	r2, r2, #20
 c00028e:	3a01      	subs	r2, #1
 c000290:	2a0a      	cmp	r2, #10
 c000292:	d8ed      	bhi.n	c000270 <cmse_check_address_range+0x3c>
 c000294:	a101      	add	r1, pc, #4	; (adr r1, c00029c <cmse_check_address_range+0x68>)
 c000296:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 c00029a:	bf00      	nop
 c00029c:	0c0002cf 	.word	0x0c0002cf
 c0002a0:	0c000311 	.word	0x0c000311
 c0002a4:	0c0002c9 	.word	0x0c0002c9
 c0002a8:	0c000271 	.word	0x0c000271
 c0002ac:	0c000271 	.word	0x0c000271
 c0002b0:	0c000271 	.word	0x0c000271
 c0002b4:	0c000271 	.word	0x0c000271
 c0002b8:	0c00030b 	.word	0x0c00030b
 c0002bc:	0c0002cf 	.word	0x0c0002cf
 c0002c0:	0c00026d 	.word	0x0c00026d
 c0002c4:	0c0002c9 	.word	0x0c0002c9
 c0002c8:	029a      	lsls	r2, r3, #10
 c0002ca:	d4d2      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002cc:	e7d0      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002ce:	031a      	lsls	r2, r3, #12
 c0002d0:	d4cf      	bmi.n	c000272 <cmse_check_address_range+0x3e>
 c0002d2:	e7cd      	b.n	c000270 <cmse_check_address_range+0x3c>
 c0002d4:	f1bc 0f1f 	cmp.w	ip, #31
 c0002d8:	e840 f300 	tt	r3, r0
 c0002dc:	d9d5      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002de:	469c      	mov	ip, r3
 c0002e0:	e841 f300 	tt	r3, r1
 c0002e4:	e7cf      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002e6:	f1bc 0f1f 	cmp.w	ip, #31
 c0002ea:	e840 f340 	ttt	r3, r0
 c0002ee:	d9cc      	bls.n	c00028a <cmse_check_address_range+0x56>
 c0002f0:	469c      	mov	ip, r3
 c0002f2:	e841 f340 	ttt	r3, r1
 c0002f6:	e7c6      	b.n	c000286 <cmse_check_address_range+0x52>
 c0002f8:	f1bc 0f1f 	cmp.w	ip, #31
 c0002fc:	e840 f380 	tta	r3, r0
 c000300:	d9c3      	bls.n	c00028a <cmse_check_address_range+0x56>
 c000302:	469c      	mov	ip, r3
 c000304:	e841 f380 	tta	r3, r1
 c000308:	e7bd      	b.n	c000286 <cmse_check_address_range+0x52>
 c00030a:	035b      	lsls	r3, r3, #13
 c00030c:	d5b0      	bpl.n	c000270 <cmse_check_address_range+0x3c>
 c00030e:	e7b0      	b.n	c000272 <cmse_check_address_range+0x3e>
 c000310:	0259      	lsls	r1, r3, #9
 c000312:	d5ae      	bpl.n	c000272 <cmse_check_address_range+0x3e>
 c000314:	e7ac      	b.n	c000270 <cmse_check_address_range+0x3c>
 c000316:	2000      	movs	r0, #0
 c000318:	4770      	bx	lr
 c00031a:	bf00      	nop

0c00031c <__gnu_cmse_nonsecure_call>:
 c00031c:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c000320:	4627      	mov	r7, r4
 c000322:	46a0      	mov	r8, r4
 c000324:	46a1      	mov	r9, r4
 c000326:	46a2      	mov	sl, r4
 c000328:	46a3      	mov	fp, r4
 c00032a:	46a4      	mov	ip, r4
 c00032c:	ed2d 8b10 	vpush	{d8-d15}
 c000330:	f04f 0500 	mov.w	r5, #0
 c000334:	ec45 5b18 	vmov	d8, r5, r5
 c000338:	ec45 5a19 	vmov	s18, s19, r5, r5
 c00033c:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c000340:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000344:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000348:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c00034c:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c000350:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000354:	eef1 5a10 	vmrs	r5, fpscr
 c000358:	f64f 7660 	movw	r6, #65376	; 0xff60
 c00035c:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c000360:	4035      	ands	r5, r6
 c000362:	eee1 5a10 	vmsr	fpscr, r5
 c000366:	f384 8800 	msr	CPSR_f, r4
 c00036a:	4625      	mov	r5, r4
 c00036c:	4626      	mov	r6, r4
 c00036e:	47a4      	blxns	r4
 c000370:	ecbd 8b10 	vpop	{d8-d15}
 c000374:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000378 <__aeabi_uldivmod>:
 c000378:	b953      	cbnz	r3, c000390 <__aeabi_uldivmod+0x18>
 c00037a:	b94a      	cbnz	r2, c000390 <__aeabi_uldivmod+0x18>
 c00037c:	2900      	cmp	r1, #0
 c00037e:	bf08      	it	eq
 c000380:	2800      	cmpeq	r0, #0
 c000382:	bf1c      	itt	ne
 c000384:	f04f 31ff 	movne.w	r1, #4294967295
 c000388:	f04f 30ff 	movne.w	r0, #4294967295
 c00038c:	f000 b982 	b.w	c000694 <__aeabi_idiv0>
 c000390:	f1ad 0c08 	sub.w	ip, sp, #8
 c000394:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000398:	f000 f806 	bl	c0003a8 <__udivmoddi4>
 c00039c:	f8dd e004 	ldr.w	lr, [sp, #4]
 c0003a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c0003a4:	b004      	add	sp, #16
 c0003a6:	4770      	bx	lr

0c0003a8 <__udivmoddi4>:
 c0003a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c0003ac:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c0003ae:	4604      	mov	r4, r0
 c0003b0:	460f      	mov	r7, r1
 c0003b2:	2b00      	cmp	r3, #0
 c0003b4:	d148      	bne.n	c000448 <__udivmoddi4+0xa0>
 c0003b6:	428a      	cmp	r2, r1
 c0003b8:	4694      	mov	ip, r2
 c0003ba:	d961      	bls.n	c000480 <__udivmoddi4+0xd8>
 c0003bc:	fab2 f382 	clz	r3, r2
 c0003c0:	b143      	cbz	r3, c0003d4 <__udivmoddi4+0x2c>
 c0003c2:	f1c3 0120 	rsb	r1, r3, #32
 c0003c6:	409f      	lsls	r7, r3
 c0003c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0003cc:	409c      	lsls	r4, r3
 c0003ce:	fa20 f101 	lsr.w	r1, r0, r1
 c0003d2:	430f      	orrs	r7, r1
 c0003d4:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c0003d8:	fa1f fe8c 	uxth.w	lr, ip
 c0003dc:	0c22      	lsrs	r2, r4, #16
 c0003de:	fbb7 f6f1 	udiv	r6, r7, r1
 c0003e2:	fb01 7716 	mls	r7, r1, r6, r7
 c0003e6:	fb06 f00e 	mul.w	r0, r6, lr
 c0003ea:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0003ee:	4290      	cmp	r0, r2
 c0003f0:	d908      	bls.n	c000404 <__udivmoddi4+0x5c>
 c0003f2:	eb1c 0202 	adds.w	r2, ip, r2
 c0003f6:	f106 37ff 	add.w	r7, r6, #4294967295
 c0003fa:	d202      	bcs.n	c000402 <__udivmoddi4+0x5a>
 c0003fc:	4290      	cmp	r0, r2
 c0003fe:	f200 8137 	bhi.w	c000670 <__udivmoddi4+0x2c8>
 c000402:	463e      	mov	r6, r7
 c000404:	1a12      	subs	r2, r2, r0
 c000406:	b2a4      	uxth	r4, r4
 c000408:	fbb2 f0f1 	udiv	r0, r2, r1
 c00040c:	fb01 2210 	mls	r2, r1, r0, r2
 c000410:	fb00 fe0e 	mul.w	lr, r0, lr
 c000414:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c000418:	45a6      	cmp	lr, r4
 c00041a:	d908      	bls.n	c00042e <__udivmoddi4+0x86>
 c00041c:	eb1c 0404 	adds.w	r4, ip, r4
 c000420:	f100 32ff 	add.w	r2, r0, #4294967295
 c000424:	d202      	bcs.n	c00042c <__udivmoddi4+0x84>
 c000426:	45a6      	cmp	lr, r4
 c000428:	f200 811c 	bhi.w	c000664 <__udivmoddi4+0x2bc>
 c00042c:	4610      	mov	r0, r2
 c00042e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c000432:	eba4 040e 	sub.w	r4, r4, lr
 c000436:	2600      	movs	r6, #0
 c000438:	b11d      	cbz	r5, c000442 <__udivmoddi4+0x9a>
 c00043a:	40dc      	lsrs	r4, r3
 c00043c:	2300      	movs	r3, #0
 c00043e:	e9c5 4300 	strd	r4, r3, [r5]
 c000442:	4631      	mov	r1, r6
 c000444:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000448:	428b      	cmp	r3, r1
 c00044a:	d909      	bls.n	c000460 <__udivmoddi4+0xb8>
 c00044c:	2d00      	cmp	r5, #0
 c00044e:	f000 80fd 	beq.w	c00064c <__udivmoddi4+0x2a4>
 c000452:	2600      	movs	r6, #0
 c000454:	e9c5 0100 	strd	r0, r1, [r5]
 c000458:	4630      	mov	r0, r6
 c00045a:	4631      	mov	r1, r6
 c00045c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000460:	fab3 f683 	clz	r6, r3
 c000464:	2e00      	cmp	r6, #0
 c000466:	d14b      	bne.n	c000500 <__udivmoddi4+0x158>
 c000468:	428b      	cmp	r3, r1
 c00046a:	f0c0 80f2 	bcc.w	c000652 <__udivmoddi4+0x2aa>
 c00046e:	4282      	cmp	r2, r0
 c000470:	f240 80ef 	bls.w	c000652 <__udivmoddi4+0x2aa>
 c000474:	4630      	mov	r0, r6
 c000476:	2d00      	cmp	r5, #0
 c000478:	d0e3      	beq.n	c000442 <__udivmoddi4+0x9a>
 c00047a:	e9c5 4700 	strd	r4, r7, [r5]
 c00047e:	e7e0      	b.n	c000442 <__udivmoddi4+0x9a>
 c000480:	b902      	cbnz	r2, c000484 <__udivmoddi4+0xdc>
 c000482:	deff      	udf	#255	; 0xff
 c000484:	fab2 f382 	clz	r3, r2
 c000488:	2b00      	cmp	r3, #0
 c00048a:	f040 809d 	bne.w	c0005c8 <__udivmoddi4+0x220>
 c00048e:	1a89      	subs	r1, r1, r2
 c000490:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000494:	b297      	uxth	r7, r2
 c000496:	2601      	movs	r6, #1
 c000498:	0c20      	lsrs	r0, r4, #16
 c00049a:	fbb1 f2fe 	udiv	r2, r1, lr
 c00049e:	fb0e 1112 	mls	r1, lr, r2, r1
 c0004a2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0004a6:	fb07 f002 	mul.w	r0, r7, r2
 c0004aa:	4288      	cmp	r0, r1
 c0004ac:	d90f      	bls.n	c0004ce <__udivmoddi4+0x126>
 c0004ae:	eb1c 0101 	adds.w	r1, ip, r1
 c0004b2:	f102 38ff 	add.w	r8, r2, #4294967295
 c0004b6:	bf2c      	ite	cs
 c0004b8:	f04f 0901 	movcs.w	r9, #1
 c0004bc:	f04f 0900 	movcc.w	r9, #0
 c0004c0:	4288      	cmp	r0, r1
 c0004c2:	d903      	bls.n	c0004cc <__udivmoddi4+0x124>
 c0004c4:	f1b9 0f00 	cmp.w	r9, #0
 c0004c8:	f000 80cf 	beq.w	c00066a <__udivmoddi4+0x2c2>
 c0004cc:	4642      	mov	r2, r8
 c0004ce:	1a09      	subs	r1, r1, r0
 c0004d0:	b2a4      	uxth	r4, r4
 c0004d2:	fbb1 f0fe 	udiv	r0, r1, lr
 c0004d6:	fb0e 1110 	mls	r1, lr, r0, r1
 c0004da:	fb00 f707 	mul.w	r7, r0, r7
 c0004de:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c0004e2:	42a7      	cmp	r7, r4
 c0004e4:	d908      	bls.n	c0004f8 <__udivmoddi4+0x150>
 c0004e6:	eb1c 0404 	adds.w	r4, ip, r4
 c0004ea:	f100 31ff 	add.w	r1, r0, #4294967295
 c0004ee:	d202      	bcs.n	c0004f6 <__udivmoddi4+0x14e>
 c0004f0:	42a7      	cmp	r7, r4
 c0004f2:	f200 80b4 	bhi.w	c00065e <__udivmoddi4+0x2b6>
 c0004f6:	4608      	mov	r0, r1
 c0004f8:	1be4      	subs	r4, r4, r7
 c0004fa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0004fe:	e79b      	b.n	c000438 <__udivmoddi4+0x90>
 c000500:	f1c6 0720 	rsb	r7, r6, #32
 c000504:	40b3      	lsls	r3, r6
 c000506:	fa01 f406 	lsl.w	r4, r1, r6
 c00050a:	fa22 fc07 	lsr.w	ip, r2, r7
 c00050e:	40f9      	lsrs	r1, r7
 c000510:	40b2      	lsls	r2, r6
 c000512:	ea4c 0c03 	orr.w	ip, ip, r3
 c000516:	fa20 f307 	lsr.w	r3, r0, r7
 c00051a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c00051e:	431c      	orrs	r4, r3
 c000520:	fa1f fe8c 	uxth.w	lr, ip
 c000524:	fa00 f306 	lsl.w	r3, r0, r6
 c000528:	0c20      	lsrs	r0, r4, #16
 c00052a:	fbb1 f8f9 	udiv	r8, r1, r9
 c00052e:	fb09 1118 	mls	r1, r9, r8, r1
 c000532:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000536:	fb08 f00e 	mul.w	r0, r8, lr
 c00053a:	4288      	cmp	r0, r1
 c00053c:	d90f      	bls.n	c00055e <__udivmoddi4+0x1b6>
 c00053e:	eb1c 0101 	adds.w	r1, ip, r1
 c000542:	f108 3aff 	add.w	sl, r8, #4294967295
 c000546:	bf2c      	ite	cs
 c000548:	f04f 0b01 	movcs.w	fp, #1
 c00054c:	f04f 0b00 	movcc.w	fp, #0
 c000550:	4288      	cmp	r0, r1
 c000552:	d903      	bls.n	c00055c <__udivmoddi4+0x1b4>
 c000554:	f1bb 0f00 	cmp.w	fp, #0
 c000558:	f000 808d 	beq.w	c000676 <__udivmoddi4+0x2ce>
 c00055c:	46d0      	mov	r8, sl
 c00055e:	1a09      	subs	r1, r1, r0
 c000560:	b2a4      	uxth	r4, r4
 c000562:	fbb1 f0f9 	udiv	r0, r1, r9
 c000566:	fb09 1110 	mls	r1, r9, r0, r1
 c00056a:	fb00 fe0e 	mul.w	lr, r0, lr
 c00056e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c000572:	458e      	cmp	lr, r1
 c000574:	d907      	bls.n	c000586 <__udivmoddi4+0x1de>
 c000576:	eb1c 0101 	adds.w	r1, ip, r1
 c00057a:	f100 34ff 	add.w	r4, r0, #4294967295
 c00057e:	d201      	bcs.n	c000584 <__udivmoddi4+0x1dc>
 c000580:	458e      	cmp	lr, r1
 c000582:	d87f      	bhi.n	c000684 <__udivmoddi4+0x2dc>
 c000584:	4620      	mov	r0, r4
 c000586:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c00058a:	eba1 010e 	sub.w	r1, r1, lr
 c00058e:	fba0 9802 	umull	r9, r8, r0, r2
 c000592:	4541      	cmp	r1, r8
 c000594:	464c      	mov	r4, r9
 c000596:	46c6      	mov	lr, r8
 c000598:	d302      	bcc.n	c0005a0 <__udivmoddi4+0x1f8>
 c00059a:	d106      	bne.n	c0005aa <__udivmoddi4+0x202>
 c00059c:	454b      	cmp	r3, r9
 c00059e:	d204      	bcs.n	c0005aa <__udivmoddi4+0x202>
 c0005a0:	3801      	subs	r0, #1
 c0005a2:	ebb9 0402 	subs.w	r4, r9, r2
 c0005a6:	eb68 0e0c 	sbc.w	lr, r8, ip
 c0005aa:	2d00      	cmp	r5, #0
 c0005ac:	d070      	beq.n	c000690 <__udivmoddi4+0x2e8>
 c0005ae:	1b1a      	subs	r2, r3, r4
 c0005b0:	eb61 010e 	sbc.w	r1, r1, lr
 c0005b4:	fa22 f306 	lsr.w	r3, r2, r6
 c0005b8:	fa01 f707 	lsl.w	r7, r1, r7
 c0005bc:	40f1      	lsrs	r1, r6
 c0005be:	2600      	movs	r6, #0
 c0005c0:	431f      	orrs	r7, r3
 c0005c2:	e9c5 7100 	strd	r7, r1, [r5]
 c0005c6:	e73c      	b.n	c000442 <__udivmoddi4+0x9a>
 c0005c8:	fa02 fc03 	lsl.w	ip, r2, r3
 c0005cc:	f1c3 0020 	rsb	r0, r3, #32
 c0005d0:	fa01 f203 	lsl.w	r2, r1, r3
 c0005d4:	fa21 f600 	lsr.w	r6, r1, r0
 c0005d8:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c0005dc:	fa24 f100 	lsr.w	r1, r4, r0
 c0005e0:	fa1f f78c 	uxth.w	r7, ip
 c0005e4:	409c      	lsls	r4, r3
 c0005e6:	4311      	orrs	r1, r2
 c0005e8:	fbb6 f0fe 	udiv	r0, r6, lr
 c0005ec:	0c0a      	lsrs	r2, r1, #16
 c0005ee:	fb0e 6610 	mls	r6, lr, r0, r6
 c0005f2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0005f6:	fb00 f607 	mul.w	r6, r0, r7
 c0005fa:	4296      	cmp	r6, r2
 c0005fc:	d90e      	bls.n	c00061c <__udivmoddi4+0x274>
 c0005fe:	eb1c 0202 	adds.w	r2, ip, r2
 c000602:	f100 38ff 	add.w	r8, r0, #4294967295
 c000606:	bf2c      	ite	cs
 c000608:	f04f 0901 	movcs.w	r9, #1
 c00060c:	f04f 0900 	movcc.w	r9, #0
 c000610:	4296      	cmp	r6, r2
 c000612:	d902      	bls.n	c00061a <__udivmoddi4+0x272>
 c000614:	f1b9 0f00 	cmp.w	r9, #0
 c000618:	d031      	beq.n	c00067e <__udivmoddi4+0x2d6>
 c00061a:	4640      	mov	r0, r8
 c00061c:	1b92      	subs	r2, r2, r6
 c00061e:	b289      	uxth	r1, r1
 c000620:	fbb2 f6fe 	udiv	r6, r2, lr
 c000624:	fb0e 2216 	mls	r2, lr, r6, r2
 c000628:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c00062c:	fb06 f207 	mul.w	r2, r6, r7
 c000630:	428a      	cmp	r2, r1
 c000632:	d907      	bls.n	c000644 <__udivmoddi4+0x29c>
 c000634:	eb1c 0101 	adds.w	r1, ip, r1
 c000638:	f106 38ff 	add.w	r8, r6, #4294967295
 c00063c:	d201      	bcs.n	c000642 <__udivmoddi4+0x29a>
 c00063e:	428a      	cmp	r2, r1
 c000640:	d823      	bhi.n	c00068a <__udivmoddi4+0x2e2>
 c000642:	4646      	mov	r6, r8
 c000644:	1a89      	subs	r1, r1, r2
 c000646:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c00064a:	e725      	b.n	c000498 <__udivmoddi4+0xf0>
 c00064c:	462e      	mov	r6, r5
 c00064e:	4628      	mov	r0, r5
 c000650:	e6f7      	b.n	c000442 <__udivmoddi4+0x9a>
 c000652:	1a84      	subs	r4, r0, r2
 c000654:	eb61 0303 	sbc.w	r3, r1, r3
 c000658:	2001      	movs	r0, #1
 c00065a:	461f      	mov	r7, r3
 c00065c:	e70b      	b.n	c000476 <__udivmoddi4+0xce>
 c00065e:	4464      	add	r4, ip
 c000660:	3802      	subs	r0, #2
 c000662:	e749      	b.n	c0004f8 <__udivmoddi4+0x150>
 c000664:	4464      	add	r4, ip
 c000666:	3802      	subs	r0, #2
 c000668:	e6e1      	b.n	c00042e <__udivmoddi4+0x86>
 c00066a:	3a02      	subs	r2, #2
 c00066c:	4461      	add	r1, ip
 c00066e:	e72e      	b.n	c0004ce <__udivmoddi4+0x126>
 c000670:	3e02      	subs	r6, #2
 c000672:	4462      	add	r2, ip
 c000674:	e6c6      	b.n	c000404 <__udivmoddi4+0x5c>
 c000676:	f1a8 0802 	sub.w	r8, r8, #2
 c00067a:	4461      	add	r1, ip
 c00067c:	e76f      	b.n	c00055e <__udivmoddi4+0x1b6>
 c00067e:	3802      	subs	r0, #2
 c000680:	4462      	add	r2, ip
 c000682:	e7cb      	b.n	c00061c <__udivmoddi4+0x274>
 c000684:	3802      	subs	r0, #2
 c000686:	4461      	add	r1, ip
 c000688:	e77d      	b.n	c000586 <__udivmoddi4+0x1de>
 c00068a:	3e02      	subs	r6, #2
 c00068c:	4461      	add	r1, ip
 c00068e:	e7d9      	b.n	c000644 <__udivmoddi4+0x29c>
 c000690:	462e      	mov	r6, r5
 c000692:	e6d6      	b.n	c000442 <__udivmoddi4+0x9a>

0c000694 <__aeabi_idiv0>:
 c000694:	4770      	bx	lr
 c000696:	bf00      	nop

0c000698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000698:	b580      	push	{r7, lr}
 c00069a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00069c:	f001 fb75 	bl	c001d8a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c0006a0:	f000 f874 	bl	c00078c <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c0006a4:	f000 f8c4 	bl	c000830 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c0006a8:	f000 facc 	bl	c000c44 <MX_GPIO_Init>
  MX_DMA_Init();
 c0006ac:	f000 f9ee 	bl	c000a8c <MX_DMA_Init>
  MX_ICACHE_Init();
 c0006b0:	f000 f94c 	bl	c00094c <MX_ICACHE_Init>
  MX_SPI3_Init();
 c0006b4:	f000 f95e 	bl	c000974 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 c0006b8:	f000 f99a 	bl	c0009f0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */

  //register callbacks
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToSecureTransferComplete);
 c0006bc:	4a0b      	ldr	r2, [pc, #44]	; (c0006ec <main+0x54>)
 c0006be:	2100      	movs	r1, #0
 c0006c0:	480b      	ldr	r0, [pc, #44]	; (c0006f0 <main+0x58>)
 c0006c2:	f001 ff0d 	bl	c0024e0 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel1, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToSecureTransferError);
 c0006c6:	4a0b      	ldr	r2, [pc, #44]	; (c0006f4 <main+0x5c>)
 c0006c8:	2104      	movs	r1, #4
 c0006ca:	4809      	ldr	r0, [pc, #36]	; (c0006f0 <main+0x58>)
 c0006cc:	f001 ff08 	bl	c0024e0 <HAL_DMA_RegisterCallback>

  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_CPLT_CB_ID, NonSecureToNonSecureTransferComplete);
 c0006d0:	4a09      	ldr	r2, [pc, #36]	; (c0006f8 <main+0x60>)
 c0006d2:	2100      	movs	r1, #0
 c0006d4:	4809      	ldr	r0, [pc, #36]	; (c0006fc <main+0x64>)
 c0006d6:	f001 ff03 	bl	c0024e0 <HAL_DMA_RegisterCallback>
  HAL_DMA_RegisterCallback(&hdma_memtomem_dma1_channel2, HAL_DMA_XFER_ERROR_CB_ID, NonSecureToNonSecureTransferError);
 c0006da:	4a09      	ldr	r2, [pc, #36]	; (c000700 <main+0x68>)
 c0006dc:	2104      	movs	r1, #4
 c0006de:	4807      	ldr	r0, [pc, #28]	; (c0006fc <main+0x64>)
 c0006e0:	f001 fefe 	bl	c0024e0 <HAL_DMA_RegisterCallback>
  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c0006e4:	f000 f80e 	bl	c000704 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c0006e8:	e7fe      	b.n	c0006e8 <main+0x50>
 c0006ea:	bf00      	nop
 c0006ec:	0c00139d 	.word	0x0c00139d
 c0006f0:	30000254 	.word	0x30000254
 c0006f4:	0c00141d 	.word	0x0c00141d
 c0006f8:	0c001431 	.word	0x0c001431
 c0006fc:	300002bc 	.word	0x300002bc
 c000700:	0c0014b1 	.word	0x0c0014b1

0c000704 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000704:	b590      	push	{r4, r7, lr}
 c000706:	b083      	sub	sp, #12
 c000708:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00070a:	4b1d      	ldr	r3, [pc, #116]	; (c000780 <NonSecure_Init+0x7c>)
 c00070c:	4a1d      	ldr	r2, [pc, #116]	; (c000784 <NonSecure_Init+0x80>)
 c00070e:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000710:	4b1c      	ldr	r3, [pc, #112]	; (c000784 <NonSecure_Init+0x80>)
 c000712:	681b      	ldr	r3, [r3, #0]
 c000714:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c000716:	683b      	ldr	r3, [r7, #0]
 c000718:	f383 8888 	msr	MSP_NS, r3
}
 c00071c:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c00071e:	4b1a      	ldr	r3, [pc, #104]	; (c000788 <NonSecure_Init+0x84>)
 c000720:	681b      	ldr	r3, [r3, #0]
 c000722:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000724:	687b      	ldr	r3, [r7, #4]
 c000726:	461c      	mov	r4, r3
 c000728:	0864      	lsrs	r4, r4, #1
 c00072a:	0064      	lsls	r4, r4, #1
 c00072c:	4620      	mov	r0, r4
 c00072e:	4621      	mov	r1, r4
 c000730:	4622      	mov	r2, r4
 c000732:	4623      	mov	r3, r4
 c000734:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000738:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00073c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000740:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000744:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000748:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00074c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000750:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000754:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000758:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00075c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000760:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000764:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000768:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00076c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000770:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000774:	f7ff fdd2 	bl	c00031c <__gnu_cmse_nonsecure_call>
}
 c000778:	bf00      	nop
 c00077a:	370c      	adds	r7, #12
 c00077c:	46bd      	mov	sp, r7
 c00077e:	bd90      	pop	{r4, r7, pc}
 c000780:	e002ed00 	.word	0xe002ed00
 c000784:	08040000 	.word	0x08040000
 c000788:	08040004 	.word	0x08040004

0c00078c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c00078c:	b580      	push	{r7, lr}
 c00078e:	b098      	sub	sp, #96	; 0x60
 c000790:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c000792:	f107 0318 	add.w	r3, r7, #24
 c000796:	2248      	movs	r2, #72	; 0x48
 c000798:	2100      	movs	r1, #0
 c00079a:	4618      	mov	r0, r3
 c00079c:	f005 fd04 	bl	c0061a8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0007a0:	1d3b      	adds	r3, r7, #4
 c0007a2:	2200      	movs	r2, #0
 c0007a4:	601a      	str	r2, [r3, #0]
 c0007a6:	605a      	str	r2, [r3, #4]
 c0007a8:	609a      	str	r2, [r3, #8]
 c0007aa:	60da      	str	r2, [r3, #12]
 c0007ac:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0007ae:	2000      	movs	r0, #0
 c0007b0:	f002 fb7c 	bl	c002eac <HAL_PWREx_ControlVoltageScaling>
 c0007b4:	4603      	mov	r3, r0
 c0007b6:	2b00      	cmp	r3, #0
 c0007b8:	d001      	beq.n	c0007be <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0007ba:	f000 fad5 	bl	c000d68 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0007be:	2310      	movs	r3, #16
 c0007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0007c2:	2301      	movs	r3, #1
 c0007c4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0007c6:	2300      	movs	r3, #0
 c0007c8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0007ca:	23b0      	movs	r3, #176	; 0xb0
 c0007cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0007ce:	2302      	movs	r3, #2
 c0007d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0007d2:	2301      	movs	r3, #1
 c0007d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0007d6:	230c      	movs	r3, #12
 c0007d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0007da:	2337      	movs	r3, #55	; 0x37
 c0007dc:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c0007de:	2307      	movs	r3, #7
 c0007e0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c0007e2:	2302      	movs	r3, #2
 c0007e4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c0007e6:	2302      	movs	r3, #2
 c0007e8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c0007ea:	f107 0318 	add.w	r3, r7, #24
 c0007ee:	4618      	mov	r0, r3
 c0007f0:	f002 fbfc 	bl	c002fec <HAL_RCC_OscConfig>
 c0007f4:	4603      	mov	r3, r0
 c0007f6:	2b00      	cmp	r3, #0
 c0007f8:	d001      	beq.n	c0007fe <SystemClock_Config+0x72>
  {
    Error_Handler();
 c0007fa:	f000 fab5 	bl	c000d68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c0007fe:	230f      	movs	r3, #15
 c000800:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000802:	2303      	movs	r3, #3
 c000804:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c000806:	2300      	movs	r3, #0
 c000808:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c00080a:	2300      	movs	r3, #0
 c00080c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c00080e:	2300      	movs	r3, #0
 c000810:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000812:	1d3b      	adds	r3, r7, #4
 c000814:	2105      	movs	r1, #5
 c000816:	4618      	mov	r0, r3
 c000818:	f003 f8be 	bl	c003998 <HAL_RCC_ClockConfig>
 c00081c:	4603      	mov	r3, r0
 c00081e:	2b00      	cmp	r3, #0
 c000820:	d001      	beq.n	c000826 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c000822:	f000 faa1 	bl	c000d68 <Error_Handler>
  }
}
 c000826:	bf00      	nop
 c000828:	3760      	adds	r7, #96	; 0x60
 c00082a:	46bd      	mov	sp, r7
 c00082c:	bd80      	pop	{r7, pc}
	...

0c000830 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000830:	b580      	push	{r7, lr}
 c000832:	b09c      	sub	sp, #112	; 0x70
 c000834:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000836:	1d3b      	adds	r3, r7, #4
 c000838:	226c      	movs	r2, #108	; 0x6c
 c00083a:	2100      	movs	r1, #0
 c00083c:	4618      	mov	r0, r3
 c00083e:	f005 fcb3 	bl	c0061a8 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000842:	f240 3101 	movw	r1, #769	; 0x301
 c000846:	2009      	movs	r0, #9
 c000848:	f002 f996 	bl	c002b78 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c00084c:	4603      	mov	r3, r0
 c00084e:	2b00      	cmp	r3, #0
 c000850:	d001      	beq.n	c000856 <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c000852:	f000 fa89 	bl	c000d68 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000856:	f240 3101 	movw	r1, #769	; 0x301
 c00085a:	483a      	ldr	r0, [pc, #232]	; (c000944 <MX_GTZC_S_Init+0x114>)
 c00085c:	f002 f98c 	bl	c002b78 <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000860:	4603      	mov	r3, r0
 c000862:	2b00      	cmp	r3, #0
 c000864:	d001      	beq.n	c00086a <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c000866:	f000 fa7f 	bl	c000d68 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00086a:	2300      	movs	r3, #0
 c00086c:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c00086e:	2300      	movs	r3, #0
 c000870:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000872:	f04f 33ff 	mov.w	r3, #4294967295
 c000876:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000878:	f04f 33ff 	mov.w	r3, #4294967295
 c00087c:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c00087e:	f04f 33ff 	mov.w	r3, #4294967295
 c000882:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c000884:	f04f 33ff 	mov.w	r3, #4294967295
 c000888:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c00088a:	f04f 33ff 	mov.w	r3, #4294967295
 c00088e:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000890:	f04f 33ff 	mov.w	r3, #4294967295
 c000894:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c000896:	f04f 33ff 	mov.w	r3, #4294967295
 c00089a:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c00089c:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a0:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0008a2:	f04f 33ff 	mov.w	r3, #4294967295
 c0008a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0008a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0008ac:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0008ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b2:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0008b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0008b8:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0008ba:	2300      	movs	r3, #0
 c0008bc:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0008be:	2300      	movs	r3, #0
 c0008c0:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0008c2:	2300      	movs	r3, #0
 c0008c4:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0008c6:	2300      	movs	r3, #0
 c0008c8:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0008ca:	2300      	movs	r3, #0
 c0008cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0008ce:	2300      	movs	r3, #0
 c0008d0:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0008d2:	2300      	movs	r3, #0
 c0008d4:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0008d6:	2300      	movs	r3, #0
 c0008d8:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0008da:	2300      	movs	r3, #0
 c0008dc:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c0008de:	2300      	movs	r3, #0
 c0008e0:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c0008e2:	2300      	movs	r3, #0
 c0008e4:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c0008e6:	2300      	movs	r3, #0
 c0008e8:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0008ea:	2300      	movs	r3, #0
 c0008ec:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0008ee:	1d3b      	adds	r3, r7, #4
 c0008f0:	4619      	mov	r1, r3
 c0008f2:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c0008f6:	f002 fa17 	bl	c002d28 <HAL_GTZC_MPCBB_ConfigMem>
 c0008fa:	4603      	mov	r3, r0
 c0008fc:	2b00      	cmp	r3, #0
 c0008fe:	d001      	beq.n	c000904 <MX_GTZC_S_Init+0xd4>
  {
    Error_Handler();
 c000900:	f000 fa32 	bl	c000d68 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000904:	2300      	movs	r3, #0
 c000906:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c000908:	2300      	movs	r3, #0
 c00090a:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c00090c:	2300      	movs	r3, #0
 c00090e:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000910:	2300      	movs	r3, #0
 c000912:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000914:	2300      	movs	r3, #0
 c000916:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c000918:	2300      	movs	r3, #0
 c00091a:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c00091c:	2300      	movs	r3, #0
 c00091e:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000920:	2300      	movs	r3, #0
 c000922:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000924:	2300      	movs	r3, #0
 c000926:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000928:	1d3b      	adds	r3, r7, #4
 c00092a:	4619      	mov	r1, r3
 c00092c:	4806      	ldr	r0, [pc, #24]	; (c000948 <MX_GTZC_S_Init+0x118>)
 c00092e:	f002 f9fb 	bl	c002d28 <HAL_GTZC_MPCBB_ConfigMem>
 c000932:	4603      	mov	r3, r0
 c000934:	2b00      	cmp	r3, #0
 c000936:	d001      	beq.n	c00093c <MX_GTZC_S_Init+0x10c>
  {
    Error_Handler();
 c000938:	f000 fa16 	bl	c000d68 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c00093c:	bf00      	nop
 c00093e:	3770      	adds	r7, #112	; 0x70
 c000940:	46bd      	mov	sp, r7
 c000942:	bd80      	pop	{r7, pc}
 c000944:	10000001 	.word	0x10000001
 c000948:	30030000 	.word	0x30030000

0c00094c <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c00094c:	b580      	push	{r7, lr}
 c00094e:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000950:	2000      	movs	r0, #0
 c000952:	f002 fa6d 	bl	c002e30 <HAL_ICACHE_ConfigAssociativityMode>
 c000956:	4603      	mov	r3, r0
 c000958:	2b00      	cmp	r3, #0
 c00095a:	d001      	beq.n	c000960 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c00095c:	f000 fa04 	bl	c000d68 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000960:	f002 fa86 	bl	c002e70 <HAL_ICACHE_Enable>
 c000964:	4603      	mov	r3, r0
 c000966:	2b00      	cmp	r3, #0
 c000968:	d001      	beq.n	c00096e <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c00096a:	f000 f9fd 	bl	c000d68 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c00096e:	bf00      	nop
 c000970:	bd80      	pop	{r7, pc}
	...

0c000974 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 c000974:	b580      	push	{r7, lr}
 c000976:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 c000978:	4b1b      	ldr	r3, [pc, #108]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00097a:	4a1c      	ldr	r2, [pc, #112]	; (c0009ec <MX_SPI3_Init+0x78>)
 c00097c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 c00097e:	4b1a      	ldr	r3, [pc, #104]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000980:	f44f 7282 	mov.w	r2, #260	; 0x104
 c000984:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 c000986:	4b18      	ldr	r3, [pc, #96]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000988:	2200      	movs	r2, #0
 c00098a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 c00098c:	4b16      	ldr	r3, [pc, #88]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00098e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 c000992:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 c000994:	4b14      	ldr	r3, [pc, #80]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c000996:	2200      	movs	r2, #0
 c000998:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 c00099a:	4b13      	ldr	r3, [pc, #76]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c00099c:	2200      	movs	r2, #0
 c00099e:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 c0009a0:	4b11      	ldr	r3, [pc, #68]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0009a6:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 c0009a8:	4b0f      	ldr	r3, [pc, #60]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009aa:	2220      	movs	r2, #32
 c0009ac:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c0009ae:	4b0e      	ldr	r3, [pc, #56]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009b0:	2200      	movs	r2, #0
 c0009b2:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 c0009b4:	4b0c      	ldr	r3, [pc, #48]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009b6:	2200      	movs	r2, #0
 c0009b8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0009ba:	4b0b      	ldr	r3, [pc, #44]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009bc:	2200      	movs	r2, #0
 c0009be:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 c0009c0:	4b09      	ldr	r3, [pc, #36]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009c2:	2207      	movs	r2, #7
 c0009c4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 c0009c6:	4b08      	ldr	r3, [pc, #32]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009c8:	2200      	movs	r2, #0
 c0009ca:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c0009cc:	4b06      	ldr	r3, [pc, #24]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009ce:	2208      	movs	r2, #8
 c0009d0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 c0009d2:	4805      	ldr	r0, [pc, #20]	; (c0009e8 <MX_SPI3_Init+0x74>)
 c0009d4:	f003 ffda 	bl	c00498c <HAL_SPI_Init>
 c0009d8:	4603      	mov	r3, r0
 c0009da:	2b00      	cmp	r3, #0
 c0009dc:	d001      	beq.n	c0009e2 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 c0009de:	f000 f9c3 	bl	c000d68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 c0009e2:	bf00      	nop
 c0009e4:	bd80      	pop	{r7, pc}
 c0009e6:	bf00      	nop
 c0009e8:	3000008c 	.word	0x3000008c
 c0009ec:	50003c00 	.word	0x50003c00

0c0009f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c0009f0:	b580      	push	{r7, lr}
 c0009f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c0009f4:	4b23      	ldr	r3, [pc, #140]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c0009f6:	4a24      	ldr	r2, [pc, #144]	; (c000a88 <MX_USART1_UART_Init+0x98>)
 c0009f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c0009fa:	4b22      	ldr	r3, [pc, #136]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c0009fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000a00:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000a02:	4b20      	ldr	r3, [pc, #128]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a04:	2200      	movs	r2, #0
 c000a06:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c000a08:	4b1e      	ldr	r3, [pc, #120]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a0a:	2200      	movs	r2, #0
 c000a0c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c000a0e:	4b1d      	ldr	r3, [pc, #116]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a10:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000a14:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c000a16:	4b1b      	ldr	r3, [pc, #108]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a18:	220c      	movs	r2, #12
 c000a1a:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000a1c:	4b19      	ldr	r3, [pc, #100]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a1e:	2200      	movs	r2, #0
 c000a20:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000a22:	4b18      	ldr	r3, [pc, #96]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a24:	2200      	movs	r2, #0
 c000a26:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c000a28:	4b16      	ldr	r3, [pc, #88]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a2a:	2200      	movs	r2, #0
 c000a2c:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000a2e:	4b15      	ldr	r3, [pc, #84]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a30:	2200      	movs	r2, #0
 c000a32:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000a34:	4b13      	ldr	r3, [pc, #76]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a36:	2200      	movs	r2, #0
 c000a38:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c000a3a:	4812      	ldr	r0, [pc, #72]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a3c:	f004 fc92 	bl	c005364 <HAL_UART_Init>
 c000a40:	4603      	mov	r3, r0
 c000a42:	2b00      	cmp	r3, #0
 c000a44:	d001      	beq.n	c000a4a <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c000a46:	f000 f98f 	bl	c000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a4a:	2100      	movs	r1, #0
 c000a4c:	480d      	ldr	r0, [pc, #52]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a4e:	f005 fab7 	bl	c005fc0 <HAL_UARTEx_SetTxFifoThreshold>
 c000a52:	4603      	mov	r3, r0
 c000a54:	2b00      	cmp	r3, #0
 c000a56:	d001      	beq.n	c000a5c <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c000a58:	f000 f986 	bl	c000d68 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000a5c:	2100      	movs	r1, #0
 c000a5e:	4809      	ldr	r0, [pc, #36]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a60:	f005 faec 	bl	c00603c <HAL_UARTEx_SetRxFifoThreshold>
 c000a64:	4603      	mov	r3, r0
 c000a66:	2b00      	cmp	r3, #0
 c000a68:	d001      	beq.n	c000a6e <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c000a6a:	f000 f97d 	bl	c000d68 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000a6e:	4805      	ldr	r0, [pc, #20]	; (c000a84 <MX_USART1_UART_Init+0x94>)
 c000a70:	f005 fa6d 	bl	c005f4e <HAL_UARTEx_DisableFifoMode>
 c000a74:	4603      	mov	r3, r0
 c000a76:	2b00      	cmp	r3, #0
 c000a78:	d001      	beq.n	c000a7e <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c000a7a:	f000 f975 	bl	c000d68 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c000a7e:	bf00      	nop
 c000a80:	bd80      	pop	{r7, pc}
 c000a82:	bf00      	nop
 c000a84:	300001c0 	.word	0x300001c0
 c000a88:	50013800 	.word	0x50013800

0c000a8c <MX_DMA_Init>:
  * Configure DMA for memory to memory transfers
  *   hdma_memtomem_dma1_channel1
  *   hdma_memtomem_dma1_channel2
  */
static void MX_DMA_Init(void)
{
 c000a8c:	b580      	push	{r7, lr}
 c000a8e:	b082      	sub	sp, #8
 c000a90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c000a92:	4b67      	ldr	r3, [pc, #412]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000a94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000a96:	4a66      	ldr	r2, [pc, #408]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000a98:	f043 0304 	orr.w	r3, r3, #4
 c000a9c:	6493      	str	r3, [r2, #72]	; 0x48
 c000a9e:	4b64      	ldr	r3, [pc, #400]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000aa0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aa2:	f003 0304 	and.w	r3, r3, #4
 c000aa6:	607b      	str	r3, [r7, #4]
 c000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c000aaa:	4b61      	ldr	r3, [pc, #388]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aae:	4a60      	ldr	r2, [pc, #384]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000ab0:	f043 0301 	orr.w	r3, r3, #1
 c000ab4:	6493      	str	r3, [r2, #72]	; 0x48
 c000ab6:	4b5e      	ldr	r3, [pc, #376]	; (c000c30 <MX_DMA_Init+0x1a4>)
 c000ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000aba:	f003 0301 	and.w	r3, r3, #1
 c000abe:	603b      	str	r3, [r7, #0]
 c000ac0:	683b      	ldr	r3, [r7, #0]

  /* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
  hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 c000ac2:	4b5c      	ldr	r3, [pc, #368]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ac4:	4a5c      	ldr	r2, [pc, #368]	; (c000c38 <MX_DMA_Init+0x1ac>)
 c000ac6:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_MEM2MEM;
 c000ac8:	4b5a      	ldr	r3, [pc, #360]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000aca:	2200      	movs	r2, #0
 c000acc:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000ace:	4b59      	ldr	r3, [pc, #356]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ad0:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000ad4:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 c000ad6:	4b57      	ldr	r3, [pc, #348]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ad8:	2240      	movs	r2, #64	; 0x40
 c000ada:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 c000adc:	4b55      	ldr	r3, [pc, #340]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ade:	2280      	movs	r2, #128	; 0x80
 c000ae0:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000ae2:	4b54      	ldr	r3, [pc, #336]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000ae4:	2200      	movs	r2, #0
 c000ae6:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000ae8:	4b52      	ldr	r3, [pc, #328]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000aea:	2200      	movs	r2, #0
 c000aec:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 c000aee:	4b51      	ldr	r3, [pc, #324]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000af0:	2200      	movs	r2, #0
 c000af2:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_LOW;
 c000af4:	4b4f      	ldr	r3, [pc, #316]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000af6:	2200      	movs	r2, #0
 c000af8:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK)
 c000afa:	484e      	ldr	r0, [pc, #312]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000afc:	f001 facc 	bl	c002098 <HAL_DMA_Init>
 c000b00:	4603      	mov	r3, r0
 c000b02:	2b00      	cmp	r3, #0
 c000b04:	d001      	beq.n	c000b0a <MX_DMA_Init+0x7e>
  {
    Error_Handler( );
 c000b06:	f000 f92f 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b0a:	2110      	movs	r1, #16
 c000b0c:	4849      	ldr	r0, [pc, #292]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000b0e:	f001 fd3b 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000b12:	4603      	mov	r3, r0
 c000b14:	2b00      	cmp	r3, #0
 c000b16:	d001      	beq.n	c000b1c <MX_DMA_Init+0x90>
  {
    Error_Handler( );
 c000b18:	f000 f926 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SEC) != HAL_OK)
 c000b1c:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000b20:	4844      	ldr	r0, [pc, #272]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000b22:	f001 fd31 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000b26:	4603      	mov	r3, r0
 c000b28:	2b00      	cmp	r3, #0
 c000b2a:	d001      	beq.n	c000b30 <MX_DMA_Init+0xa4>
  {
    Error_Handler( );
 c000b2c:	f000 f91c 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000b30:	2104      	movs	r1, #4
 c000b32:	4840      	ldr	r0, [pc, #256]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000b34:	f001 fd28 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000b38:	4603      	mov	r3, r0
 c000b3a:	2b00      	cmp	r3, #0
 c000b3c:	d001      	beq.n	c000b42 <MX_DMA_Init+0xb6>
  {
    Error_Handler( );
 c000b3e:	f000 f913 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel1, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000b42:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000b46:	483b      	ldr	r0, [pc, #236]	; (c000c34 <MX_DMA_Init+0x1a8>)
 c000b48:	f001 fd1e 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000b4c:	4603      	mov	r3, r0
 c000b4e:	2b00      	cmp	r3, #0
 c000b50:	d001      	beq.n	c000b56 <MX_DMA_Init+0xca>
  {
    Error_Handler( );
 c000b52:	f000 f909 	bl	c000d68 <Error_Handler>
  }

  /* Configure DMA request hdma_memtomem_dma1_channel2 on DMA1_Channel2 */
  hdma_memtomem_dma1_channel2.Instance = DMA1_Channel2;
 c000b56:	4b39      	ldr	r3, [pc, #228]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b58:	4a39      	ldr	r2, [pc, #228]	; (c000c40 <MX_DMA_Init+0x1b4>)
 c000b5a:	601a      	str	r2, [r3, #0]
  hdma_memtomem_dma1_channel2.Init.Request = DMA_REQUEST_MEM2MEM;
 c000b5c:	4b37      	ldr	r3, [pc, #220]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b5e:	2200      	movs	r2, #0
 c000b60:	605a      	str	r2, [r3, #4]
  hdma_memtomem_dma1_channel2.Init.Direction = DMA_MEMORY_TO_MEMORY;
 c000b62:	4b36      	ldr	r3, [pc, #216]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 c000b68:	609a      	str	r2, [r3, #8]
  hdma_memtomem_dma1_channel2.Init.PeriphInc = DMA_PINC_ENABLE;
 c000b6a:	4b34      	ldr	r3, [pc, #208]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b6c:	2240      	movs	r2, #64	; 0x40
 c000b6e:	60da      	str	r2, [r3, #12]
  hdma_memtomem_dma1_channel2.Init.MemInc = DMA_MINC_ENABLE;
 c000b70:	4b32      	ldr	r3, [pc, #200]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b72:	2280      	movs	r2, #128	; 0x80
 c000b74:	611a      	str	r2, [r3, #16]
  hdma_memtomem_dma1_channel2.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000b76:	4b31      	ldr	r3, [pc, #196]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b78:	2200      	movs	r2, #0
 c000b7a:	615a      	str	r2, [r3, #20]
  hdma_memtomem_dma1_channel2.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000b7c:	4b2f      	ldr	r3, [pc, #188]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b7e:	2200      	movs	r2, #0
 c000b80:	619a      	str	r2, [r3, #24]
  hdma_memtomem_dma1_channel2.Init.Mode = DMA_NORMAL;
 c000b82:	4b2e      	ldr	r3, [pc, #184]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b84:	2200      	movs	r2, #0
 c000b86:	61da      	str	r2, [r3, #28]
  hdma_memtomem_dma1_channel2.Init.Priority = DMA_PRIORITY_LOW;
 c000b88:	4b2c      	ldr	r3, [pc, #176]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b8a:	2200      	movs	r2, #0
 c000b8c:	621a      	str	r2, [r3, #32]
  if (HAL_DMA_Init(&hdma_memtomem_dma1_channel2) != HAL_OK)
 c000b8e:	482b      	ldr	r0, [pc, #172]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000b90:	f001 fa82 	bl	c002098 <HAL_DMA_Init>
 c000b94:	4603      	mov	r3, r0
 c000b96:	2b00      	cmp	r3, #0
 c000b98:	d001      	beq.n	c000b9e <MX_DMA_Init+0x112>
  {
    Error_Handler( );
 c000b9a:	f000 f8e5 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000b9e:	2110      	movs	r1, #16
 c000ba0:	4826      	ldr	r0, [pc, #152]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000ba2:	f001 fcf1 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000ba6:	4603      	mov	r3, r0
 c000ba8:	2b00      	cmp	r3, #0
 c000baa:	d001      	beq.n	c000bb0 <MX_DMA_Init+0x124>
  {
    Error_Handler( );
 c000bac:	f000 f8dc 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_SEC) != HAL_OK)
 c000bb0:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000bb4:	4821      	ldr	r0, [pc, #132]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000bb6:	f001 fce7 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000bba:	4603      	mov	r3, r0
 c000bbc:	2b00      	cmp	r3, #0
 c000bbe:	d001      	beq.n	c000bc4 <MX_DMA_Init+0x138>
  {
    Error_Handler( );
 c000bc0:	f000 f8d2 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_SRC_NSEC) != HAL_OK)
 c000bc4:	2104      	movs	r1, #4
 c000bc6:	481d      	ldr	r0, [pc, #116]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000bc8:	f001 fcde 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000bcc:	4603      	mov	r3, r0
 c000bce:	2b00      	cmp	r3, #0
 c000bd0:	d001      	beq.n	c000bd6 <MX_DMA_Init+0x14a>
  {
    Error_Handler( );
 c000bd2:	f000 f8c9 	bl	c000d68 <Error_Handler>
  }

  /*  */
  if (HAL_DMA_ConfigChannelAttributes(&hdma_memtomem_dma1_channel2, DMA_CHANNEL_DEST_NSEC) != HAL_OK)
 c000bd6:	2108      	movs	r1, #8
 c000bd8:	4818      	ldr	r0, [pc, #96]	; (c000c3c <MX_DMA_Init+0x1b0>)
 c000bda:	f001 fcd5 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c000bde:	4603      	mov	r3, r0
 c000be0:	2b00      	cmp	r3, #0
 c000be2:	d001      	beq.n	c000be8 <MX_DMA_Init+0x15c>
  {
    Error_Handler( );
 c000be4:	f000 f8c0 	bl	c000d68 <Error_Handler>
  }

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
   HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 c000be8:	2200      	movs	r2, #0
 c000bea:	2100      	movs	r1, #0
 c000bec:	201d      	movs	r0, #29
 c000bee:	f001 fa1e 	bl	c00202e <HAL_NVIC_SetPriority>
   HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 c000bf2:	201d      	movs	r0, #29
 c000bf4:	f001 fa35 	bl	c002062 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel2_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 c000bf8:	2200      	movs	r2, #0
 c000bfa:	2100      	movs	r1, #0
 c000bfc:	201e      	movs	r0, #30
 c000bfe:	f001 fa16 	bl	c00202e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 c000c02:	201e      	movs	r0, #30
 c000c04:	f001 fa2d 	bl	c002062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 0, 0);
 c000c08:	2200      	movs	r2, #0
 c000c0a:	2100      	movs	r1, #0
 c000c0c:	201f      	movs	r0, #31
 c000c0e:	f001 fa0e 	bl	c00202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 c000c12:	201f      	movs	r0, #31
 c000c14:	f001 fa25 	bl	c002062 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 c000c18:	2200      	movs	r2, #0
 c000c1a:	2100      	movs	r1, #0
 c000c1c:	2020      	movs	r0, #32
 c000c1e:	f001 fa06 	bl	c00202e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 c000c22:	2020      	movs	r0, #32
 c000c24:	f001 fa1d 	bl	c002062 <HAL_NVIC_EnableIRQ>

}
 c000c28:	bf00      	nop
 c000c2a:	3708      	adds	r7, #8
 c000c2c:	46bd      	mov	sp, r7
 c000c2e:	bd80      	pop	{r7, pc}
 c000c30:	50021000 	.word	0x50021000
 c000c34:	30000254 	.word	0x30000254
 c000c38:	50020008 	.word	0x50020008
 c000c3c:	300002bc 	.word	0x300002bc
 c000c40:	5002001c 	.word	0x5002001c

0c000c44 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000c44:	b580      	push	{r7, lr}
 c000c46:	b08a      	sub	sp, #40	; 0x28
 c000c48:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000c4a:	f107 0314 	add.w	r3, r7, #20
 c000c4e:	2200      	movs	r2, #0
 c000c50:	601a      	str	r2, [r3, #0]
 c000c52:	605a      	str	r2, [r3, #4]
 c000c54:	609a      	str	r2, [r3, #8]
 c000c56:	60da      	str	r2, [r3, #12]
 c000c58:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000c5a:	4b2e      	ldr	r3, [pc, #184]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c5e:	4a2d      	ldr	r2, [pc, #180]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c60:	f043 0308 	orr.w	r3, r3, #8
 c000c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c66:	4b2b      	ldr	r3, [pc, #172]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c6a:	f003 0308 	and.w	r3, r3, #8
 c000c6e:	613b      	str	r3, [r7, #16]
 c000c70:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000c72:	4b28      	ldr	r3, [pc, #160]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c76:	4a27      	ldr	r2, [pc, #156]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c78:	f043 0302 	orr.w	r3, r3, #2
 c000c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c7e:	4b25      	ldr	r3, [pc, #148]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c82:	f003 0302 	and.w	r3, r3, #2
 c000c86:	60fb      	str	r3, [r7, #12]
 c000c88:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000c8a:	4b22      	ldr	r3, [pc, #136]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c8e:	4a21      	ldr	r2, [pc, #132]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000c94:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c96:	4b1f      	ldr	r3, [pc, #124]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000c98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000c9e:	60bb      	str	r3, [r7, #8]
 c000ca0:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c000ca2:	f002 f95f 	bl	c002f64 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000ca6:	4b1b      	ldr	r3, [pc, #108]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000caa:	4a1a      	ldr	r2, [pc, #104]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000cac:	f043 0304 	orr.w	r3, r3, #4
 c000cb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cb2:	4b18      	ldr	r3, [pc, #96]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000cb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cb6:	f003 0304 	and.w	r3, r3, #4
 c000cba:	607b      	str	r3, [r7, #4]
 c000cbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000cbe:	4b15      	ldr	r3, [pc, #84]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cc2:	4a14      	ldr	r2, [pc, #80]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000cc4:	f043 0301 	orr.w	r3, r3, #1
 c000cc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cca:	4b12      	ldr	r3, [pc, #72]	; (c000d14 <MX_GPIO_Init+0xd0>)
 c000ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cce:	f003 0301 	and.w	r3, r3, #1
 c000cd2:	603b      	str	r3, [r7, #0]
 c000cd4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000cd6:	2201      	movs	r2, #1
 c000cd8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000cdc:	480e      	ldr	r0, [pc, #56]	; (c000d18 <MX_GPIO_Init+0xd4>)
 c000cde:	f001 fefb 	bl	c002ad8 <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c000ce2:	2200      	movs	r2, #0
 c000ce4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000ce8:	480c      	ldr	r0, [pc, #48]	; (c000d1c <MX_GPIO_Init+0xd8>)
 c000cea:	f001 ff0d 	bl	c002b08 <HAL_GPIO_ConfigPinAttributes>

  //this pin is used as the CS pin for SPI communication
  //for STM32 microcontrollers, this pin must be configured and controlled manually.
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000cee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000cf4:	2301      	movs	r3, #1
 c000cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000cf8:	2301      	movs	r3, #1
 c000cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000cfc:	2300      	movs	r3, #0
 c000cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000d00:	f107 0314 	add.w	r3, r7, #20
 c000d04:	4619      	mov	r1, r3
 c000d06:	4804      	ldr	r0, [pc, #16]	; (c000d18 <MX_GPIO_Init+0xd4>)
 c000d08:	f001 fd66 	bl	c0027d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 c000d0c:	bf00      	nop
 c000d0e:	3728      	adds	r7, #40	; 0x28
 c000d10:	46bd      	mov	sp, r7
 c000d12:	bd80      	pop	{r7, pc}
 c000d14:	50021000 	.word	0x50021000
 c000d18:	52020400 	.word	0x52020400
 c000d1c:	52020800 	.word	0x52020800

0c000d20 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000d20:	b580      	push	{r7, lr}
 c000d22:	b082      	sub	sp, #8
 c000d24:	af00      	add	r7, sp, #0
 c000d26:	6078      	str	r0, [r7, #4]
  printf("SPI Transfer complete.\n\r");
 c000d28:	4804      	ldr	r0, [pc, #16]	; (c000d3c <HAL_SPI_TxRxCpltCallback+0x1c>)
 c000d2a:	f005 fa45 	bl	c0061b8 <iprintf>
  wTransferState = TRANSFER_COMPLETE;
 c000d2e:	4b04      	ldr	r3, [pc, #16]	; (c000d40 <HAL_SPI_TxRxCpltCallback+0x20>)
 c000d30:	2201      	movs	r2, #1
 c000d32:	601a      	str	r2, [r3, #0]
}
 c000d34:	bf00      	nop
 c000d36:	3708      	adds	r7, #8
 c000d38:	46bd      	mov	sp, r7
 c000d3a:	bd80      	pop	{r7, pc}
 c000d3c:	0c007108 	.word	0x0c007108
 c000d40:	30000324 	.word	0x30000324

0c000d44 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 c000d44:	b580      	push	{r7, lr}
 c000d46:	b082      	sub	sp, #8
 c000d48:	af00      	add	r7, sp, #0
 c000d4a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000d4c:	1d39      	adds	r1, r7, #4
 c000d4e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000d52:	2201      	movs	r2, #1
 c000d54:	4803      	ldr	r0, [pc, #12]	; (c000d64 <__io_putchar+0x20>)
 c000d56:	f004 fb55 	bl	c005404 <HAL_UART_Transmit>

  return ch;
 c000d5a:	687b      	ldr	r3, [r7, #4]
}
 c000d5c:	4618      	mov	r0, r3
 c000d5e:	3708      	adds	r7, #8
 c000d60:	46bd      	mov	sp, r7
 c000d62:	bd80      	pop	{r7, pc}
 c000d64:	300001c0 	.word	0x300001c0

0c000d68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000d68:	b480      	push	{r7}
 c000d6a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 c000d6c:	b672      	cpsid	i
}
 c000d6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000d70:	e7fe      	b.n	c000d70 <Error_Handler+0x8>
	...

0c000d74 <__acle_se_SECURE_SPI_Send_Data>:

/**
  * @brief  Secure service to send secure memory buffer to secure SPI port. Also receives data in rx buffer
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Send_Data(){
 c000d74:	b580      	push	{r7, lr}
 c000d76:	af00      	add	r7, sp, #0
	/*##-1- Start the Full Duplex Communication process ########################*/
	printf("Sending buffer to the server...\n\r");
 c000d78:	482c      	ldr	r0, [pc, #176]	; (c000e2c <__acle_se_SECURE_SPI_Send_Data+0xb8>)
 c000d7a:	f005 fa1d 	bl	c0061b8 <iprintf>
	if (HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t *)SEC_Mem_Buffer, (uint8_t *)aRxBuffer, BUFFER_SIZE) != HAL_OK)
 c000d7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000d82:	4a2b      	ldr	r2, [pc, #172]	; (c000e30 <__acle_se_SECURE_SPI_Send_Data+0xbc>)
 c000d84:	492b      	ldr	r1, [pc, #172]	; (c000e34 <__acle_se_SECURE_SPI_Send_Data+0xc0>)
 c000d86:	482c      	ldr	r0, [pc, #176]	; (c000e38 <__acle_se_SECURE_SPI_Send_Data+0xc4>)
 c000d88:	f003 fea4 	bl	c004ad4 <HAL_SPI_TransmitReceive_DMA>
 c000d8c:	4603      	mov	r3, r0
 c000d8e:	2b00      	cmp	r3, #0
 c000d90:	d004      	beq.n	c000d9c <__acle_se_SECURE_SPI_Send_Data+0x28>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up txrx.\n\r");
 c000d92:	482a      	ldr	r0, [pc, #168]	; (c000e3c <__acle_se_SECURE_SPI_Send_Data+0xc8>)
 c000d94:	f005 fa10 	bl	c0061b8 <iprintf>
		 Error_Handler();
 c000d98:	f7ff ffe6 	bl	c000d68 <Error_Handler>
	 }

	 /*##-2- Wait for the end of the transfer ###################################*/
	 while (wTransferState == TRANSFER_WAIT)
 c000d9c:	bf00      	nop
 c000d9e:	4b28      	ldr	r3, [pc, #160]	; (c000e40 <__acle_se_SECURE_SPI_Send_Data+0xcc>)
 c000da0:	681b      	ldr	r3, [r3, #0]
 c000da2:	2b00      	cmp	r3, #0
 c000da4:	d0fb      	beq.n	c000d9e <__acle_se_SECURE_SPI_Send_Data+0x2a>
	 {
	 }

	//check SpI transfer state
	 switch (wTransferState)
 c000da6:	4b26      	ldr	r3, [pc, #152]	; (c000e40 <__acle_se_SECURE_SPI_Send_Data+0xcc>)
 c000da8:	681b      	ldr	r3, [r3, #0]
 c000daa:	2b01      	cmp	r3, #1
 c000dac:	d005      	beq.n	c000dba <__acle_se_SECURE_SPI_Send_Data+0x46>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   printf("There was an error in SPI transfer.\n\r");
 c000dae:	4825      	ldr	r0, [pc, #148]	; (c000e44 <__acle_se_SECURE_SPI_Send_Data+0xd0>)
 c000db0:	f005 fa02 	bl	c0061b8 <iprintf>
		   Error_Handler();
 c000db4:	f7ff ffd8 	bl	c000d68 <Error_Handler>
		   break;
 c000db8:	e000      	b.n	c000dbc <__acle_se_SECURE_SPI_Send_Data+0x48>
		   break;
 c000dba:	bf00      	nop
	 }
}
 c000dbc:	bf00      	nop
 c000dbe:	4618      	mov	r0, r3
 c000dc0:	46bd      	mov	sp, r7
 c000dc2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000dc6:	4671      	mov	r1, lr
 c000dc8:	4672      	mov	r2, lr
 c000dca:	4673      	mov	r3, lr
 c000dcc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000dd0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000dd4:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000dd8:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000ddc:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000de0:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000de4:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000de8:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000dec:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000df0:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000df4:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000df8:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000dfc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000e00:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000e04:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000e08:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000e0c:	f38e 8c00 	msr	CPSR_fs, lr
 c000e10:	b410      	push	{r4}
 c000e12:	eef1 ca10 	vmrs	ip, fpscr
 c000e16:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000e1a:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000e1e:	ea0c 0c04 	and.w	ip, ip, r4
 c000e22:	eee1 ca10 	vmsr	fpscr, ip
 c000e26:	bc10      	pop	{r4}
 c000e28:	46f4      	mov	ip, lr
 c000e2a:	4774      	bxns	lr
 c000e2c:	0c007124 	.word	0x0c007124
 c000e30:	30000728 	.word	0x30000728
 c000e34:	30000328 	.word	0x30000328
 c000e38:	3000008c 	.word	0x3000008c
 c000e3c:	0c007148 	.word	0x0c007148
 c000e40:	30000324 	.word	0x30000324
 c000e44:	0c007174 	.word	0x0c007174

0c000e48 <__acle_se_SECURE_SPI_Toggle_Comm>:
/**
  * @brief  Secure service to toggle SPI communication on or off. Must be called @ beginning and end of SPI transmission
  * @param state	SPI ON: 0 and SPI OFF: 1
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_SPI_Toggle_Comm(int state){
 c000e48:	b580      	push	{r7, lr}
 c000e4a:	b082      	sub	sp, #8
 c000e4c:	af00      	add	r7, sp, #0
 c000e4e:	6078      	str	r0, [r7, #4]
	if(state > 0){
 c000e50:	687b      	ldr	r3, [r7, #4]
 c000e52:	2b00      	cmp	r3, #0
 c000e54:	dd06      	ble.n	c000e64 <__acle_se_SECURE_SPI_Toggle_Comm+0x1c>
		//off state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000e56:	2201      	movs	r2, #1
 c000e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000e5c:	4821      	ldr	r0, [pc, #132]	; (c000ee4 <__acle_se_SECURE_SPI_Toggle_Comm+0x9c>)
 c000e5e:	f001 fe3b 	bl	c002ad8 <HAL_GPIO_WritePin>
 c000e62:	e005      	b.n	c000e70 <__acle_se_SECURE_SPI_Toggle_Comm+0x28>

	}else{
		//on state
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 c000e64:	2200      	movs	r2, #0
 c000e66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000e6a:	481e      	ldr	r0, [pc, #120]	; (c000ee4 <__acle_se_SECURE_SPI_Toggle_Comm+0x9c>)
 c000e6c:	f001 fe34 	bl	c002ad8 <HAL_GPIO_WritePin>
	}
}
 c000e70:	bf00      	nop
 c000e72:	4618      	mov	r0, r3
 c000e74:	3708      	adds	r7, #8
 c000e76:	46bd      	mov	sp, r7
 c000e78:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000e7c:	4671      	mov	r1, lr
 c000e7e:	4672      	mov	r2, lr
 c000e80:	4673      	mov	r3, lr
 c000e82:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000e86:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000e8a:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000e8e:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000e92:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000e96:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000e9a:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000e9e:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ea2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000ea6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000eaa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000eae:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000eb2:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000eb6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000eba:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ebe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000ec2:	f38e 8c00 	msr	CPSR_fs, lr
 c000ec6:	b410      	push	{r4}
 c000ec8:	eef1 ca10 	vmrs	ip, fpscr
 c000ecc:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000ed0:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000ed4:	ea0c 0c04 	and.w	ip, ip, r4
 c000ed8:	eee1 ca10 	vmsr	fpscr, ip
 c000edc:	bc10      	pop	{r4}
 c000ede:	46f4      	mov	ip, lr
 c000ee0:	4774      	bxns	lr
 c000ee2:	bf00      	nop
 c000ee4:	52020400 	.word	0x52020400

0c000ee8 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>:
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_DMA_Fetch_NonSecure_Mem(uint32_t *nsc_mem_buffer,
                                                         uint32_t Size,
                                                         void *func)
{
 c000ee8:	b580      	push	{r7, lr}
 c000eea:	b086      	sub	sp, #24
 c000eec:	af00      	add	r7, sp, #0
 c000eee:	60f8      	str	r0, [r7, #12]
 c000ef0:	60b9      	str	r1, [r7, #8]
 c000ef2:	607a      	str	r2, [r7, #4]
  ErrorStatus  ret = ERROR;
 c000ef4:	2301      	movs	r3, #1
 c000ef6:	75fb      	strb	r3, [r7, #23]

  /* Check that the address range in non-secure */
   if (cmse_check_address_range(nsc_mem_buffer, Size * sizeof(uint32_t), CMSE_NONSECURE))
 c000ef8:	68bb      	ldr	r3, [r7, #8]
 c000efa:	009b      	lsls	r3, r3, #2
 c000efc:	2212      	movs	r2, #18
 c000efe:	4619      	mov	r1, r3
 c000f00:	68f8      	ldr	r0, [r7, #12]
 c000f02:	f7ff f997 	bl	c000234 <cmse_check_address_range>
 c000f06:	4603      	mov	r3, r0
 c000f08:	2b00      	cmp	r3, #0
 c000f0a:	d012      	beq.n	c000f32 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
   {
	   //if so, start the transfer
	   /* Save callback function */
	    pNonSecureToSecureTransferCompleteCallback = func;
 c000f0c:	4a25      	ldr	r2, [pc, #148]	; (c000fa4 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xbc>)
 c000f0e:	687b      	ldr	r3, [r7, #4]
 c000f10:	6013      	str	r3, [r2, #0]
	    //start the DMA transfer
	    if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1,
 c000f12:	68f9      	ldr	r1, [r7, #12]
 c000f14:	4a24      	ldr	r2, [pc, #144]	; (c000fa8 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc0>)
 c000f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000f1a:	4824      	ldr	r0, [pc, #144]	; (c000fac <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc4>)
 c000f1c:	f001 f964 	bl	c0021e8 <HAL_DMA_Start_IT>
 c000f20:	4603      	mov	r3, r0
 c000f22:	2b00      	cmp	r3, #0
 c000f24:	d102      	bne.n	c000f2c <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x44>
	                             (uint32_t)nsc_mem_buffer,
	                             (uint32_t)&SEC_Mem_Buffer,
	                             BUFFER_SIZE) == HAL_OK)
		{
		  /* Transfer started */
		  ret = SUCCESS;
 c000f26:	2300      	movs	r3, #0
 c000f28:	75fb      	strb	r3, [r7, #23]
 c000f2a:	e002      	b.n	c000f32 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0x4a>
		}else{
			printf("transfer was not able to start.\n\r");
 c000f2c:	4820      	ldr	r0, [pc, #128]	; (c000fb0 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem+0xc8>)
 c000f2e:	f005 f943 	bl	c0061b8 <iprintf>
		}

   }

  return ret;
 c000f32:	7dfb      	ldrb	r3, [r7, #23]
}
 c000f34:	4618      	mov	r0, r3
 c000f36:	3718      	adds	r7, #24
 c000f38:	46bd      	mov	sp, r7
 c000f3a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000f3e:	4671      	mov	r1, lr
 c000f40:	4672      	mov	r2, lr
 c000f42:	4673      	mov	r3, lr
 c000f44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000f48:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000f4c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000f50:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000f54:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000f58:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000f5c:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000f60:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000f64:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000f68:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000f6c:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000f70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000f74:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000f78:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000f7c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000f80:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000f84:	f38e 8c00 	msr	CPSR_fs, lr
 c000f88:	b410      	push	{r4}
 c000f8a:	eef1 ca10 	vmrs	ip, fpscr
 c000f8e:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000f92:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000f96:	ea0c 0c04 	and.w	ip, ip, r4
 c000f9a:	eee1 ca10 	vmsr	fpscr, ip
 c000f9e:	bc10      	pop	{r4}
 c000fa0:	46f4      	mov	ip, lr
 c000fa2:	4774      	bxns	lr
 c000fa4:	30000b30 	.word	0x30000b30
 c000fa8:	30000328 	.word	0x30000328
 c000fac:	30000254 	.word	0x30000254
 c000fb0:	0c00719c 	.word	0x0c00719c

0c000fb4 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer>:
  * @param dest_buffer			pointer to non-secure destination buffer
  * @param  size        		requested size of data (256 words)
  * @param  func   				pointer to non-secure callback function on transfer end
  * @retval SUCCESS or ERROR
  */
CMSE_NS_ENTRY ErrorStatus SECURE_DMA_NonSecure_Mem_Transfer(uint32_t *src_buffer, uint32_t *dest_buffer, uint32_t size, void* func){
 c000fb4:	b580      	push	{r7, lr}
 c000fb6:	b086      	sub	sp, #24
 c000fb8:	af00      	add	r7, sp, #0
 c000fba:	60f8      	str	r0, [r7, #12]
 c000fbc:	60b9      	str	r1, [r7, #8]
 c000fbe:	607a      	str	r2, [r7, #4]
 c000fc0:	603b      	str	r3, [r7, #0]
	ErrorStatus ret = ERROR;
 c000fc2:	2301      	movs	r3, #1
 c000fc4:	75fb      	strb	r3, [r7, #23]

	 if (cmse_check_address_range(src_buffer, size * sizeof(uint32_t), CMSE_NONSECURE) && cmse_check_address_range(dest_buffer, size * sizeof(uint32_t), CMSE_NONSECURE)){
 c000fc6:	687b      	ldr	r3, [r7, #4]
 c000fc8:	009b      	lsls	r3, r3, #2
 c000fca:	2212      	movs	r2, #18
 c000fcc:	4619      	mov	r1, r3
 c000fce:	68f8      	ldr	r0, [r7, #12]
 c000fd0:	f7ff f930 	bl	c000234 <cmse_check_address_range>
 c000fd4:	4603      	mov	r3, r0
 c000fd6:	2b00      	cmp	r3, #0
 c000fd8:	d01d      	beq.n	c001016 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x62>
 c000fda:	687b      	ldr	r3, [r7, #4]
 c000fdc:	009b      	lsls	r3, r3, #2
 c000fde:	2212      	movs	r2, #18
 c000fe0:	4619      	mov	r1, r3
 c000fe2:	68b8      	ldr	r0, [r7, #8]
 c000fe4:	f7ff f926 	bl	c000234 <cmse_check_address_range>
 c000fe8:	4603      	mov	r3, r0
 c000fea:	2b00      	cmp	r3, #0
 c000fec:	d013      	beq.n	c001016 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x62>
		 	 //if so, start the transfer
		   /* Save callback function */
			pNonSecureToNonSecureTransferCompleteCallback = func;
 c000fee:	4a28      	ldr	r2, [pc, #160]	; (c001090 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xdc>)
 c000ff0:	683b      	ldr	r3, [r7, #0]
 c000ff2:	6013      	str	r3, [r2, #0]
			//start the DMA transfer
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c000ff4:	68f9      	ldr	r1, [r7, #12]
 c000ff6:	68ba      	ldr	r2, [r7, #8]
 c000ff8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c000ffc:	4825      	ldr	r0, [pc, #148]	; (c001094 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe0>)
 c000ffe:	f001 f8f3 	bl	c0021e8 <HAL_DMA_Start_IT>
 c001002:	4603      	mov	r3, r0
 c001004:	2b00      	cmp	r3, #0
 c001006:	d102      	bne.n	c00100e <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x5a>
									 (uint32_t)src_buffer,
									 (uint32_t)dest_buffer,
									 BUFFER_SIZE) == HAL_OK)
			{
			  /* Transfer started */
			  ret = SUCCESS;
 c001008:	2300      	movs	r3, #0
 c00100a:	75fb      	strb	r3, [r7, #23]
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c00100c:	e006      	b.n	c00101c <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x68>
			}else{
				printf("transfer was not able to start.\n\r");
 c00100e:	4822      	ldr	r0, [pc, #136]	; (c001098 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe4>)
 c001010:	f005 f8d2 	bl	c0061b8 <iprintf>
			if (HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel2,
 c001014:	e002      	b.n	c00101c <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0x68>
			}
	 }else{
		 printf("Error: One or both of the buffers supplied are not in non-secure memory range.\n\r");
 c001016:	4821      	ldr	r0, [pc, #132]	; (c00109c <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer+0xe8>)
 c001018:	f005 f8ce 	bl	c0061b8 <iprintf>
	 }

	 return ret;
 c00101c:	7dfb      	ldrb	r3, [r7, #23]
}
 c00101e:	4618      	mov	r0, r3
 c001020:	3718      	adds	r7, #24
 c001022:	46bd      	mov	sp, r7
 c001024:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001028:	4671      	mov	r1, lr
 c00102a:	4672      	mov	r2, lr
 c00102c:	4673      	mov	r3, lr
 c00102e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001032:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001036:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c00103a:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00103e:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001042:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001046:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c00104a:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00104e:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001052:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001056:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00105a:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00105e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001062:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001066:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00106a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00106e:	f38e 8c00 	msr	CPSR_fs, lr
 c001072:	b410      	push	{r4}
 c001074:	eef1 ca10 	vmrs	ip, fpscr
 c001078:	f64f 7460 	movw	r4, #65376	; 0xff60
 c00107c:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001080:	ea0c 0c04 	and.w	ip, ip, r4
 c001084:	eee1 ca10 	vmsr	fpscr, ip
 c001088:	bc10      	pop	{r4}
 c00108a:	46f4      	mov	ip, lr
 c00108c:	4774      	bxns	lr
 c00108e:	bf00      	nop
 c001090:	30000b34 	.word	0x30000b34
 c001094:	300002bc 	.word	0x300002bc
 c001098:	0c00719c 	.word	0x0c00719c
 c00109c:	0c0071c0 	.word	0x0c0071c0

0c0010a0 <__acle_se_SECURE_print_Buffer>:



//secure service for printing out buffers
CMSE_NS_ENTRY ErrorStatus SECURE_print_Buffer(uint32_t * buf, uint32_t size){
 c0010a0:	b580      	push	{r7, lr}
 c0010a2:	b084      	sub	sp, #16
 c0010a4:	af00      	add	r7, sp, #0
 c0010a6:	6078      	str	r0, [r7, #4]
 c0010a8:	6039      	str	r1, [r7, #0]
	//print the contents of the first transfer
	 printf("Non-secure memory buffer: \n\r");
 c0010aa:	482f      	ldr	r0, [pc, #188]	; (c001168 <__acle_se_SECURE_print_Buffer+0xc8>)
 c0010ac:	f005 f884 	bl	c0061b8 <iprintf>
	 printf("===========================================================================================================\n\r");
 c0010b0:	482e      	ldr	r0, [pc, #184]	; (c00116c <__acle_se_SECURE_print_Buffer+0xcc>)
 c0010b2:	f005 f881 	bl	c0061b8 <iprintf>
	 for(int i = 0; i<size; i++){
 c0010b6:	2300      	movs	r3, #0
 c0010b8:	60fb      	str	r3, [r7, #12]
 c0010ba:	e014      	b.n	c0010e6 <__acle_se_SECURE_print_Buffer+0x46>
		printf("0x%08x\t", buf[i]);
 c0010bc:	68fb      	ldr	r3, [r7, #12]
 c0010be:	009b      	lsls	r3, r3, #2
 c0010c0:	687a      	ldr	r2, [r7, #4]
 c0010c2:	4413      	add	r3, r2
 c0010c4:	681b      	ldr	r3, [r3, #0]
 c0010c6:	4619      	mov	r1, r3
 c0010c8:	4829      	ldr	r0, [pc, #164]	; (c001170 <__acle_se_SECURE_print_Buffer+0xd0>)
 c0010ca:	f005 f875 	bl	c0061b8 <iprintf>
		if((i+1)%4==0){
 c0010ce:	68fb      	ldr	r3, [r7, #12]
 c0010d0:	3301      	adds	r3, #1
 c0010d2:	f003 0303 	and.w	r3, r3, #3
 c0010d6:	2b00      	cmp	r3, #0
 c0010d8:	d102      	bne.n	c0010e0 <__acle_se_SECURE_print_Buffer+0x40>
			printf("\n\r");
 c0010da:	4826      	ldr	r0, [pc, #152]	; (c001174 <__acle_se_SECURE_print_Buffer+0xd4>)
 c0010dc:	f005 f86c 	bl	c0061b8 <iprintf>
	 for(int i = 0; i<size; i++){
 c0010e0:	68fb      	ldr	r3, [r7, #12]
 c0010e2:	3301      	adds	r3, #1
 c0010e4:	60fb      	str	r3, [r7, #12]
 c0010e6:	68fb      	ldr	r3, [r7, #12]
 c0010e8:	683a      	ldr	r2, [r7, #0]
 c0010ea:	429a      	cmp	r2, r3
 c0010ec:	d8e6      	bhi.n	c0010bc <__acle_se_SECURE_print_Buffer+0x1c>
		}
	 }
	 printf("\n\r");
 c0010ee:	4821      	ldr	r0, [pc, #132]	; (c001174 <__acle_se_SECURE_print_Buffer+0xd4>)
 c0010f0:	f005 f862 	bl	c0061b8 <iprintf>
	 return SUCCESS;
 c0010f4:	2300      	movs	r3, #0
}
 c0010f6:	4618      	mov	r0, r3
 c0010f8:	3710      	adds	r7, #16
 c0010fa:	46bd      	mov	sp, r7
 c0010fc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001100:	4671      	mov	r1, lr
 c001102:	4672      	mov	r2, lr
 c001104:	4673      	mov	r3, lr
 c001106:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00110a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c00110e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001112:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001116:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00111a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c00111e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001122:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001126:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00112a:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00112e:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001132:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001136:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00113a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00113e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001142:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001146:	f38e 8c00 	msr	CPSR_fs, lr
 c00114a:	b410      	push	{r4}
 c00114c:	eef1 ca10 	vmrs	ip, fpscr
 c001150:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001154:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001158:	ea0c 0c04 	and.w	ip, ip, r4
 c00115c:	eee1 ca10 	vmsr	fpscr, ip
 c001160:	bc10      	pop	{r4}
 c001162:	46f4      	mov	ip, lr
 c001164:	4774      	bxns	lr
 c001166:	bf00      	nop
 c001168:	0c007214 	.word	0x0c007214
 c00116c:	0c007234 	.word	0x0c007234
 c001170:	0c0072a4 	.word	0x0c0072a4
 c001174:	0c0072ac 	.word	0x0c0072ac

0c001178 <__acle_se_SECURE_print_Log>:


//secure service for logging messages
CMSE_NS_ENTRY void SECURE_print_Log(char* string){
 c001178:	b580      	push	{r7, lr}
 c00117a:	b082      	sub	sp, #8
 c00117c:	af00      	add	r7, sp, #0
 c00117e:	6078      	str	r0, [r7, #4]
	printf(string);
 c001180:	6878      	ldr	r0, [r7, #4]
 c001182:	f005 f819 	bl	c0061b8 <iprintf>
}
 c001186:	bf00      	nop
 c001188:	3708      	adds	r7, #8
 c00118a:	46bd      	mov	sp, r7
 c00118c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001190:	4670      	mov	r0, lr
 c001192:	4671      	mov	r1, lr
 c001194:	4672      	mov	r2, lr
 c001196:	4673      	mov	r3, lr
 c001198:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00119c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0011a0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0011a4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0011a8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0011ac:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0011b0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0011b4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0011b8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0011bc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0011c0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0011c4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0011c8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0011cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0011d0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0011d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0011d8:	f38e 8c00 	msr	CPSR_fs, lr
 c0011dc:	b410      	push	{r4}
 c0011de:	eef1 ca10 	vmrs	ip, fpscr
 c0011e2:	f64f 7460 	movw	r4, #65376	; 0xff60
 c0011e6:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c0011ea:	ea0c 0c04 	and.w	ip, ip, r4
 c0011ee:	eee1 ca10 	vmsr	fpscr, ip
 c0011f2:	bc10      	pop	{r4}
 c0011f4:	46f4      	mov	ip, lr
 c0011f6:	4774      	bxns	lr

0c0011f8 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0011f8:	b480      	push	{r7}
 c0011fa:	b083      	sub	sp, #12
 c0011fc:	af00      	add	r7, sp, #0
 c0011fe:	4603      	mov	r3, r0
 c001200:	6039      	str	r1, [r7, #0]
 c001202:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c001204:	683b      	ldr	r3, [r7, #0]
 c001206:	2b00      	cmp	r3, #0
 c001208:	d00d      	beq.n	c001226 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c00120a:	79fb      	ldrb	r3, [r7, #7]
 c00120c:	2b00      	cmp	r3, #0
 c00120e:	d002      	beq.n	c001216 <__acle_se_SECURE_RegisterCallback+0x1e>
 c001210:	2b01      	cmp	r3, #1
 c001212:	d004      	beq.n	c00121e <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c001214:	e008      	b.n	c001228 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c001216:	4a21      	ldr	r2, [pc, #132]	; (c00129c <__acle_se_SECURE_RegisterCallback+0xa4>)
 c001218:	683b      	ldr	r3, [r7, #0]
 c00121a:	6013      	str	r3, [r2, #0]
        break;
 c00121c:	e004      	b.n	c001228 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c00121e:	4a20      	ldr	r2, [pc, #128]	; (c0012a0 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c001220:	683b      	ldr	r3, [r7, #0]
 c001222:	6013      	str	r3, [r2, #0]
        break;
 c001224:	e000      	b.n	c001228 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c001226:	bf00      	nop
}
 c001228:	bf00      	nop
 c00122a:	370c      	adds	r7, #12
 c00122c:	46bd      	mov	sp, r7
 c00122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001232:	4670      	mov	r0, lr
 c001234:	4671      	mov	r1, lr
 c001236:	4672      	mov	r2, lr
 c001238:	4673      	mov	r3, lr
 c00123a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00123e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001242:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001246:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00124a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00124e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001252:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001256:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00125a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00125e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001262:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001266:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00126a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00126e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001276:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00127a:	f38e 8c00 	msr	CPSR_fs, lr
 c00127e:	b410      	push	{r4}
 c001280:	eef1 ca10 	vmrs	ip, fpscr
 c001284:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001288:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00128c:	ea0c 0c04 	and.w	ip, ip, r4
 c001290:	eee1 ca10 	vmsr	fpscr, ip
 c001294:	bc10      	pop	{r4}
 c001296:	46f4      	mov	ip, lr
 c001298:	4774      	bxns	lr
 c00129a:	bf00      	nop
 c00129c:	30000b28 	.word	0x30000b28
 c0012a0:	30000b2c 	.word	0x30000b2c

0c0012a4 <__acle_se_SECURE_DATA_Last_Buffer_Compare>:



//used in non-secure environment to check the secure memory buffer for successful transfer.
CMSE_NS_ENTRY ErrorStatus SECURE_DATA_Last_Buffer_Compare(uint32_t* addr)
{
 c0012a4:	b580      	push	{r7, lr}
 c0012a6:	b084      	sub	sp, #16
 c0012a8:	af00      	add	r7, sp, #0
 c0012aa:	6078      	str	r0, [r7, #4]
	//used after non-secure to secure mem transfer
  ErrorStatus  ret = SUCCESS;
 c0012ac:	2300      	movs	r3, #0
 c0012ae:	72fb      	strb	r3, [r7, #11]
  //print the contents of the first transfer
	 printf("=====================================================================================================================\n\r");
 c0012b0:	4835      	ldr	r0, [pc, #212]	; (c001388 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xe4>)
 c0012b2:	f004 ff81 	bl	c0061b8 <iprintf>
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c0012b6:	2300      	movs	r3, #0
 c0012b8:	60fb      	str	r3, [r7, #12]
 c0012ba:	e025      	b.n	c001308 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x64>
		 if((i+1)%16==1){
 c0012bc:	68fb      	ldr	r3, [r7, #12]
 c0012be:	3301      	adds	r3, #1
 c0012c0:	425a      	negs	r2, r3
 c0012c2:	f003 030f 	and.w	r3, r3, #15
 c0012c6:	f002 020f 	and.w	r2, r2, #15
 c0012ca:	bf58      	it	pl
 c0012cc:	4253      	negpl	r3, r2
 c0012ce:	2b01      	cmp	r3, #1
 c0012d0:	d103      	bne.n	c0012da <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x36>
			 printf("%08p|\t", addr);
 c0012d2:	6879      	ldr	r1, [r7, #4]
 c0012d4:	482d      	ldr	r0, [pc, #180]	; (c00138c <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xe8>)
 c0012d6:	f004 ff6f 	bl	c0061b8 <iprintf>
		 }
		printf("0x%02x\t", SEC_Mem_Buffer[i]);
 c0012da:	4a2d      	ldr	r2, [pc, #180]	; (c001390 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xec>)
 c0012dc:	68fb      	ldr	r3, [r7, #12]
 c0012de:	4413      	add	r3, r2
 c0012e0:	781b      	ldrb	r3, [r3, #0]
 c0012e2:	4619      	mov	r1, r3
 c0012e4:	482b      	ldr	r0, [pc, #172]	; (c001394 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf0>)
 c0012e6:	f004 ff67 	bl	c0061b8 <iprintf>
		if((i+1)%16==0){
 c0012ea:	68fb      	ldr	r3, [r7, #12]
 c0012ec:	3301      	adds	r3, #1
 c0012ee:	f003 030f 	and.w	r3, r3, #15
 c0012f2:	2b00      	cmp	r3, #0
 c0012f4:	d102      	bne.n	c0012fc <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x58>
			printf("\n\r");
 c0012f6:	4828      	ldr	r0, [pc, #160]	; (c001398 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf4>)
 c0012f8:	f004 ff5e 	bl	c0061b8 <iprintf>
		}
		addr+=1;
 c0012fc:	687b      	ldr	r3, [r7, #4]
 c0012fe:	3304      	adds	r3, #4
 c001300:	607b      	str	r3, [r7, #4]
	 for(int i = 0; i<BUFFER_SIZE; i++){
 c001302:	68fb      	ldr	r3, [r7, #12]
 c001304:	3301      	adds	r3, #1
 c001306:	60fb      	str	r3, [r7, #12]
 c001308:	68fb      	ldr	r3, [r7, #12]
 c00130a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00130e:	d3d5      	bcc.n	c0012bc <__acle_se_SECURE_DATA_Last_Buffer_Compare+0x18>
	 }
	 printf("\n\r");
 c001310:	4821      	ldr	r0, [pc, #132]	; (c001398 <__acle_se_SECURE_DATA_Last_Buffer_Compare+0xf4>)
 c001312:	f004 ff51 	bl	c0061b8 <iprintf>


  return ret;
 c001316:	7afb      	ldrb	r3, [r7, #11]
}
 c001318:	4618      	mov	r0, r3
 c00131a:	3710      	adds	r7, #16
 c00131c:	46bd      	mov	sp, r7
 c00131e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001322:	4671      	mov	r1, lr
 c001324:	4672      	mov	r2, lr
 c001326:	4673      	mov	r3, lr
 c001328:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00132c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001330:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001334:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001338:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00133c:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001340:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001344:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001348:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00134c:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001350:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001354:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001358:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00135c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001360:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001364:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001368:	f38e 8c00 	msr	CPSR_fs, lr
 c00136c:	b410      	push	{r4}
 c00136e:	eef1 ca10 	vmrs	ip, fpscr
 c001372:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001376:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c00137a:	ea0c 0c04 	and.w	ip, ip, r4
 c00137e:	eee1 ca10 	vmsr	fpscr, ip
 c001382:	bc10      	pop	{r4}
 c001384:	46f4      	mov	ip, lr
 c001386:	4774      	bxns	lr
 c001388:	0c0072b0 	.word	0x0c0072b0
 c00138c:	0c007328 	.word	0x0c007328
 c001390:	30000328 	.word	0x30000328
 c001394:	0c007330 	.word	0x0c007330
 c001398:	0c0072ac 	.word	0x0c0072ac

0c00139c <NonSecureToSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void NonSecureToSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c00139c:	b590      	push	{r4, r7, lr}
 c00139e:	b085      	sub	sp, #20
 c0013a0:	af00      	add	r7, sp, #0
 c0013a2:	6078      	str	r0, [r7, #4]
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pNonSecureToSecureTransferCompleteCallback != (void *)NULL)
 c0013a4:	4b1c      	ldr	r3, [pc, #112]	; (c001418 <NonSecureToSecureTransferComplete+0x7c>)
 c0013a6:	681b      	ldr	r3, [r3, #0]
 c0013a8:	2b00      	cmp	r3, #0
 c0013aa:	d02f      	beq.n	c00140c <NonSecureToSecureTransferComplete+0x70>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pNonSecureToSecureTransferCompleteCallback);
 c0013ac:	4b1a      	ldr	r3, [pc, #104]	; (c001418 <NonSecureToSecureTransferComplete+0x7c>)
 c0013ae:	681b      	ldr	r3, [r3, #0]
 c0013b0:	f023 0301 	bic.w	r3, r3, #1
 c0013b4:	60fb      	str	r3, [r7, #12]

   callback_NS();
 c0013b6:	68fb      	ldr	r3, [r7, #12]
 c0013b8:	461c      	mov	r4, r3
 c0013ba:	0864      	lsrs	r4, r4, #1
 c0013bc:	0064      	lsls	r4, r4, #1
 c0013be:	4620      	mov	r0, r4
 c0013c0:	4621      	mov	r1, r4
 c0013c2:	4622      	mov	r2, r4
 c0013c4:	4623      	mov	r3, r4
 c0013c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0013ca:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0013ce:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0013d2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0013d6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0013da:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0013de:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0013e2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0013e6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0013ea:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0013ee:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0013f2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0013f6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0013fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0013fe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001402:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001406:	f7fe ff89 	bl	c00031c <__gnu_cmse_nonsecure_call>
  }
  else
  {
    Error_Handler();  /* Something went wrong */
  }
}
 c00140a:	e001      	b.n	c001410 <NonSecureToSecureTransferComplete+0x74>
    Error_Handler();  /* Something went wrong */
 c00140c:	f7ff fcac 	bl	c000d68 <Error_Handler>
}
 c001410:	bf00      	nop
 c001412:	3714      	adds	r7, #20
 c001414:	46bd      	mov	sp, r7
 c001416:	bd90      	pop	{r4, r7, pc}
 c001418:	30000b30 	.word	0x30000b30

0c00141c <NonSecureToSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void NonSecureToSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel3)
{
 c00141c:	b580      	push	{r7, lr}
 c00141e:	b082      	sub	sp, #8
 c001420:	af00      	add	r7, sp, #0
 c001422:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c001424:	f7ff fca0 	bl	c000d68 <Error_Handler>
}
 c001428:	bf00      	nop
 c00142a:	3708      	adds	r7, #8
 c00142c:	46bd      	mov	sp, r7
 c00142e:	bd80      	pop	{r7, pc}

0c001430 <NonSecureToNonSecureTransferComplete>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void NonSecureToNonSecureTransferComplete(DMA_HandleTypeDef *hdma_memtomem_dma1_channel2)
{
 c001430:	b590      	push	{r4, r7, lr}
 c001432:	b085      	sub	sp, #20
 c001434:	af00      	add	r7, sp, #0
 c001436:	6078      	str	r0, [r7, #4]
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pNonSecureToNonSecureTransferCompleteCallback != (void *)NULL)
 c001438:	4b1c      	ldr	r3, [pc, #112]	; (c0014ac <NonSecureToNonSecureTransferComplete+0x7c>)
 c00143a:	681b      	ldr	r3, [r3, #0]
 c00143c:	2b00      	cmp	r3, #0
 c00143e:	d02f      	beq.n	c0014a0 <NonSecureToNonSecureTransferComplete+0x70>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pNonSecureToNonSecureTransferCompleteCallback);
 c001440:	4b1a      	ldr	r3, [pc, #104]	; (c0014ac <NonSecureToNonSecureTransferComplete+0x7c>)
 c001442:	681b      	ldr	r3, [r3, #0]
 c001444:	f023 0301 	bic.w	r3, r3, #1
 c001448:	60fb      	str	r3, [r7, #12]

   callback_NS();
 c00144a:	68fb      	ldr	r3, [r7, #12]
 c00144c:	461c      	mov	r4, r3
 c00144e:	0864      	lsrs	r4, r4, #1
 c001450:	0064      	lsls	r4, r4, #1
 c001452:	4620      	mov	r0, r4
 c001454:	4621      	mov	r1, r4
 c001456:	4622      	mov	r2, r4
 c001458:	4623      	mov	r3, r4
 c00145a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c00145e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001462:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001466:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00146a:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c00146e:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001472:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001476:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00147a:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c00147e:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001482:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001486:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00148a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00148e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001492:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001496:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00149a:	f7fe ff3f 	bl	c00031c <__gnu_cmse_nonsecure_call>
  }
  else
  {
    Error_Handler();  /* Something went wrong */
  }
}
 c00149e:	e001      	b.n	c0014a4 <NonSecureToNonSecureTransferComplete+0x74>
    Error_Handler();  /* Something went wrong */
 c0014a0:	f7ff fc62 	bl	c000d68 <Error_Handler>
}
 c0014a4:	bf00      	nop
 c0014a6:	3714      	adds	r7, #20
 c0014a8:	46bd      	mov	sp, r7
 c0014aa:	bd90      	pop	{r4, r7, pc}
 c0014ac:	30000b34 	.word	0x30000b34

0c0014b0 <NonSecureToNonSecureTransferError>:
  * @note   This function is executed when the transfer error interrupt
  *         is generated during DMA transfer
  * @retval None
  */
void NonSecureToNonSecureTransferError(DMA_HandleTypeDef *hdma_memtomem_dma1_channel2)
{
 c0014b0:	b580      	push	{r7, lr}
 c0014b2:	b082      	sub	sp, #8
 c0014b4:	af00      	add	r7, sp, #0
 c0014b6:	6078      	str	r0, [r7, #4]
  /* Error detected by secure application */
  Error_Handler();
 c0014b8:	f7ff fc56 	bl	c000d68 <Error_Handler>
}
 c0014bc:	bf00      	nop
 c0014be:	3708      	adds	r7, #8
 c0014c0:	46bd      	mov	sp, r7
 c0014c2:	bd80      	pop	{r7, pc}

0c0014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c0014c4:	b580      	push	{r7, lr}
 c0014c6:	b084      	sub	sp, #16
 c0014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c0014ca:	4b15      	ldr	r3, [pc, #84]	; (c001520 <HAL_MspInit+0x5c>)
 c0014cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0014ce:	4a14      	ldr	r2, [pc, #80]	; (c001520 <HAL_MspInit+0x5c>)
 c0014d0:	f043 0301 	orr.w	r3, r3, #1
 c0014d4:	6613      	str	r3, [r2, #96]	; 0x60
 c0014d6:	4b12      	ldr	r3, [pc, #72]	; (c001520 <HAL_MspInit+0x5c>)
 c0014d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0014da:	f003 0301 	and.w	r3, r3, #1
 c0014de:	60fb      	str	r3, [r7, #12]
 c0014e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c0014e2:	4b0f      	ldr	r3, [pc, #60]	; (c001520 <HAL_MspInit+0x5c>)
 c0014e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014e6:	4a0e      	ldr	r2, [pc, #56]	; (c001520 <HAL_MspInit+0x5c>)
 c0014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0014ec:	6593      	str	r3, [r2, #88]	; 0x58
 c0014ee:	4b0c      	ldr	r3, [pc, #48]	; (c001520 <HAL_MspInit+0x5c>)
 c0014f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0014f6:	60bb      	str	r3, [r7, #8]
 c0014f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c0014fa:	4b09      	ldr	r3, [pc, #36]	; (c001520 <HAL_MspInit+0x5c>)
 c0014fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0014fe:	4a08      	ldr	r2, [pc, #32]	; (c001520 <HAL_MspInit+0x5c>)
 c001500:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c001504:	6493      	str	r3, [r2, #72]	; 0x48
 c001506:	4b06      	ldr	r3, [pc, #24]	; (c001520 <HAL_MspInit+0x5c>)
 c001508:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00150a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c00150e:	607b      	str	r3, [r7, #4]
 c001510:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c001512:	f001 fd37 	bl	c002f84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c001516:	bf00      	nop
 c001518:	3710      	adds	r7, #16
 c00151a:	46bd      	mov	sp, r7
 c00151c:	bd80      	pop	{r7, pc}
 c00151e:	bf00      	nop
 c001520:	50021000 	.word	0x50021000

0c001524 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c001524:	b580      	push	{r7, lr}
 c001526:	b08c      	sub	sp, #48	; 0x30
 c001528:	af00      	add	r7, sp, #0
 c00152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00152c:	f107 031c 	add.w	r3, r7, #28
 c001530:	2200      	movs	r2, #0
 c001532:	601a      	str	r2, [r3, #0]
 c001534:	605a      	str	r2, [r3, #4]
 c001536:	609a      	str	r2, [r3, #8]
 c001538:	60da      	str	r2, [r3, #12]
 c00153a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 c00153c:	687b      	ldr	r3, [r7, #4]
 c00153e:	681b      	ldr	r3, [r3, #0]
 c001540:	4a85      	ldr	r2, [pc, #532]	; (c001758 <HAL_SPI_MspInit+0x234>)
 c001542:	4293      	cmp	r3, r2
 c001544:	f040 8103 	bne.w	c00174e <HAL_SPI_MspInit+0x22a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 c001548:	4b84      	ldr	r3, [pc, #528]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00154a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00154c:	4a83      	ldr	r2, [pc, #524]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00154e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c001552:	6593      	str	r3, [r2, #88]	; 0x58
 c001554:	4b81      	ldr	r3, [pc, #516]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001556:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001558:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00155c:	61bb      	str	r3, [r7, #24]
 c00155e:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c001560:	4b7e      	ldr	r3, [pc, #504]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001564:	4a7d      	ldr	r2, [pc, #500]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001566:	f043 0308 	orr.w	r3, r3, #8
 c00156a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00156c:	4b7b      	ldr	r3, [pc, #492]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00156e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001570:	f003 0308 	and.w	r3, r3, #8
 c001574:	617b      	str	r3, [r7, #20]
 c001576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 c001578:	4b78      	ldr	r3, [pc, #480]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00157a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00157c:	4a77      	ldr	r2, [pc, #476]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00157e:	f043 0302 	orr.w	r3, r3, #2
 c001582:	64d3      	str	r3, [r2, #76]	; 0x4c
 c001584:	4b75      	ldr	r3, [pc, #468]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001588:	f003 0302 	and.w	r3, r3, #2
 c00158c:	613b      	str	r3, [r7, #16]
 c00158e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c001590:	4b72      	ldr	r3, [pc, #456]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001594:	4a71      	ldr	r2, [pc, #452]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c001596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c00159a:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00159c:	4b6f      	ldr	r3, [pc, #444]	; (c00175c <HAL_SPI_MspInit+0x238>)
 c00159e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0015a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0015a4:	60fb      	str	r3, [r7, #12]
 c0015a6:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 c0015a8:	f001 fcdc 	bl	c002f64 <HAL_PWREx_EnableVddIO2>
    /**SPI3 GPIO Configuration
    PD6     ------> SPI3_MOSI
    PB4 (NJTRST)     ------> SPI3_MISO
    PG9     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 c0015ac:	2340      	movs	r3, #64	; 0x40
 c0015ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0015b0:	2302      	movs	r3, #2
 c0015b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 c0015b4:	2302      	movs	r3, #2
 c0015b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0015b8:	2300      	movs	r3, #0
 c0015ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 c0015bc:	2305      	movs	r3, #5
 c0015be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c0015c0:	f107 031c 	add.w	r3, r7, #28
 c0015c4:	4619      	mov	r1, r3
 c0015c6:	4866      	ldr	r0, [pc, #408]	; (c001760 <HAL_SPI_MspInit+0x23c>)
 c0015c8:	f001 f906 	bl	c0027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 c0015cc:	2310      	movs	r3, #16
 c0015ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0015d0:	2302      	movs	r3, #2
 c0015d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0015d4:	2300      	movs	r3, #0
 c0015d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0015d8:	2300      	movs	r3, #0
 c0015da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c0015dc:	2306      	movs	r3, #6
 c0015de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c0015e0:	f107 031c 	add.w	r3, r7, #28
 c0015e4:	4619      	mov	r1, r3
 c0015e6:	485f      	ldr	r0, [pc, #380]	; (c001764 <HAL_SPI_MspInit+0x240>)
 c0015e8:	f001 f8f6 	bl	c0027d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 c0015ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 c0015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c0015f2:	2302      	movs	r3, #2
 c0015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c0015f6:	2300      	movs	r3, #0
 c0015f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c0015fa:	2300      	movs	r3, #0
 c0015fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c0015fe:	2306      	movs	r3, #6
 c001600:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c001602:	f107 031c 	add.w	r3, r7, #28
 c001606:	4619      	mov	r1, r3
 c001608:	4857      	ldr	r0, [pc, #348]	; (c001768 <HAL_SPI_MspInit+0x244>)
 c00160a:	f001 f8e5 	bl	c0027d8 <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel4;
 c00160e:	4b57      	ldr	r3, [pc, #348]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001610:	4a57      	ldr	r2, [pc, #348]	; (c001770 <HAL_SPI_MspInit+0x24c>)
 c001612:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 c001614:	4b55      	ldr	r3, [pc, #340]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001616:	220f      	movs	r2, #15
 c001618:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 c00161a:	4b54      	ldr	r3, [pc, #336]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c00161c:	2200      	movs	r2, #0
 c00161e:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 c001620:	4b52      	ldr	r3, [pc, #328]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001622:	2200      	movs	r2, #0
 c001624:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 c001626:	4b51      	ldr	r3, [pc, #324]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001628:	2280      	movs	r2, #128	; 0x80
 c00162a:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c00162c:	4b4f      	ldr	r3, [pc, #316]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c00162e:	2200      	movs	r2, #0
 c001630:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c001632:	4b4e      	ldr	r3, [pc, #312]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001634:	2200      	movs	r2, #0
 c001636:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 c001638:	4b4c      	ldr	r3, [pc, #304]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c00163a:	2200      	movs	r2, #0
 c00163c:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 c00163e:	4b4b      	ldr	r3, [pc, #300]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001640:	2200      	movs	r2, #0
 c001642:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 c001644:	4849      	ldr	r0, [pc, #292]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001646:	f000 fd27 	bl	c002098 <HAL_DMA_Init>
 c00164a:	4603      	mov	r3, r0
 c00164c:	2b00      	cmp	r3, #0
 c00164e:	d001      	beq.n	c001654 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 c001650:	f7ff fb8a 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c001654:	2110      	movs	r1, #16
 c001656:	4845      	ldr	r0, [pc, #276]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001658:	f000 ff96 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c00165c:	4603      	mov	r3, r0
 c00165e:	2b00      	cmp	r3, #0
 c001660:	d001      	beq.n	c001666 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 c001662:	f7ff fb81 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SEC) != HAL_OK)
 c001666:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c00166a:	4840      	ldr	r0, [pc, #256]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c00166c:	f000 ff8c 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001670:	4603      	mov	r3, r0
 c001672:	2b00      	cmp	r3, #0
 c001674:	d001      	beq.n	c00167a <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 c001676:	f7ff fb77 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c00167a:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c00167e:	483b      	ldr	r0, [pc, #236]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001680:	f000 ff82 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001684:	4603      	mov	r3, r0
 c001686:	2b00      	cmp	r3, #0
 c001688:	d001      	beq.n	c00168e <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 c00168a:	f7ff fb6d 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c00168e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001692:	4836      	ldr	r0, [pc, #216]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c001694:	f000 ff78 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001698:	4603      	mov	r3, r0
 c00169a:	2b00      	cmp	r3, #0
 c00169c:	d001      	beq.n	c0016a2 <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 c00169e:	f7ff fb63 	bl	c000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 c0016a2:	687b      	ldr	r3, [r7, #4]
 c0016a4:	4a31      	ldr	r2, [pc, #196]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c0016a6:	659a      	str	r2, [r3, #88]	; 0x58
 c0016a8:	4a30      	ldr	r2, [pc, #192]	; (c00176c <HAL_SPI_MspInit+0x248>)
 c0016aa:	687b      	ldr	r3, [r7, #4]
 c0016ac:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel3;
 c0016ae:	4b31      	ldr	r3, [pc, #196]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016b0:	4a31      	ldr	r2, [pc, #196]	; (c001778 <HAL_SPI_MspInit+0x254>)
 c0016b2:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 c0016b4:	4b2f      	ldr	r3, [pc, #188]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016b6:	2210      	movs	r2, #16
 c0016b8:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 c0016ba:	4b2e      	ldr	r3, [pc, #184]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016bc:	2210      	movs	r2, #16
 c0016be:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 c0016c0:	4b2c      	ldr	r3, [pc, #176]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016c2:	2200      	movs	r2, #0
 c0016c4:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 c0016c6:	4b2b      	ldr	r3, [pc, #172]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016c8:	2280      	movs	r2, #128	; 0x80
 c0016ca:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c0016cc:	4b29      	ldr	r3, [pc, #164]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016ce:	2200      	movs	r2, #0
 c0016d0:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c0016d2:	4b28      	ldr	r3, [pc, #160]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016d4:	2200      	movs	r2, #0
 c0016d6:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 c0016d8:	4b26      	ldr	r3, [pc, #152]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016da:	2200      	movs	r2, #0
 c0016dc:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 c0016de:	4b25      	ldr	r3, [pc, #148]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016e0:	2200      	movs	r2, #0
 c0016e2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 c0016e4:	4823      	ldr	r0, [pc, #140]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016e6:	f000 fcd7 	bl	c002098 <HAL_DMA_Init>
 c0016ea:	4603      	mov	r3, r0
 c0016ec:	2b00      	cmp	r3, #0
 c0016ee:	d001      	beq.n	c0016f4 <HAL_SPI_MspInit+0x1d0>
    {
      Error_Handler();
 c0016f0:	f7ff fb3a 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c0016f4:	2110      	movs	r1, #16
 c0016f6:	481f      	ldr	r0, [pc, #124]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c0016f8:	f000 ff46 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c0016fc:	4603      	mov	r3, r0
 c0016fe:	2b00      	cmp	r3, #0
 c001700:	d001      	beq.n	c001706 <HAL_SPI_MspInit+0x1e2>
    {
      Error_Handler();
 c001702:	f7ff fb31 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SEC) != HAL_OK)
 c001706:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c00170a:	481a      	ldr	r0, [pc, #104]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c00170c:	f000 ff3c 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001710:	4603      	mov	r3, r0
 c001712:	2b00      	cmp	r3, #0
 c001714:	d001      	beq.n	c00171a <HAL_SPI_MspInit+0x1f6>
    {
      Error_Handler();
 c001716:	f7ff fb27 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c00171a:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c00171e:	4815      	ldr	r0, [pc, #84]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c001720:	f000 ff32 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001724:	4603      	mov	r3, r0
 c001726:	2b00      	cmp	r3, #0
 c001728:	d001      	beq.n	c00172e <HAL_SPI_MspInit+0x20a>
    {
      Error_Handler();
 c00172a:	f7ff fb1d 	bl	c000d68 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c00172e:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c001732:	4810      	ldr	r0, [pc, #64]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c001734:	f000 ff28 	bl	c002588 <HAL_DMA_ConfigChannelAttributes>
 c001738:	4603      	mov	r3, r0
 c00173a:	2b00      	cmp	r3, #0
 c00173c:	d001      	beq.n	c001742 <HAL_SPI_MspInit+0x21e>
    {
      Error_Handler();
 c00173e:	f7ff fb13 	bl	c000d68 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 c001742:	687b      	ldr	r3, [r7, #4]
 c001744:	4a0b      	ldr	r2, [pc, #44]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c001746:	655a      	str	r2, [r3, #84]	; 0x54
 c001748:	4a0a      	ldr	r2, [pc, #40]	; (c001774 <HAL_SPI_MspInit+0x250>)
 c00174a:	687b      	ldr	r3, [r7, #4]
 c00174c:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 c00174e:	bf00      	nop
 c001750:	3730      	adds	r7, #48	; 0x30
 c001752:	46bd      	mov	sp, r7
 c001754:	bd80      	pop	{r7, pc}
 c001756:	bf00      	nop
 c001758:	50003c00 	.word	0x50003c00
 c00175c:	50021000 	.word	0x50021000
 c001760:	52020c00 	.word	0x52020c00
 c001764:	52020400 	.word	0x52020400
 c001768:	52021800 	.word	0x52021800
 c00176c:	300000f0 	.word	0x300000f0
 c001770:	50020044 	.word	0x50020044
 c001774:	30000158 	.word	0x30000158
 c001778:	50020030 	.word	0x50020030

0c00177c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c00177c:	b580      	push	{r7, lr}
 c00177e:	b0ae      	sub	sp, #184	; 0xb8
 c001780:	af00      	add	r7, sp, #0
 c001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c001784:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c001788:	2200      	movs	r2, #0
 c00178a:	601a      	str	r2, [r3, #0]
 c00178c:	605a      	str	r2, [r3, #4]
 c00178e:	609a      	str	r2, [r3, #8]
 c001790:	60da      	str	r2, [r3, #12]
 c001792:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c001794:	f107 0310 	add.w	r3, r7, #16
 c001798:	2294      	movs	r2, #148	; 0x94
 c00179a:	2100      	movs	r1, #0
 c00179c:	4618      	mov	r0, r3
 c00179e:	f004 fd03 	bl	c0061a8 <memset>
  if(huart->Instance==USART1)
 c0017a2:	687b      	ldr	r3, [r7, #4]
 c0017a4:	681b      	ldr	r3, [r3, #0]
 c0017a6:	4a21      	ldr	r2, [pc, #132]	; (c00182c <HAL_UART_MspInit+0xb0>)
 c0017a8:	4293      	cmp	r3, r2
 c0017aa:	d13b      	bne.n	c001824 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c0017ac:	2301      	movs	r3, #1
 c0017ae:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c0017b0:	2300      	movs	r3, #0
 c0017b2:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c0017b4:	f107 0310 	add.w	r3, r7, #16
 c0017b8:	4618      	mov	r0, r3
 c0017ba:	f002 fbd1 	bl	c003f60 <HAL_RCCEx_PeriphCLKConfig>
 c0017be:	4603      	mov	r3, r0
 c0017c0:	2b00      	cmp	r3, #0
 c0017c2:	d001      	beq.n	c0017c8 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c0017c4:	f7ff fad0 	bl	c000d68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c0017c8:	4b19      	ldr	r3, [pc, #100]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0017cc:	4a18      	ldr	r2, [pc, #96]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0017d2:	6613      	str	r3, [r2, #96]	; 0x60
 c0017d4:	4b16      	ldr	r3, [pc, #88]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017d6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0017d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c0017dc:	60fb      	str	r3, [r7, #12]
 c0017de:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c0017e0:	4b13      	ldr	r3, [pc, #76]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0017e4:	4a12      	ldr	r2, [pc, #72]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017e6:	f043 0301 	orr.w	r3, r3, #1
 c0017ea:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0017ec:	4b10      	ldr	r3, [pc, #64]	; (c001830 <HAL_UART_MspInit+0xb4>)
 c0017ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0017f0:	f003 0301 	and.w	r3, r3, #1
 c0017f4:	60bb      	str	r3, [r7, #8]
 c0017f6:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c0017f8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c0017fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c001800:	2302      	movs	r3, #2
 c001802:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c001806:	2300      	movs	r3, #0
 c001808:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c00180c:	2300      	movs	r3, #0
 c00180e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c001812:	2307      	movs	r3, #7
 c001814:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c001818:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c00181c:	4619      	mov	r1, r3
 c00181e:	4805      	ldr	r0, [pc, #20]	; (c001834 <HAL_UART_MspInit+0xb8>)
 c001820:	f000 ffda 	bl	c0027d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c001824:	bf00      	nop
 c001826:	37b8      	adds	r7, #184	; 0xb8
 c001828:	46bd      	mov	sp, r7
 c00182a:	bd80      	pop	{r7, pc}
 c00182c:	50013800 	.word	0x50013800
 c001830:	50021000 	.word	0x50021000
 c001834:	52020000 	.word	0x52020000

0c001838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c001838:	b480      	push	{r7}
 c00183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c00183c:	e7fe      	b.n	c00183c <NMI_Handler+0x4>

0c00183e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c00183e:	b480      	push	{r7}
 c001840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c001842:	e7fe      	b.n	c001842 <HardFault_Handler+0x4>

0c001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c001844:	b480      	push	{r7}
 c001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c001848:	e7fe      	b.n	c001848 <MemManage_Handler+0x4>

0c00184a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c00184a:	b480      	push	{r7}
 c00184c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c00184e:	e7fe      	b.n	c00184e <BusFault_Handler+0x4>

0c001850 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c001850:	b480      	push	{r7}
 c001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c001854:	e7fe      	b.n	c001854 <UsageFault_Handler+0x4>

0c001856 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c001856:	b480      	push	{r7}
 c001858:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c00185a:	e7fe      	b.n	c00185a <SecureFault_Handler+0x4>

0c00185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c00185c:	b480      	push	{r7}
 c00185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c001860:	bf00      	nop
 c001862:	46bd      	mov	sp, r7
 c001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001868:	4770      	bx	lr

0c00186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c00186a:	b480      	push	{r7}
 c00186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c00186e:	bf00      	nop
 c001870:	46bd      	mov	sp, r7
 c001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001876:	4770      	bx	lr

0c001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c001878:	b480      	push	{r7}
 c00187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c00187c:	bf00      	nop
 c00187e:	46bd      	mov	sp, r7
 c001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001884:	4770      	bx	lr

0c001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c001886:	b580      	push	{r7, lr}
 c001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00188a:	f000 fad5 	bl	c001e38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c00188e:	bf00      	nop
 c001890:	bd80      	pop	{r7, pc}
	...

0c001894 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 c001894:	b580      	push	{r7, lr}
 c001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 c001898:	4802      	ldr	r0, [pc, #8]	; (c0018a4 <DMA1_Channel1_IRQHandler+0x10>)
 c00189a:	f000 fd20 	bl	c0022de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c00189e:	bf00      	nop
 c0018a0:	bd80      	pop	{r7, pc}
 c0018a2:	bf00      	nop
 c0018a4:	30000254 	.word	0x30000254

0c0018a8 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 c0018a8:	b580      	push	{r7, lr}
 c0018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel2);
 c0018ac:	4802      	ldr	r0, [pc, #8]	; (c0018b8 <DMA1_Channel2_IRQHandler+0x10>)
 c0018ae:	f000 fd16 	bl	c0022de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c0018b2:	bf00      	nop
 c0018b4:	bd80      	pop	{r7, pc}
 c0018b6:	bf00      	nop
 c0018b8:	300002bc 	.word	0x300002bc

0c0018bc <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 c0018bc:	b580      	push	{r7, lr}
 c0018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 c0018c0:	4802      	ldr	r0, [pc, #8]	; (c0018cc <DMA1_Channel3_IRQHandler+0x10>)
 c0018c2:	f000 fd0c 	bl	c0022de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 c0018c6:	bf00      	nop
 c0018c8:	bd80      	pop	{r7, pc}
 c0018ca:	bf00      	nop
 c0018cc:	30000158 	.word	0x30000158

0c0018d0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 c0018d0:	b580      	push	{r7, lr}
 c0018d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 c0018d4:	4802      	ldr	r0, [pc, #8]	; (c0018e0 <DMA1_Channel4_IRQHandler+0x10>)
 c0018d6:	f000 fd02 	bl	c0022de <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 c0018da:	bf00      	nop
 c0018dc:	bd80      	pop	{r7, pc}
 c0018de:	bf00      	nop
 c0018e0:	300000f0 	.word	0x300000f0

0c0018e4 <_read>:
 c0018e4:	b580      	push	{r7, lr}
 c0018e6:	b086      	sub	sp, #24
 c0018e8:	af00      	add	r7, sp, #0
 c0018ea:	60f8      	str	r0, [r7, #12]
 c0018ec:	60b9      	str	r1, [r7, #8]
 c0018ee:	607a      	str	r2, [r7, #4]
 c0018f0:	2300      	movs	r3, #0
 c0018f2:	617b      	str	r3, [r7, #20]
 c0018f4:	e00a      	b.n	c00190c <_read+0x28>
 c0018f6:	e000      	b.n	c0018fa <_read+0x16>
 c0018f8:	bf00      	nop
 c0018fa:	4601      	mov	r1, r0
 c0018fc:	68bb      	ldr	r3, [r7, #8]
 c0018fe:	1c5a      	adds	r2, r3, #1
 c001900:	60ba      	str	r2, [r7, #8]
 c001902:	b2ca      	uxtb	r2, r1
 c001904:	701a      	strb	r2, [r3, #0]
 c001906:	697b      	ldr	r3, [r7, #20]
 c001908:	3301      	adds	r3, #1
 c00190a:	617b      	str	r3, [r7, #20]
 c00190c:	697a      	ldr	r2, [r7, #20]
 c00190e:	687b      	ldr	r3, [r7, #4]
 c001910:	429a      	cmp	r2, r3
 c001912:	dbf0      	blt.n	c0018f6 <_read+0x12>
 c001914:	687b      	ldr	r3, [r7, #4]
 c001916:	4618      	mov	r0, r3
 c001918:	3718      	adds	r7, #24
 c00191a:	46bd      	mov	sp, r7
 c00191c:	bd80      	pop	{r7, pc}

0c00191e <_write>:
 c00191e:	b580      	push	{r7, lr}
 c001920:	b086      	sub	sp, #24
 c001922:	af00      	add	r7, sp, #0
 c001924:	60f8      	str	r0, [r7, #12]
 c001926:	60b9      	str	r1, [r7, #8]
 c001928:	607a      	str	r2, [r7, #4]
 c00192a:	2300      	movs	r3, #0
 c00192c:	617b      	str	r3, [r7, #20]
 c00192e:	e009      	b.n	c001944 <_write+0x26>
 c001930:	68bb      	ldr	r3, [r7, #8]
 c001932:	1c5a      	adds	r2, r3, #1
 c001934:	60ba      	str	r2, [r7, #8]
 c001936:	781b      	ldrb	r3, [r3, #0]
 c001938:	4618      	mov	r0, r3
 c00193a:	f7ff fa03 	bl	c000d44 <__io_putchar>
 c00193e:	697b      	ldr	r3, [r7, #20]
 c001940:	3301      	adds	r3, #1
 c001942:	617b      	str	r3, [r7, #20]
 c001944:	697a      	ldr	r2, [r7, #20]
 c001946:	687b      	ldr	r3, [r7, #4]
 c001948:	429a      	cmp	r2, r3
 c00194a:	dbf1      	blt.n	c001930 <_write+0x12>
 c00194c:	687b      	ldr	r3, [r7, #4]
 c00194e:	4618      	mov	r0, r3
 c001950:	3718      	adds	r7, #24
 c001952:	46bd      	mov	sp, r7
 c001954:	bd80      	pop	{r7, pc}

0c001956 <_close>:
 c001956:	b480      	push	{r7}
 c001958:	b083      	sub	sp, #12
 c00195a:	af00      	add	r7, sp, #0
 c00195c:	6078      	str	r0, [r7, #4]
 c00195e:	f04f 33ff 	mov.w	r3, #4294967295
 c001962:	4618      	mov	r0, r3
 c001964:	370c      	adds	r7, #12
 c001966:	46bd      	mov	sp, r7
 c001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00196c:	4770      	bx	lr

0c00196e <_fstat>:
 c00196e:	b480      	push	{r7}
 c001970:	b083      	sub	sp, #12
 c001972:	af00      	add	r7, sp, #0
 c001974:	6078      	str	r0, [r7, #4]
 c001976:	6039      	str	r1, [r7, #0]
 c001978:	683b      	ldr	r3, [r7, #0]
 c00197a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c00197e:	605a      	str	r2, [r3, #4]
 c001980:	2300      	movs	r3, #0
 c001982:	4618      	mov	r0, r3
 c001984:	370c      	adds	r7, #12
 c001986:	46bd      	mov	sp, r7
 c001988:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00198c:	4770      	bx	lr

0c00198e <_isatty>:
 c00198e:	b480      	push	{r7}
 c001990:	b083      	sub	sp, #12
 c001992:	af00      	add	r7, sp, #0
 c001994:	6078      	str	r0, [r7, #4]
 c001996:	2301      	movs	r3, #1
 c001998:	4618      	mov	r0, r3
 c00199a:	370c      	adds	r7, #12
 c00199c:	46bd      	mov	sp, r7
 c00199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019a2:	4770      	bx	lr

0c0019a4 <_lseek>:
 c0019a4:	b480      	push	{r7}
 c0019a6:	b085      	sub	sp, #20
 c0019a8:	af00      	add	r7, sp, #0
 c0019aa:	60f8      	str	r0, [r7, #12]
 c0019ac:	60b9      	str	r1, [r7, #8]
 c0019ae:	607a      	str	r2, [r7, #4]
 c0019b0:	2300      	movs	r3, #0
 c0019b2:	4618      	mov	r0, r3
 c0019b4:	3714      	adds	r7, #20
 c0019b6:	46bd      	mov	sp, r7
 c0019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0019bc:	4770      	bx	lr
	...

0c0019c0 <_sbrk>:
 c0019c0:	b580      	push	{r7, lr}
 c0019c2:	b086      	sub	sp, #24
 c0019c4:	af00      	add	r7, sp, #0
 c0019c6:	6078      	str	r0, [r7, #4]
 c0019c8:	4a14      	ldr	r2, [pc, #80]	; (c001a1c <_sbrk+0x5c>)
 c0019ca:	4b15      	ldr	r3, [pc, #84]	; (c001a20 <_sbrk+0x60>)
 c0019cc:	1ad3      	subs	r3, r2, r3
 c0019ce:	617b      	str	r3, [r7, #20]
 c0019d0:	697b      	ldr	r3, [r7, #20]
 c0019d2:	613b      	str	r3, [r7, #16]
 c0019d4:	4b13      	ldr	r3, [pc, #76]	; (c001a24 <_sbrk+0x64>)
 c0019d6:	681b      	ldr	r3, [r3, #0]
 c0019d8:	2b00      	cmp	r3, #0
 c0019da:	d102      	bne.n	c0019e2 <_sbrk+0x22>
 c0019dc:	4b11      	ldr	r3, [pc, #68]	; (c001a24 <_sbrk+0x64>)
 c0019de:	4a12      	ldr	r2, [pc, #72]	; (c001a28 <_sbrk+0x68>)
 c0019e0:	601a      	str	r2, [r3, #0]
 c0019e2:	4b10      	ldr	r3, [pc, #64]	; (c001a24 <_sbrk+0x64>)
 c0019e4:	681a      	ldr	r2, [r3, #0]
 c0019e6:	687b      	ldr	r3, [r7, #4]
 c0019e8:	4413      	add	r3, r2
 c0019ea:	693a      	ldr	r2, [r7, #16]
 c0019ec:	429a      	cmp	r2, r3
 c0019ee:	d207      	bcs.n	c001a00 <_sbrk+0x40>
 c0019f0:	f004 fbb0 	bl	c006154 <__errno>
 c0019f4:	4603      	mov	r3, r0
 c0019f6:	220c      	movs	r2, #12
 c0019f8:	601a      	str	r2, [r3, #0]
 c0019fa:	f04f 33ff 	mov.w	r3, #4294967295
 c0019fe:	e009      	b.n	c001a14 <_sbrk+0x54>
 c001a00:	4b08      	ldr	r3, [pc, #32]	; (c001a24 <_sbrk+0x64>)
 c001a02:	681b      	ldr	r3, [r3, #0]
 c001a04:	60fb      	str	r3, [r7, #12]
 c001a06:	4b07      	ldr	r3, [pc, #28]	; (c001a24 <_sbrk+0x64>)
 c001a08:	681a      	ldr	r2, [r3, #0]
 c001a0a:	687b      	ldr	r3, [r7, #4]
 c001a0c:	4413      	add	r3, r2
 c001a0e:	4a05      	ldr	r2, [pc, #20]	; (c001a24 <_sbrk+0x64>)
 c001a10:	6013      	str	r3, [r2, #0]
 c001a12:	68fb      	ldr	r3, [r7, #12]
 c001a14:	4618      	mov	r0, r3
 c001a16:	3718      	adds	r7, #24
 c001a18:	46bd      	mov	sp, r7
 c001a1a:	bd80      	pop	{r7, pc}
 c001a1c:	30018000 	.word	0x30018000
 c001a20:	00000400 	.word	0x00000400
 c001a24:	30000b38 	.word	0x30000b38
 c001a28:	30000b50 	.word	0x30000b50

0c001a2c <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001a2c:	b480      	push	{r7}
 c001a2e:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001a30:	4b2f      	ldr	r3, [pc, #188]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a32:	2200      	movs	r2, #0
 c001a34:	609a      	str	r2, [r3, #8]
 c001a36:	4b2e      	ldr	r3, [pc, #184]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a38:	4a2e      	ldr	r2, [pc, #184]	; (c001af4 <TZ_SAU_Setup+0xc8>)
 c001a3a:	60da      	str	r2, [r3, #12]
 c001a3c:	4b2c      	ldr	r3, [pc, #176]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a3e:	4a2e      	ldr	r2, [pc, #184]	; (c001af8 <TZ_SAU_Setup+0xcc>)
 c001a40:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001a42:	4b2b      	ldr	r3, [pc, #172]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a44:	2201      	movs	r2, #1
 c001a46:	609a      	str	r2, [r3, #8]
 c001a48:	4b29      	ldr	r3, [pc, #164]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a4a:	4a2c      	ldr	r2, [pc, #176]	; (c001afc <TZ_SAU_Setup+0xd0>)
 c001a4c:	60da      	str	r2, [r3, #12]
 c001a4e:	4b28      	ldr	r3, [pc, #160]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a50:	4a2b      	ldr	r2, [pc, #172]	; (c001b00 <TZ_SAU_Setup+0xd4>)
 c001a52:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001a54:	4b26      	ldr	r3, [pc, #152]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a56:	2202      	movs	r2, #2
 c001a58:	609a      	str	r2, [r3, #8]
 c001a5a:	4b25      	ldr	r3, [pc, #148]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a5c:	4a29      	ldr	r2, [pc, #164]	; (c001b04 <TZ_SAU_Setup+0xd8>)
 c001a5e:	60da      	str	r2, [r3, #12]
 c001a60:	4b23      	ldr	r3, [pc, #140]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a62:	4a29      	ldr	r2, [pc, #164]	; (c001b08 <TZ_SAU_Setup+0xdc>)
 c001a64:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c001a66:	4b22      	ldr	r3, [pc, #136]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a68:	2203      	movs	r2, #3
 c001a6a:	609a      	str	r2, [r3, #8]
 c001a6c:	4b20      	ldr	r3, [pc, #128]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a6e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001a72:	60da      	str	r2, [r3, #12]
 c001a74:	4b1e      	ldr	r3, [pc, #120]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a76:	4a25      	ldr	r2, [pc, #148]	; (c001b0c <TZ_SAU_Setup+0xe0>)
 c001a78:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c001a7a:	4b1d      	ldr	r3, [pc, #116]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a7c:	2204      	movs	r2, #4
 c001a7e:	609a      	str	r2, [r3, #8]
 c001a80:	4b1b      	ldr	r3, [pc, #108]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a82:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c001a86:	60da      	str	r2, [r3, #12]
 c001a88:	4b19      	ldr	r3, [pc, #100]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a8a:	4a21      	ldr	r2, [pc, #132]	; (c001b10 <TZ_SAU_Setup+0xe4>)
 c001a8c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001a8e:	4b18      	ldr	r3, [pc, #96]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a90:	2205      	movs	r2, #5
 c001a92:	609a      	str	r2, [r3, #8]
 c001a94:	4b16      	ldr	r3, [pc, #88]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a96:	4a1f      	ldr	r2, [pc, #124]	; (c001b14 <TZ_SAU_Setup+0xe8>)
 c001a98:	60da      	str	r2, [r3, #12]
 c001a9a:	4b15      	ldr	r3, [pc, #84]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001a9c:	4a1e      	ldr	r2, [pc, #120]	; (c001b18 <TZ_SAU_Setup+0xec>)
 c001a9e:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c001aa0:	4b13      	ldr	r3, [pc, #76]	; (c001af0 <TZ_SAU_Setup+0xc4>)
 c001aa2:	2201      	movs	r2, #1
 c001aa4:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c001aa6:	4b1d      	ldr	r3, [pc, #116]	; (c001b1c <TZ_SAU_Setup+0xf0>)
 c001aa8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c001aac:	4a1b      	ldr	r2, [pc, #108]	; (c001b1c <TZ_SAU_Setup+0xf0>)
 c001aae:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c001ab2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001ab6:	4b1a      	ldr	r3, [pc, #104]	; (c001b20 <TZ_SAU_Setup+0xf4>)
 c001ab8:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c001aba:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001abe:	4a18      	ldr	r2, [pc, #96]	; (c001b20 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c001ac0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c001ac4:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c001ac6:	4b17      	ldr	r3, [pc, #92]	; (c001b24 <TZ_SAU_Setup+0xf8>)
 c001ac8:	2200      	movs	r2, #0
 c001aca:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c001ace:	4b15      	ldr	r3, [pc, #84]	; (c001b24 <TZ_SAU_Setup+0xf8>)
 c001ad0:	2200      	movs	r2, #0
 c001ad2:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c001ad6:	4b13      	ldr	r3, [pc, #76]	; (c001b24 <TZ_SAU_Setup+0xf8>)
 c001ad8:	2200      	movs	r2, #0
 c001ada:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c001ade:	4b11      	ldr	r3, [pc, #68]	; (c001b24 <TZ_SAU_Setup+0xf8>)
 c001ae0:	2200      	movs	r2, #0
 c001ae2:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c001ae6:	bf00      	nop
 c001ae8:	46bd      	mov	sp, r7
 c001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001aee:	4770      	bx	lr
 c001af0:	e000edd0 	.word	0xe000edd0
 c001af4:	0c03e000 	.word	0x0c03e000
 c001af8:	0c03ffe3 	.word	0x0c03ffe3
 c001afc:	08040000 	.word	0x08040000
 c001b00:	0807ffe1 	.word	0x0807ffe1
 c001b04:	20018000 	.word	0x20018000
 c001b08:	2003ffe1 	.word	0x2003ffe1
 c001b0c:	4fffffe1 	.word	0x4fffffe1
 c001b10:	9fffffe1 	.word	0x9fffffe1
 c001b14:	0bf90000 	.word	0x0bf90000
 c001b18:	0bfa8fe1 	.word	0x0bfa8fe1
 c001b1c:	e000ed00 	.word	0xe000ed00
 c001b20:	e000ef30 	.word	0xe000ef30
 c001b24:	e000e100 	.word	0xe000e100

0c001b28 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c001b28:	b580      	push	{r7, lr}
 c001b2a:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001b2c:	f7ff ff7e 	bl	c001a2c <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001b30:	4b08      	ldr	r3, [pc, #32]	; (c001b54 <SystemInit+0x2c>)
 c001b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001b36:	4a07      	ldr	r2, [pc, #28]	; (c001b54 <SystemInit+0x2c>)
 c001b38:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001b3c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001b40:	4b05      	ldr	r3, [pc, #20]	; (c001b58 <SystemInit+0x30>)
 c001b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c001b46:	4a04      	ldr	r2, [pc, #16]	; (c001b58 <SystemInit+0x30>)
 c001b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001b50:	bf00      	nop
 c001b52:	bd80      	pop	{r7, pc}
 c001b54:	e000ed00 	.word	0xe000ed00
 c001b58:	e002ed00 	.word	0xe002ed00

0c001b5c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001b5c:	b480      	push	{r7}
 c001b5e:	b087      	sub	sp, #28
 c001b60:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001b62:	4b4f      	ldr	r3, [pc, #316]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001b64:	681b      	ldr	r3, [r3, #0]
 c001b66:	f003 0308 	and.w	r3, r3, #8
 c001b6a:	2b00      	cmp	r3, #0
 c001b6c:	d107      	bne.n	c001b7e <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001b6e:	4b4c      	ldr	r3, [pc, #304]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001b70:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001b74:	0a1b      	lsrs	r3, r3, #8
 c001b76:	f003 030f 	and.w	r3, r3, #15
 c001b7a:	617b      	str	r3, [r7, #20]
 c001b7c:	e005      	b.n	c001b8a <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c001b7e:	4b48      	ldr	r3, [pc, #288]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001b80:	681b      	ldr	r3, [r3, #0]
 c001b82:	091b      	lsrs	r3, r3, #4
 c001b84:	f003 030f 	and.w	r3, r3, #15
 c001b88:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c001b8a:	4a46      	ldr	r2, [pc, #280]	; (c001ca4 <SystemCoreClockUpdate+0x148>)
 c001b8c:	697b      	ldr	r3, [r7, #20]
 c001b8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001b92:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001b94:	4b42      	ldr	r3, [pc, #264]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001b96:	689b      	ldr	r3, [r3, #8]
 c001b98:	f003 030c 	and.w	r3, r3, #12
 c001b9c:	2b0c      	cmp	r3, #12
 c001b9e:	d866      	bhi.n	c001c6e <SystemCoreClockUpdate+0x112>
 c001ba0:	a201      	add	r2, pc, #4	; (adr r2, c001ba8 <SystemCoreClockUpdate+0x4c>)
 c001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c001ba6:	bf00      	nop
 c001ba8:	0c001bdd 	.word	0x0c001bdd
 c001bac:	0c001c6f 	.word	0x0c001c6f
 c001bb0:	0c001c6f 	.word	0x0c001c6f
 c001bb4:	0c001c6f 	.word	0x0c001c6f
 c001bb8:	0c001be5 	.word	0x0c001be5
 c001bbc:	0c001c6f 	.word	0x0c001c6f
 c001bc0:	0c001c6f 	.word	0x0c001c6f
 c001bc4:	0c001c6f 	.word	0x0c001c6f
 c001bc8:	0c001bed 	.word	0x0c001bed
 c001bcc:	0c001c6f 	.word	0x0c001c6f
 c001bd0:	0c001c6f 	.word	0x0c001c6f
 c001bd4:	0c001c6f 	.word	0x0c001c6f
 c001bd8:	0c001bf5 	.word	0x0c001bf5
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c001bdc:	4a32      	ldr	r2, [pc, #200]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001bde:	697b      	ldr	r3, [r7, #20]
 c001be0:	6013      	str	r3, [r2, #0]
      break;
 c001be2:	e048      	b.n	c001c76 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c001be4:	4b30      	ldr	r3, [pc, #192]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001be6:	4a31      	ldr	r2, [pc, #196]	; (c001cac <SystemCoreClockUpdate+0x150>)
 c001be8:	601a      	str	r2, [r3, #0]
      break;
 c001bea:	e044      	b.n	c001c76 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c001bec:	4b2e      	ldr	r3, [pc, #184]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001bee:	4a30      	ldr	r2, [pc, #192]	; (c001cb0 <SystemCoreClockUpdate+0x154>)
 c001bf0:	601a      	str	r2, [r3, #0]
      break;
 c001bf2:	e040      	b.n	c001c76 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c001bf4:	4b2a      	ldr	r3, [pc, #168]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001bf6:	68db      	ldr	r3, [r3, #12]
 c001bf8:	f003 0303 	and.w	r3, r3, #3
 c001bfc:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001bfe:	4b28      	ldr	r3, [pc, #160]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001c00:	68db      	ldr	r3, [r3, #12]
 c001c02:	091b      	lsrs	r3, r3, #4
 c001c04:	f003 030f 	and.w	r3, r3, #15
 c001c08:	3301      	adds	r3, #1
 c001c0a:	60bb      	str	r3, [r7, #8]
 c001c0c:	68fb      	ldr	r3, [r7, #12]
 c001c0e:	2b02      	cmp	r3, #2
 c001c10:	d003      	beq.n	c001c1a <SystemCoreClockUpdate+0xbe>
 c001c12:	68fb      	ldr	r3, [r7, #12]
 c001c14:	2b03      	cmp	r3, #3
 c001c16:	d006      	beq.n	c001c26 <SystemCoreClockUpdate+0xca>
 c001c18:	e00b      	b.n	c001c32 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c001c1a:	4a24      	ldr	r2, [pc, #144]	; (c001cac <SystemCoreClockUpdate+0x150>)
 c001c1c:	68bb      	ldr	r3, [r7, #8]
 c001c1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001c22:	613b      	str	r3, [r7, #16]
          break;
 c001c24:	e00b      	b.n	c001c3e <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c001c26:	4a22      	ldr	r2, [pc, #136]	; (c001cb0 <SystemCoreClockUpdate+0x154>)
 c001c28:	68bb      	ldr	r3, [r7, #8]
 c001c2a:	fbb2 f3f3 	udiv	r3, r2, r3
 c001c2e:	613b      	str	r3, [r7, #16]
          break;
 c001c30:	e005      	b.n	c001c3e <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001c32:	697a      	ldr	r2, [r7, #20]
 c001c34:	68bb      	ldr	r3, [r7, #8]
 c001c36:	fbb2 f3f3 	udiv	r3, r2, r3
 c001c3a:	613b      	str	r3, [r7, #16]
          break;
 c001c3c:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001c3e:	4b18      	ldr	r3, [pc, #96]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001c40:	68db      	ldr	r3, [r3, #12]
 c001c42:	0a1b      	lsrs	r3, r3, #8
 c001c44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c001c48:	693b      	ldr	r3, [r7, #16]
 c001c4a:	fb02 f303 	mul.w	r3, r2, r3
 c001c4e:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001c50:	4b13      	ldr	r3, [pc, #76]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001c52:	68db      	ldr	r3, [r3, #12]
 c001c54:	0e5b      	lsrs	r3, r3, #25
 c001c56:	f003 0303 	and.w	r3, r3, #3
 c001c5a:	3301      	adds	r3, #1
 c001c5c:	005b      	lsls	r3, r3, #1
 c001c5e:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c001c60:	693a      	ldr	r2, [r7, #16]
 c001c62:	687b      	ldr	r3, [r7, #4]
 c001c64:	fbb2 f3f3 	udiv	r3, r2, r3
 c001c68:	4a0f      	ldr	r2, [pc, #60]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001c6a:	6013      	str	r3, [r2, #0]
      break;
 c001c6c:	e003      	b.n	c001c76 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c001c6e:	4a0e      	ldr	r2, [pc, #56]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001c70:	697b      	ldr	r3, [r7, #20]
 c001c72:	6013      	str	r3, [r2, #0]
      break;
 c001c74:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c001c76:	4b0a      	ldr	r3, [pc, #40]	; (c001ca0 <SystemCoreClockUpdate+0x144>)
 c001c78:	689b      	ldr	r3, [r3, #8]
 c001c7a:	091b      	lsrs	r3, r3, #4
 c001c7c:	f003 030f 	and.w	r3, r3, #15
 c001c80:	4a0c      	ldr	r2, [pc, #48]	; (c001cb4 <SystemCoreClockUpdate+0x158>)
 c001c82:	5cd3      	ldrb	r3, [r2, r3]
 c001c84:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c001c86:	4b08      	ldr	r3, [pc, #32]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001c88:	681a      	ldr	r2, [r3, #0]
 c001c8a:	683b      	ldr	r3, [r7, #0]
 c001c8c:	fa22 f303 	lsr.w	r3, r2, r3
 c001c90:	4a05      	ldr	r2, [pc, #20]	; (c001ca8 <SystemCoreClockUpdate+0x14c>)
 c001c92:	6013      	str	r3, [r2, #0]
}
 c001c94:	bf00      	nop
 c001c96:	371c      	adds	r7, #28
 c001c98:	46bd      	mov	sp, r7
 c001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001c9e:	4770      	bx	lr
 c001ca0:	50021000 	.word	0x50021000
 c001ca4:	0c007350 	.word	0x0c007350
 c001ca8:	30000000 	.word	0x30000000
 c001cac:	00f42400 	.word	0x00f42400
 c001cb0:	007a1200 	.word	0x007a1200
 c001cb4:	0c007338 	.word	0x0c007338

0c001cb8 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c001cb8:	b580      	push	{r7, lr}
 c001cba:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c001cbc:	f7ff ff4e 	bl	c001b5c <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c001cc0:	4b1c      	ldr	r3, [pc, #112]	; (c001d34 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c001cc2:	681b      	ldr	r3, [r3, #0]
}
 c001cc4:	4618      	mov	r0, r3
 c001cc6:	46bd      	mov	sp, r7
 c001cc8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c001ccc:	4671      	mov	r1, lr
 c001cce:	4672      	mov	r2, lr
 c001cd0:	4673      	mov	r3, lr
 c001cd2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c001cd6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c001cda:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c001cde:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c001ce2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c001ce6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c001cea:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c001cee:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c001cf2:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c001cf6:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c001cfa:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001cfe:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001d02:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c001d06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c001d0a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001d0e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001d12:	f38e 8c00 	msr	CPSR_fs, lr
 c001d16:	b410      	push	{r4}
 c001d18:	eef1 ca10 	vmrs	ip, fpscr
 c001d1c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001d20:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001d24:	ea0c 0c04 	and.w	ip, ip, r4
 c001d28:	eee1 ca10 	vmsr	fpscr, ip
 c001d2c:	bc10      	pop	{r4}
 c001d2e:	46f4      	mov	ip, lr
 c001d30:	4774      	bxns	lr
 c001d32:	bf00      	nop
 c001d34:	30000000 	.word	0x30000000

0c001d38 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c001d38:	f8df d034 	ldr.w	sp, [pc, #52]	; c001d70 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001d3c:	f7ff fef4 	bl	c001b28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001d40:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001d42:	e003      	b.n	c001d4c <LoopCopyDataInit>

0c001d44 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001d44:	4b0b      	ldr	r3, [pc, #44]	; (c001d74 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c001d46:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c001d48:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c001d4a:	3104      	adds	r1, #4

0c001d4c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001d4c:	480a      	ldr	r0, [pc, #40]	; (c001d78 <LoopForever+0xa>)
	ldr	r3, =_edata
 c001d4e:	4b0b      	ldr	r3, [pc, #44]	; (c001d7c <LoopForever+0xe>)
	adds	r2, r0, r1
 c001d50:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001d52:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001d54:	d3f6      	bcc.n	c001d44 <CopyDataInit>
	ldr	r2, =_sbss
 c001d56:	4a0a      	ldr	r2, [pc, #40]	; (c001d80 <LoopForever+0x12>)
	b	LoopFillZerobss
 c001d58:	e002      	b.n	c001d60 <LoopFillZerobss>

0c001d5a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c001d5a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001d5c:	f842 3b04 	str.w	r3, [r2], #4

0c001d60 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001d60:	4b08      	ldr	r3, [pc, #32]	; (c001d84 <LoopForever+0x16>)
	cmp	r2, r3
 c001d62:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001d64:	d3f9      	bcc.n	c001d5a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c001d66:	f004 f9fb 	bl	c006160 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c001d6a:	f7fe fc95 	bl	c000698 <main>

0c001d6e <LoopForever>:

LoopForever:
    b LoopForever
 c001d6e:	e7fe      	b.n	c001d6e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001d70:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001d74:	0c007460 	.word	0x0c007460
	ldr	r0, =_sdata
 c001d78:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001d7c:	30000070 	.word	0x30000070
	ldr	r2, =_sbss
 c001d80:	30000070 	.word	0x30000070
	ldr	r3, = _ebss
 c001d84:	30000b50 	.word	0x30000b50

0c001d88 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c001d88:	e7fe      	b.n	c001d88 <ADC1_2_IRQHandler>

0c001d8a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c001d8a:	b580      	push	{r7, lr}
 c001d8c:	b082      	sub	sp, #8
 c001d8e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c001d90:	2300      	movs	r3, #0
 c001d92:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001d94:	2004      	movs	r0, #4
 c001d96:	f000 f93f 	bl	c002018 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c001d9a:	f7ff fedf 	bl	c001b5c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c001d9e:	2000      	movs	r0, #0
 c001da0:	f000 f80e 	bl	c001dc0 <HAL_InitTick>
 c001da4:	4603      	mov	r3, r0
 c001da6:	2b00      	cmp	r3, #0
 c001da8:	d002      	beq.n	c001db0 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c001daa:	2301      	movs	r3, #1
 c001dac:	71fb      	strb	r3, [r7, #7]
 c001dae:	e001      	b.n	c001db4 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c001db0:	f7ff fb88 	bl	c0014c4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c001db4:	79fb      	ldrb	r3, [r7, #7]
}
 c001db6:	4618      	mov	r0, r3
 c001db8:	3708      	adds	r7, #8
 c001dba:	46bd      	mov	sp, r7
 c001dbc:	bd80      	pop	{r7, pc}
	...

0c001dc0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c001dc0:	b580      	push	{r7, lr}
 c001dc2:	b084      	sub	sp, #16
 c001dc4:	af00      	add	r7, sp, #0
 c001dc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c001dc8:	2300      	movs	r3, #0
 c001dca:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c001dcc:	4b17      	ldr	r3, [pc, #92]	; (c001e2c <HAL_InitTick+0x6c>)
 c001dce:	781b      	ldrb	r3, [r3, #0]
 c001dd0:	2b00      	cmp	r3, #0
 c001dd2:	d023      	beq.n	c001e1c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c001dd4:	4b16      	ldr	r3, [pc, #88]	; (c001e30 <HAL_InitTick+0x70>)
 c001dd6:	681a      	ldr	r2, [r3, #0]
 c001dd8:	4b14      	ldr	r3, [pc, #80]	; (c001e2c <HAL_InitTick+0x6c>)
 c001dda:	781b      	ldrb	r3, [r3, #0]
 c001ddc:	4619      	mov	r1, r3
 c001dde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c001de2:	fbb3 f3f1 	udiv	r3, r3, r1
 c001de6:	fbb2 f3f3 	udiv	r3, r2, r3
 c001dea:	4618      	mov	r0, r3
 c001dec:	f000 f947 	bl	c00207e <HAL_SYSTICK_Config>
 c001df0:	4603      	mov	r3, r0
 c001df2:	2b00      	cmp	r3, #0
 c001df4:	d10f      	bne.n	c001e16 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c001df6:	687b      	ldr	r3, [r7, #4]
 c001df8:	2b07      	cmp	r3, #7
 c001dfa:	d809      	bhi.n	c001e10 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001dfc:	2200      	movs	r2, #0
 c001dfe:	6879      	ldr	r1, [r7, #4]
 c001e00:	f04f 30ff 	mov.w	r0, #4294967295
 c001e04:	f000 f913 	bl	c00202e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c001e08:	4a0a      	ldr	r2, [pc, #40]	; (c001e34 <HAL_InitTick+0x74>)
 c001e0a:	687b      	ldr	r3, [r7, #4]
 c001e0c:	6013      	str	r3, [r2, #0]
 c001e0e:	e007      	b.n	c001e20 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c001e10:	2301      	movs	r3, #1
 c001e12:	73fb      	strb	r3, [r7, #15]
 c001e14:	e004      	b.n	c001e20 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c001e16:	2301      	movs	r3, #1
 c001e18:	73fb      	strb	r3, [r7, #15]
 c001e1a:	e001      	b.n	c001e20 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001e1c:	2301      	movs	r3, #1
 c001e1e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c001e20:	7bfb      	ldrb	r3, [r7, #15]
}
 c001e22:	4618      	mov	r0, r3
 c001e24:	3710      	adds	r7, #16
 c001e26:	46bd      	mov	sp, r7
 c001e28:	bd80      	pop	{r7, pc}
 c001e2a:	bf00      	nop
 c001e2c:	30000008 	.word	0x30000008
 c001e30:	30000000 	.word	0x30000000
 c001e34:	30000004 	.word	0x30000004

0c001e38 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c001e38:	b480      	push	{r7}
 c001e3a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001e3c:	4b06      	ldr	r3, [pc, #24]	; (c001e58 <HAL_IncTick+0x20>)
 c001e3e:	781b      	ldrb	r3, [r3, #0]
 c001e40:	461a      	mov	r2, r3
 c001e42:	4b06      	ldr	r3, [pc, #24]	; (c001e5c <HAL_IncTick+0x24>)
 c001e44:	681b      	ldr	r3, [r3, #0]
 c001e46:	4413      	add	r3, r2
 c001e48:	4a04      	ldr	r2, [pc, #16]	; (c001e5c <HAL_IncTick+0x24>)
 c001e4a:	6013      	str	r3, [r2, #0]
}
 c001e4c:	bf00      	nop
 c001e4e:	46bd      	mov	sp, r7
 c001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e54:	4770      	bx	lr
 c001e56:	bf00      	nop
 c001e58:	30000008 	.word	0x30000008
 c001e5c:	30000b3c 	.word	0x30000b3c

0c001e60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c001e60:	b480      	push	{r7}
 c001e62:	af00      	add	r7, sp, #0
  return uwTick;
 c001e64:	4b03      	ldr	r3, [pc, #12]	; (c001e74 <HAL_GetTick+0x14>)
 c001e66:	681b      	ldr	r3, [r3, #0]
}
 c001e68:	4618      	mov	r0, r3
 c001e6a:	46bd      	mov	sp, r7
 c001e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e70:	4770      	bx	lr
 c001e72:	bf00      	nop
 c001e74:	30000b3c 	.word	0x30000b3c

0c001e78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001e78:	b480      	push	{r7}
 c001e7a:	b085      	sub	sp, #20
 c001e7c:	af00      	add	r7, sp, #0
 c001e7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c001e80:	687b      	ldr	r3, [r7, #4]
 c001e82:	f003 0307 	and.w	r3, r3, #7
 c001e86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c001e88:	4b0c      	ldr	r3, [pc, #48]	; (c001ebc <__NVIC_SetPriorityGrouping+0x44>)
 c001e8a:	68db      	ldr	r3, [r3, #12]
 c001e8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c001e8e:	68ba      	ldr	r2, [r7, #8]
 c001e90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c001e94:	4013      	ands	r3, r2
 c001e96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c001e98:	68fb      	ldr	r3, [r7, #12]
 c001e9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c001e9c:	68bb      	ldr	r3, [r7, #8]
 c001e9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c001ea0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c001ea4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001ea8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c001eaa:	4a04      	ldr	r2, [pc, #16]	; (c001ebc <__NVIC_SetPriorityGrouping+0x44>)
 c001eac:	68bb      	ldr	r3, [r7, #8]
 c001eae:	60d3      	str	r3, [r2, #12]
}
 c001eb0:	bf00      	nop
 c001eb2:	3714      	adds	r7, #20
 c001eb4:	46bd      	mov	sp, r7
 c001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001eba:	4770      	bx	lr
 c001ebc:	e000ed00 	.word	0xe000ed00

0c001ec0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c001ec0:	b480      	push	{r7}
 c001ec2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001ec4:	4b04      	ldr	r3, [pc, #16]	; (c001ed8 <__NVIC_GetPriorityGrouping+0x18>)
 c001ec6:	68db      	ldr	r3, [r3, #12]
 c001ec8:	0a1b      	lsrs	r3, r3, #8
 c001eca:	f003 0307 	and.w	r3, r3, #7
}
 c001ece:	4618      	mov	r0, r3
 c001ed0:	46bd      	mov	sp, r7
 c001ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001ed6:	4770      	bx	lr
 c001ed8:	e000ed00 	.word	0xe000ed00

0c001edc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001edc:	b480      	push	{r7}
 c001ede:	b083      	sub	sp, #12
 c001ee0:	af00      	add	r7, sp, #0
 c001ee2:	4603      	mov	r3, r0
 c001ee4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001eea:	2b00      	cmp	r3, #0
 c001eec:	db0b      	blt.n	c001f06 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c001eee:	79fb      	ldrb	r3, [r7, #7]
 c001ef0:	f003 021f 	and.w	r2, r3, #31
 c001ef4:	4907      	ldr	r1, [pc, #28]	; (c001f14 <__NVIC_EnableIRQ+0x38>)
 c001ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001efa:	095b      	lsrs	r3, r3, #5
 c001efc:	2001      	movs	r0, #1
 c001efe:	fa00 f202 	lsl.w	r2, r0, r2
 c001f02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c001f06:	bf00      	nop
 c001f08:	370c      	adds	r7, #12
 c001f0a:	46bd      	mov	sp, r7
 c001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f10:	4770      	bx	lr
 c001f12:	bf00      	nop
 c001f14:	e000e100 	.word	0xe000e100

0c001f18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001f18:	b480      	push	{r7}
 c001f1a:	b083      	sub	sp, #12
 c001f1c:	af00      	add	r7, sp, #0
 c001f1e:	4603      	mov	r3, r0
 c001f20:	6039      	str	r1, [r7, #0]
 c001f22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001f24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001f28:	2b00      	cmp	r3, #0
 c001f2a:	db0a      	blt.n	c001f42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001f2c:	683b      	ldr	r3, [r7, #0]
 c001f2e:	b2da      	uxtb	r2, r3
 c001f30:	490c      	ldr	r1, [pc, #48]	; (c001f64 <__NVIC_SetPriority+0x4c>)
 c001f32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001f36:	0152      	lsls	r2, r2, #5
 c001f38:	b2d2      	uxtb	r2, r2
 c001f3a:	440b      	add	r3, r1
 c001f3c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c001f40:	e00a      	b.n	c001f58 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001f42:	683b      	ldr	r3, [r7, #0]
 c001f44:	b2da      	uxtb	r2, r3
 c001f46:	4908      	ldr	r1, [pc, #32]	; (c001f68 <__NVIC_SetPriority+0x50>)
 c001f48:	79fb      	ldrb	r3, [r7, #7]
 c001f4a:	f003 030f 	and.w	r3, r3, #15
 c001f4e:	3b04      	subs	r3, #4
 c001f50:	0152      	lsls	r2, r2, #5
 c001f52:	b2d2      	uxtb	r2, r2
 c001f54:	440b      	add	r3, r1
 c001f56:	761a      	strb	r2, [r3, #24]
}
 c001f58:	bf00      	nop
 c001f5a:	370c      	adds	r7, #12
 c001f5c:	46bd      	mov	sp, r7
 c001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001f62:	4770      	bx	lr
 c001f64:	e000e100 	.word	0xe000e100
 c001f68:	e000ed00 	.word	0xe000ed00

0c001f6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c001f6c:	b480      	push	{r7}
 c001f6e:	b089      	sub	sp, #36	; 0x24
 c001f70:	af00      	add	r7, sp, #0
 c001f72:	60f8      	str	r0, [r7, #12]
 c001f74:	60b9      	str	r1, [r7, #8]
 c001f76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c001f78:	68fb      	ldr	r3, [r7, #12]
 c001f7a:	f003 0307 	and.w	r3, r3, #7
 c001f7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c001f80:	69fb      	ldr	r3, [r7, #28]
 c001f82:	f1c3 0307 	rsb	r3, r3, #7
 c001f86:	2b03      	cmp	r3, #3
 c001f88:	bf28      	it	cs
 c001f8a:	2303      	movcs	r3, #3
 c001f8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c001f8e:	69fb      	ldr	r3, [r7, #28]
 c001f90:	3303      	adds	r3, #3
 c001f92:	2b06      	cmp	r3, #6
 c001f94:	d902      	bls.n	c001f9c <NVIC_EncodePriority+0x30>
 c001f96:	69fb      	ldr	r3, [r7, #28]
 c001f98:	3b04      	subs	r3, #4
 c001f9a:	e000      	b.n	c001f9e <NVIC_EncodePriority+0x32>
 c001f9c:	2300      	movs	r3, #0
 c001f9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001fa0:	f04f 32ff 	mov.w	r2, #4294967295
 c001fa4:	69bb      	ldr	r3, [r7, #24]
 c001fa6:	fa02 f303 	lsl.w	r3, r2, r3
 c001faa:	43da      	mvns	r2, r3
 c001fac:	68bb      	ldr	r3, [r7, #8]
 c001fae:	401a      	ands	r2, r3
 c001fb0:	697b      	ldr	r3, [r7, #20]
 c001fb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001fb4:	f04f 31ff 	mov.w	r1, #4294967295
 c001fb8:	697b      	ldr	r3, [r7, #20]
 c001fba:	fa01 f303 	lsl.w	r3, r1, r3
 c001fbe:	43d9      	mvns	r1, r3
 c001fc0:	687b      	ldr	r3, [r7, #4]
 c001fc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001fc4:	4313      	orrs	r3, r2
         );
}
 c001fc6:	4618      	mov	r0, r3
 c001fc8:	3724      	adds	r7, #36	; 0x24
 c001fca:	46bd      	mov	sp, r7
 c001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001fd0:	4770      	bx	lr
	...

0c001fd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001fd4:	b580      	push	{r7, lr}
 c001fd6:	b082      	sub	sp, #8
 c001fd8:	af00      	add	r7, sp, #0
 c001fda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001fdc:	687b      	ldr	r3, [r7, #4]
 c001fde:	3b01      	subs	r3, #1
 c001fe0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001fe4:	d301      	bcc.n	c001fea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001fe6:	2301      	movs	r3, #1
 c001fe8:	e00f      	b.n	c00200a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001fea:	4a0a      	ldr	r2, [pc, #40]	; (c002014 <SysTick_Config+0x40>)
 c001fec:	687b      	ldr	r3, [r7, #4]
 c001fee:	3b01      	subs	r3, #1
 c001ff0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c001ff2:	2107      	movs	r1, #7
 c001ff4:	f04f 30ff 	mov.w	r0, #4294967295
 c001ff8:	f7ff ff8e 	bl	c001f18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001ffc:	4b05      	ldr	r3, [pc, #20]	; (c002014 <SysTick_Config+0x40>)
 c001ffe:	2200      	movs	r2, #0
 c002000:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c002002:	4b04      	ldr	r3, [pc, #16]	; (c002014 <SysTick_Config+0x40>)
 c002004:	2207      	movs	r2, #7
 c002006:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c002008:	2300      	movs	r3, #0
}
 c00200a:	4618      	mov	r0, r3
 c00200c:	3708      	adds	r7, #8
 c00200e:	46bd      	mov	sp, r7
 c002010:	bd80      	pop	{r7, pc}
 c002012:	bf00      	nop
 c002014:	e000e010 	.word	0xe000e010

0c002018 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c002018:	b580      	push	{r7, lr}
 c00201a:	b082      	sub	sp, #8
 c00201c:	af00      	add	r7, sp, #0
 c00201e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c002020:	6878      	ldr	r0, [r7, #4]
 c002022:	f7ff ff29 	bl	c001e78 <__NVIC_SetPriorityGrouping>
}
 c002026:	bf00      	nop
 c002028:	3708      	adds	r7, #8
 c00202a:	46bd      	mov	sp, r7
 c00202c:	bd80      	pop	{r7, pc}

0c00202e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00202e:	b580      	push	{r7, lr}
 c002030:	b086      	sub	sp, #24
 c002032:	af00      	add	r7, sp, #0
 c002034:	4603      	mov	r3, r0
 c002036:	60b9      	str	r1, [r7, #8]
 c002038:	607a      	str	r2, [r7, #4]
 c00203a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c00203c:	f7ff ff40 	bl	c001ec0 <__NVIC_GetPriorityGrouping>
 c002040:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c002042:	687a      	ldr	r2, [r7, #4]
 c002044:	68b9      	ldr	r1, [r7, #8]
 c002046:	6978      	ldr	r0, [r7, #20]
 c002048:	f7ff ff90 	bl	c001f6c <NVIC_EncodePriority>
 c00204c:	4602      	mov	r2, r0
 c00204e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c002052:	4611      	mov	r1, r2
 c002054:	4618      	mov	r0, r3
 c002056:	f7ff ff5f 	bl	c001f18 <__NVIC_SetPriority>
}
 c00205a:	bf00      	nop
 c00205c:	3718      	adds	r7, #24
 c00205e:	46bd      	mov	sp, r7
 c002060:	bd80      	pop	{r7, pc}

0c002062 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c002062:	b580      	push	{r7, lr}
 c002064:	b082      	sub	sp, #8
 c002066:	af00      	add	r7, sp, #0
 c002068:	4603      	mov	r3, r0
 c00206a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c00206c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c002070:	4618      	mov	r0, r3
 c002072:	f7ff ff33 	bl	c001edc <__NVIC_EnableIRQ>
}
 c002076:	bf00      	nop
 c002078:	3708      	adds	r7, #8
 c00207a:	46bd      	mov	sp, r7
 c00207c:	bd80      	pop	{r7, pc}

0c00207e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c00207e:	b580      	push	{r7, lr}
 c002080:	b082      	sub	sp, #8
 c002082:	af00      	add	r7, sp, #0
 c002084:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c002086:	6878      	ldr	r0, [r7, #4]
 c002088:	f7ff ffa4 	bl	c001fd4 <SysTick_Config>
 c00208c:	4603      	mov	r3, r0
}
 c00208e:	4618      	mov	r0, r3
 c002090:	3708      	adds	r7, #8
 c002092:	46bd      	mov	sp, r7
 c002094:	bd80      	pop	{r7, pc}
	...

0c002098 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c002098:	b580      	push	{r7, lr}
 c00209a:	b084      	sub	sp, #16
 c00209c:	af00      	add	r7, sp, #0
 c00209e:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c0020a0:	687b      	ldr	r3, [r7, #4]
 c0020a2:	2b00      	cmp	r3, #0
 c0020a4:	d101      	bne.n	c0020aa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c0020a6:	2301      	movs	r3, #1
 c0020a8:	e08d      	b.n	c0021c6 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c0020aa:	687b      	ldr	r3, [r7, #4]
 c0020ac:	681b      	ldr	r3, [r3, #0]
 c0020ae:	461a      	mov	r2, r3
 c0020b0:	4b47      	ldr	r3, [pc, #284]	; (c0021d0 <HAL_DMA_Init+0x138>)
 c0020b2:	429a      	cmp	r2, r3
 c0020b4:	d80f      	bhi.n	c0020d6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c0020b6:	687b      	ldr	r3, [r7, #4]
 c0020b8:	681b      	ldr	r3, [r3, #0]
 c0020ba:	461a      	mov	r2, r3
 c0020bc:	4b45      	ldr	r3, [pc, #276]	; (c0021d4 <HAL_DMA_Init+0x13c>)
 c0020be:	4413      	add	r3, r2
 c0020c0:	4a45      	ldr	r2, [pc, #276]	; (c0021d8 <HAL_DMA_Init+0x140>)
 c0020c2:	fba2 2303 	umull	r2, r3, r2, r3
 c0020c6:	091b      	lsrs	r3, r3, #4
 c0020c8:	009a      	lsls	r2, r3, #2
 c0020ca:	687b      	ldr	r3, [r7, #4]
 c0020cc:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c0020ce:	687b      	ldr	r3, [r7, #4]
 c0020d0:	4a42      	ldr	r2, [pc, #264]	; (c0021dc <HAL_DMA_Init+0x144>)
 c0020d2:	649a      	str	r2, [r3, #72]	; 0x48
 c0020d4:	e00e      	b.n	c0020f4 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c0020d6:	687b      	ldr	r3, [r7, #4]
 c0020d8:	681b      	ldr	r3, [r3, #0]
 c0020da:	461a      	mov	r2, r3
 c0020dc:	4b40      	ldr	r3, [pc, #256]	; (c0021e0 <HAL_DMA_Init+0x148>)
 c0020de:	4413      	add	r3, r2
 c0020e0:	4a3d      	ldr	r2, [pc, #244]	; (c0021d8 <HAL_DMA_Init+0x140>)
 c0020e2:	fba2 2303 	umull	r2, r3, r2, r3
 c0020e6:	091b      	lsrs	r3, r3, #4
 c0020e8:	009a      	lsls	r2, r3, #2
 c0020ea:	687b      	ldr	r3, [r7, #4]
 c0020ec:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c0020ee:	687b      	ldr	r3, [r7, #4]
 c0020f0:	4a3c      	ldr	r2, [pc, #240]	; (c0021e4 <HAL_DMA_Init+0x14c>)
 c0020f2:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c0020f4:	687b      	ldr	r3, [r7, #4]
 c0020f6:	2202      	movs	r2, #2
 c0020f8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c0020fc:	687b      	ldr	r3, [r7, #4]
 c0020fe:	681b      	ldr	r3, [r3, #0]
 c002100:	681b      	ldr	r3, [r3, #0]
 c002102:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c002104:	68fb      	ldr	r3, [r7, #12]
 c002106:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c00210a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c00210e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c002110:	687b      	ldr	r3, [r7, #4]
 c002112:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002114:	687b      	ldr	r3, [r7, #4]
 c002116:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c002118:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c00211a:	687b      	ldr	r3, [r7, #4]
 c00211c:	691b      	ldr	r3, [r3, #16]
 c00211e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002120:	687b      	ldr	r3, [r7, #4]
 c002122:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c002124:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002126:	687b      	ldr	r3, [r7, #4]
 c002128:	699b      	ldr	r3, [r3, #24]
 c00212a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c00212c:	687b      	ldr	r3, [r7, #4]
 c00212e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c002130:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c002132:	687b      	ldr	r3, [r7, #4]
 c002134:	6a1b      	ldr	r3, [r3, #32]
 c002136:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c002138:	68fa      	ldr	r2, [r7, #12]
 c00213a:	4313      	orrs	r3, r2
 c00213c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c00213e:	687b      	ldr	r3, [r7, #4]
 c002140:	681b      	ldr	r3, [r3, #0]
 c002142:	68fa      	ldr	r2, [r7, #12]
 c002144:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c002146:	6878      	ldr	r0, [r7, #4]
 c002148:	f000 fae4 	bl	c002714 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c00214c:	687b      	ldr	r3, [r7, #4]
 c00214e:	689b      	ldr	r3, [r3, #8]
 c002150:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c002154:	d102      	bne.n	c00215c <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c002156:	687b      	ldr	r3, [r7, #4]
 c002158:	2200      	movs	r2, #0
 c00215a:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c00215c:	687b      	ldr	r3, [r7, #4]
 c00215e:	685a      	ldr	r2, [r3, #4]
 c002160:	687b      	ldr	r3, [r7, #4]
 c002162:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002164:	b2d2      	uxtb	r2, r2
 c002166:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c002168:	687b      	ldr	r3, [r7, #4]
 c00216a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c00216c:	687a      	ldr	r2, [r7, #4]
 c00216e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c002170:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c002172:	687b      	ldr	r3, [r7, #4]
 c002174:	685b      	ldr	r3, [r3, #4]
 c002176:	2b00      	cmp	r3, #0
 c002178:	d010      	beq.n	c00219c <HAL_DMA_Init+0x104>
 c00217a:	687b      	ldr	r3, [r7, #4]
 c00217c:	685b      	ldr	r3, [r3, #4]
 c00217e:	2b04      	cmp	r3, #4
 c002180:	d80c      	bhi.n	c00219c <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c002182:	6878      	ldr	r0, [r7, #4]
 c002184:	f000 fb04 	bl	c002790 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c002188:	687b      	ldr	r3, [r7, #4]
 c00218a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c00218c:	2200      	movs	r2, #0
 c00218e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c002190:	687b      	ldr	r3, [r7, #4]
 c002192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c002194:	687a      	ldr	r2, [r7, #4]
 c002196:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c002198:	605a      	str	r2, [r3, #4]
 c00219a:	e008      	b.n	c0021ae <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c00219c:	687b      	ldr	r3, [r7, #4]
 c00219e:	2200      	movs	r2, #0
 c0021a0:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c0021a2:	687b      	ldr	r3, [r7, #4]
 c0021a4:	2200      	movs	r2, #0
 c0021a6:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c0021a8:	687b      	ldr	r3, [r7, #4]
 c0021aa:	2200      	movs	r2, #0
 c0021ac:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c0021ae:	687b      	ldr	r3, [r7, #4]
 c0021b0:	2200      	movs	r2, #0
 c0021b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c0021b4:	687b      	ldr	r3, [r7, #4]
 c0021b6:	2201      	movs	r2, #1
 c0021b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c0021bc:	687b      	ldr	r3, [r7, #4]
 c0021be:	2200      	movs	r2, #0
 c0021c0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c0021c4:	2300      	movs	r3, #0
}
 c0021c6:	4618      	mov	r0, r3
 c0021c8:	3710      	adds	r7, #16
 c0021ca:	46bd      	mov	sp, r7
 c0021cc:	bd80      	pop	{r7, pc}
 c0021ce:	bf00      	nop
 c0021d0:	50020407 	.word	0x50020407
 c0021d4:	affdfff8 	.word	0xaffdfff8
 c0021d8:	cccccccd 	.word	0xcccccccd
 c0021dc:	50020000 	.word	0x50020000
 c0021e0:	affdfbf8 	.word	0xaffdfbf8
 c0021e4:	50020400 	.word	0x50020400

0c0021e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c0021e8:	b580      	push	{r7, lr}
 c0021ea:	b086      	sub	sp, #24
 c0021ec:	af00      	add	r7, sp, #0
 c0021ee:	60f8      	str	r0, [r7, #12]
 c0021f0:	60b9      	str	r1, [r7, #8]
 c0021f2:	607a      	str	r2, [r7, #4]
 c0021f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c0021f6:	2300      	movs	r3, #0
 c0021f8:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c0021fa:	68fb      	ldr	r3, [r7, #12]
 c0021fc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c002200:	2b01      	cmp	r3, #1
 c002202:	d101      	bne.n	c002208 <HAL_DMA_Start_IT+0x20>
 c002204:	2302      	movs	r3, #2
 c002206:	e066      	b.n	c0022d6 <HAL_DMA_Start_IT+0xee>
 c002208:	68fb      	ldr	r3, [r7, #12]
 c00220a:	2201      	movs	r2, #1
 c00220c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c002210:	68fb      	ldr	r3, [r7, #12]
 c002212:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c002216:	b2db      	uxtb	r3, r3
 c002218:	2b01      	cmp	r3, #1
 c00221a:	d155      	bne.n	c0022c8 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c00221c:	68fb      	ldr	r3, [r7, #12]
 c00221e:	2202      	movs	r2, #2
 c002220:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c002224:	68fb      	ldr	r3, [r7, #12]
 c002226:	2200      	movs	r2, #0
 c002228:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c00222a:	68fb      	ldr	r3, [r7, #12]
 c00222c:	681b      	ldr	r3, [r3, #0]
 c00222e:	681a      	ldr	r2, [r3, #0]
 c002230:	68fb      	ldr	r3, [r7, #12]
 c002232:	681b      	ldr	r3, [r3, #0]
 c002234:	f022 0201 	bic.w	r2, r2, #1
 c002238:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c00223a:	683b      	ldr	r3, [r7, #0]
 c00223c:	687a      	ldr	r2, [r7, #4]
 c00223e:	68b9      	ldr	r1, [r7, #8]
 c002240:	68f8      	ldr	r0, [r7, #12]
 c002242:	f000 fa29 	bl	c002698 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c002246:	68fb      	ldr	r3, [r7, #12]
 c002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c00224a:	2b00      	cmp	r3, #0
 c00224c:	d008      	beq.n	c002260 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c00224e:	68fb      	ldr	r3, [r7, #12]
 c002250:	681b      	ldr	r3, [r3, #0]
 c002252:	681a      	ldr	r2, [r3, #0]
 c002254:	68fb      	ldr	r3, [r7, #12]
 c002256:	681b      	ldr	r3, [r3, #0]
 c002258:	f042 020e 	orr.w	r2, r2, #14
 c00225c:	601a      	str	r2, [r3, #0]
 c00225e:	e00f      	b.n	c002280 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c002260:	68fb      	ldr	r3, [r7, #12]
 c002262:	681b      	ldr	r3, [r3, #0]
 c002264:	681a      	ldr	r2, [r3, #0]
 c002266:	68fb      	ldr	r3, [r7, #12]
 c002268:	681b      	ldr	r3, [r3, #0]
 c00226a:	f022 0204 	bic.w	r2, r2, #4
 c00226e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c002270:	68fb      	ldr	r3, [r7, #12]
 c002272:	681b      	ldr	r3, [r3, #0]
 c002274:	681a      	ldr	r2, [r3, #0]
 c002276:	68fb      	ldr	r3, [r7, #12]
 c002278:	681b      	ldr	r3, [r3, #0]
 c00227a:	f042 020a 	orr.w	r2, r2, #10
 c00227e:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c002280:	68fb      	ldr	r3, [r7, #12]
 c002282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002284:	681b      	ldr	r3, [r3, #0]
 c002286:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c00228a:	2b00      	cmp	r3, #0
 c00228c:	d007      	beq.n	c00229e <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c00228e:	68fb      	ldr	r3, [r7, #12]
 c002290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002292:	681a      	ldr	r2, [r3, #0]
 c002294:	68fb      	ldr	r3, [r7, #12]
 c002296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c002298:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c00229c:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c00229e:	68fb      	ldr	r3, [r7, #12]
 c0022a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0022a2:	2b00      	cmp	r3, #0
 c0022a4:	d007      	beq.n	c0022b6 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c0022a6:	68fb      	ldr	r3, [r7, #12]
 c0022a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0022aa:	681a      	ldr	r2, [r3, #0]
 c0022ac:	68fb      	ldr	r3, [r7, #12]
 c0022ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0022b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c0022b4:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c0022b6:	68fb      	ldr	r3, [r7, #12]
 c0022b8:	681b      	ldr	r3, [r3, #0]
 c0022ba:	681a      	ldr	r2, [r3, #0]
 c0022bc:	68fb      	ldr	r3, [r7, #12]
 c0022be:	681b      	ldr	r3, [r3, #0]
 c0022c0:	f042 0201 	orr.w	r2, r2, #1
 c0022c4:	601a      	str	r2, [r3, #0]
 c0022c6:	e005      	b.n	c0022d4 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c0022c8:	68fb      	ldr	r3, [r7, #12]
 c0022ca:	2200      	movs	r2, #0
 c0022cc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c0022d0:	2302      	movs	r3, #2
 c0022d2:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c0022d4:	7dfb      	ldrb	r3, [r7, #23]
}
 c0022d6:	4618      	mov	r0, r3
 c0022d8:	3718      	adds	r7, #24
 c0022da:	46bd      	mov	sp, r7
 c0022dc:	bd80      	pop	{r7, pc}

0c0022de <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c0022de:	b580      	push	{r7, lr}
 c0022e0:	b084      	sub	sp, #16
 c0022e2:	af00      	add	r7, sp, #0
 c0022e4:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c0022e6:	687b      	ldr	r3, [r7, #4]
 c0022e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0022ea:	681b      	ldr	r3, [r3, #0]
 c0022ec:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c0022ee:	687b      	ldr	r3, [r7, #4]
 c0022f0:	681b      	ldr	r3, [r3, #0]
 c0022f2:	681b      	ldr	r3, [r3, #0]
 c0022f4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c0022f6:	687b      	ldr	r3, [r7, #4]
 c0022f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0022fa:	f003 031c 	and.w	r3, r3, #28
 c0022fe:	2204      	movs	r2, #4
 c002300:	409a      	lsls	r2, r3
 c002302:	68fb      	ldr	r3, [r7, #12]
 c002304:	4013      	ands	r3, r2
 c002306:	2b00      	cmp	r3, #0
 c002308:	d053      	beq.n	c0023b2 <HAL_DMA_IRQHandler+0xd4>
 c00230a:	68bb      	ldr	r3, [r7, #8]
 c00230c:	f003 0304 	and.w	r3, r3, #4
 c002310:	2b00      	cmp	r3, #0
 c002312:	d04e      	beq.n	c0023b2 <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002314:	687b      	ldr	r3, [r7, #4]
 c002316:	681b      	ldr	r3, [r3, #0]
 c002318:	681b      	ldr	r3, [r3, #0]
 c00231a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00231e:	2b00      	cmp	r3, #0
 c002320:	d024      	beq.n	c00236c <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c002322:	687b      	ldr	r3, [r7, #4]
 c002324:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002326:	f003 021c 	and.w	r2, r3, #28
 c00232a:	687b      	ldr	r3, [r7, #4]
 c00232c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00232e:	2104      	movs	r1, #4
 c002330:	fa01 f202 	lsl.w	r2, r1, r2
 c002334:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c002336:	687b      	ldr	r3, [r7, #4]
 c002338:	681b      	ldr	r3, [r3, #0]
 c00233a:	681b      	ldr	r3, [r3, #0]
 c00233c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002340:	2b00      	cmp	r3, #0
 c002342:	d109      	bne.n	c002358 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c002344:	687b      	ldr	r3, [r7, #4]
 c002346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002348:	2b00      	cmp	r3, #0
 c00234a:	f000 80c0 	beq.w	c0024ce <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c00234e:	687b      	ldr	r3, [r7, #4]
 c002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002352:	6878      	ldr	r0, [r7, #4]
 c002354:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002356:	e0ba      	b.n	c0024ce <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c002358:	687b      	ldr	r3, [r7, #4]
 c00235a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00235c:	2b00      	cmp	r3, #0
 c00235e:	f000 80b6 	beq.w	c0024ce <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c002362:	687b      	ldr	r3, [r7, #4]
 c002364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002366:	6878      	ldr	r0, [r7, #4]
 c002368:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c00236a:	e0b0      	b.n	c0024ce <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c00236c:	687b      	ldr	r3, [r7, #4]
 c00236e:	681b      	ldr	r3, [r3, #0]
 c002370:	681b      	ldr	r3, [r3, #0]
 c002372:	f003 0320 	and.w	r3, r3, #32
 c002376:	2b00      	cmp	r3, #0
 c002378:	d107      	bne.n	c00238a <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c00237a:	687b      	ldr	r3, [r7, #4]
 c00237c:	681b      	ldr	r3, [r3, #0]
 c00237e:	681a      	ldr	r2, [r3, #0]
 c002380:	687b      	ldr	r3, [r7, #4]
 c002382:	681b      	ldr	r3, [r3, #0]
 c002384:	f022 0204 	bic.w	r2, r2, #4
 c002388:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c00238a:	687b      	ldr	r3, [r7, #4]
 c00238c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00238e:	f003 021c 	and.w	r2, r3, #28
 c002392:	687b      	ldr	r3, [r7, #4]
 c002394:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002396:	2104      	movs	r1, #4
 c002398:	fa01 f202 	lsl.w	r2, r1, r2
 c00239c:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c00239e:	687b      	ldr	r3, [r7, #4]
 c0023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0023a2:	2b00      	cmp	r3, #0
 c0023a4:	f000 8093 	beq.w	c0024ce <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c0023a8:	687b      	ldr	r3, [r7, #4]
 c0023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0023ac:	6878      	ldr	r0, [r7, #4]
 c0023ae:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0023b0:	e08d      	b.n	c0024ce <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c0023b2:	687b      	ldr	r3, [r7, #4]
 c0023b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0023b6:	f003 031c 	and.w	r3, r3, #28
 c0023ba:	2202      	movs	r2, #2
 c0023bc:	409a      	lsls	r2, r3
 c0023be:	68fb      	ldr	r3, [r7, #12]
 c0023c0:	4013      	ands	r3, r2
 c0023c2:	2b00      	cmp	r3, #0
 c0023c4:	d04e      	beq.n	c002464 <HAL_DMA_IRQHandler+0x186>
 c0023c6:	68bb      	ldr	r3, [r7, #8]
 c0023c8:	f003 0302 	and.w	r3, r3, #2
 c0023cc:	2b00      	cmp	r3, #0
 c0023ce:	d049      	beq.n	c002464 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0023d0:	687b      	ldr	r3, [r7, #4]
 c0023d2:	681b      	ldr	r3, [r3, #0]
 c0023d4:	681b      	ldr	r3, [r3, #0]
 c0023d6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0023da:	2b00      	cmp	r3, #0
 c0023dc:	d018      	beq.n	c002410 <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	681b      	ldr	r3, [r3, #0]
 c0023e2:	681b      	ldr	r3, [r3, #0]
 c0023e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0023e8:	2b00      	cmp	r3, #0
 c0023ea:	d108      	bne.n	c0023fe <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c0023ec:	687b      	ldr	r3, [r7, #4]
 c0023ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0023f0:	2b00      	cmp	r3, #0
 c0023f2:	d06e      	beq.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c0023f4:	687b      	ldr	r3, [r7, #4]
 c0023f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0023f8:	6878      	ldr	r0, [r7, #4]
 c0023fa:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0023fc:	e069      	b.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c0023fe:	687b      	ldr	r3, [r7, #4]
 c002400:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002402:	2b00      	cmp	r3, #0
 c002404:	d065      	beq.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c002406:	687b      	ldr	r3, [r7, #4]
 c002408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00240a:	6878      	ldr	r0, [r7, #4]
 c00240c:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c00240e:	e060      	b.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c002410:	687b      	ldr	r3, [r7, #4]
 c002412:	681b      	ldr	r3, [r3, #0]
 c002414:	681b      	ldr	r3, [r3, #0]
 c002416:	f003 0320 	and.w	r3, r3, #32
 c00241a:	2b00      	cmp	r3, #0
 c00241c:	d10b      	bne.n	c002436 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c00241e:	687b      	ldr	r3, [r7, #4]
 c002420:	681b      	ldr	r3, [r3, #0]
 c002422:	681a      	ldr	r2, [r3, #0]
 c002424:	687b      	ldr	r3, [r7, #4]
 c002426:	681b      	ldr	r3, [r3, #0]
 c002428:	f022 020a 	bic.w	r2, r2, #10
 c00242c:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c00242e:	687b      	ldr	r3, [r7, #4]
 c002430:	2201      	movs	r2, #1
 c002432:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c002436:	687b      	ldr	r3, [r7, #4]
 c002438:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00243a:	f003 021c 	and.w	r2, r3, #28
 c00243e:	687b      	ldr	r3, [r7, #4]
 c002440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c002442:	2102      	movs	r1, #2
 c002444:	fa01 f202 	lsl.w	r2, r1, r2
 c002448:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c00244a:	687b      	ldr	r3, [r7, #4]
 c00244c:	2200      	movs	r2, #0
 c00244e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c002452:	687b      	ldr	r3, [r7, #4]
 c002454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002456:	2b00      	cmp	r3, #0
 c002458:	d03b      	beq.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c00245a:	687b      	ldr	r3, [r7, #4]
 c00245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c00245e:	6878      	ldr	r0, [r7, #4]
 c002460:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c002462:	e036      	b.n	c0024d2 <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c002464:	687b      	ldr	r3, [r7, #4]
 c002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002468:	f003 031c 	and.w	r3, r3, #28
 c00246c:	2208      	movs	r2, #8
 c00246e:	409a      	lsls	r2, r3
 c002470:	68fb      	ldr	r3, [r7, #12]
 c002472:	4013      	ands	r3, r2
 c002474:	2b00      	cmp	r3, #0
 c002476:	d02e      	beq.n	c0024d6 <HAL_DMA_IRQHandler+0x1f8>
 c002478:	68bb      	ldr	r3, [r7, #8]
 c00247a:	f003 0308 	and.w	r3, r3, #8
 c00247e:	2b00      	cmp	r3, #0
 c002480:	d029      	beq.n	c0024d6 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c002482:	687b      	ldr	r3, [r7, #4]
 c002484:	681b      	ldr	r3, [r3, #0]
 c002486:	681a      	ldr	r2, [r3, #0]
 c002488:	687b      	ldr	r3, [r7, #4]
 c00248a:	681b      	ldr	r3, [r3, #0]
 c00248c:	f022 020e 	bic.w	r2, r2, #14
 c002490:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c002492:	687b      	ldr	r3, [r7, #4]
 c002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002496:	f003 021c 	and.w	r2, r3, #28
 c00249a:	687b      	ldr	r3, [r7, #4]
 c00249c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c00249e:	2101      	movs	r1, #1
 c0024a0:	fa01 f202 	lsl.w	r2, r1, r2
 c0024a4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c0024a6:	687b      	ldr	r3, [r7, #4]
 c0024a8:	2201      	movs	r2, #1
 c0024aa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c0024ac:	687b      	ldr	r3, [r7, #4]
 c0024ae:	2201      	movs	r2, #1
 c0024b0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c0024b4:	687b      	ldr	r3, [r7, #4]
 c0024b6:	2200      	movs	r2, #0
 c0024b8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c0024bc:	687b      	ldr	r3, [r7, #4]
 c0024be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0024c0:	2b00      	cmp	r3, #0
 c0024c2:	d008      	beq.n	c0024d6 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c0024c4:	687b      	ldr	r3, [r7, #4]
 c0024c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c0024c8:	6878      	ldr	r0, [r7, #4]
 c0024ca:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c0024cc:	e002      	b.n	c0024d4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0024ce:	bf00      	nop
 c0024d0:	e000      	b.n	c0024d4 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c0024d2:	bf00      	nop
  return;
 c0024d4:	bf00      	nop
 c0024d6:	bf00      	nop
}
 c0024d8:	3710      	adds	r7, #16
 c0024da:	46bd      	mov	sp, r7
 c0024dc:	bd80      	pop	{r7, pc}
	...

0c0024e0 <HAL_DMA_RegisterCallback>:
  * @param  pCallback            pointer to private callbacsk function which has pointer to
  *                               a DMA_HandleTypeDef structure as parameter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_RegisterCallback(DMA_HandleTypeDef *hdma, HAL_DMA_CallbackIDTypeDef CallbackID, void (* pCallback)( DMA_HandleTypeDef * _hdma))
{
 c0024e0:	b480      	push	{r7}
 c0024e2:	b087      	sub	sp, #28
 c0024e4:	af00      	add	r7, sp, #0
 c0024e6:	60f8      	str	r0, [r7, #12]
 c0024e8:	460b      	mov	r3, r1
 c0024ea:	607a      	str	r2, [r7, #4]
 c0024ec:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 c0024ee:	2300      	movs	r3, #0
 c0024f0:	75fb      	strb	r3, [r7, #23]

  /* Process locked */
  __HAL_LOCK(hdma);
 c0024f2:	68fb      	ldr	r3, [r7, #12]
 c0024f4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c0024f8:	2b01      	cmp	r3, #1
 c0024fa:	d101      	bne.n	c002500 <HAL_DMA_RegisterCallback+0x20>
 c0024fc:	2302      	movs	r3, #2
 c0024fe:	e03d      	b.n	c00257c <HAL_DMA_RegisterCallback+0x9c>
 c002500:	68fb      	ldr	r3, [r7, #12]
 c002502:	2201      	movs	r2, #1
 c002504:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c002508:	68fb      	ldr	r3, [r7, #12]
 c00250a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c00250e:	b2db      	uxtb	r3, r3
 c002510:	2b01      	cmp	r3, #1
 c002512:	d12c      	bne.n	c00256e <HAL_DMA_RegisterCallback+0x8e>
  {
    switch (CallbackID)
 c002514:	7afb      	ldrb	r3, [r7, #11]
 c002516:	2b05      	cmp	r3, #5
 c002518:	d826      	bhi.n	c002568 <HAL_DMA_RegisterCallback+0x88>
 c00251a:	a201      	add	r2, pc, #4	; (adr r2, c002520 <HAL_DMA_RegisterCallback+0x40>)
 c00251c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c002520:	0c002539 	.word	0x0c002539
 c002524:	0c002541 	.word	0x0c002541
 c002528:	0c002549 	.word	0x0c002549
 c00252c:	0c002551 	.word	0x0c002551
 c002530:	0c002559 	.word	0x0c002559
 c002534:	0c002561 	.word	0x0c002561
    {
     case  HAL_DMA_XFER_CPLT_CB_ID:
           hdma->XferCpltCallback = pCallback;
 c002538:	68fb      	ldr	r3, [r7, #12]
 c00253a:	687a      	ldr	r2, [r7, #4]
 c00253c:	62da      	str	r2, [r3, #44]	; 0x2c
           break;
 c00253e:	e018      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_HALFCPLT_CB_ID:
           hdma->XferHalfCpltCallback = pCallback;
 c002540:	68fb      	ldr	r3, [r7, #12]
 c002542:	687a      	ldr	r2, [r7, #4]
 c002544:	631a      	str	r2, [r3, #48]	; 0x30
           break;
 c002546:	e014      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1CPLT_CB_ID:
           hdma->XferM1CpltCallback = pCallback;
 c002548:	68fb      	ldr	r3, [r7, #12]
 c00254a:	687a      	ldr	r2, [r7, #4]
 c00254c:	635a      	str	r2, [r3, #52]	; 0x34
           break;
 c00254e:	e010      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_M1HALFCPLT_CB_ID:
           hdma->XferM1HalfCpltCallback = pCallback;
 c002550:	68fb      	ldr	r3, [r7, #12]
 c002552:	687a      	ldr	r2, [r7, #4]
 c002554:	639a      	str	r2, [r3, #56]	; 0x38
           break;
 c002556:	e00c      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ERROR_CB_ID:
           hdma->XferErrorCallback = pCallback;
 c002558:	68fb      	ldr	r3, [r7, #12]
 c00255a:	687a      	ldr	r2, [r7, #4]
 c00255c:	63da      	str	r2, [r3, #60]	; 0x3c
           break;
 c00255e:	e008      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     case  HAL_DMA_XFER_ABORT_CB_ID:
           hdma->XferAbortCallback = pCallback;
 c002560:	68fb      	ldr	r3, [r7, #12]
 c002562:	687a      	ldr	r2, [r7, #4]
 c002564:	641a      	str	r2, [r3, #64]	; 0x40
           break;
 c002566:	e004      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>

     default:
           status = HAL_ERROR;
 c002568:	2301      	movs	r3, #1
 c00256a:	75fb      	strb	r3, [r7, #23]
           break;
 c00256c:	e001      	b.n	c002572 <HAL_DMA_RegisterCallback+0x92>
    }
  }
  else
  {
    status = HAL_ERROR;
 c00256e:	2301      	movs	r3, #1
 c002570:	75fb      	strb	r3, [r7, #23]
  }

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 c002572:	68fb      	ldr	r3, [r7, #12]
 c002574:	2200      	movs	r2, #0
 c002576:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 c00257a:	7dfb      	ldrb	r3, [r7, #23]
}
 c00257c:	4618      	mov	r0, r3
 c00257e:	371c      	adds	r7, #28
 c002580:	46bd      	mov	sp, r7
 c002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002586:	4770      	bx	lr

0c002588 <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c002588:	b480      	push	{r7}
 c00258a:	b087      	sub	sp, #28
 c00258c:	af00      	add	r7, sp, #0
 c00258e:	6078      	str	r0, [r7, #4]
 c002590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c002592:	2300      	movs	r3, #0
 c002594:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	2b00      	cmp	r3, #0
 c00259a:	d103      	bne.n	c0025a4 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c00259c:	2301      	movs	r3, #1
 c00259e:	75fb      	strb	r3, [r7, #23]
    return status;
 c0025a0:	7dfb      	ldrb	r3, [r7, #23]
 c0025a2:	e073      	b.n	c00268c <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c0025a4:	687b      	ldr	r3, [r7, #4]
 c0025a6:	681b      	ldr	r3, [r3, #0]
 c0025a8:	681b      	ldr	r3, [r3, #0]
 c0025aa:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c0025ac:	683b      	ldr	r3, [r7, #0]
 c0025ae:	f003 0310 	and.w	r3, r3, #16
 c0025b2:	2b00      	cmp	r3, #0
 c0025b4:	d00d      	beq.n	c0025d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c0025b6:	683b      	ldr	r3, [r7, #0]
 c0025b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0025bc:	2b00      	cmp	r3, #0
 c0025be:	d004      	beq.n	c0025ca <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c0025c0:	693b      	ldr	r3, [r7, #16]
 c0025c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c0025c6:	613b      	str	r3, [r7, #16]
 c0025c8:	e003      	b.n	c0025d2 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c0025ca:	693b      	ldr	r3, [r7, #16]
 c0025cc:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c0025d0:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c0025d2:	687b      	ldr	r3, [r7, #4]
 c0025d4:	681b      	ldr	r3, [r3, #0]
 c0025d6:	681b      	ldr	r3, [r3, #0]
 c0025d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0025dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c0025e0:	d103      	bne.n	c0025ea <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c0025e2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c0025e6:	60fb      	str	r3, [r7, #12]
 c0025e8:	e001      	b.n	c0025ee <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c0025ea:	2300      	movs	r3, #0
 c0025ec:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c0025ee:	683b      	ldr	r3, [r7, #0]
 c0025f0:	f003 0302 	and.w	r3, r3, #2
 c0025f4:	2b00      	cmp	r3, #0
 c0025f6:	d012      	beq.n	c00261e <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c0025f8:	683b      	ldr	r3, [r7, #0]
 c0025fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0025fe:	2b00      	cmp	r3, #0
 c002600:	d007      	beq.n	c002612 <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c002602:	693b      	ldr	r3, [r7, #16]
 c002604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c002608:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c00260a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c00260e:	60fb      	str	r3, [r7, #12]
 c002610:	e005      	b.n	c00261e <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c002612:	693b      	ldr	r3, [r7, #16]
 c002614:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c002618:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c00261a:	2300      	movs	r3, #0
 c00261c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c00261e:	683b      	ldr	r3, [r7, #0]
 c002620:	f003 0304 	and.w	r3, r3, #4
 c002624:	2b00      	cmp	r3, #0
 c002626:	d013      	beq.n	c002650 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c002628:	683b      	ldr	r3, [r7, #0]
 c00262a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c00262e:	2b00      	cmp	r3, #0
 c002630:	d00a      	beq.n	c002648 <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c002632:	68fb      	ldr	r3, [r7, #12]
 c002634:	2b00      	cmp	r3, #0
 c002636:	d102      	bne.n	c00263e <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c002638:	2301      	movs	r3, #1
 c00263a:	75fb      	strb	r3, [r7, #23]
 c00263c:	e008      	b.n	c002650 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c00263e:	693b      	ldr	r3, [r7, #16]
 c002640:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c002644:	613b      	str	r3, [r7, #16]
 c002646:	e003      	b.n	c002650 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c002648:	693b      	ldr	r3, [r7, #16]
 c00264a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00264e:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c002650:	683b      	ldr	r3, [r7, #0]
 c002652:	f003 0308 	and.w	r3, r3, #8
 c002656:	2b00      	cmp	r3, #0
 c002658:	d013      	beq.n	c002682 <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c00265a:	683b      	ldr	r3, [r7, #0]
 c00265c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c002660:	2b00      	cmp	r3, #0
 c002662:	d00a      	beq.n	c00267a <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c002664:	68fb      	ldr	r3, [r7, #12]
 c002666:	2b00      	cmp	r3, #0
 c002668:	d102      	bne.n	c002670 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c00266a:	2301      	movs	r3, #1
 c00266c:	75fb      	strb	r3, [r7, #23]
 c00266e:	e008      	b.n	c002682 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c002670:	693b      	ldr	r3, [r7, #16]
 c002672:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c002676:	613b      	str	r3, [r7, #16]
 c002678:	e003      	b.n	c002682 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c00267a:	693b      	ldr	r3, [r7, #16]
 c00267c:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c002680:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c002682:	687b      	ldr	r3, [r7, #4]
 c002684:	681b      	ldr	r3, [r3, #0]
 c002686:	693a      	ldr	r2, [r7, #16]
 c002688:	601a      	str	r2, [r3, #0]

  return status;
 c00268a:	7dfb      	ldrb	r3, [r7, #23]
}
 c00268c:	4618      	mov	r0, r3
 c00268e:	371c      	adds	r7, #28
 c002690:	46bd      	mov	sp, r7
 c002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002696:	4770      	bx	lr

0c002698 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c002698:	b480      	push	{r7}
 c00269a:	b085      	sub	sp, #20
 c00269c:	af00      	add	r7, sp, #0
 c00269e:	60f8      	str	r0, [r7, #12]
 c0026a0:	60b9      	str	r1, [r7, #8]
 c0026a2:	607a      	str	r2, [r7, #4]
 c0026a4:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c0026a6:	68fb      	ldr	r3, [r7, #12]
 c0026a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0026aa:	68fa      	ldr	r2, [r7, #12]
 c0026ac:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0026ae:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c0026b0:	68fb      	ldr	r3, [r7, #12]
 c0026b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0026b4:	2b00      	cmp	r3, #0
 c0026b6:	d004      	beq.n	c0026c2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0026b8:	68fb      	ldr	r3, [r7, #12]
 c0026ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0026bc:	68fa      	ldr	r2, [r7, #12]
 c0026be:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0026c0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c0026c2:	68fb      	ldr	r3, [r7, #12]
 c0026c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0026c6:	f003 021c 	and.w	r2, r3, #28
 c0026ca:	68fb      	ldr	r3, [r7, #12]
 c0026cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0026ce:	2101      	movs	r1, #1
 c0026d0:	fa01 f202 	lsl.w	r2, r1, r2
 c0026d4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c0026d6:	68fb      	ldr	r3, [r7, #12]
 c0026d8:	681b      	ldr	r3, [r3, #0]
 c0026da:	683a      	ldr	r2, [r7, #0]
 c0026dc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c0026de:	68fb      	ldr	r3, [r7, #12]
 c0026e0:	689b      	ldr	r3, [r3, #8]
 c0026e2:	2b10      	cmp	r3, #16
 c0026e4:	d108      	bne.n	c0026f8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c0026e6:	68fb      	ldr	r3, [r7, #12]
 c0026e8:	681b      	ldr	r3, [r3, #0]
 c0026ea:	687a      	ldr	r2, [r7, #4]
 c0026ec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c0026ee:	68fb      	ldr	r3, [r7, #12]
 c0026f0:	681b      	ldr	r3, [r3, #0]
 c0026f2:	68ba      	ldr	r2, [r7, #8]
 c0026f4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c0026f6:	e007      	b.n	c002708 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c0026f8:	68fb      	ldr	r3, [r7, #12]
 c0026fa:	681b      	ldr	r3, [r3, #0]
 c0026fc:	68ba      	ldr	r2, [r7, #8]
 c0026fe:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c002700:	68fb      	ldr	r3, [r7, #12]
 c002702:	681b      	ldr	r3, [r3, #0]
 c002704:	687a      	ldr	r2, [r7, #4]
 c002706:	60da      	str	r2, [r3, #12]
}
 c002708:	bf00      	nop
 c00270a:	3714      	adds	r7, #20
 c00270c:	46bd      	mov	sp, r7
 c00270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002712:	4770      	bx	lr

0c002714 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002714:	b480      	push	{r7}
 c002716:	b085      	sub	sp, #20
 c002718:	af00      	add	r7, sp, #0
 c00271a:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c00271c:	687b      	ldr	r3, [r7, #4]
 c00271e:	681b      	ldr	r3, [r3, #0]
 c002720:	461a      	mov	r2, r3
 c002722:	4b17      	ldr	r3, [pc, #92]	; (c002780 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c002724:	429a      	cmp	r2, r3
 c002726:	d80a      	bhi.n	c00273e <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c002728:	687b      	ldr	r3, [r7, #4]
 c00272a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00272c:	089b      	lsrs	r3, r3, #2
 c00272e:	009b      	lsls	r3, r3, #2
 c002730:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c002734:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c002738:	687a      	ldr	r2, [r7, #4]
 c00273a:	6513      	str	r3, [r2, #80]	; 0x50
 c00273c:	e007      	b.n	c00274e <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c00273e:	687b      	ldr	r3, [r7, #4]
 c002740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c002742:	089b      	lsrs	r3, r3, #2
 c002744:	009a      	lsls	r2, r3, #2
 c002746:	4b0f      	ldr	r3, [pc, #60]	; (c002784 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c002748:	4413      	add	r3, r2
 c00274a:	687a      	ldr	r2, [r7, #4]
 c00274c:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c00274e:	687b      	ldr	r3, [r7, #4]
 c002750:	681b      	ldr	r3, [r3, #0]
 c002752:	b2db      	uxtb	r3, r3
 c002754:	3b08      	subs	r3, #8
 c002756:	4a0c      	ldr	r2, [pc, #48]	; (c002788 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c002758:	fba2 2303 	umull	r2, r3, r2, r3
 c00275c:	091b      	lsrs	r3, r3, #4
 c00275e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c002760:	687b      	ldr	r3, [r7, #4]
 c002762:	4a0a      	ldr	r2, [pc, #40]	; (c00278c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c002764:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c002766:	68fb      	ldr	r3, [r7, #12]
 c002768:	f003 031f 	and.w	r3, r3, #31
 c00276c:	2201      	movs	r2, #1
 c00276e:	409a      	lsls	r2, r3
 c002770:	687b      	ldr	r3, [r7, #4]
 c002772:	659a      	str	r2, [r3, #88]	; 0x58
}
 c002774:	bf00      	nop
 c002776:	3714      	adds	r7, #20
 c002778:	46bd      	mov	sp, r7
 c00277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00277e:	4770      	bx	lr
 c002780:	50020407 	.word	0x50020407
 c002784:	50020820 	.word	0x50020820
 c002788:	cccccccd 	.word	0xcccccccd
 c00278c:	50020880 	.word	0x50020880

0c002790 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c002790:	b480      	push	{r7}
 c002792:	b085      	sub	sp, #20
 c002794:	af00      	add	r7, sp, #0
 c002796:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c002798:	687b      	ldr	r3, [r7, #4]
 c00279a:	685b      	ldr	r3, [r3, #4]
 c00279c:	b2db      	uxtb	r3, r3
 c00279e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c0027a0:	68fa      	ldr	r2, [r7, #12]
 c0027a2:	4b0b      	ldr	r3, [pc, #44]	; (c0027d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c0027a4:	4413      	add	r3, r2
 c0027a6:	009b      	lsls	r3, r3, #2
 c0027a8:	461a      	mov	r2, r3
 c0027aa:	687b      	ldr	r3, [r7, #4]
 c0027ac:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c0027ae:	687b      	ldr	r3, [r7, #4]
 c0027b0:	4a08      	ldr	r2, [pc, #32]	; (c0027d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c0027b2:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c0027b4:	68fb      	ldr	r3, [r7, #12]
 c0027b6:	3b01      	subs	r3, #1
 c0027b8:	f003 0303 	and.w	r3, r3, #3
 c0027bc:	2201      	movs	r2, #1
 c0027be:	409a      	lsls	r2, r3
 c0027c0:	687b      	ldr	r3, [r7, #4]
 c0027c2:	665a      	str	r2, [r3, #100]	; 0x64
}
 c0027c4:	bf00      	nop
 c0027c6:	3714      	adds	r7, #20
 c0027c8:	46bd      	mov	sp, r7
 c0027ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0027ce:	4770      	bx	lr
 c0027d0:	1400823f 	.word	0x1400823f
 c0027d4:	50020940 	.word	0x50020940

0c0027d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c0027d8:	b480      	push	{r7}
 c0027da:	b087      	sub	sp, #28
 c0027dc:	af00      	add	r7, sp, #0
 c0027de:	6078      	str	r0, [r7, #4]
 c0027e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c0027e2:	2300      	movs	r3, #0
 c0027e4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0027e6:	e158      	b.n	c002a9a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c0027e8:	683b      	ldr	r3, [r7, #0]
 c0027ea:	681a      	ldr	r2, [r3, #0]
 c0027ec:	2101      	movs	r1, #1
 c0027ee:	697b      	ldr	r3, [r7, #20]
 c0027f0:	fa01 f303 	lsl.w	r3, r1, r3
 c0027f4:	4013      	ands	r3, r2
 c0027f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c0027f8:	68fb      	ldr	r3, [r7, #12]
 c0027fa:	2b00      	cmp	r3, #0
 c0027fc:	f000 814a 	beq.w	c002a94 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c002800:	683b      	ldr	r3, [r7, #0]
 c002802:	685b      	ldr	r3, [r3, #4]
 c002804:	f003 0303 	and.w	r3, r3, #3
 c002808:	2b01      	cmp	r3, #1
 c00280a:	d005      	beq.n	c002818 <HAL_GPIO_Init+0x40>
 c00280c:	683b      	ldr	r3, [r7, #0]
 c00280e:	685b      	ldr	r3, [r3, #4]
 c002810:	f003 0303 	and.w	r3, r3, #3
 c002814:	2b02      	cmp	r3, #2
 c002816:	d130      	bne.n	c00287a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c002818:	687b      	ldr	r3, [r7, #4]
 c00281a:	689b      	ldr	r3, [r3, #8]
 c00281c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c00281e:	697b      	ldr	r3, [r7, #20]
 c002820:	005b      	lsls	r3, r3, #1
 c002822:	2203      	movs	r2, #3
 c002824:	fa02 f303 	lsl.w	r3, r2, r3
 c002828:	43db      	mvns	r3, r3
 c00282a:	693a      	ldr	r2, [r7, #16]
 c00282c:	4013      	ands	r3, r2
 c00282e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c002830:	683b      	ldr	r3, [r7, #0]
 c002832:	68da      	ldr	r2, [r3, #12]
 c002834:	697b      	ldr	r3, [r7, #20]
 c002836:	005b      	lsls	r3, r3, #1
 c002838:	fa02 f303 	lsl.w	r3, r2, r3
 c00283c:	693a      	ldr	r2, [r7, #16]
 c00283e:	4313      	orrs	r3, r2
 c002840:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c002842:	687b      	ldr	r3, [r7, #4]
 c002844:	693a      	ldr	r2, [r7, #16]
 c002846:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c002848:	687b      	ldr	r3, [r7, #4]
 c00284a:	685b      	ldr	r3, [r3, #4]
 c00284c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c00284e:	2201      	movs	r2, #1
 c002850:	697b      	ldr	r3, [r7, #20]
 c002852:	fa02 f303 	lsl.w	r3, r2, r3
 c002856:	43db      	mvns	r3, r3
 c002858:	693a      	ldr	r2, [r7, #16]
 c00285a:	4013      	ands	r3, r2
 c00285c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c00285e:	683b      	ldr	r3, [r7, #0]
 c002860:	685b      	ldr	r3, [r3, #4]
 c002862:	091b      	lsrs	r3, r3, #4
 c002864:	f003 0201 	and.w	r2, r3, #1
 c002868:	697b      	ldr	r3, [r7, #20]
 c00286a:	fa02 f303 	lsl.w	r3, r2, r3
 c00286e:	693a      	ldr	r2, [r7, #16]
 c002870:	4313      	orrs	r3, r2
 c002872:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c002874:	687b      	ldr	r3, [r7, #4]
 c002876:	693a      	ldr	r2, [r7, #16]
 c002878:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c00287a:	683b      	ldr	r3, [r7, #0]
 c00287c:	685b      	ldr	r3, [r3, #4]
 c00287e:	f003 0303 	and.w	r3, r3, #3
 c002882:	2b03      	cmp	r3, #3
 c002884:	d017      	beq.n	c0028b6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c002886:	687b      	ldr	r3, [r7, #4]
 c002888:	68db      	ldr	r3, [r3, #12]
 c00288a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c00288c:	697b      	ldr	r3, [r7, #20]
 c00288e:	005b      	lsls	r3, r3, #1
 c002890:	2203      	movs	r2, #3
 c002892:	fa02 f303 	lsl.w	r3, r2, r3
 c002896:	43db      	mvns	r3, r3
 c002898:	693a      	ldr	r2, [r7, #16]
 c00289a:	4013      	ands	r3, r2
 c00289c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c00289e:	683b      	ldr	r3, [r7, #0]
 c0028a0:	689a      	ldr	r2, [r3, #8]
 c0028a2:	697b      	ldr	r3, [r7, #20]
 c0028a4:	005b      	lsls	r3, r3, #1
 c0028a6:	fa02 f303 	lsl.w	r3, r2, r3
 c0028aa:	693a      	ldr	r2, [r7, #16]
 c0028ac:	4313      	orrs	r3, r2
 c0028ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c0028b0:	687b      	ldr	r3, [r7, #4]
 c0028b2:	693a      	ldr	r2, [r7, #16]
 c0028b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c0028b6:	683b      	ldr	r3, [r7, #0]
 c0028b8:	685b      	ldr	r3, [r3, #4]
 c0028ba:	f003 0303 	and.w	r3, r3, #3
 c0028be:	2b02      	cmp	r3, #2
 c0028c0:	d123      	bne.n	c00290a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c0028c2:	697b      	ldr	r3, [r7, #20]
 c0028c4:	08da      	lsrs	r2, r3, #3
 c0028c6:	687b      	ldr	r3, [r7, #4]
 c0028c8:	3208      	adds	r2, #8
 c0028ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c0028ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c0028d0:	697b      	ldr	r3, [r7, #20]
 c0028d2:	f003 0307 	and.w	r3, r3, #7
 c0028d6:	009b      	lsls	r3, r3, #2
 c0028d8:	220f      	movs	r2, #15
 c0028da:	fa02 f303 	lsl.w	r3, r2, r3
 c0028de:	43db      	mvns	r3, r3
 c0028e0:	693a      	ldr	r2, [r7, #16]
 c0028e2:	4013      	ands	r3, r2
 c0028e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c0028e6:	683b      	ldr	r3, [r7, #0]
 c0028e8:	691a      	ldr	r2, [r3, #16]
 c0028ea:	697b      	ldr	r3, [r7, #20]
 c0028ec:	f003 0307 	and.w	r3, r3, #7
 c0028f0:	009b      	lsls	r3, r3, #2
 c0028f2:	fa02 f303 	lsl.w	r3, r2, r3
 c0028f6:	693a      	ldr	r2, [r7, #16]
 c0028f8:	4313      	orrs	r3, r2
 c0028fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c0028fc:	697b      	ldr	r3, [r7, #20]
 c0028fe:	08da      	lsrs	r2, r3, #3
 c002900:	687b      	ldr	r3, [r7, #4]
 c002902:	3208      	adds	r2, #8
 c002904:	6939      	ldr	r1, [r7, #16]
 c002906:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00290a:	687b      	ldr	r3, [r7, #4]
 c00290c:	681b      	ldr	r3, [r3, #0]
 c00290e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c002910:	697b      	ldr	r3, [r7, #20]
 c002912:	005b      	lsls	r3, r3, #1
 c002914:	2203      	movs	r2, #3
 c002916:	fa02 f303 	lsl.w	r3, r2, r3
 c00291a:	43db      	mvns	r3, r3
 c00291c:	693a      	ldr	r2, [r7, #16]
 c00291e:	4013      	ands	r3, r2
 c002920:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c002922:	683b      	ldr	r3, [r7, #0]
 c002924:	685b      	ldr	r3, [r3, #4]
 c002926:	f003 0203 	and.w	r2, r3, #3
 c00292a:	697b      	ldr	r3, [r7, #20]
 c00292c:	005b      	lsls	r3, r3, #1
 c00292e:	fa02 f303 	lsl.w	r3, r2, r3
 c002932:	693a      	ldr	r2, [r7, #16]
 c002934:	4313      	orrs	r3, r2
 c002936:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c002938:	687b      	ldr	r3, [r7, #4]
 c00293a:	693a      	ldr	r2, [r7, #16]
 c00293c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c00293e:	683b      	ldr	r3, [r7, #0]
 c002940:	685b      	ldr	r3, [r3, #4]
 c002942:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c002946:	2b00      	cmp	r3, #0
 c002948:	f000 80a4 	beq.w	c002a94 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c00294c:	4a5a      	ldr	r2, [pc, #360]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c00294e:	697b      	ldr	r3, [r7, #20]
 c002950:	089b      	lsrs	r3, r3, #2
 c002952:	3318      	adds	r3, #24
 c002954:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c002958:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c00295a:	697b      	ldr	r3, [r7, #20]
 c00295c:	f003 0303 	and.w	r3, r3, #3
 c002960:	00db      	lsls	r3, r3, #3
 c002962:	220f      	movs	r2, #15
 c002964:	fa02 f303 	lsl.w	r3, r2, r3
 c002968:	43db      	mvns	r3, r3
 c00296a:	693a      	ldr	r2, [r7, #16]
 c00296c:	4013      	ands	r3, r2
 c00296e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c002970:	687b      	ldr	r3, [r7, #4]
 c002972:	4a52      	ldr	r2, [pc, #328]	; (c002abc <HAL_GPIO_Init+0x2e4>)
 c002974:	4293      	cmp	r3, r2
 c002976:	d025      	beq.n	c0029c4 <HAL_GPIO_Init+0x1ec>
 c002978:	687b      	ldr	r3, [r7, #4]
 c00297a:	4a51      	ldr	r2, [pc, #324]	; (c002ac0 <HAL_GPIO_Init+0x2e8>)
 c00297c:	4293      	cmp	r3, r2
 c00297e:	d01f      	beq.n	c0029c0 <HAL_GPIO_Init+0x1e8>
 c002980:	687b      	ldr	r3, [r7, #4]
 c002982:	4a50      	ldr	r2, [pc, #320]	; (c002ac4 <HAL_GPIO_Init+0x2ec>)
 c002984:	4293      	cmp	r3, r2
 c002986:	d019      	beq.n	c0029bc <HAL_GPIO_Init+0x1e4>
 c002988:	687b      	ldr	r3, [r7, #4]
 c00298a:	4a4f      	ldr	r2, [pc, #316]	; (c002ac8 <HAL_GPIO_Init+0x2f0>)
 c00298c:	4293      	cmp	r3, r2
 c00298e:	d013      	beq.n	c0029b8 <HAL_GPIO_Init+0x1e0>
 c002990:	687b      	ldr	r3, [r7, #4]
 c002992:	4a4e      	ldr	r2, [pc, #312]	; (c002acc <HAL_GPIO_Init+0x2f4>)
 c002994:	4293      	cmp	r3, r2
 c002996:	d00d      	beq.n	c0029b4 <HAL_GPIO_Init+0x1dc>
 c002998:	687b      	ldr	r3, [r7, #4]
 c00299a:	4a4d      	ldr	r2, [pc, #308]	; (c002ad0 <HAL_GPIO_Init+0x2f8>)
 c00299c:	4293      	cmp	r3, r2
 c00299e:	d007      	beq.n	c0029b0 <HAL_GPIO_Init+0x1d8>
 c0029a0:	687b      	ldr	r3, [r7, #4]
 c0029a2:	4a4c      	ldr	r2, [pc, #304]	; (c002ad4 <HAL_GPIO_Init+0x2fc>)
 c0029a4:	4293      	cmp	r3, r2
 c0029a6:	d101      	bne.n	c0029ac <HAL_GPIO_Init+0x1d4>
 c0029a8:	2306      	movs	r3, #6
 c0029aa:	e00c      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029ac:	2307      	movs	r3, #7
 c0029ae:	e00a      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029b0:	2305      	movs	r3, #5
 c0029b2:	e008      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029b4:	2304      	movs	r3, #4
 c0029b6:	e006      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029b8:	2303      	movs	r3, #3
 c0029ba:	e004      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029bc:	2302      	movs	r3, #2
 c0029be:	e002      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029c0:	2301      	movs	r3, #1
 c0029c2:	e000      	b.n	c0029c6 <HAL_GPIO_Init+0x1ee>
 c0029c4:	2300      	movs	r3, #0
 c0029c6:	697a      	ldr	r2, [r7, #20]
 c0029c8:	f002 0203 	and.w	r2, r2, #3
 c0029cc:	00d2      	lsls	r2, r2, #3
 c0029ce:	4093      	lsls	r3, r2
 c0029d0:	693a      	ldr	r2, [r7, #16]
 c0029d2:	4313      	orrs	r3, r2
 c0029d4:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c0029d6:	4938      	ldr	r1, [pc, #224]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c0029d8:	697b      	ldr	r3, [r7, #20]
 c0029da:	089b      	lsrs	r3, r3, #2
 c0029dc:	3318      	adds	r3, #24
 c0029de:	693a      	ldr	r2, [r7, #16]
 c0029e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c0029e4:	4b34      	ldr	r3, [pc, #208]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c0029e6:	681b      	ldr	r3, [r3, #0]
 c0029e8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0029ea:	68fb      	ldr	r3, [r7, #12]
 c0029ec:	43db      	mvns	r3, r3
 c0029ee:	693a      	ldr	r2, [r7, #16]
 c0029f0:	4013      	ands	r3, r2
 c0029f2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c0029f4:	683b      	ldr	r3, [r7, #0]
 c0029f6:	685b      	ldr	r3, [r3, #4]
 c0029f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0029fc:	2b00      	cmp	r3, #0
 c0029fe:	d003      	beq.n	c002a08 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c002a00:	693a      	ldr	r2, [r7, #16]
 c002a02:	68fb      	ldr	r3, [r7, #12]
 c002a04:	4313      	orrs	r3, r2
 c002a06:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c002a08:	4a2b      	ldr	r2, [pc, #172]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a0a:	693b      	ldr	r3, [r7, #16]
 c002a0c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c002a0e:	4b2a      	ldr	r3, [pc, #168]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a10:	685b      	ldr	r3, [r3, #4]
 c002a12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002a14:	68fb      	ldr	r3, [r7, #12]
 c002a16:	43db      	mvns	r3, r3
 c002a18:	693a      	ldr	r2, [r7, #16]
 c002a1a:	4013      	ands	r3, r2
 c002a1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c002a1e:	683b      	ldr	r3, [r7, #0]
 c002a20:	685b      	ldr	r3, [r3, #4]
 c002a22:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c002a26:	2b00      	cmp	r3, #0
 c002a28:	d003      	beq.n	c002a32 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c002a2a:	693a      	ldr	r2, [r7, #16]
 c002a2c:	68fb      	ldr	r3, [r7, #12]
 c002a2e:	4313      	orrs	r3, r2
 c002a30:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c002a32:	4a21      	ldr	r2, [pc, #132]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a34:	693b      	ldr	r3, [r7, #16]
 c002a36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c002a38:	4b1f      	ldr	r3, [pc, #124]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c002a3e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002a40:	68fb      	ldr	r3, [r7, #12]
 c002a42:	43db      	mvns	r3, r3
 c002a44:	693a      	ldr	r2, [r7, #16]
 c002a46:	4013      	ands	r3, r2
 c002a48:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c002a4a:	683b      	ldr	r3, [r7, #0]
 c002a4c:	685b      	ldr	r3, [r3, #4]
 c002a4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002a52:	2b00      	cmp	r3, #0
 c002a54:	d003      	beq.n	c002a5e <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c002a56:	693a      	ldr	r2, [r7, #16]
 c002a58:	68fb      	ldr	r3, [r7, #12]
 c002a5a:	4313      	orrs	r3, r2
 c002a5c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c002a5e:	4a16      	ldr	r2, [pc, #88]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a60:	693b      	ldr	r3, [r7, #16]
 c002a62:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c002a66:	4b14      	ldr	r3, [pc, #80]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a68:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002a6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002a6e:	68fb      	ldr	r3, [r7, #12]
 c002a70:	43db      	mvns	r3, r3
 c002a72:	693a      	ldr	r2, [r7, #16]
 c002a74:	4013      	ands	r3, r2
 c002a76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c002a78:	683b      	ldr	r3, [r7, #0]
 c002a7a:	685b      	ldr	r3, [r3, #4]
 c002a7c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002a80:	2b00      	cmp	r3, #0
 c002a82:	d003      	beq.n	c002a8c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c002a84:	693a      	ldr	r2, [r7, #16]
 c002a86:	68fb      	ldr	r3, [r7, #12]
 c002a88:	4313      	orrs	r3, r2
 c002a8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c002a8c:	4a0a      	ldr	r2, [pc, #40]	; (c002ab8 <HAL_GPIO_Init+0x2e0>)
 c002a8e:	693b      	ldr	r3, [r7, #16]
 c002a90:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c002a94:	697b      	ldr	r3, [r7, #20]
 c002a96:	3301      	adds	r3, #1
 c002a98:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c002a9a:	683b      	ldr	r3, [r7, #0]
 c002a9c:	681a      	ldr	r2, [r3, #0]
 c002a9e:	697b      	ldr	r3, [r7, #20]
 c002aa0:	fa22 f303 	lsr.w	r3, r2, r3
 c002aa4:	2b00      	cmp	r3, #0
 c002aa6:	f47f ae9f 	bne.w	c0027e8 <HAL_GPIO_Init+0x10>
  }
}
 c002aaa:	bf00      	nop
 c002aac:	bf00      	nop
 c002aae:	371c      	adds	r7, #28
 c002ab0:	46bd      	mov	sp, r7
 c002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ab6:	4770      	bx	lr
 c002ab8:	5002f400 	.word	0x5002f400
 c002abc:	52020000 	.word	0x52020000
 c002ac0:	52020400 	.word	0x52020400
 c002ac4:	52020800 	.word	0x52020800
 c002ac8:	52020c00 	.word	0x52020c00
 c002acc:	52021000 	.word	0x52021000
 c002ad0:	52021400 	.word	0x52021400
 c002ad4:	52021800 	.word	0x52021800

0c002ad8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c002ad8:	b480      	push	{r7}
 c002ada:	b083      	sub	sp, #12
 c002adc:	af00      	add	r7, sp, #0
 c002ade:	6078      	str	r0, [r7, #4]
 c002ae0:	460b      	mov	r3, r1
 c002ae2:	807b      	strh	r3, [r7, #2]
 c002ae4:	4613      	mov	r3, r2
 c002ae6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c002ae8:	787b      	ldrb	r3, [r7, #1]
 c002aea:	2b00      	cmp	r3, #0
 c002aec:	d003      	beq.n	c002af6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002aee:	887a      	ldrh	r2, [r7, #2]
 c002af0:	687b      	ldr	r3, [r7, #4]
 c002af2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c002af4:	e002      	b.n	c002afc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c002af6:	887a      	ldrh	r2, [r7, #2]
 c002af8:	687b      	ldr	r3, [r7, #4]
 c002afa:	629a      	str	r2, [r3, #40]	; 0x28
}
 c002afc:	bf00      	nop
 c002afe:	370c      	adds	r7, #12
 c002b00:	46bd      	mov	sp, r7
 c002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b06:	4770      	bx	lr

0c002b08 <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c002b08:	b480      	push	{r7}
 c002b0a:	b089      	sub	sp, #36	; 0x24
 c002b0c:	af00      	add	r7, sp, #0
 c002b0e:	60f8      	str	r0, [r7, #12]
 c002b10:	460b      	mov	r3, r1
 c002b12:	607a      	str	r2, [r7, #4]
 c002b14:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c002b16:	2300      	movs	r3, #0
 c002b18:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c002b1a:	68fb      	ldr	r3, [r7, #12]
 c002b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002b1e:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c002b20:	e01b      	b.n	c002b5a <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c002b22:	897a      	ldrh	r2, [r7, #10]
 c002b24:	2101      	movs	r1, #1
 c002b26:	69fb      	ldr	r3, [r7, #28]
 c002b28:	fa01 f303 	lsl.w	r3, r1, r3
 c002b2c:	4013      	ands	r3, r2
 c002b2e:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c002b30:	697b      	ldr	r3, [r7, #20]
 c002b32:	2b00      	cmp	r3, #0
 c002b34:	d00e      	beq.n	c002b54 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c002b36:	2201      	movs	r2, #1
 c002b38:	69fb      	ldr	r3, [r7, #28]
 c002b3a:	fa02 f303 	lsl.w	r3, r2, r3
 c002b3e:	43db      	mvns	r3, r3
 c002b40:	69ba      	ldr	r2, [r7, #24]
 c002b42:	4013      	ands	r3, r2
 c002b44:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c002b46:	687a      	ldr	r2, [r7, #4]
 c002b48:	69fb      	ldr	r3, [r7, #28]
 c002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 c002b4e:	69ba      	ldr	r2, [r7, #24]
 c002b50:	4313      	orrs	r3, r2
 c002b52:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c002b54:	69fb      	ldr	r3, [r7, #28]
 c002b56:	3301      	adds	r3, #1
 c002b58:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c002b5a:	897a      	ldrh	r2, [r7, #10]
 c002b5c:	69fb      	ldr	r3, [r7, #28]
 c002b5e:	fa42 f303 	asr.w	r3, r2, r3
 c002b62:	2b00      	cmp	r3, #0
 c002b64:	d1dd      	bne.n	c002b22 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c002b66:	68fb      	ldr	r3, [r7, #12]
 c002b68:	69ba      	ldr	r2, [r7, #24]
 c002b6a:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002b6c:	bf00      	nop
 c002b6e:	3724      	adds	r7, #36	; 0x24
 c002b70:	46bd      	mov	sp, r7
 c002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002b76:	4770      	bx	lr

0c002b78 <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c002b78:	b480      	push	{r7}
 c002b7a:	b085      	sub	sp, #20
 c002b7c:	af00      	add	r7, sp, #0
 c002b7e:	6078      	str	r0, [r7, #4]
 c002b80:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002b82:	683b      	ldr	r3, [r7, #0]
 c002b84:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c002b88:	d216      	bcs.n	c002bb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c002b8a:	687b      	ldr	r3, [r7, #4]
 c002b8c:	0f1b      	lsrs	r3, r3, #28
 c002b8e:	015a      	lsls	r2, r3, #5
 c002b90:	687b      	ldr	r3, [r7, #4]
 c002b92:	f003 031f 	and.w	r3, r3, #31
 c002b96:	4413      	add	r3, r2
 c002b98:	2b32      	cmp	r3, #50	; 0x32
 c002b9a:	d80d      	bhi.n	c002bb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002b9c:	687b      	ldr	r3, [r7, #4]
 c002b9e:	f003 0320 	and.w	r3, r3, #32
 c002ba2:	2b00      	cmp	r3, #0
 c002ba4:	d00a      	beq.n	c002bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c002ba6:	687b      	ldr	r3, [r7, #4]
 c002ba8:	0f1b      	lsrs	r3, r3, #28
 c002baa:	015a      	lsls	r2, r3, #5
 c002bac:	687b      	ldr	r3, [r7, #4]
 c002bae:	f003 031f 	and.w	r3, r3, #31
 c002bb2:	4413      	add	r3, r2
 c002bb4:	2b00      	cmp	r3, #0
 c002bb6:	d001      	beq.n	c002bbc <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c002bb8:	2301      	movs	r3, #1
 c002bba:	e0a8      	b.n	c002d0e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002bbc:	687b      	ldr	r3, [r7, #4]
 c002bbe:	f003 0320 	and.w	r3, r3, #32
 c002bc2:	2b00      	cmp	r3, #0
 c002bc4:	d04e      	beq.n	c002c64 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002bc6:	683a      	ldr	r2, [r7, #0]
 c002bc8:	f240 1301 	movw	r3, #257	; 0x101
 c002bcc:	4013      	ands	r3, r2
 c002bce:	f240 1201 	movw	r2, #257	; 0x101
 c002bd2:	4293      	cmp	r3, r2
 c002bd4:	d10e      	bne.n	c002bf4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002bd6:	4b51      	ldr	r3, [pc, #324]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bd8:	691b      	ldr	r3, [r3, #16]
 c002bda:	4b50      	ldr	r3, [pc, #320]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002bdc:	f04f 32ff 	mov.w	r2, #4294967295
 c002be0:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002be2:	4b4e      	ldr	r3, [pc, #312]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002be4:	695b      	ldr	r3, [r3, #20]
 c002be6:	4a4d      	ldr	r2, [pc, #308]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002be8:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002bec:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c002bf0:	6153      	str	r3, [r2, #20]
 c002bf2:	e00f      	b.n	c002c14 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002bf4:	683b      	ldr	r3, [r7, #0]
 c002bf6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002bfa:	2b00      	cmp	r3, #0
 c002bfc:	d00a      	beq.n	c002c14 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c002bfe:	4b47      	ldr	r3, [pc, #284]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c00:	691b      	ldr	r3, [r3, #16]
 c002c02:	4b46      	ldr	r3, [pc, #280]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c04:	2200      	movs	r2, #0
 c002c06:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002c08:	4b44      	ldr	r3, [pc, #272]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c0a:	695b      	ldr	r3, [r3, #20]
 c002c0c:	4a43      	ldr	r2, [pc, #268]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c0e:	0cdb      	lsrs	r3, r3, #19
 c002c10:	04db      	lsls	r3, r3, #19
 c002c12:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002c14:	683a      	ldr	r2, [r7, #0]
 c002c16:	f240 2302 	movw	r3, #514	; 0x202
 c002c1a:	4013      	ands	r3, r2
 c002c1c:	f240 2202 	movw	r2, #514	; 0x202
 c002c20:	4293      	cmp	r3, r2
 c002c22:	d10e      	bne.n	c002c42 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002c24:	4b3d      	ldr	r3, [pc, #244]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c26:	6a1b      	ldr	r3, [r3, #32]
 c002c28:	4b3c      	ldr	r3, [pc, #240]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c2a:	f04f 32ff 	mov.w	r2, #4294967295
 c002c2e:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002c30:	4b3a      	ldr	r3, [pc, #232]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002c34:	4a39      	ldr	r2, [pc, #228]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c36:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002c3a:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c002c3e:	6253      	str	r3, [r2, #36]	; 0x24
 c002c40:	e064      	b.n	c002d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002c42:	683b      	ldr	r3, [r7, #0]
 c002c44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002c48:	2b00      	cmp	r3, #0
 c002c4a:	d05f      	beq.n	c002d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c002c4c:	4b33      	ldr	r3, [pc, #204]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c4e:	6a1b      	ldr	r3, [r3, #32]
 c002c50:	4b32      	ldr	r3, [pc, #200]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c52:	2200      	movs	r2, #0
 c002c54:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c002c56:	4b31      	ldr	r3, [pc, #196]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002c5a:	4a30      	ldr	r2, [pc, #192]	; (c002d1c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002c5c:	0cdb      	lsrs	r3, r3, #19
 c002c5e:	04db      	lsls	r3, r3, #19
 c002c60:	6253      	str	r3, [r2, #36]	; 0x24
 c002c62:	e053      	b.n	c002d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002c64:	687b      	ldr	r3, [r7, #4]
 c002c66:	0f1a      	lsrs	r2, r3, #28
 c002c68:	4b2d      	ldr	r3, [pc, #180]	; (c002d20 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c002c6a:	4413      	add	r3, r2
 c002c6c:	009b      	lsls	r3, r3, #2
 c002c6e:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002c70:	683a      	ldr	r2, [r7, #0]
 c002c72:	f240 1301 	movw	r3, #257	; 0x101
 c002c76:	4013      	ands	r3, r2
 c002c78:	f240 1201 	movw	r2, #257	; 0x101
 c002c7c:	4293      	cmp	r3, r2
 c002c7e:	d10a      	bne.n	c002c96 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002c80:	68fb      	ldr	r3, [r7, #12]
 c002c82:	6819      	ldr	r1, [r3, #0]
 c002c84:	687b      	ldr	r3, [r7, #4]
 c002c86:	f003 031f 	and.w	r3, r3, #31
 c002c8a:	2201      	movs	r2, #1
 c002c8c:	409a      	lsls	r2, r3
 c002c8e:	68fb      	ldr	r3, [r7, #12]
 c002c90:	430a      	orrs	r2, r1
 c002c92:	601a      	str	r2, [r3, #0]
 c002c94:	e010      	b.n	c002cb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002c96:	683b      	ldr	r3, [r7, #0]
 c002c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002c9c:	2b00      	cmp	r3, #0
 c002c9e:	d00b      	beq.n	c002cb8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002ca0:	68fb      	ldr	r3, [r7, #12]
 c002ca2:	6819      	ldr	r1, [r3, #0]
 c002ca4:	687b      	ldr	r3, [r7, #4]
 c002ca6:	f003 031f 	and.w	r3, r3, #31
 c002caa:	2201      	movs	r2, #1
 c002cac:	fa02 f303 	lsl.w	r3, r2, r3
 c002cb0:	43da      	mvns	r2, r3
 c002cb2:	68fb      	ldr	r3, [r7, #12]
 c002cb4:	400a      	ands	r2, r1
 c002cb6:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002cb8:	687b      	ldr	r3, [r7, #4]
 c002cba:	0f1a      	lsrs	r2, r3, #28
 c002cbc:	4b19      	ldr	r3, [pc, #100]	; (c002d24 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c002cbe:	4413      	add	r3, r2
 c002cc0:	009b      	lsls	r3, r3, #2
 c002cc2:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002cc4:	683a      	ldr	r2, [r7, #0]
 c002cc6:	f240 2302 	movw	r3, #514	; 0x202
 c002cca:	4013      	ands	r3, r2
 c002ccc:	f240 2202 	movw	r2, #514	; 0x202
 c002cd0:	4293      	cmp	r3, r2
 c002cd2:	d10a      	bne.n	c002cea <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002cd4:	68fb      	ldr	r3, [r7, #12]
 c002cd6:	6819      	ldr	r1, [r3, #0]
 c002cd8:	687b      	ldr	r3, [r7, #4]
 c002cda:	f003 031f 	and.w	r3, r3, #31
 c002cde:	2201      	movs	r2, #1
 c002ce0:	409a      	lsls	r2, r3
 c002ce2:	68fb      	ldr	r3, [r7, #12]
 c002ce4:	430a      	orrs	r2, r1
 c002ce6:	601a      	str	r2, [r3, #0]
 c002ce8:	e010      	b.n	c002d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c002cea:	683b      	ldr	r3, [r7, #0]
 c002cec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002cf0:	2b00      	cmp	r3, #0
 c002cf2:	d00b      	beq.n	c002d0c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002cf4:	68fb      	ldr	r3, [r7, #12]
 c002cf6:	6819      	ldr	r1, [r3, #0]
 c002cf8:	687b      	ldr	r3, [r7, #4]
 c002cfa:	f003 031f 	and.w	r3, r3, #31
 c002cfe:	2201      	movs	r2, #1
 c002d00:	fa02 f303 	lsl.w	r3, r2, r3
 c002d04:	43da      	mvns	r2, r3
 c002d06:	68fb      	ldr	r3, [r7, #12]
 c002d08:	400a      	ands	r2, r1
 c002d0a:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c002d0c:	2300      	movs	r3, #0
}
 c002d0e:	4618      	mov	r0, r3
 c002d10:	3714      	adds	r7, #20
 c002d12:	46bd      	mov	sp, r7
 c002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002d18:	4770      	bx	lr
 c002d1a:	bf00      	nop
 c002d1c:	50032400 	.word	0x50032400
 c002d20:	1400c904 	.word	0x1400c904
 c002d24:	1400c908 	.word	0x1400c908

0c002d28 <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c002d28:	b480      	push	{r7}
 c002d2a:	b089      	sub	sp, #36	; 0x24
 c002d2c:	af00      	add	r7, sp, #0
 c002d2e:	6078      	str	r0, [r7, #4]
 c002d30:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002d32:	687b      	ldr	r3, [r7, #4]
 c002d34:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002d38:	d00b      	beq.n	c002d52 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002d3a:	687b      	ldr	r3, [r7, #4]
 c002d3c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002d40:	d007      	beq.n	c002d52 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c002d42:	687b      	ldr	r3, [r7, #4]
 c002d44:	4a36      	ldr	r2, [pc, #216]	; (c002e20 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c002d46:	4293      	cmp	r3, r2
 c002d48:	d003      	beq.n	c002d52 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c002d4a:	687b      	ldr	r3, [r7, #4]
 c002d4c:	4a35      	ldr	r2, [pc, #212]	; (c002e24 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c002d4e:	4293      	cmp	r3, r2
 c002d50:	d111      	bne.n	c002d76 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c002d52:	683b      	ldr	r3, [r7, #0]
 c002d54:	681b      	ldr	r3, [r3, #0]
 c002d56:	2b00      	cmp	r3, #0
 c002d58:	d004      	beq.n	c002d64 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c002d5a:	683b      	ldr	r3, [r7, #0]
 c002d5c:	681b      	ldr	r3, [r3, #0]
 c002d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c002d62:	d108      	bne.n	c002d76 <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002d64:	683b      	ldr	r3, [r7, #0]
 c002d66:	685b      	ldr	r3, [r3, #4]
 c002d68:	2b00      	cmp	r3, #0
 c002d6a:	d006      	beq.n	c002d7a <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002d6c:	683b      	ldr	r3, [r7, #0]
 c002d6e:	685b      	ldr	r3, [r3, #4]
 c002d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002d74:	d001      	beq.n	c002d7a <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c002d76:	2301      	movs	r3, #1
 c002d78:	e04b      	b.n	c002e12 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c002d7a:	683b      	ldr	r3, [r7, #0]
 c002d7c:	685b      	ldr	r3, [r3, #4]
 c002d7e:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002d80:	683b      	ldr	r3, [r7, #0]
 c002d82:	681b      	ldr	r3, [r3, #0]
 c002d84:	693a      	ldr	r2, [r7, #16]
 c002d86:	4313      	orrs	r3, r2
 c002d88:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c002d8a:	687b      	ldr	r3, [r7, #4]
 c002d8c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002d90:	d003      	beq.n	c002d9a <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c002d92:	687b      	ldr	r3, [r7, #4]
 c002d94:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c002d98:	d105      	bne.n	c002da6 <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c002d9a:	4b23      	ldr	r3, [pc, #140]	; (c002e28 <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002d9c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002d9e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c002da2:	61bb      	str	r3, [r7, #24]
 c002da4:	e004      	b.n	c002db0 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c002da6:	4b21      	ldr	r3, [pc, #132]	; (c002e2c <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c002da8:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c002daa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c002dae:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c002db0:	69bb      	ldr	r3, [r7, #24]
 c002db2:	0b5b      	lsrs	r3, r3, #13
 c002db4:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c002db6:	2300      	movs	r3, #0
 c002db8:	617b      	str	r3, [r7, #20]
 c002dba:	e00c      	b.n	c002dd6 <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c002dbc:	683b      	ldr	r3, [r7, #0]
 c002dbe:	697a      	ldr	r2, [r7, #20]
 c002dc0:	3202      	adds	r2, #2
 c002dc2:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c002dc6:	69fb      	ldr	r3, [r7, #28]
 c002dc8:	697a      	ldr	r2, [r7, #20]
 c002dca:	3240      	adds	r2, #64	; 0x40
 c002dcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002dd0:	697b      	ldr	r3, [r7, #20]
 c002dd2:	3301      	adds	r3, #1
 c002dd4:	617b      	str	r3, [r7, #20]
 c002dd6:	697a      	ldr	r2, [r7, #20]
 c002dd8:	68fb      	ldr	r3, [r7, #12]
 c002dda:	429a      	cmp	r2, r3
 c002ddc:	d3ee      	bcc.n	c002dbc <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c002dde:	69fb      	ldr	r3, [r7, #28]
 c002de0:	681b      	ldr	r3, [r3, #0]
 c002de2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c002de6:	693b      	ldr	r3, [r7, #16]
 c002de8:	431a      	orrs	r2, r3
 c002dea:	69fb      	ldr	r3, [r7, #28]
 c002dec:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c002dee:	69bb      	ldr	r3, [r7, #24]
 c002df0:	0b5b      	lsrs	r3, r3, #13
 c002df2:	2201      	movs	r2, #1
 c002df4:	fa02 f303 	lsl.w	r3, r2, r3
 c002df8:	3b01      	subs	r3, #1
 c002dfa:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c002dfc:	69fb      	ldr	r3, [r7, #28]
 c002dfe:	691a      	ldr	r2, [r3, #16]
 c002e00:	68bb      	ldr	r3, [r7, #8]
 c002e02:	43db      	mvns	r3, r3
 c002e04:	401a      	ands	r2, r3
 c002e06:	683b      	ldr	r3, [r7, #0]
 c002e08:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c002e0a:	431a      	orrs	r2, r3
 c002e0c:	69fb      	ldr	r3, [r7, #28]
 c002e0e:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c002e10:	2300      	movs	r3, #0
}
 c002e12:	4618      	mov	r0, r3
 c002e14:	3724      	adds	r7, #36	; 0x24
 c002e16:	46bd      	mov	sp, r7
 c002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e1c:	4770      	bx	lr
 c002e1e:	bf00      	nop
 c002e20:	20030000 	.word	0x20030000
 c002e24:	30030000 	.word	0x30030000
 c002e28:	50032c00 	.word	0x50032c00
 c002e2c:	50033000 	.word	0x50033000

0c002e30 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c002e30:	b480      	push	{r7}
 c002e32:	b085      	sub	sp, #20
 c002e34:	af00      	add	r7, sp, #0
 c002e36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c002e38:	2300      	movs	r3, #0
 c002e3a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c002e3c:	4b0b      	ldr	r3, [pc, #44]	; (c002e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002e3e:	681b      	ldr	r3, [r3, #0]
 c002e40:	f003 0301 	and.w	r3, r3, #1
 c002e44:	2b00      	cmp	r3, #0
 c002e46:	d002      	beq.n	c002e4e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c002e48:	2301      	movs	r3, #1
 c002e4a:	73fb      	strb	r3, [r7, #15]
 c002e4c:	e007      	b.n	c002e5e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c002e4e:	4b07      	ldr	r3, [pc, #28]	; (c002e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002e50:	681b      	ldr	r3, [r3, #0]
 c002e52:	f023 0204 	bic.w	r2, r3, #4
 c002e56:	4905      	ldr	r1, [pc, #20]	; (c002e6c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c002e58:	687b      	ldr	r3, [r7, #4]
 c002e5a:	4313      	orrs	r3, r2
 c002e5c:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002e5e:	7bfb      	ldrb	r3, [r7, #15]
}
 c002e60:	4618      	mov	r0, r3
 c002e62:	3714      	adds	r7, #20
 c002e64:	46bd      	mov	sp, r7
 c002e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e6a:	4770      	bx	lr
 c002e6c:	50030400 	.word	0x50030400

0c002e70 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002e70:	b480      	push	{r7}
 c002e72:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002e74:	4b05      	ldr	r3, [pc, #20]	; (c002e8c <HAL_ICACHE_Enable+0x1c>)
 c002e76:	681b      	ldr	r3, [r3, #0]
 c002e78:	4a04      	ldr	r2, [pc, #16]	; (c002e8c <HAL_ICACHE_Enable+0x1c>)
 c002e7a:	f043 0301 	orr.w	r3, r3, #1
 c002e7e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002e80:	2300      	movs	r3, #0
}
 c002e82:	4618      	mov	r0, r3
 c002e84:	46bd      	mov	sp, r7
 c002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002e8a:	4770      	bx	lr
 c002e8c:	50030400 	.word	0x50030400

0c002e90 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002e90:	b480      	push	{r7}
 c002e92:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c002e94:	4b04      	ldr	r3, [pc, #16]	; (c002ea8 <HAL_PWREx_GetVoltageRange+0x18>)
 c002e96:	681b      	ldr	r3, [r3, #0]
 c002e98:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c002e9c:	4618      	mov	r0, r3
 c002e9e:	46bd      	mov	sp, r7
 c002ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002ea4:	4770      	bx	lr
 c002ea6:	bf00      	nop
 c002ea8:	50007000 	.word	0x50007000

0c002eac <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002eac:	b580      	push	{r7, lr}
 c002eae:	b084      	sub	sp, #16
 c002eb0:	af00      	add	r7, sp, #0
 c002eb2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002eb4:	4b27      	ldr	r3, [pc, #156]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002eb6:	681b      	ldr	r3, [r3, #0]
 c002eb8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c002ebc:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c002ebe:	f000 f871 	bl	c002fa4 <HAL_PWREx_SMPS_GetEffectiveMode>
 c002ec2:	4603      	mov	r3, r0
 c002ec4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002ec8:	d101      	bne.n	c002ece <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c002eca:	2301      	movs	r3, #1
 c002ecc:	e03e      	b.n	c002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002ece:	4b21      	ldr	r3, [pc, #132]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002ed0:	68db      	ldr	r3, [r3, #12]
 c002ed2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002ed6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c002eda:	d101      	bne.n	c002ee0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c002edc:	2301      	movs	r3, #1
 c002ede:	e035      	b.n	c002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002ee0:	68ba      	ldr	r2, [r7, #8]
 c002ee2:	687b      	ldr	r3, [r7, #4]
 c002ee4:	429a      	cmp	r2, r3
 c002ee6:	d101      	bne.n	c002eec <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c002ee8:	2300      	movs	r3, #0
 c002eea:	e02f      	b.n	c002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002eec:	4b19      	ldr	r3, [pc, #100]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002eee:	681b      	ldr	r3, [r3, #0]
 c002ef0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c002ef4:	4917      	ldr	r1, [pc, #92]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002ef6:	687b      	ldr	r3, [r7, #4]
 c002ef8:	4313      	orrs	r3, r2
 c002efa:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c002efc:	4b16      	ldr	r3, [pc, #88]	; (c002f58 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c002efe:	681b      	ldr	r3, [r3, #0]
 c002f00:	095b      	lsrs	r3, r3, #5
 c002f02:	4a16      	ldr	r2, [pc, #88]	; (c002f5c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c002f04:	fba2 2303 	umull	r2, r3, r2, r3
 c002f08:	09db      	lsrs	r3, r3, #7
 c002f0a:	2232      	movs	r2, #50	; 0x32
 c002f0c:	fb02 f303 	mul.w	r3, r2, r3
 c002f10:	4a13      	ldr	r2, [pc, #76]	; (c002f60 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c002f12:	fba2 2303 	umull	r2, r3, r2, r3
 c002f16:	08db      	lsrs	r3, r3, #3
 c002f18:	3301      	adds	r3, #1
 c002f1a:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002f1c:	e002      	b.n	c002f24 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c002f1e:	68fb      	ldr	r3, [r7, #12]
 c002f20:	3b01      	subs	r3, #1
 c002f22:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c002f24:	4b0b      	ldr	r3, [pc, #44]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f26:	695b      	ldr	r3, [r3, #20]
 c002f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002f30:	d102      	bne.n	c002f38 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c002f32:	68fb      	ldr	r3, [r7, #12]
 c002f34:	2b00      	cmp	r3, #0
 c002f36:	d1f2      	bne.n	c002f1e <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c002f38:	4b06      	ldr	r3, [pc, #24]	; (c002f54 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002f3a:	695b      	ldr	r3, [r3, #20]
 c002f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c002f44:	d101      	bne.n	c002f4a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c002f46:	2303      	movs	r3, #3
 c002f48:	e000      	b.n	c002f4c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c002f4a:	2300      	movs	r3, #0
}
 c002f4c:	4618      	mov	r0, r3
 c002f4e:	3710      	adds	r7, #16
 c002f50:	46bd      	mov	sp, r7
 c002f52:	bd80      	pop	{r7, pc}
 c002f54:	50007000 	.word	0x50007000
 c002f58:	30000000 	.word	0x30000000
 c002f5c:	0a7c5ac5 	.word	0x0a7c5ac5
 c002f60:	cccccccd 	.word	0xcccccccd

0c002f64 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c002f64:	b480      	push	{r7}
 c002f66:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c002f68:	4b05      	ldr	r3, [pc, #20]	; (c002f80 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002f6a:	685b      	ldr	r3, [r3, #4]
 c002f6c:	4a04      	ldr	r2, [pc, #16]	; (c002f80 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002f6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c002f72:	6053      	str	r3, [r2, #4]
}
 c002f74:	bf00      	nop
 c002f76:	46bd      	mov	sp, r7
 c002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f7c:	4770      	bx	lr
 c002f7e:	bf00      	nop
 c002f80:	50007000 	.word	0x50007000

0c002f84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c002f84:	b480      	push	{r7}
 c002f86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c002f88:	4b05      	ldr	r3, [pc, #20]	; (c002fa0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002f8a:	689b      	ldr	r3, [r3, #8]
 c002f8c:	4a04      	ldr	r2, [pc, #16]	; (c002fa0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002f8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002f92:	6093      	str	r3, [r2, #8]
}
 c002f94:	bf00      	nop
 c002f96:	46bd      	mov	sp, r7
 c002f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002f9c:	4770      	bx	lr
 c002f9e:	bf00      	nop
 c002fa0:	50007000 	.word	0x50007000

0c002fa4 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c002fa4:	b480      	push	{r7}
 c002fa6:	b083      	sub	sp, #12
 c002fa8:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c002faa:	4b0f      	ldr	r3, [pc, #60]	; (c002fe8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c002fac:	691b      	ldr	r3, [r3, #16]
 c002fae:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c002fb0:	683b      	ldr	r3, [r7, #0]
 c002fb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c002fb6:	2b00      	cmp	r3, #0
 c002fb8:	d003      	beq.n	c002fc2 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c002fba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002fbe:	607b      	str	r3, [r7, #4]
 c002fc0:	e00a      	b.n	c002fd8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c002fc2:	683b      	ldr	r3, [r7, #0]
 c002fc4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c002fc8:	2b00      	cmp	r3, #0
 c002fca:	d103      	bne.n	c002fd4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c002fcc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002fd0:	607b      	str	r3, [r7, #4]
 c002fd2:	e001      	b.n	c002fd8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c002fd4:	2300      	movs	r3, #0
 c002fd6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c002fd8:	687b      	ldr	r3, [r7, #4]
}
 c002fda:	4618      	mov	r0, r3
 c002fdc:	370c      	adds	r7, #12
 c002fde:	46bd      	mov	sp, r7
 c002fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002fe4:	4770      	bx	lr
 c002fe6:	bf00      	nop
 c002fe8:	50007000 	.word	0x50007000

0c002fec <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c002fec:	b580      	push	{r7, lr}
 c002fee:	b088      	sub	sp, #32
 c002ff0:	af00      	add	r7, sp, #0
 c002ff2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c002ff4:	687b      	ldr	r3, [r7, #4]
 c002ff6:	2b00      	cmp	r3, #0
 c002ff8:	d102      	bne.n	c003000 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c002ffa:	2301      	movs	r3, #1
 c002ffc:	f000 bcc2 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003000:	4b99      	ldr	r3, [pc, #612]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003002:	689b      	ldr	r3, [r3, #8]
 c003004:	f003 030c 	and.w	r3, r3, #12
 c003008:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c00300a:	4b97      	ldr	r3, [pc, #604]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00300c:	68db      	ldr	r3, [r3, #12]
 c00300e:	f003 0303 	and.w	r3, r3, #3
 c003012:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c003014:	687b      	ldr	r3, [r7, #4]
 c003016:	681b      	ldr	r3, [r3, #0]
 c003018:	f003 0310 	and.w	r3, r3, #16
 c00301c:	2b00      	cmp	r3, #0
 c00301e:	f000 80e9 	beq.w	c0031f4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003022:	69bb      	ldr	r3, [r7, #24]
 c003024:	2b00      	cmp	r3, #0
 c003026:	d006      	beq.n	c003036 <HAL_RCC_OscConfig+0x4a>
 c003028:	69bb      	ldr	r3, [r7, #24]
 c00302a:	2b0c      	cmp	r3, #12
 c00302c:	f040 8083 	bne.w	c003136 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c003030:	697b      	ldr	r3, [r7, #20]
 c003032:	2b01      	cmp	r3, #1
 c003034:	d17f      	bne.n	c003136 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c003036:	4b8c      	ldr	r3, [pc, #560]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003038:	681b      	ldr	r3, [r3, #0]
 c00303a:	f003 0302 	and.w	r3, r3, #2
 c00303e:	2b00      	cmp	r3, #0
 c003040:	d006      	beq.n	c003050 <HAL_RCC_OscConfig+0x64>
 c003042:	687b      	ldr	r3, [r7, #4]
 c003044:	69db      	ldr	r3, [r3, #28]
 c003046:	2b00      	cmp	r3, #0
 c003048:	d102      	bne.n	c003050 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c00304a:	2301      	movs	r3, #1
 c00304c:	f000 bc9a 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c003050:	687b      	ldr	r3, [r7, #4]
 c003052:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c003054:	4b84      	ldr	r3, [pc, #528]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003056:	681b      	ldr	r3, [r3, #0]
 c003058:	f003 0308 	and.w	r3, r3, #8
 c00305c:	2b00      	cmp	r3, #0
 c00305e:	d004      	beq.n	c00306a <HAL_RCC_OscConfig+0x7e>
 c003060:	4b81      	ldr	r3, [pc, #516]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003062:	681b      	ldr	r3, [r3, #0]
 c003064:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003068:	e005      	b.n	c003076 <HAL_RCC_OscConfig+0x8a>
 c00306a:	4b7f      	ldr	r3, [pc, #508]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00306c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003070:	091b      	lsrs	r3, r3, #4
 c003072:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003076:	4293      	cmp	r3, r2
 c003078:	d224      	bcs.n	c0030c4 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00307a:	687b      	ldr	r3, [r7, #4]
 c00307c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00307e:	4618      	mov	r0, r3
 c003080:	f000 fe9c 	bl	c003dbc <RCC_SetFlashLatencyFromMSIRange>
 c003084:	4603      	mov	r3, r0
 c003086:	2b00      	cmp	r3, #0
 c003088:	d002      	beq.n	c003090 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00308a:	2301      	movs	r3, #1
 c00308c:	f000 bc7a 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c003090:	4b75      	ldr	r3, [pc, #468]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003092:	681b      	ldr	r3, [r3, #0]
 c003094:	4a74      	ldr	r2, [pc, #464]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003096:	f043 0308 	orr.w	r3, r3, #8
 c00309a:	6013      	str	r3, [r2, #0]
 c00309c:	4b72      	ldr	r3, [pc, #456]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00309e:	681b      	ldr	r3, [r3, #0]
 c0030a0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0030a4:	687b      	ldr	r3, [r7, #4]
 c0030a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0030a8:	496f      	ldr	r1, [pc, #444]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030aa:	4313      	orrs	r3, r2
 c0030ac:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0030ae:	4b6e      	ldr	r3, [pc, #440]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030b0:	685b      	ldr	r3, [r3, #4]
 c0030b2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0030b6:	687b      	ldr	r3, [r7, #4]
 c0030b8:	6a1b      	ldr	r3, [r3, #32]
 c0030ba:	021b      	lsls	r3, r3, #8
 c0030bc:	496a      	ldr	r1, [pc, #424]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030be:	4313      	orrs	r3, r2
 c0030c0:	604b      	str	r3, [r1, #4]
 c0030c2:	e026      	b.n	c003112 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c0030c4:	4b68      	ldr	r3, [pc, #416]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030c6:	681b      	ldr	r3, [r3, #0]
 c0030c8:	4a67      	ldr	r2, [pc, #412]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030ca:	f043 0308 	orr.w	r3, r3, #8
 c0030ce:	6013      	str	r3, [r2, #0]
 c0030d0:	4b65      	ldr	r3, [pc, #404]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030d2:	681b      	ldr	r3, [r3, #0]
 c0030d4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0030d8:	687b      	ldr	r3, [r7, #4]
 c0030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0030dc:	4962      	ldr	r1, [pc, #392]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030de:	4313      	orrs	r3, r2
 c0030e0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0030e2:	4b61      	ldr	r3, [pc, #388]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030e4:	685b      	ldr	r3, [r3, #4]
 c0030e6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0030ea:	687b      	ldr	r3, [r7, #4]
 c0030ec:	6a1b      	ldr	r3, [r3, #32]
 c0030ee:	021b      	lsls	r3, r3, #8
 c0030f0:	495d      	ldr	r1, [pc, #372]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0030f2:	4313      	orrs	r3, r2
 c0030f4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0030f6:	69bb      	ldr	r3, [r7, #24]
 c0030f8:	2b00      	cmp	r3, #0
 c0030fa:	d10a      	bne.n	c003112 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0030fc:	687b      	ldr	r3, [r7, #4]
 c0030fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003100:	4618      	mov	r0, r3
 c003102:	f000 fe5b 	bl	c003dbc <RCC_SetFlashLatencyFromMSIRange>
 c003106:	4603      	mov	r3, r0
 c003108:	2b00      	cmp	r3, #0
 c00310a:	d002      	beq.n	c003112 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c00310c:	2301      	movs	r3, #1
 c00310e:	f000 bc39 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003112:	f000 fe17 	bl	c003d44 <HAL_RCC_GetHCLKFreq>
 c003116:	4603      	mov	r3, r0
 c003118:	4a54      	ldr	r2, [pc, #336]	; (c00326c <HAL_RCC_OscConfig+0x280>)
 c00311a:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c00311c:	4b54      	ldr	r3, [pc, #336]	; (c003270 <HAL_RCC_OscConfig+0x284>)
 c00311e:	681b      	ldr	r3, [r3, #0]
 c003120:	4618      	mov	r0, r3
 c003122:	f7fe fe4d 	bl	c001dc0 <HAL_InitTick>
 c003126:	4603      	mov	r3, r0
 c003128:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c00312a:	7bfb      	ldrb	r3, [r7, #15]
 c00312c:	2b00      	cmp	r3, #0
 c00312e:	d060      	beq.n	c0031f2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c003130:	7bfb      	ldrb	r3, [r7, #15]
 c003132:	f000 bc27 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c003136:	687b      	ldr	r3, [r7, #4]
 c003138:	69db      	ldr	r3, [r3, #28]
 c00313a:	2b00      	cmp	r3, #0
 c00313c:	d039      	beq.n	c0031b2 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c00313e:	4b4a      	ldr	r3, [pc, #296]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003140:	681b      	ldr	r3, [r3, #0]
 c003142:	4a49      	ldr	r2, [pc, #292]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003144:	f043 0301 	orr.w	r3, r3, #1
 c003148:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00314a:	f7fe fe89 	bl	c001e60 <HAL_GetTick>
 c00314e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003150:	e00f      	b.n	c003172 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c003152:	f7fe fe85 	bl	c001e60 <HAL_GetTick>
 c003156:	4602      	mov	r2, r0
 c003158:	693b      	ldr	r3, [r7, #16]
 c00315a:	1ad3      	subs	r3, r2, r3
 c00315c:	2b02      	cmp	r3, #2
 c00315e:	d908      	bls.n	c003172 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003160:	4b41      	ldr	r3, [pc, #260]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003162:	681b      	ldr	r3, [r3, #0]
 c003164:	f003 0302 	and.w	r3, r3, #2
 c003168:	2b00      	cmp	r3, #0
 c00316a:	d102      	bne.n	c003172 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c00316c:	2303      	movs	r3, #3
 c00316e:	f000 bc09 	b.w	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003172:	4b3d      	ldr	r3, [pc, #244]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003174:	681b      	ldr	r3, [r3, #0]
 c003176:	f003 0302 	and.w	r3, r3, #2
 c00317a:	2b00      	cmp	r3, #0
 c00317c:	d0e9      	beq.n	c003152 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00317e:	4b3a      	ldr	r3, [pc, #232]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003180:	681b      	ldr	r3, [r3, #0]
 c003182:	4a39      	ldr	r2, [pc, #228]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003184:	f043 0308 	orr.w	r3, r3, #8
 c003188:	6013      	str	r3, [r2, #0]
 c00318a:	4b37      	ldr	r3, [pc, #220]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00318c:	681b      	ldr	r3, [r3, #0]
 c00318e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003192:	687b      	ldr	r3, [r7, #4]
 c003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c003196:	4934      	ldr	r1, [pc, #208]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003198:	4313      	orrs	r3, r2
 c00319a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00319c:	4b32      	ldr	r3, [pc, #200]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00319e:	685b      	ldr	r3, [r3, #4]
 c0031a0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0031a4:	687b      	ldr	r3, [r7, #4]
 c0031a6:	6a1b      	ldr	r3, [r3, #32]
 c0031a8:	021b      	lsls	r3, r3, #8
 c0031aa:	492f      	ldr	r1, [pc, #188]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0031ac:	4313      	orrs	r3, r2
 c0031ae:	604b      	str	r3, [r1, #4]
 c0031b0:	e020      	b.n	c0031f4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c0031b2:	4b2d      	ldr	r3, [pc, #180]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0031b4:	681b      	ldr	r3, [r3, #0]
 c0031b6:	4a2c      	ldr	r2, [pc, #176]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0031b8:	f023 0301 	bic.w	r3, r3, #1
 c0031bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0031be:	f7fe fe4f 	bl	c001e60 <HAL_GetTick>
 c0031c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0031c4:	e00e      	b.n	c0031e4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0031c6:	f7fe fe4b 	bl	c001e60 <HAL_GetTick>
 c0031ca:	4602      	mov	r2, r0
 c0031cc:	693b      	ldr	r3, [r7, #16]
 c0031ce:	1ad3      	subs	r3, r2, r3
 c0031d0:	2b02      	cmp	r3, #2
 c0031d2:	d907      	bls.n	c0031e4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0031d4:	4b24      	ldr	r3, [pc, #144]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0031d6:	681b      	ldr	r3, [r3, #0]
 c0031d8:	f003 0302 	and.w	r3, r3, #2
 c0031dc:	2b00      	cmp	r3, #0
 c0031de:	d001      	beq.n	c0031e4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0031e0:	2303      	movs	r3, #3
 c0031e2:	e3cf      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0031e4:	4b20      	ldr	r3, [pc, #128]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c0031e6:	681b      	ldr	r3, [r3, #0]
 c0031e8:	f003 0302 	and.w	r3, r3, #2
 c0031ec:	2b00      	cmp	r3, #0
 c0031ee:	d1ea      	bne.n	c0031c6 <HAL_RCC_OscConfig+0x1da>
 c0031f0:	e000      	b.n	c0031f4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0031f2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0031f4:	687b      	ldr	r3, [r7, #4]
 c0031f6:	681b      	ldr	r3, [r3, #0]
 c0031f8:	f003 0301 	and.w	r3, r3, #1
 c0031fc:	2b00      	cmp	r3, #0
 c0031fe:	d07e      	beq.n	c0032fe <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c003200:	69bb      	ldr	r3, [r7, #24]
 c003202:	2b08      	cmp	r3, #8
 c003204:	d005      	beq.n	c003212 <HAL_RCC_OscConfig+0x226>
 c003206:	69bb      	ldr	r3, [r7, #24]
 c003208:	2b0c      	cmp	r3, #12
 c00320a:	d10e      	bne.n	c00322a <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c00320c:	697b      	ldr	r3, [r7, #20]
 c00320e:	2b03      	cmp	r3, #3
 c003210:	d10b      	bne.n	c00322a <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c003212:	4b15      	ldr	r3, [pc, #84]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003214:	681b      	ldr	r3, [r3, #0]
 c003216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00321a:	2b00      	cmp	r3, #0
 c00321c:	d06e      	beq.n	c0032fc <HAL_RCC_OscConfig+0x310>
 c00321e:	687b      	ldr	r3, [r7, #4]
 c003220:	685b      	ldr	r3, [r3, #4]
 c003222:	2b00      	cmp	r3, #0
 c003224:	d16a      	bne.n	c0032fc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c003226:	2301      	movs	r3, #1
 c003228:	e3ac      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c00322a:	687b      	ldr	r3, [r7, #4]
 c00322c:	685b      	ldr	r3, [r3, #4]
 c00322e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c003232:	d106      	bne.n	c003242 <HAL_RCC_OscConfig+0x256>
 c003234:	4b0c      	ldr	r3, [pc, #48]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003236:	681b      	ldr	r3, [r3, #0]
 c003238:	4a0b      	ldr	r2, [pc, #44]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00323a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00323e:	6013      	str	r3, [r2, #0]
 c003240:	e024      	b.n	c00328c <HAL_RCC_OscConfig+0x2a0>
 c003242:	687b      	ldr	r3, [r7, #4]
 c003244:	685b      	ldr	r3, [r3, #4]
 c003246:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c00324a:	d113      	bne.n	c003274 <HAL_RCC_OscConfig+0x288>
 c00324c:	4b06      	ldr	r3, [pc, #24]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00324e:	681b      	ldr	r3, [r3, #0]
 c003250:	4a05      	ldr	r2, [pc, #20]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c003252:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c003256:	6013      	str	r3, [r2, #0]
 c003258:	4b03      	ldr	r3, [pc, #12]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00325a:	681b      	ldr	r3, [r3, #0]
 c00325c:	4a02      	ldr	r2, [pc, #8]	; (c003268 <HAL_RCC_OscConfig+0x27c>)
 c00325e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003262:	6013      	str	r3, [r2, #0]
 c003264:	e012      	b.n	c00328c <HAL_RCC_OscConfig+0x2a0>
 c003266:	bf00      	nop
 c003268:	50021000 	.word	0x50021000
 c00326c:	30000000 	.word	0x30000000
 c003270:	30000004 	.word	0x30000004
 c003274:	4b8b      	ldr	r3, [pc, #556]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003276:	681b      	ldr	r3, [r3, #0]
 c003278:	4a8a      	ldr	r2, [pc, #552]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00327a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c00327e:	6013      	str	r3, [r2, #0]
 c003280:	4b88      	ldr	r3, [pc, #544]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003282:	681b      	ldr	r3, [r3, #0]
 c003284:	4a87      	ldr	r2, [pc, #540]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003286:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00328a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c00328c:	687b      	ldr	r3, [r7, #4]
 c00328e:	685b      	ldr	r3, [r3, #4]
 c003290:	2b00      	cmp	r3, #0
 c003292:	d019      	beq.n	c0032c8 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003294:	f7fe fde4 	bl	c001e60 <HAL_GetTick>
 c003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00329a:	e00e      	b.n	c0032ba <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c00329c:	f7fe fde0 	bl	c001e60 <HAL_GetTick>
 c0032a0:	4602      	mov	r2, r0
 c0032a2:	693b      	ldr	r3, [r7, #16]
 c0032a4:	1ad3      	subs	r3, r2, r3
 c0032a6:	2b64      	cmp	r3, #100	; 0x64
 c0032a8:	d907      	bls.n	c0032ba <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0032aa:	4b7e      	ldr	r3, [pc, #504]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0032ac:	681b      	ldr	r3, [r3, #0]
 c0032ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0032b2:	2b00      	cmp	r3, #0
 c0032b4:	d101      	bne.n	c0032ba <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c0032b6:	2303      	movs	r3, #3
 c0032b8:	e364      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c0032ba:	4b7a      	ldr	r3, [pc, #488]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0032bc:	681b      	ldr	r3, [r3, #0]
 c0032be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0032c2:	2b00      	cmp	r3, #0
 c0032c4:	d0ea      	beq.n	c00329c <HAL_RCC_OscConfig+0x2b0>
 c0032c6:	e01a      	b.n	c0032fe <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0032c8:	f7fe fdca 	bl	c001e60 <HAL_GetTick>
 c0032cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0032ce:	e00e      	b.n	c0032ee <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c0032d0:	f7fe fdc6 	bl	c001e60 <HAL_GetTick>
 c0032d4:	4602      	mov	r2, r0
 c0032d6:	693b      	ldr	r3, [r7, #16]
 c0032d8:	1ad3      	subs	r3, r2, r3
 c0032da:	2b64      	cmp	r3, #100	; 0x64
 c0032dc:	d907      	bls.n	c0032ee <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0032de:	4b71      	ldr	r3, [pc, #452]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0032e0:	681b      	ldr	r3, [r3, #0]
 c0032e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0032e6:	2b00      	cmp	r3, #0
 c0032e8:	d001      	beq.n	c0032ee <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c0032ea:	2303      	movs	r3, #3
 c0032ec:	e34a      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c0032ee:	4b6d      	ldr	r3, [pc, #436]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0032f0:	681b      	ldr	r3, [r3, #0]
 c0032f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0032f6:	2b00      	cmp	r3, #0
 c0032f8:	d1ea      	bne.n	c0032d0 <HAL_RCC_OscConfig+0x2e4>
 c0032fa:	e000      	b.n	c0032fe <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0032fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0032fe:	687b      	ldr	r3, [r7, #4]
 c003300:	681b      	ldr	r3, [r3, #0]
 c003302:	f003 0302 	and.w	r3, r3, #2
 c003306:	2b00      	cmp	r3, #0
 c003308:	d06c      	beq.n	c0033e4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c00330a:	69bb      	ldr	r3, [r7, #24]
 c00330c:	2b04      	cmp	r3, #4
 c00330e:	d005      	beq.n	c00331c <HAL_RCC_OscConfig+0x330>
 c003310:	69bb      	ldr	r3, [r7, #24]
 c003312:	2b0c      	cmp	r3, #12
 c003314:	d119      	bne.n	c00334a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c003316:	697b      	ldr	r3, [r7, #20]
 c003318:	2b02      	cmp	r3, #2
 c00331a:	d116      	bne.n	c00334a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c00331c:	4b61      	ldr	r3, [pc, #388]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00331e:	681b      	ldr	r3, [r3, #0]
 c003320:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003324:	2b00      	cmp	r3, #0
 c003326:	d005      	beq.n	c003334 <HAL_RCC_OscConfig+0x348>
 c003328:	687b      	ldr	r3, [r7, #4]
 c00332a:	68db      	ldr	r3, [r3, #12]
 c00332c:	2b00      	cmp	r3, #0
 c00332e:	d101      	bne.n	c003334 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c003330:	2301      	movs	r3, #1
 c003332:	e327      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c003334:	4b5b      	ldr	r3, [pc, #364]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003336:	685b      	ldr	r3, [r3, #4]
 c003338:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c00333c:	687b      	ldr	r3, [r7, #4]
 c00333e:	691b      	ldr	r3, [r3, #16]
 c003340:	061b      	lsls	r3, r3, #24
 c003342:	4958      	ldr	r1, [pc, #352]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003344:	4313      	orrs	r3, r2
 c003346:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c003348:	e04c      	b.n	c0033e4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c00334a:	687b      	ldr	r3, [r7, #4]
 c00334c:	68db      	ldr	r3, [r3, #12]
 c00334e:	2b00      	cmp	r3, #0
 c003350:	d029      	beq.n	c0033a6 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c003352:	4b54      	ldr	r3, [pc, #336]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003354:	681b      	ldr	r3, [r3, #0]
 c003356:	4a53      	ldr	r2, [pc, #332]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003358:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c00335c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00335e:	f7fe fd7f 	bl	c001e60 <HAL_GetTick>
 c003362:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003364:	e00e      	b.n	c003384 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c003366:	f7fe fd7b 	bl	c001e60 <HAL_GetTick>
 c00336a:	4602      	mov	r2, r0
 c00336c:	693b      	ldr	r3, [r7, #16]
 c00336e:	1ad3      	subs	r3, r2, r3
 c003370:	2b02      	cmp	r3, #2
 c003372:	d907      	bls.n	c003384 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003374:	4b4b      	ldr	r3, [pc, #300]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003376:	681b      	ldr	r3, [r3, #0]
 c003378:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00337c:	2b00      	cmp	r3, #0
 c00337e:	d101      	bne.n	c003384 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c003380:	2303      	movs	r3, #3
 c003382:	e2ff      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003384:	4b47      	ldr	r3, [pc, #284]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003386:	681b      	ldr	r3, [r3, #0]
 c003388:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00338c:	2b00      	cmp	r3, #0
 c00338e:	d0ea      	beq.n	c003366 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c003390:	4b44      	ldr	r3, [pc, #272]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003392:	685b      	ldr	r3, [r3, #4]
 c003394:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c003398:	687b      	ldr	r3, [r7, #4]
 c00339a:	691b      	ldr	r3, [r3, #16]
 c00339c:	061b      	lsls	r3, r3, #24
 c00339e:	4941      	ldr	r1, [pc, #260]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0033a0:	4313      	orrs	r3, r2
 c0033a2:	604b      	str	r3, [r1, #4]
 c0033a4:	e01e      	b.n	c0033e4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c0033a6:	4b3f      	ldr	r3, [pc, #252]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0033a8:	681b      	ldr	r3, [r3, #0]
 c0033aa:	4a3e      	ldr	r2, [pc, #248]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0033ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c0033b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0033b2:	f7fe fd55 	bl	c001e60 <HAL_GetTick>
 c0033b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0033b8:	e00e      	b.n	c0033d8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c0033ba:	f7fe fd51 	bl	c001e60 <HAL_GetTick>
 c0033be:	4602      	mov	r2, r0
 c0033c0:	693b      	ldr	r3, [r7, #16]
 c0033c2:	1ad3      	subs	r3, r2, r3
 c0033c4:	2b02      	cmp	r3, #2
 c0033c6:	d907      	bls.n	c0033d8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0033c8:	4b36      	ldr	r3, [pc, #216]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0033ca:	681b      	ldr	r3, [r3, #0]
 c0033cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0033d0:	2b00      	cmp	r3, #0
 c0033d2:	d001      	beq.n	c0033d8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c0033d4:	2303      	movs	r3, #3
 c0033d6:	e2d5      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c0033d8:	4b32      	ldr	r3, [pc, #200]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c0033da:	681b      	ldr	r3, [r3, #0]
 c0033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0033e0:	2b00      	cmp	r3, #0
 c0033e2:	d1ea      	bne.n	c0033ba <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c0033e4:	687b      	ldr	r3, [r7, #4]
 c0033e6:	681b      	ldr	r3, [r3, #0]
 c0033e8:	f003 0308 	and.w	r3, r3, #8
 c0033ec:	2b00      	cmp	r3, #0
 c0033ee:	d062      	beq.n	c0034b6 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c0033f0:	687b      	ldr	r3, [r7, #4]
 c0033f2:	695b      	ldr	r3, [r3, #20]
 c0033f4:	2b00      	cmp	r3, #0
 c0033f6:	d038      	beq.n	c00346a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c0033f8:	687b      	ldr	r3, [r7, #4]
 c0033fa:	699b      	ldr	r3, [r3, #24]
 c0033fc:	2b00      	cmp	r3, #0
 c0033fe:	d108      	bne.n	c003412 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003400:	4b28      	ldr	r3, [pc, #160]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003402:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003406:	4a27      	ldr	r2, [pc, #156]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003408:	f023 0310 	bic.w	r3, r3, #16
 c00340c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c003410:	e007      	b.n	c003422 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c003412:	4b24      	ldr	r3, [pc, #144]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003414:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003418:	4a22      	ldr	r2, [pc, #136]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00341a:	f043 0310 	orr.w	r3, r3, #16
 c00341e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c003422:	4b20      	ldr	r3, [pc, #128]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003424:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003428:	4a1e      	ldr	r2, [pc, #120]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00342a:	f043 0301 	orr.w	r3, r3, #1
 c00342e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003432:	f7fe fd15 	bl	c001e60 <HAL_GetTick>
 c003436:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c003438:	e00f      	b.n	c00345a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c00343a:	f7fe fd11 	bl	c001e60 <HAL_GetTick>
 c00343e:	4602      	mov	r2, r0
 c003440:	693b      	ldr	r3, [r7, #16]
 c003442:	1ad3      	subs	r3, r2, r3
 c003444:	2b07      	cmp	r3, #7
 c003446:	d908      	bls.n	c00345a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c003448:	4b16      	ldr	r3, [pc, #88]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00344a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00344e:	f003 0302 	and.w	r3, r3, #2
 c003452:	2b00      	cmp	r3, #0
 c003454:	d101      	bne.n	c00345a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c003456:	2303      	movs	r3, #3
 c003458:	e294      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c00345a:	4b12      	ldr	r3, [pc, #72]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00345c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003460:	f003 0302 	and.w	r3, r3, #2
 c003464:	2b00      	cmp	r3, #0
 c003466:	d0e8      	beq.n	c00343a <HAL_RCC_OscConfig+0x44e>
 c003468:	e025      	b.n	c0034b6 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c00346a:	4b0e      	ldr	r3, [pc, #56]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c00346c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003470:	4a0c      	ldr	r2, [pc, #48]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003472:	f023 0301 	bic.w	r3, r3, #1
 c003476:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00347a:	f7fe fcf1 	bl	c001e60 <HAL_GetTick>
 c00347e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003480:	e012      	b.n	c0034a8 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c003482:	f7fe fced 	bl	c001e60 <HAL_GetTick>
 c003486:	4602      	mov	r2, r0
 c003488:	693b      	ldr	r3, [r7, #16]
 c00348a:	1ad3      	subs	r3, r2, r3
 c00348c:	2b07      	cmp	r3, #7
 c00348e:	d90b      	bls.n	c0034a8 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c003490:	4b04      	ldr	r3, [pc, #16]	; (c0034a4 <HAL_RCC_OscConfig+0x4b8>)
 c003492:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003496:	f003 0302 	and.w	r3, r3, #2
 c00349a:	2b00      	cmp	r3, #0
 c00349c:	d004      	beq.n	c0034a8 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c00349e:	2303      	movs	r3, #3
 c0034a0:	e270      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
 c0034a2:	bf00      	nop
 c0034a4:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c0034a8:	4ba8      	ldr	r3, [pc, #672]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0034aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0034ae:	f003 0302 	and.w	r3, r3, #2
 c0034b2:	2b00      	cmp	r3, #0
 c0034b4:	d1e5      	bne.n	c003482 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c0034b6:	687b      	ldr	r3, [r7, #4]
 c0034b8:	681b      	ldr	r3, [r3, #0]
 c0034ba:	f003 0304 	and.w	r3, r3, #4
 c0034be:	2b00      	cmp	r3, #0
 c0034c0:	f000 812d 	beq.w	c00371e <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0034c4:	2300      	movs	r3, #0
 c0034c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c0034c8:	4ba0      	ldr	r3, [pc, #640]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0034ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0034d0:	2b00      	cmp	r3, #0
 c0034d2:	d10d      	bne.n	c0034f0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0034d4:	4b9d      	ldr	r3, [pc, #628]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0034d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034d8:	4a9c      	ldr	r2, [pc, #624]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0034da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0034de:	6593      	str	r3, [r2, #88]	; 0x58
 c0034e0:	4b9a      	ldr	r3, [pc, #616]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0034e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0034e8:	60bb      	str	r3, [r7, #8]
 c0034ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c0034ec:	2301      	movs	r3, #1
 c0034ee:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c0034f0:	4b97      	ldr	r3, [pc, #604]	; (c003750 <HAL_RCC_OscConfig+0x764>)
 c0034f2:	681b      	ldr	r3, [r3, #0]
 c0034f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0034f8:	2b00      	cmp	r3, #0
 c0034fa:	d11e      	bne.n	c00353a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0034fc:	4b94      	ldr	r3, [pc, #592]	; (c003750 <HAL_RCC_OscConfig+0x764>)
 c0034fe:	681b      	ldr	r3, [r3, #0]
 c003500:	4a93      	ldr	r2, [pc, #588]	; (c003750 <HAL_RCC_OscConfig+0x764>)
 c003502:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003506:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c003508:	f7fe fcaa 	bl	c001e60 <HAL_GetTick>
 c00350c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00350e:	e00e      	b.n	c00352e <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c003510:	f7fe fca6 	bl	c001e60 <HAL_GetTick>
 c003514:	4602      	mov	r2, r0
 c003516:	693b      	ldr	r3, [r7, #16]
 c003518:	1ad3      	subs	r3, r2, r3
 c00351a:	2b02      	cmp	r3, #2
 c00351c:	d907      	bls.n	c00352e <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00351e:	4b8c      	ldr	r3, [pc, #560]	; (c003750 <HAL_RCC_OscConfig+0x764>)
 c003520:	681b      	ldr	r3, [r3, #0]
 c003522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003526:	2b00      	cmp	r3, #0
 c003528:	d101      	bne.n	c00352e <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c00352a:	2303      	movs	r3, #3
 c00352c:	e22a      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c00352e:	4b88      	ldr	r3, [pc, #544]	; (c003750 <HAL_RCC_OscConfig+0x764>)
 c003530:	681b      	ldr	r3, [r3, #0]
 c003532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003536:	2b00      	cmp	r3, #0
 c003538:	d0ea      	beq.n	c003510 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c00353a:	687b      	ldr	r3, [r7, #4]
 c00353c:	689b      	ldr	r3, [r3, #8]
 c00353e:	f003 0301 	and.w	r3, r3, #1
 c003542:	2b00      	cmp	r3, #0
 c003544:	d01f      	beq.n	c003586 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c003546:	687b      	ldr	r3, [r7, #4]
 c003548:	689b      	ldr	r3, [r3, #8]
 c00354a:	f003 0304 	and.w	r3, r3, #4
 c00354e:	2b00      	cmp	r3, #0
 c003550:	d010      	beq.n	c003574 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c003552:	4b7e      	ldr	r3, [pc, #504]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003554:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003558:	4a7c      	ldr	r2, [pc, #496]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00355a:	f043 0304 	orr.w	r3, r3, #4
 c00355e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c003562:	4b7a      	ldr	r3, [pc, #488]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003568:	4a78      	ldr	r2, [pc, #480]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00356a:	f043 0301 	orr.w	r3, r3, #1
 c00356e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c003572:	e018      	b.n	c0035a6 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c003574:	4b75      	ldr	r3, [pc, #468]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00357a:	4a74      	ldr	r2, [pc, #464]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00357c:	f043 0301 	orr.w	r3, r3, #1
 c003580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c003584:	e00f      	b.n	c0035a6 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c003586:	4b71      	ldr	r3, [pc, #452]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003588:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00358c:	4a6f      	ldr	r2, [pc, #444]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00358e:	f023 0301 	bic.w	r3, r3, #1
 c003592:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c003596:	4b6d      	ldr	r3, [pc, #436]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003598:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00359c:	4a6b      	ldr	r2, [pc, #428]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00359e:	f023 0304 	bic.w	r3, r3, #4
 c0035a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c0035a6:	687b      	ldr	r3, [r7, #4]
 c0035a8:	689b      	ldr	r3, [r3, #8]
 c0035aa:	2b00      	cmp	r3, #0
 c0035ac:	d068      	beq.n	c003680 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0035ae:	f7fe fc57 	bl	c001e60 <HAL_GetTick>
 c0035b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0035b4:	e011      	b.n	c0035da <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0035b6:	f7fe fc53 	bl	c001e60 <HAL_GetTick>
 c0035ba:	4602      	mov	r2, r0
 c0035bc:	693b      	ldr	r3, [r7, #16]
 c0035be:	1ad3      	subs	r3, r2, r3
 c0035c0:	f241 3288 	movw	r2, #5000	; 0x1388
 c0035c4:	4293      	cmp	r3, r2
 c0035c6:	d908      	bls.n	c0035da <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0035c8:	4b60      	ldr	r3, [pc, #384]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0035ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035ce:	f003 0302 	and.w	r3, r3, #2
 c0035d2:	2b00      	cmp	r3, #0
 c0035d4:	d101      	bne.n	c0035da <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c0035d6:	2303      	movs	r3, #3
 c0035d8:	e1d4      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0035da:	4b5c      	ldr	r3, [pc, #368]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0035dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035e0:	f003 0302 	and.w	r3, r3, #2
 c0035e4:	2b00      	cmp	r3, #0
 c0035e6:	d0e6      	beq.n	c0035b6 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c0035e8:	687b      	ldr	r3, [r7, #4]
 c0035ea:	689b      	ldr	r3, [r3, #8]
 c0035ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0035f0:	2b00      	cmp	r3, #0
 c0035f2:	d022      	beq.n	c00363a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0035f4:	4b55      	ldr	r3, [pc, #340]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0035f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0035fa:	4a54      	ldr	r2, [pc, #336]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0035fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003600:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003604:	e011      	b.n	c00362a <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003606:	f7fe fc2b 	bl	c001e60 <HAL_GetTick>
 c00360a:	4602      	mov	r2, r0
 c00360c:	693b      	ldr	r3, [r7, #16]
 c00360e:	1ad3      	subs	r3, r2, r3
 c003610:	f241 3288 	movw	r2, #5000	; 0x1388
 c003614:	4293      	cmp	r3, r2
 c003616:	d908      	bls.n	c00362a <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c003618:	4b4c      	ldr	r3, [pc, #304]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00361a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00361e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003622:	2b00      	cmp	r3, #0
 c003624:	d101      	bne.n	c00362a <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c003626:	2303      	movs	r3, #3
 c003628:	e1ac      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c00362a:	4b48      	ldr	r3, [pc, #288]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00362c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003630:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003634:	2b00      	cmp	r3, #0
 c003636:	d0e6      	beq.n	c003606 <HAL_RCC_OscConfig+0x61a>
 c003638:	e068      	b.n	c00370c <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c00363a:	4b44      	ldr	r3, [pc, #272]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00363c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003640:	4a42      	ldr	r2, [pc, #264]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003642:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c003646:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00364a:	e011      	b.n	c003670 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c00364c:	f7fe fc08 	bl	c001e60 <HAL_GetTick>
 c003650:	4602      	mov	r2, r0
 c003652:	693b      	ldr	r3, [r7, #16]
 c003654:	1ad3      	subs	r3, r2, r3
 c003656:	f241 3288 	movw	r2, #5000	; 0x1388
 c00365a:	4293      	cmp	r3, r2
 c00365c:	d908      	bls.n	c003670 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c00365e:	4b3b      	ldr	r3, [pc, #236]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003660:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003664:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003668:	2b00      	cmp	r3, #0
 c00366a:	d001      	beq.n	c003670 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c00366c:	2303      	movs	r3, #3
 c00366e:	e189      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c003670:	4b36      	ldr	r3, [pc, #216]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003672:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003676:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00367a:	2b00      	cmp	r3, #0
 c00367c:	d1e6      	bne.n	c00364c <HAL_RCC_OscConfig+0x660>
 c00367e:	e045      	b.n	c00370c <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003680:	f7fe fbee 	bl	c001e60 <HAL_GetTick>
 c003684:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c003686:	e011      	b.n	c0036ac <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003688:	f7fe fbea 	bl	c001e60 <HAL_GetTick>
 c00368c:	4602      	mov	r2, r0
 c00368e:	693b      	ldr	r3, [r7, #16]
 c003690:	1ad3      	subs	r3, r2, r3
 c003692:	f241 3288 	movw	r2, #5000	; 0x1388
 c003696:	4293      	cmp	r3, r2
 c003698:	d908      	bls.n	c0036ac <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c00369a:	4b2c      	ldr	r3, [pc, #176]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00369c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036a0:	f003 0302 	and.w	r3, r3, #2
 c0036a4:	2b00      	cmp	r3, #0
 c0036a6:	d001      	beq.n	c0036ac <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c0036a8:	2303      	movs	r3, #3
 c0036aa:	e16b      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c0036ac:	4b27      	ldr	r3, [pc, #156]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0036ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036b2:	f003 0302 	and.w	r3, r3, #2
 c0036b6:	2b00      	cmp	r3, #0
 c0036b8:	d1e6      	bne.n	c003688 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c0036ba:	4b24      	ldr	r3, [pc, #144]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0036bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0036c4:	2b00      	cmp	r3, #0
 c0036c6:	d021      	beq.n	c00370c <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c0036c8:	4b20      	ldr	r3, [pc, #128]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0036ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036ce:	4a1f      	ldr	r2, [pc, #124]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0036d0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c0036d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036d8:	e011      	b.n	c0036fe <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c0036da:	f7fe fbc1 	bl	c001e60 <HAL_GetTick>
 c0036de:	4602      	mov	r2, r0
 c0036e0:	693b      	ldr	r3, [r7, #16]
 c0036e2:	1ad3      	subs	r3, r2, r3
 c0036e4:	f241 3288 	movw	r2, #5000	; 0x1388
 c0036e8:	4293      	cmp	r3, r2
 c0036ea:	d908      	bls.n	c0036fe <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036ec:	4b17      	ldr	r3, [pc, #92]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c0036ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0036f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0036f6:	2b00      	cmp	r3, #0
 c0036f8:	d001      	beq.n	c0036fe <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c0036fa:	2303      	movs	r3, #3
 c0036fc:	e142      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c0036fe:	4b13      	ldr	r3, [pc, #76]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003704:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003708:	2b00      	cmp	r3, #0
 c00370a:	d1e6      	bne.n	c0036da <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c00370c:	7ffb      	ldrb	r3, [r7, #31]
 c00370e:	2b01      	cmp	r3, #1
 c003710:	d105      	bne.n	c00371e <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003712:	4b0e      	ldr	r3, [pc, #56]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003714:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003716:	4a0d      	ldr	r2, [pc, #52]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003718:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c00371c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c00371e:	687b      	ldr	r3, [r7, #4]
 c003720:	681b      	ldr	r3, [r3, #0]
 c003722:	f003 0320 	and.w	r3, r3, #32
 c003726:	2b00      	cmp	r3, #0
 c003728:	d04f      	beq.n	c0037ca <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c00372a:	687b      	ldr	r3, [r7, #4]
 c00372c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00372e:	2b00      	cmp	r3, #0
 c003730:	d028      	beq.n	c003784 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c003732:	4b06      	ldr	r3, [pc, #24]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c003734:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003738:	4a04      	ldr	r2, [pc, #16]	; (c00374c <HAL_RCC_OscConfig+0x760>)
 c00373a:	f043 0301 	orr.w	r3, r3, #1
 c00373e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003742:	f7fe fb8d 	bl	c001e60 <HAL_GetTick>
 c003746:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003748:	e014      	b.n	c003774 <HAL_RCC_OscConfig+0x788>
 c00374a:	bf00      	nop
 c00374c:	50021000 	.word	0x50021000
 c003750:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c003754:	f7fe fb84 	bl	c001e60 <HAL_GetTick>
 c003758:	4602      	mov	r2, r0
 c00375a:	693b      	ldr	r3, [r7, #16]
 c00375c:	1ad3      	subs	r3, r2, r3
 c00375e:	2b02      	cmp	r3, #2
 c003760:	d908      	bls.n	c003774 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003762:	4b8a      	ldr	r3, [pc, #552]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003764:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c003768:	f003 0302 	and.w	r3, r3, #2
 c00376c:	2b00      	cmp	r3, #0
 c00376e:	d101      	bne.n	c003774 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c003770:	2303      	movs	r3, #3
 c003772:	e107      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c003774:	4b85      	ldr	r3, [pc, #532]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003776:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00377a:	f003 0302 	and.w	r3, r3, #2
 c00377e:	2b00      	cmp	r3, #0
 c003780:	d0e8      	beq.n	c003754 <HAL_RCC_OscConfig+0x768>
 c003782:	e022      	b.n	c0037ca <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c003784:	4b81      	ldr	r3, [pc, #516]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003786:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c00378a:	4a80      	ldr	r2, [pc, #512]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00378c:	f023 0301 	bic.w	r3, r3, #1
 c003790:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003794:	f7fe fb64 	bl	c001e60 <HAL_GetTick>
 c003798:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c00379a:	e00f      	b.n	c0037bc <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c00379c:	f7fe fb60 	bl	c001e60 <HAL_GetTick>
 c0037a0:	4602      	mov	r2, r0
 c0037a2:	693b      	ldr	r3, [r7, #16]
 c0037a4:	1ad3      	subs	r3, r2, r3
 c0037a6:	2b02      	cmp	r3, #2
 c0037a8:	d908      	bls.n	c0037bc <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0037aa:	4b78      	ldr	r3, [pc, #480]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037b0:	f003 0302 	and.w	r3, r3, #2
 c0037b4:	2b00      	cmp	r3, #0
 c0037b6:	d001      	beq.n	c0037bc <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c0037b8:	2303      	movs	r3, #3
 c0037ba:	e0e3      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c0037bc:	4b73      	ldr	r3, [pc, #460]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0037be:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c0037c2:	f003 0302 	and.w	r3, r3, #2
 c0037c6:	2b00      	cmp	r3, #0
 c0037c8:	d1e8      	bne.n	c00379c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c0037ca:	687b      	ldr	r3, [r7, #4]
 c0037cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0037ce:	2b00      	cmp	r3, #0
 c0037d0:	f000 80d7 	beq.w	c003982 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c0037d4:	4b6d      	ldr	r3, [pc, #436]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0037d6:	689b      	ldr	r3, [r3, #8]
 c0037d8:	f003 030c 	and.w	r3, r3, #12
 c0037dc:	2b0c      	cmp	r3, #12
 c0037de:	f000 8091 	beq.w	c003904 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c0037e2:	687b      	ldr	r3, [r7, #4]
 c0037e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0037e6:	2b02      	cmp	r3, #2
 c0037e8:	d166      	bne.n	c0038b8 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0037ea:	4b68      	ldr	r3, [pc, #416]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0037ec:	681b      	ldr	r3, [r3, #0]
 c0037ee:	4a67      	ldr	r2, [pc, #412]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0037f0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0037f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0037f6:	f7fe fb33 	bl	c001e60 <HAL_GetTick>
 c0037fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0037fc:	e00e      	b.n	c00381c <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0037fe:	f7fe fb2f 	bl	c001e60 <HAL_GetTick>
 c003802:	4602      	mov	r2, r0
 c003804:	693b      	ldr	r3, [r7, #16]
 c003806:	1ad3      	subs	r3, r2, r3
 c003808:	2b02      	cmp	r3, #2
 c00380a:	d907      	bls.n	c00381c <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00380c:	4b5f      	ldr	r3, [pc, #380]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00380e:	681b      	ldr	r3, [r3, #0]
 c003810:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003814:	2b00      	cmp	r3, #0
 c003816:	d001      	beq.n	c00381c <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c003818:	2303      	movs	r3, #3
 c00381a:	e0b3      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00381c:	4b5b      	ldr	r3, [pc, #364]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00381e:	681b      	ldr	r3, [r3, #0]
 c003820:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003824:	2b00      	cmp	r3, #0
 c003826:	d1ea      	bne.n	c0037fe <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c003828:	4b58      	ldr	r3, [pc, #352]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00382a:	68da      	ldr	r2, [r3, #12]
 c00382c:	4b58      	ldr	r3, [pc, #352]	; (c003990 <HAL_RCC_OscConfig+0x9a4>)
 c00382e:	4013      	ands	r3, r2
 c003830:	687a      	ldr	r2, [r7, #4]
 c003832:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c003834:	687a      	ldr	r2, [r7, #4]
 c003836:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c003838:	3a01      	subs	r2, #1
 c00383a:	0112      	lsls	r2, r2, #4
 c00383c:	4311      	orrs	r1, r2
 c00383e:	687a      	ldr	r2, [r7, #4]
 c003840:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c003842:	0212      	lsls	r2, r2, #8
 c003844:	4311      	orrs	r1, r2
 c003846:	687a      	ldr	r2, [r7, #4]
 c003848:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00384a:	0852      	lsrs	r2, r2, #1
 c00384c:	3a01      	subs	r2, #1
 c00384e:	0552      	lsls	r2, r2, #21
 c003850:	4311      	orrs	r1, r2
 c003852:	687a      	ldr	r2, [r7, #4]
 c003854:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c003856:	0852      	lsrs	r2, r2, #1
 c003858:	3a01      	subs	r2, #1
 c00385a:	0652      	lsls	r2, r2, #25
 c00385c:	4311      	orrs	r1, r2
 c00385e:	687a      	ldr	r2, [r7, #4]
 c003860:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c003862:	06d2      	lsls	r2, r2, #27
 c003864:	430a      	orrs	r2, r1
 c003866:	4949      	ldr	r1, [pc, #292]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003868:	4313      	orrs	r3, r2
 c00386a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c00386c:	4b47      	ldr	r3, [pc, #284]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00386e:	681b      	ldr	r3, [r3, #0]
 c003870:	4a46      	ldr	r2, [pc, #280]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003872:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003876:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c003878:	4b44      	ldr	r3, [pc, #272]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00387a:	68db      	ldr	r3, [r3, #12]
 c00387c:	4a43      	ldr	r2, [pc, #268]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00387e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c003882:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c003884:	f7fe faec 	bl	c001e60 <HAL_GetTick>
 c003888:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00388a:	e00e      	b.n	c0038aa <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00388c:	f7fe fae8 	bl	c001e60 <HAL_GetTick>
 c003890:	4602      	mov	r2, r0
 c003892:	693b      	ldr	r3, [r7, #16]
 c003894:	1ad3      	subs	r3, r2, r3
 c003896:	2b02      	cmp	r3, #2
 c003898:	d907      	bls.n	c0038aa <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00389a:	4b3c      	ldr	r3, [pc, #240]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c00389c:	681b      	ldr	r3, [r3, #0]
 c00389e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0038a2:	2b00      	cmp	r3, #0
 c0038a4:	d101      	bne.n	c0038aa <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c0038a6:	2303      	movs	r3, #3
 c0038a8:	e06c      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0038aa:	4b38      	ldr	r3, [pc, #224]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038ac:	681b      	ldr	r3, [r3, #0]
 c0038ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0038b2:	2b00      	cmp	r3, #0
 c0038b4:	d0ea      	beq.n	c00388c <HAL_RCC_OscConfig+0x8a0>
 c0038b6:	e064      	b.n	c003982 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c0038b8:	4b34      	ldr	r3, [pc, #208]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038ba:	681b      	ldr	r3, [r3, #0]
 c0038bc:	4a33      	ldr	r2, [pc, #204]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c0038c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c0038c4:	f7fe facc 	bl	c001e60 <HAL_GetTick>
 c0038c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0038ca:	e00e      	b.n	c0038ea <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c0038cc:	f7fe fac8 	bl	c001e60 <HAL_GetTick>
 c0038d0:	4602      	mov	r2, r0
 c0038d2:	693b      	ldr	r3, [r7, #16]
 c0038d4:	1ad3      	subs	r3, r2, r3
 c0038d6:	2b02      	cmp	r3, #2
 c0038d8:	d907      	bls.n	c0038ea <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0038da:	4b2c      	ldr	r3, [pc, #176]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038dc:	681b      	ldr	r3, [r3, #0]
 c0038de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0038e2:	2b00      	cmp	r3, #0
 c0038e4:	d001      	beq.n	c0038ea <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c0038e6:	2303      	movs	r3, #3
 c0038e8:	e04c      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0038ea:	4b28      	ldr	r3, [pc, #160]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038ec:	681b      	ldr	r3, [r3, #0]
 c0038ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0038f2:	2b00      	cmp	r3, #0
 c0038f4:	d1ea      	bne.n	c0038cc <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0038f6:	4b25      	ldr	r3, [pc, #148]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038f8:	68da      	ldr	r2, [r3, #12]
 c0038fa:	4924      	ldr	r1, [pc, #144]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c0038fc:	4b25      	ldr	r3, [pc, #148]	; (c003994 <HAL_RCC_OscConfig+0x9a8>)
 c0038fe:	4013      	ands	r3, r2
 c003900:	60cb      	str	r3, [r1, #12]
 c003902:	e03e      	b.n	c003982 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c003904:	687b      	ldr	r3, [r7, #4]
 c003906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c003908:	2b01      	cmp	r3, #1
 c00390a:	d101      	bne.n	c003910 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c00390c:	2301      	movs	r3, #1
 c00390e:	e039      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c003910:	4b1e      	ldr	r3, [pc, #120]	; (c00398c <HAL_RCC_OscConfig+0x9a0>)
 c003912:	68db      	ldr	r3, [r3, #12]
 c003914:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003916:	697b      	ldr	r3, [r7, #20]
 c003918:	f003 0203 	and.w	r2, r3, #3
 c00391c:	687b      	ldr	r3, [r7, #4]
 c00391e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c003920:	429a      	cmp	r2, r3
 c003922:	d12c      	bne.n	c00397e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003924:	697b      	ldr	r3, [r7, #20]
 c003926:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c00392a:	687b      	ldr	r3, [r7, #4]
 c00392c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00392e:	3b01      	subs	r3, #1
 c003930:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c003932:	429a      	cmp	r2, r3
 c003934:	d123      	bne.n	c00397e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003936:	697b      	ldr	r3, [r7, #20]
 c003938:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c00393c:	687b      	ldr	r3, [r7, #4]
 c00393e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c003940:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c003942:	429a      	cmp	r2, r3
 c003944:	d11b      	bne.n	c00397e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c003946:	697b      	ldr	r3, [r7, #20]
 c003948:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c00394c:	687b      	ldr	r3, [r7, #4]
 c00394e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003950:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c003952:	429a      	cmp	r2, r3
 c003954:	d113      	bne.n	c00397e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c003956:	697b      	ldr	r3, [r7, #20]
 c003958:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c00395c:	687b      	ldr	r3, [r7, #4]
 c00395e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003960:	085b      	lsrs	r3, r3, #1
 c003962:	3b01      	subs	r3, #1
 c003964:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c003966:	429a      	cmp	r2, r3
 c003968:	d109      	bne.n	c00397e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c00396a:	697b      	ldr	r3, [r7, #20]
 c00396c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c003970:	687b      	ldr	r3, [r7, #4]
 c003972:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003974:	085b      	lsrs	r3, r3, #1
 c003976:	3b01      	subs	r3, #1
 c003978:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00397a:	429a      	cmp	r2, r3
 c00397c:	d001      	beq.n	c003982 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c00397e:	2301      	movs	r3, #1
 c003980:	e000      	b.n	c003984 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c003982:	2300      	movs	r3, #0
}
 c003984:	4618      	mov	r0, r3
 c003986:	3720      	adds	r7, #32
 c003988:	46bd      	mov	sp, r7
 c00398a:	bd80      	pop	{r7, pc}
 c00398c:	50021000 	.word	0x50021000
 c003990:	019f800c 	.word	0x019f800c
 c003994:	feeefffc 	.word	0xfeeefffc

0c003998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c003998:	b580      	push	{r7, lr}
 c00399a:	b086      	sub	sp, #24
 c00399c:	af00      	add	r7, sp, #0
 c00399e:	6078      	str	r0, [r7, #4]
 c0039a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c0039a2:	2300      	movs	r3, #0
 c0039a4:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c0039a6:	687b      	ldr	r3, [r7, #4]
 c0039a8:	2b00      	cmp	r3, #0
 c0039aa:	d101      	bne.n	c0039b0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c0039ac:	2301      	movs	r3, #1
 c0039ae:	e11c      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c0039b0:	4b90      	ldr	r3, [pc, #576]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c0039b2:	681b      	ldr	r3, [r3, #0]
 c0039b4:	f003 030f 	and.w	r3, r3, #15
 c0039b8:	683a      	ldr	r2, [r7, #0]
 c0039ba:	429a      	cmp	r2, r3
 c0039bc:	d910      	bls.n	c0039e0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c0039be:	4b8d      	ldr	r3, [pc, #564]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c0039c0:	681b      	ldr	r3, [r3, #0]
 c0039c2:	f023 020f 	bic.w	r2, r3, #15
 c0039c6:	498b      	ldr	r1, [pc, #556]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c0039c8:	683b      	ldr	r3, [r7, #0]
 c0039ca:	4313      	orrs	r3, r2
 c0039cc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c0039ce:	4b89      	ldr	r3, [pc, #548]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c0039d0:	681b      	ldr	r3, [r3, #0]
 c0039d2:	f003 030f 	and.w	r3, r3, #15
 c0039d6:	683a      	ldr	r2, [r7, #0]
 c0039d8:	429a      	cmp	r2, r3
 c0039da:	d001      	beq.n	c0039e0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0039dc:	2301      	movs	r3, #1
 c0039de:	e104      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	681b      	ldr	r3, [r3, #0]
 c0039e4:	f003 0302 	and.w	r3, r3, #2
 c0039e8:	2b00      	cmp	r3, #0
 c0039ea:	d010      	beq.n	c003a0e <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c0039ec:	687b      	ldr	r3, [r7, #4]
 c0039ee:	689a      	ldr	r2, [r3, #8]
 c0039f0:	4b81      	ldr	r3, [pc, #516]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c0039f2:	689b      	ldr	r3, [r3, #8]
 c0039f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0039f8:	429a      	cmp	r2, r3
 c0039fa:	d908      	bls.n	c003a0e <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0039fc:	4b7e      	ldr	r3, [pc, #504]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c0039fe:	689b      	ldr	r3, [r3, #8]
 c003a00:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003a04:	687b      	ldr	r3, [r7, #4]
 c003a06:	689b      	ldr	r3, [r3, #8]
 c003a08:	497b      	ldr	r1, [pc, #492]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a0a:	4313      	orrs	r3, r2
 c003a0c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c003a0e:	687b      	ldr	r3, [r7, #4]
 c003a10:	681b      	ldr	r3, [r3, #0]
 c003a12:	f003 0301 	and.w	r3, r3, #1
 c003a16:	2b00      	cmp	r3, #0
 c003a18:	f000 8085 	beq.w	c003b26 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c003a1c:	687b      	ldr	r3, [r7, #4]
 c003a1e:	685b      	ldr	r3, [r3, #4]
 c003a20:	2b03      	cmp	r3, #3
 c003a22:	d11f      	bne.n	c003a64 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c003a24:	4b74      	ldr	r3, [pc, #464]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a26:	681b      	ldr	r3, [r3, #0]
 c003a28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c003a2c:	2b00      	cmp	r3, #0
 c003a2e:	d101      	bne.n	c003a34 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c003a30:	2301      	movs	r3, #1
 c003a32:	e0da      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c003a34:	f000 fa26 	bl	c003e84 <RCC_GetSysClockFreqFromPLLSource>
 c003a38:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c003a3a:	693b      	ldr	r3, [r7, #16]
 c003a3c:	4a6f      	ldr	r2, [pc, #444]	; (c003bfc <HAL_RCC_ClockConfig+0x264>)
 c003a3e:	4293      	cmp	r3, r2
 c003a40:	d947      	bls.n	c003ad2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003a42:	4b6d      	ldr	r3, [pc, #436]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a44:	689b      	ldr	r3, [r3, #8]
 c003a46:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003a4a:	2b00      	cmp	r3, #0
 c003a4c:	d141      	bne.n	c003ad2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003a4e:	4b6a      	ldr	r3, [pc, #424]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a50:	689b      	ldr	r3, [r3, #8]
 c003a52:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003a56:	4a68      	ldr	r2, [pc, #416]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003a5c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003a5e:	2380      	movs	r3, #128	; 0x80
 c003a60:	617b      	str	r3, [r7, #20]
 c003a62:	e036      	b.n	c003ad2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003a64:	687b      	ldr	r3, [r7, #4]
 c003a66:	685b      	ldr	r3, [r3, #4]
 c003a68:	2b02      	cmp	r3, #2
 c003a6a:	d107      	bne.n	c003a7c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003a6c:	4b62      	ldr	r3, [pc, #392]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a6e:	681b      	ldr	r3, [r3, #0]
 c003a70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003a74:	2b00      	cmp	r3, #0
 c003a76:	d115      	bne.n	c003aa4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003a78:	2301      	movs	r3, #1
 c003a7a:	e0b6      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003a7c:	687b      	ldr	r3, [r7, #4]
 c003a7e:	685b      	ldr	r3, [r3, #4]
 c003a80:	2b00      	cmp	r3, #0
 c003a82:	d107      	bne.n	c003a94 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003a84:	4b5c      	ldr	r3, [pc, #368]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a86:	681b      	ldr	r3, [r3, #0]
 c003a88:	f003 0302 	and.w	r3, r3, #2
 c003a8c:	2b00      	cmp	r3, #0
 c003a8e:	d109      	bne.n	c003aa4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003a90:	2301      	movs	r3, #1
 c003a92:	e0aa      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003a94:	4b58      	ldr	r3, [pc, #352]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003a96:	681b      	ldr	r3, [r3, #0]
 c003a98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003a9c:	2b00      	cmp	r3, #0
 c003a9e:	d101      	bne.n	c003aa4 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003aa0:	2301      	movs	r3, #1
 c003aa2:	e0a2      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c003aa4:	f000 f8b0 	bl	c003c08 <HAL_RCC_GetSysClockFreq>
 c003aa8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c003aaa:	693b      	ldr	r3, [r7, #16]
 c003aac:	4a53      	ldr	r2, [pc, #332]	; (c003bfc <HAL_RCC_ClockConfig+0x264>)
 c003aae:	4293      	cmp	r3, r2
 c003ab0:	d90f      	bls.n	c003ad2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003ab2:	4b51      	ldr	r3, [pc, #324]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ab4:	689b      	ldr	r3, [r3, #8]
 c003ab6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003aba:	2b00      	cmp	r3, #0
 c003abc:	d109      	bne.n	c003ad2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003abe:	4b4e      	ldr	r3, [pc, #312]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ac0:	689b      	ldr	r3, [r3, #8]
 c003ac2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003ac6:	4a4c      	ldr	r2, [pc, #304]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ac8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003acc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003ace:	2380      	movs	r3, #128	; 0x80
 c003ad0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c003ad2:	4b49      	ldr	r3, [pc, #292]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ad4:	689b      	ldr	r3, [r3, #8]
 c003ad6:	f023 0203 	bic.w	r2, r3, #3
 c003ada:	687b      	ldr	r3, [r7, #4]
 c003adc:	685b      	ldr	r3, [r3, #4]
 c003ade:	4946      	ldr	r1, [pc, #280]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ae0:	4313      	orrs	r3, r2
 c003ae2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003ae4:	f7fe f9bc 	bl	c001e60 <HAL_GetTick>
 c003ae8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003aea:	e013      	b.n	c003b14 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003aec:	f7fe f9b8 	bl	c001e60 <HAL_GetTick>
 c003af0:	4602      	mov	r2, r0
 c003af2:	68fb      	ldr	r3, [r7, #12]
 c003af4:	1ad3      	subs	r3, r2, r3
 c003af6:	f241 3288 	movw	r2, #5000	; 0x1388
 c003afa:	4293      	cmp	r3, r2
 c003afc:	d90a      	bls.n	c003b14 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003afe:	4b3e      	ldr	r3, [pc, #248]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b00:	689b      	ldr	r3, [r3, #8]
 c003b02:	f003 020c 	and.w	r2, r3, #12
 c003b06:	687b      	ldr	r3, [r7, #4]
 c003b08:	685b      	ldr	r3, [r3, #4]
 c003b0a:	009b      	lsls	r3, r3, #2
 c003b0c:	429a      	cmp	r2, r3
 c003b0e:	d001      	beq.n	c003b14 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c003b10:	2303      	movs	r3, #3
 c003b12:	e06a      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c003b14:	4b38      	ldr	r3, [pc, #224]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b16:	689b      	ldr	r3, [r3, #8]
 c003b18:	f003 020c 	and.w	r2, r3, #12
 c003b1c:	687b      	ldr	r3, [r7, #4]
 c003b1e:	685b      	ldr	r3, [r3, #4]
 c003b20:	009b      	lsls	r3, r3, #2
 c003b22:	429a      	cmp	r2, r3
 c003b24:	d1e2      	bne.n	c003aec <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c003b26:	697b      	ldr	r3, [r7, #20]
 c003b28:	2b80      	cmp	r3, #128	; 0x80
 c003b2a:	d105      	bne.n	c003b38 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c003b2c:	4b32      	ldr	r3, [pc, #200]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b2e:	689b      	ldr	r3, [r3, #8]
 c003b30:	4a31      	ldr	r2, [pc, #196]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c003b36:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003b38:	687b      	ldr	r3, [r7, #4]
 c003b3a:	681b      	ldr	r3, [r3, #0]
 c003b3c:	f003 0302 	and.w	r3, r3, #2
 c003b40:	2b00      	cmp	r3, #0
 c003b42:	d010      	beq.n	c003b66 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003b44:	687b      	ldr	r3, [r7, #4]
 c003b46:	689a      	ldr	r2, [r3, #8]
 c003b48:	4b2b      	ldr	r3, [pc, #172]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b4a:	689b      	ldr	r3, [r3, #8]
 c003b4c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c003b50:	429a      	cmp	r2, r3
 c003b52:	d208      	bcs.n	c003b66 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c003b54:	4b28      	ldr	r3, [pc, #160]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b56:	689b      	ldr	r3, [r3, #8]
 c003b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003b5c:	687b      	ldr	r3, [r7, #4]
 c003b5e:	689b      	ldr	r3, [r3, #8]
 c003b60:	4925      	ldr	r1, [pc, #148]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003b62:	4313      	orrs	r3, r2
 c003b64:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c003b66:	4b23      	ldr	r3, [pc, #140]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c003b68:	681b      	ldr	r3, [r3, #0]
 c003b6a:	f003 030f 	and.w	r3, r3, #15
 c003b6e:	683a      	ldr	r2, [r7, #0]
 c003b70:	429a      	cmp	r2, r3
 c003b72:	d210      	bcs.n	c003b96 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003b74:	4b1f      	ldr	r3, [pc, #124]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c003b76:	681b      	ldr	r3, [r3, #0]
 c003b78:	f023 020f 	bic.w	r2, r3, #15
 c003b7c:	491d      	ldr	r1, [pc, #116]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c003b7e:	683b      	ldr	r3, [r7, #0]
 c003b80:	4313      	orrs	r3, r2
 c003b82:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003b84:	4b1b      	ldr	r3, [pc, #108]	; (c003bf4 <HAL_RCC_ClockConfig+0x25c>)
 c003b86:	681b      	ldr	r3, [r3, #0]
 c003b88:	f003 030f 	and.w	r3, r3, #15
 c003b8c:	683a      	ldr	r2, [r7, #0]
 c003b8e:	429a      	cmp	r2, r3
 c003b90:	d001      	beq.n	c003b96 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c003b92:	2301      	movs	r3, #1
 c003b94:	e029      	b.n	c003bea <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c003b96:	687b      	ldr	r3, [r7, #4]
 c003b98:	681b      	ldr	r3, [r3, #0]
 c003b9a:	f003 0304 	and.w	r3, r3, #4
 c003b9e:	2b00      	cmp	r3, #0
 c003ba0:	d008      	beq.n	c003bb4 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c003ba2:	4b15      	ldr	r3, [pc, #84]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003ba4:	689b      	ldr	r3, [r3, #8]
 c003ba6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c003baa:	687b      	ldr	r3, [r7, #4]
 c003bac:	68db      	ldr	r3, [r3, #12]
 c003bae:	4912      	ldr	r1, [pc, #72]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003bb0:	4313      	orrs	r3, r2
 c003bb2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003bb4:	687b      	ldr	r3, [r7, #4]
 c003bb6:	681b      	ldr	r3, [r3, #0]
 c003bb8:	f003 0308 	and.w	r3, r3, #8
 c003bbc:	2b00      	cmp	r3, #0
 c003bbe:	d009      	beq.n	c003bd4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c003bc0:	4b0d      	ldr	r3, [pc, #52]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003bc2:	689b      	ldr	r3, [r3, #8]
 c003bc4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c003bc8:	687b      	ldr	r3, [r7, #4]
 c003bca:	691b      	ldr	r3, [r3, #16]
 c003bcc:	00db      	lsls	r3, r3, #3
 c003bce:	490a      	ldr	r1, [pc, #40]	; (c003bf8 <HAL_RCC_ClockConfig+0x260>)
 c003bd0:	4313      	orrs	r3, r2
 c003bd2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003bd4:	f000 f8b6 	bl	c003d44 <HAL_RCC_GetHCLKFreq>
 c003bd8:	4603      	mov	r3, r0
 c003bda:	4a09      	ldr	r2, [pc, #36]	; (c003c00 <HAL_RCC_ClockConfig+0x268>)
 c003bdc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c003bde:	4b09      	ldr	r3, [pc, #36]	; (c003c04 <HAL_RCC_ClockConfig+0x26c>)
 c003be0:	681b      	ldr	r3, [r3, #0]
 c003be2:	4618      	mov	r0, r3
 c003be4:	f7fe f8ec 	bl	c001dc0 <HAL_InitTick>
 c003be8:	4603      	mov	r3, r0
}
 c003bea:	4618      	mov	r0, r3
 c003bec:	3718      	adds	r7, #24
 c003bee:	46bd      	mov	sp, r7
 c003bf0:	bd80      	pop	{r7, pc}
 c003bf2:	bf00      	nop
 c003bf4:	50022000 	.word	0x50022000
 c003bf8:	50021000 	.word	0x50021000
 c003bfc:	04c4b400 	.word	0x04c4b400
 c003c00:	30000000 	.word	0x30000000
 c003c04:	30000004 	.word	0x30000004

0c003c08 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c003c08:	b480      	push	{r7}
 c003c0a:	b089      	sub	sp, #36	; 0x24
 c003c0c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c003c0e:	2300      	movs	r3, #0
 c003c10:	61fb      	str	r3, [r7, #28]
 c003c12:	2300      	movs	r3, #0
 c003c14:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c003c16:	4b47      	ldr	r3, [pc, #284]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c18:	689b      	ldr	r3, [r3, #8]
 c003c1a:	f003 030c 	and.w	r3, r3, #12
 c003c1e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c003c20:	4b44      	ldr	r3, [pc, #272]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c22:	68db      	ldr	r3, [r3, #12]
 c003c24:	f003 0303 	and.w	r3, r3, #3
 c003c28:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c003c2a:	693b      	ldr	r3, [r7, #16]
 c003c2c:	2b00      	cmp	r3, #0
 c003c2e:	d005      	beq.n	c003c3c <HAL_RCC_GetSysClockFreq+0x34>
 c003c30:	693b      	ldr	r3, [r7, #16]
 c003c32:	2b0c      	cmp	r3, #12
 c003c34:	d121      	bne.n	c003c7a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c003c36:	68fb      	ldr	r3, [r7, #12]
 c003c38:	2b01      	cmp	r3, #1
 c003c3a:	d11e      	bne.n	c003c7a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003c3c:	4b3d      	ldr	r3, [pc, #244]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c3e:	681b      	ldr	r3, [r3, #0]
 c003c40:	f003 0308 	and.w	r3, r3, #8
 c003c44:	2b00      	cmp	r3, #0
 c003c46:	d107      	bne.n	c003c58 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003c48:	4b3a      	ldr	r3, [pc, #232]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003c4e:	0a1b      	lsrs	r3, r3, #8
 c003c50:	f003 030f 	and.w	r3, r3, #15
 c003c54:	61fb      	str	r3, [r7, #28]
 c003c56:	e005      	b.n	c003c64 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003c58:	4b36      	ldr	r3, [pc, #216]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c5a:	681b      	ldr	r3, [r3, #0]
 c003c5c:	091b      	lsrs	r3, r3, #4
 c003c5e:	f003 030f 	and.w	r3, r3, #15
 c003c62:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c003c64:	4a34      	ldr	r2, [pc, #208]	; (c003d38 <HAL_RCC_GetSysClockFreq+0x130>)
 c003c66:	69fb      	ldr	r3, [r7, #28]
 c003c68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003c6c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003c6e:	693b      	ldr	r3, [r7, #16]
 c003c70:	2b00      	cmp	r3, #0
 c003c72:	d10d      	bne.n	c003c90 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c003c74:	69fb      	ldr	r3, [r7, #28]
 c003c76:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003c78:	e00a      	b.n	c003c90 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c003c7a:	693b      	ldr	r3, [r7, #16]
 c003c7c:	2b04      	cmp	r3, #4
 c003c7e:	d102      	bne.n	c003c86 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003c80:	4b2e      	ldr	r3, [pc, #184]	; (c003d3c <HAL_RCC_GetSysClockFreq+0x134>)
 c003c82:	61bb      	str	r3, [r7, #24]
 c003c84:	e004      	b.n	c003c90 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c003c86:	693b      	ldr	r3, [r7, #16]
 c003c88:	2b08      	cmp	r3, #8
 c003c8a:	d101      	bne.n	c003c90 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003c8c:	4b2c      	ldr	r3, [pc, #176]	; (c003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 c003c8e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003c90:	693b      	ldr	r3, [r7, #16]
 c003c92:	2b0c      	cmp	r3, #12
 c003c94:	d146      	bne.n	c003d24 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c003c96:	4b27      	ldr	r3, [pc, #156]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003c98:	68db      	ldr	r3, [r3, #12]
 c003c9a:	f003 0303 	and.w	r3, r3, #3
 c003c9e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003ca0:	4b24      	ldr	r3, [pc, #144]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003ca2:	68db      	ldr	r3, [r3, #12]
 c003ca4:	091b      	lsrs	r3, r3, #4
 c003ca6:	f003 030f 	and.w	r3, r3, #15
 c003caa:	3301      	adds	r3, #1
 c003cac:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c003cae:	68bb      	ldr	r3, [r7, #8]
 c003cb0:	2b02      	cmp	r3, #2
 c003cb2:	d003      	beq.n	c003cbc <HAL_RCC_GetSysClockFreq+0xb4>
 c003cb4:	68bb      	ldr	r3, [r7, #8]
 c003cb6:	2b03      	cmp	r3, #3
 c003cb8:	d00d      	beq.n	c003cd6 <HAL_RCC_GetSysClockFreq+0xce>
 c003cba:	e019      	b.n	c003cf0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003cbc:	4a1f      	ldr	r2, [pc, #124]	; (c003d3c <HAL_RCC_GetSysClockFreq+0x134>)
 c003cbe:	687b      	ldr	r3, [r7, #4]
 c003cc0:	fbb2 f3f3 	udiv	r3, r2, r3
 c003cc4:	4a1b      	ldr	r2, [pc, #108]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003cc6:	68d2      	ldr	r2, [r2, #12]
 c003cc8:	0a12      	lsrs	r2, r2, #8
 c003cca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003cce:	fb02 f303 	mul.w	r3, r2, r3
 c003cd2:	617b      	str	r3, [r7, #20]
        break;
 c003cd4:	e019      	b.n	c003d0a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003cd6:	4a1a      	ldr	r2, [pc, #104]	; (c003d40 <HAL_RCC_GetSysClockFreq+0x138>)
 c003cd8:	687b      	ldr	r3, [r7, #4]
 c003cda:	fbb2 f3f3 	udiv	r3, r2, r3
 c003cde:	4a15      	ldr	r2, [pc, #84]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003ce0:	68d2      	ldr	r2, [r2, #12]
 c003ce2:	0a12      	lsrs	r2, r2, #8
 c003ce4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003ce8:	fb02 f303 	mul.w	r3, r2, r3
 c003cec:	617b      	str	r3, [r7, #20]
        break;
 c003cee:	e00c      	b.n	c003d0a <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003cf0:	69fa      	ldr	r2, [r7, #28]
 c003cf2:	687b      	ldr	r3, [r7, #4]
 c003cf4:	fbb2 f3f3 	udiv	r3, r2, r3
 c003cf8:	4a0e      	ldr	r2, [pc, #56]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003cfa:	68d2      	ldr	r2, [r2, #12]
 c003cfc:	0a12      	lsrs	r2, r2, #8
 c003cfe:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003d02:	fb02 f303 	mul.w	r3, r2, r3
 c003d06:	617b      	str	r3, [r7, #20]
        break;
 c003d08:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003d0a:	4b0a      	ldr	r3, [pc, #40]	; (c003d34 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003d0c:	68db      	ldr	r3, [r3, #12]
 c003d0e:	0e5b      	lsrs	r3, r3, #25
 c003d10:	f003 0303 	and.w	r3, r3, #3
 c003d14:	3301      	adds	r3, #1
 c003d16:	005b      	lsls	r3, r3, #1
 c003d18:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c003d1a:	697a      	ldr	r2, [r7, #20]
 c003d1c:	683b      	ldr	r3, [r7, #0]
 c003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003d22:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c003d24:	69bb      	ldr	r3, [r7, #24]
}
 c003d26:	4618      	mov	r0, r3
 c003d28:	3724      	adds	r7, #36	; 0x24
 c003d2a:	46bd      	mov	sp, r7
 c003d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003d30:	4770      	bx	lr
 c003d32:	bf00      	nop
 c003d34:	50021000 	.word	0x50021000
 c003d38:	0c007350 	.word	0x0c007350
 c003d3c:	00f42400 	.word	0x00f42400
 c003d40:	007a1200 	.word	0x007a1200

0c003d44 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c003d44:	b580      	push	{r7, lr}
 c003d46:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c003d48:	f7ff ff5e 	bl	c003c08 <HAL_RCC_GetSysClockFreq>
 c003d4c:	4602      	mov	r2, r0
 c003d4e:	4b05      	ldr	r3, [pc, #20]	; (c003d64 <HAL_RCC_GetHCLKFreq+0x20>)
 c003d50:	689b      	ldr	r3, [r3, #8]
 c003d52:	091b      	lsrs	r3, r3, #4
 c003d54:	f003 030f 	and.w	r3, r3, #15
 c003d58:	4903      	ldr	r1, [pc, #12]	; (c003d68 <HAL_RCC_GetHCLKFreq+0x24>)
 c003d5a:	5ccb      	ldrb	r3, [r1, r3]
 c003d5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003d60:	4618      	mov	r0, r3
 c003d62:	bd80      	pop	{r7, pc}
 c003d64:	50021000 	.word	0x50021000
 c003d68:	0c007338 	.word	0x0c007338

0c003d6c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003d6c:	b580      	push	{r7, lr}
 c003d6e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c003d70:	f7ff ffe8 	bl	c003d44 <HAL_RCC_GetHCLKFreq>
 c003d74:	4602      	mov	r2, r0
 c003d76:	4b05      	ldr	r3, [pc, #20]	; (c003d8c <HAL_RCC_GetPCLK1Freq+0x20>)
 c003d78:	689b      	ldr	r3, [r3, #8]
 c003d7a:	0a1b      	lsrs	r3, r3, #8
 c003d7c:	f003 0307 	and.w	r3, r3, #7
 c003d80:	4903      	ldr	r1, [pc, #12]	; (c003d90 <HAL_RCC_GetPCLK1Freq+0x24>)
 c003d82:	5ccb      	ldrb	r3, [r1, r3]
 c003d84:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003d88:	4618      	mov	r0, r3
 c003d8a:	bd80      	pop	{r7, pc}
 c003d8c:	50021000 	.word	0x50021000
 c003d90:	0c007348 	.word	0x0c007348

0c003d94 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c003d94:	b580      	push	{r7, lr}
 c003d96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c003d98:	f7ff ffd4 	bl	c003d44 <HAL_RCC_GetHCLKFreq>
 c003d9c:	4602      	mov	r2, r0
 c003d9e:	4b05      	ldr	r3, [pc, #20]	; (c003db4 <HAL_RCC_GetPCLK2Freq+0x20>)
 c003da0:	689b      	ldr	r3, [r3, #8]
 c003da2:	0adb      	lsrs	r3, r3, #11
 c003da4:	f003 0307 	and.w	r3, r3, #7
 c003da8:	4903      	ldr	r1, [pc, #12]	; (c003db8 <HAL_RCC_GetPCLK2Freq+0x24>)
 c003daa:	5ccb      	ldrb	r3, [r1, r3]
 c003dac:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003db0:	4618      	mov	r0, r3
 c003db2:	bd80      	pop	{r7, pc}
 c003db4:	50021000 	.word	0x50021000
 c003db8:	0c007348 	.word	0x0c007348

0c003dbc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c003dbc:	b580      	push	{r7, lr}
 c003dbe:	b086      	sub	sp, #24
 c003dc0:	af00      	add	r7, sp, #0
 c003dc2:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c003dc4:	2300      	movs	r3, #0
 c003dc6:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c003dc8:	4b2c      	ldr	r3, [pc, #176]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003dca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003dcc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003dd0:	2b00      	cmp	r3, #0
 c003dd2:	d003      	beq.n	c003ddc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c003dd4:	f7ff f85c 	bl	c002e90 <HAL_PWREx_GetVoltageRange>
 c003dd8:	6138      	str	r0, [r7, #16]
 c003dda:	e014      	b.n	c003e06 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c003ddc:	4b27      	ldr	r3, [pc, #156]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003dde:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003de0:	4a26      	ldr	r2, [pc, #152]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003de2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003de6:	6593      	str	r3, [r2, #88]	; 0x58
 c003de8:	4b24      	ldr	r3, [pc, #144]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003dea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003df0:	60fb      	str	r3, [r7, #12]
 c003df2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c003df4:	f7ff f84c 	bl	c002e90 <HAL_PWREx_GetVoltageRange>
 c003df8:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c003dfa:	4b20      	ldr	r3, [pc, #128]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003dfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003dfe:	4a1f      	ldr	r2, [pc, #124]	; (c003e7c <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003e00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003e04:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c003e06:	693b      	ldr	r3, [r7, #16]
 c003e08:	2b00      	cmp	r3, #0
 c003e0a:	d003      	beq.n	c003e14 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c003e0c:	693b      	ldr	r3, [r7, #16]
 c003e0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c003e12:	d10b      	bne.n	c003e2c <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c003e14:	687b      	ldr	r3, [r7, #4]
 c003e16:	2b80      	cmp	r3, #128	; 0x80
 c003e18:	d919      	bls.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c003e1a:	687b      	ldr	r3, [r7, #4]
 c003e1c:	2ba0      	cmp	r3, #160	; 0xa0
 c003e1e:	d902      	bls.n	c003e26 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003e20:	2302      	movs	r3, #2
 c003e22:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003e24:	e013      	b.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003e26:	2301      	movs	r3, #1
 c003e28:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c003e2a:	e010      	b.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c003e2c:	687b      	ldr	r3, [r7, #4]
 c003e2e:	2b80      	cmp	r3, #128	; 0x80
 c003e30:	d902      	bls.n	c003e38 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c003e32:	2303      	movs	r3, #3
 c003e34:	617b      	str	r3, [r7, #20]
 c003e36:	e00a      	b.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c003e38:	687b      	ldr	r3, [r7, #4]
 c003e3a:	2b80      	cmp	r3, #128	; 0x80
 c003e3c:	d102      	bne.n	c003e44 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c003e3e:	2302      	movs	r3, #2
 c003e40:	617b      	str	r3, [r7, #20]
 c003e42:	e004      	b.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c003e44:	687b      	ldr	r3, [r7, #4]
 c003e46:	2b70      	cmp	r3, #112	; 0x70
 c003e48:	d101      	bne.n	c003e4e <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c003e4a:	2301      	movs	r3, #1
 c003e4c:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c003e4e:	4b0c      	ldr	r3, [pc, #48]	; (c003e80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003e50:	681b      	ldr	r3, [r3, #0]
 c003e52:	f023 020f 	bic.w	r2, r3, #15
 c003e56:	490a      	ldr	r1, [pc, #40]	; (c003e80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003e58:	697b      	ldr	r3, [r7, #20]
 c003e5a:	4313      	orrs	r3, r2
 c003e5c:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003e5e:	4b08      	ldr	r3, [pc, #32]	; (c003e80 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003e60:	681b      	ldr	r3, [r3, #0]
 c003e62:	f003 030f 	and.w	r3, r3, #15
 c003e66:	697a      	ldr	r2, [r7, #20]
 c003e68:	429a      	cmp	r2, r3
 c003e6a:	d001      	beq.n	c003e70 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c003e6c:	2301      	movs	r3, #1
 c003e6e:	e000      	b.n	c003e72 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c003e70:	2300      	movs	r3, #0
}
 c003e72:	4618      	mov	r0, r3
 c003e74:	3718      	adds	r7, #24
 c003e76:	46bd      	mov	sp, r7
 c003e78:	bd80      	pop	{r7, pc}
 c003e7a:	bf00      	nop
 c003e7c:	50021000 	.word	0x50021000
 c003e80:	50022000 	.word	0x50022000

0c003e84 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c003e84:	b480      	push	{r7}
 c003e86:	b087      	sub	sp, #28
 c003e88:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c003e8a:	4b31      	ldr	r3, [pc, #196]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003e8c:	68db      	ldr	r3, [r3, #12]
 c003e8e:	f003 0303 	and.w	r3, r3, #3
 c003e92:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003e94:	4b2e      	ldr	r3, [pc, #184]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003e96:	68db      	ldr	r3, [r3, #12]
 c003e98:	091b      	lsrs	r3, r3, #4
 c003e9a:	f003 030f 	and.w	r3, r3, #15
 c003e9e:	3301      	adds	r3, #1
 c003ea0:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c003ea2:	68fb      	ldr	r3, [r7, #12]
 c003ea4:	2b03      	cmp	r3, #3
 c003ea6:	d015      	beq.n	c003ed4 <RCC_GetSysClockFreqFromPLLSource+0x50>
 c003ea8:	68fb      	ldr	r3, [r7, #12]
 c003eaa:	2b03      	cmp	r3, #3
 c003eac:	d839      	bhi.n	c003f22 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c003eae:	68fb      	ldr	r3, [r7, #12]
 c003eb0:	2b01      	cmp	r3, #1
 c003eb2:	d01c      	beq.n	c003eee <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c003eb4:	68fb      	ldr	r3, [r7, #12]
 c003eb6:	2b02      	cmp	r3, #2
 c003eb8:	d133      	bne.n	c003f22 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003eba:	4a26      	ldr	r2, [pc, #152]	; (c003f54 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c003ebc:	68bb      	ldr	r3, [r7, #8]
 c003ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 c003ec2:	4a23      	ldr	r2, [pc, #140]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ec4:	68d2      	ldr	r2, [r2, #12]
 c003ec6:	0a12      	lsrs	r2, r2, #8
 c003ec8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003ecc:	fb02 f303 	mul.w	r3, r2, r3
 c003ed0:	613b      	str	r3, [r7, #16]
      break;
 c003ed2:	e029      	b.n	c003f28 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003ed4:	4a20      	ldr	r2, [pc, #128]	; (c003f58 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c003ed6:	68bb      	ldr	r3, [r7, #8]
 c003ed8:	fbb2 f3f3 	udiv	r3, r2, r3
 c003edc:	4a1c      	ldr	r2, [pc, #112]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ede:	68d2      	ldr	r2, [r2, #12]
 c003ee0:	0a12      	lsrs	r2, r2, #8
 c003ee2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003ee6:	fb02 f303 	mul.w	r3, r2, r3
 c003eea:	613b      	str	r3, [r7, #16]
      break;
 c003eec:	e01c      	b.n	c003f28 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003eee:	4b18      	ldr	r3, [pc, #96]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003ef0:	681b      	ldr	r3, [r3, #0]
 c003ef2:	f003 0308 	and.w	r3, r3, #8
 c003ef6:	2b00      	cmp	r3, #0
 c003ef8:	d107      	bne.n	c003f0a <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c003efa:	4b15      	ldr	r3, [pc, #84]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003efc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c003f00:	0a1b      	lsrs	r3, r3, #8
 c003f02:	f003 030f 	and.w	r3, r3, #15
 c003f06:	617b      	str	r3, [r7, #20]
 c003f08:	e005      	b.n	c003f16 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c003f0a:	4b11      	ldr	r3, [pc, #68]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f0c:	681b      	ldr	r3, [r3, #0]
 c003f0e:	091b      	lsrs	r3, r3, #4
 c003f10:	f003 030f 	and.w	r3, r3, #15
 c003f14:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c003f16:	4a11      	ldr	r2, [pc, #68]	; (c003f5c <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c003f18:	697b      	ldr	r3, [r7, #20]
 c003f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003f1e:	613b      	str	r3, [r7, #16]
        break;
 c003f20:	e002      	b.n	c003f28 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c003f22:	2300      	movs	r3, #0
 c003f24:	613b      	str	r3, [r7, #16]
      break;
 c003f26:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c003f28:	4b09      	ldr	r3, [pc, #36]	; (c003f50 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003f2a:	68db      	ldr	r3, [r3, #12]
 c003f2c:	0e5b      	lsrs	r3, r3, #25
 c003f2e:	f003 0303 	and.w	r3, r3, #3
 c003f32:	3301      	adds	r3, #1
 c003f34:	005b      	lsls	r3, r3, #1
 c003f36:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c003f38:	693a      	ldr	r2, [r7, #16]
 c003f3a:	687b      	ldr	r3, [r7, #4]
 c003f3c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003f40:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c003f42:	683b      	ldr	r3, [r7, #0]
}
 c003f44:	4618      	mov	r0, r3
 c003f46:	371c      	adds	r7, #28
 c003f48:	46bd      	mov	sp, r7
 c003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c003f4e:	4770      	bx	lr
 c003f50:	50021000 	.word	0x50021000
 c003f54:	00f42400 	.word	0x00f42400
 c003f58:	007a1200 	.word	0x007a1200
 c003f5c:	0c007350 	.word	0x0c007350

0c003f60 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c003f60:	b580      	push	{r7, lr}
 c003f62:	b088      	sub	sp, #32
 c003f64:	af00      	add	r7, sp, #0
 c003f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c003f68:	2300      	movs	r3, #0
 c003f6a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003f6c:	2300      	movs	r3, #0
 c003f6e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003f70:	687b      	ldr	r3, [r7, #4]
 c003f72:	681b      	ldr	r3, [r3, #0]
 c003f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c003f78:	2b00      	cmp	r3, #0
 c003f7a:	d040      	beq.n	c003ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c003f7c:	687b      	ldr	r3, [r7, #4]
 c003f7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003f80:	2b80      	cmp	r3, #128	; 0x80
 c003f82:	d02a      	beq.n	c003fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003f84:	2b80      	cmp	r3, #128	; 0x80
 c003f86:	d825      	bhi.n	c003fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003f88:	2b60      	cmp	r3, #96	; 0x60
 c003f8a:	d026      	beq.n	c003fda <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003f8c:	2b60      	cmp	r3, #96	; 0x60
 c003f8e:	d821      	bhi.n	c003fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003f90:	2b40      	cmp	r3, #64	; 0x40
 c003f92:	d006      	beq.n	c003fa2 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c003f94:	2b40      	cmp	r3, #64	; 0x40
 c003f96:	d81d      	bhi.n	c003fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003f98:	2b00      	cmp	r3, #0
 c003f9a:	d009      	beq.n	c003fb0 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c003f9c:	2b20      	cmp	r3, #32
 c003f9e:	d010      	beq.n	c003fc2 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c003fa0:	e018      	b.n	c003fd4 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003fa2:	4b8f      	ldr	r3, [pc, #572]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fa4:	68db      	ldr	r3, [r3, #12]
 c003fa6:	4a8e      	ldr	r2, [pc, #568]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fa8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003fac:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003fae:	e015      	b.n	c003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003fb0:	687b      	ldr	r3, [r7, #4]
 c003fb2:	3304      	adds	r3, #4
 c003fb4:	2100      	movs	r1, #0
 c003fb6:	4618      	mov	r0, r3
 c003fb8:	f000 fb56 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c003fbc:	4603      	mov	r3, r0
 c003fbe:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003fc0:	e00c      	b.n	c003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003fc2:	687b      	ldr	r3, [r7, #4]
 c003fc4:	3320      	adds	r3, #32
 c003fc6:	2100      	movs	r1, #0
 c003fc8:	4618      	mov	r0, r3
 c003fca:	f000 fc33 	bl	c004834 <RCCEx_PLLSAI2_Config>
 c003fce:	4603      	mov	r3, r0
 c003fd0:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003fd2:	e003      	b.n	c003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003fd4:	2301      	movs	r3, #1
 c003fd6:	77fb      	strb	r3, [r7, #31]
        break;
 c003fd8:	e000      	b.n	c003fdc <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c003fda:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003fdc:	7ffb      	ldrb	r3, [r7, #31]
 c003fde:	2b00      	cmp	r3, #0
 c003fe0:	d10b      	bne.n	c003ffa <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003fe2:	4b7f      	ldr	r3, [pc, #508]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003fe4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003fe8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c003fec:	687b      	ldr	r3, [r7, #4]
 c003fee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003ff0:	497b      	ldr	r1, [pc, #492]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003ff2:	4313      	orrs	r3, r2
 c003ff4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003ff8:	e001      	b.n	c003ffe <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003ffa:	7ffb      	ldrb	r3, [r7, #31]
 c003ffc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c003ffe:	687b      	ldr	r3, [r7, #4]
 c004000:	681b      	ldr	r3, [r3, #0]
 c004002:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c004006:	2b00      	cmp	r3, #0
 c004008:	d047      	beq.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c00400a:	687b      	ldr	r3, [r7, #4]
 c00400c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00400e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004012:	d030      	beq.n	c004076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004014:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004018:	d82a      	bhi.n	c004070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c00401a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c00401e:	d02a      	beq.n	c004076 <HAL_RCCEx_PeriphCLKConfig+0x116>
 c004020:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004024:	d824      	bhi.n	c004070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004026:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00402a:	d008      	beq.n	c00403e <HAL_RCCEx_PeriphCLKConfig+0xde>
 c00402c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004030:	d81e      	bhi.n	c004070 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c004032:	2b00      	cmp	r3, #0
 c004034:	d00a      	beq.n	c00404c <HAL_RCCEx_PeriphCLKConfig+0xec>
 c004036:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00403a:	d010      	beq.n	c00405e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c00403c:	e018      	b.n	c004070 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c00403e:	4b68      	ldr	r3, [pc, #416]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004040:	68db      	ldr	r3, [r3, #12]
 c004042:	4a67      	ldr	r2, [pc, #412]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004044:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004048:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00404a:	e015      	b.n	c004078 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c00404c:	687b      	ldr	r3, [r7, #4]
 c00404e:	3304      	adds	r3, #4
 c004050:	2100      	movs	r1, #0
 c004052:	4618      	mov	r0, r3
 c004054:	f000 fb08 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c004058:	4603      	mov	r3, r0
 c00405a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00405c:	e00c      	b.n	c004078 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c00405e:	687b      	ldr	r3, [r7, #4]
 c004060:	3320      	adds	r3, #32
 c004062:	2100      	movs	r1, #0
 c004064:	4618      	mov	r0, r3
 c004066:	f000 fbe5 	bl	c004834 <RCCEx_PLLSAI2_Config>
 c00406a:	4603      	mov	r3, r0
 c00406c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c00406e:	e003      	b.n	c004078 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c004070:	2301      	movs	r3, #1
 c004072:	77fb      	strb	r3, [r7, #31]
        break;
 c004074:	e000      	b.n	c004078 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c004076:	bf00      	nop
    }

    if (ret == HAL_OK)
 c004078:	7ffb      	ldrb	r3, [r7, #31]
 c00407a:	2b00      	cmp	r3, #0
 c00407c:	d10b      	bne.n	c004096 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c00407e:	4b58      	ldr	r3, [pc, #352]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004080:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004084:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c004088:	687b      	ldr	r3, [r7, #4]
 c00408a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c00408c:	4954      	ldr	r1, [pc, #336]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00408e:	4313      	orrs	r3, r2
 c004090:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c004094:	e001      	b.n	c00409a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c004096:	7ffb      	ldrb	r3, [r7, #31]
 c004098:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00409a:	687b      	ldr	r3, [r7, #4]
 c00409c:	681b      	ldr	r3, [r3, #0]
 c00409e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0040a2:	2b00      	cmp	r3, #0
 c0040a4:	f000 80ab 	beq.w	c0041fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c0040a8:	2300      	movs	r3, #0
 c0040aa:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c0040ac:	4b4c      	ldr	r3, [pc, #304]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0040b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0040b4:	2b00      	cmp	r3, #0
 c0040b6:	d10d      	bne.n	c0040d4 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c0040b8:	4b49      	ldr	r3, [pc, #292]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0040bc:	4a48      	ldr	r2, [pc, #288]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c0040c2:	6593      	str	r3, [r2, #88]	; 0x58
 c0040c4:	4b46      	ldr	r3, [pc, #280]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0040c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0040c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c0040cc:	60fb      	str	r3, [r7, #12]
 c0040ce:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c0040d0:	2301      	movs	r3, #1
 c0040d2:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c0040d4:	4b43      	ldr	r3, [pc, #268]	; (c0041e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0040d6:	681b      	ldr	r3, [r3, #0]
 c0040d8:	4a42      	ldr	r2, [pc, #264]	; (c0041e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0040da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c0040de:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c0040e0:	f7fd febe 	bl	c001e60 <HAL_GetTick>
 c0040e4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0040e6:	e00f      	b.n	c004108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c0040e8:	f7fd feba 	bl	c001e60 <HAL_GetTick>
 c0040ec:	4602      	mov	r2, r0
 c0040ee:	693b      	ldr	r3, [r7, #16]
 c0040f0:	1ad3      	subs	r3, r2, r3
 c0040f2:	2b02      	cmp	r3, #2
 c0040f4:	d908      	bls.n	c004108 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0040f6:	4b3b      	ldr	r3, [pc, #236]	; (c0041e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0040f8:	681b      	ldr	r3, [r3, #0]
 c0040fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0040fe:	2b00      	cmp	r3, #0
 c004100:	d109      	bne.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c004102:	2303      	movs	r3, #3
 c004104:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c004106:	e006      	b.n	c004116 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c004108:	4b36      	ldr	r3, [pc, #216]	; (c0041e4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00410a:	681b      	ldr	r3, [r3, #0]
 c00410c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c004110:	2b00      	cmp	r3, #0
 c004112:	d0e9      	beq.n	c0040e8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 c004114:	e000      	b.n	c004118 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c004116:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c004118:	7ffb      	ldrb	r3, [r7, #31]
 c00411a:	2b00      	cmp	r3, #0
 c00411c:	d164      	bne.n	c0041e8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c00411e:	4b30      	ldr	r3, [pc, #192]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004124:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004128:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c00412a:	69bb      	ldr	r3, [r7, #24]
 c00412c:	2b00      	cmp	r3, #0
 c00412e:	d01f      	beq.n	c004170 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c004130:	687b      	ldr	r3, [r7, #4]
 c004132:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004136:	69ba      	ldr	r2, [r7, #24]
 c004138:	429a      	cmp	r2, r3
 c00413a:	d019      	beq.n	c004170 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c00413c:	4b28      	ldr	r3, [pc, #160]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00413e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c004142:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c004146:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c004148:	4b25      	ldr	r3, [pc, #148]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00414a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00414e:	4a24      	ldr	r2, [pc, #144]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004150:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c004154:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c004158:	4b21      	ldr	r3, [pc, #132]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00415a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00415e:	4a20      	ldr	r2, [pc, #128]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004160:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c004164:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c004168:	4a1d      	ldr	r2, [pc, #116]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00416a:	69bb      	ldr	r3, [r7, #24]
 c00416c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c004170:	69bb      	ldr	r3, [r7, #24]
 c004172:	f003 0301 	and.w	r3, r3, #1
 c004176:	2b00      	cmp	r3, #0
 c004178:	d01f      	beq.n	c0041ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00417a:	f7fd fe71 	bl	c001e60 <HAL_GetTick>
 c00417e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004180:	e012      	b.n	c0041a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c004182:	f7fd fe6d 	bl	c001e60 <HAL_GetTick>
 c004186:	4602      	mov	r2, r0
 c004188:	693b      	ldr	r3, [r7, #16]
 c00418a:	1ad3      	subs	r3, r2, r3
 c00418c:	f241 3288 	movw	r2, #5000	; 0x1388
 c004190:	4293      	cmp	r3, r2
 c004192:	d909      	bls.n	c0041a8 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c004194:	4b12      	ldr	r3, [pc, #72]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c004196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00419a:	f003 0302 	and.w	r3, r3, #2
 c00419e:	2b00      	cmp	r3, #0
 c0041a0:	d10a      	bne.n	c0041b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c0041a2:	2303      	movs	r3, #3
 c0041a4:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c0041a6:	e007      	b.n	c0041b8 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c0041a8:	4b0d      	ldr	r3, [pc, #52]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041ae:	f003 0302 	and.w	r3, r3, #2
 c0041b2:	2b00      	cmp	r3, #0
 c0041b4:	d0e5      	beq.n	c004182 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c0041b6:	e000      	b.n	c0041ba <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c0041b8:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c0041ba:	7ffb      	ldrb	r3, [r7, #31]
 c0041bc:	2b00      	cmp	r3, #0
 c0041be:	d10c      	bne.n	c0041da <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c0041c0:	4b07      	ldr	r3, [pc, #28]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c0041ca:	687b      	ldr	r3, [r7, #4]
 c0041cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0041d0:	4903      	ldr	r1, [pc, #12]	; (c0041e0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0041d2:	4313      	orrs	r3, r2
 c0041d4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c0041d8:	e008      	b.n	c0041ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c0041da:	7ffb      	ldrb	r3, [r7, #31]
 c0041dc:	77bb      	strb	r3, [r7, #30]
 c0041de:	e005      	b.n	c0041ec <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c0041e0:	50021000 	.word	0x50021000
 c0041e4:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c0041e8:	7ffb      	ldrb	r3, [r7, #31]
 c0041ea:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c0041ec:	7dfb      	ldrb	r3, [r7, #23]
 c0041ee:	2b01      	cmp	r3, #1
 c0041f0:	d105      	bne.n	c0041fe <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c0041f2:	4b9c      	ldr	r3, [pc, #624]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0041f6:	4a9b      	ldr	r2, [pc, #620]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0041f8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0041fc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0041fe:	687b      	ldr	r3, [r7, #4]
 c004200:	681b      	ldr	r3, [r3, #0]
 c004202:	f003 0301 	and.w	r3, r3, #1
 c004206:	2b00      	cmp	r3, #0
 c004208:	d00a      	beq.n	c004220 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c00420a:	4b96      	ldr	r3, [pc, #600]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00420c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004210:	f023 0203 	bic.w	r2, r3, #3
 c004214:	687b      	ldr	r3, [r7, #4]
 c004216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004218:	4992      	ldr	r1, [pc, #584]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00421a:	4313      	orrs	r3, r2
 c00421c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c004220:	687b      	ldr	r3, [r7, #4]
 c004222:	681b      	ldr	r3, [r3, #0]
 c004224:	f003 0302 	and.w	r3, r3, #2
 c004228:	2b00      	cmp	r3, #0
 c00422a:	d00a      	beq.n	c004242 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c00422c:	4b8d      	ldr	r3, [pc, #564]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00422e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004232:	f023 020c 	bic.w	r2, r3, #12
 c004236:	687b      	ldr	r3, [r7, #4]
 c004238:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c00423a:	498a      	ldr	r1, [pc, #552]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00423c:	4313      	orrs	r3, r2
 c00423e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c004242:	687b      	ldr	r3, [r7, #4]
 c004244:	681b      	ldr	r3, [r3, #0]
 c004246:	f003 0304 	and.w	r3, r3, #4
 c00424a:	2b00      	cmp	r3, #0
 c00424c:	d00a      	beq.n	c004264 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c00424e:	4b85      	ldr	r3, [pc, #532]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004254:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c004258:	687b      	ldr	r3, [r7, #4]
 c00425a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c00425c:	4981      	ldr	r1, [pc, #516]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00425e:	4313      	orrs	r3, r2
 c004260:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c004264:	687b      	ldr	r3, [r7, #4]
 c004266:	681b      	ldr	r3, [r3, #0]
 c004268:	f003 0308 	and.w	r3, r3, #8
 c00426c:	2b00      	cmp	r3, #0
 c00426e:	d00a      	beq.n	c004286 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c004270:	4b7c      	ldr	r3, [pc, #496]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004272:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004276:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c00427a:	687b      	ldr	r3, [r7, #4]
 c00427c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c00427e:	4979      	ldr	r1, [pc, #484]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004280:	4313      	orrs	r3, r2
 c004282:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c004286:	687b      	ldr	r3, [r7, #4]
 c004288:	681b      	ldr	r3, [r3, #0]
 c00428a:	f003 0310 	and.w	r3, r3, #16
 c00428e:	2b00      	cmp	r3, #0
 c004290:	d00a      	beq.n	c0042a8 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c004292:	4b74      	ldr	r3, [pc, #464]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004298:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c00429c:	687b      	ldr	r3, [r7, #4]
 c00429e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0042a0:	4970      	ldr	r1, [pc, #448]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042a2:	4313      	orrs	r3, r2
 c0042a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c0042a8:	687b      	ldr	r3, [r7, #4]
 c0042aa:	681b      	ldr	r3, [r3, #0]
 c0042ac:	f003 0320 	and.w	r3, r3, #32
 c0042b0:	2b00      	cmp	r3, #0
 c0042b2:	d00a      	beq.n	c0042ca <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c0042b4:	4b6b      	ldr	r3, [pc, #428]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042ba:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c0042be:	687b      	ldr	r3, [r7, #4]
 c0042c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0042c2:	4968      	ldr	r1, [pc, #416]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042c4:	4313      	orrs	r3, r2
 c0042c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c0042ca:	687b      	ldr	r3, [r7, #4]
 c0042cc:	681b      	ldr	r3, [r3, #0]
 c0042ce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0042d2:	2b00      	cmp	r3, #0
 c0042d4:	d00a      	beq.n	c0042ec <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c0042d6:	4b63      	ldr	r3, [pc, #396]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042dc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c0042e0:	687b      	ldr	r3, [r7, #4]
 c0042e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0042e4:	495f      	ldr	r1, [pc, #380]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042e6:	4313      	orrs	r3, r2
 c0042e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c0042ec:	687b      	ldr	r3, [r7, #4]
 c0042ee:	681b      	ldr	r3, [r3, #0]
 c0042f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0042f4:	2b00      	cmp	r3, #0
 c0042f6:	d00a      	beq.n	c00430e <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c0042f8:	4b5a      	ldr	r3, [pc, #360]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0042fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0042fe:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c004302:	687b      	ldr	r3, [r7, #4]
 c004304:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004306:	4957      	ldr	r1, [pc, #348]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004308:	4313      	orrs	r3, r2
 c00430a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c00430e:	687b      	ldr	r3, [r7, #4]
 c004310:	681b      	ldr	r3, [r3, #0]
 c004312:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c004316:	2b00      	cmp	r3, #0
 c004318:	d00a      	beq.n	c004330 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c00431a:	4b52      	ldr	r3, [pc, #328]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00431c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004320:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c004324:	687b      	ldr	r3, [r7, #4]
 c004326:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c004328:	494e      	ldr	r1, [pc, #312]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00432a:	4313      	orrs	r3, r2
 c00432c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c004330:	687b      	ldr	r3, [r7, #4]
 c004332:	681b      	ldr	r3, [r3, #0]
 c004334:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c004338:	2b00      	cmp	r3, #0
 c00433a:	d031      	beq.n	c0043a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c00433c:	687b      	ldr	r3, [r7, #4]
 c00433e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004340:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c004344:	d00e      	beq.n	c004364 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c004346:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c00434a:	d814      	bhi.n	c004376 <HAL_RCCEx_PeriphCLKConfig+0x416>
 c00434c:	2b00      	cmp	r3, #0
 c00434e:	d015      	beq.n	c00437c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c004350:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c004354:	d10f      	bne.n	c004376 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004356:	4b43      	ldr	r3, [pc, #268]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004358:	68db      	ldr	r3, [r3, #12]
 c00435a:	4a42      	ldr	r2, [pc, #264]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00435c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004360:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c004362:	e00c      	b.n	c00437e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c004364:	687b      	ldr	r3, [r7, #4]
 c004366:	3304      	adds	r3, #4
 c004368:	2100      	movs	r1, #0
 c00436a:	4618      	mov	r0, r3
 c00436c:	f000 f97c 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c004370:	4603      	mov	r3, r0
 c004372:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c004374:	e003      	b.n	c00437e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c004376:	2301      	movs	r3, #1
 c004378:	77fb      	strb	r3, [r7, #31]
        break;
 c00437a:	e000      	b.n	c00437e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c00437c:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00437e:	7ffb      	ldrb	r3, [r7, #31]
 c004380:	2b00      	cmp	r3, #0
 c004382:	d10b      	bne.n	c00439c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c004384:	4b37      	ldr	r3, [pc, #220]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004386:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00438a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c00438e:	687b      	ldr	r3, [r7, #4]
 c004390:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c004392:	4934      	ldr	r1, [pc, #208]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004394:	4313      	orrs	r3, r2
 c004396:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c00439a:	e001      	b.n	c0043a0 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00439c:	7ffb      	ldrb	r3, [r7, #31]
 c00439e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c0043a0:	687b      	ldr	r3, [r7, #4]
 c0043a2:	681b      	ldr	r3, [r3, #0]
 c0043a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0043a8:	2b00      	cmp	r3, #0
 c0043aa:	d00a      	beq.n	c0043c2 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c0043ac:	4b2d      	ldr	r3, [pc, #180]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0043b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c0043b6:	687b      	ldr	r3, [r7, #4]
 c0043b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0043ba:	492a      	ldr	r1, [pc, #168]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043bc:	4313      	orrs	r3, r2
 c0043be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c0043c2:	687b      	ldr	r3, [r7, #4]
 c0043c4:	681b      	ldr	r3, [r3, #0]
 c0043c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0043ca:	2b00      	cmp	r3, #0
 c0043cc:	d00a      	beq.n	c0043e4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c0043ce:	4b25      	ldr	r3, [pc, #148]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0043d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c0043d8:	687b      	ldr	r3, [r7, #4]
 c0043da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0043dc:	4921      	ldr	r1, [pc, #132]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043de:	4313      	orrs	r3, r2
 c0043e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c0043e4:	687b      	ldr	r3, [r7, #4]
 c0043e6:	681b      	ldr	r3, [r3, #0]
 c0043e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0043ec:	2b00      	cmp	r3, #0
 c0043ee:	d00a      	beq.n	c004406 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c0043f0:	4b1c      	ldr	r3, [pc, #112]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0043f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0043f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c0043fa:	687b      	ldr	r3, [r7, #4]
 c0043fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0043fe:	4919      	ldr	r1, [pc, #100]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004400:	4313      	orrs	r3, r2
 c004402:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c004406:	687b      	ldr	r3, [r7, #4]
 c004408:	681b      	ldr	r3, [r3, #0]
 c00440a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c00440e:	2b00      	cmp	r3, #0
 c004410:	d00a      	beq.n	c004428 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c004412:	4b14      	ldr	r3, [pc, #80]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004414:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004418:	f023 0203 	bic.w	r2, r3, #3
 c00441c:	687b      	ldr	r3, [r7, #4]
 c00441e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004420:	4910      	ldr	r1, [pc, #64]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004422:	4313      	orrs	r3, r2
 c004424:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c004428:	687b      	ldr	r3, [r7, #4]
 c00442a:	681b      	ldr	r3, [r3, #0]
 c00442c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c004430:	2b00      	cmp	r3, #0
 c004432:	d02b      	beq.n	c00448c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c004434:	4b0b      	ldr	r3, [pc, #44]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00443a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c00443e:	687b      	ldr	r3, [r7, #4]
 c004440:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c004442:	4908      	ldr	r1, [pc, #32]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004444:	4313      	orrs	r3, r2
 c004446:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c00444a:	687b      	ldr	r3, [r7, #4]
 c00444c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00444e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004452:	d109      	bne.n	c004468 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c004454:	4b03      	ldr	r3, [pc, #12]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c004456:	68db      	ldr	r3, [r3, #12]
 c004458:	4a02      	ldr	r2, [pc, #8]	; (c004464 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00445a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c00445e:	60d3      	str	r3, [r2, #12]
 c004460:	e014      	b.n	c00448c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c004462:	bf00      	nop
 c004464:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c004468:	687b      	ldr	r3, [r7, #4]
 c00446a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c00446c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004470:	d10c      	bne.n	c00448c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c004472:	687b      	ldr	r3, [r7, #4]
 c004474:	3304      	adds	r3, #4
 c004476:	2101      	movs	r1, #1
 c004478:	4618      	mov	r0, r3
 c00447a:	f000 f8f5 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c00447e:	4603      	mov	r3, r0
 c004480:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c004482:	7ffb      	ldrb	r3, [r7, #31]
 c004484:	2b00      	cmp	r3, #0
 c004486:	d001      	beq.n	c00448c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c004488:	7ffb      	ldrb	r3, [r7, #31]
 c00448a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c00448c:	687b      	ldr	r3, [r7, #4]
 c00448e:	681b      	ldr	r3, [r3, #0]
 c004490:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c004494:	2b00      	cmp	r3, #0
 c004496:	d04a      	beq.n	c00452e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c004498:	687b      	ldr	r3, [r7, #4]
 c00449a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00449c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0044a0:	d108      	bne.n	c0044b4 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c0044a2:	4b70      	ldr	r3, [pc, #448]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0044a8:	4a6e      	ldr	r2, [pc, #440]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c0044ae:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c0044b2:	e012      	b.n	c0044da <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c0044b4:	4b6b      	ldr	r3, [pc, #428]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0044ba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c0044be:	687b      	ldr	r3, [r7, #4]
 c0044c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0044c2:	4968      	ldr	r1, [pc, #416]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044c4:	4313      	orrs	r3, r2
 c0044c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c0044ca:	4b66      	ldr	r3, [pc, #408]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0044d0:	4a64      	ldr	r2, [pc, #400]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0044d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c0044d6:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c0044da:	687b      	ldr	r3, [r7, #4]
 c0044dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c0044de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c0044e2:	d10d      	bne.n	c004500 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c0044e4:	687b      	ldr	r3, [r7, #4]
 c0044e6:	3304      	adds	r3, #4
 c0044e8:	2101      	movs	r1, #1
 c0044ea:	4618      	mov	r0, r3
 c0044ec:	f000 f8bc 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c0044f0:	4603      	mov	r3, r0
 c0044f2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0044f4:	7ffb      	ldrb	r3, [r7, #31]
 c0044f6:	2b00      	cmp	r3, #0
 c0044f8:	d019      	beq.n	c00452e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c0044fa:	7ffb      	ldrb	r3, [r7, #31]
 c0044fc:	77bb      	strb	r3, [r7, #30]
 c0044fe:	e016      	b.n	c00452e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c004500:	687b      	ldr	r3, [r7, #4]
 c004502:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c004504:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004508:	d106      	bne.n	c004518 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00450a:	4b56      	ldr	r3, [pc, #344]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00450c:	68db      	ldr	r3, [r3, #12]
 c00450e:	4a55      	ldr	r2, [pc, #340]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004510:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004514:	60d3      	str	r3, [r2, #12]
 c004516:	e00a      	b.n	c00452e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c004518:	687b      	ldr	r3, [r7, #4]
 c00451a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c00451c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c004520:	d105      	bne.n	c00452e <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c004522:	4b50      	ldr	r3, [pc, #320]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004524:	68db      	ldr	r3, [r3, #12]
 c004526:	4a4f      	ldr	r2, [pc, #316]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004528:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c00452c:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c00452e:	687b      	ldr	r3, [r7, #4]
 c004530:	681b      	ldr	r3, [r3, #0]
 c004532:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c004536:	2b00      	cmp	r3, #0
 c004538:	d028      	beq.n	c00458c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c00453a:	4b4a      	ldr	r3, [pc, #296]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00453c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004540:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c004544:	687b      	ldr	r3, [r7, #4]
 c004546:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004548:	4946      	ldr	r1, [pc, #280]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00454a:	4313      	orrs	r3, r2
 c00454c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c004550:	687b      	ldr	r3, [r7, #4]
 c004552:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c004554:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c004558:	d106      	bne.n	c004568 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00455a:	4b42      	ldr	r3, [pc, #264]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00455c:	68db      	ldr	r3, [r3, #12]
 c00455e:	4a41      	ldr	r2, [pc, #260]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004560:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004564:	60d3      	str	r3, [r2, #12]
 c004566:	e011      	b.n	c00458c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c004568:	687b      	ldr	r3, [r7, #4]
 c00456a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c00456c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c004570:	d10c      	bne.n	c00458c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c004572:	687b      	ldr	r3, [r7, #4]
 c004574:	3304      	adds	r3, #4
 c004576:	2101      	movs	r1, #1
 c004578:	4618      	mov	r0, r3
 c00457a:	f000 f875 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c00457e:	4603      	mov	r3, r0
 c004580:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c004582:	7ffb      	ldrb	r3, [r7, #31]
 c004584:	2b00      	cmp	r3, #0
 c004586:	d001      	beq.n	c00458c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c004588:	7ffb      	ldrb	r3, [r7, #31]
 c00458a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c00458c:	687b      	ldr	r3, [r7, #4]
 c00458e:	681b      	ldr	r3, [r3, #0]
 c004590:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c004594:	2b00      	cmp	r3, #0
 c004596:	d01e      	beq.n	c0045d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c004598:	4b32      	ldr	r3, [pc, #200]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00459a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00459e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c0045a2:	687b      	ldr	r3, [r7, #4]
 c0045a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0045a8:	492e      	ldr	r1, [pc, #184]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045aa:	4313      	orrs	r3, r2
 c0045ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c0045b0:	687b      	ldr	r3, [r7, #4]
 c0045b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0045b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c0045ba:	d10c      	bne.n	c0045d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c0045bc:	687b      	ldr	r3, [r7, #4]
 c0045be:	3304      	adds	r3, #4
 c0045c0:	2102      	movs	r1, #2
 c0045c2:	4618      	mov	r0, r3
 c0045c4:	f000 f850 	bl	c004668 <RCCEx_PLLSAI1_Config>
 c0045c8:	4603      	mov	r3, r0
 c0045ca:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c0045cc:	7ffb      	ldrb	r3, [r7, #31]
 c0045ce:	2b00      	cmp	r3, #0
 c0045d0:	d001      	beq.n	c0045d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c0045d2:	7ffb      	ldrb	r3, [r7, #31]
 c0045d4:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c0045d6:	687b      	ldr	r3, [r7, #4]
 c0045d8:	681b      	ldr	r3, [r3, #0]
 c0045da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0045de:	2b00      	cmp	r3, #0
 c0045e0:	d00b      	beq.n	c0045fa <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c0045e2:	4b20      	ldr	r3, [pc, #128]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c0045e8:	f023 0204 	bic.w	r2, r3, #4
 c0045ec:	687b      	ldr	r3, [r7, #4]
 c0045ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0045f2:	491c      	ldr	r1, [pc, #112]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c0045f4:	4313      	orrs	r3, r2
 c0045f6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c0045fa:	687b      	ldr	r3, [r7, #4]
 c0045fc:	681b      	ldr	r3, [r3, #0]
 c0045fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c004602:	2b00      	cmp	r3, #0
 c004604:	d00b      	beq.n	c00461e <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c004606:	4b17      	ldr	r3, [pc, #92]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004608:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00460c:	f023 0218 	bic.w	r2, r3, #24
 c004610:	687b      	ldr	r3, [r7, #4]
 c004612:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004616:	4913      	ldr	r1, [pc, #76]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004618:	4313      	orrs	r3, r2
 c00461a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c00461e:	687b      	ldr	r3, [r7, #4]
 c004620:	681b      	ldr	r3, [r3, #0]
 c004622:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c004626:	2b00      	cmp	r3, #0
 c004628:	d017      	beq.n	c00465a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c00462a:	4b0e      	ldr	r3, [pc, #56]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00462c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c004630:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c004634:	687b      	ldr	r3, [r7, #4]
 c004636:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c00463a:	490a      	ldr	r1, [pc, #40]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c00463c:	4313      	orrs	r3, r2
 c00463e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c004642:	687b      	ldr	r3, [r7, #4]
 c004644:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c004648:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c00464c:	d105      	bne.n	c00465a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c00464e:	4b05      	ldr	r3, [pc, #20]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004650:	68db      	ldr	r3, [r3, #12]
 c004652:	4a04      	ldr	r2, [pc, #16]	; (c004664 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c004654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c004658:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c00465a:	7fbb      	ldrb	r3, [r7, #30]
}
 c00465c:	4618      	mov	r0, r3
 c00465e:	3720      	adds	r7, #32
 c004660:	46bd      	mov	sp, r7
 c004662:	bd80      	pop	{r7, pc}
 c004664:	50021000 	.word	0x50021000

0c004668 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c004668:	b580      	push	{r7, lr}
 c00466a:	b084      	sub	sp, #16
 c00466c:	af00      	add	r7, sp, #0
 c00466e:	6078      	str	r0, [r7, #4]
 c004670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c004672:	2300      	movs	r3, #0
 c004674:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c004676:	687b      	ldr	r3, [r7, #4]
 c004678:	681b      	ldr	r3, [r3, #0]
 c00467a:	2b03      	cmp	r3, #3
 c00467c:	d018      	beq.n	c0046b0 <RCCEx_PLLSAI1_Config+0x48>
 c00467e:	2b03      	cmp	r3, #3
 c004680:	d81f      	bhi.n	c0046c2 <RCCEx_PLLSAI1_Config+0x5a>
 c004682:	2b01      	cmp	r3, #1
 c004684:	d002      	beq.n	c00468c <RCCEx_PLLSAI1_Config+0x24>
 c004686:	2b02      	cmp	r3, #2
 c004688:	d009      	beq.n	c00469e <RCCEx_PLLSAI1_Config+0x36>
 c00468a:	e01a      	b.n	c0046c2 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c00468c:	4b65      	ldr	r3, [pc, #404]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00468e:	681b      	ldr	r3, [r3, #0]
 c004690:	f003 0302 	and.w	r3, r3, #2
 c004694:	2b00      	cmp	r3, #0
 c004696:	d117      	bne.n	c0046c8 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c004698:	2301      	movs	r3, #1
 c00469a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00469c:	e014      	b.n	c0046c8 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00469e:	4b61      	ldr	r3, [pc, #388]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046a0:	681b      	ldr	r3, [r3, #0]
 c0046a2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0046a6:	2b00      	cmp	r3, #0
 c0046a8:	d110      	bne.n	c0046cc <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c0046aa:	2301      	movs	r3, #1
 c0046ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0046ae:	e00d      	b.n	c0046cc <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c0046b0:	4b5c      	ldr	r3, [pc, #368]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046b2:	681b      	ldr	r3, [r3, #0]
 c0046b4:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c0046b8:	2b00      	cmp	r3, #0
 c0046ba:	d109      	bne.n	c0046d0 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c0046bc:	2301      	movs	r3, #1
 c0046be:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c0046c0:	e006      	b.n	c0046d0 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c0046c2:	2301      	movs	r3, #1
 c0046c4:	73fb      	strb	r3, [r7, #15]
      break;
 c0046c6:	e004      	b.n	c0046d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0046c8:	bf00      	nop
 c0046ca:	e002      	b.n	c0046d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0046cc:	bf00      	nop
 c0046ce:	e000      	b.n	c0046d2 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c0046d0:	bf00      	nop
  }

  if (status == HAL_OK)
 c0046d2:	7bfb      	ldrb	r3, [r7, #15]
 c0046d4:	2b00      	cmp	r3, #0
 c0046d6:	f040 809f 	bne.w	c004818 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c0046da:	4b52      	ldr	r3, [pc, #328]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046dc:	681b      	ldr	r3, [r3, #0]
 c0046de:	4a51      	ldr	r2, [pc, #324]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046e0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c0046e4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0046e6:	f7fd fbbb 	bl	c001e60 <HAL_GetTick>
 c0046ea:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0046ec:	e00f      	b.n	c00470e <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0046ee:	f7fd fbb7 	bl	c001e60 <HAL_GetTick>
 c0046f2:	4602      	mov	r2, r0
 c0046f4:	68bb      	ldr	r3, [r7, #8]
 c0046f6:	1ad3      	subs	r3, r2, r3
 c0046f8:	2b02      	cmp	r3, #2
 c0046fa:	d908      	bls.n	c00470e <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c0046fc:	4b49      	ldr	r3, [pc, #292]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0046fe:	681b      	ldr	r3, [r3, #0]
 c004700:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004704:	2b00      	cmp	r3, #0
 c004706:	d009      	beq.n	c00471c <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c004708:	2303      	movs	r3, #3
 c00470a:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c00470c:	e006      	b.n	c00471c <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c00470e:	4b45      	ldr	r3, [pc, #276]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004710:	681b      	ldr	r3, [r3, #0]
 c004712:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c004716:	2b00      	cmp	r3, #0
 c004718:	d1e9      	bne.n	c0046ee <RCCEx_PLLSAI1_Config+0x86>
 c00471a:	e000      	b.n	c00471e <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c00471c:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c00471e:	7bfb      	ldrb	r3, [r7, #15]
 c004720:	2b00      	cmp	r3, #0
 c004722:	d179      	bne.n	c004818 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c004724:	683b      	ldr	r3, [r7, #0]
 c004726:	2b00      	cmp	r3, #0
 c004728:	d116      	bne.n	c004758 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00472a:	4b3e      	ldr	r3, [pc, #248]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00472c:	691a      	ldr	r2, [r3, #16]
 c00472e:	4b3e      	ldr	r3, [pc, #248]	; (c004828 <RCCEx_PLLSAI1_Config+0x1c0>)
 c004730:	4013      	ands	r3, r2
 c004732:	687a      	ldr	r2, [r7, #4]
 c004734:	6892      	ldr	r2, [r2, #8]
 c004736:	0211      	lsls	r1, r2, #8
 c004738:	687a      	ldr	r2, [r7, #4]
 c00473a:	68d2      	ldr	r2, [r2, #12]
 c00473c:	06d2      	lsls	r2, r2, #27
 c00473e:	4311      	orrs	r1, r2
 c004740:	687a      	ldr	r2, [r7, #4]
 c004742:	6852      	ldr	r2, [r2, #4]
 c004744:	3a01      	subs	r2, #1
 c004746:	0112      	lsls	r2, r2, #4
 c004748:	4311      	orrs	r1, r2
 c00474a:	687a      	ldr	r2, [r7, #4]
 c00474c:	6812      	ldr	r2, [r2, #0]
 c00474e:	430a      	orrs	r2, r1
 c004750:	4934      	ldr	r1, [pc, #208]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004752:	4313      	orrs	r3, r2
 c004754:	610b      	str	r3, [r1, #16]
 c004756:	e033      	b.n	c0047c0 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c004758:	683b      	ldr	r3, [r7, #0]
 c00475a:	2b01      	cmp	r3, #1
 c00475c:	d118      	bne.n	c004790 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c00475e:	4b31      	ldr	r3, [pc, #196]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004760:	691a      	ldr	r2, [r3, #16]
 c004762:	4b32      	ldr	r3, [pc, #200]	; (c00482c <RCCEx_PLLSAI1_Config+0x1c4>)
 c004764:	4013      	ands	r3, r2
 c004766:	687a      	ldr	r2, [r7, #4]
 c004768:	6892      	ldr	r2, [r2, #8]
 c00476a:	0211      	lsls	r1, r2, #8
 c00476c:	687a      	ldr	r2, [r7, #4]
 c00476e:	6912      	ldr	r2, [r2, #16]
 c004770:	0852      	lsrs	r2, r2, #1
 c004772:	3a01      	subs	r2, #1
 c004774:	0552      	lsls	r2, r2, #21
 c004776:	4311      	orrs	r1, r2
 c004778:	687a      	ldr	r2, [r7, #4]
 c00477a:	6852      	ldr	r2, [r2, #4]
 c00477c:	3a01      	subs	r2, #1
 c00477e:	0112      	lsls	r2, r2, #4
 c004780:	4311      	orrs	r1, r2
 c004782:	687a      	ldr	r2, [r7, #4]
 c004784:	6812      	ldr	r2, [r2, #0]
 c004786:	430a      	orrs	r2, r1
 c004788:	4926      	ldr	r1, [pc, #152]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00478a:	4313      	orrs	r3, r2
 c00478c:	610b      	str	r3, [r1, #16]
 c00478e:	e017      	b.n	c0047c0 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c004790:	4b24      	ldr	r3, [pc, #144]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004792:	691a      	ldr	r2, [r3, #16]
 c004794:	4b26      	ldr	r3, [pc, #152]	; (c004830 <RCCEx_PLLSAI1_Config+0x1c8>)
 c004796:	4013      	ands	r3, r2
 c004798:	687a      	ldr	r2, [r7, #4]
 c00479a:	6892      	ldr	r2, [r2, #8]
 c00479c:	0211      	lsls	r1, r2, #8
 c00479e:	687a      	ldr	r2, [r7, #4]
 c0047a0:	6952      	ldr	r2, [r2, #20]
 c0047a2:	0852      	lsrs	r2, r2, #1
 c0047a4:	3a01      	subs	r2, #1
 c0047a6:	0652      	lsls	r2, r2, #25
 c0047a8:	4311      	orrs	r1, r2
 c0047aa:	687a      	ldr	r2, [r7, #4]
 c0047ac:	6852      	ldr	r2, [r2, #4]
 c0047ae:	3a01      	subs	r2, #1
 c0047b0:	0112      	lsls	r2, r2, #4
 c0047b2:	4311      	orrs	r1, r2
 c0047b4:	687a      	ldr	r2, [r7, #4]
 c0047b6:	6812      	ldr	r2, [r2, #0]
 c0047b8:	430a      	orrs	r2, r1
 c0047ba:	491a      	ldr	r1, [pc, #104]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047bc:	4313      	orrs	r3, r2
 c0047be:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c0047c0:	4b18      	ldr	r3, [pc, #96]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047c2:	681b      	ldr	r3, [r3, #0]
 c0047c4:	4a17      	ldr	r2, [pc, #92]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047c6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c0047ca:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c0047cc:	f7fd fb48 	bl	c001e60 <HAL_GetTick>
 c0047d0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0047d2:	e00f      	b.n	c0047f4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c0047d4:	f7fd fb44 	bl	c001e60 <HAL_GetTick>
 c0047d8:	4602      	mov	r2, r0
 c0047da:	68bb      	ldr	r3, [r7, #8]
 c0047dc:	1ad3      	subs	r3, r2, r3
 c0047de:	2b02      	cmp	r3, #2
 c0047e0:	d908      	bls.n	c0047f4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0047e2:	4b10      	ldr	r3, [pc, #64]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047e4:	681b      	ldr	r3, [r3, #0]
 c0047e6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0047ea:	2b00      	cmp	r3, #0
 c0047ec:	d109      	bne.n	c004802 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c0047ee:	2303      	movs	r3, #3
 c0047f0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c0047f2:	e006      	b.n	c004802 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c0047f4:	4b0b      	ldr	r3, [pc, #44]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c0047f6:	681b      	ldr	r3, [r3, #0]
 c0047f8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c0047fc:	2b00      	cmp	r3, #0
 c0047fe:	d0e9      	beq.n	c0047d4 <RCCEx_PLLSAI1_Config+0x16c>
 c004800:	e000      	b.n	c004804 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c004802:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004804:	7bfb      	ldrb	r3, [r7, #15]
 c004806:	2b00      	cmp	r3, #0
 c004808:	d106      	bne.n	c004818 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c00480a:	4b06      	ldr	r3, [pc, #24]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c00480c:	691a      	ldr	r2, [r3, #16]
 c00480e:	687b      	ldr	r3, [r7, #4]
 c004810:	699b      	ldr	r3, [r3, #24]
 c004812:	4904      	ldr	r1, [pc, #16]	; (c004824 <RCCEx_PLLSAI1_Config+0x1bc>)
 c004814:	4313      	orrs	r3, r2
 c004816:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c004818:	7bfb      	ldrb	r3, [r7, #15]
}
 c00481a:	4618      	mov	r0, r3
 c00481c:	3710      	adds	r7, #16
 c00481e:	46bd      	mov	sp, r7
 c004820:	bd80      	pop	{r7, pc}
 c004822:	bf00      	nop
 c004824:	50021000 	.word	0x50021000
 c004828:	07ff800c 	.word	0x07ff800c
 c00482c:	ff9f800c 	.word	0xff9f800c
 c004830:	f9ff800c 	.word	0xf9ff800c

0c004834 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c004834:	b580      	push	{r7, lr}
 c004836:	b084      	sub	sp, #16
 c004838:	af00      	add	r7, sp, #0
 c00483a:	6078      	str	r0, [r7, #4]
 c00483c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c00483e:	2300      	movs	r3, #0
 c004840:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c004842:	687b      	ldr	r3, [r7, #4]
 c004844:	681b      	ldr	r3, [r3, #0]
 c004846:	2b03      	cmp	r3, #3
 c004848:	d018      	beq.n	c00487c <RCCEx_PLLSAI2_Config+0x48>
 c00484a:	2b03      	cmp	r3, #3
 c00484c:	d81f      	bhi.n	c00488e <RCCEx_PLLSAI2_Config+0x5a>
 c00484e:	2b01      	cmp	r3, #1
 c004850:	d002      	beq.n	c004858 <RCCEx_PLLSAI2_Config+0x24>
 c004852:	2b02      	cmp	r3, #2
 c004854:	d009      	beq.n	c00486a <RCCEx_PLLSAI2_Config+0x36>
 c004856:	e01a      	b.n	c00488e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c004858:	4b4a      	ldr	r3, [pc, #296]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c00485a:	681b      	ldr	r3, [r3, #0]
 c00485c:	f003 0302 	and.w	r3, r3, #2
 c004860:	2b00      	cmp	r3, #0
 c004862:	d117      	bne.n	c004894 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c004864:	2301      	movs	r3, #1
 c004866:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c004868:	e014      	b.n	c004894 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c00486a:	4b46      	ldr	r3, [pc, #280]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c00486c:	681b      	ldr	r3, [r3, #0]
 c00486e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c004872:	2b00      	cmp	r3, #0
 c004874:	d110      	bne.n	c004898 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c004876:	2301      	movs	r3, #1
 c004878:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00487a:	e00d      	b.n	c004898 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c00487c:	4b41      	ldr	r3, [pc, #260]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c00487e:	681b      	ldr	r3, [r3, #0]
 c004880:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c004884:	2b00      	cmp	r3, #0
 c004886:	d109      	bne.n	c00489c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c004888:	2301      	movs	r3, #1
 c00488a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c00488c:	e006      	b.n	c00489c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c00488e:	2301      	movs	r3, #1
 c004890:	73fb      	strb	r3, [r7, #15]
      break;
 c004892:	e004      	b.n	c00489e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004894:	bf00      	nop
 c004896:	e002      	b.n	c00489e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c004898:	bf00      	nop
 c00489a:	e000      	b.n	c00489e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c00489c:	bf00      	nop
  }

  if (status == HAL_OK)
 c00489e:	7bfb      	ldrb	r3, [r7, #15]
 c0048a0:	2b00      	cmp	r3, #0
 c0048a2:	d169      	bne.n	c004978 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c0048a4:	4b37      	ldr	r3, [pc, #220]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c0048a6:	681b      	ldr	r3, [r3, #0]
 c0048a8:	4a36      	ldr	r2, [pc, #216]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c0048aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0048ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0048b0:	f7fd fad6 	bl	c001e60 <HAL_GetTick>
 c0048b4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0048b6:	e00f      	b.n	c0048d8 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c0048b8:	f7fd fad2 	bl	c001e60 <HAL_GetTick>
 c0048bc:	4602      	mov	r2, r0
 c0048be:	68bb      	ldr	r3, [r7, #8]
 c0048c0:	1ad3      	subs	r3, r2, r3
 c0048c2:	2b02      	cmp	r3, #2
 c0048c4:	d908      	bls.n	c0048d8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0048c6:	4b2f      	ldr	r3, [pc, #188]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c0048c8:	681b      	ldr	r3, [r3, #0]
 c0048ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0048ce:	2b00      	cmp	r3, #0
 c0048d0:	d009      	beq.n	c0048e6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c0048d2:	2303      	movs	r3, #3
 c0048d4:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c0048d6:	e006      	b.n	c0048e6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c0048d8:	4b2a      	ldr	r3, [pc, #168]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c0048da:	681b      	ldr	r3, [r3, #0]
 c0048dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c0048e0:	2b00      	cmp	r3, #0
 c0048e2:	d1e9      	bne.n	c0048b8 <RCCEx_PLLSAI2_Config+0x84>
 c0048e4:	e000      	b.n	c0048e8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c0048e6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c0048e8:	7bfb      	ldrb	r3, [r7, #15]
 c0048ea:	2b00      	cmp	r3, #0
 c0048ec:	d144      	bne.n	c004978 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c0048ee:	683b      	ldr	r3, [r7, #0]
 c0048f0:	2b00      	cmp	r3, #0
 c0048f2:	d115      	bne.n	c004920 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c0048f4:	4b23      	ldr	r3, [pc, #140]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c0048f6:	695a      	ldr	r2, [r3, #20]
 c0048f8:	4b23      	ldr	r3, [pc, #140]	; (c004988 <RCCEx_PLLSAI2_Config+0x154>)
 c0048fa:	4013      	ands	r3, r2
 c0048fc:	687a      	ldr	r2, [r7, #4]
 c0048fe:	6892      	ldr	r2, [r2, #8]
 c004900:	0211      	lsls	r1, r2, #8
 c004902:	687a      	ldr	r2, [r7, #4]
 c004904:	68d2      	ldr	r2, [r2, #12]
 c004906:	06d2      	lsls	r2, r2, #27
 c004908:	4311      	orrs	r1, r2
 c00490a:	687a      	ldr	r2, [r7, #4]
 c00490c:	6852      	ldr	r2, [r2, #4]
 c00490e:	3a01      	subs	r2, #1
 c004910:	0112      	lsls	r2, r2, #4
 c004912:	4311      	orrs	r1, r2
 c004914:	687a      	ldr	r2, [r7, #4]
 c004916:	6812      	ldr	r2, [r2, #0]
 c004918:	430a      	orrs	r2, r1
 c00491a:	491a      	ldr	r1, [pc, #104]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c00491c:	4313      	orrs	r3, r2
 c00491e:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c004920:	4b18      	ldr	r3, [pc, #96]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c004922:	681b      	ldr	r3, [r3, #0]
 c004924:	4a17      	ldr	r2, [pc, #92]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c004926:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00492a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c00492c:	f7fd fa98 	bl	c001e60 <HAL_GetTick>
 c004930:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004932:	e00f      	b.n	c004954 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c004934:	f7fd fa94 	bl	c001e60 <HAL_GetTick>
 c004938:	4602      	mov	r2, r0
 c00493a:	68bb      	ldr	r3, [r7, #8]
 c00493c:	1ad3      	subs	r3, r2, r3
 c00493e:	2b02      	cmp	r3, #2
 c004940:	d908      	bls.n	c004954 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004942:	4b10      	ldr	r3, [pc, #64]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c004944:	681b      	ldr	r3, [r3, #0]
 c004946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00494a:	2b00      	cmp	r3, #0
 c00494c:	d109      	bne.n	c004962 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c00494e:	2303      	movs	r3, #3
 c004950:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c004952:	e006      	b.n	c004962 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c004954:	4b0b      	ldr	r3, [pc, #44]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c004956:	681b      	ldr	r3, [r3, #0]
 c004958:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c00495c:	2b00      	cmp	r3, #0
 c00495e:	d0e9      	beq.n	c004934 <RCCEx_PLLSAI2_Config+0x100>
 c004960:	e000      	b.n	c004964 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c004962:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004964:	7bfb      	ldrb	r3, [r7, #15]
 c004966:	2b00      	cmp	r3, #0
 c004968:	d106      	bne.n	c004978 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c00496a:	4b06      	ldr	r3, [pc, #24]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c00496c:	695a      	ldr	r2, [r3, #20]
 c00496e:	687b      	ldr	r3, [r7, #4]
 c004970:	691b      	ldr	r3, [r3, #16]
 c004972:	4904      	ldr	r1, [pc, #16]	; (c004984 <RCCEx_PLLSAI2_Config+0x150>)
 c004974:	4313      	orrs	r3, r2
 c004976:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c004978:	7bfb      	ldrb	r3, [r7, #15]
}
 c00497a:	4618      	mov	r0, r3
 c00497c:	3710      	adds	r7, #16
 c00497e:	46bd      	mov	sp, r7
 c004980:	bd80      	pop	{r7, pc}
 c004982:	bf00      	nop
 c004984:	50021000 	.word	0x50021000
 c004988:	07ff800c 	.word	0x07ff800c

0c00498c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c00498c:	b580      	push	{r7, lr}
 c00498e:	b084      	sub	sp, #16
 c004990:	af00      	add	r7, sp, #0
 c004992:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c004994:	687b      	ldr	r3, [r7, #4]
 c004996:	2b00      	cmp	r3, #0
 c004998:	d101      	bne.n	c00499e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c00499a:	2301      	movs	r3, #1
 c00499c:	e095      	b.n	c004aca <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 c00499e:	687b      	ldr	r3, [r7, #4]
 c0049a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0049a2:	2b00      	cmp	r3, #0
 c0049a4:	d108      	bne.n	c0049b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 c0049a6:	687b      	ldr	r3, [r7, #4]
 c0049a8:	685b      	ldr	r3, [r3, #4]
 c0049aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0049ae:	d009      	beq.n	c0049c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c0049b0:	687b      	ldr	r3, [r7, #4]
 c0049b2:	2200      	movs	r2, #0
 c0049b4:	61da      	str	r2, [r3, #28]
 c0049b6:	e005      	b.n	c0049c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 c0049b8:	687b      	ldr	r3, [r7, #4]
 c0049ba:	2200      	movs	r2, #0
 c0049bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 c0049be:	687b      	ldr	r3, [r7, #4]
 c0049c0:	2200      	movs	r2, #0
 c0049c2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0049c4:	687b      	ldr	r3, [r7, #4]
 c0049c6:	2200      	movs	r2, #0
 c0049c8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c0049ca:	687b      	ldr	r3, [r7, #4]
 c0049cc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0049d0:	b2db      	uxtb	r3, r3
 c0049d2:	2b00      	cmp	r3, #0
 c0049d4:	d106      	bne.n	c0049e4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c0049d6:	687b      	ldr	r3, [r7, #4]
 c0049d8:	2200      	movs	r2, #0
 c0049da:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c0049de:	6878      	ldr	r0, [r7, #4]
 c0049e0:	f7fc fda0 	bl	c001524 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c0049e4:	687b      	ldr	r3, [r7, #4]
 c0049e6:	2202      	movs	r2, #2
 c0049e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c0049ec:	687b      	ldr	r3, [r7, #4]
 c0049ee:	681b      	ldr	r3, [r3, #0]
 c0049f0:	681a      	ldr	r2, [r3, #0]
 c0049f2:	687b      	ldr	r3, [r7, #4]
 c0049f4:	681b      	ldr	r3, [r3, #0]
 c0049f6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0049fa:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c0049fc:	687b      	ldr	r3, [r7, #4]
 c0049fe:	68db      	ldr	r3, [r3, #12]
 c004a00:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004a04:	d902      	bls.n	c004a0c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 c004a06:	2300      	movs	r3, #0
 c004a08:	60fb      	str	r3, [r7, #12]
 c004a0a:	e002      	b.n	c004a12 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 c004a0c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c004a10:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 c004a12:	687b      	ldr	r3, [r7, #4]
 c004a14:	68db      	ldr	r3, [r3, #12]
 c004a16:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 c004a1a:	d007      	beq.n	c004a2c <HAL_SPI_Init+0xa0>
 c004a1c:	687b      	ldr	r3, [r7, #4]
 c004a1e:	68db      	ldr	r3, [r3, #12]
 c004a20:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004a24:	d002      	beq.n	c004a2c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004a26:	687b      	ldr	r3, [r7, #4]
 c004a28:	2200      	movs	r2, #0
 c004a2a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 c004a2c:	687b      	ldr	r3, [r7, #4]
 c004a2e:	685b      	ldr	r3, [r3, #4]
 c004a30:	f403 7282 	and.w	r2, r3, #260	; 0x104
 c004a34:	687b      	ldr	r3, [r7, #4]
 c004a36:	689b      	ldr	r3, [r3, #8]
 c004a38:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 c004a3c:	431a      	orrs	r2, r3
 c004a3e:	687b      	ldr	r3, [r7, #4]
 c004a40:	691b      	ldr	r3, [r3, #16]
 c004a42:	f003 0302 	and.w	r3, r3, #2
 c004a46:	431a      	orrs	r2, r3
 c004a48:	687b      	ldr	r3, [r7, #4]
 c004a4a:	695b      	ldr	r3, [r3, #20]
 c004a4c:	f003 0301 	and.w	r3, r3, #1
 c004a50:	431a      	orrs	r2, r3
 c004a52:	687b      	ldr	r3, [r7, #4]
 c004a54:	699b      	ldr	r3, [r3, #24]
 c004a56:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c004a5a:	431a      	orrs	r2, r3
 c004a5c:	687b      	ldr	r3, [r7, #4]
 c004a5e:	69db      	ldr	r3, [r3, #28]
 c004a60:	f003 0338 	and.w	r3, r3, #56	; 0x38
 c004a64:	431a      	orrs	r2, r3
 c004a66:	687b      	ldr	r3, [r7, #4]
 c004a68:	6a1b      	ldr	r3, [r3, #32]
 c004a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004a6e:	ea42 0103 	orr.w	r1, r2, r3
 c004a72:	687b      	ldr	r3, [r7, #4]
 c004a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004a76:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 c004a7a:	687b      	ldr	r3, [r7, #4]
 c004a7c:	681b      	ldr	r3, [r3, #0]
 c004a7e:	430a      	orrs	r2, r1
 c004a80:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 c004a82:	687b      	ldr	r3, [r7, #4]
 c004a84:	699b      	ldr	r3, [r3, #24]
 c004a86:	0c1b      	lsrs	r3, r3, #16
 c004a88:	f003 0204 	and.w	r2, r3, #4
 c004a8c:	687b      	ldr	r3, [r7, #4]
 c004a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004a90:	f003 0310 	and.w	r3, r3, #16
 c004a94:	431a      	orrs	r2, r3
 c004a96:	687b      	ldr	r3, [r7, #4]
 c004a98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c004a9a:	f003 0308 	and.w	r3, r3, #8
 c004a9e:	431a      	orrs	r2, r3
 c004aa0:	687b      	ldr	r3, [r7, #4]
 c004aa2:	68db      	ldr	r3, [r3, #12]
 c004aa4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 c004aa8:	ea42 0103 	orr.w	r1, r2, r3
 c004aac:	68fb      	ldr	r3, [r7, #12]
 c004aae:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 c004ab2:	687b      	ldr	r3, [r7, #4]
 c004ab4:	681b      	ldr	r3, [r3, #0]
 c004ab6:	430a      	orrs	r2, r1
 c004ab8:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c004aba:	687b      	ldr	r3, [r7, #4]
 c004abc:	2200      	movs	r2, #0
 c004abe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 c004ac0:	687b      	ldr	r3, [r7, #4]
 c004ac2:	2201      	movs	r2, #1
 c004ac4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 c004ac8:	2300      	movs	r3, #0
}
 c004aca:	4618      	mov	r0, r3
 c004acc:	3710      	adds	r7, #16
 c004ace:	46bd      	mov	sp, r7
 c004ad0:	bd80      	pop	{r7, pc}
	...

0c004ad4 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 c004ad4:	b580      	push	{r7, lr}
 c004ad6:	b086      	sub	sp, #24
 c004ad8:	af00      	add	r7, sp, #0
 c004ada:	60f8      	str	r0, [r7, #12]
 c004adc:	60b9      	str	r1, [r7, #8]
 c004ade:	607a      	str	r2, [r7, #4]
 c004ae0:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004ae2:	2300      	movs	r3, #0
 c004ae4:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 c004ae6:	68fb      	ldr	r3, [r7, #12]
 c004ae8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004aec:	2b01      	cmp	r3, #1
 c004aee:	d101      	bne.n	c004af4 <HAL_SPI_TransmitReceive_DMA+0x20>
 c004af0:	2302      	movs	r3, #2
 c004af2:	e16c      	b.n	c004dce <HAL_SPI_TransmitReceive_DMA+0x2fa>
 c004af4:	68fb      	ldr	r3, [r7, #12]
 c004af6:	2201      	movs	r2, #1
 c004af8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 c004afc:	68fb      	ldr	r3, [r7, #12]
 c004afe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004b02:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 c004b04:	68fb      	ldr	r3, [r7, #12]
 c004b06:	685b      	ldr	r3, [r3, #4]
 c004b08:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 c004b0a:	7dbb      	ldrb	r3, [r7, #22]
 c004b0c:	2b01      	cmp	r3, #1
 c004b0e:	d00d      	beq.n	c004b2c <HAL_SPI_TransmitReceive_DMA+0x58>
 c004b10:	693b      	ldr	r3, [r7, #16]
 c004b12:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004b16:	d106      	bne.n	c004b26 <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 c004b18:	68fb      	ldr	r3, [r7, #12]
 c004b1a:	689b      	ldr	r3, [r3, #8]
 c004b1c:	2b00      	cmp	r3, #0
 c004b1e:	d102      	bne.n	c004b26 <HAL_SPI_TransmitReceive_DMA+0x52>
 c004b20:	7dbb      	ldrb	r3, [r7, #22]
 c004b22:	2b04      	cmp	r3, #4
 c004b24:	d002      	beq.n	c004b2c <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 c004b26:	2302      	movs	r3, #2
 c004b28:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004b2a:	e14b      	b.n	c004dc4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 c004b2c:	68bb      	ldr	r3, [r7, #8]
 c004b2e:	2b00      	cmp	r3, #0
 c004b30:	d005      	beq.n	c004b3e <HAL_SPI_TransmitReceive_DMA+0x6a>
 c004b32:	687b      	ldr	r3, [r7, #4]
 c004b34:	2b00      	cmp	r3, #0
 c004b36:	d002      	beq.n	c004b3e <HAL_SPI_TransmitReceive_DMA+0x6a>
 c004b38:	887b      	ldrh	r3, [r7, #2]
 c004b3a:	2b00      	cmp	r3, #0
 c004b3c:	d102      	bne.n	c004b44 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 c004b3e:	2301      	movs	r3, #1
 c004b40:	75fb      	strb	r3, [r7, #23]
    goto error;
 c004b42:	e13f      	b.n	c004dc4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 c004b44:	68fb      	ldr	r3, [r7, #12]
 c004b46:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004b4a:	b2db      	uxtb	r3, r3
 c004b4c:	2b04      	cmp	r3, #4
 c004b4e:	d003      	beq.n	c004b58 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 c004b50:	68fb      	ldr	r3, [r7, #12]
 c004b52:	2205      	movs	r2, #5
 c004b54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c004b58:	68fb      	ldr	r3, [r7, #12]
 c004b5a:	2200      	movs	r2, #0
 c004b5c:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 c004b5e:	68fb      	ldr	r3, [r7, #12]
 c004b60:	68ba      	ldr	r2, [r7, #8]
 c004b62:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c004b64:	68fb      	ldr	r3, [r7, #12]
 c004b66:	887a      	ldrh	r2, [r7, #2]
 c004b68:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c004b6a:	68fb      	ldr	r3, [r7, #12]
 c004b6c:	887a      	ldrh	r2, [r7, #2]
 c004b6e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 c004b70:	68fb      	ldr	r3, [r7, #12]
 c004b72:	687a      	ldr	r2, [r7, #4]
 c004b74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c004b76:	68fb      	ldr	r3, [r7, #12]
 c004b78:	887a      	ldrh	r2, [r7, #2]
 c004b7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c004b7e:	68fb      	ldr	r3, [r7, #12]
 c004b80:	887a      	ldrh	r2, [r7, #2]
 c004b82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c004b86:	68fb      	ldr	r3, [r7, #12]
 c004b88:	2200      	movs	r2, #0
 c004b8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c004b8c:	68fb      	ldr	r3, [r7, #12]
 c004b8e:	2200      	movs	r2, #0
 c004b90:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 c004b92:	68fb      	ldr	r3, [r7, #12]
 c004b94:	681b      	ldr	r3, [r3, #0]
 c004b96:	685a      	ldr	r2, [r3, #4]
 c004b98:	68fb      	ldr	r3, [r7, #12]
 c004b9a:	681b      	ldr	r3, [r3, #0]
 c004b9c:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c004ba0:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c004ba2:	68fb      	ldr	r3, [r7, #12]
 c004ba4:	68db      	ldr	r3, [r3, #12]
 c004ba6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c004baa:	d908      	bls.n	c004bbe <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004bac:	68fb      	ldr	r3, [r7, #12]
 c004bae:	681b      	ldr	r3, [r3, #0]
 c004bb0:	685a      	ldr	r2, [r3, #4]
 c004bb2:	68fb      	ldr	r3, [r7, #12]
 c004bb4:	681b      	ldr	r3, [r3, #0]
 c004bb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c004bba:	605a      	str	r2, [r3, #4]
 c004bbc:	e06f      	b.n	c004c9e <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004bbe:	68fb      	ldr	r3, [r7, #12]
 c004bc0:	681b      	ldr	r3, [r3, #0]
 c004bc2:	685a      	ldr	r2, [r3, #4]
 c004bc4:	68fb      	ldr	r3, [r7, #12]
 c004bc6:	681b      	ldr	r3, [r3, #0]
 c004bc8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c004bcc:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c004bce:	68fb      	ldr	r3, [r7, #12]
 c004bd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004bd2:	699b      	ldr	r3, [r3, #24]
 c004bd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004bd8:	d126      	bne.n	c004c28 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 c004bda:	68fb      	ldr	r3, [r7, #12]
 c004bdc:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 c004bde:	f003 0301 	and.w	r3, r3, #1
 c004be2:	2b00      	cmp	r3, #0
 c004be4:	d10f      	bne.n	c004c06 <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c004be6:	68fb      	ldr	r3, [r7, #12]
 c004be8:	681b      	ldr	r3, [r3, #0]
 c004bea:	685a      	ldr	r2, [r3, #4]
 c004bec:	68fb      	ldr	r3, [r7, #12]
 c004bee:	681b      	ldr	r3, [r3, #0]
 c004bf0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c004bf4:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 c004bf6:	68fb      	ldr	r3, [r7, #12]
 c004bf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004bfa:	b29b      	uxth	r3, r3
 c004bfc:	085b      	lsrs	r3, r3, #1
 c004bfe:	b29a      	uxth	r2, r3
 c004c00:	68fb      	ldr	r3, [r7, #12]
 c004c02:	87da      	strh	r2, [r3, #62]	; 0x3e
 c004c04:	e010      	b.n	c004c28 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c004c06:	68fb      	ldr	r3, [r7, #12]
 c004c08:	681b      	ldr	r3, [r3, #0]
 c004c0a:	685a      	ldr	r2, [r3, #4]
 c004c0c:	68fb      	ldr	r3, [r7, #12]
 c004c0e:	681b      	ldr	r3, [r3, #0]
 c004c10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c004c14:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c004c16:	68fb      	ldr	r3, [r7, #12]
 c004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004c1a:	b29b      	uxth	r3, r3
 c004c1c:	085b      	lsrs	r3, r3, #1
 c004c1e:	b29b      	uxth	r3, r3
 c004c20:	3301      	adds	r3, #1
 c004c22:	b29a      	uxth	r2, r3
 c004c24:	68fb      	ldr	r3, [r7, #12]
 c004c26:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c004c28:	68fb      	ldr	r3, [r7, #12]
 c004c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004c2c:	699b      	ldr	r3, [r3, #24]
 c004c2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004c32:	d134      	bne.n	c004c9e <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004c34:	68fb      	ldr	r3, [r7, #12]
 c004c36:	681b      	ldr	r3, [r3, #0]
 c004c38:	685a      	ldr	r2, [r3, #4]
 c004c3a:	68fb      	ldr	r3, [r7, #12]
 c004c3c:	681b      	ldr	r3, [r3, #0]
 c004c3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c004c42:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c004c44:	68fb      	ldr	r3, [r7, #12]
 c004c46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004c4a:	b29b      	uxth	r3, r3
 c004c4c:	f003 0301 	and.w	r3, r3, #1
 c004c50:	2b00      	cmp	r3, #0
 c004c52:	d111      	bne.n	c004c78 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c004c54:	68fb      	ldr	r3, [r7, #12]
 c004c56:	681b      	ldr	r3, [r3, #0]
 c004c58:	685a      	ldr	r2, [r3, #4]
 c004c5a:	68fb      	ldr	r3, [r7, #12]
 c004c5c:	681b      	ldr	r3, [r3, #0]
 c004c5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c004c62:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c004c64:	68fb      	ldr	r3, [r7, #12]
 c004c66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004c6a:	b29b      	uxth	r3, r3
 c004c6c:	085b      	lsrs	r3, r3, #1
 c004c6e:	b29a      	uxth	r2, r3
 c004c70:	68fb      	ldr	r3, [r7, #12]
 c004c72:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c004c76:	e012      	b.n	c004c9e <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c004c78:	68fb      	ldr	r3, [r7, #12]
 c004c7a:	681b      	ldr	r3, [r3, #0]
 c004c7c:	685a      	ldr	r2, [r3, #4]
 c004c7e:	68fb      	ldr	r3, [r7, #12]
 c004c80:	681b      	ldr	r3, [r3, #0]
 c004c82:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c004c86:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c004c88:	68fb      	ldr	r3, [r7, #12]
 c004c8a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004c8e:	b29b      	uxth	r3, r3
 c004c90:	085b      	lsrs	r3, r3, #1
 c004c92:	b29b      	uxth	r3, r3
 c004c94:	3301      	adds	r3, #1
 c004c96:	b29a      	uxth	r2, r3
 c004c98:	68fb      	ldr	r3, [r7, #12]
 c004c9a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 c004c9e:	68fb      	ldr	r3, [r7, #12]
 c004ca0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004ca4:	b2db      	uxtb	r3, r3
 c004ca6:	2b04      	cmp	r3, #4
 c004ca8:	d108      	bne.n	c004cbc <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c004caa:	68fb      	ldr	r3, [r7, #12]
 c004cac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cae:	4a4a      	ldr	r2, [pc, #296]	; (c004dd8 <HAL_SPI_TransmitReceive_DMA+0x304>)
 c004cb0:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 c004cb2:	68fb      	ldr	r3, [r7, #12]
 c004cb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cb6:	4a49      	ldr	r2, [pc, #292]	; (c004ddc <HAL_SPI_TransmitReceive_DMA+0x308>)
 c004cb8:	62da      	str	r2, [r3, #44]	; 0x2c
 c004cba:	e007      	b.n	c004ccc <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 c004cbc:	68fb      	ldr	r3, [r7, #12]
 c004cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cc0:	4a47      	ldr	r2, [pc, #284]	; (c004de0 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 c004cc2:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 c004cc4:	68fb      	ldr	r3, [r7, #12]
 c004cc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cc8:	4a46      	ldr	r2, [pc, #280]	; (c004de4 <HAL_SPI_TransmitReceive_DMA+0x310>)
 c004cca:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c004ccc:	68fb      	ldr	r3, [r7, #12]
 c004cce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cd0:	4a45      	ldr	r2, [pc, #276]	; (c004de8 <HAL_SPI_TransmitReceive_DMA+0x314>)
 c004cd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c004cd4:	68fb      	ldr	r3, [r7, #12]
 c004cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004cd8:	2200      	movs	r2, #0
 c004cda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c004cdc:	68fb      	ldr	r3, [r7, #12]
 c004cde:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c004ce0:	68fb      	ldr	r3, [r7, #12]
 c004ce2:	681b      	ldr	r3, [r3, #0]
 c004ce4:	330c      	adds	r3, #12
 c004ce6:	4619      	mov	r1, r3
 c004ce8:	68fb      	ldr	r3, [r7, #12]
 c004cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c004cec:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c004cee:	68fb      	ldr	r3, [r7, #12]
 c004cf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004cf4:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c004cf6:	f7fd fa77 	bl	c0021e8 <HAL_DMA_Start_IT>
 c004cfa:	4603      	mov	r3, r0
 c004cfc:	2b00      	cmp	r3, #0
 c004cfe:	d00c      	beq.n	c004d1a <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004d00:	68fb      	ldr	r3, [r7, #12]
 c004d02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004d04:	f043 0210 	orr.w	r2, r3, #16
 c004d08:	68fb      	ldr	r3, [r7, #12]
 c004d0a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c004d0c:	2301      	movs	r3, #1
 c004d0e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c004d10:	68fb      	ldr	r3, [r7, #12]
 c004d12:	2201      	movs	r2, #1
 c004d14:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c004d18:	e054      	b.n	c004dc4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c004d1a:	68fb      	ldr	r3, [r7, #12]
 c004d1c:	681b      	ldr	r3, [r3, #0]
 c004d1e:	685a      	ldr	r2, [r3, #4]
 c004d20:	68fb      	ldr	r3, [r7, #12]
 c004d22:	681b      	ldr	r3, [r3, #0]
 c004d24:	f042 0201 	orr.w	r2, r2, #1
 c004d28:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 c004d2a:	68fb      	ldr	r3, [r7, #12]
 c004d2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004d2e:	2200      	movs	r2, #0
 c004d30:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 c004d32:	68fb      	ldr	r3, [r7, #12]
 c004d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004d36:	2200      	movs	r2, #0
 c004d38:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 c004d3a:	68fb      	ldr	r3, [r7, #12]
 c004d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004d3e:	2200      	movs	r2, #0
 c004d40:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 c004d42:	68fb      	ldr	r3, [r7, #12]
 c004d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004d46:	2200      	movs	r2, #0
 c004d48:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c004d4a:	68fb      	ldr	r3, [r7, #12]
 c004d4c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c004d4e:	68fb      	ldr	r3, [r7, #12]
 c004d50:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c004d52:	4619      	mov	r1, r3
 c004d54:	68fb      	ldr	r3, [r7, #12]
 c004d56:	681b      	ldr	r3, [r3, #0]
 c004d58:	330c      	adds	r3, #12
 c004d5a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c004d5c:	68fb      	ldr	r3, [r7, #12]
 c004d5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004d60:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c004d62:	f7fd fa41 	bl	c0021e8 <HAL_DMA_Start_IT>
 c004d66:	4603      	mov	r3, r0
 c004d68:	2b00      	cmp	r3, #0
 c004d6a:	d00c      	beq.n	c004d86 <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004d6c:	68fb      	ldr	r3, [r7, #12]
 c004d6e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004d70:	f043 0210 	orr.w	r2, r3, #16
 c004d74:	68fb      	ldr	r3, [r7, #12]
 c004d76:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c004d78:	2301      	movs	r3, #1
 c004d7a:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c004d7c:	68fb      	ldr	r3, [r7, #12]
 c004d7e:	2201      	movs	r2, #1
 c004d80:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c004d84:	e01e      	b.n	c004dc4 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c004d86:	68fb      	ldr	r3, [r7, #12]
 c004d88:	681b      	ldr	r3, [r3, #0]
 c004d8a:	681b      	ldr	r3, [r3, #0]
 c004d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004d90:	2b40      	cmp	r3, #64	; 0x40
 c004d92:	d007      	beq.n	c004da4 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c004d94:	68fb      	ldr	r3, [r7, #12]
 c004d96:	681b      	ldr	r3, [r3, #0]
 c004d98:	681a      	ldr	r2, [r3, #0]
 c004d9a:	68fb      	ldr	r3, [r7, #12]
 c004d9c:	681b      	ldr	r3, [r3, #0]
 c004d9e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c004da2:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c004da4:	68fb      	ldr	r3, [r7, #12]
 c004da6:	681b      	ldr	r3, [r3, #0]
 c004da8:	685a      	ldr	r2, [r3, #4]
 c004daa:	68fb      	ldr	r3, [r7, #12]
 c004dac:	681b      	ldr	r3, [r3, #0]
 c004dae:	f042 0220 	orr.w	r2, r2, #32
 c004db2:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c004db4:	68fb      	ldr	r3, [r7, #12]
 c004db6:	681b      	ldr	r3, [r3, #0]
 c004db8:	685a      	ldr	r2, [r3, #4]
 c004dba:	68fb      	ldr	r3, [r7, #12]
 c004dbc:	681b      	ldr	r3, [r3, #0]
 c004dbe:	f042 0202 	orr.w	r2, r2, #2
 c004dc2:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c004dc4:	68fb      	ldr	r3, [r7, #12]
 c004dc6:	2200      	movs	r2, #0
 c004dc8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c004dcc:	7dfb      	ldrb	r3, [r7, #23]
}
 c004dce:	4618      	mov	r0, r3
 c004dd0:	3718      	adds	r7, #24
 c004dd2:	46bd      	mov	sp, r7
 c004dd4:	bd80      	pop	{r7, pc}
 c004dd6:	bf00      	nop
 c004dd8:	0c004f75 	.word	0x0c004f75
 c004ddc:	0c004e3d 	.word	0x0c004e3d
 c004de0:	0c004f91 	.word	0x0c004f91
 c004de4:	0c004ee5 	.word	0x0c004ee5
 c004de8:	0c004fad 	.word	0x0c004fad

0c004dec <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c004dec:	b480      	push	{r7}
 c004dee:	b083      	sub	sp, #12
 c004df0:	af00      	add	r7, sp, #0
 c004df2:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 c004df4:	bf00      	nop
 c004df6:	370c      	adds	r7, #12
 c004df8:	46bd      	mov	sp, r7
 c004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004dfe:	4770      	bx	lr

0c004e00 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c004e00:	b480      	push	{r7}
 c004e02:	b083      	sub	sp, #12
 c004e04:	af00      	add	r7, sp, #0
 c004e06:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 c004e08:	bf00      	nop
 c004e0a:	370c      	adds	r7, #12
 c004e0c:	46bd      	mov	sp, r7
 c004e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e12:	4770      	bx	lr

0c004e14 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c004e14:	b480      	push	{r7}
 c004e16:	b083      	sub	sp, #12
 c004e18:	af00      	add	r7, sp, #0
 c004e1a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 c004e1c:	bf00      	nop
 c004e1e:	370c      	adds	r7, #12
 c004e20:	46bd      	mov	sp, r7
 c004e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e26:	4770      	bx	lr

0c004e28 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 c004e28:	b480      	push	{r7}
 c004e2a:	b083      	sub	sp, #12
 c004e2c:	af00      	add	r7, sp, #0
 c004e2e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 c004e30:	bf00      	nop
 c004e32:	370c      	adds	r7, #12
 c004e34:	46bd      	mov	sp, r7
 c004e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 c004e3a:	4770      	bx	lr

0c004e3c <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004e3c:	b580      	push	{r7, lr}
 c004e3e:	b084      	sub	sp, #16
 c004e40:	af00      	add	r7, sp, #0
 c004e42:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004e44:	687b      	ldr	r3, [r7, #4]
 c004e46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004e48:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c004e4a:	f7fd f809 	bl	c001e60 <HAL_GetTick>
 c004e4e:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c004e50:	687b      	ldr	r3, [r7, #4]
 c004e52:	681b      	ldr	r3, [r3, #0]
 c004e54:	681b      	ldr	r3, [r3, #0]
 c004e56:	f003 0320 	and.w	r3, r3, #32
 c004e5a:	2b20      	cmp	r3, #32
 c004e5c:	d03c      	beq.n	c004ed8 <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c004e5e:	68fb      	ldr	r3, [r7, #12]
 c004e60:	681b      	ldr	r3, [r3, #0]
 c004e62:	685a      	ldr	r2, [r3, #4]
 c004e64:	68fb      	ldr	r3, [r7, #12]
 c004e66:	681b      	ldr	r3, [r3, #0]
 c004e68:	f022 0220 	bic.w	r2, r2, #32
 c004e6c:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c004e6e:	68fb      	ldr	r3, [r7, #12]
 c004e70:	689b      	ldr	r3, [r3, #8]
 c004e72:	2b00      	cmp	r3, #0
 c004e74:	d10d      	bne.n	c004e92 <SPI_DMAReceiveCplt+0x56>
 c004e76:	68fb      	ldr	r3, [r7, #12]
 c004e78:	685b      	ldr	r3, [r3, #4]
 c004e7a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004e7e:	d108      	bne.n	c004e92 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c004e80:	68fb      	ldr	r3, [r7, #12]
 c004e82:	681b      	ldr	r3, [r3, #0]
 c004e84:	685a      	ldr	r2, [r3, #4]
 c004e86:	68fb      	ldr	r3, [r7, #12]
 c004e88:	681b      	ldr	r3, [r3, #0]
 c004e8a:	f022 0203 	bic.w	r2, r2, #3
 c004e8e:	605a      	str	r2, [r3, #4]
 c004e90:	e007      	b.n	c004ea2 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c004e92:	68fb      	ldr	r3, [r7, #12]
 c004e94:	681b      	ldr	r3, [r3, #0]
 c004e96:	685a      	ldr	r2, [r3, #4]
 c004e98:	68fb      	ldr	r3, [r7, #12]
 c004e9a:	681b      	ldr	r3, [r3, #0]
 c004e9c:	f022 0201 	bic.w	r2, r2, #1
 c004ea0:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c004ea2:	68ba      	ldr	r2, [r7, #8]
 c004ea4:	2164      	movs	r1, #100	; 0x64
 c004ea6:	68f8      	ldr	r0, [r7, #12]
 c004ea8:	f000 f9be 	bl	c005228 <SPI_EndRxTransaction>
 c004eac:	4603      	mov	r3, r0
 c004eae:	2b00      	cmp	r3, #0
 c004eb0:	d002      	beq.n	c004eb8 <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 c004eb2:	68fb      	ldr	r3, [r7, #12]
 c004eb4:	2220      	movs	r2, #32
 c004eb6:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 c004eb8:	68fb      	ldr	r3, [r7, #12]
 c004eba:	2200      	movs	r2, #0
 c004ebc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c004ec0:	68fb      	ldr	r3, [r7, #12]
 c004ec2:	2201      	movs	r2, #1
 c004ec4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c004ec8:	68fb      	ldr	r3, [r7, #12]
 c004eca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004ecc:	2b00      	cmp	r3, #0
 c004ece:	d003      	beq.n	c004ed8 <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c004ed0:	68f8      	ldr	r0, [r7, #12]
 c004ed2:	f7ff ffa9 	bl	c004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c004ed6:	e002      	b.n	c004ede <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 c004ed8:	68f8      	ldr	r0, [r7, #12]
 c004eda:	f7ff ff87 	bl	c004dec <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004ede:	3710      	adds	r7, #16
 c004ee0:	46bd      	mov	sp, r7
 c004ee2:	bd80      	pop	{r7, pc}

0c004ee4 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004ee4:	b580      	push	{r7, lr}
 c004ee6:	b084      	sub	sp, #16
 c004ee8:	af00      	add	r7, sp, #0
 c004eea:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004eec:	687b      	ldr	r3, [r7, #4]
 c004eee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004ef0:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c004ef2:	f7fc ffb5 	bl	c001e60 <HAL_GetTick>
 c004ef6:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c004ef8:	687b      	ldr	r3, [r7, #4]
 c004efa:	681b      	ldr	r3, [r3, #0]
 c004efc:	681b      	ldr	r3, [r3, #0]
 c004efe:	f003 0320 	and.w	r3, r3, #32
 c004f02:	2b20      	cmp	r3, #32
 c004f04:	d030      	beq.n	c004f68 <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c004f06:	68fb      	ldr	r3, [r7, #12]
 c004f08:	681b      	ldr	r3, [r3, #0]
 c004f0a:	685a      	ldr	r2, [r3, #4]
 c004f0c:	68fb      	ldr	r3, [r7, #12]
 c004f0e:	681b      	ldr	r3, [r3, #0]
 c004f10:	f022 0220 	bic.w	r2, r2, #32
 c004f14:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c004f16:	68ba      	ldr	r2, [r7, #8]
 c004f18:	2164      	movs	r1, #100	; 0x64
 c004f1a:	68f8      	ldr	r0, [r7, #12]
 c004f1c:	f000 f9dc 	bl	c0052d8 <SPI_EndRxTxTransaction>
 c004f20:	4603      	mov	r3, r0
 c004f22:	2b00      	cmp	r3, #0
 c004f24:	d005      	beq.n	c004f32 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c004f26:	68fb      	ldr	r3, [r7, #12]
 c004f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004f2a:	f043 0220 	orr.w	r2, r3, #32
 c004f2e:	68fb      	ldr	r3, [r7, #12]
 c004f30:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c004f32:	68fb      	ldr	r3, [r7, #12]
 c004f34:	681b      	ldr	r3, [r3, #0]
 c004f36:	685a      	ldr	r2, [r3, #4]
 c004f38:	68fb      	ldr	r3, [r7, #12]
 c004f3a:	681b      	ldr	r3, [r3, #0]
 c004f3c:	f022 0203 	bic.w	r2, r2, #3
 c004f40:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 c004f42:	68fb      	ldr	r3, [r7, #12]
 c004f44:	2200      	movs	r2, #0
 c004f46:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 c004f48:	68fb      	ldr	r3, [r7, #12]
 c004f4a:	2200      	movs	r2, #0
 c004f4c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c004f50:	68fb      	ldr	r3, [r7, #12]
 c004f52:	2201      	movs	r2, #1
 c004f54:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c004f58:	68fb      	ldr	r3, [r7, #12]
 c004f5a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004f5c:	2b00      	cmp	r3, #0
 c004f5e:	d003      	beq.n	c004f68 <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c004f60:	68f8      	ldr	r0, [r7, #12]
 c004f62:	f7ff ff61 	bl	c004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c004f66:	e002      	b.n	c004f6e <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 c004f68:	68f8      	ldr	r0, [r7, #12]
 c004f6a:	f7fb fed9 	bl	c000d20 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004f6e:	3710      	adds	r7, #16
 c004f70:	46bd      	mov	sp, r7
 c004f72:	bd80      	pop	{r7, pc}

0c004f74 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004f74:	b580      	push	{r7, lr}
 c004f76:	b084      	sub	sp, #16
 c004f78:	af00      	add	r7, sp, #0
 c004f7a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004f7c:	687b      	ldr	r3, [r7, #4]
 c004f7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004f80:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 c004f82:	68f8      	ldr	r0, [r7, #12]
 c004f84:	f7ff ff3c 	bl	c004e00 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004f88:	bf00      	nop
 c004f8a:	3710      	adds	r7, #16
 c004f8c:	46bd      	mov	sp, r7
 c004f8e:	bd80      	pop	{r7, pc}

0c004f90 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004f90:	b580      	push	{r7, lr}
 c004f92:	b084      	sub	sp, #16
 c004f94:	af00      	add	r7, sp, #0
 c004f96:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004f98:	687b      	ldr	r3, [r7, #4]
 c004f9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004f9c:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 c004f9e:	68f8      	ldr	r0, [r7, #12]
 c004fa0:	f7ff ff38 	bl	c004e14 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004fa4:	bf00      	nop
 c004fa6:	3710      	adds	r7, #16
 c004fa8:	46bd      	mov	sp, r7
 c004faa:	bd80      	pop	{r7, pc}

0c004fac <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 c004fac:	b580      	push	{r7, lr}
 c004fae:	b084      	sub	sp, #16
 c004fb0:	af00      	add	r7, sp, #0
 c004fb2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004fb4:	687b      	ldr	r3, [r7, #4]
 c004fb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004fb8:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c004fba:	68fb      	ldr	r3, [r7, #12]
 c004fbc:	681b      	ldr	r3, [r3, #0]
 c004fbe:	685a      	ldr	r2, [r3, #4]
 c004fc0:	68fb      	ldr	r3, [r7, #12]
 c004fc2:	681b      	ldr	r3, [r3, #0]
 c004fc4:	f022 0203 	bic.w	r2, r2, #3
 c004fc8:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004fca:	68fb      	ldr	r3, [r7, #12]
 c004fcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004fce:	f043 0210 	orr.w	r2, r3, #16
 c004fd2:	68fb      	ldr	r3, [r7, #12]
 c004fd4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 c004fd6:	68fb      	ldr	r3, [r7, #12]
 c004fd8:	2201      	movs	r2, #1
 c004fda:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 c004fde:	68f8      	ldr	r0, [r7, #12]
 c004fe0:	f7ff ff22 	bl	c004e28 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004fe4:	bf00      	nop
 c004fe6:	3710      	adds	r7, #16
 c004fe8:	46bd      	mov	sp, r7
 c004fea:	bd80      	pop	{r7, pc}

0c004fec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c004fec:	b580      	push	{r7, lr}
 c004fee:	b088      	sub	sp, #32
 c004ff0:	af00      	add	r7, sp, #0
 c004ff2:	60f8      	str	r0, [r7, #12]
 c004ff4:	60b9      	str	r1, [r7, #8]
 c004ff6:	603b      	str	r3, [r7, #0]
 c004ff8:	4613      	mov	r3, r2
 c004ffa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 c004ffc:	f7fc ff30 	bl	c001e60 <HAL_GetTick>
 c005000:	4602      	mov	r2, r0
 c005002:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005004:	1a9b      	subs	r3, r3, r2
 c005006:	683a      	ldr	r2, [r7, #0]
 c005008:	4413      	add	r3, r2
 c00500a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 c00500c:	f7fc ff28 	bl	c001e60 <HAL_GetTick>
 c005010:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 c005012:	4b39      	ldr	r3, [pc, #228]	; (c0050f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 c005014:	681b      	ldr	r3, [r3, #0]
 c005016:	015b      	lsls	r3, r3, #5
 c005018:	0d1b      	lsrs	r3, r3, #20
 c00501a:	69fa      	ldr	r2, [r7, #28]
 c00501c:	fb02 f303 	mul.w	r3, r2, r3
 c005020:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c005022:	e054      	b.n	c0050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 c005024:	683b      	ldr	r3, [r7, #0]
 c005026:	f1b3 3fff 	cmp.w	r3, #4294967295
 c00502a:	d050      	beq.n	c0050ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c00502c:	f7fc ff18 	bl	c001e60 <HAL_GetTick>
 c005030:	4602      	mov	r2, r0
 c005032:	69bb      	ldr	r3, [r7, #24]
 c005034:	1ad3      	subs	r3, r2, r3
 c005036:	69fa      	ldr	r2, [r7, #28]
 c005038:	429a      	cmp	r2, r3
 c00503a:	d902      	bls.n	c005042 <SPI_WaitFlagStateUntilTimeout+0x56>
 c00503c:	69fb      	ldr	r3, [r7, #28]
 c00503e:	2b00      	cmp	r3, #0
 c005040:	d13d      	bne.n	c0050be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c005042:	68fb      	ldr	r3, [r7, #12]
 c005044:	681b      	ldr	r3, [r3, #0]
 c005046:	685a      	ldr	r2, [r3, #4]
 c005048:	68fb      	ldr	r3, [r7, #12]
 c00504a:	681b      	ldr	r3, [r3, #0]
 c00504c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c005050:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005052:	68fb      	ldr	r3, [r7, #12]
 c005054:	685b      	ldr	r3, [r3, #4]
 c005056:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c00505a:	d111      	bne.n	c005080 <SPI_WaitFlagStateUntilTimeout+0x94>
 c00505c:	68fb      	ldr	r3, [r7, #12]
 c00505e:	689b      	ldr	r3, [r3, #8]
 c005060:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005064:	d004      	beq.n	c005070 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c005066:	68fb      	ldr	r3, [r7, #12]
 c005068:	689b      	ldr	r3, [r3, #8]
 c00506a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00506e:	d107      	bne.n	c005080 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c005070:	68fb      	ldr	r3, [r7, #12]
 c005072:	681b      	ldr	r3, [r3, #0]
 c005074:	681a      	ldr	r2, [r3, #0]
 c005076:	68fb      	ldr	r3, [r7, #12]
 c005078:	681b      	ldr	r3, [r3, #0]
 c00507a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c00507e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c005080:	68fb      	ldr	r3, [r7, #12]
 c005082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005084:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c005088:	d10f      	bne.n	c0050aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 c00508a:	68fb      	ldr	r3, [r7, #12]
 c00508c:	681b      	ldr	r3, [r3, #0]
 c00508e:	681a      	ldr	r2, [r3, #0]
 c005090:	68fb      	ldr	r3, [r7, #12]
 c005092:	681b      	ldr	r3, [r3, #0]
 c005094:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c005098:	601a      	str	r2, [r3, #0]
 c00509a:	68fb      	ldr	r3, [r7, #12]
 c00509c:	681b      	ldr	r3, [r3, #0]
 c00509e:	681a      	ldr	r2, [r3, #0]
 c0050a0:	68fb      	ldr	r3, [r7, #12]
 c0050a2:	681b      	ldr	r3, [r3, #0]
 c0050a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c0050a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c0050aa:	68fb      	ldr	r3, [r7, #12]
 c0050ac:	2201      	movs	r2, #1
 c0050ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c0050b2:	68fb      	ldr	r3, [r7, #12]
 c0050b4:	2200      	movs	r2, #0
 c0050b6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c0050ba:	2303      	movs	r3, #3
 c0050bc:	e017      	b.n	c0050ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c0050be:	697b      	ldr	r3, [r7, #20]
 c0050c0:	2b00      	cmp	r3, #0
 c0050c2:	d101      	bne.n	c0050c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 c0050c4:	2300      	movs	r3, #0
 c0050c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 c0050c8:	697b      	ldr	r3, [r7, #20]
 c0050ca:	3b01      	subs	r3, #1
 c0050cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c0050ce:	68fb      	ldr	r3, [r7, #12]
 c0050d0:	681b      	ldr	r3, [r3, #0]
 c0050d2:	689a      	ldr	r2, [r3, #8]
 c0050d4:	68bb      	ldr	r3, [r7, #8]
 c0050d6:	4013      	ands	r3, r2
 c0050d8:	68ba      	ldr	r2, [r7, #8]
 c0050da:	429a      	cmp	r2, r3
 c0050dc:	bf0c      	ite	eq
 c0050de:	2301      	moveq	r3, #1
 c0050e0:	2300      	movne	r3, #0
 c0050e2:	b2db      	uxtb	r3, r3
 c0050e4:	461a      	mov	r2, r3
 c0050e6:	79fb      	ldrb	r3, [r7, #7]
 c0050e8:	429a      	cmp	r2, r3
 c0050ea:	d19b      	bne.n	c005024 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 c0050ec:	2300      	movs	r3, #0
}
 c0050ee:	4618      	mov	r0, r3
 c0050f0:	3720      	adds	r7, #32
 c0050f2:	46bd      	mov	sp, r7
 c0050f4:	bd80      	pop	{r7, pc}
 c0050f6:	bf00      	nop
 c0050f8:	30000000 	.word	0x30000000

0c0050fc <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c0050fc:	b580      	push	{r7, lr}
 c0050fe:	b08a      	sub	sp, #40	; 0x28
 c005100:	af00      	add	r7, sp, #0
 c005102:	60f8      	str	r0, [r7, #12]
 c005104:	60b9      	str	r1, [r7, #8]
 c005106:	607a      	str	r2, [r7, #4]
 c005108:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 c00510a:	2300      	movs	r3, #0
 c00510c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 c00510e:	f7fc fea7 	bl	c001e60 <HAL_GetTick>
 c005112:	4602      	mov	r2, r0
 c005114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c005116:	1a9b      	subs	r3, r3, r2
 c005118:	683a      	ldr	r2, [r7, #0]
 c00511a:	4413      	add	r3, r2
 c00511c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 c00511e:	f7fc fe9f 	bl	c001e60 <HAL_GetTick>
 c005122:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 c005124:	68fb      	ldr	r3, [r7, #12]
 c005126:	681b      	ldr	r3, [r3, #0]
 c005128:	330c      	adds	r3, #12
 c00512a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 c00512c:	4b3d      	ldr	r3, [pc, #244]	; (c005224 <SPI_WaitFifoStateUntilTimeout+0x128>)
 c00512e:	681a      	ldr	r2, [r3, #0]
 c005130:	4613      	mov	r3, r2
 c005132:	009b      	lsls	r3, r3, #2
 c005134:	4413      	add	r3, r2
 c005136:	00da      	lsls	r2, r3, #3
 c005138:	1ad3      	subs	r3, r2, r3
 c00513a:	0d1b      	lsrs	r3, r3, #20
 c00513c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c00513e:	fb02 f303 	mul.w	r3, r2, r3
 c005142:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 c005144:	e060      	b.n	c005208 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 c005146:	68bb      	ldr	r3, [r7, #8]
 c005148:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c00514c:	d107      	bne.n	c00515e <SPI_WaitFifoStateUntilTimeout+0x62>
 c00514e:	687b      	ldr	r3, [r7, #4]
 c005150:	2b00      	cmp	r3, #0
 c005152:	d104      	bne.n	c00515e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 c005154:	69fb      	ldr	r3, [r7, #28]
 c005156:	781b      	ldrb	r3, [r3, #0]
 c005158:	b2db      	uxtb	r3, r3
 c00515a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 c00515c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 c00515e:	683b      	ldr	r3, [r7, #0]
 c005160:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005164:	d050      	beq.n	c005208 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c005166:	f7fc fe7b 	bl	c001e60 <HAL_GetTick>
 c00516a:	4602      	mov	r2, r0
 c00516c:	6a3b      	ldr	r3, [r7, #32]
 c00516e:	1ad3      	subs	r3, r2, r3
 c005170:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c005172:	429a      	cmp	r2, r3
 c005174:	d902      	bls.n	c00517c <SPI_WaitFifoStateUntilTimeout+0x80>
 c005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005178:	2b00      	cmp	r3, #0
 c00517a:	d13d      	bne.n	c0051f8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c00517c:	68fb      	ldr	r3, [r7, #12]
 c00517e:	681b      	ldr	r3, [r3, #0]
 c005180:	685a      	ldr	r2, [r3, #4]
 c005182:	68fb      	ldr	r3, [r7, #12]
 c005184:	681b      	ldr	r3, [r3, #0]
 c005186:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c00518a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c00518c:	68fb      	ldr	r3, [r7, #12]
 c00518e:	685b      	ldr	r3, [r3, #4]
 c005190:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005194:	d111      	bne.n	c0051ba <SPI_WaitFifoStateUntilTimeout+0xbe>
 c005196:	68fb      	ldr	r3, [r7, #12]
 c005198:	689b      	ldr	r3, [r3, #8]
 c00519a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00519e:	d004      	beq.n	c0051aa <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0051a0:	68fb      	ldr	r3, [r7, #12]
 c0051a2:	689b      	ldr	r3, [r3, #8]
 c0051a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0051a8:	d107      	bne.n	c0051ba <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c0051aa:	68fb      	ldr	r3, [r7, #12]
 c0051ac:	681b      	ldr	r3, [r3, #0]
 c0051ae:	681a      	ldr	r2, [r3, #0]
 c0051b0:	68fb      	ldr	r3, [r7, #12]
 c0051b2:	681b      	ldr	r3, [r3, #0]
 c0051b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c0051b8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c0051ba:	68fb      	ldr	r3, [r7, #12]
 c0051bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0051be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c0051c2:	d10f      	bne.n	c0051e4 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 c0051c4:	68fb      	ldr	r3, [r7, #12]
 c0051c6:	681b      	ldr	r3, [r3, #0]
 c0051c8:	681a      	ldr	r2, [r3, #0]
 c0051ca:	68fb      	ldr	r3, [r7, #12]
 c0051cc:	681b      	ldr	r3, [r3, #0]
 c0051ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c0051d2:	601a      	str	r2, [r3, #0]
 c0051d4:	68fb      	ldr	r3, [r7, #12]
 c0051d6:	681b      	ldr	r3, [r3, #0]
 c0051d8:	681a      	ldr	r2, [r3, #0]
 c0051da:	68fb      	ldr	r3, [r7, #12]
 c0051dc:	681b      	ldr	r3, [r3, #0]
 c0051de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c0051e2:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c0051e4:	68fb      	ldr	r3, [r7, #12]
 c0051e6:	2201      	movs	r2, #1
 c0051e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c0051ec:	68fb      	ldr	r3, [r7, #12]
 c0051ee:	2200      	movs	r2, #0
 c0051f0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c0051f4:	2303      	movs	r3, #3
 c0051f6:	e010      	b.n	c00521a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c0051f8:	69bb      	ldr	r3, [r7, #24]
 c0051fa:	2b00      	cmp	r3, #0
 c0051fc:	d101      	bne.n	c005202 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 c0051fe:	2300      	movs	r3, #0
 c005200:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 c005202:	69bb      	ldr	r3, [r7, #24]
 c005204:	3b01      	subs	r3, #1
 c005206:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 c005208:	68fb      	ldr	r3, [r7, #12]
 c00520a:	681b      	ldr	r3, [r3, #0]
 c00520c:	689a      	ldr	r2, [r3, #8]
 c00520e:	68bb      	ldr	r3, [r7, #8]
 c005210:	4013      	ands	r3, r2
 c005212:	687a      	ldr	r2, [r7, #4]
 c005214:	429a      	cmp	r2, r3
 c005216:	d196      	bne.n	c005146 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 c005218:	2300      	movs	r3, #0
}
 c00521a:	4618      	mov	r0, r3
 c00521c:	3728      	adds	r7, #40	; 0x28
 c00521e:	46bd      	mov	sp, r7
 c005220:	bd80      	pop	{r7, pc}
 c005222:	bf00      	nop
 c005224:	30000000 	.word	0x30000000

0c005228 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 c005228:	b580      	push	{r7, lr}
 c00522a:	b086      	sub	sp, #24
 c00522c:	af02      	add	r7, sp, #8
 c00522e:	60f8      	str	r0, [r7, #12]
 c005230:	60b9      	str	r1, [r7, #8]
 c005232:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005234:	68fb      	ldr	r3, [r7, #12]
 c005236:	685b      	ldr	r3, [r3, #4]
 c005238:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c00523c:	d111      	bne.n	c005262 <SPI_EndRxTransaction+0x3a>
 c00523e:	68fb      	ldr	r3, [r7, #12]
 c005240:	689b      	ldr	r3, [r3, #8]
 c005242:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005246:	d004      	beq.n	c005252 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c005248:	68fb      	ldr	r3, [r7, #12]
 c00524a:	689b      	ldr	r3, [r3, #8]
 c00524c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c005250:	d107      	bne.n	c005262 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 c005252:	68fb      	ldr	r3, [r7, #12]
 c005254:	681b      	ldr	r3, [r3, #0]
 c005256:	681a      	ldr	r2, [r3, #0]
 c005258:	68fb      	ldr	r3, [r7, #12]
 c00525a:	681b      	ldr	r3, [r3, #0]
 c00525c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c005260:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c005262:	687b      	ldr	r3, [r7, #4]
 c005264:	9300      	str	r3, [sp, #0]
 c005266:	68bb      	ldr	r3, [r7, #8]
 c005268:	2200      	movs	r2, #0
 c00526a:	2180      	movs	r1, #128	; 0x80
 c00526c:	68f8      	ldr	r0, [r7, #12]
 c00526e:	f7ff febd 	bl	c004fec <SPI_WaitFlagStateUntilTimeout>
 c005272:	4603      	mov	r3, r0
 c005274:	2b00      	cmp	r3, #0
 c005276:	d007      	beq.n	c005288 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005278:	68fb      	ldr	r3, [r7, #12]
 c00527a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00527c:	f043 0220 	orr.w	r2, r3, #32
 c005280:	68fb      	ldr	r3, [r7, #12]
 c005282:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005284:	2303      	movs	r3, #3
 c005286:	e023      	b.n	c0052d0 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c005288:	68fb      	ldr	r3, [r7, #12]
 c00528a:	685b      	ldr	r3, [r3, #4]
 c00528c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c005290:	d11d      	bne.n	c0052ce <SPI_EndRxTransaction+0xa6>
 c005292:	68fb      	ldr	r3, [r7, #12]
 c005294:	689b      	ldr	r3, [r3, #8]
 c005296:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00529a:	d004      	beq.n	c0052a6 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c00529c:	68fb      	ldr	r3, [r7, #12]
 c00529e:	689b      	ldr	r3, [r3, #8]
 c0052a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0052a4:	d113      	bne.n	c0052ce <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c0052a6:	687b      	ldr	r3, [r7, #4]
 c0052a8:	9300      	str	r3, [sp, #0]
 c0052aa:	68bb      	ldr	r3, [r7, #8]
 c0052ac:	2200      	movs	r2, #0
 c0052ae:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c0052b2:	68f8      	ldr	r0, [r7, #12]
 c0052b4:	f7ff ff22 	bl	c0050fc <SPI_WaitFifoStateUntilTimeout>
 c0052b8:	4603      	mov	r3, r0
 c0052ba:	2b00      	cmp	r3, #0
 c0052bc:	d007      	beq.n	c0052ce <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0052be:	68fb      	ldr	r3, [r7, #12]
 c0052c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0052c2:	f043 0220 	orr.w	r2, r3, #32
 c0052c6:	68fb      	ldr	r3, [r7, #12]
 c0052c8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 c0052ca:	2303      	movs	r3, #3
 c0052cc:	e000      	b.n	c0052d0 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 c0052ce:	2300      	movs	r3, #0
}
 c0052d0:	4618      	mov	r0, r3
 c0052d2:	3710      	adds	r7, #16
 c0052d4:	46bd      	mov	sp, r7
 c0052d6:	bd80      	pop	{r7, pc}

0c0052d8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 c0052d8:	b580      	push	{r7, lr}
 c0052da:	b086      	sub	sp, #24
 c0052dc:	af02      	add	r7, sp, #8
 c0052de:	60f8      	str	r0, [r7, #12]
 c0052e0:	60b9      	str	r1, [r7, #8]
 c0052e2:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c0052e4:	687b      	ldr	r3, [r7, #4]
 c0052e6:	9300      	str	r3, [sp, #0]
 c0052e8:	68bb      	ldr	r3, [r7, #8]
 c0052ea:	2200      	movs	r2, #0
 c0052ec:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 c0052f0:	68f8      	ldr	r0, [r7, #12]
 c0052f2:	f7ff ff03 	bl	c0050fc <SPI_WaitFifoStateUntilTimeout>
 c0052f6:	4603      	mov	r3, r0
 c0052f8:	2b00      	cmp	r3, #0
 c0052fa:	d007      	beq.n	c00530c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0052fc:	68fb      	ldr	r3, [r7, #12]
 c0052fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005300:	f043 0220 	orr.w	r2, r3, #32
 c005304:	68fb      	ldr	r3, [r7, #12]
 c005306:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005308:	2303      	movs	r3, #3
 c00530a:	e027      	b.n	c00535c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c00530c:	687b      	ldr	r3, [r7, #4]
 c00530e:	9300      	str	r3, [sp, #0]
 c005310:	68bb      	ldr	r3, [r7, #8]
 c005312:	2200      	movs	r2, #0
 c005314:	2180      	movs	r1, #128	; 0x80
 c005316:	68f8      	ldr	r0, [r7, #12]
 c005318:	f7ff fe68 	bl	c004fec <SPI_WaitFlagStateUntilTimeout>
 c00531c:	4603      	mov	r3, r0
 c00531e:	2b00      	cmp	r3, #0
 c005320:	d007      	beq.n	c005332 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c005322:	68fb      	ldr	r3, [r7, #12]
 c005324:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c005326:	f043 0220 	orr.w	r2, r3, #32
 c00532a:	68fb      	ldr	r3, [r7, #12]
 c00532c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c00532e:	2303      	movs	r3, #3
 c005330:	e014      	b.n	c00535c <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c005332:	687b      	ldr	r3, [r7, #4]
 c005334:	9300      	str	r3, [sp, #0]
 c005336:	68bb      	ldr	r3, [r7, #8]
 c005338:	2200      	movs	r2, #0
 c00533a:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c00533e:	68f8      	ldr	r0, [r7, #12]
 c005340:	f7ff fedc 	bl	c0050fc <SPI_WaitFifoStateUntilTimeout>
 c005344:	4603      	mov	r3, r0
 c005346:	2b00      	cmp	r3, #0
 c005348:	d007      	beq.n	c00535a <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c00534a:	68fb      	ldr	r3, [r7, #12]
 c00534c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c00534e:	f043 0220 	orr.w	r2, r3, #32
 c005352:	68fb      	ldr	r3, [r7, #12]
 c005354:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c005356:	2303      	movs	r3, #3
 c005358:	e000      	b.n	c00535c <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 c00535a:	2300      	movs	r3, #0
}
 c00535c:	4618      	mov	r0, r3
 c00535e:	3710      	adds	r7, #16
 c005360:	46bd      	mov	sp, r7
 c005362:	bd80      	pop	{r7, pc}

0c005364 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c005364:	b580      	push	{r7, lr}
 c005366:	b082      	sub	sp, #8
 c005368:	af00      	add	r7, sp, #0
 c00536a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c00536c:	687b      	ldr	r3, [r7, #4]
 c00536e:	2b00      	cmp	r3, #0
 c005370:	d101      	bne.n	c005376 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c005372:	2301      	movs	r3, #1
 c005374:	e042      	b.n	c0053fc <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c005376:	687b      	ldr	r3, [r7, #4]
 c005378:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00537c:	2b00      	cmp	r3, #0
 c00537e:	d106      	bne.n	c00538e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c005380:	687b      	ldr	r3, [r7, #4]
 c005382:	2200      	movs	r2, #0
 c005384:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c005388:	6878      	ldr	r0, [r7, #4]
 c00538a:	f7fc f9f7 	bl	c00177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c00538e:	687b      	ldr	r3, [r7, #4]
 c005390:	2224      	movs	r2, #36	; 0x24
 c005392:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c005396:	687b      	ldr	r3, [r7, #4]
 c005398:	681b      	ldr	r3, [r3, #0]
 c00539a:	681a      	ldr	r2, [r3, #0]
 c00539c:	687b      	ldr	r3, [r7, #4]
 c00539e:	681b      	ldr	r3, [r3, #0]
 c0053a0:	f022 0201 	bic.w	r2, r2, #1
 c0053a4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c0053a6:	6878      	ldr	r0, [r7, #4]
 c0053a8:	f000 f8ba 	bl	c005520 <UART_SetConfig>
 c0053ac:	4603      	mov	r3, r0
 c0053ae:	2b01      	cmp	r3, #1
 c0053b0:	d101      	bne.n	c0053b6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c0053b2:	2301      	movs	r3, #1
 c0053b4:	e022      	b.n	c0053fc <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c0053b6:	687b      	ldr	r3, [r7, #4]
 c0053b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0053ba:	2b00      	cmp	r3, #0
 c0053bc:	d002      	beq.n	c0053c4 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c0053be:	6878      	ldr	r0, [r7, #4]
 c0053c0:	f000 fbac 	bl	c005b1c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c0053c4:	687b      	ldr	r3, [r7, #4]
 c0053c6:	681b      	ldr	r3, [r3, #0]
 c0053c8:	685a      	ldr	r2, [r3, #4]
 c0053ca:	687b      	ldr	r3, [r7, #4]
 c0053cc:	681b      	ldr	r3, [r3, #0]
 c0053ce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c0053d2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c0053d4:	687b      	ldr	r3, [r7, #4]
 c0053d6:	681b      	ldr	r3, [r3, #0]
 c0053d8:	689a      	ldr	r2, [r3, #8]
 c0053da:	687b      	ldr	r3, [r7, #4]
 c0053dc:	681b      	ldr	r3, [r3, #0]
 c0053de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c0053e2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c0053e4:	687b      	ldr	r3, [r7, #4]
 c0053e6:	681b      	ldr	r3, [r3, #0]
 c0053e8:	681a      	ldr	r2, [r3, #0]
 c0053ea:	687b      	ldr	r3, [r7, #4]
 c0053ec:	681b      	ldr	r3, [r3, #0]
 c0053ee:	f042 0201 	orr.w	r2, r2, #1
 c0053f2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c0053f4:	6878      	ldr	r0, [r7, #4]
 c0053f6:	f000 fc33 	bl	c005c60 <UART_CheckIdleState>
 c0053fa:	4603      	mov	r3, r0
}
 c0053fc:	4618      	mov	r0, r3
 c0053fe:	3708      	adds	r7, #8
 c005400:	46bd      	mov	sp, r7
 c005402:	bd80      	pop	{r7, pc}

0c005404 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c005404:	b580      	push	{r7, lr}
 c005406:	b08a      	sub	sp, #40	; 0x28
 c005408:	af02      	add	r7, sp, #8
 c00540a:	60f8      	str	r0, [r7, #12]
 c00540c:	60b9      	str	r1, [r7, #8]
 c00540e:	603b      	str	r3, [r7, #0]
 c005410:	4613      	mov	r3, r2
 c005412:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c005414:	68fb      	ldr	r3, [r7, #12]
 c005416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00541a:	2b20      	cmp	r3, #32
 c00541c:	d17b      	bne.n	c005516 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c00541e:	68bb      	ldr	r3, [r7, #8]
 c005420:	2b00      	cmp	r3, #0
 c005422:	d002      	beq.n	c00542a <HAL_UART_Transmit+0x26>
 c005424:	88fb      	ldrh	r3, [r7, #6]
 c005426:	2b00      	cmp	r3, #0
 c005428:	d101      	bne.n	c00542e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c00542a:	2301      	movs	r3, #1
 c00542c:	e074      	b.n	c005518 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00542e:	68fb      	ldr	r3, [r7, #12]
 c005430:	2200      	movs	r2, #0
 c005432:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c005436:	68fb      	ldr	r3, [r7, #12]
 c005438:	2221      	movs	r2, #33	; 0x21
 c00543a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c00543e:	f7fc fd0f 	bl	c001e60 <HAL_GetTick>
 c005442:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c005444:	68fb      	ldr	r3, [r7, #12]
 c005446:	88fa      	ldrh	r2, [r7, #6]
 c005448:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c00544c:	68fb      	ldr	r3, [r7, #12]
 c00544e:	88fa      	ldrh	r2, [r7, #6]
 c005450:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c005454:	68fb      	ldr	r3, [r7, #12]
 c005456:	689b      	ldr	r3, [r3, #8]
 c005458:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c00545c:	d108      	bne.n	c005470 <HAL_UART_Transmit+0x6c>
 c00545e:	68fb      	ldr	r3, [r7, #12]
 c005460:	691b      	ldr	r3, [r3, #16]
 c005462:	2b00      	cmp	r3, #0
 c005464:	d104      	bne.n	c005470 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c005466:	2300      	movs	r3, #0
 c005468:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c00546a:	68bb      	ldr	r3, [r7, #8]
 c00546c:	61bb      	str	r3, [r7, #24]
 c00546e:	e003      	b.n	c005478 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c005470:	68bb      	ldr	r3, [r7, #8]
 c005472:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c005474:	2300      	movs	r3, #0
 c005476:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c005478:	e030      	b.n	c0054dc <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c00547a:	683b      	ldr	r3, [r7, #0]
 c00547c:	9300      	str	r3, [sp, #0]
 c00547e:	697b      	ldr	r3, [r7, #20]
 c005480:	2200      	movs	r2, #0
 c005482:	2180      	movs	r1, #128	; 0x80
 c005484:	68f8      	ldr	r0, [r7, #12]
 c005486:	f000 fc95 	bl	c005db4 <UART_WaitOnFlagUntilTimeout>
 c00548a:	4603      	mov	r3, r0
 c00548c:	2b00      	cmp	r3, #0
 c00548e:	d005      	beq.n	c00549c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c005490:	68fb      	ldr	r3, [r7, #12]
 c005492:	2220      	movs	r2, #32
 c005494:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c005498:	2303      	movs	r3, #3
 c00549a:	e03d      	b.n	c005518 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c00549c:	69fb      	ldr	r3, [r7, #28]
 c00549e:	2b00      	cmp	r3, #0
 c0054a0:	d10b      	bne.n	c0054ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c0054a2:	69bb      	ldr	r3, [r7, #24]
 c0054a4:	881b      	ldrh	r3, [r3, #0]
 c0054a6:	461a      	mov	r2, r3
 c0054a8:	68fb      	ldr	r3, [r7, #12]
 c0054aa:	681b      	ldr	r3, [r3, #0]
 c0054ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c0054b0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c0054b2:	69bb      	ldr	r3, [r7, #24]
 c0054b4:	3302      	adds	r3, #2
 c0054b6:	61bb      	str	r3, [r7, #24]
 c0054b8:	e007      	b.n	c0054ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c0054ba:	69fb      	ldr	r3, [r7, #28]
 c0054bc:	781a      	ldrb	r2, [r3, #0]
 c0054be:	68fb      	ldr	r3, [r7, #12]
 c0054c0:	681b      	ldr	r3, [r3, #0]
 c0054c2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c0054c4:	69fb      	ldr	r3, [r7, #28]
 c0054c6:	3301      	adds	r3, #1
 c0054c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c0054ca:	68fb      	ldr	r3, [r7, #12]
 c0054cc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0054d0:	b29b      	uxth	r3, r3
 c0054d2:	3b01      	subs	r3, #1
 c0054d4:	b29a      	uxth	r2, r3
 c0054d6:	68fb      	ldr	r3, [r7, #12]
 c0054d8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c0054dc:	68fb      	ldr	r3, [r7, #12]
 c0054de:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c0054e2:	b29b      	uxth	r3, r3
 c0054e4:	2b00      	cmp	r3, #0
 c0054e6:	d1c8      	bne.n	c00547a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c0054e8:	683b      	ldr	r3, [r7, #0]
 c0054ea:	9300      	str	r3, [sp, #0]
 c0054ec:	697b      	ldr	r3, [r7, #20]
 c0054ee:	2200      	movs	r2, #0
 c0054f0:	2140      	movs	r1, #64	; 0x40
 c0054f2:	68f8      	ldr	r0, [r7, #12]
 c0054f4:	f000 fc5e 	bl	c005db4 <UART_WaitOnFlagUntilTimeout>
 c0054f8:	4603      	mov	r3, r0
 c0054fa:	2b00      	cmp	r3, #0
 c0054fc:	d005      	beq.n	c00550a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c0054fe:	68fb      	ldr	r3, [r7, #12]
 c005500:	2220      	movs	r2, #32
 c005502:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c005506:	2303      	movs	r3, #3
 c005508:	e006      	b.n	c005518 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c00550a:	68fb      	ldr	r3, [r7, #12]
 c00550c:	2220      	movs	r2, #32
 c00550e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c005512:	2300      	movs	r3, #0
 c005514:	e000      	b.n	c005518 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c005516:	2302      	movs	r3, #2
  }
}
 c005518:	4618      	mov	r0, r3
 c00551a:	3720      	adds	r7, #32
 c00551c:	46bd      	mov	sp, r7
 c00551e:	bd80      	pop	{r7, pc}

0c005520 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c005520:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c005524:	b08c      	sub	sp, #48	; 0x30
 c005526:	af00      	add	r7, sp, #0
 c005528:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c00552a:	2300      	movs	r3, #0
 c00552c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c005530:	697b      	ldr	r3, [r7, #20]
 c005532:	689a      	ldr	r2, [r3, #8]
 c005534:	697b      	ldr	r3, [r7, #20]
 c005536:	691b      	ldr	r3, [r3, #16]
 c005538:	431a      	orrs	r2, r3
 c00553a:	697b      	ldr	r3, [r7, #20]
 c00553c:	695b      	ldr	r3, [r3, #20]
 c00553e:	431a      	orrs	r2, r3
 c005540:	697b      	ldr	r3, [r7, #20]
 c005542:	69db      	ldr	r3, [r3, #28]
 c005544:	4313      	orrs	r3, r2
 c005546:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c005548:	697b      	ldr	r3, [r7, #20]
 c00554a:	681b      	ldr	r3, [r3, #0]
 c00554c:	681a      	ldr	r2, [r3, #0]
 c00554e:	4baa      	ldr	r3, [pc, #680]	; (c0057f8 <UART_SetConfig+0x2d8>)
 c005550:	4013      	ands	r3, r2
 c005552:	697a      	ldr	r2, [r7, #20]
 c005554:	6812      	ldr	r2, [r2, #0]
 c005556:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005558:	430b      	orrs	r3, r1
 c00555a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c00555c:	697b      	ldr	r3, [r7, #20]
 c00555e:	681b      	ldr	r3, [r3, #0]
 c005560:	685b      	ldr	r3, [r3, #4]
 c005562:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c005566:	697b      	ldr	r3, [r7, #20]
 c005568:	68da      	ldr	r2, [r3, #12]
 c00556a:	697b      	ldr	r3, [r7, #20]
 c00556c:	681b      	ldr	r3, [r3, #0]
 c00556e:	430a      	orrs	r2, r1
 c005570:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c005572:	697b      	ldr	r3, [r7, #20]
 c005574:	699b      	ldr	r3, [r3, #24]
 c005576:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c005578:	697b      	ldr	r3, [r7, #20]
 c00557a:	681b      	ldr	r3, [r3, #0]
 c00557c:	4a9f      	ldr	r2, [pc, #636]	; (c0057fc <UART_SetConfig+0x2dc>)
 c00557e:	4293      	cmp	r3, r2
 c005580:	d004      	beq.n	c00558c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c005582:	697b      	ldr	r3, [r7, #20]
 c005584:	6a1b      	ldr	r3, [r3, #32]
 c005586:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c005588:	4313      	orrs	r3, r2
 c00558a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c00558c:	697b      	ldr	r3, [r7, #20]
 c00558e:	681b      	ldr	r3, [r3, #0]
 c005590:	689b      	ldr	r3, [r3, #8]
 c005592:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c005596:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c00559a:	697a      	ldr	r2, [r7, #20]
 c00559c:	6812      	ldr	r2, [r2, #0]
 c00559e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c0055a0:	430b      	orrs	r3, r1
 c0055a2:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c0055a4:	697b      	ldr	r3, [r7, #20]
 c0055a6:	681b      	ldr	r3, [r3, #0]
 c0055a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0055aa:	f023 010f 	bic.w	r1, r3, #15
 c0055ae:	697b      	ldr	r3, [r7, #20]
 c0055b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0055b2:	697b      	ldr	r3, [r7, #20]
 c0055b4:	681b      	ldr	r3, [r3, #0]
 c0055b6:	430a      	orrs	r2, r1
 c0055b8:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c0055ba:	697b      	ldr	r3, [r7, #20]
 c0055bc:	681b      	ldr	r3, [r3, #0]
 c0055be:	4a90      	ldr	r2, [pc, #576]	; (c005800 <UART_SetConfig+0x2e0>)
 c0055c0:	4293      	cmp	r3, r2
 c0055c2:	d125      	bne.n	c005610 <UART_SetConfig+0xf0>
 c0055c4:	4b8f      	ldr	r3, [pc, #572]	; (c005804 <UART_SetConfig+0x2e4>)
 c0055c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0055ca:	f003 0303 	and.w	r3, r3, #3
 c0055ce:	2b03      	cmp	r3, #3
 c0055d0:	d81a      	bhi.n	c005608 <UART_SetConfig+0xe8>
 c0055d2:	a201      	add	r2, pc, #4	; (adr r2, c0055d8 <UART_SetConfig+0xb8>)
 c0055d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0055d8:	0c0055e9 	.word	0x0c0055e9
 c0055dc:	0c0055f9 	.word	0x0c0055f9
 c0055e0:	0c0055f1 	.word	0x0c0055f1
 c0055e4:	0c005601 	.word	0x0c005601
 c0055e8:	2301      	movs	r3, #1
 c0055ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0055ee:	e114      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0055f0:	2302      	movs	r3, #2
 c0055f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0055f6:	e110      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0055f8:	2304      	movs	r3, #4
 c0055fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0055fe:	e10c      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005600:	2308      	movs	r3, #8
 c005602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005606:	e108      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005608:	2310      	movs	r3, #16
 c00560a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00560e:	e104      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005610:	697b      	ldr	r3, [r7, #20]
 c005612:	681b      	ldr	r3, [r3, #0]
 c005614:	4a7c      	ldr	r2, [pc, #496]	; (c005808 <UART_SetConfig+0x2e8>)
 c005616:	4293      	cmp	r3, r2
 c005618:	d138      	bne.n	c00568c <UART_SetConfig+0x16c>
 c00561a:	4b7a      	ldr	r3, [pc, #488]	; (c005804 <UART_SetConfig+0x2e4>)
 c00561c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005620:	f003 030c 	and.w	r3, r3, #12
 c005624:	2b0c      	cmp	r3, #12
 c005626:	d82d      	bhi.n	c005684 <UART_SetConfig+0x164>
 c005628:	a201      	add	r2, pc, #4	; (adr r2, c005630 <UART_SetConfig+0x110>)
 c00562a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c00562e:	bf00      	nop
 c005630:	0c005665 	.word	0x0c005665
 c005634:	0c005685 	.word	0x0c005685
 c005638:	0c005685 	.word	0x0c005685
 c00563c:	0c005685 	.word	0x0c005685
 c005640:	0c005675 	.word	0x0c005675
 c005644:	0c005685 	.word	0x0c005685
 c005648:	0c005685 	.word	0x0c005685
 c00564c:	0c005685 	.word	0x0c005685
 c005650:	0c00566d 	.word	0x0c00566d
 c005654:	0c005685 	.word	0x0c005685
 c005658:	0c005685 	.word	0x0c005685
 c00565c:	0c005685 	.word	0x0c005685
 c005660:	0c00567d 	.word	0x0c00567d
 c005664:	2300      	movs	r3, #0
 c005666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00566a:	e0d6      	b.n	c00581a <UART_SetConfig+0x2fa>
 c00566c:	2302      	movs	r3, #2
 c00566e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005672:	e0d2      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005674:	2304      	movs	r3, #4
 c005676:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00567a:	e0ce      	b.n	c00581a <UART_SetConfig+0x2fa>
 c00567c:	2308      	movs	r3, #8
 c00567e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005682:	e0ca      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005684:	2310      	movs	r3, #16
 c005686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00568a:	e0c6      	b.n	c00581a <UART_SetConfig+0x2fa>
 c00568c:	697b      	ldr	r3, [r7, #20]
 c00568e:	681b      	ldr	r3, [r3, #0]
 c005690:	4a5e      	ldr	r2, [pc, #376]	; (c00580c <UART_SetConfig+0x2ec>)
 c005692:	4293      	cmp	r3, r2
 c005694:	d125      	bne.n	c0056e2 <UART_SetConfig+0x1c2>
 c005696:	4b5b      	ldr	r3, [pc, #364]	; (c005804 <UART_SetConfig+0x2e4>)
 c005698:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00569c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c0056a0:	2b30      	cmp	r3, #48	; 0x30
 c0056a2:	d016      	beq.n	c0056d2 <UART_SetConfig+0x1b2>
 c0056a4:	2b30      	cmp	r3, #48	; 0x30
 c0056a6:	d818      	bhi.n	c0056da <UART_SetConfig+0x1ba>
 c0056a8:	2b20      	cmp	r3, #32
 c0056aa:	d00a      	beq.n	c0056c2 <UART_SetConfig+0x1a2>
 c0056ac:	2b20      	cmp	r3, #32
 c0056ae:	d814      	bhi.n	c0056da <UART_SetConfig+0x1ba>
 c0056b0:	2b00      	cmp	r3, #0
 c0056b2:	d002      	beq.n	c0056ba <UART_SetConfig+0x19a>
 c0056b4:	2b10      	cmp	r3, #16
 c0056b6:	d008      	beq.n	c0056ca <UART_SetConfig+0x1aa>
 c0056b8:	e00f      	b.n	c0056da <UART_SetConfig+0x1ba>
 c0056ba:	2300      	movs	r3, #0
 c0056bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0056c0:	e0ab      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0056c2:	2302      	movs	r3, #2
 c0056c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0056c8:	e0a7      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0056ca:	2304      	movs	r3, #4
 c0056cc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0056d0:	e0a3      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0056d2:	2308      	movs	r3, #8
 c0056d4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0056d8:	e09f      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0056da:	2310      	movs	r3, #16
 c0056dc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0056e0:	e09b      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0056e2:	697b      	ldr	r3, [r7, #20]
 c0056e4:	681b      	ldr	r3, [r3, #0]
 c0056e6:	4a4a      	ldr	r2, [pc, #296]	; (c005810 <UART_SetConfig+0x2f0>)
 c0056e8:	4293      	cmp	r3, r2
 c0056ea:	d125      	bne.n	c005738 <UART_SetConfig+0x218>
 c0056ec:	4b45      	ldr	r3, [pc, #276]	; (c005804 <UART_SetConfig+0x2e4>)
 c0056ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0056f2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c0056f6:	2bc0      	cmp	r3, #192	; 0xc0
 c0056f8:	d016      	beq.n	c005728 <UART_SetConfig+0x208>
 c0056fa:	2bc0      	cmp	r3, #192	; 0xc0
 c0056fc:	d818      	bhi.n	c005730 <UART_SetConfig+0x210>
 c0056fe:	2b80      	cmp	r3, #128	; 0x80
 c005700:	d00a      	beq.n	c005718 <UART_SetConfig+0x1f8>
 c005702:	2b80      	cmp	r3, #128	; 0x80
 c005704:	d814      	bhi.n	c005730 <UART_SetConfig+0x210>
 c005706:	2b00      	cmp	r3, #0
 c005708:	d002      	beq.n	c005710 <UART_SetConfig+0x1f0>
 c00570a:	2b40      	cmp	r3, #64	; 0x40
 c00570c:	d008      	beq.n	c005720 <UART_SetConfig+0x200>
 c00570e:	e00f      	b.n	c005730 <UART_SetConfig+0x210>
 c005710:	2300      	movs	r3, #0
 c005712:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005716:	e080      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005718:	2302      	movs	r3, #2
 c00571a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00571e:	e07c      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005720:	2304      	movs	r3, #4
 c005722:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005726:	e078      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005728:	2308      	movs	r3, #8
 c00572a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00572e:	e074      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005730:	2310      	movs	r3, #16
 c005732:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005736:	e070      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005738:	697b      	ldr	r3, [r7, #20]
 c00573a:	681b      	ldr	r3, [r3, #0]
 c00573c:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c005740:	d12a      	bne.n	c005798 <UART_SetConfig+0x278>
 c005742:	4b30      	ldr	r3, [pc, #192]	; (c005804 <UART_SetConfig+0x2e4>)
 c005744:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c005748:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c00574c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005750:	d01a      	beq.n	c005788 <UART_SetConfig+0x268>
 c005752:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005756:	d81b      	bhi.n	c005790 <UART_SetConfig+0x270>
 c005758:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00575c:	d00c      	beq.n	c005778 <UART_SetConfig+0x258>
 c00575e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c005762:	d815      	bhi.n	c005790 <UART_SetConfig+0x270>
 c005764:	2b00      	cmp	r3, #0
 c005766:	d003      	beq.n	c005770 <UART_SetConfig+0x250>
 c005768:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c00576c:	d008      	beq.n	c005780 <UART_SetConfig+0x260>
 c00576e:	e00f      	b.n	c005790 <UART_SetConfig+0x270>
 c005770:	2300      	movs	r3, #0
 c005772:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005776:	e050      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005778:	2302      	movs	r3, #2
 c00577a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00577e:	e04c      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005780:	2304      	movs	r3, #4
 c005782:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005786:	e048      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005788:	2308      	movs	r3, #8
 c00578a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c00578e:	e044      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005790:	2310      	movs	r3, #16
 c005792:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c005796:	e040      	b.n	c00581a <UART_SetConfig+0x2fa>
 c005798:	697b      	ldr	r3, [r7, #20]
 c00579a:	681b      	ldr	r3, [r3, #0]
 c00579c:	4a17      	ldr	r2, [pc, #92]	; (c0057fc <UART_SetConfig+0x2dc>)
 c00579e:	4293      	cmp	r3, r2
 c0057a0:	d138      	bne.n	c005814 <UART_SetConfig+0x2f4>
 c0057a2:	4b18      	ldr	r3, [pc, #96]	; (c005804 <UART_SetConfig+0x2e4>)
 c0057a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0057a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c0057ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0057b0:	d01a      	beq.n	c0057e8 <UART_SetConfig+0x2c8>
 c0057b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c0057b6:	d81b      	bhi.n	c0057f0 <UART_SetConfig+0x2d0>
 c0057b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0057bc:	d00c      	beq.n	c0057d8 <UART_SetConfig+0x2b8>
 c0057be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0057c2:	d815      	bhi.n	c0057f0 <UART_SetConfig+0x2d0>
 c0057c4:	2b00      	cmp	r3, #0
 c0057c6:	d003      	beq.n	c0057d0 <UART_SetConfig+0x2b0>
 c0057c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0057cc:	d008      	beq.n	c0057e0 <UART_SetConfig+0x2c0>
 c0057ce:	e00f      	b.n	c0057f0 <UART_SetConfig+0x2d0>
 c0057d0:	2300      	movs	r3, #0
 c0057d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0057d6:	e020      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0057d8:	2302      	movs	r3, #2
 c0057da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0057de:	e01c      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0057e0:	2304      	movs	r3, #4
 c0057e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0057e6:	e018      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0057e8:	2308      	movs	r3, #8
 c0057ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0057ee:	e014      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0057f0:	2310      	movs	r3, #16
 c0057f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c0057f6:	e010      	b.n	c00581a <UART_SetConfig+0x2fa>
 c0057f8:	cfff69f3 	.word	0xcfff69f3
 c0057fc:	50008000 	.word	0x50008000
 c005800:	50013800 	.word	0x50013800
 c005804:	50021000 	.word	0x50021000
 c005808:	50004400 	.word	0x50004400
 c00580c:	50004800 	.word	0x50004800
 c005810:	50004c00 	.word	0x50004c00
 c005814:	2310      	movs	r3, #16
 c005816:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c00581a:	697b      	ldr	r3, [r7, #20]
 c00581c:	681b      	ldr	r3, [r3, #0]
 c00581e:	4ab0      	ldr	r2, [pc, #704]	; (c005ae0 <UART_SetConfig+0x5c0>)
 c005820:	4293      	cmp	r3, r2
 c005822:	f040 809b 	bne.w	c00595c <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c005826:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00582a:	2b08      	cmp	r3, #8
 c00582c:	d827      	bhi.n	c00587e <UART_SetConfig+0x35e>
 c00582e:	a201      	add	r2, pc, #4	; (adr r2, c005834 <UART_SetConfig+0x314>)
 c005830:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005834:	0c005859 	.word	0x0c005859
 c005838:	0c005861 	.word	0x0c005861
 c00583c:	0c005869 	.word	0x0c005869
 c005840:	0c00587f 	.word	0x0c00587f
 c005844:	0c00586f 	.word	0x0c00586f
 c005848:	0c00587f 	.word	0x0c00587f
 c00584c:	0c00587f 	.word	0x0c00587f
 c005850:	0c00587f 	.word	0x0c00587f
 c005854:	0c005877 	.word	0x0c005877
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005858:	f7fe fa88 	bl	c003d6c <HAL_RCC_GetPCLK1Freq>
 c00585c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00585e:	e014      	b.n	c00588a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005860:	f7fe fa98 	bl	c003d94 <HAL_RCC_GetPCLK2Freq>
 c005864:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005866:	e010      	b.n	c00588a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005868:	4b9e      	ldr	r3, [pc, #632]	; (c005ae4 <UART_SetConfig+0x5c4>)
 c00586a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c00586c:	e00d      	b.n	c00588a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c00586e:	f7fe f9cb 	bl	c003c08 <HAL_RCC_GetSysClockFreq>
 c005872:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005874:	e009      	b.n	c00588a <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005876:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00587a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c00587c:	e005      	b.n	c00588a <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c00587e:	2300      	movs	r3, #0
 c005880:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005882:	2301      	movs	r3, #1
 c005884:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c005888:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c00588a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00588c:	2b00      	cmp	r3, #0
 c00588e:	f000 8130 	beq.w	c005af2 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c005892:	697b      	ldr	r3, [r7, #20]
 c005894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005896:	4a94      	ldr	r2, [pc, #592]	; (c005ae8 <UART_SetConfig+0x5c8>)
 c005898:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00589c:	461a      	mov	r2, r3
 c00589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0058a0:	fbb3 f3f2 	udiv	r3, r3, r2
 c0058a4:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0058a6:	697b      	ldr	r3, [r7, #20]
 c0058a8:	685a      	ldr	r2, [r3, #4]
 c0058aa:	4613      	mov	r3, r2
 c0058ac:	005b      	lsls	r3, r3, #1
 c0058ae:	4413      	add	r3, r2
 c0058b0:	69ba      	ldr	r2, [r7, #24]
 c0058b2:	429a      	cmp	r2, r3
 c0058b4:	d305      	bcc.n	c0058c2 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c0058b6:	697b      	ldr	r3, [r7, #20]
 c0058b8:	685b      	ldr	r3, [r3, #4]
 c0058ba:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c0058bc:	69ba      	ldr	r2, [r7, #24]
 c0058be:	429a      	cmp	r2, r3
 c0058c0:	d903      	bls.n	c0058ca <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c0058c2:	2301      	movs	r3, #1
 c0058c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c0058c8:	e113      	b.n	c005af2 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0058cc:	2200      	movs	r2, #0
 c0058ce:	60bb      	str	r3, [r7, #8]
 c0058d0:	60fa      	str	r2, [r7, #12]
 c0058d2:	697b      	ldr	r3, [r7, #20]
 c0058d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0058d6:	4a84      	ldr	r2, [pc, #528]	; (c005ae8 <UART_SetConfig+0x5c8>)
 c0058d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0058dc:	b29b      	uxth	r3, r3
 c0058de:	2200      	movs	r2, #0
 c0058e0:	603b      	str	r3, [r7, #0]
 c0058e2:	607a      	str	r2, [r7, #4]
 c0058e4:	e9d7 2300 	ldrd	r2, r3, [r7]
 c0058e8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c0058ec:	f7fa fd44 	bl	c000378 <__aeabi_uldivmod>
 c0058f0:	4602      	mov	r2, r0
 c0058f2:	460b      	mov	r3, r1
 c0058f4:	4610      	mov	r0, r2
 c0058f6:	4619      	mov	r1, r3
 c0058f8:	f04f 0200 	mov.w	r2, #0
 c0058fc:	f04f 0300 	mov.w	r3, #0
 c005900:	020b      	lsls	r3, r1, #8
 c005902:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c005906:	0202      	lsls	r2, r0, #8
 c005908:	6979      	ldr	r1, [r7, #20]
 c00590a:	6849      	ldr	r1, [r1, #4]
 c00590c:	0849      	lsrs	r1, r1, #1
 c00590e:	2000      	movs	r0, #0
 c005910:	460c      	mov	r4, r1
 c005912:	4605      	mov	r5, r0
 c005914:	eb12 0804 	adds.w	r8, r2, r4
 c005918:	eb43 0905 	adc.w	r9, r3, r5
 c00591c:	697b      	ldr	r3, [r7, #20]
 c00591e:	685b      	ldr	r3, [r3, #4]
 c005920:	2200      	movs	r2, #0
 c005922:	469a      	mov	sl, r3
 c005924:	4693      	mov	fp, r2
 c005926:	4652      	mov	r2, sl
 c005928:	465b      	mov	r3, fp
 c00592a:	4640      	mov	r0, r8
 c00592c:	4649      	mov	r1, r9
 c00592e:	f7fa fd23 	bl	c000378 <__aeabi_uldivmod>
 c005932:	4602      	mov	r2, r0
 c005934:	460b      	mov	r3, r1
 c005936:	4613      	mov	r3, r2
 c005938:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c00593a:	6a3b      	ldr	r3, [r7, #32]
 c00593c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c005940:	d308      	bcc.n	c005954 <UART_SetConfig+0x434>
 c005942:	6a3b      	ldr	r3, [r7, #32]
 c005944:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005948:	d204      	bcs.n	c005954 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c00594a:	697b      	ldr	r3, [r7, #20]
 c00594c:	681b      	ldr	r3, [r3, #0]
 c00594e:	6a3a      	ldr	r2, [r7, #32]
 c005950:	60da      	str	r2, [r3, #12]
 c005952:	e0ce      	b.n	c005af2 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c005954:	2301      	movs	r3, #1
 c005956:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c00595a:	e0ca      	b.n	c005af2 <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c00595c:	697b      	ldr	r3, [r7, #20]
 c00595e:	69db      	ldr	r3, [r3, #28]
 c005960:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005964:	d166      	bne.n	c005a34 <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c005966:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00596a:	2b08      	cmp	r3, #8
 c00596c:	d827      	bhi.n	c0059be <UART_SetConfig+0x49e>
 c00596e:	a201      	add	r2, pc, #4	; (adr r2, c005974 <UART_SetConfig+0x454>)
 c005970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005974:	0c005999 	.word	0x0c005999
 c005978:	0c0059a1 	.word	0x0c0059a1
 c00597c:	0c0059a9 	.word	0x0c0059a9
 c005980:	0c0059bf 	.word	0x0c0059bf
 c005984:	0c0059af 	.word	0x0c0059af
 c005988:	0c0059bf 	.word	0x0c0059bf
 c00598c:	0c0059bf 	.word	0x0c0059bf
 c005990:	0c0059bf 	.word	0x0c0059bf
 c005994:	0c0059b7 	.word	0x0c0059b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005998:	f7fe f9e8 	bl	c003d6c <HAL_RCC_GetPCLK1Freq>
 c00599c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00599e:	e014      	b.n	c0059ca <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c0059a0:	f7fe f9f8 	bl	c003d94 <HAL_RCC_GetPCLK2Freq>
 c0059a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0059a6:	e010      	b.n	c0059ca <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c0059a8:	4b4e      	ldr	r3, [pc, #312]	; (c005ae4 <UART_SetConfig+0x5c4>)
 c0059aa:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0059ac:	e00d      	b.n	c0059ca <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c0059ae:	f7fe f92b 	bl	c003c08 <HAL_RCC_GetSysClockFreq>
 c0059b2:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c0059b4:	e009      	b.n	c0059ca <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c0059b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0059ba:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c0059bc:	e005      	b.n	c0059ca <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c0059be:	2300      	movs	r3, #0
 c0059c0:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c0059c2:	2301      	movs	r3, #1
 c0059c4:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c0059c8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c0059ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0059cc:	2b00      	cmp	r3, #0
 c0059ce:	f000 8090 	beq.w	c005af2 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c0059d2:	697b      	ldr	r3, [r7, #20]
 c0059d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0059d6:	4a44      	ldr	r2, [pc, #272]	; (c005ae8 <UART_SetConfig+0x5c8>)
 c0059d8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c0059dc:	461a      	mov	r2, r3
 c0059de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0059e0:	fbb3 f3f2 	udiv	r3, r3, r2
 c0059e4:	005a      	lsls	r2, r3, #1
 c0059e6:	697b      	ldr	r3, [r7, #20]
 c0059e8:	685b      	ldr	r3, [r3, #4]
 c0059ea:	085b      	lsrs	r3, r3, #1
 c0059ec:	441a      	add	r2, r3
 c0059ee:	697b      	ldr	r3, [r7, #20]
 c0059f0:	685b      	ldr	r3, [r3, #4]
 c0059f2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0059f6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c0059f8:	6a3b      	ldr	r3, [r7, #32]
 c0059fa:	2b0f      	cmp	r3, #15
 c0059fc:	d916      	bls.n	c005a2c <UART_SetConfig+0x50c>
 c0059fe:	6a3b      	ldr	r3, [r7, #32]
 c005a00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005a04:	d212      	bcs.n	c005a2c <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c005a06:	6a3b      	ldr	r3, [r7, #32]
 c005a08:	b29b      	uxth	r3, r3
 c005a0a:	f023 030f 	bic.w	r3, r3, #15
 c005a0e:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c005a10:	6a3b      	ldr	r3, [r7, #32]
 c005a12:	085b      	lsrs	r3, r3, #1
 c005a14:	b29b      	uxth	r3, r3
 c005a16:	f003 0307 	and.w	r3, r3, #7
 c005a1a:	b29a      	uxth	r2, r3
 c005a1c:	8bfb      	ldrh	r3, [r7, #30]
 c005a1e:	4313      	orrs	r3, r2
 c005a20:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c005a22:	697b      	ldr	r3, [r7, #20]
 c005a24:	681b      	ldr	r3, [r3, #0]
 c005a26:	8bfa      	ldrh	r2, [r7, #30]
 c005a28:	60da      	str	r2, [r3, #12]
 c005a2a:	e062      	b.n	c005af2 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c005a2c:	2301      	movs	r3, #1
 c005a2e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c005a32:	e05e      	b.n	c005af2 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c005a34:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c005a38:	2b08      	cmp	r3, #8
 c005a3a:	d828      	bhi.n	c005a8e <UART_SetConfig+0x56e>
 c005a3c:	a201      	add	r2, pc, #4	; (adr r2, c005a44 <UART_SetConfig+0x524>)
 c005a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005a42:	bf00      	nop
 c005a44:	0c005a69 	.word	0x0c005a69
 c005a48:	0c005a71 	.word	0x0c005a71
 c005a4c:	0c005a79 	.word	0x0c005a79
 c005a50:	0c005a8f 	.word	0x0c005a8f
 c005a54:	0c005a7f 	.word	0x0c005a7f
 c005a58:	0c005a8f 	.word	0x0c005a8f
 c005a5c:	0c005a8f 	.word	0x0c005a8f
 c005a60:	0c005a8f 	.word	0x0c005a8f
 c005a64:	0c005a87 	.word	0x0c005a87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c005a68:	f7fe f980 	bl	c003d6c <HAL_RCC_GetPCLK1Freq>
 c005a6c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005a6e:	e014      	b.n	c005a9a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005a70:	f7fe f990 	bl	c003d94 <HAL_RCC_GetPCLK2Freq>
 c005a74:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005a76:	e010      	b.n	c005a9a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c005a78:	4b1a      	ldr	r3, [pc, #104]	; (c005ae4 <UART_SetConfig+0x5c4>)
 c005a7a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005a7c:	e00d      	b.n	c005a9a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005a7e:	f7fe f8c3 	bl	c003c08 <HAL_RCC_GetSysClockFreq>
 c005a82:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005a84:	e009      	b.n	c005a9a <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c005a86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c005a8a:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005a8c:	e005      	b.n	c005a9a <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c005a8e:	2300      	movs	r3, #0
 c005a90:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005a92:	2301      	movs	r3, #1
 c005a94:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c005a98:	bf00      	nop
    }

    if (pclk != 0U)
 c005a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005a9c:	2b00      	cmp	r3, #0
 c005a9e:	d028      	beq.n	c005af2 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005aa0:	697b      	ldr	r3, [r7, #20]
 c005aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005aa4:	4a10      	ldr	r2, [pc, #64]	; (c005ae8 <UART_SetConfig+0x5c8>)
 c005aa6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c005aaa:	461a      	mov	r2, r3
 c005aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005aae:	fbb3 f2f2 	udiv	r2, r3, r2
 c005ab2:	697b      	ldr	r3, [r7, #20]
 c005ab4:	685b      	ldr	r3, [r3, #4]
 c005ab6:	085b      	lsrs	r3, r3, #1
 c005ab8:	441a      	add	r2, r3
 c005aba:	697b      	ldr	r3, [r7, #20]
 c005abc:	685b      	ldr	r3, [r3, #4]
 c005abe:	fbb2 f3f3 	udiv	r3, r2, r3
 c005ac2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c005ac4:	6a3b      	ldr	r3, [r7, #32]
 c005ac6:	2b0f      	cmp	r3, #15
 c005ac8:	d910      	bls.n	c005aec <UART_SetConfig+0x5cc>
 c005aca:	6a3b      	ldr	r3, [r7, #32]
 c005acc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005ad0:	d20c      	bcs.n	c005aec <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c005ad2:	6a3b      	ldr	r3, [r7, #32]
 c005ad4:	b29a      	uxth	r2, r3
 c005ad6:	697b      	ldr	r3, [r7, #20]
 c005ad8:	681b      	ldr	r3, [r3, #0]
 c005ada:	60da      	str	r2, [r3, #12]
 c005adc:	e009      	b.n	c005af2 <UART_SetConfig+0x5d2>
 c005ade:	bf00      	nop
 c005ae0:	50008000 	.word	0x50008000
 c005ae4:	00f42400 	.word	0x00f42400
 c005ae8:	0c007390 	.word	0x0c007390
      }
      else
      {
        ret = HAL_ERROR;
 c005aec:	2301      	movs	r3, #1
 c005aee:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c005af2:	697b      	ldr	r3, [r7, #20]
 c005af4:	2201      	movs	r2, #1
 c005af6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c005afa:	697b      	ldr	r3, [r7, #20]
 c005afc:	2201      	movs	r2, #1
 c005afe:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c005b02:	697b      	ldr	r3, [r7, #20]
 c005b04:	2200      	movs	r2, #0
 c005b06:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c005b08:	697b      	ldr	r3, [r7, #20]
 c005b0a:	2200      	movs	r2, #0
 c005b0c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c005b0e:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c005b12:	4618      	mov	r0, r3
 c005b14:	3730      	adds	r7, #48	; 0x30
 c005b16:	46bd      	mov	sp, r7
 c005b18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c005b1c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c005b1c:	b480      	push	{r7}
 c005b1e:	b083      	sub	sp, #12
 c005b20:	af00      	add	r7, sp, #0
 c005b22:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c005b24:	687b      	ldr	r3, [r7, #4]
 c005b26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b28:	f003 0301 	and.w	r3, r3, #1
 c005b2c:	2b00      	cmp	r3, #0
 c005b2e:	d00a      	beq.n	c005b46 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c005b30:	687b      	ldr	r3, [r7, #4]
 c005b32:	681b      	ldr	r3, [r3, #0]
 c005b34:	685b      	ldr	r3, [r3, #4]
 c005b36:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c005b3a:	687b      	ldr	r3, [r7, #4]
 c005b3c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c005b3e:	687b      	ldr	r3, [r7, #4]
 c005b40:	681b      	ldr	r3, [r3, #0]
 c005b42:	430a      	orrs	r2, r1
 c005b44:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c005b46:	687b      	ldr	r3, [r7, #4]
 c005b48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b4a:	f003 0302 	and.w	r3, r3, #2
 c005b4e:	2b00      	cmp	r3, #0
 c005b50:	d00a      	beq.n	c005b68 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c005b52:	687b      	ldr	r3, [r7, #4]
 c005b54:	681b      	ldr	r3, [r3, #0]
 c005b56:	685b      	ldr	r3, [r3, #4]
 c005b58:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c005b5c:	687b      	ldr	r3, [r7, #4]
 c005b5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c005b60:	687b      	ldr	r3, [r7, #4]
 c005b62:	681b      	ldr	r3, [r3, #0]
 c005b64:	430a      	orrs	r2, r1
 c005b66:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c005b68:	687b      	ldr	r3, [r7, #4]
 c005b6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b6c:	f003 0304 	and.w	r3, r3, #4
 c005b70:	2b00      	cmp	r3, #0
 c005b72:	d00a      	beq.n	c005b8a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c005b74:	687b      	ldr	r3, [r7, #4]
 c005b76:	681b      	ldr	r3, [r3, #0]
 c005b78:	685b      	ldr	r3, [r3, #4]
 c005b7a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c005b7e:	687b      	ldr	r3, [r7, #4]
 c005b80:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005b82:	687b      	ldr	r3, [r7, #4]
 c005b84:	681b      	ldr	r3, [r3, #0]
 c005b86:	430a      	orrs	r2, r1
 c005b88:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c005b8a:	687b      	ldr	r3, [r7, #4]
 c005b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005b8e:	f003 0308 	and.w	r3, r3, #8
 c005b92:	2b00      	cmp	r3, #0
 c005b94:	d00a      	beq.n	c005bac <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c005b96:	687b      	ldr	r3, [r7, #4]
 c005b98:	681b      	ldr	r3, [r3, #0]
 c005b9a:	685b      	ldr	r3, [r3, #4]
 c005b9c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c005ba0:	687b      	ldr	r3, [r7, #4]
 c005ba2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c005ba4:	687b      	ldr	r3, [r7, #4]
 c005ba6:	681b      	ldr	r3, [r3, #0]
 c005ba8:	430a      	orrs	r2, r1
 c005baa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c005bac:	687b      	ldr	r3, [r7, #4]
 c005bae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005bb0:	f003 0310 	and.w	r3, r3, #16
 c005bb4:	2b00      	cmp	r3, #0
 c005bb6:	d00a      	beq.n	c005bce <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c005bb8:	687b      	ldr	r3, [r7, #4]
 c005bba:	681b      	ldr	r3, [r3, #0]
 c005bbc:	689b      	ldr	r3, [r3, #8]
 c005bbe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c005bc2:	687b      	ldr	r3, [r7, #4]
 c005bc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c005bc6:	687b      	ldr	r3, [r7, #4]
 c005bc8:	681b      	ldr	r3, [r3, #0]
 c005bca:	430a      	orrs	r2, r1
 c005bcc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c005bce:	687b      	ldr	r3, [r7, #4]
 c005bd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005bd2:	f003 0320 	and.w	r3, r3, #32
 c005bd6:	2b00      	cmp	r3, #0
 c005bd8:	d00a      	beq.n	c005bf0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c005bda:	687b      	ldr	r3, [r7, #4]
 c005bdc:	681b      	ldr	r3, [r3, #0]
 c005bde:	689b      	ldr	r3, [r3, #8]
 c005be0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c005be4:	687b      	ldr	r3, [r7, #4]
 c005be6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c005be8:	687b      	ldr	r3, [r7, #4]
 c005bea:	681b      	ldr	r3, [r3, #0]
 c005bec:	430a      	orrs	r2, r1
 c005bee:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c005bf0:	687b      	ldr	r3, [r7, #4]
 c005bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c005bf8:	2b00      	cmp	r3, #0
 c005bfa:	d01a      	beq.n	c005c32 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c005bfc:	687b      	ldr	r3, [r7, #4]
 c005bfe:	681b      	ldr	r3, [r3, #0]
 c005c00:	685b      	ldr	r3, [r3, #4]
 c005c02:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c005c06:	687b      	ldr	r3, [r7, #4]
 c005c08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c005c0a:	687b      	ldr	r3, [r7, #4]
 c005c0c:	681b      	ldr	r3, [r3, #0]
 c005c0e:	430a      	orrs	r2, r1
 c005c10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c005c12:	687b      	ldr	r3, [r7, #4]
 c005c14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c005c16:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c005c1a:	d10a      	bne.n	c005c32 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c005c1c:	687b      	ldr	r3, [r7, #4]
 c005c1e:	681b      	ldr	r3, [r3, #0]
 c005c20:	685b      	ldr	r3, [r3, #4]
 c005c22:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c005c26:	687b      	ldr	r3, [r7, #4]
 c005c28:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c005c2a:	687b      	ldr	r3, [r7, #4]
 c005c2c:	681b      	ldr	r3, [r3, #0]
 c005c2e:	430a      	orrs	r2, r1
 c005c30:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c005c32:	687b      	ldr	r3, [r7, #4]
 c005c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005c36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c005c3a:	2b00      	cmp	r3, #0
 c005c3c:	d00a      	beq.n	c005c54 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c005c3e:	687b      	ldr	r3, [r7, #4]
 c005c40:	681b      	ldr	r3, [r3, #0]
 c005c42:	685b      	ldr	r3, [r3, #4]
 c005c44:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c005c48:	687b      	ldr	r3, [r7, #4]
 c005c4a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c005c4c:	687b      	ldr	r3, [r7, #4]
 c005c4e:	681b      	ldr	r3, [r3, #0]
 c005c50:	430a      	orrs	r2, r1
 c005c52:	605a      	str	r2, [r3, #4]
  }
}
 c005c54:	bf00      	nop
 c005c56:	370c      	adds	r7, #12
 c005c58:	46bd      	mov	sp, r7
 c005c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005c5e:	4770      	bx	lr

0c005c60 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c005c60:	b580      	push	{r7, lr}
 c005c62:	b098      	sub	sp, #96	; 0x60
 c005c64:	af02      	add	r7, sp, #8
 c005c66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c005c68:	687b      	ldr	r3, [r7, #4]
 c005c6a:	2200      	movs	r2, #0
 c005c6c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c005c70:	f7fc f8f6 	bl	c001e60 <HAL_GetTick>
 c005c74:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c005c76:	687b      	ldr	r3, [r7, #4]
 c005c78:	681b      	ldr	r3, [r3, #0]
 c005c7a:	681b      	ldr	r3, [r3, #0]
 c005c7c:	f003 0308 	and.w	r3, r3, #8
 c005c80:	2b08      	cmp	r3, #8
 c005c82:	d12f      	bne.n	c005ce4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005c84:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c005c88:	9300      	str	r3, [sp, #0]
 c005c8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c005c8c:	2200      	movs	r2, #0
 c005c8e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c005c92:	6878      	ldr	r0, [r7, #4]
 c005c94:	f000 f88e 	bl	c005db4 <UART_WaitOnFlagUntilTimeout>
 c005c98:	4603      	mov	r3, r0
 c005c9a:	2b00      	cmp	r3, #0
 c005c9c:	d022      	beq.n	c005ce4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c005c9e:	687b      	ldr	r3, [r7, #4]
 c005ca0:	681b      	ldr	r3, [r3, #0]
 c005ca2:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c005ca6:	e853 3f00 	ldrex	r3, [r3]
 c005caa:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c005cac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005cae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c005cb2:	653b      	str	r3, [r7, #80]	; 0x50
 c005cb4:	687b      	ldr	r3, [r7, #4]
 c005cb6:	681b      	ldr	r3, [r3, #0]
 c005cb8:	461a      	mov	r2, r3
 c005cba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c005cbc:	647b      	str	r3, [r7, #68]	; 0x44
 c005cbe:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005cc0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c005cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c005cc4:	e841 2300 	strex	r3, r2, [r1]
 c005cc8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c005cca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c005ccc:	2b00      	cmp	r3, #0
 c005cce:	d1e6      	bne.n	c005c9e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c005cd0:	687b      	ldr	r3, [r7, #4]
 c005cd2:	2220      	movs	r2, #32
 c005cd4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c005cd8:	687b      	ldr	r3, [r7, #4]
 c005cda:	2200      	movs	r2, #0
 c005cdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c005ce0:	2303      	movs	r3, #3
 c005ce2:	e063      	b.n	c005dac <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c005ce4:	687b      	ldr	r3, [r7, #4]
 c005ce6:	681b      	ldr	r3, [r3, #0]
 c005ce8:	681b      	ldr	r3, [r3, #0]
 c005cea:	f003 0304 	and.w	r3, r3, #4
 c005cee:	2b04      	cmp	r3, #4
 c005cf0:	d149      	bne.n	c005d86 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005cf2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c005cf6:	9300      	str	r3, [sp, #0]
 c005cf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c005cfa:	2200      	movs	r2, #0
 c005cfc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c005d00:	6878      	ldr	r0, [r7, #4]
 c005d02:	f000 f857 	bl	c005db4 <UART_WaitOnFlagUntilTimeout>
 c005d06:	4603      	mov	r3, r0
 c005d08:	2b00      	cmp	r3, #0
 c005d0a:	d03c      	beq.n	c005d86 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c005d0c:	687b      	ldr	r3, [r7, #4]
 c005d0e:	681b      	ldr	r3, [r3, #0]
 c005d10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005d14:	e853 3f00 	ldrex	r3, [r3]
 c005d18:	623b      	str	r3, [r7, #32]
   return(result);
 c005d1a:	6a3b      	ldr	r3, [r7, #32]
 c005d1c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c005d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 c005d22:	687b      	ldr	r3, [r7, #4]
 c005d24:	681b      	ldr	r3, [r3, #0]
 c005d26:	461a      	mov	r2, r3
 c005d28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c005d2a:	633b      	str	r3, [r7, #48]	; 0x30
 c005d2c:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005d2e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c005d30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c005d32:	e841 2300 	strex	r3, r2, [r1]
 c005d36:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c005d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c005d3a:	2b00      	cmp	r3, #0
 c005d3c:	d1e6      	bne.n	c005d0c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c005d3e:	687b      	ldr	r3, [r7, #4]
 c005d40:	681b      	ldr	r3, [r3, #0]
 c005d42:	3308      	adds	r3, #8
 c005d44:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005d46:	693b      	ldr	r3, [r7, #16]
 c005d48:	e853 3f00 	ldrex	r3, [r3]
 c005d4c:	60fb      	str	r3, [r7, #12]
   return(result);
 c005d4e:	68fb      	ldr	r3, [r7, #12]
 c005d50:	f023 0301 	bic.w	r3, r3, #1
 c005d54:	64bb      	str	r3, [r7, #72]	; 0x48
 c005d56:	687b      	ldr	r3, [r7, #4]
 c005d58:	681b      	ldr	r3, [r3, #0]
 c005d5a:	3308      	adds	r3, #8
 c005d5c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c005d5e:	61fa      	str	r2, [r7, #28]
 c005d60:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005d62:	69b9      	ldr	r1, [r7, #24]
 c005d64:	69fa      	ldr	r2, [r7, #28]
 c005d66:	e841 2300 	strex	r3, r2, [r1]
 c005d6a:	617b      	str	r3, [r7, #20]
   return(result);
 c005d6c:	697b      	ldr	r3, [r7, #20]
 c005d6e:	2b00      	cmp	r3, #0
 c005d70:	d1e5      	bne.n	c005d3e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c005d72:	687b      	ldr	r3, [r7, #4]
 c005d74:	2220      	movs	r2, #32
 c005d76:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c005d7a:	687b      	ldr	r3, [r7, #4]
 c005d7c:	2200      	movs	r2, #0
 c005d7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c005d82:	2303      	movs	r3, #3
 c005d84:	e012      	b.n	c005dac <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c005d86:	687b      	ldr	r3, [r7, #4]
 c005d88:	2220      	movs	r2, #32
 c005d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c005d8e:	687b      	ldr	r3, [r7, #4]
 c005d90:	2220      	movs	r2, #32
 c005d92:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c005d96:	687b      	ldr	r3, [r7, #4]
 c005d98:	2200      	movs	r2, #0
 c005d9a:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c005d9c:	687b      	ldr	r3, [r7, #4]
 c005d9e:	2200      	movs	r2, #0
 c005da0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c005da2:	687b      	ldr	r3, [r7, #4]
 c005da4:	2200      	movs	r2, #0
 c005da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c005daa:	2300      	movs	r3, #0
}
 c005dac:	4618      	mov	r0, r3
 c005dae:	3758      	adds	r7, #88	; 0x58
 c005db0:	46bd      	mov	sp, r7
 c005db2:	bd80      	pop	{r7, pc}

0c005db4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c005db4:	b580      	push	{r7, lr}
 c005db6:	b084      	sub	sp, #16
 c005db8:	af00      	add	r7, sp, #0
 c005dba:	60f8      	str	r0, [r7, #12]
 c005dbc:	60b9      	str	r1, [r7, #8]
 c005dbe:	603b      	str	r3, [r7, #0]
 c005dc0:	4613      	mov	r3, r2
 c005dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c005dc4:	e049      	b.n	c005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c005dc6:	69bb      	ldr	r3, [r7, #24]
 c005dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005dcc:	d045      	beq.n	c005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c005dce:	f7fc f847 	bl	c001e60 <HAL_GetTick>
 c005dd2:	4602      	mov	r2, r0
 c005dd4:	683b      	ldr	r3, [r7, #0]
 c005dd6:	1ad3      	subs	r3, r2, r3
 c005dd8:	69ba      	ldr	r2, [r7, #24]
 c005dda:	429a      	cmp	r2, r3
 c005ddc:	d302      	bcc.n	c005de4 <UART_WaitOnFlagUntilTimeout+0x30>
 c005dde:	69bb      	ldr	r3, [r7, #24]
 c005de0:	2b00      	cmp	r3, #0
 c005de2:	d101      	bne.n	c005de8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c005de4:	2303      	movs	r3, #3
 c005de6:	e048      	b.n	c005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c005de8:	68fb      	ldr	r3, [r7, #12]
 c005dea:	681b      	ldr	r3, [r3, #0]
 c005dec:	681b      	ldr	r3, [r3, #0]
 c005dee:	f003 0304 	and.w	r3, r3, #4
 c005df2:	2b00      	cmp	r3, #0
 c005df4:	d031      	beq.n	c005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c005df6:	68fb      	ldr	r3, [r7, #12]
 c005df8:	681b      	ldr	r3, [r3, #0]
 c005dfa:	69db      	ldr	r3, [r3, #28]
 c005dfc:	f003 0308 	and.w	r3, r3, #8
 c005e00:	2b08      	cmp	r3, #8
 c005e02:	d110      	bne.n	c005e26 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c005e04:	68fb      	ldr	r3, [r7, #12]
 c005e06:	681b      	ldr	r3, [r3, #0]
 c005e08:	2208      	movs	r2, #8
 c005e0a:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c005e0c:	68f8      	ldr	r0, [r7, #12]
 c005e0e:	f000 f838 	bl	c005e82 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c005e12:	68fb      	ldr	r3, [r7, #12]
 c005e14:	2208      	movs	r2, #8
 c005e16:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c005e1a:	68fb      	ldr	r3, [r7, #12]
 c005e1c:	2200      	movs	r2, #0
 c005e1e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c005e22:	2301      	movs	r3, #1
 c005e24:	e029      	b.n	c005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c005e26:	68fb      	ldr	r3, [r7, #12]
 c005e28:	681b      	ldr	r3, [r3, #0]
 c005e2a:	69db      	ldr	r3, [r3, #28]
 c005e2c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c005e30:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c005e34:	d111      	bne.n	c005e5a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c005e36:	68fb      	ldr	r3, [r7, #12]
 c005e38:	681b      	ldr	r3, [r3, #0]
 c005e3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c005e3e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c005e40:	68f8      	ldr	r0, [r7, #12]
 c005e42:	f000 f81e 	bl	c005e82 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c005e46:	68fb      	ldr	r3, [r7, #12]
 c005e48:	2220      	movs	r2, #32
 c005e4a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c005e4e:	68fb      	ldr	r3, [r7, #12]
 c005e50:	2200      	movs	r2, #0
 c005e52:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c005e56:	2303      	movs	r3, #3
 c005e58:	e00f      	b.n	c005e7a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c005e5a:	68fb      	ldr	r3, [r7, #12]
 c005e5c:	681b      	ldr	r3, [r3, #0]
 c005e5e:	69da      	ldr	r2, [r3, #28]
 c005e60:	68bb      	ldr	r3, [r7, #8]
 c005e62:	4013      	ands	r3, r2
 c005e64:	68ba      	ldr	r2, [r7, #8]
 c005e66:	429a      	cmp	r2, r3
 c005e68:	bf0c      	ite	eq
 c005e6a:	2301      	moveq	r3, #1
 c005e6c:	2300      	movne	r3, #0
 c005e6e:	b2db      	uxtb	r3, r3
 c005e70:	461a      	mov	r2, r3
 c005e72:	79fb      	ldrb	r3, [r7, #7]
 c005e74:	429a      	cmp	r2, r3
 c005e76:	d0a6      	beq.n	c005dc6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c005e78:	2300      	movs	r3, #0
}
 c005e7a:	4618      	mov	r0, r3
 c005e7c:	3710      	adds	r7, #16
 c005e7e:	46bd      	mov	sp, r7
 c005e80:	bd80      	pop	{r7, pc}

0c005e82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c005e82:	b480      	push	{r7}
 c005e84:	b095      	sub	sp, #84	; 0x54
 c005e86:	af00      	add	r7, sp, #0
 c005e88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c005e8a:	687b      	ldr	r3, [r7, #4]
 c005e8c:	681b      	ldr	r3, [r3, #0]
 c005e8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005e90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005e92:	e853 3f00 	ldrex	r3, [r3]
 c005e96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c005e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c005e9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c005e9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 c005ea0:	687b      	ldr	r3, [r7, #4]
 c005ea2:	681b      	ldr	r3, [r3, #0]
 c005ea4:	461a      	mov	r2, r3
 c005ea6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c005ea8:	643b      	str	r3, [r7, #64]	; 0x40
 c005eaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005eac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c005eae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c005eb0:	e841 2300 	strex	r3, r2, [r1]
 c005eb4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c005eb6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c005eb8:	2b00      	cmp	r3, #0
 c005eba:	d1e6      	bne.n	c005e8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c005ebc:	687b      	ldr	r3, [r7, #4]
 c005ebe:	681b      	ldr	r3, [r3, #0]
 c005ec0:	3308      	adds	r3, #8
 c005ec2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005ec4:	6a3b      	ldr	r3, [r7, #32]
 c005ec6:	e853 3f00 	ldrex	r3, [r3]
 c005eca:	61fb      	str	r3, [r7, #28]
   return(result);
 c005ecc:	69fb      	ldr	r3, [r7, #28]
 c005ece:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c005ed2:	f023 0301 	bic.w	r3, r3, #1
 c005ed6:	64bb      	str	r3, [r7, #72]	; 0x48
 c005ed8:	687b      	ldr	r3, [r7, #4]
 c005eda:	681b      	ldr	r3, [r3, #0]
 c005edc:	3308      	adds	r3, #8
 c005ede:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c005ee0:	62fa      	str	r2, [r7, #44]	; 0x2c
 c005ee2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005ee4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c005ee6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c005ee8:	e841 2300 	strex	r3, r2, [r1]
 c005eec:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c005eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005ef0:	2b00      	cmp	r3, #0
 c005ef2:	d1e3      	bne.n	c005ebc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c005ef4:	687b      	ldr	r3, [r7, #4]
 c005ef6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c005ef8:	2b01      	cmp	r3, #1
 c005efa:	d118      	bne.n	c005f2e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c005efc:	687b      	ldr	r3, [r7, #4]
 c005efe:	681b      	ldr	r3, [r3, #0]
 c005f00:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005f02:	68fb      	ldr	r3, [r7, #12]
 c005f04:	e853 3f00 	ldrex	r3, [r3]
 c005f08:	60bb      	str	r3, [r7, #8]
   return(result);
 c005f0a:	68bb      	ldr	r3, [r7, #8]
 c005f0c:	f023 0310 	bic.w	r3, r3, #16
 c005f10:	647b      	str	r3, [r7, #68]	; 0x44
 c005f12:	687b      	ldr	r3, [r7, #4]
 c005f14:	681b      	ldr	r3, [r3, #0]
 c005f16:	461a      	mov	r2, r3
 c005f18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c005f1a:	61bb      	str	r3, [r7, #24]
 c005f1c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005f1e:	6979      	ldr	r1, [r7, #20]
 c005f20:	69ba      	ldr	r2, [r7, #24]
 c005f22:	e841 2300 	strex	r3, r2, [r1]
 c005f26:	613b      	str	r3, [r7, #16]
   return(result);
 c005f28:	693b      	ldr	r3, [r7, #16]
 c005f2a:	2b00      	cmp	r3, #0
 c005f2c:	d1e6      	bne.n	c005efc <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c005f2e:	687b      	ldr	r3, [r7, #4]
 c005f30:	2220      	movs	r2, #32
 c005f32:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c005f36:	687b      	ldr	r3, [r7, #4]
 c005f38:	2200      	movs	r2, #0
 c005f3a:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c005f3c:	687b      	ldr	r3, [r7, #4]
 c005f3e:	2200      	movs	r2, #0
 c005f40:	675a      	str	r2, [r3, #116]	; 0x74
}
 c005f42:	bf00      	nop
 c005f44:	3754      	adds	r7, #84	; 0x54
 c005f46:	46bd      	mov	sp, r7
 c005f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005f4c:	4770      	bx	lr

0c005f4e <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c005f4e:	b480      	push	{r7}
 c005f50:	b085      	sub	sp, #20
 c005f52:	af00      	add	r7, sp, #0
 c005f54:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c005f56:	687b      	ldr	r3, [r7, #4]
 c005f58:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c005f5c:	2b01      	cmp	r3, #1
 c005f5e:	d101      	bne.n	c005f64 <HAL_UARTEx_DisableFifoMode+0x16>
 c005f60:	2302      	movs	r3, #2
 c005f62:	e027      	b.n	c005fb4 <HAL_UARTEx_DisableFifoMode+0x66>
 c005f64:	687b      	ldr	r3, [r7, #4]
 c005f66:	2201      	movs	r2, #1
 c005f68:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c005f6c:	687b      	ldr	r3, [r7, #4]
 c005f6e:	2224      	movs	r2, #36	; 0x24
 c005f70:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005f74:	687b      	ldr	r3, [r7, #4]
 c005f76:	681b      	ldr	r3, [r3, #0]
 c005f78:	681b      	ldr	r3, [r3, #0]
 c005f7a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005f7c:	687b      	ldr	r3, [r7, #4]
 c005f7e:	681b      	ldr	r3, [r3, #0]
 c005f80:	681a      	ldr	r2, [r3, #0]
 c005f82:	687b      	ldr	r3, [r7, #4]
 c005f84:	681b      	ldr	r3, [r3, #0]
 c005f86:	f022 0201 	bic.w	r2, r2, #1
 c005f8a:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c005f8c:	68fb      	ldr	r3, [r7, #12]
 c005f8e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c005f92:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c005f94:	687b      	ldr	r3, [r7, #4]
 c005f96:	2200      	movs	r2, #0
 c005f98:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c005f9a:	687b      	ldr	r3, [r7, #4]
 c005f9c:	681b      	ldr	r3, [r3, #0]
 c005f9e:	68fa      	ldr	r2, [r7, #12]
 c005fa0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005fa2:	687b      	ldr	r3, [r7, #4]
 c005fa4:	2220      	movs	r2, #32
 c005fa6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c005faa:	687b      	ldr	r3, [r7, #4]
 c005fac:	2200      	movs	r2, #0
 c005fae:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c005fb2:	2300      	movs	r3, #0
}
 c005fb4:	4618      	mov	r0, r3
 c005fb6:	3714      	adds	r7, #20
 c005fb8:	46bd      	mov	sp, r7
 c005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005fbe:	4770      	bx	lr

0c005fc0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c005fc0:	b580      	push	{r7, lr}
 c005fc2:	b084      	sub	sp, #16
 c005fc4:	af00      	add	r7, sp, #0
 c005fc6:	6078      	str	r0, [r7, #4]
 c005fc8:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c005fca:	687b      	ldr	r3, [r7, #4]
 c005fcc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c005fd0:	2b01      	cmp	r3, #1
 c005fd2:	d101      	bne.n	c005fd8 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c005fd4:	2302      	movs	r3, #2
 c005fd6:	e02d      	b.n	c006034 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c005fd8:	687b      	ldr	r3, [r7, #4]
 c005fda:	2201      	movs	r2, #1
 c005fdc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c005fe0:	687b      	ldr	r3, [r7, #4]
 c005fe2:	2224      	movs	r2, #36	; 0x24
 c005fe4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005fe8:	687b      	ldr	r3, [r7, #4]
 c005fea:	681b      	ldr	r3, [r3, #0]
 c005fec:	681b      	ldr	r3, [r3, #0]
 c005fee:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005ff0:	687b      	ldr	r3, [r7, #4]
 c005ff2:	681b      	ldr	r3, [r3, #0]
 c005ff4:	681a      	ldr	r2, [r3, #0]
 c005ff6:	687b      	ldr	r3, [r7, #4]
 c005ff8:	681b      	ldr	r3, [r3, #0]
 c005ffa:	f022 0201 	bic.w	r2, r2, #1
 c005ffe:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c006000:	687b      	ldr	r3, [r7, #4]
 c006002:	681b      	ldr	r3, [r3, #0]
 c006004:	689b      	ldr	r3, [r3, #8]
 c006006:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c00600a:	687b      	ldr	r3, [r7, #4]
 c00600c:	681b      	ldr	r3, [r3, #0]
 c00600e:	683a      	ldr	r2, [r7, #0]
 c006010:	430a      	orrs	r2, r1
 c006012:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c006014:	6878      	ldr	r0, [r7, #4]
 c006016:	f000 f84f 	bl	c0060b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00601a:	687b      	ldr	r3, [r7, #4]
 c00601c:	681b      	ldr	r3, [r3, #0]
 c00601e:	68fa      	ldr	r2, [r7, #12]
 c006020:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c006022:	687b      	ldr	r3, [r7, #4]
 c006024:	2220      	movs	r2, #32
 c006026:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00602a:	687b      	ldr	r3, [r7, #4]
 c00602c:	2200      	movs	r2, #0
 c00602e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c006032:	2300      	movs	r3, #0
}
 c006034:	4618      	mov	r0, r3
 c006036:	3710      	adds	r7, #16
 c006038:	46bd      	mov	sp, r7
 c00603a:	bd80      	pop	{r7, pc}

0c00603c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c00603c:	b580      	push	{r7, lr}
 c00603e:	b084      	sub	sp, #16
 c006040:	af00      	add	r7, sp, #0
 c006042:	6078      	str	r0, [r7, #4]
 c006044:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c006046:	687b      	ldr	r3, [r7, #4]
 c006048:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c00604c:	2b01      	cmp	r3, #1
 c00604e:	d101      	bne.n	c006054 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c006050:	2302      	movs	r3, #2
 c006052:	e02d      	b.n	c0060b0 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c006054:	687b      	ldr	r3, [r7, #4]
 c006056:	2201      	movs	r2, #1
 c006058:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c00605c:	687b      	ldr	r3, [r7, #4]
 c00605e:	2224      	movs	r2, #36	; 0x24
 c006060:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c006064:	687b      	ldr	r3, [r7, #4]
 c006066:	681b      	ldr	r3, [r3, #0]
 c006068:	681b      	ldr	r3, [r3, #0]
 c00606a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c00606c:	687b      	ldr	r3, [r7, #4]
 c00606e:	681b      	ldr	r3, [r3, #0]
 c006070:	681a      	ldr	r2, [r3, #0]
 c006072:	687b      	ldr	r3, [r7, #4]
 c006074:	681b      	ldr	r3, [r3, #0]
 c006076:	f022 0201 	bic.w	r2, r2, #1
 c00607a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c00607c:	687b      	ldr	r3, [r7, #4]
 c00607e:	681b      	ldr	r3, [r3, #0]
 c006080:	689b      	ldr	r3, [r3, #8]
 c006082:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c006086:	687b      	ldr	r3, [r7, #4]
 c006088:	681b      	ldr	r3, [r3, #0]
 c00608a:	683a      	ldr	r2, [r7, #0]
 c00608c:	430a      	orrs	r2, r1
 c00608e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c006090:	6878      	ldr	r0, [r7, #4]
 c006092:	f000 f811 	bl	c0060b8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c006096:	687b      	ldr	r3, [r7, #4]
 c006098:	681b      	ldr	r3, [r3, #0]
 c00609a:	68fa      	ldr	r2, [r7, #12]
 c00609c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c00609e:	687b      	ldr	r3, [r7, #4]
 c0060a0:	2220      	movs	r2, #32
 c0060a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0060a6:	687b      	ldr	r3, [r7, #4]
 c0060a8:	2200      	movs	r2, #0
 c0060aa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c0060ae:	2300      	movs	r3, #0
}
 c0060b0:	4618      	mov	r0, r3
 c0060b2:	3710      	adds	r7, #16
 c0060b4:	46bd      	mov	sp, r7
 c0060b6:	bd80      	pop	{r7, pc}

0c0060b8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c0060b8:	b480      	push	{r7}
 c0060ba:	b085      	sub	sp, #20
 c0060bc:	af00      	add	r7, sp, #0
 c0060be:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c0060c0:	687b      	ldr	r3, [r7, #4]
 c0060c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0060c4:	2b00      	cmp	r3, #0
 c0060c6:	d108      	bne.n	c0060da <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c0060c8:	687b      	ldr	r3, [r7, #4]
 c0060ca:	2201      	movs	r2, #1
 c0060cc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c0060d0:	687b      	ldr	r3, [r7, #4]
 c0060d2:	2201      	movs	r2, #1
 c0060d4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c0060d8:	e031      	b.n	c00613e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c0060da:	2308      	movs	r3, #8
 c0060dc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c0060de:	2308      	movs	r3, #8
 c0060e0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c0060e2:	687b      	ldr	r3, [r7, #4]
 c0060e4:	681b      	ldr	r3, [r3, #0]
 c0060e6:	689b      	ldr	r3, [r3, #8]
 c0060e8:	0e5b      	lsrs	r3, r3, #25
 c0060ea:	b2db      	uxtb	r3, r3
 c0060ec:	f003 0307 	and.w	r3, r3, #7
 c0060f0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c0060f2:	687b      	ldr	r3, [r7, #4]
 c0060f4:	681b      	ldr	r3, [r3, #0]
 c0060f6:	689b      	ldr	r3, [r3, #8]
 c0060f8:	0f5b      	lsrs	r3, r3, #29
 c0060fa:	b2db      	uxtb	r3, r3
 c0060fc:	f003 0307 	and.w	r3, r3, #7
 c006100:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006102:	7bbb      	ldrb	r3, [r7, #14]
 c006104:	7b3a      	ldrb	r2, [r7, #12]
 c006106:	4911      	ldr	r1, [pc, #68]	; (c00614c <UARTEx_SetNbDataToProcess+0x94>)
 c006108:	5c8a      	ldrb	r2, [r1, r2]
 c00610a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c00610e:	7b3a      	ldrb	r2, [r7, #12]
 c006110:	490f      	ldr	r1, [pc, #60]	; (c006150 <UARTEx_SetNbDataToProcess+0x98>)
 c006112:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c006114:	fb93 f3f2 	sdiv	r3, r3, r2
 c006118:	b29a      	uxth	r2, r3
 c00611a:	687b      	ldr	r3, [r7, #4]
 c00611c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006120:	7bfb      	ldrb	r3, [r7, #15]
 c006122:	7b7a      	ldrb	r2, [r7, #13]
 c006124:	4909      	ldr	r1, [pc, #36]	; (c00614c <UARTEx_SetNbDataToProcess+0x94>)
 c006126:	5c8a      	ldrb	r2, [r1, r2]
 c006128:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c00612c:	7b7a      	ldrb	r2, [r7, #13]
 c00612e:	4908      	ldr	r1, [pc, #32]	; (c006150 <UARTEx_SetNbDataToProcess+0x98>)
 c006130:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c006132:	fb93 f3f2 	sdiv	r3, r3, r2
 c006136:	b29a      	uxth	r2, r3
 c006138:	687b      	ldr	r3, [r7, #4]
 c00613a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c00613e:	bf00      	nop
 c006140:	3714      	adds	r7, #20
 c006142:	46bd      	mov	sp, r7
 c006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 c006148:	4770      	bx	lr
 c00614a:	bf00      	nop
 c00614c:	0c0073a8 	.word	0x0c0073a8
 c006150:	0c0073b0 	.word	0x0c0073b0

0c006154 <__errno>:
 c006154:	4b01      	ldr	r3, [pc, #4]	; (c00615c <__errno+0x8>)
 c006156:	6818      	ldr	r0, [r3, #0]
 c006158:	4770      	bx	lr
 c00615a:	bf00      	nop
 c00615c:	3000000c 	.word	0x3000000c

0c006160 <__libc_init_array>:
 c006160:	b570      	push	{r4, r5, r6, lr}
 c006162:	4d0d      	ldr	r5, [pc, #52]	; (c006198 <__libc_init_array+0x38>)
 c006164:	2600      	movs	r6, #0
 c006166:	4c0d      	ldr	r4, [pc, #52]	; (c00619c <__libc_init_array+0x3c>)
 c006168:	1b64      	subs	r4, r4, r5
 c00616a:	10a4      	asrs	r4, r4, #2
 c00616c:	42a6      	cmp	r6, r4
 c00616e:	d109      	bne.n	c006184 <__libc_init_array+0x24>
 c006170:	4d0b      	ldr	r5, [pc, #44]	; (c0061a0 <__libc_init_array+0x40>)
 c006172:	2600      	movs	r6, #0
 c006174:	4c0b      	ldr	r4, [pc, #44]	; (c0061a4 <__libc_init_array+0x44>)
 c006176:	f000 ffbb 	bl	c0070f0 <_init>
 c00617a:	1b64      	subs	r4, r4, r5
 c00617c:	10a4      	asrs	r4, r4, #2
 c00617e:	42a6      	cmp	r6, r4
 c006180:	d105      	bne.n	c00618e <__libc_init_array+0x2e>
 c006182:	bd70      	pop	{r4, r5, r6, pc}
 c006184:	f855 3b04 	ldr.w	r3, [r5], #4
 c006188:	3601      	adds	r6, #1
 c00618a:	4798      	blx	r3
 c00618c:	e7ee      	b.n	c00616c <__libc_init_array+0xc>
 c00618e:	f855 3b04 	ldr.w	r3, [r5], #4
 c006192:	3601      	adds	r6, #1
 c006194:	4798      	blx	r3
 c006196:	e7f2      	b.n	c00617e <__libc_init_array+0x1e>
 c006198:	0c007458 	.word	0x0c007458
 c00619c:	0c007458 	.word	0x0c007458
 c0061a0:	0c007458 	.word	0x0c007458
 c0061a4:	0c00745c 	.word	0x0c00745c

0c0061a8 <memset>:
 c0061a8:	4402      	add	r2, r0
 c0061aa:	4603      	mov	r3, r0
 c0061ac:	4293      	cmp	r3, r2
 c0061ae:	d100      	bne.n	c0061b2 <memset+0xa>
 c0061b0:	4770      	bx	lr
 c0061b2:	f803 1b01 	strb.w	r1, [r3], #1
 c0061b6:	e7f9      	b.n	c0061ac <memset+0x4>

0c0061b8 <iprintf>:
 c0061b8:	b40f      	push	{r0, r1, r2, r3}
 c0061ba:	4b0a      	ldr	r3, [pc, #40]	; (c0061e4 <iprintf+0x2c>)
 c0061bc:	b513      	push	{r0, r1, r4, lr}
 c0061be:	681c      	ldr	r4, [r3, #0]
 c0061c0:	b124      	cbz	r4, c0061cc <iprintf+0x14>
 c0061c2:	69a3      	ldr	r3, [r4, #24]
 c0061c4:	b913      	cbnz	r3, c0061cc <iprintf+0x14>
 c0061c6:	4620      	mov	r0, r4
 c0061c8:	f000 f866 	bl	c006298 <__sinit>
 c0061cc:	ab05      	add	r3, sp, #20
 c0061ce:	9a04      	ldr	r2, [sp, #16]
 c0061d0:	68a1      	ldr	r1, [r4, #8]
 c0061d2:	4620      	mov	r0, r4
 c0061d4:	9301      	str	r3, [sp, #4]
 c0061d6:	f000 f9bd 	bl	c006554 <_vfiprintf_r>
 c0061da:	b002      	add	sp, #8
 c0061dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0061e0:	b004      	add	sp, #16
 c0061e2:	4770      	bx	lr
 c0061e4:	3000000c 	.word	0x3000000c

0c0061e8 <std>:
 c0061e8:	2300      	movs	r3, #0
 c0061ea:	b510      	push	{r4, lr}
 c0061ec:	4604      	mov	r4, r0
 c0061ee:	6083      	str	r3, [r0, #8]
 c0061f0:	8181      	strh	r1, [r0, #12]
 c0061f2:	4619      	mov	r1, r3
 c0061f4:	6643      	str	r3, [r0, #100]	; 0x64
 c0061f6:	81c2      	strh	r2, [r0, #14]
 c0061f8:	2208      	movs	r2, #8
 c0061fa:	6183      	str	r3, [r0, #24]
 c0061fc:	e9c0 3300 	strd	r3, r3, [r0]
 c006200:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c006204:	305c      	adds	r0, #92	; 0x5c
 c006206:	f7ff ffcf 	bl	c0061a8 <memset>
 c00620a:	4b05      	ldr	r3, [pc, #20]	; (c006220 <std+0x38>)
 c00620c:	6224      	str	r4, [r4, #32]
 c00620e:	6263      	str	r3, [r4, #36]	; 0x24
 c006210:	4b04      	ldr	r3, [pc, #16]	; (c006224 <std+0x3c>)
 c006212:	62a3      	str	r3, [r4, #40]	; 0x28
 c006214:	4b04      	ldr	r3, [pc, #16]	; (c006228 <std+0x40>)
 c006216:	62e3      	str	r3, [r4, #44]	; 0x2c
 c006218:	4b04      	ldr	r3, [pc, #16]	; (c00622c <std+0x44>)
 c00621a:	6323      	str	r3, [r4, #48]	; 0x30
 c00621c:	bd10      	pop	{r4, pc}
 c00621e:	bf00      	nop
 c006220:	0c006b01 	.word	0x0c006b01
 c006224:	0c006b23 	.word	0x0c006b23
 c006228:	0c006b5b 	.word	0x0c006b5b
 c00622c:	0c006b7f 	.word	0x0c006b7f

0c006230 <_cleanup_r>:
 c006230:	4901      	ldr	r1, [pc, #4]	; (c006238 <_cleanup_r+0x8>)
 c006232:	f000 b8af 	b.w	c006394 <_fwalk_reent>
 c006236:	bf00      	nop
 c006238:	0c006e55 	.word	0x0c006e55

0c00623c <__sfmoreglue>:
 c00623c:	b570      	push	{r4, r5, r6, lr}
 c00623e:	2268      	movs	r2, #104	; 0x68
 c006240:	1e4d      	subs	r5, r1, #1
 c006242:	460e      	mov	r6, r1
 c006244:	4355      	muls	r5, r2
 c006246:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c00624a:	f000 f8e5 	bl	c006418 <_malloc_r>
 c00624e:	4604      	mov	r4, r0
 c006250:	b140      	cbz	r0, c006264 <__sfmoreglue+0x28>
 c006252:	2100      	movs	r1, #0
 c006254:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c006258:	e9c0 1600 	strd	r1, r6, [r0]
 c00625c:	300c      	adds	r0, #12
 c00625e:	60a0      	str	r0, [r4, #8]
 c006260:	f7ff ffa2 	bl	c0061a8 <memset>
 c006264:	4620      	mov	r0, r4
 c006266:	bd70      	pop	{r4, r5, r6, pc}

0c006268 <__sfp_lock_acquire>:
 c006268:	4801      	ldr	r0, [pc, #4]	; (c006270 <__sfp_lock_acquire+0x8>)
 c00626a:	f000 b8b3 	b.w	c0063d4 <__retarget_lock_acquire_recursive>
 c00626e:	bf00      	nop
 c006270:	30000b41 	.word	0x30000b41

0c006274 <__sfp_lock_release>:
 c006274:	4801      	ldr	r0, [pc, #4]	; (c00627c <__sfp_lock_release+0x8>)
 c006276:	f000 b8ae 	b.w	c0063d6 <__retarget_lock_release_recursive>
 c00627a:	bf00      	nop
 c00627c:	30000b41 	.word	0x30000b41

0c006280 <__sinit_lock_acquire>:
 c006280:	4801      	ldr	r0, [pc, #4]	; (c006288 <__sinit_lock_acquire+0x8>)
 c006282:	f000 b8a7 	b.w	c0063d4 <__retarget_lock_acquire_recursive>
 c006286:	bf00      	nop
 c006288:	30000b42 	.word	0x30000b42

0c00628c <__sinit_lock_release>:
 c00628c:	4801      	ldr	r0, [pc, #4]	; (c006294 <__sinit_lock_release+0x8>)
 c00628e:	f000 b8a2 	b.w	c0063d6 <__retarget_lock_release_recursive>
 c006292:	bf00      	nop
 c006294:	30000b42 	.word	0x30000b42

0c006298 <__sinit>:
 c006298:	b510      	push	{r4, lr}
 c00629a:	4604      	mov	r4, r0
 c00629c:	f7ff fff0 	bl	c006280 <__sinit_lock_acquire>
 c0062a0:	69a3      	ldr	r3, [r4, #24]
 c0062a2:	b11b      	cbz	r3, c0062ac <__sinit+0x14>
 c0062a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c0062a8:	f7ff bff0 	b.w	c00628c <__sinit_lock_release>
 c0062ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c0062b0:	6523      	str	r3, [r4, #80]	; 0x50
 c0062b2:	4620      	mov	r0, r4
 c0062b4:	4b12      	ldr	r3, [pc, #72]	; (c006300 <__sinit+0x68>)
 c0062b6:	4a13      	ldr	r2, [pc, #76]	; (c006304 <__sinit+0x6c>)
 c0062b8:	681b      	ldr	r3, [r3, #0]
 c0062ba:	62a2      	str	r2, [r4, #40]	; 0x28
 c0062bc:	42a3      	cmp	r3, r4
 c0062be:	bf04      	itt	eq
 c0062c0:	2301      	moveq	r3, #1
 c0062c2:	61a3      	streq	r3, [r4, #24]
 c0062c4:	f000 f820 	bl	c006308 <__sfp>
 c0062c8:	6060      	str	r0, [r4, #4]
 c0062ca:	4620      	mov	r0, r4
 c0062cc:	f000 f81c 	bl	c006308 <__sfp>
 c0062d0:	60a0      	str	r0, [r4, #8]
 c0062d2:	4620      	mov	r0, r4
 c0062d4:	f000 f818 	bl	c006308 <__sfp>
 c0062d8:	2200      	movs	r2, #0
 c0062da:	2104      	movs	r1, #4
 c0062dc:	60e0      	str	r0, [r4, #12]
 c0062de:	6860      	ldr	r0, [r4, #4]
 c0062e0:	f7ff ff82 	bl	c0061e8 <std>
 c0062e4:	2201      	movs	r2, #1
 c0062e6:	2109      	movs	r1, #9
 c0062e8:	68a0      	ldr	r0, [r4, #8]
 c0062ea:	f7ff ff7d 	bl	c0061e8 <std>
 c0062ee:	2202      	movs	r2, #2
 c0062f0:	2112      	movs	r1, #18
 c0062f2:	68e0      	ldr	r0, [r4, #12]
 c0062f4:	f7ff ff78 	bl	c0061e8 <std>
 c0062f8:	2301      	movs	r3, #1
 c0062fa:	61a3      	str	r3, [r4, #24]
 c0062fc:	e7d2      	b.n	c0062a4 <__sinit+0xc>
 c0062fe:	bf00      	nop
 c006300:	0c0073b8 	.word	0x0c0073b8
 c006304:	0c006231 	.word	0x0c006231

0c006308 <__sfp>:
 c006308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00630a:	4607      	mov	r7, r0
 c00630c:	f7ff ffac 	bl	c006268 <__sfp_lock_acquire>
 c006310:	4b1e      	ldr	r3, [pc, #120]	; (c00638c <__sfp+0x84>)
 c006312:	681e      	ldr	r6, [r3, #0]
 c006314:	69b3      	ldr	r3, [r6, #24]
 c006316:	b913      	cbnz	r3, c00631e <__sfp+0x16>
 c006318:	4630      	mov	r0, r6
 c00631a:	f7ff ffbd 	bl	c006298 <__sinit>
 c00631e:	3648      	adds	r6, #72	; 0x48
 c006320:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c006324:	3b01      	subs	r3, #1
 c006326:	d503      	bpl.n	c006330 <__sfp+0x28>
 c006328:	6833      	ldr	r3, [r6, #0]
 c00632a:	b30b      	cbz	r3, c006370 <__sfp+0x68>
 c00632c:	6836      	ldr	r6, [r6, #0]
 c00632e:	e7f7      	b.n	c006320 <__sfp+0x18>
 c006330:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c006334:	b9d5      	cbnz	r5, c00636c <__sfp+0x64>
 c006336:	4b16      	ldr	r3, [pc, #88]	; (c006390 <__sfp+0x88>)
 c006338:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c00633c:	6665      	str	r5, [r4, #100]	; 0x64
 c00633e:	60e3      	str	r3, [r4, #12]
 c006340:	f000 f847 	bl	c0063d2 <__retarget_lock_init_recursive>
 c006344:	f7ff ff96 	bl	c006274 <__sfp_lock_release>
 c006348:	2208      	movs	r2, #8
 c00634a:	4629      	mov	r1, r5
 c00634c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c006350:	6025      	str	r5, [r4, #0]
 c006352:	61a5      	str	r5, [r4, #24]
 c006354:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c006358:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c00635c:	f7ff ff24 	bl	c0061a8 <memset>
 c006360:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c006364:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c006368:	4620      	mov	r0, r4
 c00636a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00636c:	3468      	adds	r4, #104	; 0x68
 c00636e:	e7d9      	b.n	c006324 <__sfp+0x1c>
 c006370:	2104      	movs	r1, #4
 c006372:	4638      	mov	r0, r7
 c006374:	f7ff ff62 	bl	c00623c <__sfmoreglue>
 c006378:	4604      	mov	r4, r0
 c00637a:	6030      	str	r0, [r6, #0]
 c00637c:	2800      	cmp	r0, #0
 c00637e:	d1d5      	bne.n	c00632c <__sfp+0x24>
 c006380:	f7ff ff78 	bl	c006274 <__sfp_lock_release>
 c006384:	230c      	movs	r3, #12
 c006386:	603b      	str	r3, [r7, #0]
 c006388:	e7ee      	b.n	c006368 <__sfp+0x60>
 c00638a:	bf00      	nop
 c00638c:	0c0073b8 	.word	0x0c0073b8
 c006390:	ffff0001 	.word	0xffff0001

0c006394 <_fwalk_reent>:
 c006394:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c006398:	4606      	mov	r6, r0
 c00639a:	4688      	mov	r8, r1
 c00639c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c0063a0:	2700      	movs	r7, #0
 c0063a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c0063a6:	f1b9 0901 	subs.w	r9, r9, #1
 c0063aa:	d505      	bpl.n	c0063b8 <_fwalk_reent+0x24>
 c0063ac:	6824      	ldr	r4, [r4, #0]
 c0063ae:	2c00      	cmp	r4, #0
 c0063b0:	d1f7      	bne.n	c0063a2 <_fwalk_reent+0xe>
 c0063b2:	4638      	mov	r0, r7
 c0063b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c0063b8:	89ab      	ldrh	r3, [r5, #12]
 c0063ba:	2b01      	cmp	r3, #1
 c0063bc:	d907      	bls.n	c0063ce <_fwalk_reent+0x3a>
 c0063be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c0063c2:	3301      	adds	r3, #1
 c0063c4:	d003      	beq.n	c0063ce <_fwalk_reent+0x3a>
 c0063c6:	4629      	mov	r1, r5
 c0063c8:	4630      	mov	r0, r6
 c0063ca:	47c0      	blx	r8
 c0063cc:	4307      	orrs	r7, r0
 c0063ce:	3568      	adds	r5, #104	; 0x68
 c0063d0:	e7e9      	b.n	c0063a6 <_fwalk_reent+0x12>

0c0063d2 <__retarget_lock_init_recursive>:
 c0063d2:	4770      	bx	lr

0c0063d4 <__retarget_lock_acquire_recursive>:
 c0063d4:	4770      	bx	lr

0c0063d6 <__retarget_lock_release_recursive>:
 c0063d6:	4770      	bx	lr

0c0063d8 <sbrk_aligned>:
 c0063d8:	b570      	push	{r4, r5, r6, lr}
 c0063da:	4e0e      	ldr	r6, [pc, #56]	; (c006414 <sbrk_aligned+0x3c>)
 c0063dc:	460c      	mov	r4, r1
 c0063de:	4605      	mov	r5, r0
 c0063e0:	6831      	ldr	r1, [r6, #0]
 c0063e2:	b911      	cbnz	r1, c0063ea <sbrk_aligned+0x12>
 c0063e4:	f000 fb7c 	bl	c006ae0 <_sbrk_r>
 c0063e8:	6030      	str	r0, [r6, #0]
 c0063ea:	4621      	mov	r1, r4
 c0063ec:	4628      	mov	r0, r5
 c0063ee:	f000 fb77 	bl	c006ae0 <_sbrk_r>
 c0063f2:	1c43      	adds	r3, r0, #1
 c0063f4:	d00a      	beq.n	c00640c <sbrk_aligned+0x34>
 c0063f6:	1cc4      	adds	r4, r0, #3
 c0063f8:	f024 0403 	bic.w	r4, r4, #3
 c0063fc:	42a0      	cmp	r0, r4
 c0063fe:	d007      	beq.n	c006410 <sbrk_aligned+0x38>
 c006400:	1a21      	subs	r1, r4, r0
 c006402:	4628      	mov	r0, r5
 c006404:	f000 fb6c 	bl	c006ae0 <_sbrk_r>
 c006408:	3001      	adds	r0, #1
 c00640a:	d101      	bne.n	c006410 <sbrk_aligned+0x38>
 c00640c:	f04f 34ff 	mov.w	r4, #4294967295
 c006410:	4620      	mov	r0, r4
 c006412:	bd70      	pop	{r4, r5, r6, pc}
 c006414:	30000b48 	.word	0x30000b48

0c006418 <_malloc_r>:
 c006418:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c00641c:	1ccd      	adds	r5, r1, #3
 c00641e:	4607      	mov	r7, r0
 c006420:	f025 0503 	bic.w	r5, r5, #3
 c006424:	3508      	adds	r5, #8
 c006426:	2d0c      	cmp	r5, #12
 c006428:	bf38      	it	cc
 c00642a:	250c      	movcc	r5, #12
 c00642c:	2d00      	cmp	r5, #0
 c00642e:	db01      	blt.n	c006434 <_malloc_r+0x1c>
 c006430:	42a9      	cmp	r1, r5
 c006432:	d905      	bls.n	c006440 <_malloc_r+0x28>
 c006434:	230c      	movs	r3, #12
 c006436:	2600      	movs	r6, #0
 c006438:	603b      	str	r3, [r7, #0]
 c00643a:	4630      	mov	r0, r6
 c00643c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c006440:	4e2e      	ldr	r6, [pc, #184]	; (c0064fc <_malloc_r+0xe4>)
 c006442:	f000 fdc9 	bl	c006fd8 <__malloc_lock>
 c006446:	6833      	ldr	r3, [r6, #0]
 c006448:	461c      	mov	r4, r3
 c00644a:	bb34      	cbnz	r4, c00649a <_malloc_r+0x82>
 c00644c:	4629      	mov	r1, r5
 c00644e:	4638      	mov	r0, r7
 c006450:	f7ff ffc2 	bl	c0063d8 <sbrk_aligned>
 c006454:	1c43      	adds	r3, r0, #1
 c006456:	4604      	mov	r4, r0
 c006458:	d14d      	bne.n	c0064f6 <_malloc_r+0xde>
 c00645a:	6834      	ldr	r4, [r6, #0]
 c00645c:	4626      	mov	r6, r4
 c00645e:	2e00      	cmp	r6, #0
 c006460:	d140      	bne.n	c0064e4 <_malloc_r+0xcc>
 c006462:	6823      	ldr	r3, [r4, #0]
 c006464:	4631      	mov	r1, r6
 c006466:	4638      	mov	r0, r7
 c006468:	eb04 0803 	add.w	r8, r4, r3
 c00646c:	f000 fb38 	bl	c006ae0 <_sbrk_r>
 c006470:	4580      	cmp	r8, r0
 c006472:	d13a      	bne.n	c0064ea <_malloc_r+0xd2>
 c006474:	6821      	ldr	r1, [r4, #0]
 c006476:	3503      	adds	r5, #3
 c006478:	4638      	mov	r0, r7
 c00647a:	1a6d      	subs	r5, r5, r1
 c00647c:	f025 0503 	bic.w	r5, r5, #3
 c006480:	3508      	adds	r5, #8
 c006482:	2d0c      	cmp	r5, #12
 c006484:	bf38      	it	cc
 c006486:	250c      	movcc	r5, #12
 c006488:	4629      	mov	r1, r5
 c00648a:	f7ff ffa5 	bl	c0063d8 <sbrk_aligned>
 c00648e:	3001      	adds	r0, #1
 c006490:	d02b      	beq.n	c0064ea <_malloc_r+0xd2>
 c006492:	6823      	ldr	r3, [r4, #0]
 c006494:	442b      	add	r3, r5
 c006496:	6023      	str	r3, [r4, #0]
 c006498:	e00e      	b.n	c0064b8 <_malloc_r+0xa0>
 c00649a:	6822      	ldr	r2, [r4, #0]
 c00649c:	1b52      	subs	r2, r2, r5
 c00649e:	d41e      	bmi.n	c0064de <_malloc_r+0xc6>
 c0064a0:	2a0b      	cmp	r2, #11
 c0064a2:	d916      	bls.n	c0064d2 <_malloc_r+0xba>
 c0064a4:	1961      	adds	r1, r4, r5
 c0064a6:	42a3      	cmp	r3, r4
 c0064a8:	6025      	str	r5, [r4, #0]
 c0064aa:	bf18      	it	ne
 c0064ac:	6059      	strne	r1, [r3, #4]
 c0064ae:	6863      	ldr	r3, [r4, #4]
 c0064b0:	bf08      	it	eq
 c0064b2:	6031      	streq	r1, [r6, #0]
 c0064b4:	5162      	str	r2, [r4, r5]
 c0064b6:	604b      	str	r3, [r1, #4]
 c0064b8:	f104 060b 	add.w	r6, r4, #11
 c0064bc:	4638      	mov	r0, r7
 c0064be:	f000 fd91 	bl	c006fe4 <__malloc_unlock>
 c0064c2:	1d23      	adds	r3, r4, #4
 c0064c4:	f026 0607 	bic.w	r6, r6, #7
 c0064c8:	1af2      	subs	r2, r6, r3
 c0064ca:	d0b6      	beq.n	c00643a <_malloc_r+0x22>
 c0064cc:	1b9b      	subs	r3, r3, r6
 c0064ce:	50a3      	str	r3, [r4, r2]
 c0064d0:	e7b3      	b.n	c00643a <_malloc_r+0x22>
 c0064d2:	6862      	ldr	r2, [r4, #4]
 c0064d4:	42a3      	cmp	r3, r4
 c0064d6:	bf0c      	ite	eq
 c0064d8:	6032      	streq	r2, [r6, #0]
 c0064da:	605a      	strne	r2, [r3, #4]
 c0064dc:	e7ec      	b.n	c0064b8 <_malloc_r+0xa0>
 c0064de:	4623      	mov	r3, r4
 c0064e0:	6864      	ldr	r4, [r4, #4]
 c0064e2:	e7b2      	b.n	c00644a <_malloc_r+0x32>
 c0064e4:	4634      	mov	r4, r6
 c0064e6:	6876      	ldr	r6, [r6, #4]
 c0064e8:	e7b9      	b.n	c00645e <_malloc_r+0x46>
 c0064ea:	230c      	movs	r3, #12
 c0064ec:	4638      	mov	r0, r7
 c0064ee:	603b      	str	r3, [r7, #0]
 c0064f0:	f000 fd78 	bl	c006fe4 <__malloc_unlock>
 c0064f4:	e7a1      	b.n	c00643a <_malloc_r+0x22>
 c0064f6:	6025      	str	r5, [r4, #0]
 c0064f8:	e7de      	b.n	c0064b8 <_malloc_r+0xa0>
 c0064fa:	bf00      	nop
 c0064fc:	30000b44 	.word	0x30000b44

0c006500 <__sfputc_r>:
 c006500:	6893      	ldr	r3, [r2, #8]
 c006502:	3b01      	subs	r3, #1
 c006504:	2b00      	cmp	r3, #0
 c006506:	6093      	str	r3, [r2, #8]
 c006508:	b410      	push	{r4}
 c00650a:	da08      	bge.n	c00651e <__sfputc_r+0x1e>
 c00650c:	6994      	ldr	r4, [r2, #24]
 c00650e:	42a3      	cmp	r3, r4
 c006510:	db01      	blt.n	c006516 <__sfputc_r+0x16>
 c006512:	290a      	cmp	r1, #10
 c006514:	d103      	bne.n	c00651e <__sfputc_r+0x1e>
 c006516:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00651a:	f000 bb35 	b.w	c006b88 <__swbuf_r>
 c00651e:	6813      	ldr	r3, [r2, #0]
 c006520:	1c58      	adds	r0, r3, #1
 c006522:	6010      	str	r0, [r2, #0]
 c006524:	4608      	mov	r0, r1
 c006526:	7019      	strb	r1, [r3, #0]
 c006528:	f85d 4b04 	ldr.w	r4, [sp], #4
 c00652c:	4770      	bx	lr

0c00652e <__sfputs_r>:
 c00652e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006530:	4606      	mov	r6, r0
 c006532:	460f      	mov	r7, r1
 c006534:	4614      	mov	r4, r2
 c006536:	18d5      	adds	r5, r2, r3
 c006538:	42ac      	cmp	r4, r5
 c00653a:	d101      	bne.n	c006540 <__sfputs_r+0x12>
 c00653c:	2000      	movs	r0, #0
 c00653e:	e007      	b.n	c006550 <__sfputs_r+0x22>
 c006540:	463a      	mov	r2, r7
 c006542:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006546:	4630      	mov	r0, r6
 c006548:	f7ff ffda 	bl	c006500 <__sfputc_r>
 c00654c:	1c43      	adds	r3, r0, #1
 c00654e:	d1f3      	bne.n	c006538 <__sfputs_r+0xa>
 c006550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c006554 <_vfiprintf_r>:
 c006554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c006558:	460d      	mov	r5, r1
 c00655a:	b09d      	sub	sp, #116	; 0x74
 c00655c:	4614      	mov	r4, r2
 c00655e:	4698      	mov	r8, r3
 c006560:	4606      	mov	r6, r0
 c006562:	b118      	cbz	r0, c00656c <_vfiprintf_r+0x18>
 c006564:	6983      	ldr	r3, [r0, #24]
 c006566:	b90b      	cbnz	r3, c00656c <_vfiprintf_r+0x18>
 c006568:	f7ff fe96 	bl	c006298 <__sinit>
 c00656c:	4b89      	ldr	r3, [pc, #548]	; (c006794 <_vfiprintf_r+0x240>)
 c00656e:	429d      	cmp	r5, r3
 c006570:	d11b      	bne.n	c0065aa <_vfiprintf_r+0x56>
 c006572:	6875      	ldr	r5, [r6, #4]
 c006574:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006576:	07d9      	lsls	r1, r3, #31
 c006578:	d405      	bmi.n	c006586 <_vfiprintf_r+0x32>
 c00657a:	89ab      	ldrh	r3, [r5, #12]
 c00657c:	059a      	lsls	r2, r3, #22
 c00657e:	d402      	bmi.n	c006586 <_vfiprintf_r+0x32>
 c006580:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006582:	f7ff ff27 	bl	c0063d4 <__retarget_lock_acquire_recursive>
 c006586:	89ab      	ldrh	r3, [r5, #12]
 c006588:	071b      	lsls	r3, r3, #28
 c00658a:	d501      	bpl.n	c006590 <_vfiprintf_r+0x3c>
 c00658c:	692b      	ldr	r3, [r5, #16]
 c00658e:	b9eb      	cbnz	r3, c0065cc <_vfiprintf_r+0x78>
 c006590:	4629      	mov	r1, r5
 c006592:	4630      	mov	r0, r6
 c006594:	f000 fb5c 	bl	c006c50 <__swsetup_r>
 c006598:	b1c0      	cbz	r0, c0065cc <_vfiprintf_r+0x78>
 c00659a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c00659c:	07dc      	lsls	r4, r3, #31
 c00659e:	d50e      	bpl.n	c0065be <_vfiprintf_r+0x6a>
 c0065a0:	f04f 30ff 	mov.w	r0, #4294967295
 c0065a4:	b01d      	add	sp, #116	; 0x74
 c0065a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c0065aa:	4b7b      	ldr	r3, [pc, #492]	; (c006798 <_vfiprintf_r+0x244>)
 c0065ac:	429d      	cmp	r5, r3
 c0065ae:	d101      	bne.n	c0065b4 <_vfiprintf_r+0x60>
 c0065b0:	68b5      	ldr	r5, [r6, #8]
 c0065b2:	e7df      	b.n	c006574 <_vfiprintf_r+0x20>
 c0065b4:	4b79      	ldr	r3, [pc, #484]	; (c00679c <_vfiprintf_r+0x248>)
 c0065b6:	429d      	cmp	r5, r3
 c0065b8:	bf08      	it	eq
 c0065ba:	68f5      	ldreq	r5, [r6, #12]
 c0065bc:	e7da      	b.n	c006574 <_vfiprintf_r+0x20>
 c0065be:	89ab      	ldrh	r3, [r5, #12]
 c0065c0:	0598      	lsls	r0, r3, #22
 c0065c2:	d4ed      	bmi.n	c0065a0 <_vfiprintf_r+0x4c>
 c0065c4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c0065c6:	f7ff ff06 	bl	c0063d6 <__retarget_lock_release_recursive>
 c0065ca:	e7e9      	b.n	c0065a0 <_vfiprintf_r+0x4c>
 c0065cc:	2300      	movs	r3, #0
 c0065ce:	f8cd 800c 	str.w	r8, [sp, #12]
 c0065d2:	f04f 0901 	mov.w	r9, #1
 c0065d6:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c0067a0 <_vfiprintf_r+0x24c>
 c0065da:	9309      	str	r3, [sp, #36]	; 0x24
 c0065dc:	2320      	movs	r3, #32
 c0065de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c0065e2:	2330      	movs	r3, #48	; 0x30
 c0065e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c0065e8:	4623      	mov	r3, r4
 c0065ea:	469a      	mov	sl, r3
 c0065ec:	f813 2b01 	ldrb.w	r2, [r3], #1
 c0065f0:	b10a      	cbz	r2, c0065f6 <_vfiprintf_r+0xa2>
 c0065f2:	2a25      	cmp	r2, #37	; 0x25
 c0065f4:	d1f9      	bne.n	c0065ea <_vfiprintf_r+0x96>
 c0065f6:	ebba 0b04 	subs.w	fp, sl, r4
 c0065fa:	d00b      	beq.n	c006614 <_vfiprintf_r+0xc0>
 c0065fc:	465b      	mov	r3, fp
 c0065fe:	4622      	mov	r2, r4
 c006600:	4629      	mov	r1, r5
 c006602:	4630      	mov	r0, r6
 c006604:	f7ff ff93 	bl	c00652e <__sfputs_r>
 c006608:	3001      	adds	r0, #1
 c00660a:	f000 80aa 	beq.w	c006762 <_vfiprintf_r+0x20e>
 c00660e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c006610:	445a      	add	r2, fp
 c006612:	9209      	str	r2, [sp, #36]	; 0x24
 c006614:	f89a 3000 	ldrb.w	r3, [sl]
 c006618:	2b00      	cmp	r3, #0
 c00661a:	f000 80a2 	beq.w	c006762 <_vfiprintf_r+0x20e>
 c00661e:	2300      	movs	r3, #0
 c006620:	f04f 32ff 	mov.w	r2, #4294967295
 c006624:	f10a 0a01 	add.w	sl, sl, #1
 c006628:	9304      	str	r3, [sp, #16]
 c00662a:	9307      	str	r3, [sp, #28]
 c00662c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c006630:	931a      	str	r3, [sp, #104]	; 0x68
 c006632:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c006636:	4654      	mov	r4, sl
 c006638:	2205      	movs	r2, #5
 c00663a:	4859      	ldr	r0, [pc, #356]	; (c0067a0 <_vfiprintf_r+0x24c>)
 c00663c:	f814 1b01 	ldrb.w	r1, [r4], #1
 c006640:	f000 fcbc 	bl	c006fbc <memchr>
 c006644:	9a04      	ldr	r2, [sp, #16]
 c006646:	b9d8      	cbnz	r0, c006680 <_vfiprintf_r+0x12c>
 c006648:	06d1      	lsls	r1, r2, #27
 c00664a:	bf44      	itt	mi
 c00664c:	2320      	movmi	r3, #32
 c00664e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c006652:	0713      	lsls	r3, r2, #28
 c006654:	bf44      	itt	mi
 c006656:	232b      	movmi	r3, #43	; 0x2b
 c006658:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c00665c:	f89a 3000 	ldrb.w	r3, [sl]
 c006660:	2b2a      	cmp	r3, #42	; 0x2a
 c006662:	d015      	beq.n	c006690 <_vfiprintf_r+0x13c>
 c006664:	9a07      	ldr	r2, [sp, #28]
 c006666:	4654      	mov	r4, sl
 c006668:	2000      	movs	r0, #0
 c00666a:	f04f 0c0a 	mov.w	ip, #10
 c00666e:	4621      	mov	r1, r4
 c006670:	f811 3b01 	ldrb.w	r3, [r1], #1
 c006674:	3b30      	subs	r3, #48	; 0x30
 c006676:	2b09      	cmp	r3, #9
 c006678:	d94e      	bls.n	c006718 <_vfiprintf_r+0x1c4>
 c00667a:	b1b0      	cbz	r0, c0066aa <_vfiprintf_r+0x156>
 c00667c:	9207      	str	r2, [sp, #28]
 c00667e:	e014      	b.n	c0066aa <_vfiprintf_r+0x156>
 c006680:	eba0 0308 	sub.w	r3, r0, r8
 c006684:	46a2      	mov	sl, r4
 c006686:	fa09 f303 	lsl.w	r3, r9, r3
 c00668a:	4313      	orrs	r3, r2
 c00668c:	9304      	str	r3, [sp, #16]
 c00668e:	e7d2      	b.n	c006636 <_vfiprintf_r+0xe2>
 c006690:	9b03      	ldr	r3, [sp, #12]
 c006692:	1d19      	adds	r1, r3, #4
 c006694:	681b      	ldr	r3, [r3, #0]
 c006696:	2b00      	cmp	r3, #0
 c006698:	9103      	str	r1, [sp, #12]
 c00669a:	bfbb      	ittet	lt
 c00669c:	425b      	neglt	r3, r3
 c00669e:	f042 0202 	orrlt.w	r2, r2, #2
 c0066a2:	9307      	strge	r3, [sp, #28]
 c0066a4:	9307      	strlt	r3, [sp, #28]
 c0066a6:	bfb8      	it	lt
 c0066a8:	9204      	strlt	r2, [sp, #16]
 c0066aa:	7823      	ldrb	r3, [r4, #0]
 c0066ac:	2b2e      	cmp	r3, #46	; 0x2e
 c0066ae:	d10c      	bne.n	c0066ca <_vfiprintf_r+0x176>
 c0066b0:	7863      	ldrb	r3, [r4, #1]
 c0066b2:	2b2a      	cmp	r3, #42	; 0x2a
 c0066b4:	d135      	bne.n	c006722 <_vfiprintf_r+0x1ce>
 c0066b6:	9b03      	ldr	r3, [sp, #12]
 c0066b8:	3402      	adds	r4, #2
 c0066ba:	1d1a      	adds	r2, r3, #4
 c0066bc:	681b      	ldr	r3, [r3, #0]
 c0066be:	2b00      	cmp	r3, #0
 c0066c0:	9203      	str	r2, [sp, #12]
 c0066c2:	bfb8      	it	lt
 c0066c4:	f04f 33ff 	movlt.w	r3, #4294967295
 c0066c8:	9305      	str	r3, [sp, #20]
 c0066ca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c0067b0 <_vfiprintf_r+0x25c>
 c0066ce:	2203      	movs	r2, #3
 c0066d0:	7821      	ldrb	r1, [r4, #0]
 c0066d2:	4650      	mov	r0, sl
 c0066d4:	f000 fc72 	bl	c006fbc <memchr>
 c0066d8:	b140      	cbz	r0, c0066ec <_vfiprintf_r+0x198>
 c0066da:	2340      	movs	r3, #64	; 0x40
 c0066dc:	eba0 000a 	sub.w	r0, r0, sl
 c0066e0:	3401      	adds	r4, #1
 c0066e2:	fa03 f000 	lsl.w	r0, r3, r0
 c0066e6:	9b04      	ldr	r3, [sp, #16]
 c0066e8:	4303      	orrs	r3, r0
 c0066ea:	9304      	str	r3, [sp, #16]
 c0066ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 c0066f0:	2206      	movs	r2, #6
 c0066f2:	482c      	ldr	r0, [pc, #176]	; (c0067a4 <_vfiprintf_r+0x250>)
 c0066f4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c0066f8:	f000 fc60 	bl	c006fbc <memchr>
 c0066fc:	2800      	cmp	r0, #0
 c0066fe:	d03f      	beq.n	c006780 <_vfiprintf_r+0x22c>
 c006700:	4b29      	ldr	r3, [pc, #164]	; (c0067a8 <_vfiprintf_r+0x254>)
 c006702:	bb1b      	cbnz	r3, c00674c <_vfiprintf_r+0x1f8>
 c006704:	9b03      	ldr	r3, [sp, #12]
 c006706:	3307      	adds	r3, #7
 c006708:	f023 0307 	bic.w	r3, r3, #7
 c00670c:	3308      	adds	r3, #8
 c00670e:	9303      	str	r3, [sp, #12]
 c006710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c006712:	443b      	add	r3, r7
 c006714:	9309      	str	r3, [sp, #36]	; 0x24
 c006716:	e767      	b.n	c0065e8 <_vfiprintf_r+0x94>
 c006718:	fb0c 3202 	mla	r2, ip, r2, r3
 c00671c:	460c      	mov	r4, r1
 c00671e:	2001      	movs	r0, #1
 c006720:	e7a5      	b.n	c00666e <_vfiprintf_r+0x11a>
 c006722:	2300      	movs	r3, #0
 c006724:	3401      	adds	r4, #1
 c006726:	f04f 0c0a 	mov.w	ip, #10
 c00672a:	4619      	mov	r1, r3
 c00672c:	9305      	str	r3, [sp, #20]
 c00672e:	4620      	mov	r0, r4
 c006730:	f810 2b01 	ldrb.w	r2, [r0], #1
 c006734:	3a30      	subs	r2, #48	; 0x30
 c006736:	2a09      	cmp	r2, #9
 c006738:	d903      	bls.n	c006742 <_vfiprintf_r+0x1ee>
 c00673a:	2b00      	cmp	r3, #0
 c00673c:	d0c5      	beq.n	c0066ca <_vfiprintf_r+0x176>
 c00673e:	9105      	str	r1, [sp, #20]
 c006740:	e7c3      	b.n	c0066ca <_vfiprintf_r+0x176>
 c006742:	fb0c 2101 	mla	r1, ip, r1, r2
 c006746:	4604      	mov	r4, r0
 c006748:	2301      	movs	r3, #1
 c00674a:	e7f0      	b.n	c00672e <_vfiprintf_r+0x1da>
 c00674c:	ab03      	add	r3, sp, #12
 c00674e:	462a      	mov	r2, r5
 c006750:	a904      	add	r1, sp, #16
 c006752:	4630      	mov	r0, r6
 c006754:	9300      	str	r3, [sp, #0]
 c006756:	4b15      	ldr	r3, [pc, #84]	; (c0067ac <_vfiprintf_r+0x258>)
 c006758:	e000      	b.n	c00675c <_vfiprintf_r+0x208>
 c00675a:	bf00      	nop
 c00675c:	4607      	mov	r7, r0
 c00675e:	1c78      	adds	r0, r7, #1
 c006760:	d1d6      	bne.n	c006710 <_vfiprintf_r+0x1bc>
 c006762:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c006764:	07d9      	lsls	r1, r3, #31
 c006766:	d405      	bmi.n	c006774 <_vfiprintf_r+0x220>
 c006768:	89ab      	ldrh	r3, [r5, #12]
 c00676a:	059a      	lsls	r2, r3, #22
 c00676c:	d402      	bmi.n	c006774 <_vfiprintf_r+0x220>
 c00676e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c006770:	f7ff fe31 	bl	c0063d6 <__retarget_lock_release_recursive>
 c006774:	89ab      	ldrh	r3, [r5, #12]
 c006776:	065b      	lsls	r3, r3, #25
 c006778:	f53f af12 	bmi.w	c0065a0 <_vfiprintf_r+0x4c>
 c00677c:	9809      	ldr	r0, [sp, #36]	; 0x24
 c00677e:	e711      	b.n	c0065a4 <_vfiprintf_r+0x50>
 c006780:	ab03      	add	r3, sp, #12
 c006782:	462a      	mov	r2, r5
 c006784:	a904      	add	r1, sp, #16
 c006786:	4630      	mov	r0, r6
 c006788:	9300      	str	r3, [sp, #0]
 c00678a:	4b08      	ldr	r3, [pc, #32]	; (c0067ac <_vfiprintf_r+0x258>)
 c00678c:	f000 f882 	bl	c006894 <_printf_i>
 c006790:	e7e4      	b.n	c00675c <_vfiprintf_r+0x208>
 c006792:	bf00      	nop
 c006794:	0c0073dc 	.word	0x0c0073dc
 c006798:	0c0073fc 	.word	0x0c0073fc
 c00679c:	0c0073bc 	.word	0x0c0073bc
 c0067a0:	0c00741c 	.word	0x0c00741c
 c0067a4:	0c007426 	.word	0x0c007426
 c0067a8:	00000000 	.word	0x00000000
 c0067ac:	0c00652f 	.word	0x0c00652f
 c0067b0:	0c007422 	.word	0x0c007422

0c0067b4 <_printf_common>:
 c0067b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c0067b8:	4616      	mov	r6, r2
 c0067ba:	4699      	mov	r9, r3
 c0067bc:	688a      	ldr	r2, [r1, #8]
 c0067be:	4607      	mov	r7, r0
 c0067c0:	690b      	ldr	r3, [r1, #16]
 c0067c2:	460c      	mov	r4, r1
 c0067c4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c0067c8:	4293      	cmp	r3, r2
 c0067ca:	bfb8      	it	lt
 c0067cc:	4613      	movlt	r3, r2
 c0067ce:	6033      	str	r3, [r6, #0]
 c0067d0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c0067d4:	b10a      	cbz	r2, c0067da <_printf_common+0x26>
 c0067d6:	3301      	adds	r3, #1
 c0067d8:	6033      	str	r3, [r6, #0]
 c0067da:	6823      	ldr	r3, [r4, #0]
 c0067dc:	0699      	lsls	r1, r3, #26
 c0067de:	bf42      	ittt	mi
 c0067e0:	6833      	ldrmi	r3, [r6, #0]
 c0067e2:	3302      	addmi	r3, #2
 c0067e4:	6033      	strmi	r3, [r6, #0]
 c0067e6:	6825      	ldr	r5, [r4, #0]
 c0067e8:	f015 0506 	ands.w	r5, r5, #6
 c0067ec:	d106      	bne.n	c0067fc <_printf_common+0x48>
 c0067ee:	f104 0a19 	add.w	sl, r4, #25
 c0067f2:	68e3      	ldr	r3, [r4, #12]
 c0067f4:	6832      	ldr	r2, [r6, #0]
 c0067f6:	1a9b      	subs	r3, r3, r2
 c0067f8:	42ab      	cmp	r3, r5
 c0067fa:	dc29      	bgt.n	c006850 <_printf_common+0x9c>
 c0067fc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c006800:	1e13      	subs	r3, r2, #0
 c006802:	6822      	ldr	r2, [r4, #0]
 c006804:	bf18      	it	ne
 c006806:	2301      	movne	r3, #1
 c006808:	0692      	lsls	r2, r2, #26
 c00680a:	d42e      	bmi.n	c00686a <_printf_common+0xb6>
 c00680c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c006810:	4649      	mov	r1, r9
 c006812:	4638      	mov	r0, r7
 c006814:	47c0      	blx	r8
 c006816:	3001      	adds	r0, #1
 c006818:	d021      	beq.n	c00685e <_printf_common+0xaa>
 c00681a:	6823      	ldr	r3, [r4, #0]
 c00681c:	341a      	adds	r4, #26
 c00681e:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c006822:	f003 0306 	and.w	r3, r3, #6
 c006826:	6832      	ldr	r2, [r6, #0]
 c006828:	2600      	movs	r6, #0
 c00682a:	2b04      	cmp	r3, #4
 c00682c:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c006830:	bf08      	it	eq
 c006832:	1aad      	subeq	r5, r5, r2
 c006834:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c006838:	bf14      	ite	ne
 c00683a:	2500      	movne	r5, #0
 c00683c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c006840:	4293      	cmp	r3, r2
 c006842:	bfc4      	itt	gt
 c006844:	1a9b      	subgt	r3, r3, r2
 c006846:	18ed      	addgt	r5, r5, r3
 c006848:	42b5      	cmp	r5, r6
 c00684a:	d11a      	bne.n	c006882 <_printf_common+0xce>
 c00684c:	2000      	movs	r0, #0
 c00684e:	e008      	b.n	c006862 <_printf_common+0xae>
 c006850:	2301      	movs	r3, #1
 c006852:	4652      	mov	r2, sl
 c006854:	4649      	mov	r1, r9
 c006856:	4638      	mov	r0, r7
 c006858:	47c0      	blx	r8
 c00685a:	3001      	adds	r0, #1
 c00685c:	d103      	bne.n	c006866 <_printf_common+0xb2>
 c00685e:	f04f 30ff 	mov.w	r0, #4294967295
 c006862:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c006866:	3501      	adds	r5, #1
 c006868:	e7c3      	b.n	c0067f2 <_printf_common+0x3e>
 c00686a:	18e1      	adds	r1, r4, r3
 c00686c:	1c5a      	adds	r2, r3, #1
 c00686e:	2030      	movs	r0, #48	; 0x30
 c006870:	3302      	adds	r3, #2
 c006872:	4422      	add	r2, r4
 c006874:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c006878:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c00687c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c006880:	e7c4      	b.n	c00680c <_printf_common+0x58>
 c006882:	2301      	movs	r3, #1
 c006884:	4622      	mov	r2, r4
 c006886:	4649      	mov	r1, r9
 c006888:	4638      	mov	r0, r7
 c00688a:	47c0      	blx	r8
 c00688c:	3001      	adds	r0, #1
 c00688e:	d0e6      	beq.n	c00685e <_printf_common+0xaa>
 c006890:	3601      	adds	r6, #1
 c006892:	e7d9      	b.n	c006848 <_printf_common+0x94>

0c006894 <_printf_i>:
 c006894:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c006898:	7e0f      	ldrb	r7, [r1, #24]
 c00689a:	4691      	mov	r9, r2
 c00689c:	4680      	mov	r8, r0
 c00689e:	460c      	mov	r4, r1
 c0068a0:	2f78      	cmp	r7, #120	; 0x78
 c0068a2:	469a      	mov	sl, r3
 c0068a4:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c0068a6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c0068aa:	d807      	bhi.n	c0068bc <_printf_i+0x28>
 c0068ac:	2f62      	cmp	r7, #98	; 0x62
 c0068ae:	d80a      	bhi.n	c0068c6 <_printf_i+0x32>
 c0068b0:	2f00      	cmp	r7, #0
 c0068b2:	f000 80d8 	beq.w	c006a66 <_printf_i+0x1d2>
 c0068b6:	2f58      	cmp	r7, #88	; 0x58
 c0068b8:	f000 80a3 	beq.w	c006a02 <_printf_i+0x16e>
 c0068bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c0068c0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c0068c4:	e03a      	b.n	c00693c <_printf_i+0xa8>
 c0068c6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c0068ca:	2b15      	cmp	r3, #21
 c0068cc:	d8f6      	bhi.n	c0068bc <_printf_i+0x28>
 c0068ce:	a101      	add	r1, pc, #4	; (adr r1, c0068d4 <_printf_i+0x40>)
 c0068d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c0068d4:	0c00692d 	.word	0x0c00692d
 c0068d8:	0c006941 	.word	0x0c006941
 c0068dc:	0c0068bd 	.word	0x0c0068bd
 c0068e0:	0c0068bd 	.word	0x0c0068bd
 c0068e4:	0c0068bd 	.word	0x0c0068bd
 c0068e8:	0c0068bd 	.word	0x0c0068bd
 c0068ec:	0c006941 	.word	0x0c006941
 c0068f0:	0c0068bd 	.word	0x0c0068bd
 c0068f4:	0c0068bd 	.word	0x0c0068bd
 c0068f8:	0c0068bd 	.word	0x0c0068bd
 c0068fc:	0c0068bd 	.word	0x0c0068bd
 c006900:	0c006a4d 	.word	0x0c006a4d
 c006904:	0c006971 	.word	0x0c006971
 c006908:	0c006a2f 	.word	0x0c006a2f
 c00690c:	0c0068bd 	.word	0x0c0068bd
 c006910:	0c0068bd 	.word	0x0c0068bd
 c006914:	0c006a6f 	.word	0x0c006a6f
 c006918:	0c0068bd 	.word	0x0c0068bd
 c00691c:	0c006971 	.word	0x0c006971
 c006920:	0c0068bd 	.word	0x0c0068bd
 c006924:	0c0068bd 	.word	0x0c0068bd
 c006928:	0c006a37 	.word	0x0c006a37
 c00692c:	682b      	ldr	r3, [r5, #0]
 c00692e:	1d1a      	adds	r2, r3, #4
 c006930:	681b      	ldr	r3, [r3, #0]
 c006932:	602a      	str	r2, [r5, #0]
 c006934:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c006938:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c00693c:	2301      	movs	r3, #1
 c00693e:	e0a3      	b.n	c006a88 <_printf_i+0x1f4>
 c006940:	6820      	ldr	r0, [r4, #0]
 c006942:	6829      	ldr	r1, [r5, #0]
 c006944:	0606      	lsls	r6, r0, #24
 c006946:	f101 0304 	add.w	r3, r1, #4
 c00694a:	d50a      	bpl.n	c006962 <_printf_i+0xce>
 c00694c:	680e      	ldr	r6, [r1, #0]
 c00694e:	602b      	str	r3, [r5, #0]
 c006950:	2e00      	cmp	r6, #0
 c006952:	da03      	bge.n	c00695c <_printf_i+0xc8>
 c006954:	232d      	movs	r3, #45	; 0x2d
 c006956:	4276      	negs	r6, r6
 c006958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c00695c:	485e      	ldr	r0, [pc, #376]	; (c006ad8 <_printf_i+0x244>)
 c00695e:	230a      	movs	r3, #10
 c006960:	e019      	b.n	c006996 <_printf_i+0x102>
 c006962:	680e      	ldr	r6, [r1, #0]
 c006964:	f010 0f40 	tst.w	r0, #64	; 0x40
 c006968:	602b      	str	r3, [r5, #0]
 c00696a:	bf18      	it	ne
 c00696c:	b236      	sxthne	r6, r6
 c00696e:	e7ef      	b.n	c006950 <_printf_i+0xbc>
 c006970:	682b      	ldr	r3, [r5, #0]
 c006972:	6820      	ldr	r0, [r4, #0]
 c006974:	1d19      	adds	r1, r3, #4
 c006976:	6029      	str	r1, [r5, #0]
 c006978:	0601      	lsls	r1, r0, #24
 c00697a:	d501      	bpl.n	c006980 <_printf_i+0xec>
 c00697c:	681e      	ldr	r6, [r3, #0]
 c00697e:	e002      	b.n	c006986 <_printf_i+0xf2>
 c006980:	0646      	lsls	r6, r0, #25
 c006982:	d5fb      	bpl.n	c00697c <_printf_i+0xe8>
 c006984:	881e      	ldrh	r6, [r3, #0]
 c006986:	2f6f      	cmp	r7, #111	; 0x6f
 c006988:	4853      	ldr	r0, [pc, #332]	; (c006ad8 <_printf_i+0x244>)
 c00698a:	bf0c      	ite	eq
 c00698c:	2308      	moveq	r3, #8
 c00698e:	230a      	movne	r3, #10
 c006990:	2100      	movs	r1, #0
 c006992:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c006996:	6865      	ldr	r5, [r4, #4]
 c006998:	2d00      	cmp	r5, #0
 c00699a:	60a5      	str	r5, [r4, #8]
 c00699c:	bfa2      	ittt	ge
 c00699e:	6821      	ldrge	r1, [r4, #0]
 c0069a0:	f021 0104 	bicge.w	r1, r1, #4
 c0069a4:	6021      	strge	r1, [r4, #0]
 c0069a6:	b90e      	cbnz	r6, c0069ac <_printf_i+0x118>
 c0069a8:	2d00      	cmp	r5, #0
 c0069aa:	d04d      	beq.n	c006a48 <_printf_i+0x1b4>
 c0069ac:	4615      	mov	r5, r2
 c0069ae:	fbb6 f1f3 	udiv	r1, r6, r3
 c0069b2:	fb03 6711 	mls	r7, r3, r1, r6
 c0069b6:	5dc7      	ldrb	r7, [r0, r7]
 c0069b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c0069bc:	4637      	mov	r7, r6
 c0069be:	460e      	mov	r6, r1
 c0069c0:	42bb      	cmp	r3, r7
 c0069c2:	d9f4      	bls.n	c0069ae <_printf_i+0x11a>
 c0069c4:	2b08      	cmp	r3, #8
 c0069c6:	d10b      	bne.n	c0069e0 <_printf_i+0x14c>
 c0069c8:	6823      	ldr	r3, [r4, #0]
 c0069ca:	07de      	lsls	r6, r3, #31
 c0069cc:	d508      	bpl.n	c0069e0 <_printf_i+0x14c>
 c0069ce:	6923      	ldr	r3, [r4, #16]
 c0069d0:	6861      	ldr	r1, [r4, #4]
 c0069d2:	4299      	cmp	r1, r3
 c0069d4:	bfde      	ittt	le
 c0069d6:	2330      	movle	r3, #48	; 0x30
 c0069d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 c0069dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 c0069e0:	1b52      	subs	r2, r2, r5
 c0069e2:	6122      	str	r2, [r4, #16]
 c0069e4:	464b      	mov	r3, r9
 c0069e6:	aa03      	add	r2, sp, #12
 c0069e8:	4621      	mov	r1, r4
 c0069ea:	4640      	mov	r0, r8
 c0069ec:	f8cd a000 	str.w	sl, [sp]
 c0069f0:	f7ff fee0 	bl	c0067b4 <_printf_common>
 c0069f4:	3001      	adds	r0, #1
 c0069f6:	d14c      	bne.n	c006a92 <_printf_i+0x1fe>
 c0069f8:	f04f 30ff 	mov.w	r0, #4294967295
 c0069fc:	b004      	add	sp, #16
 c0069fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c006a02:	4835      	ldr	r0, [pc, #212]	; (c006ad8 <_printf_i+0x244>)
 c006a04:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c006a08:	6829      	ldr	r1, [r5, #0]
 c006a0a:	6823      	ldr	r3, [r4, #0]
 c006a0c:	f851 6b04 	ldr.w	r6, [r1], #4
 c006a10:	6029      	str	r1, [r5, #0]
 c006a12:	061d      	lsls	r5, r3, #24
 c006a14:	d514      	bpl.n	c006a40 <_printf_i+0x1ac>
 c006a16:	07df      	lsls	r7, r3, #31
 c006a18:	bf44      	itt	mi
 c006a1a:	f043 0320 	orrmi.w	r3, r3, #32
 c006a1e:	6023      	strmi	r3, [r4, #0]
 c006a20:	b91e      	cbnz	r6, c006a2a <_printf_i+0x196>
 c006a22:	6823      	ldr	r3, [r4, #0]
 c006a24:	f023 0320 	bic.w	r3, r3, #32
 c006a28:	6023      	str	r3, [r4, #0]
 c006a2a:	2310      	movs	r3, #16
 c006a2c:	e7b0      	b.n	c006990 <_printf_i+0xfc>
 c006a2e:	6823      	ldr	r3, [r4, #0]
 c006a30:	f043 0320 	orr.w	r3, r3, #32
 c006a34:	6023      	str	r3, [r4, #0]
 c006a36:	2378      	movs	r3, #120	; 0x78
 c006a38:	4828      	ldr	r0, [pc, #160]	; (c006adc <_printf_i+0x248>)
 c006a3a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c006a3e:	e7e3      	b.n	c006a08 <_printf_i+0x174>
 c006a40:	0659      	lsls	r1, r3, #25
 c006a42:	bf48      	it	mi
 c006a44:	b2b6      	uxthmi	r6, r6
 c006a46:	e7e6      	b.n	c006a16 <_printf_i+0x182>
 c006a48:	4615      	mov	r5, r2
 c006a4a:	e7bb      	b.n	c0069c4 <_printf_i+0x130>
 c006a4c:	682b      	ldr	r3, [r5, #0]
 c006a4e:	6826      	ldr	r6, [r4, #0]
 c006a50:	1d18      	adds	r0, r3, #4
 c006a52:	6961      	ldr	r1, [r4, #20]
 c006a54:	6028      	str	r0, [r5, #0]
 c006a56:	0635      	lsls	r5, r6, #24
 c006a58:	681b      	ldr	r3, [r3, #0]
 c006a5a:	d501      	bpl.n	c006a60 <_printf_i+0x1cc>
 c006a5c:	6019      	str	r1, [r3, #0]
 c006a5e:	e002      	b.n	c006a66 <_printf_i+0x1d2>
 c006a60:	0670      	lsls	r0, r6, #25
 c006a62:	d5fb      	bpl.n	c006a5c <_printf_i+0x1c8>
 c006a64:	8019      	strh	r1, [r3, #0]
 c006a66:	2300      	movs	r3, #0
 c006a68:	4615      	mov	r5, r2
 c006a6a:	6123      	str	r3, [r4, #16]
 c006a6c:	e7ba      	b.n	c0069e4 <_printf_i+0x150>
 c006a6e:	682b      	ldr	r3, [r5, #0]
 c006a70:	2100      	movs	r1, #0
 c006a72:	1d1a      	adds	r2, r3, #4
 c006a74:	602a      	str	r2, [r5, #0]
 c006a76:	681d      	ldr	r5, [r3, #0]
 c006a78:	6862      	ldr	r2, [r4, #4]
 c006a7a:	4628      	mov	r0, r5
 c006a7c:	f000 fa9e 	bl	c006fbc <memchr>
 c006a80:	b108      	cbz	r0, c006a86 <_printf_i+0x1f2>
 c006a82:	1b40      	subs	r0, r0, r5
 c006a84:	6060      	str	r0, [r4, #4]
 c006a86:	6863      	ldr	r3, [r4, #4]
 c006a88:	6123      	str	r3, [r4, #16]
 c006a8a:	2300      	movs	r3, #0
 c006a8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c006a90:	e7a8      	b.n	c0069e4 <_printf_i+0x150>
 c006a92:	6923      	ldr	r3, [r4, #16]
 c006a94:	462a      	mov	r2, r5
 c006a96:	4649      	mov	r1, r9
 c006a98:	4640      	mov	r0, r8
 c006a9a:	47d0      	blx	sl
 c006a9c:	3001      	adds	r0, #1
 c006a9e:	d0ab      	beq.n	c0069f8 <_printf_i+0x164>
 c006aa0:	6823      	ldr	r3, [r4, #0]
 c006aa2:	079b      	lsls	r3, r3, #30
 c006aa4:	d413      	bmi.n	c006ace <_printf_i+0x23a>
 c006aa6:	68e0      	ldr	r0, [r4, #12]
 c006aa8:	9b03      	ldr	r3, [sp, #12]
 c006aaa:	4298      	cmp	r0, r3
 c006aac:	bfb8      	it	lt
 c006aae:	4618      	movlt	r0, r3
 c006ab0:	e7a4      	b.n	c0069fc <_printf_i+0x168>
 c006ab2:	2301      	movs	r3, #1
 c006ab4:	4632      	mov	r2, r6
 c006ab6:	4649      	mov	r1, r9
 c006ab8:	4640      	mov	r0, r8
 c006aba:	47d0      	blx	sl
 c006abc:	3001      	adds	r0, #1
 c006abe:	d09b      	beq.n	c0069f8 <_printf_i+0x164>
 c006ac0:	3501      	adds	r5, #1
 c006ac2:	68e3      	ldr	r3, [r4, #12]
 c006ac4:	9903      	ldr	r1, [sp, #12]
 c006ac6:	1a5b      	subs	r3, r3, r1
 c006ac8:	42ab      	cmp	r3, r5
 c006aca:	dcf2      	bgt.n	c006ab2 <_printf_i+0x21e>
 c006acc:	e7eb      	b.n	c006aa6 <_printf_i+0x212>
 c006ace:	2500      	movs	r5, #0
 c006ad0:	f104 0619 	add.w	r6, r4, #25
 c006ad4:	e7f5      	b.n	c006ac2 <_printf_i+0x22e>
 c006ad6:	bf00      	nop
 c006ad8:	0c00742d 	.word	0x0c00742d
 c006adc:	0c00743e 	.word	0x0c00743e

0c006ae0 <_sbrk_r>:
 c006ae0:	b538      	push	{r3, r4, r5, lr}
 c006ae2:	2300      	movs	r3, #0
 c006ae4:	4d05      	ldr	r5, [pc, #20]	; (c006afc <_sbrk_r+0x1c>)
 c006ae6:	4604      	mov	r4, r0
 c006ae8:	4608      	mov	r0, r1
 c006aea:	602b      	str	r3, [r5, #0]
 c006aec:	f7fa ff68 	bl	c0019c0 <_sbrk>
 c006af0:	1c43      	adds	r3, r0, #1
 c006af2:	d102      	bne.n	c006afa <_sbrk_r+0x1a>
 c006af4:	682b      	ldr	r3, [r5, #0]
 c006af6:	b103      	cbz	r3, c006afa <_sbrk_r+0x1a>
 c006af8:	6023      	str	r3, [r4, #0]
 c006afa:	bd38      	pop	{r3, r4, r5, pc}
 c006afc:	30000b4c 	.word	0x30000b4c

0c006b00 <__sread>:
 c006b00:	b510      	push	{r4, lr}
 c006b02:	460c      	mov	r4, r1
 c006b04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006b08:	f000 fabe 	bl	c007088 <_read_r>
 c006b0c:	2800      	cmp	r0, #0
 c006b0e:	bfab      	itete	ge
 c006b10:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c006b12:	89a3      	ldrhlt	r3, [r4, #12]
 c006b14:	181b      	addge	r3, r3, r0
 c006b16:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c006b1a:	bfac      	ite	ge
 c006b1c:	6563      	strge	r3, [r4, #84]	; 0x54
 c006b1e:	81a3      	strhlt	r3, [r4, #12]
 c006b20:	bd10      	pop	{r4, pc}

0c006b22 <__swrite>:
 c006b22:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c006b26:	461f      	mov	r7, r3
 c006b28:	898b      	ldrh	r3, [r1, #12]
 c006b2a:	4605      	mov	r5, r0
 c006b2c:	460c      	mov	r4, r1
 c006b2e:	05db      	lsls	r3, r3, #23
 c006b30:	4616      	mov	r6, r2
 c006b32:	d505      	bpl.n	c006b40 <__swrite+0x1e>
 c006b34:	2302      	movs	r3, #2
 c006b36:	2200      	movs	r2, #0
 c006b38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006b3c:	f000 f9c6 	bl	c006ecc <_lseek_r>
 c006b40:	89a3      	ldrh	r3, [r4, #12]
 c006b42:	4632      	mov	r2, r6
 c006b44:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c006b48:	4628      	mov	r0, r5
 c006b4a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c006b4e:	81a3      	strh	r3, [r4, #12]
 c006b50:	463b      	mov	r3, r7
 c006b52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c006b56:	f000 b869 	b.w	c006c2c <_write_r>

0c006b5a <__sseek>:
 c006b5a:	b510      	push	{r4, lr}
 c006b5c:	460c      	mov	r4, r1
 c006b5e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006b62:	f000 f9b3 	bl	c006ecc <_lseek_r>
 c006b66:	1c43      	adds	r3, r0, #1
 c006b68:	89a3      	ldrh	r3, [r4, #12]
 c006b6a:	bf15      	itete	ne
 c006b6c:	6560      	strne	r0, [r4, #84]	; 0x54
 c006b6e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c006b72:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c006b76:	81a3      	strheq	r3, [r4, #12]
 c006b78:	bf18      	it	ne
 c006b7a:	81a3      	strhne	r3, [r4, #12]
 c006b7c:	bd10      	pop	{r4, pc}

0c006b7e <__sclose>:
 c006b7e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006b82:	f000 b8d3 	b.w	c006d2c <_close_r>
	...

0c006b88 <__swbuf_r>:
 c006b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006b8a:	460e      	mov	r6, r1
 c006b8c:	4614      	mov	r4, r2
 c006b8e:	4605      	mov	r5, r0
 c006b90:	b118      	cbz	r0, c006b9a <__swbuf_r+0x12>
 c006b92:	6983      	ldr	r3, [r0, #24]
 c006b94:	b90b      	cbnz	r3, c006b9a <__swbuf_r+0x12>
 c006b96:	f7ff fb7f 	bl	c006298 <__sinit>
 c006b9a:	4b21      	ldr	r3, [pc, #132]	; (c006c20 <__swbuf_r+0x98>)
 c006b9c:	429c      	cmp	r4, r3
 c006b9e:	d12b      	bne.n	c006bf8 <__swbuf_r+0x70>
 c006ba0:	686c      	ldr	r4, [r5, #4]
 c006ba2:	69a3      	ldr	r3, [r4, #24]
 c006ba4:	60a3      	str	r3, [r4, #8]
 c006ba6:	89a3      	ldrh	r3, [r4, #12]
 c006ba8:	071a      	lsls	r2, r3, #28
 c006baa:	d52f      	bpl.n	c006c0c <__swbuf_r+0x84>
 c006bac:	6923      	ldr	r3, [r4, #16]
 c006bae:	b36b      	cbz	r3, c006c0c <__swbuf_r+0x84>
 c006bb0:	6923      	ldr	r3, [r4, #16]
 c006bb2:	b2f6      	uxtb	r6, r6
 c006bb4:	6820      	ldr	r0, [r4, #0]
 c006bb6:	4637      	mov	r7, r6
 c006bb8:	1ac0      	subs	r0, r0, r3
 c006bba:	6963      	ldr	r3, [r4, #20]
 c006bbc:	4283      	cmp	r3, r0
 c006bbe:	dc04      	bgt.n	c006bca <__swbuf_r+0x42>
 c006bc0:	4621      	mov	r1, r4
 c006bc2:	4628      	mov	r0, r5
 c006bc4:	f000 f946 	bl	c006e54 <_fflush_r>
 c006bc8:	bb30      	cbnz	r0, c006c18 <__swbuf_r+0x90>
 c006bca:	68a3      	ldr	r3, [r4, #8]
 c006bcc:	3001      	adds	r0, #1
 c006bce:	3b01      	subs	r3, #1
 c006bd0:	60a3      	str	r3, [r4, #8]
 c006bd2:	6823      	ldr	r3, [r4, #0]
 c006bd4:	1c5a      	adds	r2, r3, #1
 c006bd6:	6022      	str	r2, [r4, #0]
 c006bd8:	701e      	strb	r6, [r3, #0]
 c006bda:	6963      	ldr	r3, [r4, #20]
 c006bdc:	4283      	cmp	r3, r0
 c006bde:	d004      	beq.n	c006bea <__swbuf_r+0x62>
 c006be0:	89a3      	ldrh	r3, [r4, #12]
 c006be2:	07db      	lsls	r3, r3, #31
 c006be4:	d506      	bpl.n	c006bf4 <__swbuf_r+0x6c>
 c006be6:	2e0a      	cmp	r6, #10
 c006be8:	d104      	bne.n	c006bf4 <__swbuf_r+0x6c>
 c006bea:	4621      	mov	r1, r4
 c006bec:	4628      	mov	r0, r5
 c006bee:	f000 f931 	bl	c006e54 <_fflush_r>
 c006bf2:	b988      	cbnz	r0, c006c18 <__swbuf_r+0x90>
 c006bf4:	4638      	mov	r0, r7
 c006bf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c006bf8:	4b0a      	ldr	r3, [pc, #40]	; (c006c24 <__swbuf_r+0x9c>)
 c006bfa:	429c      	cmp	r4, r3
 c006bfc:	d101      	bne.n	c006c02 <__swbuf_r+0x7a>
 c006bfe:	68ac      	ldr	r4, [r5, #8]
 c006c00:	e7cf      	b.n	c006ba2 <__swbuf_r+0x1a>
 c006c02:	4b09      	ldr	r3, [pc, #36]	; (c006c28 <__swbuf_r+0xa0>)
 c006c04:	429c      	cmp	r4, r3
 c006c06:	bf08      	it	eq
 c006c08:	68ec      	ldreq	r4, [r5, #12]
 c006c0a:	e7ca      	b.n	c006ba2 <__swbuf_r+0x1a>
 c006c0c:	4621      	mov	r1, r4
 c006c0e:	4628      	mov	r0, r5
 c006c10:	f000 f81e 	bl	c006c50 <__swsetup_r>
 c006c14:	2800      	cmp	r0, #0
 c006c16:	d0cb      	beq.n	c006bb0 <__swbuf_r+0x28>
 c006c18:	f04f 37ff 	mov.w	r7, #4294967295
 c006c1c:	e7ea      	b.n	c006bf4 <__swbuf_r+0x6c>
 c006c1e:	bf00      	nop
 c006c20:	0c0073dc 	.word	0x0c0073dc
 c006c24:	0c0073fc 	.word	0x0c0073fc
 c006c28:	0c0073bc 	.word	0x0c0073bc

0c006c2c <_write_r>:
 c006c2c:	b538      	push	{r3, r4, r5, lr}
 c006c2e:	4604      	mov	r4, r0
 c006c30:	4d06      	ldr	r5, [pc, #24]	; (c006c4c <_write_r+0x20>)
 c006c32:	4608      	mov	r0, r1
 c006c34:	4611      	mov	r1, r2
 c006c36:	2200      	movs	r2, #0
 c006c38:	602a      	str	r2, [r5, #0]
 c006c3a:	461a      	mov	r2, r3
 c006c3c:	f7fa fe6f 	bl	c00191e <_write>
 c006c40:	1c43      	adds	r3, r0, #1
 c006c42:	d102      	bne.n	c006c4a <_write_r+0x1e>
 c006c44:	682b      	ldr	r3, [r5, #0]
 c006c46:	b103      	cbz	r3, c006c4a <_write_r+0x1e>
 c006c48:	6023      	str	r3, [r4, #0]
 c006c4a:	bd38      	pop	{r3, r4, r5, pc}
 c006c4c:	30000b4c 	.word	0x30000b4c

0c006c50 <__swsetup_r>:
 c006c50:	4b32      	ldr	r3, [pc, #200]	; (c006d1c <__swsetup_r+0xcc>)
 c006c52:	b570      	push	{r4, r5, r6, lr}
 c006c54:	681d      	ldr	r5, [r3, #0]
 c006c56:	4606      	mov	r6, r0
 c006c58:	460c      	mov	r4, r1
 c006c5a:	b125      	cbz	r5, c006c66 <__swsetup_r+0x16>
 c006c5c:	69ab      	ldr	r3, [r5, #24]
 c006c5e:	b913      	cbnz	r3, c006c66 <__swsetup_r+0x16>
 c006c60:	4628      	mov	r0, r5
 c006c62:	f7ff fb19 	bl	c006298 <__sinit>
 c006c66:	4b2e      	ldr	r3, [pc, #184]	; (c006d20 <__swsetup_r+0xd0>)
 c006c68:	429c      	cmp	r4, r3
 c006c6a:	d10f      	bne.n	c006c8c <__swsetup_r+0x3c>
 c006c6c:	686c      	ldr	r4, [r5, #4]
 c006c6e:	89a3      	ldrh	r3, [r4, #12]
 c006c70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c006c74:	0719      	lsls	r1, r3, #28
 c006c76:	d42c      	bmi.n	c006cd2 <__swsetup_r+0x82>
 c006c78:	06dd      	lsls	r5, r3, #27
 c006c7a:	d411      	bmi.n	c006ca0 <__swsetup_r+0x50>
 c006c7c:	2309      	movs	r3, #9
 c006c7e:	6033      	str	r3, [r6, #0]
 c006c80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c006c84:	f04f 30ff 	mov.w	r0, #4294967295
 c006c88:	81a3      	strh	r3, [r4, #12]
 c006c8a:	e03e      	b.n	c006d0a <__swsetup_r+0xba>
 c006c8c:	4b25      	ldr	r3, [pc, #148]	; (c006d24 <__swsetup_r+0xd4>)
 c006c8e:	429c      	cmp	r4, r3
 c006c90:	d101      	bne.n	c006c96 <__swsetup_r+0x46>
 c006c92:	68ac      	ldr	r4, [r5, #8]
 c006c94:	e7eb      	b.n	c006c6e <__swsetup_r+0x1e>
 c006c96:	4b24      	ldr	r3, [pc, #144]	; (c006d28 <__swsetup_r+0xd8>)
 c006c98:	429c      	cmp	r4, r3
 c006c9a:	bf08      	it	eq
 c006c9c:	68ec      	ldreq	r4, [r5, #12]
 c006c9e:	e7e6      	b.n	c006c6e <__swsetup_r+0x1e>
 c006ca0:	0758      	lsls	r0, r3, #29
 c006ca2:	d512      	bpl.n	c006cca <__swsetup_r+0x7a>
 c006ca4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c006ca6:	b141      	cbz	r1, c006cba <__swsetup_r+0x6a>
 c006ca8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c006cac:	4299      	cmp	r1, r3
 c006cae:	d002      	beq.n	c006cb6 <__swsetup_r+0x66>
 c006cb0:	4630      	mov	r0, r6
 c006cb2:	f000 f99d 	bl	c006ff0 <_free_r>
 c006cb6:	2300      	movs	r3, #0
 c006cb8:	6363      	str	r3, [r4, #52]	; 0x34
 c006cba:	89a3      	ldrh	r3, [r4, #12]
 c006cbc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c006cc0:	81a3      	strh	r3, [r4, #12]
 c006cc2:	2300      	movs	r3, #0
 c006cc4:	6063      	str	r3, [r4, #4]
 c006cc6:	6923      	ldr	r3, [r4, #16]
 c006cc8:	6023      	str	r3, [r4, #0]
 c006cca:	89a3      	ldrh	r3, [r4, #12]
 c006ccc:	f043 0308 	orr.w	r3, r3, #8
 c006cd0:	81a3      	strh	r3, [r4, #12]
 c006cd2:	6923      	ldr	r3, [r4, #16]
 c006cd4:	b94b      	cbnz	r3, c006cea <__swsetup_r+0x9a>
 c006cd6:	89a3      	ldrh	r3, [r4, #12]
 c006cd8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c006cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006ce0:	d003      	beq.n	c006cea <__swsetup_r+0x9a>
 c006ce2:	4621      	mov	r1, r4
 c006ce4:	4630      	mov	r0, r6
 c006ce6:	f000 f929 	bl	c006f3c <__smakebuf_r>
 c006cea:	89a0      	ldrh	r0, [r4, #12]
 c006cec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c006cf0:	f010 0301 	ands.w	r3, r0, #1
 c006cf4:	d00a      	beq.n	c006d0c <__swsetup_r+0xbc>
 c006cf6:	2300      	movs	r3, #0
 c006cf8:	60a3      	str	r3, [r4, #8]
 c006cfa:	6963      	ldr	r3, [r4, #20]
 c006cfc:	425b      	negs	r3, r3
 c006cfe:	61a3      	str	r3, [r4, #24]
 c006d00:	6923      	ldr	r3, [r4, #16]
 c006d02:	b943      	cbnz	r3, c006d16 <__swsetup_r+0xc6>
 c006d04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c006d08:	d1ba      	bne.n	c006c80 <__swsetup_r+0x30>
 c006d0a:	bd70      	pop	{r4, r5, r6, pc}
 c006d0c:	0781      	lsls	r1, r0, #30
 c006d0e:	bf58      	it	pl
 c006d10:	6963      	ldrpl	r3, [r4, #20]
 c006d12:	60a3      	str	r3, [r4, #8]
 c006d14:	e7f4      	b.n	c006d00 <__swsetup_r+0xb0>
 c006d16:	2000      	movs	r0, #0
 c006d18:	e7f7      	b.n	c006d0a <__swsetup_r+0xba>
 c006d1a:	bf00      	nop
 c006d1c:	3000000c 	.word	0x3000000c
 c006d20:	0c0073dc 	.word	0x0c0073dc
 c006d24:	0c0073fc 	.word	0x0c0073fc
 c006d28:	0c0073bc 	.word	0x0c0073bc

0c006d2c <_close_r>:
 c006d2c:	b538      	push	{r3, r4, r5, lr}
 c006d2e:	2300      	movs	r3, #0
 c006d30:	4d05      	ldr	r5, [pc, #20]	; (c006d48 <_close_r+0x1c>)
 c006d32:	4604      	mov	r4, r0
 c006d34:	4608      	mov	r0, r1
 c006d36:	602b      	str	r3, [r5, #0]
 c006d38:	f7fa fe0d 	bl	c001956 <_close>
 c006d3c:	1c43      	adds	r3, r0, #1
 c006d3e:	d102      	bne.n	c006d46 <_close_r+0x1a>
 c006d40:	682b      	ldr	r3, [r5, #0]
 c006d42:	b103      	cbz	r3, c006d46 <_close_r+0x1a>
 c006d44:	6023      	str	r3, [r4, #0]
 c006d46:	bd38      	pop	{r3, r4, r5, pc}
 c006d48:	30000b4c 	.word	0x30000b4c

0c006d4c <__sflush_r>:
 c006d4c:	898a      	ldrh	r2, [r1, #12]
 c006d4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c006d52:	4605      	mov	r5, r0
 c006d54:	0710      	lsls	r0, r2, #28
 c006d56:	460c      	mov	r4, r1
 c006d58:	d458      	bmi.n	c006e0c <__sflush_r+0xc0>
 c006d5a:	684b      	ldr	r3, [r1, #4]
 c006d5c:	2b00      	cmp	r3, #0
 c006d5e:	dc05      	bgt.n	c006d6c <__sflush_r+0x20>
 c006d60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c006d62:	2b00      	cmp	r3, #0
 c006d64:	dc02      	bgt.n	c006d6c <__sflush_r+0x20>
 c006d66:	2000      	movs	r0, #0
 c006d68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c006d6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c006d6e:	2e00      	cmp	r6, #0
 c006d70:	d0f9      	beq.n	c006d66 <__sflush_r+0x1a>
 c006d72:	2300      	movs	r3, #0
 c006d74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c006d78:	682f      	ldr	r7, [r5, #0]
 c006d7a:	602b      	str	r3, [r5, #0]
 c006d7c:	d032      	beq.n	c006de4 <__sflush_r+0x98>
 c006d7e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c006d80:	89a3      	ldrh	r3, [r4, #12]
 c006d82:	075a      	lsls	r2, r3, #29
 c006d84:	d505      	bpl.n	c006d92 <__sflush_r+0x46>
 c006d86:	6863      	ldr	r3, [r4, #4]
 c006d88:	1ac0      	subs	r0, r0, r3
 c006d8a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c006d8c:	b10b      	cbz	r3, c006d92 <__sflush_r+0x46>
 c006d8e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c006d90:	1ac0      	subs	r0, r0, r3
 c006d92:	2300      	movs	r3, #0
 c006d94:	4602      	mov	r2, r0
 c006d96:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c006d98:	4628      	mov	r0, r5
 c006d9a:	6a21      	ldr	r1, [r4, #32]
 c006d9c:	47b0      	blx	r6
 c006d9e:	1c43      	adds	r3, r0, #1
 c006da0:	89a3      	ldrh	r3, [r4, #12]
 c006da2:	d106      	bne.n	c006db2 <__sflush_r+0x66>
 c006da4:	6829      	ldr	r1, [r5, #0]
 c006da6:	291d      	cmp	r1, #29
 c006da8:	d82c      	bhi.n	c006e04 <__sflush_r+0xb8>
 c006daa:	4a29      	ldr	r2, [pc, #164]	; (c006e50 <__sflush_r+0x104>)
 c006dac:	40ca      	lsrs	r2, r1
 c006dae:	07d6      	lsls	r6, r2, #31
 c006db0:	d528      	bpl.n	c006e04 <__sflush_r+0xb8>
 c006db2:	2200      	movs	r2, #0
 c006db4:	04d9      	lsls	r1, r3, #19
 c006db6:	6062      	str	r2, [r4, #4]
 c006db8:	6922      	ldr	r2, [r4, #16]
 c006dba:	6022      	str	r2, [r4, #0]
 c006dbc:	d504      	bpl.n	c006dc8 <__sflush_r+0x7c>
 c006dbe:	1c42      	adds	r2, r0, #1
 c006dc0:	d101      	bne.n	c006dc6 <__sflush_r+0x7a>
 c006dc2:	682b      	ldr	r3, [r5, #0]
 c006dc4:	b903      	cbnz	r3, c006dc8 <__sflush_r+0x7c>
 c006dc6:	6560      	str	r0, [r4, #84]	; 0x54
 c006dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c006dca:	602f      	str	r7, [r5, #0]
 c006dcc:	2900      	cmp	r1, #0
 c006dce:	d0ca      	beq.n	c006d66 <__sflush_r+0x1a>
 c006dd0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c006dd4:	4299      	cmp	r1, r3
 c006dd6:	d002      	beq.n	c006dde <__sflush_r+0x92>
 c006dd8:	4628      	mov	r0, r5
 c006dda:	f000 f909 	bl	c006ff0 <_free_r>
 c006dde:	2000      	movs	r0, #0
 c006de0:	6360      	str	r0, [r4, #52]	; 0x34
 c006de2:	e7c1      	b.n	c006d68 <__sflush_r+0x1c>
 c006de4:	6a21      	ldr	r1, [r4, #32]
 c006de6:	2301      	movs	r3, #1
 c006de8:	4628      	mov	r0, r5
 c006dea:	47b0      	blx	r6
 c006dec:	1c41      	adds	r1, r0, #1
 c006dee:	d1c7      	bne.n	c006d80 <__sflush_r+0x34>
 c006df0:	682b      	ldr	r3, [r5, #0]
 c006df2:	2b00      	cmp	r3, #0
 c006df4:	d0c4      	beq.n	c006d80 <__sflush_r+0x34>
 c006df6:	2b1d      	cmp	r3, #29
 c006df8:	d001      	beq.n	c006dfe <__sflush_r+0xb2>
 c006dfa:	2b16      	cmp	r3, #22
 c006dfc:	d101      	bne.n	c006e02 <__sflush_r+0xb6>
 c006dfe:	602f      	str	r7, [r5, #0]
 c006e00:	e7b1      	b.n	c006d66 <__sflush_r+0x1a>
 c006e02:	89a3      	ldrh	r3, [r4, #12]
 c006e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c006e08:	81a3      	strh	r3, [r4, #12]
 c006e0a:	e7ad      	b.n	c006d68 <__sflush_r+0x1c>
 c006e0c:	690f      	ldr	r7, [r1, #16]
 c006e0e:	2f00      	cmp	r7, #0
 c006e10:	d0a9      	beq.n	c006d66 <__sflush_r+0x1a>
 c006e12:	0793      	lsls	r3, r2, #30
 c006e14:	680e      	ldr	r6, [r1, #0]
 c006e16:	600f      	str	r7, [r1, #0]
 c006e18:	bf0c      	ite	eq
 c006e1a:	694b      	ldreq	r3, [r1, #20]
 c006e1c:	2300      	movne	r3, #0
 c006e1e:	eba6 0807 	sub.w	r8, r6, r7
 c006e22:	608b      	str	r3, [r1, #8]
 c006e24:	f1b8 0f00 	cmp.w	r8, #0
 c006e28:	dd9d      	ble.n	c006d66 <__sflush_r+0x1a>
 c006e2a:	4643      	mov	r3, r8
 c006e2c:	463a      	mov	r2, r7
 c006e2e:	6a21      	ldr	r1, [r4, #32]
 c006e30:	4628      	mov	r0, r5
 c006e32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c006e34:	47b0      	blx	r6
 c006e36:	2800      	cmp	r0, #0
 c006e38:	dc06      	bgt.n	c006e48 <__sflush_r+0xfc>
 c006e3a:	89a3      	ldrh	r3, [r4, #12]
 c006e3c:	f04f 30ff 	mov.w	r0, #4294967295
 c006e40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c006e44:	81a3      	strh	r3, [r4, #12]
 c006e46:	e78f      	b.n	c006d68 <__sflush_r+0x1c>
 c006e48:	4407      	add	r7, r0
 c006e4a:	eba8 0800 	sub.w	r8, r8, r0
 c006e4e:	e7e9      	b.n	c006e24 <__sflush_r+0xd8>
 c006e50:	20400001 	.word	0x20400001

0c006e54 <_fflush_r>:
 c006e54:	b538      	push	{r3, r4, r5, lr}
 c006e56:	690b      	ldr	r3, [r1, #16]
 c006e58:	4605      	mov	r5, r0
 c006e5a:	460c      	mov	r4, r1
 c006e5c:	b913      	cbnz	r3, c006e64 <_fflush_r+0x10>
 c006e5e:	2500      	movs	r5, #0
 c006e60:	4628      	mov	r0, r5
 c006e62:	bd38      	pop	{r3, r4, r5, pc}
 c006e64:	b118      	cbz	r0, c006e6e <_fflush_r+0x1a>
 c006e66:	6983      	ldr	r3, [r0, #24]
 c006e68:	b90b      	cbnz	r3, c006e6e <_fflush_r+0x1a>
 c006e6a:	f7ff fa15 	bl	c006298 <__sinit>
 c006e6e:	4b14      	ldr	r3, [pc, #80]	; (c006ec0 <_fflush_r+0x6c>)
 c006e70:	429c      	cmp	r4, r3
 c006e72:	d11b      	bne.n	c006eac <_fflush_r+0x58>
 c006e74:	686c      	ldr	r4, [r5, #4]
 c006e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c006e7a:	2b00      	cmp	r3, #0
 c006e7c:	d0ef      	beq.n	c006e5e <_fflush_r+0xa>
 c006e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c006e80:	07d0      	lsls	r0, r2, #31
 c006e82:	d404      	bmi.n	c006e8e <_fflush_r+0x3a>
 c006e84:	0599      	lsls	r1, r3, #22
 c006e86:	d402      	bmi.n	c006e8e <_fflush_r+0x3a>
 c006e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c006e8a:	f7ff faa3 	bl	c0063d4 <__retarget_lock_acquire_recursive>
 c006e8e:	4628      	mov	r0, r5
 c006e90:	4621      	mov	r1, r4
 c006e92:	f7ff ff5b 	bl	c006d4c <__sflush_r>
 c006e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c006e98:	4605      	mov	r5, r0
 c006e9a:	07da      	lsls	r2, r3, #31
 c006e9c:	d4e0      	bmi.n	c006e60 <_fflush_r+0xc>
 c006e9e:	89a3      	ldrh	r3, [r4, #12]
 c006ea0:	059b      	lsls	r3, r3, #22
 c006ea2:	d4dd      	bmi.n	c006e60 <_fflush_r+0xc>
 c006ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c006ea6:	f7ff fa96 	bl	c0063d6 <__retarget_lock_release_recursive>
 c006eaa:	e7d9      	b.n	c006e60 <_fflush_r+0xc>
 c006eac:	4b05      	ldr	r3, [pc, #20]	; (c006ec4 <_fflush_r+0x70>)
 c006eae:	429c      	cmp	r4, r3
 c006eb0:	d101      	bne.n	c006eb6 <_fflush_r+0x62>
 c006eb2:	68ac      	ldr	r4, [r5, #8]
 c006eb4:	e7df      	b.n	c006e76 <_fflush_r+0x22>
 c006eb6:	4b04      	ldr	r3, [pc, #16]	; (c006ec8 <_fflush_r+0x74>)
 c006eb8:	429c      	cmp	r4, r3
 c006eba:	bf08      	it	eq
 c006ebc:	68ec      	ldreq	r4, [r5, #12]
 c006ebe:	e7da      	b.n	c006e76 <_fflush_r+0x22>
 c006ec0:	0c0073dc 	.word	0x0c0073dc
 c006ec4:	0c0073fc 	.word	0x0c0073fc
 c006ec8:	0c0073bc 	.word	0x0c0073bc

0c006ecc <_lseek_r>:
 c006ecc:	b538      	push	{r3, r4, r5, lr}
 c006ece:	4604      	mov	r4, r0
 c006ed0:	4d06      	ldr	r5, [pc, #24]	; (c006eec <_lseek_r+0x20>)
 c006ed2:	4608      	mov	r0, r1
 c006ed4:	4611      	mov	r1, r2
 c006ed6:	2200      	movs	r2, #0
 c006ed8:	602a      	str	r2, [r5, #0]
 c006eda:	461a      	mov	r2, r3
 c006edc:	f7fa fd62 	bl	c0019a4 <_lseek>
 c006ee0:	1c43      	adds	r3, r0, #1
 c006ee2:	d102      	bne.n	c006eea <_lseek_r+0x1e>
 c006ee4:	682b      	ldr	r3, [r5, #0]
 c006ee6:	b103      	cbz	r3, c006eea <_lseek_r+0x1e>
 c006ee8:	6023      	str	r3, [r4, #0]
 c006eea:	bd38      	pop	{r3, r4, r5, pc}
 c006eec:	30000b4c 	.word	0x30000b4c

0c006ef0 <__swhatbuf_r>:
 c006ef0:	b570      	push	{r4, r5, r6, lr}
 c006ef2:	460e      	mov	r6, r1
 c006ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006ef8:	b096      	sub	sp, #88	; 0x58
 c006efa:	4614      	mov	r4, r2
 c006efc:	2900      	cmp	r1, #0
 c006efe:	461d      	mov	r5, r3
 c006f00:	da08      	bge.n	c006f14 <__swhatbuf_r+0x24>
 c006f02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c006f06:	2200      	movs	r2, #0
 c006f08:	602a      	str	r2, [r5, #0]
 c006f0a:	061a      	lsls	r2, r3, #24
 c006f0c:	d410      	bmi.n	c006f30 <__swhatbuf_r+0x40>
 c006f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c006f12:	e00e      	b.n	c006f32 <__swhatbuf_r+0x42>
 c006f14:	466a      	mov	r2, sp
 c006f16:	f000 f8c9 	bl	c0070ac <_fstat_r>
 c006f1a:	2800      	cmp	r0, #0
 c006f1c:	dbf1      	blt.n	c006f02 <__swhatbuf_r+0x12>
 c006f1e:	9a01      	ldr	r2, [sp, #4]
 c006f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c006f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c006f28:	425a      	negs	r2, r3
 c006f2a:	415a      	adcs	r2, r3
 c006f2c:	602a      	str	r2, [r5, #0]
 c006f2e:	e7ee      	b.n	c006f0e <__swhatbuf_r+0x1e>
 c006f30:	2340      	movs	r3, #64	; 0x40
 c006f32:	2000      	movs	r0, #0
 c006f34:	6023      	str	r3, [r4, #0]
 c006f36:	b016      	add	sp, #88	; 0x58
 c006f38:	bd70      	pop	{r4, r5, r6, pc}
	...

0c006f3c <__smakebuf_r>:
 c006f3c:	898b      	ldrh	r3, [r1, #12]
 c006f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c006f40:	079d      	lsls	r5, r3, #30
 c006f42:	4606      	mov	r6, r0
 c006f44:	460c      	mov	r4, r1
 c006f46:	d507      	bpl.n	c006f58 <__smakebuf_r+0x1c>
 c006f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c006f4c:	6023      	str	r3, [r4, #0]
 c006f4e:	6123      	str	r3, [r4, #16]
 c006f50:	2301      	movs	r3, #1
 c006f52:	6163      	str	r3, [r4, #20]
 c006f54:	b002      	add	sp, #8
 c006f56:	bd70      	pop	{r4, r5, r6, pc}
 c006f58:	ab01      	add	r3, sp, #4
 c006f5a:	466a      	mov	r2, sp
 c006f5c:	f7ff ffc8 	bl	c006ef0 <__swhatbuf_r>
 c006f60:	9900      	ldr	r1, [sp, #0]
 c006f62:	4605      	mov	r5, r0
 c006f64:	4630      	mov	r0, r6
 c006f66:	f7ff fa57 	bl	c006418 <_malloc_r>
 c006f6a:	b948      	cbnz	r0, c006f80 <__smakebuf_r+0x44>
 c006f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c006f70:	059a      	lsls	r2, r3, #22
 c006f72:	d4ef      	bmi.n	c006f54 <__smakebuf_r+0x18>
 c006f74:	f023 0303 	bic.w	r3, r3, #3
 c006f78:	f043 0302 	orr.w	r3, r3, #2
 c006f7c:	81a3      	strh	r3, [r4, #12]
 c006f7e:	e7e3      	b.n	c006f48 <__smakebuf_r+0xc>
 c006f80:	4b0d      	ldr	r3, [pc, #52]	; (c006fb8 <__smakebuf_r+0x7c>)
 c006f82:	62b3      	str	r3, [r6, #40]	; 0x28
 c006f84:	89a3      	ldrh	r3, [r4, #12]
 c006f86:	6020      	str	r0, [r4, #0]
 c006f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006f8c:	6120      	str	r0, [r4, #16]
 c006f8e:	81a3      	strh	r3, [r4, #12]
 c006f90:	9b00      	ldr	r3, [sp, #0]
 c006f92:	6163      	str	r3, [r4, #20]
 c006f94:	9b01      	ldr	r3, [sp, #4]
 c006f96:	b15b      	cbz	r3, c006fb0 <__smakebuf_r+0x74>
 c006f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c006f9c:	4630      	mov	r0, r6
 c006f9e:	f000 f897 	bl	c0070d0 <_isatty_r>
 c006fa2:	b128      	cbz	r0, c006fb0 <__smakebuf_r+0x74>
 c006fa4:	89a3      	ldrh	r3, [r4, #12]
 c006fa6:	f023 0303 	bic.w	r3, r3, #3
 c006faa:	f043 0301 	orr.w	r3, r3, #1
 c006fae:	81a3      	strh	r3, [r4, #12]
 c006fb0:	89a0      	ldrh	r0, [r4, #12]
 c006fb2:	4305      	orrs	r5, r0
 c006fb4:	81a5      	strh	r5, [r4, #12]
 c006fb6:	e7cd      	b.n	c006f54 <__smakebuf_r+0x18>
 c006fb8:	0c006231 	.word	0x0c006231

0c006fbc <memchr>:
 c006fbc:	b2c9      	uxtb	r1, r1
 c006fbe:	4402      	add	r2, r0
 c006fc0:	b510      	push	{r4, lr}
 c006fc2:	4290      	cmp	r0, r2
 c006fc4:	4603      	mov	r3, r0
 c006fc6:	d101      	bne.n	c006fcc <memchr+0x10>
 c006fc8:	2300      	movs	r3, #0
 c006fca:	e003      	b.n	c006fd4 <memchr+0x18>
 c006fcc:	781c      	ldrb	r4, [r3, #0]
 c006fce:	3001      	adds	r0, #1
 c006fd0:	428c      	cmp	r4, r1
 c006fd2:	d1f6      	bne.n	c006fc2 <memchr+0x6>
 c006fd4:	4618      	mov	r0, r3
 c006fd6:	bd10      	pop	{r4, pc}

0c006fd8 <__malloc_lock>:
 c006fd8:	4801      	ldr	r0, [pc, #4]	; (c006fe0 <__malloc_lock+0x8>)
 c006fda:	f7ff b9fb 	b.w	c0063d4 <__retarget_lock_acquire_recursive>
 c006fde:	bf00      	nop
 c006fe0:	30000b40 	.word	0x30000b40

0c006fe4 <__malloc_unlock>:
 c006fe4:	4801      	ldr	r0, [pc, #4]	; (c006fec <__malloc_unlock+0x8>)
 c006fe6:	f7ff b9f6 	b.w	c0063d6 <__retarget_lock_release_recursive>
 c006fea:	bf00      	nop
 c006fec:	30000b40 	.word	0x30000b40

0c006ff0 <_free_r>:
 c006ff0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c006ff2:	2900      	cmp	r1, #0
 c006ff4:	d043      	beq.n	c00707e <_free_r+0x8e>
 c006ff6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c006ffa:	1f0c      	subs	r4, r1, #4
 c006ffc:	9001      	str	r0, [sp, #4]
 c006ffe:	2b00      	cmp	r3, #0
 c007000:	bfb8      	it	lt
 c007002:	18e4      	addlt	r4, r4, r3
 c007004:	f7ff ffe8 	bl	c006fd8 <__malloc_lock>
 c007008:	4a1e      	ldr	r2, [pc, #120]	; (c007084 <_free_r+0x94>)
 c00700a:	9801      	ldr	r0, [sp, #4]
 c00700c:	6813      	ldr	r3, [r2, #0]
 c00700e:	b933      	cbnz	r3, c00701e <_free_r+0x2e>
 c007010:	6063      	str	r3, [r4, #4]
 c007012:	6014      	str	r4, [r2, #0]
 c007014:	b003      	add	sp, #12
 c007016:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c00701a:	f7ff bfe3 	b.w	c006fe4 <__malloc_unlock>
 c00701e:	42a3      	cmp	r3, r4
 c007020:	d908      	bls.n	c007034 <_free_r+0x44>
 c007022:	6825      	ldr	r5, [r4, #0]
 c007024:	1961      	adds	r1, r4, r5
 c007026:	428b      	cmp	r3, r1
 c007028:	bf01      	itttt	eq
 c00702a:	6819      	ldreq	r1, [r3, #0]
 c00702c:	685b      	ldreq	r3, [r3, #4]
 c00702e:	1949      	addeq	r1, r1, r5
 c007030:	6021      	streq	r1, [r4, #0]
 c007032:	e7ed      	b.n	c007010 <_free_r+0x20>
 c007034:	461a      	mov	r2, r3
 c007036:	685b      	ldr	r3, [r3, #4]
 c007038:	b10b      	cbz	r3, c00703e <_free_r+0x4e>
 c00703a:	42a3      	cmp	r3, r4
 c00703c:	d9fa      	bls.n	c007034 <_free_r+0x44>
 c00703e:	6811      	ldr	r1, [r2, #0]
 c007040:	1855      	adds	r5, r2, r1
 c007042:	42a5      	cmp	r5, r4
 c007044:	d10b      	bne.n	c00705e <_free_r+0x6e>
 c007046:	6824      	ldr	r4, [r4, #0]
 c007048:	4421      	add	r1, r4
 c00704a:	1854      	adds	r4, r2, r1
 c00704c:	6011      	str	r1, [r2, #0]
 c00704e:	42a3      	cmp	r3, r4
 c007050:	d1e0      	bne.n	c007014 <_free_r+0x24>
 c007052:	681c      	ldr	r4, [r3, #0]
 c007054:	685b      	ldr	r3, [r3, #4]
 c007056:	4421      	add	r1, r4
 c007058:	6053      	str	r3, [r2, #4]
 c00705a:	6011      	str	r1, [r2, #0]
 c00705c:	e7da      	b.n	c007014 <_free_r+0x24>
 c00705e:	d902      	bls.n	c007066 <_free_r+0x76>
 c007060:	230c      	movs	r3, #12
 c007062:	6003      	str	r3, [r0, #0]
 c007064:	e7d6      	b.n	c007014 <_free_r+0x24>
 c007066:	6825      	ldr	r5, [r4, #0]
 c007068:	1961      	adds	r1, r4, r5
 c00706a:	428b      	cmp	r3, r1
 c00706c:	bf02      	ittt	eq
 c00706e:	6819      	ldreq	r1, [r3, #0]
 c007070:	685b      	ldreq	r3, [r3, #4]
 c007072:	1949      	addeq	r1, r1, r5
 c007074:	6063      	str	r3, [r4, #4]
 c007076:	bf08      	it	eq
 c007078:	6021      	streq	r1, [r4, #0]
 c00707a:	6054      	str	r4, [r2, #4]
 c00707c:	e7ca      	b.n	c007014 <_free_r+0x24>
 c00707e:	b003      	add	sp, #12
 c007080:	bd30      	pop	{r4, r5, pc}
 c007082:	bf00      	nop
 c007084:	30000b44 	.word	0x30000b44

0c007088 <_read_r>:
 c007088:	b538      	push	{r3, r4, r5, lr}
 c00708a:	4604      	mov	r4, r0
 c00708c:	4d06      	ldr	r5, [pc, #24]	; (c0070a8 <_read_r+0x20>)
 c00708e:	4608      	mov	r0, r1
 c007090:	4611      	mov	r1, r2
 c007092:	2200      	movs	r2, #0
 c007094:	602a      	str	r2, [r5, #0]
 c007096:	461a      	mov	r2, r3
 c007098:	f7fa fc24 	bl	c0018e4 <_read>
 c00709c:	1c43      	adds	r3, r0, #1
 c00709e:	d102      	bne.n	c0070a6 <_read_r+0x1e>
 c0070a0:	682b      	ldr	r3, [r5, #0]
 c0070a2:	b103      	cbz	r3, c0070a6 <_read_r+0x1e>
 c0070a4:	6023      	str	r3, [r4, #0]
 c0070a6:	bd38      	pop	{r3, r4, r5, pc}
 c0070a8:	30000b4c 	.word	0x30000b4c

0c0070ac <_fstat_r>:
 c0070ac:	b538      	push	{r3, r4, r5, lr}
 c0070ae:	2300      	movs	r3, #0
 c0070b0:	4d06      	ldr	r5, [pc, #24]	; (c0070cc <_fstat_r+0x20>)
 c0070b2:	4604      	mov	r4, r0
 c0070b4:	4608      	mov	r0, r1
 c0070b6:	4611      	mov	r1, r2
 c0070b8:	602b      	str	r3, [r5, #0]
 c0070ba:	f7fa fc58 	bl	c00196e <_fstat>
 c0070be:	1c43      	adds	r3, r0, #1
 c0070c0:	d102      	bne.n	c0070c8 <_fstat_r+0x1c>
 c0070c2:	682b      	ldr	r3, [r5, #0]
 c0070c4:	b103      	cbz	r3, c0070c8 <_fstat_r+0x1c>
 c0070c6:	6023      	str	r3, [r4, #0]
 c0070c8:	bd38      	pop	{r3, r4, r5, pc}
 c0070ca:	bf00      	nop
 c0070cc:	30000b4c 	.word	0x30000b4c

0c0070d0 <_isatty_r>:
 c0070d0:	b538      	push	{r3, r4, r5, lr}
 c0070d2:	2300      	movs	r3, #0
 c0070d4:	4d05      	ldr	r5, [pc, #20]	; (c0070ec <_isatty_r+0x1c>)
 c0070d6:	4604      	mov	r4, r0
 c0070d8:	4608      	mov	r0, r1
 c0070da:	602b      	str	r3, [r5, #0]
 c0070dc:	f7fa fc57 	bl	c00198e <_isatty>
 c0070e0:	1c43      	adds	r3, r0, #1
 c0070e2:	d102      	bne.n	c0070ea <_isatty_r+0x1a>
 c0070e4:	682b      	ldr	r3, [r5, #0]
 c0070e6:	b103      	cbz	r3, c0070ea <_isatty_r+0x1a>
 c0070e8:	6023      	str	r3, [r4, #0]
 c0070ea:	bd38      	pop	{r3, r4, r5, pc}
 c0070ec:	30000b4c 	.word	0x30000b4c

0c0070f0 <_init>:
 c0070f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0070f2:	bf00      	nop
 c0070f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0070f6:	bc08      	pop	{r3}
 c0070f8:	469e      	mov	lr, r3
 c0070fa:	4770      	bx	lr

0c0070fc <_fini>:
 c0070fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0070fe:	bf00      	nop
 c007100:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c007102:	bc08      	pop	{r3}
 c007104:	469e      	mov	lr, r3
 c007106:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_print_Buffer>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b84c 	b.w	c0010a0 <__acle_se_SECURE_print_Buffer>

0c03e008 <SECURE_SystemCoreClockUpdate>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c3 be54 	b.w	c001cb8 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e010 <SECURE_DMA_NonSecure_Mem_Transfer>:
 c03e010:	e97f e97f 	sg
 c03e014:	f7c2 bfce 	b.w	c000fb4 <__acle_se_SECURE_DMA_NonSecure_Mem_Transfer>

0c03e018 <SECURE_SPI_Toggle_Comm>:
 c03e018:	e97f e97f 	sg
 c03e01c:	f7c2 bf14 	b.w	c000e48 <__acle_se_SECURE_SPI_Toggle_Comm>

0c03e020 <SECURE_RegisterCallback>:
 c03e020:	e97f e97f 	sg
 c03e024:	f7c3 b8e8 	b.w	c0011f8 <__acle_se_SECURE_RegisterCallback>

0c03e028 <SECURE_DMA_Fetch_NonSecure_Mem>:
 c03e028:	e97f e97f 	sg
 c03e02c:	f7c2 bf5c 	b.w	c000ee8 <__acle_se_SECURE_DMA_Fetch_NonSecure_Mem>

0c03e030 <SECURE_DATA_Last_Buffer_Compare>:
 c03e030:	e97f e97f 	sg
 c03e034:	f7c3 b936 	b.w	c0012a4 <__acle_se_SECURE_DATA_Last_Buffer_Compare>

0c03e038 <SECURE_print_Log>:
 c03e038:	e97f e97f 	sg
 c03e03c:	f7c3 b89c 	b.w	c001178 <__acle_se_SECURE_print_Log>

0c03e040 <SECURE_SPI_Send_Data>:
 c03e040:	e97f e97f 	sg
 c03e044:	f7c2 be96 	b.w	c000d74 <__acle_se_SECURE_SPI_Send_Data>
	...
