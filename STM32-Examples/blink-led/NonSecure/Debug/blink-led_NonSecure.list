
blink-led_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cd8  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08048ed0  08048ed0  00018ed0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08048f28  08048f28  0002800c  2**0
                  CONTENTS
  4 .ARM          00000000  08048f28  08048f28  0002800c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08048f28  08048f28  0002800c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08048f28  08048f28  00018f28  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08048f2c  08048f2c  00018f2c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20018000  08048f30  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000007f0  2001800c  08048f3c  0002800c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200187fc  08048f3c  000287fc  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  0002800c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000274ea  00000000  00000000  00028042  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000042ca  00000000  00000000  0004f52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002318  00000000  00000000  000537f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00002158  00000000  00000000  00055b10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00031abc  00000000  00000000  00057c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028559  00000000  00000000  00089724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0013ebe5  00000000  00000000  000b1c7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001f0862  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009964  00000000  00000000  001f08b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	2001800c 	.word	0x2001800c
 8040214:	00000000 	.word	0x00000000
 8040218:	08048ea4 	.word	0x08048ea4

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018010 	.word	0x20018010
 8040234:	08048ea4 	.word	0x08048ea4

08040238 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8040238:	b480      	push	{r7}
 804023a:	b085      	sub	sp, #20
 804023c:	af00      	add	r7, sp, #0
 804023e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8040240:	4b08      	ldr	r3, [pc, #32]	; (8040264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8040242:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8040244:	4907      	ldr	r1, [pc, #28]	; (8040264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8040246:	687b      	ldr	r3, [r7, #4]
 8040248:	4313      	orrs	r3, r2
 804024a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 804024c:	4b05      	ldr	r3, [pc, #20]	; (8040264 <LL_AHB2_GRP1_EnableClock+0x2c>)
 804024e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8040250:	687b      	ldr	r3, [r7, #4]
 8040252:	4013      	ands	r3, r2
 8040254:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8040256:	68fb      	ldr	r3, [r7, #12]
}
 8040258:	bf00      	nop
 804025a:	3714      	adds	r7, #20
 804025c:	46bd      	mov	sp, r7
 804025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040262:	4770      	bx	lr
 8040264:	40021000 	.word	0x40021000

08040268 <LL_APB1_GRP2_EnableClock>:
  *         @arg @ref LL_APB1_GRP2_PERIPH_USB
  *         @arg @ref LL_APB1_GRP2_PERIPH_UCPD1
  * @retval None
  */
__STATIC_INLINE void LL_APB1_GRP2_EnableClock(uint32_t Periphs)
{
 8040268:	b480      	push	{r7}
 804026a:	b085      	sub	sp, #20
 804026c:	af00      	add	r7, sp, #0
 804026e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR2, Periphs);
 8040270:	4b08      	ldr	r3, [pc, #32]	; (8040294 <LL_APB1_GRP2_EnableClock+0x2c>)
 8040272:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8040274:	4907      	ldr	r1, [pc, #28]	; (8040294 <LL_APB1_GRP2_EnableClock+0x2c>)
 8040276:	687b      	ldr	r3, [r7, #4]
 8040278:	4313      	orrs	r3, r2
 804027a:	65cb      	str	r3, [r1, #92]	; 0x5c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR2, Periphs);
 804027c:	4b05      	ldr	r3, [pc, #20]	; (8040294 <LL_APB1_GRP2_EnableClock+0x2c>)
 804027e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8040280:	687b      	ldr	r3, [r7, #4]
 8040282:	4013      	ands	r3, r2
 8040284:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8040286:	68fb      	ldr	r3, [r7, #12]
}
 8040288:	bf00      	nop
 804028a:	3714      	adds	r7, #20
 804028c:	46bd      	mov	sp, r7
 804028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040292:	4770      	bx	lr
 8040294:	40021000 	.word	0x40021000

08040298 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8040298:	b580      	push	{r7, lr}
 804029a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 804029c:	f001 f9a3 	bl	80415e6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80402a0:	f000 f82a 	bl	80402f8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80402a4:	f000 f88e 	bl	80403c4 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80402a8:	f000 fc8e 	bl	8040bc8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80402ac:	f000 f8ba 	bl	8040424 <MX_ADC1_Init>
  MX_DFSDM1_Init();
 80402b0:	f000 f932 	bl	8040518 <MX_DFSDM1_Init>
  MX_FMC_Init();
 80402b4:	f000 fc1e 	bl	8040af4 <MX_FMC_Init>
  MX_I2C1_Init();
 80402b8:	f000 f9ce 	bl	8040658 <MX_I2C1_Init>
  MX_OCTOSPI1_Init();
 80402bc:	f000 fa0c 	bl	80406d8 <MX_OCTOSPI1_Init>
  MX_SAI1_Init();
 80402c0:	f000 fa48 	bl	8040754 <MX_SAI1_Init>
  MX_SDMMC1_SD_Init();
 80402c4:	f000 fae2 	bl	804088c <MX_SDMMC1_SD_Init>
  MX_SPI1_Init();
 80402c8:	f000 fb04 	bl	80408d4 <MX_SPI1_Init>
  MX_TIM4_Init();
 80402cc:	f000 fb3e 	bl	804094c <MX_TIM4_Init>
  MX_TIM16_Init();
 80402d0:	f000 fb8c 	bl	80409ec <MX_TIM16_Init>
  MX_UCPD1_Init();
 80402d4:	f000 fbb0 	bl	8040a38 <MX_UCPD1_Init>
  MX_USB_PCD_Init();
 80402d8:	f000 fbe4 	bl	8040aa4 <MX_USB_PCD_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80402dc:	2201      	movs	r2, #1
 80402de:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80402e2:	4804      	ldr	r0, [pc, #16]	; (80402f4 <main+0x5c>)
 80402e4:	f002 fd06 	bl	8042cf4 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 80402e8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80402ec:	f001 f9f2 	bl	80416d4 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_SET);
 80402f0:	e7f4      	b.n	80402dc <main+0x44>
 80402f2:	bf00      	nop
 80402f4:	42021800 	.word	0x42021800

080402f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80402f8:	b580      	push	{r7, lr}
 80402fa:	b098      	sub	sp, #96	; 0x60
 80402fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80402fe:	f107 0318 	add.w	r3, r7, #24
 8040302:	2248      	movs	r2, #72	; 0x48
 8040304:	2100      	movs	r1, #0
 8040306:	4618      	mov	r0, r3
 8040308:	f008 fdc4 	bl	8048e94 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 804030c:	1d3b      	adds	r3, r7, #4
 804030e:	2200      	movs	r2, #0
 8040310:	601a      	str	r2, [r3, #0]
 8040312:	605a      	str	r2, [r3, #4]
 8040314:	609a      	str	r2, [r3, #8]
 8040316:	60da      	str	r2, [r3, #12]
 8040318:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 804031a:	2000      	movs	r0, #0
 804031c:	f003 f84a 	bl	80433b4 <HAL_PWREx_ControlVoltageScaling>
 8040320:	4603      	mov	r3, r0
 8040322:	2b00      	cmp	r3, #0
 8040324:	d001      	beq.n	804032a <SystemClock_Config+0x32>
  {
    Error_Handler();
 8040326:	f000 fccd 	bl	8040cc4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 804032a:	f003 f825 	bl	8043378 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 804032e:	4b24      	ldr	r3, [pc, #144]	; (80403c0 <SystemClock_Config+0xc8>)
 8040330:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8040334:	4a22      	ldr	r2, [pc, #136]	; (80403c0 <SystemClock_Config+0xc8>)
 8040336:	f023 0318 	bic.w	r3, r3, #24
 804033a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 804033e:	2316      	movs	r3, #22
 8040340:	61bb      	str	r3, [r7, #24]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8040342:	2381      	movs	r3, #129	; 0x81
 8040344:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8040346:	f44f 7380 	mov.w	r3, #256	; 0x100
 804034a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 804034c:	2340      	movs	r3, #64	; 0x40
 804034e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8040350:	2301      	movs	r3, #1
 8040352:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 8040354:	2300      	movs	r3, #0
 8040356:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 8040358:	23b0      	movs	r3, #176	; 0xb0
 804035a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 804035c:	2302      	movs	r3, #2
 804035e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8040360:	2301      	movs	r3, #1
 8040362:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 8040364:	230c      	movs	r3, #12
 8040366:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 8040368:	2337      	movs	r3, #55	; 0x37
 804036a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 804036c:	2307      	movs	r3, #7
 804036e:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8040370:	2302      	movs	r3, #2
 8040372:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8040374:	2302      	movs	r3, #2
 8040376:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8040378:	f107 0318 	add.w	r3, r7, #24
 804037c:	4618      	mov	r0, r3
 804037e:	f003 f8a9 	bl	80434d4 <HAL_RCC_OscConfig>
 8040382:	4603      	mov	r3, r0
 8040384:	2b00      	cmp	r3, #0
 8040386:	d001      	beq.n	804038c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8040388:	f000 fc9c 	bl	8040cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 804038c:	230f      	movs	r3, #15
 804038e:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040390:	2303      	movs	r3, #3
 8040392:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8040394:	2300      	movs	r3, #0
 8040396:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8040398:	2300      	movs	r3, #0
 804039a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 804039c:	2300      	movs	r3, #0
 804039e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80403a0:	1d3b      	adds	r3, r7, #4
 80403a2:	2105      	movs	r1, #5
 80403a4:	4618      	mov	r0, r3
 80403a6:	f003 fd6b 	bl	8043e80 <HAL_RCC_ClockConfig>
 80403aa:	4603      	mov	r3, r0
 80403ac:	2b00      	cmp	r3, #0
 80403ae:	d001      	beq.n	80403b4 <SystemClock_Config+0xbc>
  {
    Error_Handler();
 80403b0:	f000 fc88 	bl	8040cc4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80403b4:	f005 fb6e 	bl	8045a94 <HAL_RCCEx_EnableMSIPLLMode>
}
 80403b8:	bf00      	nop
 80403ba:	3760      	adds	r7, #96	; 0x60
 80403bc:	46bd      	mov	sp, r7
 80403be:	bd80      	pop	{r7, pc}
 80403c0:	40021000 	.word	0x40021000

080403c4 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80403c4:	b580      	push	{r7, lr}
 80403c6:	b0a6      	sub	sp, #152	; 0x98
 80403c8:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80403ca:	1d3b      	adds	r3, r7, #4
 80403cc:	2294      	movs	r2, #148	; 0x94
 80403ce:	2100      	movs	r1, #0
 80403d0:	4618      	mov	r0, r3
 80403d2:	f008 fd5f 	bl	8048e94 <memset>

  /** Initializes the common periph clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC|RCC_PERIPHCLK_SAI1;
 80403d6:	f44f 4390 	mov.w	r3, #18432	; 0x4800
 80403da:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 80403dc:	2300      	movs	r3, #0
 80403de:	673b      	str	r3, [r7, #112]	; 0x70
  PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80403e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80403e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSAI1SOURCE_HSI;
 80403e8:	2302      	movs	r3, #2
 80403ea:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 4;
 80403ec:	2304      	movs	r3, #4
 80403ee:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 48;
 80403f0:	2330      	movs	r3, #48	; 0x30
 80403f2:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV17;
 80403f4:	2311      	movs	r3, #17
 80403f6:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80403f8:	2302      	movs	r3, #2
 80403fa:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80403fc:	2302      	movs	r3, #2
 80403fe:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_ADC1CLK;
 8040400:	4b07      	ldr	r3, [pc, #28]	; (8040420 <PeriphCommonClock_Config+0x5c>)
 8040402:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040404:	1d3b      	adds	r3, r7, #4
 8040406:	4618      	mov	r0, r3
 8040408:	f004 f81e 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 804040c:	4603      	mov	r3, r0
 804040e:	2b00      	cmp	r3, #0
 8040410:	d001      	beq.n	8040416 <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 8040412:	f000 fc57 	bl	8040cc4 <Error_Handler>
  }
}
 8040416:	bf00      	nop
 8040418:	3798      	adds	r7, #152	; 0x98
 804041a:	46bd      	mov	sp, r7
 804041c:	bd80      	pop	{r7, pc}
 804041e:	bf00      	nop
 8040420:	01010000 	.word	0x01010000

08040424 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8040424:	b580      	push	{r7, lr}
 8040426:	b08a      	sub	sp, #40	; 0x28
 8040428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 804042a:	f107 031c 	add.w	r3, r7, #28
 804042e:	2200      	movs	r2, #0
 8040430:	601a      	str	r2, [r3, #0]
 8040432:	605a      	str	r2, [r3, #4]
 8040434:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8040436:	1d3b      	adds	r3, r7, #4
 8040438:	2200      	movs	r2, #0
 804043a:	601a      	str	r2, [r3, #0]
 804043c:	605a      	str	r2, [r3, #4]
 804043e:	609a      	str	r2, [r3, #8]
 8040440:	60da      	str	r2, [r3, #12]
 8040442:	611a      	str	r2, [r3, #16]
 8040444:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8040446:	4b31      	ldr	r3, [pc, #196]	; (804050c <MX_ADC1_Init+0xe8>)
 8040448:	4a31      	ldr	r2, [pc, #196]	; (8040510 <MX_ADC1_Init+0xec>)
 804044a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 804044c:	4b2f      	ldr	r3, [pc, #188]	; (804050c <MX_ADC1_Init+0xe8>)
 804044e:	2200      	movs	r2, #0
 8040450:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8040452:	4b2e      	ldr	r3, [pc, #184]	; (804050c <MX_ADC1_Init+0xe8>)
 8040454:	2200      	movs	r2, #0
 8040456:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8040458:	4b2c      	ldr	r3, [pc, #176]	; (804050c <MX_ADC1_Init+0xe8>)
 804045a:	2200      	movs	r2, #0
 804045c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 804045e:	4b2b      	ldr	r3, [pc, #172]	; (804050c <MX_ADC1_Init+0xe8>)
 8040460:	2200      	movs	r2, #0
 8040462:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8040464:	4b29      	ldr	r3, [pc, #164]	; (804050c <MX_ADC1_Init+0xe8>)
 8040466:	2204      	movs	r2, #4
 8040468:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 804046a:	4b28      	ldr	r3, [pc, #160]	; (804050c <MX_ADC1_Init+0xe8>)
 804046c:	2200      	movs	r2, #0
 804046e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8040470:	4b26      	ldr	r3, [pc, #152]	; (804050c <MX_ADC1_Init+0xe8>)
 8040472:	2200      	movs	r2, #0
 8040474:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8040476:	4b25      	ldr	r3, [pc, #148]	; (804050c <MX_ADC1_Init+0xe8>)
 8040478:	2201      	movs	r2, #1
 804047a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 804047c:	4b23      	ldr	r3, [pc, #140]	; (804050c <MX_ADC1_Init+0xe8>)
 804047e:	2200      	movs	r2, #0
 8040480:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8040484:	4b21      	ldr	r3, [pc, #132]	; (804050c <MX_ADC1_Init+0xe8>)
 8040486:	2200      	movs	r2, #0
 8040488:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 804048a:	4b20      	ldr	r3, [pc, #128]	; (804050c <MX_ADC1_Init+0xe8>)
 804048c:	2200      	movs	r2, #0
 804048e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8040490:	4b1e      	ldr	r3, [pc, #120]	; (804050c <MX_ADC1_Init+0xe8>)
 8040492:	2200      	movs	r2, #0
 8040494:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8040498:	4b1c      	ldr	r3, [pc, #112]	; (804050c <MX_ADC1_Init+0xe8>)
 804049a:	2200      	movs	r2, #0
 804049c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 804049e:	4b1b      	ldr	r3, [pc, #108]	; (804050c <MX_ADC1_Init+0xe8>)
 80404a0:	2200      	movs	r2, #0
 80404a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.DFSDMConfig = ADC_DFSDM_MODE_DISABLE;
 80404a6:	4b19      	ldr	r3, [pc, #100]	; (804050c <MX_ADC1_Init+0xe8>)
 80404a8:	2200      	movs	r2, #0
 80404aa:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80404ac:	4817      	ldr	r0, [pc, #92]	; (804050c <MX_ADC1_Init+0xe8>)
 80404ae:	f001 fad5 	bl	8041a5c <HAL_ADC_Init>
 80404b2:	4603      	mov	r3, r0
 80404b4:	2b00      	cmp	r3, #0
 80404b6:	d001      	beq.n	80404bc <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 80404b8:	f000 fc04 	bl	8040cc4 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80404bc:	2300      	movs	r3, #0
 80404be:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80404c0:	f107 031c 	add.w	r3, r7, #28
 80404c4:	4619      	mov	r1, r3
 80404c6:	4811      	ldr	r0, [pc, #68]	; (804050c <MX_ADC1_Init+0xe8>)
 80404c8:	f002 f824 	bl	8042514 <HAL_ADCEx_MultiModeConfigChannel>
 80404cc:	4603      	mov	r3, r0
 80404ce:	2b00      	cmp	r3, #0
 80404d0:	d001      	beq.n	80404d6 <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80404d2:	f000 fbf7 	bl	8040cc4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80404d6:	4b0f      	ldr	r3, [pc, #60]	; (8040514 <MX_ADC1_Init+0xf0>)
 80404d8:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80404da:	2306      	movs	r3, #6
 80404dc:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80404de:	2300      	movs	r3, #0
 80404e0:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80404e2:	237f      	movs	r3, #127	; 0x7f
 80404e4:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80404e6:	2304      	movs	r3, #4
 80404e8:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80404ea:	2300      	movs	r3, #0
 80404ec:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80404ee:	1d3b      	adds	r3, r7, #4
 80404f0:	4619      	mov	r1, r3
 80404f2:	4806      	ldr	r0, [pc, #24]	; (804050c <MX_ADC1_Init+0xe8>)
 80404f4:	f001 fbfe 	bl	8041cf4 <HAL_ADC_ConfigChannel>
 80404f8:	4603      	mov	r3, r0
 80404fa:	2b00      	cmp	r3, #0
 80404fc:	d001      	beq.n	8040502 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80404fe:	f000 fbe1 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8040502:	bf00      	nop
 8040504:	3728      	adds	r7, #40	; 0x28
 8040506:	46bd      	mov	sp, r7
 8040508:	bd80      	pop	{r7, pc}
 804050a:	bf00      	nop
 804050c:	20018028 	.word	0x20018028
 8040510:	42028000 	.word	0x42028000
 8040514:	25b00200 	.word	0x25b00200

08040518 <MX_DFSDM1_Init>:
  * @brief DFSDM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DFSDM1_Init(void)
{
 8040518:	b580      	push	{r7, lr}
 804051a:	af00      	add	r7, sp, #0
  /* USER CODE END DFSDM1_Init 0 */

  /* USER CODE BEGIN DFSDM1_Init 1 */

  /* USER CODE END DFSDM1_Init 1 */
  hdfsdm1_channel0.Instance = DFSDM1_Channel0;
 804051c:	4b48      	ldr	r3, [pc, #288]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804051e:	4a49      	ldr	r2, [pc, #292]	; (8040644 <MX_DFSDM1_Init+0x12c>)
 8040520:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel0.Init.OutputClock.Activation = ENABLE;
 8040522:	4b47      	ldr	r3, [pc, #284]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040524:	2201      	movs	r2, #1
 8040526:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel0.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8040528:	4b45      	ldr	r3, [pc, #276]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804052a:	2200      	movs	r2, #0
 804052c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel0.Init.OutputClock.Divider = 2;
 804052e:	4b44      	ldr	r3, [pc, #272]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040530:	2202      	movs	r2, #2
 8040532:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel0.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 8040534:	4b42      	ldr	r3, [pc, #264]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040536:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 804053a:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel0.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 804053c:	4b40      	ldr	r3, [pc, #256]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804053e:	2200      	movs	r2, #0
 8040540:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel0.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8040542:	4b3f      	ldr	r3, [pc, #252]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040544:	2200      	movs	r2, #0
 8040546:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel0.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8040548:	4b3d      	ldr	r3, [pc, #244]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804054a:	2200      	movs	r2, #0
 804054c:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel0.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 804054e:	4b3c      	ldr	r3, [pc, #240]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040550:	2200      	movs	r2, #0
 8040552:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel0.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8040554:	4b3a      	ldr	r3, [pc, #232]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040556:	2200      	movs	r2, #0
 8040558:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel0.Init.Awd.Oversampling = 1;
 804055a:	4b39      	ldr	r3, [pc, #228]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804055c:	2201      	movs	r2, #1
 804055e:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel0.Init.Offset = 0x00;
 8040560:	4b37      	ldr	r3, [pc, #220]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040562:	2200      	movs	r2, #0
 8040564:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel0.Init.RightBitShift = 0x00;
 8040566:	4b36      	ldr	r3, [pc, #216]	; (8040640 <MX_DFSDM1_Init+0x128>)
 8040568:	2200      	movs	r2, #0
 804056a:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel0) != HAL_OK)
 804056c:	4834      	ldr	r0, [pc, #208]	; (8040640 <MX_DFSDM1_Init+0x128>)
 804056e:	f002 f959 	bl	8042824 <HAL_DFSDM_ChannelInit>
 8040572:	4603      	mov	r3, r0
 8040574:	2b00      	cmp	r3, #0
 8040576:	d001      	beq.n	804057c <MX_DFSDM1_Init+0x64>
  {
    Error_Handler();
 8040578:	f000 fba4 	bl	8040cc4 <Error_Handler>
  }
  hdfsdm1_channel1.Instance = DFSDM1_Channel1;
 804057c:	4b32      	ldr	r3, [pc, #200]	; (8040648 <MX_DFSDM1_Init+0x130>)
 804057e:	4a33      	ldr	r2, [pc, #204]	; (804064c <MX_DFSDM1_Init+0x134>)
 8040580:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel1.Init.OutputClock.Activation = ENABLE;
 8040582:	4b31      	ldr	r3, [pc, #196]	; (8040648 <MX_DFSDM1_Init+0x130>)
 8040584:	2201      	movs	r2, #1
 8040586:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel1.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 8040588:	4b2f      	ldr	r3, [pc, #188]	; (8040648 <MX_DFSDM1_Init+0x130>)
 804058a:	2200      	movs	r2, #0
 804058c:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel1.Init.OutputClock.Divider = 2;
 804058e:	4b2e      	ldr	r3, [pc, #184]	; (8040648 <MX_DFSDM1_Init+0x130>)
 8040590:	2202      	movs	r2, #2
 8040592:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel1.Init.Input.Multiplexer = DFSDM_CHANNEL_EXTERNAL_INPUTS;
 8040594:	4b2c      	ldr	r3, [pc, #176]	; (8040648 <MX_DFSDM1_Init+0x130>)
 8040596:	2200      	movs	r2, #0
 8040598:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel1.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 804059a:	4b2b      	ldr	r3, [pc, #172]	; (8040648 <MX_DFSDM1_Init+0x130>)
 804059c:	2200      	movs	r2, #0
 804059e:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel1.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 80405a0:	4b29      	ldr	r3, [pc, #164]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405a2:	2200      	movs	r2, #0
 80405a4:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel1.Init.SerialInterface.Type = DFSDM_CHANNEL_MANCHESTER_RISING;
 80405a6:	4b28      	ldr	r3, [pc, #160]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405a8:	2202      	movs	r2, #2
 80405aa:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel1.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 80405ac:	4b26      	ldr	r3, [pc, #152]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405ae:	2200      	movs	r2, #0
 80405b0:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel1.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 80405b2:	4b25      	ldr	r3, [pc, #148]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405b4:	2200      	movs	r2, #0
 80405b6:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel1.Init.Awd.Oversampling = 1;
 80405b8:	4b23      	ldr	r3, [pc, #140]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405ba:	2201      	movs	r2, #1
 80405bc:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel1.Init.Offset = 0;
 80405be:	4b22      	ldr	r3, [pc, #136]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405c0:	2200      	movs	r2, #0
 80405c2:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel1.Init.RightBitShift = 0x00;
 80405c4:	4b20      	ldr	r3, [pc, #128]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405c6:	2200      	movs	r2, #0
 80405c8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel1) != HAL_OK)
 80405ca:	481f      	ldr	r0, [pc, #124]	; (8040648 <MX_DFSDM1_Init+0x130>)
 80405cc:	f002 f92a 	bl	8042824 <HAL_DFSDM_ChannelInit>
 80405d0:	4603      	mov	r3, r0
 80405d2:	2b00      	cmp	r3, #0
 80405d4:	d001      	beq.n	80405da <MX_DFSDM1_Init+0xc2>
  {
    Error_Handler();
 80405d6:	f000 fb75 	bl	8040cc4 <Error_Handler>
  }
  hdfsdm1_channel2.Instance = DFSDM1_Channel2;
 80405da:	4b1d      	ldr	r3, [pc, #116]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405dc:	4a1d      	ldr	r2, [pc, #116]	; (8040654 <MX_DFSDM1_Init+0x13c>)
 80405de:	601a      	str	r2, [r3, #0]
  hdfsdm1_channel2.Init.OutputClock.Activation = ENABLE;
 80405e0:	4b1b      	ldr	r3, [pc, #108]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405e2:	2201      	movs	r2, #1
 80405e4:	711a      	strb	r2, [r3, #4]
  hdfsdm1_channel2.Init.OutputClock.Selection = DFSDM_CHANNEL_OUTPUT_CLOCK_SYSTEM;
 80405e6:	4b1a      	ldr	r3, [pc, #104]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405e8:	2200      	movs	r2, #0
 80405ea:	609a      	str	r2, [r3, #8]
  hdfsdm1_channel2.Init.OutputClock.Divider = 2;
 80405ec:	4b18      	ldr	r3, [pc, #96]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405ee:	2202      	movs	r2, #2
 80405f0:	60da      	str	r2, [r3, #12]
  hdfsdm1_channel2.Init.Input.Multiplexer = DFSDM_CHANNEL_INTERNAL_REGISTER;
 80405f2:	4b17      	ldr	r3, [pc, #92]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405f4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80405f8:	611a      	str	r2, [r3, #16]
  hdfsdm1_channel2.Init.Input.DataPacking = DFSDM_CHANNEL_STANDARD_MODE;
 80405fa:	4b15      	ldr	r3, [pc, #84]	; (8040650 <MX_DFSDM1_Init+0x138>)
 80405fc:	2200      	movs	r2, #0
 80405fe:	615a      	str	r2, [r3, #20]
  hdfsdm1_channel2.Init.Input.Pins = DFSDM_CHANNEL_SAME_CHANNEL_PINS;
 8040600:	4b13      	ldr	r3, [pc, #76]	; (8040650 <MX_DFSDM1_Init+0x138>)
 8040602:	2200      	movs	r2, #0
 8040604:	619a      	str	r2, [r3, #24]
  hdfsdm1_channel2.Init.SerialInterface.Type = DFSDM_CHANNEL_SPI_RISING;
 8040606:	4b12      	ldr	r3, [pc, #72]	; (8040650 <MX_DFSDM1_Init+0x138>)
 8040608:	2200      	movs	r2, #0
 804060a:	61da      	str	r2, [r3, #28]
  hdfsdm1_channel2.Init.SerialInterface.SpiClock = DFSDM_CHANNEL_SPI_CLOCK_EXTERNAL;
 804060c:	4b10      	ldr	r3, [pc, #64]	; (8040650 <MX_DFSDM1_Init+0x138>)
 804060e:	2200      	movs	r2, #0
 8040610:	621a      	str	r2, [r3, #32]
  hdfsdm1_channel2.Init.Awd.FilterOrder = DFSDM_CHANNEL_FASTSINC_ORDER;
 8040612:	4b0f      	ldr	r3, [pc, #60]	; (8040650 <MX_DFSDM1_Init+0x138>)
 8040614:	2200      	movs	r2, #0
 8040616:	625a      	str	r2, [r3, #36]	; 0x24
  hdfsdm1_channel2.Init.Awd.Oversampling = 1;
 8040618:	4b0d      	ldr	r3, [pc, #52]	; (8040650 <MX_DFSDM1_Init+0x138>)
 804061a:	2201      	movs	r2, #1
 804061c:	629a      	str	r2, [r3, #40]	; 0x28
  hdfsdm1_channel2.Init.Offset = 0x00;
 804061e:	4b0c      	ldr	r3, [pc, #48]	; (8040650 <MX_DFSDM1_Init+0x138>)
 8040620:	2200      	movs	r2, #0
 8040622:	62da      	str	r2, [r3, #44]	; 0x2c
  hdfsdm1_channel2.Init.RightBitShift = 0x00;
 8040624:	4b0a      	ldr	r3, [pc, #40]	; (8040650 <MX_DFSDM1_Init+0x138>)
 8040626:	2200      	movs	r2, #0
 8040628:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_DFSDM_ChannelInit(&hdfsdm1_channel2) != HAL_OK)
 804062a:	4809      	ldr	r0, [pc, #36]	; (8040650 <MX_DFSDM1_Init+0x138>)
 804062c:	f002 f8fa 	bl	8042824 <HAL_DFSDM_ChannelInit>
 8040630:	4603      	mov	r3, r0
 8040632:	2b00      	cmp	r3, #0
 8040634:	d001      	beq.n	804063a <MX_DFSDM1_Init+0x122>
  {
    Error_Handler();
 8040636:	f000 fb45 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN DFSDM1_Init 2 */

  /* USER CODE END DFSDM1_Init 2 */

}
 804063a:	bf00      	nop
 804063c:	bd80      	pop	{r7, pc}
 804063e:	bf00      	nop
 8040640:	20018090 	.word	0x20018090
 8040644:	40016000 	.word	0x40016000
 8040648:	200180c8 	.word	0x200180c8
 804064c:	40016020 	.word	0x40016020
 8040650:	20018100 	.word	0x20018100
 8040654:	40016040 	.word	0x40016040

08040658 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8040658:	b580      	push	{r7, lr}
 804065a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 804065c:	4b1b      	ldr	r3, [pc, #108]	; (80406cc <MX_I2C1_Init+0x74>)
 804065e:	4a1c      	ldr	r2, [pc, #112]	; (80406d0 <MX_I2C1_Init+0x78>)
 8040660:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x40505681;
 8040662:	4b1a      	ldr	r3, [pc, #104]	; (80406cc <MX_I2C1_Init+0x74>)
 8040664:	4a1b      	ldr	r2, [pc, #108]	; (80406d4 <MX_I2C1_Init+0x7c>)
 8040666:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8040668:	4b18      	ldr	r3, [pc, #96]	; (80406cc <MX_I2C1_Init+0x74>)
 804066a:	2200      	movs	r2, #0
 804066c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 804066e:	4b17      	ldr	r3, [pc, #92]	; (80406cc <MX_I2C1_Init+0x74>)
 8040670:	2201      	movs	r2, #1
 8040672:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8040674:	4b15      	ldr	r3, [pc, #84]	; (80406cc <MX_I2C1_Init+0x74>)
 8040676:	2200      	movs	r2, #0
 8040678:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 804067a:	4b14      	ldr	r3, [pc, #80]	; (80406cc <MX_I2C1_Init+0x74>)
 804067c:	2200      	movs	r2, #0
 804067e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8040680:	4b12      	ldr	r3, [pc, #72]	; (80406cc <MX_I2C1_Init+0x74>)
 8040682:	2200      	movs	r2, #0
 8040684:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8040686:	4b11      	ldr	r3, [pc, #68]	; (80406cc <MX_I2C1_Init+0x74>)
 8040688:	2200      	movs	r2, #0
 804068a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 804068c:	4b0f      	ldr	r3, [pc, #60]	; (80406cc <MX_I2C1_Init+0x74>)
 804068e:	2200      	movs	r2, #0
 8040690:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8040692:	480e      	ldr	r0, [pc, #56]	; (80406cc <MX_I2C1_Init+0x74>)
 8040694:	f002 fb46 	bl	8042d24 <HAL_I2C_Init>
 8040698:	4603      	mov	r3, r0
 804069a:	2b00      	cmp	r3, #0
 804069c:	d001      	beq.n	80406a2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 804069e:	f000 fb11 	bl	8040cc4 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80406a2:	2100      	movs	r1, #0
 80406a4:	4809      	ldr	r0, [pc, #36]	; (80406cc <MX_I2C1_Init+0x74>)
 80406a6:	f002 fbcc 	bl	8042e42 <HAL_I2CEx_ConfigAnalogFilter>
 80406aa:	4603      	mov	r3, r0
 80406ac:	2b00      	cmp	r3, #0
 80406ae:	d001      	beq.n	80406b4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80406b0:	f000 fb08 	bl	8040cc4 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80406b4:	2100      	movs	r1, #0
 80406b6:	4805      	ldr	r0, [pc, #20]	; (80406cc <MX_I2C1_Init+0x74>)
 80406b8:	f002 fc0e 	bl	8042ed8 <HAL_I2CEx_ConfigDigitalFilter>
 80406bc:	4603      	mov	r3, r0
 80406be:	2b00      	cmp	r3, #0
 80406c0:	d001      	beq.n	80406c6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80406c2:	f000 faff 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80406c6:	bf00      	nop
 80406c8:	bd80      	pop	{r7, pc}
 80406ca:	bf00      	nop
 80406cc:	20018138 	.word	0x20018138
 80406d0:	40005400 	.word	0x40005400
 80406d4:	40505681 	.word	0x40505681

080406d8 <MX_OCTOSPI1_Init>:
  * @brief OCTOSPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_OCTOSPI1_Init(void)
{
 80406d8:	b580      	push	{r7, lr}
 80406da:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN OCTOSPI1_Init 1 */

  /* USER CODE END OCTOSPI1_Init 1 */
  /* OCTOSPI1 parameter configuration*/
  hospi1.Instance = OCTOSPI1;
 80406dc:	4b1b      	ldr	r3, [pc, #108]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406de:	4a1c      	ldr	r2, [pc, #112]	; (8040750 <MX_OCTOSPI1_Init+0x78>)
 80406e0:	601a      	str	r2, [r3, #0]
  hospi1.Init.FifoThreshold = 1;
 80406e2:	4b1a      	ldr	r3, [pc, #104]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406e4:	2201      	movs	r2, #1
 80406e6:	605a      	str	r2, [r3, #4]
  hospi1.Init.DualQuad = HAL_OSPI_DUALQUAD_DISABLE;
 80406e8:	4b18      	ldr	r3, [pc, #96]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406ea:	2200      	movs	r2, #0
 80406ec:	609a      	str	r2, [r3, #8]
  hospi1.Init.MemoryType = HAL_OSPI_MEMTYPE_MICRON;
 80406ee:	4b17      	ldr	r3, [pc, #92]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406f0:	2200      	movs	r2, #0
 80406f2:	60da      	str	r2, [r3, #12]
  hospi1.Init.DeviceSize = 32;
 80406f4:	4b15      	ldr	r3, [pc, #84]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406f6:	2220      	movs	r2, #32
 80406f8:	611a      	str	r2, [r3, #16]
  hospi1.Init.ChipSelectHighTime = 1;
 80406fa:	4b14      	ldr	r3, [pc, #80]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 80406fc:	2201      	movs	r2, #1
 80406fe:	615a      	str	r2, [r3, #20]
  hospi1.Init.FreeRunningClock = HAL_OSPI_FREERUNCLK_DISABLE;
 8040700:	4b12      	ldr	r3, [pc, #72]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040702:	2200      	movs	r2, #0
 8040704:	619a      	str	r2, [r3, #24]
  hospi1.Init.ClockMode = HAL_OSPI_CLOCK_MODE_0;
 8040706:	4b11      	ldr	r3, [pc, #68]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040708:	2200      	movs	r2, #0
 804070a:	61da      	str	r2, [r3, #28]
  hospi1.Init.WrapSize = HAL_OSPI_WRAP_NOT_SUPPORTED;
 804070c:	4b0f      	ldr	r3, [pc, #60]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 804070e:	2200      	movs	r2, #0
 8040710:	621a      	str	r2, [r3, #32]
  hospi1.Init.ClockPrescaler = 1;
 8040712:	4b0e      	ldr	r3, [pc, #56]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040714:	2201      	movs	r2, #1
 8040716:	625a      	str	r2, [r3, #36]	; 0x24
  hospi1.Init.SampleShifting = HAL_OSPI_SAMPLE_SHIFTING_NONE;
 8040718:	4b0c      	ldr	r3, [pc, #48]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 804071a:	2200      	movs	r2, #0
 804071c:	629a      	str	r2, [r3, #40]	; 0x28
  hospi1.Init.DelayHoldQuarterCycle = HAL_OSPI_DHQC_DISABLE;
 804071e:	4b0b      	ldr	r3, [pc, #44]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040720:	2200      	movs	r2, #0
 8040722:	62da      	str	r2, [r3, #44]	; 0x2c
  hospi1.Init.ChipSelectBoundary = 0;
 8040724:	4b09      	ldr	r3, [pc, #36]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040726:	2200      	movs	r2, #0
 8040728:	631a      	str	r2, [r3, #48]	; 0x30
  hospi1.Init.DelayBlockBypass = HAL_OSPI_DELAY_BLOCK_BYPASSED;
 804072a:	4b08      	ldr	r3, [pc, #32]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 804072c:	2208      	movs	r2, #8
 804072e:	635a      	str	r2, [r3, #52]	; 0x34
  hospi1.Init.Refresh = 0;
 8040730:	4b06      	ldr	r3, [pc, #24]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040732:	2200      	movs	r2, #0
 8040734:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_OSPI_Init(&hospi1) != HAL_OK)
 8040736:	4805      	ldr	r0, [pc, #20]	; (804074c <MX_OCTOSPI1_Init+0x74>)
 8040738:	f002 fc1a 	bl	8042f70 <HAL_OSPI_Init>
 804073c:	4603      	mov	r3, r0
 804073e:	2b00      	cmp	r3, #0
 8040740:	d001      	beq.n	8040746 <MX_OCTOSPI1_Init+0x6e>
  {
    Error_Handler();
 8040742:	f000 fabf 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN OCTOSPI1_Init 2 */

  /* USER CODE END OCTOSPI1_Init 2 */

}
 8040746:	bf00      	nop
 8040748:	bd80      	pop	{r7, pc}
 804074a:	bf00      	nop
 804074c:	2001818c 	.word	0x2001818c
 8040750:	44021000 	.word	0x44021000

08040754 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8040754:	b580      	push	{r7, lr}
 8040756:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8040758:	4b47      	ldr	r3, [pc, #284]	; (8040878 <MX_SAI1_Init+0x124>)
 804075a:	4a48      	ldr	r2, [pc, #288]	; (804087c <MX_SAI1_Init+0x128>)
 804075c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 804075e:	4b46      	ldr	r3, [pc, #280]	; (8040878 <MX_SAI1_Init+0x124>)
 8040760:	2200      	movs	r2, #0
 8040762:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8040764:	4b44      	ldr	r3, [pc, #272]	; (8040878 <MX_SAI1_Init+0x124>)
 8040766:	2200      	movs	r2, #0
 8040768:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 804076a:	4b43      	ldr	r3, [pc, #268]	; (8040878 <MX_SAI1_Init+0x124>)
 804076c:	2240      	movs	r2, #64	; 0x40
 804076e:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8040770:	4b41      	ldr	r3, [pc, #260]	; (8040878 <MX_SAI1_Init+0x124>)
 8040772:	2200      	movs	r2, #0
 8040774:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8040776:	4b40      	ldr	r3, [pc, #256]	; (8040878 <MX_SAI1_Init+0x124>)
 8040778:	2200      	movs	r2, #0
 804077a:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 804077c:	4b3e      	ldr	r3, [pc, #248]	; (8040878 <MX_SAI1_Init+0x124>)
 804077e:	2200      	movs	r2, #0
 8040780:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8040782:	4b3d      	ldr	r3, [pc, #244]	; (8040878 <MX_SAI1_Init+0x124>)
 8040784:	2200      	movs	r2, #0
 8040786:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8040788:	4b3b      	ldr	r3, [pc, #236]	; (8040878 <MX_SAI1_Init+0x124>)
 804078a:	2200      	movs	r2, #0
 804078c:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 804078e:	4b3a      	ldr	r3, [pc, #232]	; (8040878 <MX_SAI1_Init+0x124>)
 8040790:	2200      	movs	r2, #0
 8040792:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8040794:	4b38      	ldr	r3, [pc, #224]	; (8040878 <MX_SAI1_Init+0x124>)
 8040796:	4a3a      	ldr	r2, [pc, #232]	; (8040880 <MX_SAI1_Init+0x12c>)
 8040798:	621a      	str	r2, [r3, #32]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 804079a:	4b37      	ldr	r3, [pc, #220]	; (8040878 <MX_SAI1_Init+0x124>)
 804079c:	2200      	movs	r2, #0
 804079e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 80407a0:	4b35      	ldr	r3, [pc, #212]	; (8040878 <MX_SAI1_Init+0x124>)
 80407a2:	2200      	movs	r2, #0
 80407a4:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 80407a6:	4b34      	ldr	r3, [pc, #208]	; (8040878 <MX_SAI1_Init+0x124>)
 80407a8:	2200      	movs	r2, #0
 80407aa:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 80407ac:	4b32      	ldr	r3, [pc, #200]	; (8040878 <MX_SAI1_Init+0x124>)
 80407ae:	2200      	movs	r2, #0
 80407b0:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.PdmInit.Activation = DISABLE;
 80407b2:	4b31      	ldr	r3, [pc, #196]	; (8040878 <MX_SAI1_Init+0x124>)
 80407b4:	2200      	movs	r2, #0
 80407b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.PdmInit.MicPairsNbr = 1;
 80407ba:	4b2f      	ldr	r3, [pc, #188]	; (8040878 <MX_SAI1_Init+0x124>)
 80407bc:	2201      	movs	r2, #1
 80407be:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 80407c0:	4b2d      	ldr	r3, [pc, #180]	; (8040878 <MX_SAI1_Init+0x124>)
 80407c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80407c6:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.FrameLength = 8;
 80407c8:	4b2b      	ldr	r3, [pc, #172]	; (8040878 <MX_SAI1_Init+0x124>)
 80407ca:	2208      	movs	r2, #8
 80407cc:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 80407ce:	4b2a      	ldr	r3, [pc, #168]	; (8040878 <MX_SAI1_Init+0x124>)
 80407d0:	2201      	movs	r2, #1
 80407d2:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 80407d4:	4b28      	ldr	r3, [pc, #160]	; (8040878 <MX_SAI1_Init+0x124>)
 80407d6:	2200      	movs	r2, #0
 80407d8:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80407da:	4b27      	ldr	r3, [pc, #156]	; (8040878 <MX_SAI1_Init+0x124>)
 80407dc:	2200      	movs	r2, #0
 80407de:	661a      	str	r2, [r3, #96]	; 0x60
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 80407e0:	4b25      	ldr	r3, [pc, #148]	; (8040878 <MX_SAI1_Init+0x124>)
 80407e2:	2200      	movs	r2, #0
 80407e4:	665a      	str	r2, [r3, #100]	; 0x64
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 80407e6:	4b24      	ldr	r3, [pc, #144]	; (8040878 <MX_SAI1_Init+0x124>)
 80407e8:	2200      	movs	r2, #0
 80407ea:	669a      	str	r2, [r3, #104]	; 0x68
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 80407ec:	4b22      	ldr	r3, [pc, #136]	; (8040878 <MX_SAI1_Init+0x124>)
 80407ee:	2200      	movs	r2, #0
 80407f0:	66da      	str	r2, [r3, #108]	; 0x6c
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 80407f2:	4b21      	ldr	r3, [pc, #132]	; (8040878 <MX_SAI1_Init+0x124>)
 80407f4:	2201      	movs	r2, #1
 80407f6:	671a      	str	r2, [r3, #112]	; 0x70
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80407f8:	4b1f      	ldr	r3, [pc, #124]	; (8040878 <MX_SAI1_Init+0x124>)
 80407fa:	2200      	movs	r2, #0
 80407fc:	675a      	str	r2, [r3, #116]	; 0x74
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80407fe:	481e      	ldr	r0, [pc, #120]	; (8040878 <MX_SAI1_Init+0x124>)
 8040800:	f005 fc9e 	bl	8046140 <HAL_SAI_Init>
 8040804:	4603      	mov	r3, r0
 8040806:	2b00      	cmp	r3, #0
 8040808:	d001      	beq.n	804080e <MX_SAI1_Init+0xba>
  {
    Error_Handler();
 804080a:	f000 fa5b 	bl	8040cc4 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 804080e:	4b1d      	ldr	r3, [pc, #116]	; (8040884 <MX_SAI1_Init+0x130>)
 8040810:	4a1d      	ldr	r2, [pc, #116]	; (8040888 <MX_SAI1_Init+0x134>)
 8040812:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_SPDIF_PROTOCOL;
 8040814:	4b1b      	ldr	r3, [pc, #108]	; (8040884 <MX_SAI1_Init+0x130>)
 8040816:	2204      	movs	r2, #4
 8040818:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 804081a:	4b1a      	ldr	r3, [pc, #104]	; (8040884 <MX_SAI1_Init+0x130>)
 804081c:	2200      	movs	r2, #0
 804081e:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8040820:	4b18      	ldr	r3, [pc, #96]	; (8040884 <MX_SAI1_Init+0x130>)
 8040822:	2200      	movs	r2, #0
 8040824:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8040826:	4b17      	ldr	r3, [pc, #92]	; (8040884 <MX_SAI1_Init+0x130>)
 8040828:	2200      	movs	r2, #0
 804082a:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 804082c:	4b15      	ldr	r3, [pc, #84]	; (8040884 <MX_SAI1_Init+0x130>)
 804082e:	2200      	movs	r2, #0
 8040830:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_48K;
 8040832:	4b14      	ldr	r3, [pc, #80]	; (8040884 <MX_SAI1_Init+0x130>)
 8040834:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8040838:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 804083a:	4b12      	ldr	r3, [pc, #72]	; (8040884 <MX_SAI1_Init+0x130>)
 804083c:	2200      	movs	r2, #0
 804083e:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8040840:	4b10      	ldr	r3, [pc, #64]	; (8040884 <MX_SAI1_Init+0x130>)
 8040842:	2200      	movs	r2, #0
 8040844:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 8040846:	4b0f      	ldr	r3, [pc, #60]	; (8040884 <MX_SAI1_Init+0x130>)
 8040848:	2200      	movs	r2, #0
 804084a:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.PdmInit.Activation = DISABLE;
 804084c:	4b0d      	ldr	r3, [pc, #52]	; (8040884 <MX_SAI1_Init+0x130>)
 804084e:	2200      	movs	r2, #0
 8040850:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.PdmInit.MicPairsNbr = 1;
 8040854:	4b0b      	ldr	r3, [pc, #44]	; (8040884 <MX_SAI1_Init+0x130>)
 8040856:	2201      	movs	r2, #1
 8040858:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.PdmInit.ClockEnable = SAI_PDM_CLOCK1_ENABLE;
 804085a:	4b0a      	ldr	r3, [pc, #40]	; (8040884 <MX_SAI1_Init+0x130>)
 804085c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8040860:	641a      	str	r2, [r3, #64]	; 0x40
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 8040862:	4808      	ldr	r0, [pc, #32]	; (8040884 <MX_SAI1_Init+0x130>)
 8040864:	f005 fc6c 	bl	8046140 <HAL_SAI_Init>
 8040868:	4603      	mov	r3, r0
 804086a:	2b00      	cmp	r3, #0
 804086c:	d001      	beq.n	8040872 <MX_SAI1_Init+0x11e>
  {
    Error_Handler();
 804086e:	f000 fa29 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8040872:	bf00      	nop
 8040874:	bd80      	pop	{r7, pc}
 8040876:	bf00      	nop
 8040878:	200181e4 	.word	0x200181e4
 804087c:	40015404 	.word	0x40015404
 8040880:	0002ee00 	.word	0x0002ee00
 8040884:	2001827c 	.word	0x2001827c
 8040888:	40015424 	.word	0x40015424

0804088c <MX_SDMMC1_SD_Init>:
  * @brief SDMMC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC1_SD_Init(void)
{
 804088c:	b580      	push	{r7, lr}
 804088e:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC1_Init 0 */

  /* USER CODE BEGIN SDMMC1_Init 1 */

  /* USER CODE END SDMMC1_Init 1 */
  hsd1.Instance = SDMMC1;
 8040890:	4b0e      	ldr	r3, [pc, #56]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 8040892:	4a0f      	ldr	r2, [pc, #60]	; (80408d0 <MX_SDMMC1_SD_Init+0x44>)
 8040894:	601a      	str	r2, [r3, #0]
  hsd1.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8040896:	4b0d      	ldr	r3, [pc, #52]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 8040898:	2200      	movs	r2, #0
 804089a:	605a      	str	r2, [r3, #4]
  hsd1.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 804089c:	4b0b      	ldr	r3, [pc, #44]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 804089e:	2200      	movs	r2, #0
 80408a0:	609a      	str	r2, [r3, #8]
  hsd1.Init.BusWide = SDMMC_BUS_WIDE_4B;
 80408a2:	4b0a      	ldr	r3, [pc, #40]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 80408a4:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80408a8:	60da      	str	r2, [r3, #12]
  hsd1.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80408aa:	4b08      	ldr	r3, [pc, #32]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 80408ac:	2200      	movs	r2, #0
 80408ae:	611a      	str	r2, [r3, #16]
  hsd1.Init.ClockDiv = 0;
 80408b0:	4b06      	ldr	r3, [pc, #24]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 80408b2:	2200      	movs	r2, #0
 80408b4:	615a      	str	r2, [r3, #20]
  if (HAL_SD_Init(&hsd1) != HAL_OK)
 80408b6:	4805      	ldr	r0, [pc, #20]	; (80408cc <MX_SDMMC1_SD_Init+0x40>)
 80408b8:	f005 fe6c 	bl	8046594 <HAL_SD_Init>
 80408bc:	4603      	mov	r3, r0
 80408be:	2b00      	cmp	r3, #0
 80408c0:	d001      	beq.n	80408c6 <MX_SDMMC1_SD_Init+0x3a>
  {
    Error_Handler();
 80408c2:	f000 f9ff 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SDMMC1_Init 2 */

  /* USER CODE END SDMMC1_Init 2 */

}
 80408c6:	bf00      	nop
 80408c8:	bd80      	pop	{r7, pc}
 80408ca:	bf00      	nop
 80408cc:	20018314 	.word	0x20018314
 80408d0:	420c8000 	.word	0x420c8000

080408d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80408d4:	b580      	push	{r7, lr}
 80408d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80408d8:	4b1a      	ldr	r3, [pc, #104]	; (8040944 <MX_SPI1_Init+0x70>)
 80408da:	4a1b      	ldr	r2, [pc, #108]	; (8040948 <MX_SPI1_Init+0x74>)
 80408dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80408de:	4b19      	ldr	r3, [pc, #100]	; (8040944 <MX_SPI1_Init+0x70>)
 80408e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80408e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80408e6:	4b17      	ldr	r3, [pc, #92]	; (8040944 <MX_SPI1_Init+0x70>)
 80408e8:	2200      	movs	r2, #0
 80408ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_4BIT;
 80408ec:	4b15      	ldr	r3, [pc, #84]	; (8040944 <MX_SPI1_Init+0x70>)
 80408ee:	f44f 7240 	mov.w	r2, #768	; 0x300
 80408f2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80408f4:	4b13      	ldr	r3, [pc, #76]	; (8040944 <MX_SPI1_Init+0x70>)
 80408f6:	2200      	movs	r2, #0
 80408f8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80408fa:	4b12      	ldr	r3, [pc, #72]	; (8040944 <MX_SPI1_Init+0x70>)
 80408fc:	2200      	movs	r2, #0
 80408fe:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8040900:	4b10      	ldr	r3, [pc, #64]	; (8040944 <MX_SPI1_Init+0x70>)
 8040902:	2200      	movs	r2, #0
 8040904:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8040906:	4b0f      	ldr	r3, [pc, #60]	; (8040944 <MX_SPI1_Init+0x70>)
 8040908:	2210      	movs	r2, #16
 804090a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 804090c:	4b0d      	ldr	r3, [pc, #52]	; (8040944 <MX_SPI1_Init+0x70>)
 804090e:	2200      	movs	r2, #0
 8040910:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8040912:	4b0c      	ldr	r3, [pc, #48]	; (8040944 <MX_SPI1_Init+0x70>)
 8040914:	2200      	movs	r2, #0
 8040916:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8040918:	4b0a      	ldr	r3, [pc, #40]	; (8040944 <MX_SPI1_Init+0x70>)
 804091a:	2200      	movs	r2, #0
 804091c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 804091e:	4b09      	ldr	r3, [pc, #36]	; (8040944 <MX_SPI1_Init+0x70>)
 8040920:	2207      	movs	r2, #7
 8040922:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8040924:	4b07      	ldr	r3, [pc, #28]	; (8040944 <MX_SPI1_Init+0x70>)
 8040926:	2200      	movs	r2, #0
 8040928:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 804092a:	4b06      	ldr	r3, [pc, #24]	; (8040944 <MX_SPI1_Init+0x70>)
 804092c:	2208      	movs	r2, #8
 804092e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8040930:	4804      	ldr	r0, [pc, #16]	; (8040944 <MX_SPI1_Init+0x70>)
 8040932:	f006 fe93 	bl	804765c <HAL_SPI_Init>
 8040936:	4603      	mov	r3, r0
 8040938:	2b00      	cmp	r3, #0
 804093a:	d001      	beq.n	8040940 <MX_SPI1_Init+0x6c>
  {
    Error_Handler();
 804093c:	f000 f9c2 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8040940:	bf00      	nop
 8040942:	bd80      	pop	{r7, pc}
 8040944:	20018390 	.word	0x20018390
 8040948:	40013000 	.word	0x40013000

0804094c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 804094c:	b580      	push	{r7, lr}
 804094e:	b088      	sub	sp, #32
 8040950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8040952:	f107 030c 	add.w	r3, r7, #12
 8040956:	2200      	movs	r2, #0
 8040958:	601a      	str	r2, [r3, #0]
 804095a:	605a      	str	r2, [r3, #4]
 804095c:	609a      	str	r2, [r3, #8]
 804095e:	60da      	str	r2, [r3, #12]
 8040960:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8040962:	463b      	mov	r3, r7
 8040964:	2200      	movs	r2, #0
 8040966:	601a      	str	r2, [r3, #0]
 8040968:	605a      	str	r2, [r3, #4]
 804096a:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 804096c:	4b1d      	ldr	r3, [pc, #116]	; (80409e4 <MX_TIM4_Init+0x98>)
 804096e:	4a1e      	ldr	r2, [pc, #120]	; (80409e8 <MX_TIM4_Init+0x9c>)
 8040970:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8040972:	4b1c      	ldr	r3, [pc, #112]	; (80409e4 <MX_TIM4_Init+0x98>)
 8040974:	2200      	movs	r2, #0
 8040976:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8040978:	4b1a      	ldr	r3, [pc, #104]	; (80409e4 <MX_TIM4_Init+0x98>)
 804097a:	2200      	movs	r2, #0
 804097c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 804097e:	4b19      	ldr	r3, [pc, #100]	; (80409e4 <MX_TIM4_Init+0x98>)
 8040980:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040984:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040986:	4b17      	ldr	r3, [pc, #92]	; (80409e4 <MX_TIM4_Init+0x98>)
 8040988:	2200      	movs	r2, #0
 804098a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 804098c:	4b15      	ldr	r3, [pc, #84]	; (80409e4 <MX_TIM4_Init+0x98>)
 804098e:	2200      	movs	r2, #0
 8040990:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8040992:	4814      	ldr	r0, [pc, #80]	; (80409e4 <MX_TIM4_Init+0x98>)
 8040994:	f006 ff4d 	bl	8047832 <HAL_TIM_Base_Init>
 8040998:	4603      	mov	r3, r0
 804099a:	2b00      	cmp	r3, #0
 804099c:	d001      	beq.n	80409a2 <MX_TIM4_Init+0x56>
  {
    Error_Handler();
 804099e:	f000 f991 	bl	8040cc4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80409a2:	2307      	movs	r3, #7
 80409a4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80409a6:	2310      	movs	r3, #16
 80409a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim4, &sSlaveConfig) != HAL_OK)
 80409aa:	f107 030c 	add.w	r3, r7, #12
 80409ae:	4619      	mov	r1, r3
 80409b0:	480c      	ldr	r0, [pc, #48]	; (80409e4 <MX_TIM4_Init+0x98>)
 80409b2:	f006 ff95 	bl	80478e0 <HAL_TIM_SlaveConfigSynchro>
 80409b6:	4603      	mov	r3, r0
 80409b8:	2b00      	cmp	r3, #0
 80409ba:	d001      	beq.n	80409c0 <MX_TIM4_Init+0x74>
  {
    Error_Handler();
 80409bc:	f000 f982 	bl	8040cc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80409c0:	2300      	movs	r3, #0
 80409c2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80409c4:	2300      	movs	r3, #0
 80409c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80409c8:	463b      	mov	r3, r7
 80409ca:	4619      	mov	r1, r3
 80409cc:	4805      	ldr	r0, [pc, #20]	; (80409e4 <MX_TIM4_Init+0x98>)
 80409ce:	f007 f977 	bl	8047cc0 <HAL_TIMEx_MasterConfigSynchronization>
 80409d2:	4603      	mov	r3, r0
 80409d4:	2b00      	cmp	r3, #0
 80409d6:	d001      	beq.n	80409dc <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80409d8:	f000 f974 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80409dc:	bf00      	nop
 80409de:	3720      	adds	r7, #32
 80409e0:	46bd      	mov	sp, r7
 80409e2:	bd80      	pop	{r7, pc}
 80409e4:	200183f4 	.word	0x200183f4
 80409e8:	40000800 	.word	0x40000800

080409ec <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 80409ec:	b580      	push	{r7, lr}
 80409ee:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 80409f0:	4b0f      	ldr	r3, [pc, #60]	; (8040a30 <MX_TIM16_Init+0x44>)
 80409f2:	4a10      	ldr	r2, [pc, #64]	; (8040a34 <MX_TIM16_Init+0x48>)
 80409f4:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 80409f6:	4b0e      	ldr	r3, [pc, #56]	; (8040a30 <MX_TIM16_Init+0x44>)
 80409f8:	2200      	movs	r2, #0
 80409fa:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80409fc:	4b0c      	ldr	r3, [pc, #48]	; (8040a30 <MX_TIM16_Init+0x44>)
 80409fe:	2200      	movs	r2, #0
 8040a00:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8040a02:	4b0b      	ldr	r3, [pc, #44]	; (8040a30 <MX_TIM16_Init+0x44>)
 8040a04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8040a08:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8040a0a:	4b09      	ldr	r3, [pc, #36]	; (8040a30 <MX_TIM16_Init+0x44>)
 8040a0c:	2200      	movs	r2, #0
 8040a0e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 8040a10:	4b07      	ldr	r3, [pc, #28]	; (8040a30 <MX_TIM16_Init+0x44>)
 8040a12:	2200      	movs	r2, #0
 8040a14:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8040a16:	4b06      	ldr	r3, [pc, #24]	; (8040a30 <MX_TIM16_Init+0x44>)
 8040a18:	2200      	movs	r2, #0
 8040a1a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 8040a1c:	4804      	ldr	r0, [pc, #16]	; (8040a30 <MX_TIM16_Init+0x44>)
 8040a1e:	f006 ff08 	bl	8047832 <HAL_TIM_Base_Init>
 8040a22:	4603      	mov	r3, r0
 8040a24:	2b00      	cmp	r3, #0
 8040a26:	d001      	beq.n	8040a2c <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 8040a28:	f000 f94c 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 8040a2c:	bf00      	nop
 8040a2e:	bd80      	pop	{r7, pc}
 8040a30:	20018440 	.word	0x20018440
 8040a34:	40014400 	.word	0x40014400

08040a38 <MX_UCPD1_Init>:
  * @brief UCPD1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UCPD1_Init(void)
{
 8040a38:	b580      	push	{r7, lr}
 8040a3a:	b086      	sub	sp, #24
 8040a3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UCPD1_Init 0 */

  /* USER CODE END UCPD1_Init 0 */

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040a3e:	463b      	mov	r3, r7
 8040a40:	2200      	movs	r2, #0
 8040a42:	601a      	str	r2, [r3, #0]
 8040a44:	605a      	str	r2, [r3, #4]
 8040a46:	609a      	str	r2, [r3, #8]
 8040a48:	60da      	str	r2, [r3, #12]
 8040a4a:	611a      	str	r2, [r3, #16]
 8040a4c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP2_EnableClock(LL_APB1_GRP2_PERIPH_UCPD1);
 8040a4e:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8040a52:	f7ff fc09 	bl	8040268 <LL_APB1_GRP2_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8040a56:	2001      	movs	r0, #1
 8040a58:	f7ff fbee 	bl	8040238 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8040a5c:	2002      	movs	r0, #2
 8040a5e:	f7ff fbeb 	bl	8040238 <LL_AHB2_GRP1_EnableClock>
  /**UCPD1 GPIO Configuration
  PA15 (JTDI)   ------> UCPD1_CC1
  PB15   ------> UCPD1_CC2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8040a62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040a66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8040a68:	2303      	movs	r3, #3
 8040a6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040a6c:	2300      	movs	r3, #0
 8040a6e:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8040a70:	463b      	mov	r3, r7
 8040a72:	4619      	mov	r1, r3
 8040a74:	4809      	ldr	r0, [pc, #36]	; (8040a9c <MX_UCPD1_Init+0x64>)
 8040a76:	f007 fc52 	bl	804831e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8040a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8040a7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8040a80:	2303      	movs	r3, #3
 8040a82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8040a84:	2300      	movs	r3, #0
 8040a86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040a88:	463b      	mov	r3, r7
 8040a8a:	4619      	mov	r1, r3
 8040a8c:	4804      	ldr	r0, [pc, #16]	; (8040aa0 <MX_UCPD1_Init+0x68>)
 8040a8e:	f007 fc46 	bl	804831e <LL_GPIO_Init>
  /* USER CODE END UCPD1_Init 1 */
  /* USER CODE BEGIN UCPD1_Init 2 */

  /* USER CODE END UCPD1_Init 2 */

}
 8040a92:	bf00      	nop
 8040a94:	3718      	adds	r7, #24
 8040a96:	46bd      	mov	sp, r7
 8040a98:	bd80      	pop	{r7, pc}
 8040a9a:	bf00      	nop
 8040a9c:	42020000 	.word	0x42020000
 8040aa0:	42020400 	.word	0x42020400

08040aa4 <MX_USB_PCD_Init>:
  * @brief USB Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_PCD_Init(void)
{
 8040aa4:	b580      	push	{r7, lr}
 8040aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_Init 0 */

  /* USER CODE BEGIN USB_Init 1 */

  /* USER CODE END USB_Init 1 */
  hpcd_USB_FS.Instance = USB;
 8040aa8:	4b10      	ldr	r3, [pc, #64]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040aaa:	4a11      	ldr	r2, [pc, #68]	; (8040af0 <MX_USB_PCD_Init+0x4c>)
 8040aac:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8040aae:	4b0f      	ldr	r3, [pc, #60]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ab0:	2208      	movs	r2, #8
 8040ab2:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8040ab4:	4b0d      	ldr	r3, [pc, #52]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ab6:	2202      	movs	r2, #2
 8040ab8:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8040aba:	4b0c      	ldr	r3, [pc, #48]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040abc:	2202      	movs	r2, #2
 8040abe:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 8040ac0:	4b0a      	ldr	r3, [pc, #40]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ac2:	2200      	movs	r2, #0
 8040ac4:	615a      	str	r2, [r3, #20]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8040ac6:	4b09      	ldr	r3, [pc, #36]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ac8:	2200      	movs	r2, #0
 8040aca:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8040acc:	4b07      	ldr	r3, [pc, #28]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ace:	2200      	movs	r2, #0
 8040ad0:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8040ad2:	4b06      	ldr	r3, [pc, #24]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ad4:	2200      	movs	r2, #0
 8040ad6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8040ad8:	4804      	ldr	r0, [pc, #16]	; (8040aec <MX_USB_PCD_Init+0x48>)
 8040ada:	f002 fb49 	bl	8043170 <HAL_PCD_Init>
 8040ade:	4603      	mov	r3, r0
 8040ae0:	2b00      	cmp	r3, #0
 8040ae2:	d001      	beq.n	8040ae8 <MX_USB_PCD_Init+0x44>
  {
    Error_Handler();
 8040ae4:	f000 f8ee 	bl	8040cc4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_Init 2 */

  /* USER CODE END USB_Init 2 */

}
 8040ae8:	bf00      	nop
 8040aea:	bd80      	pop	{r7, pc}
 8040aec:	2001848c 	.word	0x2001848c
 8040af0:	4000d400 	.word	0x4000d400

08040af4 <MX_FMC_Init>:

/* FMC initialization function */
static void MX_FMC_Init(void)
{
 8040af4:	b580      	push	{r7, lr}
 8040af6:	b088      	sub	sp, #32
 8040af8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_NORSRAM_TimingTypeDef Timing = {0};
 8040afa:	463b      	mov	r3, r7
 8040afc:	2220      	movs	r2, #32
 8040afe:	2100      	movs	r1, #0
 8040b00:	4618      	mov	r0, r3
 8040b02:	f008 f9c7 	bl	8048e94 <memset>

  /* USER CODE END FMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FMC_NORSRAM_DEVICE;
 8040b06:	4b2d      	ldr	r3, [pc, #180]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b08:	4a2d      	ldr	r2, [pc, #180]	; (8040bc0 <MX_FMC_Init+0xcc>)
 8040b0a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FMC_NORSRAM_EXTENDED_DEVICE;
 8040b0c:	4b2b      	ldr	r3, [pc, #172]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b0e:	4a2d      	ldr	r2, [pc, #180]	; (8040bc4 <MX_FMC_Init+0xd0>)
 8040b10:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FMC_NORSRAM_BANK1;
 8040b12:	4b2a      	ldr	r3, [pc, #168]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b14:	2200      	movs	r2, #0
 8040b16:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FMC_DATA_ADDRESS_MUX_DISABLE;
 8040b18:	4b28      	ldr	r3, [pc, #160]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b1a:	2200      	movs	r2, #0
 8040b1c:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FMC_MEMORY_TYPE_SRAM;
 8040b1e:	4b27      	ldr	r3, [pc, #156]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b20:	2200      	movs	r2, #0
 8040b22:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FMC_NORSRAM_MEM_BUS_WIDTH_16;
 8040b24:	4b25      	ldr	r3, [pc, #148]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b26:	2210      	movs	r2, #16
 8040b28:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FMC_BURST_ACCESS_MODE_DISABLE;
 8040b2a:	4b24      	ldr	r3, [pc, #144]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b2c:	2200      	movs	r2, #0
 8040b2e:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FMC_WAIT_SIGNAL_POLARITY_LOW;
 8040b30:	4b22      	ldr	r3, [pc, #136]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b32:	2200      	movs	r2, #0
 8040b34:	61da      	str	r2, [r3, #28]
  hsram1.Init.WaitSignalActive = FMC_WAIT_TIMING_BEFORE_WS;
 8040b36:	4b21      	ldr	r3, [pc, #132]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b38:	2200      	movs	r2, #0
 8040b3a:	621a      	str	r2, [r3, #32]
  hsram1.Init.WriteOperation = FMC_WRITE_OPERATION_ENABLE;
 8040b3c:	4b1f      	ldr	r3, [pc, #124]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b3e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8040b42:	625a      	str	r2, [r3, #36]	; 0x24
  hsram1.Init.WaitSignal = FMC_WAIT_SIGNAL_DISABLE;
 8040b44:	4b1d      	ldr	r3, [pc, #116]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b46:	2200      	movs	r2, #0
 8040b48:	629a      	str	r2, [r3, #40]	; 0x28
  hsram1.Init.ExtendedMode = FMC_EXTENDED_MODE_DISABLE;
 8040b4a:	4b1c      	ldr	r3, [pc, #112]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b4c:	2200      	movs	r2, #0
 8040b4e:	62da      	str	r2, [r3, #44]	; 0x2c
  hsram1.Init.AsynchronousWait = FMC_ASYNCHRONOUS_WAIT_DISABLE;
 8040b50:	4b1a      	ldr	r3, [pc, #104]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b52:	2200      	movs	r2, #0
 8040b54:	631a      	str	r2, [r3, #48]	; 0x30
  hsram1.Init.WriteBurst = FMC_WRITE_BURST_DISABLE;
 8040b56:	4b19      	ldr	r3, [pc, #100]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b58:	2200      	movs	r2, #0
 8040b5a:	635a      	str	r2, [r3, #52]	; 0x34
  hsram1.Init.ContinuousClock = FMC_CONTINUOUS_CLOCK_SYNC_ONLY;
 8040b5c:	4b17      	ldr	r3, [pc, #92]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b5e:	2200      	movs	r2, #0
 8040b60:	639a      	str	r2, [r3, #56]	; 0x38
  hsram1.Init.WriteFifo = FMC_WRITE_FIFO_ENABLE;
 8040b62:	4b16      	ldr	r3, [pc, #88]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b64:	2200      	movs	r2, #0
 8040b66:	63da      	str	r2, [r3, #60]	; 0x3c
  hsram1.Init.NBLSetupTime = 0;
 8040b68:	4b14      	ldr	r3, [pc, #80]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b6a:	2200      	movs	r2, #0
 8040b6c:	645a      	str	r2, [r3, #68]	; 0x44
  hsram1.Init.PageSize = FMC_PAGE_SIZE_NONE;
 8040b6e:	4b13      	ldr	r3, [pc, #76]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b70:	2200      	movs	r2, #0
 8040b72:	641a      	str	r2, [r3, #64]	; 0x40
  hsram1.Init.MaxChipSelectPulse = DISABLE;
 8040b74:	4b11      	ldr	r3, [pc, #68]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040b76:	2200      	movs	r2, #0
 8040b78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  /* Timing */
  Timing.AddressSetupTime = 15;
 8040b7c:	230f      	movs	r3, #15
 8040b7e:	603b      	str	r3, [r7, #0]
  Timing.AddressHoldTime = 15;
 8040b80:	230f      	movs	r3, #15
 8040b82:	607b      	str	r3, [r7, #4]
  Timing.DataSetupTime = 255;
 8040b84:	23ff      	movs	r3, #255	; 0xff
 8040b86:	60bb      	str	r3, [r7, #8]
  Timing.DataHoldTime = 0;
 8040b88:	2300      	movs	r3, #0
 8040b8a:	60fb      	str	r3, [r7, #12]
  Timing.BusTurnAroundDuration = 15;
 8040b8c:	230f      	movs	r3, #15
 8040b8e:	613b      	str	r3, [r7, #16]
  Timing.CLKDivision = 16;
 8040b90:	2310      	movs	r3, #16
 8040b92:	617b      	str	r3, [r7, #20]
  Timing.DataLatency = 17;
 8040b94:	2311      	movs	r3, #17
 8040b96:	61bb      	str	r3, [r7, #24]
  Timing.AccessMode = FMC_ACCESS_MODE_A;
 8040b98:	2300      	movs	r3, #0
 8040b9a:	61fb      	str	r3, [r7, #28]
  /* ExtTiming */

  if (HAL_SRAM_Init(&hsram1, &Timing, NULL) != HAL_OK)
 8040b9c:	463b      	mov	r3, r7
 8040b9e:	2200      	movs	r2, #0
 8040ba0:	4619      	mov	r1, r3
 8040ba2:	4806      	ldr	r0, [pc, #24]	; (8040bbc <MX_FMC_Init+0xc8>)
 8040ba4:	f006 fdfd 	bl	80477a2 <HAL_SRAM_Init>
 8040ba8:	4603      	mov	r3, r0
 8040baa:	2b00      	cmp	r3, #0
 8040bac:	d001      	beq.n	8040bb2 <MX_FMC_Init+0xbe>
  {
    Error_Handler( );
 8040bae:	f000 f889 	bl	8040cc4 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8040bb2:	bf00      	nop
 8040bb4:	3720      	adds	r7, #32
 8040bb6:	46bd      	mov	sp, r7
 8040bb8:	bd80      	pop	{r7, pc}
 8040bba:	bf00      	nop
 8040bbc:	20018780 	.word	0x20018780
 8040bc0:	44020000 	.word	0x44020000
 8040bc4:	44020104 	.word	0x44020104

08040bc8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040bc8:	b580      	push	{r7, lr}
 8040bca:	b08c      	sub	sp, #48	; 0x30
 8040bcc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040bce:	f107 031c 	add.w	r3, r7, #28
 8040bd2:	2200      	movs	r2, #0
 8040bd4:	601a      	str	r2, [r3, #0]
 8040bd6:	605a      	str	r2, [r3, #4]
 8040bd8:	609a      	str	r2, [r3, #8]
 8040bda:	60da      	str	r2, [r3, #12]
 8040bdc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8040bde:	4b37      	ldr	r3, [pc, #220]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040be2:	4a36      	ldr	r2, [pc, #216]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040be4:	f043 0310 	orr.w	r3, r3, #16
 8040be8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040bea:	4b34      	ldr	r3, [pc, #208]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040bee:	f003 0310 	and.w	r3, r3, #16
 8040bf2:	61bb      	str	r3, [r7, #24]
 8040bf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8040bf6:	4b31      	ldr	r3, [pc, #196]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040bfa:	4a30      	ldr	r2, [pc, #192]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040bfc:	f043 0302 	orr.w	r3, r3, #2
 8040c00:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c02:	4b2e      	ldr	r3, [pc, #184]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c06:	f003 0302 	and.w	r3, r3, #2
 8040c0a:	617b      	str	r3, [r7, #20]
 8040c0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8040c0e:	4b2b      	ldr	r3, [pc, #172]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c12:	4a2a      	ldr	r2, [pc, #168]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040c18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c1a:	4b28      	ldr	r3, [pc, #160]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c1e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040c22:	613b      	str	r3, [r7, #16]
 8040c24:	693b      	ldr	r3, [r7, #16]
  HAL_PWREx_EnableVddIO2();
 8040c26:	f002 fc21 	bl	804346c <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040c2a:	4b24      	ldr	r3, [pc, #144]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c2e:	4a23      	ldr	r2, [pc, #140]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c30:	f043 0308 	orr.w	r3, r3, #8
 8040c34:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c36:	4b21      	ldr	r3, [pc, #132]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c3a:	f003 0308 	and.w	r3, r3, #8
 8040c3e:	60fb      	str	r3, [r7, #12]
 8040c40:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8040c42:	4b1e      	ldr	r3, [pc, #120]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c46:	4a1d      	ldr	r2, [pc, #116]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c48:	f043 0304 	orr.w	r3, r3, #4
 8040c4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c4e:	4b1b      	ldr	r3, [pc, #108]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c52:	f003 0304 	and.w	r3, r3, #4
 8040c56:	60bb      	str	r3, [r7, #8]
 8040c58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8040c5a:	4b18      	ldr	r3, [pc, #96]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c5e:	4a17      	ldr	r2, [pc, #92]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c60:	f043 0301 	orr.w	r3, r3, #1
 8040c64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c66:	4b15      	ldr	r3, [pc, #84]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c6a:	f003 0301 	and.w	r3, r3, #1
 8040c6e:	607b      	str	r3, [r7, #4]
 8040c70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8040c72:	4b12      	ldr	r3, [pc, #72]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c76:	4a11      	ldr	r2, [pc, #68]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c78:	f043 0320 	orr.w	r3, r3, #32
 8040c7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040c7e:	4b0f      	ldr	r3, [pc, #60]	; (8040cbc <MX_GPIO_Init+0xf4>)
 8040c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040c82:	f003 0320 	and.w	r3, r3, #32
 8040c86:	603b      	str	r3, [r7, #0]
 8040c88:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GREEN_GPIO_Port, LED_GREEN_Pin, GPIO_PIN_RESET);
 8040c8a:	2200      	movs	r2, #0
 8040c8c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8040c90:	480b      	ldr	r0, [pc, #44]	; (8040cc0 <MX_GPIO_Init+0xf8>)
 8040c92:	f002 f82f 	bl	8042cf4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8040c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040c9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040c9c:	2301      	movs	r3, #1
 8040c9e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040ca0:	2300      	movs	r3, #0
 8040ca2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040ca4:	2300      	movs	r3, #0
 8040ca6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8040ca8:	f107 031c 	add.w	r3, r7, #28
 8040cac:	4619      	mov	r1, r3
 8040cae:	4804      	ldr	r0, [pc, #16]	; (8040cc0 <MX_GPIO_Init+0xf8>)
 8040cb0:	f001 fea0 	bl	80429f4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8040cb4:	bf00      	nop
 8040cb6:	3730      	adds	r7, #48	; 0x30
 8040cb8:	46bd      	mov	sp, r7
 8040cba:	bd80      	pop	{r7, pc}
 8040cbc:	40021000 	.word	0x40021000
 8040cc0:	42021800 	.word	0x42021800

08040cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8040cc4:	b480      	push	{r7}
 8040cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8040cc8:	b672      	cpsid	i
}
 8040cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8040ccc:	e7fe      	b.n	8040ccc <Error_Handler+0x8>
	...

08040cd0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8040cd0:	b480      	push	{r7}
 8040cd2:	b083      	sub	sp, #12
 8040cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040cd6:	4b0f      	ldr	r3, [pc, #60]	; (8040d14 <HAL_MspInit+0x44>)
 8040cd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040cda:	4a0e      	ldr	r2, [pc, #56]	; (8040d14 <HAL_MspInit+0x44>)
 8040cdc:	f043 0301 	orr.w	r3, r3, #1
 8040ce0:	6613      	str	r3, [r2, #96]	; 0x60
 8040ce2:	4b0c      	ldr	r3, [pc, #48]	; (8040d14 <HAL_MspInit+0x44>)
 8040ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040ce6:	f003 0301 	and.w	r3, r3, #1
 8040cea:	607b      	str	r3, [r7, #4]
 8040cec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8040cee:	4b09      	ldr	r3, [pc, #36]	; (8040d14 <HAL_MspInit+0x44>)
 8040cf0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040cf2:	4a08      	ldr	r2, [pc, #32]	; (8040d14 <HAL_MspInit+0x44>)
 8040cf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040cf8:	6593      	str	r3, [r2, #88]	; 0x58
 8040cfa:	4b06      	ldr	r3, [pc, #24]	; (8040d14 <HAL_MspInit+0x44>)
 8040cfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8040d02:	603b      	str	r3, [r7, #0]
 8040d04:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040d06:	bf00      	nop
 8040d08:	370c      	adds	r7, #12
 8040d0a:	46bd      	mov	sp, r7
 8040d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040d10:	4770      	bx	lr
 8040d12:	bf00      	nop
 8040d14:	40021000 	.word	0x40021000

08040d18 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8040d18:	b580      	push	{r7, lr}
 8040d1a:	b08a      	sub	sp, #40	; 0x28
 8040d1c:	af00      	add	r7, sp, #0
 8040d1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040d20:	f107 0314 	add.w	r3, r7, #20
 8040d24:	2200      	movs	r2, #0
 8040d26:	601a      	str	r2, [r3, #0]
 8040d28:	605a      	str	r2, [r3, #4]
 8040d2a:	609a      	str	r2, [r3, #8]
 8040d2c:	60da      	str	r2, [r3, #12]
 8040d2e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8040d30:	687b      	ldr	r3, [r7, #4]
 8040d32:	681b      	ldr	r3, [r3, #0]
 8040d34:	4a15      	ldr	r2, [pc, #84]	; (8040d8c <HAL_ADC_MspInit+0x74>)
 8040d36:	4293      	cmp	r3, r2
 8040d38:	d123      	bne.n	8040d82 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8040d3a:	4b15      	ldr	r3, [pc, #84]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d3e:	4a14      	ldr	r2, [pc, #80]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d40:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8040d44:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040d46:	4b12      	ldr	r3, [pc, #72]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d4a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8040d4e:	613b      	str	r3, [r7, #16]
 8040d50:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040d52:	4b0f      	ldr	r3, [pc, #60]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d56:	4a0e      	ldr	r2, [pc, #56]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d58:	f043 0301 	orr.w	r3, r3, #1
 8040d5c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040d5e:	4b0c      	ldr	r3, [pc, #48]	; (8040d90 <HAL_ADC_MspInit+0x78>)
 8040d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040d62:	f003 0301 	and.w	r3, r3, #1
 8040d66:	60fb      	str	r3, [r7, #12]
 8040d68:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = VBUS_SENSE_Pin;
 8040d6a:	2310      	movs	r3, #16
 8040d6c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8040d6e:	2303      	movs	r3, #3
 8040d70:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040d72:	2300      	movs	r3, #0
 8040d74:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_SENSE_GPIO_Port, &GPIO_InitStruct);
 8040d76:	f107 0314 	add.w	r3, r7, #20
 8040d7a:	4619      	mov	r1, r3
 8040d7c:	4805      	ldr	r0, [pc, #20]	; (8040d94 <HAL_ADC_MspInit+0x7c>)
 8040d7e:	f001 fe39 	bl	80429f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8040d82:	bf00      	nop
 8040d84:	3728      	adds	r7, #40	; 0x28
 8040d86:	46bd      	mov	sp, r7
 8040d88:	bd80      	pop	{r7, pc}
 8040d8a:	bf00      	nop
 8040d8c:	42028000 	.word	0x42028000
 8040d90:	40021000 	.word	0x40021000
 8040d94:	42020000 	.word	0x42020000

08040d98 <HAL_DFSDM_ChannelMspInit>:
* This function configures the hardware resources used in this example
* @param hdfsdm_channel: DFSDM_Channel handle pointer
* @retval None
*/
void HAL_DFSDM_ChannelMspInit(DFSDM_Channel_HandleTypeDef* hdfsdm_channel)
{
 8040d98:	b580      	push	{r7, lr}
 8040d9a:	b0b0      	sub	sp, #192	; 0xc0
 8040d9c:	af00      	add	r7, sp, #0
 8040d9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040da0:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040da4:	2200      	movs	r2, #0
 8040da6:	601a      	str	r2, [r3, #0]
 8040da8:	605a      	str	r2, [r3, #4]
 8040daa:	609a      	str	r2, [r3, #8]
 8040dac:	60da      	str	r2, [r3, #12]
 8040dae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040db0:	f107 0318 	add.w	r3, r7, #24
 8040db4:	2294      	movs	r2, #148	; 0x94
 8040db6:	2100      	movs	r1, #0
 8040db8:	4618      	mov	r0, r3
 8040dba:	f008 f86b 	bl	8048e94 <memset>
  if(DFSDM1_Init == 0)
 8040dbe:	4b37      	ldr	r3, [pc, #220]	; (8040e9c <HAL_DFSDM_ChannelMspInit+0x104>)
 8040dc0:	681b      	ldr	r3, [r3, #0]
 8040dc2:	2b00      	cmp	r3, #0
 8040dc4:	d165      	bne.n	8040e92 <HAL_DFSDM_ChannelMspInit+0xfa>

  /* USER CODE END DFSDM1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_DFSDM1;
 8040dc6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8040dca:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Dfsdm1ClockSelection = RCC_DFSDM1CLKSOURCE_PCLK2;
 8040dcc:	2300      	movs	r3, #0
 8040dce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040dd2:	f107 0318 	add.w	r3, r7, #24
 8040dd6:	4618      	mov	r0, r3
 8040dd8:	f003 fb36 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 8040ddc:	4603      	mov	r3, r0
 8040dde:	2b00      	cmp	r3, #0
 8040de0:	d001      	beq.n	8040de6 <HAL_DFSDM_ChannelMspInit+0x4e>
    {
      Error_Handler();
 8040de2:	f7ff ff6f 	bl	8040cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DFSDM1_CLK_ENABLE();
 8040de6:	4b2e      	ldr	r3, [pc, #184]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040dea:	4a2d      	ldr	r2, [pc, #180]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040dec:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8040df0:	6613      	str	r3, [r2, #96]	; 0x60
 8040df2:	4b2b      	ldr	r3, [pc, #172]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040df4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040df6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8040dfa:	617b      	str	r3, [r7, #20]
 8040dfc:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8040dfe:	4b28      	ldr	r3, [pc, #160]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e02:	4a27      	ldr	r2, [pc, #156]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8040e08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040e0a:	4b25      	ldr	r3, [pc, #148]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8040e12:	613b      	str	r3, [r7, #16]
 8040e14:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8040e16:	f002 fb29 	bl	804346c <HAL_PWREx_EnableVddIO2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040e1a:	4b21      	ldr	r3, [pc, #132]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e1e:	4a20      	ldr	r2, [pc, #128]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e20:	f043 0302 	orr.w	r3, r3, #2
 8040e24:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040e26:	4b1e      	ldr	r3, [pc, #120]	; (8040ea0 <HAL_DFSDM_ChannelMspInit+0x108>)
 8040e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040e2a:	f003 0302 	and.w	r3, r3, #2
 8040e2e:	60fb      	str	r3, [r7, #12]
 8040e30:	68fb      	ldr	r3, [r7, #12]
    /**DFSDM1 GPIO Configuration
    PG7     ------> DFSDM1_CKOUT
    PB12     ------> DFSDM1_DATIN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8040e32:	2380      	movs	r3, #128	; 0x80
 8040e34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040e38:	2302      	movs	r3, #2
 8040e3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e3e:	2300      	movs	r3, #0
 8040e40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e44:	2300      	movs	r3, #0
 8040e46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8040e4a:	2306      	movs	r3, #6
 8040e4c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8040e50:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040e54:	4619      	mov	r1, r3
 8040e56:	4813      	ldr	r0, [pc, #76]	; (8040ea4 <HAL_DFSDM_ChannelMspInit+0x10c>)
 8040e58:	f001 fdcc 	bl	80429f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8040e5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8040e60:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8040e64:	2302      	movs	r3, #2
 8040e66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8040e6a:	2300      	movs	r3, #0
 8040e6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040e70:	2300      	movs	r3, #0
 8040e72:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF6_DFSDM1;
 8040e76:	2306      	movs	r3, #6
 8040e78:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040e7c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040e80:	4619      	mov	r1, r3
 8040e82:	4809      	ldr	r0, [pc, #36]	; (8040ea8 <HAL_DFSDM_ChannelMspInit+0x110>)
 8040e84:	f001 fdb6 	bl	80429f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DFSDM1_MspInit 1 */

  /* USER CODE END DFSDM1_MspInit 1 */
  DFSDM1_Init++;
 8040e88:	4b04      	ldr	r3, [pc, #16]	; (8040e9c <HAL_DFSDM_ChannelMspInit+0x104>)
 8040e8a:	681b      	ldr	r3, [r3, #0]
 8040e8c:	3301      	adds	r3, #1
 8040e8e:	4a03      	ldr	r2, [pc, #12]	; (8040e9c <HAL_DFSDM_ChannelMspInit+0x104>)
 8040e90:	6013      	str	r3, [r2, #0]
  }

}
 8040e92:	bf00      	nop
 8040e94:	37c0      	adds	r7, #192	; 0xc0
 8040e96:	46bd      	mov	sp, r7
 8040e98:	bd80      	pop	{r7, pc}
 8040e9a:	bf00      	nop
 8040e9c:	200187d8 	.word	0x200187d8
 8040ea0:	40021000 	.word	0x40021000
 8040ea4:	42021800 	.word	0x42021800
 8040ea8:	42020400 	.word	0x42020400

08040eac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8040eac:	b580      	push	{r7, lr}
 8040eae:	b0ae      	sub	sp, #184	; 0xb8
 8040eb0:	af00      	add	r7, sp, #0
 8040eb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040eb4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040eb8:	2200      	movs	r2, #0
 8040eba:	601a      	str	r2, [r3, #0]
 8040ebc:	605a      	str	r2, [r3, #4]
 8040ebe:	609a      	str	r2, [r3, #8]
 8040ec0:	60da      	str	r2, [r3, #12]
 8040ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040ec4:	f107 0310 	add.w	r3, r7, #16
 8040ec8:	2294      	movs	r2, #148	; 0x94
 8040eca:	2100      	movs	r1, #0
 8040ecc:	4618      	mov	r0, r3
 8040ece:	f007 ffe1 	bl	8048e94 <memset>
  if(hi2c->Instance==I2C1)
 8040ed2:	687b      	ldr	r3, [r7, #4]
 8040ed4:	681b      	ldr	r3, [r3, #0]
 8040ed6:	4a21      	ldr	r2, [pc, #132]	; (8040f5c <HAL_I2C_MspInit+0xb0>)
 8040ed8:	4293      	cmp	r3, r2
 8040eda:	d13a      	bne.n	8040f52 <HAL_I2C_MspInit+0xa6>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8040edc:	2340      	movs	r3, #64	; 0x40
 8040ede:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8040ee0:	2300      	movs	r3, #0
 8040ee2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040ee4:	f107 0310 	add.w	r3, r7, #16
 8040ee8:	4618      	mov	r0, r3
 8040eea:	f003 faad 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 8040eee:	4603      	mov	r3, r0
 8040ef0:	2b00      	cmp	r3, #0
 8040ef2:	d001      	beq.n	8040ef8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8040ef4:	f7ff fee6 	bl	8040cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8040ef8:	4b19      	ldr	r3, [pc, #100]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040efa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040efc:	4a18      	ldr	r2, [pc, #96]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040efe:	f043 0302 	orr.w	r3, r3, #2
 8040f02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040f04:	4b16      	ldr	r3, [pc, #88]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040f08:	f003 0302 	and.w	r3, r3, #2
 8040f0c:	60fb      	str	r3, [r7, #12]
 8040f0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8040f10:	23c0      	movs	r3, #192	; 0xc0
 8040f12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8040f16:	2312      	movs	r3, #18
 8040f18:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040f1c:	2301      	movs	r3, #1
 8040f1e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8040f22:	2300      	movs	r3, #0
 8040f24:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8040f28:	2304      	movs	r3, #4
 8040f2a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8040f2e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040f32:	4619      	mov	r1, r3
 8040f34:	480b      	ldr	r0, [pc, #44]	; (8040f64 <HAL_I2C_MspInit+0xb8>)
 8040f36:	f001 fd5d 	bl	80429f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8040f3a:	4b09      	ldr	r3, [pc, #36]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040f3c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040f3e:	4a08      	ldr	r2, [pc, #32]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040f40:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8040f44:	6593      	str	r3, [r2, #88]	; 0x58
 8040f46:	4b06      	ldr	r3, [pc, #24]	; (8040f60 <HAL_I2C_MspInit+0xb4>)
 8040f48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8040f4a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040f4e:	60bb      	str	r3, [r7, #8]
 8040f50:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8040f52:	bf00      	nop
 8040f54:	37b8      	adds	r7, #184	; 0xb8
 8040f56:	46bd      	mov	sp, r7
 8040f58:	bd80      	pop	{r7, pc}
 8040f5a:	bf00      	nop
 8040f5c:	40005400 	.word	0x40005400
 8040f60:	40021000 	.word	0x40021000
 8040f64:	42020400 	.word	0x42020400

08040f68 <HAL_OSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hospi: OSPI handle pointer
* @retval None
*/
void HAL_OSPI_MspInit(OSPI_HandleTypeDef* hospi)
{
 8040f68:	b580      	push	{r7, lr}
 8040f6a:	b0b0      	sub	sp, #192	; 0xc0
 8040f6c:	af00      	add	r7, sp, #0
 8040f6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040f70:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8040f74:	2200      	movs	r2, #0
 8040f76:	601a      	str	r2, [r3, #0]
 8040f78:	605a      	str	r2, [r3, #4]
 8040f7a:	609a      	str	r2, [r3, #8]
 8040f7c:	60da      	str	r2, [r3, #12]
 8040f7e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8040f80:	f107 0318 	add.w	r3, r7, #24
 8040f84:	2294      	movs	r2, #148	; 0x94
 8040f86:	2100      	movs	r1, #0
 8040f88:	4618      	mov	r0, r3
 8040f8a:	f007 ff83 	bl	8048e94 <memset>
  if(hospi->Instance==OCTOSPI1)
 8040f8e:	687b      	ldr	r3, [r7, #4]
 8040f90:	681b      	ldr	r3, [r3, #0]
 8040f92:	4a4e      	ldr	r2, [pc, #312]	; (80410cc <HAL_OSPI_MspInit+0x164>)
 8040f94:	4293      	cmp	r3, r2
 8040f96:	f040 8094 	bne.w	80410c2 <HAL_OSPI_MspInit+0x15a>

  /* USER CODE END OCTOSPI1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_OSPI;
 8040f9a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8040f9e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.OspiClockSelection = RCC_OSPICLKSOURCE_SYSCLK;
 8040fa0:	2300      	movs	r3, #0
 8040fa2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8040fa6:	f107 0318 	add.w	r3, r7, #24
 8040faa:	4618      	mov	r0, r3
 8040fac:	f003 fa4c 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 8040fb0:	4603      	mov	r3, r0
 8040fb2:	2b00      	cmp	r3, #0
 8040fb4:	d001      	beq.n	8040fba <HAL_OSPI_MspInit+0x52>
    {
      Error_Handler();
 8040fb6:	f7ff fe85 	bl	8040cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_OSPI1_CLK_ENABLE();
 8040fba:	4b45      	ldr	r3, [pc, #276]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040fbe:	4a44      	ldr	r2, [pc, #272]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8040fc4:	6513      	str	r3, [r2, #80]	; 0x50
 8040fc6:	4b42      	ldr	r3, [pc, #264]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8040fca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8040fce:	617b      	str	r3, [r7, #20]
 8040fd0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8040fd2:	4b3f      	ldr	r3, [pc, #252]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040fd6:	4a3e      	ldr	r2, [pc, #248]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fd8:	f043 0304 	orr.w	r3, r3, #4
 8040fdc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040fde:	4b3c      	ldr	r3, [pc, #240]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fe0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040fe2:	f003 0304 	and.w	r3, r3, #4
 8040fe6:	613b      	str	r3, [r7, #16]
 8040fe8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8040fea:	4b39      	ldr	r3, [pc, #228]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040fec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040fee:	4a38      	ldr	r2, [pc, #224]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040ff0:	f043 0301 	orr.w	r3, r3, #1
 8040ff4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040ff6:	4b36      	ldr	r3, [pc, #216]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8040ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040ffa:	f003 0301 	and.w	r3, r3, #1
 8040ffe:	60fb      	str	r3, [r7, #12]
 8041000:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8041002:	4b33      	ldr	r3, [pc, #204]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8041004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041006:	4a32      	ldr	r2, [pc, #200]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8041008:	f043 0302 	orr.w	r3, r3, #2
 804100c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804100e:	4b30      	ldr	r3, [pc, #192]	; (80410d0 <HAL_OSPI_MspInit+0x168>)
 8041010:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041012:	f003 0302 	and.w	r3, r3, #2
 8041016:	60bb      	str	r3, [r7, #8]
 8041018:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> OCTOSPI1_CLK
    PA6     ------> OCTOSPI1_IO3
    PB1     ------> OCTOSPI1_IO0
    PB0     ------> OCTOSPI1_IO1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_1;
 804101a:	230e      	movs	r3, #14
 804101c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041020:	2302      	movs	r3, #2
 8041022:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041026:	2300      	movs	r3, #0
 8041028:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804102c:	2303      	movs	r3, #3
 804102e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8041032:	230a      	movs	r3, #10
 8041034:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041038:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804103c:	4619      	mov	r1, r3
 804103e:	4825      	ldr	r0, [pc, #148]	; (80410d4 <HAL_OSPI_MspInit+0x16c>)
 8041040:	f001 fcd8 	bl	80429f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8041044:	2301      	movs	r3, #1
 8041046:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804104a:	2302      	movs	r3, #2
 804104c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041050:	2300      	movs	r3, #0
 8041052:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041056:	2303      	movs	r3, #3
 8041058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF3_OCTOSPI1;
 804105c:	2303      	movs	r3, #3
 804105e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8041062:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8041066:	4619      	mov	r1, r3
 8041068:	481a      	ldr	r0, [pc, #104]	; (80410d4 <HAL_OSPI_MspInit+0x16c>)
 804106a:	f001 fcc3 	bl	80429f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_7|GPIO_PIN_3|GPIO_PIN_6;
 804106e:	23cc      	movs	r3, #204	; 0xcc
 8041070:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041074:	2302      	movs	r3, #2
 8041076:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 804107a:	2300      	movs	r3, #0
 804107c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041080:	2303      	movs	r3, #3
 8041082:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 8041086:	230a      	movs	r3, #10
 8041088:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 804108c:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8041090:	4619      	mov	r1, r3
 8041092:	4811      	ldr	r0, [pc, #68]	; (80410d8 <HAL_OSPI_MspInit+0x170>)
 8041094:	f001 fcae 	bl	80429f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0;
 8041098:	2307      	movs	r3, #7
 804109a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804109e:	2302      	movs	r3, #2
 80410a0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80410a4:	2300      	movs	r3, #0
 80410a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80410aa:	2303      	movs	r3, #3
 80410ac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF10_OCTOSPI1;
 80410b0:	230a      	movs	r3, #10
 80410b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80410b6:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80410ba:	4619      	mov	r1, r3
 80410bc:	4807      	ldr	r0, [pc, #28]	; (80410dc <HAL_OSPI_MspInit+0x174>)
 80410be:	f001 fc99 	bl	80429f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN OCTOSPI1_MspInit 1 */

  /* USER CODE END OCTOSPI1_MspInit 1 */
  }

}
 80410c2:	bf00      	nop
 80410c4:	37c0      	adds	r7, #192	; 0xc0
 80410c6:	46bd      	mov	sp, r7
 80410c8:	bd80      	pop	{r7, pc}
 80410ca:	bf00      	nop
 80410cc:	44021000 	.word	0x44021000
 80410d0:	40021000 	.word	0x40021000
 80410d4:	42020800 	.word	0x42020800
 80410d8:	42020000 	.word	0x42020000
 80410dc:	42020400 	.word	0x42020400

080410e0 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 80410e0:	b580      	push	{r7, lr}
 80410e2:	b0b0      	sub	sp, #192	; 0xc0
 80410e4:	af00      	add	r7, sp, #0
 80410e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80410e8:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80410ec:	2200      	movs	r2, #0
 80410ee:	601a      	str	r2, [r3, #0]
 80410f0:	605a      	str	r2, [r3, #4]
 80410f2:	609a      	str	r2, [r3, #8]
 80410f4:	60da      	str	r2, [r3, #12]
 80410f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80410f8:	f107 0318 	add.w	r3, r7, #24
 80410fc:	2294      	movs	r2, #148	; 0x94
 80410fe:	2100      	movs	r1, #0
 8041100:	4618      	mov	r0, r3
 8041102:	f007 fec7 	bl	8048e94 <memset>
  if(hsd->Instance==SDMMC1)
 8041106:	687b      	ldr	r3, [r7, #4]
 8041108:	681b      	ldr	r3, [r3, #0]
 804110a:	4a33      	ldr	r2, [pc, #204]	; (80411d8 <HAL_SD_MspInit+0xf8>)
 804110c:	4293      	cmp	r3, r2
 804110e:	d15f      	bne.n	80411d0 <HAL_SD_MspInit+0xf0>

  /* USER CODE END SDMMC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SDMMC1;
 8041110:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8041114:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Sdmmc1ClockSelection = RCC_SDMMC1CLKSOURCE_MSI;
 8041116:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 804111a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804111e:	f107 0318 	add.w	r3, r7, #24
 8041122:	4618      	mov	r0, r3
 8041124:	f003 f990 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 8041128:	4603      	mov	r3, r0
 804112a:	2b00      	cmp	r3, #0
 804112c:	d001      	beq.n	8041132 <HAL_SD_MspInit+0x52>
    {
      Error_Handler();
 804112e:	f7ff fdc9 	bl	8040cc4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8041132:	4b2a      	ldr	r3, [pc, #168]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041134:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041136:	4a29      	ldr	r2, [pc, #164]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804113c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804113e:	4b27      	ldr	r3, [pc, #156]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041140:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8041146:	617b      	str	r3, [r7, #20]
 8041148:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 804114a:	4b24      	ldr	r3, [pc, #144]	; (80411dc <HAL_SD_MspInit+0xfc>)
 804114c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804114e:	4a23      	ldr	r2, [pc, #140]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041150:	f043 0308 	orr.w	r3, r3, #8
 8041154:	64d3      	str	r3, [r2, #76]	; 0x4c
 8041156:	4b21      	ldr	r3, [pc, #132]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804115a:	f003 0308 	and.w	r3, r3, #8
 804115e:	613b      	str	r3, [r7, #16]
 8041160:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8041162:	4b1e      	ldr	r3, [pc, #120]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041164:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041166:	4a1d      	ldr	r2, [pc, #116]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041168:	f043 0304 	orr.w	r3, r3, #4
 804116c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804116e:	4b1b      	ldr	r3, [pc, #108]	; (80411dc <HAL_SD_MspInit+0xfc>)
 8041170:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041172:	f003 0304 	and.w	r3, r3, #4
 8041176:	60fb      	str	r3, [r7, #12]
 8041178:	68fb      	ldr	r3, [r7, #12]
    PC12     ------> SDMMC1_CK
    PC10     ------> SDMMC1_D2
    PC9     ------> SDMMC1_D1
    PC8     ------> SDMMC1_D0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 804117a:	2304      	movs	r3, #4
 804117c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041180:	2302      	movs	r3, #2
 8041182:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041186:	2300      	movs	r3, #0
 8041188:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804118c:	2303      	movs	r3, #3
 804118e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8041192:	230c      	movs	r3, #12
 8041194:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8041198:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 804119c:	4619      	mov	r1, r3
 804119e:	4810      	ldr	r0, [pc, #64]	; (80411e0 <HAL_SD_MspInit+0x100>)
 80411a0:	f001 fc28 	bl	80429f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_10|GPIO_PIN_9
 80411a4:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 80411a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
                          |GPIO_PIN_8;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80411ac:	2302      	movs	r3, #2
 80411ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80411b2:	2300      	movs	r3, #0
 80411b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80411b8:	2303      	movs	r3, #3
 80411ba:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80411be:	230c      	movs	r3, #12
 80411c0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80411c4:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80411c8:	4619      	mov	r1, r3
 80411ca:	4806      	ldr	r0, [pc, #24]	; (80411e4 <HAL_SD_MspInit+0x104>)
 80411cc:	f001 fc12 	bl	80429f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SDMMC1_MspInit 1 */

  /* USER CODE END SDMMC1_MspInit 1 */
  }

}
 80411d0:	bf00      	nop
 80411d2:	37c0      	adds	r7, #192	; 0xc0
 80411d4:	46bd      	mov	sp, r7
 80411d6:	bd80      	pop	{r7, pc}
 80411d8:	420c8000 	.word	0x420c8000
 80411dc:	40021000 	.word	0x40021000
 80411e0:	42020c00 	.word	0x42020c00
 80411e4:	42020800 	.word	0x42020800

080411e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80411e8:	b580      	push	{r7, lr}
 80411ea:	b08a      	sub	sp, #40	; 0x28
 80411ec:	af00      	add	r7, sp, #0
 80411ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80411f0:	f107 0314 	add.w	r3, r7, #20
 80411f4:	2200      	movs	r2, #0
 80411f6:	601a      	str	r2, [r3, #0]
 80411f8:	605a      	str	r2, [r3, #4]
 80411fa:	609a      	str	r2, [r3, #8]
 80411fc:	60da      	str	r2, [r3, #12]
 80411fe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8041200:	687b      	ldr	r3, [r7, #4]
 8041202:	681b      	ldr	r3, [r3, #0]
 8041204:	4a18      	ldr	r2, [pc, #96]	; (8041268 <HAL_SPI_MspInit+0x80>)
 8041206:	4293      	cmp	r3, r2
 8041208:	d129      	bne.n	804125e <HAL_SPI_MspInit+0x76>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 804120a:	4b18      	ldr	r3, [pc, #96]	; (804126c <HAL_SPI_MspInit+0x84>)
 804120c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804120e:	4a17      	ldr	r2, [pc, #92]	; (804126c <HAL_SPI_MspInit+0x84>)
 8041210:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8041214:	6613      	str	r3, [r2, #96]	; 0x60
 8041216:	4b15      	ldr	r3, [pc, #84]	; (804126c <HAL_SPI_MspInit+0x84>)
 8041218:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804121a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804121e:	613b      	str	r3, [r7, #16]
 8041220:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8041222:	4b12      	ldr	r3, [pc, #72]	; (804126c <HAL_SPI_MspInit+0x84>)
 8041224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041226:	4a11      	ldr	r2, [pc, #68]	; (804126c <HAL_SPI_MspInit+0x84>)
 8041228:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 804122c:	64d3      	str	r3, [r2, #76]	; 0x4c
 804122e:	4b0f      	ldr	r3, [pc, #60]	; (804126c <HAL_SPI_MspInit+0x84>)
 8041230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041232:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8041236:	60fb      	str	r3, [r7, #12]
 8041238:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 804123a:	f002 f917 	bl	804346c <HAL_PWREx_EnableVddIO2>
    PG4     ------> SPI1_MOSI
    PG2     ------> SPI1_SCK
    PG3     ------> SPI1_MISO
    PG5     ------> SPI1_NSS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_3|BLE_CSN_Pin;
 804123e:	233c      	movs	r3, #60	; 0x3c
 8041240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041242:	2302      	movs	r3, #2
 8041244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041246:	2300      	movs	r3, #0
 8041248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804124a:	2300      	movs	r3, #0
 804124c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 804124e:	2305      	movs	r3, #5
 8041250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8041252:	f107 0314 	add.w	r3, r7, #20
 8041256:	4619      	mov	r1, r3
 8041258:	4805      	ldr	r0, [pc, #20]	; (8041270 <HAL_SPI_MspInit+0x88>)
 804125a:	f001 fbcb 	bl	80429f4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 804125e:	bf00      	nop
 8041260:	3728      	adds	r7, #40	; 0x28
 8041262:	46bd      	mov	sp, r7
 8041264:	bd80      	pop	{r7, pc}
 8041266:	bf00      	nop
 8041268:	40013000 	.word	0x40013000
 804126c:	40021000 	.word	0x40021000
 8041270:	42021800 	.word	0x42021800

08041274 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8041274:	b480      	push	{r7}
 8041276:	b085      	sub	sp, #20
 8041278:	af00      	add	r7, sp, #0
 804127a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 804127c:	687b      	ldr	r3, [r7, #4]
 804127e:	681b      	ldr	r3, [r3, #0]
 8041280:	4a13      	ldr	r2, [pc, #76]	; (80412d0 <HAL_TIM_Base_MspInit+0x5c>)
 8041282:	4293      	cmp	r3, r2
 8041284:	d10c      	bne.n	80412a0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8041286:	4b13      	ldr	r3, [pc, #76]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 8041288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804128a:	4a12      	ldr	r2, [pc, #72]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 804128c:	f043 0304 	orr.w	r3, r3, #4
 8041290:	6593      	str	r3, [r2, #88]	; 0x58
 8041292:	4b10      	ldr	r3, [pc, #64]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 8041294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041296:	f003 0304 	and.w	r3, r3, #4
 804129a:	60fb      	str	r3, [r7, #12]
 804129c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }

}
 804129e:	e010      	b.n	80412c2 <HAL_TIM_Base_MspInit+0x4e>
  else if(htim_base->Instance==TIM16)
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	681b      	ldr	r3, [r3, #0]
 80412a4:	4a0c      	ldr	r2, [pc, #48]	; (80412d8 <HAL_TIM_Base_MspInit+0x64>)
 80412a6:	4293      	cmp	r3, r2
 80412a8:	d10b      	bne.n	80412c2 <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM16_CLK_ENABLE();
 80412aa:	4b0a      	ldr	r3, [pc, #40]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 80412ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80412ae:	4a09      	ldr	r2, [pc, #36]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 80412b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80412b4:	6613      	str	r3, [r2, #96]	; 0x60
 80412b6:	4b07      	ldr	r3, [pc, #28]	; (80412d4 <HAL_TIM_Base_MspInit+0x60>)
 80412b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80412ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80412be:	60bb      	str	r3, [r7, #8]
 80412c0:	68bb      	ldr	r3, [r7, #8]
}
 80412c2:	bf00      	nop
 80412c4:	3714      	adds	r7, #20
 80412c6:	46bd      	mov	sp, r7
 80412c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80412cc:	4770      	bx	lr
 80412ce:	bf00      	nop
 80412d0:	40000800 	.word	0x40000800
 80412d4:	40021000 	.word	0x40021000
 80412d8:	40014400 	.word	0x40014400

080412dc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80412dc:	b580      	push	{r7, lr}
 80412de:	b0ae      	sub	sp, #184	; 0xb8
 80412e0:	af00      	add	r7, sp, #0
 80412e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80412e4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80412e8:	2200      	movs	r2, #0
 80412ea:	601a      	str	r2, [r3, #0]
 80412ec:	605a      	str	r2, [r3, #4]
 80412ee:	609a      	str	r2, [r3, #8]
 80412f0:	60da      	str	r2, [r3, #12]
 80412f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80412f4:	f107 0310 	add.w	r3, r7, #16
 80412f8:	2294      	movs	r2, #148	; 0x94
 80412fa:	2100      	movs	r1, #0
 80412fc:	4618      	mov	r0, r3
 80412fe:	f007 fdc9 	bl	8048e94 <memset>
  if(hpcd->Instance==USB)
 8041302:	687b      	ldr	r3, [r7, #4]
 8041304:	681b      	ldr	r3, [r3, #0]
 8041306:	4a23      	ldr	r2, [pc, #140]	; (8041394 <HAL_PCD_MspInit+0xb8>)
 8041308:	4293      	cmp	r3, r2
 804130a:	d13e      	bne.n	804138a <HAL_PCD_MspInit+0xae>

  /* USER CODE END USB_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB;
 804130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8041310:	613b      	str	r3, [r7, #16]
    PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_MSI;
 8041312:	f04f 6340 	mov.w	r3, #201326592	; 0xc000000
 8041316:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804131a:	f107 0310 	add.w	r3, r7, #16
 804131e:	4618      	mov	r0, r3
 8041320:	f003 f892 	bl	8044448 <HAL_RCCEx_PeriphCLKConfig>
 8041324:	4603      	mov	r3, r0
 8041326:	2b00      	cmp	r3, #0
 8041328:	d001      	beq.n	804132e <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 804132a:	f7ff fccb 	bl	8040cc4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 804132e:	4b1a      	ldr	r3, [pc, #104]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 8041330:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8041332:	4a19      	ldr	r2, [pc, #100]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 8041334:	f043 0301 	orr.w	r3, r3, #1
 8041338:	64d3      	str	r3, [r2, #76]	; 0x4c
 804133a:	4b17      	ldr	r3, [pc, #92]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 804133c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804133e:	f003 0301 	and.w	r3, r3, #1
 8041342:	60fb      	str	r3, [r7, #12]
 8041344:	68fb      	ldr	r3, [r7, #12]
    /**USB GPIO Configuration
    PA12     ------> USB_DP
    PA11     ------> USB_DM
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_11;
 8041346:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 804134a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804134e:	2302      	movs	r3, #2
 8041350:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041354:	2300      	movs	r3, #0
 8041356:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 804135a:	2300      	movs	r3, #0
 804135c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_USB;
 8041360:	230a      	movs	r3, #10
 8041362:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8041366:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 804136a:	4619      	mov	r1, r3
 804136c:	480b      	ldr	r0, [pc, #44]	; (804139c <HAL_PCD_MspInit+0xc0>)
 804136e:	f001 fb41 	bl	80429f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8041372:	4b09      	ldr	r3, [pc, #36]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 8041374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041376:	4a08      	ldr	r2, [pc, #32]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 8041378:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 804137c:	65d3      	str	r3, [r2, #92]	; 0x5c
 804137e:	4b06      	ldr	r3, [pc, #24]	; (8041398 <HAL_PCD_MspInit+0xbc>)
 8041380:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041382:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8041386:	60bb      	str	r3, [r7, #8]
 8041388:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }

}
 804138a:	bf00      	nop
 804138c:	37b8      	adds	r7, #184	; 0xb8
 804138e:	46bd      	mov	sp, r7
 8041390:	bd80      	pop	{r7, pc}
 8041392:	bf00      	nop
 8041394:	4000d400 	.word	0x4000d400
 8041398:	40021000 	.word	0x40021000
 804139c:	42020000 	.word	0x42020000

080413a0 <HAL_FMC_MspInit>:

}

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 80413a0:	b580      	push	{r7, lr}
 80413a2:	b086      	sub	sp, #24
 80413a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80413a6:	1d3b      	adds	r3, r7, #4
 80413a8:	2200      	movs	r2, #0
 80413aa:	601a      	str	r2, [r3, #0]
 80413ac:	605a      	str	r2, [r3, #4]
 80413ae:	609a      	str	r2, [r3, #8]
 80413b0:	60da      	str	r2, [r3, #12]
 80413b2:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 80413b4:	4b23      	ldr	r3, [pc, #140]	; (8041444 <HAL_FMC_MspInit+0xa4>)
 80413b6:	681b      	ldr	r3, [r3, #0]
 80413b8:	2b00      	cmp	r3, #0
 80413ba:	d13e      	bne.n	804143a <HAL_FMC_MspInit+0x9a>
    return;
  }
  FMC_Initialized = 1;
 80413bc:	4b21      	ldr	r3, [pc, #132]	; (8041444 <HAL_FMC_MspInit+0xa4>)
 80413be:	2201      	movs	r2, #1
 80413c0:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 80413c2:	4b21      	ldr	r3, [pc, #132]	; (8041448 <HAL_FMC_MspInit+0xa8>)
 80413c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80413c6:	4a20      	ldr	r2, [pc, #128]	; (8041448 <HAL_FMC_MspInit+0xa8>)
 80413c8:	f043 0301 	orr.w	r3, r3, #1
 80413cc:	6513      	str	r3, [r2, #80]	; 0x50
 80413ce:	4b1e      	ldr	r3, [pc, #120]	; (8041448 <HAL_FMC_MspInit+0xa8>)
 80413d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80413d2:	f003 0301 	and.w	r3, r3, #1
 80413d6:	603b      	str	r3, [r7, #0]
 80413d8:	683b      	ldr	r3, [r7, #0]
  PE13   ------> FMC_DA10
  PE13   ------> FMC_D10
  PD10   ------> FMC_DA15
  PD10   ------> FMC_D15
  */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1|GPIO_PIN_0
 80413da:	f24c 73b3 	movw	r3, #51123	; 0xc7b3
 80413de:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_7|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_8|GPIO_PIN_10;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80413e0:	2302      	movs	r3, #2
 80413e2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80413e4:	2300      	movs	r3, #0
 80413e6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80413e8:	2303      	movs	r3, #3
 80413ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80413ec:	230c      	movs	r3, #12
 80413ee:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80413f0:	1d3b      	adds	r3, r7, #4
 80413f2:	4619      	mov	r1, r3
 80413f4:	4815      	ldr	r0, [pc, #84]	; (804144c <HAL_FMC_MspInit+0xac>)
 80413f6:	f001 fafd 	bl	80429f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80413fa:	2301      	movs	r3, #1
 80413fc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80413fe:	2302      	movs	r3, #2
 8041400:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041402:	2300      	movs	r3, #0
 8041404:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041406:	2303      	movs	r3, #3
 8041408:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804140a:	230c      	movs	r3, #12
 804140c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 804140e:	1d3b      	adds	r3, r7, #4
 8041410:	4619      	mov	r1, r3
 8041412:	480f      	ldr	r0, [pc, #60]	; (8041450 <HAL_FMC_MspInit+0xb0>)
 8041414:	f001 faee 	bl	80429f4 <HAL_GPIO_Init>

  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10|GPIO_PIN_12|GPIO_PIN_7
 8041418:	f64f 7380 	movw	r3, #65408	; 0xff80
 804141c:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_14|GPIO_PIN_11|GPIO_PIN_15|GPIO_PIN_9
                          |GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 804141e:	2302      	movs	r3, #2
 8041420:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041422:	2300      	movs	r3, #0
 8041424:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8041426:	2303      	movs	r3, #3
 8041428:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 804142a:	230c      	movs	r3, #12
 804142c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 804142e:	1d3b      	adds	r3, r7, #4
 8041430:	4619      	mov	r1, r3
 8041432:	4808      	ldr	r0, [pc, #32]	; (8041454 <HAL_FMC_MspInit+0xb4>)
 8041434:	f001 fade 	bl	80429f4 <HAL_GPIO_Init>
 8041438:	e000      	b.n	804143c <HAL_FMC_MspInit+0x9c>
    return;
 804143a:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 804143c:	3718      	adds	r7, #24
 804143e:	46bd      	mov	sp, r7
 8041440:	bd80      	pop	{r7, pc}
 8041442:	bf00      	nop
 8041444:	200187dc 	.word	0x200187dc
 8041448:	40021000 	.word	0x40021000
 804144c:	42020c00 	.word	0x42020c00
 8041450:	42021400 	.word	0x42021400
 8041454:	42021000 	.word	0x42021000

08041458 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* hsram){
 8041458:	b580      	push	{r7, lr}
 804145a:	b082      	sub	sp, #8
 804145c:	af00      	add	r7, sp, #0
 804145e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8041460:	f7ff ff9e 	bl	80413a0 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8041464:	bf00      	nop
 8041466:	3708      	adds	r7, #8
 8041468:	46bd      	mov	sp, r7
 804146a:	bd80      	pop	{r7, pc}

0804146c <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 804146c:	b580      	push	{r7, lr}
 804146e:	b08a      	sub	sp, #40	; 0x28
 8041470:	af00      	add	r7, sp, #0
 8041472:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 8041474:	687b      	ldr	r3, [r7, #4]
 8041476:	681b      	ldr	r3, [r3, #0]
 8041478:	4a2a      	ldr	r2, [pc, #168]	; (8041524 <HAL_SAI_MspInit+0xb8>)
 804147a:	4293      	cmp	r3, r2
 804147c:	d124      	bne.n	80414c8 <HAL_SAI_MspInit+0x5c>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 804147e:	4b2a      	ldr	r3, [pc, #168]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 8041480:	681b      	ldr	r3, [r3, #0]
 8041482:	2b00      	cmp	r3, #0
 8041484:	d10b      	bne.n	804149e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8041486:	4b29      	ldr	r3, [pc, #164]	; (804152c <HAL_SAI_MspInit+0xc0>)
 8041488:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 804148a:	4a28      	ldr	r2, [pc, #160]	; (804152c <HAL_SAI_MspInit+0xc0>)
 804148c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8041490:	6613      	str	r3, [r2, #96]	; 0x60
 8041492:	4b26      	ldr	r3, [pc, #152]	; (804152c <HAL_SAI_MspInit+0xc0>)
 8041494:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8041496:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 804149a:	613b      	str	r3, [r7, #16]
 804149c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 804149e:	4b22      	ldr	r3, [pc, #136]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 80414a0:	681b      	ldr	r3, [r3, #0]
 80414a2:	3301      	adds	r3, #1
 80414a4:	4a20      	ldr	r2, [pc, #128]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 80414a6:	6013      	str	r3, [r2, #0]
    PE5     ------> SAI1_SCK_A
    PE4     ------> SAI1_FS_A
    PE2     ------> SAI1_MCLK_A
    PE6     ------> SAI1_SD_A
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_2|GPIO_PIN_6;
 80414a8:	2374      	movs	r3, #116	; 0x74
 80414aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80414ac:	2302      	movs	r3, #2
 80414ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80414b0:	2300      	movs	r3, #0
 80414b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80414b4:	2300      	movs	r3, #0
 80414b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80414b8:	230d      	movs	r3, #13
 80414ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80414bc:	f107 0314 	add.w	r3, r7, #20
 80414c0:	4619      	mov	r1, r3
 80414c2:	481b      	ldr	r0, [pc, #108]	; (8041530 <HAL_SAI_MspInit+0xc4>)
 80414c4:	f001 fa96 	bl	80429f4 <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 80414c8:	687b      	ldr	r3, [r7, #4]
 80414ca:	681b      	ldr	r3, [r3, #0]
 80414cc:	4a19      	ldr	r2, [pc, #100]	; (8041534 <HAL_SAI_MspInit+0xc8>)
 80414ce:	4293      	cmp	r3, r2
 80414d0:	d124      	bne.n	804151c <HAL_SAI_MspInit+0xb0>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80414d2:	4b15      	ldr	r3, [pc, #84]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 80414d4:	681b      	ldr	r3, [r3, #0]
 80414d6:	2b00      	cmp	r3, #0
 80414d8:	d10b      	bne.n	80414f2 <HAL_SAI_MspInit+0x86>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80414da:	4b14      	ldr	r3, [pc, #80]	; (804152c <HAL_SAI_MspInit+0xc0>)
 80414dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80414de:	4a13      	ldr	r2, [pc, #76]	; (804152c <HAL_SAI_MspInit+0xc0>)
 80414e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80414e4:	6613      	str	r3, [r2, #96]	; 0x60
 80414e6:	4b11      	ldr	r3, [pc, #68]	; (804152c <HAL_SAI_MspInit+0xc0>)
 80414e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80414ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80414ee:	60fb      	str	r3, [r7, #12]
 80414f0:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 80414f2:	4b0d      	ldr	r3, [pc, #52]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 80414f4:	681b      	ldr	r3, [r3, #0]
 80414f6:	3301      	adds	r3, #1
 80414f8:	4a0b      	ldr	r2, [pc, #44]	; (8041528 <HAL_SAI_MspInit+0xbc>)
 80414fa:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE3     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80414fc:	2308      	movs	r3, #8
 80414fe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8041500:	2302      	movs	r3, #2
 8041502:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8041504:	2300      	movs	r3, #0
 8041506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8041508:	2300      	movs	r3, #0
 804150a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 804150c:	230d      	movs	r3, #13
 804150e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8041510:	f107 0314 	add.w	r3, r7, #20
 8041514:	4619      	mov	r1, r3
 8041516:	4806      	ldr	r0, [pc, #24]	; (8041530 <HAL_SAI_MspInit+0xc4>)
 8041518:	f001 fa6c 	bl	80429f4 <HAL_GPIO_Init>

    }
}
 804151c:	bf00      	nop
 804151e:	3728      	adds	r7, #40	; 0x28
 8041520:	46bd      	mov	sp, r7
 8041522:	bd80      	pop	{r7, pc}
 8041524:	40015404 	.word	0x40015404
 8041528:	200187e0 	.word	0x200187e0
 804152c:	40021000 	.word	0x40021000
 8041530:	42021000 	.word	0x42021000
 8041534:	40015424 	.word	0x40015424

08041538 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8041538:	b480      	push	{r7}
 804153a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 804153c:	e7fe      	b.n	804153c <MemManage_Handler+0x4>

0804153e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 804153e:	b480      	push	{r7}
 8041540:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8041542:	e7fe      	b.n	8041542 <UsageFault_Handler+0x4>

08041544 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8041544:	b480      	push	{r7}
 8041546:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8041548:	bf00      	nop
 804154a:	46bd      	mov	sp, r7
 804154c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041550:	4770      	bx	lr

08041552 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8041552:	b480      	push	{r7}
 8041554:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8041556:	bf00      	nop
 8041558:	46bd      	mov	sp, r7
 804155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804155e:	4770      	bx	lr

08041560 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8041560:	b580      	push	{r7, lr}
 8041562:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8041564:	f000 f896 	bl	8041694 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8041568:	bf00      	nop
 804156a:	bd80      	pop	{r7, pc}

0804156c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 804156c:	b480      	push	{r7}
 804156e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8041570:	bf00      	nop
 8041572:	46bd      	mov	sp, r7
 8041574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041578:	4770      	bx	lr
	...

0804157c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 804157c:	b580      	push	{r7, lr}
 804157e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8041580:	f007 fc9e 	bl	8048ec0 <__SECURE_SystemCoreClockUpdate_veneer>
 8041584:	4603      	mov	r3, r0
 8041586:	4a02      	ldr	r2, [pc, #8]	; (8041590 <SystemCoreClockUpdate+0x14>)
 8041588:	6013      	str	r3, [r2, #0]
}
 804158a:	bf00      	nop
 804158c:	bd80      	pop	{r7, pc}
 804158e:	bf00      	nop
 8041590:	20018000 	.word	0x20018000

08041594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8041594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80415cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8041598:	f7ff ffe8 	bl	804156c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 804159c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 804159e:	e003      	b.n	80415a8 <LoopCopyDataInit>

080415a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80415a0:	4b0b      	ldr	r3, [pc, #44]	; (80415d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80415a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80415a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80415a6:	3104      	adds	r1, #4

080415a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80415a8:	480a      	ldr	r0, [pc, #40]	; (80415d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80415aa:	4b0b      	ldr	r3, [pc, #44]	; (80415d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80415ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80415ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80415b0:	d3f6      	bcc.n	80415a0 <CopyDataInit>
	ldr	r2, =_sbss
 80415b2:	4a0a      	ldr	r2, [pc, #40]	; (80415dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80415b4:	e002      	b.n	80415bc <LoopFillZerobss>

080415b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80415b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80415b8:	f842 3b04 	str.w	r3, [r2], #4

080415bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80415bc:	4b08      	ldr	r3, [pc, #32]	; (80415e0 <LoopForever+0x16>)
	cmp	r2, r3
 80415be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80415c0:	d3f9      	bcc.n	80415b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80415c2:	f007 fc43 	bl	8048e4c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80415c6:	f7fe fe67 	bl	8040298 <main>

080415ca <LoopForever>:

LoopForever:
    b LoopForever
 80415ca:	e7fe      	b.n	80415ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 80415cc:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 80415d0:	08048f30 	.word	0x08048f30
	ldr	r0, =_sdata
 80415d4:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 80415d8:	2001800c 	.word	0x2001800c
	ldr	r2, =_sbss
 80415dc:	2001800c 	.word	0x2001800c
	ldr	r3, = _ebss
 80415e0:	200187fc 	.word	0x200187fc

080415e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80415e4:	e7fe      	b.n	80415e4 <ADC1_2_IRQHandler>

080415e6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80415e6:	b580      	push	{r7, lr}
 80415e8:	b082      	sub	sp, #8
 80415ea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80415ec:	2300      	movs	r3, #0
 80415ee:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80415f0:	2004      	movs	r0, #4
 80415f2:	f001 f8e5 	bl	80427c0 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 80415f6:	f7ff ffc1 	bl	804157c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80415fa:	2000      	movs	r0, #0
 80415fc:	f000 f80e 	bl	804161c <HAL_InitTick>
 8041600:	4603      	mov	r3, r0
 8041602:	2b00      	cmp	r3, #0
 8041604:	d002      	beq.n	804160c <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8041606:	2301      	movs	r3, #1
 8041608:	71fb      	strb	r3, [r7, #7]
 804160a:	e001      	b.n	8041610 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 804160c:	f7ff fb60 	bl	8040cd0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8041610:	79fb      	ldrb	r3, [r7, #7]
}
 8041612:	4618      	mov	r0, r3
 8041614:	3708      	adds	r7, #8
 8041616:	46bd      	mov	sp, r7
 8041618:	bd80      	pop	{r7, pc}
	...

0804161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 804161c:	b580      	push	{r7, lr}
 804161e:	b084      	sub	sp, #16
 8041620:	af00      	add	r7, sp, #0
 8041622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8041624:	2300      	movs	r3, #0
 8041626:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8041628:	4b17      	ldr	r3, [pc, #92]	; (8041688 <HAL_InitTick+0x6c>)
 804162a:	781b      	ldrb	r3, [r3, #0]
 804162c:	2b00      	cmp	r3, #0
 804162e:	d023      	beq.n	8041678 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8041630:	4b16      	ldr	r3, [pc, #88]	; (804168c <HAL_InitTick+0x70>)
 8041632:	681a      	ldr	r2, [r3, #0]
 8041634:	4b14      	ldr	r3, [pc, #80]	; (8041688 <HAL_InitTick+0x6c>)
 8041636:	781b      	ldrb	r3, [r3, #0]
 8041638:	4619      	mov	r1, r3
 804163a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 804163e:	fbb3 f3f1 	udiv	r3, r3, r1
 8041642:	fbb2 f3f3 	udiv	r3, r2, r3
 8041646:	4618      	mov	r0, r3
 8041648:	f001 f8df 	bl	804280a <HAL_SYSTICK_Config>
 804164c:	4603      	mov	r3, r0
 804164e:	2b00      	cmp	r3, #0
 8041650:	d10f      	bne.n	8041672 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8041652:	687b      	ldr	r3, [r7, #4]
 8041654:	2b07      	cmp	r3, #7
 8041656:	d809      	bhi.n	804166c <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8041658:	2200      	movs	r2, #0
 804165a:	6879      	ldr	r1, [r7, #4]
 804165c:	f04f 30ff 	mov.w	r0, #4294967295
 8041660:	f001 f8b9 	bl	80427d6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8041664:	4a0a      	ldr	r2, [pc, #40]	; (8041690 <HAL_InitTick+0x74>)
 8041666:	687b      	ldr	r3, [r7, #4]
 8041668:	6013      	str	r3, [r2, #0]
 804166a:	e007      	b.n	804167c <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 804166c:	2301      	movs	r3, #1
 804166e:	73fb      	strb	r3, [r7, #15]
 8041670:	e004      	b.n	804167c <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8041672:	2301      	movs	r3, #1
 8041674:	73fb      	strb	r3, [r7, #15]
 8041676:	e001      	b.n	804167c <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8041678:	2301      	movs	r3, #1
 804167a:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 804167c:	7bfb      	ldrb	r3, [r7, #15]
}
 804167e:	4618      	mov	r0, r3
 8041680:	3710      	adds	r7, #16
 8041682:	46bd      	mov	sp, r7
 8041684:	bd80      	pop	{r7, pc}
 8041686:	bf00      	nop
 8041688:	20018008 	.word	0x20018008
 804168c:	20018000 	.word	0x20018000
 8041690:	20018004 	.word	0x20018004

08041694 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8041694:	b480      	push	{r7}
 8041696:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8041698:	4b06      	ldr	r3, [pc, #24]	; (80416b4 <HAL_IncTick+0x20>)
 804169a:	781b      	ldrb	r3, [r3, #0]
 804169c:	461a      	mov	r2, r3
 804169e:	4b06      	ldr	r3, [pc, #24]	; (80416b8 <HAL_IncTick+0x24>)
 80416a0:	681b      	ldr	r3, [r3, #0]
 80416a2:	4413      	add	r3, r2
 80416a4:	4a04      	ldr	r2, [pc, #16]	; (80416b8 <HAL_IncTick+0x24>)
 80416a6:	6013      	str	r3, [r2, #0]
}
 80416a8:	bf00      	nop
 80416aa:	46bd      	mov	sp, r7
 80416ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416b0:	4770      	bx	lr
 80416b2:	bf00      	nop
 80416b4:	20018008 	.word	0x20018008
 80416b8:	200187e4 	.word	0x200187e4

080416bc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80416bc:	b480      	push	{r7}
 80416be:	af00      	add	r7, sp, #0
  return uwTick;
 80416c0:	4b03      	ldr	r3, [pc, #12]	; (80416d0 <HAL_GetTick+0x14>)
 80416c2:	681b      	ldr	r3, [r3, #0]
}
 80416c4:	4618      	mov	r0, r3
 80416c6:	46bd      	mov	sp, r7
 80416c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80416cc:	4770      	bx	lr
 80416ce:	bf00      	nop
 80416d0:	200187e4 	.word	0x200187e4

080416d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80416d4:	b580      	push	{r7, lr}
 80416d6:	b084      	sub	sp, #16
 80416d8:	af00      	add	r7, sp, #0
 80416da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80416dc:	f7ff ffee 	bl	80416bc <HAL_GetTick>
 80416e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80416e2:	687b      	ldr	r3, [r7, #4]
 80416e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80416e6:	68fb      	ldr	r3, [r7, #12]
 80416e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80416ec:	d005      	beq.n	80416fa <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80416ee:	4b0a      	ldr	r3, [pc, #40]	; (8041718 <HAL_Delay+0x44>)
 80416f0:	781b      	ldrb	r3, [r3, #0]
 80416f2:	461a      	mov	r2, r3
 80416f4:	68fb      	ldr	r3, [r7, #12]
 80416f6:	4413      	add	r3, r2
 80416f8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80416fa:	bf00      	nop
 80416fc:	f7ff ffde 	bl	80416bc <HAL_GetTick>
 8041700:	4602      	mov	r2, r0
 8041702:	68bb      	ldr	r3, [r7, #8]
 8041704:	1ad3      	subs	r3, r2, r3
 8041706:	68fa      	ldr	r2, [r7, #12]
 8041708:	429a      	cmp	r2, r3
 804170a:	d8f7      	bhi.n	80416fc <HAL_Delay+0x28>
  {
  }
}
 804170c:	bf00      	nop
 804170e:	bf00      	nop
 8041710:	3710      	adds	r7, #16
 8041712:	46bd      	mov	sp, r7
 8041714:	bd80      	pop	{r7, pc}
 8041716:	bf00      	nop
 8041718:	20018008 	.word	0x20018008

0804171c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 804171c:	b480      	push	{r7}
 804171e:	b083      	sub	sp, #12
 8041720:	af00      	add	r7, sp, #0
 8041722:	6078      	str	r0, [r7, #4]
 8041724:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8041726:	687b      	ldr	r3, [r7, #4]
 8041728:	689b      	ldr	r3, [r3, #8]
 804172a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 804172e:	683b      	ldr	r3, [r7, #0]
 8041730:	431a      	orrs	r2, r3
 8041732:	687b      	ldr	r3, [r7, #4]
 8041734:	609a      	str	r2, [r3, #8]
}
 8041736:	bf00      	nop
 8041738:	370c      	adds	r7, #12
 804173a:	46bd      	mov	sp, r7
 804173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041740:	4770      	bx	lr

08041742 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8041742:	b480      	push	{r7}
 8041744:	b083      	sub	sp, #12
 8041746:	af00      	add	r7, sp, #0
 8041748:	6078      	str	r0, [r7, #4]
 804174a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 804174c:	687b      	ldr	r3, [r7, #4]
 804174e:	689b      	ldr	r3, [r3, #8]
 8041750:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8041754:	683b      	ldr	r3, [r7, #0]
 8041756:	431a      	orrs	r2, r3
 8041758:	687b      	ldr	r3, [r7, #4]
 804175a:	609a      	str	r2, [r3, #8]
}
 804175c:	bf00      	nop
 804175e:	370c      	adds	r7, #12
 8041760:	46bd      	mov	sp, r7
 8041762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041766:	4770      	bx	lr

08041768 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8041768:	b480      	push	{r7}
 804176a:	b083      	sub	sp, #12
 804176c:	af00      	add	r7, sp, #0
 804176e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8041770:	687b      	ldr	r3, [r7, #4]
 8041772:	689b      	ldr	r3, [r3, #8]
 8041774:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8041778:	4618      	mov	r0, r3
 804177a:	370c      	adds	r7, #12
 804177c:	46bd      	mov	sp, r7
 804177e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041782:	4770      	bx	lr

08041784 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8041784:	b480      	push	{r7}
 8041786:	b087      	sub	sp, #28
 8041788:	af00      	add	r7, sp, #0
 804178a:	60f8      	str	r0, [r7, #12]
 804178c:	60b9      	str	r1, [r7, #8]
 804178e:	607a      	str	r2, [r7, #4]
 8041790:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8041792:	68fb      	ldr	r3, [r7, #12]
 8041794:	3360      	adds	r3, #96	; 0x60
 8041796:	461a      	mov	r2, r3
 8041798:	68bb      	ldr	r3, [r7, #8]
 804179a:	009b      	lsls	r3, r3, #2
 804179c:	4413      	add	r3, r2
 804179e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80417a0:	697b      	ldr	r3, [r7, #20]
 80417a2:	681a      	ldr	r2, [r3, #0]
 80417a4:	4b08      	ldr	r3, [pc, #32]	; (80417c8 <LL_ADC_SetOffset+0x44>)
 80417a6:	4013      	ands	r3, r2
 80417a8:	687a      	ldr	r2, [r7, #4]
 80417aa:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80417ae:	683a      	ldr	r2, [r7, #0]
 80417b0:	430a      	orrs	r2, r1
 80417b2:	4313      	orrs	r3, r2
 80417b4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80417b8:	697b      	ldr	r3, [r7, #20]
 80417ba:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80417bc:	bf00      	nop
 80417be:	371c      	adds	r7, #28
 80417c0:	46bd      	mov	sp, r7
 80417c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417c6:	4770      	bx	lr
 80417c8:	03fff000 	.word	0x03fff000

080417cc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80417cc:	b480      	push	{r7}
 80417ce:	b085      	sub	sp, #20
 80417d0:	af00      	add	r7, sp, #0
 80417d2:	6078      	str	r0, [r7, #4]
 80417d4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80417d6:	687b      	ldr	r3, [r7, #4]
 80417d8:	3360      	adds	r3, #96	; 0x60
 80417da:	461a      	mov	r2, r3
 80417dc:	683b      	ldr	r3, [r7, #0]
 80417de:	009b      	lsls	r3, r3, #2
 80417e0:	4413      	add	r3, r2
 80417e2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80417e4:	68fb      	ldr	r3, [r7, #12]
 80417e6:	681b      	ldr	r3, [r3, #0]
 80417e8:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80417ec:	4618      	mov	r0, r3
 80417ee:	3714      	adds	r7, #20
 80417f0:	46bd      	mov	sp, r7
 80417f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80417f6:	4770      	bx	lr

080417f8 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80417f8:	b480      	push	{r7}
 80417fa:	b087      	sub	sp, #28
 80417fc:	af00      	add	r7, sp, #0
 80417fe:	60f8      	str	r0, [r7, #12]
 8041800:	60b9      	str	r1, [r7, #8]
 8041802:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8041804:	68fb      	ldr	r3, [r7, #12]
 8041806:	3360      	adds	r3, #96	; 0x60
 8041808:	461a      	mov	r2, r3
 804180a:	68bb      	ldr	r3, [r7, #8]
 804180c:	009b      	lsls	r3, r3, #2
 804180e:	4413      	add	r3, r2
 8041810:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8041812:	697b      	ldr	r3, [r7, #20]
 8041814:	681b      	ldr	r3, [r3, #0]
 8041816:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 804181a:	687b      	ldr	r3, [r7, #4]
 804181c:	431a      	orrs	r2, r3
 804181e:	697b      	ldr	r3, [r7, #20]
 8041820:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8041822:	bf00      	nop
 8041824:	371c      	adds	r7, #28
 8041826:	46bd      	mov	sp, r7
 8041828:	f85d 7b04 	ldr.w	r7, [sp], #4
 804182c:	4770      	bx	lr

0804182e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 804182e:	b480      	push	{r7}
 8041830:	b083      	sub	sp, #12
 8041832:	af00      	add	r7, sp, #0
 8041834:	6078      	str	r0, [r7, #4]
 8041836:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8041838:	687b      	ldr	r3, [r7, #4]
 804183a:	695b      	ldr	r3, [r3, #20]
 804183c:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8041840:	683b      	ldr	r3, [r7, #0]
 8041842:	431a      	orrs	r2, r3
 8041844:	687b      	ldr	r3, [r7, #4]
 8041846:	615a      	str	r2, [r3, #20]
}
 8041848:	bf00      	nop
 804184a:	370c      	adds	r7, #12
 804184c:	46bd      	mov	sp, r7
 804184e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041852:	4770      	bx	lr

08041854 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L5, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8041854:	b480      	push	{r7}
 8041856:	b087      	sub	sp, #28
 8041858:	af00      	add	r7, sp, #0
 804185a:	60f8      	str	r0, [r7, #12]
 804185c:	60b9      	str	r1, [r7, #8]
 804185e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8041860:	68fb      	ldr	r3, [r7, #12]
 8041862:	3330      	adds	r3, #48	; 0x30
 8041864:	461a      	mov	r2, r3
 8041866:	68bb      	ldr	r3, [r7, #8]
 8041868:	0a1b      	lsrs	r3, r3, #8
 804186a:	009b      	lsls	r3, r3, #2
 804186c:	f003 030c 	and.w	r3, r3, #12
 8041870:	4413      	add	r3, r2
 8041872:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8041874:	697b      	ldr	r3, [r7, #20]
 8041876:	681a      	ldr	r2, [r3, #0]
 8041878:	68bb      	ldr	r3, [r7, #8]
 804187a:	f003 031f 	and.w	r3, r3, #31
 804187e:	211f      	movs	r1, #31
 8041880:	fa01 f303 	lsl.w	r3, r1, r3
 8041884:	43db      	mvns	r3, r3
 8041886:	401a      	ands	r2, r3
 8041888:	687b      	ldr	r3, [r7, #4]
 804188a:	0e9b      	lsrs	r3, r3, #26
 804188c:	f003 011f 	and.w	r1, r3, #31
 8041890:	68bb      	ldr	r3, [r7, #8]
 8041892:	f003 031f 	and.w	r3, r3, #31
 8041896:	fa01 f303 	lsl.w	r3, r1, r3
 804189a:	431a      	orrs	r2, r3
 804189c:	697b      	ldr	r3, [r7, #20]
 804189e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80418a0:	bf00      	nop
 80418a2:	371c      	adds	r7, #28
 80418a4:	46bd      	mov	sp, r7
 80418a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80418aa:	4770      	bx	lr

080418ac <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80418ac:	b480      	push	{r7}
 80418ae:	b087      	sub	sp, #28
 80418b0:	af00      	add	r7, sp, #0
 80418b2:	60f8      	str	r0, [r7, #12]
 80418b4:	60b9      	str	r1, [r7, #8]
 80418b6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80418b8:	68fb      	ldr	r3, [r7, #12]
 80418ba:	3314      	adds	r3, #20
 80418bc:	461a      	mov	r2, r3
 80418be:	68bb      	ldr	r3, [r7, #8]
 80418c0:	0e5b      	lsrs	r3, r3, #25
 80418c2:	009b      	lsls	r3, r3, #2
 80418c4:	f003 0304 	and.w	r3, r3, #4
 80418c8:	4413      	add	r3, r2
 80418ca:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80418cc:	697b      	ldr	r3, [r7, #20]
 80418ce:	681a      	ldr	r2, [r3, #0]
 80418d0:	68bb      	ldr	r3, [r7, #8]
 80418d2:	0d1b      	lsrs	r3, r3, #20
 80418d4:	f003 031f 	and.w	r3, r3, #31
 80418d8:	2107      	movs	r1, #7
 80418da:	fa01 f303 	lsl.w	r3, r1, r3
 80418de:	43db      	mvns	r3, r3
 80418e0:	401a      	ands	r2, r3
 80418e2:	68bb      	ldr	r3, [r7, #8]
 80418e4:	0d1b      	lsrs	r3, r3, #20
 80418e6:	f003 031f 	and.w	r3, r3, #31
 80418ea:	6879      	ldr	r1, [r7, #4]
 80418ec:	fa01 f303 	lsl.w	r3, r1, r3
 80418f0:	431a      	orrs	r2, r3
 80418f2:	697b      	ldr	r3, [r7, #20]
 80418f4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80418f6:	bf00      	nop
 80418f8:	371c      	adds	r7, #28
 80418fa:	46bd      	mov	sp, r7
 80418fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041900:	4770      	bx	lr
	...

08041904 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8041904:	b480      	push	{r7}
 8041906:	b085      	sub	sp, #20
 8041908:	af00      	add	r7, sp, #0
 804190a:	60f8      	str	r0, [r7, #12]
 804190c:	60b9      	str	r1, [r7, #8]
 804190e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8041910:	68fb      	ldr	r3, [r7, #12]
 8041912:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8041916:	68bb      	ldr	r3, [r7, #8]
 8041918:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804191c:	43db      	mvns	r3, r3
 804191e:	401a      	ands	r2, r3
 8041920:	687b      	ldr	r3, [r7, #4]
 8041922:	f003 0318 	and.w	r3, r3, #24
 8041926:	4908      	ldr	r1, [pc, #32]	; (8041948 <LL_ADC_SetChannelSingleDiff+0x44>)
 8041928:	40d9      	lsrs	r1, r3
 804192a:	68bb      	ldr	r3, [r7, #8]
 804192c:	400b      	ands	r3, r1
 804192e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041932:	431a      	orrs	r2, r3
 8041934:	68fb      	ldr	r3, [r7, #12]
 8041936:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 804193a:	bf00      	nop
 804193c:	3714      	adds	r7, #20
 804193e:	46bd      	mov	sp, r7
 8041940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041944:	4770      	bx	lr
 8041946:	bf00      	nop
 8041948:	0007ffff 	.word	0x0007ffff

0804194c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 804194c:	b480      	push	{r7}
 804194e:	b083      	sub	sp, #12
 8041950:	af00      	add	r7, sp, #0
 8041952:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8041954:	687b      	ldr	r3, [r7, #4]
 8041956:	689b      	ldr	r3, [r3, #8]
 8041958:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 804195c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8041960:	687a      	ldr	r2, [r7, #4]
 8041962:	6093      	str	r3, [r2, #8]
}
 8041964:	bf00      	nop
 8041966:	370c      	adds	r7, #12
 8041968:	46bd      	mov	sp, r7
 804196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804196e:	4770      	bx	lr

08041970 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8041970:	b480      	push	{r7}
 8041972:	b083      	sub	sp, #12
 8041974:	af00      	add	r7, sp, #0
 8041976:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8041978:	687b      	ldr	r3, [r7, #4]
 804197a:	689b      	ldr	r3, [r3, #8]
 804197c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8041980:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8041984:	d101      	bne.n	804198a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8041986:	2301      	movs	r3, #1
 8041988:	e000      	b.n	804198c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 804198a:	2300      	movs	r3, #0
}
 804198c:	4618      	mov	r0, r3
 804198e:	370c      	adds	r7, #12
 8041990:	46bd      	mov	sp, r7
 8041992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041996:	4770      	bx	lr

08041998 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8041998:	b480      	push	{r7}
 804199a:	b083      	sub	sp, #12
 804199c:	af00      	add	r7, sp, #0
 804199e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80419a0:	687b      	ldr	r3, [r7, #4]
 80419a2:	689b      	ldr	r3, [r3, #8]
 80419a4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80419a8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80419ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80419b0:	687b      	ldr	r3, [r7, #4]
 80419b2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80419b4:	bf00      	nop
 80419b6:	370c      	adds	r7, #12
 80419b8:	46bd      	mov	sp, r7
 80419ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419be:	4770      	bx	lr

080419c0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80419c0:	b480      	push	{r7}
 80419c2:	b083      	sub	sp, #12
 80419c4:	af00      	add	r7, sp, #0
 80419c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80419c8:	687b      	ldr	r3, [r7, #4]
 80419ca:	689b      	ldr	r3, [r3, #8]
 80419cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80419d0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80419d4:	d101      	bne.n	80419da <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80419d6:	2301      	movs	r3, #1
 80419d8:	e000      	b.n	80419dc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80419da:	2300      	movs	r3, #0
}
 80419dc:	4618      	mov	r0, r3
 80419de:	370c      	adds	r7, #12
 80419e0:	46bd      	mov	sp, r7
 80419e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80419e6:	4770      	bx	lr

080419e8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80419e8:	b480      	push	{r7}
 80419ea:	b083      	sub	sp, #12
 80419ec:	af00      	add	r7, sp, #0
 80419ee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80419f0:	687b      	ldr	r3, [r7, #4]
 80419f2:	689b      	ldr	r3, [r3, #8]
 80419f4:	f003 0301 	and.w	r3, r3, #1
 80419f8:	2b01      	cmp	r3, #1
 80419fa:	d101      	bne.n	8041a00 <LL_ADC_IsEnabled+0x18>
 80419fc:	2301      	movs	r3, #1
 80419fe:	e000      	b.n	8041a02 <LL_ADC_IsEnabled+0x1a>
 8041a00:	2300      	movs	r3, #0
}
 8041a02:	4618      	mov	r0, r3
 8041a04:	370c      	adds	r7, #12
 8041a06:	46bd      	mov	sp, r7
 8041a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a0c:	4770      	bx	lr

08041a0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8041a0e:	b480      	push	{r7}
 8041a10:	b083      	sub	sp, #12
 8041a12:	af00      	add	r7, sp, #0
 8041a14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8041a16:	687b      	ldr	r3, [r7, #4]
 8041a18:	689b      	ldr	r3, [r3, #8]
 8041a1a:	f003 0304 	and.w	r3, r3, #4
 8041a1e:	2b04      	cmp	r3, #4
 8041a20:	d101      	bne.n	8041a26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8041a22:	2301      	movs	r3, #1
 8041a24:	e000      	b.n	8041a28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8041a26:	2300      	movs	r3, #0
}
 8041a28:	4618      	mov	r0, r3
 8041a2a:	370c      	adds	r7, #12
 8041a2c:	46bd      	mov	sp, r7
 8041a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a32:	4770      	bx	lr

08041a34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8041a34:	b480      	push	{r7}
 8041a36:	b083      	sub	sp, #12
 8041a38:	af00      	add	r7, sp, #0
 8041a3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8041a3c:	687b      	ldr	r3, [r7, #4]
 8041a3e:	689b      	ldr	r3, [r3, #8]
 8041a40:	f003 0308 	and.w	r3, r3, #8
 8041a44:	2b08      	cmp	r3, #8
 8041a46:	d101      	bne.n	8041a4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8041a48:	2301      	movs	r3, #1
 8041a4a:	e000      	b.n	8041a4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8041a4c:	2300      	movs	r3, #0
}
 8041a4e:	4618      	mov	r0, r3
 8041a50:	370c      	adds	r7, #12
 8041a52:	46bd      	mov	sp, r7
 8041a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041a58:	4770      	bx	lr
	...

08041a5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8041a5c:	b590      	push	{r4, r7, lr}
 8041a5e:	b089      	sub	sp, #36	; 0x24
 8041a60:	af00      	add	r7, sp, #0
 8041a62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8041a64:	2300      	movs	r3, #0
 8041a66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8041a68:	2300      	movs	r3, #0
 8041a6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8041a6c:	687b      	ldr	r3, [r7, #4]
 8041a6e:	2b00      	cmp	r3, #0
 8041a70:	d101      	bne.n	8041a76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8041a72:	2301      	movs	r3, #1
 8041a74:	e12e      	b.n	8041cd4 <HAL_ADC_Init+0x278>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8041a76:	687b      	ldr	r3, [r7, #4]
 8041a78:	691b      	ldr	r3, [r3, #16]
 8041a7a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8041a7c:	687b      	ldr	r3, [r7, #4]
 8041a7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041a80:	2b00      	cmp	r3, #0
 8041a82:	d109      	bne.n	8041a98 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8041a84:	6878      	ldr	r0, [r7, #4]
 8041a86:	f7ff f947 	bl	8040d18 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8041a8a:	687b      	ldr	r3, [r7, #4]
 8041a8c:	2200      	movs	r2, #0
 8041a8e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8041a90:	687b      	ldr	r3, [r7, #4]
 8041a92:	2200      	movs	r2, #0
 8041a94:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8041a98:	687b      	ldr	r3, [r7, #4]
 8041a9a:	681b      	ldr	r3, [r3, #0]
 8041a9c:	4618      	mov	r0, r3
 8041a9e:	f7ff ff67 	bl	8041970 <LL_ADC_IsDeepPowerDownEnabled>
 8041aa2:	4603      	mov	r3, r0
 8041aa4:	2b00      	cmp	r3, #0
 8041aa6:	d004      	beq.n	8041ab2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8041aa8:	687b      	ldr	r3, [r7, #4]
 8041aaa:	681b      	ldr	r3, [r3, #0]
 8041aac:	4618      	mov	r0, r3
 8041aae:	f7ff ff4d 	bl	804194c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8041ab2:	687b      	ldr	r3, [r7, #4]
 8041ab4:	681b      	ldr	r3, [r3, #0]
 8041ab6:	4618      	mov	r0, r3
 8041ab8:	f7ff ff82 	bl	80419c0 <LL_ADC_IsInternalRegulatorEnabled>
 8041abc:	4603      	mov	r3, r0
 8041abe:	2b00      	cmp	r3, #0
 8041ac0:	d115      	bne.n	8041aee <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8041ac2:	687b      	ldr	r3, [r7, #4]
 8041ac4:	681b      	ldr	r3, [r3, #0]
 8041ac6:	4618      	mov	r0, r3
 8041ac8:	f7ff ff66 	bl	8041998 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8041acc:	4b83      	ldr	r3, [pc, #524]	; (8041cdc <HAL_ADC_Init+0x280>)
 8041ace:	681b      	ldr	r3, [r3, #0]
 8041ad0:	099b      	lsrs	r3, r3, #6
 8041ad2:	4a83      	ldr	r2, [pc, #524]	; (8041ce0 <HAL_ADC_Init+0x284>)
 8041ad4:	fba2 2303 	umull	r2, r3, r2, r3
 8041ad8:	099b      	lsrs	r3, r3, #6
 8041ada:	3301      	adds	r3, #1
 8041adc:	005b      	lsls	r3, r3, #1
 8041ade:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8041ae0:	e002      	b.n	8041ae8 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8041ae2:	68fb      	ldr	r3, [r7, #12]
 8041ae4:	3b01      	subs	r3, #1
 8041ae6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8041ae8:	68fb      	ldr	r3, [r7, #12]
 8041aea:	2b00      	cmp	r3, #0
 8041aec:	d1f9      	bne.n	8041ae2 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8041aee:	687b      	ldr	r3, [r7, #4]
 8041af0:	681b      	ldr	r3, [r3, #0]
 8041af2:	4618      	mov	r0, r3
 8041af4:	f7ff ff64 	bl	80419c0 <LL_ADC_IsInternalRegulatorEnabled>
 8041af8:	4603      	mov	r3, r0
 8041afa:	2b00      	cmp	r3, #0
 8041afc:	d10d      	bne.n	8041b1a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8041afe:	687b      	ldr	r3, [r7, #4]
 8041b00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b02:	f043 0210 	orr.w	r2, r3, #16
 8041b06:	687b      	ldr	r3, [r7, #4]
 8041b08:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8041b0a:	687b      	ldr	r3, [r7, #4]
 8041b0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8041b0e:	f043 0201 	orr.w	r2, r3, #1
 8041b12:	687b      	ldr	r3, [r7, #4]
 8041b14:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8041b16:	2301      	movs	r3, #1
 8041b18:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8041b1a:	687b      	ldr	r3, [r7, #4]
 8041b1c:	681b      	ldr	r3, [r3, #0]
 8041b1e:	4618      	mov	r0, r3
 8041b20:	f7ff ff75 	bl	8041a0e <LL_ADC_REG_IsConversionOngoing>
 8041b24:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8041b26:	687b      	ldr	r3, [r7, #4]
 8041b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b2a:	f003 0310 	and.w	r3, r3, #16
 8041b2e:	2b00      	cmp	r3, #0
 8041b30:	f040 80c7 	bne.w	8041cc2 <HAL_ADC_Init+0x266>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8041b34:	697b      	ldr	r3, [r7, #20]
 8041b36:	2b00      	cmp	r3, #0
 8041b38:	f040 80c3 	bne.w	8041cc2 <HAL_ADC_Init+0x266>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8041b3c:	687b      	ldr	r3, [r7, #4]
 8041b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041b40:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8041b44:	f043 0202 	orr.w	r2, r3, #2
 8041b48:	687b      	ldr	r3, [r7, #4]
 8041b4a:	659a      	str	r2, [r3, #88]	; 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8041b4c:	687b      	ldr	r3, [r7, #4]
 8041b4e:	681b      	ldr	r3, [r3, #0]
 8041b50:	4618      	mov	r0, r3
 8041b52:	f7ff ff49 	bl	80419e8 <LL_ADC_IsEnabled>
 8041b56:	4603      	mov	r3, r0
 8041b58:	2b00      	cmp	r3, #0
 8041b5a:	d110      	bne.n	8041b7e <HAL_ADC_Init+0x122>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8041b5c:	4861      	ldr	r0, [pc, #388]	; (8041ce4 <HAL_ADC_Init+0x288>)
 8041b5e:	f7ff ff43 	bl	80419e8 <LL_ADC_IsEnabled>
 8041b62:	4604      	mov	r4, r0
 8041b64:	4860      	ldr	r0, [pc, #384]	; (8041ce8 <HAL_ADC_Init+0x28c>)
 8041b66:	f7ff ff3f 	bl	80419e8 <LL_ADC_IsEnabled>
 8041b6a:	4603      	mov	r3, r0
 8041b6c:	4323      	orrs	r3, r4
 8041b6e:	2b00      	cmp	r3, #0
 8041b70:	d105      	bne.n	8041b7e <HAL_ADC_Init+0x122>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8041b72:	687b      	ldr	r3, [r7, #4]
 8041b74:	685b      	ldr	r3, [r3, #4]
 8041b76:	4619      	mov	r1, r3
 8041b78:	485c      	ldr	r0, [pc, #368]	; (8041cec <HAL_ADC_Init+0x290>)
 8041b7a:	f7ff fdcf 	bl	804171c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8041b7e:	687b      	ldr	r3, [r7, #4]
 8041b80:	7e5b      	ldrb	r3, [r3, #25]
 8041b82:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8041b84:	687b      	ldr	r3, [r7, #4]
 8041b86:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8041b88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8041b8a:	687b      	ldr	r3, [r7, #4]
 8041b8c:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8041b8e:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8041b90:	687b      	ldr	r3, [r7, #4]
 8041b92:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8041b94:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8041b96:	687b      	ldr	r3, [r7, #4]
 8041b98:	f893 3020 	ldrb.w	r3, [r3, #32]
 8041b9c:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8041b9e:	4313      	orrs	r3, r2
 8041ba0:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8041ba2:	687b      	ldr	r3, [r7, #4]
 8041ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8041ba8:	2b01      	cmp	r3, #1
 8041baa:	d106      	bne.n	8041bba <HAL_ADC_Init+0x15e>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8041bac:	687b      	ldr	r3, [r7, #4]
 8041bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041bb0:	3b01      	subs	r3, #1
 8041bb2:	045b      	lsls	r3, r3, #17
 8041bb4:	69ba      	ldr	r2, [r7, #24]
 8041bb6:	4313      	orrs	r3, r2
 8041bb8:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8041bba:	687b      	ldr	r3, [r7, #4]
 8041bbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041bbe:	2b00      	cmp	r3, #0
 8041bc0:	d009      	beq.n	8041bd6 <HAL_ADC_Init+0x17a>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8041bc2:	687b      	ldr	r3, [r7, #4]
 8041bc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8041bc6:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8041bca:	687b      	ldr	r3, [r7, #4]
 8041bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041bce:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8041bd0:	69ba      	ldr	r2, [r7, #24]
 8041bd2:	4313      	orrs	r3, r2
 8041bd4:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	681b      	ldr	r3, [r3, #0]
 8041bda:	68da      	ldr	r2, [r3, #12]
 8041bdc:	4b44      	ldr	r3, [pc, #272]	; (8041cf0 <HAL_ADC_Init+0x294>)
 8041bde:	4013      	ands	r3, r2
 8041be0:	687a      	ldr	r2, [r7, #4]
 8041be2:	6812      	ldr	r2, [r2, #0]
 8041be4:	69b9      	ldr	r1, [r7, #24]
 8041be6:	430b      	orrs	r3, r1
 8041be8:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8041bea:	687b      	ldr	r3, [r7, #4]
 8041bec:	681b      	ldr	r3, [r3, #0]
 8041bee:	4618      	mov	r0, r3
 8041bf0:	f7ff ff20 	bl	8041a34 <LL_ADC_INJ_IsConversionOngoing>
 8041bf4:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8041bf6:	697b      	ldr	r3, [r7, #20]
 8041bf8:	2b00      	cmp	r3, #0
 8041bfa:	d140      	bne.n	8041c7e <HAL_ADC_Init+0x222>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8041bfc:	693b      	ldr	r3, [r7, #16]
 8041bfe:	2b00      	cmp	r3, #0
 8041c00:	d13d      	bne.n	8041c7e <HAL_ADC_Init+0x222>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8041c02:	687b      	ldr	r3, [r7, #4]
 8041c04:	6cda      	ldr	r2, [r3, #76]	; 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8041c06:	687b      	ldr	r3, [r7, #4]
 8041c08:	7e1b      	ldrb	r3, [r3, #24]
 8041c0a:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8041c0c:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8041c0e:	687b      	ldr	r3, [r7, #4]
 8041c10:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8041c14:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8041c16:	4313      	orrs	r3, r2
 8041c18:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8041c1a:	687b      	ldr	r3, [r7, #4]
 8041c1c:	681b      	ldr	r3, [r3, #0]
 8041c1e:	68db      	ldr	r3, [r3, #12]
 8041c20:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8041c24:	f023 0306 	bic.w	r3, r3, #6
 8041c28:	687a      	ldr	r2, [r7, #4]
 8041c2a:	6812      	ldr	r2, [r2, #0]
 8041c2c:	69b9      	ldr	r1, [r7, #24]
 8041c2e:	430b      	orrs	r3, r1
 8041c30:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8041c32:	687b      	ldr	r3, [r7, #4]
 8041c34:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8041c38:	2b01      	cmp	r3, #1
 8041c3a:	d118      	bne.n	8041c6e <HAL_ADC_Init+0x212>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8041c3c:	687b      	ldr	r3, [r7, #4]
 8041c3e:	681b      	ldr	r3, [r3, #0]
 8041c40:	691b      	ldr	r3, [r3, #16]
 8041c42:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8041c46:	f023 0304 	bic.w	r3, r3, #4
 8041c4a:	687a      	ldr	r2, [r7, #4]
 8041c4c:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8041c4e:	687a      	ldr	r2, [r7, #4]
 8041c50:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8041c52:	4311      	orrs	r1, r2
 8041c54:	687a      	ldr	r2, [r7, #4]
 8041c56:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8041c58:	4311      	orrs	r1, r2
 8041c5a:	687a      	ldr	r2, [r7, #4]
 8041c5c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8041c5e:	430a      	orrs	r2, r1
 8041c60:	431a      	orrs	r2, r3
 8041c62:	687b      	ldr	r3, [r7, #4]
 8041c64:	681b      	ldr	r3, [r3, #0]
 8041c66:	f042 0201 	orr.w	r2, r2, #1
 8041c6a:	611a      	str	r2, [r3, #16]
 8041c6c:	e007      	b.n	8041c7e <HAL_ADC_Init+0x222>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8041c6e:	687b      	ldr	r3, [r7, #4]
 8041c70:	681b      	ldr	r3, [r3, #0]
 8041c72:	691a      	ldr	r2, [r3, #16]
 8041c74:	687b      	ldr	r3, [r7, #4]
 8041c76:	681b      	ldr	r3, [r3, #0]
 8041c78:	f022 0201 	bic.w	r2, r2, #1
 8041c7c:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8041c7e:	687b      	ldr	r3, [r7, #4]
 8041c80:	691b      	ldr	r3, [r3, #16]
 8041c82:	2b01      	cmp	r3, #1
 8041c84:	d10c      	bne.n	8041ca0 <HAL_ADC_Init+0x244>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8041c86:	687b      	ldr	r3, [r7, #4]
 8041c88:	681b      	ldr	r3, [r3, #0]
 8041c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041c8c:	f023 010f 	bic.w	r1, r3, #15
 8041c90:	687b      	ldr	r3, [r7, #4]
 8041c92:	69db      	ldr	r3, [r3, #28]
 8041c94:	1e5a      	subs	r2, r3, #1
 8041c96:	687b      	ldr	r3, [r7, #4]
 8041c98:	681b      	ldr	r3, [r3, #0]
 8041c9a:	430a      	orrs	r2, r1
 8041c9c:	631a      	str	r2, [r3, #48]	; 0x30
 8041c9e:	e007      	b.n	8041cb0 <HAL_ADC_Init+0x254>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8041ca0:	687b      	ldr	r3, [r7, #4]
 8041ca2:	681b      	ldr	r3, [r3, #0]
 8041ca4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8041ca6:	687b      	ldr	r3, [r7, #4]
 8041ca8:	681b      	ldr	r3, [r3, #0]
 8041caa:	f022 020f 	bic.w	r2, r2, #15
 8041cae:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8041cb0:	687b      	ldr	r3, [r7, #4]
 8041cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041cb4:	f023 0303 	bic.w	r3, r3, #3
 8041cb8:	f043 0201 	orr.w	r2, r3, #1
 8041cbc:	687b      	ldr	r3, [r7, #4]
 8041cbe:	659a      	str	r2, [r3, #88]	; 0x58
 8041cc0:	e007      	b.n	8041cd2 <HAL_ADC_Init+0x276>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8041cc2:	687b      	ldr	r3, [r7, #4]
 8041cc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041cc6:	f043 0210 	orr.w	r2, r3, #16
 8041cca:	687b      	ldr	r3, [r7, #4]
 8041ccc:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8041cce:	2301      	movs	r3, #1
 8041cd0:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8041cd2:	7ffb      	ldrb	r3, [r7, #31]
}
 8041cd4:	4618      	mov	r0, r3
 8041cd6:	3724      	adds	r7, #36	; 0x24
 8041cd8:	46bd      	mov	sp, r7
 8041cda:	bd90      	pop	{r4, r7, pc}
 8041cdc:	20018000 	.word	0x20018000
 8041ce0:	053e2d63 	.word	0x053e2d63
 8041ce4:	42028000 	.word	0x42028000
 8041ce8:	42028100 	.word	0x42028100
 8041cec:	42028300 	.word	0x42028300
 8041cf0:	fff0c007 	.word	0xfff0c007

08041cf4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8041cf4:	b590      	push	{r4, r7, lr}
 8041cf6:	b0b7      	sub	sp, #220	; 0xdc
 8041cf8:	af00      	add	r7, sp, #0
 8041cfa:	6078      	str	r0, [r7, #4]
 8041cfc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8041cfe:	2300      	movs	r3, #0
 8041d00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8041d04:	2300      	movs	r3, #0
 8041d06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8041d08:	687b      	ldr	r3, [r7, #4]
 8041d0a:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8041d0e:	2b01      	cmp	r3, #1
 8041d10:	d101      	bne.n	8041d16 <HAL_ADC_ConfigChannel+0x22>
 8041d12:	2302      	movs	r3, #2
 8041d14:	e3c1      	b.n	804249a <HAL_ADC_ConfigChannel+0x7a6>
 8041d16:	687b      	ldr	r3, [r7, #4]
 8041d18:	2201      	movs	r2, #1
 8041d1a:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8041d1e:	687b      	ldr	r3, [r7, #4]
 8041d20:	681b      	ldr	r3, [r3, #0]
 8041d22:	4618      	mov	r0, r3
 8041d24:	f7ff fe73 	bl	8041a0e <LL_ADC_REG_IsConversionOngoing>
 8041d28:	4603      	mov	r3, r0
 8041d2a:	2b00      	cmp	r3, #0
 8041d2c:	f040 83a6 	bne.w	804247c <HAL_ADC_ConfigChannel+0x788>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8041d30:	687b      	ldr	r3, [r7, #4]
 8041d32:	6818      	ldr	r0, [r3, #0]
 8041d34:	683b      	ldr	r3, [r7, #0]
 8041d36:	6859      	ldr	r1, [r3, #4]
 8041d38:	683b      	ldr	r3, [r7, #0]
 8041d3a:	681b      	ldr	r3, [r3, #0]
 8041d3c:	461a      	mov	r2, r3
 8041d3e:	f7ff fd89 	bl	8041854 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8041d42:	687b      	ldr	r3, [r7, #4]
 8041d44:	681b      	ldr	r3, [r3, #0]
 8041d46:	4618      	mov	r0, r3
 8041d48:	f7ff fe61 	bl	8041a0e <LL_ADC_REG_IsConversionOngoing>
 8041d4c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8041d50:	687b      	ldr	r3, [r7, #4]
 8041d52:	681b      	ldr	r3, [r3, #0]
 8041d54:	4618      	mov	r0, r3
 8041d56:	f7ff fe6d 	bl	8041a34 <LL_ADC_INJ_IsConversionOngoing>
 8041d5a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8041d5e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8041d62:	2b00      	cmp	r3, #0
 8041d64:	f040 81c1 	bne.w	80420ea <HAL_ADC_ConfigChannel+0x3f6>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8041d68:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8041d6c:	2b00      	cmp	r3, #0
 8041d6e:	f040 81bc 	bne.w	80420ea <HAL_ADC_ConfigChannel+0x3f6>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8041d72:	683b      	ldr	r3, [r7, #0]
 8041d74:	689b      	ldr	r3, [r3, #8]
 8041d76:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8041d7a:	d10f      	bne.n	8041d9c <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8041d7c:	687b      	ldr	r3, [r7, #4]
 8041d7e:	6818      	ldr	r0, [r3, #0]
 8041d80:	683b      	ldr	r3, [r7, #0]
 8041d82:	681b      	ldr	r3, [r3, #0]
 8041d84:	2200      	movs	r2, #0
 8041d86:	4619      	mov	r1, r3
 8041d88:	f7ff fd90 	bl	80418ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8041d8c:	687b      	ldr	r3, [r7, #4]
 8041d8e:	681b      	ldr	r3, [r3, #0]
 8041d90:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8041d94:	4618      	mov	r0, r3
 8041d96:	f7ff fd4a 	bl	804182e <LL_ADC_SetSamplingTimeCommonConfig>
 8041d9a:	e00e      	b.n	8041dba <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8041d9c:	687b      	ldr	r3, [r7, #4]
 8041d9e:	6818      	ldr	r0, [r3, #0]
 8041da0:	683b      	ldr	r3, [r7, #0]
 8041da2:	6819      	ldr	r1, [r3, #0]
 8041da4:	683b      	ldr	r3, [r7, #0]
 8041da6:	689b      	ldr	r3, [r3, #8]
 8041da8:	461a      	mov	r2, r3
 8041daa:	f7ff fd7f 	bl	80418ac <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8041dae:	687b      	ldr	r3, [r7, #4]
 8041db0:	681b      	ldr	r3, [r3, #0]
 8041db2:	2100      	movs	r1, #0
 8041db4:	4618      	mov	r0, r3
 8041db6:	f7ff fd3a 	bl	804182e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8041dba:	683b      	ldr	r3, [r7, #0]
 8041dbc:	695a      	ldr	r2, [r3, #20]
 8041dbe:	687b      	ldr	r3, [r7, #4]
 8041dc0:	681b      	ldr	r3, [r3, #0]
 8041dc2:	68db      	ldr	r3, [r3, #12]
 8041dc4:	08db      	lsrs	r3, r3, #3
 8041dc6:	f003 0303 	and.w	r3, r3, #3
 8041dca:	005b      	lsls	r3, r3, #1
 8041dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8041dd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8041dd4:	683b      	ldr	r3, [r7, #0]
 8041dd6:	691b      	ldr	r3, [r3, #16]
 8041dd8:	2b04      	cmp	r3, #4
 8041dda:	d00a      	beq.n	8041df2 <HAL_ADC_ConfigChannel+0xfe>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8041ddc:	687b      	ldr	r3, [r7, #4]
 8041dde:	6818      	ldr	r0, [r3, #0]
 8041de0:	683b      	ldr	r3, [r7, #0]
 8041de2:	6919      	ldr	r1, [r3, #16]
 8041de4:	683b      	ldr	r3, [r7, #0]
 8041de6:	681a      	ldr	r2, [r3, #0]
 8041de8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8041dec:	f7ff fcca 	bl	8041784 <LL_ADC_SetOffset>
 8041df0:	e17b      	b.n	80420ea <HAL_ADC_ConfigChannel+0x3f6>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8041df2:	687b      	ldr	r3, [r7, #4]
 8041df4:	681b      	ldr	r3, [r3, #0]
 8041df6:	2100      	movs	r1, #0
 8041df8:	4618      	mov	r0, r3
 8041dfa:	f7ff fce7 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041dfe:	4603      	mov	r3, r0
 8041e00:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041e04:	2b00      	cmp	r3, #0
 8041e06:	d10a      	bne.n	8041e1e <HAL_ADC_ConfigChannel+0x12a>
 8041e08:	687b      	ldr	r3, [r7, #4]
 8041e0a:	681b      	ldr	r3, [r3, #0]
 8041e0c:	2100      	movs	r1, #0
 8041e0e:	4618      	mov	r0, r3
 8041e10:	f7ff fcdc 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041e14:	4603      	mov	r3, r0
 8041e16:	0e9b      	lsrs	r3, r3, #26
 8041e18:	f003 021f 	and.w	r2, r3, #31
 8041e1c:	e01e      	b.n	8041e5c <HAL_ADC_ConfigChannel+0x168>
 8041e1e:	687b      	ldr	r3, [r7, #4]
 8041e20:	681b      	ldr	r3, [r3, #0]
 8041e22:	2100      	movs	r1, #0
 8041e24:	4618      	mov	r0, r3
 8041e26:	f7ff fcd1 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041e2a:	4603      	mov	r3, r0
 8041e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8041e34:	fa93 f3a3 	rbit	r3, r3
 8041e38:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8041e3c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8041e40:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8041e44:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8041e48:	2b00      	cmp	r3, #0
 8041e4a:	d101      	bne.n	8041e50 <HAL_ADC_ConfigChannel+0x15c>
  {
    return 32U;
 8041e4c:	2320      	movs	r3, #32
 8041e4e:	e004      	b.n	8041e5a <HAL_ADC_ConfigChannel+0x166>
  }
  return __builtin_clz(value);
 8041e50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8041e54:	fab3 f383 	clz	r3, r3
 8041e58:	b2db      	uxtb	r3, r3
 8041e5a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8041e5c:	683b      	ldr	r3, [r7, #0]
 8041e5e:	681b      	ldr	r3, [r3, #0]
 8041e60:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041e64:	2b00      	cmp	r3, #0
 8041e66:	d105      	bne.n	8041e74 <HAL_ADC_ConfigChannel+0x180>
 8041e68:	683b      	ldr	r3, [r7, #0]
 8041e6a:	681b      	ldr	r3, [r3, #0]
 8041e6c:	0e9b      	lsrs	r3, r3, #26
 8041e6e:	f003 031f 	and.w	r3, r3, #31
 8041e72:	e018      	b.n	8041ea6 <HAL_ADC_ConfigChannel+0x1b2>
 8041e74:	683b      	ldr	r3, [r7, #0]
 8041e76:	681b      	ldr	r3, [r3, #0]
 8041e78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041e7c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8041e80:	fa93 f3a3 	rbit	r3, r3
 8041e84:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8041e88:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8041e8c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8041e90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8041e94:	2b00      	cmp	r3, #0
 8041e96:	d101      	bne.n	8041e9c <HAL_ADC_ConfigChannel+0x1a8>
    return 32U;
 8041e98:	2320      	movs	r3, #32
 8041e9a:	e004      	b.n	8041ea6 <HAL_ADC_ConfigChannel+0x1b2>
  return __builtin_clz(value);
 8041e9c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8041ea0:	fab3 f383 	clz	r3, r3
 8041ea4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8041ea6:	429a      	cmp	r2, r3
 8041ea8:	d106      	bne.n	8041eb8 <HAL_ADC_ConfigChannel+0x1c4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8041eaa:	687b      	ldr	r3, [r7, #4]
 8041eac:	681b      	ldr	r3, [r3, #0]
 8041eae:	2200      	movs	r2, #0
 8041eb0:	2100      	movs	r1, #0
 8041eb2:	4618      	mov	r0, r3
 8041eb4:	f7ff fca0 	bl	80417f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8041eb8:	687b      	ldr	r3, [r7, #4]
 8041eba:	681b      	ldr	r3, [r3, #0]
 8041ebc:	2101      	movs	r1, #1
 8041ebe:	4618      	mov	r0, r3
 8041ec0:	f7ff fc84 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041ec4:	4603      	mov	r3, r0
 8041ec6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041eca:	2b00      	cmp	r3, #0
 8041ecc:	d10a      	bne.n	8041ee4 <HAL_ADC_ConfigChannel+0x1f0>
 8041ece:	687b      	ldr	r3, [r7, #4]
 8041ed0:	681b      	ldr	r3, [r3, #0]
 8041ed2:	2101      	movs	r1, #1
 8041ed4:	4618      	mov	r0, r3
 8041ed6:	f7ff fc79 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041eda:	4603      	mov	r3, r0
 8041edc:	0e9b      	lsrs	r3, r3, #26
 8041ede:	f003 021f 	and.w	r2, r3, #31
 8041ee2:	e01e      	b.n	8041f22 <HAL_ADC_ConfigChannel+0x22e>
 8041ee4:	687b      	ldr	r3, [r7, #4]
 8041ee6:	681b      	ldr	r3, [r3, #0]
 8041ee8:	2101      	movs	r1, #1
 8041eea:	4618      	mov	r0, r3
 8041eec:	f7ff fc6e 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041ef0:	4603      	mov	r3, r0
 8041ef2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041ef6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8041efa:	fa93 f3a3 	rbit	r3, r3
 8041efe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8041f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8041f06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8041f0a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8041f0e:	2b00      	cmp	r3, #0
 8041f10:	d101      	bne.n	8041f16 <HAL_ADC_ConfigChannel+0x222>
    return 32U;
 8041f12:	2320      	movs	r3, #32
 8041f14:	e004      	b.n	8041f20 <HAL_ADC_ConfigChannel+0x22c>
  return __builtin_clz(value);
 8041f16:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8041f1a:	fab3 f383 	clz	r3, r3
 8041f1e:	b2db      	uxtb	r3, r3
 8041f20:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8041f22:	683b      	ldr	r3, [r7, #0]
 8041f24:	681b      	ldr	r3, [r3, #0]
 8041f26:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041f2a:	2b00      	cmp	r3, #0
 8041f2c:	d105      	bne.n	8041f3a <HAL_ADC_ConfigChannel+0x246>
 8041f2e:	683b      	ldr	r3, [r7, #0]
 8041f30:	681b      	ldr	r3, [r3, #0]
 8041f32:	0e9b      	lsrs	r3, r3, #26
 8041f34:	f003 031f 	and.w	r3, r3, #31
 8041f38:	e018      	b.n	8041f6c <HAL_ADC_ConfigChannel+0x278>
 8041f3a:	683b      	ldr	r3, [r7, #0]
 8041f3c:	681b      	ldr	r3, [r3, #0]
 8041f3e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041f42:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8041f46:	fa93 f3a3 	rbit	r3, r3
 8041f4a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8041f4e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8041f52:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8041f56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8041f5a:	2b00      	cmp	r3, #0
 8041f5c:	d101      	bne.n	8041f62 <HAL_ADC_ConfigChannel+0x26e>
    return 32U;
 8041f5e:	2320      	movs	r3, #32
 8041f60:	e004      	b.n	8041f6c <HAL_ADC_ConfigChannel+0x278>
  return __builtin_clz(value);
 8041f62:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8041f66:	fab3 f383 	clz	r3, r3
 8041f6a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8041f6c:	429a      	cmp	r2, r3
 8041f6e:	d106      	bne.n	8041f7e <HAL_ADC_ConfigChannel+0x28a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8041f70:	687b      	ldr	r3, [r7, #4]
 8041f72:	681b      	ldr	r3, [r3, #0]
 8041f74:	2200      	movs	r2, #0
 8041f76:	2101      	movs	r1, #1
 8041f78:	4618      	mov	r0, r3
 8041f7a:	f7ff fc3d 	bl	80417f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8041f7e:	687b      	ldr	r3, [r7, #4]
 8041f80:	681b      	ldr	r3, [r3, #0]
 8041f82:	2102      	movs	r1, #2
 8041f84:	4618      	mov	r0, r3
 8041f86:	f7ff fc21 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041f8a:	4603      	mov	r3, r0
 8041f8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041f90:	2b00      	cmp	r3, #0
 8041f92:	d10a      	bne.n	8041faa <HAL_ADC_ConfigChannel+0x2b6>
 8041f94:	687b      	ldr	r3, [r7, #4]
 8041f96:	681b      	ldr	r3, [r3, #0]
 8041f98:	2102      	movs	r1, #2
 8041f9a:	4618      	mov	r0, r3
 8041f9c:	f7ff fc16 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041fa0:	4603      	mov	r3, r0
 8041fa2:	0e9b      	lsrs	r3, r3, #26
 8041fa4:	f003 021f 	and.w	r2, r3, #31
 8041fa8:	e01e      	b.n	8041fe8 <HAL_ADC_ConfigChannel+0x2f4>
 8041faa:	687b      	ldr	r3, [r7, #4]
 8041fac:	681b      	ldr	r3, [r3, #0]
 8041fae:	2102      	movs	r1, #2
 8041fb0:	4618      	mov	r0, r3
 8041fb2:	f7ff fc0b 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8041fb6:	4603      	mov	r3, r0
 8041fb8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8041fbc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8041fc0:	fa93 f3a3 	rbit	r3, r3
 8041fc4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8041fc8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8041fcc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8041fd0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8041fd4:	2b00      	cmp	r3, #0
 8041fd6:	d101      	bne.n	8041fdc <HAL_ADC_ConfigChannel+0x2e8>
    return 32U;
 8041fd8:	2320      	movs	r3, #32
 8041fda:	e004      	b.n	8041fe6 <HAL_ADC_ConfigChannel+0x2f2>
  return __builtin_clz(value);
 8041fdc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8041fe0:	fab3 f383 	clz	r3, r3
 8041fe4:	b2db      	uxtb	r3, r3
 8041fe6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8041fe8:	683b      	ldr	r3, [r7, #0]
 8041fea:	681b      	ldr	r3, [r3, #0]
 8041fec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8041ff0:	2b00      	cmp	r3, #0
 8041ff2:	d105      	bne.n	8042000 <HAL_ADC_ConfigChannel+0x30c>
 8041ff4:	683b      	ldr	r3, [r7, #0]
 8041ff6:	681b      	ldr	r3, [r3, #0]
 8041ff8:	0e9b      	lsrs	r3, r3, #26
 8041ffa:	f003 031f 	and.w	r3, r3, #31
 8041ffe:	e016      	b.n	804202e <HAL_ADC_ConfigChannel+0x33a>
 8042000:	683b      	ldr	r3, [r7, #0]
 8042002:	681b      	ldr	r3, [r3, #0]
 8042004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042008:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 804200c:	fa93 f3a3 	rbit	r3, r3
 8042010:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8042012:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8042014:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8042018:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 804201c:	2b00      	cmp	r3, #0
 804201e:	d101      	bne.n	8042024 <HAL_ADC_ConfigChannel+0x330>
    return 32U;
 8042020:	2320      	movs	r3, #32
 8042022:	e004      	b.n	804202e <HAL_ADC_ConfigChannel+0x33a>
  return __builtin_clz(value);
 8042024:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8042028:	fab3 f383 	clz	r3, r3
 804202c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 804202e:	429a      	cmp	r2, r3
 8042030:	d106      	bne.n	8042040 <HAL_ADC_ConfigChannel+0x34c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8042032:	687b      	ldr	r3, [r7, #4]
 8042034:	681b      	ldr	r3, [r3, #0]
 8042036:	2200      	movs	r2, #0
 8042038:	2102      	movs	r1, #2
 804203a:	4618      	mov	r0, r3
 804203c:	f7ff fbdc 	bl	80417f8 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8042040:	687b      	ldr	r3, [r7, #4]
 8042042:	681b      	ldr	r3, [r3, #0]
 8042044:	2103      	movs	r1, #3
 8042046:	4618      	mov	r0, r3
 8042048:	f7ff fbc0 	bl	80417cc <LL_ADC_GetOffsetChannel>
 804204c:	4603      	mov	r3, r0
 804204e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042052:	2b00      	cmp	r3, #0
 8042054:	d10a      	bne.n	804206c <HAL_ADC_ConfigChannel+0x378>
 8042056:	687b      	ldr	r3, [r7, #4]
 8042058:	681b      	ldr	r3, [r3, #0]
 804205a:	2103      	movs	r1, #3
 804205c:	4618      	mov	r0, r3
 804205e:	f7ff fbb5 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8042062:	4603      	mov	r3, r0
 8042064:	0e9b      	lsrs	r3, r3, #26
 8042066:	f003 021f 	and.w	r2, r3, #31
 804206a:	e017      	b.n	804209c <HAL_ADC_ConfigChannel+0x3a8>
 804206c:	687b      	ldr	r3, [r7, #4]
 804206e:	681b      	ldr	r3, [r3, #0]
 8042070:	2103      	movs	r1, #3
 8042072:	4618      	mov	r0, r3
 8042074:	f7ff fbaa 	bl	80417cc <LL_ADC_GetOffsetChannel>
 8042078:	4603      	mov	r3, r0
 804207a:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804207c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 804207e:	fa93 f3a3 	rbit	r3, r3
 8042082:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8042084:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8042086:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8042088:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 804208a:	2b00      	cmp	r3, #0
 804208c:	d101      	bne.n	8042092 <HAL_ADC_ConfigChannel+0x39e>
    return 32U;
 804208e:	2320      	movs	r3, #32
 8042090:	e003      	b.n	804209a <HAL_ADC_ConfigChannel+0x3a6>
  return __builtin_clz(value);
 8042092:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8042094:	fab3 f383 	clz	r3, r3
 8042098:	b2db      	uxtb	r3, r3
 804209a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 804209c:	683b      	ldr	r3, [r7, #0]
 804209e:	681b      	ldr	r3, [r3, #0]
 80420a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80420a4:	2b00      	cmp	r3, #0
 80420a6:	d105      	bne.n	80420b4 <HAL_ADC_ConfigChannel+0x3c0>
 80420a8:	683b      	ldr	r3, [r7, #0]
 80420aa:	681b      	ldr	r3, [r3, #0]
 80420ac:	0e9b      	lsrs	r3, r3, #26
 80420ae:	f003 031f 	and.w	r3, r3, #31
 80420b2:	e011      	b.n	80420d8 <HAL_ADC_ConfigChannel+0x3e4>
 80420b4:	683b      	ldr	r3, [r7, #0]
 80420b6:	681b      	ldr	r3, [r3, #0]
 80420b8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80420ba:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80420bc:	fa93 f3a3 	rbit	r3, r3
 80420c0:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80420c2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80420c4:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80420c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80420c8:	2b00      	cmp	r3, #0
 80420ca:	d101      	bne.n	80420d0 <HAL_ADC_ConfigChannel+0x3dc>
    return 32U;
 80420cc:	2320      	movs	r3, #32
 80420ce:	e003      	b.n	80420d8 <HAL_ADC_ConfigChannel+0x3e4>
  return __builtin_clz(value);
 80420d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80420d2:	fab3 f383 	clz	r3, r3
 80420d6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80420d8:	429a      	cmp	r2, r3
 80420da:	d106      	bne.n	80420ea <HAL_ADC_ConfigChannel+0x3f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80420dc:	687b      	ldr	r3, [r7, #4]
 80420de:	681b      	ldr	r3, [r3, #0]
 80420e0:	2200      	movs	r2, #0
 80420e2:	2103      	movs	r1, #3
 80420e4:	4618      	mov	r0, r3
 80420e6:	f7ff fb87 	bl	80417f8 <LL_ADC_SetOffsetState>

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80420ea:	687b      	ldr	r3, [r7, #4]
 80420ec:	681b      	ldr	r3, [r3, #0]
 80420ee:	4618      	mov	r0, r3
 80420f0:	f7ff fc7a 	bl	80419e8 <LL_ADC_IsEnabled>
 80420f4:	4603      	mov	r3, r0
 80420f6:	2b00      	cmp	r3, #0
 80420f8:	f040 81c9 	bne.w	804248e <HAL_ADC_ConfigChannel+0x79a>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 80420fc:	687b      	ldr	r3, [r7, #4]
 80420fe:	6818      	ldr	r0, [r3, #0]
 8042100:	683b      	ldr	r3, [r7, #0]
 8042102:	6819      	ldr	r1, [r3, #0]
 8042104:	683b      	ldr	r3, [r7, #0]
 8042106:	68db      	ldr	r3, [r3, #12]
 8042108:	461a      	mov	r2, r3
 804210a:	f7ff fbfb 	bl	8041904 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 804210e:	683b      	ldr	r3, [r7, #0]
 8042110:	68db      	ldr	r3, [r3, #12]
 8042112:	4a8f      	ldr	r2, [pc, #572]	; (8042350 <HAL_ADC_ConfigChannel+0x65c>)
 8042114:	4293      	cmp	r3, r2
 8042116:	f040 8131 	bne.w	804237c <HAL_ADC_ConfigChannel+0x688>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 804211a:	687b      	ldr	r3, [r7, #4]
 804211c:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 804211e:	683b      	ldr	r3, [r7, #0]
 8042120:	681b      	ldr	r3, [r3, #0]
 8042122:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042126:	2b00      	cmp	r3, #0
 8042128:	d10b      	bne.n	8042142 <HAL_ADC_ConfigChannel+0x44e>
 804212a:	683b      	ldr	r3, [r7, #0]
 804212c:	681b      	ldr	r3, [r3, #0]
 804212e:	0e9b      	lsrs	r3, r3, #26
 8042130:	3301      	adds	r3, #1
 8042132:	f003 031f 	and.w	r3, r3, #31
 8042136:	2b09      	cmp	r3, #9
 8042138:	bf94      	ite	ls
 804213a:	2301      	movls	r3, #1
 804213c:	2300      	movhi	r3, #0
 804213e:	b2db      	uxtb	r3, r3
 8042140:	e019      	b.n	8042176 <HAL_ADC_ConfigChannel+0x482>
 8042142:	683b      	ldr	r3, [r7, #0]
 8042144:	681b      	ldr	r3, [r3, #0]
 8042146:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 804214a:	fa93 f3a3 	rbit	r3, r3
 804214e:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8042150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8042152:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8042154:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8042156:	2b00      	cmp	r3, #0
 8042158:	d101      	bne.n	804215e <HAL_ADC_ConfigChannel+0x46a>
    return 32U;
 804215a:	2320      	movs	r3, #32
 804215c:	e003      	b.n	8042166 <HAL_ADC_ConfigChannel+0x472>
  return __builtin_clz(value);
 804215e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8042160:	fab3 f383 	clz	r3, r3
 8042164:	b2db      	uxtb	r3, r3
 8042166:	3301      	adds	r3, #1
 8042168:	f003 031f 	and.w	r3, r3, #31
 804216c:	2b09      	cmp	r3, #9
 804216e:	bf94      	ite	ls
 8042170:	2301      	movls	r3, #1
 8042172:	2300      	movhi	r3, #0
 8042174:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8042176:	2b00      	cmp	r3, #0
 8042178:	d079      	beq.n	804226e <HAL_ADC_ConfigChannel+0x57a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 804217a:	683b      	ldr	r3, [r7, #0]
 804217c:	681b      	ldr	r3, [r3, #0]
 804217e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042182:	2b00      	cmp	r3, #0
 8042184:	d107      	bne.n	8042196 <HAL_ADC_ConfigChannel+0x4a2>
 8042186:	683b      	ldr	r3, [r7, #0]
 8042188:	681b      	ldr	r3, [r3, #0]
 804218a:	0e9b      	lsrs	r3, r3, #26
 804218c:	3301      	adds	r3, #1
 804218e:	069b      	lsls	r3, r3, #26
 8042190:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8042194:	e015      	b.n	80421c2 <HAL_ADC_ConfigChannel+0x4ce>
 8042196:	683b      	ldr	r3, [r7, #0]
 8042198:	681b      	ldr	r3, [r3, #0]
 804219a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804219c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 804219e:	fa93 f3a3 	rbit	r3, r3
 80421a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80421a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80421a6:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80421a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80421aa:	2b00      	cmp	r3, #0
 80421ac:	d101      	bne.n	80421b2 <HAL_ADC_ConfigChannel+0x4be>
    return 32U;
 80421ae:	2320      	movs	r3, #32
 80421b0:	e003      	b.n	80421ba <HAL_ADC_ConfigChannel+0x4c6>
  return __builtin_clz(value);
 80421b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80421b4:	fab3 f383 	clz	r3, r3
 80421b8:	b2db      	uxtb	r3, r3
 80421ba:	3301      	adds	r3, #1
 80421bc:	069b      	lsls	r3, r3, #26
 80421be:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80421c2:	683b      	ldr	r3, [r7, #0]
 80421c4:	681b      	ldr	r3, [r3, #0]
 80421c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80421ca:	2b00      	cmp	r3, #0
 80421cc:	d109      	bne.n	80421e2 <HAL_ADC_ConfigChannel+0x4ee>
 80421ce:	683b      	ldr	r3, [r7, #0]
 80421d0:	681b      	ldr	r3, [r3, #0]
 80421d2:	0e9b      	lsrs	r3, r3, #26
 80421d4:	3301      	adds	r3, #1
 80421d6:	f003 031f 	and.w	r3, r3, #31
 80421da:	2101      	movs	r1, #1
 80421dc:	fa01 f303 	lsl.w	r3, r1, r3
 80421e0:	e017      	b.n	8042212 <HAL_ADC_ConfigChannel+0x51e>
 80421e2:	683b      	ldr	r3, [r7, #0]
 80421e4:	681b      	ldr	r3, [r3, #0]
 80421e6:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80421e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80421ea:	fa93 f3a3 	rbit	r3, r3
 80421ee:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80421f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80421f2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80421f4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80421f6:	2b00      	cmp	r3, #0
 80421f8:	d101      	bne.n	80421fe <HAL_ADC_ConfigChannel+0x50a>
    return 32U;
 80421fa:	2320      	movs	r3, #32
 80421fc:	e003      	b.n	8042206 <HAL_ADC_ConfigChannel+0x512>
  return __builtin_clz(value);
 80421fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8042200:	fab3 f383 	clz	r3, r3
 8042204:	b2db      	uxtb	r3, r3
 8042206:	3301      	adds	r3, #1
 8042208:	f003 031f 	and.w	r3, r3, #31
 804220c:	2101      	movs	r1, #1
 804220e:	fa01 f303 	lsl.w	r3, r1, r3
 8042212:	ea42 0103 	orr.w	r1, r2, r3
 8042216:	683b      	ldr	r3, [r7, #0]
 8042218:	681b      	ldr	r3, [r3, #0]
 804221a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 804221e:	2b00      	cmp	r3, #0
 8042220:	d10a      	bne.n	8042238 <HAL_ADC_ConfigChannel+0x544>
 8042222:	683b      	ldr	r3, [r7, #0]
 8042224:	681b      	ldr	r3, [r3, #0]
 8042226:	0e9b      	lsrs	r3, r3, #26
 8042228:	3301      	adds	r3, #1
 804222a:	f003 021f 	and.w	r2, r3, #31
 804222e:	4613      	mov	r3, r2
 8042230:	005b      	lsls	r3, r3, #1
 8042232:	4413      	add	r3, r2
 8042234:	051b      	lsls	r3, r3, #20
 8042236:	e018      	b.n	804226a <HAL_ADC_ConfigChannel+0x576>
 8042238:	683b      	ldr	r3, [r7, #0]
 804223a:	681b      	ldr	r3, [r3, #0]
 804223c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804223e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8042240:	fa93 f3a3 	rbit	r3, r3
 8042244:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8042246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8042248:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 804224a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 804224c:	2b00      	cmp	r3, #0
 804224e:	d101      	bne.n	8042254 <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8042250:	2320      	movs	r3, #32
 8042252:	e003      	b.n	804225c <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 8042254:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8042256:	fab3 f383 	clz	r3, r3
 804225a:	b2db      	uxtb	r3, r3
 804225c:	3301      	adds	r3, #1
 804225e:	f003 021f 	and.w	r2, r3, #31
 8042262:	4613      	mov	r3, r2
 8042264:	005b      	lsls	r3, r3, #1
 8042266:	4413      	add	r3, r2
 8042268:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 804226a:	430b      	orrs	r3, r1
 804226c:	e081      	b.n	8042372 <HAL_ADC_ConfigChannel+0x67e>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 804226e:	683b      	ldr	r3, [r7, #0]
 8042270:	681b      	ldr	r3, [r3, #0]
 8042272:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042276:	2b00      	cmp	r3, #0
 8042278:	d107      	bne.n	804228a <HAL_ADC_ConfigChannel+0x596>
 804227a:	683b      	ldr	r3, [r7, #0]
 804227c:	681b      	ldr	r3, [r3, #0]
 804227e:	0e9b      	lsrs	r3, r3, #26
 8042280:	3301      	adds	r3, #1
 8042282:	069b      	lsls	r3, r3, #26
 8042284:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8042288:	e015      	b.n	80422b6 <HAL_ADC_ConfigChannel+0x5c2>
 804228a:	683b      	ldr	r3, [r7, #0]
 804228c:	681b      	ldr	r3, [r3, #0]
 804228e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8042292:	fa93 f3a3 	rbit	r3, r3
 8042296:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8042298:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804229a:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 804229c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 804229e:	2b00      	cmp	r3, #0
 80422a0:	d101      	bne.n	80422a6 <HAL_ADC_ConfigChannel+0x5b2>
    return 32U;
 80422a2:	2320      	movs	r3, #32
 80422a4:	e003      	b.n	80422ae <HAL_ADC_ConfigChannel+0x5ba>
  return __builtin_clz(value);
 80422a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80422a8:	fab3 f383 	clz	r3, r3
 80422ac:	b2db      	uxtb	r3, r3
 80422ae:	3301      	adds	r3, #1
 80422b0:	069b      	lsls	r3, r3, #26
 80422b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80422b6:	683b      	ldr	r3, [r7, #0]
 80422b8:	681b      	ldr	r3, [r3, #0]
 80422ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80422be:	2b00      	cmp	r3, #0
 80422c0:	d109      	bne.n	80422d6 <HAL_ADC_ConfigChannel+0x5e2>
 80422c2:	683b      	ldr	r3, [r7, #0]
 80422c4:	681b      	ldr	r3, [r3, #0]
 80422c6:	0e9b      	lsrs	r3, r3, #26
 80422c8:	3301      	adds	r3, #1
 80422ca:	f003 031f 	and.w	r3, r3, #31
 80422ce:	2101      	movs	r1, #1
 80422d0:	fa01 f303 	lsl.w	r3, r1, r3
 80422d4:	e017      	b.n	8042306 <HAL_ADC_ConfigChannel+0x612>
 80422d6:	683b      	ldr	r3, [r7, #0]
 80422d8:	681b      	ldr	r3, [r3, #0]
 80422da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80422dc:	6a3b      	ldr	r3, [r7, #32]
 80422de:	fa93 f3a3 	rbit	r3, r3
 80422e2:	61fb      	str	r3, [r7, #28]
  return result;
 80422e4:	69fb      	ldr	r3, [r7, #28]
 80422e6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80422e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80422ea:	2b00      	cmp	r3, #0
 80422ec:	d101      	bne.n	80422f2 <HAL_ADC_ConfigChannel+0x5fe>
    return 32U;
 80422ee:	2320      	movs	r3, #32
 80422f0:	e003      	b.n	80422fa <HAL_ADC_ConfigChannel+0x606>
  return __builtin_clz(value);
 80422f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80422f4:	fab3 f383 	clz	r3, r3
 80422f8:	b2db      	uxtb	r3, r3
 80422fa:	3301      	adds	r3, #1
 80422fc:	f003 031f 	and.w	r3, r3, #31
 8042300:	2101      	movs	r1, #1
 8042302:	fa01 f303 	lsl.w	r3, r1, r3
 8042306:	ea42 0103 	orr.w	r1, r2, r3
 804230a:	683b      	ldr	r3, [r7, #0]
 804230c:	681b      	ldr	r3, [r3, #0]
 804230e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8042312:	2b00      	cmp	r3, #0
 8042314:	d10d      	bne.n	8042332 <HAL_ADC_ConfigChannel+0x63e>
 8042316:	683b      	ldr	r3, [r7, #0]
 8042318:	681b      	ldr	r3, [r3, #0]
 804231a:	0e9b      	lsrs	r3, r3, #26
 804231c:	3301      	adds	r3, #1
 804231e:	f003 021f 	and.w	r2, r3, #31
 8042322:	4613      	mov	r3, r2
 8042324:	005b      	lsls	r3, r3, #1
 8042326:	4413      	add	r3, r2
 8042328:	3b1e      	subs	r3, #30
 804232a:	051b      	lsls	r3, r3, #20
 804232c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8042330:	e01e      	b.n	8042370 <HAL_ADC_ConfigChannel+0x67c>
 8042332:	683b      	ldr	r3, [r7, #0]
 8042334:	681b      	ldr	r3, [r3, #0]
 8042336:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8042338:	697b      	ldr	r3, [r7, #20]
 804233a:	fa93 f3a3 	rbit	r3, r3
 804233e:	613b      	str	r3, [r7, #16]
  return result;
 8042340:	693b      	ldr	r3, [r7, #16]
 8042342:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8042344:	69bb      	ldr	r3, [r7, #24]
 8042346:	2b00      	cmp	r3, #0
 8042348:	d104      	bne.n	8042354 <HAL_ADC_ConfigChannel+0x660>
    return 32U;
 804234a:	2320      	movs	r3, #32
 804234c:	e006      	b.n	804235c <HAL_ADC_ConfigChannel+0x668>
 804234e:	bf00      	nop
 8042350:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8042354:	69bb      	ldr	r3, [r7, #24]
 8042356:	fab3 f383 	clz	r3, r3
 804235a:	b2db      	uxtb	r3, r3
 804235c:	3301      	adds	r3, #1
 804235e:	f003 021f 	and.w	r2, r3, #31
 8042362:	4613      	mov	r3, r2
 8042364:	005b      	lsls	r3, r3, #1
 8042366:	4413      	add	r3, r2
 8042368:	3b1e      	subs	r3, #30
 804236a:	051b      	lsls	r3, r3, #20
 804236c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8042370:	430b      	orrs	r3, r1
 8042372:	683a      	ldr	r2, [r7, #0]
 8042374:	6892      	ldr	r2, [r2, #8]
 8042376:	4619      	mov	r1, r3
 8042378:	f7ff fa98 	bl	80418ac <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 804237c:	683b      	ldr	r3, [r7, #0]
 804237e:	681a      	ldr	r2, [r3, #0]
 8042380:	4b48      	ldr	r3, [pc, #288]	; (80424a4 <HAL_ADC_ConfigChannel+0x7b0>)
 8042382:	4013      	ands	r3, r2
 8042384:	2b00      	cmp	r3, #0
 8042386:	f000 8082 	beq.w	804248e <HAL_ADC_ConfigChannel+0x79a>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 804238a:	4847      	ldr	r0, [pc, #284]	; (80424a8 <HAL_ADC_ConfigChannel+0x7b4>)
 804238c:	f7ff f9ec 	bl	8041768 <LL_ADC_GetCommonPathInternalCh>
 8042390:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8042394:	4845      	ldr	r0, [pc, #276]	; (80424ac <HAL_ADC_ConfigChannel+0x7b8>)
 8042396:	f7ff fb27 	bl	80419e8 <LL_ADC_IsEnabled>
 804239a:	4604      	mov	r4, r0
 804239c:	4844      	ldr	r0, [pc, #272]	; (80424b0 <HAL_ADC_ConfigChannel+0x7bc>)
 804239e:	f7ff fb23 	bl	80419e8 <LL_ADC_IsEnabled>
 80423a2:	4603      	mov	r3, r0
 80423a4:	4323      	orrs	r3, r4
 80423a6:	2b00      	cmp	r3, #0
 80423a8:	d15e      	bne.n	8042468 <HAL_ADC_ConfigChannel+0x774>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80423aa:	683b      	ldr	r3, [r7, #0]
 80423ac:	681b      	ldr	r3, [r3, #0]
 80423ae:	4a41      	ldr	r2, [pc, #260]	; (80424b4 <HAL_ADC_ConfigChannel+0x7c0>)
 80423b0:	4293      	cmp	r3, r2
 80423b2:	d127      	bne.n	8042404 <HAL_ADC_ConfigChannel+0x710>
              && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80423b4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80423b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80423bc:	2b00      	cmp	r3, #0
 80423be:	d121      	bne.n	8042404 <HAL_ADC_ConfigChannel+0x710>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80423c0:	687b      	ldr	r3, [r7, #4]
 80423c2:	681b      	ldr	r3, [r3, #0]
 80423c4:	4a39      	ldr	r2, [pc, #228]	; (80424ac <HAL_ADC_ConfigChannel+0x7b8>)
 80423c6:	4293      	cmp	r3, r2
 80423c8:	d161      	bne.n	804248e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80423ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80423ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80423d2:	4619      	mov	r1, r3
 80423d4:	4834      	ldr	r0, [pc, #208]	; (80424a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80423d6:	f7ff f9b4 	bl	8041742 <LL_ADC_SetCommonPathInternalCh>
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
                                 * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80423da:	4b37      	ldr	r3, [pc, #220]	; (80424b8 <HAL_ADC_ConfigChannel+0x7c4>)
 80423dc:	681b      	ldr	r3, [r3, #0]
 80423de:	099b      	lsrs	r3, r3, #6
 80423e0:	4a36      	ldr	r2, [pc, #216]	; (80424bc <HAL_ADC_ConfigChannel+0x7c8>)
 80423e2:	fba2 2303 	umull	r2, r3, r2, r3
 80423e6:	099b      	lsrs	r3, r3, #6
 80423e8:	1c5a      	adds	r2, r3, #1
 80423ea:	4613      	mov	r3, r2
 80423ec:	005b      	lsls	r3, r3, #1
 80423ee:	4413      	add	r3, r2
 80423f0:	009b      	lsls	r3, r3, #2
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL)
 80423f2:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80423f4:	e002      	b.n	80423fc <HAL_ADC_ConfigChannel+0x708>
              {
                wait_loop_index--;
 80423f6:	68fb      	ldr	r3, [r7, #12]
 80423f8:	3b01      	subs	r3, #1
 80423fa:	60fb      	str	r3, [r7, #12]
              while(wait_loop_index != 0UL)
 80423fc:	68fb      	ldr	r3, [r7, #12]
 80423fe:	2b00      	cmp	r3, #0
 8042400:	d1f9      	bne.n	80423f6 <HAL_ADC_ConfigChannel+0x702>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8042402:	e044      	b.n	804248e <HAL_ADC_ConfigChannel+0x79a>
              }
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8042404:	683b      	ldr	r3, [r7, #0]
 8042406:	681b      	ldr	r3, [r3, #0]
 8042408:	4a2d      	ldr	r2, [pc, #180]	; (80424c0 <HAL_ADC_ConfigChannel+0x7cc>)
 804240a:	4293      	cmp	r3, r2
 804240c:	d113      	bne.n	8042436 <HAL_ADC_ConfigChannel+0x742>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 804240e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8042412:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8042416:	2b00      	cmp	r3, #0
 8042418:	d10d      	bne.n	8042436 <HAL_ADC_ConfigChannel+0x742>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 804241a:	687b      	ldr	r3, [r7, #4]
 804241c:	681b      	ldr	r3, [r3, #0]
 804241e:	4a23      	ldr	r2, [pc, #140]	; (80424ac <HAL_ADC_ConfigChannel+0x7b8>)
 8042420:	4293      	cmp	r3, r2
 8042422:	d134      	bne.n	804248e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8042424:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8042428:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 804242c:	4619      	mov	r1, r3
 804242e:	481e      	ldr	r0, [pc, #120]	; (80424a8 <HAL_ADC_ConfigChannel+0x7b4>)
 8042430:	f7ff f987 	bl	8041742 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8042434:	e02b      	b.n	804248e <HAL_ADC_ConfigChannel+0x79a>
                                             LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
            }
          }
          else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8042436:	683b      	ldr	r3, [r7, #0]
 8042438:	681b      	ldr	r3, [r3, #0]
 804243a:	4a22      	ldr	r2, [pc, #136]	; (80424c4 <HAL_ADC_ConfigChannel+0x7d0>)
 804243c:	4293      	cmp	r3, r2
 804243e:	d126      	bne.n	804248e <HAL_ADC_ConfigChannel+0x79a>
                   && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8042440:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8042444:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8042448:	2b00      	cmp	r3, #0
 804244a:	d120      	bne.n	804248e <HAL_ADC_ConfigChannel+0x79a>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 804244c:	687b      	ldr	r3, [r7, #4]
 804244e:	681b      	ldr	r3, [r3, #0]
 8042450:	4a16      	ldr	r2, [pc, #88]	; (80424ac <HAL_ADC_ConfigChannel+0x7b8>)
 8042452:	4293      	cmp	r3, r2
 8042454:	d11b      	bne.n	804248e <HAL_ADC_ConfigChannel+0x79a>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8042456:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 804245a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 804245e:	4619      	mov	r1, r3
 8042460:	4811      	ldr	r0, [pc, #68]	; (80424a8 <HAL_ADC_ConfigChannel+0x7b4>)
 8042462:	f7ff f96e 	bl	8041742 <LL_ADC_SetCommonPathInternalCh>
 8042466:	e012      	b.n	804248e <HAL_ADC_ConfigChannel+0x79a>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8042468:	687b      	ldr	r3, [r7, #4]
 804246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804246c:	f043 0220 	orr.w	r2, r3, #32
 8042470:	687b      	ldr	r3, [r7, #4]
 8042472:	659a      	str	r2, [r3, #88]	; 0x58

          tmp_hal_status = HAL_ERROR;
 8042474:	2301      	movs	r3, #1
 8042476:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 804247a:	e008      	b.n	804248e <HAL_ADC_ConfigChannel+0x79a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 804247c:	687b      	ldr	r3, [r7, #4]
 804247e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042480:	f043 0220 	orr.w	r2, r3, #32
 8042484:	687b      	ldr	r3, [r7, #4]
 8042486:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8042488:	2301      	movs	r3, #1
 804248a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 804248e:	687b      	ldr	r3, [r7, #4]
 8042490:	2200      	movs	r2, #0
 8042492:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8042496:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 804249a:	4618      	mov	r0, r3
 804249c:	37dc      	adds	r7, #220	; 0xdc
 804249e:	46bd      	mov	sp, r7
 80424a0:	bd90      	pop	{r4, r7, pc}
 80424a2:	bf00      	nop
 80424a4:	80080000 	.word	0x80080000
 80424a8:	42028300 	.word	0x42028300
 80424ac:	42028000 	.word	0x42028000
 80424b0:	42028100 	.word	0x42028100
 80424b4:	c7520000 	.word	0xc7520000
 80424b8:	20018000 	.word	0x20018000
 80424bc:	053e2d63 	.word	0x053e2d63
 80424c0:	cb840000 	.word	0xcb840000
 80424c4:	80000001 	.word	0x80000001

080424c8 <LL_ADC_IsEnabled>:
{
 80424c8:	b480      	push	{r7}
 80424ca:	b083      	sub	sp, #12
 80424cc:	af00      	add	r7, sp, #0
 80424ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80424d0:	687b      	ldr	r3, [r7, #4]
 80424d2:	689b      	ldr	r3, [r3, #8]
 80424d4:	f003 0301 	and.w	r3, r3, #1
 80424d8:	2b01      	cmp	r3, #1
 80424da:	d101      	bne.n	80424e0 <LL_ADC_IsEnabled+0x18>
 80424dc:	2301      	movs	r3, #1
 80424de:	e000      	b.n	80424e2 <LL_ADC_IsEnabled+0x1a>
 80424e0:	2300      	movs	r3, #0
}
 80424e2:	4618      	mov	r0, r3
 80424e4:	370c      	adds	r7, #12
 80424e6:	46bd      	mov	sp, r7
 80424e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80424ec:	4770      	bx	lr

080424ee <LL_ADC_REG_IsConversionOngoing>:
{
 80424ee:	b480      	push	{r7}
 80424f0:	b083      	sub	sp, #12
 80424f2:	af00      	add	r7, sp, #0
 80424f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80424f6:	687b      	ldr	r3, [r7, #4]
 80424f8:	689b      	ldr	r3, [r3, #8]
 80424fa:	f003 0304 	and.w	r3, r3, #4
 80424fe:	2b04      	cmp	r3, #4
 8042500:	d101      	bne.n	8042506 <LL_ADC_REG_IsConversionOngoing+0x18>
 8042502:	2301      	movs	r3, #1
 8042504:	e000      	b.n	8042508 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8042506:	2300      	movs	r3, #0
}
 8042508:	4618      	mov	r0, r3
 804250a:	370c      	adds	r7, #12
 804250c:	46bd      	mov	sp, r7
 804250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042512:	4770      	bx	lr

08042514 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8042514:	b590      	push	{r4, r7, lr}
 8042516:	b0a1      	sub	sp, #132	; 0x84
 8042518:	af00      	add	r7, sp, #0
 804251a:	6078      	str	r0, [r7, #4]
 804251c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 804251e:	2300      	movs	r3, #0
 8042520:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8042524:	687b      	ldr	r3, [r7, #4]
 8042526:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 804252a:	2b01      	cmp	r3, #1
 804252c:	d101      	bne.n	8042532 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 804252e:	2302      	movs	r3, #2
 8042530:	e089      	b.n	8042646 <HAL_ADCEx_MultiModeConfigChannel+0x132>
 8042532:	687b      	ldr	r3, [r7, #4]
 8042534:	2201      	movs	r2, #1
 8042536:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 804253a:	2300      	movs	r3, #0
 804253c:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 804253e:	2300      	movs	r3, #0
 8042540:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8042542:	687b      	ldr	r3, [r7, #4]
 8042544:	681b      	ldr	r3, [r3, #0]
 8042546:	4a42      	ldr	r2, [pc, #264]	; (8042650 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 8042548:	4293      	cmp	r3, r2
 804254a:	d102      	bne.n	8042552 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 804254c:	4b41      	ldr	r3, [pc, #260]	; (8042654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 804254e:	60fb      	str	r3, [r7, #12]
 8042550:	e001      	b.n	8042556 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8042552:	2300      	movs	r3, #0
 8042554:	60fb      	str	r3, [r7, #12]

  if (tmp_hadc_slave.Instance == NULL)
 8042556:	68fb      	ldr	r3, [r7, #12]
 8042558:	2b00      	cmp	r3, #0
 804255a:	d10b      	bne.n	8042574 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 804255c:	687b      	ldr	r3, [r7, #4]
 804255e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042560:	f043 0220 	orr.w	r2, r3, #32
 8042564:	687b      	ldr	r3, [r7, #4]
 8042566:	659a      	str	r2, [r3, #88]	; 0x58

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8042568:	687b      	ldr	r3, [r7, #4]
 804256a:	2200      	movs	r2, #0
 804256c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

    return HAL_ERROR;
 8042570:	2301      	movs	r3, #1
 8042572:	e068      	b.n	8042646 <HAL_ADCEx_MultiModeConfigChannel+0x132>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8042574:	68fb      	ldr	r3, [r7, #12]
 8042576:	4618      	mov	r0, r3
 8042578:	f7ff ffb9 	bl	80424ee <LL_ADC_REG_IsConversionOngoing>
 804257c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 804257e:	687b      	ldr	r3, [r7, #4]
 8042580:	681b      	ldr	r3, [r3, #0]
 8042582:	4618      	mov	r0, r3
 8042584:	f7ff ffb3 	bl	80424ee <LL_ADC_REG_IsConversionOngoing>
 8042588:	4603      	mov	r3, r0
 804258a:	2b00      	cmp	r3, #0
 804258c:	d14a      	bne.n	8042624 <HAL_ADCEx_MultiModeConfigChannel+0x110>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 804258e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8042590:	2b00      	cmp	r3, #0
 8042592:	d147      	bne.n	8042624 <HAL_ADCEx_MultiModeConfigChannel+0x110>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8042594:	4b30      	ldr	r3, [pc, #192]	; (8042658 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8042596:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8042598:	683b      	ldr	r3, [r7, #0]
 804259a:	681b      	ldr	r3, [r3, #0]
 804259c:	2b00      	cmp	r3, #0
 804259e:	d027      	beq.n	80425f0 <HAL_ADCEx_MultiModeConfigChannel+0xdc>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80425a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425a2:	689b      	ldr	r3, [r3, #8]
 80425a4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80425a8:	683b      	ldr	r3, [r7, #0]
 80425aa:	6859      	ldr	r1, [r3, #4]
 80425ac:	687b      	ldr	r3, [r7, #4]
 80425ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80425b2:	035b      	lsls	r3, r3, #13
 80425b4:	430b      	orrs	r3, r1
 80425b6:	431a      	orrs	r2, r3
 80425b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425ba:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80425bc:	4824      	ldr	r0, [pc, #144]	; (8042650 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80425be:	f7ff ff83 	bl	80424c8 <LL_ADC_IsEnabled>
 80425c2:	4604      	mov	r4, r0
 80425c4:	4823      	ldr	r0, [pc, #140]	; (8042654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80425c6:	f7ff ff7f 	bl	80424c8 <LL_ADC_IsEnabled>
 80425ca:	4603      	mov	r3, r0
 80425cc:	4323      	orrs	r3, r4
 80425ce:	2b00      	cmp	r3, #0
 80425d0:	d132      	bne.n	8042638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80425d2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425d4:	689b      	ldr	r3, [r3, #8]
 80425d6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80425da:	f023 030f 	bic.w	r3, r3, #15
 80425de:	683a      	ldr	r2, [r7, #0]
 80425e0:	6811      	ldr	r1, [r2, #0]
 80425e2:	683a      	ldr	r2, [r7, #0]
 80425e4:	6892      	ldr	r2, [r2, #8]
 80425e6:	430a      	orrs	r2, r1
 80425e8:	431a      	orrs	r2, r3
 80425ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425ec:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80425ee:	e023      	b.n	8042638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80425f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425f2:	689b      	ldr	r3, [r3, #8]
 80425f4:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80425f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80425fa:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80425fc:	4814      	ldr	r0, [pc, #80]	; (8042650 <HAL_ADCEx_MultiModeConfigChannel+0x13c>)
 80425fe:	f7ff ff63 	bl	80424c8 <LL_ADC_IsEnabled>
 8042602:	4604      	mov	r4, r0
 8042604:	4813      	ldr	r0, [pc, #76]	; (8042654 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8042606:	f7ff ff5f 	bl	80424c8 <LL_ADC_IsEnabled>
 804260a:	4603      	mov	r3, r0
 804260c:	4323      	orrs	r3, r4
 804260e:	2b00      	cmp	r3, #0
 8042610:	d112      	bne.n	8042638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8042612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8042614:	689b      	ldr	r3, [r3, #8]
 8042616:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 804261a:	f023 030f 	bic.w	r3, r3, #15
 804261e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8042620:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8042622:	e009      	b.n	8042638 <HAL_ADCEx_MultiModeConfigChannel+0x124>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8042624:	687b      	ldr	r3, [r7, #4]
 8042626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042628:	f043 0220 	orr.w	r2, r3, #32
 804262c:	687b      	ldr	r3, [r7, #4]
 804262e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8042630:	2301      	movs	r3, #1
 8042632:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8042636:	e000      	b.n	804263a <HAL_ADCEx_MultiModeConfigChannel+0x126>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8042638:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 804263a:	687b      	ldr	r3, [r7, #4]
 804263c:	2200      	movs	r2, #0
 804263e:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54

  /* Return function status */
  return tmp_hal_status;
 8042642:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8042646:	4618      	mov	r0, r3
 8042648:	3784      	adds	r7, #132	; 0x84
 804264a:	46bd      	mov	sp, r7
 804264c:	bd90      	pop	{r4, r7, pc}
 804264e:	bf00      	nop
 8042650:	42028000 	.word	0x42028000
 8042654:	42028100 	.word	0x42028100
 8042658:	42028300 	.word	0x42028300

0804265c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 804265c:	b480      	push	{r7}
 804265e:	b085      	sub	sp, #20
 8042660:	af00      	add	r7, sp, #0
 8042662:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8042664:	687b      	ldr	r3, [r7, #4]
 8042666:	f003 0307 	and.w	r3, r3, #7
 804266a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 804266c:	4b0c      	ldr	r3, [pc, #48]	; (80426a0 <__NVIC_SetPriorityGrouping+0x44>)
 804266e:	68db      	ldr	r3, [r3, #12]
 8042670:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8042672:	68ba      	ldr	r2, [r7, #8]
 8042674:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8042678:	4013      	ands	r3, r2
 804267a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 804267c:	68fb      	ldr	r3, [r7, #12]
 804267e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8042680:	68bb      	ldr	r3, [r7, #8]
 8042682:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8042684:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8042688:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 804268c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 804268e:	4a04      	ldr	r2, [pc, #16]	; (80426a0 <__NVIC_SetPriorityGrouping+0x44>)
 8042690:	68bb      	ldr	r3, [r7, #8]
 8042692:	60d3      	str	r3, [r2, #12]
}
 8042694:	bf00      	nop
 8042696:	3714      	adds	r7, #20
 8042698:	46bd      	mov	sp, r7
 804269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804269e:	4770      	bx	lr
 80426a0:	e000ed00 	.word	0xe000ed00

080426a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80426a4:	b480      	push	{r7}
 80426a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80426a8:	4b04      	ldr	r3, [pc, #16]	; (80426bc <__NVIC_GetPriorityGrouping+0x18>)
 80426aa:	68db      	ldr	r3, [r3, #12]
 80426ac:	0a1b      	lsrs	r3, r3, #8
 80426ae:	f003 0307 	and.w	r3, r3, #7
}
 80426b2:	4618      	mov	r0, r3
 80426b4:	46bd      	mov	sp, r7
 80426b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80426ba:	4770      	bx	lr
 80426bc:	e000ed00 	.word	0xe000ed00

080426c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80426c0:	b480      	push	{r7}
 80426c2:	b083      	sub	sp, #12
 80426c4:	af00      	add	r7, sp, #0
 80426c6:	4603      	mov	r3, r0
 80426c8:	6039      	str	r1, [r7, #0]
 80426ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80426cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80426d0:	2b00      	cmp	r3, #0
 80426d2:	db0a      	blt.n	80426ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80426d4:	683b      	ldr	r3, [r7, #0]
 80426d6:	b2da      	uxtb	r2, r3
 80426d8:	490c      	ldr	r1, [pc, #48]	; (804270c <__NVIC_SetPriority+0x4c>)
 80426da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80426de:	0152      	lsls	r2, r2, #5
 80426e0:	b2d2      	uxtb	r2, r2
 80426e2:	440b      	add	r3, r1
 80426e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80426e8:	e00a      	b.n	8042700 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80426ea:	683b      	ldr	r3, [r7, #0]
 80426ec:	b2da      	uxtb	r2, r3
 80426ee:	4908      	ldr	r1, [pc, #32]	; (8042710 <__NVIC_SetPriority+0x50>)
 80426f0:	79fb      	ldrb	r3, [r7, #7]
 80426f2:	f003 030f 	and.w	r3, r3, #15
 80426f6:	3b04      	subs	r3, #4
 80426f8:	0152      	lsls	r2, r2, #5
 80426fa:	b2d2      	uxtb	r2, r2
 80426fc:	440b      	add	r3, r1
 80426fe:	761a      	strb	r2, [r3, #24]
}
 8042700:	bf00      	nop
 8042702:	370c      	adds	r7, #12
 8042704:	46bd      	mov	sp, r7
 8042706:	f85d 7b04 	ldr.w	r7, [sp], #4
 804270a:	4770      	bx	lr
 804270c:	e000e100 	.word	0xe000e100
 8042710:	e000ed00 	.word	0xe000ed00

08042714 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8042714:	b480      	push	{r7}
 8042716:	b089      	sub	sp, #36	; 0x24
 8042718:	af00      	add	r7, sp, #0
 804271a:	60f8      	str	r0, [r7, #12]
 804271c:	60b9      	str	r1, [r7, #8]
 804271e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8042720:	68fb      	ldr	r3, [r7, #12]
 8042722:	f003 0307 	and.w	r3, r3, #7
 8042726:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8042728:	69fb      	ldr	r3, [r7, #28]
 804272a:	f1c3 0307 	rsb	r3, r3, #7
 804272e:	2b03      	cmp	r3, #3
 8042730:	bf28      	it	cs
 8042732:	2303      	movcs	r3, #3
 8042734:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8042736:	69fb      	ldr	r3, [r7, #28]
 8042738:	3303      	adds	r3, #3
 804273a:	2b06      	cmp	r3, #6
 804273c:	d902      	bls.n	8042744 <NVIC_EncodePriority+0x30>
 804273e:	69fb      	ldr	r3, [r7, #28]
 8042740:	3b04      	subs	r3, #4
 8042742:	e000      	b.n	8042746 <NVIC_EncodePriority+0x32>
 8042744:	2300      	movs	r3, #0
 8042746:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8042748:	f04f 32ff 	mov.w	r2, #4294967295
 804274c:	69bb      	ldr	r3, [r7, #24]
 804274e:	fa02 f303 	lsl.w	r3, r2, r3
 8042752:	43da      	mvns	r2, r3
 8042754:	68bb      	ldr	r3, [r7, #8]
 8042756:	401a      	ands	r2, r3
 8042758:	697b      	ldr	r3, [r7, #20]
 804275a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 804275c:	f04f 31ff 	mov.w	r1, #4294967295
 8042760:	697b      	ldr	r3, [r7, #20]
 8042762:	fa01 f303 	lsl.w	r3, r1, r3
 8042766:	43d9      	mvns	r1, r3
 8042768:	687b      	ldr	r3, [r7, #4]
 804276a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 804276c:	4313      	orrs	r3, r2
         );
}
 804276e:	4618      	mov	r0, r3
 8042770:	3724      	adds	r7, #36	; 0x24
 8042772:	46bd      	mov	sp, r7
 8042774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042778:	4770      	bx	lr
	...

0804277c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 804277c:	b580      	push	{r7, lr}
 804277e:	b082      	sub	sp, #8
 8042780:	af00      	add	r7, sp, #0
 8042782:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8042784:	687b      	ldr	r3, [r7, #4]
 8042786:	3b01      	subs	r3, #1
 8042788:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804278c:	d301      	bcc.n	8042792 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 804278e:	2301      	movs	r3, #1
 8042790:	e00f      	b.n	80427b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8042792:	4a0a      	ldr	r2, [pc, #40]	; (80427bc <SysTick_Config+0x40>)
 8042794:	687b      	ldr	r3, [r7, #4]
 8042796:	3b01      	subs	r3, #1
 8042798:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 804279a:	2107      	movs	r1, #7
 804279c:	f04f 30ff 	mov.w	r0, #4294967295
 80427a0:	f7ff ff8e 	bl	80426c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80427a4:	4b05      	ldr	r3, [pc, #20]	; (80427bc <SysTick_Config+0x40>)
 80427a6:	2200      	movs	r2, #0
 80427a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80427aa:	4b04      	ldr	r3, [pc, #16]	; (80427bc <SysTick_Config+0x40>)
 80427ac:	2207      	movs	r2, #7
 80427ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80427b0:	2300      	movs	r3, #0
}
 80427b2:	4618      	mov	r0, r3
 80427b4:	3708      	adds	r7, #8
 80427b6:	46bd      	mov	sp, r7
 80427b8:	bd80      	pop	{r7, pc}
 80427ba:	bf00      	nop
 80427bc:	e000e010 	.word	0xe000e010

080427c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80427c0:	b580      	push	{r7, lr}
 80427c2:	b082      	sub	sp, #8
 80427c4:	af00      	add	r7, sp, #0
 80427c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80427c8:	6878      	ldr	r0, [r7, #4]
 80427ca:	f7ff ff47 	bl	804265c <__NVIC_SetPriorityGrouping>
}
 80427ce:	bf00      	nop
 80427d0:	3708      	adds	r7, #8
 80427d2:	46bd      	mov	sp, r7
 80427d4:	bd80      	pop	{r7, pc}

080427d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80427d6:	b580      	push	{r7, lr}
 80427d8:	b086      	sub	sp, #24
 80427da:	af00      	add	r7, sp, #0
 80427dc:	4603      	mov	r3, r0
 80427de:	60b9      	str	r1, [r7, #8]
 80427e0:	607a      	str	r2, [r7, #4]
 80427e2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80427e4:	f7ff ff5e 	bl	80426a4 <__NVIC_GetPriorityGrouping>
 80427e8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80427ea:	687a      	ldr	r2, [r7, #4]
 80427ec:	68b9      	ldr	r1, [r7, #8]
 80427ee:	6978      	ldr	r0, [r7, #20]
 80427f0:	f7ff ff90 	bl	8042714 <NVIC_EncodePriority>
 80427f4:	4602      	mov	r2, r0
 80427f6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80427fa:	4611      	mov	r1, r2
 80427fc:	4618      	mov	r0, r3
 80427fe:	f7ff ff5f 	bl	80426c0 <__NVIC_SetPriority>
}
 8042802:	bf00      	nop
 8042804:	3718      	adds	r7, #24
 8042806:	46bd      	mov	sp, r7
 8042808:	bd80      	pop	{r7, pc}

0804280a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 804280a:	b580      	push	{r7, lr}
 804280c:	b082      	sub	sp, #8
 804280e:	af00      	add	r7, sp, #0
 8042810:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8042812:	6878      	ldr	r0, [r7, #4]
 8042814:	f7ff ffb2 	bl	804277c <SysTick_Config>
 8042818:	4603      	mov	r3, r0
}
 804281a:	4618      	mov	r0, r3
 804281c:	3708      	adds	r7, #8
 804281e:	46bd      	mov	sp, r7
 8042820:	bd80      	pop	{r7, pc}
	...

08042824 <HAL_DFSDM_ChannelInit>:
  *         in the DFSDM_ChannelInitTypeDef structure and initialize the associated handle.
  * @param  hdfsdm_channel DFSDM channel handle.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_DFSDM_ChannelInit(DFSDM_Channel_HandleTypeDef *hdfsdm_channel)
{
 8042824:	b580      	push	{r7, lr}
 8042826:	b082      	sub	sp, #8
 8042828:	af00      	add	r7, sp, #0
 804282a:	6078      	str	r0, [r7, #4]
  /* Check DFSDM Channel handle */
  if (hdfsdm_channel == NULL)
 804282c:	687b      	ldr	r3, [r7, #4]
 804282e:	2b00      	cmp	r3, #0
 8042830:	d101      	bne.n	8042836 <HAL_DFSDM_ChannelInit+0x12>
  {
    return HAL_ERROR;
 8042832:	2301      	movs	r3, #1
 8042834:	e0ac      	b.n	8042990 <HAL_DFSDM_ChannelInit+0x16c>
  assert_param(IS_DFSDM_CHANNEL_FILTER_OVS_RATIO(hdfsdm_channel->Init.Awd.Oversampling));
  assert_param(IS_DFSDM_CHANNEL_OFFSET(hdfsdm_channel->Init.Offset));
  assert_param(IS_DFSDM_CHANNEL_RIGHT_BIT_SHIFT(hdfsdm_channel->Init.RightBitShift));

  /* Check that channel has not been already initialized */
  if (a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] != NULL)
 8042836:	687b      	ldr	r3, [r7, #4]
 8042838:	681b      	ldr	r3, [r3, #0]
 804283a:	4618      	mov	r0, r3
 804283c:	f000 f8b2 	bl	80429a4 <DFSDM_GetChannelFromInstance>
 8042840:	4603      	mov	r3, r0
 8042842:	4a55      	ldr	r2, [pc, #340]	; (8042998 <HAL_DFSDM_ChannelInit+0x174>)
 8042844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8042848:	2b00      	cmp	r3, #0
 804284a:	d001      	beq.n	8042850 <HAL_DFSDM_ChannelInit+0x2c>
  {
    return HAL_ERROR;
 804284c:	2301      	movs	r3, #1
 804284e:	e09f      	b.n	8042990 <HAL_DFSDM_ChannelInit+0x16c>
    hdfsdm_channel->MspInitCallback = HAL_DFSDM_ChannelMspInit;
  }
  hdfsdm_channel->MspInitCallback(hdfsdm_channel);
#else
  /* Call MSP init function */
  HAL_DFSDM_ChannelMspInit(hdfsdm_channel);
 8042850:	6878      	ldr	r0, [r7, #4]
 8042852:	f7fe faa1 	bl	8040d98 <HAL_DFSDM_ChannelMspInit>
#endif

  /* Update the channel counter */
  v_dfsdm1ChannelCounter++;
 8042856:	4b51      	ldr	r3, [pc, #324]	; (804299c <HAL_DFSDM_ChannelInit+0x178>)
 8042858:	681b      	ldr	r3, [r3, #0]
 804285a:	3301      	adds	r3, #1
 804285c:	4a4f      	ldr	r2, [pc, #316]	; (804299c <HAL_DFSDM_ChannelInit+0x178>)
 804285e:	6013      	str	r3, [r2, #0]

  /* Configure output serial clock and enable global DFSDM interface only for first channel */
  if (v_dfsdm1ChannelCounter == 1U)
 8042860:	4b4e      	ldr	r3, [pc, #312]	; (804299c <HAL_DFSDM_ChannelInit+0x178>)
 8042862:	681b      	ldr	r3, [r3, #0]
 8042864:	2b01      	cmp	r3, #1
 8042866:	d125      	bne.n	80428b4 <HAL_DFSDM_ChannelInit+0x90>
  {
    assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK(hdfsdm_channel->Init.OutputClock.Selection));
    /* Set the output serial clock source */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTSRC);
 8042868:	4b4d      	ldr	r3, [pc, #308]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 804286a:	681b      	ldr	r3, [r3, #0]
 804286c:	4a4c      	ldr	r2, [pc, #304]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 804286e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8042872:	6013      	str	r3, [r2, #0]
    DFSDM1_Channel0->CHCFGR1 |= hdfsdm_channel->Init.OutputClock.Selection;
 8042874:	4b4a      	ldr	r3, [pc, #296]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8042876:	681a      	ldr	r2, [r3, #0]
 8042878:	687b      	ldr	r3, [r7, #4]
 804287a:	689b      	ldr	r3, [r3, #8]
 804287c:	4948      	ldr	r1, [pc, #288]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 804287e:	4313      	orrs	r3, r2
 8042880:	600b      	str	r3, [r1, #0]

    /* Reset clock divider */
    DFSDM1_Channel0->CHCFGR1 &= ~(DFSDM_CHCFGR1_CKOUTDIV);
 8042882:	4b47      	ldr	r3, [pc, #284]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8042884:	681b      	ldr	r3, [r3, #0]
 8042886:	4a46      	ldr	r2, [pc, #280]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8042888:	f423 037f 	bic.w	r3, r3, #16711680	; 0xff0000
 804288c:	6013      	str	r3, [r2, #0]
    if (hdfsdm_channel->Init.OutputClock.Activation == ENABLE)
 804288e:	687b      	ldr	r3, [r7, #4]
 8042890:	791b      	ldrb	r3, [r3, #4]
 8042892:	2b01      	cmp	r3, #1
 8042894:	d108      	bne.n	80428a8 <HAL_DFSDM_ChannelInit+0x84>
    {
      assert_param(IS_DFSDM_CHANNEL_OUTPUT_CLOCK_DIVIDER(hdfsdm_channel->Init.OutputClock.Divider));
      /* Set the output clock divider */
      DFSDM1_Channel0->CHCFGR1 |= (uint32_t)((hdfsdm_channel->Init.OutputClock.Divider - 1U) <<
 8042896:	4b42      	ldr	r3, [pc, #264]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 8042898:	681a      	ldr	r2, [r3, #0]
 804289a:	687b      	ldr	r3, [r7, #4]
 804289c:	68db      	ldr	r3, [r3, #12]
 804289e:	3b01      	subs	r3, #1
 80428a0:	041b      	lsls	r3, r3, #16
 80428a2:	493f      	ldr	r1, [pc, #252]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80428a4:	4313      	orrs	r3, r2
 80428a6:	600b      	str	r3, [r1, #0]
                                             DFSDM_CHCFGR1_CKOUTDIV_Pos);
    }

    /* enable the DFSDM global interface */
    DFSDM1_Channel0->CHCFGR1 |= DFSDM_CHCFGR1_DFSDMEN;
 80428a8:	4b3d      	ldr	r3, [pc, #244]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80428aa:	681b      	ldr	r3, [r3, #0]
 80428ac:	4a3c      	ldr	r2, [pc, #240]	; (80429a0 <HAL_DFSDM_ChannelInit+0x17c>)
 80428ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80428b2:	6013      	str	r3, [r2, #0]
  }

  /* Set channel input parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_DATPACK | DFSDM_CHCFGR1_DATMPX |
 80428b4:	687b      	ldr	r3, [r7, #4]
 80428b6:	681b      	ldr	r3, [r3, #0]
 80428b8:	681a      	ldr	r2, [r3, #0]
 80428ba:	687b      	ldr	r3, [r7, #4]
 80428bc:	681b      	ldr	r3, [r3, #0]
 80428be:	f422 4271 	bic.w	r2, r2, #61696	; 0xf100
 80428c2:	601a      	str	r2, [r3, #0]
                                         DFSDM_CHCFGR1_CHINSEL);
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80428c4:	687b      	ldr	r3, [r7, #4]
 80428c6:	681b      	ldr	r3, [r3, #0]
 80428c8:	6819      	ldr	r1, [r3, #0]
 80428ca:	687b      	ldr	r3, [r7, #4]
 80428cc:	691a      	ldr	r2, [r3, #16]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80428ce:	687b      	ldr	r3, [r7, #4]
 80428d0:	695b      	ldr	r3, [r3, #20]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80428d2:	431a      	orrs	r2, r3
                                        hdfsdm_channel->Init.Input.Pins);
 80428d4:	687b      	ldr	r3, [r7, #4]
 80428d6:	699b      	ldr	r3, [r3, #24]
                                        hdfsdm_channel->Init.Input.DataPacking |
 80428d8:	431a      	orrs	r2, r3
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.Input.Multiplexer |
 80428da:	687b      	ldr	r3, [r7, #4]
 80428dc:	681b      	ldr	r3, [r3, #0]
 80428de:	430a      	orrs	r2, r1
 80428e0:	601a      	str	r2, [r3, #0]

  /* Set serial interface parameters */
  hdfsdm_channel->Instance->CHCFGR1 &= ~(DFSDM_CHCFGR1_SITP | DFSDM_CHCFGR1_SPICKSEL);
 80428e2:	687b      	ldr	r3, [r7, #4]
 80428e4:	681b      	ldr	r3, [r3, #0]
 80428e6:	681a      	ldr	r2, [r3, #0]
 80428e8:	687b      	ldr	r3, [r7, #4]
 80428ea:	681b      	ldr	r3, [r3, #0]
 80428ec:	f022 020f 	bic.w	r2, r2, #15
 80428f0:	601a      	str	r2, [r3, #0]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 80428f2:	687b      	ldr	r3, [r7, #4]
 80428f4:	681b      	ldr	r3, [r3, #0]
 80428f6:	6819      	ldr	r1, [r3, #0]
 80428f8:	687b      	ldr	r3, [r7, #4]
 80428fa:	69da      	ldr	r2, [r3, #28]
                                        hdfsdm_channel->Init.SerialInterface.SpiClock);
 80428fc:	687b      	ldr	r3, [r7, #4]
 80428fe:	6a1b      	ldr	r3, [r3, #32]
  hdfsdm_channel->Instance->CHCFGR1 |= (hdfsdm_channel->Init.SerialInterface.Type |
 8042900:	431a      	orrs	r2, r3
 8042902:	687b      	ldr	r3, [r7, #4]
 8042904:	681b      	ldr	r3, [r3, #0]
 8042906:	430a      	orrs	r2, r1
 8042908:	601a      	str	r2, [r3, #0]

  /* Set analog watchdog parameters */
  hdfsdm_channel->Instance->CHAWSCDR &= ~(DFSDM_CHAWSCDR_AWFORD | DFSDM_CHAWSCDR_AWFOSR);
 804290a:	687b      	ldr	r3, [r7, #4]
 804290c:	681b      	ldr	r3, [r3, #0]
 804290e:	689a      	ldr	r2, [r3, #8]
 8042910:	687b      	ldr	r3, [r7, #4]
 8042912:	681b      	ldr	r3, [r3, #0]
 8042914:	f422 025f 	bic.w	r2, r2, #14614528	; 0xdf0000
 8042918:	609a      	str	r2, [r3, #8]
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 804291a:	687b      	ldr	r3, [r7, #4]
 804291c:	681b      	ldr	r3, [r3, #0]
 804291e:	6899      	ldr	r1, [r3, #8]
 8042920:	687b      	ldr	r3, [r7, #4]
 8042922:	6a5a      	ldr	r2, [r3, #36]	; 0x24
                                         ((hdfsdm_channel->Init.Awd.Oversampling - 1U) << DFSDM_CHAWSCDR_AWFOSR_Pos));
 8042924:	687b      	ldr	r3, [r7, #4]
 8042926:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042928:	3b01      	subs	r3, #1
 804292a:	041b      	lsls	r3, r3, #16
  hdfsdm_channel->Instance->CHAWSCDR |= (hdfsdm_channel->Init.Awd.FilterOrder |
 804292c:	431a      	orrs	r2, r3
 804292e:	687b      	ldr	r3, [r7, #4]
 8042930:	681b      	ldr	r3, [r3, #0]
 8042932:	430a      	orrs	r2, r1
 8042934:	609a      	str	r2, [r3, #8]

  /* Set channel offset and right bit shift */
  hdfsdm_channel->Instance->CHCFGR2 &= ~(DFSDM_CHCFGR2_OFFSET | DFSDM_CHCFGR2_DTRBS);
 8042936:	687b      	ldr	r3, [r7, #4]
 8042938:	681b      	ldr	r3, [r3, #0]
 804293a:	685a      	ldr	r2, [r3, #4]
 804293c:	687b      	ldr	r3, [r7, #4]
 804293e:	681b      	ldr	r3, [r3, #0]
 8042940:	f002 0207 	and.w	r2, r2, #7
 8042944:	605a      	str	r2, [r3, #4]
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8042946:	687b      	ldr	r3, [r7, #4]
 8042948:	681b      	ldr	r3, [r3, #0]
 804294a:	6859      	ldr	r1, [r3, #4]
 804294c:	687b      	ldr	r3, [r7, #4]
 804294e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042950:	021a      	lsls	r2, r3, #8
                                        (hdfsdm_channel->Init.RightBitShift << DFSDM_CHCFGR2_DTRBS_Pos));
 8042952:	687b      	ldr	r3, [r7, #4]
 8042954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8042956:	00db      	lsls	r3, r3, #3
  hdfsdm_channel->Instance->CHCFGR2 |= (((uint32_t) hdfsdm_channel->Init.Offset << DFSDM_CHCFGR2_OFFSET_Pos) |
 8042958:	431a      	orrs	r2, r3
 804295a:	687b      	ldr	r3, [r7, #4]
 804295c:	681b      	ldr	r3, [r3, #0]
 804295e:	430a      	orrs	r2, r1
 8042960:	605a      	str	r2, [r3, #4]

  /* Enable DFSDM channel */
  hdfsdm_channel->Instance->CHCFGR1 |= DFSDM_CHCFGR1_CHEN;
 8042962:	687b      	ldr	r3, [r7, #4]
 8042964:	681b      	ldr	r3, [r3, #0]
 8042966:	681a      	ldr	r2, [r3, #0]
 8042968:	687b      	ldr	r3, [r7, #4]
 804296a:	681b      	ldr	r3, [r3, #0]
 804296c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8042970:	601a      	str	r2, [r3, #0]

  /* Set DFSDM Channel to ready state */
  hdfsdm_channel->State = HAL_DFSDM_CHANNEL_STATE_READY;
 8042972:	687b      	ldr	r3, [r7, #4]
 8042974:	2201      	movs	r2, #1
 8042976:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Store channel handle in DFSDM channel handle table */
  a_dfsdm1ChannelHandle[DFSDM_GetChannelFromInstance(hdfsdm_channel->Instance)] = hdfsdm_channel;
 804297a:	687b      	ldr	r3, [r7, #4]
 804297c:	681b      	ldr	r3, [r3, #0]
 804297e:	4618      	mov	r0, r3
 8042980:	f000 f810 	bl	80429a4 <DFSDM_GetChannelFromInstance>
 8042984:	4602      	mov	r2, r0
 8042986:	4904      	ldr	r1, [pc, #16]	; (8042998 <HAL_DFSDM_ChannelInit+0x174>)
 8042988:	687b      	ldr	r3, [r7, #4]
 804298a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]

  return HAL_OK;
 804298e:	2300      	movs	r3, #0
}
 8042990:	4618      	mov	r0, r3
 8042992:	3708      	adds	r7, #8
 8042994:	46bd      	mov	sp, r7
 8042996:	bd80      	pop	{r7, pc}
 8042998:	200187ec 	.word	0x200187ec
 804299c:	200187e8 	.word	0x200187e8
 80429a0:	40016000 	.word	0x40016000

080429a4 <DFSDM_GetChannelFromInstance>:
  * @brief  This function allows to get the channel number from channel instance.
  * @param  Instance DFSDM channel instance.
  * @retval Channel number.
  */
static uint32_t DFSDM_GetChannelFromInstance(const DFSDM_Channel_TypeDef *Instance)
{
 80429a4:	b480      	push	{r7}
 80429a6:	b085      	sub	sp, #20
 80429a8:	af00      	add	r7, sp, #0
 80429aa:	6078      	str	r0, [r7, #4]
  uint32_t channel;

  /* Get channel from instance */
  if (Instance == DFSDM1_Channel0)
 80429ac:	687b      	ldr	r3, [r7, #4]
 80429ae:	4a0e      	ldr	r2, [pc, #56]	; (80429e8 <DFSDM_GetChannelFromInstance+0x44>)
 80429b0:	4293      	cmp	r3, r2
 80429b2:	d102      	bne.n	80429ba <DFSDM_GetChannelFromInstance+0x16>
  {
    channel = 0;
 80429b4:	2300      	movs	r3, #0
 80429b6:	60fb      	str	r3, [r7, #12]
 80429b8:	e00f      	b.n	80429da <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel1)
 80429ba:	687b      	ldr	r3, [r7, #4]
 80429bc:	4a0b      	ldr	r2, [pc, #44]	; (80429ec <DFSDM_GetChannelFromInstance+0x48>)
 80429be:	4293      	cmp	r3, r2
 80429c0:	d102      	bne.n	80429c8 <DFSDM_GetChannelFromInstance+0x24>
  {
    channel = 1;
 80429c2:	2301      	movs	r3, #1
 80429c4:	60fb      	str	r3, [r7, #12]
 80429c6:	e008      	b.n	80429da <DFSDM_GetChannelFromInstance+0x36>
  }
  else if (Instance == DFSDM1_Channel2)
 80429c8:	687b      	ldr	r3, [r7, #4]
 80429ca:	4a09      	ldr	r2, [pc, #36]	; (80429f0 <DFSDM_GetChannelFromInstance+0x4c>)
 80429cc:	4293      	cmp	r3, r2
 80429ce:	d102      	bne.n	80429d6 <DFSDM_GetChannelFromInstance+0x32>
  {
    channel = 2;
 80429d0:	2302      	movs	r3, #2
 80429d2:	60fb      	str	r3, [r7, #12]
 80429d4:	e001      	b.n	80429da <DFSDM_GetChannelFromInstance+0x36>
  }
  else /* DFSDM1_Channel3 */
  {
    channel = 3;
 80429d6:	2303      	movs	r3, #3
 80429d8:	60fb      	str	r3, [r7, #12]
  }

  return channel;
 80429da:	68fb      	ldr	r3, [r7, #12]
}
 80429dc:	4618      	mov	r0, r3
 80429de:	3714      	adds	r7, #20
 80429e0:	46bd      	mov	sp, r7
 80429e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80429e6:	4770      	bx	lr
 80429e8:	40016000 	.word	0x40016000
 80429ec:	40016020 	.word	0x40016020
 80429f0:	40016040 	.word	0x40016040

080429f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80429f4:	b480      	push	{r7}
 80429f6:	b087      	sub	sp, #28
 80429f8:	af00      	add	r7, sp, #0
 80429fa:	6078      	str	r0, [r7, #4]
 80429fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 80429fe:	2300      	movs	r3, #0
 8042a00:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8042a02:	e158      	b.n	8042cb6 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8042a04:	683b      	ldr	r3, [r7, #0]
 8042a06:	681a      	ldr	r2, [r3, #0]
 8042a08:	2101      	movs	r1, #1
 8042a0a:	697b      	ldr	r3, [r7, #20]
 8042a0c:	fa01 f303 	lsl.w	r3, r1, r3
 8042a10:	4013      	ands	r3, r2
 8042a12:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8042a14:	68fb      	ldr	r3, [r7, #12]
 8042a16:	2b00      	cmp	r3, #0
 8042a18:	f000 814a 	beq.w	8042cb0 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8042a1c:	683b      	ldr	r3, [r7, #0]
 8042a1e:	685b      	ldr	r3, [r3, #4]
 8042a20:	f003 0303 	and.w	r3, r3, #3
 8042a24:	2b01      	cmp	r3, #1
 8042a26:	d005      	beq.n	8042a34 <HAL_GPIO_Init+0x40>
 8042a28:	683b      	ldr	r3, [r7, #0]
 8042a2a:	685b      	ldr	r3, [r3, #4]
 8042a2c:	f003 0303 	and.w	r3, r3, #3
 8042a30:	2b02      	cmp	r3, #2
 8042a32:	d130      	bne.n	8042a96 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8042a34:	687b      	ldr	r3, [r7, #4]
 8042a36:	689b      	ldr	r3, [r3, #8]
 8042a38:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8042a3a:	697b      	ldr	r3, [r7, #20]
 8042a3c:	005b      	lsls	r3, r3, #1
 8042a3e:	2203      	movs	r2, #3
 8042a40:	fa02 f303 	lsl.w	r3, r2, r3
 8042a44:	43db      	mvns	r3, r3
 8042a46:	693a      	ldr	r2, [r7, #16]
 8042a48:	4013      	ands	r3, r2
 8042a4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8042a4c:	683b      	ldr	r3, [r7, #0]
 8042a4e:	68da      	ldr	r2, [r3, #12]
 8042a50:	697b      	ldr	r3, [r7, #20]
 8042a52:	005b      	lsls	r3, r3, #1
 8042a54:	fa02 f303 	lsl.w	r3, r2, r3
 8042a58:	693a      	ldr	r2, [r7, #16]
 8042a5a:	4313      	orrs	r3, r2
 8042a5c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8042a5e:	687b      	ldr	r3, [r7, #4]
 8042a60:	693a      	ldr	r2, [r7, #16]
 8042a62:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8042a64:	687b      	ldr	r3, [r7, #4]
 8042a66:	685b      	ldr	r3, [r3, #4]
 8042a68:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8042a6a:	2201      	movs	r2, #1
 8042a6c:	697b      	ldr	r3, [r7, #20]
 8042a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8042a72:	43db      	mvns	r3, r3
 8042a74:	693a      	ldr	r2, [r7, #16]
 8042a76:	4013      	ands	r3, r2
 8042a78:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8042a7a:	683b      	ldr	r3, [r7, #0]
 8042a7c:	685b      	ldr	r3, [r3, #4]
 8042a7e:	091b      	lsrs	r3, r3, #4
 8042a80:	f003 0201 	and.w	r2, r3, #1
 8042a84:	697b      	ldr	r3, [r7, #20]
 8042a86:	fa02 f303 	lsl.w	r3, r2, r3
 8042a8a:	693a      	ldr	r2, [r7, #16]
 8042a8c:	4313      	orrs	r3, r2
 8042a8e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8042a90:	687b      	ldr	r3, [r7, #4]
 8042a92:	693a      	ldr	r2, [r7, #16]
 8042a94:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8042a96:	683b      	ldr	r3, [r7, #0]
 8042a98:	685b      	ldr	r3, [r3, #4]
 8042a9a:	f003 0303 	and.w	r3, r3, #3
 8042a9e:	2b03      	cmp	r3, #3
 8042aa0:	d017      	beq.n	8042ad2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8042aa2:	687b      	ldr	r3, [r7, #4]
 8042aa4:	68db      	ldr	r3, [r3, #12]
 8042aa6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8042aa8:	697b      	ldr	r3, [r7, #20]
 8042aaa:	005b      	lsls	r3, r3, #1
 8042aac:	2203      	movs	r2, #3
 8042aae:	fa02 f303 	lsl.w	r3, r2, r3
 8042ab2:	43db      	mvns	r3, r3
 8042ab4:	693a      	ldr	r2, [r7, #16]
 8042ab6:	4013      	ands	r3, r2
 8042ab8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8042aba:	683b      	ldr	r3, [r7, #0]
 8042abc:	689a      	ldr	r2, [r3, #8]
 8042abe:	697b      	ldr	r3, [r7, #20]
 8042ac0:	005b      	lsls	r3, r3, #1
 8042ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8042ac6:	693a      	ldr	r2, [r7, #16]
 8042ac8:	4313      	orrs	r3, r2
 8042aca:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8042acc:	687b      	ldr	r3, [r7, #4]
 8042ace:	693a      	ldr	r2, [r7, #16]
 8042ad0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8042ad2:	683b      	ldr	r3, [r7, #0]
 8042ad4:	685b      	ldr	r3, [r3, #4]
 8042ad6:	f003 0303 	and.w	r3, r3, #3
 8042ada:	2b02      	cmp	r3, #2
 8042adc:	d123      	bne.n	8042b26 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8042ade:	697b      	ldr	r3, [r7, #20]
 8042ae0:	08da      	lsrs	r2, r3, #3
 8042ae2:	687b      	ldr	r3, [r7, #4]
 8042ae4:	3208      	adds	r2, #8
 8042ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8042aea:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8042aec:	697b      	ldr	r3, [r7, #20]
 8042aee:	f003 0307 	and.w	r3, r3, #7
 8042af2:	009b      	lsls	r3, r3, #2
 8042af4:	220f      	movs	r2, #15
 8042af6:	fa02 f303 	lsl.w	r3, r2, r3
 8042afa:	43db      	mvns	r3, r3
 8042afc:	693a      	ldr	r2, [r7, #16]
 8042afe:	4013      	ands	r3, r2
 8042b00:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8042b02:	683b      	ldr	r3, [r7, #0]
 8042b04:	691a      	ldr	r2, [r3, #16]
 8042b06:	697b      	ldr	r3, [r7, #20]
 8042b08:	f003 0307 	and.w	r3, r3, #7
 8042b0c:	009b      	lsls	r3, r3, #2
 8042b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8042b12:	693a      	ldr	r2, [r7, #16]
 8042b14:	4313      	orrs	r3, r2
 8042b16:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8042b18:	697b      	ldr	r3, [r7, #20]
 8042b1a:	08da      	lsrs	r2, r3, #3
 8042b1c:	687b      	ldr	r3, [r7, #4]
 8042b1e:	3208      	adds	r2, #8
 8042b20:	6939      	ldr	r1, [r7, #16]
 8042b22:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8042b26:	687b      	ldr	r3, [r7, #4]
 8042b28:	681b      	ldr	r3, [r3, #0]
 8042b2a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8042b2c:	697b      	ldr	r3, [r7, #20]
 8042b2e:	005b      	lsls	r3, r3, #1
 8042b30:	2203      	movs	r2, #3
 8042b32:	fa02 f303 	lsl.w	r3, r2, r3
 8042b36:	43db      	mvns	r3, r3
 8042b38:	693a      	ldr	r2, [r7, #16]
 8042b3a:	4013      	ands	r3, r2
 8042b3c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8042b3e:	683b      	ldr	r3, [r7, #0]
 8042b40:	685b      	ldr	r3, [r3, #4]
 8042b42:	f003 0203 	and.w	r2, r3, #3
 8042b46:	697b      	ldr	r3, [r7, #20]
 8042b48:	005b      	lsls	r3, r3, #1
 8042b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8042b4e:	693a      	ldr	r2, [r7, #16]
 8042b50:	4313      	orrs	r3, r2
 8042b52:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8042b54:	687b      	ldr	r3, [r7, #4]
 8042b56:	693a      	ldr	r2, [r7, #16]
 8042b58:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8042b5a:	683b      	ldr	r3, [r7, #0]
 8042b5c:	685b      	ldr	r3, [r3, #4]
 8042b5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8042b62:	2b00      	cmp	r3, #0
 8042b64:	f000 80a4 	beq.w	8042cb0 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8042b68:	4a5a      	ldr	r2, [pc, #360]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042b6a:	697b      	ldr	r3, [r7, #20]
 8042b6c:	089b      	lsrs	r3, r3, #2
 8042b6e:	3318      	adds	r3, #24
 8042b70:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8042b74:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8042b76:	697b      	ldr	r3, [r7, #20]
 8042b78:	f003 0303 	and.w	r3, r3, #3
 8042b7c:	00db      	lsls	r3, r3, #3
 8042b7e:	220f      	movs	r2, #15
 8042b80:	fa02 f303 	lsl.w	r3, r2, r3
 8042b84:	43db      	mvns	r3, r3
 8042b86:	693a      	ldr	r2, [r7, #16]
 8042b88:	4013      	ands	r3, r2
 8042b8a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8042b8c:	687b      	ldr	r3, [r7, #4]
 8042b8e:	4a52      	ldr	r2, [pc, #328]	; (8042cd8 <HAL_GPIO_Init+0x2e4>)
 8042b90:	4293      	cmp	r3, r2
 8042b92:	d025      	beq.n	8042be0 <HAL_GPIO_Init+0x1ec>
 8042b94:	687b      	ldr	r3, [r7, #4]
 8042b96:	4a51      	ldr	r2, [pc, #324]	; (8042cdc <HAL_GPIO_Init+0x2e8>)
 8042b98:	4293      	cmp	r3, r2
 8042b9a:	d01f      	beq.n	8042bdc <HAL_GPIO_Init+0x1e8>
 8042b9c:	687b      	ldr	r3, [r7, #4]
 8042b9e:	4a50      	ldr	r2, [pc, #320]	; (8042ce0 <HAL_GPIO_Init+0x2ec>)
 8042ba0:	4293      	cmp	r3, r2
 8042ba2:	d019      	beq.n	8042bd8 <HAL_GPIO_Init+0x1e4>
 8042ba4:	687b      	ldr	r3, [r7, #4]
 8042ba6:	4a4f      	ldr	r2, [pc, #316]	; (8042ce4 <HAL_GPIO_Init+0x2f0>)
 8042ba8:	4293      	cmp	r3, r2
 8042baa:	d013      	beq.n	8042bd4 <HAL_GPIO_Init+0x1e0>
 8042bac:	687b      	ldr	r3, [r7, #4]
 8042bae:	4a4e      	ldr	r2, [pc, #312]	; (8042ce8 <HAL_GPIO_Init+0x2f4>)
 8042bb0:	4293      	cmp	r3, r2
 8042bb2:	d00d      	beq.n	8042bd0 <HAL_GPIO_Init+0x1dc>
 8042bb4:	687b      	ldr	r3, [r7, #4]
 8042bb6:	4a4d      	ldr	r2, [pc, #308]	; (8042cec <HAL_GPIO_Init+0x2f8>)
 8042bb8:	4293      	cmp	r3, r2
 8042bba:	d007      	beq.n	8042bcc <HAL_GPIO_Init+0x1d8>
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	4a4c      	ldr	r2, [pc, #304]	; (8042cf0 <HAL_GPIO_Init+0x2fc>)
 8042bc0:	4293      	cmp	r3, r2
 8042bc2:	d101      	bne.n	8042bc8 <HAL_GPIO_Init+0x1d4>
 8042bc4:	2306      	movs	r3, #6
 8042bc6:	e00c      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bc8:	2307      	movs	r3, #7
 8042bca:	e00a      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bcc:	2305      	movs	r3, #5
 8042bce:	e008      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bd0:	2304      	movs	r3, #4
 8042bd2:	e006      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bd4:	2303      	movs	r3, #3
 8042bd6:	e004      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bd8:	2302      	movs	r3, #2
 8042bda:	e002      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042bdc:	2301      	movs	r3, #1
 8042bde:	e000      	b.n	8042be2 <HAL_GPIO_Init+0x1ee>
 8042be0:	2300      	movs	r3, #0
 8042be2:	697a      	ldr	r2, [r7, #20]
 8042be4:	f002 0203 	and.w	r2, r2, #3
 8042be8:	00d2      	lsls	r2, r2, #3
 8042bea:	4093      	lsls	r3, r2
 8042bec:	693a      	ldr	r2, [r7, #16]
 8042bee:	4313      	orrs	r3, r2
 8042bf0:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8042bf2:	4938      	ldr	r1, [pc, #224]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042bf4:	697b      	ldr	r3, [r7, #20]
 8042bf6:	089b      	lsrs	r3, r3, #2
 8042bf8:	3318      	adds	r3, #24
 8042bfa:	693a      	ldr	r2, [r7, #16]
 8042bfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8042c00:	4b34      	ldr	r3, [pc, #208]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c02:	681b      	ldr	r3, [r3, #0]
 8042c04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8042c06:	68fb      	ldr	r3, [r7, #12]
 8042c08:	43db      	mvns	r3, r3
 8042c0a:	693a      	ldr	r2, [r7, #16]
 8042c0c:	4013      	ands	r3, r2
 8042c0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8042c10:	683b      	ldr	r3, [r7, #0]
 8042c12:	685b      	ldr	r3, [r3, #4]
 8042c14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8042c18:	2b00      	cmp	r3, #0
 8042c1a:	d003      	beq.n	8042c24 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8042c1c:	693a      	ldr	r2, [r7, #16]
 8042c1e:	68fb      	ldr	r3, [r7, #12]
 8042c20:	4313      	orrs	r3, r2
 8042c22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8042c24:	4a2b      	ldr	r2, [pc, #172]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c26:	693b      	ldr	r3, [r7, #16]
 8042c28:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8042c2a:	4b2a      	ldr	r3, [pc, #168]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c2c:	685b      	ldr	r3, [r3, #4]
 8042c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8042c30:	68fb      	ldr	r3, [r7, #12]
 8042c32:	43db      	mvns	r3, r3
 8042c34:	693a      	ldr	r2, [r7, #16]
 8042c36:	4013      	ands	r3, r2
 8042c38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8042c3a:	683b      	ldr	r3, [r7, #0]
 8042c3c:	685b      	ldr	r3, [r3, #4]
 8042c3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8042c42:	2b00      	cmp	r3, #0
 8042c44:	d003      	beq.n	8042c4e <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8042c46:	693a      	ldr	r2, [r7, #16]
 8042c48:	68fb      	ldr	r3, [r7, #12]
 8042c4a:	4313      	orrs	r3, r2
 8042c4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8042c4e:	4a21      	ldr	r2, [pc, #132]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c50:	693b      	ldr	r3, [r7, #16]
 8042c52:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8042c54:	4b1f      	ldr	r3, [pc, #124]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8042c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8042c5c:	68fb      	ldr	r3, [r7, #12]
 8042c5e:	43db      	mvns	r3, r3
 8042c60:	693a      	ldr	r2, [r7, #16]
 8042c62:	4013      	ands	r3, r2
 8042c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8042c66:	683b      	ldr	r3, [r7, #0]
 8042c68:	685b      	ldr	r3, [r3, #4]
 8042c6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042c6e:	2b00      	cmp	r3, #0
 8042c70:	d003      	beq.n	8042c7a <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8042c72:	693a      	ldr	r2, [r7, #16]
 8042c74:	68fb      	ldr	r3, [r7, #12]
 8042c76:	4313      	orrs	r3, r2
 8042c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8042c7a:	4a16      	ldr	r2, [pc, #88]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c7c:	693b      	ldr	r3, [r7, #16]
 8042c7e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8042c82:	4b14      	ldr	r3, [pc, #80]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042c84:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042c88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8042c8a:	68fb      	ldr	r3, [r7, #12]
 8042c8c:	43db      	mvns	r3, r3
 8042c8e:	693a      	ldr	r2, [r7, #16]
 8042c90:	4013      	ands	r3, r2
 8042c92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8042c94:	683b      	ldr	r3, [r7, #0]
 8042c96:	685b      	ldr	r3, [r3, #4]
 8042c98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8042c9c:	2b00      	cmp	r3, #0
 8042c9e:	d003      	beq.n	8042ca8 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8042ca0:	693a      	ldr	r2, [r7, #16]
 8042ca2:	68fb      	ldr	r3, [r7, #12]
 8042ca4:	4313      	orrs	r3, r2
 8042ca6:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8042ca8:	4a0a      	ldr	r2, [pc, #40]	; (8042cd4 <HAL_GPIO_Init+0x2e0>)
 8042caa:	693b      	ldr	r3, [r7, #16]
 8042cac:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8042cb0:	697b      	ldr	r3, [r7, #20]
 8042cb2:	3301      	adds	r3, #1
 8042cb4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8042cb6:	683b      	ldr	r3, [r7, #0]
 8042cb8:	681a      	ldr	r2, [r3, #0]
 8042cba:	697b      	ldr	r3, [r7, #20]
 8042cbc:	fa22 f303 	lsr.w	r3, r2, r3
 8042cc0:	2b00      	cmp	r3, #0
 8042cc2:	f47f ae9f 	bne.w	8042a04 <HAL_GPIO_Init+0x10>
  }
}
 8042cc6:	bf00      	nop
 8042cc8:	bf00      	nop
 8042cca:	371c      	adds	r7, #28
 8042ccc:	46bd      	mov	sp, r7
 8042cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042cd2:	4770      	bx	lr
 8042cd4:	4002f400 	.word	0x4002f400
 8042cd8:	42020000 	.word	0x42020000
 8042cdc:	42020400 	.word	0x42020400
 8042ce0:	42020800 	.word	0x42020800
 8042ce4:	42020c00 	.word	0x42020c00
 8042ce8:	42021000 	.word	0x42021000
 8042cec:	42021400 	.word	0x42021400
 8042cf0:	42021800 	.word	0x42021800

08042cf4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8042cf4:	b480      	push	{r7}
 8042cf6:	b083      	sub	sp, #12
 8042cf8:	af00      	add	r7, sp, #0
 8042cfa:	6078      	str	r0, [r7, #4]
 8042cfc:	460b      	mov	r3, r1
 8042cfe:	807b      	strh	r3, [r7, #2]
 8042d00:	4613      	mov	r3, r2
 8042d02:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8042d04:	787b      	ldrb	r3, [r7, #1]
 8042d06:	2b00      	cmp	r3, #0
 8042d08:	d003      	beq.n	8042d12 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8042d0a:	887a      	ldrh	r2, [r7, #2]
 8042d0c:	687b      	ldr	r3, [r7, #4]
 8042d0e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8042d10:	e002      	b.n	8042d18 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8042d12:	887a      	ldrh	r2, [r7, #2]
 8042d14:	687b      	ldr	r3, [r7, #4]
 8042d16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8042d18:	bf00      	nop
 8042d1a:	370c      	adds	r7, #12
 8042d1c:	46bd      	mov	sp, r7
 8042d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042d22:	4770      	bx	lr

08042d24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8042d24:	b580      	push	{r7, lr}
 8042d26:	b082      	sub	sp, #8
 8042d28:	af00      	add	r7, sp, #0
 8042d2a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8042d2c:	687b      	ldr	r3, [r7, #4]
 8042d2e:	2b00      	cmp	r3, #0
 8042d30:	d101      	bne.n	8042d36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8042d32:	2301      	movs	r3, #1
 8042d34:	e081      	b.n	8042e3a <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8042d36:	687b      	ldr	r3, [r7, #4]
 8042d38:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8042d3c:	b2db      	uxtb	r3, r3
 8042d3e:	2b00      	cmp	r3, #0
 8042d40:	d106      	bne.n	8042d50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8042d42:	687b      	ldr	r3, [r7, #4]
 8042d44:	2200      	movs	r2, #0
 8042d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8042d4a:	6878      	ldr	r0, [r7, #4]
 8042d4c:	f7fe f8ae 	bl	8040eac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8042d50:	687b      	ldr	r3, [r7, #4]
 8042d52:	2224      	movs	r2, #36	; 0x24
 8042d54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8042d58:	687b      	ldr	r3, [r7, #4]
 8042d5a:	681b      	ldr	r3, [r3, #0]
 8042d5c:	681a      	ldr	r2, [r3, #0]
 8042d5e:	687b      	ldr	r3, [r7, #4]
 8042d60:	681b      	ldr	r3, [r3, #0]
 8042d62:	f022 0201 	bic.w	r2, r2, #1
 8042d66:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8042d68:	687b      	ldr	r3, [r7, #4]
 8042d6a:	685a      	ldr	r2, [r3, #4]
 8042d6c:	687b      	ldr	r3, [r7, #4]
 8042d6e:	681b      	ldr	r3, [r3, #0]
 8042d70:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8042d74:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8042d76:	687b      	ldr	r3, [r7, #4]
 8042d78:	681b      	ldr	r3, [r3, #0]
 8042d7a:	689a      	ldr	r2, [r3, #8]
 8042d7c:	687b      	ldr	r3, [r7, #4]
 8042d7e:	681b      	ldr	r3, [r3, #0]
 8042d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8042d84:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8042d86:	687b      	ldr	r3, [r7, #4]
 8042d88:	68db      	ldr	r3, [r3, #12]
 8042d8a:	2b01      	cmp	r3, #1
 8042d8c:	d107      	bne.n	8042d9e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8042d8e:	687b      	ldr	r3, [r7, #4]
 8042d90:	689a      	ldr	r2, [r3, #8]
 8042d92:	687b      	ldr	r3, [r7, #4]
 8042d94:	681b      	ldr	r3, [r3, #0]
 8042d96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8042d9a:	609a      	str	r2, [r3, #8]
 8042d9c:	e006      	b.n	8042dac <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8042d9e:	687b      	ldr	r3, [r7, #4]
 8042da0:	689a      	ldr	r2, [r3, #8]
 8042da2:	687b      	ldr	r3, [r7, #4]
 8042da4:	681b      	ldr	r3, [r3, #0]
 8042da6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8042daa:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8042dac:	687b      	ldr	r3, [r7, #4]
 8042dae:	68db      	ldr	r3, [r3, #12]
 8042db0:	2b02      	cmp	r3, #2
 8042db2:	d104      	bne.n	8042dbe <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8042db4:	687b      	ldr	r3, [r7, #4]
 8042db6:	681b      	ldr	r3, [r3, #0]
 8042db8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8042dbc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8042dbe:	687b      	ldr	r3, [r7, #4]
 8042dc0:	681b      	ldr	r3, [r3, #0]
 8042dc2:	685b      	ldr	r3, [r3, #4]
 8042dc4:	687a      	ldr	r2, [r7, #4]
 8042dc6:	6812      	ldr	r2, [r2, #0]
 8042dc8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8042dcc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8042dd0:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8042dd2:	687b      	ldr	r3, [r7, #4]
 8042dd4:	681b      	ldr	r3, [r3, #0]
 8042dd6:	68da      	ldr	r2, [r3, #12]
 8042dd8:	687b      	ldr	r3, [r7, #4]
 8042dda:	681b      	ldr	r3, [r3, #0]
 8042ddc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8042de0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8042de2:	687b      	ldr	r3, [r7, #4]
 8042de4:	691a      	ldr	r2, [r3, #16]
 8042de6:	687b      	ldr	r3, [r7, #4]
 8042de8:	695b      	ldr	r3, [r3, #20]
 8042dea:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8042dee:	687b      	ldr	r3, [r7, #4]
 8042df0:	699b      	ldr	r3, [r3, #24]
 8042df2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8042df4:	687b      	ldr	r3, [r7, #4]
 8042df6:	681b      	ldr	r3, [r3, #0]
 8042df8:	430a      	orrs	r2, r1
 8042dfa:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8042dfc:	687b      	ldr	r3, [r7, #4]
 8042dfe:	69d9      	ldr	r1, [r3, #28]
 8042e00:	687b      	ldr	r3, [r7, #4]
 8042e02:	6a1a      	ldr	r2, [r3, #32]
 8042e04:	687b      	ldr	r3, [r7, #4]
 8042e06:	681b      	ldr	r3, [r3, #0]
 8042e08:	430a      	orrs	r2, r1
 8042e0a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8042e0c:	687b      	ldr	r3, [r7, #4]
 8042e0e:	681b      	ldr	r3, [r3, #0]
 8042e10:	681a      	ldr	r2, [r3, #0]
 8042e12:	687b      	ldr	r3, [r7, #4]
 8042e14:	681b      	ldr	r3, [r3, #0]
 8042e16:	f042 0201 	orr.w	r2, r2, #1
 8042e1a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8042e1c:	687b      	ldr	r3, [r7, #4]
 8042e1e:	2200      	movs	r2, #0
 8042e20:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8042e22:	687b      	ldr	r3, [r7, #4]
 8042e24:	2220      	movs	r2, #32
 8042e26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8042e2a:	687b      	ldr	r3, [r7, #4]
 8042e2c:	2200      	movs	r2, #0
 8042e2e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8042e30:	687b      	ldr	r3, [r7, #4]
 8042e32:	2200      	movs	r2, #0
 8042e34:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8042e38:	2300      	movs	r3, #0
}
 8042e3a:	4618      	mov	r0, r3
 8042e3c:	3708      	adds	r7, #8
 8042e3e:	46bd      	mov	sp, r7
 8042e40:	bd80      	pop	{r7, pc}

08042e42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8042e42:	b480      	push	{r7}
 8042e44:	b083      	sub	sp, #12
 8042e46:	af00      	add	r7, sp, #0
 8042e48:	6078      	str	r0, [r7, #4]
 8042e4a:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8042e4c:	687b      	ldr	r3, [r7, #4]
 8042e4e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8042e52:	b2db      	uxtb	r3, r3
 8042e54:	2b20      	cmp	r3, #32
 8042e56:	d138      	bne.n	8042eca <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8042e58:	687b      	ldr	r3, [r7, #4]
 8042e5a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8042e5e:	2b01      	cmp	r3, #1
 8042e60:	d101      	bne.n	8042e66 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8042e62:	2302      	movs	r3, #2
 8042e64:	e032      	b.n	8042ecc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8042e66:	687b      	ldr	r3, [r7, #4]
 8042e68:	2201      	movs	r2, #1
 8042e6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8042e6e:	687b      	ldr	r3, [r7, #4]
 8042e70:	2224      	movs	r2, #36	; 0x24
 8042e72:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8042e76:	687b      	ldr	r3, [r7, #4]
 8042e78:	681b      	ldr	r3, [r3, #0]
 8042e7a:	681a      	ldr	r2, [r3, #0]
 8042e7c:	687b      	ldr	r3, [r7, #4]
 8042e7e:	681b      	ldr	r3, [r3, #0]
 8042e80:	f022 0201 	bic.w	r2, r2, #1
 8042e84:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8042e86:	687b      	ldr	r3, [r7, #4]
 8042e88:	681b      	ldr	r3, [r3, #0]
 8042e8a:	681a      	ldr	r2, [r3, #0]
 8042e8c:	687b      	ldr	r3, [r7, #4]
 8042e8e:	681b      	ldr	r3, [r3, #0]
 8042e90:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8042e94:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8042e96:	687b      	ldr	r3, [r7, #4]
 8042e98:	681b      	ldr	r3, [r3, #0]
 8042e9a:	6819      	ldr	r1, [r3, #0]
 8042e9c:	687b      	ldr	r3, [r7, #4]
 8042e9e:	681b      	ldr	r3, [r3, #0]
 8042ea0:	683a      	ldr	r2, [r7, #0]
 8042ea2:	430a      	orrs	r2, r1
 8042ea4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8042ea6:	687b      	ldr	r3, [r7, #4]
 8042ea8:	681b      	ldr	r3, [r3, #0]
 8042eaa:	681a      	ldr	r2, [r3, #0]
 8042eac:	687b      	ldr	r3, [r7, #4]
 8042eae:	681b      	ldr	r3, [r3, #0]
 8042eb0:	f042 0201 	orr.w	r2, r2, #1
 8042eb4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8042eb6:	687b      	ldr	r3, [r7, #4]
 8042eb8:	2220      	movs	r2, #32
 8042eba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8042ebe:	687b      	ldr	r3, [r7, #4]
 8042ec0:	2200      	movs	r2, #0
 8042ec2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8042ec6:	2300      	movs	r3, #0
 8042ec8:	e000      	b.n	8042ecc <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8042eca:	2302      	movs	r3, #2
  }
}
 8042ecc:	4618      	mov	r0, r3
 8042ece:	370c      	adds	r7, #12
 8042ed0:	46bd      	mov	sp, r7
 8042ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042ed6:	4770      	bx	lr

08042ed8 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8042ed8:	b480      	push	{r7}
 8042eda:	b085      	sub	sp, #20
 8042edc:	af00      	add	r7, sp, #0
 8042ede:	6078      	str	r0, [r7, #4]
 8042ee0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8042ee2:	687b      	ldr	r3, [r7, #4]
 8042ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8042ee8:	b2db      	uxtb	r3, r3
 8042eea:	2b20      	cmp	r3, #32
 8042eec:	d139      	bne.n	8042f62 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8042eee:	687b      	ldr	r3, [r7, #4]
 8042ef0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8042ef4:	2b01      	cmp	r3, #1
 8042ef6:	d101      	bne.n	8042efc <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8042ef8:	2302      	movs	r3, #2
 8042efa:	e033      	b.n	8042f64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8042efc:	687b      	ldr	r3, [r7, #4]
 8042efe:	2201      	movs	r2, #1
 8042f00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8042f04:	687b      	ldr	r3, [r7, #4]
 8042f06:	2224      	movs	r2, #36	; 0x24
 8042f08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8042f0c:	687b      	ldr	r3, [r7, #4]
 8042f0e:	681b      	ldr	r3, [r3, #0]
 8042f10:	681a      	ldr	r2, [r3, #0]
 8042f12:	687b      	ldr	r3, [r7, #4]
 8042f14:	681b      	ldr	r3, [r3, #0]
 8042f16:	f022 0201 	bic.w	r2, r2, #1
 8042f1a:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8042f1c:	687b      	ldr	r3, [r7, #4]
 8042f1e:	681b      	ldr	r3, [r3, #0]
 8042f20:	681b      	ldr	r3, [r3, #0]
 8042f22:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8042f24:	68fb      	ldr	r3, [r7, #12]
 8042f26:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8042f2a:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8042f2c:	683b      	ldr	r3, [r7, #0]
 8042f2e:	021b      	lsls	r3, r3, #8
 8042f30:	68fa      	ldr	r2, [r7, #12]
 8042f32:	4313      	orrs	r3, r2
 8042f34:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8042f36:	687b      	ldr	r3, [r7, #4]
 8042f38:	681b      	ldr	r3, [r3, #0]
 8042f3a:	68fa      	ldr	r2, [r7, #12]
 8042f3c:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8042f3e:	687b      	ldr	r3, [r7, #4]
 8042f40:	681b      	ldr	r3, [r3, #0]
 8042f42:	681a      	ldr	r2, [r3, #0]
 8042f44:	687b      	ldr	r3, [r7, #4]
 8042f46:	681b      	ldr	r3, [r3, #0]
 8042f48:	f042 0201 	orr.w	r2, r2, #1
 8042f4c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8042f4e:	687b      	ldr	r3, [r7, #4]
 8042f50:	2220      	movs	r2, #32
 8042f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8042f56:	687b      	ldr	r3, [r7, #4]
 8042f58:	2200      	movs	r2, #0
 8042f5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8042f5e:	2300      	movs	r3, #0
 8042f60:	e000      	b.n	8042f64 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8042f62:	2302      	movs	r3, #2
  }
}
 8042f64:	4618      	mov	r0, r3
 8042f66:	3714      	adds	r7, #20
 8042f68:	46bd      	mov	sp, r7
 8042f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042f6e:	4770      	bx	lr

08042f70 <HAL_OSPI_Init>:
  *         in the OSPI_InitTypeDef and initialize the associated handle.
  * @param  hospi : OSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_OSPI_Init (OSPI_HandleTypeDef *hospi)
{
 8042f70:	b580      	push	{r7, lr}
 8042f72:	b086      	sub	sp, #24
 8042f74:	af02      	add	r7, sp, #8
 8042f76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8042f78:	2300      	movs	r3, #0
 8042f7a:	73fb      	strb	r3, [r7, #15]
  uint32_t tickstart = HAL_GetTick();
 8042f7c:	f7fe fb9e 	bl	80416bc <HAL_GetTick>
 8042f80:	60b8      	str	r0, [r7, #8]

  /* Check the OSPI handle allocation */
  if (hospi == NULL)
 8042f82:	687b      	ldr	r3, [r7, #4]
 8042f84:	2b00      	cmp	r3, #0
 8042f86:	d102      	bne.n	8042f8e <HAL_OSPI_Init+0x1e>
  {
    status = HAL_ERROR;
 8042f88:	2301      	movs	r3, #1
 8042f8a:	73fb      	strb	r3, [r7, #15]
 8042f8c:	e0a2      	b.n	80430d4 <HAL_OSPI_Init+0x164>
    assert_param(IS_OSPI_DHQC           (hospi->Init.DelayHoldQuarterCycle));
    assert_param(IS_OSPI_CS_BOUNDARY    (hospi->Init.ChipSelectBoundary));
    assert_param(IS_OSPI_DLYBYP         (hospi->Init.DelayBlockBypass));

    /* Initialize error code */
    hospi->ErrorCode = HAL_OSPI_ERROR_NONE;
 8042f8e:	687b      	ldr	r3, [r7, #4]
 8042f90:	2200      	movs	r2, #0
 8042f92:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check if the state is the reset state */
    if (hospi->State == HAL_OSPI_STATE_RESET)
 8042f94:	687b      	ldr	r3, [r7, #4]
 8042f96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8042f98:	2b00      	cmp	r3, #0
 8042f9a:	f040 809b 	bne.w	80430d4 <HAL_OSPI_Init+0x164>

      /* Init the low level hardware */
      hospi->MspInitCallback(hospi);
#else
      /* Initialization of the low level hardware */
      HAL_OSPI_MspInit(hospi);
 8042f9e:	6878      	ldr	r0, [r7, #4]
 8042fa0:	f7fd ffe2 	bl	8040f68 <HAL_OSPI_MspInit>
#endif /* defined (USE_HAL_OSPI_REGISTER_CALLBACKS) && (USE_HAL_OSPI_REGISTER_CALLBACKS == 1U) */

      /* Configure the default timeout for the OSPI memory access */
      (void)HAL_OSPI_SetTimeout(hospi, HAL_OSPI_TIMEOUT_DEFAULT_VALUE);
 8042fa4:	f241 3188 	movw	r1, #5000	; 0x1388
 8042fa8:	6878      	ldr	r0, [r7, #4]
 8042faa:	f000 f89b 	bl	80430e4 <HAL_OSPI_SetTimeout>

      /* Configure memory type, device size, chip select high time, delay block bypass,
         free running clock, clock mode */
      MODIFY_REG(hospi->Instance->DCR1,
 8042fae:	687b      	ldr	r3, [r7, #4]
 8042fb0:	681b      	ldr	r3, [r3, #0]
 8042fb2:	689a      	ldr	r2, [r3, #8]
 8042fb4:	4b4a      	ldr	r3, [pc, #296]	; (80430e0 <HAL_OSPI_Init+0x170>)
 8042fb6:	4013      	ands	r3, r2
 8042fb8:	687a      	ldr	r2, [r7, #4]
 8042fba:	68d1      	ldr	r1, [r2, #12]
 8042fbc:	687a      	ldr	r2, [r7, #4]
 8042fbe:	6912      	ldr	r2, [r2, #16]
 8042fc0:	3a01      	subs	r2, #1
 8042fc2:	0412      	lsls	r2, r2, #16
 8042fc4:	4311      	orrs	r1, r2
 8042fc6:	687a      	ldr	r2, [r7, #4]
 8042fc8:	6952      	ldr	r2, [r2, #20]
 8042fca:	3a01      	subs	r2, #1
 8042fcc:	0212      	lsls	r2, r2, #8
 8042fce:	4311      	orrs	r1, r2
 8042fd0:	687a      	ldr	r2, [r7, #4]
 8042fd2:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8042fd4:	4311      	orrs	r1, r2
 8042fd6:	687a      	ldr	r2, [r7, #4]
 8042fd8:	69d2      	ldr	r2, [r2, #28]
 8042fda:	4311      	orrs	r1, r2
 8042fdc:	687a      	ldr	r2, [r7, #4]
 8042fde:	6812      	ldr	r2, [r2, #0]
 8042fe0:	430b      	orrs	r3, r1
 8042fe2:	6093      	str	r3, [r2, #8]
                 (hospi->Init.MemoryType | ((hospi->Init.DeviceSize - 1U) << OCTOSPI_DCR1_DEVSIZE_Pos) |
                  ((hospi->Init.ChipSelectHighTime - 1U) << OCTOSPI_DCR1_CSHT_Pos) |
                  hospi->Init.DelayBlockBypass | hospi->Init.ClockMode));

      /* Configure wrap size */
      MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_WRAPSIZE, hospi->Init.WrapSize);
 8042fe4:	687b      	ldr	r3, [r7, #4]
 8042fe6:	681b      	ldr	r3, [r3, #0]
 8042fe8:	68db      	ldr	r3, [r3, #12]
 8042fea:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8042fee:	687b      	ldr	r3, [r7, #4]
 8042ff0:	6a1a      	ldr	r2, [r3, #32]
 8042ff2:	687b      	ldr	r3, [r7, #4]
 8042ff4:	681b      	ldr	r3, [r3, #0]
 8042ff6:	430a      	orrs	r2, r1
 8042ff8:	60da      	str	r2, [r3, #12]

      /* Configure chip select boundary */
      hospi->Instance->DCR3 = (hospi->Init.ChipSelectBoundary << OCTOSPI_DCR3_CSBOUND_Pos);
 8042ffa:	687b      	ldr	r3, [r7, #4]
 8042ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8042ffe:	687b      	ldr	r3, [r7, #4]
 8043000:	681b      	ldr	r3, [r3, #0]
 8043002:	0412      	lsls	r2, r2, #16
 8043004:	611a      	str	r2, [r3, #16]

      /* Configure refresh */
      hospi->Instance->DCR4 = hospi->Init.Refresh;
 8043006:	687b      	ldr	r3, [r7, #4]
 8043008:	681b      	ldr	r3, [r3, #0]
 804300a:	687a      	ldr	r2, [r7, #4]
 804300c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 804300e:	615a      	str	r2, [r3, #20]

      /* Configure FIFO threshold */
      MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_FTHRES, ((hospi->Init.FifoThreshold - 1U) << OCTOSPI_CR_FTHRES_Pos));
 8043010:	687b      	ldr	r3, [r7, #4]
 8043012:	681b      	ldr	r3, [r3, #0]
 8043014:	681b      	ldr	r3, [r3, #0]
 8043016:	f423 51f8 	bic.w	r1, r3, #7936	; 0x1f00
 804301a:	687b      	ldr	r3, [r7, #4]
 804301c:	685b      	ldr	r3, [r3, #4]
 804301e:	3b01      	subs	r3, #1
 8043020:	021a      	lsls	r2, r3, #8
 8043022:	687b      	ldr	r3, [r7, #4]
 8043024:	681b      	ldr	r3, [r3, #0]
 8043026:	430a      	orrs	r2, r1
 8043028:	601a      	str	r2, [r3, #0]

      /* Wait till busy flag is reset */
      status = OSPI_WaitFlagStateUntilTimeout(hospi, HAL_OSPI_FLAG_BUSY, RESET, tickstart, hospi->Timeout);
 804302a:	687b      	ldr	r3, [r7, #4]
 804302c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804302e:	9300      	str	r3, [sp, #0]
 8043030:	68bb      	ldr	r3, [r7, #8]
 8043032:	2200      	movs	r2, #0
 8043034:	2120      	movs	r1, #32
 8043036:	6878      	ldr	r0, [r7, #4]
 8043038:	f000 f863 	bl	8043102 <OSPI_WaitFlagStateUntilTimeout>
 804303c:	4603      	mov	r3, r0
 804303e:	73fb      	strb	r3, [r7, #15]

      if (status == HAL_OK)
 8043040:	7bfb      	ldrb	r3, [r7, #15]
 8043042:	2b00      	cmp	r3, #0
 8043044:	d146      	bne.n	80430d4 <HAL_OSPI_Init+0x164>
      {
        /* Configure clock prescaler */
        MODIFY_REG(hospi->Instance->DCR2, OCTOSPI_DCR2_PRESCALER,
 8043046:	687b      	ldr	r3, [r7, #4]
 8043048:	681b      	ldr	r3, [r3, #0]
 804304a:	68db      	ldr	r3, [r3, #12]
 804304c:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8043050:	687b      	ldr	r3, [r7, #4]
 8043052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043054:	1e5a      	subs	r2, r3, #1
 8043056:	687b      	ldr	r3, [r7, #4]
 8043058:	681b      	ldr	r3, [r3, #0]
 804305a:	430a      	orrs	r2, r1
 804305c:	60da      	str	r2, [r3, #12]
                  ((hospi->Init.ClockPrescaler - 1U) << OCTOSPI_DCR2_PRESCALER_Pos));

        /* Configure Dual Quad mode */
        MODIFY_REG(hospi->Instance->CR, OCTOSPI_CR_DQM, hospi->Init.DualQuad);
 804305e:	687b      	ldr	r3, [r7, #4]
 8043060:	681b      	ldr	r3, [r3, #0]
 8043062:	681b      	ldr	r3, [r3, #0]
 8043064:	f023 0140 	bic.w	r1, r3, #64	; 0x40
 8043068:	687b      	ldr	r3, [r7, #4]
 804306a:	689a      	ldr	r2, [r3, #8]
 804306c:	687b      	ldr	r3, [r7, #4]
 804306e:	681b      	ldr	r3, [r3, #0]
 8043070:	430a      	orrs	r2, r1
 8043072:	601a      	str	r2, [r3, #0]

        /* Configure sample shifting and delay hold quarter cycle */
        MODIFY_REG(hospi->Instance->TCR, (OCTOSPI_TCR_SSHIFT | OCTOSPI_TCR_DHQC),
 8043074:	687b      	ldr	r3, [r7, #4]
 8043076:	681b      	ldr	r3, [r3, #0]
 8043078:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 804307c:	f023 41a0 	bic.w	r1, r3, #1342177280	; 0x50000000
 8043080:	687b      	ldr	r3, [r7, #4]
 8043082:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8043084:	687b      	ldr	r3, [r7, #4]
 8043086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043088:	431a      	orrs	r2, r3
 804308a:	687b      	ldr	r3, [r7, #4]
 804308c:	681b      	ldr	r3, [r3, #0]
 804308e:	430a      	orrs	r2, r1
 8043090:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
                  (hospi->Init.SampleShifting | hospi->Init.DelayHoldQuarterCycle));

        /* Enable OctoSPI */
        __HAL_OSPI_ENABLE(hospi);
 8043094:	687b      	ldr	r3, [r7, #4]
 8043096:	681b      	ldr	r3, [r3, #0]
 8043098:	681a      	ldr	r2, [r3, #0]
 804309a:	687b      	ldr	r3, [r7, #4]
 804309c:	681b      	ldr	r3, [r3, #0]
 804309e:	f042 0201 	orr.w	r2, r2, #1
 80430a2:	601a      	str	r2, [r3, #0]

        /* Enable free running clock if needed : must be done after OSPI enable */
        if (hospi->Init.FreeRunningClock == HAL_OSPI_FREERUNCLK_ENABLE)
 80430a4:	687b      	ldr	r3, [r7, #4]
 80430a6:	699b      	ldr	r3, [r3, #24]
 80430a8:	2b02      	cmp	r3, #2
 80430aa:	d107      	bne.n	80430bc <HAL_OSPI_Init+0x14c>
        {
          SET_BIT(hospi->Instance->DCR1, OCTOSPI_DCR1_FRCK);
 80430ac:	687b      	ldr	r3, [r7, #4]
 80430ae:	681b      	ldr	r3, [r3, #0]
 80430b0:	689a      	ldr	r2, [r3, #8]
 80430b2:	687b      	ldr	r3, [r7, #4]
 80430b4:	681b      	ldr	r3, [r3, #0]
 80430b6:	f042 0202 	orr.w	r2, r2, #2
 80430ba:	609a      	str	r2, [r3, #8]
        }

        /* Initialize the OSPI state */
        if (hospi->Init.MemoryType == HAL_OSPI_MEMTYPE_HYPERBUS)
 80430bc:	687b      	ldr	r3, [r7, #4]
 80430be:	68db      	ldr	r3, [r3, #12]
 80430c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80430c4:	d103      	bne.n	80430ce <HAL_OSPI_Init+0x15e>
        {
          hospi->State = HAL_OSPI_STATE_HYPERBUS_INIT;
 80430c6:	687b      	ldr	r3, [r7, #4]
 80430c8:	2201      	movs	r2, #1
 80430ca:	64da      	str	r2, [r3, #76]	; 0x4c
 80430cc:	e002      	b.n	80430d4 <HAL_OSPI_Init+0x164>
        }
        else
        {
          hospi->State = HAL_OSPI_STATE_READY;
 80430ce:	687b      	ldr	r3, [r7, #4]
 80430d0:	2202      	movs	r2, #2
 80430d2:	64da      	str	r2, [r3, #76]	; 0x4c
      }
    }
  }

  /* Return function status */
  return status;
 80430d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80430d6:	4618      	mov	r0, r3
 80430d8:	3710      	adds	r7, #16
 80430da:	46bd      	mov	sp, r7
 80430dc:	bd80      	pop	{r7, pc}
 80430de:	bf00      	nop
 80430e0:	f8e0f8f4 	.word	0xf8e0f8f4

080430e4 <HAL_OSPI_SetTimeout>:
  * @param  hospi   : OSPI handle.
  * @param  Timeout : Timeout for the memory access.
  * @retval None
  */
HAL_StatusTypeDef HAL_OSPI_SetTimeout(OSPI_HandleTypeDef *hospi, uint32_t Timeout)
{
 80430e4:	b480      	push	{r7}
 80430e6:	b083      	sub	sp, #12
 80430e8:	af00      	add	r7, sp, #0
 80430ea:	6078      	str	r0, [r7, #4]
 80430ec:	6039      	str	r1, [r7, #0]
  hospi->Timeout = Timeout;
 80430ee:	687b      	ldr	r3, [r7, #4]
 80430f0:	683a      	ldr	r2, [r7, #0]
 80430f2:	655a      	str	r2, [r3, #84]	; 0x54
  return HAL_OK;
 80430f4:	2300      	movs	r3, #0
}
 80430f6:	4618      	mov	r0, r3
 80430f8:	370c      	adds	r7, #12
 80430fa:	46bd      	mov	sp, r7
 80430fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043100:	4770      	bx	lr

08043102 <OSPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart : Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef OSPI_WaitFlagStateUntilTimeout(OSPI_HandleTypeDef *hospi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8043102:	b580      	push	{r7, lr}
 8043104:	b084      	sub	sp, #16
 8043106:	af00      	add	r7, sp, #0
 8043108:	60f8      	str	r0, [r7, #12]
 804310a:	60b9      	str	r1, [r7, #8]
 804310c:	603b      	str	r3, [r7, #0]
 804310e:	4613      	mov	r3, r2
 8043110:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 8043112:	e01a      	b.n	804314a <OSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8043114:	69bb      	ldr	r3, [r7, #24]
 8043116:	f1b3 3fff 	cmp.w	r3, #4294967295
 804311a:	d016      	beq.n	804314a <OSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 804311c:	f7fe face 	bl	80416bc <HAL_GetTick>
 8043120:	4602      	mov	r2, r0
 8043122:	683b      	ldr	r3, [r7, #0]
 8043124:	1ad3      	subs	r3, r2, r3
 8043126:	69ba      	ldr	r2, [r7, #24]
 8043128:	429a      	cmp	r2, r3
 804312a:	d302      	bcc.n	8043132 <OSPI_WaitFlagStateUntilTimeout+0x30>
 804312c:	69bb      	ldr	r3, [r7, #24]
 804312e:	2b00      	cmp	r3, #0
 8043130:	d10b      	bne.n	804314a <OSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hospi->State     = HAL_OSPI_STATE_ERROR;
 8043132:	68fb      	ldr	r3, [r7, #12]
 8043134:	f44f 7200 	mov.w	r2, #512	; 0x200
 8043138:	64da      	str	r2, [r3, #76]	; 0x4c
        hospi->ErrorCode |= HAL_OSPI_ERROR_TIMEOUT;
 804313a:	68fb      	ldr	r3, [r7, #12]
 804313c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804313e:	f043 0201 	orr.w	r2, r3, #1
 8043142:	68fb      	ldr	r3, [r7, #12]
 8043144:	651a      	str	r2, [r3, #80]	; 0x50

        return HAL_ERROR;
 8043146:	2301      	movs	r3, #1
 8043148:	e00e      	b.n	8043168 <OSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_OSPI_GET_FLAG(hospi, Flag)) != State)
 804314a:	68fb      	ldr	r3, [r7, #12]
 804314c:	681b      	ldr	r3, [r3, #0]
 804314e:	6a1a      	ldr	r2, [r3, #32]
 8043150:	68bb      	ldr	r3, [r7, #8]
 8043152:	4013      	ands	r3, r2
 8043154:	2b00      	cmp	r3, #0
 8043156:	bf14      	ite	ne
 8043158:	2301      	movne	r3, #1
 804315a:	2300      	moveq	r3, #0
 804315c:	b2db      	uxtb	r3, r3
 804315e:	461a      	mov	r2, r3
 8043160:	79fb      	ldrb	r3, [r7, #7]
 8043162:	429a      	cmp	r2, r3
 8043164:	d1d6      	bne.n	8043114 <OSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8043166:	2300      	movs	r3, #0
}
 8043168:	4618      	mov	r0, r3
 804316a:	3710      	adds	r7, #16
 804316c:	46bd      	mov	sp, r7
 804316e:	bd80      	pop	{r7, pc}

08043170 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8043170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8043172:	b08b      	sub	sp, #44	; 0x2c
 8043174:	af06      	add	r7, sp, #24
 8043176:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8043178:	687b      	ldr	r3, [r7, #4]
 804317a:	2b00      	cmp	r3, #0
 804317c:	d101      	bne.n	8043182 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 804317e:	2301      	movs	r3, #1
 8043180:	e0cb      	b.n	804331a <HAL_PCD_Init+0x1aa>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8043182:	687b      	ldr	r3, [r7, #4]
 8043184:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8043188:	b2db      	uxtb	r3, r3
 804318a:	2b00      	cmp	r3, #0
 804318c:	d106      	bne.n	804319c <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 804318e:	687b      	ldr	r3, [r7, #4]
 8043190:	2200      	movs	r2, #0
 8043192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8043196:	6878      	ldr	r0, [r7, #4]
 8043198:	f7fe f8a0 	bl	80412dc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 804319c:	687b      	ldr	r3, [r7, #4]
 804319e:	2203      	movs	r2, #3
 80431a0:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80431a4:	687b      	ldr	r3, [r7, #4]
 80431a6:	681b      	ldr	r3, [r3, #0]
 80431a8:	4618      	mov	r0, r3
 80431aa:	f005 fe13 	bl	8048dd4 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80431ae:	2300      	movs	r3, #0
 80431b0:	73fb      	strb	r3, [r7, #15]
 80431b2:	e040      	b.n	8043236 <HAL_PCD_Init+0xc6>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80431b4:	7bfb      	ldrb	r3, [r7, #15]
 80431b6:	6879      	ldr	r1, [r7, #4]
 80431b8:	1c5a      	adds	r2, r3, #1
 80431ba:	4613      	mov	r3, r2
 80431bc:	009b      	lsls	r3, r3, #2
 80431be:	4413      	add	r3, r2
 80431c0:	00db      	lsls	r3, r3, #3
 80431c2:	440b      	add	r3, r1
 80431c4:	3301      	adds	r3, #1
 80431c6:	2201      	movs	r2, #1
 80431c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80431ca:	7bfb      	ldrb	r3, [r7, #15]
 80431cc:	6879      	ldr	r1, [r7, #4]
 80431ce:	1c5a      	adds	r2, r3, #1
 80431d0:	4613      	mov	r3, r2
 80431d2:	009b      	lsls	r3, r3, #2
 80431d4:	4413      	add	r3, r2
 80431d6:	00db      	lsls	r3, r3, #3
 80431d8:	440b      	add	r3, r1
 80431da:	7bfa      	ldrb	r2, [r7, #15]
 80431dc:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80431de:	7bfb      	ldrb	r3, [r7, #15]
 80431e0:	6879      	ldr	r1, [r7, #4]
 80431e2:	1c5a      	adds	r2, r3, #1
 80431e4:	4613      	mov	r3, r2
 80431e6:	009b      	lsls	r3, r3, #2
 80431e8:	4413      	add	r3, r2
 80431ea:	00db      	lsls	r3, r3, #3
 80431ec:	440b      	add	r3, r1
 80431ee:	3303      	adds	r3, #3
 80431f0:	2200      	movs	r2, #0
 80431f2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80431f4:	7bfa      	ldrb	r2, [r7, #15]
 80431f6:	6879      	ldr	r1, [r7, #4]
 80431f8:	4613      	mov	r3, r2
 80431fa:	009b      	lsls	r3, r3, #2
 80431fc:	4413      	add	r3, r2
 80431fe:	00db      	lsls	r3, r3, #3
 8043200:	440b      	add	r3, r1
 8043202:	3338      	adds	r3, #56	; 0x38
 8043204:	2200      	movs	r2, #0
 8043206:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8043208:	7bfa      	ldrb	r2, [r7, #15]
 804320a:	6879      	ldr	r1, [r7, #4]
 804320c:	4613      	mov	r3, r2
 804320e:	009b      	lsls	r3, r3, #2
 8043210:	4413      	add	r3, r2
 8043212:	00db      	lsls	r3, r3, #3
 8043214:	440b      	add	r3, r1
 8043216:	333c      	adds	r3, #60	; 0x3c
 8043218:	2200      	movs	r2, #0
 804321a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 804321c:	7bfa      	ldrb	r2, [r7, #15]
 804321e:	6879      	ldr	r1, [r7, #4]
 8043220:	4613      	mov	r3, r2
 8043222:	009b      	lsls	r3, r3, #2
 8043224:	4413      	add	r3, r2
 8043226:	00db      	lsls	r3, r3, #3
 8043228:	440b      	add	r3, r1
 804322a:	3340      	adds	r3, #64	; 0x40
 804322c:	2200      	movs	r2, #0
 804322e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8043230:	7bfb      	ldrb	r3, [r7, #15]
 8043232:	3301      	adds	r3, #1
 8043234:	73fb      	strb	r3, [r7, #15]
 8043236:	7bfa      	ldrb	r2, [r7, #15]
 8043238:	687b      	ldr	r3, [r7, #4]
 804323a:	685b      	ldr	r3, [r3, #4]
 804323c:	429a      	cmp	r2, r3
 804323e:	d3b9      	bcc.n	80431b4 <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8043240:	2300      	movs	r3, #0
 8043242:	73fb      	strb	r3, [r7, #15]
 8043244:	e044      	b.n	80432d0 <HAL_PCD_Init+0x160>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8043246:	7bfa      	ldrb	r2, [r7, #15]
 8043248:	6879      	ldr	r1, [r7, #4]
 804324a:	4613      	mov	r3, r2
 804324c:	009b      	lsls	r3, r3, #2
 804324e:	4413      	add	r3, r2
 8043250:	00db      	lsls	r3, r3, #3
 8043252:	440b      	add	r3, r1
 8043254:	f203 1369 	addw	r3, r3, #361	; 0x169
 8043258:	2200      	movs	r2, #0
 804325a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 804325c:	7bfa      	ldrb	r2, [r7, #15]
 804325e:	6879      	ldr	r1, [r7, #4]
 8043260:	4613      	mov	r3, r2
 8043262:	009b      	lsls	r3, r3, #2
 8043264:	4413      	add	r3, r2
 8043266:	00db      	lsls	r3, r3, #3
 8043268:	440b      	add	r3, r1
 804326a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 804326e:	7bfa      	ldrb	r2, [r7, #15]
 8043270:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8043272:	7bfa      	ldrb	r2, [r7, #15]
 8043274:	6879      	ldr	r1, [r7, #4]
 8043276:	4613      	mov	r3, r2
 8043278:	009b      	lsls	r3, r3, #2
 804327a:	4413      	add	r3, r2
 804327c:	00db      	lsls	r3, r3, #3
 804327e:	440b      	add	r3, r1
 8043280:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8043284:	2200      	movs	r2, #0
 8043286:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8043288:	7bfa      	ldrb	r2, [r7, #15]
 804328a:	6879      	ldr	r1, [r7, #4]
 804328c:	4613      	mov	r3, r2
 804328e:	009b      	lsls	r3, r3, #2
 8043290:	4413      	add	r3, r2
 8043292:	00db      	lsls	r3, r3, #3
 8043294:	440b      	add	r3, r1
 8043296:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 804329a:	2200      	movs	r2, #0
 804329c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 804329e:	7bfa      	ldrb	r2, [r7, #15]
 80432a0:	6879      	ldr	r1, [r7, #4]
 80432a2:	4613      	mov	r3, r2
 80432a4:	009b      	lsls	r3, r3, #2
 80432a6:	4413      	add	r3, r2
 80432a8:	00db      	lsls	r3, r3, #3
 80432aa:	440b      	add	r3, r1
 80432ac:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80432b0:	2200      	movs	r2, #0
 80432b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80432b4:	7bfa      	ldrb	r2, [r7, #15]
 80432b6:	6879      	ldr	r1, [r7, #4]
 80432b8:	4613      	mov	r3, r2
 80432ba:	009b      	lsls	r3, r3, #2
 80432bc:	4413      	add	r3, r2
 80432be:	00db      	lsls	r3, r3, #3
 80432c0:	440b      	add	r3, r1
 80432c2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80432c6:	2200      	movs	r2, #0
 80432c8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80432ca:	7bfb      	ldrb	r3, [r7, #15]
 80432cc:	3301      	adds	r3, #1
 80432ce:	73fb      	strb	r3, [r7, #15]
 80432d0:	7bfa      	ldrb	r2, [r7, #15]
 80432d2:	687b      	ldr	r3, [r7, #4]
 80432d4:	685b      	ldr	r3, [r3, #4]
 80432d6:	429a      	cmp	r2, r3
 80432d8:	d3b5      	bcc.n	8043246 <HAL_PCD_Init+0xd6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80432da:	687b      	ldr	r3, [r7, #4]
 80432dc:	681b      	ldr	r3, [r3, #0]
 80432de:	603b      	str	r3, [r7, #0]
 80432e0:	687e      	ldr	r6, [r7, #4]
 80432e2:	466d      	mov	r5, sp
 80432e4:	f106 0410 	add.w	r4, r6, #16
 80432e8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80432ea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80432ec:	6823      	ldr	r3, [r4, #0]
 80432ee:	602b      	str	r3, [r5, #0]
 80432f0:	1d33      	adds	r3, r6, #4
 80432f2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80432f4:	6838      	ldr	r0, [r7, #0]
 80432f6:	f005 fd88 	bl	8048e0a <USB_DevInit>

  hpcd->USB_Address = 0U;
 80432fa:	687b      	ldr	r3, [r7, #4]
 80432fc:	2200      	movs	r2, #0
 80432fe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8043302:	687b      	ldr	r3, [r7, #4]
 8043304:	2201      	movs	r2, #1
 8043306:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 804330a:	687b      	ldr	r3, [r7, #4]
 804330c:	69db      	ldr	r3, [r3, #28]
 804330e:	2b01      	cmp	r3, #1
 8043310:	d102      	bne.n	8043318 <HAL_PCD_Init+0x1a8>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8043312:	6878      	ldr	r0, [r7, #4]
 8043314:	f000 f805 	bl	8043322 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 8043318:	2300      	movs	r3, #0
}
 804331a:	4618      	mov	r0, r3
 804331c:	3714      	adds	r7, #20
 804331e:	46bd      	mov	sp, r7
 8043320:	bdf0      	pop	{r4, r5, r6, r7, pc}

08043322 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8043322:	b480      	push	{r7}
 8043324:	b085      	sub	sp, #20
 8043326:	af00      	add	r7, sp, #0
 8043328:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 804332a:	687b      	ldr	r3, [r7, #4]
 804332c:	681b      	ldr	r3, [r3, #0]
 804332e:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 8043330:	687b      	ldr	r3, [r7, #4]
 8043332:	2201      	movs	r2, #1
 8043334:	f8c3 22e8 	str.w	r2, [r3, #744]	; 0x2e8
  hpcd->LPM_State = LPM_L0;
 8043338:	687b      	ldr	r3, [r7, #4]
 804333a:	2200      	movs	r2, #0
 804333c:	f883 22e0 	strb.w	r2, [r3, #736]	; 0x2e0

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8043340:	68fb      	ldr	r3, [r7, #12]
 8043342:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8043346:	b29b      	uxth	r3, r3
 8043348:	f043 0301 	orr.w	r3, r3, #1
 804334c:	b29a      	uxth	r2, r3
 804334e:	68fb      	ldr	r3, [r7, #12]
 8043350:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8043354:	68fb      	ldr	r3, [r7, #12]
 8043356:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 804335a:	b29b      	uxth	r3, r3
 804335c:	f043 0302 	orr.w	r3, r3, #2
 8043360:	b29a      	uxth	r2, r3
 8043362:	68fb      	ldr	r3, [r7, #12]
 8043364:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54

  return HAL_OK;
 8043368:	2300      	movs	r3, #0
}
 804336a:	4618      	mov	r0, r3
 804336c:	3714      	adds	r7, #20
 804336e:	46bd      	mov	sp, r7
 8043370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043374:	4770      	bx	lr
	...

08043378 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8043378:	b480      	push	{r7}
 804337a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 804337c:	4b05      	ldr	r3, [pc, #20]	; (8043394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 804337e:	681b      	ldr	r3, [r3, #0]
 8043380:	4a04      	ldr	r2, [pc, #16]	; (8043394 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8043382:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043386:	6013      	str	r3, [r2, #0]
}
 8043388:	bf00      	nop
 804338a:	46bd      	mov	sp, r7
 804338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043390:	4770      	bx	lr
 8043392:	bf00      	nop
 8043394:	40007000 	.word	0x40007000

08043398 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8043398:	b480      	push	{r7}
 804339a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 804339c:	4b04      	ldr	r3, [pc, #16]	; (80433b0 <HAL_PWREx_GetVoltageRange+0x18>)
 804339e:	681b      	ldr	r3, [r3, #0]
 80433a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80433a4:	4618      	mov	r0, r3
 80433a6:	46bd      	mov	sp, r7
 80433a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80433ac:	4770      	bx	lr
 80433ae:	bf00      	nop
 80433b0:	40007000 	.word	0x40007000

080433b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80433b4:	b580      	push	{r7, lr}
 80433b6:	b084      	sub	sp, #16
 80433b8:	af00      	add	r7, sp, #0
 80433ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80433bc:	4b27      	ldr	r3, [pc, #156]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80433be:	681b      	ldr	r3, [r3, #0]
 80433c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80433c4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80433c6:	f000 f861 	bl	804348c <HAL_PWREx_SMPS_GetEffectiveMode>
 80433ca:	4603      	mov	r3, r0
 80433cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80433d0:	d101      	bne.n	80433d6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80433d2:	2301      	movs	r3, #1
 80433d4:	e03e      	b.n	8043454 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80433d6:	4b21      	ldr	r3, [pc, #132]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80433d8:	68db      	ldr	r3, [r3, #12]
 80433da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80433de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80433e2:	d101      	bne.n	80433e8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80433e4:	2301      	movs	r3, #1
 80433e6:	e035      	b.n	8043454 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80433e8:	68ba      	ldr	r2, [r7, #8]
 80433ea:	687b      	ldr	r3, [r7, #4]
 80433ec:	429a      	cmp	r2, r3
 80433ee:	d101      	bne.n	80433f4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80433f0:	2300      	movs	r3, #0
 80433f2:	e02f      	b.n	8043454 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80433f4:	4b19      	ldr	r3, [pc, #100]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80433f6:	681b      	ldr	r3, [r3, #0]
 80433f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80433fc:	4917      	ldr	r1, [pc, #92]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80433fe:	687b      	ldr	r3, [r7, #4]
 8043400:	4313      	orrs	r3, r2
 8043402:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8043404:	4b16      	ldr	r3, [pc, #88]	; (8043460 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8043406:	681b      	ldr	r3, [r3, #0]
 8043408:	095b      	lsrs	r3, r3, #5
 804340a:	4a16      	ldr	r2, [pc, #88]	; (8043464 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 804340c:	fba2 2303 	umull	r2, r3, r2, r3
 8043410:	09db      	lsrs	r3, r3, #7
 8043412:	2232      	movs	r2, #50	; 0x32
 8043414:	fb02 f303 	mul.w	r3, r2, r3
 8043418:	4a13      	ldr	r2, [pc, #76]	; (8043468 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 804341a:	fba2 2303 	umull	r2, r3, r2, r3
 804341e:	08db      	lsrs	r3, r3, #3
 8043420:	3301      	adds	r3, #1
 8043422:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8043424:	e002      	b.n	804342c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8043426:	68fb      	ldr	r3, [r7, #12]
 8043428:	3b01      	subs	r3, #1
 804342a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804342c:	4b0b      	ldr	r3, [pc, #44]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 804342e:	695b      	ldr	r3, [r3, #20]
 8043430:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043434:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8043438:	d102      	bne.n	8043440 <HAL_PWREx_ControlVoltageScaling+0x8c>
 804343a:	68fb      	ldr	r3, [r7, #12]
 804343c:	2b00      	cmp	r3, #0
 804343e:	d1f2      	bne.n	8043426 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8043440:	4b06      	ldr	r3, [pc, #24]	; (804345c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8043442:	695b      	ldr	r3, [r3, #20]
 8043444:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043448:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804344c:	d101      	bne.n	8043452 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 804344e:	2303      	movs	r3, #3
 8043450:	e000      	b.n	8043454 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8043452:	2300      	movs	r3, #0
}
 8043454:	4618      	mov	r0, r3
 8043456:	3710      	adds	r7, #16
 8043458:	46bd      	mov	sp, r7
 804345a:	bd80      	pop	{r7, pc}
 804345c:	40007000 	.word	0x40007000
 8043460:	20018000 	.word	0x20018000
 8043464:	0a7c5ac5 	.word	0x0a7c5ac5
 8043468:	cccccccd 	.word	0xcccccccd

0804346c <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 804346c:	b480      	push	{r7}
 804346e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8043470:	4b05      	ldr	r3, [pc, #20]	; (8043488 <HAL_PWREx_EnableVddIO2+0x1c>)
 8043472:	685b      	ldr	r3, [r3, #4]
 8043474:	4a04      	ldr	r2, [pc, #16]	; (8043488 <HAL_PWREx_EnableVddIO2+0x1c>)
 8043476:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 804347a:	6053      	str	r3, [r2, #4]
}
 804347c:	bf00      	nop
 804347e:	46bd      	mov	sp, r7
 8043480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043484:	4770      	bx	lr
 8043486:	bf00      	nop
 8043488:	40007000 	.word	0x40007000

0804348c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 804348c:	b480      	push	{r7}
 804348e:	b083      	sub	sp, #12
 8043490:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8043492:	4b0f      	ldr	r3, [pc, #60]	; (80434d0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8043494:	691b      	ldr	r3, [r3, #16]
 8043496:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8043498:	683b      	ldr	r3, [r7, #0]
 804349a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804349e:	2b00      	cmp	r3, #0
 80434a0:	d003      	beq.n	80434aa <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 80434a2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80434a6:	607b      	str	r3, [r7, #4]
 80434a8:	e00a      	b.n	80434c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 80434aa:	683b      	ldr	r3, [r7, #0]
 80434ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80434b0:	2b00      	cmp	r3, #0
 80434b2:	d103      	bne.n	80434bc <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 80434b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80434b8:	607b      	str	r3, [r7, #4]
 80434ba:	e001      	b.n	80434c0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 80434bc:	2300      	movs	r3, #0
 80434be:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80434c0:	687b      	ldr	r3, [r7, #4]
}
 80434c2:	4618      	mov	r0, r3
 80434c4:	370c      	adds	r7, #12
 80434c6:	46bd      	mov	sp, r7
 80434c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80434cc:	4770      	bx	lr
 80434ce:	bf00      	nop
 80434d0:	40007000 	.word	0x40007000

080434d4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80434d4:	b580      	push	{r7, lr}
 80434d6:	b088      	sub	sp, #32
 80434d8:	af00      	add	r7, sp, #0
 80434da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80434dc:	687b      	ldr	r3, [r7, #4]
 80434de:	2b00      	cmp	r3, #0
 80434e0:	d102      	bne.n	80434e8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80434e2:	2301      	movs	r3, #1
 80434e4:	f000 bcc2 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80434e8:	4b99      	ldr	r3, [pc, #612]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80434ea:	689b      	ldr	r3, [r3, #8]
 80434ec:	f003 030c 	and.w	r3, r3, #12
 80434f0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80434f2:	4b97      	ldr	r3, [pc, #604]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80434f4:	68db      	ldr	r3, [r3, #12]
 80434f6:	f003 0303 	and.w	r3, r3, #3
 80434fa:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80434fc:	687b      	ldr	r3, [r7, #4]
 80434fe:	681b      	ldr	r3, [r3, #0]
 8043500:	f003 0310 	and.w	r3, r3, #16
 8043504:	2b00      	cmp	r3, #0
 8043506:	f000 80e9 	beq.w	80436dc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 804350a:	69bb      	ldr	r3, [r7, #24]
 804350c:	2b00      	cmp	r3, #0
 804350e:	d006      	beq.n	804351e <HAL_RCC_OscConfig+0x4a>
 8043510:	69bb      	ldr	r3, [r7, #24]
 8043512:	2b0c      	cmp	r3, #12
 8043514:	f040 8083 	bne.w	804361e <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 8043518:	697b      	ldr	r3, [r7, #20]
 804351a:	2b01      	cmp	r3, #1
 804351c:	d17f      	bne.n	804361e <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 804351e:	4b8c      	ldr	r3, [pc, #560]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043520:	681b      	ldr	r3, [r3, #0]
 8043522:	f003 0302 	and.w	r3, r3, #2
 8043526:	2b00      	cmp	r3, #0
 8043528:	d006      	beq.n	8043538 <HAL_RCC_OscConfig+0x64>
 804352a:	687b      	ldr	r3, [r7, #4]
 804352c:	69db      	ldr	r3, [r3, #28]
 804352e:	2b00      	cmp	r3, #0
 8043530:	d102      	bne.n	8043538 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8043532:	2301      	movs	r3, #1
 8043534:	f000 bc9a 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8043538:	687b      	ldr	r3, [r7, #4]
 804353a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804353c:	4b84      	ldr	r3, [pc, #528]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804353e:	681b      	ldr	r3, [r3, #0]
 8043540:	f003 0308 	and.w	r3, r3, #8
 8043544:	2b00      	cmp	r3, #0
 8043546:	d004      	beq.n	8043552 <HAL_RCC_OscConfig+0x7e>
 8043548:	4b81      	ldr	r3, [pc, #516]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804354a:	681b      	ldr	r3, [r3, #0]
 804354c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8043550:	e005      	b.n	804355e <HAL_RCC_OscConfig+0x8a>
 8043552:	4b7f      	ldr	r3, [pc, #508]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043558:	091b      	lsrs	r3, r3, #4
 804355a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804355e:	4293      	cmp	r3, r2
 8043560:	d224      	bcs.n	80435ac <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8043562:	687b      	ldr	r3, [r7, #4]
 8043564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043566:	4618      	mov	r0, r3
 8043568:	f000 fe9c 	bl	80442a4 <RCC_SetFlashLatencyFromMSIRange>
 804356c:	4603      	mov	r3, r0
 804356e:	2b00      	cmp	r3, #0
 8043570:	d002      	beq.n	8043578 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8043572:	2301      	movs	r3, #1
 8043574:	f000 bc7a 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8043578:	4b75      	ldr	r3, [pc, #468]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804357a:	681b      	ldr	r3, [r3, #0]
 804357c:	4a74      	ldr	r2, [pc, #464]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804357e:	f043 0308 	orr.w	r3, r3, #8
 8043582:	6013      	str	r3, [r2, #0]
 8043584:	4b72      	ldr	r3, [pc, #456]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043586:	681b      	ldr	r3, [r3, #0]
 8043588:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804358c:	687b      	ldr	r3, [r7, #4]
 804358e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043590:	496f      	ldr	r1, [pc, #444]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043592:	4313      	orrs	r3, r2
 8043594:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8043596:	4b6e      	ldr	r3, [pc, #440]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043598:	685b      	ldr	r3, [r3, #4]
 804359a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 804359e:	687b      	ldr	r3, [r7, #4]
 80435a0:	6a1b      	ldr	r3, [r3, #32]
 80435a2:	021b      	lsls	r3, r3, #8
 80435a4:	496a      	ldr	r1, [pc, #424]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435a6:	4313      	orrs	r3, r2
 80435a8:	604b      	str	r3, [r1, #4]
 80435aa:	e026      	b.n	80435fa <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80435ac:	4b68      	ldr	r3, [pc, #416]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435ae:	681b      	ldr	r3, [r3, #0]
 80435b0:	4a67      	ldr	r2, [pc, #412]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435b2:	f043 0308 	orr.w	r3, r3, #8
 80435b6:	6013      	str	r3, [r2, #0]
 80435b8:	4b65      	ldr	r3, [pc, #404]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435ba:	681b      	ldr	r3, [r3, #0]
 80435bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80435c0:	687b      	ldr	r3, [r7, #4]
 80435c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80435c4:	4962      	ldr	r1, [pc, #392]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435c6:	4313      	orrs	r3, r2
 80435c8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80435ca:	4b61      	ldr	r3, [pc, #388]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435cc:	685b      	ldr	r3, [r3, #4]
 80435ce:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80435d2:	687b      	ldr	r3, [r7, #4]
 80435d4:	6a1b      	ldr	r3, [r3, #32]
 80435d6:	021b      	lsls	r3, r3, #8
 80435d8:	495d      	ldr	r1, [pc, #372]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80435da:	4313      	orrs	r3, r2
 80435dc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80435de:	69bb      	ldr	r3, [r7, #24]
 80435e0:	2b00      	cmp	r3, #0
 80435e2:	d10a      	bne.n	80435fa <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80435e4:	687b      	ldr	r3, [r7, #4]
 80435e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80435e8:	4618      	mov	r0, r3
 80435ea:	f000 fe5b 	bl	80442a4 <RCC_SetFlashLatencyFromMSIRange>
 80435ee:	4603      	mov	r3, r0
 80435f0:	2b00      	cmp	r3, #0
 80435f2:	d002      	beq.n	80435fa <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80435f4:	2301      	movs	r3, #1
 80435f6:	f000 bc39 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80435fa:	f000 fe17 	bl	804422c <HAL_RCC_GetHCLKFreq>
 80435fe:	4603      	mov	r3, r0
 8043600:	4a54      	ldr	r2, [pc, #336]	; (8043754 <HAL_RCC_OscConfig+0x280>)
 8043602:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8043604:	4b54      	ldr	r3, [pc, #336]	; (8043758 <HAL_RCC_OscConfig+0x284>)
 8043606:	681b      	ldr	r3, [r3, #0]
 8043608:	4618      	mov	r0, r3
 804360a:	f7fe f807 	bl	804161c <HAL_InitTick>
 804360e:	4603      	mov	r3, r0
 8043610:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 8043612:	7bfb      	ldrb	r3, [r7, #15]
 8043614:	2b00      	cmp	r3, #0
 8043616:	d060      	beq.n	80436da <HAL_RCC_OscConfig+0x206>
        {
          return status;
 8043618:	7bfb      	ldrb	r3, [r7, #15]
 804361a:	f000 bc27 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 804361e:	687b      	ldr	r3, [r7, #4]
 8043620:	69db      	ldr	r3, [r3, #28]
 8043622:	2b00      	cmp	r3, #0
 8043624:	d039      	beq.n	804369a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8043626:	4b4a      	ldr	r3, [pc, #296]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043628:	681b      	ldr	r3, [r3, #0]
 804362a:	4a49      	ldr	r2, [pc, #292]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804362c:	f043 0301 	orr.w	r3, r3, #1
 8043630:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8043632:	f7fe f843 	bl	80416bc <HAL_GetTick>
 8043636:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8043638:	e00f      	b.n	804365a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 804363a:	f7fe f83f 	bl	80416bc <HAL_GetTick>
 804363e:	4602      	mov	r2, r0
 8043640:	693b      	ldr	r3, [r7, #16]
 8043642:	1ad3      	subs	r3, r2, r3
 8043644:	2b02      	cmp	r3, #2
 8043646:	d908      	bls.n	804365a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8043648:	4b41      	ldr	r3, [pc, #260]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804364a:	681b      	ldr	r3, [r3, #0]
 804364c:	f003 0302 	and.w	r3, r3, #2
 8043650:	2b00      	cmp	r3, #0
 8043652:	d102      	bne.n	804365a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8043654:	2303      	movs	r3, #3
 8043656:	f000 bc09 	b.w	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 804365a:	4b3d      	ldr	r3, [pc, #244]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804365c:	681b      	ldr	r3, [r3, #0]
 804365e:	f003 0302 	and.w	r3, r3, #2
 8043662:	2b00      	cmp	r3, #0
 8043664:	d0e9      	beq.n	804363a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8043666:	4b3a      	ldr	r3, [pc, #232]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043668:	681b      	ldr	r3, [r3, #0]
 804366a:	4a39      	ldr	r2, [pc, #228]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804366c:	f043 0308 	orr.w	r3, r3, #8
 8043670:	6013      	str	r3, [r2, #0]
 8043672:	4b37      	ldr	r3, [pc, #220]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043674:	681b      	ldr	r3, [r3, #0]
 8043676:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804367a:	687b      	ldr	r3, [r7, #4]
 804367c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804367e:	4934      	ldr	r1, [pc, #208]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043680:	4313      	orrs	r3, r2
 8043682:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8043684:	4b32      	ldr	r3, [pc, #200]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043686:	685b      	ldr	r3, [r3, #4]
 8043688:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 804368c:	687b      	ldr	r3, [r7, #4]
 804368e:	6a1b      	ldr	r3, [r3, #32]
 8043690:	021b      	lsls	r3, r3, #8
 8043692:	492f      	ldr	r1, [pc, #188]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043694:	4313      	orrs	r3, r2
 8043696:	604b      	str	r3, [r1, #4]
 8043698:	e020      	b.n	80436dc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 804369a:	4b2d      	ldr	r3, [pc, #180]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804369c:	681b      	ldr	r3, [r3, #0]
 804369e:	4a2c      	ldr	r2, [pc, #176]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80436a0:	f023 0301 	bic.w	r3, r3, #1
 80436a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80436a6:	f7fe f809 	bl	80416bc <HAL_GetTick>
 80436aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80436ac:	e00e      	b.n	80436cc <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80436ae:	f7fe f805 	bl	80416bc <HAL_GetTick>
 80436b2:	4602      	mov	r2, r0
 80436b4:	693b      	ldr	r3, [r7, #16]
 80436b6:	1ad3      	subs	r3, r2, r3
 80436b8:	2b02      	cmp	r3, #2
 80436ba:	d907      	bls.n	80436cc <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80436bc:	4b24      	ldr	r3, [pc, #144]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80436be:	681b      	ldr	r3, [r3, #0]
 80436c0:	f003 0302 	and.w	r3, r3, #2
 80436c4:	2b00      	cmp	r3, #0
 80436c6:	d001      	beq.n	80436cc <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80436c8:	2303      	movs	r3, #3
 80436ca:	e3cf      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80436cc:	4b20      	ldr	r3, [pc, #128]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80436ce:	681b      	ldr	r3, [r3, #0]
 80436d0:	f003 0302 	and.w	r3, r3, #2
 80436d4:	2b00      	cmp	r3, #0
 80436d6:	d1ea      	bne.n	80436ae <HAL_RCC_OscConfig+0x1da>
 80436d8:	e000      	b.n	80436dc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80436da:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80436dc:	687b      	ldr	r3, [r7, #4]
 80436de:	681b      	ldr	r3, [r3, #0]
 80436e0:	f003 0301 	and.w	r3, r3, #1
 80436e4:	2b00      	cmp	r3, #0
 80436e6:	d07e      	beq.n	80437e6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80436e8:	69bb      	ldr	r3, [r7, #24]
 80436ea:	2b08      	cmp	r3, #8
 80436ec:	d005      	beq.n	80436fa <HAL_RCC_OscConfig+0x226>
 80436ee:	69bb      	ldr	r3, [r7, #24]
 80436f0:	2b0c      	cmp	r3, #12
 80436f2:	d10e      	bne.n	8043712 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80436f4:	697b      	ldr	r3, [r7, #20]
 80436f6:	2b03      	cmp	r3, #3
 80436f8:	d10b      	bne.n	8043712 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80436fa:	4b15      	ldr	r3, [pc, #84]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 80436fc:	681b      	ldr	r3, [r3, #0]
 80436fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043702:	2b00      	cmp	r3, #0
 8043704:	d06e      	beq.n	80437e4 <HAL_RCC_OscConfig+0x310>
 8043706:	687b      	ldr	r3, [r7, #4]
 8043708:	685b      	ldr	r3, [r3, #4]
 804370a:	2b00      	cmp	r3, #0
 804370c:	d16a      	bne.n	80437e4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 804370e:	2301      	movs	r3, #1
 8043710:	e3ac      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8043712:	687b      	ldr	r3, [r7, #4]
 8043714:	685b      	ldr	r3, [r3, #4]
 8043716:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804371a:	d106      	bne.n	804372a <HAL_RCC_OscConfig+0x256>
 804371c:	4b0c      	ldr	r3, [pc, #48]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804371e:	681b      	ldr	r3, [r3, #0]
 8043720:	4a0b      	ldr	r2, [pc, #44]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043722:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8043726:	6013      	str	r3, [r2, #0]
 8043728:	e024      	b.n	8043774 <HAL_RCC_OscConfig+0x2a0>
 804372a:	687b      	ldr	r3, [r7, #4]
 804372c:	685b      	ldr	r3, [r3, #4]
 804372e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8043732:	d113      	bne.n	804375c <HAL_RCC_OscConfig+0x288>
 8043734:	4b06      	ldr	r3, [pc, #24]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043736:	681b      	ldr	r3, [r3, #0]
 8043738:	4a05      	ldr	r2, [pc, #20]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 804373a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804373e:	6013      	str	r3, [r2, #0]
 8043740:	4b03      	ldr	r3, [pc, #12]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043742:	681b      	ldr	r3, [r3, #0]
 8043744:	4a02      	ldr	r2, [pc, #8]	; (8043750 <HAL_RCC_OscConfig+0x27c>)
 8043746:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804374a:	6013      	str	r3, [r2, #0]
 804374c:	e012      	b.n	8043774 <HAL_RCC_OscConfig+0x2a0>
 804374e:	bf00      	nop
 8043750:	40021000 	.word	0x40021000
 8043754:	20018000 	.word	0x20018000
 8043758:	20018004 	.word	0x20018004
 804375c:	4b8b      	ldr	r3, [pc, #556]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804375e:	681b      	ldr	r3, [r3, #0]
 8043760:	4a8a      	ldr	r2, [pc, #552]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043762:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8043766:	6013      	str	r3, [r2, #0]
 8043768:	4b88      	ldr	r3, [pc, #544]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804376a:	681b      	ldr	r3, [r3, #0]
 804376c:	4a87      	ldr	r2, [pc, #540]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804376e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8043772:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8043774:	687b      	ldr	r3, [r7, #4]
 8043776:	685b      	ldr	r3, [r3, #4]
 8043778:	2b00      	cmp	r3, #0
 804377a:	d019      	beq.n	80437b0 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804377c:	f7fd ff9e 	bl	80416bc <HAL_GetTick>
 8043780:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8043782:	e00e      	b.n	80437a2 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8043784:	f7fd ff9a 	bl	80416bc <HAL_GetTick>
 8043788:	4602      	mov	r2, r0
 804378a:	693b      	ldr	r3, [r7, #16]
 804378c:	1ad3      	subs	r3, r2, r3
 804378e:	2b64      	cmp	r3, #100	; 0x64
 8043790:	d907      	bls.n	80437a2 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8043792:	4b7e      	ldr	r3, [pc, #504]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043794:	681b      	ldr	r3, [r3, #0]
 8043796:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804379a:	2b00      	cmp	r3, #0
 804379c:	d101      	bne.n	80437a2 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 804379e:	2303      	movs	r3, #3
 80437a0:	e364      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80437a2:	4b7a      	ldr	r3, [pc, #488]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80437a4:	681b      	ldr	r3, [r3, #0]
 80437a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80437aa:	2b00      	cmp	r3, #0
 80437ac:	d0ea      	beq.n	8043784 <HAL_RCC_OscConfig+0x2b0>
 80437ae:	e01a      	b.n	80437e6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80437b0:	f7fd ff84 	bl	80416bc <HAL_GetTick>
 80437b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80437b6:	e00e      	b.n	80437d6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80437b8:	f7fd ff80 	bl	80416bc <HAL_GetTick>
 80437bc:	4602      	mov	r2, r0
 80437be:	693b      	ldr	r3, [r7, #16]
 80437c0:	1ad3      	subs	r3, r2, r3
 80437c2:	2b64      	cmp	r3, #100	; 0x64
 80437c4:	d907      	bls.n	80437d6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80437c6:	4b71      	ldr	r3, [pc, #452]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80437c8:	681b      	ldr	r3, [r3, #0]
 80437ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80437ce:	2b00      	cmp	r3, #0
 80437d0:	d001      	beq.n	80437d6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80437d2:	2303      	movs	r3, #3
 80437d4:	e34a      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80437d6:	4b6d      	ldr	r3, [pc, #436]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80437d8:	681b      	ldr	r3, [r3, #0]
 80437da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80437de:	2b00      	cmp	r3, #0
 80437e0:	d1ea      	bne.n	80437b8 <HAL_RCC_OscConfig+0x2e4>
 80437e2:	e000      	b.n	80437e6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80437e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80437e6:	687b      	ldr	r3, [r7, #4]
 80437e8:	681b      	ldr	r3, [r3, #0]
 80437ea:	f003 0302 	and.w	r3, r3, #2
 80437ee:	2b00      	cmp	r3, #0
 80437f0:	d06c      	beq.n	80438cc <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80437f2:	69bb      	ldr	r3, [r7, #24]
 80437f4:	2b04      	cmp	r3, #4
 80437f6:	d005      	beq.n	8043804 <HAL_RCC_OscConfig+0x330>
 80437f8:	69bb      	ldr	r3, [r7, #24]
 80437fa:	2b0c      	cmp	r3, #12
 80437fc:	d119      	bne.n	8043832 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80437fe:	697b      	ldr	r3, [r7, #20]
 8043800:	2b02      	cmp	r3, #2
 8043802:	d116      	bne.n	8043832 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043804:	4b61      	ldr	r3, [pc, #388]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043806:	681b      	ldr	r3, [r3, #0]
 8043808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804380c:	2b00      	cmp	r3, #0
 804380e:	d005      	beq.n	804381c <HAL_RCC_OscConfig+0x348>
 8043810:	687b      	ldr	r3, [r7, #4]
 8043812:	68db      	ldr	r3, [r3, #12]
 8043814:	2b00      	cmp	r3, #0
 8043816:	d101      	bne.n	804381c <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 8043818:	2301      	movs	r3, #1
 804381a:	e327      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 804381c:	4b5b      	ldr	r3, [pc, #364]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804381e:	685b      	ldr	r3, [r3, #4]
 8043820:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8043824:	687b      	ldr	r3, [r7, #4]
 8043826:	691b      	ldr	r3, [r3, #16]
 8043828:	061b      	lsls	r3, r3, #24
 804382a:	4958      	ldr	r1, [pc, #352]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804382c:	4313      	orrs	r3, r2
 804382e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8043830:	e04c      	b.n	80438cc <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8043832:	687b      	ldr	r3, [r7, #4]
 8043834:	68db      	ldr	r3, [r3, #12]
 8043836:	2b00      	cmp	r3, #0
 8043838:	d029      	beq.n	804388e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804383a:	4b54      	ldr	r3, [pc, #336]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804383c:	681b      	ldr	r3, [r3, #0]
 804383e:	4a53      	ldr	r2, [pc, #332]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043840:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8043844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043846:	f7fd ff39 	bl	80416bc <HAL_GetTick>
 804384a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804384c:	e00e      	b.n	804386c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804384e:	f7fd ff35 	bl	80416bc <HAL_GetTick>
 8043852:	4602      	mov	r2, r0
 8043854:	693b      	ldr	r3, [r7, #16]
 8043856:	1ad3      	subs	r3, r2, r3
 8043858:	2b02      	cmp	r3, #2
 804385a:	d907      	bls.n	804386c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804385c:	4b4b      	ldr	r3, [pc, #300]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804385e:	681b      	ldr	r3, [r3, #0]
 8043860:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043864:	2b00      	cmp	r3, #0
 8043866:	d101      	bne.n	804386c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8043868:	2303      	movs	r3, #3
 804386a:	e2ff      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804386c:	4b47      	ldr	r3, [pc, #284]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804386e:	681b      	ldr	r3, [r3, #0]
 8043870:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043874:	2b00      	cmp	r3, #0
 8043876:	d0ea      	beq.n	804384e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8043878:	4b44      	ldr	r3, [pc, #272]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804387a:	685b      	ldr	r3, [r3, #4]
 804387c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8043880:	687b      	ldr	r3, [r7, #4]
 8043882:	691b      	ldr	r3, [r3, #16]
 8043884:	061b      	lsls	r3, r3, #24
 8043886:	4941      	ldr	r1, [pc, #260]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043888:	4313      	orrs	r3, r2
 804388a:	604b      	str	r3, [r1, #4]
 804388c:	e01e      	b.n	80438cc <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804388e:	4b3f      	ldr	r3, [pc, #252]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043890:	681b      	ldr	r3, [r3, #0]
 8043892:	4a3e      	ldr	r2, [pc, #248]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043894:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8043898:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804389a:	f7fd ff0f 	bl	80416bc <HAL_GetTick>
 804389e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80438a0:	e00e      	b.n	80438c0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80438a2:	f7fd ff0b 	bl	80416bc <HAL_GetTick>
 80438a6:	4602      	mov	r2, r0
 80438a8:	693b      	ldr	r3, [r7, #16]
 80438aa:	1ad3      	subs	r3, r2, r3
 80438ac:	2b02      	cmp	r3, #2
 80438ae:	d907      	bls.n	80438c0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80438b0:	4b36      	ldr	r3, [pc, #216]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80438b2:	681b      	ldr	r3, [r3, #0]
 80438b4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80438b8:	2b00      	cmp	r3, #0
 80438ba:	d001      	beq.n	80438c0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 80438bc:	2303      	movs	r3, #3
 80438be:	e2d5      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80438c0:	4b32      	ldr	r3, [pc, #200]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80438c2:	681b      	ldr	r3, [r3, #0]
 80438c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80438c8:	2b00      	cmp	r3, #0
 80438ca:	d1ea      	bne.n	80438a2 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80438cc:	687b      	ldr	r3, [r7, #4]
 80438ce:	681b      	ldr	r3, [r3, #0]
 80438d0:	f003 0308 	and.w	r3, r3, #8
 80438d4:	2b00      	cmp	r3, #0
 80438d6:	d062      	beq.n	804399e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80438d8:	687b      	ldr	r3, [r7, #4]
 80438da:	695b      	ldr	r3, [r3, #20]
 80438dc:	2b00      	cmp	r3, #0
 80438de:	d038      	beq.n	8043952 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80438e0:	687b      	ldr	r3, [r7, #4]
 80438e2:	699b      	ldr	r3, [r3, #24]
 80438e4:	2b00      	cmp	r3, #0
 80438e6:	d108      	bne.n	80438fa <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80438e8:	4b28      	ldr	r3, [pc, #160]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80438ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80438ee:	4a27      	ldr	r2, [pc, #156]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80438f0:	f023 0310 	bic.w	r3, r3, #16
 80438f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80438f8:	e007      	b.n	804390a <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80438fa:	4b24      	ldr	r3, [pc, #144]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 80438fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043900:	4a22      	ldr	r2, [pc, #136]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043902:	f043 0310 	orr.w	r3, r3, #16
 8043906:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 804390a:	4b20      	ldr	r3, [pc, #128]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804390c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043910:	4a1e      	ldr	r2, [pc, #120]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043912:	f043 0301 	orr.w	r3, r3, #1
 8043916:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804391a:	f7fd fecf 	bl	80416bc <HAL_GetTick>
 804391e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8043920:	e00f      	b.n	8043942 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8043922:	f7fd fecb 	bl	80416bc <HAL_GetTick>
 8043926:	4602      	mov	r2, r0
 8043928:	693b      	ldr	r3, [r7, #16]
 804392a:	1ad3      	subs	r3, r2, r3
 804392c:	2b07      	cmp	r3, #7
 804392e:	d908      	bls.n	8043942 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8043930:	4b16      	ldr	r3, [pc, #88]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043932:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043936:	f003 0302 	and.w	r3, r3, #2
 804393a:	2b00      	cmp	r3, #0
 804393c:	d101      	bne.n	8043942 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 804393e:	2303      	movs	r3, #3
 8043940:	e294      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8043942:	4b12      	ldr	r3, [pc, #72]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043944:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043948:	f003 0302 	and.w	r3, r3, #2
 804394c:	2b00      	cmp	r3, #0
 804394e:	d0e8      	beq.n	8043922 <HAL_RCC_OscConfig+0x44e>
 8043950:	e025      	b.n	804399e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8043952:	4b0e      	ldr	r3, [pc, #56]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 8043954:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043958:	4a0c      	ldr	r2, [pc, #48]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804395a:	f023 0301 	bic.w	r3, r3, #1
 804395e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043962:	f7fd feab 	bl	80416bc <HAL_GetTick>
 8043966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8043968:	e012      	b.n	8043990 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804396a:	f7fd fea7 	bl	80416bc <HAL_GetTick>
 804396e:	4602      	mov	r2, r0
 8043970:	693b      	ldr	r3, [r7, #16]
 8043972:	1ad3      	subs	r3, r2, r3
 8043974:	2b07      	cmp	r3, #7
 8043976:	d90b      	bls.n	8043990 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8043978:	4b04      	ldr	r3, [pc, #16]	; (804398c <HAL_RCC_OscConfig+0x4b8>)
 804397a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804397e:	f003 0302 	and.w	r3, r3, #2
 8043982:	2b00      	cmp	r3, #0
 8043984:	d004      	beq.n	8043990 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8043986:	2303      	movs	r3, #3
 8043988:	e270      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
 804398a:	bf00      	nop
 804398c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8043990:	4ba8      	ldr	r3, [pc, #672]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043992:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8043996:	f003 0302 	and.w	r3, r3, #2
 804399a:	2b00      	cmp	r3, #0
 804399c:	d1e5      	bne.n	804396a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804399e:	687b      	ldr	r3, [r7, #4]
 80439a0:	681b      	ldr	r3, [r3, #0]
 80439a2:	f003 0304 	and.w	r3, r3, #4
 80439a6:	2b00      	cmp	r3, #0
 80439a8:	f000 812d 	beq.w	8043c06 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 80439ac:	2300      	movs	r3, #0
 80439ae:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80439b0:	4ba0      	ldr	r3, [pc, #640]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 80439b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80439b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80439b8:	2b00      	cmp	r3, #0
 80439ba:	d10d      	bne.n	80439d8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80439bc:	4b9d      	ldr	r3, [pc, #628]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 80439be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80439c0:	4a9c      	ldr	r2, [pc, #624]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 80439c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80439c6:	6593      	str	r3, [r2, #88]	; 0x58
 80439c8:	4b9a      	ldr	r3, [pc, #616]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 80439ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80439cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80439d0:	60bb      	str	r3, [r7, #8]
 80439d2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80439d4:	2301      	movs	r3, #1
 80439d6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80439d8:	4b97      	ldr	r3, [pc, #604]	; (8043c38 <HAL_RCC_OscConfig+0x764>)
 80439da:	681b      	ldr	r3, [r3, #0]
 80439dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80439e0:	2b00      	cmp	r3, #0
 80439e2:	d11e      	bne.n	8043a22 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80439e4:	4b94      	ldr	r3, [pc, #592]	; (8043c38 <HAL_RCC_OscConfig+0x764>)
 80439e6:	681b      	ldr	r3, [r3, #0]
 80439e8:	4a93      	ldr	r2, [pc, #588]	; (8043c38 <HAL_RCC_OscConfig+0x764>)
 80439ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80439ee:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80439f0:	f7fd fe64 	bl	80416bc <HAL_GetTick>
 80439f4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80439f6:	e00e      	b.n	8043a16 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80439f8:	f7fd fe60 	bl	80416bc <HAL_GetTick>
 80439fc:	4602      	mov	r2, r0
 80439fe:	693b      	ldr	r3, [r7, #16]
 8043a00:	1ad3      	subs	r3, r2, r3
 8043a02:	2b02      	cmp	r3, #2
 8043a04:	d907      	bls.n	8043a16 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8043a06:	4b8c      	ldr	r3, [pc, #560]	; (8043c38 <HAL_RCC_OscConfig+0x764>)
 8043a08:	681b      	ldr	r3, [r3, #0]
 8043a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043a0e:	2b00      	cmp	r3, #0
 8043a10:	d101      	bne.n	8043a16 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8043a12:	2303      	movs	r3, #3
 8043a14:	e22a      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8043a16:	4b88      	ldr	r3, [pc, #544]	; (8043c38 <HAL_RCC_OscConfig+0x764>)
 8043a18:	681b      	ldr	r3, [r3, #0]
 8043a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8043a1e:	2b00      	cmp	r3, #0
 8043a20:	d0ea      	beq.n	80439f8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8043a22:	687b      	ldr	r3, [r7, #4]
 8043a24:	689b      	ldr	r3, [r3, #8]
 8043a26:	f003 0301 	and.w	r3, r3, #1
 8043a2a:	2b00      	cmp	r3, #0
 8043a2c:	d01f      	beq.n	8043a6e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 8043a2e:	687b      	ldr	r3, [r7, #4]
 8043a30:	689b      	ldr	r3, [r3, #8]
 8043a32:	f003 0304 	and.w	r3, r3, #4
 8043a36:	2b00      	cmp	r3, #0
 8043a38:	d010      	beq.n	8043a5c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8043a3a:	4b7e      	ldr	r3, [pc, #504]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a40:	4a7c      	ldr	r2, [pc, #496]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a42:	f043 0304 	orr.w	r3, r3, #4
 8043a46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8043a4a:	4b7a      	ldr	r3, [pc, #488]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a50:	4a78      	ldr	r2, [pc, #480]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a52:	f043 0301 	orr.w	r3, r3, #1
 8043a56:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8043a5a:	e018      	b.n	8043a8e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8043a5c:	4b75      	ldr	r3, [pc, #468]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a62:	4a74      	ldr	r2, [pc, #464]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a64:	f043 0301 	orr.w	r3, r3, #1
 8043a68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8043a6c:	e00f      	b.n	8043a8e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8043a6e:	4b71      	ldr	r3, [pc, #452]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a74:	4a6f      	ldr	r2, [pc, #444]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a76:	f023 0301 	bic.w	r3, r3, #1
 8043a7a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8043a7e:	4b6d      	ldr	r3, [pc, #436]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043a84:	4a6b      	ldr	r2, [pc, #428]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043a86:	f023 0304 	bic.w	r3, r3, #4
 8043a8a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8043a8e:	687b      	ldr	r3, [r7, #4]
 8043a90:	689b      	ldr	r3, [r3, #8]
 8043a92:	2b00      	cmp	r3, #0
 8043a94:	d068      	beq.n	8043b68 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043a96:	f7fd fe11 	bl	80416bc <HAL_GetTick>
 8043a9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8043a9c:	e011      	b.n	8043ac2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043a9e:	f7fd fe0d 	bl	80416bc <HAL_GetTick>
 8043aa2:	4602      	mov	r2, r0
 8043aa4:	693b      	ldr	r3, [r7, #16]
 8043aa6:	1ad3      	subs	r3, r2, r3
 8043aa8:	f241 3288 	movw	r2, #5000	; 0x1388
 8043aac:	4293      	cmp	r3, r2
 8043aae:	d908      	bls.n	8043ac2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8043ab0:	4b60      	ldr	r3, [pc, #384]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043ab2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ab6:	f003 0302 	and.w	r3, r3, #2
 8043aba:	2b00      	cmp	r3, #0
 8043abc:	d101      	bne.n	8043ac2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 8043abe:	2303      	movs	r3, #3
 8043ac0:	e1d4      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8043ac2:	4b5c      	ldr	r3, [pc, #368]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043ac4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ac8:	f003 0302 	and.w	r3, r3, #2
 8043acc:	2b00      	cmp	r3, #0
 8043ace:	d0e6      	beq.n	8043a9e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 8043ad0:	687b      	ldr	r3, [r7, #4]
 8043ad2:	689b      	ldr	r3, [r3, #8]
 8043ad4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043ad8:	2b00      	cmp	r3, #0
 8043ada:	d022      	beq.n	8043b22 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8043adc:	4b55      	ldr	r3, [pc, #340]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043ade:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ae2:	4a54      	ldr	r2, [pc, #336]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043ae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043ae8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8043aec:	e011      	b.n	8043b12 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043aee:	f7fd fde5 	bl	80416bc <HAL_GetTick>
 8043af2:	4602      	mov	r2, r0
 8043af4:	693b      	ldr	r3, [r7, #16]
 8043af6:	1ad3      	subs	r3, r2, r3
 8043af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8043afc:	4293      	cmp	r3, r2
 8043afe:	d908      	bls.n	8043b12 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8043b00:	4b4c      	ldr	r3, [pc, #304]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043b0a:	2b00      	cmp	r3, #0
 8043b0c:	d101      	bne.n	8043b12 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 8043b0e:	2303      	movs	r3, #3
 8043b10:	e1ac      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 8043b12:	4b48      	ldr	r3, [pc, #288]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b18:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043b1c:	2b00      	cmp	r3, #0
 8043b1e:	d0e6      	beq.n	8043aee <HAL_RCC_OscConfig+0x61a>
 8043b20:	e068      	b.n	8043bf4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8043b22:	4b44      	ldr	r3, [pc, #272]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b28:	4a42      	ldr	r2, [pc, #264]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b2a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8043b2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043b32:	e011      	b.n	8043b58 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043b34:	f7fd fdc2 	bl	80416bc <HAL_GetTick>
 8043b38:	4602      	mov	r2, r0
 8043b3a:	693b      	ldr	r3, [r7, #16]
 8043b3c:	1ad3      	subs	r3, r2, r3
 8043b3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8043b42:	4293      	cmp	r3, r2
 8043b44:	d908      	bls.n	8043b58 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043b46:	4b3b      	ldr	r3, [pc, #236]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043b50:	2b00      	cmp	r3, #0
 8043b52:	d001      	beq.n	8043b58 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8043b54:	2303      	movs	r3, #3
 8043b56:	e189      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043b58:	4b36      	ldr	r3, [pc, #216]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043b62:	2b00      	cmp	r3, #0
 8043b64:	d1e6      	bne.n	8043b34 <HAL_RCC_OscConfig+0x660>
 8043b66:	e045      	b.n	8043bf4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043b68:	f7fd fda8 	bl	80416bc <HAL_GetTick>
 8043b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8043b6e:	e011      	b.n	8043b94 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043b70:	f7fd fda4 	bl	80416bc <HAL_GetTick>
 8043b74:	4602      	mov	r2, r0
 8043b76:	693b      	ldr	r3, [r7, #16]
 8043b78:	1ad3      	subs	r3, r2, r3
 8043b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8043b7e:	4293      	cmp	r3, r2
 8043b80:	d908      	bls.n	8043b94 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8043b82:	4b2c      	ldr	r3, [pc, #176]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b88:	f003 0302 	and.w	r3, r3, #2
 8043b8c:	2b00      	cmp	r3, #0
 8043b8e:	d001      	beq.n	8043b94 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8043b90:	2303      	movs	r3, #3
 8043b92:	e16b      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8043b94:	4b27      	ldr	r3, [pc, #156]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043b9a:	f003 0302 	and.w	r3, r3, #2
 8043b9e:	2b00      	cmp	r3, #0
 8043ba0:	d1e6      	bne.n	8043b70 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8043ba2:	4b24      	ldr	r3, [pc, #144]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043bac:	2b00      	cmp	r3, #0
 8043bae:	d021      	beq.n	8043bf4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8043bb0:	4b20      	ldr	r3, [pc, #128]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043bb6:	4a1f      	ldr	r2, [pc, #124]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8043bbc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043bc0:	e011      	b.n	8043be6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8043bc2:	f7fd fd7b 	bl	80416bc <HAL_GetTick>
 8043bc6:	4602      	mov	r2, r0
 8043bc8:	693b      	ldr	r3, [r7, #16]
 8043bca:	1ad3      	subs	r3, r2, r3
 8043bcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8043bd0:	4293      	cmp	r3, r2
 8043bd2:	d908      	bls.n	8043be6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043bd4:	4b17      	ldr	r3, [pc, #92]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043bde:	2b00      	cmp	r3, #0
 8043be0:	d001      	beq.n	8043be6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 8043be2:	2303      	movs	r3, #3
 8043be4:	e142      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8043be6:	4b13      	ldr	r3, [pc, #76]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043be8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8043bec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8043bf0:	2b00      	cmp	r3, #0
 8043bf2:	d1e6      	bne.n	8043bc2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8043bf4:	7ffb      	ldrb	r3, [r7, #31]
 8043bf6:	2b01      	cmp	r3, #1
 8043bf8:	d105      	bne.n	8043c06 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8043bfa:	4b0e      	ldr	r3, [pc, #56]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8043bfe:	4a0d      	ldr	r2, [pc, #52]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043c00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8043c04:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8043c06:	687b      	ldr	r3, [r7, #4]
 8043c08:	681b      	ldr	r3, [r3, #0]
 8043c0a:	f003 0320 	and.w	r3, r3, #32
 8043c0e:	2b00      	cmp	r3, #0
 8043c10:	d04f      	beq.n	8043cb2 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8043c12:	687b      	ldr	r3, [r7, #4]
 8043c14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043c16:	2b00      	cmp	r3, #0
 8043c18:	d028      	beq.n	8043c6c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8043c1a:	4b06      	ldr	r3, [pc, #24]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043c1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043c20:	4a04      	ldr	r2, [pc, #16]	; (8043c34 <HAL_RCC_OscConfig+0x760>)
 8043c22:	f043 0301 	orr.w	r3, r3, #1
 8043c26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043c2a:	f7fd fd47 	bl	80416bc <HAL_GetTick>
 8043c2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8043c30:	e014      	b.n	8043c5c <HAL_RCC_OscConfig+0x788>
 8043c32:	bf00      	nop
 8043c34:	40021000 	.word	0x40021000
 8043c38:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043c3c:	f7fd fd3e 	bl	80416bc <HAL_GetTick>
 8043c40:	4602      	mov	r2, r0
 8043c42:	693b      	ldr	r3, [r7, #16]
 8043c44:	1ad3      	subs	r3, r2, r3
 8043c46:	2b02      	cmp	r3, #2
 8043c48:	d908      	bls.n	8043c5c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8043c4a:	4b8a      	ldr	r3, [pc, #552]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043c4c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043c50:	f003 0302 	and.w	r3, r3, #2
 8043c54:	2b00      	cmp	r3, #0
 8043c56:	d101      	bne.n	8043c5c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8043c58:	2303      	movs	r3, #3
 8043c5a:	e107      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8043c5c:	4b85      	ldr	r3, [pc, #532]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043c5e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043c62:	f003 0302 	and.w	r3, r3, #2
 8043c66:	2b00      	cmp	r3, #0
 8043c68:	d0e8      	beq.n	8043c3c <HAL_RCC_OscConfig+0x768>
 8043c6a:	e022      	b.n	8043cb2 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8043c6c:	4b81      	ldr	r3, [pc, #516]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043c72:	4a80      	ldr	r2, [pc, #512]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043c74:	f023 0301 	bic.w	r3, r3, #1
 8043c78:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8043c7c:	f7fd fd1e 	bl	80416bc <HAL_GetTick>
 8043c80:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8043c82:	e00f      	b.n	8043ca4 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8043c84:	f7fd fd1a 	bl	80416bc <HAL_GetTick>
 8043c88:	4602      	mov	r2, r0
 8043c8a:	693b      	ldr	r3, [r7, #16]
 8043c8c:	1ad3      	subs	r3, r2, r3
 8043c8e:	2b02      	cmp	r3, #2
 8043c90:	d908      	bls.n	8043ca4 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8043c92:	4b78      	ldr	r3, [pc, #480]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043c94:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043c98:	f003 0302 	and.w	r3, r3, #2
 8043c9c:	2b00      	cmp	r3, #0
 8043c9e:	d001      	beq.n	8043ca4 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8043ca0:	2303      	movs	r3, #3
 8043ca2:	e0e3      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8043ca4:	4b73      	ldr	r3, [pc, #460]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043ca6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8043caa:	f003 0302 	and.w	r3, r3, #2
 8043cae:	2b00      	cmp	r3, #0
 8043cb0:	d1e8      	bne.n	8043c84 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8043cb2:	687b      	ldr	r3, [r7, #4]
 8043cb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043cb6:	2b00      	cmp	r3, #0
 8043cb8:	f000 80d7 	beq.w	8043e6a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8043cbc:	4b6d      	ldr	r3, [pc, #436]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043cbe:	689b      	ldr	r3, [r3, #8]
 8043cc0:	f003 030c 	and.w	r3, r3, #12
 8043cc4:	2b0c      	cmp	r3, #12
 8043cc6:	f000 8091 	beq.w	8043dec <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8043cca:	687b      	ldr	r3, [r7, #4]
 8043ccc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043cce:	2b02      	cmp	r3, #2
 8043cd0:	d166      	bne.n	8043da0 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043cd2:	4b68      	ldr	r3, [pc, #416]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043cd4:	681b      	ldr	r3, [r3, #0]
 8043cd6:	4a67      	ldr	r2, [pc, #412]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043cd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8043cdc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043cde:	f7fd fced 	bl	80416bc <HAL_GetTick>
 8043ce2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043ce4:	e00e      	b.n	8043d04 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043ce6:	f7fd fce9 	bl	80416bc <HAL_GetTick>
 8043cea:	4602      	mov	r2, r0
 8043cec:	693b      	ldr	r3, [r7, #16]
 8043cee:	1ad3      	subs	r3, r2, r3
 8043cf0:	2b02      	cmp	r3, #2
 8043cf2:	d907      	bls.n	8043d04 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043cf4:	4b5f      	ldr	r3, [pc, #380]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043cf6:	681b      	ldr	r3, [r3, #0]
 8043cf8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043cfc:	2b00      	cmp	r3, #0
 8043cfe:	d001      	beq.n	8043d04 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 8043d00:	2303      	movs	r3, #3
 8043d02:	e0b3      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043d04:	4b5b      	ldr	r3, [pc, #364]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d06:	681b      	ldr	r3, [r3, #0]
 8043d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043d0c:	2b00      	cmp	r3, #0
 8043d0e:	d1ea      	bne.n	8043ce6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8043d10:	4b58      	ldr	r3, [pc, #352]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d12:	68da      	ldr	r2, [r3, #12]
 8043d14:	4b58      	ldr	r3, [pc, #352]	; (8043e78 <HAL_RCC_OscConfig+0x9a4>)
 8043d16:	4013      	ands	r3, r2
 8043d18:	687a      	ldr	r2, [r7, #4]
 8043d1a:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8043d1c:	687a      	ldr	r2, [r7, #4]
 8043d1e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8043d20:	3a01      	subs	r2, #1
 8043d22:	0112      	lsls	r2, r2, #4
 8043d24:	4311      	orrs	r1, r2
 8043d26:	687a      	ldr	r2, [r7, #4]
 8043d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8043d2a:	0212      	lsls	r2, r2, #8
 8043d2c:	4311      	orrs	r1, r2
 8043d2e:	687a      	ldr	r2, [r7, #4]
 8043d30:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8043d32:	0852      	lsrs	r2, r2, #1
 8043d34:	3a01      	subs	r2, #1
 8043d36:	0552      	lsls	r2, r2, #21
 8043d38:	4311      	orrs	r1, r2
 8043d3a:	687a      	ldr	r2, [r7, #4]
 8043d3c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8043d3e:	0852      	lsrs	r2, r2, #1
 8043d40:	3a01      	subs	r2, #1
 8043d42:	0652      	lsls	r2, r2, #25
 8043d44:	4311      	orrs	r1, r2
 8043d46:	687a      	ldr	r2, [r7, #4]
 8043d48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8043d4a:	06d2      	lsls	r2, r2, #27
 8043d4c:	430a      	orrs	r2, r1
 8043d4e:	4949      	ldr	r1, [pc, #292]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d50:	4313      	orrs	r3, r2
 8043d52:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8043d54:	4b47      	ldr	r3, [pc, #284]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d56:	681b      	ldr	r3, [r3, #0]
 8043d58:	4a46      	ldr	r2, [pc, #280]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d5a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8043d5e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8043d60:	4b44      	ldr	r3, [pc, #272]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d62:	68db      	ldr	r3, [r3, #12]
 8043d64:	4a43      	ldr	r2, [pc, #268]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8043d6a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043d6c:	f7fd fca6 	bl	80416bc <HAL_GetTick>
 8043d70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8043d72:	e00e      	b.n	8043d92 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043d74:	f7fd fca2 	bl	80416bc <HAL_GetTick>
 8043d78:	4602      	mov	r2, r0
 8043d7a:	693b      	ldr	r3, [r7, #16]
 8043d7c:	1ad3      	subs	r3, r2, r3
 8043d7e:	2b02      	cmp	r3, #2
 8043d80:	d907      	bls.n	8043d92 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8043d82:	4b3c      	ldr	r3, [pc, #240]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d84:	681b      	ldr	r3, [r3, #0]
 8043d86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043d8a:	2b00      	cmp	r3, #0
 8043d8c:	d101      	bne.n	8043d92 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8043d8e:	2303      	movs	r3, #3
 8043d90:	e06c      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8043d92:	4b38      	ldr	r3, [pc, #224]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043d94:	681b      	ldr	r3, [r3, #0]
 8043d96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043d9a:	2b00      	cmp	r3, #0
 8043d9c:	d0ea      	beq.n	8043d74 <HAL_RCC_OscConfig+0x8a0>
 8043d9e:	e064      	b.n	8043e6a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8043da0:	4b34      	ldr	r3, [pc, #208]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043da2:	681b      	ldr	r3, [r3, #0]
 8043da4:	4a33      	ldr	r2, [pc, #204]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043da6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8043daa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8043dac:	f7fd fc86 	bl	80416bc <HAL_GetTick>
 8043db0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043db2:	e00e      	b.n	8043dd2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8043db4:	f7fd fc82 	bl	80416bc <HAL_GetTick>
 8043db8:	4602      	mov	r2, r0
 8043dba:	693b      	ldr	r3, [r7, #16]
 8043dbc:	1ad3      	subs	r3, r2, r3
 8043dbe:	2b02      	cmp	r3, #2
 8043dc0:	d907      	bls.n	8043dd2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043dc2:	4b2c      	ldr	r3, [pc, #176]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043dc4:	681b      	ldr	r3, [r3, #0]
 8043dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043dca:	2b00      	cmp	r3, #0
 8043dcc:	d001      	beq.n	8043dd2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8043dce:	2303      	movs	r3, #3
 8043dd0:	e04c      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8043dd2:	4b28      	ldr	r3, [pc, #160]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043dd4:	681b      	ldr	r3, [r3, #0]
 8043dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043dda:	2b00      	cmp	r3, #0
 8043ddc:	d1ea      	bne.n	8043db4 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8043dde:	4b25      	ldr	r3, [pc, #148]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043de0:	68da      	ldr	r2, [r3, #12]
 8043de2:	4924      	ldr	r1, [pc, #144]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043de4:	4b25      	ldr	r3, [pc, #148]	; (8043e7c <HAL_RCC_OscConfig+0x9a8>)
 8043de6:	4013      	ands	r3, r2
 8043de8:	60cb      	str	r3, [r1, #12]
 8043dea:	e03e      	b.n	8043e6a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8043dec:	687b      	ldr	r3, [r7, #4]
 8043dee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8043df0:	2b01      	cmp	r3, #1
 8043df2:	d101      	bne.n	8043df8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8043df4:	2301      	movs	r3, #1
 8043df6:	e039      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8043df8:	4b1e      	ldr	r3, [pc, #120]	; (8043e74 <HAL_RCC_OscConfig+0x9a0>)
 8043dfa:	68db      	ldr	r3, [r3, #12]
 8043dfc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8043dfe:	697b      	ldr	r3, [r7, #20]
 8043e00:	f003 0203 	and.w	r2, r3, #3
 8043e04:	687b      	ldr	r3, [r7, #4]
 8043e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8043e08:	429a      	cmp	r2, r3
 8043e0a:	d12c      	bne.n	8043e66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8043e0c:	697b      	ldr	r3, [r7, #20]
 8043e0e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8043e12:	687b      	ldr	r3, [r7, #4]
 8043e14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8043e16:	3b01      	subs	r3, #1
 8043e18:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8043e1a:	429a      	cmp	r2, r3
 8043e1c:	d123      	bne.n	8043e66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8043e1e:	697b      	ldr	r3, [r7, #20]
 8043e20:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8043e24:	687b      	ldr	r3, [r7, #4]
 8043e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8043e28:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8043e2a:	429a      	cmp	r2, r3
 8043e2c:	d11b      	bne.n	8043e66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8043e2e:	697b      	ldr	r3, [r7, #20]
 8043e30:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8043e34:	687b      	ldr	r3, [r7, #4]
 8043e36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8043e38:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8043e3a:	429a      	cmp	r2, r3
 8043e3c:	d113      	bne.n	8043e66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8043e3e:	697b      	ldr	r3, [r7, #20]
 8043e40:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8043e44:	687b      	ldr	r3, [r7, #4]
 8043e46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8043e48:	085b      	lsrs	r3, r3, #1
 8043e4a:	3b01      	subs	r3, #1
 8043e4c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8043e4e:	429a      	cmp	r2, r3
 8043e50:	d109      	bne.n	8043e66 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8043e52:	697b      	ldr	r3, [r7, #20]
 8043e54:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8043e58:	687b      	ldr	r3, [r7, #4]
 8043e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043e5c:	085b      	lsrs	r3, r3, #1
 8043e5e:	3b01      	subs	r3, #1
 8043e60:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8043e62:	429a      	cmp	r2, r3
 8043e64:	d001      	beq.n	8043e6a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8043e66:	2301      	movs	r3, #1
 8043e68:	e000      	b.n	8043e6c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8043e6a:	2300      	movs	r3, #0
}
 8043e6c:	4618      	mov	r0, r3
 8043e6e:	3720      	adds	r7, #32
 8043e70:	46bd      	mov	sp, r7
 8043e72:	bd80      	pop	{r7, pc}
 8043e74:	40021000 	.word	0x40021000
 8043e78:	019f800c 	.word	0x019f800c
 8043e7c:	feeefffc 	.word	0xfeeefffc

08043e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8043e80:	b580      	push	{r7, lr}
 8043e82:	b086      	sub	sp, #24
 8043e84:	af00      	add	r7, sp, #0
 8043e86:	6078      	str	r0, [r7, #4]
 8043e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8043e8a:	2300      	movs	r3, #0
 8043e8c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8043e8e:	687b      	ldr	r3, [r7, #4]
 8043e90:	2b00      	cmp	r3, #0
 8043e92:	d101      	bne.n	8043e98 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8043e94:	2301      	movs	r3, #1
 8043e96:	e11c      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8043e98:	4b90      	ldr	r3, [pc, #576]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8043e9a:	681b      	ldr	r3, [r3, #0]
 8043e9c:	f003 030f 	and.w	r3, r3, #15
 8043ea0:	683a      	ldr	r2, [r7, #0]
 8043ea2:	429a      	cmp	r2, r3
 8043ea4:	d910      	bls.n	8043ec8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8043ea6:	4b8d      	ldr	r3, [pc, #564]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8043ea8:	681b      	ldr	r3, [r3, #0]
 8043eaa:	f023 020f 	bic.w	r2, r3, #15
 8043eae:	498b      	ldr	r1, [pc, #556]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8043eb0:	683b      	ldr	r3, [r7, #0]
 8043eb2:	4313      	orrs	r3, r2
 8043eb4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8043eb6:	4b89      	ldr	r3, [pc, #548]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8043eb8:	681b      	ldr	r3, [r3, #0]
 8043eba:	f003 030f 	and.w	r3, r3, #15
 8043ebe:	683a      	ldr	r2, [r7, #0]
 8043ec0:	429a      	cmp	r2, r3
 8043ec2:	d001      	beq.n	8043ec8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8043ec4:	2301      	movs	r3, #1
 8043ec6:	e104      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8043ec8:	687b      	ldr	r3, [r7, #4]
 8043eca:	681b      	ldr	r3, [r3, #0]
 8043ecc:	f003 0302 	and.w	r3, r3, #2
 8043ed0:	2b00      	cmp	r3, #0
 8043ed2:	d010      	beq.n	8043ef6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8043ed4:	687b      	ldr	r3, [r7, #4]
 8043ed6:	689a      	ldr	r2, [r3, #8]
 8043ed8:	4b81      	ldr	r3, [pc, #516]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043eda:	689b      	ldr	r3, [r3, #8]
 8043edc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8043ee0:	429a      	cmp	r2, r3
 8043ee2:	d908      	bls.n	8043ef6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8043ee4:	4b7e      	ldr	r3, [pc, #504]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043ee6:	689b      	ldr	r3, [r3, #8]
 8043ee8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8043eec:	687b      	ldr	r3, [r7, #4]
 8043eee:	689b      	ldr	r3, [r3, #8]
 8043ef0:	497b      	ldr	r1, [pc, #492]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043ef2:	4313      	orrs	r3, r2
 8043ef4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8043ef6:	687b      	ldr	r3, [r7, #4]
 8043ef8:	681b      	ldr	r3, [r3, #0]
 8043efa:	f003 0301 	and.w	r3, r3, #1
 8043efe:	2b00      	cmp	r3, #0
 8043f00:	f000 8085 	beq.w	804400e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8043f04:	687b      	ldr	r3, [r7, #4]
 8043f06:	685b      	ldr	r3, [r3, #4]
 8043f08:	2b03      	cmp	r3, #3
 8043f0a:	d11f      	bne.n	8043f4c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8043f0c:	4b74      	ldr	r3, [pc, #464]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f0e:	681b      	ldr	r3, [r3, #0]
 8043f10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8043f14:	2b00      	cmp	r3, #0
 8043f16:	d101      	bne.n	8043f1c <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8043f18:	2301      	movs	r3, #1
 8043f1a:	e0da      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8043f1c:	f000 fa26 	bl	804436c <RCC_GetSysClockFreqFromPLLSource>
 8043f20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8043f22:	693b      	ldr	r3, [r7, #16]
 8043f24:	4a6f      	ldr	r2, [pc, #444]	; (80440e4 <HAL_RCC_ClockConfig+0x264>)
 8043f26:	4293      	cmp	r3, r2
 8043f28:	d947      	bls.n	8043fba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8043f2a:	4b6d      	ldr	r3, [pc, #436]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f2c:	689b      	ldr	r3, [r3, #8]
 8043f2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8043f32:	2b00      	cmp	r3, #0
 8043f34:	d141      	bne.n	8043fba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8043f36:	4b6a      	ldr	r3, [pc, #424]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f38:	689b      	ldr	r3, [r3, #8]
 8043f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8043f3e:	4a68      	ldr	r2, [pc, #416]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043f44:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8043f46:	2380      	movs	r3, #128	; 0x80
 8043f48:	617b      	str	r3, [r7, #20]
 8043f4a:	e036      	b.n	8043fba <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8043f4c:	687b      	ldr	r3, [r7, #4]
 8043f4e:	685b      	ldr	r3, [r3, #4]
 8043f50:	2b02      	cmp	r3, #2
 8043f52:	d107      	bne.n	8043f64 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8043f54:	4b62      	ldr	r3, [pc, #392]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f56:	681b      	ldr	r3, [r3, #0]
 8043f58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8043f5c:	2b00      	cmp	r3, #0
 8043f5e:	d115      	bne.n	8043f8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8043f60:	2301      	movs	r3, #1
 8043f62:	e0b6      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8043f64:	687b      	ldr	r3, [r7, #4]
 8043f66:	685b      	ldr	r3, [r3, #4]
 8043f68:	2b00      	cmp	r3, #0
 8043f6a:	d107      	bne.n	8043f7c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8043f6c:	4b5c      	ldr	r3, [pc, #368]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f6e:	681b      	ldr	r3, [r3, #0]
 8043f70:	f003 0302 	and.w	r3, r3, #2
 8043f74:	2b00      	cmp	r3, #0
 8043f76:	d109      	bne.n	8043f8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8043f78:	2301      	movs	r3, #1
 8043f7a:	e0aa      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8043f7c:	4b58      	ldr	r3, [pc, #352]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f7e:	681b      	ldr	r3, [r3, #0]
 8043f80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8043f84:	2b00      	cmp	r3, #0
 8043f86:	d101      	bne.n	8043f8c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8043f88:	2301      	movs	r3, #1
 8043f8a:	e0a2      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8043f8c:	f000 f8b0 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 8043f90:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8043f92:	693b      	ldr	r3, [r7, #16]
 8043f94:	4a53      	ldr	r2, [pc, #332]	; (80440e4 <HAL_RCC_ClockConfig+0x264>)
 8043f96:	4293      	cmp	r3, r2
 8043f98:	d90f      	bls.n	8043fba <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8043f9a:	4b51      	ldr	r3, [pc, #324]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043f9c:	689b      	ldr	r3, [r3, #8]
 8043f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8043fa2:	2b00      	cmp	r3, #0
 8043fa4:	d109      	bne.n	8043fba <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8043fa6:	4b4e      	ldr	r3, [pc, #312]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043fa8:	689b      	ldr	r3, [r3, #8]
 8043faa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8043fae:	4a4c      	ldr	r2, [pc, #304]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043fb0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8043fb4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8043fb6:	2380      	movs	r3, #128	; 0x80
 8043fb8:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8043fba:	4b49      	ldr	r3, [pc, #292]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043fbc:	689b      	ldr	r3, [r3, #8]
 8043fbe:	f023 0203 	bic.w	r2, r3, #3
 8043fc2:	687b      	ldr	r3, [r7, #4]
 8043fc4:	685b      	ldr	r3, [r3, #4]
 8043fc6:	4946      	ldr	r1, [pc, #280]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043fc8:	4313      	orrs	r3, r2
 8043fca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8043fcc:	f7fd fb76 	bl	80416bc <HAL_GetTick>
 8043fd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043fd2:	e013      	b.n	8043ffc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8043fd4:	f7fd fb72 	bl	80416bc <HAL_GetTick>
 8043fd8:	4602      	mov	r2, r0
 8043fda:	68fb      	ldr	r3, [r7, #12]
 8043fdc:	1ad3      	subs	r3, r2, r3
 8043fde:	f241 3288 	movw	r2, #5000	; 0x1388
 8043fe2:	4293      	cmp	r3, r2
 8043fe4:	d90a      	bls.n	8043ffc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043fe6:	4b3e      	ldr	r3, [pc, #248]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043fe8:	689b      	ldr	r3, [r3, #8]
 8043fea:	f003 020c 	and.w	r2, r3, #12
 8043fee:	687b      	ldr	r3, [r7, #4]
 8043ff0:	685b      	ldr	r3, [r3, #4]
 8043ff2:	009b      	lsls	r3, r3, #2
 8043ff4:	429a      	cmp	r2, r3
 8043ff6:	d001      	beq.n	8043ffc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8043ff8:	2303      	movs	r3, #3
 8043ffa:	e06a      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8043ffc:	4b38      	ldr	r3, [pc, #224]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8043ffe:	689b      	ldr	r3, [r3, #8]
 8044000:	f003 020c 	and.w	r2, r3, #12
 8044004:	687b      	ldr	r3, [r7, #4]
 8044006:	685b      	ldr	r3, [r3, #4]
 8044008:	009b      	lsls	r3, r3, #2
 804400a:	429a      	cmp	r2, r3
 804400c:	d1e2      	bne.n	8043fd4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 804400e:	697b      	ldr	r3, [r7, #20]
 8044010:	2b80      	cmp	r3, #128	; 0x80
 8044012:	d105      	bne.n	8044020 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8044014:	4b32      	ldr	r3, [pc, #200]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8044016:	689b      	ldr	r3, [r3, #8]
 8044018:	4a31      	ldr	r2, [pc, #196]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 804401a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 804401e:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8044020:	687b      	ldr	r3, [r7, #4]
 8044022:	681b      	ldr	r3, [r3, #0]
 8044024:	f003 0302 	and.w	r3, r3, #2
 8044028:	2b00      	cmp	r3, #0
 804402a:	d010      	beq.n	804404e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 804402c:	687b      	ldr	r3, [r7, #4]
 804402e:	689a      	ldr	r2, [r3, #8]
 8044030:	4b2b      	ldr	r3, [pc, #172]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8044032:	689b      	ldr	r3, [r3, #8]
 8044034:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8044038:	429a      	cmp	r2, r3
 804403a:	d208      	bcs.n	804404e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 804403c:	4b28      	ldr	r3, [pc, #160]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 804403e:	689b      	ldr	r3, [r3, #8]
 8044040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8044044:	687b      	ldr	r3, [r7, #4]
 8044046:	689b      	ldr	r3, [r3, #8]
 8044048:	4925      	ldr	r1, [pc, #148]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 804404a:	4313      	orrs	r3, r2
 804404c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 804404e:	4b23      	ldr	r3, [pc, #140]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8044050:	681b      	ldr	r3, [r3, #0]
 8044052:	f003 030f 	and.w	r3, r3, #15
 8044056:	683a      	ldr	r2, [r7, #0]
 8044058:	429a      	cmp	r2, r3
 804405a:	d210      	bcs.n	804407e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 804405c:	4b1f      	ldr	r3, [pc, #124]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 804405e:	681b      	ldr	r3, [r3, #0]
 8044060:	f023 020f 	bic.w	r2, r3, #15
 8044064:	491d      	ldr	r1, [pc, #116]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 8044066:	683b      	ldr	r3, [r7, #0]
 8044068:	4313      	orrs	r3, r2
 804406a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 804406c:	4b1b      	ldr	r3, [pc, #108]	; (80440dc <HAL_RCC_ClockConfig+0x25c>)
 804406e:	681b      	ldr	r3, [r3, #0]
 8044070:	f003 030f 	and.w	r3, r3, #15
 8044074:	683a      	ldr	r2, [r7, #0]
 8044076:	429a      	cmp	r2, r3
 8044078:	d001      	beq.n	804407e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 804407a:	2301      	movs	r3, #1
 804407c:	e029      	b.n	80440d2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 804407e:	687b      	ldr	r3, [r7, #4]
 8044080:	681b      	ldr	r3, [r3, #0]
 8044082:	f003 0304 	and.w	r3, r3, #4
 8044086:	2b00      	cmp	r3, #0
 8044088:	d008      	beq.n	804409c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 804408a:	4b15      	ldr	r3, [pc, #84]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 804408c:	689b      	ldr	r3, [r3, #8]
 804408e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8044092:	687b      	ldr	r3, [r7, #4]
 8044094:	68db      	ldr	r3, [r3, #12]
 8044096:	4912      	ldr	r1, [pc, #72]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 8044098:	4313      	orrs	r3, r2
 804409a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 804409c:	687b      	ldr	r3, [r7, #4]
 804409e:	681b      	ldr	r3, [r3, #0]
 80440a0:	f003 0308 	and.w	r3, r3, #8
 80440a4:	2b00      	cmp	r3, #0
 80440a6:	d009      	beq.n	80440bc <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80440a8:	4b0d      	ldr	r3, [pc, #52]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 80440aa:	689b      	ldr	r3, [r3, #8]
 80440ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80440b0:	687b      	ldr	r3, [r7, #4]
 80440b2:	691b      	ldr	r3, [r3, #16]
 80440b4:	00db      	lsls	r3, r3, #3
 80440b6:	490a      	ldr	r1, [pc, #40]	; (80440e0 <HAL_RCC_ClockConfig+0x260>)
 80440b8:	4313      	orrs	r3, r2
 80440ba:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80440bc:	f000 f8b6 	bl	804422c <HAL_RCC_GetHCLKFreq>
 80440c0:	4603      	mov	r3, r0
 80440c2:	4a09      	ldr	r2, [pc, #36]	; (80440e8 <HAL_RCC_ClockConfig+0x268>)
 80440c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80440c6:	4b09      	ldr	r3, [pc, #36]	; (80440ec <HAL_RCC_ClockConfig+0x26c>)
 80440c8:	681b      	ldr	r3, [r3, #0]
 80440ca:	4618      	mov	r0, r3
 80440cc:	f7fd faa6 	bl	804161c <HAL_InitTick>
 80440d0:	4603      	mov	r3, r0
}
 80440d2:	4618      	mov	r0, r3
 80440d4:	3718      	adds	r7, #24
 80440d6:	46bd      	mov	sp, r7
 80440d8:	bd80      	pop	{r7, pc}
 80440da:	bf00      	nop
 80440dc:	40022000 	.word	0x40022000
 80440e0:	40021000 	.word	0x40021000
 80440e4:	04c4b400 	.word	0x04c4b400
 80440e8:	20018000 	.word	0x20018000
 80440ec:	20018004 	.word	0x20018004

080440f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80440f0:	b480      	push	{r7}
 80440f2:	b089      	sub	sp, #36	; 0x24
 80440f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80440f6:	2300      	movs	r3, #0
 80440f8:	61fb      	str	r3, [r7, #28]
 80440fa:	2300      	movs	r3, #0
 80440fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80440fe:	4b47      	ldr	r3, [pc, #284]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 8044100:	689b      	ldr	r3, [r3, #8]
 8044102:	f003 030c 	and.w	r3, r3, #12
 8044106:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8044108:	4b44      	ldr	r3, [pc, #272]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 804410a:	68db      	ldr	r3, [r3, #12]
 804410c:	f003 0303 	and.w	r3, r3, #3
 8044110:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8044112:	693b      	ldr	r3, [r7, #16]
 8044114:	2b00      	cmp	r3, #0
 8044116:	d005      	beq.n	8044124 <HAL_RCC_GetSysClockFreq+0x34>
 8044118:	693b      	ldr	r3, [r7, #16]
 804411a:	2b0c      	cmp	r3, #12
 804411c:	d121      	bne.n	8044162 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 804411e:	68fb      	ldr	r3, [r7, #12]
 8044120:	2b01      	cmp	r3, #1
 8044122:	d11e      	bne.n	8044162 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8044124:	4b3d      	ldr	r3, [pc, #244]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 8044126:	681b      	ldr	r3, [r3, #0]
 8044128:	f003 0308 	and.w	r3, r3, #8
 804412c:	2b00      	cmp	r3, #0
 804412e:	d107      	bne.n	8044140 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8044130:	4b3a      	ldr	r3, [pc, #232]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 8044132:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8044136:	0a1b      	lsrs	r3, r3, #8
 8044138:	f003 030f 	and.w	r3, r3, #15
 804413c:	61fb      	str	r3, [r7, #28]
 804413e:	e005      	b.n	804414c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8044140:	4b36      	ldr	r3, [pc, #216]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 8044142:	681b      	ldr	r3, [r3, #0]
 8044144:	091b      	lsrs	r3, r3, #4
 8044146:	f003 030f 	and.w	r3, r3, #15
 804414a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 804414c:	4a34      	ldr	r2, [pc, #208]	; (8044220 <HAL_RCC_GetSysClockFreq+0x130>)
 804414e:	69fb      	ldr	r3, [r7, #28]
 8044150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044154:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8044156:	693b      	ldr	r3, [r7, #16]
 8044158:	2b00      	cmp	r3, #0
 804415a:	d10d      	bne.n	8044178 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 804415c:	69fb      	ldr	r3, [r7, #28]
 804415e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8044160:	e00a      	b.n	8044178 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8044162:	693b      	ldr	r3, [r7, #16]
 8044164:	2b04      	cmp	r3, #4
 8044166:	d102      	bne.n	804416e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8044168:	4b2e      	ldr	r3, [pc, #184]	; (8044224 <HAL_RCC_GetSysClockFreq+0x134>)
 804416a:	61bb      	str	r3, [r7, #24]
 804416c:	e004      	b.n	8044178 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 804416e:	693b      	ldr	r3, [r7, #16]
 8044170:	2b08      	cmp	r3, #8
 8044172:	d101      	bne.n	8044178 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8044174:	4b2c      	ldr	r3, [pc, #176]	; (8044228 <HAL_RCC_GetSysClockFreq+0x138>)
 8044176:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8044178:	693b      	ldr	r3, [r7, #16]
 804417a:	2b0c      	cmp	r3, #12
 804417c:	d146      	bne.n	804420c <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 804417e:	4b27      	ldr	r3, [pc, #156]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 8044180:	68db      	ldr	r3, [r3, #12]
 8044182:	f003 0303 	and.w	r3, r3, #3
 8044186:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8044188:	4b24      	ldr	r3, [pc, #144]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 804418a:	68db      	ldr	r3, [r3, #12]
 804418c:	091b      	lsrs	r3, r3, #4
 804418e:	f003 030f 	and.w	r3, r3, #15
 8044192:	3301      	adds	r3, #1
 8044194:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8044196:	68bb      	ldr	r3, [r7, #8]
 8044198:	2b02      	cmp	r3, #2
 804419a:	d003      	beq.n	80441a4 <HAL_RCC_GetSysClockFreq+0xb4>
 804419c:	68bb      	ldr	r3, [r7, #8]
 804419e:	2b03      	cmp	r3, #3
 80441a0:	d00d      	beq.n	80441be <HAL_RCC_GetSysClockFreq+0xce>
 80441a2:	e019      	b.n	80441d8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80441a4:	4a1f      	ldr	r2, [pc, #124]	; (8044224 <HAL_RCC_GetSysClockFreq+0x134>)
 80441a6:	687b      	ldr	r3, [r7, #4]
 80441a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80441ac:	4a1b      	ldr	r2, [pc, #108]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 80441ae:	68d2      	ldr	r2, [r2, #12]
 80441b0:	0a12      	lsrs	r2, r2, #8
 80441b2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80441b6:	fb02 f303 	mul.w	r3, r2, r3
 80441ba:	617b      	str	r3, [r7, #20]
        break;
 80441bc:	e019      	b.n	80441f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80441be:	4a1a      	ldr	r2, [pc, #104]	; (8044228 <HAL_RCC_GetSysClockFreq+0x138>)
 80441c0:	687b      	ldr	r3, [r7, #4]
 80441c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80441c6:	4a15      	ldr	r2, [pc, #84]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 80441c8:	68d2      	ldr	r2, [r2, #12]
 80441ca:	0a12      	lsrs	r2, r2, #8
 80441cc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80441d0:	fb02 f303 	mul.w	r3, r2, r3
 80441d4:	617b      	str	r3, [r7, #20]
        break;
 80441d6:	e00c      	b.n	80441f2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80441d8:	69fa      	ldr	r2, [r7, #28]
 80441da:	687b      	ldr	r3, [r7, #4]
 80441dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80441e0:	4a0e      	ldr	r2, [pc, #56]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 80441e2:	68d2      	ldr	r2, [r2, #12]
 80441e4:	0a12      	lsrs	r2, r2, #8
 80441e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80441ea:	fb02 f303 	mul.w	r3, r2, r3
 80441ee:	617b      	str	r3, [r7, #20]
        break;
 80441f0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80441f2:	4b0a      	ldr	r3, [pc, #40]	; (804421c <HAL_RCC_GetSysClockFreq+0x12c>)
 80441f4:	68db      	ldr	r3, [r3, #12]
 80441f6:	0e5b      	lsrs	r3, r3, #25
 80441f8:	f003 0303 	and.w	r3, r3, #3
 80441fc:	3301      	adds	r3, #1
 80441fe:	005b      	lsls	r3, r3, #1
 8044200:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8044202:	697a      	ldr	r2, [r7, #20]
 8044204:	683b      	ldr	r3, [r7, #0]
 8044206:	fbb2 f3f3 	udiv	r3, r2, r3
 804420a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 804420c:	69bb      	ldr	r3, [r7, #24]
}
 804420e:	4618      	mov	r0, r3
 8044210:	3724      	adds	r7, #36	; 0x24
 8044212:	46bd      	mov	sp, r7
 8044214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044218:	4770      	bx	lr
 804421a:	bf00      	nop
 804421c:	40021000 	.word	0x40021000
 8044220:	08048ee8 	.word	0x08048ee8
 8044224:	00f42400 	.word	0x00f42400
 8044228:	007a1200 	.word	0x007a1200

0804422c <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 804422c:	b580      	push	{r7, lr}
 804422e:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8044230:	f7ff ff5e 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 8044234:	4602      	mov	r2, r0
 8044236:	4b05      	ldr	r3, [pc, #20]	; (804424c <HAL_RCC_GetHCLKFreq+0x20>)
 8044238:	689b      	ldr	r3, [r3, #8]
 804423a:	091b      	lsrs	r3, r3, #4
 804423c:	f003 030f 	and.w	r3, r3, #15
 8044240:	4903      	ldr	r1, [pc, #12]	; (8044250 <HAL_RCC_GetHCLKFreq+0x24>)
 8044242:	5ccb      	ldrb	r3, [r1, r3]
 8044244:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044248:	4618      	mov	r0, r3
 804424a:	bd80      	pop	{r7, pc}
 804424c:	40021000 	.word	0x40021000
 8044250:	08048ed0 	.word	0x08048ed0

08044254 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8044254:	b580      	push	{r7, lr}
 8044256:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8044258:	f7ff ffe8 	bl	804422c <HAL_RCC_GetHCLKFreq>
 804425c:	4602      	mov	r2, r0
 804425e:	4b05      	ldr	r3, [pc, #20]	; (8044274 <HAL_RCC_GetPCLK1Freq+0x20>)
 8044260:	689b      	ldr	r3, [r3, #8]
 8044262:	0a1b      	lsrs	r3, r3, #8
 8044264:	f003 0307 	and.w	r3, r3, #7
 8044268:	4903      	ldr	r1, [pc, #12]	; (8044278 <HAL_RCC_GetPCLK1Freq+0x24>)
 804426a:	5ccb      	ldrb	r3, [r1, r3]
 804426c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044270:	4618      	mov	r0, r3
 8044272:	bd80      	pop	{r7, pc}
 8044274:	40021000 	.word	0x40021000
 8044278:	08048ee0 	.word	0x08048ee0

0804427c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 804427c:	b580      	push	{r7, lr}
 804427e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8044280:	f7ff ffd4 	bl	804422c <HAL_RCC_GetHCLKFreq>
 8044284:	4602      	mov	r2, r0
 8044286:	4b05      	ldr	r3, [pc, #20]	; (804429c <HAL_RCC_GetPCLK2Freq+0x20>)
 8044288:	689b      	ldr	r3, [r3, #8]
 804428a:	0adb      	lsrs	r3, r3, #11
 804428c:	f003 0307 	and.w	r3, r3, #7
 8044290:	4903      	ldr	r1, [pc, #12]	; (80442a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8044292:	5ccb      	ldrb	r3, [r1, r3]
 8044294:	fa22 f303 	lsr.w	r3, r2, r3
}
 8044298:	4618      	mov	r0, r3
 804429a:	bd80      	pop	{r7, pc}
 804429c:	40021000 	.word	0x40021000
 80442a0:	08048ee0 	.word	0x08048ee0

080442a4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80442a4:	b580      	push	{r7, lr}
 80442a6:	b086      	sub	sp, #24
 80442a8:	af00      	add	r7, sp, #0
 80442aa:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80442ac:	2300      	movs	r3, #0
 80442ae:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 80442b0:	4b2c      	ldr	r3, [pc, #176]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80442b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80442b8:	2b00      	cmp	r3, #0
 80442ba:	d003      	beq.n	80442c4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80442bc:	f7ff f86c 	bl	8043398 <HAL_PWREx_GetVoltageRange>
 80442c0:	6138      	str	r0, [r7, #16]
 80442c2:	e014      	b.n	80442ee <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80442c4:	4b27      	ldr	r3, [pc, #156]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80442c8:	4a26      	ldr	r2, [pc, #152]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80442ce:	6593      	str	r3, [r2, #88]	; 0x58
 80442d0:	4b24      	ldr	r3, [pc, #144]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80442d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80442d8:	60fb      	str	r3, [r7, #12]
 80442da:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80442dc:	f7ff f85c 	bl	8043398 <HAL_PWREx_GetVoltageRange>
 80442e0:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 80442e2:	4b20      	ldr	r3, [pc, #128]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80442e6:	4a1f      	ldr	r2, [pc, #124]	; (8044364 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 80442e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80442ec:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 80442ee:	693b      	ldr	r3, [r7, #16]
 80442f0:	2b00      	cmp	r3, #0
 80442f2:	d003      	beq.n	80442fc <RCC_SetFlashLatencyFromMSIRange+0x58>
 80442f4:	693b      	ldr	r3, [r7, #16]
 80442f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80442fa:	d10b      	bne.n	8044314 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 80442fc:	687b      	ldr	r3, [r7, #4]
 80442fe:	2b80      	cmp	r3, #128	; 0x80
 8044300:	d919      	bls.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8044302:	687b      	ldr	r3, [r7, #4]
 8044304:	2ba0      	cmp	r3, #160	; 0xa0
 8044306:	d902      	bls.n	804430e <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8044308:	2302      	movs	r3, #2
 804430a:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 804430c:	e013      	b.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 804430e:	2301      	movs	r3, #1
 8044310:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8044312:	e010      	b.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8044314:	687b      	ldr	r3, [r7, #4]
 8044316:	2b80      	cmp	r3, #128	; 0x80
 8044318:	d902      	bls.n	8044320 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 804431a:	2303      	movs	r3, #3
 804431c:	617b      	str	r3, [r7, #20]
 804431e:	e00a      	b.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8044320:	687b      	ldr	r3, [r7, #4]
 8044322:	2b80      	cmp	r3, #128	; 0x80
 8044324:	d102      	bne.n	804432c <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8044326:	2302      	movs	r3, #2
 8044328:	617b      	str	r3, [r7, #20]
 804432a:	e004      	b.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 804432c:	687b      	ldr	r3, [r7, #4]
 804432e:	2b70      	cmp	r3, #112	; 0x70
 8044330:	d101      	bne.n	8044336 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8044332:	2301      	movs	r3, #1
 8044334:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8044336:	4b0c      	ldr	r3, [pc, #48]	; (8044368 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8044338:	681b      	ldr	r3, [r3, #0]
 804433a:	f023 020f 	bic.w	r2, r3, #15
 804433e:	490a      	ldr	r1, [pc, #40]	; (8044368 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8044340:	697b      	ldr	r3, [r7, #20]
 8044342:	4313      	orrs	r3, r2
 8044344:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8044346:	4b08      	ldr	r3, [pc, #32]	; (8044368 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8044348:	681b      	ldr	r3, [r3, #0]
 804434a:	f003 030f 	and.w	r3, r3, #15
 804434e:	697a      	ldr	r2, [r7, #20]
 8044350:	429a      	cmp	r2, r3
 8044352:	d001      	beq.n	8044358 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8044354:	2301      	movs	r3, #1
 8044356:	e000      	b.n	804435a <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8044358:	2300      	movs	r3, #0
}
 804435a:	4618      	mov	r0, r3
 804435c:	3718      	adds	r7, #24
 804435e:	46bd      	mov	sp, r7
 8044360:	bd80      	pop	{r7, pc}
 8044362:	bf00      	nop
 8044364:	40021000 	.word	0x40021000
 8044368:	40022000 	.word	0x40022000

0804436c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 804436c:	b480      	push	{r7}
 804436e:	b087      	sub	sp, #28
 8044370:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8044372:	4b31      	ldr	r3, [pc, #196]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8044374:	68db      	ldr	r3, [r3, #12]
 8044376:	f003 0303 	and.w	r3, r3, #3
 804437a:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 804437c:	4b2e      	ldr	r3, [pc, #184]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 804437e:	68db      	ldr	r3, [r3, #12]
 8044380:	091b      	lsrs	r3, r3, #4
 8044382:	f003 030f 	and.w	r3, r3, #15
 8044386:	3301      	adds	r3, #1
 8044388:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 804438a:	68fb      	ldr	r3, [r7, #12]
 804438c:	2b03      	cmp	r3, #3
 804438e:	d015      	beq.n	80443bc <RCC_GetSysClockFreqFromPLLSource+0x50>
 8044390:	68fb      	ldr	r3, [r7, #12]
 8044392:	2b03      	cmp	r3, #3
 8044394:	d839      	bhi.n	804440a <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8044396:	68fb      	ldr	r3, [r7, #12]
 8044398:	2b01      	cmp	r3, #1
 804439a:	d01c      	beq.n	80443d6 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 804439c:	68fb      	ldr	r3, [r7, #12]
 804439e:	2b02      	cmp	r3, #2
 80443a0:	d133      	bne.n	804440a <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80443a2:	4a26      	ldr	r2, [pc, #152]	; (804443c <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 80443a4:	68bb      	ldr	r3, [r7, #8]
 80443a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80443aa:	4a23      	ldr	r2, [pc, #140]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80443ac:	68d2      	ldr	r2, [r2, #12]
 80443ae:	0a12      	lsrs	r2, r2, #8
 80443b0:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80443b4:	fb02 f303 	mul.w	r3, r2, r3
 80443b8:	613b      	str	r3, [r7, #16]
      break;
 80443ba:	e029      	b.n	8044410 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80443bc:	4a20      	ldr	r2, [pc, #128]	; (8044440 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80443be:	68bb      	ldr	r3, [r7, #8]
 80443c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80443c4:	4a1c      	ldr	r2, [pc, #112]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80443c6:	68d2      	ldr	r2, [r2, #12]
 80443c8:	0a12      	lsrs	r2, r2, #8
 80443ca:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80443ce:	fb02 f303 	mul.w	r3, r2, r3
 80443d2:	613b      	str	r3, [r7, #16]
      break;
 80443d4:	e01c      	b.n	8044410 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80443d6:	4b18      	ldr	r3, [pc, #96]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80443d8:	681b      	ldr	r3, [r3, #0]
 80443da:	f003 0308 	and.w	r3, r3, #8
 80443de:	2b00      	cmp	r3, #0
 80443e0:	d107      	bne.n	80443f2 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80443e2:	4b15      	ldr	r3, [pc, #84]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80443e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80443e8:	0a1b      	lsrs	r3, r3, #8
 80443ea:	f003 030f 	and.w	r3, r3, #15
 80443ee:	617b      	str	r3, [r7, #20]
 80443f0:	e005      	b.n	80443fe <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80443f2:	4b11      	ldr	r3, [pc, #68]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80443f4:	681b      	ldr	r3, [r3, #0]
 80443f6:	091b      	lsrs	r3, r3, #4
 80443f8:	f003 030f 	and.w	r3, r3, #15
 80443fc:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80443fe:	4a11      	ldr	r2, [pc, #68]	; (8044444 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 8044400:	697b      	ldr	r3, [r7, #20]
 8044402:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044406:	613b      	str	r3, [r7, #16]
        break;
 8044408:	e002      	b.n	8044410 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 804440a:	2300      	movs	r3, #0
 804440c:	613b      	str	r3, [r7, #16]
      break;
 804440e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8044410:	4b09      	ldr	r3, [pc, #36]	; (8044438 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8044412:	68db      	ldr	r3, [r3, #12]
 8044414:	0e5b      	lsrs	r3, r3, #25
 8044416:	f003 0303 	and.w	r3, r3, #3
 804441a:	3301      	adds	r3, #1
 804441c:	005b      	lsls	r3, r3, #1
 804441e:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8044420:	693a      	ldr	r2, [r7, #16]
 8044422:	687b      	ldr	r3, [r7, #4]
 8044424:	fbb2 f3f3 	udiv	r3, r2, r3
 8044428:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 804442a:	683b      	ldr	r3, [r7, #0]
}
 804442c:	4618      	mov	r0, r3
 804442e:	371c      	adds	r7, #28
 8044430:	46bd      	mov	sp, r7
 8044432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8044436:	4770      	bx	lr
 8044438:	40021000 	.word	0x40021000
 804443c:	00f42400 	.word	0x00f42400
 8044440:	007a1200 	.word	0x007a1200
 8044444:	08048ee8 	.word	0x08048ee8

08044448 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8044448:	b580      	push	{r7, lr}
 804444a:	b088      	sub	sp, #32
 804444c:	af00      	add	r7, sp, #0
 804444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8044450:	2300      	movs	r3, #0
 8044452:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8044454:	2300      	movs	r3, #0
 8044456:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8044458:	687b      	ldr	r3, [r7, #4]
 804445a:	681b      	ldr	r3, [r3, #0]
 804445c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8044460:	2b00      	cmp	r3, #0
 8044462:	d040      	beq.n	80444e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 8044464:	687b      	ldr	r3, [r7, #4]
 8044466:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8044468:	2b80      	cmp	r3, #128	; 0x80
 804446a:	d02a      	beq.n	80444c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804446c:	2b80      	cmp	r3, #128	; 0x80
 804446e:	d825      	bhi.n	80444bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8044470:	2b60      	cmp	r3, #96	; 0x60
 8044472:	d026      	beq.n	80444c2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8044474:	2b60      	cmp	r3, #96	; 0x60
 8044476:	d821      	bhi.n	80444bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8044478:	2b40      	cmp	r3, #64	; 0x40
 804447a:	d006      	beq.n	804448a <HAL_RCCEx_PeriphCLKConfig+0x42>
 804447c:	2b40      	cmp	r3, #64	; 0x40
 804447e:	d81d      	bhi.n	80444bc <HAL_RCCEx_PeriphCLKConfig+0x74>
 8044480:	2b00      	cmp	r3, #0
 8044482:	d009      	beq.n	8044498 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8044484:	2b20      	cmp	r3, #32
 8044486:	d010      	beq.n	80444aa <HAL_RCCEx_PeriphCLKConfig+0x62>
 8044488:	e018      	b.n	80444bc <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 804448a:	4b8f      	ldr	r3, [pc, #572]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804448c:	68db      	ldr	r3, [r3, #12]
 804448e:	4a8e      	ldr	r2, [pc, #568]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044490:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044494:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8044496:	e015      	b.n	80444c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8044498:	687b      	ldr	r3, [r7, #4]
 804449a:	3304      	adds	r3, #4
 804449c:	2100      	movs	r1, #0
 804449e:	4618      	mov	r0, r3
 80444a0:	f001 fb08 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 80444a4:	4603      	mov	r3, r0
 80444a6:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80444a8:	e00c      	b.n	80444c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80444aa:	687b      	ldr	r3, [r7, #4]
 80444ac:	3320      	adds	r3, #32
 80444ae:	2100      	movs	r1, #0
 80444b0:	4618      	mov	r0, r3
 80444b2:	f001 fbe5 	bl	8045c80 <RCCEx_PLLSAI2_Config>
 80444b6:	4603      	mov	r3, r0
 80444b8:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 80444ba:	e003      	b.n	80444c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80444bc:	2301      	movs	r3, #1
 80444be:	77fb      	strb	r3, [r7, #31]
        break;
 80444c0:	e000      	b.n	80444c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 80444c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80444c4:	7ffb      	ldrb	r3, [r7, #31]
 80444c6:	2b00      	cmp	r3, #0
 80444c8:	d10b      	bne.n	80444e2 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80444ca:	4b7f      	ldr	r3, [pc, #508]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80444cc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80444d0:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80444d4:	687b      	ldr	r3, [r7, #4]
 80444d6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80444d8:	497b      	ldr	r1, [pc, #492]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80444da:	4313      	orrs	r3, r2
 80444dc:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80444e0:	e001      	b.n	80444e6 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80444e2:	7ffb      	ldrb	r3, [r7, #31]
 80444e4:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80444e6:	687b      	ldr	r3, [r7, #4]
 80444e8:	681b      	ldr	r3, [r3, #0]
 80444ea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80444ee:	2b00      	cmp	r3, #0
 80444f0:	d047      	beq.n	8044582 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80444f2:	687b      	ldr	r3, [r7, #4]
 80444f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80444f6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80444fa:	d030      	beq.n	804455e <HAL_RCCEx_PeriphCLKConfig+0x116>
 80444fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044500:	d82a      	bhi.n	8044558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8044502:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044506:	d02a      	beq.n	804455e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8044508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804450c:	d824      	bhi.n	8044558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804450e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044512:	d008      	beq.n	8044526 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8044514:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044518:	d81e      	bhi.n	8044558 <HAL_RCCEx_PeriphCLKConfig+0x110>
 804451a:	2b00      	cmp	r3, #0
 804451c:	d00a      	beq.n	8044534 <HAL_RCCEx_PeriphCLKConfig+0xec>
 804451e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044522:	d010      	beq.n	8044546 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8044524:	e018      	b.n	8044558 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8044526:	4b68      	ldr	r3, [pc, #416]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044528:	68db      	ldr	r3, [r3, #12]
 804452a:	4a67      	ldr	r2, [pc, #412]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804452c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044530:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8044532:	e015      	b.n	8044560 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8044534:	687b      	ldr	r3, [r7, #4]
 8044536:	3304      	adds	r3, #4
 8044538:	2100      	movs	r1, #0
 804453a:	4618      	mov	r0, r3
 804453c:	f001 faba 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 8044540:	4603      	mov	r3, r0
 8044542:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8044544:	e00c      	b.n	8044560 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8044546:	687b      	ldr	r3, [r7, #4]
 8044548:	3320      	adds	r3, #32
 804454a:	2100      	movs	r1, #0
 804454c:	4618      	mov	r0, r3
 804454e:	f001 fb97 	bl	8045c80 <RCCEx_PLLSAI2_Config>
 8044552:	4603      	mov	r3, r0
 8044554:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 8044556:	e003      	b.n	8044560 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8044558:	2301      	movs	r3, #1
 804455a:	77fb      	strb	r3, [r7, #31]
        break;
 804455c:	e000      	b.n	8044560 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 804455e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044560:	7ffb      	ldrb	r3, [r7, #31]
 8044562:	2b00      	cmp	r3, #0
 8044564:	d10b      	bne.n	804457e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8044566:	4b58      	ldr	r3, [pc, #352]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044568:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804456c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8044570:	687b      	ldr	r3, [r7, #4]
 8044572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8044574:	4954      	ldr	r1, [pc, #336]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044576:	4313      	orrs	r3, r2
 8044578:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 804457c:	e001      	b.n	8044582 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804457e:	7ffb      	ldrb	r3, [r7, #31]
 8044580:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8044582:	687b      	ldr	r3, [r7, #4]
 8044584:	681b      	ldr	r3, [r3, #0]
 8044586:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804458a:	2b00      	cmp	r3, #0
 804458c:	f000 80ab 	beq.w	80446e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8044590:	2300      	movs	r3, #0
 8044592:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8044594:	4b4c      	ldr	r3, [pc, #304]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804459c:	2b00      	cmp	r3, #0
 804459e:	d10d      	bne.n	80445bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80445a0:	4b49      	ldr	r3, [pc, #292]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80445a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80445a4:	4a48      	ldr	r2, [pc, #288]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80445a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80445aa:	6593      	str	r3, [r2, #88]	; 0x58
 80445ac:	4b46      	ldr	r3, [pc, #280]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80445ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80445b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80445b4:	60fb      	str	r3, [r7, #12]
 80445b6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80445b8:	2301      	movs	r3, #1
 80445ba:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80445bc:	4b43      	ldr	r3, [pc, #268]	; (80446cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80445be:	681b      	ldr	r3, [r3, #0]
 80445c0:	4a42      	ldr	r2, [pc, #264]	; (80446cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80445c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80445c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80445c8:	f7fd f878 	bl	80416bc <HAL_GetTick>
 80445cc:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80445ce:	e00f      	b.n	80445f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80445d0:	f7fd f874 	bl	80416bc <HAL_GetTick>
 80445d4:	4602      	mov	r2, r0
 80445d6:	693b      	ldr	r3, [r7, #16]
 80445d8:	1ad3      	subs	r3, r2, r3
 80445da:	2b02      	cmp	r3, #2
 80445dc:	d908      	bls.n	80445f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80445de:	4b3b      	ldr	r3, [pc, #236]	; (80446cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80445e0:	681b      	ldr	r3, [r3, #0]
 80445e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80445e6:	2b00      	cmp	r3, #0
 80445e8:	d109      	bne.n	80445fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80445ea:	2303      	movs	r3, #3
 80445ec:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80445ee:	e006      	b.n	80445fe <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80445f0:	4b36      	ldr	r3, [pc, #216]	; (80446cc <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80445f2:	681b      	ldr	r3, [r3, #0]
 80445f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80445f8:	2b00      	cmp	r3, #0
 80445fa:	d0e9      	beq.n	80445d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80445fc:	e000      	b.n	8044600 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80445fe:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 8044600:	7ffb      	ldrb	r3, [r7, #31]
 8044602:	2b00      	cmp	r3, #0
 8044604:	d164      	bne.n	80446d0 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8044606:	4b30      	ldr	r3, [pc, #192]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804460c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044610:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8044612:	69bb      	ldr	r3, [r7, #24]
 8044614:	2b00      	cmp	r3, #0
 8044616:	d01f      	beq.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8044618:	687b      	ldr	r3, [r7, #4]
 804461a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804461e:	69ba      	ldr	r2, [r7, #24]
 8044620:	429a      	cmp	r2, r3
 8044622:	d019      	beq.n	8044658 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8044624:	4b28      	ldr	r3, [pc, #160]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044626:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 804462e:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8044630:	4b25      	ldr	r3, [pc, #148]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044632:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044636:	4a24      	ldr	r2, [pc, #144]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044638:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804463c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8044640:	4b21      	ldr	r3, [pc, #132]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044646:	4a20      	ldr	r2, [pc, #128]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044648:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 804464c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8044650:	4a1d      	ldr	r2, [pc, #116]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044652:	69bb      	ldr	r3, [r7, #24]
 8044654:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8044658:	69bb      	ldr	r3, [r7, #24]
 804465a:	f003 0301 	and.w	r3, r3, #1
 804465e:	2b00      	cmp	r3, #0
 8044660:	d01f      	beq.n	80446a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8044662:	f7fd f82b 	bl	80416bc <HAL_GetTick>
 8044666:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8044668:	e012      	b.n	8044690 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804466a:	f7fd f827 	bl	80416bc <HAL_GetTick>
 804466e:	4602      	mov	r2, r0
 8044670:	693b      	ldr	r3, [r7, #16]
 8044672:	1ad3      	subs	r3, r2, r3
 8044674:	f241 3288 	movw	r2, #5000	; 0x1388
 8044678:	4293      	cmp	r3, r2
 804467a:	d909      	bls.n	8044690 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804467c:	4b12      	ldr	r3, [pc, #72]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804467e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044682:	f003 0302 	and.w	r3, r3, #2
 8044686:	2b00      	cmp	r3, #0
 8044688:	d10a      	bne.n	80446a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 804468a:	2303      	movs	r3, #3
 804468c:	77fb      	strb	r3, [r7, #31]
            }
            break;
 804468e:	e007      	b.n	80446a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8044690:	4b0d      	ldr	r3, [pc, #52]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8044692:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044696:	f003 0302 	and.w	r3, r3, #2
 804469a:	2b00      	cmp	r3, #0
 804469c:	d0e5      	beq.n	804466a <HAL_RCCEx_PeriphCLKConfig+0x222>
 804469e:	e000      	b.n	80446a2 <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 80446a0:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 80446a2:	7ffb      	ldrb	r3, [r7, #31]
 80446a4:	2b00      	cmp	r3, #0
 80446a6:	d10c      	bne.n	80446c2 <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80446a8:	4b07      	ldr	r3, [pc, #28]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80446aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80446ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80446b2:	687b      	ldr	r3, [r7, #4]
 80446b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80446b8:	4903      	ldr	r1, [pc, #12]	; (80446c8 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80446ba:	4313      	orrs	r3, r2
 80446bc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80446c0:	e008      	b.n	80446d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80446c2:	7ffb      	ldrb	r3, [r7, #31]
 80446c4:	77bb      	strb	r3, [r7, #30]
 80446c6:	e005      	b.n	80446d4 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80446c8:	40021000 	.word	0x40021000
 80446cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80446d0:	7ffb      	ldrb	r3, [r7, #31]
 80446d2:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80446d4:	7dfb      	ldrb	r3, [r7, #23]
 80446d6:	2b01      	cmp	r3, #1
 80446d8:	d105      	bne.n	80446e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80446da:	4b9c      	ldr	r3, [pc, #624]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80446dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80446de:	4a9b      	ldr	r2, [pc, #620]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80446e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80446e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80446e6:	687b      	ldr	r3, [r7, #4]
 80446e8:	681b      	ldr	r3, [r3, #0]
 80446ea:	f003 0301 	and.w	r3, r3, #1
 80446ee:	2b00      	cmp	r3, #0
 80446f0:	d00a      	beq.n	8044708 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80446f2:	4b96      	ldr	r3, [pc, #600]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80446f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80446f8:	f023 0203 	bic.w	r2, r3, #3
 80446fc:	687b      	ldr	r3, [r7, #4]
 80446fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8044700:	4992      	ldr	r1, [pc, #584]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044702:	4313      	orrs	r3, r2
 8044704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8044708:	687b      	ldr	r3, [r7, #4]
 804470a:	681b      	ldr	r3, [r3, #0]
 804470c:	f003 0302 	and.w	r3, r3, #2
 8044710:	2b00      	cmp	r3, #0
 8044712:	d00a      	beq.n	804472a <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8044714:	4b8d      	ldr	r3, [pc, #564]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804471a:	f023 020c 	bic.w	r2, r3, #12
 804471e:	687b      	ldr	r3, [r7, #4]
 8044720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8044722:	498a      	ldr	r1, [pc, #552]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044724:	4313      	orrs	r3, r2
 8044726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 804472a:	687b      	ldr	r3, [r7, #4]
 804472c:	681b      	ldr	r3, [r3, #0]
 804472e:	f003 0304 	and.w	r3, r3, #4
 8044732:	2b00      	cmp	r3, #0
 8044734:	d00a      	beq.n	804474c <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8044736:	4b85      	ldr	r3, [pc, #532]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804473c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8044740:	687b      	ldr	r3, [r7, #4]
 8044742:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8044744:	4981      	ldr	r1, [pc, #516]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044746:	4313      	orrs	r3, r2
 8044748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 804474c:	687b      	ldr	r3, [r7, #4]
 804474e:	681b      	ldr	r3, [r3, #0]
 8044750:	f003 0308 	and.w	r3, r3, #8
 8044754:	2b00      	cmp	r3, #0
 8044756:	d00a      	beq.n	804476e <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8044758:	4b7c      	ldr	r3, [pc, #496]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804475e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8044762:	687b      	ldr	r3, [r7, #4]
 8044764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8044766:	4979      	ldr	r1, [pc, #484]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044768:	4313      	orrs	r3, r2
 804476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 804476e:	687b      	ldr	r3, [r7, #4]
 8044770:	681b      	ldr	r3, [r3, #0]
 8044772:	f003 0310 	and.w	r3, r3, #16
 8044776:	2b00      	cmp	r3, #0
 8044778:	d00a      	beq.n	8044790 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 804477a:	4b74      	ldr	r3, [pc, #464]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044780:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8044784:	687b      	ldr	r3, [r7, #4]
 8044786:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8044788:	4970      	ldr	r1, [pc, #448]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804478a:	4313      	orrs	r3, r2
 804478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8044790:	687b      	ldr	r3, [r7, #4]
 8044792:	681b      	ldr	r3, [r3, #0]
 8044794:	f003 0320 	and.w	r3, r3, #32
 8044798:	2b00      	cmp	r3, #0
 804479a:	d00a      	beq.n	80447b2 <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 804479c:	4b6b      	ldr	r3, [pc, #428]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80447a2:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80447a6:	687b      	ldr	r3, [r7, #4]
 80447a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80447aa:	4968      	ldr	r1, [pc, #416]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80447ac:	4313      	orrs	r3, r2
 80447ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80447b2:	687b      	ldr	r3, [r7, #4]
 80447b4:	681b      	ldr	r3, [r3, #0]
 80447b6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80447ba:	2b00      	cmp	r3, #0
 80447bc:	d00a      	beq.n	80447d4 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80447be:	4b63      	ldr	r3, [pc, #396]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80447c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80447c4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80447c8:	687b      	ldr	r3, [r7, #4]
 80447ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80447cc:	495f      	ldr	r1, [pc, #380]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80447ce:	4313      	orrs	r3, r2
 80447d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80447d4:	687b      	ldr	r3, [r7, #4]
 80447d6:	681b      	ldr	r3, [r3, #0]
 80447d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80447dc:	2b00      	cmp	r3, #0
 80447de:	d00a      	beq.n	80447f6 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80447e0:	4b5a      	ldr	r3, [pc, #360]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80447e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80447e6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80447ea:	687b      	ldr	r3, [r7, #4]
 80447ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80447ee:	4957      	ldr	r1, [pc, #348]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80447f0:	4313      	orrs	r3, r2
 80447f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80447f6:	687b      	ldr	r3, [r7, #4]
 80447f8:	681b      	ldr	r3, [r3, #0]
 80447fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80447fe:	2b00      	cmp	r3, #0
 8044800:	d00a      	beq.n	8044818 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 8044802:	4b52      	ldr	r3, [pc, #328]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044808:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 804480c:	687b      	ldr	r3, [r7, #4]
 804480e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8044810:	494e      	ldr	r1, [pc, #312]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044812:	4313      	orrs	r3, r2
 8044814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 8044818:	687b      	ldr	r3, [r7, #4]
 804481a:	681b      	ldr	r3, [r3, #0]
 804481c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044820:	2b00      	cmp	r3, #0
 8044822:	d031      	beq.n	8044888 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 8044824:	687b      	ldr	r3, [r7, #4]
 8044826:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8044828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804482c:	d00e      	beq.n	804484c <HAL_RCCEx_PeriphCLKConfig+0x404>
 804482e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044832:	d814      	bhi.n	804485e <HAL_RCCEx_PeriphCLKConfig+0x416>
 8044834:	2b00      	cmp	r3, #0
 8044836:	d015      	beq.n	8044864 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8044838:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804483c:	d10f      	bne.n	804485e <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804483e:	4b43      	ldr	r3, [pc, #268]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044840:	68db      	ldr	r3, [r3, #12]
 8044842:	4a42      	ldr	r2, [pc, #264]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044844:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044848:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804484a:	e00c      	b.n	8044866 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804484c:	687b      	ldr	r3, [r7, #4]
 804484e:	3304      	adds	r3, #4
 8044850:	2100      	movs	r1, #0
 8044852:	4618      	mov	r0, r3
 8044854:	f001 f92e 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 8044858:	4603      	mov	r3, r0
 804485a:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 804485c:	e003      	b.n	8044866 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 804485e:	2301      	movs	r3, #1
 8044860:	77fb      	strb	r3, [r7, #31]
        break;
 8044862:	e000      	b.n	8044866 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 8044864:	bf00      	nop
    }

    if (ret == HAL_OK)
 8044866:	7ffb      	ldrb	r3, [r7, #31]
 8044868:	2b00      	cmp	r3, #0
 804486a:	d10b      	bne.n	8044884 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 804486c:	4b37      	ldr	r3, [pc, #220]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804486e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044872:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8044876:	687b      	ldr	r3, [r7, #4]
 8044878:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 804487a:	4934      	ldr	r1, [pc, #208]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804487c:	4313      	orrs	r3, r2
 804487e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8044882:	e001      	b.n	8044888 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8044884:	7ffb      	ldrb	r3, [r7, #31]
 8044886:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8044888:	687b      	ldr	r3, [r7, #4]
 804488a:	681b      	ldr	r3, [r3, #0]
 804488c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8044890:	2b00      	cmp	r3, #0
 8044892:	d00a      	beq.n	80448aa <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8044894:	4b2d      	ldr	r3, [pc, #180]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804489a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 804489e:	687b      	ldr	r3, [r7, #4]
 80448a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80448a2:	492a      	ldr	r1, [pc, #168]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448a4:	4313      	orrs	r3, r2
 80448a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80448aa:	687b      	ldr	r3, [r7, #4]
 80448ac:	681b      	ldr	r3, [r3, #0]
 80448ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80448b2:	2b00      	cmp	r3, #0
 80448b4:	d00a      	beq.n	80448cc <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80448b6:	4b25      	ldr	r3, [pc, #148]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80448bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80448c0:	687b      	ldr	r3, [r7, #4]
 80448c2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80448c4:	4921      	ldr	r1, [pc, #132]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448c6:	4313      	orrs	r3, r2
 80448c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80448cc:	687b      	ldr	r3, [r7, #4]
 80448ce:	681b      	ldr	r3, [r3, #0]
 80448d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80448d4:	2b00      	cmp	r3, #0
 80448d6:	d00a      	beq.n	80448ee <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80448d8:	4b1c      	ldr	r3, [pc, #112]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80448de:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80448e2:	687b      	ldr	r3, [r7, #4]
 80448e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80448e6:	4919      	ldr	r1, [pc, #100]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448e8:	4313      	orrs	r3, r2
 80448ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80448ee:	687b      	ldr	r3, [r7, #4]
 80448f0:	681b      	ldr	r3, [r3, #0]
 80448f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80448f6:	2b00      	cmp	r3, #0
 80448f8:	d00a      	beq.n	8044910 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80448fa:	4b14      	ldr	r3, [pc, #80]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80448fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044900:	f023 0203 	bic.w	r2, r3, #3
 8044904:	687b      	ldr	r3, [r7, #4]
 8044906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8044908:	4910      	ldr	r1, [pc, #64]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804490a:	4313      	orrs	r3, r2
 804490c:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8044910:	687b      	ldr	r3, [r7, #4]
 8044912:	681b      	ldr	r3, [r3, #0]
 8044914:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8044918:	2b00      	cmp	r3, #0
 804491a:	d02b      	beq.n	8044974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 804491c:	4b0b      	ldr	r3, [pc, #44]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044922:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8044926:	687b      	ldr	r3, [r7, #4]
 8044928:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804492a:	4908      	ldr	r1, [pc, #32]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804492c:	4313      	orrs	r3, r2
 804492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8044932:	687b      	ldr	r3, [r7, #4]
 8044934:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044936:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804493a:	d109      	bne.n	8044950 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804493c:	4b03      	ldr	r3, [pc, #12]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804493e:	68db      	ldr	r3, [r3, #12]
 8044940:	4a02      	ldr	r2, [pc, #8]	; (804494c <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8044942:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044946:	60d3      	str	r3, [r2, #12]
 8044948:	e014      	b.n	8044974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 804494a:	bf00      	nop
 804494c:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8044950:	687b      	ldr	r3, [r7, #4]
 8044952:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8044954:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8044958:	d10c      	bne.n	8044974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 804495a:	687b      	ldr	r3, [r7, #4]
 804495c:	3304      	adds	r3, #4
 804495e:	2101      	movs	r1, #1
 8044960:	4618      	mov	r0, r3
 8044962:	f001 f8a7 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 8044966:	4603      	mov	r3, r0
 8044968:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 804496a:	7ffb      	ldrb	r3, [r7, #31]
 804496c:	2b00      	cmp	r3, #0
 804496e:	d001      	beq.n	8044974 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8044970:	7ffb      	ldrb	r3, [r7, #31]
 8044972:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8044974:	687b      	ldr	r3, [r7, #4]
 8044976:	681b      	ldr	r3, [r3, #0]
 8044978:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804497c:	2b00      	cmp	r3, #0
 804497e:	d04a      	beq.n	8044a16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8044980:	687b      	ldr	r3, [r7, #4]
 8044982:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8044984:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044988:	d108      	bne.n	804499c <HAL_RCCEx_PeriphCLKConfig+0x554>
 804498a:	4b70      	ldr	r3, [pc, #448]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804498c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044990:	4a6e      	ldr	r2, [pc, #440]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044992:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8044996:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 804499a:	e012      	b.n	80449c2 <HAL_RCCEx_PeriphCLKConfig+0x57a>
 804499c:	4b6b      	ldr	r3, [pc, #428]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804499e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80449a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80449a6:	687b      	ldr	r3, [r7, #4]
 80449a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80449aa:	4968      	ldr	r1, [pc, #416]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80449ac:	4313      	orrs	r3, r2
 80449ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80449b2:	4b66      	ldr	r3, [pc, #408]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80449b4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80449b8:	4a64      	ldr	r2, [pc, #400]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80449ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80449be:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80449c2:	687b      	ldr	r3, [r7, #4]
 80449c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80449c6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80449ca:	d10d      	bne.n	80449e8 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80449cc:	687b      	ldr	r3, [r7, #4]
 80449ce:	3304      	adds	r3, #4
 80449d0:	2101      	movs	r1, #1
 80449d2:	4618      	mov	r0, r3
 80449d4:	f001 f86e 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 80449d8:	4603      	mov	r3, r0
 80449da:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80449dc:	7ffb      	ldrb	r3, [r7, #31]
 80449de:	2b00      	cmp	r3, #0
 80449e0:	d019      	beq.n	8044a16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80449e2:	7ffb      	ldrb	r3, [r7, #31]
 80449e4:	77bb      	strb	r3, [r7, #30]
 80449e6:	e016      	b.n	8044a16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80449e8:	687b      	ldr	r3, [r7, #4]
 80449ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80449ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80449f0:	d106      	bne.n	8044a00 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80449f2:	4b56      	ldr	r3, [pc, #344]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80449f4:	68db      	ldr	r3, [r3, #12]
 80449f6:	4a55      	ldr	r2, [pc, #340]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80449f8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80449fc:	60d3      	str	r3, [r2, #12]
 80449fe:	e00a      	b.n	8044a16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 8044a00:	687b      	ldr	r3, [r7, #4]
 8044a02:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8044a04:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044a08:	d105      	bne.n	8044a16 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8044a0a:	4b50      	ldr	r3, [pc, #320]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a0c:	68db      	ldr	r3, [r3, #12]
 8044a0e:	4a4f      	ldr	r2, [pc, #316]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8044a14:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8044a16:	687b      	ldr	r3, [r7, #4]
 8044a18:	681b      	ldr	r3, [r3, #0]
 8044a1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8044a1e:	2b00      	cmp	r3, #0
 8044a20:	d028      	beq.n	8044a74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8044a22:	4b4a      	ldr	r3, [pc, #296]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044a28:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8044a2c:	687b      	ldr	r3, [r7, #4]
 8044a2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044a30:	4946      	ldr	r1, [pc, #280]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a32:	4313      	orrs	r3, r2
 8044a34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8044a38:	687b      	ldr	r3, [r7, #4]
 8044a3a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044a3c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044a40:	d106      	bne.n	8044a50 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8044a42:	4b42      	ldr	r3, [pc, #264]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a44:	68db      	ldr	r3, [r3, #12]
 8044a46:	4a41      	ldr	r2, [pc, #260]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a48:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044a4c:	60d3      	str	r3, [r2, #12]
 8044a4e:	e011      	b.n	8044a74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8044a50:	687b      	ldr	r3, [r7, #4]
 8044a52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8044a54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8044a58:	d10c      	bne.n	8044a74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8044a5a:	687b      	ldr	r3, [r7, #4]
 8044a5c:	3304      	adds	r3, #4
 8044a5e:	2101      	movs	r1, #1
 8044a60:	4618      	mov	r0, r3
 8044a62:	f001 f827 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 8044a66:	4603      	mov	r3, r0
 8044a68:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8044a6a:	7ffb      	ldrb	r3, [r7, #31]
 8044a6c:	2b00      	cmp	r3, #0
 8044a6e:	d001      	beq.n	8044a74 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8044a70:	7ffb      	ldrb	r3, [r7, #31]
 8044a72:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8044a74:	687b      	ldr	r3, [r7, #4]
 8044a76:	681b      	ldr	r3, [r3, #0]
 8044a78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044a7c:	2b00      	cmp	r3, #0
 8044a7e:	d01e      	beq.n	8044abe <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8044a80:	4b32      	ldr	r3, [pc, #200]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044a86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8044a8a:	687b      	ldr	r3, [r7, #4]
 8044a8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044a90:	492e      	ldr	r1, [pc, #184]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044a92:	4313      	orrs	r3, r2
 8044a94:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8044a98:	687b      	ldr	r3, [r7, #4]
 8044a9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8044a9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8044aa2:	d10c      	bne.n	8044abe <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8044aa4:	687b      	ldr	r3, [r7, #4]
 8044aa6:	3304      	adds	r3, #4
 8044aa8:	2102      	movs	r1, #2
 8044aaa:	4618      	mov	r0, r3
 8044aac:	f001 f802 	bl	8045ab4 <RCCEx_PLLSAI1_Config>
 8044ab0:	4603      	mov	r3, r0
 8044ab2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8044ab4:	7ffb      	ldrb	r3, [r7, #31]
 8044ab6:	2b00      	cmp	r3, #0
 8044ab8:	d001      	beq.n	8044abe <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8044aba:	7ffb      	ldrb	r3, [r7, #31]
 8044abc:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8044abe:	687b      	ldr	r3, [r7, #4]
 8044ac0:	681b      	ldr	r3, [r3, #0]
 8044ac2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8044ac6:	2b00      	cmp	r3, #0
 8044ac8:	d00b      	beq.n	8044ae2 <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8044aca:	4b20      	ldr	r3, [pc, #128]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044acc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044ad0:	f023 0204 	bic.w	r2, r3, #4
 8044ad4:	687b      	ldr	r3, [r7, #4]
 8044ad6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8044ada:	491c      	ldr	r1, [pc, #112]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044adc:	4313      	orrs	r3, r2
 8044ade:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8044ae2:	687b      	ldr	r3, [r7, #4]
 8044ae4:	681b      	ldr	r3, [r3, #0]
 8044ae6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8044aea:	2b00      	cmp	r3, #0
 8044aec:	d00b      	beq.n	8044b06 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8044aee:	4b17      	ldr	r3, [pc, #92]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044af0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044af4:	f023 0218 	bic.w	r2, r3, #24
 8044af8:	687b      	ldr	r3, [r7, #4]
 8044afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044afe:	4913      	ldr	r1, [pc, #76]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044b00:	4313      	orrs	r3, r2
 8044b02:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8044b06:	687b      	ldr	r3, [r7, #4]
 8044b08:	681b      	ldr	r3, [r3, #0]
 8044b0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8044b0e:	2b00      	cmp	r3, #0
 8044b10:	d017      	beq.n	8044b42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8044b12:	4b0e      	ldr	r3, [pc, #56]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044b14:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044b18:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8044b1c:	687b      	ldr	r3, [r7, #4]
 8044b1e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044b22:	490a      	ldr	r1, [pc, #40]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044b24:	4313      	orrs	r3, r2
 8044b26:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8044b2a:	687b      	ldr	r3, [r7, #4]
 8044b2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8044b30:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044b34:	d105      	bne.n	8044b42 <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8044b36:	4b05      	ldr	r3, [pc, #20]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044b38:	68db      	ldr	r3, [r3, #12]
 8044b3a:	4a04      	ldr	r2, [pc, #16]	; (8044b4c <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8044b3c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8044b40:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 8044b42:	7fbb      	ldrb	r3, [r7, #30]
}
 8044b44:	4618      	mov	r0, r3
 8044b46:	3720      	adds	r7, #32
 8044b48:	46bd      	mov	sp, r7
 8044b4a:	bd80      	pop	{r7, pc}
 8044b4c:	40021000 	.word	0x40021000

08044b50 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  *            @arg @ref RCC_PERIPHCLK_FDCAN  FDCAN peripheral clock
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8044b50:	b580      	push	{r7, lr}
 8044b52:	b088      	sub	sp, #32
 8044b54:	af00      	add	r7, sp, #0
 8044b56:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;   /* Default is 0 */
 8044b58:	2300      	movs	r3, #0
 8044b5a:	61fb      	str	r3, [r7, #28]
  uint32_t pll_oscsource;

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if (PeriphClk == RCC_PERIPHCLK_RTC)
 8044b5c:	687b      	ldr	r3, [r7, #4]
 8044b5e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8044b62:	d13e      	bne.n	8044be2 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8044b64:	4b45      	ldr	r3, [pc, #276]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044b66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044b6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8044b6e:	60fb      	str	r3, [r7, #12]

    switch (srcclk)
 8044b70:	68fb      	ldr	r3, [r7, #12]
 8044b72:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044b76:	d028      	beq.n	8044bca <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8044b78:	68fb      	ldr	r3, [r7, #12]
 8044b7a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8044b7e:	f200 8773 	bhi.w	8045a68 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
 8044b82:	68fb      	ldr	r3, [r7, #12]
 8044b84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044b88:	d005      	beq.n	8044b96 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 8044b8a:	68fb      	ldr	r3, [r7, #12]
 8044b8c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044b90:	d00e      	beq.n	8044bb0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
          frequency = HSE_VALUE / 32U;
        }
        break;
      default:
        /* No clock source, frequency default init at 0 */
        break;
 8044b92:	f000 bf69 	b.w	8045a68 <HAL_RCCEx_GetPeriphCLKFreq+0xf18>
        if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8044b96:	4b39      	ldr	r3, [pc, #228]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044b98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8044b9c:	f003 0302 	and.w	r3, r3, #2
 8044ba0:	2b02      	cmp	r3, #2
 8044ba2:	f040 8763 	bne.w	8045a6c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
          frequency = LSE_VALUE;
 8044ba6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8044baa:	61fb      	str	r3, [r7, #28]
        break;
 8044bac:	f000 bf5e 	b.w	8045a6c <HAL_RCCEx_GetPeriphCLKFreq+0xf1c>
        if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8044bb0:	4b32      	ldr	r3, [pc, #200]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044bb2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8044bb6:	f003 0302 	and.w	r3, r3, #2
 8044bba:	2b02      	cmp	r3, #2
 8044bbc:	f040 8758 	bne.w	8045a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
          frequency = LSI_VALUE;
 8044bc0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8044bc4:	61fb      	str	r3, [r7, #28]
        break;
 8044bc6:	f000 bf53 	b.w	8045a70 <HAL_RCCEx_GetPeriphCLKFreq+0xf20>
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8044bca:	4b2c      	ldr	r3, [pc, #176]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044bcc:	681b      	ldr	r3, [r3, #0]
 8044bce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044bd2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8044bd6:	f040 874d 	bne.w	8045a74 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
          frequency = HSE_VALUE / 32U;
 8044bda:	4b29      	ldr	r3, [pc, #164]	; (8044c80 <HAL_RCCEx_GetPeriphCLKFreq+0x130>)
 8044bdc:	61fb      	str	r3, [r7, #28]
        break;
 8044bde:	f000 bf49 	b.w	8045a74 <HAL_RCCEx_GetPeriphCLKFreq+0xf24>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8044be2:	4b26      	ldr	r3, [pc, #152]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044be4:	68db      	ldr	r3, [r3, #12]
 8044be6:	f003 0303 	and.w	r3, r3, #3
 8044bea:	613b      	str	r3, [r7, #16]

    /* Compute PLL clock input */
    switch (pll_oscsource)
 8044bec:	693b      	ldr	r3, [r7, #16]
 8044bee:	2b03      	cmp	r3, #3
 8044bf0:	d036      	beq.n	8044c60 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8044bf2:	693b      	ldr	r3, [r7, #16]
 8044bf4:	2b03      	cmp	r3, #3
 8044bf6:	d84b      	bhi.n	8044c90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
 8044bf8:	693b      	ldr	r3, [r7, #16]
 8044bfa:	2b01      	cmp	r3, #1
 8044bfc:	d003      	beq.n	8044c06 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8044bfe:	693b      	ldr	r3, [r7, #16]
 8044c00:	2b02      	cmp	r3, #2
 8044c02:	d020      	beq.n	8044c46 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8044c04:	e044      	b.n	8044c90 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
    {
      case RCC_PLLSOURCE_MSI:   /* MSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8044c06:	4b1d      	ldr	r3, [pc, #116]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c08:	681b      	ldr	r3, [r3, #0]
 8044c0a:	f003 0302 	and.w	r3, r3, #2
 8044c0e:	2b02      	cmp	r3, #2
 8044c10:	d116      	bne.n	8044c40 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
        {
          /*MSI frequency range in HZ*/
          pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8044c12:	4b1a      	ldr	r3, [pc, #104]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c14:	681b      	ldr	r3, [r3, #0]
 8044c16:	f003 0308 	and.w	r3, r3, #8
 8044c1a:	2b00      	cmp	r3, #0
 8044c1c:	d005      	beq.n	8044c2a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8044c1e:	4b17      	ldr	r3, [pc, #92]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c20:	681b      	ldr	r3, [r3, #0]
 8044c22:	091b      	lsrs	r3, r3, #4
 8044c24:	f003 030f 	and.w	r3, r3, #15
 8044c28:	e005      	b.n	8044c36 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8044c2a:	4b14      	ldr	r3, [pc, #80]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8044c30:	0a1b      	lsrs	r3, r3, #8
 8044c32:	f003 030f 	and.w	r3, r3, #15
 8044c36:	4a13      	ldr	r2, [pc, #76]	; (8044c84 <HAL_RCCEx_GetPeriphCLKFreq+0x134>)
 8044c38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044c3c:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8044c3e:	e02a      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8044c40:	2300      	movs	r3, #0
 8044c42:	61bb      	str	r3, [r7, #24]
        break;
 8044c44:	e027      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSI:   /* HSI ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8044c46:	4b0d      	ldr	r3, [pc, #52]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c48:	681b      	ldr	r3, [r3, #0]
 8044c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8044c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044c52:	d102      	bne.n	8044c5a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
        {
          pllvco = HSI_VALUE;
 8044c54:	4b0c      	ldr	r3, [pc, #48]	; (8044c88 <HAL_RCCEx_GetPeriphCLKFreq+0x138>)
 8044c56:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8044c58:	e01d      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8044c5a:	2300      	movs	r3, #0
 8044c5c:	61bb      	str	r3, [r7, #24]
        break;
 8044c5e:	e01a      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      case RCC_PLLSOURCE_HSE:   /* HSE ? */
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8044c60:	4b06      	ldr	r3, [pc, #24]	; (8044c7c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>)
 8044c62:	681b      	ldr	r3, [r3, #0]
 8044c64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8044c68:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8044c6c:	d102      	bne.n	8044c74 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          pllvco = HSE_VALUE;
 8044c6e:	4b07      	ldr	r3, [pc, #28]	; (8044c8c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>)
 8044c70:	61bb      	str	r3, [r7, #24]
        }
        else
        {
          pllvco = 0U;
        }
        break;
 8044c72:	e010      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
          pllvco = 0U;
 8044c74:	2300      	movs	r3, #0
 8044c76:	61bb      	str	r3, [r7, #24]
        break;
 8044c78:	e00d      	b.n	8044c96 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8044c7a:	bf00      	nop
 8044c7c:	40021000 	.word	0x40021000
 8044c80:	0003d090 	.word	0x0003d090
 8044c84:	08048ee8 	.word	0x08048ee8
 8044c88:	00f42400 	.word	0x00f42400
 8044c8c:	007a1200 	.word	0x007a1200
      default:
        /* No source */
        pllvco = 0U;
 8044c90:	2300      	movs	r3, #0
 8044c92:	61bb      	str	r3, [r7, #24]
        break;
 8044c94:	bf00      	nop
    }

    switch (PeriphClk)
 8044c96:	687b      	ldr	r3, [r7, #4]
 8044c98:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044c9c:	f000 8659 	beq.w	8045952 <HAL_RCCEx_GetPeriphCLKFreq+0xe02>
 8044ca0:	687b      	ldr	r3, [r7, #4]
 8044ca2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044ca6:	f200 86e7 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044caa:	687b      	ldr	r3, [r7, #4]
 8044cac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8044cb0:	f000 8605 	beq.w	80458be <HAL_RCCEx_GetPeriphCLKFreq+0xd6e>
 8044cb4:	687b      	ldr	r3, [r7, #4]
 8044cb6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8044cba:	f200 86dd 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044cbe:	687b      	ldr	r3, [r7, #4]
 8044cc0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044cc4:	f000 8468 	beq.w	8045598 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>
 8044cc8:	687b      	ldr	r3, [r7, #4]
 8044cca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8044cce:	f200 86d3 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044cd2:	687b      	ldr	r3, [r7, #4]
 8044cd4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044cd8:	f000 8530 	beq.w	804573c <HAL_RCCEx_GetPeriphCLKFreq+0xbec>
 8044cdc:	687b      	ldr	r3, [r7, #4]
 8044cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044ce2:	f200 86c9 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044ce6:	687b      	ldr	r3, [r7, #4]
 8044ce8:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8044cec:	f000 8180 	beq.w	8044ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x4a0>
 8044cf0:	687b      	ldr	r3, [r7, #4]
 8044cf2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8044cf6:	f200 86bf 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044cfa:	687b      	ldr	r3, [r7, #4]
 8044cfc:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8044d00:	f000 80c2 	beq.w	8044e88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8044d04:	687b      	ldr	r3, [r7, #4]
 8044d06:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8044d0a:	f200 86b5 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d0e:	687b      	ldr	r3, [r7, #4]
 8044d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044d14:	f000 842f 	beq.w	8045576 <HAL_RCCEx_GetPeriphCLKFreq+0xa26>
 8044d18:	687b      	ldr	r3, [r7, #4]
 8044d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8044d1e:	f200 86ab 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d22:	687b      	ldr	r3, [r7, #4]
 8044d24:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044d28:	f000 83e7 	beq.w	80454fa <HAL_RCCEx_GetPeriphCLKFreq+0x9aa>
 8044d2c:	687b      	ldr	r3, [r7, #4]
 8044d2e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044d32:	f200 86a1 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d36:	687b      	ldr	r3, [r7, #4]
 8044d38:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044d3c:	f000 80a4 	beq.w	8044e88 <HAL_RCCEx_GetPeriphCLKFreq+0x338>
 8044d40:	687b      	ldr	r3, [r7, #4]
 8044d42:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8044d46:	f200 8697 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d4a:	687b      	ldr	r3, [r7, #4]
 8044d4c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044d50:	f000 8092 	beq.w	8044e78 <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8044d54:	687b      	ldr	r3, [r7, #4]
 8044d56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8044d5a:	f200 868d 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d5e:	687b      	ldr	r3, [r7, #4]
 8044d60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8044d64:	f000 8080 	beq.w	8044e68 <HAL_RCCEx_GetPeriphCLKFreq+0x318>
 8044d68:	687b      	ldr	r3, [r7, #4]
 8044d6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8044d6e:	f200 8683 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d72:	687b      	ldr	r3, [r7, #4]
 8044d74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044d78:	f000 8553 	beq.w	8045822 <HAL_RCCEx_GetPeriphCLKFreq+0xcd2>
 8044d7c:	687b      	ldr	r3, [r7, #4]
 8044d7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8044d82:	f200 8679 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d86:	687b      	ldr	r3, [r7, #4]
 8044d88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044d8c:	f000 84ff 	beq.w	804578e <HAL_RCCEx_GetPeriphCLKFreq+0xc3e>
 8044d90:	687b      	ldr	r3, [r7, #4]
 8044d92:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8044d96:	f200 866f 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044d9a:	687b      	ldr	r3, [r7, #4]
 8044d9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044da0:	f000 84a0 	beq.w	80456e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb94>
 8044da4:	687b      	ldr	r3, [r7, #4]
 8044da6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8044daa:	f200 8665 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044dae:	687b      	ldr	r3, [r7, #4]
 8044db0:	2b80      	cmp	r3, #128	; 0x80
 8044db2:	f000 846b 	beq.w	804568c <HAL_RCCEx_GetPeriphCLKFreq+0xb3c>
 8044db6:	687b      	ldr	r3, [r7, #4]
 8044db8:	2b80      	cmp	r3, #128	; 0x80
 8044dba:	f200 865d 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044dbe:	687b      	ldr	r3, [r7, #4]
 8044dc0:	2b20      	cmp	r3, #32
 8044dc2:	d84b      	bhi.n	8044e5c <HAL_RCCEx_GetPeriphCLKFreq+0x30c>
 8044dc4:	687b      	ldr	r3, [r7, #4]
 8044dc6:	2b00      	cmp	r3, #0
 8044dc8:	f000 8656 	beq.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044dcc:	687b      	ldr	r3, [r7, #4]
 8044dce:	3b01      	subs	r3, #1
 8044dd0:	2b1f      	cmp	r3, #31
 8044dd2:	f200 8651 	bhi.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
 8044dd6:	a201      	add	r2, pc, #4	; (adr r2, 8044ddc <HAL_RCCEx_GetPeriphCLKFreq+0x28c>)
 8044dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8044ddc:	080451f5 	.word	0x080451f5
 8044de0:	08045269 	.word	0x08045269
 8044de4:	08045a79 	.word	0x08045a79
 8044de8:	080452fb 	.word	0x080452fb
 8044dec:	08045a79 	.word	0x08045a79
 8044df0:	08045a79 	.word	0x08045a79
 8044df4:	08045a79 	.word	0x08045a79
 8044df8:	08045373 	.word	0x08045373
 8044dfc:	08045a79 	.word	0x08045a79
 8044e00:	08045a79 	.word	0x08045a79
 8044e04:	08045a79 	.word	0x08045a79
 8044e08:	08045a79 	.word	0x08045a79
 8044e0c:	08045a79 	.word	0x08045a79
 8044e10:	08045a79 	.word	0x08045a79
 8044e14:	08045a79 	.word	0x08045a79
 8044e18:	080453f7 	.word	0x080453f7
 8044e1c:	08045a79 	.word	0x08045a79
 8044e20:	08045a79 	.word	0x08045a79
 8044e24:	08045a79 	.word	0x08045a79
 8044e28:	08045a79 	.word	0x08045a79
 8044e2c:	08045a79 	.word	0x08045a79
 8044e30:	08045a79 	.word	0x08045a79
 8044e34:	08045a79 	.word	0x08045a79
 8044e38:	08045a79 	.word	0x08045a79
 8044e3c:	08045a79 	.word	0x08045a79
 8044e40:	08045a79 	.word	0x08045a79
 8044e44:	08045a79 	.word	0x08045a79
 8044e48:	08045a79 	.word	0x08045a79
 8044e4c:	08045a79 	.word	0x08045a79
 8044e50:	08045a79 	.word	0x08045a79
 8044e54:	08045a79 	.word	0x08045a79
 8044e58:	08045479 	.word	0x08045479
 8044e5c:	687b      	ldr	r3, [r7, #4]
 8044e5e:	2b40      	cmp	r3, #64	; 0x40
 8044e60:	f000 83e8 	beq.w	8045634 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>

        break;

      default:
        /* Unexpected case, frequency default init at 0 */
        break;
 8044e64:	f000 be08 	b.w	8045a78 <HAL_RCCEx_GetPeriphCLKFreq+0xf28>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8044e68:	69b9      	ldr	r1, [r7, #24]
 8044e6a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8044e6e:	f001 f867 	bl	8045f40 <RCCEx_GetSAIxPeriphCLKFreq>
 8044e72:	61f8      	str	r0, [r7, #28]
        break;
 8044e74:	f000 be03 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8044e78:	69b9      	ldr	r1, [r7, #24]
 8044e7a:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8044e7e:	f001 f85f 	bl	8045f40 <RCCEx_GetSAIxPeriphCLKFreq>
 8044e82:	61f8      	str	r0, [r7, #28]
        break;
 8044e84:	f000 bdfb 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 8044e88:	4b9c      	ldr	r3, [pc, #624]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044e8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8044e8e:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8044e92:	60fb      	str	r3, [r7, #12]
 8044e94:	68fb      	ldr	r3, [r7, #12]
 8044e96:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8044e9a:	d015      	beq.n	8044ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x378>
 8044e9c:	68fb      	ldr	r3, [r7, #12]
 8044e9e:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8044ea2:	f200 8096 	bhi.w	8044fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8044ea6:	68fb      	ldr	r3, [r7, #12]
 8044ea8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044eac:	d02a      	beq.n	8044f04 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8044eae:	68fb      	ldr	r3, [r7, #12]
 8044eb0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044eb4:	f200 808d 	bhi.w	8044fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
 8044eb8:	68fb      	ldr	r3, [r7, #12]
 8044eba:	2b00      	cmp	r3, #0
 8044ebc:	d07f      	beq.n	8044fbe <HAL_RCCEx_GetPeriphCLKFreq+0x46e>
 8044ebe:	68fb      	ldr	r3, [r7, #12]
 8044ec0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8044ec4:	d04b      	beq.n	8044f5e <HAL_RCCEx_GetPeriphCLKFreq+0x40e>
            break;
 8044ec6:	e084      	b.n	8044fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x482>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8044ec8:	4b8c      	ldr	r3, [pc, #560]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044eca:	681b      	ldr	r3, [r3, #0]
 8044ecc:	f003 0302 	and.w	r3, r3, #2
 8044ed0:	2b02      	cmp	r3, #2
 8044ed2:	f040 8081 	bne.w	8044fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8044ed6:	4b89      	ldr	r3, [pc, #548]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044ed8:	681b      	ldr	r3, [r3, #0]
 8044eda:	f003 0308 	and.w	r3, r3, #8
 8044ede:	2b00      	cmp	r3, #0
 8044ee0:	d005      	beq.n	8044eee <HAL_RCCEx_GetPeriphCLKFreq+0x39e>
 8044ee2:	4b86      	ldr	r3, [pc, #536]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044ee4:	681b      	ldr	r3, [r3, #0]
 8044ee6:	091b      	lsrs	r3, r3, #4
 8044ee8:	f003 030f 	and.w	r3, r3, #15
 8044eec:	e005      	b.n	8044efa <HAL_RCCEx_GetPeriphCLKFreq+0x3aa>
 8044eee:	4b83      	ldr	r3, [pc, #524]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044ef0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8044ef4:	0a1b      	lsrs	r3, r3, #8
 8044ef6:	f003 030f 	and.w	r3, r3, #15
 8044efa:	4a81      	ldr	r2, [pc, #516]	; (8045100 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 8044efc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8044f00:	61fb      	str	r3, [r7, #28]
            break;
 8044f02:	e069      	b.n	8044fd8 <HAL_RCCEx_GetPeriphCLKFreq+0x488>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8044f04:	4b7d      	ldr	r3, [pc, #500]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f06:	681b      	ldr	r3, [r3, #0]
 8044f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8044f0c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8044f10:	d165      	bne.n	8044fde <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8044f12:	4b7a      	ldr	r3, [pc, #488]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f14:	68db      	ldr	r3, [r3, #12]
 8044f16:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044f1a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044f1e:	d15e      	bne.n	8044fde <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8044f20:	4b76      	ldr	r3, [pc, #472]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f22:	68db      	ldr	r3, [r3, #12]
 8044f24:	091b      	lsrs	r3, r3, #4
 8044f26:	f003 030f 	and.w	r3, r3, #15
 8044f2a:	3301      	adds	r3, #1
 8044f2c:	69ba      	ldr	r2, [r7, #24]
 8044f2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8044f32:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8044f34:	4b71      	ldr	r3, [pc, #452]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f36:	68db      	ldr	r3, [r3, #12]
 8044f38:	0a1b      	lsrs	r3, r3, #8
 8044f3a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044f3e:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8044f40:	69bb      	ldr	r3, [r7, #24]
 8044f42:	68ba      	ldr	r2, [r7, #8]
 8044f44:	fb03 f202 	mul.w	r2, r3, r2
 8044f48:	4b6c      	ldr	r3, [pc, #432]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f4a:	68db      	ldr	r3, [r3, #12]
 8044f4c:	0d5b      	lsrs	r3, r3, #21
 8044f4e:	f003 0303 	and.w	r3, r3, #3
 8044f52:	3301      	adds	r3, #1
 8044f54:	005b      	lsls	r3, r3, #1
 8044f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8044f5a:	61fb      	str	r3, [r7, #28]
            break;
 8044f5c:	e03f      	b.n	8044fde <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8044f5e:	4b67      	ldr	r3, [pc, #412]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f60:	681b      	ldr	r3, [r3, #0]
 8044f62:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8044f66:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8044f6a:	d13b      	bne.n	8044fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
              if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8044f6c:	4b63      	ldr	r3, [pc, #396]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f6e:	691b      	ldr	r3, [r3, #16]
 8044f70:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8044f74:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8044f78:	d134      	bne.n	8044fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
                pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8044f7a:	f000 ff2d 	bl	8045dd8 <RCCEx_PLLSAI1_GetVCOFreq>
 8044f7e:	61b8      	str	r0, [r7, #24]
                pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8044f80:	4b5e      	ldr	r3, [pc, #376]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f82:	691b      	ldr	r3, [r3, #16]
 8044f84:	091b      	lsrs	r3, r3, #4
 8044f86:	f003 030f 	and.w	r3, r3, #15
 8044f8a:	3301      	adds	r3, #1
 8044f8c:	69ba      	ldr	r2, [r7, #24]
 8044f8e:	fbb2 f3f3 	udiv	r3, r2, r3
 8044f92:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8044f94:	4b59      	ldr	r3, [pc, #356]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044f96:	691b      	ldr	r3, [r3, #16]
 8044f98:	0a1b      	lsrs	r3, r3, #8
 8044f9a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8044f9e:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 8044fa0:	69bb      	ldr	r3, [r7, #24]
 8044fa2:	68ba      	ldr	r2, [r7, #8]
 8044fa4:	fb03 f202 	mul.w	r2, r3, r2
 8044fa8:	4b54      	ldr	r3, [pc, #336]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044faa:	691b      	ldr	r3, [r3, #16]
 8044fac:	0d5b      	lsrs	r3, r3, #21
 8044fae:	f003 0303 	and.w	r3, r3, #3
 8044fb2:	3301      	adds	r3, #1
 8044fb4:	005b      	lsls	r3, r3, #1
 8044fb6:	fbb2 f3f3 	udiv	r3, r2, r3
 8044fba:	61fb      	str	r3, [r7, #28]
            break;
 8044fbc:	e012      	b.n	8044fe4 <HAL_RCCEx_GetPeriphCLKFreq+0x494>
            if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 8044fbe:	4b4f      	ldr	r3, [pc, #316]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044fc0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8044fc4:	f003 0302 	and.w	r3, r3, #2
 8044fc8:	2b02      	cmp	r3, #2
 8044fca:	d10e      	bne.n	8044fea <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
              frequency = HSI48_VALUE;
 8044fcc:	4b4d      	ldr	r3, [pc, #308]	; (8045104 <HAL_RCCEx_GetPeriphCLKFreq+0x5b4>)
 8044fce:	61fb      	str	r3, [r7, #28]
            break;
 8044fd0:	e00b      	b.n	8044fea <HAL_RCCEx_GetPeriphCLKFreq+0x49a>
            break;
 8044fd2:	bf00      	nop
 8044fd4:	f000 bd53 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8044fd8:	bf00      	nop
 8044fda:	f000 bd50 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8044fde:	bf00      	nop
 8044fe0:	f000 bd4d 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8044fe4:	bf00      	nop
 8044fe6:	f000 bd4a 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8044fea:	bf00      	nop
        break;
 8044fec:	f000 bd47 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        if (HAL_IS_BIT_SET(RCC->CCIPR2, RCC_CCIPR2_SDMMCSEL)) /* PLLP ? */
 8044ff0:	4b42      	ldr	r3, [pc, #264]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8044ff2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8044ff6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8044ffa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8044ffe:	d13d      	bne.n	804507c <HAL_RCCEx_GetPeriphCLKFreq+0x52c>
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8045000:	4b3e      	ldr	r3, [pc, #248]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045002:	681b      	ldr	r3, [r3, #0]
 8045004:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045008:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804500c:	f040 8536 	bne.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
            if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLPEN))
 8045010:	4b3a      	ldr	r3, [pc, #232]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045012:	68db      	ldr	r3, [r3, #12]
 8045014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045018:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804501c:	f040 852e 	bne.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8045020:	4b36      	ldr	r3, [pc, #216]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045022:	68db      	ldr	r3, [r3, #12]
 8045024:	091b      	lsrs	r3, r3, #4
 8045026:	f003 030f 	and.w	r3, r3, #15
 804502a:	3301      	adds	r3, #1
 804502c:	69ba      	ldr	r2, [r7, #24]
 804502e:	fbb2 f3f3 	udiv	r3, r2, r3
 8045032:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8045034:	4b31      	ldr	r3, [pc, #196]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045036:	68db      	ldr	r3, [r3, #12]
 8045038:	0a1b      	lsrs	r3, r3, #8
 804503a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804503e:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8045040:	4b2e      	ldr	r3, [pc, #184]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045042:	68db      	ldr	r3, [r3, #12]
 8045044:	0edb      	lsrs	r3, r3, #27
 8045046:	f003 031f 	and.w	r3, r3, #31
 804504a:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 804504c:	697b      	ldr	r3, [r7, #20]
 804504e:	2b00      	cmp	r3, #0
 8045050:	d10a      	bne.n	8045068 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8045052:	4b2a      	ldr	r3, [pc, #168]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 8045054:	68db      	ldr	r3, [r3, #12]
 8045056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804505a:	2b00      	cmp	r3, #0
 804505c:	d002      	beq.n	8045064 <HAL_RCCEx_GetPeriphCLKFreq+0x514>
                  pllp = 17U;
 804505e:	2311      	movs	r3, #17
 8045060:	617b      	str	r3, [r7, #20]
 8045062:	e001      	b.n	8045068 <HAL_RCCEx_GetPeriphCLKFreq+0x518>
                  pllp = 7U;
 8045064:	2307      	movs	r3, #7
 8045066:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8045068:	69bb      	ldr	r3, [r7, #24]
 804506a:	68ba      	ldr	r2, [r7, #8]
 804506c:	fb03 f202 	mul.w	r2, r3, r2
 8045070:	697b      	ldr	r3, [r7, #20]
 8045072:	fbb2 f3f3 	udiv	r3, r2, r3
 8045076:	61fb      	str	r3, [r7, #28]
        break;
 8045078:	f000 bd00 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
          srcclk = READ_BIT(RCC->CCIPR1, RCC_CCIPR1_CLK48MSEL);
 804507c:	4b1f      	ldr	r3, [pc, #124]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 804507e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045082:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8045086:	60fb      	str	r3, [r7, #12]
 8045088:	68fb      	ldr	r3, [r7, #12]
 804508a:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 804508e:	d016      	beq.n	80450be <HAL_RCCEx_GetPeriphCLKFreq+0x56e>
 8045090:	68fb      	ldr	r3, [r7, #12]
 8045092:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8045096:	f200 809e 	bhi.w	80451d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 804509a:	68fb      	ldr	r3, [r7, #12]
 804509c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80450a0:	d032      	beq.n	8045108 <HAL_RCCEx_GetPeriphCLKFreq+0x5b8>
 80450a2:	68fb      	ldr	r3, [r7, #12]
 80450a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80450a8:	f200 8095 	bhi.w	80451d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
 80450ac:	68fb      	ldr	r3, [r7, #12]
 80450ae:	2b00      	cmp	r3, #0
 80450b0:	f000 8087 	beq.w	80451c2 <HAL_RCCEx_GetPeriphCLKFreq+0x672>
 80450b4:	68fb      	ldr	r3, [r7, #12]
 80450b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80450ba:	d052      	beq.n	8045162 <HAL_RCCEx_GetPeriphCLKFreq+0x612>
              break;
 80450bc:	e08b      	b.n	80451d6 <HAL_RCCEx_GetPeriphCLKFreq+0x686>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80450be:	4b0f      	ldr	r3, [pc, #60]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80450c0:	681b      	ldr	r3, [r3, #0]
 80450c2:	f003 0302 	and.w	r3, r3, #2
 80450c6:	2b02      	cmp	r3, #2
 80450c8:	f040 8088 	bne.w	80451dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
                frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80450cc:	4b0b      	ldr	r3, [pc, #44]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80450ce:	681b      	ldr	r3, [r3, #0]
 80450d0:	f003 0308 	and.w	r3, r3, #8
 80450d4:	2b00      	cmp	r3, #0
 80450d6:	d005      	beq.n	80450e4 <HAL_RCCEx_GetPeriphCLKFreq+0x594>
 80450d8:	4b08      	ldr	r3, [pc, #32]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80450da:	681b      	ldr	r3, [r3, #0]
 80450dc:	091b      	lsrs	r3, r3, #4
 80450de:	f003 030f 	and.w	r3, r3, #15
 80450e2:	e005      	b.n	80450f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 80450e4:	4b05      	ldr	r3, [pc, #20]	; (80450fc <HAL_RCCEx_GetPeriphCLKFreq+0x5ac>)
 80450e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80450ea:	0a1b      	lsrs	r3, r3, #8
 80450ec:	f003 030f 	and.w	r3, r3, #15
 80450f0:	4a03      	ldr	r2, [pc, #12]	; (8045100 <HAL_RCCEx_GetPeriphCLKFreq+0x5b0>)
 80450f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80450f6:	61fb      	str	r3, [r7, #28]
              break;
 80450f8:	e070      	b.n	80451dc <HAL_RCCEx_GetPeriphCLKFreq+0x68c>
 80450fa:	bf00      	nop
 80450fc:	40021000 	.word	0x40021000
 8045100:	08048ee8 	.word	0x08048ee8
 8045104:	02dc6c00 	.word	0x02dc6c00
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8045108:	4baa      	ldr	r3, [pc, #680]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804510a:	681b      	ldr	r3, [r3, #0]
 804510c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045110:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8045114:	d165      	bne.n	80451e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8045116:	4ba7      	ldr	r3, [pc, #668]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045118:	68db      	ldr	r3, [r3, #12]
 804511a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 804511e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8045122:	d15e      	bne.n	80451e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8045124:	4ba3      	ldr	r3, [pc, #652]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045126:	68db      	ldr	r3, [r3, #12]
 8045128:	091b      	lsrs	r3, r3, #4
 804512a:	f003 030f 	and.w	r3, r3, #15
 804512e:	3301      	adds	r3, #1
 8045130:	69ba      	ldr	r2, [r7, #24]
 8045132:	fbb2 f3f3 	udiv	r3, r2, r3
 8045136:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8045138:	4b9e      	ldr	r3, [pc, #632]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804513a:	68db      	ldr	r3, [r3, #12]
 804513c:	0a1b      	lsrs	r3, r3, #8
 804513e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8045142:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 8045144:	69bb      	ldr	r3, [r7, #24]
 8045146:	68ba      	ldr	r2, [r7, #8]
 8045148:	fb03 f202 	mul.w	r2, r3, r2
 804514c:	4b99      	ldr	r3, [pc, #612]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804514e:	68db      	ldr	r3, [r3, #12]
 8045150:	0d5b      	lsrs	r3, r3, #21
 8045152:	f003 0303 	and.w	r3, r3, #3
 8045156:	3301      	adds	r3, #1
 8045158:	005b      	lsls	r3, r3, #1
 804515a:	fbb2 f3f3 	udiv	r3, r2, r3
 804515e:	61fb      	str	r3, [r7, #28]
              break;
 8045160:	e03f      	b.n	80451e2 <HAL_RCCEx_GetPeriphCLKFreq+0x692>
              if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8045162:	4b94      	ldr	r3, [pc, #592]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045164:	681b      	ldr	r3, [r3, #0]
 8045166:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 804516a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 804516e:	d13b      	bne.n	80451e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                if (HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8045170:	4b90      	ldr	r3, [pc, #576]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045172:	691b      	ldr	r3, [r3, #16]
 8045174:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8045178:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804517c:	d134      	bne.n	80451e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
                  pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 804517e:	f000 fe2b 	bl	8045dd8 <RCCEx_PLLSAI1_GetVCOFreq>
 8045182:	61b8      	str	r0, [r7, #24]
                  pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8045184:	4b8b      	ldr	r3, [pc, #556]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045186:	691b      	ldr	r3, [r3, #16]
 8045188:	091b      	lsrs	r3, r3, #4
 804518a:	f003 030f 	and.w	r3, r3, #15
 804518e:	3301      	adds	r3, #1
 8045190:	69ba      	ldr	r2, [r7, #24]
 8045192:	fbb2 f3f3 	udiv	r3, r2, r3
 8045196:	61bb      	str	r3, [r7, #24]
                  plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8045198:	4b86      	ldr	r3, [pc, #536]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804519a:	691b      	ldr	r3, [r3, #16]
 804519c:	0a1b      	lsrs	r3, r3, #8
 804519e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80451a2:	60bb      	str	r3, [r7, #8]
                  frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U);
 80451a4:	69bb      	ldr	r3, [r7, #24]
 80451a6:	68ba      	ldr	r2, [r7, #8]
 80451a8:	fb03 f202 	mul.w	r2, r3, r2
 80451ac:	4b81      	ldr	r3, [pc, #516]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80451ae:	691b      	ldr	r3, [r3, #16]
 80451b0:	0d5b      	lsrs	r3, r3, #21
 80451b2:	f003 0303 	and.w	r3, r3, #3
 80451b6:	3301      	adds	r3, #1
 80451b8:	005b      	lsls	r3, r3, #1
 80451ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80451be:	61fb      	str	r3, [r7, #28]
              break;
 80451c0:	e012      	b.n	80451e8 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
              if (HAL_IS_BIT_SET(RCC->CRRCR, RCC_CRRCR_HSI48RDY)) /* HSI48 ? */
 80451c2:	4b7c      	ldr	r3, [pc, #496]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80451c4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80451c8:	f003 0302 	and.w	r3, r3, #2
 80451cc:	2b02      	cmp	r3, #2
 80451ce:	d10e      	bne.n	80451ee <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
                frequency = HSI48_VALUE;
 80451d0:	4b79      	ldr	r3, [pc, #484]	; (80453b8 <HAL_RCCEx_GetPeriphCLKFreq+0x868>)
 80451d2:	61fb      	str	r3, [r7, #28]
              break;
 80451d4:	e00b      	b.n	80451ee <HAL_RCCEx_GetPeriphCLKFreq+0x69e>
              break;
 80451d6:	bf00      	nop
 80451d8:	f000 bc50 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80451dc:	bf00      	nop
 80451de:	f000 bc4d 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80451e2:	bf00      	nop
 80451e4:	f000 bc4a 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80451e8:	bf00      	nop
 80451ea:	f000 bc47 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
              break;
 80451ee:	bf00      	nop
        break;
 80451f0:	f000 bc44 	b.w	8045a7c <HAL_RCCEx_GetPeriphCLKFreq+0xf2c>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 80451f4:	4b6f      	ldr	r3, [pc, #444]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80451f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80451fa:	f003 0303 	and.w	r3, r3, #3
 80451fe:	60fb      	str	r3, [r7, #12]
 8045200:	68fb      	ldr	r3, [r7, #12]
 8045202:	2b03      	cmp	r3, #3
 8045204:	d827      	bhi.n	8045256 <HAL_RCCEx_GetPeriphCLKFreq+0x706>
 8045206:	a201      	add	r2, pc, #4	; (adr r2, 804520c <HAL_RCCEx_GetPeriphCLKFreq+0x6bc>)
 8045208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804520c:	0804521d 	.word	0x0804521d
 8045210:	08045225 	.word	0x08045225
 8045214:	0804522d 	.word	0x0804522d
 8045218:	08045241 	.word	0x08045241
            frequency = HAL_RCC_GetPCLK2Freq();
 804521c:	f7ff f82e 	bl	804427c <HAL_RCC_GetPCLK2Freq>
 8045220:	61f8      	str	r0, [r7, #28]
            break;
 8045222:	e01f      	b.n	8045264 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            frequency = HAL_RCC_GetSysClockFreq();
 8045224:	f7fe ff64 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 8045228:	61f8      	str	r0, [r7, #28]
            break;
 804522a:	e01b      	b.n	8045264 <HAL_RCCEx_GetPeriphCLKFreq+0x714>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 804522c:	4b61      	ldr	r3, [pc, #388]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804522e:	681b      	ldr	r3, [r3, #0]
 8045230:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045234:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045238:	d110      	bne.n	804525c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
              frequency = HSI_VALUE;
 804523a:	4b60      	ldr	r3, [pc, #384]	; (80453bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 804523c:	61fb      	str	r3, [r7, #28]
            break;
 804523e:	e00d      	b.n	804525c <HAL_RCCEx_GetPeriphCLKFreq+0x70c>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8045240:	4b5c      	ldr	r3, [pc, #368]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045242:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045246:	f003 0302 	and.w	r3, r3, #2
 804524a:	2b02      	cmp	r3, #2
 804524c:	d109      	bne.n	8045262 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
              frequency = LSE_VALUE;
 804524e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8045252:	61fb      	str	r3, [r7, #28]
            break;
 8045254:	e005      	b.n	8045262 <HAL_RCCEx_GetPeriphCLKFreq+0x712>
            break;
 8045256:	bf00      	nop
 8045258:	f000 bc11 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804525c:	bf00      	nop
 804525e:	f000 bc0e 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045262:	bf00      	nop
        break;
 8045264:	f000 bc0b 	b.w	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8045268:	4b52      	ldr	r3, [pc, #328]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804526a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804526e:	f003 030c 	and.w	r3, r3, #12
 8045272:	60fb      	str	r3, [r7, #12]
 8045274:	68fb      	ldr	r3, [r7, #12]
 8045276:	2b0c      	cmp	r3, #12
 8045278:	d839      	bhi.n	80452ee <HAL_RCCEx_GetPeriphCLKFreq+0x79e>
 804527a:	a201      	add	r2, pc, #4	; (adr r2, 8045280 <HAL_RCCEx_GetPeriphCLKFreq+0x730>)
 804527c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8045280:	080452b5 	.word	0x080452b5
 8045284:	080452ef 	.word	0x080452ef
 8045288:	080452ef 	.word	0x080452ef
 804528c:	080452ef 	.word	0x080452ef
 8045290:	080452bd 	.word	0x080452bd
 8045294:	080452ef 	.word	0x080452ef
 8045298:	080452ef 	.word	0x080452ef
 804529c:	080452ef 	.word	0x080452ef
 80452a0:	080452c5 	.word	0x080452c5
 80452a4:	080452ef 	.word	0x080452ef
 80452a8:	080452ef 	.word	0x080452ef
 80452ac:	080452ef 	.word	0x080452ef
 80452b0:	080452d9 	.word	0x080452d9
            frequency = HAL_RCC_GetPCLK1Freq();
 80452b4:	f7fe ffce 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80452b8:	61f8      	str	r0, [r7, #28]
            break;
 80452ba:	e01d      	b.n	80452f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            frequency = HAL_RCC_GetSysClockFreq();
 80452bc:	f7fe ff18 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 80452c0:	61f8      	str	r0, [r7, #28]
            break;
 80452c2:	e019      	b.n	80452f8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80452c4:	4b3b      	ldr	r3, [pc, #236]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80452c6:	681b      	ldr	r3, [r3, #0]
 80452c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80452cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80452d0:	d10f      	bne.n	80452f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
              frequency = HSI_VALUE;
 80452d2:	4b3a      	ldr	r3, [pc, #232]	; (80453bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 80452d4:	61fb      	str	r3, [r7, #28]
            break;
 80452d6:	e00c      	b.n	80452f2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80452d8:	4b36      	ldr	r3, [pc, #216]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80452da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80452de:	f003 0302 	and.w	r3, r3, #2
 80452e2:	2b02      	cmp	r3, #2
 80452e4:	d107      	bne.n	80452f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
              frequency = LSE_VALUE;
 80452e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80452ea:	61fb      	str	r3, [r7, #28]
            break;
 80452ec:	e003      	b.n	80452f6 <HAL_RCCEx_GetPeriphCLKFreq+0x7a6>
            break;
 80452ee:	bf00      	nop
 80452f0:	e3c5      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80452f2:	bf00      	nop
 80452f4:	e3c3      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80452f6:	bf00      	nop
        break;
 80452f8:	e3c1      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 80452fa:	4b2e      	ldr	r3, [pc, #184]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 80452fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045300:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8045304:	60fb      	str	r3, [r7, #12]
 8045306:	68fb      	ldr	r3, [r7, #12]
 8045308:	2b30      	cmp	r3, #48	; 0x30
 804530a:	d021      	beq.n	8045350 <HAL_RCCEx_GetPeriphCLKFreq+0x800>
 804530c:	68fb      	ldr	r3, [r7, #12]
 804530e:	2b30      	cmp	r3, #48	; 0x30
 8045310:	d829      	bhi.n	8045366 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8045312:	68fb      	ldr	r3, [r7, #12]
 8045314:	2b20      	cmp	r3, #32
 8045316:	d011      	beq.n	804533c <HAL_RCCEx_GetPeriphCLKFreq+0x7ec>
 8045318:	68fb      	ldr	r3, [r7, #12]
 804531a:	2b20      	cmp	r3, #32
 804531c:	d823      	bhi.n	8045366 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 804531e:	68fb      	ldr	r3, [r7, #12]
 8045320:	2b00      	cmp	r3, #0
 8045322:	d003      	beq.n	804532c <HAL_RCCEx_GetPeriphCLKFreq+0x7dc>
 8045324:	68fb      	ldr	r3, [r7, #12]
 8045326:	2b10      	cmp	r3, #16
 8045328:	d004      	beq.n	8045334 <HAL_RCCEx_GetPeriphCLKFreq+0x7e4>
            break;
 804532a:	e01c      	b.n	8045366 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
            frequency = HAL_RCC_GetPCLK1Freq();
 804532c:	f7fe ff92 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045330:	61f8      	str	r0, [r7, #28]
            break;
 8045332:	e01d      	b.n	8045370 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            frequency = HAL_RCC_GetSysClockFreq();
 8045334:	f7fe fedc 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 8045338:	61f8      	str	r0, [r7, #28]
            break;
 804533a:	e019      	b.n	8045370 <HAL_RCCEx_GetPeriphCLKFreq+0x820>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 804533c:	4b1d      	ldr	r3, [pc, #116]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 804533e:	681b      	ldr	r3, [r3, #0]
 8045340:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045344:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045348:	d10f      	bne.n	804536a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
              frequency = HSI_VALUE;
 804534a:	4b1c      	ldr	r3, [pc, #112]	; (80453bc <HAL_RCCEx_GetPeriphCLKFreq+0x86c>)
 804534c:	61fb      	str	r3, [r7, #28]
            break;
 804534e:	e00c      	b.n	804536a <HAL_RCCEx_GetPeriphCLKFreq+0x81a>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8045350:	4b18      	ldr	r3, [pc, #96]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045352:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045356:	f003 0302 	and.w	r3, r3, #2
 804535a:	2b02      	cmp	r3, #2
 804535c:	d107      	bne.n	804536e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
              frequency = LSE_VALUE;
 804535e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8045362:	61fb      	str	r3, [r7, #28]
            break;
 8045364:	e003      	b.n	804536e <HAL_RCCEx_GetPeriphCLKFreq+0x81e>
            break;
 8045366:	bf00      	nop
 8045368:	e389      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804536a:	bf00      	nop
 804536c:	e387      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804536e:	bf00      	nop
        break;
 8045370:	e385      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8045372:	4b10      	ldr	r3, [pc, #64]	; (80453b4 <HAL_RCCEx_GetPeriphCLKFreq+0x864>)
 8045374:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045378:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 804537c:	60fb      	str	r3, [r7, #12]
 804537e:	68fb      	ldr	r3, [r7, #12]
 8045380:	2bc0      	cmp	r3, #192	; 0xc0
 8045382:	d027      	beq.n	80453d4 <HAL_RCCEx_GetPeriphCLKFreq+0x884>
 8045384:	68fb      	ldr	r3, [r7, #12]
 8045386:	2bc0      	cmp	r3, #192	; 0xc0
 8045388:	d82f      	bhi.n	80453ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 804538a:	68fb      	ldr	r3, [r7, #12]
 804538c:	2b80      	cmp	r3, #128	; 0x80
 804538e:	d017      	beq.n	80453c0 <HAL_RCCEx_GetPeriphCLKFreq+0x870>
 8045390:	68fb      	ldr	r3, [r7, #12]
 8045392:	2b80      	cmp	r3, #128	; 0x80
 8045394:	d829      	bhi.n	80453ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
 8045396:	68fb      	ldr	r3, [r7, #12]
 8045398:	2b00      	cmp	r3, #0
 804539a:	d003      	beq.n	80453a4 <HAL_RCCEx_GetPeriphCLKFreq+0x854>
 804539c:	68fb      	ldr	r3, [r7, #12]
 804539e:	2b40      	cmp	r3, #64	; 0x40
 80453a0:	d004      	beq.n	80453ac <HAL_RCCEx_GetPeriphCLKFreq+0x85c>
            break;
 80453a2:	e022      	b.n	80453ea <HAL_RCCEx_GetPeriphCLKFreq+0x89a>
            frequency = HAL_RCC_GetPCLK1Freq();
 80453a4:	f7fe ff56 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80453a8:	61f8      	str	r0, [r7, #28]
            break;
 80453aa:	e023      	b.n	80453f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
            frequency = HAL_RCC_GetSysClockFreq();
 80453ac:	f7fe fea0 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 80453b0:	61f8      	str	r0, [r7, #28]
            break;
 80453b2:	e01f      	b.n	80453f4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a4>
 80453b4:	40021000 	.word	0x40021000
 80453b8:	02dc6c00 	.word	0x02dc6c00
 80453bc:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80453c0:	4b99      	ldr	r3, [pc, #612]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80453c2:	681b      	ldr	r3, [r3, #0]
 80453c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80453c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80453cc:	d10f      	bne.n	80453ee <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
              frequency = HSI_VALUE;
 80453ce:	4b97      	ldr	r3, [pc, #604]	; (804562c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80453d0:	61fb      	str	r3, [r7, #28]
            break;
 80453d2:	e00c      	b.n	80453ee <HAL_RCCEx_GetPeriphCLKFreq+0x89e>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80453d4:	4b94      	ldr	r3, [pc, #592]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80453d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80453da:	f003 0302 	and.w	r3, r3, #2
 80453de:	2b02      	cmp	r3, #2
 80453e0:	d107      	bne.n	80453f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
              frequency = LSE_VALUE;
 80453e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80453e6:	61fb      	str	r3, [r7, #28]
            break;
 80453e8:	e003      	b.n	80453f2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
            break;
 80453ea:	bf00      	nop
 80453ec:	e347      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80453ee:	bf00      	nop
 80453f0:	e345      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80453f2:	bf00      	nop
        break;
 80453f4:	e343      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 80453f6:	4b8c      	ldr	r3, [pc, #560]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80453f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80453fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8045400:	60fb      	str	r3, [r7, #12]
 8045402:	68fb      	ldr	r3, [r7, #12]
 8045404:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045408:	d025      	beq.n	8045456 <HAL_RCCEx_GetPeriphCLKFreq+0x906>
 804540a:	68fb      	ldr	r3, [r7, #12]
 804540c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045410:	d82c      	bhi.n	804546c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8045412:	68fb      	ldr	r3, [r7, #12]
 8045414:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045418:	d013      	beq.n	8045442 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
 804541a:	68fb      	ldr	r3, [r7, #12]
 804541c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045420:	d824      	bhi.n	804546c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
 8045422:	68fb      	ldr	r3, [r7, #12]
 8045424:	2b00      	cmp	r3, #0
 8045426:	d004      	beq.n	8045432 <HAL_RCCEx_GetPeriphCLKFreq+0x8e2>
 8045428:	68fb      	ldr	r3, [r7, #12]
 804542a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 804542e:	d004      	beq.n	804543a <HAL_RCCEx_GetPeriphCLKFreq+0x8ea>
            break;
 8045430:	e01c      	b.n	804546c <HAL_RCCEx_GetPeriphCLKFreq+0x91c>
            frequency = HAL_RCC_GetPCLK1Freq();
 8045432:	f7fe ff0f 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045436:	61f8      	str	r0, [r7, #28]
            break;
 8045438:	e01d      	b.n	8045476 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            frequency = HAL_RCC_GetSysClockFreq();
 804543a:	f7fe fe59 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 804543e:	61f8      	str	r0, [r7, #28]
            break;
 8045440:	e019      	b.n	8045476 <HAL_RCCEx_GetPeriphCLKFreq+0x926>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045442:	4b79      	ldr	r3, [pc, #484]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045444:	681b      	ldr	r3, [r3, #0]
 8045446:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804544a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804544e:	d10f      	bne.n	8045470 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
              frequency = HSI_VALUE;
 8045450:	4b76      	ldr	r3, [pc, #472]	; (804562c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8045452:	61fb      	str	r3, [r7, #28]
            break;
 8045454:	e00c      	b.n	8045470 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8045456:	4b74      	ldr	r3, [pc, #464]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045458:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804545c:	f003 0302 	and.w	r3, r3, #2
 8045460:	2b02      	cmp	r3, #2
 8045462:	d107      	bne.n	8045474 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
              frequency = LSE_VALUE;
 8045464:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8045468:	61fb      	str	r3, [r7, #28]
            break;
 804546a:	e003      	b.n	8045474 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
            break;
 804546c:	bf00      	nop
 804546e:	e306      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045470:	bf00      	nop
 8045472:	e304      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045474:	bf00      	nop
        break;
 8045476:	e302      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8045478:	4b6b      	ldr	r3, [pc, #428]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 804547a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804547e:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8045482:	60fb      	str	r3, [r7, #12]
 8045484:	68fb      	ldr	r3, [r7, #12]
 8045486:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 804548a:	d025      	beq.n	80454d8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 804548c:	68fb      	ldr	r3, [r7, #12]
 804548e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8045492:	d82c      	bhi.n	80454ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 8045494:	68fb      	ldr	r3, [r7, #12]
 8045496:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 804549a:	d013      	beq.n	80454c4 <HAL_RCCEx_GetPeriphCLKFreq+0x974>
 804549c:	68fb      	ldr	r3, [r7, #12]
 804549e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80454a2:	d824      	bhi.n	80454ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
 80454a4:	68fb      	ldr	r3, [r7, #12]
 80454a6:	2b00      	cmp	r3, #0
 80454a8:	d004      	beq.n	80454b4 <HAL_RCCEx_GetPeriphCLKFreq+0x964>
 80454aa:	68fb      	ldr	r3, [r7, #12]
 80454ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80454b0:	d004      	beq.n	80454bc <HAL_RCCEx_GetPeriphCLKFreq+0x96c>
            break;
 80454b2:	e01c      	b.n	80454ee <HAL_RCCEx_GetPeriphCLKFreq+0x99e>
            frequency = HAL_RCC_GetPCLK1Freq();
 80454b4:	f7fe fece 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80454b8:	61f8      	str	r0, [r7, #28]
            break;
 80454ba:	e01d      	b.n	80454f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            frequency = HAL_RCC_GetSysClockFreq();
 80454bc:	f7fe fe18 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 80454c0:	61f8      	str	r0, [r7, #28]
            break;
 80454c2:	e019      	b.n	80454f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9a8>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80454c4:	4b58      	ldr	r3, [pc, #352]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80454c6:	681b      	ldr	r3, [r3, #0]
 80454c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80454cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80454d0:	d10f      	bne.n	80454f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
              frequency = HSI_VALUE;
 80454d2:	4b56      	ldr	r3, [pc, #344]	; (804562c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 80454d4:	61fb      	str	r3, [r7, #28]
            break;
 80454d6:	e00c      	b.n	80454f2 <HAL_RCCEx_GetPeriphCLKFreq+0x9a2>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80454d8:	4b53      	ldr	r3, [pc, #332]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80454da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80454de:	f003 0302 	and.w	r3, r3, #2
 80454e2:	2b02      	cmp	r3, #2
 80454e4:	d107      	bne.n	80454f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
              frequency = LSE_VALUE;
 80454e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80454ea:	61fb      	str	r3, [r7, #28]
            break;
 80454ec:	e003      	b.n	80454f6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
            break;
 80454ee:	bf00      	nop
 80454f0:	e2c5      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80454f2:	bf00      	nop
 80454f4:	e2c3      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80454f6:	bf00      	nop
        break;
 80454f8:	e2c1      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80454fa:	4b4b      	ldr	r3, [pc, #300]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80454fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045500:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8045504:	60fb      	str	r3, [r7, #12]
 8045506:	68fb      	ldr	r3, [r7, #12]
 8045508:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804550c:	d007      	beq.n	804551e <HAL_RCCEx_GetPeriphCLKFreq+0x9ce>
 804550e:	68fb      	ldr	r3, [r7, #12]
 8045510:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8045514:	d12b      	bne.n	804556e <HAL_RCCEx_GetPeriphCLKFreq+0xa1e>
            frequency = HAL_RCC_GetSysClockFreq();
 8045516:	f7fe fdeb 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 804551a:	61f8      	str	r0, [r7, #28]
            break;
 804551c:	e02a      	b.n	8045574 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U)
 804551e:	4b42      	ldr	r3, [pc, #264]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045520:	691b      	ldr	r3, [r3, #16]
 8045522:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8045526:	2b00      	cmp	r3, #0
 8045528:	d023      	beq.n	8045572 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 804552a:	f000 fc55 	bl	8045dd8 <RCCEx_PLLSAI1_GetVCOFreq>
 804552e:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8045530:	4b3d      	ldr	r3, [pc, #244]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045532:	691b      	ldr	r3, [r3, #16]
 8045534:	091b      	lsrs	r3, r3, #4
 8045536:	f003 030f 	and.w	r3, r3, #15
 804553a:	3301      	adds	r3, #1
 804553c:	69ba      	ldr	r2, [r7, #24]
 804553e:	fbb2 f3f3 	udiv	r3, r2, r3
 8045542:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8045544:	4b38      	ldr	r3, [pc, #224]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045546:	691b      	ldr	r3, [r3, #16]
 8045548:	0a1b      	lsrs	r3, r3, #8
 804554a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 804554e:	60bb      	str	r3, [r7, #8]
              frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U);
 8045550:	69bb      	ldr	r3, [r7, #24]
 8045552:	68ba      	ldr	r2, [r7, #8]
 8045554:	fb03 f202 	mul.w	r2, r3, r2
 8045558:	4b33      	ldr	r3, [pc, #204]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 804555a:	691b      	ldr	r3, [r3, #16]
 804555c:	0e5b      	lsrs	r3, r3, #25
 804555e:	f003 0303 	and.w	r3, r3, #3
 8045562:	3301      	adds	r3, #1
 8045564:	005b      	lsls	r3, r3, #1
 8045566:	fbb2 f3f3 	udiv	r3, r2, r3
 804556a:	61fb      	str	r3, [r7, #28]
            break;
 804556c:	e001      	b.n	8045572 <HAL_RCCEx_GetPeriphCLKFreq+0xa22>
            break;
 804556e:	bf00      	nop
 8045570:	e285      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045572:	bf00      	nop
        break;
 8045574:	e283      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8045576:	4b2c      	ldr	r3, [pc, #176]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045578:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804557c:	f003 0304 	and.w	r3, r3, #4
 8045580:	60fb      	str	r3, [r7, #12]
        if (srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8045582:	68fb      	ldr	r3, [r7, #12]
 8045584:	2b00      	cmp	r3, #0
 8045586:	d103      	bne.n	8045590 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>
          frequency = HAL_RCC_GetPCLK2Freq();
 8045588:	f7fe fe78 	bl	804427c <HAL_RCC_GetPCLK2Freq>
 804558c:	61f8      	str	r0, [r7, #28]
        break;
 804558e:	e276      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
          frequency = HAL_RCC_GetSysClockFreq();
 8045590:	f7fe fdae 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 8045594:	61f8      	str	r0, [r7, #28]
        break;
 8045596:	e272      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_DFSDM1AUDIO_SOURCE();
 8045598:	4b23      	ldr	r3, [pc, #140]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 804559a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 804559e:	f003 0318 	and.w	r3, r3, #24
 80455a2:	60fb      	str	r3, [r7, #12]
 80455a4:	68fb      	ldr	r3, [r7, #12]
 80455a6:	2b10      	cmp	r3, #16
 80455a8:	d010      	beq.n	80455cc <HAL_RCCEx_GetPeriphCLKFreq+0xa7c>
 80455aa:	68fb      	ldr	r3, [r7, #12]
 80455ac:	2b10      	cmp	r3, #16
 80455ae:	d834      	bhi.n	804561a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
 80455b0:	68fb      	ldr	r3, [r7, #12]
 80455b2:	2b00      	cmp	r3, #0
 80455b4:	d003      	beq.n	80455be <HAL_RCCEx_GetPeriphCLKFreq+0xa6e>
 80455b6:	68fb      	ldr	r3, [r7, #12]
 80455b8:	2b08      	cmp	r3, #8
 80455ba:	d024      	beq.n	8045606 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
            break;
 80455bc:	e02d      	b.n	804561a <HAL_RCCEx_GetPeriphCLKFreq+0xaca>
            frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 80455be:	69b9      	ldr	r1, [r7, #24]
 80455c0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80455c4:	f000 fcbc 	bl	8045f40 <RCCEx_GetSAIxPeriphCLKFreq>
 80455c8:	61f8      	str	r0, [r7, #28]
            break;
 80455ca:	e02b      	b.n	8045624 <HAL_RCCEx_GetPeriphCLKFreq+0xad4>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 80455cc:	4b16      	ldr	r3, [pc, #88]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80455ce:	681b      	ldr	r3, [r3, #0]
 80455d0:	f003 0302 	and.w	r3, r3, #2
 80455d4:	2b02      	cmp	r3, #2
 80455d6:	d122      	bne.n	804561e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
              frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 80455d8:	4b13      	ldr	r3, [pc, #76]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80455da:	681b      	ldr	r3, [r3, #0]
 80455dc:	f003 0308 	and.w	r3, r3, #8
 80455e0:	2b00      	cmp	r3, #0
 80455e2:	d005      	beq.n	80455f0 <HAL_RCCEx_GetPeriphCLKFreq+0xaa0>
 80455e4:	4b10      	ldr	r3, [pc, #64]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80455e6:	681b      	ldr	r3, [r3, #0]
 80455e8:	091b      	lsrs	r3, r3, #4
 80455ea:	f003 030f 	and.w	r3, r3, #15
 80455ee:	e005      	b.n	80455fc <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
 80455f0:	4b0d      	ldr	r3, [pc, #52]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 80455f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80455f6:	0a1b      	lsrs	r3, r3, #8
 80455f8:	f003 030f 	and.w	r3, r3, #15
 80455fc:	4a0c      	ldr	r2, [pc, #48]	; (8045630 <HAL_RCCEx_GetPeriphCLKFreq+0xae0>)
 80455fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045602:	61fb      	str	r3, [r7, #28]
            break;
 8045604:	e00b      	b.n	804561e <HAL_RCCEx_GetPeriphCLKFreq+0xace>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045606:	4b08      	ldr	r3, [pc, #32]	; (8045628 <HAL_RCCEx_GetPeriphCLKFreq+0xad8>)
 8045608:	681b      	ldr	r3, [r3, #0]
 804560a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804560e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045612:	d106      	bne.n	8045622 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
              frequency = HSI_VALUE;
 8045614:	4b05      	ldr	r3, [pc, #20]	; (804562c <HAL_RCCEx_GetPeriphCLKFreq+0xadc>)
 8045616:	61fb      	str	r3, [r7, #28]
            break;
 8045618:	e003      	b.n	8045622 <HAL_RCCEx_GetPeriphCLKFreq+0xad2>
            break;
 804561a:	bf00      	nop
 804561c:	e22f      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804561e:	bf00      	nop
 8045620:	e22d      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045622:	bf00      	nop
        break;
 8045624:	e22b      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
 8045626:	bf00      	nop
 8045628:	40021000 	.word	0x40021000
 804562c:	00f42400 	.word	0x00f42400
 8045630:	08048ee8 	.word	0x08048ee8
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 8045634:	4b96      	ldr	r3, [pc, #600]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045636:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804563a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 804563e:	60fb      	str	r3, [r7, #12]
 8045640:	68fb      	ldr	r3, [r7, #12]
 8045642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8045646:	d013      	beq.n	8045670 <HAL_RCCEx_GetPeriphCLKFreq+0xb20>
 8045648:	68fb      	ldr	r3, [r7, #12]
 804564a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 804564e:	d819      	bhi.n	8045684 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
 8045650:	68fb      	ldr	r3, [r7, #12]
 8045652:	2b00      	cmp	r3, #0
 8045654:	d004      	beq.n	8045660 <HAL_RCCEx_GetPeriphCLKFreq+0xb10>
 8045656:	68fb      	ldr	r3, [r7, #12]
 8045658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 804565c:	d004      	beq.n	8045668 <HAL_RCCEx_GetPeriphCLKFreq+0xb18>
            break;
 804565e:	e011      	b.n	8045684 <HAL_RCCEx_GetPeriphCLKFreq+0xb34>
            frequency = HAL_RCC_GetPCLK1Freq();
 8045660:	f7fe fdf8 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045664:	61f8      	str	r0, [r7, #28]
            break;
 8045666:	e010      	b.n	804568a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            frequency = HAL_RCC_GetSysClockFreq();
 8045668:	f7fe fd42 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 804566c:	61f8      	str	r0, [r7, #28]
            break;
 804566e:	e00c      	b.n	804568a <HAL_RCCEx_GetPeriphCLKFreq+0xb3a>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045670:	4b87      	ldr	r3, [pc, #540]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045672:	681b      	ldr	r3, [r3, #0]
 8045674:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804567c:	d104      	bne.n	8045688 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
              frequency = HSI_VALUE;
 804567e:	4b85      	ldr	r3, [pc, #532]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8045680:	61fb      	str	r3, [r7, #28]
            break;
 8045682:	e001      	b.n	8045688 <HAL_RCCEx_GetPeriphCLKFreq+0xb38>
            break;
 8045684:	bf00      	nop
 8045686:	e1fa      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045688:	bf00      	nop
        break;
 804568a:	e1f8      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 804568c:	4b80      	ldr	r3, [pc, #512]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 804568e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045692:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8045696:	60fb      	str	r3, [r7, #12]
 8045698:	68fb      	ldr	r3, [r7, #12]
 804569a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 804569e:	d013      	beq.n	80456c8 <HAL_RCCEx_GetPeriphCLKFreq+0xb78>
 80456a0:	68fb      	ldr	r3, [r7, #12]
 80456a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80456a6:	d819      	bhi.n	80456dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
 80456a8:	68fb      	ldr	r3, [r7, #12]
 80456aa:	2b00      	cmp	r3, #0
 80456ac:	d004      	beq.n	80456b8 <HAL_RCCEx_GetPeriphCLKFreq+0xb68>
 80456ae:	68fb      	ldr	r3, [r7, #12]
 80456b0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80456b4:	d004      	beq.n	80456c0 <HAL_RCCEx_GetPeriphCLKFreq+0xb70>
            break;
 80456b6:	e011      	b.n	80456dc <HAL_RCCEx_GetPeriphCLKFreq+0xb8c>
            frequency = HAL_RCC_GetPCLK1Freq();
 80456b8:	f7fe fdcc 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80456bc:	61f8      	str	r0, [r7, #28]
            break;
 80456be:	e010      	b.n	80456e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            frequency = HAL_RCC_GetSysClockFreq();
 80456c0:	f7fe fd16 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 80456c4:	61f8      	str	r0, [r7, #28]
            break;
 80456c6:	e00c      	b.n	80456e2 <HAL_RCCEx_GetPeriphCLKFreq+0xb92>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80456c8:	4b71      	ldr	r3, [pc, #452]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80456ca:	681b      	ldr	r3, [r3, #0]
 80456cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80456d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80456d4:	d104      	bne.n	80456e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
              frequency = HSI_VALUE;
 80456d6:	4b6f      	ldr	r3, [pc, #444]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80456d8:	61fb      	str	r3, [r7, #28]
            break;
 80456da:	e001      	b.n	80456e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb90>
            break;
 80456dc:	bf00      	nop
 80456de:	e1ce      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80456e0:	bf00      	nop
        break;
 80456e2:	e1cc      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 80456e4:	4b6a      	ldr	r3, [pc, #424]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80456e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80456ea:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80456ee:	60fb      	str	r3, [r7, #12]
 80456f0:	68fb      	ldr	r3, [r7, #12]
 80456f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80456f6:	d013      	beq.n	8045720 <HAL_RCCEx_GetPeriphCLKFreq+0xbd0>
 80456f8:	68fb      	ldr	r3, [r7, #12]
 80456fa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80456fe:	d819      	bhi.n	8045734 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
 8045700:	68fb      	ldr	r3, [r7, #12]
 8045702:	2b00      	cmp	r3, #0
 8045704:	d004      	beq.n	8045710 <HAL_RCCEx_GetPeriphCLKFreq+0xbc0>
 8045706:	68fb      	ldr	r3, [r7, #12]
 8045708:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 804570c:	d004      	beq.n	8045718 <HAL_RCCEx_GetPeriphCLKFreq+0xbc8>
            break;
 804570e:	e011      	b.n	8045734 <HAL_RCCEx_GetPeriphCLKFreq+0xbe4>
            frequency = HAL_RCC_GetPCLK1Freq();
 8045710:	f7fe fda0 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045714:	61f8      	str	r0, [r7, #28]
            break;
 8045716:	e010      	b.n	804573a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            frequency = HAL_RCC_GetSysClockFreq();
 8045718:	f7fe fcea 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 804571c:	61f8      	str	r0, [r7, #28]
            break;
 804571e:	e00c      	b.n	804573a <HAL_RCCEx_GetPeriphCLKFreq+0xbea>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045720:	4b5b      	ldr	r3, [pc, #364]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045722:	681b      	ldr	r3, [r3, #0]
 8045724:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045728:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804572c:	d104      	bne.n	8045738 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
              frequency = HSI_VALUE;
 804572e:	4b59      	ldr	r3, [pc, #356]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8045730:	61fb      	str	r3, [r7, #28]
            break;
 8045732:	e001      	b.n	8045738 <HAL_RCCEx_GetPeriphCLKFreq+0xbe8>
            break;
 8045734:	bf00      	nop
 8045736:	e1a2      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045738:	bf00      	nop
        break;
 804573a:	e1a0      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_I2C4_SOURCE();
 804573c:	4b54      	ldr	r3, [pc, #336]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 804573e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8045742:	f003 0303 	and.w	r3, r3, #3
 8045746:	60fb      	str	r3, [r7, #12]
 8045748:	68fb      	ldr	r3, [r7, #12]
 804574a:	2b02      	cmp	r3, #2
 804574c:	d011      	beq.n	8045772 <HAL_RCCEx_GetPeriphCLKFreq+0xc22>
 804574e:	68fb      	ldr	r3, [r7, #12]
 8045750:	2b02      	cmp	r3, #2
 8045752:	d818      	bhi.n	8045786 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
 8045754:	68fb      	ldr	r3, [r7, #12]
 8045756:	2b00      	cmp	r3, #0
 8045758:	d003      	beq.n	8045762 <HAL_RCCEx_GetPeriphCLKFreq+0xc12>
 804575a:	68fb      	ldr	r3, [r7, #12]
 804575c:	2b01      	cmp	r3, #1
 804575e:	d004      	beq.n	804576a <HAL_RCCEx_GetPeriphCLKFreq+0xc1a>
            break;
 8045760:	e011      	b.n	8045786 <HAL_RCCEx_GetPeriphCLKFreq+0xc36>
            frequency = HAL_RCC_GetPCLK1Freq();
 8045762:	f7fe fd77 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045766:	61f8      	str	r0, [r7, #28]
            break;
 8045768:	e010      	b.n	804578c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            frequency = HAL_RCC_GetSysClockFreq();
 804576a:	f7fe fcc1 	bl	80440f0 <HAL_RCC_GetSysClockFreq>
 804576e:	61f8      	str	r0, [r7, #28]
            break;
 8045770:	e00c      	b.n	804578c <HAL_RCCEx_GetPeriphCLKFreq+0xc3c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045772:	4b47      	ldr	r3, [pc, #284]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045774:	681b      	ldr	r3, [r3, #0]
 8045776:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 804577a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804577e:	d104      	bne.n	804578a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
              frequency = HSI_VALUE;
 8045780:	4b44      	ldr	r3, [pc, #272]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 8045782:	61fb      	str	r3, [r7, #28]
            break;
 8045784:	e001      	b.n	804578a <HAL_RCCEx_GetPeriphCLKFreq+0xc3a>
            break;
 8045786:	bf00      	nop
 8045788:	e179      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804578a:	bf00      	nop
        break;
 804578c:	e177      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 804578e:	4b40      	ldr	r3, [pc, #256]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045790:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045794:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8045798:	60fb      	str	r3, [r7, #12]
 804579a:	68fb      	ldr	r3, [r7, #12]
 804579c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80457a0:	d02c      	beq.n	80457fc <HAL_RCCEx_GetPeriphCLKFreq+0xcac>
 80457a2:	68fb      	ldr	r3, [r7, #12]
 80457a4:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80457a8:	d833      	bhi.n	8045812 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80457aa:	68fb      	ldr	r3, [r7, #12]
 80457ac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80457b0:	d01a      	beq.n	80457e8 <HAL_RCCEx_GetPeriphCLKFreq+0xc98>
 80457b2:	68fb      	ldr	r3, [r7, #12]
 80457b4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80457b8:	d82b      	bhi.n	8045812 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
 80457ba:	68fb      	ldr	r3, [r7, #12]
 80457bc:	2b00      	cmp	r3, #0
 80457be:	d004      	beq.n	80457ca <HAL_RCCEx_GetPeriphCLKFreq+0xc7a>
 80457c0:	68fb      	ldr	r3, [r7, #12]
 80457c2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80457c6:	d004      	beq.n	80457d2 <HAL_RCCEx_GetPeriphCLKFreq+0xc82>
            break;
 80457c8:	e023      	b.n	8045812 <HAL_RCCEx_GetPeriphCLKFreq+0xcc2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80457ca:	f7fe fd43 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80457ce:	61f8      	str	r0, [r7, #28]
            break;
 80457d0:	e026      	b.n	8045820 <HAL_RCCEx_GetPeriphCLKFreq+0xcd0>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80457d2:	4b2f      	ldr	r3, [pc, #188]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80457d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80457d8:	f003 0302 	and.w	r3, r3, #2
 80457dc:	2b02      	cmp	r3, #2
 80457de:	d11a      	bne.n	8045816 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
              frequency = LSI_VALUE;
 80457e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80457e4:	61fb      	str	r3, [r7, #28]
            break;
 80457e6:	e016      	b.n	8045816 <HAL_RCCEx_GetPeriphCLKFreq+0xcc6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80457e8:	4b29      	ldr	r3, [pc, #164]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80457ea:	681b      	ldr	r3, [r3, #0]
 80457ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80457f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80457f4:	d111      	bne.n	804581a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
              frequency = HSI_VALUE;
 80457f6:	4b27      	ldr	r3, [pc, #156]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 80457f8:	61fb      	str	r3, [r7, #28]
            break;
 80457fa:	e00e      	b.n	804581a <HAL_RCCEx_GetPeriphCLKFreq+0xcca>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80457fc:	4b24      	ldr	r3, [pc, #144]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 80457fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045802:	f003 0302 	and.w	r3, r3, #2
 8045806:	2b02      	cmp	r3, #2
 8045808:	d109      	bne.n	804581e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
              frequency = LSE_VALUE;
 804580a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804580e:	61fb      	str	r3, [r7, #28]
            break;
 8045810:	e005      	b.n	804581e <HAL_RCCEx_GetPeriphCLKFreq+0xcce>
            break;
 8045812:	bf00      	nop
 8045814:	e133      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045816:	bf00      	nop
 8045818:	e131      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804581a:	bf00      	nop
 804581c:	e12f      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804581e:	bf00      	nop
        break;
 8045820:	e12d      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8045822:	4b1b      	ldr	r3, [pc, #108]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045828:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 804582c:	60fb      	str	r3, [r7, #12]
 804582e:	68fb      	ldr	r3, [r7, #12]
 8045830:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8045834:	d030      	beq.n	8045898 <HAL_RCCEx_GetPeriphCLKFreq+0xd48>
 8045836:	68fb      	ldr	r3, [r7, #12]
 8045838:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 804583c:	d837      	bhi.n	80458ae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 804583e:	68fb      	ldr	r3, [r7, #12]
 8045840:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8045844:	d01a      	beq.n	804587c <HAL_RCCEx_GetPeriphCLKFreq+0xd2c>
 8045846:	68fb      	ldr	r3, [r7, #12]
 8045848:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804584c:	d82f      	bhi.n	80458ae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
 804584e:	68fb      	ldr	r3, [r7, #12]
 8045850:	2b00      	cmp	r3, #0
 8045852:	d004      	beq.n	804585e <HAL_RCCEx_GetPeriphCLKFreq+0xd0e>
 8045854:	68fb      	ldr	r3, [r7, #12]
 8045856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 804585a:	d004      	beq.n	8045866 <HAL_RCCEx_GetPeriphCLKFreq+0xd16>
            break;
 804585c:	e027      	b.n	80458ae <HAL_RCCEx_GetPeriphCLKFreq+0xd5e>
            frequency = HAL_RCC_GetPCLK1Freq();
 804585e:	f7fe fcf9 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 8045862:	61f8      	str	r0, [r7, #28]
            break;
 8045864:	e02a      	b.n	80458bc <HAL_RCCEx_GetPeriphCLKFreq+0xd6c>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8045866:	4b0a      	ldr	r3, [pc, #40]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 8045868:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804586c:	f003 0302 	and.w	r3, r3, #2
 8045870:	2b02      	cmp	r3, #2
 8045872:	d11e      	bne.n	80458b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
              frequency = LSI_VALUE;
 8045874:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8045878:	61fb      	str	r3, [r7, #28]
            break;
 804587a:	e01a      	b.n	80458b2 <HAL_RCCEx_GetPeriphCLKFreq+0xd62>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 804587c:	4b04      	ldr	r3, [pc, #16]	; (8045890 <HAL_RCCEx_GetPeriphCLKFreq+0xd40>)
 804587e:	681b      	ldr	r3, [r3, #0]
 8045880:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045884:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045888:	d115      	bne.n	80458b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
              frequency = HSI_VALUE;
 804588a:	4b02      	ldr	r3, [pc, #8]	; (8045894 <HAL_RCCEx_GetPeriphCLKFreq+0xd44>)
 804588c:	61fb      	str	r3, [r7, #28]
            break;
 804588e:	e012      	b.n	80458b6 <HAL_RCCEx_GetPeriphCLKFreq+0xd66>
 8045890:	40021000 	.word	0x40021000
 8045894:	00f42400 	.word	0x00f42400
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8045898:	4b7b      	ldr	r3, [pc, #492]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 804589a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804589e:	f003 0302 	and.w	r3, r3, #2
 80458a2:	2b02      	cmp	r3, #2
 80458a4:	d109      	bne.n	80458ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
              frequency = LSE_VALUE;
 80458a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80458aa:	61fb      	str	r3, [r7, #28]
            break;
 80458ac:	e005      	b.n	80458ba <HAL_RCCEx_GetPeriphCLKFreq+0xd6a>
            break;
 80458ae:	bf00      	nop
 80458b0:	e0e5      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80458b2:	bf00      	nop
 80458b4:	e0e3      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80458b6:	bf00      	nop
 80458b8:	e0e1      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 80458ba:	bf00      	nop
        break;
 80458bc:	e0df      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_LPTIM3_SOURCE();
 80458be:	4b72      	ldr	r3, [pc, #456]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80458c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80458c4:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 80458c8:	60fb      	str	r3, [r7, #12]
 80458ca:	68fb      	ldr	r3, [r7, #12]
 80458cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80458d0:	d02c      	beq.n	804592c <HAL_RCCEx_GetPeriphCLKFreq+0xddc>
 80458d2:	68fb      	ldr	r3, [r7, #12]
 80458d4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80458d8:	d833      	bhi.n	8045942 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80458da:	68fb      	ldr	r3, [r7, #12]
 80458dc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80458e0:	d01a      	beq.n	8045918 <HAL_RCCEx_GetPeriphCLKFreq+0xdc8>
 80458e2:	68fb      	ldr	r3, [r7, #12]
 80458e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80458e8:	d82b      	bhi.n	8045942 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
 80458ea:	68fb      	ldr	r3, [r7, #12]
 80458ec:	2b00      	cmp	r3, #0
 80458ee:	d004      	beq.n	80458fa <HAL_RCCEx_GetPeriphCLKFreq+0xdaa>
 80458f0:	68fb      	ldr	r3, [r7, #12]
 80458f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80458f6:	d004      	beq.n	8045902 <HAL_RCCEx_GetPeriphCLKFreq+0xdb2>
            break;
 80458f8:	e023      	b.n	8045942 <HAL_RCCEx_GetPeriphCLKFreq+0xdf2>
            frequency = HAL_RCC_GetPCLK1Freq();
 80458fa:	f7fe fcab 	bl	8044254 <HAL_RCC_GetPCLK1Freq>
 80458fe:	61f8      	str	r0, [r7, #28]
            break;
 8045900:	e026      	b.n	8045950 <HAL_RCCEx_GetPeriphCLKFreq+0xe00>
            if (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8045902:	4b61      	ldr	r3, [pc, #388]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045904:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8045908:	f003 0302 	and.w	r3, r3, #2
 804590c:	2b02      	cmp	r3, #2
 804590e:	d11a      	bne.n	8045946 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
              frequency = LSI_VALUE;
 8045910:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8045914:	61fb      	str	r3, [r7, #28]
            break;
 8045916:	e016      	b.n	8045946 <HAL_RCCEx_GetPeriphCLKFreq+0xdf6>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045918:	4b5b      	ldr	r3, [pc, #364]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 804591a:	681b      	ldr	r3, [r3, #0]
 804591c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045920:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045924:	d111      	bne.n	804594a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
              frequency = HSI_VALUE;
 8045926:	4b59      	ldr	r3, [pc, #356]	; (8045a8c <HAL_RCCEx_GetPeriphCLKFreq+0xf3c>)
 8045928:	61fb      	str	r3, [r7, #28]
            break;
 804592a:	e00e      	b.n	804594a <HAL_RCCEx_GetPeriphCLKFreq+0xdfa>
            if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 804592c:	4b56      	ldr	r3, [pc, #344]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 804592e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8045932:	f003 0302 	and.w	r3, r3, #2
 8045936:	2b02      	cmp	r3, #2
 8045938:	d109      	bne.n	804594e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
              frequency = LSE_VALUE;
 804593a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 804593e:	61fb      	str	r3, [r7, #28]
            break;
 8045940:	e005      	b.n	804594e <HAL_RCCEx_GetPeriphCLKFreq+0xdfe>
            break;
 8045942:	bf00      	nop
 8045944:	e09b      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045946:	bf00      	nop
 8045948:	e099      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804594a:	bf00      	nop
 804594c:	e097      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 804594e:	bf00      	nop
        break;
 8045950:	e095      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8045952:	4b4d      	ldr	r3, [pc, #308]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8045958:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 804595c:	60fb      	str	r3, [r7, #12]
 804595e:	68fb      	ldr	r3, [r7, #12]
 8045960:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8045964:	d042      	beq.n	80459ec <HAL_RCCEx_GetPeriphCLKFreq+0xe9c>
 8045966:	68fb      	ldr	r3, [r7, #12]
 8045968:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804596c:	d874      	bhi.n	8045a58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
 804596e:	68fb      	ldr	r3, [r7, #12]
 8045970:	2b00      	cmp	r3, #0
 8045972:	d004      	beq.n	804597e <HAL_RCCEx_GetPeriphCLKFreq+0xe2e>
 8045974:	68fb      	ldr	r3, [r7, #12]
 8045976:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 804597a:	d00a      	beq.n	8045992 <HAL_RCCEx_GetPeriphCLKFreq+0xe42>
            break;
 804597c:	e06c      	b.n	8045a58 <HAL_RCCEx_GetPeriphCLKFreq+0xf08>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 804597e:	4b42      	ldr	r3, [pc, #264]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045980:	681b      	ldr	r3, [r3, #0]
 8045982:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045986:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 804598a:	d167      	bne.n	8045a5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
              frequency = HSE_VALUE;
 804598c:	4b40      	ldr	r3, [pc, #256]	; (8045a90 <HAL_RCCEx_GetPeriphCLKFreq+0xf40>)
 804598e:	61fb      	str	r3, [r7, #28]
            break;
 8045990:	e064      	b.n	8045a5c <HAL_RCCEx_GetPeriphCLKFreq+0xf0c>
            if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8045992:	4b3d      	ldr	r3, [pc, #244]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045994:	681b      	ldr	r3, [r3, #0]
 8045996:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 804599a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804599e:	d15f      	bne.n	8045a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
              if (HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 80459a0:	4b39      	ldr	r3, [pc, #228]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80459a2:	68db      	ldr	r3, [r3, #12]
 80459a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80459a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80459ac:	d158      	bne.n	8045a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
                pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80459ae:	4b36      	ldr	r3, [pc, #216]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80459b0:	68db      	ldr	r3, [r3, #12]
 80459b2:	091b      	lsrs	r3, r3, #4
 80459b4:	f003 030f 	and.w	r3, r3, #15
 80459b8:	3301      	adds	r3, #1
 80459ba:	69ba      	ldr	r2, [r7, #24]
 80459bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80459c0:	61bb      	str	r3, [r7, #24]
                plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80459c2:	4b31      	ldr	r3, [pc, #196]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80459c4:	68db      	ldr	r3, [r3, #12]
 80459c6:	0a1b      	lsrs	r3, r3, #8
 80459c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80459cc:	60bb      	str	r3, [r7, #8]
                frequency = (pllvco * plln) / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U);
 80459ce:	69bb      	ldr	r3, [r7, #24]
 80459d0:	68ba      	ldr	r2, [r7, #8]
 80459d2:	fb03 f202 	mul.w	r2, r3, r2
 80459d6:	4b2c      	ldr	r3, [pc, #176]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80459d8:	68db      	ldr	r3, [r3, #12]
 80459da:	0d5b      	lsrs	r3, r3, #21
 80459dc:	f003 0303 	and.w	r3, r3, #3
 80459e0:	3301      	adds	r3, #1
 80459e2:	005b      	lsls	r3, r3, #1
 80459e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80459e8:	61fb      	str	r3, [r7, #28]
            break;
 80459ea:	e039      	b.n	8045a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf10>
            if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 80459ec:	4b26      	ldr	r3, [pc, #152]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 80459ee:	691b      	ldr	r3, [r3, #16]
 80459f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80459f4:	2b00      	cmp	r3, #0
 80459f6:	d035      	beq.n	8045a64 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
              pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 80459f8:	f000 f9ee 	bl	8045dd8 <RCCEx_PLLSAI1_GetVCOFreq>
 80459fc:	61b8      	str	r0, [r7, #24]
              pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 80459fe:	4b22      	ldr	r3, [pc, #136]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045a00:	691b      	ldr	r3, [r3, #16]
 8045a02:	091b      	lsrs	r3, r3, #4
 8045a04:	f003 030f 	and.w	r3, r3, #15
 8045a08:	3301      	adds	r3, #1
 8045a0a:	69ba      	ldr	r2, [r7, #24]
 8045a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8045a10:	61bb      	str	r3, [r7, #24]
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8045a12:	4b1d      	ldr	r3, [pc, #116]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045a14:	691b      	ldr	r3, [r3, #16]
 8045a16:	0a1b      	lsrs	r3, r3, #8
 8045a18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8045a1c:	60bb      	str	r3, [r7, #8]
              pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8045a1e:	4b1a      	ldr	r3, [pc, #104]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045a20:	691b      	ldr	r3, [r3, #16]
 8045a22:	0edb      	lsrs	r3, r3, #27
 8045a24:	f003 031f 	and.w	r3, r3, #31
 8045a28:	617b      	str	r3, [r7, #20]
              if (pllp == 0U)
 8045a2a:	697b      	ldr	r3, [r7, #20]
 8045a2c:	2b00      	cmp	r3, #0
 8045a2e:	d10a      	bne.n	8045a46 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8045a30:	4b15      	ldr	r3, [pc, #84]	; (8045a88 <HAL_RCCEx_GetPeriphCLKFreq+0xf38>)
 8045a32:	691b      	ldr	r3, [r3, #16]
 8045a34:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045a38:	2b00      	cmp	r3, #0
 8045a3a:	d002      	beq.n	8045a42 <HAL_RCCEx_GetPeriphCLKFreq+0xef2>
                  pllp = 17U;
 8045a3c:	2311      	movs	r3, #17
 8045a3e:	617b      	str	r3, [r7, #20]
 8045a40:	e001      	b.n	8045a46 <HAL_RCCEx_GetPeriphCLKFreq+0xef6>
                  pllp = 7U;
 8045a42:	2307      	movs	r3, #7
 8045a44:	617b      	str	r3, [r7, #20]
              frequency = (pllvco * plln) / pllp;
 8045a46:	69bb      	ldr	r3, [r7, #24]
 8045a48:	68ba      	ldr	r2, [r7, #8]
 8045a4a:	fb03 f202 	mul.w	r2, r3, r2
 8045a4e:	697b      	ldr	r3, [r7, #20]
 8045a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8045a54:	61fb      	str	r3, [r7, #28]
            break;
 8045a56:	e005      	b.n	8045a64 <HAL_RCCEx_GetPeriphCLKFreq+0xf14>
            break;
 8045a58:	bf00      	nop
 8045a5a:	e010      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045a5c:	bf00      	nop
 8045a5e:	e00e      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045a60:	bf00      	nop
 8045a62:	e00c      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
            break;
 8045a64:	bf00      	nop
        break;
 8045a66:	e00a      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a68:	bf00      	nop
 8045a6a:	e008      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a6c:	bf00      	nop
 8045a6e:	e006      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a70:	bf00      	nop
 8045a72:	e004      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a74:	bf00      	nop
 8045a76:	e002      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a78:	bf00      	nop
 8045a7a:	e000      	b.n	8045a7e <HAL_RCCEx_GetPeriphCLKFreq+0xf2e>
        break;
 8045a7c:	bf00      	nop
    }
  }

  return (frequency);
 8045a7e:	69fb      	ldr	r3, [r7, #28]
}
 8045a80:	4618      	mov	r0, r3
 8045a82:	3720      	adds	r7, #32
 8045a84:	46bd      	mov	sp, r7
 8045a86:	bd80      	pop	{r7, pc}
 8045a88:	40021000 	.word	0x40021000
 8045a8c:	00f42400 	.word	0x00f42400
 8045a90:	007a1200 	.word	0x007a1200

08045a94 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8045a94:	b480      	push	{r7}
 8045a96:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8045a98:	4b05      	ldr	r3, [pc, #20]	; (8045ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8045a9a:	681b      	ldr	r3, [r3, #0]
 8045a9c:	4a04      	ldr	r2, [pc, #16]	; (8045ab0 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8045a9e:	f043 0304 	orr.w	r3, r3, #4
 8045aa2:	6013      	str	r3, [r2, #0]
}
 8045aa4:	bf00      	nop
 8045aa6:	46bd      	mov	sp, r7
 8045aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045aac:	4770      	bx	lr
 8045aae:	bf00      	nop
 8045ab0:	40021000 	.word	0x40021000

08045ab4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8045ab4:	b580      	push	{r7, lr}
 8045ab6:	b084      	sub	sp, #16
 8045ab8:	af00      	add	r7, sp, #0
 8045aba:	6078      	str	r0, [r7, #4]
 8045abc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8045abe:	2300      	movs	r3, #0
 8045ac0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8045ac2:	687b      	ldr	r3, [r7, #4]
 8045ac4:	681b      	ldr	r3, [r3, #0]
 8045ac6:	2b03      	cmp	r3, #3
 8045ac8:	d018      	beq.n	8045afc <RCCEx_PLLSAI1_Config+0x48>
 8045aca:	2b03      	cmp	r3, #3
 8045acc:	d81f      	bhi.n	8045b0e <RCCEx_PLLSAI1_Config+0x5a>
 8045ace:	2b01      	cmp	r3, #1
 8045ad0:	d002      	beq.n	8045ad8 <RCCEx_PLLSAI1_Config+0x24>
 8045ad2:	2b02      	cmp	r3, #2
 8045ad4:	d009      	beq.n	8045aea <RCCEx_PLLSAI1_Config+0x36>
 8045ad6:	e01a      	b.n	8045b0e <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8045ad8:	4b65      	ldr	r3, [pc, #404]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045ada:	681b      	ldr	r3, [r3, #0]
 8045adc:	f003 0302 	and.w	r3, r3, #2
 8045ae0:	2b00      	cmp	r3, #0
 8045ae2:	d117      	bne.n	8045b14 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8045ae4:	2301      	movs	r3, #1
 8045ae6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045ae8:	e014      	b.n	8045b14 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8045aea:	4b61      	ldr	r3, [pc, #388]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045aec:	681b      	ldr	r3, [r3, #0]
 8045aee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045af2:	2b00      	cmp	r3, #0
 8045af4:	d110      	bne.n	8045b18 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 8045af6:	2301      	movs	r3, #1
 8045af8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045afa:	e00d      	b.n	8045b18 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8045afc:	4b5c      	ldr	r3, [pc, #368]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045afe:	681b      	ldr	r3, [r3, #0]
 8045b00:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045b04:	2b00      	cmp	r3, #0
 8045b06:	d109      	bne.n	8045b1c <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 8045b08:	2301      	movs	r3, #1
 8045b0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045b0c:	e006      	b.n	8045b1c <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8045b0e:	2301      	movs	r3, #1
 8045b10:	73fb      	strb	r3, [r7, #15]
      break;
 8045b12:	e004      	b.n	8045b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8045b14:	bf00      	nop
 8045b16:	e002      	b.n	8045b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8045b18:	bf00      	nop
 8045b1a:	e000      	b.n	8045b1e <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8045b1c:	bf00      	nop
  }

  if (status == HAL_OK)
 8045b1e:	7bfb      	ldrb	r3, [r7, #15]
 8045b20:	2b00      	cmp	r3, #0
 8045b22:	f040 809f 	bne.w	8045c64 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8045b26:	4b52      	ldr	r3, [pc, #328]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b28:	681b      	ldr	r3, [r3, #0]
 8045b2a:	4a51      	ldr	r2, [pc, #324]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8045b30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045b32:	f7fb fdc3 	bl	80416bc <HAL_GetTick>
 8045b36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8045b38:	e00f      	b.n	8045b5a <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8045b3a:	f7fb fdbf 	bl	80416bc <HAL_GetTick>
 8045b3e:	4602      	mov	r2, r0
 8045b40:	68bb      	ldr	r3, [r7, #8]
 8045b42:	1ad3      	subs	r3, r2, r3
 8045b44:	2b02      	cmp	r3, #2
 8045b46:	d908      	bls.n	8045b5a <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8045b48:	4b49      	ldr	r3, [pc, #292]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b4a:	681b      	ldr	r3, [r3, #0]
 8045b4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8045b50:	2b00      	cmp	r3, #0
 8045b52:	d009      	beq.n	8045b68 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 8045b54:	2303      	movs	r3, #3
 8045b56:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8045b58:	e006      	b.n	8045b68 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8045b5a:	4b45      	ldr	r3, [pc, #276]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b5c:	681b      	ldr	r3, [r3, #0]
 8045b5e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8045b62:	2b00      	cmp	r3, #0
 8045b64:	d1e9      	bne.n	8045b3a <RCCEx_PLLSAI1_Config+0x86>
 8045b66:	e000      	b.n	8045b6a <RCCEx_PLLSAI1_Config+0xb6>
        break;
 8045b68:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8045b6a:	7bfb      	ldrb	r3, [r7, #15]
 8045b6c:	2b00      	cmp	r3, #0
 8045b6e:	d179      	bne.n	8045c64 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8045b70:	683b      	ldr	r3, [r7, #0]
 8045b72:	2b00      	cmp	r3, #0
 8045b74:	d116      	bne.n	8045ba4 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8045b76:	4b3e      	ldr	r3, [pc, #248]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b78:	691a      	ldr	r2, [r3, #16]
 8045b7a:	4b3e      	ldr	r3, [pc, #248]	; (8045c74 <RCCEx_PLLSAI1_Config+0x1c0>)
 8045b7c:	4013      	ands	r3, r2
 8045b7e:	687a      	ldr	r2, [r7, #4]
 8045b80:	6892      	ldr	r2, [r2, #8]
 8045b82:	0211      	lsls	r1, r2, #8
 8045b84:	687a      	ldr	r2, [r7, #4]
 8045b86:	68d2      	ldr	r2, [r2, #12]
 8045b88:	06d2      	lsls	r2, r2, #27
 8045b8a:	4311      	orrs	r1, r2
 8045b8c:	687a      	ldr	r2, [r7, #4]
 8045b8e:	6852      	ldr	r2, [r2, #4]
 8045b90:	3a01      	subs	r2, #1
 8045b92:	0112      	lsls	r2, r2, #4
 8045b94:	4311      	orrs	r1, r2
 8045b96:	687a      	ldr	r2, [r7, #4]
 8045b98:	6812      	ldr	r2, [r2, #0]
 8045b9a:	430a      	orrs	r2, r1
 8045b9c:	4934      	ldr	r1, [pc, #208]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045b9e:	4313      	orrs	r3, r2
 8045ba0:	610b      	str	r3, [r1, #16]
 8045ba2:	e033      	b.n	8045c0c <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8045ba4:	683b      	ldr	r3, [r7, #0]
 8045ba6:	2b01      	cmp	r3, #1
 8045ba8:	d118      	bne.n	8045bdc <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8045baa:	4b31      	ldr	r3, [pc, #196]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045bac:	691a      	ldr	r2, [r3, #16]
 8045bae:	4b32      	ldr	r3, [pc, #200]	; (8045c78 <RCCEx_PLLSAI1_Config+0x1c4>)
 8045bb0:	4013      	ands	r3, r2
 8045bb2:	687a      	ldr	r2, [r7, #4]
 8045bb4:	6892      	ldr	r2, [r2, #8]
 8045bb6:	0211      	lsls	r1, r2, #8
 8045bb8:	687a      	ldr	r2, [r7, #4]
 8045bba:	6912      	ldr	r2, [r2, #16]
 8045bbc:	0852      	lsrs	r2, r2, #1
 8045bbe:	3a01      	subs	r2, #1
 8045bc0:	0552      	lsls	r2, r2, #21
 8045bc2:	4311      	orrs	r1, r2
 8045bc4:	687a      	ldr	r2, [r7, #4]
 8045bc6:	6852      	ldr	r2, [r2, #4]
 8045bc8:	3a01      	subs	r2, #1
 8045bca:	0112      	lsls	r2, r2, #4
 8045bcc:	4311      	orrs	r1, r2
 8045bce:	687a      	ldr	r2, [r7, #4]
 8045bd0:	6812      	ldr	r2, [r2, #0]
 8045bd2:	430a      	orrs	r2, r1
 8045bd4:	4926      	ldr	r1, [pc, #152]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045bd6:	4313      	orrs	r3, r2
 8045bd8:	610b      	str	r3, [r1, #16]
 8045bda:	e017      	b.n	8045c0c <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8045bdc:	4b24      	ldr	r3, [pc, #144]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045bde:	691a      	ldr	r2, [r3, #16]
 8045be0:	4b26      	ldr	r3, [pc, #152]	; (8045c7c <RCCEx_PLLSAI1_Config+0x1c8>)
 8045be2:	4013      	ands	r3, r2
 8045be4:	687a      	ldr	r2, [r7, #4]
 8045be6:	6892      	ldr	r2, [r2, #8]
 8045be8:	0211      	lsls	r1, r2, #8
 8045bea:	687a      	ldr	r2, [r7, #4]
 8045bec:	6952      	ldr	r2, [r2, #20]
 8045bee:	0852      	lsrs	r2, r2, #1
 8045bf0:	3a01      	subs	r2, #1
 8045bf2:	0652      	lsls	r2, r2, #25
 8045bf4:	4311      	orrs	r1, r2
 8045bf6:	687a      	ldr	r2, [r7, #4]
 8045bf8:	6852      	ldr	r2, [r2, #4]
 8045bfa:	3a01      	subs	r2, #1
 8045bfc:	0112      	lsls	r2, r2, #4
 8045bfe:	4311      	orrs	r1, r2
 8045c00:	687a      	ldr	r2, [r7, #4]
 8045c02:	6812      	ldr	r2, [r2, #0]
 8045c04:	430a      	orrs	r2, r1
 8045c06:	491a      	ldr	r1, [pc, #104]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c08:	4313      	orrs	r3, r2
 8045c0a:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8045c0c:	4b18      	ldr	r3, [pc, #96]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c0e:	681b      	ldr	r3, [r3, #0]
 8045c10:	4a17      	ldr	r2, [pc, #92]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c12:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8045c16:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8045c18:	f7fb fd50 	bl	80416bc <HAL_GetTick>
 8045c1c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8045c1e:	e00f      	b.n	8045c40 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8045c20:	f7fb fd4c 	bl	80416bc <HAL_GetTick>
 8045c24:	4602      	mov	r2, r0
 8045c26:	68bb      	ldr	r3, [r7, #8]
 8045c28:	1ad3      	subs	r3, r2, r3
 8045c2a:	2b02      	cmp	r3, #2
 8045c2c:	d908      	bls.n	8045c40 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8045c2e:	4b10      	ldr	r3, [pc, #64]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c30:	681b      	ldr	r3, [r3, #0]
 8045c32:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8045c36:	2b00      	cmp	r3, #0
 8045c38:	d109      	bne.n	8045c4e <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 8045c3a:	2303      	movs	r3, #3
 8045c3c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8045c3e:	e006      	b.n	8045c4e <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8045c40:	4b0b      	ldr	r3, [pc, #44]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c42:	681b      	ldr	r3, [r3, #0]
 8045c44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8045c48:	2b00      	cmp	r3, #0
 8045c4a:	d0e9      	beq.n	8045c20 <RCCEx_PLLSAI1_Config+0x16c>
 8045c4c:	e000      	b.n	8045c50 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 8045c4e:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8045c50:	7bfb      	ldrb	r3, [r7, #15]
 8045c52:	2b00      	cmp	r3, #0
 8045c54:	d106      	bne.n	8045c64 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 8045c56:	4b06      	ldr	r3, [pc, #24]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c58:	691a      	ldr	r2, [r3, #16]
 8045c5a:	687b      	ldr	r3, [r7, #4]
 8045c5c:	699b      	ldr	r3, [r3, #24]
 8045c5e:	4904      	ldr	r1, [pc, #16]	; (8045c70 <RCCEx_PLLSAI1_Config+0x1bc>)
 8045c60:	4313      	orrs	r3, r2
 8045c62:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8045c64:	7bfb      	ldrb	r3, [r7, #15]
}
 8045c66:	4618      	mov	r0, r3
 8045c68:	3710      	adds	r7, #16
 8045c6a:	46bd      	mov	sp, r7
 8045c6c:	bd80      	pop	{r7, pc}
 8045c6e:	bf00      	nop
 8045c70:	40021000 	.word	0x40021000
 8045c74:	07ff800c 	.word	0x07ff800c
 8045c78:	ff9f800c 	.word	0xff9f800c
 8045c7c:	f9ff800c 	.word	0xf9ff800c

08045c80 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 8045c80:	b580      	push	{r7, lr}
 8045c82:	b084      	sub	sp, #16
 8045c84:	af00      	add	r7, sp, #0
 8045c86:	6078      	str	r0, [r7, #4]
 8045c88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8045c8a:	2300      	movs	r3, #0
 8045c8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8045c8e:	687b      	ldr	r3, [r7, #4]
 8045c90:	681b      	ldr	r3, [r3, #0]
 8045c92:	2b03      	cmp	r3, #3
 8045c94:	d018      	beq.n	8045cc8 <RCCEx_PLLSAI2_Config+0x48>
 8045c96:	2b03      	cmp	r3, #3
 8045c98:	d81f      	bhi.n	8045cda <RCCEx_PLLSAI2_Config+0x5a>
 8045c9a:	2b01      	cmp	r3, #1
 8045c9c:	d002      	beq.n	8045ca4 <RCCEx_PLLSAI2_Config+0x24>
 8045c9e:	2b02      	cmp	r3, #2
 8045ca0:	d009      	beq.n	8045cb6 <RCCEx_PLLSAI2_Config+0x36>
 8045ca2:	e01a      	b.n	8045cda <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8045ca4:	4b4a      	ldr	r3, [pc, #296]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045ca6:	681b      	ldr	r3, [r3, #0]
 8045ca8:	f003 0302 	and.w	r3, r3, #2
 8045cac:	2b00      	cmp	r3, #0
 8045cae:	d117      	bne.n	8045ce0 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8045cb0:	2301      	movs	r3, #1
 8045cb2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045cb4:	e014      	b.n	8045ce0 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8045cb6:	4b46      	ldr	r3, [pc, #280]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045cb8:	681b      	ldr	r3, [r3, #0]
 8045cba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045cbe:	2b00      	cmp	r3, #0
 8045cc0:	d110      	bne.n	8045ce4 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8045cc2:	2301      	movs	r3, #1
 8045cc4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045cc6:	e00d      	b.n	8045ce4 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8045cc8:	4b41      	ldr	r3, [pc, #260]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045cca:	681b      	ldr	r3, [r3, #0]
 8045ccc:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8045cd0:	2b00      	cmp	r3, #0
 8045cd2:	d109      	bne.n	8045ce8 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8045cd4:	2301      	movs	r3, #1
 8045cd6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8045cd8:	e006      	b.n	8045ce8 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8045cda:	2301      	movs	r3, #1
 8045cdc:	73fb      	strb	r3, [r7, #15]
      break;
 8045cde:	e004      	b.n	8045cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8045ce0:	bf00      	nop
 8045ce2:	e002      	b.n	8045cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8045ce4:	bf00      	nop
 8045ce6:	e000      	b.n	8045cea <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8045ce8:	bf00      	nop
  }

  if (status == HAL_OK)
 8045cea:	7bfb      	ldrb	r3, [r7, #15]
 8045cec:	2b00      	cmp	r3, #0
 8045cee:	d169      	bne.n	8045dc4 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8045cf0:	4b37      	ldr	r3, [pc, #220]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045cf2:	681b      	ldr	r3, [r3, #0]
 8045cf4:	4a36      	ldr	r2, [pc, #216]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045cf6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8045cfa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8045cfc:	f7fb fcde 	bl	80416bc <HAL_GetTick>
 8045d00:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8045d02:	e00f      	b.n	8045d24 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8045d04:	f7fb fcda 	bl	80416bc <HAL_GetTick>
 8045d08:	4602      	mov	r2, r0
 8045d0a:	68bb      	ldr	r3, [r7, #8]
 8045d0c:	1ad3      	subs	r3, r2, r3
 8045d0e:	2b02      	cmp	r3, #2
 8045d10:	d908      	bls.n	8045d24 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8045d12:	4b2f      	ldr	r3, [pc, #188]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d14:	681b      	ldr	r3, [r3, #0]
 8045d16:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8045d1a:	2b00      	cmp	r3, #0
 8045d1c:	d009      	beq.n	8045d32 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8045d1e:	2303      	movs	r3, #3
 8045d20:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8045d22:	e006      	b.n	8045d32 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8045d24:	4b2a      	ldr	r3, [pc, #168]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d26:	681b      	ldr	r3, [r3, #0]
 8045d28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8045d2c:	2b00      	cmp	r3, #0
 8045d2e:	d1e9      	bne.n	8045d04 <RCCEx_PLLSAI2_Config+0x84>
 8045d30:	e000      	b.n	8045d34 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8045d32:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8045d34:	7bfb      	ldrb	r3, [r7, #15]
 8045d36:	2b00      	cmp	r3, #0
 8045d38:	d144      	bne.n	8045dc4 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8045d3a:	683b      	ldr	r3, [r7, #0]
 8045d3c:	2b00      	cmp	r3, #0
 8045d3e:	d115      	bne.n	8045d6c <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8045d40:	4b23      	ldr	r3, [pc, #140]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d42:	695a      	ldr	r2, [r3, #20]
 8045d44:	4b23      	ldr	r3, [pc, #140]	; (8045dd4 <RCCEx_PLLSAI2_Config+0x154>)
 8045d46:	4013      	ands	r3, r2
 8045d48:	687a      	ldr	r2, [r7, #4]
 8045d4a:	6892      	ldr	r2, [r2, #8]
 8045d4c:	0211      	lsls	r1, r2, #8
 8045d4e:	687a      	ldr	r2, [r7, #4]
 8045d50:	68d2      	ldr	r2, [r2, #12]
 8045d52:	06d2      	lsls	r2, r2, #27
 8045d54:	4311      	orrs	r1, r2
 8045d56:	687a      	ldr	r2, [r7, #4]
 8045d58:	6852      	ldr	r2, [r2, #4]
 8045d5a:	3a01      	subs	r2, #1
 8045d5c:	0112      	lsls	r2, r2, #4
 8045d5e:	4311      	orrs	r1, r2
 8045d60:	687a      	ldr	r2, [r7, #4]
 8045d62:	6812      	ldr	r2, [r2, #0]
 8045d64:	430a      	orrs	r2, r1
 8045d66:	491a      	ldr	r1, [pc, #104]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d68:	4313      	orrs	r3, r2
 8045d6a:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8045d6c:	4b18      	ldr	r3, [pc, #96]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d6e:	681b      	ldr	r3, [r3, #0]
 8045d70:	4a17      	ldr	r2, [pc, #92]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8045d76:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8045d78:	f7fb fca0 	bl	80416bc <HAL_GetTick>
 8045d7c:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8045d7e:	e00f      	b.n	8045da0 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8045d80:	f7fb fc9c 	bl	80416bc <HAL_GetTick>
 8045d84:	4602      	mov	r2, r0
 8045d86:	68bb      	ldr	r3, [r7, #8]
 8045d88:	1ad3      	subs	r3, r2, r3
 8045d8a:	2b02      	cmp	r3, #2
 8045d8c:	d908      	bls.n	8045da0 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8045d8e:	4b10      	ldr	r3, [pc, #64]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045d90:	681b      	ldr	r3, [r3, #0]
 8045d92:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8045d96:	2b00      	cmp	r3, #0
 8045d98:	d109      	bne.n	8045dae <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8045d9a:	2303      	movs	r3, #3
 8045d9c:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8045d9e:	e006      	b.n	8045dae <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8045da0:	4b0b      	ldr	r3, [pc, #44]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045da2:	681b      	ldr	r3, [r3, #0]
 8045da4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8045da8:	2b00      	cmp	r3, #0
 8045daa:	d0e9      	beq.n	8045d80 <RCCEx_PLLSAI2_Config+0x100>
 8045dac:	e000      	b.n	8045db0 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8045dae:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8045db0:	7bfb      	ldrb	r3, [r7, #15]
 8045db2:	2b00      	cmp	r3, #0
 8045db4:	d106      	bne.n	8045dc4 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8045db6:	4b06      	ldr	r3, [pc, #24]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045db8:	695a      	ldr	r2, [r3, #20]
 8045dba:	687b      	ldr	r3, [r7, #4]
 8045dbc:	691b      	ldr	r3, [r3, #16]
 8045dbe:	4904      	ldr	r1, [pc, #16]	; (8045dd0 <RCCEx_PLLSAI2_Config+0x150>)
 8045dc0:	4313      	orrs	r3, r2
 8045dc2:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8045dc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8045dc6:	4618      	mov	r0, r3
 8045dc8:	3710      	adds	r7, #16
 8045dca:	46bd      	mov	sp, r7
 8045dcc:	bd80      	pop	{r7, pc}
 8045dce:	bf00      	nop
 8045dd0:	40021000 	.word	0x40021000
 8045dd4:	07ff800c 	.word	0x07ff800c

08045dd8 <RCCEx_PLLSAI1_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI1 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI1_GetVCOFreq(void)
{
 8045dd8:	b480      	push	{r7}
 8045dda:	b083      	sub	sp, #12
 8045ddc:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8045dde:	2300      	movs	r3, #0
 8045de0:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1SRC))
 8045de2:	4b26      	ldr	r3, [pc, #152]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045de4:	691b      	ldr	r3, [r3, #16]
 8045de6:	f003 0303 	and.w	r3, r3, #3
 8045dea:	2b03      	cmp	r3, #3
 8045dec:	d02d      	beq.n	8045e4a <RCCEx_PLLSAI1_GetVCOFreq+0x72>
 8045dee:	2b03      	cmp	r3, #3
 8045df0:	d835      	bhi.n	8045e5e <RCCEx_PLLSAI1_GetVCOFreq+0x86>
 8045df2:	2b01      	cmp	r3, #1
 8045df4:	d002      	beq.n	8045dfc <RCCEx_PLLSAI1_GetVCOFreq+0x24>
 8045df6:	2b02      	cmp	r3, #2
 8045df8:	d01d      	beq.n	8045e36 <RCCEx_PLLSAI1_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8045dfa:	e030      	b.n	8045e5e <RCCEx_PLLSAI1_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8045dfc:	4b1f      	ldr	r3, [pc, #124]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045dfe:	681b      	ldr	r3, [r3, #0]
 8045e00:	f003 0302 	and.w	r3, r3, #2
 8045e04:	2b02      	cmp	r3, #2
 8045e06:	d12c      	bne.n	8045e62 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8045e08:	4b1c      	ldr	r3, [pc, #112]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045e0a:	681b      	ldr	r3, [r3, #0]
 8045e0c:	f003 0308 	and.w	r3, r3, #8
 8045e10:	2b00      	cmp	r3, #0
 8045e12:	d005      	beq.n	8045e20 <RCCEx_PLLSAI1_GetVCOFreq+0x48>
 8045e14:	4b19      	ldr	r3, [pc, #100]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045e16:	681b      	ldr	r3, [r3, #0]
 8045e18:	091b      	lsrs	r3, r3, #4
 8045e1a:	f003 030f 	and.w	r3, r3, #15
 8045e1e:	e005      	b.n	8045e2c <RCCEx_PLLSAI1_GetVCOFreq+0x54>
 8045e20:	4b16      	ldr	r3, [pc, #88]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045e22:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8045e26:	0a1b      	lsrs	r3, r3, #8
 8045e28:	f003 030f 	and.w	r3, r3, #15
 8045e2c:	4a14      	ldr	r2, [pc, #80]	; (8045e80 <RCCEx_PLLSAI1_GetVCOFreq+0xa8>)
 8045e2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045e32:	607b      	str	r3, [r7, #4]
      break;
 8045e34:	e015      	b.n	8045e62 <RCCEx_PLLSAI1_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045e36:	4b11      	ldr	r3, [pc, #68]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045e38:	681b      	ldr	r3, [r3, #0]
 8045e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045e42:	d110      	bne.n	8045e66 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8045e44:	4b0f      	ldr	r3, [pc, #60]	; (8045e84 <RCCEx_PLLSAI1_GetVCOFreq+0xac>)
 8045e46:	607b      	str	r3, [r7, #4]
      break;
 8045e48:	e00d      	b.n	8045e66 <RCCEx_PLLSAI1_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8045e4a:	4b0c      	ldr	r3, [pc, #48]	; (8045e7c <RCCEx_PLLSAI1_GetVCOFreq+0xa4>)
 8045e4c:	681b      	ldr	r3, [r3, #0]
 8045e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045e52:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8045e56:	d108      	bne.n	8045e6a <RCCEx_PLLSAI1_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8045e58:	4b0b      	ldr	r3, [pc, #44]	; (8045e88 <RCCEx_PLLSAI1_GetVCOFreq+0xb0>)
 8045e5a:	607b      	str	r3, [r7, #4]
      break;
 8045e5c:	e005      	b.n	8045e6a <RCCEx_PLLSAI1_GetVCOFreq+0x92>
      break;
 8045e5e:	bf00      	nop
 8045e60:	e004      	b.n	8045e6c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8045e62:	bf00      	nop
 8045e64:	e002      	b.n	8045e6c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8045e66:	bf00      	nop
 8045e68:	e000      	b.n	8045e6c <RCCEx_PLLSAI1_GetVCOFreq+0x94>
      break;
 8045e6a:	bf00      	nop
  }

  return pllvco;
 8045e6c:	687b      	ldr	r3, [r7, #4]
}
 8045e6e:	4618      	mov	r0, r3
 8045e70:	370c      	adds	r7, #12
 8045e72:	46bd      	mov	sp, r7
 8045e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045e78:	4770      	bx	lr
 8045e7a:	bf00      	nop
 8045e7c:	40021000 	.word	0x40021000
 8045e80:	08048ee8 	.word	0x08048ee8
 8045e84:	00f42400 	.word	0x00f42400
 8045e88:	007a1200 	.word	0x007a1200

08045e8c <RCCEx_PLLSAI2_GetVCOFreq>:
/**
  * @brief  Get the PLLSAI2 input VCO frequency.
  * @retval pllvco frequency in Hz
  */
static uint32_t RCCEx_PLLSAI2_GetVCOFreq(void)
{
 8045e8c:	b480      	push	{r7}
 8045e8e:	b083      	sub	sp, #12
 8045e90:	af00      	add	r7, sp, #0
  uint32_t pllvco = 0U;
 8045e92:	2300      	movs	r3, #0
 8045e94:	607b      	str	r3, [r7, #4]

  switch (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2SRC))
 8045e96:	4b26      	ldr	r3, [pc, #152]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045e98:	695b      	ldr	r3, [r3, #20]
 8045e9a:	f003 0303 	and.w	r3, r3, #3
 8045e9e:	2b03      	cmp	r3, #3
 8045ea0:	d02d      	beq.n	8045efe <RCCEx_PLLSAI2_GetVCOFreq+0x72>
 8045ea2:	2b03      	cmp	r3, #3
 8045ea4:	d835      	bhi.n	8045f12 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
 8045ea6:	2b01      	cmp	r3, #1
 8045ea8:	d002      	beq.n	8045eb0 <RCCEx_PLLSAI2_GetVCOFreq+0x24>
 8045eaa:	2b02      	cmp	r3, #2
 8045eac:	d01d      	beq.n	8045eea <RCCEx_PLLSAI2_GetVCOFreq+0x5e>
        /* pllvco already set as 0 */
      }
      break;
    default:
      /* pllvco already set as 0 */
      break;
 8045eae:	e030      	b.n	8045f12 <RCCEx_PLLSAI2_GetVCOFreq+0x86>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8045eb0:	4b1f      	ldr	r3, [pc, #124]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045eb2:	681b      	ldr	r3, [r3, #0]
 8045eb4:	f003 0302 	and.w	r3, r3, #2
 8045eb8:	2b02      	cmp	r3, #2
 8045eba:	d12c      	bne.n	8045f16 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8045ebc:	4b1c      	ldr	r3, [pc, #112]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045ebe:	681b      	ldr	r3, [r3, #0]
 8045ec0:	f003 0308 	and.w	r3, r3, #8
 8045ec4:	2b00      	cmp	r3, #0
 8045ec6:	d005      	beq.n	8045ed4 <RCCEx_PLLSAI2_GetVCOFreq+0x48>
 8045ec8:	4b19      	ldr	r3, [pc, #100]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045eca:	681b      	ldr	r3, [r3, #0]
 8045ecc:	091b      	lsrs	r3, r3, #4
 8045ece:	f003 030f 	and.w	r3, r3, #15
 8045ed2:	e005      	b.n	8045ee0 <RCCEx_PLLSAI2_GetVCOFreq+0x54>
 8045ed4:	4b16      	ldr	r3, [pc, #88]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045ed6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8045eda:	0a1b      	lsrs	r3, r3, #8
 8045edc:	f003 030f 	and.w	r3, r3, #15
 8045ee0:	4a14      	ldr	r2, [pc, #80]	; (8045f34 <RCCEx_PLLSAI2_GetVCOFreq+0xa8>)
 8045ee2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8045ee6:	607b      	str	r3, [r7, #4]
      break;
 8045ee8:	e015      	b.n	8045f16 <RCCEx_PLLSAI2_GetVCOFreq+0x8a>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8045eea:	4b11      	ldr	r3, [pc, #68]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045eec:	681b      	ldr	r3, [r3, #0]
 8045eee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8045ef2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8045ef6:	d110      	bne.n	8045f1a <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
        pllvco = HSI_VALUE;
 8045ef8:	4b0f      	ldr	r3, [pc, #60]	; (8045f38 <RCCEx_PLLSAI2_GetVCOFreq+0xac>)
 8045efa:	607b      	str	r3, [r7, #4]
      break;
 8045efc:	e00d      	b.n	8045f1a <RCCEx_PLLSAI2_GetVCOFreq+0x8e>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8045efe:	4b0c      	ldr	r3, [pc, #48]	; (8045f30 <RCCEx_PLLSAI2_GetVCOFreq+0xa4>)
 8045f00:	681b      	ldr	r3, [r3, #0]
 8045f02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045f06:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8045f0a:	d108      	bne.n	8045f1e <RCCEx_PLLSAI2_GetVCOFreq+0x92>
        pllvco = HSE_VALUE;
 8045f0c:	4b0b      	ldr	r3, [pc, #44]	; (8045f3c <RCCEx_PLLSAI2_GetVCOFreq+0xb0>)
 8045f0e:	607b      	str	r3, [r7, #4]
      break;
 8045f10:	e005      	b.n	8045f1e <RCCEx_PLLSAI2_GetVCOFreq+0x92>
      break;
 8045f12:	bf00      	nop
 8045f14:	e004      	b.n	8045f20 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8045f16:	bf00      	nop
 8045f18:	e002      	b.n	8045f20 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8045f1a:	bf00      	nop
 8045f1c:	e000      	b.n	8045f20 <RCCEx_PLLSAI2_GetVCOFreq+0x94>
      break;
 8045f1e:	bf00      	nop
  }

  return pllvco;
 8045f20:	687b      	ldr	r3, [r7, #4]
}
 8045f22:	4618      	mov	r0, r3
 8045f24:	370c      	adds	r7, #12
 8045f26:	46bd      	mov	sp, r7
 8045f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8045f2c:	4770      	bx	lr
 8045f2e:	bf00      	nop
 8045f30:	40021000 	.word	0x40021000
 8045f34:	08048ee8 	.word	0x08048ee8
 8045f38:	00f42400 	.word	0x00f42400
 8045f3c:	007a1200 	.word	0x007a1200

08045f40 <RCCEx_GetSAIxPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_SAI2  SAI2 peripheral clock
  * @param  InputFrequency pllvco frequency in Hz
  * @retval Frequency in Hz
  */
static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8045f40:	b580      	push	{r7, lr}
 8045f42:	b088      	sub	sp, #32
 8045f44:	af00      	add	r7, sp, #0
 8045f46:	6078      	str	r0, [r7, #4]
 8045f48:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8045f4a:	2300      	movs	r3, #0
 8045f4c:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk, pllvco, plln, pllp;    /* no init needed */

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8045f4e:	687b      	ldr	r3, [r7, #4]
 8045f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8045f54:	d10c      	bne.n	8045f70 <RCCEx_GetSAIxPeriphCLKFreq+0x30>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8045f56:	4b78      	ldr	r3, [pc, #480]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045f58:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8045f5c:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 8045f60:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI1CLKSOURCE_PIN)
 8045f62:	69bb      	ldr	r3, [r7, #24]
 8045f64:	2b60      	cmp	r3, #96	; 0x60
 8045f66:	d110      	bne.n	8045f8a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 8045f68:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8045f6c:	61fb      	str	r3, [r7, #28]
 8045f6e:	e00c      	b.n	8045f8a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    }
    /* Else, PLL clock output to check below */
  }
  else /* RCC_PERIPHCLK_SAI2 */
  {
    srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8045f70:	4b71      	ldr	r3, [pc, #452]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045f72:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8045f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8045f7a:	61bb      	str	r3, [r7, #24]

    if (srcclk == RCC_SAI2CLKSOURCE_PIN)
 8045f7c:	69bb      	ldr	r3, [r7, #24]
 8045f7e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8045f82:	d102      	bne.n	8045f8a <RCCEx_GetSAIxPeriphCLKFreq+0x4a>
    {
      frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 8045f84:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8045f88:	61fb      	str	r3, [r7, #28]
    }
    /* Else, PLL clock output to check below */
  }

  if (frequency == 0U)
 8045f8a:	69fb      	ldr	r3, [r7, #28]
 8045f8c:	2b00      	cmp	r3, #0
 8045f8e:	f040 80cd 	bne.w	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
  {
    pllvco = InputFrequency;
 8045f92:	683b      	ldr	r3, [r7, #0]
 8045f94:	613b      	str	r3, [r7, #16]

    if ((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 8045f96:	69bb      	ldr	r3, [r7, #24]
 8045f98:	2b40      	cmp	r3, #64	; 0x40
 8045f9a:	d003      	beq.n	8045fa4 <RCCEx_GetSAIxPeriphCLKFreq+0x64>
 8045f9c:	69bb      	ldr	r3, [r7, #24]
 8045f9e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8045fa2:	d13b      	bne.n	804601c <RCCEx_GetSAIxPeriphCLKFreq+0xdc>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8045fa4:	4b64      	ldr	r3, [pc, #400]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045fa6:	681b      	ldr	r3, [r3, #0]
 8045fa8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8045fac:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8045fb0:	f040 80bb 	bne.w	804612a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
      {
        if (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U)
 8045fb4:	4b60      	ldr	r3, [pc, #384]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045fb6:	68db      	ldr	r3, [r3, #12]
 8045fb8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8045fbc:	2b00      	cmp	r3, #0
 8045fbe:	f000 80b4 	beq.w	804612a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        {
          /* f(PLL Source) / PLLM */
          pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8045fc2:	4b5d      	ldr	r3, [pc, #372]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045fc4:	68db      	ldr	r3, [r3, #12]
 8045fc6:	091b      	lsrs	r3, r3, #4
 8045fc8:	f003 030f 	and.w	r3, r3, #15
 8045fcc:	3301      	adds	r3, #1
 8045fce:	693a      	ldr	r2, [r7, #16]
 8045fd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8045fd4:	613b      	str	r3, [r7, #16]
          /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
          plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8045fd6:	4b58      	ldr	r3, [pc, #352]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045fd8:	68db      	ldr	r3, [r3, #12]
 8045fda:	0a1b      	lsrs	r3, r3, #8
 8045fdc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8045fe0:	60fb      	str	r3, [r7, #12]
          pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
 8045fe2:	4b55      	ldr	r3, [pc, #340]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045fe4:	68db      	ldr	r3, [r3, #12]
 8045fe6:	0edb      	lsrs	r3, r3, #27
 8045fe8:	f003 031f 	and.w	r3, r3, #31
 8045fec:	617b      	str	r3, [r7, #20]
          if (pllp == 0U)
 8045fee:	697b      	ldr	r3, [r7, #20]
 8045ff0:	2b00      	cmp	r3, #0
 8045ff2:	d10a      	bne.n	804600a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            if (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 8045ff4:	4b50      	ldr	r3, [pc, #320]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8045ff6:	68db      	ldr	r3, [r3, #12]
 8045ff8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8045ffc:	2b00      	cmp	r3, #0
 8045ffe:	d002      	beq.n	8046006 <RCCEx_GetSAIxPeriphCLKFreq+0xc6>
            {
              pllp = 17U;
 8046000:	2311      	movs	r3, #17
 8046002:	617b      	str	r3, [r7, #20]
 8046004:	e001      	b.n	804600a <RCCEx_GetSAIxPeriphCLKFreq+0xca>
            }
            else
            {
              pllp = 7U;
 8046006:	2307      	movs	r3, #7
 8046008:	617b      	str	r3, [r7, #20]
            }
          }
          frequency = (pllvco * plln) / pllp;
 804600a:	693b      	ldr	r3, [r7, #16]
 804600c:	68fa      	ldr	r2, [r7, #12]
 804600e:	fb03 f202 	mul.w	r2, r3, r2
 8046012:	697b      	ldr	r3, [r7, #20]
 8046014:	fbb2 f3f3 	udiv	r3, r2, r3
 8046018:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 804601a:	e086      	b.n	804612a <RCCEx_GetSAIxPeriphCLKFreq+0x1ea>
        }
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_HSI) || (srcclk == RCC_SAI2CLKSOURCE_HSI))
 804601c:	69bb      	ldr	r3, [r7, #24]
 804601e:	2b80      	cmp	r3, #128	; 0x80
 8046020:	d003      	beq.n	804602a <RCCEx_GetSAIxPeriphCLKFreq+0xea>
 8046022:	69bb      	ldr	r3, [r7, #24]
 8046024:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046028:	d109      	bne.n	804603e <RCCEx_GetSAIxPeriphCLKFreq+0xfe>
    {
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 804602a:	4b43      	ldr	r3, [pc, #268]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 804602c:	681b      	ldr	r3, [r3, #0]
 804602e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8046032:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8046036:	d179      	bne.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        frequency = HSI_VALUE;
 8046038:	4b40      	ldr	r3, [pc, #256]	; (804613c <RCCEx_GetSAIxPeriphCLKFreq+0x1fc>)
 804603a:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 804603c:	e076      	b.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if (srcclk == 0U) /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 804603e:	69bb      	ldr	r3, [r7, #24]
 8046040:	2b00      	cmp	r3, #0
 8046042:	d135      	bne.n	80460b0 <RCCEx_GetSAIxPeriphCLKFreq+0x170>
    {
      if (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U)
 8046044:	4b3c      	ldr	r3, [pc, #240]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8046046:	691b      	ldr	r3, [r3, #16]
 8046048:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804604c:	2b00      	cmp	r3, #0
 804604e:	d06d      	beq.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI1 source) */
        pllvco = RCCEx_PLLSAI1_GetVCOFreq();
 8046050:	f7ff fec2 	bl	8045dd8 <RCCEx_PLLSAI1_GetVCOFreq>
 8046054:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
 8046056:	4b38      	ldr	r3, [pc, #224]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8046058:	691b      	ldr	r3, [r3, #16]
 804605a:	091b      	lsrs	r3, r3, #4
 804605c:	f003 030f 	and.w	r3, r3, #15
 8046060:	3301      	adds	r3, #1
 8046062:	693a      	ldr	r2, [r7, #16]
 8046064:	fbb2 f3f3 	udiv	r3, r2, r3
 8046068:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 804606a:	4b33      	ldr	r3, [pc, #204]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 804606c:	691b      	ldr	r3, [r3, #16]
 804606e:	0a1b      	lsrs	r3, r3, #8
 8046070:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8046074:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
 8046076:	4b30      	ldr	r3, [pc, #192]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8046078:	691b      	ldr	r3, [r3, #16]
 804607a:	0edb      	lsrs	r3, r3, #27
 804607c:	f003 031f 	and.w	r3, r3, #31
 8046080:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 8046082:	697b      	ldr	r3, [r7, #20]
 8046084:	2b00      	cmp	r3, #0
 8046086:	d10a      	bne.n	804609e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
        {
          if (READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 8046088:	4b2b      	ldr	r3, [pc, #172]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 804608a:	691b      	ldr	r3, [r3, #16]
 804608c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8046090:	2b00      	cmp	r3, #0
 8046092:	d002      	beq.n	804609a <RCCEx_GetSAIxPeriphCLKFreq+0x15a>
          {
            pllp = 17U;
 8046094:	2311      	movs	r3, #17
 8046096:	617b      	str	r3, [r7, #20]
 8046098:	e001      	b.n	804609e <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
          }
          else
          {
            pllp = 7U;
 804609a:	2307      	movs	r3, #7
 804609c:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 804609e:	693b      	ldr	r3, [r7, #16]
 80460a0:	68fa      	ldr	r2, [r7, #12]
 80460a2:	fb03 f202 	mul.w	r2, r3, r2
 80460a6:	697b      	ldr	r3, [r7, #20]
 80460a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80460ac:	61fb      	str	r3, [r7, #28]
 80460ae:	e03d      	b.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      }
    }
    else if ((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 80460b0:	69bb      	ldr	r3, [r7, #24]
 80460b2:	2b20      	cmp	r3, #32
 80460b4:	d003      	beq.n	80460be <RCCEx_GetSAIxPeriphCLKFreq+0x17e>
 80460b6:	69bb      	ldr	r3, [r7, #24]
 80460b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80460bc:	d136      	bne.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
    {
      if (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U)
 80460be:	4b1e      	ldr	r3, [pc, #120]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80460c0:	695b      	ldr	r3, [r3, #20]
 80460c2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80460c6:	2b00      	cmp	r3, #0
 80460c8:	d030      	beq.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      {
        /* Get f(PLLSAI2 source) */
        pllvco = RCCEx_PLLSAI2_GetVCOFreq();
 80460ca:	f7ff fedf 	bl	8045e8c <RCCEx_PLLSAI2_GetVCOFreq>
 80460ce:	6138      	str	r0, [r7, #16]
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
 80460d0:	4b19      	ldr	r3, [pc, #100]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80460d2:	695b      	ldr	r3, [r3, #20]
 80460d4:	091b      	lsrs	r3, r3, #4
 80460d6:	f003 030f 	and.w	r3, r3, #15
 80460da:	3301      	adds	r3, #1
 80460dc:	693a      	ldr	r2, [r7, #16]
 80460de:	fbb2 f3f3 	udiv	r3, r2, r3
 80460e2:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 80460e4:	4b14      	ldr	r3, [pc, #80]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80460e6:	695b      	ldr	r3, [r3, #20]
 80460e8:	0a1b      	lsrs	r3, r3, #8
 80460ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80460ee:	60fb      	str	r3, [r7, #12]
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
 80460f0:	4b11      	ldr	r3, [pc, #68]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 80460f2:	695b      	ldr	r3, [r3, #20]
 80460f4:	0edb      	lsrs	r3, r3, #27
 80460f6:	f003 031f 	and.w	r3, r3, #31
 80460fa:	617b      	str	r3, [r7, #20]
        if (pllp == 0U)
 80460fc:	697b      	ldr	r3, [r7, #20]
 80460fe:	2b00      	cmp	r3, #0
 8046100:	d10a      	bne.n	8046118 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
        {
          if (READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 8046102:	4b0d      	ldr	r3, [pc, #52]	; (8046138 <RCCEx_GetSAIxPeriphCLKFreq+0x1f8>)
 8046104:	695b      	ldr	r3, [r3, #20]
 8046106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804610a:	2b00      	cmp	r3, #0
 804610c:	d002      	beq.n	8046114 <RCCEx_GetSAIxPeriphCLKFreq+0x1d4>
          {
            pllp = 17U;
 804610e:	2311      	movs	r3, #17
 8046110:	617b      	str	r3, [r7, #20]
 8046112:	e001      	b.n	8046118 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>
          }
          else
          {
            pllp = 7U;
 8046114:	2307      	movs	r3, #7
 8046116:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8046118:	693b      	ldr	r3, [r7, #16]
 804611a:	68fa      	ldr	r2, [r7, #12]
 804611c:	fb03 f202 	mul.w	r2, r3, r2
 8046120:	697b      	ldr	r3, [r7, #20]
 8046122:	fbb2 f3f3 	udiv	r3, r2, r3
 8046126:	61fb      	str	r3, [r7, #28]
 8046128:	e000      	b.n	804612c <RCCEx_GetSAIxPeriphCLKFreq+0x1ec>
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 804612a:	bf00      	nop
    {
      /* No clock source, frequency default init at 0 */
    }
  }

  return frequency;
 804612c:	69fb      	ldr	r3, [r7, #28]
}
 804612e:	4618      	mov	r0, r3
 8046130:	3720      	adds	r7, #32
 8046132:	46bd      	mov	sp, r7
 8046134:	bd80      	pop	{r7, pc}
 8046136:	bf00      	nop
 8046138:	40021000 	.word	0x40021000
 804613c:	00f42400 	.word	0x00f42400

08046140 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8046140:	b580      	push	{r7, lr}
 8046142:	b08a      	sub	sp, #40	; 0x28
 8046144:	af00      	add	r7, sp, #0
 8046146:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8046148:	687b      	ldr	r3, [r7, #4]
 804614a:	2b00      	cmp	r3, #0
 804614c:	d101      	bne.n	8046152 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 804614e:	2301      	movs	r3, #1
 8046150:	e1da      	b.n	8046508 <HAL_SAI_Init+0x3c8>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 8046152:	687b      	ldr	r3, [r7, #4]
 8046154:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8046158:	2b01      	cmp	r3, #1
 804615a:	d10e      	bne.n	804617a <HAL_SAI_Init+0x3a>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 sub-block A, in master RX mode with free protocol */
    if ((hsai->Instance != SAI1_Block_A) ||
 804615c:	687b      	ldr	r3, [r7, #4]
 804615e:	681b      	ldr	r3, [r3, #0]
 8046160:	4a87      	ldr	r2, [pc, #540]	; (8046380 <HAL_SAI_Init+0x240>)
 8046162:	4293      	cmp	r3, r2
 8046164:	d107      	bne.n	8046176 <HAL_SAI_Init+0x36>
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8046166:	687b      	ldr	r3, [r7, #4]
 8046168:	685b      	ldr	r3, [r3, #4]
    if ((hsai->Instance != SAI1_Block_A) ||
 804616a:	2b01      	cmp	r3, #1
 804616c:	d103      	bne.n	8046176 <HAL_SAI_Init+0x36>
        (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 804616e:	687b      	ldr	r3, [r7, #4]
 8046170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
        (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8046172:	2b00      	cmp	r3, #0
 8046174:	d001      	beq.n	804617a <HAL_SAI_Init+0x3a>
    {
      return HAL_ERROR;
 8046176:	2301      	movs	r3, #1
 8046178:	e1c6      	b.n	8046508 <HAL_SAI_Init+0x3c8>
    }
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 804617a:	687b      	ldr	r3, [r7, #4]
 804617c:	f893 3091 	ldrb.w	r3, [r3, #145]	; 0x91
 8046180:	b2db      	uxtb	r3, r3
 8046182:	2b00      	cmp	r3, #0
 8046184:	d106      	bne.n	8046194 <HAL_SAI_Init+0x54>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8046186:	687b      	ldr	r3, [r7, #4]
 8046188:	2200      	movs	r2, #0
 804618a:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 804618e:	6878      	ldr	r0, [r7, #4]
 8046190:	f7fb f96c 	bl	804146c <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8046194:	6878      	ldr	r0, [r7, #4]
 8046196:	f000 f9c3 	bl	8046520 <SAI_Disable>
 804619a:	4603      	mov	r3, r0
 804619c:	2b00      	cmp	r3, #0
 804619e:	d001      	beq.n	80461a4 <HAL_SAI_Init+0x64>
  {
    return HAL_ERROR;
 80461a0:	2301      	movs	r3, #1
 80461a2:	e1b1      	b.n	8046508 <HAL_SAI_Init+0x3c8>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80461a4:	687b      	ldr	r3, [r7, #4]
 80461a6:	2202      	movs	r2, #2
 80461a8:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80461ac:	687b      	ldr	r3, [r7, #4]
 80461ae:	68db      	ldr	r3, [r3, #12]
 80461b0:	2b02      	cmp	r3, #2
 80461b2:	d00c      	beq.n	80461ce <HAL_SAI_Init+0x8e>
 80461b4:	2b02      	cmp	r3, #2
 80461b6:	d80d      	bhi.n	80461d4 <HAL_SAI_Init+0x94>
 80461b8:	2b00      	cmp	r3, #0
 80461ba:	d002      	beq.n	80461c2 <HAL_SAI_Init+0x82>
 80461bc:	2b01      	cmp	r3, #1
 80461be:	d003      	beq.n	80461c8 <HAL_SAI_Init+0x88>
 80461c0:	e008      	b.n	80461d4 <HAL_SAI_Init+0x94>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80461c2:	2300      	movs	r3, #0
 80461c4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80461c6:	e008      	b.n	80461da <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80461c8:	2310      	movs	r3, #16
 80461ca:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80461cc:	e005      	b.n	80461da <HAL_SAI_Init+0x9a>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80461ce:	2320      	movs	r3, #32
 80461d0:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80461d2:	e002      	b.n	80461da <HAL_SAI_Init+0x9a>
    default :
      tmpregisterGCR = 0;
 80461d4:	2300      	movs	r3, #0
 80461d6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80461d8:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80461da:	687b      	ldr	r3, [r7, #4]
 80461dc:	689b      	ldr	r3, [r3, #8]
 80461de:	2b03      	cmp	r3, #3
 80461e0:	d81d      	bhi.n	804621e <HAL_SAI_Init+0xde>
 80461e2:	a201      	add	r2, pc, #4	; (adr r2, 80461e8 <HAL_SAI_Init+0xa8>)
 80461e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80461e8:	080461f9 	.word	0x080461f9
 80461ec:	080461ff 	.word	0x080461ff
 80461f0:	08046207 	.word	0x08046207
 80461f4:	0804620f 	.word	0x0804620f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 80461f8:	2300      	movs	r3, #0
 80461fa:	61fb      	str	r3, [r7, #28]
      break;
 80461fc:	e012      	b.n	8046224 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 80461fe:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8046202:	61fb      	str	r3, [r7, #28]
      break;
 8046204:	e00e      	b.n	8046224 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8046206:	f44f 6300 	mov.w	r3, #2048	; 0x800
 804620a:	61fb      	str	r3, [r7, #28]
      break;
 804620c:	e00a      	b.n	8046224 <HAL_SAI_Init+0xe4>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 804620e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8046212:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8046214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046216:	f043 0301 	orr.w	r3, r3, #1
 804621a:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 804621c:	e002      	b.n	8046224 <HAL_SAI_Init+0xe4>
    default :
      syncen_bits = 0;
 804621e:	2300      	movs	r3, #0
 8046220:	61fb      	str	r3, [r7, #28]
      break;
 8046222:	bf00      	nop
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8046224:	687b      	ldr	r3, [r7, #4]
 8046226:	681b      	ldr	r3, [r3, #0]
 8046228:	4a55      	ldr	r2, [pc, #340]	; (8046380 <HAL_SAI_Init+0x240>)
 804622a:	4293      	cmp	r3, r2
 804622c:	d004      	beq.n	8046238 <HAL_SAI_Init+0xf8>
 804622e:	687b      	ldr	r3, [r7, #4]
 8046230:	681b      	ldr	r3, [r3, #0]
 8046232:	4a54      	ldr	r2, [pc, #336]	; (8046384 <HAL_SAI_Init+0x244>)
 8046234:	4293      	cmp	r3, r2
 8046236:	d103      	bne.n	8046240 <HAL_SAI_Init+0x100>
  {
    SAI1->GCR = tmpregisterGCR;
 8046238:	4a53      	ldr	r2, [pc, #332]	; (8046388 <HAL_SAI_Init+0x248>)
 804623a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804623c:	6013      	str	r3, [r2, #0]
 804623e:	e002      	b.n	8046246 <HAL_SAI_Init+0x106>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8046240:	4a52      	ldr	r2, [pc, #328]	; (804638c <HAL_SAI_Init+0x24c>)
 8046242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046244:	6013      	str	r3, [r2, #0]
  }

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8046246:	687b      	ldr	r3, [r7, #4]
 8046248:	6a1b      	ldr	r3, [r3, #32]
 804624a:	2b00      	cmp	r3, #0
 804624c:	d07e      	beq.n	804634c <HAL_SAI_Init+0x20c>
  {
    uint32_t freq = 0;
 804624e:	2300      	movs	r3, #0
 8046250:	61bb      	str	r3, [r7, #24]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8046252:	687b      	ldr	r3, [r7, #4]
 8046254:	681b      	ldr	r3, [r3, #0]
 8046256:	4a4a      	ldr	r2, [pc, #296]	; (8046380 <HAL_SAI_Init+0x240>)
 8046258:	4293      	cmp	r3, r2
 804625a:	d004      	beq.n	8046266 <HAL_SAI_Init+0x126>
 804625c:	687b      	ldr	r3, [r7, #4]
 804625e:	681b      	ldr	r3, [r3, #0]
 8046260:	4a48      	ldr	r2, [pc, #288]	; (8046384 <HAL_SAI_Init+0x244>)
 8046262:	4293      	cmp	r3, r2
 8046264:	d104      	bne.n	8046270 <HAL_SAI_Init+0x130>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8046266:	f44f 6000 	mov.w	r0, #2048	; 0x800
 804626a:	f7fe fc71 	bl	8044b50 <HAL_RCCEx_GetPeriphCLKFreq>
 804626e:	61b8      	str	r0, [r7, #24]
    }
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8046270:	687b      	ldr	r3, [r7, #4]
 8046272:	681b      	ldr	r3, [r3, #0]
 8046274:	4a46      	ldr	r2, [pc, #280]	; (8046390 <HAL_SAI_Init+0x250>)
 8046276:	4293      	cmp	r3, r2
 8046278:	d004      	beq.n	8046284 <HAL_SAI_Init+0x144>
 804627a:	687b      	ldr	r3, [r7, #4]
 804627c:	681b      	ldr	r3, [r3, #0]
 804627e:	4a45      	ldr	r2, [pc, #276]	; (8046394 <HAL_SAI_Init+0x254>)
 8046280:	4293      	cmp	r3, r2
 8046282:	d104      	bne.n	804628e <HAL_SAI_Init+0x14e>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8046284:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8046288:	f7fe fc62 	bl	8044b50 <HAL_RCCEx_GetPeriphCLKFreq>
 804628c:	61b8      	str	r0, [r7, #24]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 804628e:	687b      	ldr	r3, [r7, #4]
 8046290:	699b      	ldr	r3, [r3, #24]
 8046292:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8046296:	d120      	bne.n	80462da <HAL_SAI_Init+0x19a>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8046298:	687b      	ldr	r3, [r7, #4]
 804629a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804629c:	2b04      	cmp	r3, #4
 804629e:	d102      	bne.n	80462a6 <HAL_SAI_Init+0x166>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 80462a0:	2340      	movs	r3, #64	; 0x40
 80462a2:	613b      	str	r3, [r7, #16]
 80462a4:	e00a      	b.n	80462bc <HAL_SAI_Init+0x17c>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 80462a6:	687b      	ldr	r3, [r7, #4]
 80462a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80462aa:	2b08      	cmp	r3, #8
 80462ac:	d103      	bne.n	80462b6 <HAL_SAI_Init+0x176>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 80462ae:	f44f 7380 	mov.w	r3, #256	; 0x100
 80462b2:	613b      	str	r3, [r7, #16]
 80462b4:	e002      	b.n	80462bc <HAL_SAI_Init+0x17c>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 80462b6:	687b      	ldr	r3, [r7, #4]
 80462b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80462ba:	613b      	str	r3, [r7, #16]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 80462bc:	69ba      	ldr	r2, [r7, #24]
 80462be:	4613      	mov	r3, r2
 80462c0:	009b      	lsls	r3, r3, #2
 80462c2:	4413      	add	r3, r2
 80462c4:	005b      	lsls	r3, r3, #1
 80462c6:	4619      	mov	r1, r3
 80462c8:	687b      	ldr	r3, [r7, #4]
 80462ca:	6a1b      	ldr	r3, [r3, #32]
 80462cc:	693a      	ldr	r2, [r7, #16]
 80462ce:	fb02 f303 	mul.w	r3, r2, r3
 80462d2:	fbb1 f3f3 	udiv	r3, r1, r3
 80462d6:	617b      	str	r3, [r7, #20]
 80462d8:	e017      	b.n	804630a <HAL_SAI_Init+0x1ca>
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 80462da:	687b      	ldr	r3, [r7, #4]
 80462dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80462de:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80462e2:	d101      	bne.n	80462e8 <HAL_SAI_Init+0x1a8>
 80462e4:	2302      	movs	r3, #2
 80462e6:	e000      	b.n	80462ea <HAL_SAI_Init+0x1aa>
 80462e8:	2301      	movs	r3, #1
 80462ea:	60fb      	str	r3, [r7, #12]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 80462ec:	69ba      	ldr	r2, [r7, #24]
 80462ee:	4613      	mov	r3, r2
 80462f0:	009b      	lsls	r3, r3, #2
 80462f2:	4413      	add	r3, r2
 80462f4:	005b      	lsls	r3, r3, #1
 80462f6:	4619      	mov	r1, r3
 80462f8:	687b      	ldr	r3, [r7, #4]
 80462fa:	6a1b      	ldr	r3, [r3, #32]
 80462fc:	68fa      	ldr	r2, [r7, #12]
 80462fe:	fb02 f303 	mul.w	r3, r2, r3
 8046302:	021b      	lsls	r3, r3, #8
 8046304:	fbb1 f3f3 	udiv	r3, r1, r3
 8046308:	617b      	str	r3, [r7, #20]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 804630a:	697b      	ldr	r3, [r7, #20]
 804630c:	4a22      	ldr	r2, [pc, #136]	; (8046398 <HAL_SAI_Init+0x258>)
 804630e:	fba2 2303 	umull	r2, r3, r2, r3
 8046312:	08da      	lsrs	r2, r3, #3
 8046314:	687b      	ldr	r3, [r7, #4]
 8046316:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8046318:	6979      	ldr	r1, [r7, #20]
 804631a:	4b1f      	ldr	r3, [pc, #124]	; (8046398 <HAL_SAI_Init+0x258>)
 804631c:	fba3 2301 	umull	r2, r3, r3, r1
 8046320:	08da      	lsrs	r2, r3, #3
 8046322:	4613      	mov	r3, r2
 8046324:	009b      	lsls	r3, r3, #2
 8046326:	4413      	add	r3, r2
 8046328:	005b      	lsls	r3, r3, #1
 804632a:	1aca      	subs	r2, r1, r3
 804632c:	2a08      	cmp	r2, #8
 804632e:	d904      	bls.n	804633a <HAL_SAI_Init+0x1fa>
    {
      hsai->Init.Mckdiv += 1U;
 8046330:	687b      	ldr	r3, [r7, #4]
 8046332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046334:	1c5a      	adds	r2, r3, #1
 8046336:	687b      	ldr	r3, [r7, #4]
 8046338:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 804633a:	687b      	ldr	r3, [r7, #4]
 804633c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804633e:	2b04      	cmp	r3, #4
 8046340:	d104      	bne.n	804634c <HAL_SAI_Init+0x20c>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8046342:	687b      	ldr	r3, [r7, #4]
 8046344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8046346:	085a      	lsrs	r2, r3, #1
 8046348:	687b      	ldr	r3, [r7, #4]
 804634a:	625a      	str	r2, [r3, #36]	; 0x24
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 804634c:	687b      	ldr	r3, [r7, #4]
 804634e:	685b      	ldr	r3, [r3, #4]
 8046350:	2b00      	cmp	r3, #0
 8046352:	d003      	beq.n	804635c <HAL_SAI_Init+0x21c>
 8046354:	687b      	ldr	r3, [r7, #4]
 8046356:	685b      	ldr	r3, [r3, #4]
 8046358:	2b02      	cmp	r3, #2
 804635a:	d109      	bne.n	8046370 <HAL_SAI_Init+0x230>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 804635c:	687b      	ldr	r3, [r7, #4]
 804635e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8046360:	2b01      	cmp	r3, #1
 8046362:	d101      	bne.n	8046368 <HAL_SAI_Init+0x228>
 8046364:	2300      	movs	r3, #0
 8046366:	e001      	b.n	804636c <HAL_SAI_Init+0x22c>
 8046368:	f44f 7300 	mov.w	r3, #512	; 0x200
 804636c:	623b      	str	r3, [r7, #32]
 804636e:	e017      	b.n	80463a0 <HAL_SAI_Init+0x260>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8046370:	687b      	ldr	r3, [r7, #4]
 8046372:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8046374:	2b01      	cmp	r3, #1
 8046376:	d111      	bne.n	804639c <HAL_SAI_Init+0x25c>
 8046378:	f44f 7300 	mov.w	r3, #512	; 0x200
 804637c:	e00f      	b.n	804639e <HAL_SAI_Init+0x25e>
 804637e:	bf00      	nop
 8046380:	40015404 	.word	0x40015404
 8046384:	40015424 	.word	0x40015424
 8046388:	40015400 	.word	0x40015400
 804638c:	40015800 	.word	0x40015800
 8046390:	40015804 	.word	0x40015804
 8046394:	40015824 	.word	0x40015824
 8046398:	cccccccd 	.word	0xcccccccd
 804639c:	2300      	movs	r3, #0
 804639e:	623b      	str	r3, [r7, #32]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 80463a0:	687b      	ldr	r3, [r7, #4]
 80463a2:	681b      	ldr	r3, [r3, #0]
 80463a4:	6819      	ldr	r1, [r3, #0]
 80463a6:	687b      	ldr	r3, [r7, #4]
 80463a8:	681a      	ldr	r2, [r3, #0]
 80463aa:	4b59      	ldr	r3, [pc, #356]	; (8046510 <HAL_SAI_Init+0x3d0>)
 80463ac:	400b      	ands	r3, r1
 80463ae:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                           SAI_xCR1_MCKEN);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80463b0:	687b      	ldr	r3, [r7, #4]
 80463b2:	681b      	ldr	r3, [r3, #0]
 80463b4:	6819      	ldr	r1, [r3, #0]
 80463b6:	687b      	ldr	r3, [r7, #4]
 80463b8:	685a      	ldr	r2, [r3, #4]
 80463ba:	687b      	ldr	r3, [r7, #4]
 80463bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80463be:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80463c0:	687b      	ldr	r3, [r7, #4]
 80463c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80463c4:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80463c6:	687b      	ldr	r3, [r7, #4]
 80463c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80463ca:	431a      	orrs	r2, r3
 80463cc:	6a3b      	ldr	r3, [r7, #32]
 80463ce:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 80463d0:	69fb      	ldr	r3, [r7, #28]
 80463d2:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80463d4:	687b      	ldr	r3, [r7, #4]
 80463d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                          ckstr_bits | syncen_bits |                             \
 80463d8:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80463da:	687b      	ldr	r3, [r7, #4]
 80463dc:	695b      	ldr	r3, [r3, #20]
 80463de:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80463e0:	687b      	ldr	r3, [r7, #4]
 80463e2:	699b      	ldr	r3, [r3, #24]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80463e4:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80463e6:	687b      	ldr	r3, [r7, #4]
 80463e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80463ea:	051b      	lsls	r3, r3, #20
 80463ec:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80463ee:	687b      	ldr	r3, [r7, #4]
 80463f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80463f2:	431a      	orrs	r2, r3
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 80463f4:	687b      	ldr	r3, [r7, #4]
 80463f6:	691b      	ldr	r3, [r3, #16]
 80463f8:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80463fa:	687b      	ldr	r3, [r7, #4]
 80463fc:	681b      	ldr	r3, [r3, #0]
 80463fe:	430a      	orrs	r2, r1
 8046400:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8046402:	687b      	ldr	r3, [r7, #4]
 8046404:	681b      	ldr	r3, [r3, #0]
 8046406:	685b      	ldr	r3, [r3, #4]
 8046408:	687a      	ldr	r2, [r7, #4]
 804640a:	6812      	ldr	r2, [r2, #0]
 804640c:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8046410:	f023 030f 	bic.w	r3, r3, #15
 8046414:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8046416:	687b      	ldr	r3, [r7, #4]
 8046418:	681b      	ldr	r3, [r3, #0]
 804641a:	6859      	ldr	r1, [r3, #4]
 804641c:	687b      	ldr	r3, [r7, #4]
 804641e:	69da      	ldr	r2, [r3, #28]
 8046420:	687b      	ldr	r3, [r7, #4]
 8046422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8046424:	431a      	orrs	r2, r3
 8046426:	687b      	ldr	r3, [r7, #4]
 8046428:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804642a:	431a      	orrs	r2, r3
 804642c:	687b      	ldr	r3, [r7, #4]
 804642e:	681b      	ldr	r3, [r3, #0]
 8046430:	430a      	orrs	r2, r1
 8046432:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8046434:	687b      	ldr	r3, [r7, #4]
 8046436:	681b      	ldr	r3, [r3, #0]
 8046438:	6899      	ldr	r1, [r3, #8]
 804643a:	687b      	ldr	r3, [r7, #4]
 804643c:	681a      	ldr	r2, [r3, #0]
 804643e:	4b35      	ldr	r3, [pc, #212]	; (8046514 <HAL_SAI_Init+0x3d4>)
 8046440:	400b      	ands	r3, r1
 8046442:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8046444:	687b      	ldr	r3, [r7, #4]
 8046446:	681b      	ldr	r3, [r3, #0]
 8046448:	6899      	ldr	r1, [r3, #8]
 804644a:	687b      	ldr	r3, [r7, #4]
 804644c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 804644e:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8046450:	687b      	ldr	r3, [r7, #4]
 8046452:	6e5b      	ldr	r3, [r3, #100]	; 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8046454:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8046456:	687b      	ldr	r3, [r7, #4]
 8046458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
                           hsai->FrameInit.FSOffset |
 804645a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 804645c:	687b      	ldr	r3, [r7, #4]
 804645e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
                           hsai->FrameInit.FSDefinition |
 8046460:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8046462:	687b      	ldr	r3, [r7, #4]
 8046464:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046466:	3b01      	subs	r3, #1
 8046468:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 804646a:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 804646c:	687b      	ldr	r3, [r7, #4]
 804646e:	681b      	ldr	r3, [r3, #0]
 8046470:	430a      	orrs	r2, r1
 8046472:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8046474:	687b      	ldr	r3, [r7, #4]
 8046476:	681b      	ldr	r3, [r3, #0]
 8046478:	68d9      	ldr	r1, [r3, #12]
 804647a:	687b      	ldr	r3, [r7, #4]
 804647c:	681a      	ldr	r2, [r3, #0]
 804647e:	f24f 0320 	movw	r3, #61472	; 0xf020
 8046482:	400b      	ands	r3, r1
 8046484:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8046486:	687b      	ldr	r3, [r7, #4]
 8046488:	681b      	ldr	r3, [r3, #0]
 804648a:	68d9      	ldr	r1, [r3, #12]
 804648c:	687b      	ldr	r3, [r7, #4]
 804648e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8046490:	687b      	ldr	r3, [r7, #4]
 8046492:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8046494:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8046496:	687b      	ldr	r3, [r7, #4]
 8046498:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804649a:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 804649c:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 804649e:	687b      	ldr	r3, [r7, #4]
 80464a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80464a2:	3b01      	subs	r3, #1
 80464a4:	021b      	lsls	r3, r3, #8
 80464a6:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 80464a8:	687b      	ldr	r3, [r7, #4]
 80464aa:	681b      	ldr	r3, [r3, #0]
 80464ac:	430a      	orrs	r2, r1
 80464ae:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
  if (hsai->Instance == SAI1_Block_A)
 80464b0:	687b      	ldr	r3, [r7, #4]
 80464b2:	681b      	ldr	r3, [r3, #0]
 80464b4:	4a18      	ldr	r2, [pc, #96]	; (8046518 <HAL_SAI_Init+0x3d8>)
 80464b6:	4293      	cmp	r3, r2
 80464b8:	d119      	bne.n	80464ee <HAL_SAI_Init+0x3ae>
  {
    /* Disable PDM interface */
    SAI1->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80464ba:	4b18      	ldr	r3, [pc, #96]	; (804651c <HAL_SAI_Init+0x3dc>)
 80464bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80464be:	4a17      	ldr	r2, [pc, #92]	; (804651c <HAL_SAI_Init+0x3dc>)
 80464c0:	f023 0301 	bic.w	r3, r3, #1
 80464c4:	6453      	str	r3, [r2, #68]	; 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80464c6:	687b      	ldr	r3, [r7, #4]
 80464c8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80464cc:	2b01      	cmp	r3, #1
 80464ce:	d10e      	bne.n	80464ee <HAL_SAI_Init+0x3ae>
    {
      /* Configure and enable PDM interface */
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80464d0:	687b      	ldr	r3, [r7, #4]
 80464d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
                     ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80464d4:	687b      	ldr	r3, [r7, #4]
 80464d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80464d8:	3b01      	subs	r3, #1
 80464da:	011b      	lsls	r3, r3, #4
      SAI1->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80464dc:	490f      	ldr	r1, [pc, #60]	; (804651c <HAL_SAI_Init+0x3dc>)
 80464de:	4313      	orrs	r3, r2
 80464e0:	644b      	str	r3, [r1, #68]	; 0x44
      SAI1->PDMCR |= SAI_PDMCR_PDMEN;
 80464e2:	4b0e      	ldr	r3, [pc, #56]	; (804651c <HAL_SAI_Init+0x3dc>)
 80464e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80464e6:	4a0d      	ldr	r2, [pc, #52]	; (804651c <HAL_SAI_Init+0x3dc>)
 80464e8:	f043 0301 	orr.w	r3, r3, #1
 80464ec:	6453      	str	r3, [r2, #68]	; 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80464ee:	687b      	ldr	r3, [r7, #4]
 80464f0:	2200      	movs	r2, #0
 80464f2:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80464f6:	687b      	ldr	r3, [r7, #4]
 80464f8:	2201      	movs	r2, #1
 80464fa:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80464fe:	687b      	ldr	r3, [r7, #4]
 8046500:	2200      	movs	r2, #0
 8046502:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90

  return HAL_OK;
 8046506:	2300      	movs	r3, #0
}
 8046508:	4618      	mov	r0, r3
 804650a:	3728      	adds	r7, #40	; 0x28
 804650c:	46bd      	mov	sp, r7
 804650e:	bd80      	pop	{r7, pc}
 8046510:	f005c010 	.word	0xf005c010
 8046514:	fff88000 	.word	0xfff88000
 8046518:	40015404 	.word	0x40015404
 804651c:	40015400 	.word	0x40015400

08046520 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8046520:	b480      	push	{r7}
 8046522:	b085      	sub	sp, #20
 8046524:	af00      	add	r7, sp, #0
 8046526:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8046528:	4b18      	ldr	r3, [pc, #96]	; (804658c <SAI_Disable+0x6c>)
 804652a:	681b      	ldr	r3, [r3, #0]
 804652c:	4a18      	ldr	r2, [pc, #96]	; (8046590 <SAI_Disable+0x70>)
 804652e:	fba2 2303 	umull	r2, r3, r2, r3
 8046532:	0b1b      	lsrs	r3, r3, #12
 8046534:	009b      	lsls	r3, r3, #2
 8046536:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8046538:	2300      	movs	r3, #0
 804653a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 804653c:	687b      	ldr	r3, [r7, #4]
 804653e:	681b      	ldr	r3, [r3, #0]
 8046540:	681a      	ldr	r2, [r3, #0]
 8046542:	687b      	ldr	r3, [r7, #4]
 8046544:	681b      	ldr	r3, [r3, #0]
 8046546:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 804654a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 804654c:	68fb      	ldr	r3, [r7, #12]
 804654e:	2b00      	cmp	r3, #0
 8046550:	d10a      	bne.n	8046568 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8046552:	687b      	ldr	r3, [r7, #4]
 8046554:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8046558:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 804655c:	687b      	ldr	r3, [r7, #4]
 804655e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
      status = HAL_TIMEOUT;
 8046562:	2303      	movs	r3, #3
 8046564:	72fb      	strb	r3, [r7, #11]
      break;
 8046566:	e009      	b.n	804657c <SAI_Disable+0x5c>
    }
    count--;
 8046568:	68fb      	ldr	r3, [r7, #12]
 804656a:	3b01      	subs	r3, #1
 804656c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 804656e:	687b      	ldr	r3, [r7, #4]
 8046570:	681b      	ldr	r3, [r3, #0]
 8046572:	681b      	ldr	r3, [r3, #0]
 8046574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8046578:	2b00      	cmp	r3, #0
 804657a:	d1e7      	bne.n	804654c <SAI_Disable+0x2c>

  return status;
 804657c:	7afb      	ldrb	r3, [r7, #11]
}
 804657e:	4618      	mov	r0, r3
 8046580:	3714      	adds	r7, #20
 8046582:	46bd      	mov	sp, r7
 8046584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046588:	4770      	bx	lr
 804658a:	bf00      	nop
 804658c:	20018000 	.word	0x20018000
 8046590:	95cbec1b 	.word	0x95cbec1b

08046594 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8046594:	b580      	push	{r7, lr}
 8046596:	b08a      	sub	sp, #40	; 0x28
 8046598:	af00      	add	r7, sp, #0
 804659a:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 804659c:	687b      	ldr	r3, [r7, #4]
 804659e:	2b00      	cmp	r3, #0
 80465a0:	d101      	bne.n	80465a6 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 80465a2:	2301      	movs	r3, #1
 80465a4:	e075      	b.n	8046692 <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 80465a6:	687b      	ldr	r3, [r7, #4]
 80465a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80465ac:	b2db      	uxtb	r3, r3
 80465ae:	2b00      	cmp	r3, #0
 80465b0:	d105      	bne.n	80465be <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 80465b2:	687b      	ldr	r3, [r7, #4]
 80465b4:	2200      	movs	r2, #0
 80465b6:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 80465b8:	6878      	ldr	r0, [r7, #4]
 80465ba:	f7fa fd91 	bl	80410e0 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 80465be:	687b      	ldr	r3, [r7, #4]
 80465c0:	2204      	movs	r2, #4
 80465c2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 80465c6:	6878      	ldr	r0, [r7, #4]
 80465c8:	f000 f868 	bl	804669c <HAL_SD_InitCard>
 80465cc:	4603      	mov	r3, r0
 80465ce:	2b00      	cmp	r3, #0
 80465d0:	d001      	beq.n	80465d6 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 80465d2:	2301      	movs	r3, #1
 80465d4:	e05d      	b.n	8046692 <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 80465d6:	f107 0308 	add.w	r3, r7, #8
 80465da:	4619      	mov	r1, r3
 80465dc:	6878      	ldr	r0, [r7, #4]
 80465de:	f000 fa95 	bl	8046b0c <HAL_SD_GetCardStatus>
 80465e2:	4603      	mov	r3, r0
 80465e4:	2b00      	cmp	r3, #0
 80465e6:	d001      	beq.n	80465ec <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 80465e8:	2301      	movs	r3, #1
 80465ea:	e052      	b.n	8046692 <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 80465ec:	7e3b      	ldrb	r3, [r7, #24]
 80465ee:	b2db      	uxtb	r3, r3
 80465f0:	627b      	str	r3, [r7, #36]	; 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 80465f2:	7e7b      	ldrb	r3, [r7, #25]
 80465f4:	b2db      	uxtb	r3, r3
 80465f6:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 80465f8:	687b      	ldr	r3, [r7, #4]
 80465fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80465fc:	2b01      	cmp	r3, #1
 80465fe:	d10a      	bne.n	8046616 <HAL_SD_Init+0x82>
 8046600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8046602:	2b00      	cmp	r3, #0
 8046604:	d102      	bne.n	804660c <HAL_SD_Init+0x78>
 8046606:	6a3b      	ldr	r3, [r7, #32]
 8046608:	2b00      	cmp	r3, #0
 804660a:	d004      	beq.n	8046616 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 804660c:	687b      	ldr	r3, [r7, #4]
 804660e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8046612:	659a      	str	r2, [r3, #88]	; 0x58
 8046614:	e00b      	b.n	804662e <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8046616:	687b      	ldr	r3, [r7, #4]
 8046618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 804661a:	2b01      	cmp	r3, #1
 804661c:	d104      	bne.n	8046628 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 804661e:	687b      	ldr	r3, [r7, #4]
 8046620:	f44f 7280 	mov.w	r2, #256	; 0x100
 8046624:	659a      	str	r2, [r3, #88]	; 0x58
 8046626:	e002      	b.n	804662e <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 8046628:	687b      	ldr	r3, [r7, #4]
 804662a:	2200      	movs	r2, #0
 804662c:	659a      	str	r2, [r3, #88]	; 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 804662e:	687b      	ldr	r3, [r7, #4]
 8046630:	68db      	ldr	r3, [r3, #12]
 8046632:	4619      	mov	r1, r3
 8046634:	6878      	ldr	r0, [r7, #4]
 8046636:	f000 fb27 	bl	8046c88 <HAL_SD_ConfigWideBusOperation>
 804663a:	4603      	mov	r3, r0
 804663c:	2b00      	cmp	r3, #0
 804663e:	d001      	beq.n	8046644 <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 8046640:	2301      	movs	r3, #1
 8046642:	e026      	b.n	8046692 <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 8046644:	f7fb f83a 	bl	80416bc <HAL_GetTick>
 8046648:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 804664a:	e011      	b.n	8046670 <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 804664c:	f7fb f836 	bl	80416bc <HAL_GetTick>
 8046650:	4602      	mov	r2, r0
 8046652:	69fb      	ldr	r3, [r7, #28]
 8046654:	1ad3      	subs	r3, r2, r3
 8046656:	f1b3 3fff 	cmp.w	r3, #4294967295
 804665a:	d109      	bne.n	8046670 <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 804665c:	687b      	ldr	r3, [r7, #4]
 804665e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8046662:	635a      	str	r2, [r3, #52]	; 0x34
      hsd->State = HAL_SD_STATE_READY;
 8046664:	687b      	ldr	r3, [r7, #4]
 8046666:	2201      	movs	r2, #1
 8046668:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      return HAL_TIMEOUT;
 804666c:	2303      	movs	r3, #3
 804666e:	e010      	b.n	8046692 <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 8046670:	6878      	ldr	r0, [r7, #4]
 8046672:	f000 fc19 	bl	8046ea8 <HAL_SD_GetCardState>
 8046676:	4603      	mov	r3, r0
 8046678:	2b04      	cmp	r3, #4
 804667a:	d1e7      	bne.n	804664c <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 804667c:	687b      	ldr	r3, [r7, #4]
 804667e:	2200      	movs	r2, #0
 8046680:	635a      	str	r2, [r3, #52]	; 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8046682:	687b      	ldr	r3, [r7, #4]
 8046684:	2200      	movs	r2, #0
 8046686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8046688:	687b      	ldr	r3, [r7, #4]
 804668a:	2201      	movs	r2, #1
 804668c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8046690:	2300      	movs	r3, #0
}
 8046692:	4618      	mov	r0, r3
 8046694:	3728      	adds	r7, #40	; 0x28
 8046696:	46bd      	mov	sp, r7
 8046698:	bd80      	pop	{r7, pc}
	...

0804669c <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 804669c:	b590      	push	{r4, r7, lr}
 804669e:	b08d      	sub	sp, #52	; 0x34
 80466a0:	af02      	add	r7, sp, #8
 80466a2:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init;
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 80466a4:	2300      	movs	r3, #0
 80466a6:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 80466a8:	2300      	movs	r3, #0
 80466aa:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 80466ac:	2300      	movs	r3, #0
 80466ae:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 80466b0:	2300      	movs	r3, #0
 80466b2:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 80466b4:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 80466b8:	f7fe fa4a 	bl	8044b50 <HAL_RCCEx_GetPeriphCLKFreq>
 80466bc:	6278      	str	r0, [r7, #36]	; 0x24
  if (sdmmc_clk == 0U)
 80466be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80466c0:	2b00      	cmp	r3, #0
 80466c2:	d109      	bne.n	80466d8 <HAL_SD_InitCard+0x3c>
  {
    hsd->State = HAL_SD_STATE_READY;
 80466c4:	687b      	ldr	r3, [r7, #4]
 80466c6:	2201      	movs	r2, #1
 80466c8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 80466cc:	687b      	ldr	r3, [r7, #4]
 80466ce:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80466d2:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80466d4:	2301      	movs	r3, #1
 80466d6:	e06a      	b.n	80467ae <HAL_SD_InitCard+0x112>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 80466d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80466da:	0a1b      	lsrs	r3, r3, #8
 80466dc:	4a36      	ldr	r2, [pc, #216]	; (80467b8 <HAL_SD_InitCard+0x11c>)
 80466de:	fba2 2303 	umull	r2, r3, r2, r3
 80466e2:	091b      	lsrs	r3, r3, #4
 80466e4:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 80466e6:	687b      	ldr	r3, [r7, #4]
 80466e8:	681c      	ldr	r4, [r3, #0]
 80466ea:	466a      	mov	r2, sp
 80466ec:	f107 0318 	add.w	r3, r7, #24
 80466f0:	e893 0003 	ldmia.w	r3, {r0, r1}
 80466f4:	e882 0003 	stmia.w	r2, {r0, r1}
 80466f8:	f107 030c 	add.w	r3, r7, #12
 80466fc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80466fe:	4620      	mov	r0, r4
 8046700:	f001 fe7a 	bl	80483f8 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8046704:	687b      	ldr	r3, [r7, #4]
 8046706:	681b      	ldr	r3, [r3, #0]
 8046708:	4618      	mov	r0, r3
 804670a:	f001 feac 	bl	8048466 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 804670e:	69fb      	ldr	r3, [r7, #28]
 8046710:	005b      	lsls	r3, r3, #1
 8046712:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8046714:	fbb2 f3f3 	udiv	r3, r2, r3
 8046718:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 804671a:	4a28      	ldr	r2, [pc, #160]	; (80467bc <HAL_SD_InitCard+0x120>)
 804671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804671e:	fbb2 f3f3 	udiv	r3, r2, r3
 8046722:	3301      	adds	r3, #1
 8046724:	4618      	mov	r0, r3
 8046726:	f7fa ffd5 	bl	80416d4 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 804672a:	6878      	ldr	r0, [r7, #4]
 804672c:	f000 fcaa 	bl	8047084 <SD_PowerON>
 8046730:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8046732:	6a3b      	ldr	r3, [r7, #32]
 8046734:	2b00      	cmp	r3, #0
 8046736:	d00b      	beq.n	8046750 <HAL_SD_InitCard+0xb4>
  {
    hsd->State = HAL_SD_STATE_READY;
 8046738:	687b      	ldr	r3, [r7, #4]
 804673a:	2201      	movs	r2, #1
 804673c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8046740:	687b      	ldr	r3, [r7, #4]
 8046742:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046744:	6a3b      	ldr	r3, [r7, #32]
 8046746:	431a      	orrs	r2, r3
 8046748:	687b      	ldr	r3, [r7, #4]
 804674a:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 804674c:	2301      	movs	r3, #1
 804674e:	e02e      	b.n	80467ae <HAL_SD_InitCard+0x112>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8046750:	6878      	ldr	r0, [r7, #4]
 8046752:	f000 fbc9 	bl	8046ee8 <SD_InitCard>
 8046756:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8046758:	6a3b      	ldr	r3, [r7, #32]
 804675a:	2b00      	cmp	r3, #0
 804675c:	d00b      	beq.n	8046776 <HAL_SD_InitCard+0xda>
  {
    hsd->State = HAL_SD_STATE_READY;
 804675e:	687b      	ldr	r3, [r7, #4]
 8046760:	2201      	movs	r2, #1
 8046762:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hsd->ErrorCode |= errorstate;
 8046766:	687b      	ldr	r3, [r7, #4]
 8046768:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804676a:	6a3b      	ldr	r3, [r7, #32]
 804676c:	431a      	orrs	r2, r3
 804676e:	687b      	ldr	r3, [r7, #4]
 8046770:	635a      	str	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8046772:	2301      	movs	r3, #1
 8046774:	e01b      	b.n	80467ae <HAL_SD_InitCard+0x112>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8046776:	687b      	ldr	r3, [r7, #4]
 8046778:	681b      	ldr	r3, [r3, #0]
 804677a:	f44f 7100 	mov.w	r1, #512	; 0x200
 804677e:	4618      	mov	r0, r3
 8046780:	f001 ff06 	bl	8048590 <SDMMC_CmdBlockLength>
 8046784:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8046786:	6a3b      	ldr	r3, [r7, #32]
 8046788:	2b00      	cmp	r3, #0
 804678a:	d00f      	beq.n	80467ac <HAL_SD_InitCard+0x110>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 804678c:	687b      	ldr	r3, [r7, #4]
 804678e:	681b      	ldr	r3, [r3, #0]
 8046790:	4a0b      	ldr	r2, [pc, #44]	; (80467c0 <HAL_SD_InitCard+0x124>)
 8046792:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8046794:	687b      	ldr	r3, [r7, #4]
 8046796:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046798:	6a3b      	ldr	r3, [r7, #32]
 804679a:	431a      	orrs	r2, r3
 804679c:	687b      	ldr	r3, [r7, #4]
 804679e:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80467a0:	687b      	ldr	r3, [r7, #4]
 80467a2:	2201      	movs	r2, #1
 80467a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80467a8:	2301      	movs	r3, #1
 80467aa:	e000      	b.n	80467ae <HAL_SD_InitCard+0x112>
  }

  return HAL_OK;
 80467ac:	2300      	movs	r3, #0
}
 80467ae:	4618      	mov	r0, r3
 80467b0:	372c      	adds	r7, #44	; 0x2c
 80467b2:	46bd      	mov	sp, r7
 80467b4:	bd90      	pop	{r4, r7, pc}
 80467b6:	bf00      	nop
 80467b8:	014f8b59 	.word	0x014f8b59
 80467bc:	00012110 	.word	0x00012110
 80467c0:	1fe00fff 	.word	0x1fe00fff

080467c4 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80467c4:	b480      	push	{r7}
 80467c6:	b083      	sub	sp, #12
 80467c8:	af00      	add	r7, sp, #0
 80467ca:	6078      	str	r0, [r7, #4]
 80467cc:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80467ce:	687b      	ldr	r3, [r7, #4]
 80467d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80467d2:	0f9b      	lsrs	r3, r3, #30
 80467d4:	b2da      	uxtb	r2, r3
 80467d6:	683b      	ldr	r3, [r7, #0]
 80467d8:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80467da:	687b      	ldr	r3, [r7, #4]
 80467dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80467de:	0e9b      	lsrs	r3, r3, #26
 80467e0:	b2db      	uxtb	r3, r3
 80467e2:	f003 030f 	and.w	r3, r3, #15
 80467e6:	b2da      	uxtb	r2, r3
 80467e8:	683b      	ldr	r3, [r7, #0]
 80467ea:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 80467ec:	687b      	ldr	r3, [r7, #4]
 80467ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80467f0:	0e1b      	lsrs	r3, r3, #24
 80467f2:	b2db      	uxtb	r3, r3
 80467f4:	f003 0303 	and.w	r3, r3, #3
 80467f8:	b2da      	uxtb	r2, r3
 80467fa:	683b      	ldr	r3, [r7, #0]
 80467fc:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 80467fe:	687b      	ldr	r3, [r7, #4]
 8046800:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8046802:	0c1b      	lsrs	r3, r3, #16
 8046804:	b2da      	uxtb	r2, r3
 8046806:	683b      	ldr	r3, [r7, #0]
 8046808:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 804680a:	687b      	ldr	r3, [r7, #4]
 804680c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804680e:	0a1b      	lsrs	r3, r3, #8
 8046810:	b2da      	uxtb	r2, r3
 8046812:	683b      	ldr	r3, [r7, #0]
 8046814:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 8046816:	687b      	ldr	r3, [r7, #4]
 8046818:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 804681a:	b2da      	uxtb	r2, r3
 804681c:	683b      	ldr	r3, [r7, #0]
 804681e:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8046820:	687b      	ldr	r3, [r7, #4]
 8046822:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046824:	0d1b      	lsrs	r3, r3, #20
 8046826:	b29a      	uxth	r2, r3
 8046828:	683b      	ldr	r3, [r7, #0]
 804682a:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 804682c:	687b      	ldr	r3, [r7, #4]
 804682e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046830:	0c1b      	lsrs	r3, r3, #16
 8046832:	b2db      	uxtb	r3, r3
 8046834:	f003 030f 	and.w	r3, r3, #15
 8046838:	b2da      	uxtb	r2, r3
 804683a:	683b      	ldr	r3, [r7, #0]
 804683c:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 804683e:	687b      	ldr	r3, [r7, #4]
 8046840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046842:	0bdb      	lsrs	r3, r3, #15
 8046844:	b2db      	uxtb	r3, r3
 8046846:	f003 0301 	and.w	r3, r3, #1
 804684a:	b2da      	uxtb	r2, r3
 804684c:	683b      	ldr	r3, [r7, #0]
 804684e:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8046850:	687b      	ldr	r3, [r7, #4]
 8046852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046854:	0b9b      	lsrs	r3, r3, #14
 8046856:	b2db      	uxtb	r3, r3
 8046858:	f003 0301 	and.w	r3, r3, #1
 804685c:	b2da      	uxtb	r2, r3
 804685e:	683b      	ldr	r3, [r7, #0]
 8046860:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8046862:	687b      	ldr	r3, [r7, #4]
 8046864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046866:	0b5b      	lsrs	r3, r3, #13
 8046868:	b2db      	uxtb	r3, r3
 804686a:	f003 0301 	and.w	r3, r3, #1
 804686e:	b2da      	uxtb	r2, r3
 8046870:	683b      	ldr	r3, [r7, #0]
 8046872:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8046874:	687b      	ldr	r3, [r7, #4]
 8046876:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046878:	0b1b      	lsrs	r3, r3, #12
 804687a:	b2db      	uxtb	r3, r3
 804687c:	f003 0301 	and.w	r3, r3, #1
 8046880:	b2da      	uxtb	r2, r3
 8046882:	683b      	ldr	r3, [r7, #0]
 8046884:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 8046886:	683b      	ldr	r3, [r7, #0]
 8046888:	2200      	movs	r2, #0
 804688a:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 804688c:	687b      	ldr	r3, [r7, #4]
 804688e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046890:	2b00      	cmp	r3, #0
 8046892:	d163      	bne.n	804695c <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 8046894:	687b      	ldr	r3, [r7, #4]
 8046896:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046898:	009a      	lsls	r2, r3, #2
 804689a:	f640 73fc 	movw	r3, #4092	; 0xffc
 804689e:	4013      	ands	r3, r2
 80468a0:	687a      	ldr	r2, [r7, #4]
 80468a2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 80468a4:	0f92      	lsrs	r2, r2, #30
 80468a6:	431a      	orrs	r2, r3
 80468a8:	683b      	ldr	r3, [r7, #0]
 80468aa:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80468ac:	687b      	ldr	r3, [r7, #4]
 80468ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80468b0:	0edb      	lsrs	r3, r3, #27
 80468b2:	b2db      	uxtb	r3, r3
 80468b4:	f003 0307 	and.w	r3, r3, #7
 80468b8:	b2da      	uxtb	r2, r3
 80468ba:	683b      	ldr	r3, [r7, #0]
 80468bc:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80468be:	687b      	ldr	r3, [r7, #4]
 80468c0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80468c2:	0e1b      	lsrs	r3, r3, #24
 80468c4:	b2db      	uxtb	r3, r3
 80468c6:	f003 0307 	and.w	r3, r3, #7
 80468ca:	b2da      	uxtb	r2, r3
 80468cc:	683b      	ldr	r3, [r7, #0]
 80468ce:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80468d0:	687b      	ldr	r3, [r7, #4]
 80468d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80468d4:	0d5b      	lsrs	r3, r3, #21
 80468d6:	b2db      	uxtb	r3, r3
 80468d8:	f003 0307 	and.w	r3, r3, #7
 80468dc:	b2da      	uxtb	r2, r3
 80468de:	683b      	ldr	r3, [r7, #0]
 80468e0:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 80468e2:	687b      	ldr	r3, [r7, #4]
 80468e4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80468e6:	0c9b      	lsrs	r3, r3, #18
 80468e8:	b2db      	uxtb	r3, r3
 80468ea:	f003 0307 	and.w	r3, r3, #7
 80468ee:	b2da      	uxtb	r2, r3
 80468f0:	683b      	ldr	r3, [r7, #0]
 80468f2:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 80468f4:	687b      	ldr	r3, [r7, #4]
 80468f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80468f8:	0bdb      	lsrs	r3, r3, #15
 80468fa:	b2db      	uxtb	r3, r3
 80468fc:	f003 0307 	and.w	r3, r3, #7
 8046900:	b2da      	uxtb	r2, r3
 8046902:	683b      	ldr	r3, [r7, #0]
 8046904:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8046906:	683b      	ldr	r3, [r7, #0]
 8046908:	691b      	ldr	r3, [r3, #16]
 804690a:	1c5a      	adds	r2, r3, #1
 804690c:	687b      	ldr	r3, [r7, #4]
 804690e:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8046910:	683b      	ldr	r3, [r7, #0]
 8046912:	7e1b      	ldrb	r3, [r3, #24]
 8046914:	b2db      	uxtb	r3, r3
 8046916:	f003 0307 	and.w	r3, r3, #7
 804691a:	3302      	adds	r3, #2
 804691c:	2201      	movs	r2, #1
 804691e:	fa02 f303 	lsl.w	r3, r2, r3
 8046922:	687a      	ldr	r2, [r7, #4]
 8046924:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8046926:	fb03 f202 	mul.w	r2, r3, r2
 804692a:	687b      	ldr	r3, [r7, #4]
 804692c:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 804692e:	683b      	ldr	r3, [r7, #0]
 8046930:	7a1b      	ldrb	r3, [r3, #8]
 8046932:	b2db      	uxtb	r3, r3
 8046934:	f003 030f 	and.w	r3, r3, #15
 8046938:	2201      	movs	r2, #1
 804693a:	409a      	lsls	r2, r3
 804693c:	687b      	ldr	r3, [r7, #4]
 804693e:	64da      	str	r2, [r3, #76]	; 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8046940:	687b      	ldr	r3, [r7, #4]
 8046942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8046944:	687a      	ldr	r2, [r7, #4]
 8046946:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8046948:	0a52      	lsrs	r2, r2, #9
 804694a:	fb03 f202 	mul.w	r2, r3, r2
 804694e:	687b      	ldr	r3, [r7, #4]
 8046950:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.LogBlockSize = 512U;
 8046952:	687b      	ldr	r3, [r7, #4]
 8046954:	f44f 7200 	mov.w	r2, #512	; 0x200
 8046958:	655a      	str	r2, [r3, #84]	; 0x54
 804695a:	e031      	b.n	80469c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 804695c:	687b      	ldr	r3, [r7, #4]
 804695e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046960:	2b01      	cmp	r3, #1
 8046962:	d11d      	bne.n	80469a0 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8046964:	687b      	ldr	r3, [r7, #4]
 8046966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8046968:	041b      	lsls	r3, r3, #16
 804696a:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 804696e:	687b      	ldr	r3, [r7, #4]
 8046970:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8046972:	0c1b      	lsrs	r3, r3, #16
 8046974:	431a      	orrs	r2, r3
 8046976:	683b      	ldr	r3, [r7, #0]
 8046978:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 804697a:	683b      	ldr	r3, [r7, #0]
 804697c:	691b      	ldr	r3, [r3, #16]
 804697e:	3301      	adds	r3, #1
 8046980:	029a      	lsls	r2, r3, #10
 8046982:	687b      	ldr	r3, [r7, #4]
 8046984:	649a      	str	r2, [r3, #72]	; 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8046986:	687b      	ldr	r3, [r7, #4]
 8046988:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 804698a:	687b      	ldr	r3, [r7, #4]
 804698c:	651a      	str	r2, [r3, #80]	; 0x50
    hsd->SdCard.BlockSize = 512U;
 804698e:	687b      	ldr	r3, [r7, #4]
 8046990:	f44f 7200 	mov.w	r2, #512	; 0x200
 8046994:	64da      	str	r2, [r3, #76]	; 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8046996:	687b      	ldr	r3, [r7, #4]
 8046998:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 804699a:	687b      	ldr	r3, [r7, #4]
 804699c:	655a      	str	r2, [r3, #84]	; 0x54
 804699e:	e00f      	b.n	80469c0 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80469a0:	687b      	ldr	r3, [r7, #4]
 80469a2:	681b      	ldr	r3, [r3, #0]
 80469a4:	4a58      	ldr	r2, [pc, #352]	; (8046b08 <HAL_SD_GetCardCSD+0x344>)
 80469a6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80469a8:	687b      	ldr	r3, [r7, #4]
 80469aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80469ac:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80469b0:	687b      	ldr	r3, [r7, #4]
 80469b2:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 80469b4:	687b      	ldr	r3, [r7, #4]
 80469b6:	2201      	movs	r2, #1
 80469b8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    return HAL_ERROR;
 80469bc:	2301      	movs	r3, #1
 80469be:	e09d      	b.n	8046afc <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80469c0:	687b      	ldr	r3, [r7, #4]
 80469c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80469c4:	0b9b      	lsrs	r3, r3, #14
 80469c6:	b2db      	uxtb	r3, r3
 80469c8:	f003 0301 	and.w	r3, r3, #1
 80469cc:	b2da      	uxtb	r2, r3
 80469ce:	683b      	ldr	r3, [r7, #0]
 80469d0:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80469d2:	687b      	ldr	r3, [r7, #4]
 80469d4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80469d6:	09db      	lsrs	r3, r3, #7
 80469d8:	b2db      	uxtb	r3, r3
 80469da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80469de:	b2da      	uxtb	r2, r3
 80469e0:	683b      	ldr	r3, [r7, #0]
 80469e2:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80469e4:	687b      	ldr	r3, [r7, #4]
 80469e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80469e8:	b2db      	uxtb	r3, r3
 80469ea:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80469ee:	b2da      	uxtb	r2, r3
 80469f0:	683b      	ldr	r3, [r7, #0]
 80469f2:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80469f4:	687b      	ldr	r3, [r7, #4]
 80469f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80469f8:	0fdb      	lsrs	r3, r3, #31
 80469fa:	b2da      	uxtb	r2, r3
 80469fc:	683b      	ldr	r3, [r7, #0]
 80469fe:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8046a00:	687b      	ldr	r3, [r7, #4]
 8046a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a04:	0f5b      	lsrs	r3, r3, #29
 8046a06:	b2db      	uxtb	r3, r3
 8046a08:	f003 0303 	and.w	r3, r3, #3
 8046a0c:	b2da      	uxtb	r2, r3
 8046a0e:	683b      	ldr	r3, [r7, #0]
 8046a10:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8046a12:	687b      	ldr	r3, [r7, #4]
 8046a14:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a16:	0e9b      	lsrs	r3, r3, #26
 8046a18:	b2db      	uxtb	r3, r3
 8046a1a:	f003 0307 	and.w	r3, r3, #7
 8046a1e:	b2da      	uxtb	r2, r3
 8046a20:	683b      	ldr	r3, [r7, #0]
 8046a22:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8046a24:	687b      	ldr	r3, [r7, #4]
 8046a26:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a28:	0d9b      	lsrs	r3, r3, #22
 8046a2a:	b2db      	uxtb	r3, r3
 8046a2c:	f003 030f 	and.w	r3, r3, #15
 8046a30:	b2da      	uxtb	r2, r3
 8046a32:	683b      	ldr	r3, [r7, #0]
 8046a34:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8046a36:	687b      	ldr	r3, [r7, #4]
 8046a38:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a3a:	0d5b      	lsrs	r3, r3, #21
 8046a3c:	b2db      	uxtb	r3, r3
 8046a3e:	f003 0301 	and.w	r3, r3, #1
 8046a42:	b2da      	uxtb	r2, r3
 8046a44:	683b      	ldr	r3, [r7, #0]
 8046a46:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8046a4a:	683b      	ldr	r3, [r7, #0]
 8046a4c:	2200      	movs	r2, #0
 8046a4e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8046a52:	687b      	ldr	r3, [r7, #4]
 8046a54:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a56:	0c1b      	lsrs	r3, r3, #16
 8046a58:	b2db      	uxtb	r3, r3
 8046a5a:	f003 0301 	and.w	r3, r3, #1
 8046a5e:	b2da      	uxtb	r2, r3
 8046a60:	683b      	ldr	r3, [r7, #0]
 8046a62:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8046a66:	687b      	ldr	r3, [r7, #4]
 8046a68:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a6a:	0bdb      	lsrs	r3, r3, #15
 8046a6c:	b2db      	uxtb	r3, r3
 8046a6e:	f003 0301 	and.w	r3, r3, #1
 8046a72:	b2da      	uxtb	r2, r3
 8046a74:	683b      	ldr	r3, [r7, #0]
 8046a76:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8046a7a:	687b      	ldr	r3, [r7, #4]
 8046a7c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a7e:	0b9b      	lsrs	r3, r3, #14
 8046a80:	b2db      	uxtb	r3, r3
 8046a82:	f003 0301 	and.w	r3, r3, #1
 8046a86:	b2da      	uxtb	r2, r3
 8046a88:	683b      	ldr	r3, [r7, #0]
 8046a8a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 8046a8e:	687b      	ldr	r3, [r7, #4]
 8046a90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046a92:	0b5b      	lsrs	r3, r3, #13
 8046a94:	b2db      	uxtb	r3, r3
 8046a96:	f003 0301 	and.w	r3, r3, #1
 8046a9a:	b2da      	uxtb	r2, r3
 8046a9c:	683b      	ldr	r3, [r7, #0]
 8046a9e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 8046aa2:	687b      	ldr	r3, [r7, #4]
 8046aa4:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046aa6:	0b1b      	lsrs	r3, r3, #12
 8046aa8:	b2db      	uxtb	r3, r3
 8046aaa:	f003 0301 	and.w	r3, r3, #1
 8046aae:	b2da      	uxtb	r2, r3
 8046ab0:	683b      	ldr	r3, [r7, #0]
 8046ab2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 8046ab6:	687b      	ldr	r3, [r7, #4]
 8046ab8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046aba:	0a9b      	lsrs	r3, r3, #10
 8046abc:	b2db      	uxtb	r3, r3
 8046abe:	f003 0303 	and.w	r3, r3, #3
 8046ac2:	b2da      	uxtb	r2, r3
 8046ac4:	683b      	ldr	r3, [r7, #0]
 8046ac6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 8046aca:	687b      	ldr	r3, [r7, #4]
 8046acc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046ace:	0a1b      	lsrs	r3, r3, #8
 8046ad0:	b2db      	uxtb	r3, r3
 8046ad2:	f003 0303 	and.w	r3, r3, #3
 8046ad6:	b2da      	uxtb	r2, r3
 8046ad8:	683b      	ldr	r3, [r7, #0]
 8046ada:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8046ade:	687b      	ldr	r3, [r7, #4]
 8046ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8046ae2:	085b      	lsrs	r3, r3, #1
 8046ae4:	b2db      	uxtb	r3, r3
 8046ae6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8046aea:	b2da      	uxtb	r2, r3
 8046aec:	683b      	ldr	r3, [r7, #0]
 8046aee:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8046af2:	683b      	ldr	r3, [r7, #0]
 8046af4:	2201      	movs	r2, #1
 8046af6:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 8046afa:	2300      	movs	r3, #0
}
 8046afc:	4618      	mov	r0, r3
 8046afe:	370c      	adds	r7, #12
 8046b00:	46bd      	mov	sp, r7
 8046b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8046b06:	4770      	bx	lr
 8046b08:	1fe00fff 	.word	0x1fe00fff

08046b0c <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8046b0c:	b580      	push	{r7, lr}
 8046b0e:	b094      	sub	sp, #80	; 0x50
 8046b10:	af00      	add	r7, sp, #0
 8046b12:	6078      	str	r0, [r7, #4]
 8046b14:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8046b16:	2300      	movs	r3, #0
 8046b18:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8046b1c:	687b      	ldr	r3, [r7, #4]
 8046b1e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8046b22:	b2db      	uxtb	r3, r3
 8046b24:	2b03      	cmp	r3, #3
 8046b26:	d101      	bne.n	8046b2c <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8046b28:	2301      	movs	r3, #1
 8046b2a:	e0a7      	b.n	8046c7c <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8046b2c:	f107 0308 	add.w	r3, r7, #8
 8046b30:	4619      	mov	r1, r3
 8046b32:	6878      	ldr	r0, [r7, #4]
 8046b34:	f000 fb34 	bl	80471a0 <SD_SendSDStatus>
 8046b38:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8046b3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8046b3c:	2b00      	cmp	r3, #0
 8046b3e:	d011      	beq.n	8046b64 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8046b40:	687b      	ldr	r3, [r7, #4]
 8046b42:	681b      	ldr	r3, [r3, #0]
 8046b44:	4a4f      	ldr	r2, [pc, #316]	; (8046c84 <HAL_SD_GetCardStatus+0x178>)
 8046b46:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8046b48:	687b      	ldr	r3, [r7, #4]
 8046b4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046b4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8046b4e:	431a      	orrs	r2, r3
 8046b50:	687b      	ldr	r3, [r7, #4]
 8046b52:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8046b54:	687b      	ldr	r3, [r7, #4]
 8046b56:	2201      	movs	r2, #1
 8046b58:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8046b5c:	2301      	movs	r3, #1
 8046b5e:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8046b62:	e070      	b.n	8046c46 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8046b64:	68bb      	ldr	r3, [r7, #8]
 8046b66:	099b      	lsrs	r3, r3, #6
 8046b68:	b2db      	uxtb	r3, r3
 8046b6a:	f003 0303 	and.w	r3, r3, #3
 8046b6e:	b2da      	uxtb	r2, r3
 8046b70:	683b      	ldr	r3, [r7, #0]
 8046b72:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8046b74:	68bb      	ldr	r3, [r7, #8]
 8046b76:	095b      	lsrs	r3, r3, #5
 8046b78:	b2db      	uxtb	r3, r3
 8046b7a:	f003 0301 	and.w	r3, r3, #1
 8046b7e:	b2da      	uxtb	r2, r3
 8046b80:	683b      	ldr	r3, [r7, #0]
 8046b82:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8046b84:	68bb      	ldr	r3, [r7, #8]
 8046b86:	0a1b      	lsrs	r3, r3, #8
 8046b88:	b29b      	uxth	r3, r3
 8046b8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8046b8e:	b29a      	uxth	r2, r3
 8046b90:	68bb      	ldr	r3, [r7, #8]
 8046b92:	0e1b      	lsrs	r3, r3, #24
 8046b94:	b29b      	uxth	r3, r3
 8046b96:	4313      	orrs	r3, r2
 8046b98:	b29a      	uxth	r2, r3
 8046b9a:	683b      	ldr	r3, [r7, #0]
 8046b9c:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8046b9e:	68fb      	ldr	r3, [r7, #12]
 8046ba0:	061a      	lsls	r2, r3, #24
 8046ba2:	68fb      	ldr	r3, [r7, #12]
 8046ba4:	021b      	lsls	r3, r3, #8
 8046ba6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8046baa:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8046bac:	68fb      	ldr	r3, [r7, #12]
 8046bae:	0a1b      	lsrs	r3, r3, #8
 8046bb0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8046bb4:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 8046bb6:	68fb      	ldr	r3, [r7, #12]
 8046bb8:	0e1b      	lsrs	r3, r3, #24
 8046bba:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 8046bbc:	683b      	ldr	r3, [r7, #0]
 8046bbe:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 8046bc0:	693b      	ldr	r3, [r7, #16]
 8046bc2:	b2da      	uxtb	r2, r3
 8046bc4:	683b      	ldr	r3, [r7, #0]
 8046bc6:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 8046bc8:	693b      	ldr	r3, [r7, #16]
 8046bca:	0a1b      	lsrs	r3, r3, #8
 8046bcc:	b2da      	uxtb	r2, r3
 8046bce:	683b      	ldr	r3, [r7, #0]
 8046bd0:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 8046bd2:	693b      	ldr	r3, [r7, #16]
 8046bd4:	0d1b      	lsrs	r3, r3, #20
 8046bd6:	b2db      	uxtb	r3, r3
 8046bd8:	f003 030f 	and.w	r3, r3, #15
 8046bdc:	b2da      	uxtb	r2, r3
 8046bde:	683b      	ldr	r3, [r7, #0]
 8046be0:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 8046be2:	693b      	ldr	r3, [r7, #16]
 8046be4:	0c1b      	lsrs	r3, r3, #16
 8046be6:	b29b      	uxth	r3, r3
 8046be8:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8046bec:	b29a      	uxth	r2, r3
 8046bee:	697b      	ldr	r3, [r7, #20]
 8046bf0:	b29b      	uxth	r3, r3
 8046bf2:	b2db      	uxtb	r3, r3
 8046bf4:	b29b      	uxth	r3, r3
 8046bf6:	4313      	orrs	r3, r2
 8046bf8:	b29a      	uxth	r2, r3
 8046bfa:	683b      	ldr	r3, [r7, #0]
 8046bfc:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 8046bfe:	697b      	ldr	r3, [r7, #20]
 8046c00:	0a9b      	lsrs	r3, r3, #10
 8046c02:	b2db      	uxtb	r3, r3
 8046c04:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8046c08:	b2da      	uxtb	r2, r3
 8046c0a:	683b      	ldr	r3, [r7, #0]
 8046c0c:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 8046c0e:	697b      	ldr	r3, [r7, #20]
 8046c10:	0a1b      	lsrs	r3, r3, #8
 8046c12:	b2db      	uxtb	r3, r3
 8046c14:	f003 0303 	and.w	r3, r3, #3
 8046c18:	b2da      	uxtb	r2, r3
 8046c1a:	683b      	ldr	r3, [r7, #0]
 8046c1c:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 8046c1e:	697b      	ldr	r3, [r7, #20]
 8046c20:	091b      	lsrs	r3, r3, #4
 8046c22:	b2db      	uxtb	r3, r3
 8046c24:	f003 030f 	and.w	r3, r3, #15
 8046c28:	b2da      	uxtb	r2, r3
 8046c2a:	683b      	ldr	r3, [r7, #0]
 8046c2c:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 8046c2e:	697b      	ldr	r3, [r7, #20]
 8046c30:	b2db      	uxtb	r3, r3
 8046c32:	f003 030f 	and.w	r3, r3, #15
 8046c36:	b2da      	uxtb	r2, r3
 8046c38:	683b      	ldr	r3, [r7, #0]
 8046c3a:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8046c3c:	69bb      	ldr	r3, [r7, #24]
 8046c3e:	0e1b      	lsrs	r3, r3, #24
 8046c40:	b2da      	uxtb	r2, r3
 8046c42:	683b      	ldr	r3, [r7, #0]
 8046c44:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8046c46:	687b      	ldr	r3, [r7, #4]
 8046c48:	681b      	ldr	r3, [r3, #0]
 8046c4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8046c4e:	4618      	mov	r0, r3
 8046c50:	f001 fc9e 	bl	8048590 <SDMMC_CmdBlockLength>
 8046c54:	64b8      	str	r0, [r7, #72]	; 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8046c56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8046c58:	2b00      	cmp	r3, #0
 8046c5a:	d00d      	beq.n	8046c78 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8046c5c:	687b      	ldr	r3, [r7, #4]
 8046c5e:	681b      	ldr	r3, [r3, #0]
 8046c60:	4a08      	ldr	r2, [pc, #32]	; (8046c84 <HAL_SD_GetCardStatus+0x178>)
 8046c62:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode = errorstate;
 8046c64:	687b      	ldr	r3, [r7, #4]
 8046c66:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8046c68:	635a      	str	r2, [r3, #52]	; 0x34
    hsd->State = HAL_SD_STATE_READY;
 8046c6a:	687b      	ldr	r3, [r7, #4]
 8046c6c:	2201      	movs	r2, #1
 8046c6e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    status = HAL_ERROR;
 8046c72:	2301      	movs	r3, #1
 8046c74:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
  }


  return status;
 8046c78:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8046c7c:	4618      	mov	r0, r3
 8046c7e:	3750      	adds	r7, #80	; 0x50
 8046c80:	46bd      	mov	sp, r7
 8046c82:	bd80      	pop	{r7, pc}
 8046c84:	1fe00fff 	.word	0x1fe00fff

08046c88 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8046c88:	b590      	push	{r4, r7, lr}
 8046c8a:	b08d      	sub	sp, #52	; 0x34
 8046c8c:	af02      	add	r7, sp, #8
 8046c8e:	6078      	str	r0, [r7, #4]
 8046c90:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;
  HAL_StatusTypeDef status = HAL_OK;
 8046c92:	2300      	movs	r3, #0
 8046c94:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8046c98:	687b      	ldr	r3, [r7, #4]
 8046c9a:	2203      	movs	r2, #3
 8046c9c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 8046ca0:	687b      	ldr	r3, [r7, #4]
 8046ca2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046ca4:	2b03      	cmp	r3, #3
 8046ca6:	d02e      	beq.n	8046d06 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 8046ca8:	683b      	ldr	r3, [r7, #0]
 8046caa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8046cae:	d106      	bne.n	8046cbe <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046cb0:	687b      	ldr	r3, [r7, #4]
 8046cb2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046cb4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8046cb8:	687b      	ldr	r3, [r7, #4]
 8046cba:	635a      	str	r2, [r3, #52]	; 0x34
 8046cbc:	e029      	b.n	8046d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 8046cbe:	683b      	ldr	r3, [r7, #0]
 8046cc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8046cc4:	d10a      	bne.n	8046cdc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 8046cc6:	6878      	ldr	r0, [r7, #4]
 8046cc8:	f000 fb62 	bl	8047390 <SD_WideBus_Enable>
 8046ccc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8046cce:	687b      	ldr	r3, [r7, #4]
 8046cd0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046cd2:	6a3b      	ldr	r3, [r7, #32]
 8046cd4:	431a      	orrs	r2, r3
 8046cd6:	687b      	ldr	r3, [r7, #4]
 8046cd8:	635a      	str	r2, [r3, #52]	; 0x34
 8046cda:	e01a      	b.n	8046d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 8046cdc:	683b      	ldr	r3, [r7, #0]
 8046cde:	2b00      	cmp	r3, #0
 8046ce0:	d10a      	bne.n	8046cf8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 8046ce2:	6878      	ldr	r0, [r7, #4]
 8046ce4:	f000 fb9f 	bl	8047426 <SD_WideBus_Disable>
 8046ce8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 8046cea:	687b      	ldr	r3, [r7, #4]
 8046cec:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046cee:	6a3b      	ldr	r3, [r7, #32]
 8046cf0:	431a      	orrs	r2, r3
 8046cf2:	687b      	ldr	r3, [r7, #4]
 8046cf4:	635a      	str	r2, [r3, #52]	; 0x34
 8046cf6:	e00c      	b.n	8046d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8046cf8:	687b      	ldr	r3, [r7, #4]
 8046cfa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046cfc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8046d00:	687b      	ldr	r3, [r7, #4]
 8046d02:	635a      	str	r2, [r3, #52]	; 0x34
 8046d04:	e005      	b.n	8046d12 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8046d06:	687b      	ldr	r3, [r7, #4]
 8046d08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046d0a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8046d0e:	687b      	ldr	r3, [r7, #4]
 8046d10:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8046d12:	687b      	ldr	r3, [r7, #4]
 8046d14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046d16:	2b00      	cmp	r3, #0
 8046d18:	d007      	beq.n	8046d2a <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8046d1a:	687b      	ldr	r3, [r7, #4]
 8046d1c:	681b      	ldr	r3, [r3, #0]
 8046d1e:	4a5e      	ldr	r2, [pc, #376]	; (8046e98 <HAL_SD_ConfigWideBusOperation+0x210>)
 8046d20:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 8046d22:	2301      	movs	r3, #1
 8046d24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8046d28:	e094      	b.n	8046e54 <HAL_SD_ConfigWideBusOperation+0x1cc>
  }
  else
  {
    sdmmc_clk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC1);
 8046d2a:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8046d2e:	f7fd ff0f 	bl	8044b50 <HAL_RCCEx_GetPeriphCLKFreq>
 8046d32:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8046d34:	69fb      	ldr	r3, [r7, #28]
 8046d36:	2b00      	cmp	r3, #0
 8046d38:	f000 8083 	beq.w	8046e42 <HAL_SD_ConfigWideBusOperation+0x1ba>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 8046d3c:	687b      	ldr	r3, [r7, #4]
 8046d3e:	685b      	ldr	r3, [r3, #4]
 8046d40:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8046d42:	687b      	ldr	r3, [r7, #4]
 8046d44:	689b      	ldr	r3, [r3, #8]
 8046d46:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8046d48:	683b      	ldr	r3, [r7, #0]
 8046d4a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8046d4c:	687b      	ldr	r3, [r7, #4]
 8046d4e:	691b      	ldr	r3, [r3, #16]
 8046d50:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8046d52:	687b      	ldr	r3, [r7, #4]
 8046d54:	695a      	ldr	r2, [r3, #20]
 8046d56:	69fb      	ldr	r3, [r7, #28]
 8046d58:	4950      	ldr	r1, [pc, #320]	; (8046e9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8046d5a:	fba1 1303 	umull	r1, r3, r1, r3
 8046d5e:	0e1b      	lsrs	r3, r3, #24
 8046d60:	429a      	cmp	r2, r3
 8046d62:	d303      	bcc.n	8046d6c <HAL_SD_ConfigWideBusOperation+0xe4>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8046d64:	687b      	ldr	r3, [r7, #4]
 8046d66:	695b      	ldr	r3, [r3, #20]
 8046d68:	61bb      	str	r3, [r7, #24]
 8046d6a:	e05a      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 8046d6c:	687b      	ldr	r3, [r7, #4]
 8046d6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046d70:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8046d74:	d103      	bne.n	8046d7e <HAL_SD_ConfigWideBusOperation+0xf6>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8046d76:	687b      	ldr	r3, [r7, #4]
 8046d78:	695b      	ldr	r3, [r3, #20]
 8046d7a:	61bb      	str	r3, [r7, #24]
 8046d7c:	e051      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 8046d7e:	687b      	ldr	r3, [r7, #4]
 8046d80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8046d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8046d86:	d126      	bne.n	8046dd6 <HAL_SD_ConfigWideBusOperation+0x14e>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8046d88:	687b      	ldr	r3, [r7, #4]
 8046d8a:	695b      	ldr	r3, [r3, #20]
 8046d8c:	2b00      	cmp	r3, #0
 8046d8e:	d10e      	bne.n	8046dae <HAL_SD_ConfigWideBusOperation+0x126>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8046d90:	69fb      	ldr	r3, [r7, #28]
 8046d92:	4a43      	ldr	r2, [pc, #268]	; (8046ea0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8046d94:	4293      	cmp	r3, r2
 8046d96:	d906      	bls.n	8046da6 <HAL_SD_ConfigWideBusOperation+0x11e>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8046d98:	69fb      	ldr	r3, [r7, #28]
 8046d9a:	4a40      	ldr	r2, [pc, #256]	; (8046e9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8046d9c:	fba2 2303 	umull	r2, r3, r2, r3
 8046da0:	0e5b      	lsrs	r3, r3, #25
 8046da2:	61bb      	str	r3, [r7, #24]
 8046da4:	e03d      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8046da6:	687b      	ldr	r3, [r7, #4]
 8046da8:	695b      	ldr	r3, [r3, #20]
 8046daa:	61bb      	str	r3, [r7, #24]
 8046dac:	e039      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 8046dae:	687b      	ldr	r3, [r7, #4]
 8046db0:	695b      	ldr	r3, [r3, #20]
 8046db2:	005b      	lsls	r3, r3, #1
 8046db4:	69fa      	ldr	r2, [r7, #28]
 8046db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8046dba:	4a39      	ldr	r2, [pc, #228]	; (8046ea0 <HAL_SD_ConfigWideBusOperation+0x218>)
 8046dbc:	4293      	cmp	r3, r2
 8046dbe:	d906      	bls.n	8046dce <HAL_SD_ConfigWideBusOperation+0x146>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8046dc0:	69fb      	ldr	r3, [r7, #28]
 8046dc2:	4a36      	ldr	r2, [pc, #216]	; (8046e9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8046dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8046dc8:	0e5b      	lsrs	r3, r3, #25
 8046dca:	61bb      	str	r3, [r7, #24]
 8046dcc:	e029      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8046dce:	687b      	ldr	r3, [r7, #4]
 8046dd0:	695b      	ldr	r3, [r3, #20]
 8046dd2:	61bb      	str	r3, [r7, #24]
 8046dd4:	e025      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8046dd6:	687b      	ldr	r3, [r7, #4]
 8046dd8:	695b      	ldr	r3, [r3, #20]
 8046dda:	2b00      	cmp	r3, #0
 8046ddc:	d10e      	bne.n	8046dfc <HAL_SD_ConfigWideBusOperation+0x174>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 8046dde:	69fb      	ldr	r3, [r7, #28]
 8046de0:	4a30      	ldr	r2, [pc, #192]	; (8046ea4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8046de2:	4293      	cmp	r3, r2
 8046de4:	d906      	bls.n	8046df4 <HAL_SD_ConfigWideBusOperation+0x16c>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8046de6:	69fb      	ldr	r3, [r7, #28]
 8046de8:	4a2c      	ldr	r2, [pc, #176]	; (8046e9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8046dea:	fba2 2303 	umull	r2, r3, r2, r3
 8046dee:	0e1b      	lsrs	r3, r3, #24
 8046df0:	61bb      	str	r3, [r7, #24]
 8046df2:	e016      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8046df4:	687b      	ldr	r3, [r7, #4]
 8046df6:	695b      	ldr	r3, [r3, #20]
 8046df8:	61bb      	str	r3, [r7, #24]
 8046dfa:	e012      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 8046dfc:	687b      	ldr	r3, [r7, #4]
 8046dfe:	695b      	ldr	r3, [r3, #20]
 8046e00:	005b      	lsls	r3, r3, #1
 8046e02:	69fa      	ldr	r2, [r7, #28]
 8046e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8046e08:	4a26      	ldr	r2, [pc, #152]	; (8046ea4 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8046e0a:	4293      	cmp	r3, r2
 8046e0c:	d906      	bls.n	8046e1c <HAL_SD_ConfigWideBusOperation+0x194>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 8046e0e:	69fb      	ldr	r3, [r7, #28]
 8046e10:	4a22      	ldr	r2, [pc, #136]	; (8046e9c <HAL_SD_ConfigWideBusOperation+0x214>)
 8046e12:	fba2 2303 	umull	r2, r3, r2, r3
 8046e16:	0e1b      	lsrs	r3, r3, #24
 8046e18:	61bb      	str	r3, [r7, #24]
 8046e1a:	e002      	b.n	8046e22 <HAL_SD_ConfigWideBusOperation+0x19a>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 8046e1c:	687b      	ldr	r3, [r7, #4]
 8046e1e:	695b      	ldr	r3, [r3, #20]
 8046e20:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8046e22:	687b      	ldr	r3, [r7, #4]
 8046e24:	681c      	ldr	r4, [r3, #0]
 8046e26:	466a      	mov	r2, sp
 8046e28:	f107 0314 	add.w	r3, r7, #20
 8046e2c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8046e30:	e882 0003 	stmia.w	r2, {r0, r1}
 8046e34:	f107 0308 	add.w	r3, r7, #8
 8046e38:	cb0e      	ldmia	r3, {r1, r2, r3}
 8046e3a:	4620      	mov	r0, r4
 8046e3c:	f001 fadc 	bl	80483f8 <SDMMC_Init>
 8046e40:	e008      	b.n	8046e54 <HAL_SD_ConfigWideBusOperation+0x1cc>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8046e42:	687b      	ldr	r3, [r7, #4]
 8046e44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8046e46:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8046e4a:	687b      	ldr	r3, [r7, #4]
 8046e4c:	635a      	str	r2, [r3, #52]	; 0x34
      status = HAL_ERROR;
 8046e4e:	2301      	movs	r3, #1
 8046e50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8046e54:	687b      	ldr	r3, [r7, #4]
 8046e56:	681b      	ldr	r3, [r3, #0]
 8046e58:	f44f 7100 	mov.w	r1, #512	; 0x200
 8046e5c:	4618      	mov	r0, r3
 8046e5e:	f001 fb97 	bl	8048590 <SDMMC_CmdBlockLength>
 8046e62:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8046e64:	6a3b      	ldr	r3, [r7, #32]
 8046e66:	2b00      	cmp	r3, #0
 8046e68:	d00c      	beq.n	8046e84 <HAL_SD_ConfigWideBusOperation+0x1fc>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8046e6a:	687b      	ldr	r3, [r7, #4]
 8046e6c:	681b      	ldr	r3, [r3, #0]
 8046e6e:	4a0a      	ldr	r2, [pc, #40]	; (8046e98 <HAL_SD_ConfigWideBusOperation+0x210>)
 8046e70:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8046e72:	687b      	ldr	r3, [r7, #4]
 8046e74:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046e76:	6a3b      	ldr	r3, [r7, #32]
 8046e78:	431a      	orrs	r2, r3
 8046e7a:	687b      	ldr	r3, [r7, #4]
 8046e7c:	635a      	str	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 8046e7e:	2301      	movs	r3, #1
 8046e80:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8046e84:	687b      	ldr	r3, [r7, #4]
 8046e86:	2201      	movs	r2, #1
 8046e88:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30

  return status;
 8046e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8046e90:	4618      	mov	r0, r3
 8046e92:	372c      	adds	r7, #44	; 0x2c
 8046e94:	46bd      	mov	sp, r7
 8046e96:	bd90      	pop	{r4, r7, pc}
 8046e98:	1fe00fff 	.word	0x1fe00fff
 8046e9c:	55e63b89 	.word	0x55e63b89
 8046ea0:	02faf080 	.word	0x02faf080
 8046ea4:	017d7840 	.word	0x017d7840

08046ea8 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8046ea8:	b580      	push	{r7, lr}
 8046eaa:	b086      	sub	sp, #24
 8046eac:	af00      	add	r7, sp, #0
 8046eae:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8046eb0:	2300      	movs	r3, #0
 8046eb2:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 8046eb4:	f107 030c 	add.w	r3, r7, #12
 8046eb8:	4619      	mov	r1, r3
 8046eba:	6878      	ldr	r0, [r7, #4]
 8046ebc:	f000 fa40 	bl	8047340 <SD_SendStatus>
 8046ec0:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8046ec2:	697b      	ldr	r3, [r7, #20]
 8046ec4:	2b00      	cmp	r3, #0
 8046ec6:	d005      	beq.n	8046ed4 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8046ec8:	687b      	ldr	r3, [r7, #4]
 8046eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8046ecc:	697b      	ldr	r3, [r7, #20]
 8046ece:	431a      	orrs	r2, r3
 8046ed0:	687b      	ldr	r3, [r7, #4]
 8046ed2:	635a      	str	r2, [r3, #52]	; 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 8046ed4:	68fb      	ldr	r3, [r7, #12]
 8046ed6:	0a5b      	lsrs	r3, r3, #9
 8046ed8:	f003 030f 	and.w	r3, r3, #15
 8046edc:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8046ede:	693b      	ldr	r3, [r7, #16]
}
 8046ee0:	4618      	mov	r0, r3
 8046ee2:	3718      	adds	r7, #24
 8046ee4:	46bd      	mov	sp, r7
 8046ee6:	bd80      	pop	{r7, pc}

08046ee8 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8046ee8:	b580      	push	{r7, lr}
 8046eea:	b090      	sub	sp, #64	; 0x40
 8046eec:	af00      	add	r7, sp, #0
 8046eee:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8046ef0:	2300      	movs	r3, #0
 8046ef2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 8046ef4:	f7fa fbe2 	bl	80416bc <HAL_GetTick>
 8046ef8:	63f8      	str	r0, [r7, #60]	; 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8046efa:	687b      	ldr	r3, [r7, #4]
 8046efc:	681b      	ldr	r3, [r3, #0]
 8046efe:	4618      	mov	r0, r3
 8046f00:	f001 fac2 	bl	8048488 <SDMMC_GetPowerState>
 8046f04:	4603      	mov	r3, r0
 8046f06:	2b00      	cmp	r3, #0
 8046f08:	d102      	bne.n	8046f10 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8046f0a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8046f0e:	e0b5      	b.n	804707c <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8046f10:	687b      	ldr	r3, [r7, #4]
 8046f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046f14:	2b03      	cmp	r3, #3
 8046f16:	d02e      	beq.n	8046f76 <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8046f18:	687b      	ldr	r3, [r7, #4]
 8046f1a:	681b      	ldr	r3, [r3, #0]
 8046f1c:	4618      	mov	r0, r3
 8046f1e:	f001 fc43 	bl	80487a8 <SDMMC_CmdSendCID>
 8046f22:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8046f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046f26:	2b00      	cmp	r3, #0
 8046f28:	d001      	beq.n	8046f2e <SD_InitCard+0x46>
    {
      return errorstate;
 8046f2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046f2c:	e0a6      	b.n	804707c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8046f2e:	687b      	ldr	r3, [r7, #4]
 8046f30:	681b      	ldr	r3, [r3, #0]
 8046f32:	2100      	movs	r1, #0
 8046f34:	4618      	mov	r0, r3
 8046f36:	f001 faec 	bl	8048512 <SDMMC_GetResponse>
 8046f3a:	4602      	mov	r2, r0
 8046f3c:	687b      	ldr	r3, [r7, #4]
 8046f3e:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8046f40:	687b      	ldr	r3, [r7, #4]
 8046f42:	681b      	ldr	r3, [r3, #0]
 8046f44:	2104      	movs	r1, #4
 8046f46:	4618      	mov	r0, r3
 8046f48:	f001 fae3 	bl	8048512 <SDMMC_GetResponse>
 8046f4c:	4602      	mov	r2, r0
 8046f4e:	687b      	ldr	r3, [r7, #4]
 8046f50:	671a      	str	r2, [r3, #112]	; 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8046f52:	687b      	ldr	r3, [r7, #4]
 8046f54:	681b      	ldr	r3, [r3, #0]
 8046f56:	2108      	movs	r1, #8
 8046f58:	4618      	mov	r0, r3
 8046f5a:	f001 fada 	bl	8048512 <SDMMC_GetResponse>
 8046f5e:	4602      	mov	r2, r0
 8046f60:	687b      	ldr	r3, [r7, #4]
 8046f62:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8046f64:	687b      	ldr	r3, [r7, #4]
 8046f66:	681b      	ldr	r3, [r3, #0]
 8046f68:	210c      	movs	r1, #12
 8046f6a:	4618      	mov	r0, r3
 8046f6c:	f001 fad1 	bl	8048512 <SDMMC_GetResponse>
 8046f70:	4602      	mov	r2, r0
 8046f72:	687b      	ldr	r3, [r7, #4]
 8046f74:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8046f76:	687b      	ldr	r3, [r7, #4]
 8046f78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046f7a:	2b03      	cmp	r3, #3
 8046f7c:	d01d      	beq.n	8046fba <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 8046f7e:	e019      	b.n	8046fb4 <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8046f80:	687b      	ldr	r3, [r7, #4]
 8046f82:	681b      	ldr	r3, [r3, #0]
 8046f84:	f107 020a 	add.w	r2, r7, #10
 8046f88:	4611      	mov	r1, r2
 8046f8a:	4618      	mov	r0, r3
 8046f8c:	f001 fc4b 	bl	8048826 <SDMMC_CmdSetRelAdd>
 8046f90:	63b8      	str	r0, [r7, #56]	; 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 8046f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046f94:	2b00      	cmp	r3, #0
 8046f96:	d001      	beq.n	8046f9c <SD_InitCard+0xb4>
      {
        return errorstate;
 8046f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046f9a:	e06f      	b.n	804707c <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8046f9c:	f7fa fb8e 	bl	80416bc <HAL_GetTick>
 8046fa0:	4602      	mov	r2, r0
 8046fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8046fa4:	1ad3      	subs	r3, r2, r3
 8046fa6:	f241 3287 	movw	r2, #4999	; 0x1387
 8046faa:	4293      	cmp	r3, r2
 8046fac:	d902      	bls.n	8046fb4 <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8046fae:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8046fb2:	e063      	b.n	804707c <SD_InitCard+0x194>
    while (sd_rca == 0U)
 8046fb4:	897b      	ldrh	r3, [r7, #10]
 8046fb6:	2b00      	cmp	r3, #0
 8046fb8:	d0e2      	beq.n	8046f80 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8046fba:	687b      	ldr	r3, [r7, #4]
 8046fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8046fbe:	2b03      	cmp	r3, #3
 8046fc0:	d036      	beq.n	8047030 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8046fc2:	897b      	ldrh	r3, [r7, #10]
 8046fc4:	461a      	mov	r2, r3
 8046fc6:	687b      	ldr	r3, [r7, #4]
 8046fc8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8046fca:	687b      	ldr	r3, [r7, #4]
 8046fcc:	681a      	ldr	r2, [r3, #0]
 8046fce:	687b      	ldr	r3, [r7, #4]
 8046fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8046fd2:	041b      	lsls	r3, r3, #16
 8046fd4:	4619      	mov	r1, r3
 8046fd6:	4610      	mov	r0, r2
 8046fd8:	f001 fc05 	bl	80487e6 <SDMMC_CmdSendCSD>
 8046fdc:	63b8      	str	r0, [r7, #56]	; 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8046fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046fe0:	2b00      	cmp	r3, #0
 8046fe2:	d001      	beq.n	8046fe8 <SD_InitCard+0x100>
    {
      return errorstate;
 8046fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8046fe6:	e049      	b.n	804707c <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8046fe8:	687b      	ldr	r3, [r7, #4]
 8046fea:	681b      	ldr	r3, [r3, #0]
 8046fec:	2100      	movs	r1, #0
 8046fee:	4618      	mov	r0, r3
 8046ff0:	f001 fa8f 	bl	8048512 <SDMMC_GetResponse>
 8046ff4:	4602      	mov	r2, r0
 8046ff6:	687b      	ldr	r3, [r7, #4]
 8046ff8:	65da      	str	r2, [r3, #92]	; 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8046ffa:	687b      	ldr	r3, [r7, #4]
 8046ffc:	681b      	ldr	r3, [r3, #0]
 8046ffe:	2104      	movs	r1, #4
 8047000:	4618      	mov	r0, r3
 8047002:	f001 fa86 	bl	8048512 <SDMMC_GetResponse>
 8047006:	4602      	mov	r2, r0
 8047008:	687b      	ldr	r3, [r7, #4]
 804700a:	661a      	str	r2, [r3, #96]	; 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 804700c:	687b      	ldr	r3, [r7, #4]
 804700e:	681b      	ldr	r3, [r3, #0]
 8047010:	2108      	movs	r1, #8
 8047012:	4618      	mov	r0, r3
 8047014:	f001 fa7d 	bl	8048512 <SDMMC_GetResponse>
 8047018:	4602      	mov	r2, r0
 804701a:	687b      	ldr	r3, [r7, #4]
 804701c:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 804701e:	687b      	ldr	r3, [r7, #4]
 8047020:	681b      	ldr	r3, [r3, #0]
 8047022:	210c      	movs	r1, #12
 8047024:	4618      	mov	r0, r3
 8047026:	f001 fa74 	bl	8048512 <SDMMC_GetResponse>
 804702a:	4602      	mov	r2, r0
 804702c:	687b      	ldr	r3, [r7, #4]
 804702e:	669a      	str	r2, [r3, #104]	; 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8047030:	687b      	ldr	r3, [r7, #4]
 8047032:	681b      	ldr	r3, [r3, #0]
 8047034:	2104      	movs	r1, #4
 8047036:	4618      	mov	r0, r3
 8047038:	f001 fa6b 	bl	8048512 <SDMMC_GetResponse>
 804703c:	4603      	mov	r3, r0
 804703e:	0d1a      	lsrs	r2, r3, #20
 8047040:	687b      	ldr	r3, [r7, #4]
 8047042:	641a      	str	r2, [r3, #64]	; 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8047044:	f107 030c 	add.w	r3, r7, #12
 8047048:	4619      	mov	r1, r3
 804704a:	6878      	ldr	r0, [r7, #4]
 804704c:	f7ff fbba 	bl	80467c4 <HAL_SD_GetCardCSD>
 8047050:	4603      	mov	r3, r0
 8047052:	2b00      	cmp	r3, #0
 8047054:	d002      	beq.n	804705c <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8047056:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 804705a:	e00f      	b.n	804707c <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 804705c:	687b      	ldr	r3, [r7, #4]
 804705e:	681a      	ldr	r2, [r3, #0]
 8047060:	687b      	ldr	r3, [r7, #4]
 8047062:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8047064:	041b      	lsls	r3, r3, #16
 8047066:	4619      	mov	r1, r3
 8047068:	4610      	mov	r0, r2
 804706a:	f001 fab4 	bl	80485d6 <SDMMC_CmdSelDesel>
 804706e:	63b8      	str	r0, [r7, #56]	; 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 8047070:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047072:	2b00      	cmp	r3, #0
 8047074:	d001      	beq.n	804707a <SD_InitCard+0x192>
  {
    return errorstate;
 8047076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8047078:	e000      	b.n	804707c <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 804707a:	2300      	movs	r3, #0
}
 804707c:	4618      	mov	r0, r3
 804707e:	3740      	adds	r7, #64	; 0x40
 8047080:	46bd      	mov	sp, r7
 8047082:	bd80      	pop	{r7, pc}

08047084 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8047084:	b580      	push	{r7, lr}
 8047086:	b086      	sub	sp, #24
 8047088:	af00      	add	r7, sp, #0
 804708a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 804708c:	2300      	movs	r3, #0
 804708e:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8047090:	2300      	movs	r3, #0
 8047092:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 8047094:	2300      	movs	r3, #0
 8047096:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8047098:	687b      	ldr	r3, [r7, #4]
 804709a:	681b      	ldr	r3, [r3, #0]
 804709c:	4618      	mov	r0, r3
 804709e:	f001 fabd 	bl	804861c <SDMMC_CmdGoIdleState>
 80470a2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80470a4:	68fb      	ldr	r3, [r7, #12]
 80470a6:	2b00      	cmp	r3, #0
 80470a8:	d001      	beq.n	80470ae <SD_PowerON+0x2a>
  {
    return errorstate;
 80470aa:	68fb      	ldr	r3, [r7, #12]
 80470ac:	e072      	b.n	8047194 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 80470ae:	687b      	ldr	r3, [r7, #4]
 80470b0:	681b      	ldr	r3, [r3, #0]
 80470b2:	4618      	mov	r0, r3
 80470b4:	f001 fad0 	bl	8048658 <SDMMC_CmdOperCond>
 80470b8:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 80470ba:	68fb      	ldr	r3, [r7, #12]
 80470bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80470c0:	d10d      	bne.n	80470de <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 80470c2:	687b      	ldr	r3, [r7, #4]
 80470c4:	2200      	movs	r2, #0
 80470c6:	63da      	str	r2, [r3, #60]	; 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 80470c8:	687b      	ldr	r3, [r7, #4]
 80470ca:	681b      	ldr	r3, [r3, #0]
 80470cc:	4618      	mov	r0, r3
 80470ce:	f001 faa5 	bl	804861c <SDMMC_CmdGoIdleState>
 80470d2:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80470d4:	68fb      	ldr	r3, [r7, #12]
 80470d6:	2b00      	cmp	r3, #0
 80470d8:	d004      	beq.n	80470e4 <SD_PowerON+0x60>
    {
      return errorstate;
 80470da:	68fb      	ldr	r3, [r7, #12]
 80470dc:	e05a      	b.n	8047194 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 80470de:	687b      	ldr	r3, [r7, #4]
 80470e0:	2201      	movs	r2, #1
 80470e2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 80470e4:	687b      	ldr	r3, [r7, #4]
 80470e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80470e8:	2b01      	cmp	r3, #1
 80470ea:	d137      	bne.n	804715c <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 80470ec:	687b      	ldr	r3, [r7, #4]
 80470ee:	681b      	ldr	r3, [r3, #0]
 80470f0:	2100      	movs	r1, #0
 80470f2:	4618      	mov	r0, r3
 80470f4:	f001 fad0 	bl	8048698 <SDMMC_CmdAppCommand>
 80470f8:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 80470fa:	68fb      	ldr	r3, [r7, #12]
 80470fc:	2b00      	cmp	r3, #0
 80470fe:	d02d      	beq.n	804715c <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8047100:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8047104:	e046      	b.n	8047194 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8047106:	687b      	ldr	r3, [r7, #4]
 8047108:	681b      	ldr	r3, [r3, #0]
 804710a:	2100      	movs	r1, #0
 804710c:	4618      	mov	r0, r3
 804710e:	f001 fac3 	bl	8048698 <SDMMC_CmdAppCommand>
 8047112:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8047114:	68fb      	ldr	r3, [r7, #12]
 8047116:	2b00      	cmp	r3, #0
 8047118:	d001      	beq.n	804711e <SD_PowerON+0x9a>
    {
      return errorstate;
 804711a:	68fb      	ldr	r3, [r7, #12]
 804711c:	e03a      	b.n	8047194 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 804711e:	687b      	ldr	r3, [r7, #4]
 8047120:	681b      	ldr	r3, [r3, #0]
 8047122:	491e      	ldr	r1, [pc, #120]	; (804719c <SD_PowerON+0x118>)
 8047124:	4618      	mov	r0, r3
 8047126:	f001 fada 	bl	80486de <SDMMC_CmdAppOperCommand>
 804712a:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 804712c:	68fb      	ldr	r3, [r7, #12]
 804712e:	2b00      	cmp	r3, #0
 8047130:	d002      	beq.n	8047138 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8047132:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8047136:	e02d      	b.n	8047194 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8047138:	687b      	ldr	r3, [r7, #4]
 804713a:	681b      	ldr	r3, [r3, #0]
 804713c:	2100      	movs	r1, #0
 804713e:	4618      	mov	r0, r3
 8047140:	f001 f9e7 	bl	8048512 <SDMMC_GetResponse>
 8047144:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8047146:	697b      	ldr	r3, [r7, #20]
 8047148:	0fdb      	lsrs	r3, r3, #31
 804714a:	2b01      	cmp	r3, #1
 804714c:	d101      	bne.n	8047152 <SD_PowerON+0xce>
 804714e:	2301      	movs	r3, #1
 8047150:	e000      	b.n	8047154 <SD_PowerON+0xd0>
 8047152:	2300      	movs	r3, #0
 8047154:	613b      	str	r3, [r7, #16]

    count++;
 8047156:	68bb      	ldr	r3, [r7, #8]
 8047158:	3301      	adds	r3, #1
 804715a:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 804715c:	68bb      	ldr	r3, [r7, #8]
 804715e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8047162:	4293      	cmp	r3, r2
 8047164:	d802      	bhi.n	804716c <SD_PowerON+0xe8>
 8047166:	693b      	ldr	r3, [r7, #16]
 8047168:	2b00      	cmp	r3, #0
 804716a:	d0cc      	beq.n	8047106 <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 804716c:	68bb      	ldr	r3, [r7, #8]
 804716e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8047172:	4293      	cmp	r3, r2
 8047174:	d902      	bls.n	804717c <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8047176:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 804717a:	e00b      	b.n	8047194 <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 804717c:	687b      	ldr	r3, [r7, #4]
 804717e:	2200      	movs	r2, #0
 8047180:	639a      	str	r2, [r3, #56]	; 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 8047182:	697b      	ldr	r3, [r7, #20]
 8047184:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8047188:	2b00      	cmp	r3, #0
 804718a:	d002      	beq.n	8047192 <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 804718c:	687b      	ldr	r3, [r7, #4]
 804718e:	2201      	movs	r2, #1
 8047190:	639a      	str	r2, [r3, #56]	; 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8047192:	2300      	movs	r3, #0
}
 8047194:	4618      	mov	r0, r3
 8047196:	3718      	adds	r7, #24
 8047198:	46bd      	mov	sp, r7
 804719a:	bd80      	pop	{r7, pc}
 804719c:	c1100000 	.word	0xc1100000

080471a0 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 80471a0:	b580      	push	{r7, lr}
 80471a2:	b08c      	sub	sp, #48	; 0x30
 80471a4:	af00      	add	r7, sp, #0
 80471a6:	6078      	str	r0, [r7, #4]
 80471a8:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80471aa:	f7fa fa87 	bl	80416bc <HAL_GetTick>
 80471ae:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 80471b0:	683b      	ldr	r3, [r7, #0]
 80471b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80471b4:	687b      	ldr	r3, [r7, #4]
 80471b6:	681b      	ldr	r3, [r3, #0]
 80471b8:	2100      	movs	r1, #0
 80471ba:	4618      	mov	r0, r3
 80471bc:	f001 f9a9 	bl	8048512 <SDMMC_GetResponse>
 80471c0:	4603      	mov	r3, r0
 80471c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80471c6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80471ca:	d102      	bne.n	80471d2 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80471cc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80471d0:	e0b0      	b.n	8047334 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 80471d2:	687b      	ldr	r3, [r7, #4]
 80471d4:	681b      	ldr	r3, [r3, #0]
 80471d6:	2140      	movs	r1, #64	; 0x40
 80471d8:	4618      	mov	r0, r3
 80471da:	f001 f9d9 	bl	8048590 <SDMMC_CmdBlockLength>
 80471de:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 80471e0:	6a3b      	ldr	r3, [r7, #32]
 80471e2:	2b00      	cmp	r3, #0
 80471e4:	d005      	beq.n	80471f2 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 80471e6:	687b      	ldr	r3, [r7, #4]
 80471e8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80471ea:	687b      	ldr	r3, [r7, #4]
 80471ec:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 80471ee:	6a3b      	ldr	r3, [r7, #32]
 80471f0:	e0a0      	b.n	8047334 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80471f2:	687b      	ldr	r3, [r7, #4]
 80471f4:	681a      	ldr	r2, [r3, #0]
 80471f6:	687b      	ldr	r3, [r7, #4]
 80471f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80471fa:	041b      	lsls	r3, r3, #16
 80471fc:	4619      	mov	r1, r3
 80471fe:	4610      	mov	r0, r2
 8047200:	f001 fa4a 	bl	8048698 <SDMMC_CmdAppCommand>
 8047204:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8047206:	6a3b      	ldr	r3, [r7, #32]
 8047208:	2b00      	cmp	r3, #0
 804720a:	d005      	beq.n	8047218 <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 804720c:	687b      	ldr	r3, [r7, #4]
 804720e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8047210:	687b      	ldr	r3, [r7, #4]
 8047212:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 8047214:	6a3b      	ldr	r3, [r7, #32]
 8047216:	e08d      	b.n	8047334 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8047218:	f04f 33ff 	mov.w	r3, #4294967295
 804721c:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 804721e:	2340      	movs	r3, #64	; 0x40
 8047220:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8047222:	2360      	movs	r3, #96	; 0x60
 8047224:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8047226:	2302      	movs	r3, #2
 8047228:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 804722a:	2300      	movs	r3, #0
 804722c:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 804722e:	2301      	movs	r3, #1
 8047230:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8047232:	687b      	ldr	r3, [r7, #4]
 8047234:	681b      	ldr	r3, [r3, #0]
 8047236:	f107 0208 	add.w	r2, r7, #8
 804723a:	4611      	mov	r1, r2
 804723c:	4618      	mov	r0, r3
 804723e:	f001 f97b 	bl	8048538 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8047242:	687b      	ldr	r3, [r7, #4]
 8047244:	681b      	ldr	r3, [r3, #0]
 8047246:	4618      	mov	r0, r3
 8047248:	f001 fb32 	bl	80488b0 <SDMMC_CmdStatusRegister>
 804724c:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 804724e:	6a3b      	ldr	r3, [r7, #32]
 8047250:	2b00      	cmp	r3, #0
 8047252:	d02b      	beq.n	80472ac <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8047254:	687b      	ldr	r3, [r7, #4]
 8047256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8047258:	687b      	ldr	r3, [r7, #4]
 804725a:	635a      	str	r2, [r3, #52]	; 0x34
    return errorstate;
 804725c:	6a3b      	ldr	r3, [r7, #32]
 804725e:	e069      	b.n	8047334 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8047260:	687b      	ldr	r3, [r7, #4]
 8047262:	681b      	ldr	r3, [r3, #0]
 8047264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047266:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 804726a:	2b00      	cmp	r3, #0
 804726c:	d013      	beq.n	8047296 <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 804726e:	2300      	movs	r3, #0
 8047270:	62fb      	str	r3, [r7, #44]	; 0x2c
 8047272:	e00d      	b.n	8047290 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8047274:	687b      	ldr	r3, [r7, #4]
 8047276:	681b      	ldr	r3, [r3, #0]
 8047278:	4618      	mov	r0, r3
 804727a:	f001 f8e7 	bl	804844c <SDMMC_ReadFIFO>
 804727e:	4602      	mov	r2, r0
 8047280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047282:	601a      	str	r2, [r3, #0]
        pData++;
 8047284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047286:	3304      	adds	r3, #4
 8047288:	62bb      	str	r3, [r7, #40]	; 0x28
      for (count = 0U; count < 8U; count++)
 804728a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804728c:	3301      	adds	r3, #1
 804728e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8047290:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047292:	2b07      	cmp	r3, #7
 8047294:	d9ee      	bls.n	8047274 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8047296:	f7fa fa11 	bl	80416bc <HAL_GetTick>
 804729a:	4602      	mov	r2, r0
 804729c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804729e:	1ad3      	subs	r3, r2, r3
 80472a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80472a4:	d102      	bne.n	80472ac <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 80472a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80472aa:	e043      	b.n	8047334 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 80472ac:	687b      	ldr	r3, [r7, #4]
 80472ae:	681b      	ldr	r3, [r3, #0]
 80472b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80472b2:	f403 7395 	and.w	r3, r3, #298	; 0x12a
 80472b6:	2b00      	cmp	r3, #0
 80472b8:	d0d2      	beq.n	8047260 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80472ba:	687b      	ldr	r3, [r7, #4]
 80472bc:	681b      	ldr	r3, [r3, #0]
 80472be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80472c0:	f003 0308 	and.w	r3, r3, #8
 80472c4:	2b00      	cmp	r3, #0
 80472c6:	d001      	beq.n	80472cc <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 80472c8:	2308      	movs	r3, #8
 80472ca:	e033      	b.n	8047334 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80472cc:	687b      	ldr	r3, [r7, #4]
 80472ce:	681b      	ldr	r3, [r3, #0]
 80472d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80472d2:	f003 0302 	and.w	r3, r3, #2
 80472d6:	2b00      	cmp	r3, #0
 80472d8:	d001      	beq.n	80472de <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80472da:	2302      	movs	r3, #2
 80472dc:	e02a      	b.n	8047334 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80472de:	687b      	ldr	r3, [r7, #4]
 80472e0:	681b      	ldr	r3, [r3, #0]
 80472e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80472e4:	f003 0320 	and.w	r3, r3, #32
 80472e8:	2b00      	cmp	r3, #0
 80472ea:	d017      	beq.n	804731c <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 80472ec:	2320      	movs	r3, #32
 80472ee:	e021      	b.n	8047334 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 80472f0:	687b      	ldr	r3, [r7, #4]
 80472f2:	681b      	ldr	r3, [r3, #0]
 80472f4:	4618      	mov	r0, r3
 80472f6:	f001 f8a9 	bl	804844c <SDMMC_ReadFIFO>
 80472fa:	4602      	mov	r2, r0
 80472fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80472fe:	601a      	str	r2, [r3, #0]
    pData++;
 8047300:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047302:	3304      	adds	r3, #4
 8047304:	62bb      	str	r3, [r7, #40]	; 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8047306:	f7fa f9d9 	bl	80416bc <HAL_GetTick>
 804730a:	4602      	mov	r2, r0
 804730c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804730e:	1ad3      	subs	r3, r2, r3
 8047310:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047314:	d102      	bne.n	804731c <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8047316:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 804731a:	e00b      	b.n	8047334 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 804731c:	687b      	ldr	r3, [r7, #4]
 804731e:	681b      	ldr	r3, [r3, #0]
 8047320:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047322:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8047326:	2b00      	cmp	r3, #0
 8047328:	d1e2      	bne.n	80472f0 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 804732a:	687b      	ldr	r3, [r7, #4]
 804732c:	681b      	ldr	r3, [r3, #0]
 804732e:	4a03      	ldr	r2, [pc, #12]	; (804733c <SD_SendSDStatus+0x19c>)
 8047330:	639a      	str	r2, [r3, #56]	; 0x38

  return HAL_SD_ERROR_NONE;
 8047332:	2300      	movs	r3, #0
}
 8047334:	4618      	mov	r0, r3
 8047336:	3730      	adds	r7, #48	; 0x30
 8047338:	46bd      	mov	sp, r7
 804733a:	bd80      	pop	{r7, pc}
 804733c:	18000f3a 	.word	0x18000f3a

08047340 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8047340:	b580      	push	{r7, lr}
 8047342:	b084      	sub	sp, #16
 8047344:	af00      	add	r7, sp, #0
 8047346:	6078      	str	r0, [r7, #4]
 8047348:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 804734a:	683b      	ldr	r3, [r7, #0]
 804734c:	2b00      	cmp	r3, #0
 804734e:	d102      	bne.n	8047356 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8047350:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8047354:	e018      	b.n	8047388 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8047356:	687b      	ldr	r3, [r7, #4]
 8047358:	681a      	ldr	r2, [r3, #0]
 804735a:	687b      	ldr	r3, [r7, #4]
 804735c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804735e:	041b      	lsls	r3, r3, #16
 8047360:	4619      	mov	r1, r3
 8047362:	4610      	mov	r0, r2
 8047364:	f001 fa81 	bl	804886a <SDMMC_CmdSendStatus>
 8047368:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 804736a:	68fb      	ldr	r3, [r7, #12]
 804736c:	2b00      	cmp	r3, #0
 804736e:	d001      	beq.n	8047374 <SD_SendStatus+0x34>
  {
    return errorstate;
 8047370:	68fb      	ldr	r3, [r7, #12]
 8047372:	e009      	b.n	8047388 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8047374:	687b      	ldr	r3, [r7, #4]
 8047376:	681b      	ldr	r3, [r3, #0]
 8047378:	2100      	movs	r1, #0
 804737a:	4618      	mov	r0, r3
 804737c:	f001 f8c9 	bl	8048512 <SDMMC_GetResponse>
 8047380:	4602      	mov	r2, r0
 8047382:	683b      	ldr	r3, [r7, #0]
 8047384:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8047386:	2300      	movs	r3, #0
}
 8047388:	4618      	mov	r0, r3
 804738a:	3710      	adds	r7, #16
 804738c:	46bd      	mov	sp, r7
 804738e:	bd80      	pop	{r7, pc}

08047390 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8047390:	b580      	push	{r7, lr}
 8047392:	b086      	sub	sp, #24
 8047394:	af00      	add	r7, sp, #0
 8047396:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8047398:	2300      	movs	r3, #0
 804739a:	60fb      	str	r3, [r7, #12]
 804739c:	2300      	movs	r3, #0
 804739e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 80473a0:	687b      	ldr	r3, [r7, #4]
 80473a2:	681b      	ldr	r3, [r3, #0]
 80473a4:	2100      	movs	r1, #0
 80473a6:	4618      	mov	r0, r3
 80473a8:	f001 f8b3 	bl	8048512 <SDMMC_GetResponse>
 80473ac:	4603      	mov	r3, r0
 80473ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80473b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80473b6:	d102      	bne.n	80473be <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 80473b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80473bc:	e02f      	b.n	804741e <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 80473be:	f107 030c 	add.w	r3, r7, #12
 80473c2:	4619      	mov	r1, r3
 80473c4:	6878      	ldr	r0, [r7, #4]
 80473c6:	f000 f879 	bl	80474bc <SD_FindSCR>
 80473ca:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 80473cc:	697b      	ldr	r3, [r7, #20]
 80473ce:	2b00      	cmp	r3, #0
 80473d0:	d001      	beq.n	80473d6 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 80473d2:	697b      	ldr	r3, [r7, #20]
 80473d4:	e023      	b.n	804741e <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 80473d6:	693b      	ldr	r3, [r7, #16]
 80473d8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80473dc:	2b00      	cmp	r3, #0
 80473de:	d01c      	beq.n	804741a <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 80473e0:	687b      	ldr	r3, [r7, #4]
 80473e2:	681a      	ldr	r2, [r3, #0]
 80473e4:	687b      	ldr	r3, [r7, #4]
 80473e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80473e8:	041b      	lsls	r3, r3, #16
 80473ea:	4619      	mov	r1, r3
 80473ec:	4610      	mov	r0, r2
 80473ee:	f001 f953 	bl	8048698 <SDMMC_CmdAppCommand>
 80473f2:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80473f4:	697b      	ldr	r3, [r7, #20]
 80473f6:	2b00      	cmp	r3, #0
 80473f8:	d001      	beq.n	80473fe <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 80473fa:	697b      	ldr	r3, [r7, #20]
 80473fc:	e00f      	b.n	804741e <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 80473fe:	687b      	ldr	r3, [r7, #4]
 8047400:	681b      	ldr	r3, [r3, #0]
 8047402:	2102      	movs	r1, #2
 8047404:	4618      	mov	r0, r3
 8047406:	f001 f98a 	bl	804871e <SDMMC_CmdBusWidth>
 804740a:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 804740c:	697b      	ldr	r3, [r7, #20]
 804740e:	2b00      	cmp	r3, #0
 8047410:	d001      	beq.n	8047416 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8047412:	697b      	ldr	r3, [r7, #20]
 8047414:	e003      	b.n	804741e <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8047416:	2300      	movs	r3, #0
 8047418:	e001      	b.n	804741e <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 804741a:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 804741e:	4618      	mov	r0, r3
 8047420:	3718      	adds	r7, #24
 8047422:	46bd      	mov	sp, r7
 8047424:	bd80      	pop	{r7, pc}

08047426 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8047426:	b580      	push	{r7, lr}
 8047428:	b086      	sub	sp, #24
 804742a:	af00      	add	r7, sp, #0
 804742c:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 804742e:	2300      	movs	r3, #0
 8047430:	60fb      	str	r3, [r7, #12]
 8047432:	2300      	movs	r3, #0
 8047434:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8047436:	687b      	ldr	r3, [r7, #4]
 8047438:	681b      	ldr	r3, [r3, #0]
 804743a:	2100      	movs	r1, #0
 804743c:	4618      	mov	r0, r3
 804743e:	f001 f868 	bl	8048512 <SDMMC_GetResponse>
 8047442:	4603      	mov	r3, r0
 8047444:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8047448:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804744c:	d102      	bne.n	8047454 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 804744e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8047452:	e02f      	b.n	80474b4 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8047454:	f107 030c 	add.w	r3, r7, #12
 8047458:	4619      	mov	r1, r3
 804745a:	6878      	ldr	r0, [r7, #4]
 804745c:	f000 f82e 	bl	80474bc <SD_FindSCR>
 8047460:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8047462:	697b      	ldr	r3, [r7, #20]
 8047464:	2b00      	cmp	r3, #0
 8047466:	d001      	beq.n	804746c <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8047468:	697b      	ldr	r3, [r7, #20]
 804746a:	e023      	b.n	80474b4 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 804746c:	693b      	ldr	r3, [r7, #16]
 804746e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8047472:	2b00      	cmp	r3, #0
 8047474:	d01c      	beq.n	80474b0 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8047476:	687b      	ldr	r3, [r7, #4]
 8047478:	681a      	ldr	r2, [r3, #0]
 804747a:	687b      	ldr	r3, [r7, #4]
 804747c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 804747e:	041b      	lsls	r3, r3, #16
 8047480:	4619      	mov	r1, r3
 8047482:	4610      	mov	r0, r2
 8047484:	f001 f908 	bl	8048698 <SDMMC_CmdAppCommand>
 8047488:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 804748a:	697b      	ldr	r3, [r7, #20]
 804748c:	2b00      	cmp	r3, #0
 804748e:	d001      	beq.n	8047494 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8047490:	697b      	ldr	r3, [r7, #20]
 8047492:	e00f      	b.n	80474b4 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8047494:	687b      	ldr	r3, [r7, #4]
 8047496:	681b      	ldr	r3, [r3, #0]
 8047498:	2100      	movs	r1, #0
 804749a:	4618      	mov	r0, r3
 804749c:	f001 f93f 	bl	804871e <SDMMC_CmdBusWidth>
 80474a0:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 80474a2:	697b      	ldr	r3, [r7, #20]
 80474a4:	2b00      	cmp	r3, #0
 80474a6:	d001      	beq.n	80474ac <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 80474a8:	697b      	ldr	r3, [r7, #20]
 80474aa:	e003      	b.n	80474b4 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 80474ac:	2300      	movs	r3, #0
 80474ae:	e001      	b.n	80474b4 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 80474b0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 80474b4:	4618      	mov	r0, r3
 80474b6:	3718      	adds	r7, #24
 80474b8:	46bd      	mov	sp, r7
 80474ba:	bd80      	pop	{r7, pc}

080474bc <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 80474bc:	b580      	push	{r7, lr}
 80474be:	b08e      	sub	sp, #56	; 0x38
 80474c0:	af00      	add	r7, sp, #0
 80474c2:	6078      	str	r0, [r7, #4]
 80474c4:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 80474c6:	f7fa f8f9 	bl	80416bc <HAL_GetTick>
 80474ca:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 80474cc:	2300      	movs	r3, #0
 80474ce:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 80474d0:	2300      	movs	r3, #0
 80474d2:	60bb      	str	r3, [r7, #8]
 80474d4:	2300      	movs	r3, #0
 80474d6:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 80474d8:	683b      	ldr	r3, [r7, #0]
 80474da:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 80474dc:	687b      	ldr	r3, [r7, #4]
 80474de:	681b      	ldr	r3, [r3, #0]
 80474e0:	2108      	movs	r1, #8
 80474e2:	4618      	mov	r0, r3
 80474e4:	f001 f854 	bl	8048590 <SDMMC_CmdBlockLength>
 80474e8:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 80474ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80474ec:	2b00      	cmp	r3, #0
 80474ee:	d001      	beq.n	80474f4 <SD_FindSCR+0x38>
  {
    return errorstate;
 80474f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80474f2:	e0ad      	b.n	8047650 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 80474f4:	687b      	ldr	r3, [r7, #4]
 80474f6:	681a      	ldr	r2, [r3, #0]
 80474f8:	687b      	ldr	r3, [r7, #4]
 80474fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80474fc:	041b      	lsls	r3, r3, #16
 80474fe:	4619      	mov	r1, r3
 8047500:	4610      	mov	r0, r2
 8047502:	f001 f8c9 	bl	8048698 <SDMMC_CmdAppCommand>
 8047506:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8047508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804750a:	2b00      	cmp	r3, #0
 804750c:	d001      	beq.n	8047512 <SD_FindSCR+0x56>
  {
    return errorstate;
 804750e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047510:	e09e      	b.n	8047650 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8047512:	f04f 33ff 	mov.w	r3, #4294967295
 8047516:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8047518:	2308      	movs	r3, #8
 804751a:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 804751c:	2330      	movs	r3, #48	; 0x30
 804751e:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8047520:	2302      	movs	r3, #2
 8047522:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8047524:	2300      	movs	r3, #0
 8047526:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8047528:	2301      	movs	r3, #1
 804752a:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 804752c:	687b      	ldr	r3, [r7, #4]
 804752e:	681b      	ldr	r3, [r3, #0]
 8047530:	f107 0210 	add.w	r2, r7, #16
 8047534:	4611      	mov	r1, r2
 8047536:	4618      	mov	r0, r3
 8047538:	f000 fffe 	bl	8048538 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 804753c:	687b      	ldr	r3, [r7, #4]
 804753e:	681b      	ldr	r3, [r3, #0]
 8047540:	4618      	mov	r0, r3
 8047542:	f001 f90f 	bl	8048764 <SDMMC_CmdSendSCR>
 8047546:	62b8      	str	r0, [r7, #40]	; 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8047548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 804754a:	2b00      	cmp	r3, #0
 804754c:	d027      	beq.n	804759e <SD_FindSCR+0xe2>
  {
    return errorstate;
 804754e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8047550:	e07e      	b.n	8047650 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8047552:	687b      	ldr	r3, [r7, #4]
 8047554:	681b      	ldr	r3, [r3, #0]
 8047556:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047558:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 804755c:	2b00      	cmp	r3, #0
 804755e:	d113      	bne.n	8047588 <SD_FindSCR+0xcc>
 8047560:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047562:	2b00      	cmp	r3, #0
 8047564:	d110      	bne.n	8047588 <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8047566:	687b      	ldr	r3, [r7, #4]
 8047568:	681b      	ldr	r3, [r3, #0]
 804756a:	4618      	mov	r0, r3
 804756c:	f000 ff6e 	bl	804844c <SDMMC_ReadFIFO>
 8047570:	4603      	mov	r3, r0
 8047572:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8047574:	687b      	ldr	r3, [r7, #4]
 8047576:	681b      	ldr	r3, [r3, #0]
 8047578:	4618      	mov	r0, r3
 804757a:	f000 ff67 	bl	804844c <SDMMC_ReadFIFO>
 804757e:	4603      	mov	r3, r0
 8047580:	60fb      	str	r3, [r7, #12]
      index++;
 8047582:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8047584:	3301      	adds	r3, #1
 8047586:	637b      	str	r3, [r7, #52]	; 0x34
    }


    if ((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 8047588:	f7fa f898 	bl	80416bc <HAL_GetTick>
 804758c:	4602      	mov	r2, r0
 804758e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8047590:	1ad3      	subs	r3, r2, r3
 8047592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8047596:	d102      	bne.n	804759e <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8047598:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 804759c:	e058      	b.n	8047650 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 804759e:	687b      	ldr	r3, [r7, #4]
 80475a0:	681b      	ldr	r3, [r3, #0]
 80475a2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80475a4:	f240 532a 	movw	r3, #1322	; 0x52a
 80475a8:	4013      	ands	r3, r2
 80475aa:	2b00      	cmp	r3, #0
 80475ac:	d0d1      	beq.n	8047552 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 80475ae:	687b      	ldr	r3, [r7, #4]
 80475b0:	681b      	ldr	r3, [r3, #0]
 80475b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80475b4:	f003 0308 	and.w	r3, r3, #8
 80475b8:	2b00      	cmp	r3, #0
 80475ba:	d005      	beq.n	80475c8 <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 80475bc:	687b      	ldr	r3, [r7, #4]
 80475be:	681b      	ldr	r3, [r3, #0]
 80475c0:	2208      	movs	r2, #8
 80475c2:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 80475c4:	2308      	movs	r3, #8
 80475c6:	e043      	b.n	8047650 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 80475c8:	687b      	ldr	r3, [r7, #4]
 80475ca:	681b      	ldr	r3, [r3, #0]
 80475cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80475ce:	f003 0302 	and.w	r3, r3, #2
 80475d2:	2b00      	cmp	r3, #0
 80475d4:	d005      	beq.n	80475e2 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 80475d6:	687b      	ldr	r3, [r7, #4]
 80475d8:	681b      	ldr	r3, [r3, #0]
 80475da:	2202      	movs	r2, #2
 80475dc:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 80475de:	2302      	movs	r3, #2
 80475e0:	e036      	b.n	8047650 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 80475e2:	687b      	ldr	r3, [r7, #4]
 80475e4:	681b      	ldr	r3, [r3, #0]
 80475e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80475e8:	f003 0320 	and.w	r3, r3, #32
 80475ec:	2b00      	cmp	r3, #0
 80475ee:	d005      	beq.n	80475fc <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 80475f0:	687b      	ldr	r3, [r7, #4]
 80475f2:	681b      	ldr	r3, [r3, #0]
 80475f4:	2220      	movs	r2, #32
 80475f6:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 80475f8:	2320      	movs	r3, #32
 80475fa:	e029      	b.n	8047650 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80475fc:	687b      	ldr	r3, [r7, #4]
 80475fe:	681b      	ldr	r3, [r3, #0]
 8047600:	4a15      	ldr	r2, [pc, #84]	; (8047658 <SD_FindSCR+0x19c>)
 8047602:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8047604:	68fb      	ldr	r3, [r7, #12]
 8047606:	061a      	lsls	r2, r3, #24
 8047608:	68fb      	ldr	r3, [r7, #12]
 804760a:	021b      	lsls	r3, r3, #8
 804760c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8047610:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 8047612:	68fb      	ldr	r3, [r7, #12]
 8047614:	0a1b      	lsrs	r3, r3, #8
 8047616:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 804761a:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 804761c:	68fb      	ldr	r3, [r7, #12]
 804761e:	0e1b      	lsrs	r3, r3, #24
 8047620:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) | \
 8047622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047624:	601a      	str	r2, [r3, #0]
    scr++;
 8047626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8047628:	3304      	adds	r3, #4
 804762a:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 804762c:	68bb      	ldr	r3, [r7, #8]
 804762e:	061a      	lsls	r2, r3, #24
 8047630:	68bb      	ldr	r3, [r7, #8]
 8047632:	021b      	lsls	r3, r3, #8
 8047634:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8047638:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 804763a:	68bb      	ldr	r3, [r7, #8]
 804763c:	0a1b      	lsrs	r3, r3, #8
 804763e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 8047642:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 8047644:	68bb      	ldr	r3, [r7, #8]
 8047646:	0e1b      	lsrs	r3, r3, #24
 8047648:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) | \
 804764a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 804764c:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 804764e:	2300      	movs	r3, #0
}
 8047650:	4618      	mov	r0, r3
 8047652:	3738      	adds	r7, #56	; 0x38
 8047654:	46bd      	mov	sp, r7
 8047656:	bd80      	pop	{r7, pc}
 8047658:	18000f3a 	.word	0x18000f3a

0804765c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 804765c:	b580      	push	{r7, lr}
 804765e:	b084      	sub	sp, #16
 8047660:	af00      	add	r7, sp, #0
 8047662:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8047664:	687b      	ldr	r3, [r7, #4]
 8047666:	2b00      	cmp	r3, #0
 8047668:	d101      	bne.n	804766e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 804766a:	2301      	movs	r3, #1
 804766c:	e095      	b.n	804779a <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 804766e:	687b      	ldr	r3, [r7, #4]
 8047670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047672:	2b00      	cmp	r3, #0
 8047674:	d108      	bne.n	8047688 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8047676:	687b      	ldr	r3, [r7, #4]
 8047678:	685b      	ldr	r3, [r3, #4]
 804767a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 804767e:	d009      	beq.n	8047694 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8047680:	687b      	ldr	r3, [r7, #4]
 8047682:	2200      	movs	r2, #0
 8047684:	61da      	str	r2, [r3, #28]
 8047686:	e005      	b.n	8047694 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8047688:	687b      	ldr	r3, [r7, #4]
 804768a:	2200      	movs	r2, #0
 804768c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 804768e:	687b      	ldr	r3, [r7, #4]
 8047690:	2200      	movs	r2, #0
 8047692:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8047694:	687b      	ldr	r3, [r7, #4]
 8047696:	2200      	movs	r2, #0
 8047698:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 804769a:	687b      	ldr	r3, [r7, #4]
 804769c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80476a0:	b2db      	uxtb	r3, r3
 80476a2:	2b00      	cmp	r3, #0
 80476a4:	d106      	bne.n	80476b4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80476a6:	687b      	ldr	r3, [r7, #4]
 80476a8:	2200      	movs	r2, #0
 80476aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80476ae:	6878      	ldr	r0, [r7, #4]
 80476b0:	f7f9 fd9a 	bl	80411e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80476b4:	687b      	ldr	r3, [r7, #4]
 80476b6:	2202      	movs	r2, #2
 80476b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80476bc:	687b      	ldr	r3, [r7, #4]
 80476be:	681b      	ldr	r3, [r3, #0]
 80476c0:	681a      	ldr	r2, [r3, #0]
 80476c2:	687b      	ldr	r3, [r7, #4]
 80476c4:	681b      	ldr	r3, [r3, #0]
 80476c6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80476ca:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80476cc:	687b      	ldr	r3, [r7, #4]
 80476ce:	68db      	ldr	r3, [r3, #12]
 80476d0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80476d4:	d902      	bls.n	80476dc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80476d6:	2300      	movs	r3, #0
 80476d8:	60fb      	str	r3, [r7, #12]
 80476da:	e002      	b.n	80476e2 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80476dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80476e0:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80476e2:	687b      	ldr	r3, [r7, #4]
 80476e4:	68db      	ldr	r3, [r3, #12]
 80476e6:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 80476ea:	d007      	beq.n	80476fc <HAL_SPI_Init+0xa0>
 80476ec:	687b      	ldr	r3, [r7, #4]
 80476ee:	68db      	ldr	r3, [r3, #12]
 80476f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80476f4:	d002      	beq.n	80476fc <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80476f6:	687b      	ldr	r3, [r7, #4]
 80476f8:	2200      	movs	r2, #0
 80476fa:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80476fc:	687b      	ldr	r3, [r7, #4]
 80476fe:	685b      	ldr	r3, [r3, #4]
 8047700:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8047704:	687b      	ldr	r3, [r7, #4]
 8047706:	689b      	ldr	r3, [r3, #8]
 8047708:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 804770c:	431a      	orrs	r2, r3
 804770e:	687b      	ldr	r3, [r7, #4]
 8047710:	691b      	ldr	r3, [r3, #16]
 8047712:	f003 0302 	and.w	r3, r3, #2
 8047716:	431a      	orrs	r2, r3
 8047718:	687b      	ldr	r3, [r7, #4]
 804771a:	695b      	ldr	r3, [r3, #20]
 804771c:	f003 0301 	and.w	r3, r3, #1
 8047720:	431a      	orrs	r2, r3
 8047722:	687b      	ldr	r3, [r7, #4]
 8047724:	699b      	ldr	r3, [r3, #24]
 8047726:	f403 7300 	and.w	r3, r3, #512	; 0x200
 804772a:	431a      	orrs	r2, r3
 804772c:	687b      	ldr	r3, [r7, #4]
 804772e:	69db      	ldr	r3, [r3, #28]
 8047730:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8047734:	431a      	orrs	r2, r3
 8047736:	687b      	ldr	r3, [r7, #4]
 8047738:	6a1b      	ldr	r3, [r3, #32]
 804773a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804773e:	ea42 0103 	orr.w	r1, r2, r3
 8047742:	687b      	ldr	r3, [r7, #4]
 8047744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8047746:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 804774a:	687b      	ldr	r3, [r7, #4]
 804774c:	681b      	ldr	r3, [r3, #0]
 804774e:	430a      	orrs	r2, r1
 8047750:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8047752:	687b      	ldr	r3, [r7, #4]
 8047754:	699b      	ldr	r3, [r3, #24]
 8047756:	0c1b      	lsrs	r3, r3, #16
 8047758:	f003 0204 	and.w	r2, r3, #4
 804775c:	687b      	ldr	r3, [r7, #4]
 804775e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8047760:	f003 0310 	and.w	r3, r3, #16
 8047764:	431a      	orrs	r2, r3
 8047766:	687b      	ldr	r3, [r7, #4]
 8047768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804776a:	f003 0308 	and.w	r3, r3, #8
 804776e:	431a      	orrs	r2, r3
 8047770:	687b      	ldr	r3, [r7, #4]
 8047772:	68db      	ldr	r3, [r3, #12]
 8047774:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8047778:	ea42 0103 	orr.w	r1, r2, r3
 804777c:	68fb      	ldr	r3, [r7, #12]
 804777e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8047782:	687b      	ldr	r3, [r7, #4]
 8047784:	681b      	ldr	r3, [r3, #0]
 8047786:	430a      	orrs	r2, r1
 8047788:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 804778a:	687b      	ldr	r3, [r7, #4]
 804778c:	2200      	movs	r2, #0
 804778e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8047790:	687b      	ldr	r3, [r7, #4]
 8047792:	2201      	movs	r2, #1
 8047794:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8047798:	2300      	movs	r3, #0
}
 804779a:	4618      	mov	r0, r3
 804779c:	3710      	adds	r7, #16
 804779e:	46bd      	mov	sp, r7
 80477a0:	bd80      	pop	{r7, pc}

080477a2 <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 80477a2:	b580      	push	{r7, lr}
 80477a4:	b084      	sub	sp, #16
 80477a6:	af00      	add	r7, sp, #0
 80477a8:	60f8      	str	r0, [r7, #12]
 80477aa:	60b9      	str	r1, [r7, #8]
 80477ac:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 80477ae:	68fb      	ldr	r3, [r7, #12]
 80477b0:	2b00      	cmp	r3, #0
 80477b2:	d101      	bne.n	80477b8 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 80477b4:	2301      	movs	r3, #1
 80477b6:	e038      	b.n	804782a <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 80477b8:	68fb      	ldr	r3, [r7, #12]
 80477ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80477be:	b2db      	uxtb	r3, r3
 80477c0:	2b00      	cmp	r3, #0
 80477c2:	d106      	bne.n	80477d2 <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 80477c4:	68fb      	ldr	r3, [r7, #12]
 80477c6:	2200      	movs	r2, #0
 80477c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 80477cc:	68f8      	ldr	r0, [r7, #12]
 80477ce:	f7f9 fe43 	bl	8041458 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 80477d2:	68fb      	ldr	r3, [r7, #12]
 80477d4:	681a      	ldr	r2, [r3, #0]
 80477d6:	68fb      	ldr	r3, [r7, #12]
 80477d8:	3308      	adds	r3, #8
 80477da:	4619      	mov	r1, r3
 80477dc:	4610      	mov	r0, r2
 80477de:	f000 faf7 	bl	8047dd0 <FMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 80477e2:	68fb      	ldr	r3, [r7, #12]
 80477e4:	6818      	ldr	r0, [r3, #0]
 80477e6:	68fb      	ldr	r3, [r7, #12]
 80477e8:	689b      	ldr	r3, [r3, #8]
 80477ea:	461a      	mov	r2, r3
 80477ec:	68b9      	ldr	r1, [r7, #8]
 80477ee:	f000 fbbf 	bl	8047f70 <FMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80477f2:	68fb      	ldr	r3, [r7, #12]
 80477f4:	6858      	ldr	r0, [r3, #4]
 80477f6:	68fb      	ldr	r3, [r7, #12]
 80477f8:	689a      	ldr	r2, [r3, #8]
 80477fa:	68fb      	ldr	r3, [r7, #12]
 80477fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80477fe:	6879      	ldr	r1, [r7, #4]
 8047800:	f000 fc08 	bl	8048014 <FMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 8047804:	68fb      	ldr	r3, [r7, #12]
 8047806:	681b      	ldr	r3, [r3, #0]
 8047808:	68fa      	ldr	r2, [r7, #12]
 804780a:	6892      	ldr	r2, [r2, #8]
 804780c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8047810:	68fb      	ldr	r3, [r7, #12]
 8047812:	681b      	ldr	r3, [r3, #0]
 8047814:	68fa      	ldr	r2, [r7, #12]
 8047816:	6892      	ldr	r2, [r2, #8]
 8047818:	f041 0101 	orr.w	r1, r1, #1
 804781c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 8047820:	68fb      	ldr	r3, [r7, #12]
 8047822:	2201      	movs	r2, #1
 8047824:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8047828:	2300      	movs	r3, #0
}
 804782a:	4618      	mov	r0, r3
 804782c:	3710      	adds	r7, #16
 804782e:	46bd      	mov	sp, r7
 8047830:	bd80      	pop	{r7, pc}

08047832 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8047832:	b580      	push	{r7, lr}
 8047834:	b082      	sub	sp, #8
 8047836:	af00      	add	r7, sp, #0
 8047838:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 804783a:	687b      	ldr	r3, [r7, #4]
 804783c:	2b00      	cmp	r3, #0
 804783e:	d101      	bne.n	8047844 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8047840:	2301      	movs	r3, #1
 8047842:	e049      	b.n	80478d8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8047844:	687b      	ldr	r3, [r7, #4]
 8047846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 804784a:	b2db      	uxtb	r3, r3
 804784c:	2b00      	cmp	r3, #0
 804784e:	d106      	bne.n	804785e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8047850:	687b      	ldr	r3, [r7, #4]
 8047852:	2200      	movs	r2, #0
 8047854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8047858:	6878      	ldr	r0, [r7, #4]
 804785a:	f7f9 fd0b 	bl	8041274 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 804785e:	687b      	ldr	r3, [r7, #4]
 8047860:	2202      	movs	r2, #2
 8047862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8047866:	687b      	ldr	r3, [r7, #4]
 8047868:	681a      	ldr	r2, [r3, #0]
 804786a:	687b      	ldr	r3, [r7, #4]
 804786c:	3304      	adds	r3, #4
 804786e:	4619      	mov	r1, r3
 8047870:	4610      	mov	r0, r2
 8047872:	f000 f877 	bl	8047964 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8047876:	687b      	ldr	r3, [r7, #4]
 8047878:	2201      	movs	r2, #1
 804787a:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 804787e:	687b      	ldr	r3, [r7, #4]
 8047880:	2201      	movs	r2, #1
 8047882:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8047886:	687b      	ldr	r3, [r7, #4]
 8047888:	2201      	movs	r2, #1
 804788a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 804788e:	687b      	ldr	r3, [r7, #4]
 8047890:	2201      	movs	r2, #1
 8047892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8047896:	687b      	ldr	r3, [r7, #4]
 8047898:	2201      	movs	r2, #1
 804789a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 804789e:	687b      	ldr	r3, [r7, #4]
 80478a0:	2201      	movs	r2, #1
 80478a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80478a6:	687b      	ldr	r3, [r7, #4]
 80478a8:	2201      	movs	r2, #1
 80478aa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80478ae:	687b      	ldr	r3, [r7, #4]
 80478b0:	2201      	movs	r2, #1
 80478b2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80478b6:	687b      	ldr	r3, [r7, #4]
 80478b8:	2201      	movs	r2, #1
 80478ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80478be:	687b      	ldr	r3, [r7, #4]
 80478c0:	2201      	movs	r2, #1
 80478c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80478c6:	687b      	ldr	r3, [r7, #4]
 80478c8:	2201      	movs	r2, #1
 80478ca:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80478ce:	687b      	ldr	r3, [r7, #4]
 80478d0:	2201      	movs	r2, #1
 80478d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80478d6:	2300      	movs	r3, #0
}
 80478d8:	4618      	mov	r0, r3
 80478da:	3708      	adds	r7, #8
 80478dc:	46bd      	mov	sp, r7
 80478de:	bd80      	pop	{r7, pc}

080478e0 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80478e0:	b580      	push	{r7, lr}
 80478e2:	b082      	sub	sp, #8
 80478e4:	af00      	add	r7, sp, #0
 80478e6:	6078      	str	r0, [r7, #4]
 80478e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80478ea:	687b      	ldr	r3, [r7, #4]
 80478ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80478f0:	2b01      	cmp	r3, #1
 80478f2:	d101      	bne.n	80478f8 <HAL_TIM_SlaveConfigSynchro+0x18>
 80478f4:	2302      	movs	r3, #2
 80478f6:	e031      	b.n	804795c <HAL_TIM_SlaveConfigSynchro+0x7c>
 80478f8:	687b      	ldr	r3, [r7, #4]
 80478fa:	2201      	movs	r2, #1
 80478fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8047900:	687b      	ldr	r3, [r7, #4]
 8047902:	2202      	movs	r2, #2
 8047904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 8047908:	6839      	ldr	r1, [r7, #0]
 804790a:	6878      	ldr	r0, [r7, #4]
 804790c:	f000 f8c4 	bl	8047a98 <TIM_SlaveTimer_SetConfig>
 8047910:	4603      	mov	r3, r0
 8047912:	2b00      	cmp	r3, #0
 8047914:	d009      	beq.n	804792a <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8047916:	687b      	ldr	r3, [r7, #4]
 8047918:	2201      	movs	r2, #1
 804791a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 804791e:	687b      	ldr	r3, [r7, #4]
 8047920:	2200      	movs	r2, #0
 8047922:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8047926:	2301      	movs	r3, #1
 8047928:	e018      	b.n	804795c <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 804792a:	687b      	ldr	r3, [r7, #4]
 804792c:	681b      	ldr	r3, [r3, #0]
 804792e:	68da      	ldr	r2, [r3, #12]
 8047930:	687b      	ldr	r3, [r7, #4]
 8047932:	681b      	ldr	r3, [r3, #0]
 8047934:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8047938:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 804793a:	687b      	ldr	r3, [r7, #4]
 804793c:	681b      	ldr	r3, [r3, #0]
 804793e:	68da      	ldr	r2, [r3, #12]
 8047940:	687b      	ldr	r3, [r7, #4]
 8047942:	681b      	ldr	r3, [r3, #0]
 8047944:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8047948:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 804794a:	687b      	ldr	r3, [r7, #4]
 804794c:	2201      	movs	r2, #1
 804794e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8047952:	687b      	ldr	r3, [r7, #4]
 8047954:	2200      	movs	r2, #0
 8047956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 804795a:	2300      	movs	r3, #0
}
 804795c:	4618      	mov	r0, r3
 804795e:	3708      	adds	r7, #8
 8047960:	46bd      	mov	sp, r7
 8047962:	bd80      	pop	{r7, pc}

08047964 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8047964:	b480      	push	{r7}
 8047966:	b085      	sub	sp, #20
 8047968:	af00      	add	r7, sp, #0
 804796a:	6078      	str	r0, [r7, #4]
 804796c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 804796e:	687b      	ldr	r3, [r7, #4]
 8047970:	681b      	ldr	r3, [r3, #0]
 8047972:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8047974:	687b      	ldr	r3, [r7, #4]
 8047976:	4a40      	ldr	r2, [pc, #256]	; (8047a78 <TIM_Base_SetConfig+0x114>)
 8047978:	4293      	cmp	r3, r2
 804797a:	d013      	beq.n	80479a4 <TIM_Base_SetConfig+0x40>
 804797c:	687b      	ldr	r3, [r7, #4]
 804797e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047982:	d00f      	beq.n	80479a4 <TIM_Base_SetConfig+0x40>
 8047984:	687b      	ldr	r3, [r7, #4]
 8047986:	4a3d      	ldr	r2, [pc, #244]	; (8047a7c <TIM_Base_SetConfig+0x118>)
 8047988:	4293      	cmp	r3, r2
 804798a:	d00b      	beq.n	80479a4 <TIM_Base_SetConfig+0x40>
 804798c:	687b      	ldr	r3, [r7, #4]
 804798e:	4a3c      	ldr	r2, [pc, #240]	; (8047a80 <TIM_Base_SetConfig+0x11c>)
 8047990:	4293      	cmp	r3, r2
 8047992:	d007      	beq.n	80479a4 <TIM_Base_SetConfig+0x40>
 8047994:	687b      	ldr	r3, [r7, #4]
 8047996:	4a3b      	ldr	r2, [pc, #236]	; (8047a84 <TIM_Base_SetConfig+0x120>)
 8047998:	4293      	cmp	r3, r2
 804799a:	d003      	beq.n	80479a4 <TIM_Base_SetConfig+0x40>
 804799c:	687b      	ldr	r3, [r7, #4]
 804799e:	4a3a      	ldr	r2, [pc, #232]	; (8047a88 <TIM_Base_SetConfig+0x124>)
 80479a0:	4293      	cmp	r3, r2
 80479a2:	d108      	bne.n	80479b6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80479a4:	68fb      	ldr	r3, [r7, #12]
 80479a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80479aa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80479ac:	683b      	ldr	r3, [r7, #0]
 80479ae:	685b      	ldr	r3, [r3, #4]
 80479b0:	68fa      	ldr	r2, [r7, #12]
 80479b2:	4313      	orrs	r3, r2
 80479b4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80479b6:	687b      	ldr	r3, [r7, #4]
 80479b8:	4a2f      	ldr	r2, [pc, #188]	; (8047a78 <TIM_Base_SetConfig+0x114>)
 80479ba:	4293      	cmp	r3, r2
 80479bc:	d01f      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479be:	687b      	ldr	r3, [r7, #4]
 80479c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80479c4:	d01b      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479c6:	687b      	ldr	r3, [r7, #4]
 80479c8:	4a2c      	ldr	r2, [pc, #176]	; (8047a7c <TIM_Base_SetConfig+0x118>)
 80479ca:	4293      	cmp	r3, r2
 80479cc:	d017      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479ce:	687b      	ldr	r3, [r7, #4]
 80479d0:	4a2b      	ldr	r2, [pc, #172]	; (8047a80 <TIM_Base_SetConfig+0x11c>)
 80479d2:	4293      	cmp	r3, r2
 80479d4:	d013      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479d6:	687b      	ldr	r3, [r7, #4]
 80479d8:	4a2a      	ldr	r2, [pc, #168]	; (8047a84 <TIM_Base_SetConfig+0x120>)
 80479da:	4293      	cmp	r3, r2
 80479dc:	d00f      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479de:	687b      	ldr	r3, [r7, #4]
 80479e0:	4a29      	ldr	r2, [pc, #164]	; (8047a88 <TIM_Base_SetConfig+0x124>)
 80479e2:	4293      	cmp	r3, r2
 80479e4:	d00b      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479e6:	687b      	ldr	r3, [r7, #4]
 80479e8:	4a28      	ldr	r2, [pc, #160]	; (8047a8c <TIM_Base_SetConfig+0x128>)
 80479ea:	4293      	cmp	r3, r2
 80479ec:	d007      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479ee:	687b      	ldr	r3, [r7, #4]
 80479f0:	4a27      	ldr	r2, [pc, #156]	; (8047a90 <TIM_Base_SetConfig+0x12c>)
 80479f2:	4293      	cmp	r3, r2
 80479f4:	d003      	beq.n	80479fe <TIM_Base_SetConfig+0x9a>
 80479f6:	687b      	ldr	r3, [r7, #4]
 80479f8:	4a26      	ldr	r2, [pc, #152]	; (8047a94 <TIM_Base_SetConfig+0x130>)
 80479fa:	4293      	cmp	r3, r2
 80479fc:	d108      	bne.n	8047a10 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80479fe:	68fb      	ldr	r3, [r7, #12]
 8047a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8047a04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8047a06:	683b      	ldr	r3, [r7, #0]
 8047a08:	68db      	ldr	r3, [r3, #12]
 8047a0a:	68fa      	ldr	r2, [r7, #12]
 8047a0c:	4313      	orrs	r3, r2
 8047a0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8047a10:	68fb      	ldr	r3, [r7, #12]
 8047a12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8047a16:	683b      	ldr	r3, [r7, #0]
 8047a18:	695b      	ldr	r3, [r3, #20]
 8047a1a:	4313      	orrs	r3, r2
 8047a1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8047a1e:	687b      	ldr	r3, [r7, #4]
 8047a20:	68fa      	ldr	r2, [r7, #12]
 8047a22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8047a24:	683b      	ldr	r3, [r7, #0]
 8047a26:	689a      	ldr	r2, [r3, #8]
 8047a28:	687b      	ldr	r3, [r7, #4]
 8047a2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8047a2c:	683b      	ldr	r3, [r7, #0]
 8047a2e:	681a      	ldr	r2, [r3, #0]
 8047a30:	687b      	ldr	r3, [r7, #4]
 8047a32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8047a34:	687b      	ldr	r3, [r7, #4]
 8047a36:	4a10      	ldr	r2, [pc, #64]	; (8047a78 <TIM_Base_SetConfig+0x114>)
 8047a38:	4293      	cmp	r3, r2
 8047a3a:	d00f      	beq.n	8047a5c <TIM_Base_SetConfig+0xf8>
 8047a3c:	687b      	ldr	r3, [r7, #4]
 8047a3e:	4a12      	ldr	r2, [pc, #72]	; (8047a88 <TIM_Base_SetConfig+0x124>)
 8047a40:	4293      	cmp	r3, r2
 8047a42:	d00b      	beq.n	8047a5c <TIM_Base_SetConfig+0xf8>
 8047a44:	687b      	ldr	r3, [r7, #4]
 8047a46:	4a11      	ldr	r2, [pc, #68]	; (8047a8c <TIM_Base_SetConfig+0x128>)
 8047a48:	4293      	cmp	r3, r2
 8047a4a:	d007      	beq.n	8047a5c <TIM_Base_SetConfig+0xf8>
 8047a4c:	687b      	ldr	r3, [r7, #4]
 8047a4e:	4a10      	ldr	r2, [pc, #64]	; (8047a90 <TIM_Base_SetConfig+0x12c>)
 8047a50:	4293      	cmp	r3, r2
 8047a52:	d003      	beq.n	8047a5c <TIM_Base_SetConfig+0xf8>
 8047a54:	687b      	ldr	r3, [r7, #4]
 8047a56:	4a0f      	ldr	r2, [pc, #60]	; (8047a94 <TIM_Base_SetConfig+0x130>)
 8047a58:	4293      	cmp	r3, r2
 8047a5a:	d103      	bne.n	8047a64 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8047a5c:	683b      	ldr	r3, [r7, #0]
 8047a5e:	691a      	ldr	r2, [r3, #16]
 8047a60:	687b      	ldr	r3, [r7, #4]
 8047a62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8047a64:	687b      	ldr	r3, [r7, #4]
 8047a66:	2201      	movs	r2, #1
 8047a68:	615a      	str	r2, [r3, #20]
}
 8047a6a:	bf00      	nop
 8047a6c:	3714      	adds	r7, #20
 8047a6e:	46bd      	mov	sp, r7
 8047a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047a74:	4770      	bx	lr
 8047a76:	bf00      	nop
 8047a78:	40012c00 	.word	0x40012c00
 8047a7c:	40000400 	.word	0x40000400
 8047a80:	40000800 	.word	0x40000800
 8047a84:	40000c00 	.word	0x40000c00
 8047a88:	40013400 	.word	0x40013400
 8047a8c:	40014000 	.word	0x40014000
 8047a90:	40014400 	.word	0x40014400
 8047a94:	40014800 	.word	0x40014800

08047a98 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8047a98:	b580      	push	{r7, lr}
 8047a9a:	b086      	sub	sp, #24
 8047a9c:	af00      	add	r7, sp, #0
 8047a9e:	6078      	str	r0, [r7, #4]
 8047aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8047aa2:	2300      	movs	r3, #0
 8047aa4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8047aa6:	687b      	ldr	r3, [r7, #4]
 8047aa8:	681b      	ldr	r3, [r3, #0]
 8047aaa:	689b      	ldr	r3, [r3, #8]
 8047aac:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8047aae:	693b      	ldr	r3, [r7, #16]
 8047ab0:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8047ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8047ab8:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8047aba:	683b      	ldr	r3, [r7, #0]
 8047abc:	685b      	ldr	r3, [r3, #4]
 8047abe:	693a      	ldr	r2, [r7, #16]
 8047ac0:	4313      	orrs	r3, r2
 8047ac2:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8047ac4:	693b      	ldr	r3, [r7, #16]
 8047ac6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8047aca:	f023 0307 	bic.w	r3, r3, #7
 8047ace:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8047ad0:	683b      	ldr	r3, [r7, #0]
 8047ad2:	681b      	ldr	r3, [r3, #0]
 8047ad4:	693a      	ldr	r2, [r7, #16]
 8047ad6:	4313      	orrs	r3, r2
 8047ad8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8047ada:	687b      	ldr	r3, [r7, #4]
 8047adc:	681b      	ldr	r3, [r3, #0]
 8047ade:	693a      	ldr	r2, [r7, #16]
 8047ae0:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8047ae2:	683b      	ldr	r3, [r7, #0]
 8047ae4:	685b      	ldr	r3, [r3, #4]
 8047ae6:	2b70      	cmp	r3, #112	; 0x70
 8047ae8:	d01a      	beq.n	8047b20 <TIM_SlaveTimer_SetConfig+0x88>
 8047aea:	2b70      	cmp	r3, #112	; 0x70
 8047aec:	d860      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047aee:	2b60      	cmp	r3, #96	; 0x60
 8047af0:	d054      	beq.n	8047b9c <TIM_SlaveTimer_SetConfig+0x104>
 8047af2:	2b60      	cmp	r3, #96	; 0x60
 8047af4:	d85c      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047af6:	2b50      	cmp	r3, #80	; 0x50
 8047af8:	d046      	beq.n	8047b88 <TIM_SlaveTimer_SetConfig+0xf0>
 8047afa:	2b50      	cmp	r3, #80	; 0x50
 8047afc:	d858      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047afe:	2b40      	cmp	r3, #64	; 0x40
 8047b00:	d019      	beq.n	8047b36 <TIM_SlaveTimer_SetConfig+0x9e>
 8047b02:	2b40      	cmp	r3, #64	; 0x40
 8047b04:	d854      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047b06:	2b30      	cmp	r3, #48	; 0x30
 8047b08:	d055      	beq.n	8047bb6 <TIM_SlaveTimer_SetConfig+0x11e>
 8047b0a:	2b30      	cmp	r3, #48	; 0x30
 8047b0c:	d850      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047b0e:	2b20      	cmp	r3, #32
 8047b10:	d051      	beq.n	8047bb6 <TIM_SlaveTimer_SetConfig+0x11e>
 8047b12:	2b20      	cmp	r3, #32
 8047b14:	d84c      	bhi.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
 8047b16:	2b00      	cmp	r3, #0
 8047b18:	d04d      	beq.n	8047bb6 <TIM_SlaveTimer_SetConfig+0x11e>
 8047b1a:	2b10      	cmp	r3, #16
 8047b1c:	d04b      	beq.n	8047bb6 <TIM_SlaveTimer_SetConfig+0x11e>
 8047b1e:	e047      	b.n	8047bb0 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8047b20:	687b      	ldr	r3, [r7, #4]
 8047b22:	6818      	ldr	r0, [r3, #0]
 8047b24:	683b      	ldr	r3, [r7, #0]
 8047b26:	68d9      	ldr	r1, [r3, #12]
 8047b28:	683b      	ldr	r3, [r7, #0]
 8047b2a:	689a      	ldr	r2, [r3, #8]
 8047b2c:	683b      	ldr	r3, [r7, #0]
 8047b2e:	691b      	ldr	r3, [r3, #16]
 8047b30:	f000 f8a6 	bl	8047c80 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8047b34:	e040      	b.n	8047bb8 <TIM_SlaveTimer_SetConfig+0x120>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8047b36:	683b      	ldr	r3, [r7, #0]
 8047b38:	681b      	ldr	r3, [r3, #0]
 8047b3a:	2b05      	cmp	r3, #5
 8047b3c:	d101      	bne.n	8047b42 <TIM_SlaveTimer_SetConfig+0xaa>
      {
        return HAL_ERROR;
 8047b3e:	2301      	movs	r3, #1
 8047b40:	e03b      	b.n	8047bba <TIM_SlaveTimer_SetConfig+0x122>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8047b42:	687b      	ldr	r3, [r7, #4]
 8047b44:	681b      	ldr	r3, [r3, #0]
 8047b46:	6a1b      	ldr	r3, [r3, #32]
 8047b48:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8047b4a:	687b      	ldr	r3, [r7, #4]
 8047b4c:	681b      	ldr	r3, [r3, #0]
 8047b4e:	6a1a      	ldr	r2, [r3, #32]
 8047b50:	687b      	ldr	r3, [r7, #4]
 8047b52:	681b      	ldr	r3, [r3, #0]
 8047b54:	f022 0201 	bic.w	r2, r2, #1
 8047b58:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8047b5a:	687b      	ldr	r3, [r7, #4]
 8047b5c:	681b      	ldr	r3, [r3, #0]
 8047b5e:	699b      	ldr	r3, [r3, #24]
 8047b60:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8047b62:	68bb      	ldr	r3, [r7, #8]
 8047b64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8047b68:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8047b6a:	683b      	ldr	r3, [r7, #0]
 8047b6c:	691b      	ldr	r3, [r3, #16]
 8047b6e:	011b      	lsls	r3, r3, #4
 8047b70:	68ba      	ldr	r2, [r7, #8]
 8047b72:	4313      	orrs	r3, r2
 8047b74:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8047b76:	687b      	ldr	r3, [r7, #4]
 8047b78:	681b      	ldr	r3, [r3, #0]
 8047b7a:	68ba      	ldr	r2, [r7, #8]
 8047b7c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8047b7e:	687b      	ldr	r3, [r7, #4]
 8047b80:	681b      	ldr	r3, [r3, #0]
 8047b82:	68fa      	ldr	r2, [r7, #12]
 8047b84:	621a      	str	r2, [r3, #32]
      break;
 8047b86:	e017      	b.n	8047bb8 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8047b88:	687b      	ldr	r3, [r7, #4]
 8047b8a:	6818      	ldr	r0, [r3, #0]
 8047b8c:	683b      	ldr	r3, [r7, #0]
 8047b8e:	6899      	ldr	r1, [r3, #8]
 8047b90:	683b      	ldr	r3, [r7, #0]
 8047b92:	691b      	ldr	r3, [r3, #16]
 8047b94:	461a      	mov	r2, r3
 8047b96:	f000 f814 	bl	8047bc2 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8047b9a:	e00d      	b.n	8047bb8 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8047b9c:	687b      	ldr	r3, [r7, #4]
 8047b9e:	6818      	ldr	r0, [r3, #0]
 8047ba0:	683b      	ldr	r3, [r7, #0]
 8047ba2:	6899      	ldr	r1, [r3, #8]
 8047ba4:	683b      	ldr	r3, [r7, #0]
 8047ba6:	691b      	ldr	r3, [r3, #16]
 8047ba8:	461a      	mov	r2, r3
 8047baa:	f000 f839 	bl	8047c20 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8047bae:	e003      	b.n	8047bb8 <TIM_SlaveTimer_SetConfig+0x120>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8047bb0:	2301      	movs	r3, #1
 8047bb2:	75fb      	strb	r3, [r7, #23]
      break;
 8047bb4:	e000      	b.n	8047bb8 <TIM_SlaveTimer_SetConfig+0x120>
      break;
 8047bb6:	bf00      	nop
  }

  return status;
 8047bb8:	7dfb      	ldrb	r3, [r7, #23]
}
 8047bba:	4618      	mov	r0, r3
 8047bbc:	3718      	adds	r7, #24
 8047bbe:	46bd      	mov	sp, r7
 8047bc0:	bd80      	pop	{r7, pc}

08047bc2 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8047bc2:	b480      	push	{r7}
 8047bc4:	b087      	sub	sp, #28
 8047bc6:	af00      	add	r7, sp, #0
 8047bc8:	60f8      	str	r0, [r7, #12]
 8047bca:	60b9      	str	r1, [r7, #8]
 8047bcc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8047bce:	68fb      	ldr	r3, [r7, #12]
 8047bd0:	6a1b      	ldr	r3, [r3, #32]
 8047bd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8047bd4:	68fb      	ldr	r3, [r7, #12]
 8047bd6:	6a1b      	ldr	r3, [r3, #32]
 8047bd8:	f023 0201 	bic.w	r2, r3, #1
 8047bdc:	68fb      	ldr	r3, [r7, #12]
 8047bde:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8047be0:	68fb      	ldr	r3, [r7, #12]
 8047be2:	699b      	ldr	r3, [r3, #24]
 8047be4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8047be6:	693b      	ldr	r3, [r7, #16]
 8047be8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8047bec:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8047bee:	687b      	ldr	r3, [r7, #4]
 8047bf0:	011b      	lsls	r3, r3, #4
 8047bf2:	693a      	ldr	r2, [r7, #16]
 8047bf4:	4313      	orrs	r3, r2
 8047bf6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8047bf8:	697b      	ldr	r3, [r7, #20]
 8047bfa:	f023 030a 	bic.w	r3, r3, #10
 8047bfe:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8047c00:	697a      	ldr	r2, [r7, #20]
 8047c02:	68bb      	ldr	r3, [r7, #8]
 8047c04:	4313      	orrs	r3, r2
 8047c06:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8047c08:	68fb      	ldr	r3, [r7, #12]
 8047c0a:	693a      	ldr	r2, [r7, #16]
 8047c0c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8047c0e:	68fb      	ldr	r3, [r7, #12]
 8047c10:	697a      	ldr	r2, [r7, #20]
 8047c12:	621a      	str	r2, [r3, #32]
}
 8047c14:	bf00      	nop
 8047c16:	371c      	adds	r7, #28
 8047c18:	46bd      	mov	sp, r7
 8047c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c1e:	4770      	bx	lr

08047c20 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8047c20:	b480      	push	{r7}
 8047c22:	b087      	sub	sp, #28
 8047c24:	af00      	add	r7, sp, #0
 8047c26:	60f8      	str	r0, [r7, #12]
 8047c28:	60b9      	str	r1, [r7, #8]
 8047c2a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8047c2c:	68fb      	ldr	r3, [r7, #12]
 8047c2e:	6a1b      	ldr	r3, [r3, #32]
 8047c30:	f023 0210 	bic.w	r2, r3, #16
 8047c34:	68fb      	ldr	r3, [r7, #12]
 8047c36:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8047c38:	68fb      	ldr	r3, [r7, #12]
 8047c3a:	699b      	ldr	r3, [r3, #24]
 8047c3c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8047c3e:	68fb      	ldr	r3, [r7, #12]
 8047c40:	6a1b      	ldr	r3, [r3, #32]
 8047c42:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8047c44:	697b      	ldr	r3, [r7, #20]
 8047c46:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8047c4a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8047c4c:	687b      	ldr	r3, [r7, #4]
 8047c4e:	031b      	lsls	r3, r3, #12
 8047c50:	697a      	ldr	r2, [r7, #20]
 8047c52:	4313      	orrs	r3, r2
 8047c54:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8047c56:	693b      	ldr	r3, [r7, #16]
 8047c58:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8047c5c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8047c5e:	68bb      	ldr	r3, [r7, #8]
 8047c60:	011b      	lsls	r3, r3, #4
 8047c62:	693a      	ldr	r2, [r7, #16]
 8047c64:	4313      	orrs	r3, r2
 8047c66:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8047c68:	68fb      	ldr	r3, [r7, #12]
 8047c6a:	697a      	ldr	r2, [r7, #20]
 8047c6c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8047c6e:	68fb      	ldr	r3, [r7, #12]
 8047c70:	693a      	ldr	r2, [r7, #16]
 8047c72:	621a      	str	r2, [r3, #32]
}
 8047c74:	bf00      	nop
 8047c76:	371c      	adds	r7, #28
 8047c78:	46bd      	mov	sp, r7
 8047c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047c7e:	4770      	bx	lr

08047c80 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8047c80:	b480      	push	{r7}
 8047c82:	b087      	sub	sp, #28
 8047c84:	af00      	add	r7, sp, #0
 8047c86:	60f8      	str	r0, [r7, #12]
 8047c88:	60b9      	str	r1, [r7, #8]
 8047c8a:	607a      	str	r2, [r7, #4]
 8047c8c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8047c8e:	68fb      	ldr	r3, [r7, #12]
 8047c90:	689b      	ldr	r3, [r3, #8]
 8047c92:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8047c94:	697b      	ldr	r3, [r7, #20]
 8047c96:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8047c9a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8047c9c:	683b      	ldr	r3, [r7, #0]
 8047c9e:	021a      	lsls	r2, r3, #8
 8047ca0:	687b      	ldr	r3, [r7, #4]
 8047ca2:	431a      	orrs	r2, r3
 8047ca4:	68bb      	ldr	r3, [r7, #8]
 8047ca6:	4313      	orrs	r3, r2
 8047ca8:	697a      	ldr	r2, [r7, #20]
 8047caa:	4313      	orrs	r3, r2
 8047cac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8047cae:	68fb      	ldr	r3, [r7, #12]
 8047cb0:	697a      	ldr	r2, [r7, #20]
 8047cb2:	609a      	str	r2, [r3, #8]
}
 8047cb4:	bf00      	nop
 8047cb6:	371c      	adds	r7, #28
 8047cb8:	46bd      	mov	sp, r7
 8047cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047cbe:	4770      	bx	lr

08047cc0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8047cc0:	b480      	push	{r7}
 8047cc2:	b085      	sub	sp, #20
 8047cc4:	af00      	add	r7, sp, #0
 8047cc6:	6078      	str	r0, [r7, #4]
 8047cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8047cca:	687b      	ldr	r3, [r7, #4]
 8047ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8047cd0:	2b01      	cmp	r3, #1
 8047cd2:	d101      	bne.n	8047cd8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8047cd4:	2302      	movs	r3, #2
 8047cd6:	e068      	b.n	8047daa <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8047cd8:	687b      	ldr	r3, [r7, #4]
 8047cda:	2201      	movs	r2, #1
 8047cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8047ce0:	687b      	ldr	r3, [r7, #4]
 8047ce2:	2202      	movs	r2, #2
 8047ce4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8047ce8:	687b      	ldr	r3, [r7, #4]
 8047cea:	681b      	ldr	r3, [r3, #0]
 8047cec:	685b      	ldr	r3, [r3, #4]
 8047cee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8047cf0:	687b      	ldr	r3, [r7, #4]
 8047cf2:	681b      	ldr	r3, [r3, #0]
 8047cf4:	689b      	ldr	r3, [r3, #8]
 8047cf6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8047cf8:	687b      	ldr	r3, [r7, #4]
 8047cfa:	681b      	ldr	r3, [r3, #0]
 8047cfc:	4a2e      	ldr	r2, [pc, #184]	; (8047db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8047cfe:	4293      	cmp	r3, r2
 8047d00:	d004      	beq.n	8047d0c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8047d02:	687b      	ldr	r3, [r7, #4]
 8047d04:	681b      	ldr	r3, [r3, #0]
 8047d06:	4a2d      	ldr	r2, [pc, #180]	; (8047dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8047d08:	4293      	cmp	r3, r2
 8047d0a:	d108      	bne.n	8047d1e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8047d0c:	68fb      	ldr	r3, [r7, #12]
 8047d0e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8047d12:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8047d14:	683b      	ldr	r3, [r7, #0]
 8047d16:	685b      	ldr	r3, [r3, #4]
 8047d18:	68fa      	ldr	r2, [r7, #12]
 8047d1a:	4313      	orrs	r3, r2
 8047d1c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8047d1e:	68fb      	ldr	r3, [r7, #12]
 8047d20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8047d24:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8047d26:	683b      	ldr	r3, [r7, #0]
 8047d28:	681b      	ldr	r3, [r3, #0]
 8047d2a:	68fa      	ldr	r2, [r7, #12]
 8047d2c:	4313      	orrs	r3, r2
 8047d2e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8047d30:	687b      	ldr	r3, [r7, #4]
 8047d32:	681b      	ldr	r3, [r3, #0]
 8047d34:	68fa      	ldr	r2, [r7, #12]
 8047d36:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8047d38:	687b      	ldr	r3, [r7, #4]
 8047d3a:	681b      	ldr	r3, [r3, #0]
 8047d3c:	4a1e      	ldr	r2, [pc, #120]	; (8047db8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8047d3e:	4293      	cmp	r3, r2
 8047d40:	d01d      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d42:	687b      	ldr	r3, [r7, #4]
 8047d44:	681b      	ldr	r3, [r3, #0]
 8047d46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8047d4a:	d018      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d4c:	687b      	ldr	r3, [r7, #4]
 8047d4e:	681b      	ldr	r3, [r3, #0]
 8047d50:	4a1b      	ldr	r2, [pc, #108]	; (8047dc0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8047d52:	4293      	cmp	r3, r2
 8047d54:	d013      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d56:	687b      	ldr	r3, [r7, #4]
 8047d58:	681b      	ldr	r3, [r3, #0]
 8047d5a:	4a1a      	ldr	r2, [pc, #104]	; (8047dc4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8047d5c:	4293      	cmp	r3, r2
 8047d5e:	d00e      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d60:	687b      	ldr	r3, [r7, #4]
 8047d62:	681b      	ldr	r3, [r3, #0]
 8047d64:	4a18      	ldr	r2, [pc, #96]	; (8047dc8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8047d66:	4293      	cmp	r3, r2
 8047d68:	d009      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d6a:	687b      	ldr	r3, [r7, #4]
 8047d6c:	681b      	ldr	r3, [r3, #0]
 8047d6e:	4a13      	ldr	r2, [pc, #76]	; (8047dbc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8047d70:	4293      	cmp	r3, r2
 8047d72:	d004      	beq.n	8047d7e <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8047d74:	687b      	ldr	r3, [r7, #4]
 8047d76:	681b      	ldr	r3, [r3, #0]
 8047d78:	4a14      	ldr	r2, [pc, #80]	; (8047dcc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8047d7a:	4293      	cmp	r3, r2
 8047d7c:	d10c      	bne.n	8047d98 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8047d7e:	68bb      	ldr	r3, [r7, #8]
 8047d80:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8047d84:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8047d86:	683b      	ldr	r3, [r7, #0]
 8047d88:	689b      	ldr	r3, [r3, #8]
 8047d8a:	68ba      	ldr	r2, [r7, #8]
 8047d8c:	4313      	orrs	r3, r2
 8047d8e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8047d90:	687b      	ldr	r3, [r7, #4]
 8047d92:	681b      	ldr	r3, [r3, #0]
 8047d94:	68ba      	ldr	r2, [r7, #8]
 8047d96:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8047d98:	687b      	ldr	r3, [r7, #4]
 8047d9a:	2201      	movs	r2, #1
 8047d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8047da0:	687b      	ldr	r3, [r7, #4]
 8047da2:	2200      	movs	r2, #0
 8047da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8047da8:	2300      	movs	r3, #0
}
 8047daa:	4618      	mov	r0, r3
 8047dac:	3714      	adds	r7, #20
 8047dae:	46bd      	mov	sp, r7
 8047db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047db4:	4770      	bx	lr
 8047db6:	bf00      	nop
 8047db8:	40012c00 	.word	0x40012c00
 8047dbc:	40013400 	.word	0x40013400
 8047dc0:	40000400 	.word	0x40000400
 8047dc4:	40000800 	.word	0x40000800
 8047dc8:	40000c00 	.word	0x40000c00
 8047dcc:	40014000 	.word	0x40014000

08047dd0 <FMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FMC_NORSRAM_Init(FMC_NORSRAM_TypeDef *Device,
                                    FMC_NORSRAM_InitTypeDef *Init)
{
 8047dd0:	b480      	push	{r7}
 8047dd2:	b087      	sub	sp, #28
 8047dd4:	af00      	add	r7, sp, #0
 8047dd6:	6078      	str	r0, [r7, #4]
 8047dd8:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_PAGESIZE(Init->PageSize));
  assert_param(IS_FMC_NBL_SETUPTIME(Init->NBLSetupTime));
  assert_param(IS_FUNCTIONAL_STATE(Init->MaxChipSelectPulse));

  /* Disable NORSRAM Device */
  __FMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8047dda:	683b      	ldr	r3, [r7, #0]
 8047ddc:	681a      	ldr	r2, [r3, #0]
 8047dde:	687b      	ldr	r3, [r7, #4]
 8047de0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047de4:	683a      	ldr	r2, [r7, #0]
 8047de6:	6812      	ldr	r2, [r2, #0]
 8047de8:	f023 0101 	bic.w	r1, r3, #1
 8047dec:	687b      	ldr	r3, [r7, #4]
 8047dee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FMC_MEMORY_TYPE_NOR)
 8047df2:	683b      	ldr	r3, [r7, #0]
 8047df4:	689b      	ldr	r3, [r3, #8]
 8047df6:	2b08      	cmp	r3, #8
 8047df8:	d102      	bne.n	8047e00 <FMC_NORSRAM_Init+0x30>
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8047dfa:	2340      	movs	r3, #64	; 0x40
 8047dfc:	617b      	str	r3, [r7, #20]
 8047dfe:	e001      	b.n	8047e04 <FMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8047e00:	2300      	movs	r3, #0
 8047e02:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8047e04:	683b      	ldr	r3, [r7, #0]
 8047e06:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8047e08:	697b      	ldr	r3, [r7, #20]
 8047e0a:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8047e0c:	683b      	ldr	r3, [r7, #0]
 8047e0e:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8047e10:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8047e12:	683b      	ldr	r3, [r7, #0]
 8047e14:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8047e16:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8047e18:	683b      	ldr	r3, [r7, #0]
 8047e1a:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8047e1c:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8047e1e:	683b      	ldr	r3, [r7, #0]
 8047e20:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8047e22:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8047e24:	683b      	ldr	r3, [r7, #0]
 8047e26:	699b      	ldr	r3, [r3, #24]
              Init->WaitSignalPolarity      | \
 8047e28:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8047e2a:	683b      	ldr	r3, [r7, #0]
 8047e2c:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalActive        | \
 8047e2e:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8047e30:	683b      	ldr	r3, [r7, #0]
 8047e32:	6a1b      	ldr	r3, [r3, #32]
              Init->WriteOperation          | \
 8047e34:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8047e36:	683b      	ldr	r3, [r7, #0]
 8047e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
              Init->WaitSignal              | \
 8047e3a:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8047e3c:	683b      	ldr	r3, [r7, #0]
 8047e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              Init->ExtendedMode            | \
 8047e40:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8047e42:	683b      	ldr	r3, [r7, #0]
 8047e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  btcr_reg = (flashaccess                   | \
 8047e46:	4313      	orrs	r3, r2
 8047e48:	613b      	str	r3, [r7, #16]

  btcr_reg |= Init->ContinuousClock;
 8047e4a:	683b      	ldr	r3, [r7, #0]
 8047e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047e4e:	693a      	ldr	r2, [r7, #16]
 8047e50:	4313      	orrs	r3, r2
 8047e52:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->WriteFifo;
 8047e54:	683b      	ldr	r3, [r7, #0]
 8047e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047e58:	693a      	ldr	r2, [r7, #16]
 8047e5a:	4313      	orrs	r3, r2
 8047e5c:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->NBLSetupTime;
 8047e5e:	683b      	ldr	r3, [r7, #0]
 8047e60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8047e62:	693a      	ldr	r2, [r7, #16]
 8047e64:	4313      	orrs	r3, r2
 8047e66:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->PageSize;
 8047e68:	683b      	ldr	r3, [r7, #0]
 8047e6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8047e6c:	693a      	ldr	r2, [r7, #16]
 8047e6e:	4313      	orrs	r3, r2
 8047e70:	613b      	str	r3, [r7, #16]

  mask = (FMC_BCRx_MBKEN                |
 8047e72:	4b3e      	ldr	r3, [pc, #248]	; (8047f6c <FMC_NORSRAM_Init+0x19c>)
 8047e74:	60fb      	str	r3, [r7, #12]
          FMC_BCRx_WAITEN               |
          FMC_BCRx_EXTMOD               |
          FMC_BCRx_ASYNCWAIT            |
          FMC_BCRx_CBURSTRW);

  mask |= FMC_BCR1_CCLKEN;
 8047e76:	68fb      	ldr	r3, [r7, #12]
 8047e78:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8047e7c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCR1_WFDIS;
 8047e7e:	68fb      	ldr	r3, [r7, #12]
 8047e80:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8047e84:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_NBLSET;
 8047e86:	68fb      	ldr	r3, [r7, #12]
 8047e88:	f443 0340 	orr.w	r3, r3, #12582912	; 0xc00000
 8047e8c:	60fb      	str	r3, [r7, #12]
  mask |= FMC_BCRx_CPSIZE;
 8047e8e:	68fb      	ldr	r3, [r7, #12]
 8047e90:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
 8047e94:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8047e96:	683b      	ldr	r3, [r7, #0]
 8047e98:	681a      	ldr	r2, [r3, #0]
 8047e9a:	687b      	ldr	r3, [r7, #4]
 8047e9c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8047ea0:	68fb      	ldr	r3, [r7, #12]
 8047ea2:	43db      	mvns	r3, r3
 8047ea4:	ea02 0103 	and.w	r1, r2, r3
 8047ea8:	683b      	ldr	r3, [r7, #0]
 8047eaa:	681a      	ldr	r2, [r3, #0]
 8047eac:	693b      	ldr	r3, [r7, #16]
 8047eae:	4319      	orrs	r1, r3
 8047eb0:	687b      	ldr	r3, [r7, #4]
 8047eb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Configure synchronous mode when Continuous clock is enabled for bank2..4 */
  if ((Init->ContinuousClock == FMC_CONTINUOUS_CLOCK_SYNC_ASYNC) && (Init->NSBank != FMC_NORSRAM_BANK1))
 8047eb6:	683b      	ldr	r3, [r7, #0]
 8047eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047eba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8047ebe:	d10c      	bne.n	8047eda <FMC_NORSRAM_Init+0x10a>
 8047ec0:	683b      	ldr	r3, [r7, #0]
 8047ec2:	681b      	ldr	r3, [r3, #0]
 8047ec4:	2b00      	cmp	r3, #0
 8047ec6:	d008      	beq.n	8047eda <FMC_NORSRAM_Init+0x10a>
  {
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN, Init->ContinuousClock);
 8047ec8:	687b      	ldr	r3, [r7, #4]
 8047eca:	681b      	ldr	r3, [r3, #0]
 8047ecc:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8047ed0:	683b      	ldr	r3, [r7, #0]
 8047ed2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8047ed4:	431a      	orrs	r2, r3
 8047ed6:	687b      	ldr	r3, [r7, #4]
 8047ed8:	601a      	str	r2, [r3, #0]
  }

  if (Init->NSBank != FMC_NORSRAM_BANK1)
 8047eda:	683b      	ldr	r3, [r7, #0]
 8047edc:	681b      	ldr	r3, [r3, #0]
 8047ede:	2b00      	cmp	r3, #0
 8047ee0:	d006      	beq.n	8047ef0 <FMC_NORSRAM_Init+0x120>
  {
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
 8047ee2:	687b      	ldr	r3, [r7, #4]
 8047ee4:	681a      	ldr	r2, [r3, #0]
 8047ee6:	683b      	ldr	r3, [r7, #0]
 8047ee8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8047eea:	431a      	orrs	r2, r3
 8047eec:	687b      	ldr	r3, [r7, #4]
 8047eee:	601a      	str	r2, [r3, #0]
  }

  /* Check PSRAM chip select counter state */
  if (Init->MaxChipSelectPulse == ENABLE)
 8047ef0:	683b      	ldr	r3, [r7, #0]
 8047ef2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8047ef6:	2b01      	cmp	r3, #1
 8047ef8:	d12f      	bne.n	8047f5a <FMC_NORSRAM_Init+0x18a>
  {
    /* Check the parameters */
    assert_param(IS_FMC_MAX_CHIP_SELECT_PULSE_TIME(Init->MaxChipSelectPulseTime));

    /* Configure PSRAM chip select counter value */
    MODIFY_REG(Device->PCSCNTR, FMC_PCSCNTR_CSCOUNT, (uint32_t)(Init->MaxChipSelectPulseTime));
 8047efa:	687b      	ldr	r3, [r7, #4]
 8047efc:	6a1b      	ldr	r3, [r3, #32]
 8047efe:	0c1b      	lsrs	r3, r3, #16
 8047f00:	041b      	lsls	r3, r3, #16
 8047f02:	683a      	ldr	r2, [r7, #0]
 8047f04:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8047f06:	431a      	orrs	r2, r3
 8047f08:	687b      	ldr	r3, [r7, #4]
 8047f0a:	621a      	str	r2, [r3, #32]

    /* Enable PSRAM chip select counter for the bank */
    switch (Init->NSBank)
 8047f0c:	683b      	ldr	r3, [r7, #0]
 8047f0e:	681b      	ldr	r3, [r3, #0]
 8047f10:	2b04      	cmp	r3, #4
 8047f12:	d014      	beq.n	8047f3e <FMC_NORSRAM_Init+0x16e>
 8047f14:	2b04      	cmp	r3, #4
 8047f16:	d819      	bhi.n	8047f4c <FMC_NORSRAM_Init+0x17c>
 8047f18:	2b00      	cmp	r3, #0
 8047f1a:	d002      	beq.n	8047f22 <FMC_NORSRAM_Init+0x152>
 8047f1c:	2b02      	cmp	r3, #2
 8047f1e:	d007      	beq.n	8047f30 <FMC_NORSRAM_Init+0x160>
 8047f20:	e014      	b.n	8047f4c <FMC_NORSRAM_Init+0x17c>
    {
      case FMC_NORSRAM_BANK1 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB1EN);
 8047f22:	687b      	ldr	r3, [r7, #4]
 8047f24:	6a1b      	ldr	r3, [r3, #32]
 8047f26:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8047f2a:	687b      	ldr	r3, [r7, #4]
 8047f2c:	621a      	str	r2, [r3, #32]
        break;
 8047f2e:	e015      	b.n	8047f5c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK2 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB2EN);
 8047f30:	687b      	ldr	r3, [r7, #4]
 8047f32:	6a1b      	ldr	r3, [r3, #32]
 8047f34:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8047f38:	687b      	ldr	r3, [r7, #4]
 8047f3a:	621a      	str	r2, [r3, #32]
        break;
 8047f3c:	e00e      	b.n	8047f5c <FMC_NORSRAM_Init+0x18c>

      case FMC_NORSRAM_BANK3 :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB3EN);
 8047f3e:	687b      	ldr	r3, [r7, #4]
 8047f40:	6a1b      	ldr	r3, [r3, #32]
 8047f42:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8047f46:	687b      	ldr	r3, [r7, #4]
 8047f48:	621a      	str	r2, [r3, #32]
        break;
 8047f4a:	e007      	b.n	8047f5c <FMC_NORSRAM_Init+0x18c>

      default :
        SET_BIT(Device->PCSCNTR, FMC_PCSCNTR_CNTB4EN);
 8047f4c:	687b      	ldr	r3, [r7, #4]
 8047f4e:	6a1b      	ldr	r3, [r3, #32]
 8047f50:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8047f54:	687b      	ldr	r3, [r7, #4]
 8047f56:	621a      	str	r2, [r3, #32]
        break;
 8047f58:	e000      	b.n	8047f5c <FMC_NORSRAM_Init+0x18c>
    }
  }
 8047f5a:	bf00      	nop

  return HAL_OK;
 8047f5c:	2300      	movs	r3, #0
}
 8047f5e:	4618      	mov	r0, r3
 8047f60:	371c      	adds	r7, #28
 8047f62:	46bd      	mov	sp, r7
 8047f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8047f68:	4770      	bx	lr
 8047f6a:	bf00      	nop
 8047f6c:	0008fb7f 	.word	0x0008fb7f

08047f70 <FMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Timing_Init(FMC_NORSRAM_TypeDef *Device,
                                          FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8047f70:	b480      	push	{r7}
 8047f72:	b087      	sub	sp, #28
 8047f74:	af00      	add	r7, sp, #0
 8047f76:	60f8      	str	r0, [r7, #12]
 8047f78:	60b9      	str	r1, [r7, #8]
 8047f7a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FMC_NORSRAM_BANK(Bank));

  /* Set FMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8047f7c:	687b      	ldr	r3, [r7, #4]
 8047f7e:	1c5a      	adds	r2, r3, #1
 8047f80:	68fb      	ldr	r3, [r7, #12]
 8047f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8047f86:	68bb      	ldr	r3, [r7, #8]
 8047f88:	681a      	ldr	r2, [r3, #0]
 8047f8a:	68bb      	ldr	r3, [r7, #8]
 8047f8c:	685b      	ldr	r3, [r3, #4]
 8047f8e:	011b      	lsls	r3, r3, #4
 8047f90:	431a      	orrs	r2, r3
 8047f92:	68bb      	ldr	r3, [r7, #8]
 8047f94:	689b      	ldr	r3, [r3, #8]
 8047f96:	021b      	lsls	r3, r3, #8
 8047f98:	431a      	orrs	r2, r3
 8047f9a:	68bb      	ldr	r3, [r7, #8]
 8047f9c:	68db      	ldr	r3, [r3, #12]
 8047f9e:	079b      	lsls	r3, r3, #30
 8047fa0:	431a      	orrs	r2, r3
 8047fa2:	68bb      	ldr	r3, [r7, #8]
 8047fa4:	691b      	ldr	r3, [r3, #16]
 8047fa6:	041b      	lsls	r3, r3, #16
 8047fa8:	431a      	orrs	r2, r3
 8047faa:	68bb      	ldr	r3, [r7, #8]
 8047fac:	695b      	ldr	r3, [r3, #20]
 8047fae:	3b01      	subs	r3, #1
 8047fb0:	051b      	lsls	r3, r3, #20
 8047fb2:	431a      	orrs	r2, r3
 8047fb4:	68bb      	ldr	r3, [r7, #8]
 8047fb6:	699b      	ldr	r3, [r3, #24]
 8047fb8:	3b02      	subs	r3, #2
 8047fba:	061b      	lsls	r3, r3, #24
 8047fbc:	ea42 0103 	orr.w	r1, r2, r3
 8047fc0:	68bb      	ldr	r3, [r7, #8]
 8047fc2:	69db      	ldr	r3, [r3, #28]
 8047fc4:	687a      	ldr	r2, [r7, #4]
 8047fc6:	3201      	adds	r2, #1
 8047fc8:	4319      	orrs	r1, r3
 8047fca:	68fb      	ldr	r3, [r7, #12]
 8047fcc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
                                                       (((Timing->CLKDivision) - 1U)     << FMC_BTRx_CLKDIV_Pos)  |
                                                       (((Timing->DataLatency) - 2U)     << FMC_BTRx_DATLAT_Pos)  |
                                                       (Timing->AccessMode)));

  /* Configure Clock division value (in NORSRAM bank 1) when continuous clock is enabled */
  if (HAL_IS_BIT_SET(Device->BTCR[FMC_NORSRAM_BANK1], FMC_BCR1_CCLKEN))
 8047fd0:	68fb      	ldr	r3, [r7, #12]
 8047fd2:	681b      	ldr	r3, [r3, #0]
 8047fd4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8047fd8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8047fdc:	d113      	bne.n	8048006 <FMC_NORSRAM_Timing_Init+0x96>
  {
    tmpr = (uint32_t)(Device->BTCR[FMC_NORSRAM_BANK1 + 1U] & ~((0x0FU) << FMC_BTRx_CLKDIV_Pos));
 8047fde:	68fb      	ldr	r3, [r7, #12]
 8047fe0:	685b      	ldr	r3, [r3, #4]
 8047fe2:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8047fe6:	617b      	str	r3, [r7, #20]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FMC_BTRx_CLKDIV_Pos);
 8047fe8:	68bb      	ldr	r3, [r7, #8]
 8047fea:	695b      	ldr	r3, [r3, #20]
 8047fec:	3b01      	subs	r3, #1
 8047fee:	051b      	lsls	r3, r3, #20
 8047ff0:	697a      	ldr	r2, [r7, #20]
 8047ff2:	4313      	orrs	r3, r2
 8047ff4:	617b      	str	r3, [r7, #20]
    MODIFY_REG(Device->BTCR[FMC_NORSRAM_BANK1 + 1U], FMC_BTRx_CLKDIV, tmpr);
 8047ff6:	68fb      	ldr	r3, [r7, #12]
 8047ff8:	685b      	ldr	r3, [r3, #4]
 8047ffa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8047ffe:	697b      	ldr	r3, [r7, #20]
 8048000:	431a      	orrs	r2, r3
 8048002:	68fb      	ldr	r3, [r7, #12]
 8048004:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8048006:	2300      	movs	r3, #0
}
 8048008:	4618      	mov	r0, r3
 804800a:	371c      	adds	r7, #28
 804800c:	46bd      	mov	sp, r7
 804800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048012:	4770      	bx	lr

08048014 <FMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_NORSRAM_Extended_Timing_Init(FMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8048014:	b480      	push	{r7}
 8048016:	b085      	sub	sp, #20
 8048018:	af00      	add	r7, sp, #0
 804801a:	60f8      	str	r0, [r7, #12]
 804801c:	60b9      	str	r1, [r7, #8]
 804801e:	607a      	str	r2, [r7, #4]
 8048020:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FMC_EXTENDED_MODE_ENABLE)
 8048022:	683b      	ldr	r3, [r7, #0]
 8048024:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8048028:	d121      	bne.n	804806e <FMC_NORSRAM_Extended_Timing_Init+0x5a>
    assert_param(IS_FMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 804802a:	68fb      	ldr	r3, [r7, #12]
 804802c:	687a      	ldr	r2, [r7, #4]
 804802e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8048032:	f003 627f 	and.w	r2, r3, #267386880	; 0xff00000
 8048036:	68bb      	ldr	r3, [r7, #8]
 8048038:	6819      	ldr	r1, [r3, #0]
 804803a:	68bb      	ldr	r3, [r7, #8]
 804803c:	685b      	ldr	r3, [r3, #4]
 804803e:	011b      	lsls	r3, r3, #4
 8048040:	4319      	orrs	r1, r3
 8048042:	68bb      	ldr	r3, [r7, #8]
 8048044:	689b      	ldr	r3, [r3, #8]
 8048046:	021b      	lsls	r3, r3, #8
 8048048:	4319      	orrs	r1, r3
 804804a:	68bb      	ldr	r3, [r7, #8]
 804804c:	68db      	ldr	r3, [r3, #12]
 804804e:	079b      	lsls	r3, r3, #30
 8048050:	4319      	orrs	r1, r3
 8048052:	68bb      	ldr	r3, [r7, #8]
 8048054:	69db      	ldr	r3, [r3, #28]
 8048056:	4319      	orrs	r1, r3
 8048058:	68bb      	ldr	r3, [r7, #8]
 804805a:	691b      	ldr	r3, [r3, #16]
 804805c:	041b      	lsls	r3, r3, #16
 804805e:	430b      	orrs	r3, r1
 8048060:	ea42 0103 	orr.w	r1, r2, r3
 8048064:	68fb      	ldr	r3, [r7, #12]
 8048066:	687a      	ldr	r2, [r7, #4]
 8048068:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 804806c:	e005      	b.n	804807a <FMC_NORSRAM_Extended_Timing_Init+0x66>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FMC_BWTRx_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 804806e:	68fb      	ldr	r3, [r7, #12]
 8048070:	687a      	ldr	r2, [r7, #4]
 8048072:	f06f 4170 	mvn.w	r1, #4026531840	; 0xf0000000
 8048076:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 804807a:	2300      	movs	r3, #0
}
 804807c:	4618      	mov	r0, r3
 804807e:	3714      	adds	r7, #20
 8048080:	46bd      	mov	sp, r7
 8048082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048086:	4770      	bx	lr

08048088 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8048088:	b480      	push	{r7}
 804808a:	b08b      	sub	sp, #44	; 0x2c
 804808c:	af00      	add	r7, sp, #0
 804808e:	60f8      	str	r0, [r7, #12]
 8048090:	60b9      	str	r1, [r7, #8]
 8048092:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8048094:	68fb      	ldr	r3, [r7, #12]
 8048096:	681a      	ldr	r2, [r3, #0]
 8048098:	68bb      	ldr	r3, [r7, #8]
 804809a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804809c:	697b      	ldr	r3, [r7, #20]
 804809e:	fa93 f3a3 	rbit	r3, r3
 80480a2:	613b      	str	r3, [r7, #16]
  return result;
 80480a4:	693b      	ldr	r3, [r7, #16]
 80480a6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80480a8:	69bb      	ldr	r3, [r7, #24]
 80480aa:	2b00      	cmp	r3, #0
 80480ac:	d101      	bne.n	80480b2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80480ae:	2320      	movs	r3, #32
 80480b0:	e003      	b.n	80480ba <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80480b2:	69bb      	ldr	r3, [r7, #24]
 80480b4:	fab3 f383 	clz	r3, r3
 80480b8:	b2db      	uxtb	r3, r3
 80480ba:	005b      	lsls	r3, r3, #1
 80480bc:	2103      	movs	r1, #3
 80480be:	fa01 f303 	lsl.w	r3, r1, r3
 80480c2:	43db      	mvns	r3, r3
 80480c4:	401a      	ands	r2, r3
 80480c6:	68bb      	ldr	r3, [r7, #8]
 80480c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80480ca:	6a3b      	ldr	r3, [r7, #32]
 80480cc:	fa93 f3a3 	rbit	r3, r3
 80480d0:	61fb      	str	r3, [r7, #28]
  return result;
 80480d2:	69fb      	ldr	r3, [r7, #28]
 80480d4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80480d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80480d8:	2b00      	cmp	r3, #0
 80480da:	d101      	bne.n	80480e0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80480dc:	2320      	movs	r3, #32
 80480de:	e003      	b.n	80480e8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80480e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80480e2:	fab3 f383 	clz	r3, r3
 80480e6:	b2db      	uxtb	r3, r3
 80480e8:	005b      	lsls	r3, r3, #1
 80480ea:	6879      	ldr	r1, [r7, #4]
 80480ec:	fa01 f303 	lsl.w	r3, r1, r3
 80480f0:	431a      	orrs	r2, r3
 80480f2:	68fb      	ldr	r3, [r7, #12]
 80480f4:	601a      	str	r2, [r3, #0]
}
 80480f6:	bf00      	nop
 80480f8:	372c      	adds	r7, #44	; 0x2c
 80480fa:	46bd      	mov	sp, r7
 80480fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048100:	4770      	bx	lr

08048102 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8048102:	b480      	push	{r7}
 8048104:	b085      	sub	sp, #20
 8048106:	af00      	add	r7, sp, #0
 8048108:	60f8      	str	r0, [r7, #12]
 804810a:	60b9      	str	r1, [r7, #8]
 804810c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 804810e:	68fb      	ldr	r3, [r7, #12]
 8048110:	685a      	ldr	r2, [r3, #4]
 8048112:	68bb      	ldr	r3, [r7, #8]
 8048114:	43db      	mvns	r3, r3
 8048116:	401a      	ands	r2, r3
 8048118:	68bb      	ldr	r3, [r7, #8]
 804811a:	6879      	ldr	r1, [r7, #4]
 804811c:	fb01 f303 	mul.w	r3, r1, r3
 8048120:	431a      	orrs	r2, r3
 8048122:	68fb      	ldr	r3, [r7, #12]
 8048124:	605a      	str	r2, [r3, #4]
}
 8048126:	bf00      	nop
 8048128:	3714      	adds	r7, #20
 804812a:	46bd      	mov	sp, r7
 804812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048130:	4770      	bx	lr

08048132 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8048132:	b480      	push	{r7}
 8048134:	b08b      	sub	sp, #44	; 0x2c
 8048136:	af00      	add	r7, sp, #0
 8048138:	60f8      	str	r0, [r7, #12]
 804813a:	60b9      	str	r1, [r7, #8]
 804813c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 804813e:	68fb      	ldr	r3, [r7, #12]
 8048140:	689a      	ldr	r2, [r3, #8]
 8048142:	68bb      	ldr	r3, [r7, #8]
 8048144:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8048146:	697b      	ldr	r3, [r7, #20]
 8048148:	fa93 f3a3 	rbit	r3, r3
 804814c:	613b      	str	r3, [r7, #16]
  return result;
 804814e:	693b      	ldr	r3, [r7, #16]
 8048150:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8048152:	69bb      	ldr	r3, [r7, #24]
 8048154:	2b00      	cmp	r3, #0
 8048156:	d101      	bne.n	804815c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8048158:	2320      	movs	r3, #32
 804815a:	e003      	b.n	8048164 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 804815c:	69bb      	ldr	r3, [r7, #24]
 804815e:	fab3 f383 	clz	r3, r3
 8048162:	b2db      	uxtb	r3, r3
 8048164:	005b      	lsls	r3, r3, #1
 8048166:	2103      	movs	r1, #3
 8048168:	fa01 f303 	lsl.w	r3, r1, r3
 804816c:	43db      	mvns	r3, r3
 804816e:	401a      	ands	r2, r3
 8048170:	68bb      	ldr	r3, [r7, #8]
 8048172:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8048174:	6a3b      	ldr	r3, [r7, #32]
 8048176:	fa93 f3a3 	rbit	r3, r3
 804817a:	61fb      	str	r3, [r7, #28]
  return result;
 804817c:	69fb      	ldr	r3, [r7, #28]
 804817e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8048180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048182:	2b00      	cmp	r3, #0
 8048184:	d101      	bne.n	804818a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8048186:	2320      	movs	r3, #32
 8048188:	e003      	b.n	8048192 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 804818a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804818c:	fab3 f383 	clz	r3, r3
 8048190:	b2db      	uxtb	r3, r3
 8048192:	005b      	lsls	r3, r3, #1
 8048194:	6879      	ldr	r1, [r7, #4]
 8048196:	fa01 f303 	lsl.w	r3, r1, r3
 804819a:	431a      	orrs	r2, r3
 804819c:	68fb      	ldr	r3, [r7, #12]
 804819e:	609a      	str	r2, [r3, #8]
             (Speed << (POSITION_VAL(Pin) * 2U)));
}
 80481a0:	bf00      	nop
 80481a2:	372c      	adds	r7, #44	; 0x2c
 80481a4:	46bd      	mov	sp, r7
 80481a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80481aa:	4770      	bx	lr

080481ac <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80481ac:	b480      	push	{r7}
 80481ae:	b08b      	sub	sp, #44	; 0x2c
 80481b0:	af00      	add	r7, sp, #0
 80481b2:	60f8      	str	r0, [r7, #12]
 80481b4:	60b9      	str	r1, [r7, #8]
 80481b6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80481b8:	68fb      	ldr	r3, [r7, #12]
 80481ba:	68da      	ldr	r2, [r3, #12]
 80481bc:	68bb      	ldr	r3, [r7, #8]
 80481be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80481c0:	697b      	ldr	r3, [r7, #20]
 80481c2:	fa93 f3a3 	rbit	r3, r3
 80481c6:	613b      	str	r3, [r7, #16]
  return result;
 80481c8:	693b      	ldr	r3, [r7, #16]
 80481ca:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80481cc:	69bb      	ldr	r3, [r7, #24]
 80481ce:	2b00      	cmp	r3, #0
 80481d0:	d101      	bne.n	80481d6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80481d2:	2320      	movs	r3, #32
 80481d4:	e003      	b.n	80481de <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80481d6:	69bb      	ldr	r3, [r7, #24]
 80481d8:	fab3 f383 	clz	r3, r3
 80481dc:	b2db      	uxtb	r3, r3
 80481de:	005b      	lsls	r3, r3, #1
 80481e0:	2103      	movs	r1, #3
 80481e2:	fa01 f303 	lsl.w	r3, r1, r3
 80481e6:	43db      	mvns	r3, r3
 80481e8:	401a      	ands	r2, r3
 80481ea:	68bb      	ldr	r3, [r7, #8]
 80481ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80481ee:	6a3b      	ldr	r3, [r7, #32]
 80481f0:	fa93 f3a3 	rbit	r3, r3
 80481f4:	61fb      	str	r3, [r7, #28]
  return result;
 80481f6:	69fb      	ldr	r3, [r7, #28]
 80481f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80481fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80481fc:	2b00      	cmp	r3, #0
 80481fe:	d101      	bne.n	8048204 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8048200:	2320      	movs	r3, #32
 8048202:	e003      	b.n	804820c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8048204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048206:	fab3 f383 	clz	r3, r3
 804820a:	b2db      	uxtb	r3, r3
 804820c:	005b      	lsls	r3, r3, #1
 804820e:	6879      	ldr	r1, [r7, #4]
 8048210:	fa01 f303 	lsl.w	r3, r1, r3
 8048214:	431a      	orrs	r2, r3
 8048216:	68fb      	ldr	r3, [r7, #12]
 8048218:	60da      	str	r2, [r3, #12]
}
 804821a:	bf00      	nop
 804821c:	372c      	adds	r7, #44	; 0x2c
 804821e:	46bd      	mov	sp, r7
 8048220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048224:	4770      	bx	lr

08048226 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8048226:	b480      	push	{r7}
 8048228:	b08b      	sub	sp, #44	; 0x2c
 804822a:	af00      	add	r7, sp, #0
 804822c:	60f8      	str	r0, [r7, #12]
 804822e:	60b9      	str	r1, [r7, #8]
 8048230:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8048232:	68fb      	ldr	r3, [r7, #12]
 8048234:	6a1a      	ldr	r2, [r3, #32]
 8048236:	68bb      	ldr	r3, [r7, #8]
 8048238:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804823a:	697b      	ldr	r3, [r7, #20]
 804823c:	fa93 f3a3 	rbit	r3, r3
 8048240:	613b      	str	r3, [r7, #16]
  return result;
 8048242:	693b      	ldr	r3, [r7, #16]
 8048244:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8048246:	69bb      	ldr	r3, [r7, #24]
 8048248:	2b00      	cmp	r3, #0
 804824a:	d101      	bne.n	8048250 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 804824c:	2320      	movs	r3, #32
 804824e:	e003      	b.n	8048258 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8048250:	69bb      	ldr	r3, [r7, #24]
 8048252:	fab3 f383 	clz	r3, r3
 8048256:	b2db      	uxtb	r3, r3
 8048258:	009b      	lsls	r3, r3, #2
 804825a:	210f      	movs	r1, #15
 804825c:	fa01 f303 	lsl.w	r3, r1, r3
 8048260:	43db      	mvns	r3, r3
 8048262:	401a      	ands	r2, r3
 8048264:	68bb      	ldr	r3, [r7, #8]
 8048266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8048268:	6a3b      	ldr	r3, [r7, #32]
 804826a:	fa93 f3a3 	rbit	r3, r3
 804826e:	61fb      	str	r3, [r7, #28]
  return result;
 8048270:	69fb      	ldr	r3, [r7, #28]
 8048272:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8048274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048276:	2b00      	cmp	r3, #0
 8048278:	d101      	bne.n	804827e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 804827a:	2320      	movs	r3, #32
 804827c:	e003      	b.n	8048286 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 804827e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8048280:	fab3 f383 	clz	r3, r3
 8048284:	b2db      	uxtb	r3, r3
 8048286:	009b      	lsls	r3, r3, #2
 8048288:	6879      	ldr	r1, [r7, #4]
 804828a:	fa01 f303 	lsl.w	r3, r1, r3
 804828e:	431a      	orrs	r2, r3
 8048290:	68fb      	ldr	r3, [r7, #12]
 8048292:	621a      	str	r2, [r3, #32]
             (Alternate << (POSITION_VAL(Pin) * 4U)));
}
 8048294:	bf00      	nop
 8048296:	372c      	adds	r7, #44	; 0x2c
 8048298:	46bd      	mov	sp, r7
 804829a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804829e:	4770      	bx	lr

080482a0 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 80482a0:	b480      	push	{r7}
 80482a2:	b08b      	sub	sp, #44	; 0x2c
 80482a4:	af00      	add	r7, sp, #0
 80482a6:	60f8      	str	r0, [r7, #12]
 80482a8:	60b9      	str	r1, [r7, #8]
 80482aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80482ac:	68fb      	ldr	r3, [r7, #12]
 80482ae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80482b0:	68bb      	ldr	r3, [r7, #8]
 80482b2:	0a1b      	lsrs	r3, r3, #8
 80482b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80482b6:	697b      	ldr	r3, [r7, #20]
 80482b8:	fa93 f3a3 	rbit	r3, r3
 80482bc:	613b      	str	r3, [r7, #16]
  return result;
 80482be:	693b      	ldr	r3, [r7, #16]
 80482c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80482c2:	69bb      	ldr	r3, [r7, #24]
 80482c4:	2b00      	cmp	r3, #0
 80482c6:	d101      	bne.n	80482cc <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80482c8:	2320      	movs	r3, #32
 80482ca:	e003      	b.n	80482d4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80482cc:	69bb      	ldr	r3, [r7, #24]
 80482ce:	fab3 f383 	clz	r3, r3
 80482d2:	b2db      	uxtb	r3, r3
 80482d4:	009b      	lsls	r3, r3, #2
 80482d6:	210f      	movs	r1, #15
 80482d8:	fa01 f303 	lsl.w	r3, r1, r3
 80482dc:	43db      	mvns	r3, r3
 80482de:	401a      	ands	r2, r3
 80482e0:	68bb      	ldr	r3, [r7, #8]
 80482e2:	0a1b      	lsrs	r3, r3, #8
 80482e4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80482e6:	6a3b      	ldr	r3, [r7, #32]
 80482e8:	fa93 f3a3 	rbit	r3, r3
 80482ec:	61fb      	str	r3, [r7, #28]
  return result;
 80482ee:	69fb      	ldr	r3, [r7, #28]
 80482f0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80482f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80482f4:	2b00      	cmp	r3, #0
 80482f6:	d101      	bne.n	80482fc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80482f8:	2320      	movs	r3, #32
 80482fa:	e003      	b.n	8048304 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80482fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80482fe:	fab3 f383 	clz	r3, r3
 8048302:	b2db      	uxtb	r3, r3
 8048304:	009b      	lsls	r3, r3, #2
 8048306:	6879      	ldr	r1, [r7, #4]
 8048308:	fa01 f303 	lsl.w	r3, r1, r3
 804830c:	431a      	orrs	r2, r3
 804830e:	68fb      	ldr	r3, [r7, #12]
 8048310:	625a      	str	r2, [r3, #36]	; 0x24
             (Alternate << (POSITION_VAL(Pin >> 8U) * 4U)));
}
 8048312:	bf00      	nop
 8048314:	372c      	adds	r7, #44	; 0x2c
 8048316:	46bd      	mov	sp, r7
 8048318:	f85d 7b04 	ldr.w	r7, [sp], #4
 804831c:	4770      	bx	lr

0804831e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 804831e:	b580      	push	{r7, lr}
 8048320:	b088      	sub	sp, #32
 8048322:	af00      	add	r7, sp, #0
 8048324:	6078      	str	r0, [r7, #4]
 8048326:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8048328:	683b      	ldr	r3, [r7, #0]
 804832a:	681b      	ldr	r3, [r3, #0]
 804832c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 804832e:	693b      	ldr	r3, [r7, #16]
 8048330:	fa93 f3a3 	rbit	r3, r3
 8048334:	60fb      	str	r3, [r7, #12]
  return result;
 8048336:	68fb      	ldr	r3, [r7, #12]
 8048338:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 804833a:	697b      	ldr	r3, [r7, #20]
 804833c:	2b00      	cmp	r3, #0
 804833e:	d101      	bne.n	8048344 <LL_GPIO_Init+0x26>
    return 32U;
 8048340:	2320      	movs	r3, #32
 8048342:	e003      	b.n	804834c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8048344:	697b      	ldr	r3, [r7, #20]
 8048346:	fab3 f383 	clz	r3, r3
 804834a:	b2db      	uxtb	r3, r3
 804834c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 804834e:	e047      	b.n	80483e0 <LL_GPIO_Init+0xc2>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (1UL << pinpos);
 8048350:	683b      	ldr	r3, [r7, #0]
 8048352:	681a      	ldr	r2, [r3, #0]
 8048354:	2101      	movs	r1, #1
 8048356:	69fb      	ldr	r3, [r7, #28]
 8048358:	fa01 f303 	lsl.w	r3, r1, r3
 804835c:	4013      	ands	r3, r2
 804835e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0U)
 8048360:	69bb      	ldr	r3, [r7, #24]
 8048362:	2b00      	cmp	r3, #0
 8048364:	d039      	beq.n	80483da <LL_GPIO_Init+0xbc>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8048366:	683b      	ldr	r3, [r7, #0]
 8048368:	685b      	ldr	r3, [r3, #4]
 804836a:	2b01      	cmp	r3, #1
 804836c:	d003      	beq.n	8048376 <LL_GPIO_Init+0x58>
 804836e:	683b      	ldr	r3, [r7, #0]
 8048370:	685b      	ldr	r3, [r3, #4]
 8048372:	2b02      	cmp	r3, #2
 8048374:	d10d      	bne.n	8048392 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8048376:	683b      	ldr	r3, [r7, #0]
 8048378:	689b      	ldr	r3, [r3, #8]
 804837a:	461a      	mov	r2, r3
 804837c:	69b9      	ldr	r1, [r7, #24]
 804837e:	6878      	ldr	r0, [r7, #4]
 8048380:	f7ff fed7 	bl	8048132 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8048384:	683b      	ldr	r3, [r7, #0]
 8048386:	68db      	ldr	r3, [r3, #12]
 8048388:	461a      	mov	r2, r3
 804838a:	69b9      	ldr	r1, [r7, #24]
 804838c:	6878      	ldr	r0, [r7, #4]
 804838e:	f7ff feb8 	bl	8048102 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8048392:	683b      	ldr	r3, [r7, #0]
 8048394:	691b      	ldr	r3, [r3, #16]
 8048396:	461a      	mov	r2, r3
 8048398:	69b9      	ldr	r1, [r7, #24]
 804839a:	6878      	ldr	r0, [r7, #4]
 804839c:	f7ff ff06 	bl	80481ac <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80483a0:	683b      	ldr	r3, [r7, #0]
 80483a2:	685b      	ldr	r3, [r3, #4]
 80483a4:	2b02      	cmp	r3, #2
 80483a6:	d111      	bne.n	80483cc <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80483a8:	69bb      	ldr	r3, [r7, #24]
 80483aa:	2bff      	cmp	r3, #255	; 0xff
 80483ac:	d807      	bhi.n	80483be <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80483ae:	683b      	ldr	r3, [r7, #0]
 80483b0:	695b      	ldr	r3, [r3, #20]
 80483b2:	461a      	mov	r2, r3
 80483b4:	69b9      	ldr	r1, [r7, #24]
 80483b6:	6878      	ldr	r0, [r7, #4]
 80483b8:	f7ff ff35 	bl	8048226 <LL_GPIO_SetAFPin_0_7>
 80483bc:	e006      	b.n	80483cc <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80483be:	683b      	ldr	r3, [r7, #0]
 80483c0:	695b      	ldr	r3, [r3, #20]
 80483c2:	461a      	mov	r2, r3
 80483c4:	69b9      	ldr	r1, [r7, #24]
 80483c6:	6878      	ldr	r0, [r7, #4]
 80483c8:	f7ff ff6a 	bl	80482a0 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80483cc:	683b      	ldr	r3, [r7, #0]
 80483ce:	685b      	ldr	r3, [r3, #4]
 80483d0:	461a      	mov	r2, r3
 80483d2:	69b9      	ldr	r1, [r7, #24]
 80483d4:	6878      	ldr	r0, [r7, #4]
 80483d6:	f7ff fe57 	bl	8048088 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80483da:	69fb      	ldr	r3, [r7, #28]
 80483dc:	3301      	adds	r3, #1
 80483de:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80483e0:	683b      	ldr	r3, [r7, #0]
 80483e2:	681a      	ldr	r2, [r3, #0]
 80483e4:	69fb      	ldr	r3, [r7, #28]
 80483e6:	fa22 f303 	lsr.w	r3, r2, r3
 80483ea:	2b00      	cmp	r3, #0
 80483ec:	d1b0      	bne.n	8048350 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80483ee:	2300      	movs	r3, #0
}
 80483f0:	4618      	mov	r0, r3
 80483f2:	3720      	adds	r7, #32
 80483f4:	46bd      	mov	sp, r7
 80483f6:	bd80      	pop	{r7, pc}

080483f8 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80483f8:	b084      	sub	sp, #16
 80483fa:	b480      	push	{r7}
 80483fc:	b085      	sub	sp, #20
 80483fe:	af00      	add	r7, sp, #0
 8048400:	6078      	str	r0, [r7, #4]
 8048402:	f107 001c 	add.w	r0, r7, #28
 8048406:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 804840a:	2300      	movs	r3, #0
 804840c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 804840e:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 8048410:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 8048412:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8048414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockPowerSave      | \
 8048416:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8048418:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.BusWide             | \
 804841a:	431a      	orrs	r2, r3
             Init.ClockDiv
 804841c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.HardwareFlowControl | \
 804841e:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 8048420:	68fa      	ldr	r2, [r7, #12]
 8048422:	4313      	orrs	r3, r2
 8048424:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8048426:	687b      	ldr	r3, [r7, #4]
 8048428:	685a      	ldr	r2, [r3, #4]
 804842a:	4b07      	ldr	r3, [pc, #28]	; (8048448 <SDMMC_Init+0x50>)
 804842c:	4013      	ands	r3, r2
 804842e:	68fa      	ldr	r2, [r7, #12]
 8048430:	431a      	orrs	r2, r3
 8048432:	687b      	ldr	r3, [r7, #4]
 8048434:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8048436:	2300      	movs	r3, #0
}
 8048438:	4618      	mov	r0, r3
 804843a:	3714      	adds	r7, #20
 804843c:	46bd      	mov	sp, r7
 804843e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048442:	b004      	add	sp, #16
 8048444:	4770      	bx	lr
 8048446:	bf00      	nop
 8048448:	ffc02c00 	.word	0xffc02c00

0804844c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 804844c:	b480      	push	{r7}
 804844e:	b083      	sub	sp, #12
 8048450:	af00      	add	r7, sp, #0
 8048452:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8048454:	687b      	ldr	r3, [r7, #4]
 8048456:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 804845a:	4618      	mov	r0, r3
 804845c:	370c      	adds	r7, #12
 804845e:	46bd      	mov	sp, r7
 8048460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048464:	4770      	bx	lr

08048466 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8048466:	b480      	push	{r7}
 8048468:	b083      	sub	sp, #12
 804846a:	af00      	add	r7, sp, #0
 804846c:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 804846e:	687b      	ldr	r3, [r7, #4]
 8048470:	681b      	ldr	r3, [r3, #0]
 8048472:	f043 0203 	orr.w	r2, r3, #3
 8048476:	687b      	ldr	r3, [r7, #4]
 8048478:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 804847a:	2300      	movs	r3, #0
}
 804847c:	4618      	mov	r0, r3
 804847e:	370c      	adds	r7, #12
 8048480:	46bd      	mov	sp, r7
 8048482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048486:	4770      	bx	lr

08048488 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)
{
 8048488:	b480      	push	{r7}
 804848a:	b083      	sub	sp, #12
 804848c:	af00      	add	r7, sp, #0
 804848e:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 8048490:	687b      	ldr	r3, [r7, #4]
 8048492:	681b      	ldr	r3, [r3, #0]
 8048494:	f003 0303 	and.w	r3, r3, #3
}
 8048498:	4618      	mov	r0, r3
 804849a:	370c      	adds	r7, #12
 804849c:	46bd      	mov	sp, r7
 804849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484a2:	4770      	bx	lr

080484a4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80484a4:	b480      	push	{r7}
 80484a6:	b085      	sub	sp, #20
 80484a8:	af00      	add	r7, sp, #0
 80484aa:	6078      	str	r0, [r7, #4]
 80484ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80484ae:	2300      	movs	r3, #0
 80484b0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80484b2:	683b      	ldr	r3, [r7, #0]
 80484b4:	681a      	ldr	r2, [r3, #0]
 80484b6:	687b      	ldr	r3, [r7, #4]
 80484b8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80484ba:	683b      	ldr	r3, [r7, #0]
 80484bc:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80484be:	683b      	ldr	r3, [r7, #0]
 80484c0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80484c2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80484c4:	683b      	ldr	r3, [r7, #0]
 80484c6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80484c8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80484ca:	683b      	ldr	r3, [r7, #0]
 80484cc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80484ce:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80484d0:	68fa      	ldr	r2, [r7, #12]
 80484d2:	4313      	orrs	r3, r2
 80484d4:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 80484d6:	687b      	ldr	r3, [r7, #4]
 80484d8:	68da      	ldr	r2, [r3, #12]
 80484da:	4b06      	ldr	r3, [pc, #24]	; (80484f4 <SDMMC_SendCommand+0x50>)
 80484dc:	4013      	ands	r3, r2
 80484de:	68fa      	ldr	r2, [r7, #12]
 80484e0:	431a      	orrs	r2, r3
 80484e2:	687b      	ldr	r3, [r7, #4]
 80484e4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80484e6:	2300      	movs	r3, #0
}
 80484e8:	4618      	mov	r0, r3
 80484ea:	3714      	adds	r7, #20
 80484ec:	46bd      	mov	sp, r7
 80484ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80484f2:	4770      	bx	lr
 80484f4:	fffee0c0 	.word	0xfffee0c0

080484f8 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 80484f8:	b480      	push	{r7}
 80484fa:	b083      	sub	sp, #12
 80484fc:	af00      	add	r7, sp, #0
 80484fe:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8048500:	687b      	ldr	r3, [r7, #4]
 8048502:	691b      	ldr	r3, [r3, #16]
 8048504:	b2db      	uxtb	r3, r3
}
 8048506:	4618      	mov	r0, r3
 8048508:	370c      	adds	r7, #12
 804850a:	46bd      	mov	sp, r7
 804850c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048510:	4770      	bx	lr

08048512 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8048512:	b480      	push	{r7}
 8048514:	b085      	sub	sp, #20
 8048516:	af00      	add	r7, sp, #0
 8048518:	6078      	str	r0, [r7, #4]
 804851a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 804851c:	687b      	ldr	r3, [r7, #4]
 804851e:	3314      	adds	r3, #20
 8048520:	461a      	mov	r2, r3
 8048522:	683b      	ldr	r3, [r7, #0]
 8048524:	4413      	add	r3, r2
 8048526:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8048528:	68fb      	ldr	r3, [r7, #12]
 804852a:	681b      	ldr	r3, [r3, #0]
}
 804852c:	4618      	mov	r0, r3
 804852e:	3714      	adds	r7, #20
 8048530:	46bd      	mov	sp, r7
 8048532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048536:	4770      	bx	lr

08048538 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef *Data)
{
 8048538:	b480      	push	{r7}
 804853a:	b085      	sub	sp, #20
 804853c:	af00      	add	r7, sp, #0
 804853e:	6078      	str	r0, [r7, #4]
 8048540:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8048542:	2300      	movs	r3, #0
 8048544:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8048546:	683b      	ldr	r3, [r7, #0]
 8048548:	681a      	ldr	r2, [r3, #0]
 804854a:	687b      	ldr	r3, [r7, #4]
 804854c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 804854e:	683b      	ldr	r3, [r7, #0]
 8048550:	685a      	ldr	r2, [r3, #4]
 8048552:	687b      	ldr	r3, [r7, #4]
 8048554:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8048556:	683b      	ldr	r3, [r7, #0]
 8048558:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 804855a:	683b      	ldr	r3, [r7, #0]
 804855c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 804855e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8048560:	683b      	ldr	r3, [r7, #0]
 8048562:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8048564:	431a      	orrs	r2, r3
                       Data->DPSM);
 8048566:	683b      	ldr	r3, [r7, #0]
 8048568:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 804856a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 804856c:	68fa      	ldr	r2, [r7, #12]
 804856e:	4313      	orrs	r3, r2
 8048570:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8048572:	687b      	ldr	r3, [r7, #4]
 8048574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8048576:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 804857a:	68fb      	ldr	r3, [r7, #12]
 804857c:	431a      	orrs	r2, r3
 804857e:	687b      	ldr	r3, [r7, #4]
 8048580:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8048582:	2300      	movs	r3, #0

}
 8048584:	4618      	mov	r0, r3
 8048586:	3714      	adds	r7, #20
 8048588:	46bd      	mov	sp, r7
 804858a:	f85d 7b04 	ldr.w	r7, [sp], #4
 804858e:	4770      	bx	lr

08048590 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8048590:	b580      	push	{r7, lr}
 8048592:	b088      	sub	sp, #32
 8048594:	af00      	add	r7, sp, #0
 8048596:	6078      	str	r0, [r7, #4]
 8048598:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 804859a:	683b      	ldr	r3, [r7, #0]
 804859c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 804859e:	2310      	movs	r3, #16
 80485a0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80485a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80485a6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80485a8:	2300      	movs	r3, #0
 80485aa:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80485ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80485b0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80485b2:	f107 0308 	add.w	r3, r7, #8
 80485b6:	4619      	mov	r1, r3
 80485b8:	6878      	ldr	r0, [r7, #4]
 80485ba:	f7ff ff73 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80485be:	f241 3288 	movw	r2, #5000	; 0x1388
 80485c2:	2110      	movs	r1, #16
 80485c4:	6878      	ldr	r0, [r7, #4]
 80485c6:	f000 f995 	bl	80488f4 <SDMMC_GetCmdResp1>
 80485ca:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80485cc:	69fb      	ldr	r3, [r7, #28]
}
 80485ce:	4618      	mov	r0, r3
 80485d0:	3720      	adds	r7, #32
 80485d2:	46bd      	mov	sp, r7
 80485d4:	bd80      	pop	{r7, pc}

080485d6 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 80485d6:	b580      	push	{r7, lr}
 80485d8:	b088      	sub	sp, #32
 80485da:	af00      	add	r7, sp, #0
 80485dc:	6078      	str	r0, [r7, #4]
 80485de:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 80485e0:	683b      	ldr	r3, [r7, #0]
 80485e2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 80485e4:	2307      	movs	r3, #7
 80485e6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80485e8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80485ec:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80485ee:	2300      	movs	r3, #0
 80485f0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80485f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80485f6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80485f8:	f107 0308 	add.w	r3, r7, #8
 80485fc:	4619      	mov	r1, r3
 80485fe:	6878      	ldr	r0, [r7, #4]
 8048600:	f7ff ff50 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8048604:	f241 3288 	movw	r2, #5000	; 0x1388
 8048608:	2107      	movs	r1, #7
 804860a:	6878      	ldr	r0, [r7, #4]
 804860c:	f000 f972 	bl	80488f4 <SDMMC_GetCmdResp1>
 8048610:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8048612:	69fb      	ldr	r3, [r7, #28]
}
 8048614:	4618      	mov	r0, r3
 8048616:	3720      	adds	r7, #32
 8048618:	46bd      	mov	sp, r7
 804861a:	bd80      	pop	{r7, pc}

0804861c <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 804861c:	b580      	push	{r7, lr}
 804861e:	b088      	sub	sp, #32
 8048620:	af00      	add	r7, sp, #0
 8048622:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8048624:	2300      	movs	r3, #0
 8048626:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8048628:	2300      	movs	r3, #0
 804862a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 804862c:	2300      	movs	r3, #0
 804862e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8048630:	2300      	movs	r3, #0
 8048632:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8048634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048638:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 804863a:	f107 0308 	add.w	r3, r7, #8
 804863e:	4619      	mov	r1, r3
 8048640:	6878      	ldr	r0, [r7, #4]
 8048642:	f7ff ff2f 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8048646:	6878      	ldr	r0, [r7, #4]
 8048648:	f000 fb96 	bl	8048d78 <SDMMC_GetCmdError>
 804864c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 804864e:	69fb      	ldr	r3, [r7, #28]
}
 8048650:	4618      	mov	r0, r3
 8048652:	3720      	adds	r7, #32
 8048654:	46bd      	mov	sp, r7
 8048656:	bd80      	pop	{r7, pc}

08048658 <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8048658:	b580      	push	{r7, lr}
 804865a:	b088      	sub	sp, #32
 804865c:	af00      	add	r7, sp, #0
 804865e:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8048660:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8048664:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8048666:	2308      	movs	r3, #8
 8048668:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 804866a:	f44f 7380 	mov.w	r3, #256	; 0x100
 804866e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8048670:	2300      	movs	r3, #0
 8048672:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8048674:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048678:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 804867a:	f107 0308 	add.w	r3, r7, #8
 804867e:	4619      	mov	r1, r3
 8048680:	6878      	ldr	r0, [r7, #4]
 8048682:	f7ff ff0f 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8048686:	6878      	ldr	r0, [r7, #4]
 8048688:	f000 fb28 	bl	8048cdc <SDMMC_GetCmdResp7>
 804868c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 804868e:	69fb      	ldr	r3, [r7, #28]
}
 8048690:	4618      	mov	r0, r3
 8048692:	3720      	adds	r7, #32
 8048694:	46bd      	mov	sp, r7
 8048696:	bd80      	pop	{r7, pc}

08048698 <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8048698:	b580      	push	{r7, lr}
 804869a:	b088      	sub	sp, #32
 804869c:	af00      	add	r7, sp, #0
 804869e:	6078      	str	r0, [r7, #4]
 80486a0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 80486a2:	683b      	ldr	r3, [r7, #0]
 80486a4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 80486a6:	2337      	movs	r3, #55	; 0x37
 80486a8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80486aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80486ae:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80486b0:	2300      	movs	r3, #0
 80486b2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80486b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80486b8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80486ba:	f107 0308 	add.w	r3, r7, #8
 80486be:	4619      	mov	r1, r3
 80486c0:	6878      	ldr	r0, [r7, #4]
 80486c2:	f7ff feef 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 80486c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80486ca:	2137      	movs	r1, #55	; 0x37
 80486cc:	6878      	ldr	r0, [r7, #4]
 80486ce:	f000 f911 	bl	80488f4 <SDMMC_GetCmdResp1>
 80486d2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80486d4:	69fb      	ldr	r3, [r7, #28]
}
 80486d6:	4618      	mov	r0, r3
 80486d8:	3720      	adds	r7, #32
 80486da:	46bd      	mov	sp, r7
 80486dc:	bd80      	pop	{r7, pc}

080486de <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80486de:	b580      	push	{r7, lr}
 80486e0:	b088      	sub	sp, #32
 80486e2:	af00      	add	r7, sp, #0
 80486e4:	6078      	str	r0, [r7, #4]
 80486e6:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 80486e8:	683b      	ldr	r3, [r7, #0]
 80486ea:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 80486ec:	2329      	movs	r3, #41	; 0x29
 80486ee:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80486f0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80486f4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80486f6:	2300      	movs	r3, #0
 80486f8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80486fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80486fe:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8048700:	f107 0308 	add.w	r3, r7, #8
 8048704:	4619      	mov	r1, r3
 8048706:	6878      	ldr	r0, [r7, #4]
 8048708:	f7ff fecc 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 804870c:	6878      	ldr	r0, [r7, #4]
 804870e:	f000 fa2d 	bl	8048b6c <SDMMC_GetCmdResp3>
 8048712:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8048714:	69fb      	ldr	r3, [r7, #28]
}
 8048716:	4618      	mov	r0, r3
 8048718:	3720      	adds	r7, #32
 804871a:	46bd      	mov	sp, r7
 804871c:	bd80      	pop	{r7, pc}

0804871e <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 804871e:	b580      	push	{r7, lr}
 8048720:	b088      	sub	sp, #32
 8048722:	af00      	add	r7, sp, #0
 8048724:	6078      	str	r0, [r7, #4]
 8048726:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8048728:	683b      	ldr	r3, [r7, #0]
 804872a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 804872c:	2306      	movs	r3, #6
 804872e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8048730:	f44f 7380 	mov.w	r3, #256	; 0x100
 8048734:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8048736:	2300      	movs	r3, #0
 8048738:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 804873a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804873e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8048740:	f107 0308 	add.w	r3, r7, #8
 8048744:	4619      	mov	r1, r3
 8048746:	6878      	ldr	r0, [r7, #4]
 8048748:	f7ff feac 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 804874c:	f241 3288 	movw	r2, #5000	; 0x1388
 8048750:	2106      	movs	r1, #6
 8048752:	6878      	ldr	r0, [r7, #4]
 8048754:	f000 f8ce 	bl	80488f4 <SDMMC_GetCmdResp1>
 8048758:	61f8      	str	r0, [r7, #28]

  return errorstate;
 804875a:	69fb      	ldr	r3, [r7, #28]
}
 804875c:	4618      	mov	r0, r3
 804875e:	3720      	adds	r7, #32
 8048760:	46bd      	mov	sp, r7
 8048762:	bd80      	pop	{r7, pc}

08048764 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8048764:	b580      	push	{r7, lr}
 8048766:	b088      	sub	sp, #32
 8048768:	af00      	add	r7, sp, #0
 804876a:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 804876c:	2300      	movs	r3, #0
 804876e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8048770:	2333      	movs	r3, #51	; 0x33
 8048772:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8048774:	f44f 7380 	mov.w	r3, #256	; 0x100
 8048778:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 804877a:	2300      	movs	r3, #0
 804877c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 804877e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048782:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8048784:	f107 0308 	add.w	r3, r7, #8
 8048788:	4619      	mov	r1, r3
 804878a:	6878      	ldr	r0, [r7, #4]
 804878c:	f7ff fe8a 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8048790:	f241 3288 	movw	r2, #5000	; 0x1388
 8048794:	2133      	movs	r1, #51	; 0x33
 8048796:	6878      	ldr	r0, [r7, #4]
 8048798:	f000 f8ac 	bl	80488f4 <SDMMC_GetCmdResp1>
 804879c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 804879e:	69fb      	ldr	r3, [r7, #28]
}
 80487a0:	4618      	mov	r0, r3
 80487a2:	3720      	adds	r7, #32
 80487a4:	46bd      	mov	sp, r7
 80487a6:	bd80      	pop	{r7, pc}

080487a8 <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 80487a8:	b580      	push	{r7, lr}
 80487aa:	b088      	sub	sp, #32
 80487ac:	af00      	add	r7, sp, #0
 80487ae:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 80487b0:	2300      	movs	r3, #0
 80487b2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 80487b4:	2302      	movs	r3, #2
 80487b6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80487b8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80487bc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80487be:	2300      	movs	r3, #0
 80487c0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80487c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80487c6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80487c8:	f107 0308 	add.w	r3, r7, #8
 80487cc:	4619      	mov	r1, r3
 80487ce:	6878      	ldr	r0, [r7, #4]
 80487d0:	f7ff fe68 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 80487d4:	6878      	ldr	r0, [r7, #4]
 80487d6:	f000 f97f 	bl	8048ad8 <SDMMC_GetCmdResp2>
 80487da:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80487dc:	69fb      	ldr	r3, [r7, #28]
}
 80487de:	4618      	mov	r0, r3
 80487e0:	3720      	adds	r7, #32
 80487e2:	46bd      	mov	sp, r7
 80487e4:	bd80      	pop	{r7, pc}

080487e6 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 80487e6:	b580      	push	{r7, lr}
 80487e8:	b088      	sub	sp, #32
 80487ea:	af00      	add	r7, sp, #0
 80487ec:	6078      	str	r0, [r7, #4]
 80487ee:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 80487f0:	683b      	ldr	r3, [r7, #0]
 80487f2:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 80487f4:	2309      	movs	r3, #9
 80487f6:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 80487f8:	f44f 7340 	mov.w	r3, #768	; 0x300
 80487fc:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80487fe:	2300      	movs	r3, #0
 8048800:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8048802:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048806:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8048808:	f107 0308 	add.w	r3, r7, #8
 804880c:	4619      	mov	r1, r3
 804880e:	6878      	ldr	r0, [r7, #4]
 8048810:	f7ff fe48 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8048814:	6878      	ldr	r0, [r7, #4]
 8048816:	f000 f95f 	bl	8048ad8 <SDMMC_GetCmdResp2>
 804881a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 804881c:	69fb      	ldr	r3, [r7, #28]
}
 804881e:	4618      	mov	r0, r3
 8048820:	3720      	adds	r7, #32
 8048822:	46bd      	mov	sp, r7
 8048824:	bd80      	pop	{r7, pc}

08048826 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8048826:	b580      	push	{r7, lr}
 8048828:	b088      	sub	sp, #32
 804882a:	af00      	add	r7, sp, #0
 804882c:	6078      	str	r0, [r7, #4]
 804882e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8048830:	2300      	movs	r3, #0
 8048832:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8048834:	2303      	movs	r3, #3
 8048836:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8048838:	f44f 7380 	mov.w	r3, #256	; 0x100
 804883c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 804883e:	2300      	movs	r3, #0
 8048840:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8048842:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048846:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8048848:	f107 0308 	add.w	r3, r7, #8
 804884c:	4619      	mov	r1, r3
 804884e:	6878      	ldr	r0, [r7, #4]
 8048850:	f7ff fe28 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8048854:	683a      	ldr	r2, [r7, #0]
 8048856:	2103      	movs	r1, #3
 8048858:	6878      	ldr	r0, [r7, #4]
 804885a:	f000 f9c7 	bl	8048bec <SDMMC_GetCmdResp6>
 804885e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8048860:	69fb      	ldr	r3, [r7, #28]
}
 8048862:	4618      	mov	r0, r3
 8048864:	3720      	adds	r7, #32
 8048866:	46bd      	mov	sp, r7
 8048868:	bd80      	pop	{r7, pc}

0804886a <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 804886a:	b580      	push	{r7, lr}
 804886c:	b088      	sub	sp, #32
 804886e:	af00      	add	r7, sp, #0
 8048870:	6078      	str	r0, [r7, #4]
 8048872:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8048874:	683b      	ldr	r3, [r7, #0]
 8048876:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8048878:	230d      	movs	r3, #13
 804887a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 804887c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8048880:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8048882:	2300      	movs	r3, #0
 8048884:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8048886:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 804888a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 804888c:	f107 0308 	add.w	r3, r7, #8
 8048890:	4619      	mov	r1, r3
 8048892:	6878      	ldr	r0, [r7, #4]
 8048894:	f7ff fe06 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8048898:	f241 3288 	movw	r2, #5000	; 0x1388
 804889c:	210d      	movs	r1, #13
 804889e:	6878      	ldr	r0, [r7, #4]
 80488a0:	f000 f828 	bl	80488f4 <SDMMC_GetCmdResp1>
 80488a4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80488a6:	69fb      	ldr	r3, [r7, #28]
}
 80488a8:	4618      	mov	r0, r3
 80488aa:	3720      	adds	r7, #32
 80488ac:	46bd      	mov	sp, r7
 80488ae:	bd80      	pop	{r7, pc}

080488b0 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 80488b0:	b580      	push	{r7, lr}
 80488b2:	b088      	sub	sp, #32
 80488b4:	af00      	add	r7, sp, #0
 80488b6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 80488b8:	2300      	movs	r3, #0
 80488ba:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 80488bc:	230d      	movs	r3, #13
 80488be:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80488c0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80488c4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80488c6:	2300      	movs	r3, #0
 80488c8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80488ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80488ce:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80488d0:	f107 0308 	add.w	r3, r7, #8
 80488d4:	4619      	mov	r1, r3
 80488d6:	6878      	ldr	r0, [r7, #4]
 80488d8:	f7ff fde4 	bl	80484a4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 80488dc:	f241 3288 	movw	r2, #5000	; 0x1388
 80488e0:	210d      	movs	r1, #13
 80488e2:	6878      	ldr	r0, [r7, #4]
 80488e4:	f000 f806 	bl	80488f4 <SDMMC_GetCmdResp1>
 80488e8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80488ea:	69fb      	ldr	r3, [r7, #28]
}
 80488ec:	4618      	mov	r0, r3
 80488ee:	3720      	adds	r7, #32
 80488f0:	46bd      	mov	sp, r7
 80488f2:	bd80      	pop	{r7, pc}

080488f4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80488f4:	b580      	push	{r7, lr}
 80488f6:	b088      	sub	sp, #32
 80488f8:	af00      	add	r7, sp, #0
 80488fa:	60f8      	str	r0, [r7, #12]
 80488fc:	460b      	mov	r3, r1
 80488fe:	607a      	str	r2, [r7, #4]
 8048900:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 8048902:	4b70      	ldr	r3, [pc, #448]	; (8048ac4 <SDMMC_GetCmdResp1+0x1d0>)
 8048904:	681b      	ldr	r3, [r3, #0]
 8048906:	4a70      	ldr	r2, [pc, #448]	; (8048ac8 <SDMMC_GetCmdResp1+0x1d4>)
 8048908:	fba2 2303 	umull	r2, r3, r2, r3
 804890c:	0a5a      	lsrs	r2, r3, #9
 804890e:	687b      	ldr	r3, [r7, #4]
 8048910:	fb02 f303 	mul.w	r3, r2, r3
 8048914:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8048916:	69fb      	ldr	r3, [r7, #28]
 8048918:	1e5a      	subs	r2, r3, #1
 804891a:	61fa      	str	r2, [r7, #28]
 804891c:	2b00      	cmp	r3, #0
 804891e:	d102      	bne.n	8048926 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048920:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048924:	e0c9      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8048926:	68fb      	ldr	r3, [r7, #12]
 8048928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804892a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 804892c:	69ba      	ldr	r2, [r7, #24]
 804892e:	4b67      	ldr	r3, [pc, #412]	; (8048acc <SDMMC_GetCmdResp1+0x1d8>)
 8048930:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8048932:	2b00      	cmp	r3, #0
 8048934:	d0ef      	beq.n	8048916 <SDMMC_GetCmdResp1+0x22>
 8048936:	69bb      	ldr	r3, [r7, #24]
 8048938:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 804893c:	2b00      	cmp	r3, #0
 804893e:	d1ea      	bne.n	8048916 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8048940:	68fb      	ldr	r3, [r7, #12]
 8048942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048944:	f003 0304 	and.w	r3, r3, #4
 8048948:	2b00      	cmp	r3, #0
 804894a:	d004      	beq.n	8048956 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 804894c:	68fb      	ldr	r3, [r7, #12]
 804894e:	2204      	movs	r2, #4
 8048950:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8048952:	2304      	movs	r3, #4
 8048954:	e0b1      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8048956:	68fb      	ldr	r3, [r7, #12]
 8048958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 804895a:	f003 0301 	and.w	r3, r3, #1
 804895e:	2b00      	cmp	r3, #0
 8048960:	d004      	beq.n	804896c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8048962:	68fb      	ldr	r3, [r7, #12]
 8048964:	2201      	movs	r2, #1
 8048966:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048968:	2301      	movs	r3, #1
 804896a:	e0a6      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 804896c:	68fb      	ldr	r3, [r7, #12]
 804896e:	4a58      	ldr	r2, [pc, #352]	; (8048ad0 <SDMMC_GetCmdResp1+0x1dc>)
 8048970:	639a      	str	r2, [r3, #56]	; 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8048972:	68f8      	ldr	r0, [r7, #12]
 8048974:	f7ff fdc0 	bl	80484f8 <SDMMC_GetCommandResponse>
 8048978:	4603      	mov	r3, r0
 804897a:	461a      	mov	r2, r3
 804897c:	7afb      	ldrb	r3, [r7, #11]
 804897e:	4293      	cmp	r3, r2
 8048980:	d001      	beq.n	8048986 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048982:	2301      	movs	r3, #1
 8048984:	e099      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8048986:	2100      	movs	r1, #0
 8048988:	68f8      	ldr	r0, [r7, #12]
 804898a:	f7ff fdc2 	bl	8048512 <SDMMC_GetResponse>
 804898e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8048990:	697a      	ldr	r2, [r7, #20]
 8048992:	4b50      	ldr	r3, [pc, #320]	; (8048ad4 <SDMMC_GetCmdResp1+0x1e0>)
 8048994:	4013      	ands	r3, r2
 8048996:	2b00      	cmp	r3, #0
 8048998:	d101      	bne.n	804899e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 804899a:	2300      	movs	r3, #0
 804899c:	e08d      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 804899e:	697b      	ldr	r3, [r7, #20]
 80489a0:	2b00      	cmp	r3, #0
 80489a2:	da02      	bge.n	80489aa <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 80489a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80489a8:	e087      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 80489aa:	697b      	ldr	r3, [r7, #20]
 80489ac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80489b0:	2b00      	cmp	r3, #0
 80489b2:	d001      	beq.n	80489b8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80489b4:	2340      	movs	r3, #64	; 0x40
 80489b6:	e080      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80489b8:	697b      	ldr	r3, [r7, #20]
 80489ba:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80489be:	2b00      	cmp	r3, #0
 80489c0:	d001      	beq.n	80489c6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80489c2:	2380      	movs	r3, #128	; 0x80
 80489c4:	e079      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80489c6:	697b      	ldr	r3, [r7, #20]
 80489c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80489cc:	2b00      	cmp	r3, #0
 80489ce:	d002      	beq.n	80489d6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80489d0:	f44f 7380 	mov.w	r3, #256	; 0x100
 80489d4:	e071      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80489d6:	697b      	ldr	r3, [r7, #20]
 80489d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80489dc:	2b00      	cmp	r3, #0
 80489de:	d002      	beq.n	80489e6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80489e0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80489e4:	e069      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80489e6:	697b      	ldr	r3, [r7, #20]
 80489e8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80489ec:	2b00      	cmp	r3, #0
 80489ee:	d002      	beq.n	80489f6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80489f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80489f4:	e061      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80489f6:	697b      	ldr	r3, [r7, #20]
 80489f8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80489fc:	2b00      	cmp	r3, #0
 80489fe:	d002      	beq.n	8048a06 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8048a00:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8048a04:	e059      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8048a06:	697b      	ldr	r3, [r7, #20]
 8048a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8048a0c:	2b00      	cmp	r3, #0
 8048a0e:	d002      	beq.n	8048a16 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8048a10:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048a14:	e051      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8048a16:	697b      	ldr	r3, [r7, #20]
 8048a18:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8048a1c:	2b00      	cmp	r3, #0
 8048a1e:	d002      	beq.n	8048a26 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8048a20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8048a24:	e049      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8048a26:	697b      	ldr	r3, [r7, #20]
 8048a28:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8048a2c:	2b00      	cmp	r3, #0
 8048a2e:	d002      	beq.n	8048a36 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8048a30:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8048a34:	e041      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8048a36:	697b      	ldr	r3, [r7, #20]
 8048a38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8048a3c:	2b00      	cmp	r3, #0
 8048a3e:	d002      	beq.n	8048a46 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8048a40:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8048a44:	e039      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8048a46:	697b      	ldr	r3, [r7, #20]
 8048a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8048a4c:	2b00      	cmp	r3, #0
 8048a4e:	d002      	beq.n	8048a56 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8048a50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8048a54:	e031      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8048a56:	697b      	ldr	r3, [r7, #20]
 8048a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8048a5c:	2b00      	cmp	r3, #0
 8048a5e:	d002      	beq.n	8048a66 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8048a60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8048a64:	e029      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8048a66:	697b      	ldr	r3, [r7, #20]
 8048a68:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8048a6c:	2b00      	cmp	r3, #0
 8048a6e:	d002      	beq.n	8048a76 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8048a70:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8048a74:	e021      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8048a76:	697b      	ldr	r3, [r7, #20]
 8048a78:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8048a7c:	2b00      	cmp	r3, #0
 8048a7e:	d002      	beq.n	8048a86 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8048a80:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8048a84:	e019      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8048a86:	697b      	ldr	r3, [r7, #20]
 8048a88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8048a8c:	2b00      	cmp	r3, #0
 8048a8e:	d002      	beq.n	8048a96 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8048a90:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8048a94:	e011      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8048a96:	697b      	ldr	r3, [r7, #20]
 8048a98:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8048a9c:	2b00      	cmp	r3, #0
 8048a9e:	d002      	beq.n	8048aa6 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8048aa0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8048aa4:	e009      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8048aa6:	697b      	ldr	r3, [r7, #20]
 8048aa8:	f003 0308 	and.w	r3, r3, #8
 8048aac:	2b00      	cmp	r3, #0
 8048aae:	d002      	beq.n	8048ab6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8048ab0:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8048ab4:	e001      	b.n	8048aba <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8048ab6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8048aba:	4618      	mov	r0, r3
 8048abc:	3720      	adds	r7, #32
 8048abe:	46bd      	mov	sp, r7
 8048ac0:	bd80      	pop	{r7, pc}
 8048ac2:	bf00      	nop
 8048ac4:	20018000 	.word	0x20018000
 8048ac8:	10624dd3 	.word	0x10624dd3
 8048acc:	00200045 	.word	0x00200045
 8048ad0:	002000c5 	.word	0x002000c5
 8048ad4:	fdffe008 	.word	0xfdffe008

08048ad8 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8048ad8:	b480      	push	{r7}
 8048ada:	b085      	sub	sp, #20
 8048adc:	af00      	add	r7, sp, #0
 8048ade:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8048ae0:	4b1f      	ldr	r3, [pc, #124]	; (8048b60 <SDMMC_GetCmdResp2+0x88>)
 8048ae2:	681b      	ldr	r3, [r3, #0]
 8048ae4:	4a1f      	ldr	r2, [pc, #124]	; (8048b64 <SDMMC_GetCmdResp2+0x8c>)
 8048ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8048aea:	0a5b      	lsrs	r3, r3, #9
 8048aec:	f241 3288 	movw	r2, #5000	; 0x1388
 8048af0:	fb02 f303 	mul.w	r3, r2, r3
 8048af4:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8048af6:	68fb      	ldr	r3, [r7, #12]
 8048af8:	1e5a      	subs	r2, r3, #1
 8048afa:	60fa      	str	r2, [r7, #12]
 8048afc:	2b00      	cmp	r3, #0
 8048afe:	d102      	bne.n	8048b06 <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048b00:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048b04:	e026      	b.n	8048b54 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 8048b06:	687b      	ldr	r3, [r7, #4]
 8048b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048b0a:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048b0c:	68bb      	ldr	r3, [r7, #8]
 8048b0e:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8048b12:	2b00      	cmp	r3, #0
 8048b14:	d0ef      	beq.n	8048af6 <SDMMC_GetCmdResp2+0x1e>
 8048b16:	68bb      	ldr	r3, [r7, #8]
 8048b18:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048b1c:	2b00      	cmp	r3, #0
 8048b1e:	d1ea      	bne.n	8048af6 <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8048b20:	687b      	ldr	r3, [r7, #4]
 8048b22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048b24:	f003 0304 	and.w	r3, r3, #4
 8048b28:	2b00      	cmp	r3, #0
 8048b2a:	d004      	beq.n	8048b36 <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8048b2c:	687b      	ldr	r3, [r7, #4]
 8048b2e:	2204      	movs	r2, #4
 8048b30:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8048b32:	2304      	movs	r3, #4
 8048b34:	e00e      	b.n	8048b54 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8048b36:	687b      	ldr	r3, [r7, #4]
 8048b38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048b3a:	f003 0301 	and.w	r3, r3, #1
 8048b3e:	2b00      	cmp	r3, #0
 8048b40:	d004      	beq.n	8048b4c <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8048b42:	687b      	ldr	r3, [r7, #4]
 8048b44:	2201      	movs	r2, #1
 8048b46:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048b48:	2301      	movs	r3, #1
 8048b4a:	e003      	b.n	8048b54 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8048b4c:	687b      	ldr	r3, [r7, #4]
 8048b4e:	4a06      	ldr	r2, [pc, #24]	; (8048b68 <SDMMC_GetCmdResp2+0x90>)
 8048b50:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8048b52:	2300      	movs	r3, #0
}
 8048b54:	4618      	mov	r0, r3
 8048b56:	3714      	adds	r7, #20
 8048b58:	46bd      	mov	sp, r7
 8048b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048b5e:	4770      	bx	lr
 8048b60:	20018000 	.word	0x20018000
 8048b64:	10624dd3 	.word	0x10624dd3
 8048b68:	002000c5 	.word	0x002000c5

08048b6c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8048b6c:	b480      	push	{r7}
 8048b6e:	b085      	sub	sp, #20
 8048b70:	af00      	add	r7, sp, #0
 8048b72:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8048b74:	4b1a      	ldr	r3, [pc, #104]	; (8048be0 <SDMMC_GetCmdResp3+0x74>)
 8048b76:	681b      	ldr	r3, [r3, #0]
 8048b78:	4a1a      	ldr	r2, [pc, #104]	; (8048be4 <SDMMC_GetCmdResp3+0x78>)
 8048b7a:	fba2 2303 	umull	r2, r3, r2, r3
 8048b7e:	0a5b      	lsrs	r3, r3, #9
 8048b80:	f241 3288 	movw	r2, #5000	; 0x1388
 8048b84:	fb02 f303 	mul.w	r3, r2, r3
 8048b88:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8048b8a:	68fb      	ldr	r3, [r7, #12]
 8048b8c:	1e5a      	subs	r2, r3, #1
 8048b8e:	60fa      	str	r2, [r7, #12]
 8048b90:	2b00      	cmp	r3, #0
 8048b92:	d102      	bne.n	8048b9a <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048b94:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048b98:	e01b      	b.n	8048bd2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8048b9a:	687b      	ldr	r3, [r7, #4]
 8048b9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048b9e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048ba0:	68bb      	ldr	r3, [r7, #8]
 8048ba2:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8048ba6:	2b00      	cmp	r3, #0
 8048ba8:	d0ef      	beq.n	8048b8a <SDMMC_GetCmdResp3+0x1e>
 8048baa:	68bb      	ldr	r3, [r7, #8]
 8048bac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048bb0:	2b00      	cmp	r3, #0
 8048bb2:	d1ea      	bne.n	8048b8a <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8048bb4:	687b      	ldr	r3, [r7, #4]
 8048bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048bb8:	f003 0304 	and.w	r3, r3, #4
 8048bbc:	2b00      	cmp	r3, #0
 8048bbe:	d004      	beq.n	8048bca <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8048bc0:	687b      	ldr	r3, [r7, #4]
 8048bc2:	2204      	movs	r2, #4
 8048bc4:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8048bc6:	2304      	movs	r3, #4
 8048bc8:	e003      	b.n	8048bd2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8048bca:	687b      	ldr	r3, [r7, #4]
 8048bcc:	4a06      	ldr	r2, [pc, #24]	; (8048be8 <SDMMC_GetCmdResp3+0x7c>)
 8048bce:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8048bd0:	2300      	movs	r3, #0
}
 8048bd2:	4618      	mov	r0, r3
 8048bd4:	3714      	adds	r7, #20
 8048bd6:	46bd      	mov	sp, r7
 8048bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048bdc:	4770      	bx	lr
 8048bde:	bf00      	nop
 8048be0:	20018000 	.word	0x20018000
 8048be4:	10624dd3 	.word	0x10624dd3
 8048be8:	002000c5 	.word	0x002000c5

08048bec <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8048bec:	b580      	push	{r7, lr}
 8048bee:	b088      	sub	sp, #32
 8048bf0:	af00      	add	r7, sp, #0
 8048bf2:	60f8      	str	r0, [r7, #12]
 8048bf4:	460b      	mov	r3, r1
 8048bf6:	607a      	str	r2, [r7, #4]
 8048bf8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8048bfa:	4b35      	ldr	r3, [pc, #212]	; (8048cd0 <SDMMC_GetCmdResp6+0xe4>)
 8048bfc:	681b      	ldr	r3, [r3, #0]
 8048bfe:	4a35      	ldr	r2, [pc, #212]	; (8048cd4 <SDMMC_GetCmdResp6+0xe8>)
 8048c00:	fba2 2303 	umull	r2, r3, r2, r3
 8048c04:	0a5b      	lsrs	r3, r3, #9
 8048c06:	f241 3288 	movw	r2, #5000	; 0x1388
 8048c0a:	fb02 f303 	mul.w	r3, r2, r3
 8048c0e:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8048c10:	69fb      	ldr	r3, [r7, #28]
 8048c12:	1e5a      	subs	r2, r3, #1
 8048c14:	61fa      	str	r2, [r7, #28]
 8048c16:	2b00      	cmp	r3, #0
 8048c18:	d102      	bne.n	8048c20 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048c1a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048c1e:	e052      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 8048c20:	68fb      	ldr	r3, [r7, #12]
 8048c22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048c24:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048c26:	69bb      	ldr	r3, [r7, #24]
 8048c28:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8048c2c:	2b00      	cmp	r3, #0
 8048c2e:	d0ef      	beq.n	8048c10 <SDMMC_GetCmdResp6+0x24>
 8048c30:	69bb      	ldr	r3, [r7, #24]
 8048c32:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048c36:	2b00      	cmp	r3, #0
 8048c38:	d1ea      	bne.n	8048c10 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8048c3a:	68fb      	ldr	r3, [r7, #12]
 8048c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048c3e:	f003 0304 	and.w	r3, r3, #4
 8048c42:	2b00      	cmp	r3, #0
 8048c44:	d004      	beq.n	8048c50 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8048c46:	68fb      	ldr	r3, [r7, #12]
 8048c48:	2204      	movs	r2, #4
 8048c4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8048c4c:	2304      	movs	r3, #4
 8048c4e:	e03a      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8048c50:	68fb      	ldr	r3, [r7, #12]
 8048c52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048c54:	f003 0301 	and.w	r3, r3, #1
 8048c58:	2b00      	cmp	r3, #0
 8048c5a:	d004      	beq.n	8048c66 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8048c5c:	68fb      	ldr	r3, [r7, #12]
 8048c5e:	2201      	movs	r2, #1
 8048c60:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048c62:	2301      	movs	r3, #1
 8048c64:	e02f      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8048c66:	68f8      	ldr	r0, [r7, #12]
 8048c68:	f7ff fc46 	bl	80484f8 <SDMMC_GetCommandResponse>
 8048c6c:	4603      	mov	r3, r0
 8048c6e:	461a      	mov	r2, r3
 8048c70:	7afb      	ldrb	r3, [r7, #11]
 8048c72:	4293      	cmp	r3, r2
 8048c74:	d001      	beq.n	8048c7a <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048c76:	2301      	movs	r3, #1
 8048c78:	e025      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8048c7a:	68fb      	ldr	r3, [r7, #12]
 8048c7c:	4a16      	ldr	r2, [pc, #88]	; (8048cd8 <SDMMC_GetCmdResp6+0xec>)
 8048c7e:	639a      	str	r2, [r3, #56]	; 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8048c80:	2100      	movs	r1, #0
 8048c82:	68f8      	ldr	r0, [r7, #12]
 8048c84:	f7ff fc45 	bl	8048512 <SDMMC_GetResponse>
 8048c88:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8048c8a:	697b      	ldr	r3, [r7, #20]
 8048c8c:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8048c90:	2b00      	cmp	r3, #0
 8048c92:	d106      	bne.n	8048ca2 <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 8048c94:	697b      	ldr	r3, [r7, #20]
 8048c96:	0c1b      	lsrs	r3, r3, #16
 8048c98:	b29a      	uxth	r2, r3
 8048c9a:	687b      	ldr	r3, [r7, #4]
 8048c9c:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8048c9e:	2300      	movs	r3, #0
 8048ca0:	e011      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 8048ca2:	697b      	ldr	r3, [r7, #20]
 8048ca4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8048ca8:	2b00      	cmp	r3, #0
 8048caa:	d002      	beq.n	8048cb2 <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8048cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8048cb0:	e009      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 8048cb2:	697b      	ldr	r3, [r7, #20]
 8048cb4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8048cb8:	2b00      	cmp	r3, #0
 8048cba:	d002      	beq.n	8048cc2 <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8048cbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8048cc0:	e001      	b.n	8048cc6 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8048cc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8048cc6:	4618      	mov	r0, r3
 8048cc8:	3720      	adds	r7, #32
 8048cca:	46bd      	mov	sp, r7
 8048ccc:	bd80      	pop	{r7, pc}
 8048cce:	bf00      	nop
 8048cd0:	20018000 	.word	0x20018000
 8048cd4:	10624dd3 	.word	0x10624dd3
 8048cd8:	002000c5 	.word	0x002000c5

08048cdc <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 8048cdc:	b480      	push	{r7}
 8048cde:	b085      	sub	sp, #20
 8048ce0:	af00      	add	r7, sp, #0
 8048ce2:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8048ce4:	4b22      	ldr	r3, [pc, #136]	; (8048d70 <SDMMC_GetCmdResp7+0x94>)
 8048ce6:	681b      	ldr	r3, [r3, #0]
 8048ce8:	4a22      	ldr	r2, [pc, #136]	; (8048d74 <SDMMC_GetCmdResp7+0x98>)
 8048cea:	fba2 2303 	umull	r2, r3, r2, r3
 8048cee:	0a5b      	lsrs	r3, r3, #9
 8048cf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8048cf4:	fb02 f303 	mul.w	r3, r2, r3
 8048cf8:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8048cfa:	68fb      	ldr	r3, [r7, #12]
 8048cfc:	1e5a      	subs	r2, r3, #1
 8048cfe:	60fa      	str	r2, [r7, #12]
 8048d00:	2b00      	cmp	r3, #0
 8048d02:	d102      	bne.n	8048d0a <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048d04:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048d08:	e02c      	b.n	8048d64 <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8048d0a:	687b      	ldr	r3, [r7, #4]
 8048d0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048d0e:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048d10:	68bb      	ldr	r3, [r7, #8]
 8048d12:	f003 0345 	and.w	r3, r3, #69	; 0x45
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8048d16:	2b00      	cmp	r3, #0
 8048d18:	d0ef      	beq.n	8048cfa <SDMMC_GetCmdResp7+0x1e>
 8048d1a:	68bb      	ldr	r3, [r7, #8]
 8048d1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8048d20:	2b00      	cmp	r3, #0
 8048d22:	d1ea      	bne.n	8048cfa <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8048d24:	687b      	ldr	r3, [r7, #4]
 8048d26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048d28:	f003 0304 	and.w	r3, r3, #4
 8048d2c:	2b00      	cmp	r3, #0
 8048d2e:	d004      	beq.n	8048d3a <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8048d30:	687b      	ldr	r3, [r7, #4]
 8048d32:	2204      	movs	r2, #4
 8048d34:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8048d36:	2304      	movs	r3, #4
 8048d38:	e014      	b.n	8048d64 <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8048d3a:	687b      	ldr	r3, [r7, #4]
 8048d3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048d3e:	f003 0301 	and.w	r3, r3, #1
 8048d42:	2b00      	cmp	r3, #0
 8048d44:	d004      	beq.n	8048d50 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8048d46:	687b      	ldr	r3, [r7, #4]
 8048d48:	2201      	movs	r2, #1
 8048d4a:	639a      	str	r2, [r3, #56]	; 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8048d4c:	2301      	movs	r3, #1
 8048d4e:	e009      	b.n	8048d64 <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8048d50:	687b      	ldr	r3, [r7, #4]
 8048d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048d54:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8048d58:	2b00      	cmp	r3, #0
 8048d5a:	d002      	beq.n	8048d62 <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8048d5c:	687b      	ldr	r3, [r7, #4]
 8048d5e:	2240      	movs	r2, #64	; 0x40
 8048d60:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8048d62:	2300      	movs	r3, #0

}
 8048d64:	4618      	mov	r0, r3
 8048d66:	3714      	adds	r7, #20
 8048d68:	46bd      	mov	sp, r7
 8048d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048d6e:	4770      	bx	lr
 8048d70:	20018000 	.word	0x20018000
 8048d74:	10624dd3 	.word	0x10624dd3

08048d78 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8048d78:	b480      	push	{r7}
 8048d7a:	b085      	sub	sp, #20
 8048d7c:	af00      	add	r7, sp, #0
 8048d7e:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8048d80:	4b11      	ldr	r3, [pc, #68]	; (8048dc8 <SDMMC_GetCmdError+0x50>)
 8048d82:	681b      	ldr	r3, [r3, #0]
 8048d84:	4a11      	ldr	r2, [pc, #68]	; (8048dcc <SDMMC_GetCmdError+0x54>)
 8048d86:	fba2 2303 	umull	r2, r3, r2, r3
 8048d8a:	0a5b      	lsrs	r3, r3, #9
 8048d8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8048d90:	fb02 f303 	mul.w	r3, r2, r3
 8048d94:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8048d96:	68fb      	ldr	r3, [r7, #12]
 8048d98:	1e5a      	subs	r2, r3, #1
 8048d9a:	60fa      	str	r2, [r7, #12]
 8048d9c:	2b00      	cmp	r3, #0
 8048d9e:	d102      	bne.n	8048da6 <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8048da0:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8048da4:	e009      	b.n	8048dba <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 8048da6:	687b      	ldr	r3, [r7, #4]
 8048da8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8048daa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8048dae:	2b00      	cmp	r3, #0
 8048db0:	d0f1      	beq.n	8048d96 <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8048db2:	687b      	ldr	r3, [r7, #4]
 8048db4:	4a06      	ldr	r2, [pc, #24]	; (8048dd0 <SDMMC_GetCmdError+0x58>)
 8048db6:	639a      	str	r2, [r3, #56]	; 0x38

  return SDMMC_ERROR_NONE;
 8048db8:	2300      	movs	r3, #0
}
 8048dba:	4618      	mov	r0, r3
 8048dbc:	3714      	adds	r7, #20
 8048dbe:	46bd      	mov	sp, r7
 8048dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048dc4:	4770      	bx	lr
 8048dc6:	bf00      	nop
 8048dc8:	20018000 	.word	0x20018000
 8048dcc:	10624dd3 	.word	0x10624dd3
 8048dd0:	002000c5 	.word	0x002000c5

08048dd4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 8048dd4:	b480      	push	{r7}
 8048dd6:	b085      	sub	sp, #20
 8048dd8:	af00      	add	r7, sp, #0
 8048dda:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8048ddc:	f64b 7380 	movw	r3, #49024	; 0xbf80
 8048de0:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8048de2:	687b      	ldr	r3, [r7, #4]
 8048de4:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8048de8:	b29a      	uxth	r2, r3
 8048dea:	68fb      	ldr	r3, [r7, #12]
 8048dec:	b29b      	uxth	r3, r3
 8048dee:	43db      	mvns	r3, r3
 8048df0:	b29b      	uxth	r3, r3
 8048df2:	4013      	ands	r3, r2
 8048df4:	b29a      	uxth	r2, r3
 8048df6:	687b      	ldr	r3, [r7, #4]
 8048df8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8048dfc:	2300      	movs	r3, #0
}
 8048dfe:	4618      	mov	r0, r3
 8048e00:	3714      	adds	r7, #20
 8048e02:	46bd      	mov	sp, r7
 8048e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048e08:	4770      	bx	lr

08048e0a <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8048e0a:	b084      	sub	sp, #16
 8048e0c:	b480      	push	{r7}
 8048e0e:	b083      	sub	sp, #12
 8048e10:	af00      	add	r7, sp, #0
 8048e12:	6078      	str	r0, [r7, #4]
 8048e14:	f107 0014 	add.w	r0, r7, #20
 8048e18:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8048e1c:	687b      	ldr	r3, [r7, #4]
 8048e1e:	2201      	movs	r2, #1
 8048e20:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8048e24:	687b      	ldr	r3, [r7, #4]
 8048e26:	2200      	movs	r2, #0
 8048e28:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8048e2c:	687b      	ldr	r3, [r7, #4]
 8048e2e:	2200      	movs	r2, #0
 8048e30:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8048e34:	687b      	ldr	r3, [r7, #4]
 8048e36:	2200      	movs	r2, #0
 8048e38:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8048e3c:	2300      	movs	r3, #0
}
 8048e3e:	4618      	mov	r0, r3
 8048e40:	370c      	adds	r7, #12
 8048e42:	46bd      	mov	sp, r7
 8048e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8048e48:	b004      	add	sp, #16
 8048e4a:	4770      	bx	lr

08048e4c <__libc_init_array>:
 8048e4c:	b570      	push	{r4, r5, r6, lr}
 8048e4e:	4d0d      	ldr	r5, [pc, #52]	; (8048e84 <__libc_init_array+0x38>)
 8048e50:	2600      	movs	r6, #0
 8048e52:	4c0d      	ldr	r4, [pc, #52]	; (8048e88 <__libc_init_array+0x3c>)
 8048e54:	1b64      	subs	r4, r4, r5
 8048e56:	10a4      	asrs	r4, r4, #2
 8048e58:	42a6      	cmp	r6, r4
 8048e5a:	d109      	bne.n	8048e70 <__libc_init_array+0x24>
 8048e5c:	4d0b      	ldr	r5, [pc, #44]	; (8048e8c <__libc_init_array+0x40>)
 8048e5e:	2600      	movs	r6, #0
 8048e60:	4c0b      	ldr	r4, [pc, #44]	; (8048e90 <__libc_init_array+0x44>)
 8048e62:	f000 f81f 	bl	8048ea4 <_init>
 8048e66:	1b64      	subs	r4, r4, r5
 8048e68:	10a4      	asrs	r4, r4, #2
 8048e6a:	42a6      	cmp	r6, r4
 8048e6c:	d105      	bne.n	8048e7a <__libc_init_array+0x2e>
 8048e6e:	bd70      	pop	{r4, r5, r6, pc}
 8048e70:	f855 3b04 	ldr.w	r3, [r5], #4
 8048e74:	3601      	adds	r6, #1
 8048e76:	4798      	blx	r3
 8048e78:	e7ee      	b.n	8048e58 <__libc_init_array+0xc>
 8048e7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8048e7e:	3601      	adds	r6, #1
 8048e80:	4798      	blx	r3
 8048e82:	e7f2      	b.n	8048e6a <__libc_init_array+0x1e>
 8048e84:	08048f28 	.word	0x08048f28
 8048e88:	08048f28 	.word	0x08048f28
 8048e8c:	08048f28 	.word	0x08048f28
 8048e90:	08048f2c 	.word	0x08048f2c

08048e94 <memset>:
 8048e94:	4402      	add	r2, r0
 8048e96:	4603      	mov	r3, r0
 8048e98:	4293      	cmp	r3, r2
 8048e9a:	d100      	bne.n	8048e9e <memset+0xa>
 8048e9c:	4770      	bx	lr
 8048e9e:	f803 1b01 	strb.w	r1, [r3], #1
 8048ea2:	e7f9      	b.n	8048e98 <memset+0x4>

08048ea4 <_init>:
 8048ea4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8048ea6:	bf00      	nop
 8048ea8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8048eaa:	bc08      	pop	{r3}
 8048eac:	469e      	mov	lr, r3
 8048eae:	4770      	bx	lr

08048eb0 <_fini>:
 8048eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8048eb2:	bf00      	nop
 8048eb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8048eb6:	bc08      	pop	{r3}
 8048eb8:	469e      	mov	lr, r3
 8048eba:	4770      	bx	lr
 8048ebc:	0000      	movs	r0, r0
	...

08048ec0 <__SECURE_SystemCoreClockUpdate_veneer>:
 8048ec0:	b401      	push	{r0}
 8048ec2:	4802      	ldr	r0, [pc, #8]	; (8048ecc <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 8048ec4:	4684      	mov	ip, r0
 8048ec6:	bc01      	pop	{r0}
 8048ec8:	4760      	bx	ip
 8048eca:	bf00      	nop
 8048ecc:	0c03e001 	.word	0x0c03e001
