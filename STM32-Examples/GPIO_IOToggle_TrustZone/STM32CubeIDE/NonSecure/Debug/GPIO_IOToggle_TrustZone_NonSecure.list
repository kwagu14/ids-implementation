
GPIO_IOToggle_TrustZone_NonSecure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08040000  08040000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004720  080401f8  080401f8  000101f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000128  08044918  08044918  00014918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044a40  08044a40  00018070  2**0
                  CONTENTS
  4 .ARM          00000008  08044a40  08044a40  00014a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044a48  08044a48  00018070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08044a48  08044a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08044a50  08044a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20018000  08044a58  00018000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000d0  20018070  08044ac8  00018070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20018140  08044ac8  00018140  2**0
                  ALLOC
 11 .ARM.attributes 00000036  00000000  00000000  00018070  2**0
                  CONTENTS, READONLY
 12 .debug_line   0000dec2  00000000  00000000  000180a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   0000dd83  00000000  00000000  00025f68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001db9  00000000  00000000  00033ceb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b08  00000000  00000000  00035aa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    001052cf  00000000  00000000  000365b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000a50  00000000  00000000  0013b880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00029acb  00000000  00000000  0013c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00165d9b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  00165dec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080401f8 <__do_global_dtors_aux>:
 80401f8:	b510      	push	{r4, lr}
 80401fa:	4c05      	ldr	r4, [pc, #20]	; (8040210 <__do_global_dtors_aux+0x18>)
 80401fc:	7823      	ldrb	r3, [r4, #0]
 80401fe:	b933      	cbnz	r3, 804020e <__do_global_dtors_aux+0x16>
 8040200:	4b04      	ldr	r3, [pc, #16]	; (8040214 <__do_global_dtors_aux+0x1c>)
 8040202:	b113      	cbz	r3, 804020a <__do_global_dtors_aux+0x12>
 8040204:	4804      	ldr	r0, [pc, #16]	; (8040218 <__do_global_dtors_aux+0x20>)
 8040206:	e000      	b.n	804020a <__do_global_dtors_aux+0x12>
 8040208:	bf00      	nop
 804020a:	2301      	movs	r3, #1
 804020c:	7023      	strb	r3, [r4, #0]
 804020e:	bd10      	pop	{r4, pc}
 8040210:	20018070 	.word	0x20018070
 8040214:	00000000 	.word	0x00000000
 8040218:	080448dc 	.word	0x080448dc

0804021c <frame_dummy>:
 804021c:	b508      	push	{r3, lr}
 804021e:	4b03      	ldr	r3, [pc, #12]	; (804022c <frame_dummy+0x10>)
 8040220:	b11b      	cbz	r3, 804022a <frame_dummy+0xe>
 8040222:	4903      	ldr	r1, [pc, #12]	; (8040230 <frame_dummy+0x14>)
 8040224:	4803      	ldr	r0, [pc, #12]	; (8040234 <frame_dummy+0x18>)
 8040226:	e000      	b.n	804022a <frame_dummy+0xe>
 8040228:	bf00      	nop
 804022a:	bd08      	pop	{r3, pc}
 804022c:	00000000 	.word	0x00000000
 8040230:	20018074 	.word	0x20018074
 8040234:	080448dc 	.word	0x080448dc

08040238 <__aeabi_uldivmod>:
 8040238:	b953      	cbnz	r3, 8040250 <__aeabi_uldivmod+0x18>
 804023a:	b94a      	cbnz	r2, 8040250 <__aeabi_uldivmod+0x18>
 804023c:	2900      	cmp	r1, #0
 804023e:	bf08      	it	eq
 8040240:	2800      	cmpeq	r0, #0
 8040242:	bf1c      	itt	ne
 8040244:	f04f 31ff 	movne.w	r1, #4294967295
 8040248:	f04f 30ff 	movne.w	r0, #4294967295
 804024c:	f000 b982 	b.w	8040554 <__aeabi_idiv0>
 8040250:	f1ad 0c08 	sub.w	ip, sp, #8
 8040254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8040258:	f000 f806 	bl	8040268 <__udivmoddi4>
 804025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8040260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8040264:	b004      	add	sp, #16
 8040266:	4770      	bx	lr

08040268 <__udivmoddi4>:
 8040268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 804026c:	9d09      	ldr	r5, [sp, #36]	; 0x24
 804026e:	4604      	mov	r4, r0
 8040270:	460f      	mov	r7, r1
 8040272:	2b00      	cmp	r3, #0
 8040274:	d148      	bne.n	8040308 <__udivmoddi4+0xa0>
 8040276:	428a      	cmp	r2, r1
 8040278:	4694      	mov	ip, r2
 804027a:	d961      	bls.n	8040340 <__udivmoddi4+0xd8>
 804027c:	fab2 f382 	clz	r3, r2
 8040280:	b143      	cbz	r3, 8040294 <__udivmoddi4+0x2c>
 8040282:	f1c3 0120 	rsb	r1, r3, #32
 8040286:	409f      	lsls	r7, r3
 8040288:	fa02 fc03 	lsl.w	ip, r2, r3
 804028c:	409c      	lsls	r4, r3
 804028e:	fa20 f101 	lsr.w	r1, r0, r1
 8040292:	430f      	orrs	r7, r1
 8040294:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8040298:	fa1f fe8c 	uxth.w	lr, ip
 804029c:	0c22      	lsrs	r2, r4, #16
 804029e:	fbb7 f6f1 	udiv	r6, r7, r1
 80402a2:	fb01 7716 	mls	r7, r1, r6, r7
 80402a6:	fb06 f00e 	mul.w	r0, r6, lr
 80402aa:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80402ae:	4290      	cmp	r0, r2
 80402b0:	d908      	bls.n	80402c4 <__udivmoddi4+0x5c>
 80402b2:	eb1c 0202 	adds.w	r2, ip, r2
 80402b6:	f106 37ff 	add.w	r7, r6, #4294967295
 80402ba:	d202      	bcs.n	80402c2 <__udivmoddi4+0x5a>
 80402bc:	4290      	cmp	r0, r2
 80402be:	f200 8137 	bhi.w	8040530 <__udivmoddi4+0x2c8>
 80402c2:	463e      	mov	r6, r7
 80402c4:	1a12      	subs	r2, r2, r0
 80402c6:	b2a4      	uxth	r4, r4
 80402c8:	fbb2 f0f1 	udiv	r0, r2, r1
 80402cc:	fb01 2210 	mls	r2, r1, r0, r2
 80402d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80402d4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80402d8:	45a6      	cmp	lr, r4
 80402da:	d908      	bls.n	80402ee <__udivmoddi4+0x86>
 80402dc:	eb1c 0404 	adds.w	r4, ip, r4
 80402e0:	f100 32ff 	add.w	r2, r0, #4294967295
 80402e4:	d202      	bcs.n	80402ec <__udivmoddi4+0x84>
 80402e6:	45a6      	cmp	lr, r4
 80402e8:	f200 811c 	bhi.w	8040524 <__udivmoddi4+0x2bc>
 80402ec:	4610      	mov	r0, r2
 80402ee:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80402f2:	eba4 040e 	sub.w	r4, r4, lr
 80402f6:	2600      	movs	r6, #0
 80402f8:	b11d      	cbz	r5, 8040302 <__udivmoddi4+0x9a>
 80402fa:	40dc      	lsrs	r4, r3
 80402fc:	2300      	movs	r3, #0
 80402fe:	e9c5 4300 	strd	r4, r3, [r5]
 8040302:	4631      	mov	r1, r6
 8040304:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040308:	428b      	cmp	r3, r1
 804030a:	d909      	bls.n	8040320 <__udivmoddi4+0xb8>
 804030c:	2d00      	cmp	r5, #0
 804030e:	f000 80fd 	beq.w	804050c <__udivmoddi4+0x2a4>
 8040312:	2600      	movs	r6, #0
 8040314:	e9c5 0100 	strd	r0, r1, [r5]
 8040318:	4630      	mov	r0, r6
 804031a:	4631      	mov	r1, r6
 804031c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8040320:	fab3 f683 	clz	r6, r3
 8040324:	2e00      	cmp	r6, #0
 8040326:	d14b      	bne.n	80403c0 <__udivmoddi4+0x158>
 8040328:	428b      	cmp	r3, r1
 804032a:	f0c0 80f2 	bcc.w	8040512 <__udivmoddi4+0x2aa>
 804032e:	4282      	cmp	r2, r0
 8040330:	f240 80ef 	bls.w	8040512 <__udivmoddi4+0x2aa>
 8040334:	4630      	mov	r0, r6
 8040336:	2d00      	cmp	r5, #0
 8040338:	d0e3      	beq.n	8040302 <__udivmoddi4+0x9a>
 804033a:	e9c5 4700 	strd	r4, r7, [r5]
 804033e:	e7e0      	b.n	8040302 <__udivmoddi4+0x9a>
 8040340:	b902      	cbnz	r2, 8040344 <__udivmoddi4+0xdc>
 8040342:	deff      	udf	#255	; 0xff
 8040344:	fab2 f382 	clz	r3, r2
 8040348:	2b00      	cmp	r3, #0
 804034a:	f040 809d 	bne.w	8040488 <__udivmoddi4+0x220>
 804034e:	1a89      	subs	r1, r1, r2
 8040350:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8040354:	b297      	uxth	r7, r2
 8040356:	2601      	movs	r6, #1
 8040358:	0c20      	lsrs	r0, r4, #16
 804035a:	fbb1 f2fe 	udiv	r2, r1, lr
 804035e:	fb0e 1112 	mls	r1, lr, r2, r1
 8040362:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8040366:	fb07 f002 	mul.w	r0, r7, r2
 804036a:	4288      	cmp	r0, r1
 804036c:	d90f      	bls.n	804038e <__udivmoddi4+0x126>
 804036e:	eb1c 0101 	adds.w	r1, ip, r1
 8040372:	f102 38ff 	add.w	r8, r2, #4294967295
 8040376:	bf2c      	ite	cs
 8040378:	f04f 0901 	movcs.w	r9, #1
 804037c:	f04f 0900 	movcc.w	r9, #0
 8040380:	4288      	cmp	r0, r1
 8040382:	d903      	bls.n	804038c <__udivmoddi4+0x124>
 8040384:	f1b9 0f00 	cmp.w	r9, #0
 8040388:	f000 80cf 	beq.w	804052a <__udivmoddi4+0x2c2>
 804038c:	4642      	mov	r2, r8
 804038e:	1a09      	subs	r1, r1, r0
 8040390:	b2a4      	uxth	r4, r4
 8040392:	fbb1 f0fe 	udiv	r0, r1, lr
 8040396:	fb0e 1110 	mls	r1, lr, r0, r1
 804039a:	fb00 f707 	mul.w	r7, r0, r7
 804039e:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80403a2:	42a7      	cmp	r7, r4
 80403a4:	d908      	bls.n	80403b8 <__udivmoddi4+0x150>
 80403a6:	eb1c 0404 	adds.w	r4, ip, r4
 80403aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80403ae:	d202      	bcs.n	80403b6 <__udivmoddi4+0x14e>
 80403b0:	42a7      	cmp	r7, r4
 80403b2:	f200 80b4 	bhi.w	804051e <__udivmoddi4+0x2b6>
 80403b6:	4608      	mov	r0, r1
 80403b8:	1be4      	subs	r4, r4, r7
 80403ba:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80403be:	e79b      	b.n	80402f8 <__udivmoddi4+0x90>
 80403c0:	f1c6 0720 	rsb	r7, r6, #32
 80403c4:	40b3      	lsls	r3, r6
 80403c6:	fa01 f406 	lsl.w	r4, r1, r6
 80403ca:	fa22 fc07 	lsr.w	ip, r2, r7
 80403ce:	40f9      	lsrs	r1, r7
 80403d0:	40b2      	lsls	r2, r6
 80403d2:	ea4c 0c03 	orr.w	ip, ip, r3
 80403d6:	fa20 f307 	lsr.w	r3, r0, r7
 80403da:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80403de:	431c      	orrs	r4, r3
 80403e0:	fa1f fe8c 	uxth.w	lr, ip
 80403e4:	fa00 f306 	lsl.w	r3, r0, r6
 80403e8:	0c20      	lsrs	r0, r4, #16
 80403ea:	fbb1 f8f9 	udiv	r8, r1, r9
 80403ee:	fb09 1118 	mls	r1, r9, r8, r1
 80403f2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80403f6:	fb08 f00e 	mul.w	r0, r8, lr
 80403fa:	4288      	cmp	r0, r1
 80403fc:	d90f      	bls.n	804041e <__udivmoddi4+0x1b6>
 80403fe:	eb1c 0101 	adds.w	r1, ip, r1
 8040402:	f108 3aff 	add.w	sl, r8, #4294967295
 8040406:	bf2c      	ite	cs
 8040408:	f04f 0b01 	movcs.w	fp, #1
 804040c:	f04f 0b00 	movcc.w	fp, #0
 8040410:	4288      	cmp	r0, r1
 8040412:	d903      	bls.n	804041c <__udivmoddi4+0x1b4>
 8040414:	f1bb 0f00 	cmp.w	fp, #0
 8040418:	f000 808d 	beq.w	8040536 <__udivmoddi4+0x2ce>
 804041c:	46d0      	mov	r8, sl
 804041e:	1a09      	subs	r1, r1, r0
 8040420:	b2a4      	uxth	r4, r4
 8040422:	fbb1 f0f9 	udiv	r0, r1, r9
 8040426:	fb09 1110 	mls	r1, r9, r0, r1
 804042a:	fb00 fe0e 	mul.w	lr, r0, lr
 804042e:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8040432:	458e      	cmp	lr, r1
 8040434:	d907      	bls.n	8040446 <__udivmoddi4+0x1de>
 8040436:	eb1c 0101 	adds.w	r1, ip, r1
 804043a:	f100 34ff 	add.w	r4, r0, #4294967295
 804043e:	d201      	bcs.n	8040444 <__udivmoddi4+0x1dc>
 8040440:	458e      	cmp	lr, r1
 8040442:	d87f      	bhi.n	8040544 <__udivmoddi4+0x2dc>
 8040444:	4620      	mov	r0, r4
 8040446:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 804044a:	eba1 010e 	sub.w	r1, r1, lr
 804044e:	fba0 9802 	umull	r9, r8, r0, r2
 8040452:	4541      	cmp	r1, r8
 8040454:	464c      	mov	r4, r9
 8040456:	46c6      	mov	lr, r8
 8040458:	d302      	bcc.n	8040460 <__udivmoddi4+0x1f8>
 804045a:	d106      	bne.n	804046a <__udivmoddi4+0x202>
 804045c:	454b      	cmp	r3, r9
 804045e:	d204      	bcs.n	804046a <__udivmoddi4+0x202>
 8040460:	3801      	subs	r0, #1
 8040462:	ebb9 0402 	subs.w	r4, r9, r2
 8040466:	eb68 0e0c 	sbc.w	lr, r8, ip
 804046a:	2d00      	cmp	r5, #0
 804046c:	d070      	beq.n	8040550 <__udivmoddi4+0x2e8>
 804046e:	1b1a      	subs	r2, r3, r4
 8040470:	eb61 010e 	sbc.w	r1, r1, lr
 8040474:	fa22 f306 	lsr.w	r3, r2, r6
 8040478:	fa01 f707 	lsl.w	r7, r1, r7
 804047c:	40f1      	lsrs	r1, r6
 804047e:	2600      	movs	r6, #0
 8040480:	431f      	orrs	r7, r3
 8040482:	e9c5 7100 	strd	r7, r1, [r5]
 8040486:	e73c      	b.n	8040302 <__udivmoddi4+0x9a>
 8040488:	fa02 fc03 	lsl.w	ip, r2, r3
 804048c:	f1c3 0020 	rsb	r0, r3, #32
 8040490:	fa01 f203 	lsl.w	r2, r1, r3
 8040494:	fa21 f600 	lsr.w	r6, r1, r0
 8040498:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 804049c:	fa24 f100 	lsr.w	r1, r4, r0
 80404a0:	fa1f f78c 	uxth.w	r7, ip
 80404a4:	409c      	lsls	r4, r3
 80404a6:	4311      	orrs	r1, r2
 80404a8:	fbb6 f0fe 	udiv	r0, r6, lr
 80404ac:	0c0a      	lsrs	r2, r1, #16
 80404ae:	fb0e 6610 	mls	r6, lr, r0, r6
 80404b2:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 80404b6:	fb00 f607 	mul.w	r6, r0, r7
 80404ba:	4296      	cmp	r6, r2
 80404bc:	d90e      	bls.n	80404dc <__udivmoddi4+0x274>
 80404be:	eb1c 0202 	adds.w	r2, ip, r2
 80404c2:	f100 38ff 	add.w	r8, r0, #4294967295
 80404c6:	bf2c      	ite	cs
 80404c8:	f04f 0901 	movcs.w	r9, #1
 80404cc:	f04f 0900 	movcc.w	r9, #0
 80404d0:	4296      	cmp	r6, r2
 80404d2:	d902      	bls.n	80404da <__udivmoddi4+0x272>
 80404d4:	f1b9 0f00 	cmp.w	r9, #0
 80404d8:	d031      	beq.n	804053e <__udivmoddi4+0x2d6>
 80404da:	4640      	mov	r0, r8
 80404dc:	1b92      	subs	r2, r2, r6
 80404de:	b289      	uxth	r1, r1
 80404e0:	fbb2 f6fe 	udiv	r6, r2, lr
 80404e4:	fb0e 2216 	mls	r2, lr, r6, r2
 80404e8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80404ec:	fb06 f207 	mul.w	r2, r6, r7
 80404f0:	428a      	cmp	r2, r1
 80404f2:	d907      	bls.n	8040504 <__udivmoddi4+0x29c>
 80404f4:	eb1c 0101 	adds.w	r1, ip, r1
 80404f8:	f106 38ff 	add.w	r8, r6, #4294967295
 80404fc:	d201      	bcs.n	8040502 <__udivmoddi4+0x29a>
 80404fe:	428a      	cmp	r2, r1
 8040500:	d823      	bhi.n	804054a <__udivmoddi4+0x2e2>
 8040502:	4646      	mov	r6, r8
 8040504:	1a89      	subs	r1, r1, r2
 8040506:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 804050a:	e725      	b.n	8040358 <__udivmoddi4+0xf0>
 804050c:	462e      	mov	r6, r5
 804050e:	4628      	mov	r0, r5
 8040510:	e6f7      	b.n	8040302 <__udivmoddi4+0x9a>
 8040512:	1a84      	subs	r4, r0, r2
 8040514:	eb61 0303 	sbc.w	r3, r1, r3
 8040518:	2001      	movs	r0, #1
 804051a:	461f      	mov	r7, r3
 804051c:	e70b      	b.n	8040336 <__udivmoddi4+0xce>
 804051e:	4464      	add	r4, ip
 8040520:	3802      	subs	r0, #2
 8040522:	e749      	b.n	80403b8 <__udivmoddi4+0x150>
 8040524:	4464      	add	r4, ip
 8040526:	3802      	subs	r0, #2
 8040528:	e6e1      	b.n	80402ee <__udivmoddi4+0x86>
 804052a:	3a02      	subs	r2, #2
 804052c:	4461      	add	r1, ip
 804052e:	e72e      	b.n	804038e <__udivmoddi4+0x126>
 8040530:	3e02      	subs	r6, #2
 8040532:	4462      	add	r2, ip
 8040534:	e6c6      	b.n	80402c4 <__udivmoddi4+0x5c>
 8040536:	f1a8 0802 	sub.w	r8, r8, #2
 804053a:	4461      	add	r1, ip
 804053c:	e76f      	b.n	804041e <__udivmoddi4+0x1b6>
 804053e:	3802      	subs	r0, #2
 8040540:	4462      	add	r2, ip
 8040542:	e7cb      	b.n	80404dc <__udivmoddi4+0x274>
 8040544:	3802      	subs	r0, #2
 8040546:	4461      	add	r1, ip
 8040548:	e77d      	b.n	8040446 <__udivmoddi4+0x1de>
 804054a:	3e02      	subs	r6, #2
 804054c:	4461      	add	r1, ip
 804054e:	e7d9      	b.n	8040504 <__udivmoddi4+0x29c>
 8040550:	462e      	mov	r6, r5
 8040552:	e6d6      	b.n	8040302 <__udivmoddi4+0x9a>

08040554 <__aeabi_idiv0>:
 8040554:	4770      	bx	lr
 8040556:	bf00      	nop

08040558 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 8040558:	f8df d034 	ldr.w	sp, [pc, #52]	; 8040590 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 804055c:	f000 fa96 	bl	8040a8c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8040560:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8040562:	e003      	b.n	804056c <LoopCopyDataInit>

08040564 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8040564:	4b0b      	ldr	r3, [pc, #44]	; (8040594 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8040566:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8040568:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 804056a:	3104      	adds	r1, #4

0804056c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 804056c:	480a      	ldr	r0, [pc, #40]	; (8040598 <LoopForever+0xa>)
	ldr	r3, =_edata
 804056e:	4b0b      	ldr	r3, [pc, #44]	; (804059c <LoopForever+0xe>)
	adds	r2, r0, r1
 8040570:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8040572:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8040574:	d3f6      	bcc.n	8040564 <CopyDataInit>
	ldr	r2, =_sbss
 8040576:	4a0a      	ldr	r2, [pc, #40]	; (80405a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8040578:	e002      	b.n	8040580 <LoopFillZerobss>

0804057a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 804057a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 804057c:	f842 3b04 	str.w	r3, [r2], #4

08040580 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8040580:	4b08      	ldr	r3, [pc, #32]	; (80405a4 <LoopForever+0x16>)
	cmp	r2, r3
 8040582:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8040584:	d3f9      	bcc.n	804057a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8040586:	f003 f9e1 	bl	804394c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 804058a:	f000 f80f 	bl	80405ac <main>

0804058e <LoopForever>:

LoopForever:
    b LoopForever
 804058e:	e7fe      	b.n	804058e <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 8040590:	20030000 	.word	0x20030000
	ldr	r3, =_sidata
 8040594:	08044a58 	.word	0x08044a58
	ldr	r0, =_sdata
 8040598:	20018000 	.word	0x20018000
	ldr	r3, =_edata
 804059c:	20018070 	.word	0x20018070
	ldr	r2, =_sbss
 80405a0:	20018070 	.word	0x20018070
	ldr	r3, = _ebss
 80405a4:	20018140 	.word	0x20018140

080405a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80405a8:	e7fe      	b.n	80405a8 <ADC1_2_IRQHandler>
	...

080405ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80405ac:	b580      	push	{r7, lr}
 80405ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* Register SecureFault callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
 80405b0:	490b      	ldr	r1, [pc, #44]	; (80405e0 <main+0x34>)
 80405b2:	2000      	movs	r0, #0
 80405b4:	f004 f9a0 	bl	80448f8 <__SECURE_RegisterCallback_veneer>

  /* Register SecureError callback defined in non-secure and to be called by secure handler */
  SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
 80405b8:	490a      	ldr	r1, [pc, #40]	; (80405e4 <main+0x38>)
 80405ba:	2001      	movs	r0, #1
 80405bc:	f004 f99c 	bl	80448f8 <__SECURE_RegisterCallback_veneer>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80405c0:	f000 fa78 	bl	8040ab4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80405c4:	f000 f814 	bl	80405f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80405c8:	f000 f8b2 	bl	8040730 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80405cc:	f000 f862 	bl	8040694 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  NonSecureInitIODone = 1;
 80405d0:	4b05      	ldr	r3, [pc, #20]	; (80405e8 <main+0x3c>)
 80405d2:	2201      	movs	r2, #1
 80405d4:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  printf("Hello, world!\n\r");
 80405d6:	4805      	ldr	r0, [pc, #20]	; (80405ec <main+0x40>)
 80405d8:	f003 f9e4 	bl	80439a4 <iprintf>
 80405dc:	e7fb      	b.n	80405d6 <main+0x2a>
 80405de:	bf00      	nop
 80405e0:	080407d1 	.word	0x080407d1
 80405e4:	080407dd 	.word	0x080407dd
 80405e8:	20018120 	.word	0x20018120
 80405ec:	08044918 	.word	0x08044918

080405f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80405f0:	b580      	push	{r7, lr}
 80405f2:	b098      	sub	sp, #96	; 0x60
 80405f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80405f6:	f107 0318 	add.w	r3, r7, #24
 80405fa:	2248      	movs	r2, #72	; 0x48
 80405fc:	2100      	movs	r1, #0
 80405fe:	4618      	mov	r0, r3
 8040600:	f003 f9c8 	bl	8043994 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8040604:	1d3b      	adds	r3, r7, #4
 8040606:	2200      	movs	r2, #0
 8040608:	601a      	str	r2, [r3, #0]
 804060a:	605a      	str	r2, [r3, #4]
 804060c:	609a      	str	r2, [r3, #8]
 804060e:	60da      	str	r2, [r3, #12]
 8040610:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 8040612:	2000      	movs	r0, #0
 8040614:	f000 fd4e 	bl	80410b4 <HAL_PWREx_ControlVoltageScaling>
 8040618:	4603      	mov	r3, r0
 804061a:	2b00      	cmp	r3, #0
 804061c:	d001      	beq.n	8040622 <SystemClock_Config+0x32>
  {
    Error_Handler();
 804061e:	f000 f8e3 	bl	80407e8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8040622:	2310      	movs	r3, #16
 8040624:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8040626:	2301      	movs	r3, #1
 8040628:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 804062a:	2300      	movs	r3, #0
 804062c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 804062e:	2360      	movs	r3, #96	; 0x60
 8040630:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8040632:	2302      	movs	r3, #2
 8040634:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8040636:	2301      	movs	r3, #1
 8040638:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 804063a:	2301      	movs	r3, #1
 804063c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 804063e:	2337      	movs	r3, #55	; 0x37
 8040640:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8040642:	2307      	movs	r3, #7
 8040644:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8040646:	2302      	movs	r3, #2
 8040648:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 804064a:	2302      	movs	r3, #2
 804064c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 804064e:	f107 0318 	add.w	r3, r7, #24
 8040652:	4618      	mov	r0, r3
 8040654:	f000 fdae 	bl	80411b4 <HAL_RCC_OscConfig>
 8040658:	4603      	mov	r3, r0
 804065a:	2b00      	cmp	r3, #0
 804065c:	d001      	beq.n	8040662 <SystemClock_Config+0x72>
  {
    Error_Handler();
 804065e:	f000 f8c3 	bl	80407e8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8040662:	230f      	movs	r3, #15
 8040664:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8040666:	2303      	movs	r3, #3
 8040668:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 804066a:	2300      	movs	r3, #0
 804066c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 804066e:	2300      	movs	r3, #0
 8040670:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8040672:	2300      	movs	r3, #0
 8040674:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8040676:	1d3b      	adds	r3, r7, #4
 8040678:	2105      	movs	r1, #5
 804067a:	4618      	mov	r0, r3
 804067c:	f001 fa70 	bl	8041b60 <HAL_RCC_ClockConfig>
 8040680:	4603      	mov	r3, r0
 8040682:	2b00      	cmp	r3, #0
 8040684:	d001      	beq.n	804068a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8040686:	f000 f8af 	bl	80407e8 <Error_Handler>
  }
}
 804068a:	bf00      	nop
 804068c:	3760      	adds	r7, #96	; 0x60
 804068e:	46bd      	mov	sp, r7
 8040690:	bd80      	pop	{r7, pc}
	...

08040694 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8040694:	b580      	push	{r7, lr}
 8040696:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8040698:	4b23      	ldr	r3, [pc, #140]	; (8040728 <MX_USART1_UART_Init+0x94>)
 804069a:	4a24      	ldr	r2, [pc, #144]	; (804072c <MX_USART1_UART_Init+0x98>)
 804069c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 804069e:	4b22      	ldr	r3, [pc, #136]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406a0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80406a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80406a6:	4b20      	ldr	r3, [pc, #128]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406a8:	2200      	movs	r2, #0
 80406aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80406ac:	4b1e      	ldr	r3, [pc, #120]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406ae:	2200      	movs	r2, #0
 80406b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 80406b2:	4b1d      	ldr	r3, [pc, #116]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406b4:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 80406b8:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80406ba:	4b1b      	ldr	r3, [pc, #108]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406bc:	220c      	movs	r2, #12
 80406be:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80406c0:	4b19      	ldr	r3, [pc, #100]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406c2:	2200      	movs	r2, #0
 80406c4:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80406c6:	4b18      	ldr	r3, [pc, #96]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406c8:	2200      	movs	r2, #0
 80406ca:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80406cc:	4b16      	ldr	r3, [pc, #88]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406ce:	2200      	movs	r2, #0
 80406d0:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80406d2:	4b15      	ldr	r3, [pc, #84]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406d4:	2200      	movs	r2, #0
 80406d6:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80406d8:	4b13      	ldr	r3, [pc, #76]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406da:	2200      	movs	r2, #0
 80406dc:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80406de:	4812      	ldr	r0, [pc, #72]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406e0:	f002 fa34 	bl	8042b4c <HAL_UART_Init>
 80406e4:	4603      	mov	r3, r0
 80406e6:	2b00      	cmp	r3, #0
 80406e8:	d001      	beq.n	80406ee <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 80406ea:	f000 f87d 	bl	80407e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80406ee:	2100      	movs	r1, #0
 80406f0:	480d      	ldr	r0, [pc, #52]	; (8040728 <MX_USART1_UART_Init+0x94>)
 80406f2:	f003 f85b 	bl	80437ac <HAL_UARTEx_SetTxFifoThreshold>
 80406f6:	4603      	mov	r3, r0
 80406f8:	2b00      	cmp	r3, #0
 80406fa:	d001      	beq.n	8040700 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 80406fc:	f000 f874 	bl	80407e8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8040700:	2100      	movs	r1, #0
 8040702:	4809      	ldr	r0, [pc, #36]	; (8040728 <MX_USART1_UART_Init+0x94>)
 8040704:	f003 f890 	bl	8043828 <HAL_UARTEx_SetRxFifoThreshold>
 8040708:	4603      	mov	r3, r0
 804070a:	2b00      	cmp	r3, #0
 804070c:	d001      	beq.n	8040712 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 804070e:	f000 f86b 	bl	80407e8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8040712:	4805      	ldr	r0, [pc, #20]	; (8040728 <MX_USART1_UART_Init+0x94>)
 8040714:	f003 f811 	bl	804373a <HAL_UARTEx_DisableFifoMode>
 8040718:	4603      	mov	r3, r0
 804071a:	2b00      	cmp	r3, #0
 804071c:	d001      	beq.n	8040722 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 804071e:	f000 f863 	bl	80407e8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8040722:	bf00      	nop
 8040724:	bd80      	pop	{r7, pc}
 8040726:	bf00      	nop
 8040728:	2001808c 	.word	0x2001808c
 804072c:	40013800 	.word	0x40013800

08040730 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8040730:	b580      	push	{r7, lr}
 8040732:	b088      	sub	sp, #32
 8040734:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8040736:	f107 030c 	add.w	r3, r7, #12
 804073a:	2200      	movs	r2, #0
 804073c:	601a      	str	r2, [r3, #0]
 804073e:	605a      	str	r2, [r3, #4]
 8040740:	609a      	str	r2, [r3, #8]
 8040742:	60da      	str	r2, [r3, #12]
 8040744:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8040746:	4b17      	ldr	r3, [pc, #92]	; (80407a4 <MX_GPIO_Init+0x74>)
 8040748:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804074a:	4a16      	ldr	r2, [pc, #88]	; (80407a4 <MX_GPIO_Init+0x74>)
 804074c:	f043 0308 	orr.w	r3, r3, #8
 8040750:	64d3      	str	r3, [r2, #76]	; 0x4c
 8040752:	4b14      	ldr	r3, [pc, #80]	; (80407a4 <MX_GPIO_Init+0x74>)
 8040754:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040756:	f003 0308 	and.w	r3, r3, #8
 804075a:	60bb      	str	r3, [r7, #8]
 804075c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 804075e:	4b11      	ldr	r3, [pc, #68]	; (80407a4 <MX_GPIO_Init+0x74>)
 8040760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8040762:	4a10      	ldr	r2, [pc, #64]	; (80407a4 <MX_GPIO_Init+0x74>)
 8040764:	f043 0301 	orr.w	r3, r3, #1
 8040768:	64d3      	str	r3, [r2, #76]	; 0x4c
 804076a:	4b0e      	ldr	r3, [pc, #56]	; (80407a4 <MX_GPIO_Init+0x74>)
 804076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804076e:	f003 0301 	and.w	r3, r3, #1
 8040772:	607b      	str	r3, [r7, #4]
 8040774:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_SET);
 8040776:	2201      	movs	r2, #1
 8040778:	2108      	movs	r1, #8
 804077a:	480b      	ldr	r0, [pc, #44]	; (80407a8 <MX_GPIO_Init+0x78>)
 804077c:	f000 fc74 	bl	8041068 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED9_Pin */
  GPIO_InitStruct.Pin = LED9_Pin;
 8040780:	2308      	movs	r3, #8
 8040782:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8040784:	2301      	movs	r3, #1
 8040786:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8040788:	2301      	movs	r3, #1
 804078a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 804078c:	2303      	movs	r3, #3
 804078e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED9_GPIO_Port, &GPIO_InitStruct);
 8040790:	f107 030c 	add.w	r3, r7, #12
 8040794:	4619      	mov	r1, r3
 8040796:	4804      	ldr	r0, [pc, #16]	; (80407a8 <MX_GPIO_Init+0x78>)
 8040798:	f000 fae6 	bl	8040d68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 804079c:	bf00      	nop
 804079e:	3720      	adds	r7, #32
 80407a0:	46bd      	mov	sp, r7
 80407a2:	bd80      	pop	{r7, pc}
 80407a4:	40021000 	.word	0x40021000
 80407a8:	42020c00 	.word	0x42020c00

080407ac <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 80407ac:	b580      	push	{r7, lr}
 80407ae:	b082      	sub	sp, #8
 80407b0:	af00      	add	r7, sp, #0
 80407b2:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 80407b4:	1d39      	adds	r1, r7, #4
 80407b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80407ba:	2201      	movs	r2, #1
 80407bc:	4803      	ldr	r0, [pc, #12]	; (80407cc <__io_putchar+0x20>)
 80407be:	f002 fa15 	bl	8042bec <HAL_UART_Transmit>

  return ch;
 80407c2:	687b      	ldr	r3, [r7, #4]
}
 80407c4:	4618      	mov	r0, r3
 80407c6:	3708      	adds	r7, #8
 80407c8:	46bd      	mov	sp, r7
 80407ca:	bd80      	pop	{r7, pc}
 80407cc:	2001808c 	.word	0x2001808c

080407d0 <SecureFault_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(SECURE_FAULT_CB_ID, (void *)SecureFault_Callback);
  * @retval None
  */
void SecureFault_Callback(void)
{
 80407d0:	b580      	push	{r7, lr}
 80407d2:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure fault generated by IDAU/SAU check */
  /* because of illegal access */
  Error_Handler();
 80407d4:	f000 f808 	bl	80407e8 <Error_Handler>
}
 80407d8:	bf00      	nop
 80407da:	bd80      	pop	{r7, pc}

080407dc <SecureError_Callback>:
  *         done by the non-secure application with non-secure callable API
  *         SECURE_RegisterCallback(GTZC_ERROR_CB_ID, (void *)SecureError_Callback);
  * @retval None
  */
void SecureError_Callback(void)
{
 80407dc:	b580      	push	{r7, lr}
 80407de:	af00      	add	r7, sp, #0
  /* Go to error infinite loop when Secure error generated by GTZC check */
  /* because of illegal access */
  Error_Handler();
 80407e0:	f000 f802 	bl	80407e8 <Error_Handler>
}
 80407e4:	bf00      	nop
 80407e6:	bd80      	pop	{r7, pc}

080407e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80407e8:	b580      	push	{r7, lr}
 80407ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* Insure LED9 is configured */
  if (NonSecureInitIODone != 0)
 80407ec:	4b05      	ldr	r3, [pc, #20]	; (8040804 <Error_Handler+0x1c>)
 80407ee:	681b      	ldr	r3, [r3, #0]
 80407f0:	2b00      	cmp	r3, #0
 80407f2:	d001      	beq.n	80407f8 <Error_Handler+0x10>
  {
    MX_GPIO_Init();
 80407f4:	f7ff ff9c 	bl	8040730 <MX_GPIO_Init>
  }
  /* LED9 on upon secure environment error */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_3, GPIO_PIN_RESET);
 80407f8:	2200      	movs	r2, #0
 80407fa:	2108      	movs	r1, #8
 80407fc:	4802      	ldr	r0, [pc, #8]	; (8040808 <Error_Handler+0x20>)
 80407fe:	f000 fc33 	bl	8041068 <HAL_GPIO_WritePin>

  /* Infinite loop */
  while (1)
 8040802:	e7fe      	b.n	8040802 <Error_Handler+0x1a>
 8040804:	20018120 	.word	0x20018120
 8040808:	42020c00 	.word	0x42020c00

0804080c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 804080c:	b480      	push	{r7}
 804080e:	b083      	sub	sp, #12
 8040810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8040812:	4b0f      	ldr	r3, [pc, #60]	; (8040850 <HAL_MspInit+0x44>)
 8040814:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040816:	4a0e      	ldr	r2, [pc, #56]	; (8040850 <HAL_MspInit+0x44>)
 8040818:	f043 0301 	orr.w	r3, r3, #1
 804081c:	6613      	str	r3, [r2, #96]	; 0x60
 804081e:	4b0c      	ldr	r3, [pc, #48]	; (8040850 <HAL_MspInit+0x44>)
 8040820:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8040822:	f003 0301 	and.w	r3, r3, #1
 8040826:	607b      	str	r3, [r7, #4]
 8040828:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 804082a:	4b09      	ldr	r3, [pc, #36]	; (8040850 <HAL_MspInit+0x44>)
 804082c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804082e:	4a08      	ldr	r2, [pc, #32]	; (8040850 <HAL_MspInit+0x44>)
 8040830:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8040834:	6593      	str	r3, [r2, #88]	; 0x58
 8040836:	4b06      	ldr	r3, [pc, #24]	; (8040850 <HAL_MspInit+0x44>)
 8040838:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804083a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804083e:	603b      	str	r3, [r7, #0]
 8040840:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8040842:	bf00      	nop
 8040844:	370c      	adds	r7, #12
 8040846:	46bd      	mov	sp, r7
 8040848:	f85d 7b04 	ldr.w	r7, [sp], #4
 804084c:	4770      	bx	lr
 804084e:	bf00      	nop
 8040850:	40021000 	.word	0x40021000

08040854 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8040854:	b580      	push	{r7, lr}
 8040856:	b0ae      	sub	sp, #184	; 0xb8
 8040858:	af00      	add	r7, sp, #0
 804085a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 804085c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8040860:	2200      	movs	r2, #0
 8040862:	601a      	str	r2, [r3, #0]
 8040864:	605a      	str	r2, [r3, #4]
 8040866:	609a      	str	r2, [r3, #8]
 8040868:	60da      	str	r2, [r3, #12]
 804086a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 804086c:	f107 0310 	add.w	r3, r7, #16
 8040870:	2294      	movs	r2, #148	; 0x94
 8040872:	2100      	movs	r1, #0
 8040874:	4618      	mov	r0, r3
 8040876:	f003 f88d 	bl	8043994 <memset>
  if(huart->Instance==USART1)
 804087a:	687b      	ldr	r3, [r7, #4]
 804087c:	681b      	ldr	r3, [r3, #0]
 804087e:	4a21      	ldr	r2, [pc, #132]	; (8040904 <HAL_UART_MspInit+0xb0>)
 8040880:	4293      	cmp	r3, r2
 8040882:	d13b      	bne.n	80408fc <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8040884:	2301      	movs	r3, #1
 8040886:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8040888:	2300      	movs	r3, #0
 804088a:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 804088c:	f107 0310 	add.w	r3, r7, #16
 8040890:	4618      	mov	r0, r3
 8040892:	f001 fc45 	bl	8042120 <HAL_RCCEx_PeriphCLKConfig>
 8040896:	4603      	mov	r3, r0
 8040898:	2b00      	cmp	r3, #0
 804089a:	d001      	beq.n	80408a0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 804089c:	f7ff ffa4 	bl	80407e8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80408a0:	4b19      	ldr	r3, [pc, #100]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408a4:	4a18      	ldr	r2, [pc, #96]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408a6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80408aa:	6613      	str	r3, [r2, #96]	; 0x60
 80408ac:	4b16      	ldr	r3, [pc, #88]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80408b0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80408b4:	60fb      	str	r3, [r7, #12]
 80408b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80408b8:	4b13      	ldr	r3, [pc, #76]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80408bc:	4a12      	ldr	r2, [pc, #72]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408be:	f043 0301 	orr.w	r3, r3, #1
 80408c2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80408c4:	4b10      	ldr	r3, [pc, #64]	; (8040908 <HAL_UART_MspInit+0xb4>)
 80408c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80408c8:	f003 0301 	and.w	r3, r3, #1
 80408cc:	60bb      	str	r3, [r7, #8]
 80408ce:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80408d0:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80408d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80408d8:	2302      	movs	r3, #2
 80408da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80408de:	2300      	movs	r3, #0
 80408e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80408e4:	2300      	movs	r3, #0
 80408e6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80408ea:	2307      	movs	r3, #7
 80408ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80408f0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80408f4:	4619      	mov	r1, r3
 80408f6:	4805      	ldr	r0, [pc, #20]	; (804090c <HAL_UART_MspInit+0xb8>)
 80408f8:	f000 fa36 	bl	8040d68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80408fc:	bf00      	nop
 80408fe:	37b8      	adds	r7, #184	; 0xb8
 8040900:	46bd      	mov	sp, r7
 8040902:	bd80      	pop	{r7, pc}
 8040904:	40013800 	.word	0x40013800
 8040908:	40021000 	.word	0x40021000
 804090c:	42020000 	.word	0x42020000

08040910 <MemManage_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8040910:	b480      	push	{r7}
 8040912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8040914:	e7fe      	b.n	8040914 <MemManage_Handler+0x4>

08040916 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8040916:	b480      	push	{r7}
 8040918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 804091a:	e7fe      	b.n	804091a <UsageFault_Handler+0x4>

0804091c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 804091c:	b480      	push	{r7}
 804091e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8040920:	bf00      	nop
 8040922:	46bd      	mov	sp, r7
 8040924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040928:	4770      	bx	lr

0804092a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 804092a:	b480      	push	{r7}
 804092c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 804092e:	bf00      	nop
 8040930:	46bd      	mov	sp, r7
 8040932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040936:	4770      	bx	lr

08040938 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8040938:	b580      	push	{r7, lr}
 804093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 804093c:	f000 f910 	bl	8040b60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
//  HAL_SYSTICK_Callback();
  /* USER CODE END SysTick_IRQn 1 */
}
 8040940:	bf00      	nop
 8040942:	bd80      	pop	{r7, pc}

08040944 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8040944:	b580      	push	{r7, lr}
 8040946:	b086      	sub	sp, #24
 8040948:	af00      	add	r7, sp, #0
 804094a:	60f8      	str	r0, [r7, #12]
 804094c:	60b9      	str	r1, [r7, #8]
 804094e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040950:	2300      	movs	r3, #0
 8040952:	617b      	str	r3, [r7, #20]
 8040954:	e00a      	b.n	804096c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8040956:	e000      	b.n	804095a <_read+0x16>
 8040958:	bf00      	nop
 804095a:	4601      	mov	r1, r0
 804095c:	68bb      	ldr	r3, [r7, #8]
 804095e:	1c5a      	adds	r2, r3, #1
 8040960:	60ba      	str	r2, [r7, #8]
 8040962:	b2ca      	uxtb	r2, r1
 8040964:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8040966:	697b      	ldr	r3, [r7, #20]
 8040968:	3301      	adds	r3, #1
 804096a:	617b      	str	r3, [r7, #20]
 804096c:	697a      	ldr	r2, [r7, #20]
 804096e:	687b      	ldr	r3, [r7, #4]
 8040970:	429a      	cmp	r2, r3
 8040972:	dbf0      	blt.n	8040956 <_read+0x12>
  }

  return len;
 8040974:	687b      	ldr	r3, [r7, #4]
}
 8040976:	4618      	mov	r0, r3
 8040978:	3718      	adds	r7, #24
 804097a:	46bd      	mov	sp, r7
 804097c:	bd80      	pop	{r7, pc}

0804097e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 804097e:	b580      	push	{r7, lr}
 8040980:	b086      	sub	sp, #24
 8040982:	af00      	add	r7, sp, #0
 8040984:	60f8      	str	r0, [r7, #12]
 8040986:	60b9      	str	r1, [r7, #8]
 8040988:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804098a:	2300      	movs	r3, #0
 804098c:	617b      	str	r3, [r7, #20]
 804098e:	e009      	b.n	80409a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8040990:	68bb      	ldr	r3, [r7, #8]
 8040992:	1c5a      	adds	r2, r3, #1
 8040994:	60ba      	str	r2, [r7, #8]
 8040996:	781b      	ldrb	r3, [r3, #0]
 8040998:	4618      	mov	r0, r3
 804099a:	f7ff ff07 	bl	80407ac <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 804099e:	697b      	ldr	r3, [r7, #20]
 80409a0:	3301      	adds	r3, #1
 80409a2:	617b      	str	r3, [r7, #20]
 80409a4:	697a      	ldr	r2, [r7, #20]
 80409a6:	687b      	ldr	r3, [r7, #4]
 80409a8:	429a      	cmp	r2, r3
 80409aa:	dbf1      	blt.n	8040990 <_write+0x12>
  }
  return len;
 80409ac:	687b      	ldr	r3, [r7, #4]
}
 80409ae:	4618      	mov	r0, r3
 80409b0:	3718      	adds	r7, #24
 80409b2:	46bd      	mov	sp, r7
 80409b4:	bd80      	pop	{r7, pc}

080409b6 <_close>:

int _close(int file)
{
 80409b6:	b480      	push	{r7}
 80409b8:	b083      	sub	sp, #12
 80409ba:	af00      	add	r7, sp, #0
 80409bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80409be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80409c2:	4618      	mov	r0, r3
 80409c4:	370c      	adds	r7, #12
 80409c6:	46bd      	mov	sp, r7
 80409c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409cc:	4770      	bx	lr

080409ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80409ce:	b480      	push	{r7}
 80409d0:	b083      	sub	sp, #12
 80409d2:	af00      	add	r7, sp, #0
 80409d4:	6078      	str	r0, [r7, #4]
 80409d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80409d8:	683b      	ldr	r3, [r7, #0]
 80409da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80409de:	605a      	str	r2, [r3, #4]
  return 0;
 80409e0:	2300      	movs	r3, #0
}
 80409e2:	4618      	mov	r0, r3
 80409e4:	370c      	adds	r7, #12
 80409e6:	46bd      	mov	sp, r7
 80409e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80409ec:	4770      	bx	lr

080409ee <_isatty>:

int _isatty(int file)
{
 80409ee:	b480      	push	{r7}
 80409f0:	b083      	sub	sp, #12
 80409f2:	af00      	add	r7, sp, #0
 80409f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80409f6:	2301      	movs	r3, #1
}
 80409f8:	4618      	mov	r0, r3
 80409fa:	370c      	adds	r7, #12
 80409fc:	46bd      	mov	sp, r7
 80409fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a02:	4770      	bx	lr

08040a04 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8040a04:	b480      	push	{r7}
 8040a06:	b085      	sub	sp, #20
 8040a08:	af00      	add	r7, sp, #0
 8040a0a:	60f8      	str	r0, [r7, #12]
 8040a0c:	60b9      	str	r1, [r7, #8]
 8040a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8040a10:	2300      	movs	r3, #0
}
 8040a12:	4618      	mov	r0, r3
 8040a14:	3714      	adds	r7, #20
 8040a16:	46bd      	mov	sp, r7
 8040a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a1c:	4770      	bx	lr
	...

08040a20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8040a20:	b580      	push	{r7, lr}
 8040a22:	b086      	sub	sp, #24
 8040a24:	af00      	add	r7, sp, #0
 8040a26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8040a28:	4a14      	ldr	r2, [pc, #80]	; (8040a7c <_sbrk+0x5c>)
 8040a2a:	4b15      	ldr	r3, [pc, #84]	; (8040a80 <_sbrk+0x60>)
 8040a2c:	1ad3      	subs	r3, r2, r3
 8040a2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8040a30:	697b      	ldr	r3, [r7, #20]
 8040a32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8040a34:	4b13      	ldr	r3, [pc, #76]	; (8040a84 <_sbrk+0x64>)
 8040a36:	681b      	ldr	r3, [r3, #0]
 8040a38:	2b00      	cmp	r3, #0
 8040a3a:	d102      	bne.n	8040a42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8040a3c:	4b11      	ldr	r3, [pc, #68]	; (8040a84 <_sbrk+0x64>)
 8040a3e:	4a12      	ldr	r2, [pc, #72]	; (8040a88 <_sbrk+0x68>)
 8040a40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8040a42:	4b10      	ldr	r3, [pc, #64]	; (8040a84 <_sbrk+0x64>)
 8040a44:	681a      	ldr	r2, [r3, #0]
 8040a46:	687b      	ldr	r3, [r7, #4]
 8040a48:	4413      	add	r3, r2
 8040a4a:	693a      	ldr	r2, [r7, #16]
 8040a4c:	429a      	cmp	r2, r3
 8040a4e:	d207      	bcs.n	8040a60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8040a50:	f002 ff76 	bl	8043940 <__errno>
 8040a54:	4603      	mov	r3, r0
 8040a56:	220c      	movs	r2, #12
 8040a58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8040a5a:	f04f 33ff 	mov.w	r3, #4294967295
 8040a5e:	e009      	b.n	8040a74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8040a60:	4b08      	ldr	r3, [pc, #32]	; (8040a84 <_sbrk+0x64>)
 8040a62:	681b      	ldr	r3, [r3, #0]
 8040a64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8040a66:	4b07      	ldr	r3, [pc, #28]	; (8040a84 <_sbrk+0x64>)
 8040a68:	681a      	ldr	r2, [r3, #0]
 8040a6a:	687b      	ldr	r3, [r7, #4]
 8040a6c:	4413      	add	r3, r2
 8040a6e:	4a05      	ldr	r2, [pc, #20]	; (8040a84 <_sbrk+0x64>)
 8040a70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8040a72:	68fb      	ldr	r3, [r7, #12]
}
 8040a74:	4618      	mov	r0, r3
 8040a76:	3718      	adds	r7, #24
 8040a78:	46bd      	mov	sp, r7
 8040a7a:	bd80      	pop	{r7, pc}
 8040a7c:	20030000 	.word	0x20030000
 8040a80:	00000400 	.word	0x00000400
 8040a84:	20018124 	.word	0x20018124
 8040a88:	20018140 	.word	0x20018140

08040a8c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8040a8c:	b480      	push	{r7}
 8040a8e:	af00      	add	r7, sp, #0
#endif

  /* Non-secure main application shall call SystemCoreClockUpdate() to update */
  /* the SystemCoreClock variable to insure non-secure application relies on  */
  /* the initial clock reference set by secure application.                   */
}
 8040a90:	bf00      	nop
 8040a92:	46bd      	mov	sp, r7
 8040a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040a98:	4770      	bx	lr
	...

08040a9c <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8040a9c:	b580      	push	{r7, lr}
 8040a9e:	af00      	add	r7, sp, #0
  /* Get the SystemCoreClock value from the secure domain */
  SystemCoreClock = SECURE_SystemCoreClockUpdate();
 8040aa0:	f003 ff32 	bl	8044908 <__SECURE_SystemCoreClockUpdate_veneer>
 8040aa4:	4603      	mov	r3, r0
 8040aa6:	4a02      	ldr	r2, [pc, #8]	; (8040ab0 <SystemCoreClockUpdate+0x14>)
 8040aa8:	6013      	str	r3, [r2, #0]
}
 8040aaa:	bf00      	nop
 8040aac:	bd80      	pop	{r7, pc}
 8040aae:	bf00      	nop
 8040ab0:	20018000 	.word	0x20018000

08040ab4 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8040ab4:	b580      	push	{r7, lr}
 8040ab6:	b082      	sub	sp, #8
 8040ab8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8040aba:	2300      	movs	r3, #0
 8040abc:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8040abe:	2004      	movs	r0, #4
 8040ac0:	f000 f920 	bl	8040d04 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 8040ac4:	f7ff ffea 	bl	8040a9c <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8040ac8:	2000      	movs	r0, #0
 8040aca:	f000 f80d 	bl	8040ae8 <HAL_InitTick>
 8040ace:	4603      	mov	r3, r0
 8040ad0:	2b00      	cmp	r3, #0
 8040ad2:	d002      	beq.n	8040ada <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 8040ad4:	2301      	movs	r3, #1
 8040ad6:	71fb      	strb	r3, [r7, #7]
 8040ad8:	e001      	b.n	8040ade <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8040ada:	f7ff fe97 	bl	804080c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8040ade:	79fb      	ldrb	r3, [r7, #7]
}
 8040ae0:	4618      	mov	r0, r3
 8040ae2:	3708      	adds	r7, #8
 8040ae4:	46bd      	mov	sp, r7
 8040ae6:	bd80      	pop	{r7, pc}

08040ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8040ae8:	b580      	push	{r7, lr}
 8040aea:	b084      	sub	sp, #16
 8040aec:	af00      	add	r7, sp, #0
 8040aee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8040af0:	2300      	movs	r3, #0
 8040af2:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8040af4:	4b17      	ldr	r3, [pc, #92]	; (8040b54 <HAL_InitTick+0x6c>)
 8040af6:	781b      	ldrb	r3, [r3, #0]
 8040af8:	2b00      	cmp	r3, #0
 8040afa:	d023      	beq.n	8040b44 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8040afc:	4b16      	ldr	r3, [pc, #88]	; (8040b58 <HAL_InitTick+0x70>)
 8040afe:	681a      	ldr	r2, [r3, #0]
 8040b00:	4b14      	ldr	r3, [pc, #80]	; (8040b54 <HAL_InitTick+0x6c>)
 8040b02:	781b      	ldrb	r3, [r3, #0]
 8040b04:	4619      	mov	r1, r3
 8040b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8040b0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8040b0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8040b12:	4618      	mov	r0, r3
 8040b14:	f000 f91b 	bl	8040d4e <HAL_SYSTICK_Config>
 8040b18:	4603      	mov	r3, r0
 8040b1a:	2b00      	cmp	r3, #0
 8040b1c:	d10f      	bne.n	8040b3e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8040b1e:	687b      	ldr	r3, [r7, #4]
 8040b20:	2b07      	cmp	r3, #7
 8040b22:	d809      	bhi.n	8040b38 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8040b24:	2200      	movs	r2, #0
 8040b26:	6879      	ldr	r1, [r7, #4]
 8040b28:	f04f 30ff 	mov.w	r0, #4294967295
 8040b2c:	f000 f8f5 	bl	8040d1a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8040b30:	4a0a      	ldr	r2, [pc, #40]	; (8040b5c <HAL_InitTick+0x74>)
 8040b32:	687b      	ldr	r3, [r7, #4]
 8040b34:	6013      	str	r3, [r2, #0]
 8040b36:	e007      	b.n	8040b48 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8040b38:	2301      	movs	r3, #1
 8040b3a:	73fb      	strb	r3, [r7, #15]
 8040b3c:	e004      	b.n	8040b48 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8040b3e:	2301      	movs	r3, #1
 8040b40:	73fb      	strb	r3, [r7, #15]
 8040b42:	e001      	b.n	8040b48 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8040b44:	2301      	movs	r3, #1
 8040b46:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8040b48:	7bfb      	ldrb	r3, [r7, #15]
}
 8040b4a:	4618      	mov	r0, r3
 8040b4c:	3710      	adds	r7, #16
 8040b4e:	46bd      	mov	sp, r7
 8040b50:	bd80      	pop	{r7, pc}
 8040b52:	bf00      	nop
 8040b54:	20018008 	.word	0x20018008
 8040b58:	20018000 	.word	0x20018000
 8040b5c:	20018004 	.word	0x20018004

08040b60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8040b60:	b480      	push	{r7}
 8040b62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8040b64:	4b06      	ldr	r3, [pc, #24]	; (8040b80 <HAL_IncTick+0x20>)
 8040b66:	781b      	ldrb	r3, [r3, #0]
 8040b68:	461a      	mov	r2, r3
 8040b6a:	4b06      	ldr	r3, [pc, #24]	; (8040b84 <HAL_IncTick+0x24>)
 8040b6c:	681b      	ldr	r3, [r3, #0]
 8040b6e:	4413      	add	r3, r2
 8040b70:	4a04      	ldr	r2, [pc, #16]	; (8040b84 <HAL_IncTick+0x24>)
 8040b72:	6013      	str	r3, [r2, #0]
}
 8040b74:	bf00      	nop
 8040b76:	46bd      	mov	sp, r7
 8040b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b7c:	4770      	bx	lr
 8040b7e:	bf00      	nop
 8040b80:	20018008 	.word	0x20018008
 8040b84:	20018128 	.word	0x20018128

08040b88 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8040b88:	b480      	push	{r7}
 8040b8a:	af00      	add	r7, sp, #0
  return uwTick;
 8040b8c:	4b03      	ldr	r3, [pc, #12]	; (8040b9c <HAL_GetTick+0x14>)
 8040b8e:	681b      	ldr	r3, [r3, #0]
}
 8040b90:	4618      	mov	r0, r3
 8040b92:	46bd      	mov	sp, r7
 8040b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040b98:	4770      	bx	lr
 8040b9a:	bf00      	nop
 8040b9c:	20018128 	.word	0x20018128

08040ba0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040ba0:	b480      	push	{r7}
 8040ba2:	b085      	sub	sp, #20
 8040ba4:	af00      	add	r7, sp, #0
 8040ba6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8040ba8:	687b      	ldr	r3, [r7, #4]
 8040baa:	f003 0307 	and.w	r3, r3, #7
 8040bae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8040bb0:	4b0c      	ldr	r3, [pc, #48]	; (8040be4 <__NVIC_SetPriorityGrouping+0x44>)
 8040bb2:	68db      	ldr	r3, [r3, #12]
 8040bb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8040bb6:	68ba      	ldr	r2, [r7, #8]
 8040bb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8040bbc:	4013      	ands	r3, r2
 8040bbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8040bc0:	68fb      	ldr	r3, [r7, #12]
 8040bc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8040bc4:	68bb      	ldr	r3, [r7, #8]
 8040bc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8040bc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8040bcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8040bd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8040bd2:	4a04      	ldr	r2, [pc, #16]	; (8040be4 <__NVIC_SetPriorityGrouping+0x44>)
 8040bd4:	68bb      	ldr	r3, [r7, #8]
 8040bd6:	60d3      	str	r3, [r2, #12]
}
 8040bd8:	bf00      	nop
 8040bda:	3714      	adds	r7, #20
 8040bdc:	46bd      	mov	sp, r7
 8040bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040be2:	4770      	bx	lr
 8040be4:	e000ed00 	.word	0xe000ed00

08040be8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8040be8:	b480      	push	{r7}
 8040bea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8040bec:	4b04      	ldr	r3, [pc, #16]	; (8040c00 <__NVIC_GetPriorityGrouping+0x18>)
 8040bee:	68db      	ldr	r3, [r3, #12]
 8040bf0:	0a1b      	lsrs	r3, r3, #8
 8040bf2:	f003 0307 	and.w	r3, r3, #7
}
 8040bf6:	4618      	mov	r0, r3
 8040bf8:	46bd      	mov	sp, r7
 8040bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040bfe:	4770      	bx	lr
 8040c00:	e000ed00 	.word	0xe000ed00

08040c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8040c04:	b480      	push	{r7}
 8040c06:	b083      	sub	sp, #12
 8040c08:	af00      	add	r7, sp, #0
 8040c0a:	4603      	mov	r3, r0
 8040c0c:	6039      	str	r1, [r7, #0]
 8040c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8040c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c14:	2b00      	cmp	r3, #0
 8040c16:	db0a      	blt.n	8040c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c18:	683b      	ldr	r3, [r7, #0]
 8040c1a:	b2da      	uxtb	r2, r3
 8040c1c:	490c      	ldr	r1, [pc, #48]	; (8040c50 <__NVIC_SetPriority+0x4c>)
 8040c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8040c22:	0152      	lsls	r2, r2, #5
 8040c24:	b2d2      	uxtb	r2, r2
 8040c26:	440b      	add	r3, r1
 8040c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8040c2c:	e00a      	b.n	8040c44 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8040c2e:	683b      	ldr	r3, [r7, #0]
 8040c30:	b2da      	uxtb	r2, r3
 8040c32:	4908      	ldr	r1, [pc, #32]	; (8040c54 <__NVIC_SetPriority+0x50>)
 8040c34:	79fb      	ldrb	r3, [r7, #7]
 8040c36:	f003 030f 	and.w	r3, r3, #15
 8040c3a:	3b04      	subs	r3, #4
 8040c3c:	0152      	lsls	r2, r2, #5
 8040c3e:	b2d2      	uxtb	r2, r2
 8040c40:	440b      	add	r3, r1
 8040c42:	761a      	strb	r2, [r3, #24]
}
 8040c44:	bf00      	nop
 8040c46:	370c      	adds	r7, #12
 8040c48:	46bd      	mov	sp, r7
 8040c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040c4e:	4770      	bx	lr
 8040c50:	e000e100 	.word	0xe000e100
 8040c54:	e000ed00 	.word	0xe000ed00

08040c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040c58:	b480      	push	{r7}
 8040c5a:	b089      	sub	sp, #36	; 0x24
 8040c5c:	af00      	add	r7, sp, #0
 8040c5e:	60f8      	str	r0, [r7, #12]
 8040c60:	60b9      	str	r1, [r7, #8]
 8040c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8040c64:	68fb      	ldr	r3, [r7, #12]
 8040c66:	f003 0307 	and.w	r3, r3, #7
 8040c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8040c6c:	69fb      	ldr	r3, [r7, #28]
 8040c6e:	f1c3 0307 	rsb	r3, r3, #7
 8040c72:	2b03      	cmp	r3, #3
 8040c74:	bf28      	it	cs
 8040c76:	2303      	movcs	r3, #3
 8040c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8040c7a:	69fb      	ldr	r3, [r7, #28]
 8040c7c:	3303      	adds	r3, #3
 8040c7e:	2b06      	cmp	r3, #6
 8040c80:	d902      	bls.n	8040c88 <NVIC_EncodePriority+0x30>
 8040c82:	69fb      	ldr	r3, [r7, #28]
 8040c84:	3b04      	subs	r3, #4
 8040c86:	e000      	b.n	8040c8a <NVIC_EncodePriority+0x32>
 8040c88:	2300      	movs	r3, #0
 8040c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8040c90:	69bb      	ldr	r3, [r7, #24]
 8040c92:	fa02 f303 	lsl.w	r3, r2, r3
 8040c96:	43da      	mvns	r2, r3
 8040c98:	68bb      	ldr	r3, [r7, #8]
 8040c9a:	401a      	ands	r2, r3
 8040c9c:	697b      	ldr	r3, [r7, #20]
 8040c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8040ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8040ca4:	697b      	ldr	r3, [r7, #20]
 8040ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8040caa:	43d9      	mvns	r1, r3
 8040cac:	687b      	ldr	r3, [r7, #4]
 8040cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8040cb0:	4313      	orrs	r3, r2
         );
}
 8040cb2:	4618      	mov	r0, r3
 8040cb4:	3724      	adds	r7, #36	; 0x24
 8040cb6:	46bd      	mov	sp, r7
 8040cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8040cbc:	4770      	bx	lr
	...

08040cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8040cc0:	b580      	push	{r7, lr}
 8040cc2:	b082      	sub	sp, #8
 8040cc4:	af00      	add	r7, sp, #0
 8040cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8040cc8:	687b      	ldr	r3, [r7, #4]
 8040cca:	3b01      	subs	r3, #1
 8040ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8040cd0:	d301      	bcc.n	8040cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8040cd2:	2301      	movs	r3, #1
 8040cd4:	e00f      	b.n	8040cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8040cd6:	4a0a      	ldr	r2, [pc, #40]	; (8040d00 <SysTick_Config+0x40>)
 8040cd8:	687b      	ldr	r3, [r7, #4]
 8040cda:	3b01      	subs	r3, #1
 8040cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8040cde:	2107      	movs	r1, #7
 8040ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8040ce4:	f7ff ff8e 	bl	8040c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8040ce8:	4b05      	ldr	r3, [pc, #20]	; (8040d00 <SysTick_Config+0x40>)
 8040cea:	2200      	movs	r2, #0
 8040cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8040cee:	4b04      	ldr	r3, [pc, #16]	; (8040d00 <SysTick_Config+0x40>)
 8040cf0:	2207      	movs	r2, #7
 8040cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8040cf4:	2300      	movs	r3, #0
}
 8040cf6:	4618      	mov	r0, r3
 8040cf8:	3708      	adds	r7, #8
 8040cfa:	46bd      	mov	sp, r7
 8040cfc:	bd80      	pop	{r7, pc}
 8040cfe:	bf00      	nop
 8040d00:	e000e010 	.word	0xe000e010

08040d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8040d04:	b580      	push	{r7, lr}
 8040d06:	b082      	sub	sp, #8
 8040d08:	af00      	add	r7, sp, #0
 8040d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8040d0c:	6878      	ldr	r0, [r7, #4]
 8040d0e:	f7ff ff47 	bl	8040ba0 <__NVIC_SetPriorityGrouping>
}
 8040d12:	bf00      	nop
 8040d14:	3708      	adds	r7, #8
 8040d16:	46bd      	mov	sp, r7
 8040d18:	bd80      	pop	{r7, pc}

08040d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8040d1a:	b580      	push	{r7, lr}
 8040d1c:	b086      	sub	sp, #24
 8040d1e:	af00      	add	r7, sp, #0
 8040d20:	4603      	mov	r3, r0
 8040d22:	60b9      	str	r1, [r7, #8]
 8040d24:	607a      	str	r2, [r7, #4]
 8040d26:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8040d28:	f7ff ff5e 	bl	8040be8 <__NVIC_GetPriorityGrouping>
 8040d2c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8040d2e:	687a      	ldr	r2, [r7, #4]
 8040d30:	68b9      	ldr	r1, [r7, #8]
 8040d32:	6978      	ldr	r0, [r7, #20]
 8040d34:	f7ff ff90 	bl	8040c58 <NVIC_EncodePriority>
 8040d38:	4602      	mov	r2, r0
 8040d3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8040d3e:	4611      	mov	r1, r2
 8040d40:	4618      	mov	r0, r3
 8040d42:	f7ff ff5f 	bl	8040c04 <__NVIC_SetPriority>
}
 8040d46:	bf00      	nop
 8040d48:	3718      	adds	r7, #24
 8040d4a:	46bd      	mov	sp, r7
 8040d4c:	bd80      	pop	{r7, pc}

08040d4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8040d4e:	b580      	push	{r7, lr}
 8040d50:	b082      	sub	sp, #8
 8040d52:	af00      	add	r7, sp, #0
 8040d54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8040d56:	6878      	ldr	r0, [r7, #4]
 8040d58:	f7ff ffb2 	bl	8040cc0 <SysTick_Config>
 8040d5c:	4603      	mov	r3, r0
}
 8040d5e:	4618      	mov	r0, r3
 8040d60:	3708      	adds	r7, #8
 8040d62:	46bd      	mov	sp, r7
 8040d64:	bd80      	pop	{r7, pc}
	...

08040d68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8040d68:	b480      	push	{r7}
 8040d6a:	b087      	sub	sp, #28
 8040d6c:	af00      	add	r7, sp, #0
 8040d6e:	6078      	str	r0, [r7, #4]
 8040d70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 8040d72:	2300      	movs	r3, #0
 8040d74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8040d76:	e158      	b.n	804102a <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8040d78:	683b      	ldr	r3, [r7, #0]
 8040d7a:	681a      	ldr	r2, [r3, #0]
 8040d7c:	2101      	movs	r1, #1
 8040d7e:	697b      	ldr	r3, [r7, #20]
 8040d80:	fa01 f303 	lsl.w	r3, r1, r3
 8040d84:	4013      	ands	r3, r2
 8040d86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8040d88:	68fb      	ldr	r3, [r7, #12]
 8040d8a:	2b00      	cmp	r3, #0
 8040d8c:	f000 814a 	beq.w	8041024 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8040d90:	683b      	ldr	r3, [r7, #0]
 8040d92:	685b      	ldr	r3, [r3, #4]
 8040d94:	f003 0303 	and.w	r3, r3, #3
 8040d98:	2b01      	cmp	r3, #1
 8040d9a:	d005      	beq.n	8040da8 <HAL_GPIO_Init+0x40>
 8040d9c:	683b      	ldr	r3, [r7, #0]
 8040d9e:	685b      	ldr	r3, [r3, #4]
 8040da0:	f003 0303 	and.w	r3, r3, #3
 8040da4:	2b02      	cmp	r3, #2
 8040da6:	d130      	bne.n	8040e0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8040da8:	687b      	ldr	r3, [r7, #4]
 8040daa:	689b      	ldr	r3, [r3, #8]
 8040dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8040dae:	697b      	ldr	r3, [r7, #20]
 8040db0:	005b      	lsls	r3, r3, #1
 8040db2:	2203      	movs	r2, #3
 8040db4:	fa02 f303 	lsl.w	r3, r2, r3
 8040db8:	43db      	mvns	r3, r3
 8040dba:	693a      	ldr	r2, [r7, #16]
 8040dbc:	4013      	ands	r3, r2
 8040dbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8040dc0:	683b      	ldr	r3, [r7, #0]
 8040dc2:	68da      	ldr	r2, [r3, #12]
 8040dc4:	697b      	ldr	r3, [r7, #20]
 8040dc6:	005b      	lsls	r3, r3, #1
 8040dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8040dcc:	693a      	ldr	r2, [r7, #16]
 8040dce:	4313      	orrs	r3, r2
 8040dd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8040dd2:	687b      	ldr	r3, [r7, #4]
 8040dd4:	693a      	ldr	r2, [r7, #16]
 8040dd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8040dd8:	687b      	ldr	r3, [r7, #4]
 8040dda:	685b      	ldr	r3, [r3, #4]
 8040ddc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8040dde:	2201      	movs	r2, #1
 8040de0:	697b      	ldr	r3, [r7, #20]
 8040de2:	fa02 f303 	lsl.w	r3, r2, r3
 8040de6:	43db      	mvns	r3, r3
 8040de8:	693a      	ldr	r2, [r7, #16]
 8040dea:	4013      	ands	r3, r2
 8040dec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8040dee:	683b      	ldr	r3, [r7, #0]
 8040df0:	685b      	ldr	r3, [r3, #4]
 8040df2:	091b      	lsrs	r3, r3, #4
 8040df4:	f003 0201 	and.w	r2, r3, #1
 8040df8:	697b      	ldr	r3, [r7, #20]
 8040dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8040dfe:	693a      	ldr	r2, [r7, #16]
 8040e00:	4313      	orrs	r3, r2
 8040e02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8040e04:	687b      	ldr	r3, [r7, #4]
 8040e06:	693a      	ldr	r2, [r7, #16]
 8040e08:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8040e0a:	683b      	ldr	r3, [r7, #0]
 8040e0c:	685b      	ldr	r3, [r3, #4]
 8040e0e:	f003 0303 	and.w	r3, r3, #3
 8040e12:	2b03      	cmp	r3, #3
 8040e14:	d017      	beq.n	8040e46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8040e16:	687b      	ldr	r3, [r7, #4]
 8040e18:	68db      	ldr	r3, [r3, #12]
 8040e1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8040e1c:	697b      	ldr	r3, [r7, #20]
 8040e1e:	005b      	lsls	r3, r3, #1
 8040e20:	2203      	movs	r2, #3
 8040e22:	fa02 f303 	lsl.w	r3, r2, r3
 8040e26:	43db      	mvns	r3, r3
 8040e28:	693a      	ldr	r2, [r7, #16]
 8040e2a:	4013      	ands	r3, r2
 8040e2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8040e2e:	683b      	ldr	r3, [r7, #0]
 8040e30:	689a      	ldr	r2, [r3, #8]
 8040e32:	697b      	ldr	r3, [r7, #20]
 8040e34:	005b      	lsls	r3, r3, #1
 8040e36:	fa02 f303 	lsl.w	r3, r2, r3
 8040e3a:	693a      	ldr	r2, [r7, #16]
 8040e3c:	4313      	orrs	r3, r2
 8040e3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8040e40:	687b      	ldr	r3, [r7, #4]
 8040e42:	693a      	ldr	r2, [r7, #16]
 8040e44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8040e46:	683b      	ldr	r3, [r7, #0]
 8040e48:	685b      	ldr	r3, [r3, #4]
 8040e4a:	f003 0303 	and.w	r3, r3, #3
 8040e4e:	2b02      	cmp	r3, #2
 8040e50:	d123      	bne.n	8040e9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8040e52:	697b      	ldr	r3, [r7, #20]
 8040e54:	08da      	lsrs	r2, r3, #3
 8040e56:	687b      	ldr	r3, [r7, #4]
 8040e58:	3208      	adds	r2, #8
 8040e5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8040e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 8040e60:	697b      	ldr	r3, [r7, #20]
 8040e62:	f003 0307 	and.w	r3, r3, #7
 8040e66:	009b      	lsls	r3, r3, #2
 8040e68:	220f      	movs	r2, #15
 8040e6a:	fa02 f303 	lsl.w	r3, r2, r3
 8040e6e:	43db      	mvns	r3, r3
 8040e70:	693a      	ldr	r2, [r7, #16]
 8040e72:	4013      	ands	r3, r2
 8040e74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8040e76:	683b      	ldr	r3, [r7, #0]
 8040e78:	691a      	ldr	r2, [r3, #16]
 8040e7a:	697b      	ldr	r3, [r7, #20]
 8040e7c:	f003 0307 	and.w	r3, r3, #7
 8040e80:	009b      	lsls	r3, r3, #2
 8040e82:	fa02 f303 	lsl.w	r3, r2, r3
 8040e86:	693a      	ldr	r2, [r7, #16]
 8040e88:	4313      	orrs	r3, r2
 8040e8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8040e8c:	697b      	ldr	r3, [r7, #20]
 8040e8e:	08da      	lsrs	r2, r3, #3
 8040e90:	687b      	ldr	r3, [r7, #4]
 8040e92:	3208      	adds	r2, #8
 8040e94:	6939      	ldr	r1, [r7, #16]
 8040e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8040e9a:	687b      	ldr	r3, [r7, #4]
 8040e9c:	681b      	ldr	r3, [r3, #0]
 8040e9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8040ea0:	697b      	ldr	r3, [r7, #20]
 8040ea2:	005b      	lsls	r3, r3, #1
 8040ea4:	2203      	movs	r2, #3
 8040ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8040eaa:	43db      	mvns	r3, r3
 8040eac:	693a      	ldr	r2, [r7, #16]
 8040eae:	4013      	ands	r3, r2
 8040eb0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8040eb2:	683b      	ldr	r3, [r7, #0]
 8040eb4:	685b      	ldr	r3, [r3, #4]
 8040eb6:	f003 0203 	and.w	r2, r3, #3
 8040eba:	697b      	ldr	r3, [r7, #20]
 8040ebc:	005b      	lsls	r3, r3, #1
 8040ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8040ec2:	693a      	ldr	r2, [r7, #16]
 8040ec4:	4313      	orrs	r3, r2
 8040ec6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8040ec8:	687b      	ldr	r3, [r7, #4]
 8040eca:	693a      	ldr	r2, [r7, #16]
 8040ecc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8040ece:	683b      	ldr	r3, [r7, #0]
 8040ed0:	685b      	ldr	r3, [r3, #4]
 8040ed2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8040ed6:	2b00      	cmp	r3, #0
 8040ed8:	f000 80a4 	beq.w	8041024 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 8040edc:	4a5a      	ldr	r2, [pc, #360]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040ede:	697b      	ldr	r3, [r7, #20]
 8040ee0:	089b      	lsrs	r3, r3, #2
 8040ee2:	3318      	adds	r3, #24
 8040ee4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8040ee8:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 8040eea:	697b      	ldr	r3, [r7, #20]
 8040eec:	f003 0303 	and.w	r3, r3, #3
 8040ef0:	00db      	lsls	r3, r3, #3
 8040ef2:	220f      	movs	r2, #15
 8040ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8040ef8:	43db      	mvns	r3, r3
 8040efa:	693a      	ldr	r2, [r7, #16]
 8040efc:	4013      	ands	r3, r2
 8040efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8040f00:	687b      	ldr	r3, [r7, #4]
 8040f02:	4a52      	ldr	r2, [pc, #328]	; (804104c <HAL_GPIO_Init+0x2e4>)
 8040f04:	4293      	cmp	r3, r2
 8040f06:	d025      	beq.n	8040f54 <HAL_GPIO_Init+0x1ec>
 8040f08:	687b      	ldr	r3, [r7, #4]
 8040f0a:	4a51      	ldr	r2, [pc, #324]	; (8041050 <HAL_GPIO_Init+0x2e8>)
 8040f0c:	4293      	cmp	r3, r2
 8040f0e:	d01f      	beq.n	8040f50 <HAL_GPIO_Init+0x1e8>
 8040f10:	687b      	ldr	r3, [r7, #4]
 8040f12:	4a50      	ldr	r2, [pc, #320]	; (8041054 <HAL_GPIO_Init+0x2ec>)
 8040f14:	4293      	cmp	r3, r2
 8040f16:	d019      	beq.n	8040f4c <HAL_GPIO_Init+0x1e4>
 8040f18:	687b      	ldr	r3, [r7, #4]
 8040f1a:	4a4f      	ldr	r2, [pc, #316]	; (8041058 <HAL_GPIO_Init+0x2f0>)
 8040f1c:	4293      	cmp	r3, r2
 8040f1e:	d013      	beq.n	8040f48 <HAL_GPIO_Init+0x1e0>
 8040f20:	687b      	ldr	r3, [r7, #4]
 8040f22:	4a4e      	ldr	r2, [pc, #312]	; (804105c <HAL_GPIO_Init+0x2f4>)
 8040f24:	4293      	cmp	r3, r2
 8040f26:	d00d      	beq.n	8040f44 <HAL_GPIO_Init+0x1dc>
 8040f28:	687b      	ldr	r3, [r7, #4]
 8040f2a:	4a4d      	ldr	r2, [pc, #308]	; (8041060 <HAL_GPIO_Init+0x2f8>)
 8040f2c:	4293      	cmp	r3, r2
 8040f2e:	d007      	beq.n	8040f40 <HAL_GPIO_Init+0x1d8>
 8040f30:	687b      	ldr	r3, [r7, #4]
 8040f32:	4a4c      	ldr	r2, [pc, #304]	; (8041064 <HAL_GPIO_Init+0x2fc>)
 8040f34:	4293      	cmp	r3, r2
 8040f36:	d101      	bne.n	8040f3c <HAL_GPIO_Init+0x1d4>
 8040f38:	2306      	movs	r3, #6
 8040f3a:	e00c      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f3c:	2307      	movs	r3, #7
 8040f3e:	e00a      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f40:	2305      	movs	r3, #5
 8040f42:	e008      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f44:	2304      	movs	r3, #4
 8040f46:	e006      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f48:	2303      	movs	r3, #3
 8040f4a:	e004      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f4c:	2302      	movs	r3, #2
 8040f4e:	e002      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f50:	2301      	movs	r3, #1
 8040f52:	e000      	b.n	8040f56 <HAL_GPIO_Init+0x1ee>
 8040f54:	2300      	movs	r3, #0
 8040f56:	697a      	ldr	r2, [r7, #20]
 8040f58:	f002 0203 	and.w	r2, r2, #3
 8040f5c:	00d2      	lsls	r2, r2, #3
 8040f5e:	4093      	lsls	r3, r2
 8040f60:	693a      	ldr	r2, [r7, #16]
 8040f62:	4313      	orrs	r3, r2
 8040f64:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 8040f66:	4938      	ldr	r1, [pc, #224]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040f68:	697b      	ldr	r3, [r7, #20]
 8040f6a:	089b      	lsrs	r3, r3, #2
 8040f6c:	3318      	adds	r3, #24
 8040f6e:	693a      	ldr	r2, [r7, #16]
 8040f70:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8040f74:	4b34      	ldr	r3, [pc, #208]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040f76:	681b      	ldr	r3, [r3, #0]
 8040f78:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040f7a:	68fb      	ldr	r3, [r7, #12]
 8040f7c:	43db      	mvns	r3, r3
 8040f7e:	693a      	ldr	r2, [r7, #16]
 8040f80:	4013      	ands	r3, r2
 8040f82:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8040f84:	683b      	ldr	r3, [r7, #0]
 8040f86:	685b      	ldr	r3, [r3, #4]
 8040f88:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8040f8c:	2b00      	cmp	r3, #0
 8040f8e:	d003      	beq.n	8040f98 <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 8040f90:	693a      	ldr	r2, [r7, #16]
 8040f92:	68fb      	ldr	r3, [r7, #12]
 8040f94:	4313      	orrs	r3, r2
 8040f96:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8040f98:	4a2b      	ldr	r2, [pc, #172]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040f9a:	693b      	ldr	r3, [r7, #16]
 8040f9c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8040f9e:	4b2a      	ldr	r3, [pc, #168]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040fa0:	685b      	ldr	r3, [r3, #4]
 8040fa2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040fa4:	68fb      	ldr	r3, [r7, #12]
 8040fa6:	43db      	mvns	r3, r3
 8040fa8:	693a      	ldr	r2, [r7, #16]
 8040faa:	4013      	ands	r3, r2
 8040fac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8040fae:	683b      	ldr	r3, [r7, #0]
 8040fb0:	685b      	ldr	r3, [r3, #4]
 8040fb2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8040fb6:	2b00      	cmp	r3, #0
 8040fb8:	d003      	beq.n	8040fc2 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 8040fba:	693a      	ldr	r2, [r7, #16]
 8040fbc:	68fb      	ldr	r3, [r7, #12]
 8040fbe:	4313      	orrs	r3, r2
 8040fc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8040fc2:	4a21      	ldr	r2, [pc, #132]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040fc4:	693b      	ldr	r3, [r7, #16]
 8040fc6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8040fc8:	4b1f      	ldr	r3, [pc, #124]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040fca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8040fce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040fd0:	68fb      	ldr	r3, [r7, #12]
 8040fd2:	43db      	mvns	r3, r3
 8040fd4:	693a      	ldr	r2, [r7, #16]
 8040fd6:	4013      	ands	r3, r2
 8040fd8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8040fda:	683b      	ldr	r3, [r7, #0]
 8040fdc:	685b      	ldr	r3, [r3, #4]
 8040fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8040fe2:	2b00      	cmp	r3, #0
 8040fe4:	d003      	beq.n	8040fee <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8040fe6:	693a      	ldr	r2, [r7, #16]
 8040fe8:	68fb      	ldr	r3, [r7, #12]
 8040fea:	4313      	orrs	r3, r2
 8040fec:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8040fee:	4a16      	ldr	r2, [pc, #88]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040ff0:	693b      	ldr	r3, [r7, #16]
 8040ff2:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 8040ff6:	4b14      	ldr	r3, [pc, #80]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 8040ff8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8040ffc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8040ffe:	68fb      	ldr	r3, [r7, #12]
 8041000:	43db      	mvns	r3, r3
 8041002:	693a      	ldr	r2, [r7, #16]
 8041004:	4013      	ands	r3, r2
 8041006:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8041008:	683b      	ldr	r3, [r7, #0]
 804100a:	685b      	ldr	r3, [r3, #4]
 804100c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8041010:	2b00      	cmp	r3, #0
 8041012:	d003      	beq.n	804101c <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 8041014:	693a      	ldr	r2, [r7, #16]
 8041016:	68fb      	ldr	r3, [r7, #12]
 8041018:	4313      	orrs	r3, r2
 804101a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 804101c:	4a0a      	ldr	r2, [pc, #40]	; (8041048 <HAL_GPIO_Init+0x2e0>)
 804101e:	693b      	ldr	r3, [r7, #16]
 8041020:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 8041024:	697b      	ldr	r3, [r7, #20]
 8041026:	3301      	adds	r3, #1
 8041028:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 804102a:	683b      	ldr	r3, [r7, #0]
 804102c:	681a      	ldr	r2, [r3, #0]
 804102e:	697b      	ldr	r3, [r7, #20]
 8041030:	fa22 f303 	lsr.w	r3, r2, r3
 8041034:	2b00      	cmp	r3, #0
 8041036:	f47f ae9f 	bne.w	8040d78 <HAL_GPIO_Init+0x10>
  }
}
 804103a:	bf00      	nop
 804103c:	bf00      	nop
 804103e:	371c      	adds	r7, #28
 8041040:	46bd      	mov	sp, r7
 8041042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041046:	4770      	bx	lr
 8041048:	4002f400 	.word	0x4002f400
 804104c:	42020000 	.word	0x42020000
 8041050:	42020400 	.word	0x42020400
 8041054:	42020800 	.word	0x42020800
 8041058:	42020c00 	.word	0x42020c00
 804105c:	42021000 	.word	0x42021000
 8041060:	42021400 	.word	0x42021400
 8041064:	42021800 	.word	0x42021800

08041068 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8041068:	b480      	push	{r7}
 804106a:	b083      	sub	sp, #12
 804106c:	af00      	add	r7, sp, #0
 804106e:	6078      	str	r0, [r7, #4]
 8041070:	460b      	mov	r3, r1
 8041072:	807b      	strh	r3, [r7, #2]
 8041074:	4613      	mov	r3, r2
 8041076:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8041078:	787b      	ldrb	r3, [r7, #1]
 804107a:	2b00      	cmp	r3, #0
 804107c:	d003      	beq.n	8041086 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 804107e:	887a      	ldrh	r2, [r7, #2]
 8041080:	687b      	ldr	r3, [r7, #4]
 8041082:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8041084:	e002      	b.n	804108c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8041086:	887a      	ldrh	r2, [r7, #2]
 8041088:	687b      	ldr	r3, [r7, #4]
 804108a:	629a      	str	r2, [r3, #40]	; 0x28
}
 804108c:	bf00      	nop
 804108e:	370c      	adds	r7, #12
 8041090:	46bd      	mov	sp, r7
 8041092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041096:	4770      	bx	lr

08041098 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8041098:	b480      	push	{r7}
 804109a:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 804109c:	4b04      	ldr	r3, [pc, #16]	; (80410b0 <HAL_PWREx_GetVoltageRange+0x18>)
 804109e:	681b      	ldr	r3, [r3, #0]
 80410a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80410a4:	4618      	mov	r0, r3
 80410a6:	46bd      	mov	sp, r7
 80410a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80410ac:	4770      	bx	lr
 80410ae:	bf00      	nop
 80410b0:	40007000 	.word	0x40007000

080410b4 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80410b4:	b580      	push	{r7, lr}
 80410b6:	b084      	sub	sp, #16
 80410b8:	af00      	add	r7, sp, #0
 80410ba:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 80410bc:	4b27      	ldr	r3, [pc, #156]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80410be:	681b      	ldr	r3, [r3, #0]
 80410c0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80410c4:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 80410c6:	f000 f851 	bl	804116c <HAL_PWREx_SMPS_GetEffectiveMode>
 80410ca:	4603      	mov	r3, r0
 80410cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80410d0:	d101      	bne.n	80410d6 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 80410d2:	2301      	movs	r3, #1
 80410d4:	e03e      	b.n	8041154 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 80410d6:	4b21      	ldr	r3, [pc, #132]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80410d8:	68db      	ldr	r3, [r3, #12]
 80410da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80410de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80410e2:	d101      	bne.n	80410e8 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 80410e4:	2301      	movs	r3, #1
 80410e6:	e035      	b.n	8041154 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 80410e8:	68ba      	ldr	r2, [r7, #8]
 80410ea:	687b      	ldr	r3, [r7, #4]
 80410ec:	429a      	cmp	r2, r3
 80410ee:	d101      	bne.n	80410f4 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 80410f0:	2300      	movs	r3, #0
 80410f2:	e02f      	b.n	8041154 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80410f4:	4b19      	ldr	r3, [pc, #100]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80410f6:	681b      	ldr	r3, [r3, #0]
 80410f8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80410fc:	4917      	ldr	r1, [pc, #92]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80410fe:	687b      	ldr	r3, [r7, #4]
 8041100:	4313      	orrs	r3, r2
 8041102:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 8041104:	4b16      	ldr	r3, [pc, #88]	; (8041160 <HAL_PWREx_ControlVoltageScaling+0xac>)
 8041106:	681b      	ldr	r3, [r3, #0]
 8041108:	095b      	lsrs	r3, r3, #5
 804110a:	4a16      	ldr	r2, [pc, #88]	; (8041164 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 804110c:	fba2 2303 	umull	r2, r3, r2, r3
 8041110:	09db      	lsrs	r3, r3, #7
 8041112:	2232      	movs	r2, #50	; 0x32
 8041114:	fb02 f303 	mul.w	r3, r2, r3
 8041118:	4a13      	ldr	r2, [pc, #76]	; (8041168 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 804111a:	fba2 2303 	umull	r2, r3, r2, r3
 804111e:	08db      	lsrs	r3, r3, #3
 8041120:	3301      	adds	r3, #1
 8041122:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8041124:	e002      	b.n	804112c <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 8041126:	68fb      	ldr	r3, [r7, #12]
 8041128:	3b01      	subs	r3, #1
 804112a:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 804112c:	4b0b      	ldr	r3, [pc, #44]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 804112e:	695b      	ldr	r3, [r3, #20]
 8041130:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041134:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8041138:	d102      	bne.n	8041140 <HAL_PWREx_ControlVoltageScaling+0x8c>
 804113a:	68fb      	ldr	r3, [r7, #12]
 804113c:	2b00      	cmp	r3, #0
 804113e:	d1f2      	bne.n	8041126 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8041140:	4b06      	ldr	r3, [pc, #24]	; (804115c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8041142:	695b      	ldr	r3, [r3, #20]
 8041144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041148:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 804114c:	d101      	bne.n	8041152 <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 804114e:	2303      	movs	r3, #3
 8041150:	e000      	b.n	8041154 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 8041152:	2300      	movs	r3, #0
}
 8041154:	4618      	mov	r0, r3
 8041156:	3710      	adds	r7, #16
 8041158:	46bd      	mov	sp, r7
 804115a:	bd80      	pop	{r7, pc}
 804115c:	40007000 	.word	0x40007000
 8041160:	20018000 	.word	0x20018000
 8041164:	0a7c5ac5 	.word	0x0a7c5ac5
 8041168:	cccccccd 	.word	0xcccccccd

0804116c <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 804116c:	b480      	push	{r7}
 804116e:	b083      	sub	sp, #12
 8041170:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 8041172:	4b0f      	ldr	r3, [pc, #60]	; (80411b0 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 8041174:	691b      	ldr	r3, [r3, #16]
 8041176:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 8041178:	683b      	ldr	r3, [r7, #0]
 804117a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 804117e:	2b00      	cmp	r3, #0
 8041180:	d003      	beq.n	804118a <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 8041182:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8041186:	607b      	str	r3, [r7, #4]
 8041188:	e00a      	b.n	80411a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 804118a:	683b      	ldr	r3, [r7, #0]
 804118c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8041190:	2b00      	cmp	r3, #0
 8041192:	d103      	bne.n	804119c <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 8041194:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8041198:	607b      	str	r3, [r7, #4]
 804119a:	e001      	b.n	80411a0 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 804119c:	2300      	movs	r3, #0
 804119e:	607b      	str	r3, [r7, #4]
  }

  return mode;
 80411a0:	687b      	ldr	r3, [r7, #4]
}
 80411a2:	4618      	mov	r0, r3
 80411a4:	370c      	adds	r7, #12
 80411a6:	46bd      	mov	sp, r7
 80411a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80411ac:	4770      	bx	lr
 80411ae:	bf00      	nop
 80411b0:	40007000 	.word	0x40007000

080411b4 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80411b4:	b580      	push	{r7, lr}
 80411b6:	b088      	sub	sp, #32
 80411b8:	af00      	add	r7, sp, #0
 80411ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80411bc:	687b      	ldr	r3, [r7, #4]
 80411be:	2b00      	cmp	r3, #0
 80411c0:	d102      	bne.n	80411c8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80411c2:	2301      	movs	r3, #1
 80411c4:	f000 bcc2 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80411c8:	4b99      	ldr	r3, [pc, #612]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80411ca:	689b      	ldr	r3, [r3, #8]
 80411cc:	f003 030c 	and.w	r3, r3, #12
 80411d0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80411d2:	4b97      	ldr	r3, [pc, #604]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80411d4:	68db      	ldr	r3, [r3, #12]
 80411d6:	f003 0303 	and.w	r3, r3, #3
 80411da:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80411dc:	687b      	ldr	r3, [r7, #4]
 80411de:	681b      	ldr	r3, [r3, #0]
 80411e0:	f003 0310 	and.w	r3, r3, #16
 80411e4:	2b00      	cmp	r3, #0
 80411e6:	f000 80e9 	beq.w	80413bc <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 80411ea:	69bb      	ldr	r3, [r7, #24]
 80411ec:	2b00      	cmp	r3, #0
 80411ee:	d006      	beq.n	80411fe <HAL_RCC_OscConfig+0x4a>
 80411f0:	69bb      	ldr	r3, [r7, #24]
 80411f2:	2b0c      	cmp	r3, #12
 80411f4:	f040 8083 	bne.w	80412fe <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 80411f8:	697b      	ldr	r3, [r7, #20]
 80411fa:	2b01      	cmp	r3, #1
 80411fc:	d17f      	bne.n	80412fe <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80411fe:	4b8c      	ldr	r3, [pc, #560]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041200:	681b      	ldr	r3, [r3, #0]
 8041202:	f003 0302 	and.w	r3, r3, #2
 8041206:	2b00      	cmp	r3, #0
 8041208:	d006      	beq.n	8041218 <HAL_RCC_OscConfig+0x64>
 804120a:	687b      	ldr	r3, [r7, #4]
 804120c:	69db      	ldr	r3, [r3, #28]
 804120e:	2b00      	cmp	r3, #0
 8041210:	d102      	bne.n	8041218 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8041212:	2301      	movs	r3, #1
 8041214:	f000 bc9a 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8041218:	687b      	ldr	r3, [r7, #4]
 804121a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 804121c:	4b84      	ldr	r3, [pc, #528]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804121e:	681b      	ldr	r3, [r3, #0]
 8041220:	f003 0308 	and.w	r3, r3, #8
 8041224:	2b00      	cmp	r3, #0
 8041226:	d004      	beq.n	8041232 <HAL_RCC_OscConfig+0x7e>
 8041228:	4b81      	ldr	r3, [pc, #516]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804122a:	681b      	ldr	r3, [r3, #0]
 804122c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041230:	e005      	b.n	804123e <HAL_RCC_OscConfig+0x8a>
 8041232:	4b7f      	ldr	r3, [pc, #508]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041238:	091b      	lsrs	r3, r3, #4
 804123a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 804123e:	4293      	cmp	r3, r2
 8041240:	d224      	bcs.n	804128c <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8041242:	687b      	ldr	r3, [r7, #4]
 8041244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041246:	4618      	mov	r0, r3
 8041248:	f000 fe9a 	bl	8041f80 <RCC_SetFlashLatencyFromMSIRange>
 804124c:	4603      	mov	r3, r0
 804124e:	2b00      	cmp	r3, #0
 8041250:	d002      	beq.n	8041258 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 8041252:	2301      	movs	r3, #1
 8041254:	f000 bc7a 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041258:	4b75      	ldr	r3, [pc, #468]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804125a:	681b      	ldr	r3, [r3, #0]
 804125c:	4a74      	ldr	r2, [pc, #464]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804125e:	f043 0308 	orr.w	r3, r3, #8
 8041262:	6013      	str	r3, [r2, #0]
 8041264:	4b72      	ldr	r3, [pc, #456]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041266:	681b      	ldr	r3, [r3, #0]
 8041268:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804126c:	687b      	ldr	r3, [r7, #4]
 804126e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8041270:	496f      	ldr	r1, [pc, #444]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041272:	4313      	orrs	r3, r2
 8041274:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041276:	4b6e      	ldr	r3, [pc, #440]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041278:	685b      	ldr	r3, [r3, #4]
 804127a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 804127e:	687b      	ldr	r3, [r7, #4]
 8041280:	6a1b      	ldr	r3, [r3, #32]
 8041282:	021b      	lsls	r3, r3, #8
 8041284:	496a      	ldr	r1, [pc, #424]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041286:	4313      	orrs	r3, r2
 8041288:	604b      	str	r3, [r1, #4]
 804128a:	e026      	b.n	80412da <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 804128c:	4b68      	ldr	r3, [pc, #416]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804128e:	681b      	ldr	r3, [r3, #0]
 8041290:	4a67      	ldr	r2, [pc, #412]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041292:	f043 0308 	orr.w	r3, r3, #8
 8041296:	6013      	str	r3, [r2, #0]
 8041298:	4b65      	ldr	r3, [pc, #404]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804129a:	681b      	ldr	r3, [r3, #0]
 804129c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80412a0:	687b      	ldr	r3, [r7, #4]
 80412a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412a4:	4962      	ldr	r1, [pc, #392]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80412a6:	4313      	orrs	r3, r2
 80412a8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80412aa:	4b61      	ldr	r3, [pc, #388]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80412ac:	685b      	ldr	r3, [r3, #4]
 80412ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80412b2:	687b      	ldr	r3, [r7, #4]
 80412b4:	6a1b      	ldr	r3, [r3, #32]
 80412b6:	021b      	lsls	r3, r3, #8
 80412b8:	495d      	ldr	r1, [pc, #372]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80412ba:	4313      	orrs	r3, r2
 80412bc:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 80412be:	69bb      	ldr	r3, [r7, #24]
 80412c0:	2b00      	cmp	r3, #0
 80412c2:	d10a      	bne.n	80412da <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80412c4:	687b      	ldr	r3, [r7, #4]
 80412c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80412c8:	4618      	mov	r0, r3
 80412ca:	f000 fe59 	bl	8041f80 <RCC_SetFlashLatencyFromMSIRange>
 80412ce:	4603      	mov	r3, r0
 80412d0:	2b00      	cmp	r3, #0
 80412d2:	d002      	beq.n	80412da <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 80412d4:	2301      	movs	r3, #1
 80412d6:	f000 bc39 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 80412da:	f000 fe15 	bl	8041f08 <HAL_RCC_GetHCLKFreq>
 80412de:	4603      	mov	r3, r0
 80412e0:	4a54      	ldr	r2, [pc, #336]	; (8041434 <HAL_RCC_OscConfig+0x280>)
 80412e2:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80412e4:	4b54      	ldr	r3, [pc, #336]	; (8041438 <HAL_RCC_OscConfig+0x284>)
 80412e6:	681b      	ldr	r3, [r3, #0]
 80412e8:	4618      	mov	r0, r3
 80412ea:	f7ff fbfd 	bl	8040ae8 <HAL_InitTick>
 80412ee:	4603      	mov	r3, r0
 80412f0:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 80412f2:	7bfb      	ldrb	r3, [r7, #15]
 80412f4:	2b00      	cmp	r3, #0
 80412f6:	d060      	beq.n	80413ba <HAL_RCC_OscConfig+0x206>
        {
          return status;
 80412f8:	7bfb      	ldrb	r3, [r7, #15]
 80412fa:	f000 bc27 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80412fe:	687b      	ldr	r3, [r7, #4]
 8041300:	69db      	ldr	r3, [r3, #28]
 8041302:	2b00      	cmp	r3, #0
 8041304:	d039      	beq.n	804137a <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8041306:	4b4a      	ldr	r3, [pc, #296]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041308:	681b      	ldr	r3, [r3, #0]
 804130a:	4a49      	ldr	r2, [pc, #292]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804130c:	f043 0301 	orr.w	r3, r3, #1
 8041310:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041312:	f7ff fc39 	bl	8040b88 <HAL_GetTick>
 8041316:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041318:	e00f      	b.n	804133a <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 804131a:	f7ff fc35 	bl	8040b88 <HAL_GetTick>
 804131e:	4602      	mov	r2, r0
 8041320:	693b      	ldr	r3, [r7, #16]
 8041322:	1ad3      	subs	r3, r2, r3
 8041324:	2b02      	cmp	r3, #2
 8041326:	d908      	bls.n	804133a <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041328:	4b41      	ldr	r3, [pc, #260]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804132a:	681b      	ldr	r3, [r3, #0]
 804132c:	f003 0302 	and.w	r3, r3, #2
 8041330:	2b00      	cmp	r3, #0
 8041332:	d102      	bne.n	804133a <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 8041334:	2303      	movs	r3, #3
 8041336:	f000 bc09 	b.w	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 804133a:	4b3d      	ldr	r3, [pc, #244]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804133c:	681b      	ldr	r3, [r3, #0]
 804133e:	f003 0302 	and.w	r3, r3, #2
 8041342:	2b00      	cmp	r3, #0
 8041344:	d0e9      	beq.n	804131a <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8041346:	4b3a      	ldr	r3, [pc, #232]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041348:	681b      	ldr	r3, [r3, #0]
 804134a:	4a39      	ldr	r2, [pc, #228]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804134c:	f043 0308 	orr.w	r3, r3, #8
 8041350:	6013      	str	r3, [r2, #0]
 8041352:	4b37      	ldr	r3, [pc, #220]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041354:	681b      	ldr	r3, [r3, #0]
 8041356:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 804135a:	687b      	ldr	r3, [r7, #4]
 804135c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 804135e:	4934      	ldr	r1, [pc, #208]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041360:	4313      	orrs	r3, r2
 8041362:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8041364:	4b32      	ldr	r3, [pc, #200]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041366:	685b      	ldr	r3, [r3, #4]
 8041368:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 804136c:	687b      	ldr	r3, [r7, #4]
 804136e:	6a1b      	ldr	r3, [r3, #32]
 8041370:	021b      	lsls	r3, r3, #8
 8041372:	492f      	ldr	r1, [pc, #188]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041374:	4313      	orrs	r3, r2
 8041376:	604b      	str	r3, [r1, #4]
 8041378:	e020      	b.n	80413bc <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 804137a:	4b2d      	ldr	r3, [pc, #180]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804137c:	681b      	ldr	r3, [r3, #0]
 804137e:	4a2c      	ldr	r2, [pc, #176]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041380:	f023 0301 	bic.w	r3, r3, #1
 8041384:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8041386:	f7ff fbff 	bl	8040b88 <HAL_GetTick>
 804138a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 804138c:	e00e      	b.n	80413ac <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 804138e:	f7ff fbfb 	bl	8040b88 <HAL_GetTick>
 8041392:	4602      	mov	r2, r0
 8041394:	693b      	ldr	r3, [r7, #16]
 8041396:	1ad3      	subs	r3, r2, r3
 8041398:	2b02      	cmp	r3, #2
 804139a:	d907      	bls.n	80413ac <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 804139c:	4b24      	ldr	r3, [pc, #144]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804139e:	681b      	ldr	r3, [r3, #0]
 80413a0:	f003 0302 	and.w	r3, r3, #2
 80413a4:	2b00      	cmp	r3, #0
 80413a6:	d001      	beq.n	80413ac <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 80413a8:	2303      	movs	r3, #3
 80413aa:	e3cf      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80413ac:	4b20      	ldr	r3, [pc, #128]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80413ae:	681b      	ldr	r3, [r3, #0]
 80413b0:	f003 0302 	and.w	r3, r3, #2
 80413b4:	2b00      	cmp	r3, #0
 80413b6:	d1ea      	bne.n	804138e <HAL_RCC_OscConfig+0x1da>
 80413b8:	e000      	b.n	80413bc <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80413ba:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80413bc:	687b      	ldr	r3, [r7, #4]
 80413be:	681b      	ldr	r3, [r3, #0]
 80413c0:	f003 0301 	and.w	r3, r3, #1
 80413c4:	2b00      	cmp	r3, #0
 80413c6:	d07e      	beq.n	80414c6 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 80413c8:	69bb      	ldr	r3, [r7, #24]
 80413ca:	2b08      	cmp	r3, #8
 80413cc:	d005      	beq.n	80413da <HAL_RCC_OscConfig+0x226>
 80413ce:	69bb      	ldr	r3, [r7, #24]
 80413d0:	2b0c      	cmp	r3, #12
 80413d2:	d10e      	bne.n	80413f2 <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80413d4:	697b      	ldr	r3, [r7, #20]
 80413d6:	2b03      	cmp	r3, #3
 80413d8:	d10b      	bne.n	80413f2 <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80413da:	4b15      	ldr	r3, [pc, #84]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80413dc:	681b      	ldr	r3, [r3, #0]
 80413de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80413e2:	2b00      	cmp	r3, #0
 80413e4:	d06e      	beq.n	80414c4 <HAL_RCC_OscConfig+0x310>
 80413e6:	687b      	ldr	r3, [r7, #4]
 80413e8:	685b      	ldr	r3, [r3, #4]
 80413ea:	2b00      	cmp	r3, #0
 80413ec:	d16a      	bne.n	80414c4 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 80413ee:	2301      	movs	r3, #1
 80413f0:	e3ac      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80413f2:	687b      	ldr	r3, [r7, #4]
 80413f4:	685b      	ldr	r3, [r3, #4]
 80413f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80413fa:	d106      	bne.n	804140a <HAL_RCC_OscConfig+0x256>
 80413fc:	4b0c      	ldr	r3, [pc, #48]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 80413fe:	681b      	ldr	r3, [r3, #0]
 8041400:	4a0b      	ldr	r2, [pc, #44]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8041406:	6013      	str	r3, [r2, #0]
 8041408:	e024      	b.n	8041454 <HAL_RCC_OscConfig+0x2a0>
 804140a:	687b      	ldr	r3, [r7, #4]
 804140c:	685b      	ldr	r3, [r3, #4]
 804140e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8041412:	d113      	bne.n	804143c <HAL_RCC_OscConfig+0x288>
 8041414:	4b06      	ldr	r3, [pc, #24]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041416:	681b      	ldr	r3, [r3, #0]
 8041418:	4a05      	ldr	r2, [pc, #20]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 804141a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 804141e:	6013      	str	r3, [r2, #0]
 8041420:	4b03      	ldr	r3, [pc, #12]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041422:	681b      	ldr	r3, [r3, #0]
 8041424:	4a02      	ldr	r2, [pc, #8]	; (8041430 <HAL_RCC_OscConfig+0x27c>)
 8041426:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804142a:	6013      	str	r3, [r2, #0]
 804142c:	e012      	b.n	8041454 <HAL_RCC_OscConfig+0x2a0>
 804142e:	bf00      	nop
 8041430:	40021000 	.word	0x40021000
 8041434:	20018000 	.word	0x20018000
 8041438:	20018004 	.word	0x20018004
 804143c:	4b8b      	ldr	r3, [pc, #556]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804143e:	681b      	ldr	r3, [r3, #0]
 8041440:	4a8a      	ldr	r2, [pc, #552]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8041446:	6013      	str	r3, [r2, #0]
 8041448:	4b88      	ldr	r3, [pc, #544]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804144a:	681b      	ldr	r3, [r3, #0]
 804144c:	4a87      	ldr	r2, [pc, #540]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8041452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8041454:	687b      	ldr	r3, [r7, #4]
 8041456:	685b      	ldr	r3, [r3, #4]
 8041458:	2b00      	cmp	r3, #0
 804145a:	d019      	beq.n	8041490 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804145c:	f7ff fb94 	bl	8040b88 <HAL_GetTick>
 8041460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041462:	e00e      	b.n	8041482 <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041464:	f7ff fb90 	bl	8040b88 <HAL_GetTick>
 8041468:	4602      	mov	r2, r0
 804146a:	693b      	ldr	r3, [r7, #16]
 804146c:	1ad3      	subs	r3, r2, r3
 804146e:	2b64      	cmp	r3, #100	; 0x64
 8041470:	d907      	bls.n	8041482 <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041472:	4b7e      	ldr	r3, [pc, #504]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041474:	681b      	ldr	r3, [r3, #0]
 8041476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804147a:	2b00      	cmp	r3, #0
 804147c:	d101      	bne.n	8041482 <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 804147e:	2303      	movs	r3, #3
 8041480:	e364      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041482:	4b7a      	ldr	r3, [pc, #488]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041484:	681b      	ldr	r3, [r3, #0]
 8041486:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 804148a:	2b00      	cmp	r3, #0
 804148c:	d0ea      	beq.n	8041464 <HAL_RCC_OscConfig+0x2b0>
 804148e:	e01a      	b.n	80414c6 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041490:	f7ff fb7a 	bl	8040b88 <HAL_GetTick>
 8041494:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8041496:	e00e      	b.n	80414b6 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8041498:	f7ff fb76 	bl	8040b88 <HAL_GetTick>
 804149c:	4602      	mov	r2, r0
 804149e:	693b      	ldr	r3, [r7, #16]
 80414a0:	1ad3      	subs	r3, r2, r3
 80414a2:	2b64      	cmp	r3, #100	; 0x64
 80414a4:	d907      	bls.n	80414b6 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80414a6:	4b71      	ldr	r3, [pc, #452]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80414a8:	681b      	ldr	r3, [r3, #0]
 80414aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414ae:	2b00      	cmp	r3, #0
 80414b0:	d001      	beq.n	80414b6 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 80414b2:	2303      	movs	r3, #3
 80414b4:	e34a      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80414b6:	4b6d      	ldr	r3, [pc, #436]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80414b8:	681b      	ldr	r3, [r3, #0]
 80414ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80414be:	2b00      	cmp	r3, #0
 80414c0:	d1ea      	bne.n	8041498 <HAL_RCC_OscConfig+0x2e4>
 80414c2:	e000      	b.n	80414c6 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80414c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80414c6:	687b      	ldr	r3, [r7, #4]
 80414c8:	681b      	ldr	r3, [r3, #0]
 80414ca:	f003 0302 	and.w	r3, r3, #2
 80414ce:	2b00      	cmp	r3, #0
 80414d0:	d06c      	beq.n	80415ac <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 80414d2:	69bb      	ldr	r3, [r7, #24]
 80414d4:	2b04      	cmp	r3, #4
 80414d6:	d005      	beq.n	80414e4 <HAL_RCC_OscConfig+0x330>
 80414d8:	69bb      	ldr	r3, [r7, #24]
 80414da:	2b0c      	cmp	r3, #12
 80414dc:	d119      	bne.n	8041512 <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80414de:	697b      	ldr	r3, [r7, #20]
 80414e0:	2b02      	cmp	r3, #2
 80414e2:	d116      	bne.n	8041512 <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80414e4:	4b61      	ldr	r3, [pc, #388]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80414e6:	681b      	ldr	r3, [r3, #0]
 80414e8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80414ec:	2b00      	cmp	r3, #0
 80414ee:	d005      	beq.n	80414fc <HAL_RCC_OscConfig+0x348>
 80414f0:	687b      	ldr	r3, [r7, #4]
 80414f2:	68db      	ldr	r3, [r3, #12]
 80414f4:	2b00      	cmp	r3, #0
 80414f6:	d101      	bne.n	80414fc <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 80414f8:	2301      	movs	r3, #1
 80414fa:	e327      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80414fc:	4b5b      	ldr	r3, [pc, #364]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80414fe:	685b      	ldr	r3, [r3, #4]
 8041500:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041504:	687b      	ldr	r3, [r7, #4]
 8041506:	691b      	ldr	r3, [r3, #16]
 8041508:	061b      	lsls	r3, r3, #24
 804150a:	4958      	ldr	r1, [pc, #352]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804150c:	4313      	orrs	r3, r2
 804150e:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8041510:	e04c      	b.n	80415ac <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8041512:	687b      	ldr	r3, [r7, #4]
 8041514:	68db      	ldr	r3, [r3, #12]
 8041516:	2b00      	cmp	r3, #0
 8041518:	d029      	beq.n	804156e <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 804151a:	4b54      	ldr	r3, [pc, #336]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804151c:	681b      	ldr	r3, [r3, #0]
 804151e:	4a53      	ldr	r2, [pc, #332]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041520:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8041524:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041526:	f7ff fb2f 	bl	8040b88 <HAL_GetTick>
 804152a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804152c:	e00e      	b.n	804154c <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 804152e:	f7ff fb2b 	bl	8040b88 <HAL_GetTick>
 8041532:	4602      	mov	r2, r0
 8041534:	693b      	ldr	r3, [r7, #16]
 8041536:	1ad3      	subs	r3, r2, r3
 8041538:	2b02      	cmp	r3, #2
 804153a:	d907      	bls.n	804154c <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804153c:	4b4b      	ldr	r3, [pc, #300]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804153e:	681b      	ldr	r3, [r3, #0]
 8041540:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041544:	2b00      	cmp	r3, #0
 8041546:	d101      	bne.n	804154c <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 8041548:	2303      	movs	r3, #3
 804154a:	e2ff      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 804154c:	4b47      	ldr	r3, [pc, #284]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804154e:	681b      	ldr	r3, [r3, #0]
 8041550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041554:	2b00      	cmp	r3, #0
 8041556:	d0ea      	beq.n	804152e <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8041558:	4b44      	ldr	r3, [pc, #272]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804155a:	685b      	ldr	r3, [r3, #4]
 804155c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8041560:	687b      	ldr	r3, [r7, #4]
 8041562:	691b      	ldr	r3, [r3, #16]
 8041564:	061b      	lsls	r3, r3, #24
 8041566:	4941      	ldr	r1, [pc, #260]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041568:	4313      	orrs	r3, r2
 804156a:	604b      	str	r3, [r1, #4]
 804156c:	e01e      	b.n	80415ac <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 804156e:	4b3f      	ldr	r3, [pc, #252]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041570:	681b      	ldr	r3, [r3, #0]
 8041572:	4a3e      	ldr	r2, [pc, #248]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041574:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8041578:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804157a:	f7ff fb05 	bl	8040b88 <HAL_GetTick>
 804157e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041580:	e00e      	b.n	80415a0 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8041582:	f7ff fb01 	bl	8040b88 <HAL_GetTick>
 8041586:	4602      	mov	r2, r0
 8041588:	693b      	ldr	r3, [r7, #16]
 804158a:	1ad3      	subs	r3, r2, r3
 804158c:	2b02      	cmp	r3, #2
 804158e:	d907      	bls.n	80415a0 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8041590:	4b36      	ldr	r3, [pc, #216]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041592:	681b      	ldr	r3, [r3, #0]
 8041594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041598:	2b00      	cmp	r3, #0
 804159a:	d001      	beq.n	80415a0 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 804159c:	2303      	movs	r3, #3
 804159e:	e2d5      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80415a0:	4b32      	ldr	r3, [pc, #200]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415a2:	681b      	ldr	r3, [r3, #0]
 80415a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80415a8:	2b00      	cmp	r3, #0
 80415aa:	d1ea      	bne.n	8041582 <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80415ac:	687b      	ldr	r3, [r7, #4]
 80415ae:	681b      	ldr	r3, [r3, #0]
 80415b0:	f003 0308 	and.w	r3, r3, #8
 80415b4:	2b00      	cmp	r3, #0
 80415b6:	d062      	beq.n	804167e <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80415b8:	687b      	ldr	r3, [r7, #4]
 80415ba:	695b      	ldr	r3, [r3, #20]
 80415bc:	2b00      	cmp	r3, #0
 80415be:	d038      	beq.n	8041632 <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 80415c0:	687b      	ldr	r3, [r7, #4]
 80415c2:	699b      	ldr	r3, [r3, #24]
 80415c4:	2b00      	cmp	r3, #0
 80415c6:	d108      	bne.n	80415da <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80415c8:	4b28      	ldr	r3, [pc, #160]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80415ce:	4a27      	ldr	r2, [pc, #156]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415d0:	f023 0310 	bic.w	r3, r3, #16
 80415d4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 80415d8:	e007      	b.n	80415ea <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 80415da:	4b24      	ldr	r3, [pc, #144]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415dc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80415e0:	4a22      	ldr	r2, [pc, #136]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415e2:	f043 0310 	orr.w	r3, r3, #16
 80415e6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80415ea:	4b20      	ldr	r3, [pc, #128]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80415f0:	4a1e      	ldr	r2, [pc, #120]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 80415f2:	f043 0301 	orr.w	r3, r3, #1
 80415f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80415fa:	f7ff fac5 	bl	8040b88 <HAL_GetTick>
 80415fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041600:	e00f      	b.n	8041622 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8041602:	f7ff fac1 	bl	8040b88 <HAL_GetTick>
 8041606:	4602      	mov	r2, r0
 8041608:	693b      	ldr	r3, [r7, #16]
 804160a:	1ad3      	subs	r3, r2, r3
 804160c:	2b07      	cmp	r3, #7
 804160e:	d908      	bls.n	8041622 <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041610:	4b16      	ldr	r3, [pc, #88]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041612:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041616:	f003 0302 	and.w	r3, r3, #2
 804161a:	2b00      	cmp	r3, #0
 804161c:	d101      	bne.n	8041622 <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 804161e:	2303      	movs	r3, #3
 8041620:	e294      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8041622:	4b12      	ldr	r3, [pc, #72]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041628:	f003 0302 	and.w	r3, r3, #2
 804162c:	2b00      	cmp	r3, #0
 804162e:	d0e8      	beq.n	8041602 <HAL_RCC_OscConfig+0x44e>
 8041630:	e025      	b.n	804167e <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8041632:	4b0e      	ldr	r3, [pc, #56]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 8041634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041638:	4a0c      	ldr	r2, [pc, #48]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804163a:	f023 0301 	bic.w	r3, r3, #1
 804163e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041642:	f7ff faa1 	bl	8040b88 <HAL_GetTick>
 8041646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041648:	e012      	b.n	8041670 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 804164a:	f7ff fa9d 	bl	8040b88 <HAL_GetTick>
 804164e:	4602      	mov	r2, r0
 8041650:	693b      	ldr	r3, [r7, #16]
 8041652:	1ad3      	subs	r3, r2, r3
 8041654:	2b07      	cmp	r3, #7
 8041656:	d90b      	bls.n	8041670 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041658:	4b04      	ldr	r3, [pc, #16]	; (804166c <HAL_RCC_OscConfig+0x4b8>)
 804165a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 804165e:	f003 0302 	and.w	r3, r3, #2
 8041662:	2b00      	cmp	r3, #0
 8041664:	d004      	beq.n	8041670 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 8041666:	2303      	movs	r3, #3
 8041668:	e270      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
 804166a:	bf00      	nop
 804166c:	40021000 	.word	0x40021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8041670:	4ba8      	ldr	r3, [pc, #672]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041676:	f003 0302 	and.w	r3, r3, #2
 804167a:	2b00      	cmp	r3, #0
 804167c:	d1e5      	bne.n	804164a <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 804167e:	687b      	ldr	r3, [r7, #4]
 8041680:	681b      	ldr	r3, [r3, #0]
 8041682:	f003 0304 	and.w	r3, r3, #4
 8041686:	2b00      	cmp	r3, #0
 8041688:	f000 812d 	beq.w	80418e6 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 804168c:	2300      	movs	r3, #0
 804168e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8041690:	4ba0      	ldr	r3, [pc, #640]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041692:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041694:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041698:	2b00      	cmp	r3, #0
 804169a:	d10d      	bne.n	80416b8 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 804169c:	4b9d      	ldr	r3, [pc, #628]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804169e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80416a0:	4a9c      	ldr	r2, [pc, #624]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80416a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80416a6:	6593      	str	r3, [r2, #88]	; 0x58
 80416a8:	4b9a      	ldr	r3, [pc, #616]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80416aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80416ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80416b0:	60bb      	str	r3, [r7, #8]
 80416b2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80416b4:	2301      	movs	r3, #1
 80416b6:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80416b8:	4b97      	ldr	r3, [pc, #604]	; (8041918 <HAL_RCC_OscConfig+0x764>)
 80416ba:	681b      	ldr	r3, [r3, #0]
 80416bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80416c0:	2b00      	cmp	r3, #0
 80416c2:	d11e      	bne.n	8041702 <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80416c4:	4b94      	ldr	r3, [pc, #592]	; (8041918 <HAL_RCC_OscConfig+0x764>)
 80416c6:	681b      	ldr	r3, [r3, #0]
 80416c8:	4a93      	ldr	r2, [pc, #588]	; (8041918 <HAL_RCC_OscConfig+0x764>)
 80416ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80416ce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80416d0:	f7ff fa5a 	bl	8040b88 <HAL_GetTick>
 80416d4:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80416d6:	e00e      	b.n	80416f6 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80416d8:	f7ff fa56 	bl	8040b88 <HAL_GetTick>
 80416dc:	4602      	mov	r2, r0
 80416de:	693b      	ldr	r3, [r7, #16]
 80416e0:	1ad3      	subs	r3, r2, r3
 80416e2:	2b02      	cmp	r3, #2
 80416e4:	d907      	bls.n	80416f6 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80416e6:	4b8c      	ldr	r3, [pc, #560]	; (8041918 <HAL_RCC_OscConfig+0x764>)
 80416e8:	681b      	ldr	r3, [r3, #0]
 80416ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80416ee:	2b00      	cmp	r3, #0
 80416f0:	d101      	bne.n	80416f6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80416f2:	2303      	movs	r3, #3
 80416f4:	e22a      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80416f6:	4b88      	ldr	r3, [pc, #544]	; (8041918 <HAL_RCC_OscConfig+0x764>)
 80416f8:	681b      	ldr	r3, [r3, #0]
 80416fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80416fe:	2b00      	cmp	r3, #0
 8041700:	d0ea      	beq.n	80416d8 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 8041702:	687b      	ldr	r3, [r7, #4]
 8041704:	689b      	ldr	r3, [r3, #8]
 8041706:	f003 0301 	and.w	r3, r3, #1
 804170a:	2b00      	cmp	r3, #0
 804170c:	d01f      	beq.n	804174e <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 804170e:	687b      	ldr	r3, [r7, #4]
 8041710:	689b      	ldr	r3, [r3, #8]
 8041712:	f003 0304 	and.w	r3, r3, #4
 8041716:	2b00      	cmp	r3, #0
 8041718:	d010      	beq.n	804173c <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 804171a:	4b7e      	ldr	r3, [pc, #504]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804171c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041720:	4a7c      	ldr	r2, [pc, #496]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041722:	f043 0304 	orr.w	r3, r3, #4
 8041726:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804172a:	4b7a      	ldr	r3, [pc, #488]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804172c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041730:	4a78      	ldr	r2, [pc, #480]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041732:	f043 0301 	orr.w	r3, r3, #1
 8041736:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 804173a:	e018      	b.n	804176e <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804173c:	4b75      	ldr	r3, [pc, #468]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804173e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041742:	4a74      	ldr	r2, [pc, #464]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041744:	f043 0301 	orr.w	r3, r3, #1
 8041748:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 804174c:	e00f      	b.n	804176e <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 804174e:	4b71      	ldr	r3, [pc, #452]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041750:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041754:	4a6f      	ldr	r2, [pc, #444]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041756:	f023 0301 	bic.w	r3, r3, #1
 804175a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 804175e:	4b6d      	ldr	r3, [pc, #436]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041760:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041764:	4a6b      	ldr	r2, [pc, #428]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041766:	f023 0304 	bic.w	r3, r3, #4
 804176a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 804176e:	687b      	ldr	r3, [r7, #4]
 8041770:	689b      	ldr	r3, [r3, #8]
 8041772:	2b00      	cmp	r3, #0
 8041774:	d068      	beq.n	8041848 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041776:	f7ff fa07 	bl	8040b88 <HAL_GetTick>
 804177a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 804177c:	e011      	b.n	80417a2 <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 804177e:	f7ff fa03 	bl	8040b88 <HAL_GetTick>
 8041782:	4602      	mov	r2, r0
 8041784:	693b      	ldr	r3, [r7, #16]
 8041786:	1ad3      	subs	r3, r2, r3
 8041788:	f241 3288 	movw	r2, #5000	; 0x1388
 804178c:	4293      	cmp	r3, r2
 804178e:	d908      	bls.n	80417a2 <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8041790:	4b60      	ldr	r3, [pc, #384]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041796:	f003 0302 	and.w	r3, r3, #2
 804179a:	2b00      	cmp	r3, #0
 804179c:	d101      	bne.n	80417a2 <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 804179e:	2303      	movs	r3, #3
 80417a0:	e1d4      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80417a2:	4b5c      	ldr	r3, [pc, #368]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80417a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417a8:	f003 0302 	and.w	r3, r3, #2
 80417ac:	2b00      	cmp	r3, #0
 80417ae:	d0e6      	beq.n	804177e <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 80417b0:	687b      	ldr	r3, [r7, #4]
 80417b2:	689b      	ldr	r3, [r3, #8]
 80417b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80417b8:	2b00      	cmp	r3, #0
 80417ba:	d022      	beq.n	8041802 <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 80417bc:	4b55      	ldr	r3, [pc, #340]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80417be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417c2:	4a54      	ldr	r2, [pc, #336]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80417c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80417c8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80417cc:	e011      	b.n	80417f2 <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80417ce:	f7ff f9db 	bl	8040b88 <HAL_GetTick>
 80417d2:	4602      	mov	r2, r0
 80417d4:	693b      	ldr	r3, [r7, #16]
 80417d6:	1ad3      	subs	r3, r2, r3
 80417d8:	f241 3288 	movw	r2, #5000	; 0x1388
 80417dc:	4293      	cmp	r3, r2
 80417de:	d908      	bls.n	80417f2 <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80417e0:	4b4c      	ldr	r3, [pc, #304]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80417e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80417ea:	2b00      	cmp	r3, #0
 80417ec:	d101      	bne.n	80417f2 <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 80417ee:	2303      	movs	r3, #3
 80417f0:	e1ac      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 80417f2:	4b48      	ldr	r3, [pc, #288]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80417f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80417f8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80417fc:	2b00      	cmp	r3, #0
 80417fe:	d0e6      	beq.n	80417ce <HAL_RCC_OscConfig+0x61a>
 8041800:	e068      	b.n	80418d4 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041802:	4b44      	ldr	r3, [pc, #272]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041804:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041808:	4a42      	ldr	r2, [pc, #264]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804180a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804180e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041812:	e011      	b.n	8041838 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041814:	f7ff f9b8 	bl	8040b88 <HAL_GetTick>
 8041818:	4602      	mov	r2, r0
 804181a:	693b      	ldr	r3, [r7, #16]
 804181c:	1ad3      	subs	r3, r2, r3
 804181e:	f241 3288 	movw	r2, #5000	; 0x1388
 8041822:	4293      	cmp	r3, r2
 8041824:	d908      	bls.n	8041838 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041826:	4b3b      	ldr	r3, [pc, #236]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041828:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804182c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041830:	2b00      	cmp	r3, #0
 8041832:	d001      	beq.n	8041838 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 8041834:	2303      	movs	r3, #3
 8041836:	e189      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 8041838:	4b36      	ldr	r3, [pc, #216]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 804183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804183e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8041842:	2b00      	cmp	r3, #0
 8041844:	d1e6      	bne.n	8041814 <HAL_RCC_OscConfig+0x660>
 8041846:	e045      	b.n	80418d4 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8041848:	f7ff f99e 	bl	8040b88 <HAL_GetTick>
 804184c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 804184e:	e011      	b.n	8041874 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8041850:	f7ff f99a 	bl	8040b88 <HAL_GetTick>
 8041854:	4602      	mov	r2, r0
 8041856:	693b      	ldr	r3, [r7, #16]
 8041858:	1ad3      	subs	r3, r2, r3
 804185a:	f241 3288 	movw	r2, #5000	; 0x1388
 804185e:	4293      	cmp	r3, r2
 8041860:	d908      	bls.n	8041874 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041862:	4b2c      	ldr	r3, [pc, #176]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041868:	f003 0302 	and.w	r3, r3, #2
 804186c:	2b00      	cmp	r3, #0
 804186e:	d001      	beq.n	8041874 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 8041870:	2303      	movs	r3, #3
 8041872:	e16b      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8041874:	4b27      	ldr	r3, [pc, #156]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041876:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804187a:	f003 0302 	and.w	r3, r3, #2
 804187e:	2b00      	cmp	r3, #0
 8041880:	d1e6      	bne.n	8041850 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 8041882:	4b24      	ldr	r3, [pc, #144]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804188c:	2b00      	cmp	r3, #0
 804188e:	d021      	beq.n	80418d4 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 8041890:	4b20      	ldr	r3, [pc, #128]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041892:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8041896:	4a1f      	ldr	r2, [pc, #124]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804189c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80418a0:	e011      	b.n	80418c6 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80418a2:	f7ff f971 	bl	8040b88 <HAL_GetTick>
 80418a6:	4602      	mov	r2, r0
 80418a8:	693b      	ldr	r3, [r7, #16]
 80418aa:	1ad3      	subs	r3, r2, r3
 80418ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80418b0:	4293      	cmp	r3, r2
 80418b2:	d908      	bls.n	80418c6 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80418b4:	4b17      	ldr	r3, [pc, #92]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80418b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80418be:	2b00      	cmp	r3, #0
 80418c0:	d001      	beq.n	80418c6 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 80418c2:	2303      	movs	r3, #3
 80418c4:	e142      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 80418c6:	4b13      	ldr	r3, [pc, #76]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80418c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80418cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80418d0:	2b00      	cmp	r3, #0
 80418d2:	d1e6      	bne.n	80418a2 <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80418d4:	7ffb      	ldrb	r3, [r7, #31]
 80418d6:	2b01      	cmp	r3, #1
 80418d8:	d105      	bne.n	80418e6 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80418da:	4b0e      	ldr	r3, [pc, #56]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80418dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80418de:	4a0d      	ldr	r2, [pc, #52]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80418e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80418e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80418e6:	687b      	ldr	r3, [r7, #4]
 80418e8:	681b      	ldr	r3, [r3, #0]
 80418ea:	f003 0320 	and.w	r3, r3, #32
 80418ee:	2b00      	cmp	r3, #0
 80418f0:	d04f      	beq.n	8041992 <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80418f2:	687b      	ldr	r3, [r7, #4]
 80418f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80418f6:	2b00      	cmp	r3, #0
 80418f8:	d028      	beq.n	804194c <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80418fa:	4b06      	ldr	r3, [pc, #24]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 80418fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041900:	4a04      	ldr	r2, [pc, #16]	; (8041914 <HAL_RCC_OscConfig+0x760>)
 8041902:	f043 0301 	orr.w	r3, r3, #1
 8041906:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804190a:	f7ff f93d 	bl	8040b88 <HAL_GetTick>
 804190e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8041910:	e014      	b.n	804193c <HAL_RCC_OscConfig+0x788>
 8041912:	bf00      	nop
 8041914:	40021000 	.word	0x40021000
 8041918:	40007000 	.word	0x40007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 804191c:	f7ff f934 	bl	8040b88 <HAL_GetTick>
 8041920:	4602      	mov	r2, r0
 8041922:	693b      	ldr	r3, [r7, #16]
 8041924:	1ad3      	subs	r3, r2, r3
 8041926:	2b02      	cmp	r3, #2
 8041928:	d908      	bls.n	804193c <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804192a:	4b8a      	ldr	r3, [pc, #552]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 804192c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041930:	f003 0302 	and.w	r3, r3, #2
 8041934:	2b00      	cmp	r3, #0
 8041936:	d101      	bne.n	804193c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8041938:	2303      	movs	r3, #3
 804193a:	e107      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 804193c:	4b85      	ldr	r3, [pc, #532]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 804193e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041942:	f003 0302 	and.w	r3, r3, #2
 8041946:	2b00      	cmp	r3, #0
 8041948:	d0e8      	beq.n	804191c <HAL_RCC_OscConfig+0x768>
 804194a:	e022      	b.n	8041992 <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 804194c:	4b81      	ldr	r3, [pc, #516]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 804194e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041952:	4a80      	ldr	r2, [pc, #512]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041954:	f023 0301 	bic.w	r3, r3, #1
 8041958:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804195c:	f7ff f914 	bl	8040b88 <HAL_GetTick>
 8041960:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041962:	e00f      	b.n	8041984 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8041964:	f7ff f910 	bl	8040b88 <HAL_GetTick>
 8041968:	4602      	mov	r2, r0
 804196a:	693b      	ldr	r3, [r7, #16]
 804196c:	1ad3      	subs	r3, r2, r3
 804196e:	2b02      	cmp	r3, #2
 8041970:	d908      	bls.n	8041984 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041972:	4b78      	ldr	r3, [pc, #480]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041974:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8041978:	f003 0302 	and.w	r3, r3, #2
 804197c:	2b00      	cmp	r3, #0
 804197e:	d001      	beq.n	8041984 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 8041980:	2303      	movs	r3, #3
 8041982:	e0e3      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8041984:	4b73      	ldr	r3, [pc, #460]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041986:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 804198a:	f003 0302 	and.w	r3, r3, #2
 804198e:	2b00      	cmp	r3, #0
 8041990:	d1e8      	bne.n	8041964 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8041992:	687b      	ldr	r3, [r7, #4]
 8041994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041996:	2b00      	cmp	r3, #0
 8041998:	f000 80d7 	beq.w	8041b4a <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 804199c:	4b6d      	ldr	r3, [pc, #436]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 804199e:	689b      	ldr	r3, [r3, #8]
 80419a0:	f003 030c 	and.w	r3, r3, #12
 80419a4:	2b0c      	cmp	r3, #12
 80419a6:	f000 8091 	beq.w	8041acc <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80419aa:	687b      	ldr	r3, [r7, #4]
 80419ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80419ae:	2b02      	cmp	r3, #2
 80419b0:	d166      	bne.n	8041a80 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80419b2:	4b68      	ldr	r3, [pc, #416]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 80419b4:	681b      	ldr	r3, [r3, #0]
 80419b6:	4a67      	ldr	r2, [pc, #412]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 80419b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80419bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80419be:	f7ff f8e3 	bl	8040b88 <HAL_GetTick>
 80419c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80419c4:	e00e      	b.n	80419e4 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80419c6:	f7ff f8df 	bl	8040b88 <HAL_GetTick>
 80419ca:	4602      	mov	r2, r0
 80419cc:	693b      	ldr	r3, [r7, #16]
 80419ce:	1ad3      	subs	r3, r2, r3
 80419d0:	2b02      	cmp	r3, #2
 80419d2:	d907      	bls.n	80419e4 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80419d4:	4b5f      	ldr	r3, [pc, #380]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 80419d6:	681b      	ldr	r3, [r3, #0]
 80419d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80419dc:	2b00      	cmp	r3, #0
 80419de:	d001      	beq.n	80419e4 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 80419e0:	2303      	movs	r3, #3
 80419e2:	e0b3      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80419e4:	4b5b      	ldr	r3, [pc, #364]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 80419e6:	681b      	ldr	r3, [r3, #0]
 80419e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80419ec:	2b00      	cmp	r3, #0
 80419ee:	d1ea      	bne.n	80419c6 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80419f0:	4b58      	ldr	r3, [pc, #352]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 80419f2:	68da      	ldr	r2, [r3, #12]
 80419f4:	4b58      	ldr	r3, [pc, #352]	; (8041b58 <HAL_RCC_OscConfig+0x9a4>)
 80419f6:	4013      	ands	r3, r2
 80419f8:	687a      	ldr	r2, [r7, #4]
 80419fa:	6b11      	ldr	r1, [r2, #48]	; 0x30
 80419fc:	687a      	ldr	r2, [r7, #4]
 80419fe:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8041a00:	3a01      	subs	r2, #1
 8041a02:	0112      	lsls	r2, r2, #4
 8041a04:	4311      	orrs	r1, r2
 8041a06:	687a      	ldr	r2, [r7, #4]
 8041a08:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8041a0a:	0212      	lsls	r2, r2, #8
 8041a0c:	4311      	orrs	r1, r2
 8041a0e:	687a      	ldr	r2, [r7, #4]
 8041a10:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8041a12:	0852      	lsrs	r2, r2, #1
 8041a14:	3a01      	subs	r2, #1
 8041a16:	0552      	lsls	r2, r2, #21
 8041a18:	4311      	orrs	r1, r2
 8041a1a:	687a      	ldr	r2, [r7, #4]
 8041a1c:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8041a1e:	0852      	lsrs	r2, r2, #1
 8041a20:	3a01      	subs	r2, #1
 8041a22:	0652      	lsls	r2, r2, #25
 8041a24:	4311      	orrs	r1, r2
 8041a26:	687a      	ldr	r2, [r7, #4]
 8041a28:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8041a2a:	06d2      	lsls	r2, r2, #27
 8041a2c:	430a      	orrs	r2, r1
 8041a2e:	4949      	ldr	r1, [pc, #292]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a30:	4313      	orrs	r3, r2
 8041a32:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8041a34:	4b47      	ldr	r3, [pc, #284]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a36:	681b      	ldr	r3, [r3, #0]
 8041a38:	4a46      	ldr	r2, [pc, #280]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041a3e:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8041a40:	4b44      	ldr	r3, [pc, #272]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a42:	68db      	ldr	r3, [r3, #12]
 8041a44:	4a43      	ldr	r2, [pc, #268]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8041a4a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041a4c:	f7ff f89c 	bl	8040b88 <HAL_GetTick>
 8041a50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041a52:	e00e      	b.n	8041a72 <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041a54:	f7ff f898 	bl	8040b88 <HAL_GetTick>
 8041a58:	4602      	mov	r2, r0
 8041a5a:	693b      	ldr	r3, [r7, #16]
 8041a5c:	1ad3      	subs	r3, r2, r3
 8041a5e:	2b02      	cmp	r3, #2
 8041a60:	d907      	bls.n	8041a72 <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041a62:	4b3c      	ldr	r3, [pc, #240]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a64:	681b      	ldr	r3, [r3, #0]
 8041a66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a6a:	2b00      	cmp	r3, #0
 8041a6c:	d101      	bne.n	8041a72 <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 8041a6e:	2303      	movs	r3, #3
 8041a70:	e06c      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041a72:	4b38      	ldr	r3, [pc, #224]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a74:	681b      	ldr	r3, [r3, #0]
 8041a76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041a7a:	2b00      	cmp	r3, #0
 8041a7c:	d0ea      	beq.n	8041a54 <HAL_RCC_OscConfig+0x8a0>
 8041a7e:	e064      	b.n	8041b4a <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8041a80:	4b34      	ldr	r3, [pc, #208]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a82:	681b      	ldr	r3, [r3, #0]
 8041a84:	4a33      	ldr	r2, [pc, #204]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041a86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8041a8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8041a8c:	f7ff f87c 	bl	8040b88 <HAL_GetTick>
 8041a90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041a92:	e00e      	b.n	8041ab2 <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8041a94:	f7ff f878 	bl	8040b88 <HAL_GetTick>
 8041a98:	4602      	mov	r2, r0
 8041a9a:	693b      	ldr	r3, [r7, #16]
 8041a9c:	1ad3      	subs	r3, r2, r3
 8041a9e:	2b02      	cmp	r3, #2
 8041aa0:	d907      	bls.n	8041ab2 <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041aa2:	4b2c      	ldr	r3, [pc, #176]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041aa4:	681b      	ldr	r3, [r3, #0]
 8041aa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041aaa:	2b00      	cmp	r3, #0
 8041aac:	d001      	beq.n	8041ab2 <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 8041aae:	2303      	movs	r3, #3
 8041ab0:	e04c      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8041ab2:	4b28      	ldr	r3, [pc, #160]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041ab4:	681b      	ldr	r3, [r3, #0]
 8041ab6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041aba:	2b00      	cmp	r3, #0
 8041abc:	d1ea      	bne.n	8041a94 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8041abe:	4b25      	ldr	r3, [pc, #148]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041ac0:	68da      	ldr	r2, [r3, #12]
 8041ac2:	4924      	ldr	r1, [pc, #144]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041ac4:	4b25      	ldr	r3, [pc, #148]	; (8041b5c <HAL_RCC_OscConfig+0x9a8>)
 8041ac6:	4013      	ands	r3, r2
 8041ac8:	60cb      	str	r3, [r1, #12]
 8041aca:	e03e      	b.n	8041b4a <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 8041acc:	687b      	ldr	r3, [r7, #4]
 8041ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8041ad0:	2b01      	cmp	r3, #1
 8041ad2:	d101      	bne.n	8041ad8 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 8041ad4:	2301      	movs	r3, #1
 8041ad6:	e039      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8041ad8:	4b1e      	ldr	r3, [pc, #120]	; (8041b54 <HAL_RCC_OscConfig+0x9a0>)
 8041ada:	68db      	ldr	r3, [r3, #12]
 8041adc:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041ade:	697b      	ldr	r3, [r7, #20]
 8041ae0:	f003 0203 	and.w	r2, r3, #3
 8041ae4:	687b      	ldr	r3, [r7, #4]
 8041ae6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8041ae8:	429a      	cmp	r2, r3
 8041aea:	d12c      	bne.n	8041b46 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041aec:	697b      	ldr	r3, [r7, #20]
 8041aee:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8041af2:	687b      	ldr	r3, [r7, #4]
 8041af4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8041af6:	3b01      	subs	r3, #1
 8041af8:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8041afa:	429a      	cmp	r2, r3
 8041afc:	d123      	bne.n	8041b46 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041afe:	697b      	ldr	r3, [r7, #20]
 8041b00:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8041b04:	687b      	ldr	r3, [r7, #4]
 8041b06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8041b08:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8041b0a:	429a      	cmp	r2, r3
 8041b0c:	d11b      	bne.n	8041b46 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041b0e:	697b      	ldr	r3, [r7, #20]
 8041b10:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8041b14:	687b      	ldr	r3, [r7, #4]
 8041b16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8041b18:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8041b1a:	429a      	cmp	r2, r3
 8041b1c:	d113      	bne.n	8041b46 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041b1e:	697b      	ldr	r3, [r7, #20]
 8041b20:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8041b24:	687b      	ldr	r3, [r7, #4]
 8041b26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8041b28:	085b      	lsrs	r3, r3, #1
 8041b2a:	3b01      	subs	r3, #1
 8041b2c:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8041b2e:	429a      	cmp	r2, r3
 8041b30:	d109      	bne.n	8041b46 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8041b32:	697b      	ldr	r3, [r7, #20]
 8041b34:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8041b38:	687b      	ldr	r3, [r7, #4]
 8041b3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8041b3c:	085b      	lsrs	r3, r3, #1
 8041b3e:	3b01      	subs	r3, #1
 8041b40:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8041b42:	429a      	cmp	r2, r3
 8041b44:	d001      	beq.n	8041b4a <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 8041b46:	2301      	movs	r3, #1
 8041b48:	e000      	b.n	8041b4c <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 8041b4a:	2300      	movs	r3, #0
}
 8041b4c:	4618      	mov	r0, r3
 8041b4e:	3720      	adds	r7, #32
 8041b50:	46bd      	mov	sp, r7
 8041b52:	bd80      	pop	{r7, pc}
 8041b54:	40021000 	.word	0x40021000
 8041b58:	019f800c 	.word	0x019f800c
 8041b5c:	feeefffc 	.word	0xfeeefffc

08041b60 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8041b60:	b580      	push	{r7, lr}
 8041b62:	b086      	sub	sp, #24
 8041b64:	af00      	add	r7, sp, #0
 8041b66:	6078      	str	r0, [r7, #4]
 8041b68:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8041b6a:	2300      	movs	r3, #0
 8041b6c:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8041b6e:	687b      	ldr	r3, [r7, #4]
 8041b70:	2b00      	cmp	r3, #0
 8041b72:	d101      	bne.n	8041b78 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8041b74:	2301      	movs	r3, #1
 8041b76:	e11c      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8041b78:	4b90      	ldr	r3, [pc, #576]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041b7a:	681b      	ldr	r3, [r3, #0]
 8041b7c:	f003 030f 	and.w	r3, r3, #15
 8041b80:	683a      	ldr	r2, [r7, #0]
 8041b82:	429a      	cmp	r2, r3
 8041b84:	d910      	bls.n	8041ba8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041b86:	4b8d      	ldr	r3, [pc, #564]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041b88:	681b      	ldr	r3, [r3, #0]
 8041b8a:	f023 020f 	bic.w	r2, r3, #15
 8041b8e:	498b      	ldr	r1, [pc, #556]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041b90:	683b      	ldr	r3, [r7, #0]
 8041b92:	4313      	orrs	r3, r2
 8041b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041b96:	4b89      	ldr	r3, [pc, #548]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041b98:	681b      	ldr	r3, [r3, #0]
 8041b9a:	f003 030f 	and.w	r3, r3, #15
 8041b9e:	683a      	ldr	r2, [r7, #0]
 8041ba0:	429a      	cmp	r2, r3
 8041ba2:	d001      	beq.n	8041ba8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8041ba4:	2301      	movs	r3, #1
 8041ba6:	e104      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041ba8:	687b      	ldr	r3, [r7, #4]
 8041baa:	681b      	ldr	r3, [r3, #0]
 8041bac:	f003 0302 	and.w	r3, r3, #2
 8041bb0:	2b00      	cmp	r3, #0
 8041bb2:	d010      	beq.n	8041bd6 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8041bb4:	687b      	ldr	r3, [r7, #4]
 8041bb6:	689a      	ldr	r2, [r3, #8]
 8041bb8:	4b81      	ldr	r3, [pc, #516]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041bba:	689b      	ldr	r3, [r3, #8]
 8041bbc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041bc0:	429a      	cmp	r2, r3
 8041bc2:	d908      	bls.n	8041bd6 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041bc4:	4b7e      	ldr	r3, [pc, #504]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041bc6:	689b      	ldr	r3, [r3, #8]
 8041bc8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041bcc:	687b      	ldr	r3, [r7, #4]
 8041bce:	689b      	ldr	r3, [r3, #8]
 8041bd0:	497b      	ldr	r1, [pc, #492]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041bd2:	4313      	orrs	r3, r2
 8041bd4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8041bd6:	687b      	ldr	r3, [r7, #4]
 8041bd8:	681b      	ldr	r3, [r3, #0]
 8041bda:	f003 0301 	and.w	r3, r3, #1
 8041bde:	2b00      	cmp	r3, #0
 8041be0:	f000 8085 	beq.w	8041cee <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8041be4:	687b      	ldr	r3, [r7, #4]
 8041be6:	685b      	ldr	r3, [r3, #4]
 8041be8:	2b03      	cmp	r3, #3
 8041bea:	d11f      	bne.n	8041c2c <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8041bec:	4b74      	ldr	r3, [pc, #464]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041bee:	681b      	ldr	r3, [r3, #0]
 8041bf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8041bf4:	2b00      	cmp	r3, #0
 8041bf6:	d101      	bne.n	8041bfc <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 8041bf8:	2301      	movs	r3, #1
 8041bfa:	e0da      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8041bfc:	f000 fa24 	bl	8042048 <RCC_GetSysClockFreqFromPLLSource>
 8041c00:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 8041c02:	693b      	ldr	r3, [r7, #16]
 8041c04:	4a6f      	ldr	r2, [pc, #444]	; (8041dc4 <HAL_RCC_ClockConfig+0x264>)
 8041c06:	4293      	cmp	r3, r2
 8041c08:	d947      	bls.n	8041c9a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8041c0a:	4b6d      	ldr	r3, [pc, #436]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c0c:	689b      	ldr	r3, [r3, #8]
 8041c0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041c12:	2b00      	cmp	r3, #0
 8041c14:	d141      	bne.n	8041c9a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041c16:	4b6a      	ldr	r3, [pc, #424]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c18:	689b      	ldr	r3, [r3, #8]
 8041c1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041c1e:	4a68      	ldr	r2, [pc, #416]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c20:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041c24:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041c26:	2380      	movs	r3, #128	; 0x80
 8041c28:	617b      	str	r3, [r7, #20]
 8041c2a:	e036      	b.n	8041c9a <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8041c2c:	687b      	ldr	r3, [r7, #4]
 8041c2e:	685b      	ldr	r3, [r3, #4]
 8041c30:	2b02      	cmp	r3, #2
 8041c32:	d107      	bne.n	8041c44 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8041c34:	4b62      	ldr	r3, [pc, #392]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c36:	681b      	ldr	r3, [r3, #0]
 8041c38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8041c3c:	2b00      	cmp	r3, #0
 8041c3e:	d115      	bne.n	8041c6c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041c40:	2301      	movs	r3, #1
 8041c42:	e0b6      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8041c44:	687b      	ldr	r3, [r7, #4]
 8041c46:	685b      	ldr	r3, [r3, #4]
 8041c48:	2b00      	cmp	r3, #0
 8041c4a:	d107      	bne.n	8041c5c <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8041c4c:	4b5c      	ldr	r3, [pc, #368]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c4e:	681b      	ldr	r3, [r3, #0]
 8041c50:	f003 0302 	and.w	r3, r3, #2
 8041c54:	2b00      	cmp	r3, #0
 8041c56:	d109      	bne.n	8041c6c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041c58:	2301      	movs	r3, #1
 8041c5a:	e0aa      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8041c5c:	4b58      	ldr	r3, [pc, #352]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c5e:	681b      	ldr	r3, [r3, #0]
 8041c60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8041c64:	2b00      	cmp	r3, #0
 8041c66:	d101      	bne.n	8041c6c <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 8041c68:	2301      	movs	r3, #1
 8041c6a:	e0a2      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8041c6c:	f000 f8b0 	bl	8041dd0 <HAL_RCC_GetSysClockFreq>
 8041c70:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 8041c72:	693b      	ldr	r3, [r7, #16]
 8041c74:	4a53      	ldr	r2, [pc, #332]	; (8041dc4 <HAL_RCC_ClockConfig+0x264>)
 8041c76:	4293      	cmp	r3, r2
 8041c78:	d90f      	bls.n	8041c9a <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8041c7a:	4b51      	ldr	r3, [pc, #324]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c7c:	689b      	ldr	r3, [r3, #8]
 8041c7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041c82:	2b00      	cmp	r3, #0
 8041c84:	d109      	bne.n	8041c9a <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8041c86:	4b4e      	ldr	r3, [pc, #312]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c88:	689b      	ldr	r3, [r3, #8]
 8041c8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041c8e:	4a4c      	ldr	r2, [pc, #304]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8041c94:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8041c96:	2380      	movs	r3, #128	; 0x80
 8041c98:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8041c9a:	4b49      	ldr	r3, [pc, #292]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041c9c:	689b      	ldr	r3, [r3, #8]
 8041c9e:	f023 0203 	bic.w	r2, r3, #3
 8041ca2:	687b      	ldr	r3, [r7, #4]
 8041ca4:	685b      	ldr	r3, [r3, #4]
 8041ca6:	4946      	ldr	r1, [pc, #280]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041ca8:	4313      	orrs	r3, r2
 8041caa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8041cac:	f7fe ff6c 	bl	8040b88 <HAL_GetTick>
 8041cb0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041cb2:	e013      	b.n	8041cdc <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8041cb4:	f7fe ff68 	bl	8040b88 <HAL_GetTick>
 8041cb8:	4602      	mov	r2, r0
 8041cba:	68fb      	ldr	r3, [r7, #12]
 8041cbc:	1ad3      	subs	r3, r2, r3
 8041cbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8041cc2:	4293      	cmp	r3, r2
 8041cc4:	d90a      	bls.n	8041cdc <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041cc6:	4b3e      	ldr	r3, [pc, #248]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041cc8:	689b      	ldr	r3, [r3, #8]
 8041cca:	f003 020c 	and.w	r2, r3, #12
 8041cce:	687b      	ldr	r3, [r7, #4]
 8041cd0:	685b      	ldr	r3, [r3, #4]
 8041cd2:	009b      	lsls	r3, r3, #2
 8041cd4:	429a      	cmp	r2, r3
 8041cd6:	d001      	beq.n	8041cdc <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 8041cd8:	2303      	movs	r3, #3
 8041cda:	e06a      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8041cdc:	4b38      	ldr	r3, [pc, #224]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041cde:	689b      	ldr	r3, [r3, #8]
 8041ce0:	f003 020c 	and.w	r2, r3, #12
 8041ce4:	687b      	ldr	r3, [r7, #4]
 8041ce6:	685b      	ldr	r3, [r3, #4]
 8041ce8:	009b      	lsls	r3, r3, #2
 8041cea:	429a      	cmp	r2, r3
 8041cec:	d1e2      	bne.n	8041cb4 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8041cee:	697b      	ldr	r3, [r7, #20]
 8041cf0:	2b80      	cmp	r3, #128	; 0x80
 8041cf2:	d105      	bne.n	8041d00 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8041cf4:	4b32      	ldr	r3, [pc, #200]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041cf6:	689b      	ldr	r3, [r3, #8]
 8041cf8:	4a31      	ldr	r2, [pc, #196]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041cfa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8041cfe:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8041d00:	687b      	ldr	r3, [r7, #4]
 8041d02:	681b      	ldr	r3, [r3, #0]
 8041d04:	f003 0302 	and.w	r3, r3, #2
 8041d08:	2b00      	cmp	r3, #0
 8041d0a:	d010      	beq.n	8041d2e <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8041d0c:	687b      	ldr	r3, [r7, #4]
 8041d0e:	689a      	ldr	r2, [r3, #8]
 8041d10:	4b2b      	ldr	r3, [pc, #172]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d12:	689b      	ldr	r3, [r3, #8]
 8041d14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8041d18:	429a      	cmp	r2, r3
 8041d1a:	d208      	bcs.n	8041d2e <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8041d1c:	4b28      	ldr	r3, [pc, #160]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d1e:	689b      	ldr	r3, [r3, #8]
 8041d20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8041d24:	687b      	ldr	r3, [r7, #4]
 8041d26:	689b      	ldr	r3, [r3, #8]
 8041d28:	4925      	ldr	r1, [pc, #148]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d2a:	4313      	orrs	r3, r2
 8041d2c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8041d2e:	4b23      	ldr	r3, [pc, #140]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041d30:	681b      	ldr	r3, [r3, #0]
 8041d32:	f003 030f 	and.w	r3, r3, #15
 8041d36:	683a      	ldr	r2, [r7, #0]
 8041d38:	429a      	cmp	r2, r3
 8041d3a:	d210      	bcs.n	8041d5e <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8041d3c:	4b1f      	ldr	r3, [pc, #124]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041d3e:	681b      	ldr	r3, [r3, #0]
 8041d40:	f023 020f 	bic.w	r2, r3, #15
 8041d44:	491d      	ldr	r1, [pc, #116]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041d46:	683b      	ldr	r3, [r7, #0]
 8041d48:	4313      	orrs	r3, r2
 8041d4a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8041d4c:	4b1b      	ldr	r3, [pc, #108]	; (8041dbc <HAL_RCC_ClockConfig+0x25c>)
 8041d4e:	681b      	ldr	r3, [r3, #0]
 8041d50:	f003 030f 	and.w	r3, r3, #15
 8041d54:	683a      	ldr	r2, [r7, #0]
 8041d56:	429a      	cmp	r2, r3
 8041d58:	d001      	beq.n	8041d5e <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 8041d5a:	2301      	movs	r3, #1
 8041d5c:	e029      	b.n	8041db2 <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8041d5e:	687b      	ldr	r3, [r7, #4]
 8041d60:	681b      	ldr	r3, [r3, #0]
 8041d62:	f003 0304 	and.w	r3, r3, #4
 8041d66:	2b00      	cmp	r3, #0
 8041d68:	d008      	beq.n	8041d7c <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8041d6a:	4b15      	ldr	r3, [pc, #84]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d6c:	689b      	ldr	r3, [r3, #8]
 8041d6e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8041d72:	687b      	ldr	r3, [r7, #4]
 8041d74:	68db      	ldr	r3, [r3, #12]
 8041d76:	4912      	ldr	r1, [pc, #72]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d78:	4313      	orrs	r3, r2
 8041d7a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8041d7c:	687b      	ldr	r3, [r7, #4]
 8041d7e:	681b      	ldr	r3, [r3, #0]
 8041d80:	f003 0308 	and.w	r3, r3, #8
 8041d84:	2b00      	cmp	r3, #0
 8041d86:	d009      	beq.n	8041d9c <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8041d88:	4b0d      	ldr	r3, [pc, #52]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d8a:	689b      	ldr	r3, [r3, #8]
 8041d8c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8041d90:	687b      	ldr	r3, [r7, #4]
 8041d92:	691b      	ldr	r3, [r3, #16]
 8041d94:	00db      	lsls	r3, r3, #3
 8041d96:	490a      	ldr	r1, [pc, #40]	; (8041dc0 <HAL_RCC_ClockConfig+0x260>)
 8041d98:	4313      	orrs	r3, r2
 8041d9a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 8041d9c:	f000 f8b4 	bl	8041f08 <HAL_RCC_GetHCLKFreq>
 8041da0:	4603      	mov	r3, r0
 8041da2:	4a09      	ldr	r2, [pc, #36]	; (8041dc8 <HAL_RCC_ClockConfig+0x268>)
 8041da4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8041da6:	4b09      	ldr	r3, [pc, #36]	; (8041dcc <HAL_RCC_ClockConfig+0x26c>)
 8041da8:	681b      	ldr	r3, [r3, #0]
 8041daa:	4618      	mov	r0, r3
 8041dac:	f7fe fe9c 	bl	8040ae8 <HAL_InitTick>
 8041db0:	4603      	mov	r3, r0
}
 8041db2:	4618      	mov	r0, r3
 8041db4:	3718      	adds	r7, #24
 8041db6:	46bd      	mov	sp, r7
 8041db8:	bd80      	pop	{r7, pc}
 8041dba:	bf00      	nop
 8041dbc:	40022000 	.word	0x40022000
 8041dc0:	40021000 	.word	0x40021000
 8041dc4:	04c4b400 	.word	0x04c4b400
 8041dc8:	20018000 	.word	0x20018000
 8041dcc:	20018004 	.word	0x20018004

08041dd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8041dd0:	b480      	push	{r7}
 8041dd2:	b089      	sub	sp, #36	; 0x24
 8041dd4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8041dd6:	2300      	movs	r3, #0
 8041dd8:	61fb      	str	r3, [r7, #28]
 8041dda:	2300      	movs	r3, #0
 8041ddc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8041dde:	4b47      	ldr	r3, [pc, #284]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041de0:	689b      	ldr	r3, [r3, #8]
 8041de2:	f003 030c 	and.w	r3, r3, #12
 8041de6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8041de8:	4b44      	ldr	r3, [pc, #272]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041dea:	68db      	ldr	r3, [r3, #12]
 8041dec:	f003 0303 	and.w	r3, r3, #3
 8041df0:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 8041df2:	693b      	ldr	r3, [r7, #16]
 8041df4:	2b00      	cmp	r3, #0
 8041df6:	d005      	beq.n	8041e04 <HAL_RCC_GetSysClockFreq+0x34>
 8041df8:	693b      	ldr	r3, [r7, #16]
 8041dfa:	2b0c      	cmp	r3, #12
 8041dfc:	d121      	bne.n	8041e42 <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8041dfe:	68fb      	ldr	r3, [r7, #12]
 8041e00:	2b01      	cmp	r3, #1
 8041e02:	d11e      	bne.n	8041e42 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8041e04:	4b3d      	ldr	r3, [pc, #244]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e06:	681b      	ldr	r3, [r3, #0]
 8041e08:	f003 0308 	and.w	r3, r3, #8
 8041e0c:	2b00      	cmp	r3, #0
 8041e0e:	d107      	bne.n	8041e20 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8041e10:	4b3a      	ldr	r3, [pc, #232]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e12:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8041e16:	0a1b      	lsrs	r3, r3, #8
 8041e18:	f003 030f 	and.w	r3, r3, #15
 8041e1c:	61fb      	str	r3, [r7, #28]
 8041e1e:	e005      	b.n	8041e2c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8041e20:	4b36      	ldr	r3, [pc, #216]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e22:	681b      	ldr	r3, [r3, #0]
 8041e24:	091b      	lsrs	r3, r3, #4
 8041e26:	f003 030f 	and.w	r3, r3, #15
 8041e2a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 8041e2c:	4a34      	ldr	r2, [pc, #208]	; (8041f00 <HAL_RCC_GetSysClockFreq+0x130>)
 8041e2e:	69fb      	ldr	r3, [r7, #28]
 8041e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8041e34:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041e36:	693b      	ldr	r3, [r7, #16]
 8041e38:	2b00      	cmp	r3, #0
 8041e3a:	d10d      	bne.n	8041e58 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8041e3c:	69fb      	ldr	r3, [r7, #28]
 8041e3e:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 8041e40:	e00a      	b.n	8041e58 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8041e42:	693b      	ldr	r3, [r7, #16]
 8041e44:	2b04      	cmp	r3, #4
 8041e46:	d102      	bne.n	8041e4e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8041e48:	4b2e      	ldr	r3, [pc, #184]	; (8041f04 <HAL_RCC_GetSysClockFreq+0x134>)
 8041e4a:	61bb      	str	r3, [r7, #24]
 8041e4c:	e004      	b.n	8041e58 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8041e4e:	693b      	ldr	r3, [r7, #16]
 8041e50:	2b08      	cmp	r3, #8
 8041e52:	d101      	bne.n	8041e58 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8041e54:	4b2b      	ldr	r3, [pc, #172]	; (8041f04 <HAL_RCC_GetSysClockFreq+0x134>)
 8041e56:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8041e58:	693b      	ldr	r3, [r7, #16]
 8041e5a:	2b0c      	cmp	r3, #12
 8041e5c:	d146      	bne.n	8041eec <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8041e5e:	4b27      	ldr	r3, [pc, #156]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e60:	68db      	ldr	r3, [r3, #12]
 8041e62:	f003 0303 	and.w	r3, r3, #3
 8041e66:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8041e68:	4b24      	ldr	r3, [pc, #144]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e6a:	68db      	ldr	r3, [r3, #12]
 8041e6c:	091b      	lsrs	r3, r3, #4
 8041e6e:	f003 030f 	and.w	r3, r3, #15
 8041e72:	3301      	adds	r3, #1
 8041e74:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 8041e76:	68bb      	ldr	r3, [r7, #8]
 8041e78:	2b02      	cmp	r3, #2
 8041e7a:	d003      	beq.n	8041e84 <HAL_RCC_GetSysClockFreq+0xb4>
 8041e7c:	68bb      	ldr	r3, [r7, #8]
 8041e7e:	2b03      	cmp	r3, #3
 8041e80:	d00d      	beq.n	8041e9e <HAL_RCC_GetSysClockFreq+0xce>
 8041e82:	e019      	b.n	8041eb8 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041e84:	4a1f      	ldr	r2, [pc, #124]	; (8041f04 <HAL_RCC_GetSysClockFreq+0x134>)
 8041e86:	687b      	ldr	r3, [r7, #4]
 8041e88:	fbb2 f3f3 	udiv	r3, r2, r3
 8041e8c:	4a1b      	ldr	r2, [pc, #108]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041e8e:	68d2      	ldr	r2, [r2, #12]
 8041e90:	0a12      	lsrs	r2, r2, #8
 8041e92:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041e96:	fb02 f303 	mul.w	r3, r2, r3
 8041e9a:	617b      	str	r3, [r7, #20]
        break;
 8041e9c:	e019      	b.n	8041ed2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041e9e:	4a19      	ldr	r2, [pc, #100]	; (8041f04 <HAL_RCC_GetSysClockFreq+0x134>)
 8041ea0:	687b      	ldr	r3, [r7, #4]
 8041ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8041ea6:	4a15      	ldr	r2, [pc, #84]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ea8:	68d2      	ldr	r2, [r2, #12]
 8041eaa:	0a12      	lsrs	r2, r2, #8
 8041eac:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041eb0:	fb02 f303 	mul.w	r3, r2, r3
 8041eb4:	617b      	str	r3, [r7, #20]
        break;
 8041eb6:	e00c      	b.n	8041ed2 <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8041eb8:	69fa      	ldr	r2, [r7, #28]
 8041eba:	687b      	ldr	r3, [r7, #4]
 8041ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8041ec0:	4a0e      	ldr	r2, [pc, #56]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ec2:	68d2      	ldr	r2, [r2, #12]
 8041ec4:	0a12      	lsrs	r2, r2, #8
 8041ec6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8041eca:	fb02 f303 	mul.w	r3, r2, r3
 8041ece:	617b      	str	r3, [r7, #20]
        break;
 8041ed0:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 8041ed2:	4b0a      	ldr	r3, [pc, #40]	; (8041efc <HAL_RCC_GetSysClockFreq+0x12c>)
 8041ed4:	68db      	ldr	r3, [r3, #12]
 8041ed6:	0e5b      	lsrs	r3, r3, #25
 8041ed8:	f003 0303 	and.w	r3, r3, #3
 8041edc:	3301      	adds	r3, #1
 8041ede:	005b      	lsls	r3, r3, #1
 8041ee0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8041ee2:	697a      	ldr	r2, [r7, #20]
 8041ee4:	683b      	ldr	r3, [r7, #0]
 8041ee6:	fbb2 f3f3 	udiv	r3, r2, r3
 8041eea:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8041eec:	69bb      	ldr	r3, [r7, #24]
}
 8041eee:	4618      	mov	r0, r3
 8041ef0:	3724      	adds	r7, #36	; 0x24
 8041ef2:	46bd      	mov	sp, r7
 8041ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8041ef8:	4770      	bx	lr
 8041efa:	bf00      	nop
 8041efc:	40021000 	.word	0x40021000
 8041f00:	08044940 	.word	0x08044940
 8041f04:	00f42400 	.word	0x00f42400

08041f08 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8041f08:	b580      	push	{r7, lr}
 8041f0a:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 8041f0c:	f7ff ff60 	bl	8041dd0 <HAL_RCC_GetSysClockFreq>
 8041f10:	4602      	mov	r2, r0
 8041f12:	4b05      	ldr	r3, [pc, #20]	; (8041f28 <HAL_RCC_GetHCLKFreq+0x20>)
 8041f14:	689b      	ldr	r3, [r3, #8]
 8041f16:	091b      	lsrs	r3, r3, #4
 8041f18:	f003 030f 	and.w	r3, r3, #15
 8041f1c:	4903      	ldr	r1, [pc, #12]	; (8041f2c <HAL_RCC_GetHCLKFreq+0x24>)
 8041f1e:	5ccb      	ldrb	r3, [r1, r3]
 8041f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041f24:	4618      	mov	r0, r3
 8041f26:	bd80      	pop	{r7, pc}
 8041f28:	40021000 	.word	0x40021000
 8041f2c:	08044928 	.word	0x08044928

08041f30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8041f30:	b580      	push	{r7, lr}
 8041f32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8041f34:	f7ff ffe8 	bl	8041f08 <HAL_RCC_GetHCLKFreq>
 8041f38:	4602      	mov	r2, r0
 8041f3a:	4b05      	ldr	r3, [pc, #20]	; (8041f50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8041f3c:	689b      	ldr	r3, [r3, #8]
 8041f3e:	0a1b      	lsrs	r3, r3, #8
 8041f40:	f003 0307 	and.w	r3, r3, #7
 8041f44:	4903      	ldr	r1, [pc, #12]	; (8041f54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8041f46:	5ccb      	ldrb	r3, [r1, r3]
 8041f48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041f4c:	4618      	mov	r0, r3
 8041f4e:	bd80      	pop	{r7, pc}
 8041f50:	40021000 	.word	0x40021000
 8041f54:	08044938 	.word	0x08044938

08041f58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8041f58:	b580      	push	{r7, lr}
 8041f5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8041f5c:	f7ff ffd4 	bl	8041f08 <HAL_RCC_GetHCLKFreq>
 8041f60:	4602      	mov	r2, r0
 8041f62:	4b05      	ldr	r3, [pc, #20]	; (8041f78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8041f64:	689b      	ldr	r3, [r3, #8]
 8041f66:	0adb      	lsrs	r3, r3, #11
 8041f68:	f003 0307 	and.w	r3, r3, #7
 8041f6c:	4903      	ldr	r1, [pc, #12]	; (8041f7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8041f6e:	5ccb      	ldrb	r3, [r1, r3]
 8041f70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8041f74:	4618      	mov	r0, r3
 8041f76:	bd80      	pop	{r7, pc}
 8041f78:	40021000 	.word	0x40021000
 8041f7c:	08044938 	.word	0x08044938

08041f80 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8041f80:	b580      	push	{r7, lr}
 8041f82:	b086      	sub	sp, #24
 8041f84:	af00      	add	r7, sp, #0
 8041f86:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8041f88:	2300      	movs	r3, #0
 8041f8a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 8041f8c:	4b2c      	ldr	r3, [pc, #176]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041f90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041f94:	2b00      	cmp	r3, #0
 8041f96:	d003      	beq.n	8041fa0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8041f98:	f7ff f87e 	bl	8041098 <HAL_PWREx_GetVoltageRange>
 8041f9c:	6138      	str	r0, [r7, #16]
 8041f9e:	e014      	b.n	8041fca <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8041fa0:	4b27      	ldr	r3, [pc, #156]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041fa4:	4a26      	ldr	r2, [pc, #152]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8041faa:	6593      	str	r3, [r2, #88]	; 0x58
 8041fac:	4b24      	ldr	r3, [pc, #144]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8041fb4:	60fb      	str	r3, [r7, #12]
 8041fb6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8041fb8:	f7ff f86e 	bl	8041098 <HAL_PWREx_GetVoltageRange>
 8041fbc:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 8041fbe:	4b20      	ldr	r3, [pc, #128]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8041fc2:	4a1f      	ldr	r2, [pc, #124]	; (8042040 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 8041fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8041fc8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 8041fca:	693b      	ldr	r3, [r7, #16]
 8041fcc:	2b00      	cmp	r3, #0
 8041fce:	d003      	beq.n	8041fd8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 8041fd0:	693b      	ldr	r3, [r7, #16]
 8041fd2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8041fd6:	d10b      	bne.n	8041ff0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 8041fd8:	687b      	ldr	r3, [r7, #4]
 8041fda:	2b80      	cmp	r3, #128	; 0x80
 8041fdc:	d919      	bls.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 8041fde:	687b      	ldr	r3, [r7, #4]
 8041fe0:	2ba0      	cmp	r3, #160	; 0xa0
 8041fe2:	d902      	bls.n	8041fea <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8041fe4:	2302      	movs	r3, #2
 8041fe6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041fe8:	e013      	b.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8041fea:	2301      	movs	r3, #1
 8041fec:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 8041fee:	e010      	b.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 8041ff0:	687b      	ldr	r3, [r7, #4]
 8041ff2:	2b80      	cmp	r3, #128	; 0x80
 8041ff4:	d902      	bls.n	8041ffc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8041ff6:	2303      	movs	r3, #3
 8041ff8:	617b      	str	r3, [r7, #20]
 8041ffa:	e00a      	b.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 8041ffc:	687b      	ldr	r3, [r7, #4]
 8041ffe:	2b80      	cmp	r3, #128	; 0x80
 8042000:	d102      	bne.n	8042008 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8042002:	2302      	movs	r3, #2
 8042004:	617b      	str	r3, [r7, #20]
 8042006:	e004      	b.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 8042008:	687b      	ldr	r3, [r7, #4]
 804200a:	2b70      	cmp	r3, #112	; 0x70
 804200c:	d101      	bne.n	8042012 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 804200e:	2301      	movs	r3, #1
 8042010:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8042012:	4b0c      	ldr	r3, [pc, #48]	; (8042044 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8042014:	681b      	ldr	r3, [r3, #0]
 8042016:	f023 020f 	bic.w	r2, r3, #15
 804201a:	490a      	ldr	r1, [pc, #40]	; (8042044 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 804201c:	697b      	ldr	r3, [r7, #20]
 804201e:	4313      	orrs	r3, r2
 8042020:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8042022:	4b08      	ldr	r3, [pc, #32]	; (8042044 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 8042024:	681b      	ldr	r3, [r3, #0]
 8042026:	f003 030f 	and.w	r3, r3, #15
 804202a:	697a      	ldr	r2, [r7, #20]
 804202c:	429a      	cmp	r2, r3
 804202e:	d001      	beq.n	8042034 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 8042030:	2301      	movs	r3, #1
 8042032:	e000      	b.n	8042036 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 8042034:	2300      	movs	r3, #0
}
 8042036:	4618      	mov	r0, r3
 8042038:	3718      	adds	r7, #24
 804203a:	46bd      	mov	sp, r7
 804203c:	bd80      	pop	{r7, pc}
 804203e:	bf00      	nop
 8042040:	40021000 	.word	0x40021000
 8042044:	40022000 	.word	0x40022000

08042048 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8042048:	b480      	push	{r7}
 804204a:	b087      	sub	sp, #28
 804204c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 804204e:	4b31      	ldr	r3, [pc, #196]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8042050:	68db      	ldr	r3, [r3, #12]
 8042052:	f003 0303 	and.w	r3, r3, #3
 8042056:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8042058:	4b2e      	ldr	r3, [pc, #184]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 804205a:	68db      	ldr	r3, [r3, #12]
 804205c:	091b      	lsrs	r3, r3, #4
 804205e:	f003 030f 	and.w	r3, r3, #15
 8042062:	3301      	adds	r3, #1
 8042064:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 8042066:	68fb      	ldr	r3, [r7, #12]
 8042068:	2b03      	cmp	r3, #3
 804206a:	d015      	beq.n	8042098 <RCC_GetSysClockFreqFromPLLSource+0x50>
 804206c:	68fb      	ldr	r3, [r7, #12]
 804206e:	2b03      	cmp	r3, #3
 8042070:	d839      	bhi.n	80420e6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 8042072:	68fb      	ldr	r3, [r7, #12]
 8042074:	2b01      	cmp	r3, #1
 8042076:	d01c      	beq.n	80420b2 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 8042078:	68fb      	ldr	r3, [r7, #12]
 804207a:	2b02      	cmp	r3, #2
 804207c:	d133      	bne.n	80420e6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 804207e:	4a26      	ldr	r2, [pc, #152]	; (8042118 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 8042080:	68bb      	ldr	r3, [r7, #8]
 8042082:	fbb2 f3f3 	udiv	r3, r2, r3
 8042086:	4a23      	ldr	r2, [pc, #140]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 8042088:	68d2      	ldr	r2, [r2, #12]
 804208a:	0a12      	lsrs	r2, r2, #8
 804208c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8042090:	fb02 f303 	mul.w	r3, r2, r3
 8042094:	613b      	str	r3, [r7, #16]
      break;
 8042096:	e029      	b.n	80420ec <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8042098:	4a1f      	ldr	r2, [pc, #124]	; (8042118 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 804209a:	68bb      	ldr	r3, [r7, #8]
 804209c:	fbb2 f3f3 	udiv	r3, r2, r3
 80420a0:	4a1c      	ldr	r2, [pc, #112]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80420a2:	68d2      	ldr	r2, [r2, #12]
 80420a4:	0a12      	lsrs	r2, r2, #8
 80420a6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80420aa:	fb02 f303 	mul.w	r3, r2, r3
 80420ae:	613b      	str	r3, [r7, #16]
      break;
 80420b0:	e01c      	b.n	80420ec <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80420b2:	4b18      	ldr	r3, [pc, #96]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80420b4:	681b      	ldr	r3, [r3, #0]
 80420b6:	f003 0308 	and.w	r3, r3, #8
 80420ba:	2b00      	cmp	r3, #0
 80420bc:	d107      	bne.n	80420ce <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80420be:	4b15      	ldr	r3, [pc, #84]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80420c0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80420c4:	0a1b      	lsrs	r3, r3, #8
 80420c6:	f003 030f 	and.w	r3, r3, #15
 80420ca:	617b      	str	r3, [r7, #20]
 80420cc:	e005      	b.n	80420da <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80420ce:	4b11      	ldr	r3, [pc, #68]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80420d0:	681b      	ldr	r3, [r3, #0]
 80420d2:	091b      	lsrs	r3, r3, #4
 80420d4:	f003 030f 	and.w	r3, r3, #15
 80420d8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 80420da:	4a10      	ldr	r2, [pc, #64]	; (804211c <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 80420dc:	697b      	ldr	r3, [r7, #20]
 80420de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80420e2:	613b      	str	r3, [r7, #16]
        break;
 80420e4:	e002      	b.n	80420ec <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 80420e6:	2300      	movs	r3, #0
 80420e8:	613b      	str	r3, [r7, #16]
      break;
 80420ea:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 80420ec:	4b09      	ldr	r3, [pc, #36]	; (8042114 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 80420ee:	68db      	ldr	r3, [r3, #12]
 80420f0:	0e5b      	lsrs	r3, r3, #25
 80420f2:	f003 0303 	and.w	r3, r3, #3
 80420f6:	3301      	adds	r3, #1
 80420f8:	005b      	lsls	r3, r3, #1
 80420fa:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80420fc:	693a      	ldr	r2, [r7, #16]
 80420fe:	687b      	ldr	r3, [r7, #4]
 8042100:	fbb2 f3f3 	udiv	r3, r2, r3
 8042104:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8042106:	683b      	ldr	r3, [r7, #0]
}
 8042108:	4618      	mov	r0, r3
 804210a:	371c      	adds	r7, #28
 804210c:	46bd      	mov	sp, r7
 804210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8042112:	4770      	bx	lr
 8042114:	40021000 	.word	0x40021000
 8042118:	00f42400 	.word	0x00f42400
 804211c:	08044940 	.word	0x08044940

08042120 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8042120:	b580      	push	{r7, lr}
 8042122:	b088      	sub	sp, #32
 8042124:	af00      	add	r7, sp, #0
 8042126:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8042128:	2300      	movs	r3, #0
 804212a:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 804212c:	2300      	movs	r3, #0
 804212e:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8042130:	687b      	ldr	r3, [r7, #4]
 8042132:	681b      	ldr	r3, [r3, #0]
 8042134:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8042138:	2b00      	cmp	r3, #0
 804213a:	d040      	beq.n	80421be <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 804213c:	687b      	ldr	r3, [r7, #4]
 804213e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8042140:	2b80      	cmp	r3, #128	; 0x80
 8042142:	d02a      	beq.n	804219a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8042144:	2b80      	cmp	r3, #128	; 0x80
 8042146:	d825      	bhi.n	8042194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8042148:	2b60      	cmp	r3, #96	; 0x60
 804214a:	d026      	beq.n	804219a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 804214c:	2b60      	cmp	r3, #96	; 0x60
 804214e:	d821      	bhi.n	8042194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8042150:	2b40      	cmp	r3, #64	; 0x40
 8042152:	d006      	beq.n	8042162 <HAL_RCCEx_PeriphCLKConfig+0x42>
 8042154:	2b40      	cmp	r3, #64	; 0x40
 8042156:	d81d      	bhi.n	8042194 <HAL_RCCEx_PeriphCLKConfig+0x74>
 8042158:	2b00      	cmp	r3, #0
 804215a:	d009      	beq.n	8042170 <HAL_RCCEx_PeriphCLKConfig+0x50>
 804215c:	2b20      	cmp	r3, #32
 804215e:	d010      	beq.n	8042182 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8042160:	e018      	b.n	8042194 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8042162:	4b8f      	ldr	r3, [pc, #572]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042164:	68db      	ldr	r3, [r3, #12]
 8042166:	4a8e      	ldr	r2, [pc, #568]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042168:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 804216c:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 804216e:	e015      	b.n	804219c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8042170:	687b      	ldr	r3, [r7, #4]
 8042172:	3304      	adds	r3, #4
 8042174:	2100      	movs	r1, #0
 8042176:	4618      	mov	r0, r3
 8042178:	f000 fb56 	bl	8042828 <RCCEx_PLLSAI1_Config>
 804217c:	4603      	mov	r3, r0
 804217e:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8042180:	e00c      	b.n	804219c <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8042182:	687b      	ldr	r3, [r7, #4]
 8042184:	3320      	adds	r3, #32
 8042186:	2100      	movs	r1, #0
 8042188:	4618      	mov	r0, r3
 804218a:	f000 fc33 	bl	80429f4 <RCCEx_PLLSAI2_Config>
 804218e:	4603      	mov	r3, r0
 8042190:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 8042192:	e003      	b.n	804219c <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042194:	2301      	movs	r3, #1
 8042196:	77fb      	strb	r3, [r7, #31]
        break;
 8042198:	e000      	b.n	804219c <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 804219a:	bf00      	nop
    }

    if (ret == HAL_OK)
 804219c:	7ffb      	ldrb	r3, [r7, #31]
 804219e:	2b00      	cmp	r3, #0
 80421a0:	d10b      	bne.n	80421ba <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80421a2:	4b7f      	ldr	r3, [pc, #508]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80421a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80421a8:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 80421ac:	687b      	ldr	r3, [r7, #4]
 80421ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80421b0:	497b      	ldr	r1, [pc, #492]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80421b2:	4313      	orrs	r3, r2
 80421b4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80421b8:	e001      	b.n	80421be <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80421ba:	7ffb      	ldrb	r3, [r7, #31]
 80421bc:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80421be:	687b      	ldr	r3, [r7, #4]
 80421c0:	681b      	ldr	r3, [r3, #0]
 80421c2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80421c6:	2b00      	cmp	r3, #0
 80421c8:	d047      	beq.n	804225a <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 80421ca:	687b      	ldr	r3, [r7, #4]
 80421cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80421ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80421d2:	d030      	beq.n	8042236 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80421d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80421d8:	d82a      	bhi.n	8042230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80421da:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80421de:	d02a      	beq.n	8042236 <HAL_RCCEx_PeriphCLKConfig+0x116>
 80421e0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80421e4:	d824      	bhi.n	8042230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80421e6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80421ea:	d008      	beq.n	80421fe <HAL_RCCEx_PeriphCLKConfig+0xde>
 80421ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80421f0:	d81e      	bhi.n	8042230 <HAL_RCCEx_PeriphCLKConfig+0x110>
 80421f2:	2b00      	cmp	r3, #0
 80421f4:	d00a      	beq.n	804220c <HAL_RCCEx_PeriphCLKConfig+0xec>
 80421f6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80421fa:	d010      	beq.n	804221e <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80421fc:	e018      	b.n	8042230 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80421fe:	4b68      	ldr	r3, [pc, #416]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042200:	68db      	ldr	r3, [r3, #12]
 8042202:	4a67      	ldr	r2, [pc, #412]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042204:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042208:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804220a:	e015      	b.n	8042238 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 804220c:	687b      	ldr	r3, [r7, #4]
 804220e:	3304      	adds	r3, #4
 8042210:	2100      	movs	r1, #0
 8042212:	4618      	mov	r0, r3
 8042214:	f000 fb08 	bl	8042828 <RCCEx_PLLSAI1_Config>
 8042218:	4603      	mov	r3, r0
 804221a:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804221c:	e00c      	b.n	8042238 <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 804221e:	687b      	ldr	r3, [r7, #4]
 8042220:	3320      	adds	r3, #32
 8042222:	2100      	movs	r1, #0
 8042224:	4618      	mov	r0, r3
 8042226:	f000 fbe5 	bl	80429f4 <RCCEx_PLLSAI2_Config>
 804222a:	4603      	mov	r3, r0
 804222c:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 804222e:	e003      	b.n	8042238 <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8042230:	2301      	movs	r3, #1
 8042232:	77fb      	strb	r3, [r7, #31]
        break;
 8042234:	e000      	b.n	8042238 <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 8042236:	bf00      	nop
    }

    if (ret == HAL_OK)
 8042238:	7ffb      	ldrb	r3, [r7, #31]
 804223a:	2b00      	cmp	r3, #0
 804223c:	d10b      	bne.n	8042256 <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 804223e:	4b58      	ldr	r3, [pc, #352]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042240:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042244:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8042248:	687b      	ldr	r3, [r7, #4]
 804224a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 804224c:	4954      	ldr	r1, [pc, #336]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804224e:	4313      	orrs	r3, r2
 8042250:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8042254:	e001      	b.n	804225a <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8042256:	7ffb      	ldrb	r3, [r7, #31]
 8042258:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 804225a:	687b      	ldr	r3, [r7, #4]
 804225c:	681b      	ldr	r3, [r3, #0]
 804225e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8042262:	2b00      	cmp	r3, #0
 8042264:	f000 80ab 	beq.w	80423be <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8042268:	2300      	movs	r3, #0
 804226a:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 804226c:	4b4c      	ldr	r3, [pc, #304]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8042274:	2b00      	cmp	r3, #0
 8042276:	d10d      	bne.n	8042294 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8042278:	4b49      	ldr	r3, [pc, #292]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804227a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 804227c:	4a48      	ldr	r2, [pc, #288]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804227e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042282:	6593      	str	r3, [r2, #88]	; 0x58
 8042284:	4b46      	ldr	r3, [pc, #280]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8042288:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 804228c:	60fb      	str	r3, [r7, #12]
 804228e:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8042290:	2301      	movs	r3, #1
 8042292:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8042294:	4b43      	ldr	r3, [pc, #268]	; (80423a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 8042296:	681b      	ldr	r3, [r3, #0]
 8042298:	4a42      	ldr	r2, [pc, #264]	; (80423a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 804229a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 804229e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80422a0:	f7fe fc72 	bl	8040b88 <HAL_GetTick>
 80422a4:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80422a6:	e00f      	b.n	80422c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80422a8:	f7fe fc6e 	bl	8040b88 <HAL_GetTick>
 80422ac:	4602      	mov	r2, r0
 80422ae:	693b      	ldr	r3, [r7, #16]
 80422b0:	1ad3      	subs	r3, r2, r3
 80422b2:	2b02      	cmp	r3, #2
 80422b4:	d908      	bls.n	80422c8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80422b6:	4b3b      	ldr	r3, [pc, #236]	; (80423a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80422b8:	681b      	ldr	r3, [r3, #0]
 80422ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80422be:	2b00      	cmp	r3, #0
 80422c0:	d109      	bne.n	80422d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 80422c2:	2303      	movs	r3, #3
 80422c4:	77fb      	strb	r3, [r7, #31]
        }
        break;
 80422c6:	e006      	b.n	80422d6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80422c8:	4b36      	ldr	r3, [pc, #216]	; (80423a4 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 80422ca:	681b      	ldr	r3, [r3, #0]
 80422cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80422d0:	2b00      	cmp	r3, #0
 80422d2:	d0e9      	beq.n	80422a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 80422d4:	e000      	b.n	80422d8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 80422d6:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 80422d8:	7ffb      	ldrb	r3, [r7, #31]
 80422da:	2b00      	cmp	r3, #0
 80422dc:	d164      	bne.n	80423a8 <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80422de:	4b30      	ldr	r3, [pc, #192]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80422e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80422e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80422e8:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80422ea:	69bb      	ldr	r3, [r7, #24]
 80422ec:	2b00      	cmp	r3, #0
 80422ee:	d01f      	beq.n	8042330 <HAL_RCCEx_PeriphCLKConfig+0x210>
 80422f0:	687b      	ldr	r3, [r7, #4]
 80422f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80422f6:	69ba      	ldr	r2, [r7, #24]
 80422f8:	429a      	cmp	r2, r3
 80422fa:	d019      	beq.n	8042330 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80422fc:	4b28      	ldr	r3, [pc, #160]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 80422fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042302:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8042306:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8042308:	4b25      	ldr	r3, [pc, #148]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804230a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804230e:	4a24      	ldr	r2, [pc, #144]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8042314:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8042318:	4b21      	ldr	r3, [pc, #132]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804231a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804231e:	4a20      	ldr	r2, [pc, #128]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042320:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8042324:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8042328:	4a1d      	ldr	r2, [pc, #116]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804232a:	69bb      	ldr	r3, [r7, #24]
 804232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8042330:	69bb      	ldr	r3, [r7, #24]
 8042332:	f003 0301 	and.w	r3, r3, #1
 8042336:	2b00      	cmp	r3, #0
 8042338:	d01f      	beq.n	804237a <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 804233a:	f7fe fc25 	bl	8040b88 <HAL_GetTick>
 804233e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042340:	e012      	b.n	8042368 <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8042342:	f7fe fc21 	bl	8040b88 <HAL_GetTick>
 8042346:	4602      	mov	r2, r0
 8042348:	693b      	ldr	r3, [r7, #16]
 804234a:	1ad3      	subs	r3, r2, r3
 804234c:	f241 3288 	movw	r2, #5000	; 0x1388
 8042350:	4293      	cmp	r3, r2
 8042352:	d909      	bls.n	8042368 <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042354:	4b12      	ldr	r3, [pc, #72]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804235a:	f003 0302 	and.w	r3, r3, #2
 804235e:	2b00      	cmp	r3, #0
 8042360:	d10a      	bne.n	8042378 <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 8042362:	2303      	movs	r3, #3
 8042364:	77fb      	strb	r3, [r7, #31]
            }
            break;
 8042366:	e007      	b.n	8042378 <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8042368:	4b0d      	ldr	r3, [pc, #52]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 804236a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 804236e:	f003 0302 	and.w	r3, r3, #2
 8042372:	2b00      	cmp	r3, #0
 8042374:	d0e5      	beq.n	8042342 <HAL_RCCEx_PeriphCLKConfig+0x222>
 8042376:	e000      	b.n	804237a <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 8042378:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 804237a:	7ffb      	ldrb	r3, [r7, #31]
 804237c:	2b00      	cmp	r3, #0
 804237e:	d10c      	bne.n	804239a <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8042380:	4b07      	ldr	r3, [pc, #28]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042382:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042386:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804238a:	687b      	ldr	r3, [r7, #4]
 804238c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8042390:	4903      	ldr	r1, [pc, #12]	; (80423a0 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 8042392:	4313      	orrs	r3, r2
 8042394:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8042398:	e008      	b.n	80423ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 804239a:	7ffb      	ldrb	r3, [r7, #31]
 804239c:	77bb      	strb	r3, [r7, #30]
 804239e:	e005      	b.n	80423ac <HAL_RCCEx_PeriphCLKConfig+0x28c>
 80423a0:	40021000 	.word	0x40021000
 80423a4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80423a8:	7ffb      	ldrb	r3, [r7, #31]
 80423aa:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80423ac:	7dfb      	ldrb	r3, [r7, #23]
 80423ae:	2b01      	cmp	r3, #1
 80423b0:	d105      	bne.n	80423be <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80423b2:	4b9c      	ldr	r3, [pc, #624]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80423b6:	4a9b      	ldr	r2, [pc, #620]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423b8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80423bc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80423be:	687b      	ldr	r3, [r7, #4]
 80423c0:	681b      	ldr	r3, [r3, #0]
 80423c2:	f003 0301 	and.w	r3, r3, #1
 80423c6:	2b00      	cmp	r3, #0
 80423c8:	d00a      	beq.n	80423e0 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80423ca:	4b96      	ldr	r3, [pc, #600]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80423d0:	f023 0203 	bic.w	r2, r3, #3
 80423d4:	687b      	ldr	r3, [r7, #4]
 80423d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80423d8:	4992      	ldr	r1, [pc, #584]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423da:	4313      	orrs	r3, r2
 80423dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80423e0:	687b      	ldr	r3, [r7, #4]
 80423e2:	681b      	ldr	r3, [r3, #0]
 80423e4:	f003 0302 	and.w	r3, r3, #2
 80423e8:	2b00      	cmp	r3, #0
 80423ea:	d00a      	beq.n	8042402 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80423ec:	4b8d      	ldr	r3, [pc, #564]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80423f2:	f023 020c 	bic.w	r2, r3, #12
 80423f6:	687b      	ldr	r3, [r7, #4]
 80423f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80423fa:	498a      	ldr	r1, [pc, #552]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80423fc:	4313      	orrs	r3, r2
 80423fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8042402:	687b      	ldr	r3, [r7, #4]
 8042404:	681b      	ldr	r3, [r3, #0]
 8042406:	f003 0304 	and.w	r3, r3, #4
 804240a:	2b00      	cmp	r3, #0
 804240c:	d00a      	beq.n	8042424 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 804240e:	4b85      	ldr	r3, [pc, #532]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042410:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042414:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8042418:	687b      	ldr	r3, [r7, #4]
 804241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 804241c:	4981      	ldr	r1, [pc, #516]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804241e:	4313      	orrs	r3, r2
 8042420:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8042424:	687b      	ldr	r3, [r7, #4]
 8042426:	681b      	ldr	r3, [r3, #0]
 8042428:	f003 0308 	and.w	r3, r3, #8
 804242c:	2b00      	cmp	r3, #0
 804242e:	d00a      	beq.n	8042446 <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8042430:	4b7c      	ldr	r3, [pc, #496]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042432:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042436:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 804243a:	687b      	ldr	r3, [r7, #4]
 804243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 804243e:	4979      	ldr	r1, [pc, #484]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042440:	4313      	orrs	r3, r2
 8042442:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8042446:	687b      	ldr	r3, [r7, #4]
 8042448:	681b      	ldr	r3, [r3, #0]
 804244a:	f003 0310 	and.w	r3, r3, #16
 804244e:	2b00      	cmp	r3, #0
 8042450:	d00a      	beq.n	8042468 <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8042452:	4b74      	ldr	r3, [pc, #464]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042454:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042458:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 804245c:	687b      	ldr	r3, [r7, #4]
 804245e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8042460:	4970      	ldr	r1, [pc, #448]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042462:	4313      	orrs	r3, r2
 8042464:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8042468:	687b      	ldr	r3, [r7, #4]
 804246a:	681b      	ldr	r3, [r3, #0]
 804246c:	f003 0320 	and.w	r3, r3, #32
 8042470:	2b00      	cmp	r3, #0
 8042472:	d00a      	beq.n	804248a <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8042474:	4b6b      	ldr	r3, [pc, #428]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042476:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804247a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 804247e:	687b      	ldr	r3, [r7, #4]
 8042480:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8042482:	4968      	ldr	r1, [pc, #416]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042484:	4313      	orrs	r3, r2
 8042486:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 804248a:	687b      	ldr	r3, [r7, #4]
 804248c:	681b      	ldr	r3, [r3, #0]
 804248e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8042492:	2b00      	cmp	r3, #0
 8042494:	d00a      	beq.n	80424ac <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8042496:	4b63      	ldr	r3, [pc, #396]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804249c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80424a0:	687b      	ldr	r3, [r7, #4]
 80424a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80424a4:	495f      	ldr	r1, [pc, #380]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80424a6:	4313      	orrs	r3, r2
 80424a8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80424ac:	687b      	ldr	r3, [r7, #4]
 80424ae:	681b      	ldr	r3, [r3, #0]
 80424b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80424b4:	2b00      	cmp	r3, #0
 80424b6:	d00a      	beq.n	80424ce <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80424b8:	4b5a      	ldr	r3, [pc, #360]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80424ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424be:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80424c2:	687b      	ldr	r3, [r7, #4]
 80424c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80424c6:	4957      	ldr	r1, [pc, #348]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80424c8:	4313      	orrs	r3, r2
 80424ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 80424ce:	687b      	ldr	r3, [r7, #4]
 80424d0:	681b      	ldr	r3, [r3, #0]
 80424d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80424d6:	2b00      	cmp	r3, #0
 80424d8:	d00a      	beq.n	80424f0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 80424da:	4b52      	ldr	r3, [pc, #328]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80424dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80424e0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80424e4:	687b      	ldr	r3, [r7, #4]
 80424e6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80424e8:	494e      	ldr	r1, [pc, #312]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80424ea:	4313      	orrs	r3, r2
 80424ec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 80424f0:	687b      	ldr	r3, [r7, #4]
 80424f2:	681b      	ldr	r3, [r3, #0]
 80424f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80424f8:	2b00      	cmp	r3, #0
 80424fa:	d031      	beq.n	8042560 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 80424fc:	687b      	ldr	r3, [r7, #4]
 80424fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042500:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8042504:	d00e      	beq.n	8042524 <HAL_RCCEx_PeriphCLKConfig+0x404>
 8042506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 804250a:	d814      	bhi.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x416>
 804250c:	2b00      	cmp	r3, #0
 804250e:	d015      	beq.n	804253c <HAL_RCCEx_PeriphCLKConfig+0x41c>
 8042510:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8042514:	d10f      	bne.n	8042536 <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042516:	4b43      	ldr	r3, [pc, #268]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042518:	68db      	ldr	r3, [r3, #12]
 804251a:	4a42      	ldr	r2, [pc, #264]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804251c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042520:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042522:	e00c      	b.n	804253e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8042524:	687b      	ldr	r3, [r7, #4]
 8042526:	3304      	adds	r3, #4
 8042528:	2100      	movs	r1, #0
 804252a:	4618      	mov	r0, r3
 804252c:	f000 f97c 	bl	8042828 <RCCEx_PLLSAI1_Config>
 8042530:	4603      	mov	r3, r0
 8042532:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 8042534:	e003      	b.n	804253e <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 8042536:	2301      	movs	r3, #1
 8042538:	77fb      	strb	r3, [r7, #31]
        break;
 804253a:	e000      	b.n	804253e <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 804253c:	bf00      	nop
    }

    if (ret == HAL_OK)
 804253e:	7ffb      	ldrb	r3, [r7, #31]
 8042540:	2b00      	cmp	r3, #0
 8042542:	d10b      	bne.n	804255c <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8042544:	4b37      	ldr	r3, [pc, #220]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804254a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 804254e:	687b      	ldr	r3, [r7, #4]
 8042550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8042552:	4934      	ldr	r1, [pc, #208]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042554:	4313      	orrs	r3, r2
 8042556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804255a:	e001      	b.n	8042560 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 804255c:	7ffb      	ldrb	r3, [r7, #31]
 804255e:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8042560:	687b      	ldr	r3, [r7, #4]
 8042562:	681b      	ldr	r3, [r3, #0]
 8042564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8042568:	2b00      	cmp	r3, #0
 804256a:	d00a      	beq.n	8042582 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 804256c:	4b2d      	ldr	r3, [pc, #180]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804256e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042572:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8042576:	687b      	ldr	r3, [r7, #4]
 8042578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 804257a:	492a      	ldr	r1, [pc, #168]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804257c:	4313      	orrs	r3, r2
 804257e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8042582:	687b      	ldr	r3, [r7, #4]
 8042584:	681b      	ldr	r3, [r3, #0]
 8042586:	f003 0380 	and.w	r3, r3, #128	; 0x80
 804258a:	2b00      	cmp	r3, #0
 804258c:	d00a      	beq.n	80425a4 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 804258e:	4b25      	ldr	r3, [pc, #148]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042594:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8042598:	687b      	ldr	r3, [r7, #4]
 804259a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 804259c:	4921      	ldr	r1, [pc, #132]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804259e:	4313      	orrs	r3, r2
 80425a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80425a4:	687b      	ldr	r3, [r7, #4]
 80425a6:	681b      	ldr	r3, [r3, #0]
 80425a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80425ac:	2b00      	cmp	r3, #0
 80425ae:	d00a      	beq.n	80425c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80425b0:	4b1c      	ldr	r3, [pc, #112]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80425b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425b6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80425ba:	687b      	ldr	r3, [r7, #4]
 80425bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80425be:	4919      	ldr	r1, [pc, #100]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80425c0:	4313      	orrs	r3, r2
 80425c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80425c6:	687b      	ldr	r3, [r7, #4]
 80425c8:	681b      	ldr	r3, [r3, #0]
 80425ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80425ce:	2b00      	cmp	r3, #0
 80425d0:	d00a      	beq.n	80425e8 <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80425d2:	4b14      	ldr	r3, [pc, #80]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80425d4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80425d8:	f023 0203 	bic.w	r2, r3, #3
 80425dc:	687b      	ldr	r3, [r7, #4]
 80425de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80425e0:	4910      	ldr	r1, [pc, #64]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80425e2:	4313      	orrs	r3, r2
 80425e4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80425e8:	687b      	ldr	r3, [r7, #4]
 80425ea:	681b      	ldr	r3, [r3, #0]
 80425ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80425f0:	2b00      	cmp	r3, #0
 80425f2:	d02b      	beq.n	804264c <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80425f4:	4b0b      	ldr	r3, [pc, #44]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 80425f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80425fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80425fe:	687b      	ldr	r3, [r7, #4]
 8042600:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8042602:	4908      	ldr	r1, [pc, #32]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042604:	4313      	orrs	r3, r2
 8042606:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 804260a:	687b      	ldr	r3, [r7, #4]
 804260c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804260e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042612:	d109      	bne.n	8042628 <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8042614:	4b03      	ldr	r3, [pc, #12]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 8042616:	68db      	ldr	r3, [r3, #12]
 8042618:	4a02      	ldr	r2, [pc, #8]	; (8042624 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 804261a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 804261e:	60d3      	str	r3, [r2, #12]
 8042620:	e014      	b.n	804264c <HAL_RCCEx_PeriphCLKConfig+0x52c>
 8042622:	bf00      	nop
 8042624:	40021000 	.word	0x40021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8042628:	687b      	ldr	r3, [r7, #4]
 804262a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 804262c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042630:	d10c      	bne.n	804264c <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042632:	687b      	ldr	r3, [r7, #4]
 8042634:	3304      	adds	r3, #4
 8042636:	2101      	movs	r1, #1
 8042638:	4618      	mov	r0, r3
 804263a:	f000 f8f5 	bl	8042828 <RCCEx_PLLSAI1_Config>
 804263e:	4603      	mov	r3, r0
 8042640:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 8042642:	7ffb      	ldrb	r3, [r7, #31]
 8042644:	2b00      	cmp	r3, #0
 8042646:	d001      	beq.n	804264c <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 8042648:	7ffb      	ldrb	r3, [r7, #31]
 804264a:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 804264c:	687b      	ldr	r3, [r7, #4]
 804264e:	681b      	ldr	r3, [r3, #0]
 8042650:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8042654:	2b00      	cmp	r3, #0
 8042656:	d04a      	beq.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8042658:	687b      	ldr	r3, [r7, #4]
 804265a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804265c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8042660:	d108      	bne.n	8042674 <HAL_RCCEx_PeriphCLKConfig+0x554>
 8042662:	4b70      	ldr	r3, [pc, #448]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042664:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042668:	4a6e      	ldr	r2, [pc, #440]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804266a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 804266e:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8042672:	e012      	b.n	804269a <HAL_RCCEx_PeriphCLKConfig+0x57a>
 8042674:	4b6b      	ldr	r3, [pc, #428]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042676:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804267a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 804267e:	687b      	ldr	r3, [r7, #4]
 8042680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8042682:	4968      	ldr	r1, [pc, #416]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042684:	4313      	orrs	r3, r2
 8042686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 804268a:	4b66      	ldr	r3, [pc, #408]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804268c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8042690:	4a64      	ldr	r2, [pc, #400]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042692:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8042696:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 804269a:	687b      	ldr	r3, [r7, #4]
 804269c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 804269e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80426a2:	d10d      	bne.n	80426c0 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80426a4:	687b      	ldr	r3, [r7, #4]
 80426a6:	3304      	adds	r3, #4
 80426a8:	2101      	movs	r1, #1
 80426aa:	4618      	mov	r0, r3
 80426ac:	f000 f8bc 	bl	8042828 <RCCEx_PLLSAI1_Config>
 80426b0:	4603      	mov	r3, r0
 80426b2:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 80426b4:	7ffb      	ldrb	r3, [r7, #31]
 80426b6:	2b00      	cmp	r3, #0
 80426b8:	d019      	beq.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 80426ba:	7ffb      	ldrb	r3, [r7, #31]
 80426bc:	77bb      	strb	r3, [r7, #30]
 80426be:	e016      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 80426c0:	687b      	ldr	r3, [r7, #4]
 80426c2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80426c4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80426c8:	d106      	bne.n	80426d8 <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80426ca:	4b56      	ldr	r3, [pc, #344]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80426cc:	68db      	ldr	r3, [r3, #12]
 80426ce:	4a55      	ldr	r2, [pc, #340]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80426d0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80426d4:	60d3      	str	r3, [r2, #12]
 80426d6:	e00a      	b.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 80426d8:	687b      	ldr	r3, [r7, #4]
 80426da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80426dc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80426e0:	d105      	bne.n	80426ee <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80426e2:	4b50      	ldr	r3, [pc, #320]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80426e4:	68db      	ldr	r3, [r3, #12]
 80426e6:	4a4f      	ldr	r2, [pc, #316]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80426e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80426ec:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80426ee:	687b      	ldr	r3, [r7, #4]
 80426f0:	681b      	ldr	r3, [r3, #0]
 80426f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80426f6:	2b00      	cmp	r3, #0
 80426f8:	d028      	beq.n	804274c <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80426fa:	4b4a      	ldr	r3, [pc, #296]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80426fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042700:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8042704:	687b      	ldr	r3, [r7, #4]
 8042706:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042708:	4946      	ldr	r1, [pc, #280]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804270a:	4313      	orrs	r3, r2
 804270c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8042710:	687b      	ldr	r3, [r7, #4]
 8042712:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8042714:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8042718:	d106      	bne.n	8042728 <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804271a:	4b42      	ldr	r3, [pc, #264]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804271c:	68db      	ldr	r3, [r3, #12]
 804271e:	4a41      	ldr	r2, [pc, #260]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042720:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042724:	60d3      	str	r3, [r2, #12]
 8042726:	e011      	b.n	804274c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8042728:	687b      	ldr	r3, [r7, #4]
 804272a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 804272c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8042730:	d10c      	bne.n	804274c <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8042732:	687b      	ldr	r3, [r7, #4]
 8042734:	3304      	adds	r3, #4
 8042736:	2101      	movs	r1, #1
 8042738:	4618      	mov	r0, r3
 804273a:	f000 f875 	bl	8042828 <RCCEx_PLLSAI1_Config>
 804273e:	4603      	mov	r3, r0
 8042740:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 8042742:	7ffb      	ldrb	r3, [r7, #31]
 8042744:	2b00      	cmp	r3, #0
 8042746:	d001      	beq.n	804274c <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 8042748:	7ffb      	ldrb	r3, [r7, #31]
 804274a:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 804274c:	687b      	ldr	r3, [r7, #4]
 804274e:	681b      	ldr	r3, [r3, #0]
 8042750:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8042754:	2b00      	cmp	r3, #0
 8042756:	d01e      	beq.n	8042796 <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8042758:	4b32      	ldr	r3, [pc, #200]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804275a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 804275e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8042762:	687b      	ldr	r3, [r7, #4]
 8042764:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042768:	492e      	ldr	r1, [pc, #184]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 804276a:	4313      	orrs	r3, r2
 804276c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8042770:	687b      	ldr	r3, [r7, #4]
 8042772:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8042776:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 804277a:	d10c      	bne.n	8042796 <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 804277c:	687b      	ldr	r3, [r7, #4]
 804277e:	3304      	adds	r3, #4
 8042780:	2102      	movs	r1, #2
 8042782:	4618      	mov	r0, r3
 8042784:	f000 f850 	bl	8042828 <RCCEx_PLLSAI1_Config>
 8042788:	4603      	mov	r3, r0
 804278a:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 804278c:	7ffb      	ldrb	r3, [r7, #31]
 804278e:	2b00      	cmp	r3, #0
 8042790:	d001      	beq.n	8042796 <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 8042792:	7ffb      	ldrb	r3, [r7, #31]
 8042794:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8042796:	687b      	ldr	r3, [r7, #4]
 8042798:	681b      	ldr	r3, [r3, #0]
 804279a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 804279e:	2b00      	cmp	r3, #0
 80427a0:	d00b      	beq.n	80427ba <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80427a2:	4b20      	ldr	r3, [pc, #128]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427a4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80427a8:	f023 0204 	bic.w	r2, r3, #4
 80427ac:	687b      	ldr	r3, [r7, #4]
 80427ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80427b2:	491c      	ldr	r1, [pc, #112]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427b4:	4313      	orrs	r3, r2
 80427b6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80427ba:	687b      	ldr	r3, [r7, #4]
 80427bc:	681b      	ldr	r3, [r3, #0]
 80427be:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80427c2:	2b00      	cmp	r3, #0
 80427c4:	d00b      	beq.n	80427de <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80427c6:	4b17      	ldr	r3, [pc, #92]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427c8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80427cc:	f023 0218 	bic.w	r2, r3, #24
 80427d0:	687b      	ldr	r3, [r7, #4]
 80427d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80427d6:	4913      	ldr	r1, [pc, #76]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427d8:	4313      	orrs	r3, r2
 80427da:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80427de:	687b      	ldr	r3, [r7, #4]
 80427e0:	681b      	ldr	r3, [r3, #0]
 80427e2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80427e6:	2b00      	cmp	r3, #0
 80427e8:	d017      	beq.n	804281a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80427ea:	4b0e      	ldr	r3, [pc, #56]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80427f0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80427f4:	687b      	ldr	r3, [r7, #4]
 80427f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80427fa:	490a      	ldr	r1, [pc, #40]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 80427fc:	4313      	orrs	r3, r2
 80427fe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8042802:	687b      	ldr	r3, [r7, #4]
 8042804:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8042808:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 804280c:	d105      	bne.n	804281a <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 804280e:	4b05      	ldr	r3, [pc, #20]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042810:	68db      	ldr	r3, [r3, #12]
 8042812:	4a04      	ldr	r2, [pc, #16]	; (8042824 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 8042814:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8042818:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 804281a:	7fbb      	ldrb	r3, [r7, #30]
}
 804281c:	4618      	mov	r0, r3
 804281e:	3720      	adds	r7, #32
 8042820:	46bd      	mov	sp, r7
 8042822:	bd80      	pop	{r7, pc}
 8042824:	40021000 	.word	0x40021000

08042828 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 8042828:	b580      	push	{r7, lr}
 804282a:	b084      	sub	sp, #16
 804282c:	af00      	add	r7, sp, #0
 804282e:	6078      	str	r0, [r7, #4]
 8042830:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8042832:	2300      	movs	r3, #0
 8042834:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 8042836:	687b      	ldr	r3, [r7, #4]
 8042838:	681b      	ldr	r3, [r3, #0]
 804283a:	2b03      	cmp	r3, #3
 804283c:	d018      	beq.n	8042870 <RCCEx_PLLSAI1_Config+0x48>
 804283e:	2b03      	cmp	r3, #3
 8042840:	d81f      	bhi.n	8042882 <RCCEx_PLLSAI1_Config+0x5a>
 8042842:	2b01      	cmp	r3, #1
 8042844:	d002      	beq.n	804284c <RCCEx_PLLSAI1_Config+0x24>
 8042846:	2b02      	cmp	r3, #2
 8042848:	d009      	beq.n	804285e <RCCEx_PLLSAI1_Config+0x36>
 804284a:	e01a      	b.n	8042882 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 804284c:	4b65      	ldr	r3, [pc, #404]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 804284e:	681b      	ldr	r3, [r3, #0]
 8042850:	f003 0302 	and.w	r3, r3, #2
 8042854:	2b00      	cmp	r3, #0
 8042856:	d117      	bne.n	8042888 <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 8042858:	2301      	movs	r3, #1
 804285a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804285c:	e014      	b.n	8042888 <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 804285e:	4b61      	ldr	r3, [pc, #388]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042860:	681b      	ldr	r3, [r3, #0]
 8042862:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042866:	2b00      	cmp	r3, #0
 8042868:	d110      	bne.n	804288c <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 804286a:	2301      	movs	r3, #1
 804286c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 804286e:	e00d      	b.n	804288c <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8042870:	4b5c      	ldr	r3, [pc, #368]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042872:	681b      	ldr	r3, [r3, #0]
 8042874:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8042878:	2b00      	cmp	r3, #0
 804287a:	d109      	bne.n	8042890 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 804287c:	2301      	movs	r3, #1
 804287e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042880:	e006      	b.n	8042890 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 8042882:	2301      	movs	r3, #1
 8042884:	73fb      	strb	r3, [r7, #15]
      break;
 8042886:	e004      	b.n	8042892 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8042888:	bf00      	nop
 804288a:	e002      	b.n	8042892 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 804288c:	bf00      	nop
 804288e:	e000      	b.n	8042892 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 8042890:	bf00      	nop
  }

  if (status == HAL_OK)
 8042892:	7bfb      	ldrb	r3, [r7, #15]
 8042894:	2b00      	cmp	r3, #0
 8042896:	f040 809f 	bne.w	80429d8 <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 804289a:	4b52      	ldr	r3, [pc, #328]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 804289c:	681b      	ldr	r3, [r3, #0]
 804289e:	4a51      	ldr	r2, [pc, #324]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80428a0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80428a4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80428a6:	f7fe f96f 	bl	8040b88 <HAL_GetTick>
 80428aa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80428ac:	e00f      	b.n	80428ce <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80428ae:	f7fe f96b 	bl	8040b88 <HAL_GetTick>
 80428b2:	4602      	mov	r2, r0
 80428b4:	68bb      	ldr	r3, [r7, #8]
 80428b6:	1ad3      	subs	r3, r2, r3
 80428b8:	2b02      	cmp	r3, #2
 80428ba:	d908      	bls.n	80428ce <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80428bc:	4b49      	ldr	r3, [pc, #292]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80428be:	681b      	ldr	r3, [r3, #0]
 80428c0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80428c4:	2b00      	cmp	r3, #0
 80428c6:	d009      	beq.n	80428dc <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 80428c8:	2303      	movs	r3, #3
 80428ca:	73fb      	strb	r3, [r7, #15]
        }
        break;
 80428cc:	e006      	b.n	80428dc <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80428ce:	4b45      	ldr	r3, [pc, #276]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80428d0:	681b      	ldr	r3, [r3, #0]
 80428d2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80428d6:	2b00      	cmp	r3, #0
 80428d8:	d1e9      	bne.n	80428ae <RCCEx_PLLSAI1_Config+0x86>
 80428da:	e000      	b.n	80428de <RCCEx_PLLSAI1_Config+0xb6>
        break;
 80428dc:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 80428de:	7bfb      	ldrb	r3, [r7, #15]
 80428e0:	2b00      	cmp	r3, #0
 80428e2:	d179      	bne.n	80429d8 <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 80428e4:	683b      	ldr	r3, [r7, #0]
 80428e6:	2b00      	cmp	r3, #0
 80428e8:	d116      	bne.n	8042918 <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80428ea:	4b3e      	ldr	r3, [pc, #248]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80428ec:	691a      	ldr	r2, [r3, #16]
 80428ee:	4b3e      	ldr	r3, [pc, #248]	; (80429e8 <RCCEx_PLLSAI1_Config+0x1c0>)
 80428f0:	4013      	ands	r3, r2
 80428f2:	687a      	ldr	r2, [r7, #4]
 80428f4:	6892      	ldr	r2, [r2, #8]
 80428f6:	0211      	lsls	r1, r2, #8
 80428f8:	687a      	ldr	r2, [r7, #4]
 80428fa:	68d2      	ldr	r2, [r2, #12]
 80428fc:	06d2      	lsls	r2, r2, #27
 80428fe:	4311      	orrs	r1, r2
 8042900:	687a      	ldr	r2, [r7, #4]
 8042902:	6852      	ldr	r2, [r2, #4]
 8042904:	3a01      	subs	r2, #1
 8042906:	0112      	lsls	r2, r2, #4
 8042908:	4311      	orrs	r1, r2
 804290a:	687a      	ldr	r2, [r7, #4]
 804290c:	6812      	ldr	r2, [r2, #0]
 804290e:	430a      	orrs	r2, r1
 8042910:	4934      	ldr	r1, [pc, #208]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042912:	4313      	orrs	r3, r2
 8042914:	610b      	str	r3, [r1, #16]
 8042916:	e033      	b.n	8042980 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 8042918:	683b      	ldr	r3, [r7, #0]
 804291a:	2b01      	cmp	r3, #1
 804291c:	d118      	bne.n	8042950 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 804291e:	4b31      	ldr	r3, [pc, #196]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042920:	691a      	ldr	r2, [r3, #16]
 8042922:	4b32      	ldr	r3, [pc, #200]	; (80429ec <RCCEx_PLLSAI1_Config+0x1c4>)
 8042924:	4013      	ands	r3, r2
 8042926:	687a      	ldr	r2, [r7, #4]
 8042928:	6892      	ldr	r2, [r2, #8]
 804292a:	0211      	lsls	r1, r2, #8
 804292c:	687a      	ldr	r2, [r7, #4]
 804292e:	6912      	ldr	r2, [r2, #16]
 8042930:	0852      	lsrs	r2, r2, #1
 8042932:	3a01      	subs	r2, #1
 8042934:	0552      	lsls	r2, r2, #21
 8042936:	4311      	orrs	r1, r2
 8042938:	687a      	ldr	r2, [r7, #4]
 804293a:	6852      	ldr	r2, [r2, #4]
 804293c:	3a01      	subs	r2, #1
 804293e:	0112      	lsls	r2, r2, #4
 8042940:	4311      	orrs	r1, r2
 8042942:	687a      	ldr	r2, [r7, #4]
 8042944:	6812      	ldr	r2, [r2, #0]
 8042946:	430a      	orrs	r2, r1
 8042948:	4926      	ldr	r1, [pc, #152]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 804294a:	4313      	orrs	r3, r2
 804294c:	610b      	str	r3, [r1, #16]
 804294e:	e017      	b.n	8042980 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8042950:	4b24      	ldr	r3, [pc, #144]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042952:	691a      	ldr	r2, [r3, #16]
 8042954:	4b26      	ldr	r3, [pc, #152]	; (80429f0 <RCCEx_PLLSAI1_Config+0x1c8>)
 8042956:	4013      	ands	r3, r2
 8042958:	687a      	ldr	r2, [r7, #4]
 804295a:	6892      	ldr	r2, [r2, #8]
 804295c:	0211      	lsls	r1, r2, #8
 804295e:	687a      	ldr	r2, [r7, #4]
 8042960:	6952      	ldr	r2, [r2, #20]
 8042962:	0852      	lsrs	r2, r2, #1
 8042964:	3a01      	subs	r2, #1
 8042966:	0652      	lsls	r2, r2, #25
 8042968:	4311      	orrs	r1, r2
 804296a:	687a      	ldr	r2, [r7, #4]
 804296c:	6852      	ldr	r2, [r2, #4]
 804296e:	3a01      	subs	r2, #1
 8042970:	0112      	lsls	r2, r2, #4
 8042972:	4311      	orrs	r1, r2
 8042974:	687a      	ldr	r2, [r7, #4]
 8042976:	6812      	ldr	r2, [r2, #0]
 8042978:	430a      	orrs	r2, r1
 804297a:	491a      	ldr	r1, [pc, #104]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 804297c:	4313      	orrs	r3, r2
 804297e:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8042980:	4b18      	ldr	r3, [pc, #96]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042982:	681b      	ldr	r3, [r3, #0]
 8042984:	4a17      	ldr	r2, [pc, #92]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 8042986:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 804298a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 804298c:	f7fe f8fc 	bl	8040b88 <HAL_GetTick>
 8042990:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8042992:	e00f      	b.n	80429b4 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8042994:	f7fe f8f8 	bl	8040b88 <HAL_GetTick>
 8042998:	4602      	mov	r2, r0
 804299a:	68bb      	ldr	r3, [r7, #8]
 804299c:	1ad3      	subs	r3, r2, r3
 804299e:	2b02      	cmp	r3, #2
 80429a0:	d908      	bls.n	80429b4 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80429a2:	4b10      	ldr	r3, [pc, #64]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80429a4:	681b      	ldr	r3, [r3, #0]
 80429a6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80429aa:	2b00      	cmp	r3, #0
 80429ac:	d109      	bne.n	80429c2 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 80429ae:	2303      	movs	r3, #3
 80429b0:	73fb      	strb	r3, [r7, #15]
          }
          break;
 80429b2:	e006      	b.n	80429c2 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80429b4:	4b0b      	ldr	r3, [pc, #44]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80429b6:	681b      	ldr	r3, [r3, #0]
 80429b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80429bc:	2b00      	cmp	r3, #0
 80429be:	d0e9      	beq.n	8042994 <RCCEx_PLLSAI1_Config+0x16c>
 80429c0:	e000      	b.n	80429c4 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 80429c2:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 80429c4:	7bfb      	ldrb	r3, [r7, #15]
 80429c6:	2b00      	cmp	r3, #0
 80429c8:	d106      	bne.n	80429d8 <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 80429ca:	4b06      	ldr	r3, [pc, #24]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80429cc:	691a      	ldr	r2, [r3, #16]
 80429ce:	687b      	ldr	r3, [r7, #4]
 80429d0:	699b      	ldr	r3, [r3, #24]
 80429d2:	4904      	ldr	r1, [pc, #16]	; (80429e4 <RCCEx_PLLSAI1_Config+0x1bc>)
 80429d4:	4313      	orrs	r3, r2
 80429d6:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80429d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80429da:	4618      	mov	r0, r3
 80429dc:	3710      	adds	r7, #16
 80429de:	46bd      	mov	sp, r7
 80429e0:	bd80      	pop	{r7, pc}
 80429e2:	bf00      	nop
 80429e4:	40021000 	.word	0x40021000
 80429e8:	07ff800c 	.word	0x07ff800c
 80429ec:	ff9f800c 	.word	0xff9f800c
 80429f0:	f9ff800c 	.word	0xf9ff800c

080429f4 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 80429f4:	b580      	push	{r7, lr}
 80429f6:	b084      	sub	sp, #16
 80429f8:	af00      	add	r7, sp, #0
 80429fa:	6078      	str	r0, [r7, #4]
 80429fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80429fe:	2300      	movs	r3, #0
 8042a00:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 8042a02:	687b      	ldr	r3, [r7, #4]
 8042a04:	681b      	ldr	r3, [r3, #0]
 8042a06:	2b03      	cmp	r3, #3
 8042a08:	d018      	beq.n	8042a3c <RCCEx_PLLSAI2_Config+0x48>
 8042a0a:	2b03      	cmp	r3, #3
 8042a0c:	d81f      	bhi.n	8042a4e <RCCEx_PLLSAI2_Config+0x5a>
 8042a0e:	2b01      	cmp	r3, #1
 8042a10:	d002      	beq.n	8042a18 <RCCEx_PLLSAI2_Config+0x24>
 8042a12:	2b02      	cmp	r3, #2
 8042a14:	d009      	beq.n	8042a2a <RCCEx_PLLSAI2_Config+0x36>
 8042a16:	e01a      	b.n	8042a4e <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8042a18:	4b4a      	ldr	r3, [pc, #296]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a1a:	681b      	ldr	r3, [r3, #0]
 8042a1c:	f003 0302 	and.w	r3, r3, #2
 8042a20:	2b00      	cmp	r3, #0
 8042a22:	d117      	bne.n	8042a54 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 8042a24:	2301      	movs	r3, #1
 8042a26:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a28:	e014      	b.n	8042a54 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8042a2a:	4b46      	ldr	r3, [pc, #280]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a2c:	681b      	ldr	r3, [r3, #0]
 8042a2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8042a32:	2b00      	cmp	r3, #0
 8042a34:	d110      	bne.n	8042a58 <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 8042a36:	2301      	movs	r3, #1
 8042a38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a3a:	e00d      	b.n	8042a58 <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 8042a3c:	4b41      	ldr	r3, [pc, #260]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a3e:	681b      	ldr	r3, [r3, #0]
 8042a40:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8042a44:	2b00      	cmp	r3, #0
 8042a46:	d109      	bne.n	8042a5c <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 8042a48:	2301      	movs	r3, #1
 8042a4a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8042a4c:	e006      	b.n	8042a5c <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 8042a4e:	2301      	movs	r3, #1
 8042a50:	73fb      	strb	r3, [r7, #15]
      break;
 8042a52:	e004      	b.n	8042a5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a54:	bf00      	nop
 8042a56:	e002      	b.n	8042a5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a58:	bf00      	nop
 8042a5a:	e000      	b.n	8042a5e <RCCEx_PLLSAI2_Config+0x6a>
      break;
 8042a5c:	bf00      	nop
  }

  if (status == HAL_OK)
 8042a5e:	7bfb      	ldrb	r3, [r7, #15]
 8042a60:	2b00      	cmp	r3, #0
 8042a62:	d169      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8042a64:	4b37      	ldr	r3, [pc, #220]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a66:	681b      	ldr	r3, [r3, #0]
 8042a68:	4a36      	ldr	r2, [pc, #216]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a6a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8042a6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8042a70:	f7fe f88a 	bl	8040b88 <HAL_GetTick>
 8042a74:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042a76:	e00f      	b.n	8042a98 <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042a78:	f7fe f886 	bl	8040b88 <HAL_GetTick>
 8042a7c:	4602      	mov	r2, r0
 8042a7e:	68bb      	ldr	r3, [r7, #8]
 8042a80:	1ad3      	subs	r3, r2, r3
 8042a82:	2b02      	cmp	r3, #2
 8042a84:	d908      	bls.n	8042a98 <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042a86:	4b2f      	ldr	r3, [pc, #188]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a88:	681b      	ldr	r3, [r3, #0]
 8042a8a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042a8e:	2b00      	cmp	r3, #0
 8042a90:	d009      	beq.n	8042aa6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 8042a92:	2303      	movs	r3, #3
 8042a94:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8042a96:	e006      	b.n	8042aa6 <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8042a98:	4b2a      	ldr	r3, [pc, #168]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042a9a:	681b      	ldr	r3, [r3, #0]
 8042a9c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042aa0:	2b00      	cmp	r3, #0
 8042aa2:	d1e9      	bne.n	8042a78 <RCCEx_PLLSAI2_Config+0x84>
 8042aa4:	e000      	b.n	8042aa8 <RCCEx_PLLSAI2_Config+0xb4>
        break;
 8042aa6:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 8042aa8:	7bfb      	ldrb	r3, [r7, #15]
 8042aaa:	2b00      	cmp	r3, #0
 8042aac:	d144      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 8042aae:	683b      	ldr	r3, [r7, #0]
 8042ab0:	2b00      	cmp	r3, #0
 8042ab2:	d115      	bne.n	8042ae0 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8042ab4:	4b23      	ldr	r3, [pc, #140]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042ab6:	695a      	ldr	r2, [r3, #20]
 8042ab8:	4b23      	ldr	r3, [pc, #140]	; (8042b48 <RCCEx_PLLSAI2_Config+0x154>)
 8042aba:	4013      	ands	r3, r2
 8042abc:	687a      	ldr	r2, [r7, #4]
 8042abe:	6892      	ldr	r2, [r2, #8]
 8042ac0:	0211      	lsls	r1, r2, #8
 8042ac2:	687a      	ldr	r2, [r7, #4]
 8042ac4:	68d2      	ldr	r2, [r2, #12]
 8042ac6:	06d2      	lsls	r2, r2, #27
 8042ac8:	4311      	orrs	r1, r2
 8042aca:	687a      	ldr	r2, [r7, #4]
 8042acc:	6852      	ldr	r2, [r2, #4]
 8042ace:	3a01      	subs	r2, #1
 8042ad0:	0112      	lsls	r2, r2, #4
 8042ad2:	4311      	orrs	r1, r2
 8042ad4:	687a      	ldr	r2, [r7, #4]
 8042ad6:	6812      	ldr	r2, [r2, #0]
 8042ad8:	430a      	orrs	r2, r1
 8042ada:	491a      	ldr	r1, [pc, #104]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042adc:	4313      	orrs	r3, r2
 8042ade:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8042ae0:	4b18      	ldr	r3, [pc, #96]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042ae2:	681b      	ldr	r3, [r3, #0]
 8042ae4:	4a17      	ldr	r2, [pc, #92]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042ae6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8042aea:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8042aec:	f7fe f84c 	bl	8040b88 <HAL_GetTick>
 8042af0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042af2:	e00f      	b.n	8042b14 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8042af4:	f7fe f848 	bl	8040b88 <HAL_GetTick>
 8042af8:	4602      	mov	r2, r0
 8042afa:	68bb      	ldr	r3, [r7, #8]
 8042afc:	1ad3      	subs	r3, r2, r3
 8042afe:	2b02      	cmp	r3, #2
 8042b00:	d908      	bls.n	8042b14 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042b02:	4b10      	ldr	r3, [pc, #64]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042b04:	681b      	ldr	r3, [r3, #0]
 8042b06:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042b0a:	2b00      	cmp	r3, #0
 8042b0c:	d109      	bne.n	8042b22 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 8042b0e:	2303      	movs	r3, #3
 8042b10:	73fb      	strb	r3, [r7, #15]
          }
          break;
 8042b12:	e006      	b.n	8042b22 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8042b14:	4b0b      	ldr	r3, [pc, #44]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042b16:	681b      	ldr	r3, [r3, #0]
 8042b18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8042b1c:	2b00      	cmp	r3, #0
 8042b1e:	d0e9      	beq.n	8042af4 <RCCEx_PLLSAI2_Config+0x100>
 8042b20:	e000      	b.n	8042b24 <RCCEx_PLLSAI2_Config+0x130>
          break;
 8042b22:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 8042b24:	7bfb      	ldrb	r3, [r7, #15]
 8042b26:	2b00      	cmp	r3, #0
 8042b28:	d106      	bne.n	8042b38 <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 8042b2a:	4b06      	ldr	r3, [pc, #24]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042b2c:	695a      	ldr	r2, [r3, #20]
 8042b2e:	687b      	ldr	r3, [r7, #4]
 8042b30:	691b      	ldr	r3, [r3, #16]
 8042b32:	4904      	ldr	r1, [pc, #16]	; (8042b44 <RCCEx_PLLSAI2_Config+0x150>)
 8042b34:	4313      	orrs	r3, r2
 8042b36:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8042b38:	7bfb      	ldrb	r3, [r7, #15]
}
 8042b3a:	4618      	mov	r0, r3
 8042b3c:	3710      	adds	r7, #16
 8042b3e:	46bd      	mov	sp, r7
 8042b40:	bd80      	pop	{r7, pc}
 8042b42:	bf00      	nop
 8042b44:	40021000 	.word	0x40021000
 8042b48:	07ff800c 	.word	0x07ff800c

08042b4c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8042b4c:	b580      	push	{r7, lr}
 8042b4e:	b082      	sub	sp, #8
 8042b50:	af00      	add	r7, sp, #0
 8042b52:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8042b54:	687b      	ldr	r3, [r7, #4]
 8042b56:	2b00      	cmp	r3, #0
 8042b58:	d101      	bne.n	8042b5e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8042b5a:	2301      	movs	r3, #1
 8042b5c:	e042      	b.n	8042be4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8042b5e:	687b      	ldr	r3, [r7, #4]
 8042b60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042b64:	2b00      	cmp	r3, #0
 8042b66:	d106      	bne.n	8042b76 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8042b68:	687b      	ldr	r3, [r7, #4]
 8042b6a:	2200      	movs	r2, #0
 8042b6c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8042b70:	6878      	ldr	r0, [r7, #4]
 8042b72:	f7fd fe6f 	bl	8040854 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8042b76:	687b      	ldr	r3, [r7, #4]
 8042b78:	2224      	movs	r2, #36	; 0x24
 8042b7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8042b7e:	687b      	ldr	r3, [r7, #4]
 8042b80:	681b      	ldr	r3, [r3, #0]
 8042b82:	681a      	ldr	r2, [r3, #0]
 8042b84:	687b      	ldr	r3, [r7, #4]
 8042b86:	681b      	ldr	r3, [r3, #0]
 8042b88:	f022 0201 	bic.w	r2, r2, #1
 8042b8c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8042b8e:	6878      	ldr	r0, [r7, #4]
 8042b90:	f000 f8ba 	bl	8042d08 <UART_SetConfig>
 8042b94:	4603      	mov	r3, r0
 8042b96:	2b01      	cmp	r3, #1
 8042b98:	d101      	bne.n	8042b9e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8042b9a:	2301      	movs	r3, #1
 8042b9c:	e022      	b.n	8042be4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8042b9e:	687b      	ldr	r3, [r7, #4]
 8042ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8042ba2:	2b00      	cmp	r3, #0
 8042ba4:	d002      	beq.n	8042bac <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8042ba6:	6878      	ldr	r0, [r7, #4]
 8042ba8:	f000 fbae 	bl	8043308 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8042bac:	687b      	ldr	r3, [r7, #4]
 8042bae:	681b      	ldr	r3, [r3, #0]
 8042bb0:	685a      	ldr	r2, [r3, #4]
 8042bb2:	687b      	ldr	r3, [r7, #4]
 8042bb4:	681b      	ldr	r3, [r3, #0]
 8042bb6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8042bba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8042bbc:	687b      	ldr	r3, [r7, #4]
 8042bbe:	681b      	ldr	r3, [r3, #0]
 8042bc0:	689a      	ldr	r2, [r3, #8]
 8042bc2:	687b      	ldr	r3, [r7, #4]
 8042bc4:	681b      	ldr	r3, [r3, #0]
 8042bc6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8042bca:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8042bcc:	687b      	ldr	r3, [r7, #4]
 8042bce:	681b      	ldr	r3, [r3, #0]
 8042bd0:	681a      	ldr	r2, [r3, #0]
 8042bd2:	687b      	ldr	r3, [r7, #4]
 8042bd4:	681b      	ldr	r3, [r3, #0]
 8042bd6:	f042 0201 	orr.w	r2, r2, #1
 8042bda:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8042bdc:	6878      	ldr	r0, [r7, #4]
 8042bde:	f000 fc35 	bl	804344c <UART_CheckIdleState>
 8042be2:	4603      	mov	r3, r0
}
 8042be4:	4618      	mov	r0, r3
 8042be6:	3708      	adds	r7, #8
 8042be8:	46bd      	mov	sp, r7
 8042bea:	bd80      	pop	{r7, pc}

08042bec <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8042bec:	b580      	push	{r7, lr}
 8042bee:	b08a      	sub	sp, #40	; 0x28
 8042bf0:	af02      	add	r7, sp, #8
 8042bf2:	60f8      	str	r0, [r7, #12]
 8042bf4:	60b9      	str	r1, [r7, #8]
 8042bf6:	603b      	str	r3, [r7, #0]
 8042bf8:	4613      	mov	r3, r2
 8042bfa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8042bfc:	68fb      	ldr	r3, [r7, #12]
 8042bfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042c02:	2b20      	cmp	r3, #32
 8042c04:	d17b      	bne.n	8042cfe <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8042c06:	68bb      	ldr	r3, [r7, #8]
 8042c08:	2b00      	cmp	r3, #0
 8042c0a:	d002      	beq.n	8042c12 <HAL_UART_Transmit+0x26>
 8042c0c:	88fb      	ldrh	r3, [r7, #6]
 8042c0e:	2b00      	cmp	r3, #0
 8042c10:	d101      	bne.n	8042c16 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8042c12:	2301      	movs	r3, #1
 8042c14:	e074      	b.n	8042d00 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8042c16:	68fb      	ldr	r3, [r7, #12]
 8042c18:	2200      	movs	r2, #0
 8042c1a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8042c1e:	68fb      	ldr	r3, [r7, #12]
 8042c20:	2221      	movs	r2, #33	; 0x21
 8042c22:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8042c26:	f7fd ffaf 	bl	8040b88 <HAL_GetTick>
 8042c2a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8042c2c:	68fb      	ldr	r3, [r7, #12]
 8042c2e:	88fa      	ldrh	r2, [r7, #6]
 8042c30:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8042c34:	68fb      	ldr	r3, [r7, #12]
 8042c36:	88fa      	ldrh	r2, [r7, #6]
 8042c38:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8042c3c:	68fb      	ldr	r3, [r7, #12]
 8042c3e:	689b      	ldr	r3, [r3, #8]
 8042c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8042c44:	d108      	bne.n	8042c58 <HAL_UART_Transmit+0x6c>
 8042c46:	68fb      	ldr	r3, [r7, #12]
 8042c48:	691b      	ldr	r3, [r3, #16]
 8042c4a:	2b00      	cmp	r3, #0
 8042c4c:	d104      	bne.n	8042c58 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8042c4e:	2300      	movs	r3, #0
 8042c50:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8042c52:	68bb      	ldr	r3, [r7, #8]
 8042c54:	61bb      	str	r3, [r7, #24]
 8042c56:	e003      	b.n	8042c60 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8042c58:	68bb      	ldr	r3, [r7, #8]
 8042c5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8042c5c:	2300      	movs	r3, #0
 8042c5e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8042c60:	e030      	b.n	8042cc4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8042c62:	683b      	ldr	r3, [r7, #0]
 8042c64:	9300      	str	r3, [sp, #0]
 8042c66:	697b      	ldr	r3, [r7, #20]
 8042c68:	2200      	movs	r2, #0
 8042c6a:	2180      	movs	r1, #128	; 0x80
 8042c6c:	68f8      	ldr	r0, [r7, #12]
 8042c6e:	f000 fc97 	bl	80435a0 <UART_WaitOnFlagUntilTimeout>
 8042c72:	4603      	mov	r3, r0
 8042c74:	2b00      	cmp	r3, #0
 8042c76:	d005      	beq.n	8042c84 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8042c78:	68fb      	ldr	r3, [r7, #12]
 8042c7a:	2220      	movs	r2, #32
 8042c7c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8042c80:	2303      	movs	r3, #3
 8042c82:	e03d      	b.n	8042d00 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8042c84:	69fb      	ldr	r3, [r7, #28]
 8042c86:	2b00      	cmp	r3, #0
 8042c88:	d10b      	bne.n	8042ca2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8042c8a:	69bb      	ldr	r3, [r7, #24]
 8042c8c:	881b      	ldrh	r3, [r3, #0]
 8042c8e:	461a      	mov	r2, r3
 8042c90:	68fb      	ldr	r3, [r7, #12]
 8042c92:	681b      	ldr	r3, [r3, #0]
 8042c94:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8042c98:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8042c9a:	69bb      	ldr	r3, [r7, #24]
 8042c9c:	3302      	adds	r3, #2
 8042c9e:	61bb      	str	r3, [r7, #24]
 8042ca0:	e007      	b.n	8042cb2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8042ca2:	69fb      	ldr	r3, [r7, #28]
 8042ca4:	781a      	ldrb	r2, [r3, #0]
 8042ca6:	68fb      	ldr	r3, [r7, #12]
 8042ca8:	681b      	ldr	r3, [r3, #0]
 8042caa:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8042cac:	69fb      	ldr	r3, [r7, #28]
 8042cae:	3301      	adds	r3, #1
 8042cb0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8042cb2:	68fb      	ldr	r3, [r7, #12]
 8042cb4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042cb8:	b29b      	uxth	r3, r3
 8042cba:	3b01      	subs	r3, #1
 8042cbc:	b29a      	uxth	r2, r3
 8042cbe:	68fb      	ldr	r3, [r7, #12]
 8042cc0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8042cc4:	68fb      	ldr	r3, [r7, #12]
 8042cc6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8042cca:	b29b      	uxth	r3, r3
 8042ccc:	2b00      	cmp	r3, #0
 8042cce:	d1c8      	bne.n	8042c62 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8042cd0:	683b      	ldr	r3, [r7, #0]
 8042cd2:	9300      	str	r3, [sp, #0]
 8042cd4:	697b      	ldr	r3, [r7, #20]
 8042cd6:	2200      	movs	r2, #0
 8042cd8:	2140      	movs	r1, #64	; 0x40
 8042cda:	68f8      	ldr	r0, [r7, #12]
 8042cdc:	f000 fc60 	bl	80435a0 <UART_WaitOnFlagUntilTimeout>
 8042ce0:	4603      	mov	r3, r0
 8042ce2:	2b00      	cmp	r3, #0
 8042ce4:	d005      	beq.n	8042cf2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8042ce6:	68fb      	ldr	r3, [r7, #12]
 8042ce8:	2220      	movs	r2, #32
 8042cea:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8042cee:	2303      	movs	r3, #3
 8042cf0:	e006      	b.n	8042d00 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8042cf2:	68fb      	ldr	r3, [r7, #12]
 8042cf4:	2220      	movs	r2, #32
 8042cf6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8042cfa:	2300      	movs	r3, #0
 8042cfc:	e000      	b.n	8042d00 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8042cfe:	2302      	movs	r3, #2
  }
}
 8042d00:	4618      	mov	r0, r3
 8042d02:	3720      	adds	r7, #32
 8042d04:	46bd      	mov	sp, r7
 8042d06:	bd80      	pop	{r7, pc}

08042d08 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8042d08:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8042d0c:	b08c      	sub	sp, #48	; 0x30
 8042d0e:	af00      	add	r7, sp, #0
 8042d10:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8042d12:	2300      	movs	r3, #0
 8042d14:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8042d18:	697b      	ldr	r3, [r7, #20]
 8042d1a:	689a      	ldr	r2, [r3, #8]
 8042d1c:	697b      	ldr	r3, [r7, #20]
 8042d1e:	691b      	ldr	r3, [r3, #16]
 8042d20:	431a      	orrs	r2, r3
 8042d22:	697b      	ldr	r3, [r7, #20]
 8042d24:	695b      	ldr	r3, [r3, #20]
 8042d26:	431a      	orrs	r2, r3
 8042d28:	697b      	ldr	r3, [r7, #20]
 8042d2a:	69db      	ldr	r3, [r3, #28]
 8042d2c:	4313      	orrs	r3, r2
 8042d2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8042d30:	697b      	ldr	r3, [r7, #20]
 8042d32:	681b      	ldr	r3, [r3, #0]
 8042d34:	681a      	ldr	r2, [r3, #0]
 8042d36:	4baa      	ldr	r3, [pc, #680]	; (8042fe0 <UART_SetConfig+0x2d8>)
 8042d38:	4013      	ands	r3, r2
 8042d3a:	697a      	ldr	r2, [r7, #20]
 8042d3c:	6812      	ldr	r2, [r2, #0]
 8042d3e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042d40:	430b      	orrs	r3, r1
 8042d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8042d44:	697b      	ldr	r3, [r7, #20]
 8042d46:	681b      	ldr	r3, [r3, #0]
 8042d48:	685b      	ldr	r3, [r3, #4]
 8042d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8042d4e:	697b      	ldr	r3, [r7, #20]
 8042d50:	68da      	ldr	r2, [r3, #12]
 8042d52:	697b      	ldr	r3, [r7, #20]
 8042d54:	681b      	ldr	r3, [r3, #0]
 8042d56:	430a      	orrs	r2, r1
 8042d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8042d5a:	697b      	ldr	r3, [r7, #20]
 8042d5c:	699b      	ldr	r3, [r3, #24]
 8042d5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8042d60:	697b      	ldr	r3, [r7, #20]
 8042d62:	681b      	ldr	r3, [r3, #0]
 8042d64:	4a9f      	ldr	r2, [pc, #636]	; (8042fe4 <UART_SetConfig+0x2dc>)
 8042d66:	4293      	cmp	r3, r2
 8042d68:	d004      	beq.n	8042d74 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8042d6a:	697b      	ldr	r3, [r7, #20]
 8042d6c:	6a1b      	ldr	r3, [r3, #32]
 8042d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8042d70:	4313      	orrs	r3, r2
 8042d72:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8042d74:	697b      	ldr	r3, [r7, #20]
 8042d76:	681b      	ldr	r3, [r3, #0]
 8042d78:	689b      	ldr	r3, [r3, #8]
 8042d7a:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8042d7e:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8042d82:	697a      	ldr	r2, [r7, #20]
 8042d84:	6812      	ldr	r2, [r2, #0]
 8042d86:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8042d88:	430b      	orrs	r3, r1
 8042d8a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8042d8c:	697b      	ldr	r3, [r7, #20]
 8042d8e:	681b      	ldr	r3, [r3, #0]
 8042d90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8042d92:	f023 010f 	bic.w	r1, r3, #15
 8042d96:	697b      	ldr	r3, [r7, #20]
 8042d98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8042d9a:	697b      	ldr	r3, [r7, #20]
 8042d9c:	681b      	ldr	r3, [r3, #0]
 8042d9e:	430a      	orrs	r2, r1
 8042da0:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8042da2:	697b      	ldr	r3, [r7, #20]
 8042da4:	681b      	ldr	r3, [r3, #0]
 8042da6:	4a90      	ldr	r2, [pc, #576]	; (8042fe8 <UART_SetConfig+0x2e0>)
 8042da8:	4293      	cmp	r3, r2
 8042daa:	d125      	bne.n	8042df8 <UART_SetConfig+0xf0>
 8042dac:	4b8f      	ldr	r3, [pc, #572]	; (8042fec <UART_SetConfig+0x2e4>)
 8042dae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042db2:	f003 0303 	and.w	r3, r3, #3
 8042db6:	2b03      	cmp	r3, #3
 8042db8:	d81a      	bhi.n	8042df0 <UART_SetConfig+0xe8>
 8042dba:	a201      	add	r2, pc, #4	; (adr r2, 8042dc0 <UART_SetConfig+0xb8>)
 8042dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042dc0:	08042dd1 	.word	0x08042dd1
 8042dc4:	08042de1 	.word	0x08042de1
 8042dc8:	08042dd9 	.word	0x08042dd9
 8042dcc:	08042de9 	.word	0x08042de9
 8042dd0:	2301      	movs	r3, #1
 8042dd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042dd6:	e116      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042dd8:	2302      	movs	r3, #2
 8042dda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042dde:	e112      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042de0:	2304      	movs	r3, #4
 8042de2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042de6:	e10e      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042de8:	2308      	movs	r3, #8
 8042dea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042dee:	e10a      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042df0:	2310      	movs	r3, #16
 8042df2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042df6:	e106      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042df8:	697b      	ldr	r3, [r7, #20]
 8042dfa:	681b      	ldr	r3, [r3, #0]
 8042dfc:	4a7c      	ldr	r2, [pc, #496]	; (8042ff0 <UART_SetConfig+0x2e8>)
 8042dfe:	4293      	cmp	r3, r2
 8042e00:	d138      	bne.n	8042e74 <UART_SetConfig+0x16c>
 8042e02:	4b7a      	ldr	r3, [pc, #488]	; (8042fec <UART_SetConfig+0x2e4>)
 8042e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042e08:	f003 030c 	and.w	r3, r3, #12
 8042e0c:	2b0c      	cmp	r3, #12
 8042e0e:	d82d      	bhi.n	8042e6c <UART_SetConfig+0x164>
 8042e10:	a201      	add	r2, pc, #4	; (adr r2, 8042e18 <UART_SetConfig+0x110>)
 8042e12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8042e16:	bf00      	nop
 8042e18:	08042e4d 	.word	0x08042e4d
 8042e1c:	08042e6d 	.word	0x08042e6d
 8042e20:	08042e6d 	.word	0x08042e6d
 8042e24:	08042e6d 	.word	0x08042e6d
 8042e28:	08042e5d 	.word	0x08042e5d
 8042e2c:	08042e6d 	.word	0x08042e6d
 8042e30:	08042e6d 	.word	0x08042e6d
 8042e34:	08042e6d 	.word	0x08042e6d
 8042e38:	08042e55 	.word	0x08042e55
 8042e3c:	08042e6d 	.word	0x08042e6d
 8042e40:	08042e6d 	.word	0x08042e6d
 8042e44:	08042e6d 	.word	0x08042e6d
 8042e48:	08042e65 	.word	0x08042e65
 8042e4c:	2300      	movs	r3, #0
 8042e4e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042e52:	e0d8      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042e54:	2302      	movs	r3, #2
 8042e56:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042e5a:	e0d4      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042e5c:	2304      	movs	r3, #4
 8042e5e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042e62:	e0d0      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042e64:	2308      	movs	r3, #8
 8042e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042e6a:	e0cc      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042e6c:	2310      	movs	r3, #16
 8042e6e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042e72:	e0c8      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042e74:	697b      	ldr	r3, [r7, #20]
 8042e76:	681b      	ldr	r3, [r3, #0]
 8042e78:	4a5e      	ldr	r2, [pc, #376]	; (8042ff4 <UART_SetConfig+0x2ec>)
 8042e7a:	4293      	cmp	r3, r2
 8042e7c:	d125      	bne.n	8042eca <UART_SetConfig+0x1c2>
 8042e7e:	4b5b      	ldr	r3, [pc, #364]	; (8042fec <UART_SetConfig+0x2e4>)
 8042e80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042e84:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8042e88:	2b30      	cmp	r3, #48	; 0x30
 8042e8a:	d016      	beq.n	8042eba <UART_SetConfig+0x1b2>
 8042e8c:	2b30      	cmp	r3, #48	; 0x30
 8042e8e:	d818      	bhi.n	8042ec2 <UART_SetConfig+0x1ba>
 8042e90:	2b20      	cmp	r3, #32
 8042e92:	d00a      	beq.n	8042eaa <UART_SetConfig+0x1a2>
 8042e94:	2b20      	cmp	r3, #32
 8042e96:	d814      	bhi.n	8042ec2 <UART_SetConfig+0x1ba>
 8042e98:	2b00      	cmp	r3, #0
 8042e9a:	d002      	beq.n	8042ea2 <UART_SetConfig+0x19a>
 8042e9c:	2b10      	cmp	r3, #16
 8042e9e:	d008      	beq.n	8042eb2 <UART_SetConfig+0x1aa>
 8042ea0:	e00f      	b.n	8042ec2 <UART_SetConfig+0x1ba>
 8042ea2:	2300      	movs	r3, #0
 8042ea4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042ea8:	e0ad      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042eaa:	2302      	movs	r3, #2
 8042eac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042eb0:	e0a9      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042eb2:	2304      	movs	r3, #4
 8042eb4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042eb8:	e0a5      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042eba:	2308      	movs	r3, #8
 8042ebc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042ec0:	e0a1      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042ec2:	2310      	movs	r3, #16
 8042ec4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042ec8:	e09d      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042eca:	697b      	ldr	r3, [r7, #20]
 8042ecc:	681b      	ldr	r3, [r3, #0]
 8042ece:	4a4a      	ldr	r2, [pc, #296]	; (8042ff8 <UART_SetConfig+0x2f0>)
 8042ed0:	4293      	cmp	r3, r2
 8042ed2:	d125      	bne.n	8042f20 <UART_SetConfig+0x218>
 8042ed4:	4b45      	ldr	r3, [pc, #276]	; (8042fec <UART_SetConfig+0x2e4>)
 8042ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042eda:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8042ede:	2bc0      	cmp	r3, #192	; 0xc0
 8042ee0:	d016      	beq.n	8042f10 <UART_SetConfig+0x208>
 8042ee2:	2bc0      	cmp	r3, #192	; 0xc0
 8042ee4:	d818      	bhi.n	8042f18 <UART_SetConfig+0x210>
 8042ee6:	2b80      	cmp	r3, #128	; 0x80
 8042ee8:	d00a      	beq.n	8042f00 <UART_SetConfig+0x1f8>
 8042eea:	2b80      	cmp	r3, #128	; 0x80
 8042eec:	d814      	bhi.n	8042f18 <UART_SetConfig+0x210>
 8042eee:	2b00      	cmp	r3, #0
 8042ef0:	d002      	beq.n	8042ef8 <UART_SetConfig+0x1f0>
 8042ef2:	2b40      	cmp	r3, #64	; 0x40
 8042ef4:	d008      	beq.n	8042f08 <UART_SetConfig+0x200>
 8042ef6:	e00f      	b.n	8042f18 <UART_SetConfig+0x210>
 8042ef8:	2300      	movs	r3, #0
 8042efa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042efe:	e082      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f00:	2302      	movs	r3, #2
 8042f02:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f06:	e07e      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f08:	2304      	movs	r3, #4
 8042f0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f0e:	e07a      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f10:	2308      	movs	r3, #8
 8042f12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f16:	e076      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f18:	2310      	movs	r3, #16
 8042f1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f1e:	e072      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f20:	697b      	ldr	r3, [r7, #20]
 8042f22:	681b      	ldr	r3, [r3, #0]
 8042f24:	4a35      	ldr	r2, [pc, #212]	; (8042ffc <UART_SetConfig+0x2f4>)
 8042f26:	4293      	cmp	r3, r2
 8042f28:	d12a      	bne.n	8042f80 <UART_SetConfig+0x278>
 8042f2a:	4b30      	ldr	r3, [pc, #192]	; (8042fec <UART_SetConfig+0x2e4>)
 8042f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042f30:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8042f34:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042f38:	d01a      	beq.n	8042f70 <UART_SetConfig+0x268>
 8042f3a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8042f3e:	d81b      	bhi.n	8042f78 <UART_SetConfig+0x270>
 8042f40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042f44:	d00c      	beq.n	8042f60 <UART_SetConfig+0x258>
 8042f46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8042f4a:	d815      	bhi.n	8042f78 <UART_SetConfig+0x270>
 8042f4c:	2b00      	cmp	r3, #0
 8042f4e:	d003      	beq.n	8042f58 <UART_SetConfig+0x250>
 8042f50:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8042f54:	d008      	beq.n	8042f68 <UART_SetConfig+0x260>
 8042f56:	e00f      	b.n	8042f78 <UART_SetConfig+0x270>
 8042f58:	2300      	movs	r3, #0
 8042f5a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f5e:	e052      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f60:	2302      	movs	r3, #2
 8042f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f66:	e04e      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f68:	2304      	movs	r3, #4
 8042f6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f6e:	e04a      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f70:	2308      	movs	r3, #8
 8042f72:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f76:	e046      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f78:	2310      	movs	r3, #16
 8042f7a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042f7e:	e042      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042f80:	697b      	ldr	r3, [r7, #20]
 8042f82:	681b      	ldr	r3, [r3, #0]
 8042f84:	4a17      	ldr	r2, [pc, #92]	; (8042fe4 <UART_SetConfig+0x2dc>)
 8042f86:	4293      	cmp	r3, r2
 8042f88:	d13a      	bne.n	8043000 <UART_SetConfig+0x2f8>
 8042f8a:	4b18      	ldr	r3, [pc, #96]	; (8042fec <UART_SetConfig+0x2e4>)
 8042f8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8042f90:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8042f94:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042f98:	d01a      	beq.n	8042fd0 <UART_SetConfig+0x2c8>
 8042f9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8042f9e:	d81b      	bhi.n	8042fd8 <UART_SetConfig+0x2d0>
 8042fa0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042fa4:	d00c      	beq.n	8042fc0 <UART_SetConfig+0x2b8>
 8042fa6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8042faa:	d815      	bhi.n	8042fd8 <UART_SetConfig+0x2d0>
 8042fac:	2b00      	cmp	r3, #0
 8042fae:	d003      	beq.n	8042fb8 <UART_SetConfig+0x2b0>
 8042fb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8042fb4:	d008      	beq.n	8042fc8 <UART_SetConfig+0x2c0>
 8042fb6:	e00f      	b.n	8042fd8 <UART_SetConfig+0x2d0>
 8042fb8:	2300      	movs	r3, #0
 8042fba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042fbe:	e022      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042fc0:	2302      	movs	r3, #2
 8042fc2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042fc6:	e01e      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042fc8:	2304      	movs	r3, #4
 8042fca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042fce:	e01a      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042fd0:	2308      	movs	r3, #8
 8042fd2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042fd6:	e016      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042fd8:	2310      	movs	r3, #16
 8042fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8042fde:	e012      	b.n	8043006 <UART_SetConfig+0x2fe>
 8042fe0:	cfff69f3 	.word	0xcfff69f3
 8042fe4:	40008000 	.word	0x40008000
 8042fe8:	40013800 	.word	0x40013800
 8042fec:	40021000 	.word	0x40021000
 8042ff0:	40004400 	.word	0x40004400
 8042ff4:	40004800 	.word	0x40004800
 8042ff8:	40004c00 	.word	0x40004c00
 8042ffc:	40005000 	.word	0x40005000
 8043000:	2310      	movs	r3, #16
 8043002:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8043006:	697b      	ldr	r3, [r7, #20]
 8043008:	681b      	ldr	r3, [r3, #0]
 804300a:	4ab0      	ldr	r2, [pc, #704]	; (80432cc <UART_SetConfig+0x5c4>)
 804300c:	4293      	cmp	r3, r2
 804300e:	f040 809b 	bne.w	8043148 <UART_SetConfig+0x440>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8043012:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043016:	2b08      	cmp	r3, #8
 8043018:	d827      	bhi.n	804306a <UART_SetConfig+0x362>
 804301a:	a201      	add	r2, pc, #4	; (adr r2, 8043020 <UART_SetConfig+0x318>)
 804301c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043020:	08043045 	.word	0x08043045
 8043024:	0804304d 	.word	0x0804304d
 8043028:	08043055 	.word	0x08043055
 804302c:	0804306b 	.word	0x0804306b
 8043030:	0804305b 	.word	0x0804305b
 8043034:	0804306b 	.word	0x0804306b
 8043038:	0804306b 	.word	0x0804306b
 804303c:	0804306b 	.word	0x0804306b
 8043040:	08043063 	.word	0x08043063
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043044:	f7fe ff74 	bl	8041f30 <HAL_RCC_GetPCLK1Freq>
 8043048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804304a:	e014      	b.n	8043076 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804304c:	f7fe ff84 	bl	8041f58 <HAL_RCC_GetPCLK2Freq>
 8043050:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043052:	e010      	b.n	8043076 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043054:	4b9e      	ldr	r3, [pc, #632]	; (80432d0 <UART_SetConfig+0x5c8>)
 8043056:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043058:	e00d      	b.n	8043076 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804305a:	f7fe feb9 	bl	8041dd0 <HAL_RCC_GetSysClockFreq>
 804305e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043060:	e009      	b.n	8043076 <UART_SetConfig+0x36e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043062:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043066:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043068:	e005      	b.n	8043076 <UART_SetConfig+0x36e>
      default:
        pclk = 0U;
 804306a:	2300      	movs	r3, #0
 804306c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 804306e:	2301      	movs	r3, #1
 8043070:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043074:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8043076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043078:	2b00      	cmp	r3, #0
 804307a:	f000 8130 	beq.w	80432de <UART_SetConfig+0x5d6>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 804307e:	697b      	ldr	r3, [r7, #20]
 8043080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043082:	4a94      	ldr	r2, [pc, #592]	; (80432d4 <UART_SetConfig+0x5cc>)
 8043084:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043088:	461a      	mov	r2, r3
 804308a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804308c:	fbb3 f3f2 	udiv	r3, r3, r2
 8043090:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8043092:	697b      	ldr	r3, [r7, #20]
 8043094:	685a      	ldr	r2, [r3, #4]
 8043096:	4613      	mov	r3, r2
 8043098:	005b      	lsls	r3, r3, #1
 804309a:	4413      	add	r3, r2
 804309c:	69ba      	ldr	r2, [r7, #24]
 804309e:	429a      	cmp	r2, r3
 80430a0:	d305      	bcc.n	80430ae <UART_SetConfig+0x3a6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80430a2:	697b      	ldr	r3, [r7, #20]
 80430a4:	685b      	ldr	r3, [r3, #4]
 80430a6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80430a8:	69ba      	ldr	r2, [r7, #24]
 80430aa:	429a      	cmp	r2, r3
 80430ac:	d903      	bls.n	80430b6 <UART_SetConfig+0x3ae>
      {
        ret = HAL_ERROR;
 80430ae:	2301      	movs	r3, #1
 80430b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80430b4:	e113      	b.n	80432de <UART_SetConfig+0x5d6>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80430b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80430b8:	2200      	movs	r2, #0
 80430ba:	60bb      	str	r3, [r7, #8]
 80430bc:	60fa      	str	r2, [r7, #12]
 80430be:	697b      	ldr	r3, [r7, #20]
 80430c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80430c2:	4a84      	ldr	r2, [pc, #528]	; (80432d4 <UART_SetConfig+0x5cc>)
 80430c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80430c8:	b29b      	uxth	r3, r3
 80430ca:	2200      	movs	r2, #0
 80430cc:	603b      	str	r3, [r7, #0]
 80430ce:	607a      	str	r2, [r7, #4]
 80430d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80430d4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80430d8:	f7fd f8ae 	bl	8040238 <__aeabi_uldivmod>
 80430dc:	4602      	mov	r2, r0
 80430de:	460b      	mov	r3, r1
 80430e0:	4610      	mov	r0, r2
 80430e2:	4619      	mov	r1, r3
 80430e4:	f04f 0200 	mov.w	r2, #0
 80430e8:	f04f 0300 	mov.w	r3, #0
 80430ec:	020b      	lsls	r3, r1, #8
 80430ee:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80430f2:	0202      	lsls	r2, r0, #8
 80430f4:	6979      	ldr	r1, [r7, #20]
 80430f6:	6849      	ldr	r1, [r1, #4]
 80430f8:	0849      	lsrs	r1, r1, #1
 80430fa:	2000      	movs	r0, #0
 80430fc:	460c      	mov	r4, r1
 80430fe:	4605      	mov	r5, r0
 8043100:	eb12 0804 	adds.w	r8, r2, r4
 8043104:	eb43 0905 	adc.w	r9, r3, r5
 8043108:	697b      	ldr	r3, [r7, #20]
 804310a:	685b      	ldr	r3, [r3, #4]
 804310c:	2200      	movs	r2, #0
 804310e:	469a      	mov	sl, r3
 8043110:	4693      	mov	fp, r2
 8043112:	4652      	mov	r2, sl
 8043114:	465b      	mov	r3, fp
 8043116:	4640      	mov	r0, r8
 8043118:	4649      	mov	r1, r9
 804311a:	f7fd f88d 	bl	8040238 <__aeabi_uldivmod>
 804311e:	4602      	mov	r2, r0
 8043120:	460b      	mov	r3, r1
 8043122:	4613      	mov	r3, r2
 8043124:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8043126:	6a3b      	ldr	r3, [r7, #32]
 8043128:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 804312c:	d308      	bcc.n	8043140 <UART_SetConfig+0x438>
 804312e:	6a3b      	ldr	r3, [r7, #32]
 8043130:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043134:	d204      	bcs.n	8043140 <UART_SetConfig+0x438>
        {
          huart->Instance->BRR = usartdiv;
 8043136:	697b      	ldr	r3, [r7, #20]
 8043138:	681b      	ldr	r3, [r3, #0]
 804313a:	6a3a      	ldr	r2, [r7, #32]
 804313c:	60da      	str	r2, [r3, #12]
 804313e:	e0ce      	b.n	80432de <UART_SetConfig+0x5d6>
        }
        else
        {
          ret = HAL_ERROR;
 8043140:	2301      	movs	r3, #1
 8043142:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8043146:	e0ca      	b.n	80432de <UART_SetConfig+0x5d6>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8043148:	697b      	ldr	r3, [r7, #20]
 804314a:	69db      	ldr	r3, [r3, #28]
 804314c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8043150:	d166      	bne.n	8043220 <UART_SetConfig+0x518>
  {
    switch (clocksource)
 8043152:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043156:	2b08      	cmp	r3, #8
 8043158:	d827      	bhi.n	80431aa <UART_SetConfig+0x4a2>
 804315a:	a201      	add	r2, pc, #4	; (adr r2, 8043160 <UART_SetConfig+0x458>)
 804315c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8043160:	08043185 	.word	0x08043185
 8043164:	0804318d 	.word	0x0804318d
 8043168:	08043195 	.word	0x08043195
 804316c:	080431ab 	.word	0x080431ab
 8043170:	0804319b 	.word	0x0804319b
 8043174:	080431ab 	.word	0x080431ab
 8043178:	080431ab 	.word	0x080431ab
 804317c:	080431ab 	.word	0x080431ab
 8043180:	080431a3 	.word	0x080431a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043184:	f7fe fed4 	bl	8041f30 <HAL_RCC_GetPCLK1Freq>
 8043188:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804318a:	e014      	b.n	80431b6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804318c:	f7fe fee4 	bl	8041f58 <HAL_RCC_GetPCLK2Freq>
 8043190:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043192:	e010      	b.n	80431b6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043194:	4b4e      	ldr	r3, [pc, #312]	; (80432d0 <UART_SetConfig+0x5c8>)
 8043196:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043198:	e00d      	b.n	80431b6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804319a:	f7fe fe19 	bl	8041dd0 <HAL_RCC_GetSysClockFreq>
 804319e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80431a0:	e009      	b.n	80431b6 <UART_SetConfig+0x4ae>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80431a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80431a6:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80431a8:	e005      	b.n	80431b6 <UART_SetConfig+0x4ae>
      default:
        pclk = 0U;
 80431aa:	2300      	movs	r3, #0
 80431ac:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80431ae:	2301      	movs	r3, #1
 80431b0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80431b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80431b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80431b8:	2b00      	cmp	r3, #0
 80431ba:	f000 8090 	beq.w	80432de <UART_SetConfig+0x5d6>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80431be:	697b      	ldr	r3, [r7, #20]
 80431c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80431c2:	4a44      	ldr	r2, [pc, #272]	; (80432d4 <UART_SetConfig+0x5cc>)
 80431c4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80431c8:	461a      	mov	r2, r3
 80431ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80431cc:	fbb3 f3f2 	udiv	r3, r3, r2
 80431d0:	005a      	lsls	r2, r3, #1
 80431d2:	697b      	ldr	r3, [r7, #20]
 80431d4:	685b      	ldr	r3, [r3, #4]
 80431d6:	085b      	lsrs	r3, r3, #1
 80431d8:	441a      	add	r2, r3
 80431da:	697b      	ldr	r3, [r7, #20]
 80431dc:	685b      	ldr	r3, [r3, #4]
 80431de:	fbb2 f3f3 	udiv	r3, r2, r3
 80431e2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80431e4:	6a3b      	ldr	r3, [r7, #32]
 80431e6:	2b0f      	cmp	r3, #15
 80431e8:	d916      	bls.n	8043218 <UART_SetConfig+0x510>
 80431ea:	6a3b      	ldr	r3, [r7, #32]
 80431ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80431f0:	d212      	bcs.n	8043218 <UART_SetConfig+0x510>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80431f2:	6a3b      	ldr	r3, [r7, #32]
 80431f4:	b29b      	uxth	r3, r3
 80431f6:	f023 030f 	bic.w	r3, r3, #15
 80431fa:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80431fc:	6a3b      	ldr	r3, [r7, #32]
 80431fe:	085b      	lsrs	r3, r3, #1
 8043200:	b29b      	uxth	r3, r3
 8043202:	f003 0307 	and.w	r3, r3, #7
 8043206:	b29a      	uxth	r2, r3
 8043208:	8bfb      	ldrh	r3, [r7, #30]
 804320a:	4313      	orrs	r3, r2
 804320c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 804320e:	697b      	ldr	r3, [r7, #20]
 8043210:	681b      	ldr	r3, [r3, #0]
 8043212:	8bfa      	ldrh	r2, [r7, #30]
 8043214:	60da      	str	r2, [r3, #12]
 8043216:	e062      	b.n	80432de <UART_SetConfig+0x5d6>
      }
      else
      {
        ret = HAL_ERROR;
 8043218:	2301      	movs	r3, #1
 804321a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 804321e:	e05e      	b.n	80432de <UART_SetConfig+0x5d6>
      }
    }
  }
  else
  {
    switch (clocksource)
 8043220:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8043224:	2b08      	cmp	r3, #8
 8043226:	d828      	bhi.n	804327a <UART_SetConfig+0x572>
 8043228:	a201      	add	r2, pc, #4	; (adr r2, 8043230 <UART_SetConfig+0x528>)
 804322a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 804322e:	bf00      	nop
 8043230:	08043255 	.word	0x08043255
 8043234:	0804325d 	.word	0x0804325d
 8043238:	08043265 	.word	0x08043265
 804323c:	0804327b 	.word	0x0804327b
 8043240:	0804326b 	.word	0x0804326b
 8043244:	0804327b 	.word	0x0804327b
 8043248:	0804327b 	.word	0x0804327b
 804324c:	0804327b 	.word	0x0804327b
 8043250:	08043273 	.word	0x08043273
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8043254:	f7fe fe6c 	bl	8041f30 <HAL_RCC_GetPCLK1Freq>
 8043258:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 804325a:	e014      	b.n	8043286 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 804325c:	f7fe fe7c 	bl	8041f58 <HAL_RCC_GetPCLK2Freq>
 8043260:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043262:	e010      	b.n	8043286 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8043264:	4b1a      	ldr	r3, [pc, #104]	; (80432d0 <UART_SetConfig+0x5c8>)
 8043266:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043268:	e00d      	b.n	8043286 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 804326a:	f7fe fdb1 	bl	8041dd0 <HAL_RCC_GetSysClockFreq>
 804326e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8043270:	e009      	b.n	8043286 <UART_SetConfig+0x57e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8043272:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8043276:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8043278:	e005      	b.n	8043286 <UART_SetConfig+0x57e>
      default:
        pclk = 0U;
 804327a:	2300      	movs	r3, #0
 804327c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 804327e:	2301      	movs	r3, #1
 8043280:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8043284:	bf00      	nop
    }

    if (pclk != 0U)
 8043286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043288:	2b00      	cmp	r3, #0
 804328a:	d028      	beq.n	80432de <UART_SetConfig+0x5d6>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 804328c:	697b      	ldr	r3, [r7, #20]
 804328e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8043290:	4a10      	ldr	r2, [pc, #64]	; (80432d4 <UART_SetConfig+0x5cc>)
 8043292:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8043296:	461a      	mov	r2, r3
 8043298:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 804329a:	fbb3 f2f2 	udiv	r2, r3, r2
 804329e:	697b      	ldr	r3, [r7, #20]
 80432a0:	685b      	ldr	r3, [r3, #4]
 80432a2:	085b      	lsrs	r3, r3, #1
 80432a4:	441a      	add	r2, r3
 80432a6:	697b      	ldr	r3, [r7, #20]
 80432a8:	685b      	ldr	r3, [r3, #4]
 80432aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80432ae:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80432b0:	6a3b      	ldr	r3, [r7, #32]
 80432b2:	2b0f      	cmp	r3, #15
 80432b4:	d910      	bls.n	80432d8 <UART_SetConfig+0x5d0>
 80432b6:	6a3b      	ldr	r3, [r7, #32]
 80432b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80432bc:	d20c      	bcs.n	80432d8 <UART_SetConfig+0x5d0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80432be:	6a3b      	ldr	r3, [r7, #32]
 80432c0:	b29a      	uxth	r2, r3
 80432c2:	697b      	ldr	r3, [r7, #20]
 80432c4:	681b      	ldr	r3, [r3, #0]
 80432c6:	60da      	str	r2, [r3, #12]
 80432c8:	e009      	b.n	80432de <UART_SetConfig+0x5d6>
 80432ca:	bf00      	nop
 80432cc:	40008000 	.word	0x40008000
 80432d0:	00f42400 	.word	0x00f42400
 80432d4:	08044980 	.word	0x08044980
      }
      else
      {
        ret = HAL_ERROR;
 80432d8:	2301      	movs	r3, #1
 80432da:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80432de:	697b      	ldr	r3, [r7, #20]
 80432e0:	2201      	movs	r2, #1
 80432e2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80432e6:	697b      	ldr	r3, [r7, #20]
 80432e8:	2201      	movs	r2, #1
 80432ea:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80432ee:	697b      	ldr	r3, [r7, #20]
 80432f0:	2200      	movs	r2, #0
 80432f2:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80432f4:	697b      	ldr	r3, [r7, #20]
 80432f6:	2200      	movs	r2, #0
 80432f8:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80432fa:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80432fe:	4618      	mov	r0, r3
 8043300:	3730      	adds	r7, #48	; 0x30
 8043302:	46bd      	mov	sp, r7
 8043304:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08043308 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8043308:	b480      	push	{r7}
 804330a:	b083      	sub	sp, #12
 804330c:	af00      	add	r7, sp, #0
 804330e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8043310:	687b      	ldr	r3, [r7, #4]
 8043312:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043314:	f003 0301 	and.w	r3, r3, #1
 8043318:	2b00      	cmp	r3, #0
 804331a:	d00a      	beq.n	8043332 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 804331c:	687b      	ldr	r3, [r7, #4]
 804331e:	681b      	ldr	r3, [r3, #0]
 8043320:	685b      	ldr	r3, [r3, #4]
 8043322:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8043326:	687b      	ldr	r3, [r7, #4]
 8043328:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 804332a:	687b      	ldr	r3, [r7, #4]
 804332c:	681b      	ldr	r3, [r3, #0]
 804332e:	430a      	orrs	r2, r1
 8043330:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8043332:	687b      	ldr	r3, [r7, #4]
 8043334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043336:	f003 0302 	and.w	r3, r3, #2
 804333a:	2b00      	cmp	r3, #0
 804333c:	d00a      	beq.n	8043354 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 804333e:	687b      	ldr	r3, [r7, #4]
 8043340:	681b      	ldr	r3, [r3, #0]
 8043342:	685b      	ldr	r3, [r3, #4]
 8043344:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8043348:	687b      	ldr	r3, [r7, #4]
 804334a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 804334c:	687b      	ldr	r3, [r7, #4]
 804334e:	681b      	ldr	r3, [r3, #0]
 8043350:	430a      	orrs	r2, r1
 8043352:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8043354:	687b      	ldr	r3, [r7, #4]
 8043356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043358:	f003 0304 	and.w	r3, r3, #4
 804335c:	2b00      	cmp	r3, #0
 804335e:	d00a      	beq.n	8043376 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8043360:	687b      	ldr	r3, [r7, #4]
 8043362:	681b      	ldr	r3, [r3, #0]
 8043364:	685b      	ldr	r3, [r3, #4]
 8043366:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 804336a:	687b      	ldr	r3, [r7, #4]
 804336c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 804336e:	687b      	ldr	r3, [r7, #4]
 8043370:	681b      	ldr	r3, [r3, #0]
 8043372:	430a      	orrs	r2, r1
 8043374:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8043376:	687b      	ldr	r3, [r7, #4]
 8043378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804337a:	f003 0308 	and.w	r3, r3, #8
 804337e:	2b00      	cmp	r3, #0
 8043380:	d00a      	beq.n	8043398 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8043382:	687b      	ldr	r3, [r7, #4]
 8043384:	681b      	ldr	r3, [r3, #0]
 8043386:	685b      	ldr	r3, [r3, #4]
 8043388:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 804338c:	687b      	ldr	r3, [r7, #4]
 804338e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8043390:	687b      	ldr	r3, [r7, #4]
 8043392:	681b      	ldr	r3, [r3, #0]
 8043394:	430a      	orrs	r2, r1
 8043396:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8043398:	687b      	ldr	r3, [r7, #4]
 804339a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 804339c:	f003 0310 	and.w	r3, r3, #16
 80433a0:	2b00      	cmp	r3, #0
 80433a2:	d00a      	beq.n	80433ba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80433a4:	687b      	ldr	r3, [r7, #4]
 80433a6:	681b      	ldr	r3, [r3, #0]
 80433a8:	689b      	ldr	r3, [r3, #8]
 80433aa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80433ae:	687b      	ldr	r3, [r7, #4]
 80433b0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80433b2:	687b      	ldr	r3, [r7, #4]
 80433b4:	681b      	ldr	r3, [r3, #0]
 80433b6:	430a      	orrs	r2, r1
 80433b8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80433ba:	687b      	ldr	r3, [r7, #4]
 80433bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80433be:	f003 0320 	and.w	r3, r3, #32
 80433c2:	2b00      	cmp	r3, #0
 80433c4:	d00a      	beq.n	80433dc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80433c6:	687b      	ldr	r3, [r7, #4]
 80433c8:	681b      	ldr	r3, [r3, #0]
 80433ca:	689b      	ldr	r3, [r3, #8]
 80433cc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80433d0:	687b      	ldr	r3, [r7, #4]
 80433d2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80433d4:	687b      	ldr	r3, [r7, #4]
 80433d6:	681b      	ldr	r3, [r3, #0]
 80433d8:	430a      	orrs	r2, r1
 80433da:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80433dc:	687b      	ldr	r3, [r7, #4]
 80433de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80433e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80433e4:	2b00      	cmp	r3, #0
 80433e6:	d01a      	beq.n	804341e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80433e8:	687b      	ldr	r3, [r7, #4]
 80433ea:	681b      	ldr	r3, [r3, #0]
 80433ec:	685b      	ldr	r3, [r3, #4]
 80433ee:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80433f2:	687b      	ldr	r3, [r7, #4]
 80433f4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80433f6:	687b      	ldr	r3, [r7, #4]
 80433f8:	681b      	ldr	r3, [r3, #0]
 80433fa:	430a      	orrs	r2, r1
 80433fc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80433fe:	687b      	ldr	r3, [r7, #4]
 8043400:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8043402:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8043406:	d10a      	bne.n	804341e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8043408:	687b      	ldr	r3, [r7, #4]
 804340a:	681b      	ldr	r3, [r3, #0]
 804340c:	685b      	ldr	r3, [r3, #4]
 804340e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8043412:	687b      	ldr	r3, [r7, #4]
 8043414:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8043416:	687b      	ldr	r3, [r7, #4]
 8043418:	681b      	ldr	r3, [r3, #0]
 804341a:	430a      	orrs	r2, r1
 804341c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 804341e:	687b      	ldr	r3, [r7, #4]
 8043420:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8043422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8043426:	2b00      	cmp	r3, #0
 8043428:	d00a      	beq.n	8043440 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 804342a:	687b      	ldr	r3, [r7, #4]
 804342c:	681b      	ldr	r3, [r3, #0]
 804342e:	685b      	ldr	r3, [r3, #4]
 8043430:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8043434:	687b      	ldr	r3, [r7, #4]
 8043436:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8043438:	687b      	ldr	r3, [r7, #4]
 804343a:	681b      	ldr	r3, [r3, #0]
 804343c:	430a      	orrs	r2, r1
 804343e:	605a      	str	r2, [r3, #4]
  }
}
 8043440:	bf00      	nop
 8043442:	370c      	adds	r7, #12
 8043444:	46bd      	mov	sp, r7
 8043446:	f85d 7b04 	ldr.w	r7, [sp], #4
 804344a:	4770      	bx	lr

0804344c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 804344c:	b580      	push	{r7, lr}
 804344e:	b098      	sub	sp, #96	; 0x60
 8043450:	af02      	add	r7, sp, #8
 8043452:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8043454:	687b      	ldr	r3, [r7, #4]
 8043456:	2200      	movs	r2, #0
 8043458:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 804345c:	f7fd fb94 	bl	8040b88 <HAL_GetTick>
 8043460:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8043462:	687b      	ldr	r3, [r7, #4]
 8043464:	681b      	ldr	r3, [r3, #0]
 8043466:	681b      	ldr	r3, [r3, #0]
 8043468:	f003 0308 	and.w	r3, r3, #8
 804346c:	2b08      	cmp	r3, #8
 804346e:	d12f      	bne.n	80434d0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8043470:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8043474:	9300      	str	r3, [sp, #0]
 8043476:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8043478:	2200      	movs	r2, #0
 804347a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 804347e:	6878      	ldr	r0, [r7, #4]
 8043480:	f000 f88e 	bl	80435a0 <UART_WaitOnFlagUntilTimeout>
 8043484:	4603      	mov	r3, r0
 8043486:	2b00      	cmp	r3, #0
 8043488:	d022      	beq.n	80434d0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 804348a:	687b      	ldr	r3, [r7, #4]
 804348c:	681b      	ldr	r3, [r3, #0]
 804348e:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8043492:	e853 3f00 	ldrex	r3, [r3]
 8043496:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8043498:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804349a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 804349e:	653b      	str	r3, [r7, #80]	; 0x50
 80434a0:	687b      	ldr	r3, [r7, #4]
 80434a2:	681b      	ldr	r3, [r3, #0]
 80434a4:	461a      	mov	r2, r3
 80434a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80434a8:	647b      	str	r3, [r7, #68]	; 0x44
 80434aa:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80434ac:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80434ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80434b0:	e841 2300 	strex	r3, r2, [r1]
 80434b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80434b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80434b8:	2b00      	cmp	r3, #0
 80434ba:	d1e6      	bne.n	804348a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80434bc:	687b      	ldr	r3, [r7, #4]
 80434be:	2220      	movs	r2, #32
 80434c0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 80434c4:	687b      	ldr	r3, [r7, #4]
 80434c6:	2200      	movs	r2, #0
 80434c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80434cc:	2303      	movs	r3, #3
 80434ce:	e063      	b.n	8043598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80434d0:	687b      	ldr	r3, [r7, #4]
 80434d2:	681b      	ldr	r3, [r3, #0]
 80434d4:	681b      	ldr	r3, [r3, #0]
 80434d6:	f003 0304 	and.w	r3, r3, #4
 80434da:	2b04      	cmp	r3, #4
 80434dc:	d149      	bne.n	8043572 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80434de:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80434e2:	9300      	str	r3, [sp, #0]
 80434e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80434e6:	2200      	movs	r2, #0
 80434e8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80434ec:	6878      	ldr	r0, [r7, #4]
 80434ee:	f000 f857 	bl	80435a0 <UART_WaitOnFlagUntilTimeout>
 80434f2:	4603      	mov	r3, r0
 80434f4:	2b00      	cmp	r3, #0
 80434f6:	d03c      	beq.n	8043572 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80434f8:	687b      	ldr	r3, [r7, #4]
 80434fa:	681b      	ldr	r3, [r3, #0]
 80434fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80434fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8043500:	e853 3f00 	ldrex	r3, [r3]
 8043504:	623b      	str	r3, [r7, #32]
   return(result);
 8043506:	6a3b      	ldr	r3, [r7, #32]
 8043508:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804350c:	64fb      	str	r3, [r7, #76]	; 0x4c
 804350e:	687b      	ldr	r3, [r7, #4]
 8043510:	681b      	ldr	r3, [r3, #0]
 8043512:	461a      	mov	r2, r3
 8043514:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8043516:	633b      	str	r3, [r7, #48]	; 0x30
 8043518:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804351a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 804351c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 804351e:	e841 2300 	strex	r3, r2, [r1]
 8043522:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8043524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8043526:	2b00      	cmp	r3, #0
 8043528:	d1e6      	bne.n	80434f8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 804352a:	687b      	ldr	r3, [r7, #4]
 804352c:	681b      	ldr	r3, [r3, #0]
 804352e:	3308      	adds	r3, #8
 8043530:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8043532:	693b      	ldr	r3, [r7, #16]
 8043534:	e853 3f00 	ldrex	r3, [r3]
 8043538:	60fb      	str	r3, [r7, #12]
   return(result);
 804353a:	68fb      	ldr	r3, [r7, #12]
 804353c:	f023 0301 	bic.w	r3, r3, #1
 8043540:	64bb      	str	r3, [r7, #72]	; 0x48
 8043542:	687b      	ldr	r3, [r7, #4]
 8043544:	681b      	ldr	r3, [r3, #0]
 8043546:	3308      	adds	r3, #8
 8043548:	6cba      	ldr	r2, [r7, #72]	; 0x48
 804354a:	61fa      	str	r2, [r7, #28]
 804354c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804354e:	69b9      	ldr	r1, [r7, #24]
 8043550:	69fa      	ldr	r2, [r7, #28]
 8043552:	e841 2300 	strex	r3, r2, [r1]
 8043556:	617b      	str	r3, [r7, #20]
   return(result);
 8043558:	697b      	ldr	r3, [r7, #20]
 804355a:	2b00      	cmp	r3, #0
 804355c:	d1e5      	bne.n	804352a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 804355e:	687b      	ldr	r3, [r7, #4]
 8043560:	2220      	movs	r2, #32
 8043562:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8043566:	687b      	ldr	r3, [r7, #4]
 8043568:	2200      	movs	r2, #0
 804356a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 804356e:	2303      	movs	r3, #3
 8043570:	e012      	b.n	8043598 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8043572:	687b      	ldr	r3, [r7, #4]
 8043574:	2220      	movs	r2, #32
 8043576:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 804357a:	687b      	ldr	r3, [r7, #4]
 804357c:	2220      	movs	r2, #32
 804357e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043582:	687b      	ldr	r3, [r7, #4]
 8043584:	2200      	movs	r2, #0
 8043586:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8043588:	687b      	ldr	r3, [r7, #4]
 804358a:	2200      	movs	r2, #0
 804358c:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 804358e:	687b      	ldr	r3, [r7, #4]
 8043590:	2200      	movs	r2, #0
 8043592:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8043596:	2300      	movs	r3, #0
}
 8043598:	4618      	mov	r0, r3
 804359a:	3758      	adds	r7, #88	; 0x58
 804359c:	46bd      	mov	sp, r7
 804359e:	bd80      	pop	{r7, pc}

080435a0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80435a0:	b580      	push	{r7, lr}
 80435a2:	b084      	sub	sp, #16
 80435a4:	af00      	add	r7, sp, #0
 80435a6:	60f8      	str	r0, [r7, #12]
 80435a8:	60b9      	str	r1, [r7, #8]
 80435aa:	603b      	str	r3, [r7, #0]
 80435ac:	4613      	mov	r3, r2
 80435ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80435b0:	e049      	b.n	8043646 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80435b2:	69bb      	ldr	r3, [r7, #24]
 80435b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80435b8:	d045      	beq.n	8043646 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80435ba:	f7fd fae5 	bl	8040b88 <HAL_GetTick>
 80435be:	4602      	mov	r2, r0
 80435c0:	683b      	ldr	r3, [r7, #0]
 80435c2:	1ad3      	subs	r3, r2, r3
 80435c4:	69ba      	ldr	r2, [r7, #24]
 80435c6:	429a      	cmp	r2, r3
 80435c8:	d302      	bcc.n	80435d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80435ca:	69bb      	ldr	r3, [r7, #24]
 80435cc:	2b00      	cmp	r3, #0
 80435ce:	d101      	bne.n	80435d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80435d0:	2303      	movs	r3, #3
 80435d2:	e048      	b.n	8043666 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80435d4:	68fb      	ldr	r3, [r7, #12]
 80435d6:	681b      	ldr	r3, [r3, #0]
 80435d8:	681b      	ldr	r3, [r3, #0]
 80435da:	f003 0304 	and.w	r3, r3, #4
 80435de:	2b00      	cmp	r3, #0
 80435e0:	d031      	beq.n	8043646 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80435e2:	68fb      	ldr	r3, [r7, #12]
 80435e4:	681b      	ldr	r3, [r3, #0]
 80435e6:	69db      	ldr	r3, [r3, #28]
 80435e8:	f003 0308 	and.w	r3, r3, #8
 80435ec:	2b08      	cmp	r3, #8
 80435ee:	d110      	bne.n	8043612 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80435f0:	68fb      	ldr	r3, [r7, #12]
 80435f2:	681b      	ldr	r3, [r3, #0]
 80435f4:	2208      	movs	r2, #8
 80435f6:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80435f8:	68f8      	ldr	r0, [r7, #12]
 80435fa:	f000 f838 	bl	804366e <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80435fe:	68fb      	ldr	r3, [r7, #12]
 8043600:	2208      	movs	r2, #8
 8043602:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8043606:	68fb      	ldr	r3, [r7, #12]
 8043608:	2200      	movs	r2, #0
 804360a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 804360e:	2301      	movs	r3, #1
 8043610:	e029      	b.n	8043666 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8043612:	68fb      	ldr	r3, [r7, #12]
 8043614:	681b      	ldr	r3, [r3, #0]
 8043616:	69db      	ldr	r3, [r3, #28]
 8043618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 804361c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8043620:	d111      	bne.n	8043646 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8043622:	68fb      	ldr	r3, [r7, #12]
 8043624:	681b      	ldr	r3, [r3, #0]
 8043626:	f44f 6200 	mov.w	r2, #2048	; 0x800
 804362a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 804362c:	68f8      	ldr	r0, [r7, #12]
 804362e:	f000 f81e 	bl	804366e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8043632:	68fb      	ldr	r3, [r7, #12]
 8043634:	2220      	movs	r2, #32
 8043636:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 804363a:	68fb      	ldr	r3, [r7, #12]
 804363c:	2200      	movs	r2, #0
 804363e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8043642:	2303      	movs	r3, #3
 8043644:	e00f      	b.n	8043666 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8043646:	68fb      	ldr	r3, [r7, #12]
 8043648:	681b      	ldr	r3, [r3, #0]
 804364a:	69da      	ldr	r2, [r3, #28]
 804364c:	68bb      	ldr	r3, [r7, #8]
 804364e:	4013      	ands	r3, r2
 8043650:	68ba      	ldr	r2, [r7, #8]
 8043652:	429a      	cmp	r2, r3
 8043654:	bf0c      	ite	eq
 8043656:	2301      	moveq	r3, #1
 8043658:	2300      	movne	r3, #0
 804365a:	b2db      	uxtb	r3, r3
 804365c:	461a      	mov	r2, r3
 804365e:	79fb      	ldrb	r3, [r7, #7]
 8043660:	429a      	cmp	r2, r3
 8043662:	d0a6      	beq.n	80435b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8043664:	2300      	movs	r3, #0
}
 8043666:	4618      	mov	r0, r3
 8043668:	3710      	adds	r7, #16
 804366a:	46bd      	mov	sp, r7
 804366c:	bd80      	pop	{r7, pc}

0804366e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 804366e:	b480      	push	{r7}
 8043670:	b095      	sub	sp, #84	; 0x54
 8043672:	af00      	add	r7, sp, #0
 8043674:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8043676:	687b      	ldr	r3, [r7, #4]
 8043678:	681b      	ldr	r3, [r3, #0]
 804367a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 804367c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 804367e:	e853 3f00 	ldrex	r3, [r3]
 8043682:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8043684:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8043686:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 804368a:	64fb      	str	r3, [r7, #76]	; 0x4c
 804368c:	687b      	ldr	r3, [r7, #4]
 804368e:	681b      	ldr	r3, [r3, #0]
 8043690:	461a      	mov	r2, r3
 8043692:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8043694:	643b      	str	r3, [r7, #64]	; 0x40
 8043696:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8043698:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 804369a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 804369c:	e841 2300 	strex	r3, r2, [r1]
 80436a0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80436a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80436a4:	2b00      	cmp	r3, #0
 80436a6:	d1e6      	bne.n	8043676 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80436a8:	687b      	ldr	r3, [r7, #4]
 80436aa:	681b      	ldr	r3, [r3, #0]
 80436ac:	3308      	adds	r3, #8
 80436ae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80436b0:	6a3b      	ldr	r3, [r7, #32]
 80436b2:	e853 3f00 	ldrex	r3, [r3]
 80436b6:	61fb      	str	r3, [r7, #28]
   return(result);
 80436b8:	69fb      	ldr	r3, [r7, #28]
 80436ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80436be:	f023 0301 	bic.w	r3, r3, #1
 80436c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80436c4:	687b      	ldr	r3, [r7, #4]
 80436c6:	681b      	ldr	r3, [r3, #0]
 80436c8:	3308      	adds	r3, #8
 80436ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80436cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80436ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80436d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80436d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80436d4:	e841 2300 	strex	r3, r2, [r1]
 80436d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80436da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80436dc:	2b00      	cmp	r3, #0
 80436de:	d1e3      	bne.n	80436a8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80436e0:	687b      	ldr	r3, [r7, #4]
 80436e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80436e4:	2b01      	cmp	r3, #1
 80436e6:	d118      	bne.n	804371a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80436e8:	687b      	ldr	r3, [r7, #4]
 80436ea:	681b      	ldr	r3, [r3, #0]
 80436ec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80436ee:	68fb      	ldr	r3, [r7, #12]
 80436f0:	e853 3f00 	ldrex	r3, [r3]
 80436f4:	60bb      	str	r3, [r7, #8]
   return(result);
 80436f6:	68bb      	ldr	r3, [r7, #8]
 80436f8:	f023 0310 	bic.w	r3, r3, #16
 80436fc:	647b      	str	r3, [r7, #68]	; 0x44
 80436fe:	687b      	ldr	r3, [r7, #4]
 8043700:	681b      	ldr	r3, [r3, #0]
 8043702:	461a      	mov	r2, r3
 8043704:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8043706:	61bb      	str	r3, [r7, #24]
 8043708:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 804370a:	6979      	ldr	r1, [r7, #20]
 804370c:	69ba      	ldr	r2, [r7, #24]
 804370e:	e841 2300 	strex	r3, r2, [r1]
 8043712:	613b      	str	r3, [r7, #16]
   return(result);
 8043714:	693b      	ldr	r3, [r7, #16]
 8043716:	2b00      	cmp	r3, #0
 8043718:	d1e6      	bne.n	80436e8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 804371a:	687b      	ldr	r3, [r7, #4]
 804371c:	2220      	movs	r2, #32
 804371e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8043722:	687b      	ldr	r3, [r7, #4]
 8043724:	2200      	movs	r2, #0
 8043726:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8043728:	687b      	ldr	r3, [r7, #4]
 804372a:	2200      	movs	r2, #0
 804372c:	675a      	str	r2, [r3, #116]	; 0x74
}
 804372e:	bf00      	nop
 8043730:	3754      	adds	r7, #84	; 0x54
 8043732:	46bd      	mov	sp, r7
 8043734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043738:	4770      	bx	lr

0804373a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 804373a:	b480      	push	{r7}
 804373c:	b085      	sub	sp, #20
 804373e:	af00      	add	r7, sp, #0
 8043740:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043742:	687b      	ldr	r3, [r7, #4]
 8043744:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8043748:	2b01      	cmp	r3, #1
 804374a:	d101      	bne.n	8043750 <HAL_UARTEx_DisableFifoMode+0x16>
 804374c:	2302      	movs	r3, #2
 804374e:	e027      	b.n	80437a0 <HAL_UARTEx_DisableFifoMode+0x66>
 8043750:	687b      	ldr	r3, [r7, #4]
 8043752:	2201      	movs	r2, #1
 8043754:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8043758:	687b      	ldr	r3, [r7, #4]
 804375a:	2224      	movs	r2, #36	; 0x24
 804375c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043760:	687b      	ldr	r3, [r7, #4]
 8043762:	681b      	ldr	r3, [r3, #0]
 8043764:	681b      	ldr	r3, [r3, #0]
 8043766:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043768:	687b      	ldr	r3, [r7, #4]
 804376a:	681b      	ldr	r3, [r3, #0]
 804376c:	681a      	ldr	r2, [r3, #0]
 804376e:	687b      	ldr	r3, [r7, #4]
 8043770:	681b      	ldr	r3, [r3, #0]
 8043772:	f022 0201 	bic.w	r2, r2, #1
 8043776:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8043778:	68fb      	ldr	r3, [r7, #12]
 804377a:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 804377e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8043780:	687b      	ldr	r3, [r7, #4]
 8043782:	2200      	movs	r2, #0
 8043784:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043786:	687b      	ldr	r3, [r7, #4]
 8043788:	681b      	ldr	r3, [r3, #0]
 804378a:	68fa      	ldr	r2, [r7, #12]
 804378c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804378e:	687b      	ldr	r3, [r7, #4]
 8043790:	2220      	movs	r2, #32
 8043792:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043796:	687b      	ldr	r3, [r7, #4]
 8043798:	2200      	movs	r2, #0
 804379a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 804379e:	2300      	movs	r3, #0
}
 80437a0:	4618      	mov	r0, r3
 80437a2:	3714      	adds	r7, #20
 80437a4:	46bd      	mov	sp, r7
 80437a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80437aa:	4770      	bx	lr

080437ac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80437ac:	b580      	push	{r7, lr}
 80437ae:	b084      	sub	sp, #16
 80437b0:	af00      	add	r7, sp, #0
 80437b2:	6078      	str	r0, [r7, #4]
 80437b4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80437b6:	687b      	ldr	r3, [r7, #4]
 80437b8:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 80437bc:	2b01      	cmp	r3, #1
 80437be:	d101      	bne.n	80437c4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80437c0:	2302      	movs	r3, #2
 80437c2:	e02d      	b.n	8043820 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80437c4:	687b      	ldr	r3, [r7, #4]
 80437c6:	2201      	movs	r2, #1
 80437c8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80437cc:	687b      	ldr	r3, [r7, #4]
 80437ce:	2224      	movs	r2, #36	; 0x24
 80437d0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80437d4:	687b      	ldr	r3, [r7, #4]
 80437d6:	681b      	ldr	r3, [r3, #0]
 80437d8:	681b      	ldr	r3, [r3, #0]
 80437da:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80437dc:	687b      	ldr	r3, [r7, #4]
 80437de:	681b      	ldr	r3, [r3, #0]
 80437e0:	681a      	ldr	r2, [r3, #0]
 80437e2:	687b      	ldr	r3, [r7, #4]
 80437e4:	681b      	ldr	r3, [r3, #0]
 80437e6:	f022 0201 	bic.w	r2, r2, #1
 80437ea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80437ec:	687b      	ldr	r3, [r7, #4]
 80437ee:	681b      	ldr	r3, [r3, #0]
 80437f0:	689b      	ldr	r3, [r3, #8]
 80437f2:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80437f6:	687b      	ldr	r3, [r7, #4]
 80437f8:	681b      	ldr	r3, [r3, #0]
 80437fa:	683a      	ldr	r2, [r7, #0]
 80437fc:	430a      	orrs	r2, r1
 80437fe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8043800:	6878      	ldr	r0, [r7, #4]
 8043802:	f000 f84f 	bl	80438a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043806:	687b      	ldr	r3, [r7, #4]
 8043808:	681b      	ldr	r3, [r3, #0]
 804380a:	68fa      	ldr	r2, [r7, #12]
 804380c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804380e:	687b      	ldr	r3, [r7, #4]
 8043810:	2220      	movs	r2, #32
 8043812:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043816:	687b      	ldr	r3, [r7, #4]
 8043818:	2200      	movs	r2, #0
 804381a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 804381e:	2300      	movs	r3, #0
}
 8043820:	4618      	mov	r0, r3
 8043822:	3710      	adds	r7, #16
 8043824:	46bd      	mov	sp, r7
 8043826:	bd80      	pop	{r7, pc}

08043828 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8043828:	b580      	push	{r7, lr}
 804382a:	b084      	sub	sp, #16
 804382c:	af00      	add	r7, sp, #0
 804382e:	6078      	str	r0, [r7, #4]
 8043830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8043832:	687b      	ldr	r3, [r7, #4]
 8043834:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8043838:	2b01      	cmp	r3, #1
 804383a:	d101      	bne.n	8043840 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 804383c:	2302      	movs	r3, #2
 804383e:	e02d      	b.n	804389c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8043840:	687b      	ldr	r3, [r7, #4]
 8043842:	2201      	movs	r2, #1
 8043844:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8043848:	687b      	ldr	r3, [r7, #4]
 804384a:	2224      	movs	r2, #36	; 0x24
 804384c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8043850:	687b      	ldr	r3, [r7, #4]
 8043852:	681b      	ldr	r3, [r3, #0]
 8043854:	681b      	ldr	r3, [r3, #0]
 8043856:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8043858:	687b      	ldr	r3, [r7, #4]
 804385a:	681b      	ldr	r3, [r3, #0]
 804385c:	681a      	ldr	r2, [r3, #0]
 804385e:	687b      	ldr	r3, [r7, #4]
 8043860:	681b      	ldr	r3, [r3, #0]
 8043862:	f022 0201 	bic.w	r2, r2, #1
 8043866:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8043868:	687b      	ldr	r3, [r7, #4]
 804386a:	681b      	ldr	r3, [r3, #0]
 804386c:	689b      	ldr	r3, [r3, #8]
 804386e:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8043872:	687b      	ldr	r3, [r7, #4]
 8043874:	681b      	ldr	r3, [r3, #0]
 8043876:	683a      	ldr	r2, [r7, #0]
 8043878:	430a      	orrs	r2, r1
 804387a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 804387c:	6878      	ldr	r0, [r7, #4]
 804387e:	f000 f811 	bl	80438a4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8043882:	687b      	ldr	r3, [r7, #4]
 8043884:	681b      	ldr	r3, [r3, #0]
 8043886:	68fa      	ldr	r2, [r7, #12]
 8043888:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 804388a:	687b      	ldr	r3, [r7, #4]
 804388c:	2220      	movs	r2, #32
 804388e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8043892:	687b      	ldr	r3, [r7, #4]
 8043894:	2200      	movs	r2, #0
 8043896:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 804389a:	2300      	movs	r3, #0
}
 804389c:	4618      	mov	r0, r3
 804389e:	3710      	adds	r7, #16
 80438a0:	46bd      	mov	sp, r7
 80438a2:	bd80      	pop	{r7, pc}

080438a4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80438a4:	b480      	push	{r7}
 80438a6:	b085      	sub	sp, #20
 80438a8:	af00      	add	r7, sp, #0
 80438aa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80438ac:	687b      	ldr	r3, [r7, #4]
 80438ae:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80438b0:	2b00      	cmp	r3, #0
 80438b2:	d108      	bne.n	80438c6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80438b4:	687b      	ldr	r3, [r7, #4]
 80438b6:	2201      	movs	r2, #1
 80438b8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80438bc:	687b      	ldr	r3, [r7, #4]
 80438be:	2201      	movs	r2, #1
 80438c0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80438c4:	e031      	b.n	804392a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80438c6:	2308      	movs	r3, #8
 80438c8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80438ca:	2308      	movs	r3, #8
 80438cc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80438ce:	687b      	ldr	r3, [r7, #4]
 80438d0:	681b      	ldr	r3, [r3, #0]
 80438d2:	689b      	ldr	r3, [r3, #8]
 80438d4:	0e5b      	lsrs	r3, r3, #25
 80438d6:	b2db      	uxtb	r3, r3
 80438d8:	f003 0307 	and.w	r3, r3, #7
 80438dc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80438de:	687b      	ldr	r3, [r7, #4]
 80438e0:	681b      	ldr	r3, [r3, #0]
 80438e2:	689b      	ldr	r3, [r3, #8]
 80438e4:	0f5b      	lsrs	r3, r3, #29
 80438e6:	b2db      	uxtb	r3, r3
 80438e8:	f003 0307 	and.w	r3, r3, #7
 80438ec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80438ee:	7bbb      	ldrb	r3, [r7, #14]
 80438f0:	7b3a      	ldrb	r2, [r7, #12]
 80438f2:	4911      	ldr	r1, [pc, #68]	; (8043938 <UARTEx_SetNbDataToProcess+0x94>)
 80438f4:	5c8a      	ldrb	r2, [r1, r2]
 80438f6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80438fa:	7b3a      	ldrb	r2, [r7, #12]
 80438fc:	490f      	ldr	r1, [pc, #60]	; (804393c <UARTEx_SetNbDataToProcess+0x98>)
 80438fe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8043900:	fb93 f3f2 	sdiv	r3, r3, r2
 8043904:	b29a      	uxth	r2, r3
 8043906:	687b      	ldr	r3, [r7, #4]
 8043908:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804390c:	7bfb      	ldrb	r3, [r7, #15]
 804390e:	7b7a      	ldrb	r2, [r7, #13]
 8043910:	4909      	ldr	r1, [pc, #36]	; (8043938 <UARTEx_SetNbDataToProcess+0x94>)
 8043912:	5c8a      	ldrb	r2, [r1, r2]
 8043914:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8043918:	7b7a      	ldrb	r2, [r7, #13]
 804391a:	4908      	ldr	r1, [pc, #32]	; (804393c <UARTEx_SetNbDataToProcess+0x98>)
 804391c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 804391e:	fb93 f3f2 	sdiv	r3, r3, r2
 8043922:	b29a      	uxth	r2, r3
 8043924:	687b      	ldr	r3, [r7, #4]
 8043926:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 804392a:	bf00      	nop
 804392c:	3714      	adds	r7, #20
 804392e:	46bd      	mov	sp, r7
 8043930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8043934:	4770      	bx	lr
 8043936:	bf00      	nop
 8043938:	08044998 	.word	0x08044998
 804393c:	080449a0 	.word	0x080449a0

08043940 <__errno>:
 8043940:	4b01      	ldr	r3, [pc, #4]	; (8043948 <__errno+0x8>)
 8043942:	6818      	ldr	r0, [r3, #0]
 8043944:	4770      	bx	lr
 8043946:	bf00      	nop
 8043948:	2001800c 	.word	0x2001800c

0804394c <__libc_init_array>:
 804394c:	b570      	push	{r4, r5, r6, lr}
 804394e:	4d0d      	ldr	r5, [pc, #52]	; (8043984 <__libc_init_array+0x38>)
 8043950:	2600      	movs	r6, #0
 8043952:	4c0d      	ldr	r4, [pc, #52]	; (8043988 <__libc_init_array+0x3c>)
 8043954:	1b64      	subs	r4, r4, r5
 8043956:	10a4      	asrs	r4, r4, #2
 8043958:	42a6      	cmp	r6, r4
 804395a:	d109      	bne.n	8043970 <__libc_init_array+0x24>
 804395c:	4d0b      	ldr	r5, [pc, #44]	; (804398c <__libc_init_array+0x40>)
 804395e:	2600      	movs	r6, #0
 8043960:	4c0b      	ldr	r4, [pc, #44]	; (8043990 <__libc_init_array+0x44>)
 8043962:	f000 ffbb 	bl	80448dc <_init>
 8043966:	1b64      	subs	r4, r4, r5
 8043968:	10a4      	asrs	r4, r4, #2
 804396a:	42a6      	cmp	r6, r4
 804396c:	d105      	bne.n	804397a <__libc_init_array+0x2e>
 804396e:	bd70      	pop	{r4, r5, r6, pc}
 8043970:	f855 3b04 	ldr.w	r3, [r5], #4
 8043974:	3601      	adds	r6, #1
 8043976:	4798      	blx	r3
 8043978:	e7ee      	b.n	8043958 <__libc_init_array+0xc>
 804397a:	f855 3b04 	ldr.w	r3, [r5], #4
 804397e:	3601      	adds	r6, #1
 8043980:	4798      	blx	r3
 8043982:	e7f2      	b.n	804396a <__libc_init_array+0x1e>
 8043984:	08044a48 	.word	0x08044a48
 8043988:	08044a48 	.word	0x08044a48
 804398c:	08044a48 	.word	0x08044a48
 8043990:	08044a4c 	.word	0x08044a4c

08043994 <memset>:
 8043994:	4402      	add	r2, r0
 8043996:	4603      	mov	r3, r0
 8043998:	4293      	cmp	r3, r2
 804399a:	d100      	bne.n	804399e <memset+0xa>
 804399c:	4770      	bx	lr
 804399e:	f803 1b01 	strb.w	r1, [r3], #1
 80439a2:	e7f9      	b.n	8043998 <memset+0x4>

080439a4 <iprintf>:
 80439a4:	b40f      	push	{r0, r1, r2, r3}
 80439a6:	4b0a      	ldr	r3, [pc, #40]	; (80439d0 <iprintf+0x2c>)
 80439a8:	b513      	push	{r0, r1, r4, lr}
 80439aa:	681c      	ldr	r4, [r3, #0]
 80439ac:	b124      	cbz	r4, 80439b8 <iprintf+0x14>
 80439ae:	69a3      	ldr	r3, [r4, #24]
 80439b0:	b913      	cbnz	r3, 80439b8 <iprintf+0x14>
 80439b2:	4620      	mov	r0, r4
 80439b4:	f000 f866 	bl	8043a84 <__sinit>
 80439b8:	ab05      	add	r3, sp, #20
 80439ba:	9a04      	ldr	r2, [sp, #16]
 80439bc:	68a1      	ldr	r1, [r4, #8]
 80439be:	4620      	mov	r0, r4
 80439c0:	9301      	str	r3, [sp, #4]
 80439c2:	f000 f9bd 	bl	8043d40 <_vfiprintf_r>
 80439c6:	b002      	add	sp, #8
 80439c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80439cc:	b004      	add	sp, #16
 80439ce:	4770      	bx	lr
 80439d0:	2001800c 	.word	0x2001800c

080439d4 <std>:
 80439d4:	2300      	movs	r3, #0
 80439d6:	b510      	push	{r4, lr}
 80439d8:	4604      	mov	r4, r0
 80439da:	6083      	str	r3, [r0, #8]
 80439dc:	8181      	strh	r1, [r0, #12]
 80439de:	4619      	mov	r1, r3
 80439e0:	6643      	str	r3, [r0, #100]	; 0x64
 80439e2:	81c2      	strh	r2, [r0, #14]
 80439e4:	2208      	movs	r2, #8
 80439e6:	6183      	str	r3, [r0, #24]
 80439e8:	e9c0 3300 	strd	r3, r3, [r0]
 80439ec:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80439f0:	305c      	adds	r0, #92	; 0x5c
 80439f2:	f7ff ffcf 	bl	8043994 <memset>
 80439f6:	4b05      	ldr	r3, [pc, #20]	; (8043a0c <std+0x38>)
 80439f8:	6224      	str	r4, [r4, #32]
 80439fa:	6263      	str	r3, [r4, #36]	; 0x24
 80439fc:	4b04      	ldr	r3, [pc, #16]	; (8043a10 <std+0x3c>)
 80439fe:	62a3      	str	r3, [r4, #40]	; 0x28
 8043a00:	4b04      	ldr	r3, [pc, #16]	; (8043a14 <std+0x40>)
 8043a02:	62e3      	str	r3, [r4, #44]	; 0x2c
 8043a04:	4b04      	ldr	r3, [pc, #16]	; (8043a18 <std+0x44>)
 8043a06:	6323      	str	r3, [r4, #48]	; 0x30
 8043a08:	bd10      	pop	{r4, pc}
 8043a0a:	bf00      	nop
 8043a0c:	080442ed 	.word	0x080442ed
 8043a10:	0804430f 	.word	0x0804430f
 8043a14:	08044347 	.word	0x08044347
 8043a18:	0804436b 	.word	0x0804436b

08043a1c <_cleanup_r>:
 8043a1c:	4901      	ldr	r1, [pc, #4]	; (8043a24 <_cleanup_r+0x8>)
 8043a1e:	f000 b8af 	b.w	8043b80 <_fwalk_reent>
 8043a22:	bf00      	nop
 8043a24:	08044641 	.word	0x08044641

08043a28 <__sfmoreglue>:
 8043a28:	b570      	push	{r4, r5, r6, lr}
 8043a2a:	2268      	movs	r2, #104	; 0x68
 8043a2c:	1e4d      	subs	r5, r1, #1
 8043a2e:	460e      	mov	r6, r1
 8043a30:	4355      	muls	r5, r2
 8043a32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8043a36:	f000 f8e5 	bl	8043c04 <_malloc_r>
 8043a3a:	4604      	mov	r4, r0
 8043a3c:	b140      	cbz	r0, 8043a50 <__sfmoreglue+0x28>
 8043a3e:	2100      	movs	r1, #0
 8043a40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8043a44:	e9c0 1600 	strd	r1, r6, [r0]
 8043a48:	300c      	adds	r0, #12
 8043a4a:	60a0      	str	r0, [r4, #8]
 8043a4c:	f7ff ffa2 	bl	8043994 <memset>
 8043a50:	4620      	mov	r0, r4
 8043a52:	bd70      	pop	{r4, r5, r6, pc}

08043a54 <__sfp_lock_acquire>:
 8043a54:	4801      	ldr	r0, [pc, #4]	; (8043a5c <__sfp_lock_acquire+0x8>)
 8043a56:	f000 b8b3 	b.w	8043bc0 <__retarget_lock_acquire_recursive>
 8043a5a:	bf00      	nop
 8043a5c:	2001812d 	.word	0x2001812d

08043a60 <__sfp_lock_release>:
 8043a60:	4801      	ldr	r0, [pc, #4]	; (8043a68 <__sfp_lock_release+0x8>)
 8043a62:	f000 b8ae 	b.w	8043bc2 <__retarget_lock_release_recursive>
 8043a66:	bf00      	nop
 8043a68:	2001812d 	.word	0x2001812d

08043a6c <__sinit_lock_acquire>:
 8043a6c:	4801      	ldr	r0, [pc, #4]	; (8043a74 <__sinit_lock_acquire+0x8>)
 8043a6e:	f000 b8a7 	b.w	8043bc0 <__retarget_lock_acquire_recursive>
 8043a72:	bf00      	nop
 8043a74:	2001812e 	.word	0x2001812e

08043a78 <__sinit_lock_release>:
 8043a78:	4801      	ldr	r0, [pc, #4]	; (8043a80 <__sinit_lock_release+0x8>)
 8043a7a:	f000 b8a2 	b.w	8043bc2 <__retarget_lock_release_recursive>
 8043a7e:	bf00      	nop
 8043a80:	2001812e 	.word	0x2001812e

08043a84 <__sinit>:
 8043a84:	b510      	push	{r4, lr}
 8043a86:	4604      	mov	r4, r0
 8043a88:	f7ff fff0 	bl	8043a6c <__sinit_lock_acquire>
 8043a8c:	69a3      	ldr	r3, [r4, #24]
 8043a8e:	b11b      	cbz	r3, 8043a98 <__sinit+0x14>
 8043a90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8043a94:	f7ff bff0 	b.w	8043a78 <__sinit_lock_release>
 8043a98:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8043a9c:	6523      	str	r3, [r4, #80]	; 0x50
 8043a9e:	4620      	mov	r0, r4
 8043aa0:	4b12      	ldr	r3, [pc, #72]	; (8043aec <__sinit+0x68>)
 8043aa2:	4a13      	ldr	r2, [pc, #76]	; (8043af0 <__sinit+0x6c>)
 8043aa4:	681b      	ldr	r3, [r3, #0]
 8043aa6:	62a2      	str	r2, [r4, #40]	; 0x28
 8043aa8:	42a3      	cmp	r3, r4
 8043aaa:	bf04      	itt	eq
 8043aac:	2301      	moveq	r3, #1
 8043aae:	61a3      	streq	r3, [r4, #24]
 8043ab0:	f000 f820 	bl	8043af4 <__sfp>
 8043ab4:	6060      	str	r0, [r4, #4]
 8043ab6:	4620      	mov	r0, r4
 8043ab8:	f000 f81c 	bl	8043af4 <__sfp>
 8043abc:	60a0      	str	r0, [r4, #8]
 8043abe:	4620      	mov	r0, r4
 8043ac0:	f000 f818 	bl	8043af4 <__sfp>
 8043ac4:	2200      	movs	r2, #0
 8043ac6:	2104      	movs	r1, #4
 8043ac8:	60e0      	str	r0, [r4, #12]
 8043aca:	6860      	ldr	r0, [r4, #4]
 8043acc:	f7ff ff82 	bl	80439d4 <std>
 8043ad0:	2201      	movs	r2, #1
 8043ad2:	2109      	movs	r1, #9
 8043ad4:	68a0      	ldr	r0, [r4, #8]
 8043ad6:	f7ff ff7d 	bl	80439d4 <std>
 8043ada:	2202      	movs	r2, #2
 8043adc:	2112      	movs	r1, #18
 8043ade:	68e0      	ldr	r0, [r4, #12]
 8043ae0:	f7ff ff78 	bl	80439d4 <std>
 8043ae4:	2301      	movs	r3, #1
 8043ae6:	61a3      	str	r3, [r4, #24]
 8043ae8:	e7d2      	b.n	8043a90 <__sinit+0xc>
 8043aea:	bf00      	nop
 8043aec:	080449a8 	.word	0x080449a8
 8043af0:	08043a1d 	.word	0x08043a1d

08043af4 <__sfp>:
 8043af4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043af6:	4607      	mov	r7, r0
 8043af8:	f7ff ffac 	bl	8043a54 <__sfp_lock_acquire>
 8043afc:	4b1e      	ldr	r3, [pc, #120]	; (8043b78 <__sfp+0x84>)
 8043afe:	681e      	ldr	r6, [r3, #0]
 8043b00:	69b3      	ldr	r3, [r6, #24]
 8043b02:	b913      	cbnz	r3, 8043b0a <__sfp+0x16>
 8043b04:	4630      	mov	r0, r6
 8043b06:	f7ff ffbd 	bl	8043a84 <__sinit>
 8043b0a:	3648      	adds	r6, #72	; 0x48
 8043b0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8043b10:	3b01      	subs	r3, #1
 8043b12:	d503      	bpl.n	8043b1c <__sfp+0x28>
 8043b14:	6833      	ldr	r3, [r6, #0]
 8043b16:	b30b      	cbz	r3, 8043b5c <__sfp+0x68>
 8043b18:	6836      	ldr	r6, [r6, #0]
 8043b1a:	e7f7      	b.n	8043b0c <__sfp+0x18>
 8043b1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8043b20:	b9d5      	cbnz	r5, 8043b58 <__sfp+0x64>
 8043b22:	4b16      	ldr	r3, [pc, #88]	; (8043b7c <__sfp+0x88>)
 8043b24:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8043b28:	6665      	str	r5, [r4, #100]	; 0x64
 8043b2a:	60e3      	str	r3, [r4, #12]
 8043b2c:	f000 f847 	bl	8043bbe <__retarget_lock_init_recursive>
 8043b30:	f7ff ff96 	bl	8043a60 <__sfp_lock_release>
 8043b34:	2208      	movs	r2, #8
 8043b36:	4629      	mov	r1, r5
 8043b38:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8043b3c:	6025      	str	r5, [r4, #0]
 8043b3e:	61a5      	str	r5, [r4, #24]
 8043b40:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8043b44:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8043b48:	f7ff ff24 	bl	8043994 <memset>
 8043b4c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8043b50:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8043b54:	4620      	mov	r0, r4
 8043b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8043b58:	3468      	adds	r4, #104	; 0x68
 8043b5a:	e7d9      	b.n	8043b10 <__sfp+0x1c>
 8043b5c:	2104      	movs	r1, #4
 8043b5e:	4638      	mov	r0, r7
 8043b60:	f7ff ff62 	bl	8043a28 <__sfmoreglue>
 8043b64:	4604      	mov	r4, r0
 8043b66:	6030      	str	r0, [r6, #0]
 8043b68:	2800      	cmp	r0, #0
 8043b6a:	d1d5      	bne.n	8043b18 <__sfp+0x24>
 8043b6c:	f7ff ff78 	bl	8043a60 <__sfp_lock_release>
 8043b70:	230c      	movs	r3, #12
 8043b72:	603b      	str	r3, [r7, #0]
 8043b74:	e7ee      	b.n	8043b54 <__sfp+0x60>
 8043b76:	bf00      	nop
 8043b78:	080449a8 	.word	0x080449a8
 8043b7c:	ffff0001 	.word	0xffff0001

08043b80 <_fwalk_reent>:
 8043b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8043b84:	4606      	mov	r6, r0
 8043b86:	4688      	mov	r8, r1
 8043b88:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8043b8c:	2700      	movs	r7, #0
 8043b8e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8043b92:	f1b9 0901 	subs.w	r9, r9, #1
 8043b96:	d505      	bpl.n	8043ba4 <_fwalk_reent+0x24>
 8043b98:	6824      	ldr	r4, [r4, #0]
 8043b9a:	2c00      	cmp	r4, #0
 8043b9c:	d1f7      	bne.n	8043b8e <_fwalk_reent+0xe>
 8043b9e:	4638      	mov	r0, r7
 8043ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8043ba4:	89ab      	ldrh	r3, [r5, #12]
 8043ba6:	2b01      	cmp	r3, #1
 8043ba8:	d907      	bls.n	8043bba <_fwalk_reent+0x3a>
 8043baa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8043bae:	3301      	adds	r3, #1
 8043bb0:	d003      	beq.n	8043bba <_fwalk_reent+0x3a>
 8043bb2:	4629      	mov	r1, r5
 8043bb4:	4630      	mov	r0, r6
 8043bb6:	47c0      	blx	r8
 8043bb8:	4307      	orrs	r7, r0
 8043bba:	3568      	adds	r5, #104	; 0x68
 8043bbc:	e7e9      	b.n	8043b92 <_fwalk_reent+0x12>

08043bbe <__retarget_lock_init_recursive>:
 8043bbe:	4770      	bx	lr

08043bc0 <__retarget_lock_acquire_recursive>:
 8043bc0:	4770      	bx	lr

08043bc2 <__retarget_lock_release_recursive>:
 8043bc2:	4770      	bx	lr

08043bc4 <sbrk_aligned>:
 8043bc4:	b570      	push	{r4, r5, r6, lr}
 8043bc6:	4e0e      	ldr	r6, [pc, #56]	; (8043c00 <sbrk_aligned+0x3c>)
 8043bc8:	460c      	mov	r4, r1
 8043bca:	4605      	mov	r5, r0
 8043bcc:	6831      	ldr	r1, [r6, #0]
 8043bce:	b911      	cbnz	r1, 8043bd6 <sbrk_aligned+0x12>
 8043bd0:	f000 fb7c 	bl	80442cc <_sbrk_r>
 8043bd4:	6030      	str	r0, [r6, #0]
 8043bd6:	4621      	mov	r1, r4
 8043bd8:	4628      	mov	r0, r5
 8043bda:	f000 fb77 	bl	80442cc <_sbrk_r>
 8043bde:	1c43      	adds	r3, r0, #1
 8043be0:	d00a      	beq.n	8043bf8 <sbrk_aligned+0x34>
 8043be2:	1cc4      	adds	r4, r0, #3
 8043be4:	f024 0403 	bic.w	r4, r4, #3
 8043be8:	42a0      	cmp	r0, r4
 8043bea:	d007      	beq.n	8043bfc <sbrk_aligned+0x38>
 8043bec:	1a21      	subs	r1, r4, r0
 8043bee:	4628      	mov	r0, r5
 8043bf0:	f000 fb6c 	bl	80442cc <_sbrk_r>
 8043bf4:	3001      	adds	r0, #1
 8043bf6:	d101      	bne.n	8043bfc <sbrk_aligned+0x38>
 8043bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8043bfc:	4620      	mov	r0, r4
 8043bfe:	bd70      	pop	{r4, r5, r6, pc}
 8043c00:	20018134 	.word	0x20018134

08043c04 <_malloc_r>:
 8043c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8043c08:	1ccd      	adds	r5, r1, #3
 8043c0a:	4607      	mov	r7, r0
 8043c0c:	f025 0503 	bic.w	r5, r5, #3
 8043c10:	3508      	adds	r5, #8
 8043c12:	2d0c      	cmp	r5, #12
 8043c14:	bf38      	it	cc
 8043c16:	250c      	movcc	r5, #12
 8043c18:	2d00      	cmp	r5, #0
 8043c1a:	db01      	blt.n	8043c20 <_malloc_r+0x1c>
 8043c1c:	42a9      	cmp	r1, r5
 8043c1e:	d905      	bls.n	8043c2c <_malloc_r+0x28>
 8043c20:	230c      	movs	r3, #12
 8043c22:	2600      	movs	r6, #0
 8043c24:	603b      	str	r3, [r7, #0]
 8043c26:	4630      	mov	r0, r6
 8043c28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8043c2c:	4e2e      	ldr	r6, [pc, #184]	; (8043ce8 <_malloc_r+0xe4>)
 8043c2e:	f000 fdc9 	bl	80447c4 <__malloc_lock>
 8043c32:	6833      	ldr	r3, [r6, #0]
 8043c34:	461c      	mov	r4, r3
 8043c36:	bb34      	cbnz	r4, 8043c86 <_malloc_r+0x82>
 8043c38:	4629      	mov	r1, r5
 8043c3a:	4638      	mov	r0, r7
 8043c3c:	f7ff ffc2 	bl	8043bc4 <sbrk_aligned>
 8043c40:	1c43      	adds	r3, r0, #1
 8043c42:	4604      	mov	r4, r0
 8043c44:	d14d      	bne.n	8043ce2 <_malloc_r+0xde>
 8043c46:	6834      	ldr	r4, [r6, #0]
 8043c48:	4626      	mov	r6, r4
 8043c4a:	2e00      	cmp	r6, #0
 8043c4c:	d140      	bne.n	8043cd0 <_malloc_r+0xcc>
 8043c4e:	6823      	ldr	r3, [r4, #0]
 8043c50:	4631      	mov	r1, r6
 8043c52:	4638      	mov	r0, r7
 8043c54:	eb04 0803 	add.w	r8, r4, r3
 8043c58:	f000 fb38 	bl	80442cc <_sbrk_r>
 8043c5c:	4580      	cmp	r8, r0
 8043c5e:	d13a      	bne.n	8043cd6 <_malloc_r+0xd2>
 8043c60:	6821      	ldr	r1, [r4, #0]
 8043c62:	3503      	adds	r5, #3
 8043c64:	4638      	mov	r0, r7
 8043c66:	1a6d      	subs	r5, r5, r1
 8043c68:	f025 0503 	bic.w	r5, r5, #3
 8043c6c:	3508      	adds	r5, #8
 8043c6e:	2d0c      	cmp	r5, #12
 8043c70:	bf38      	it	cc
 8043c72:	250c      	movcc	r5, #12
 8043c74:	4629      	mov	r1, r5
 8043c76:	f7ff ffa5 	bl	8043bc4 <sbrk_aligned>
 8043c7a:	3001      	adds	r0, #1
 8043c7c:	d02b      	beq.n	8043cd6 <_malloc_r+0xd2>
 8043c7e:	6823      	ldr	r3, [r4, #0]
 8043c80:	442b      	add	r3, r5
 8043c82:	6023      	str	r3, [r4, #0]
 8043c84:	e00e      	b.n	8043ca4 <_malloc_r+0xa0>
 8043c86:	6822      	ldr	r2, [r4, #0]
 8043c88:	1b52      	subs	r2, r2, r5
 8043c8a:	d41e      	bmi.n	8043cca <_malloc_r+0xc6>
 8043c8c:	2a0b      	cmp	r2, #11
 8043c8e:	d916      	bls.n	8043cbe <_malloc_r+0xba>
 8043c90:	1961      	adds	r1, r4, r5
 8043c92:	42a3      	cmp	r3, r4
 8043c94:	6025      	str	r5, [r4, #0]
 8043c96:	bf18      	it	ne
 8043c98:	6059      	strne	r1, [r3, #4]
 8043c9a:	6863      	ldr	r3, [r4, #4]
 8043c9c:	bf08      	it	eq
 8043c9e:	6031      	streq	r1, [r6, #0]
 8043ca0:	5162      	str	r2, [r4, r5]
 8043ca2:	604b      	str	r3, [r1, #4]
 8043ca4:	f104 060b 	add.w	r6, r4, #11
 8043ca8:	4638      	mov	r0, r7
 8043caa:	f000 fd91 	bl	80447d0 <__malloc_unlock>
 8043cae:	1d23      	adds	r3, r4, #4
 8043cb0:	f026 0607 	bic.w	r6, r6, #7
 8043cb4:	1af2      	subs	r2, r6, r3
 8043cb6:	d0b6      	beq.n	8043c26 <_malloc_r+0x22>
 8043cb8:	1b9b      	subs	r3, r3, r6
 8043cba:	50a3      	str	r3, [r4, r2]
 8043cbc:	e7b3      	b.n	8043c26 <_malloc_r+0x22>
 8043cbe:	6862      	ldr	r2, [r4, #4]
 8043cc0:	42a3      	cmp	r3, r4
 8043cc2:	bf0c      	ite	eq
 8043cc4:	6032      	streq	r2, [r6, #0]
 8043cc6:	605a      	strne	r2, [r3, #4]
 8043cc8:	e7ec      	b.n	8043ca4 <_malloc_r+0xa0>
 8043cca:	4623      	mov	r3, r4
 8043ccc:	6864      	ldr	r4, [r4, #4]
 8043cce:	e7b2      	b.n	8043c36 <_malloc_r+0x32>
 8043cd0:	4634      	mov	r4, r6
 8043cd2:	6876      	ldr	r6, [r6, #4]
 8043cd4:	e7b9      	b.n	8043c4a <_malloc_r+0x46>
 8043cd6:	230c      	movs	r3, #12
 8043cd8:	4638      	mov	r0, r7
 8043cda:	603b      	str	r3, [r7, #0]
 8043cdc:	f000 fd78 	bl	80447d0 <__malloc_unlock>
 8043ce0:	e7a1      	b.n	8043c26 <_malloc_r+0x22>
 8043ce2:	6025      	str	r5, [r4, #0]
 8043ce4:	e7de      	b.n	8043ca4 <_malloc_r+0xa0>
 8043ce6:	bf00      	nop
 8043ce8:	20018130 	.word	0x20018130

08043cec <__sfputc_r>:
 8043cec:	6893      	ldr	r3, [r2, #8]
 8043cee:	3b01      	subs	r3, #1
 8043cf0:	2b00      	cmp	r3, #0
 8043cf2:	6093      	str	r3, [r2, #8]
 8043cf4:	b410      	push	{r4}
 8043cf6:	da08      	bge.n	8043d0a <__sfputc_r+0x1e>
 8043cf8:	6994      	ldr	r4, [r2, #24]
 8043cfa:	42a3      	cmp	r3, r4
 8043cfc:	db01      	blt.n	8043d02 <__sfputc_r+0x16>
 8043cfe:	290a      	cmp	r1, #10
 8043d00:	d103      	bne.n	8043d0a <__sfputc_r+0x1e>
 8043d02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8043d06:	f000 bb35 	b.w	8044374 <__swbuf_r>
 8043d0a:	6813      	ldr	r3, [r2, #0]
 8043d0c:	1c58      	adds	r0, r3, #1
 8043d0e:	6010      	str	r0, [r2, #0]
 8043d10:	4608      	mov	r0, r1
 8043d12:	7019      	strb	r1, [r3, #0]
 8043d14:	f85d 4b04 	ldr.w	r4, [sp], #4
 8043d18:	4770      	bx	lr

08043d1a <__sfputs_r>:
 8043d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8043d1c:	4606      	mov	r6, r0
 8043d1e:	460f      	mov	r7, r1
 8043d20:	4614      	mov	r4, r2
 8043d22:	18d5      	adds	r5, r2, r3
 8043d24:	42ac      	cmp	r4, r5
 8043d26:	d101      	bne.n	8043d2c <__sfputs_r+0x12>
 8043d28:	2000      	movs	r0, #0
 8043d2a:	e007      	b.n	8043d3c <__sfputs_r+0x22>
 8043d2c:	463a      	mov	r2, r7
 8043d2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043d32:	4630      	mov	r0, r6
 8043d34:	f7ff ffda 	bl	8043cec <__sfputc_r>
 8043d38:	1c43      	adds	r3, r0, #1
 8043d3a:	d1f3      	bne.n	8043d24 <__sfputs_r+0xa>
 8043d3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08043d40 <_vfiprintf_r>:
 8043d40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8043d44:	460d      	mov	r5, r1
 8043d46:	b09d      	sub	sp, #116	; 0x74
 8043d48:	4614      	mov	r4, r2
 8043d4a:	4698      	mov	r8, r3
 8043d4c:	4606      	mov	r6, r0
 8043d4e:	b118      	cbz	r0, 8043d58 <_vfiprintf_r+0x18>
 8043d50:	6983      	ldr	r3, [r0, #24]
 8043d52:	b90b      	cbnz	r3, 8043d58 <_vfiprintf_r+0x18>
 8043d54:	f7ff fe96 	bl	8043a84 <__sinit>
 8043d58:	4b89      	ldr	r3, [pc, #548]	; (8043f80 <_vfiprintf_r+0x240>)
 8043d5a:	429d      	cmp	r5, r3
 8043d5c:	d11b      	bne.n	8043d96 <_vfiprintf_r+0x56>
 8043d5e:	6875      	ldr	r5, [r6, #4]
 8043d60:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8043d62:	07d9      	lsls	r1, r3, #31
 8043d64:	d405      	bmi.n	8043d72 <_vfiprintf_r+0x32>
 8043d66:	89ab      	ldrh	r3, [r5, #12]
 8043d68:	059a      	lsls	r2, r3, #22
 8043d6a:	d402      	bmi.n	8043d72 <_vfiprintf_r+0x32>
 8043d6c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043d6e:	f7ff ff27 	bl	8043bc0 <__retarget_lock_acquire_recursive>
 8043d72:	89ab      	ldrh	r3, [r5, #12]
 8043d74:	071b      	lsls	r3, r3, #28
 8043d76:	d501      	bpl.n	8043d7c <_vfiprintf_r+0x3c>
 8043d78:	692b      	ldr	r3, [r5, #16]
 8043d7a:	b9eb      	cbnz	r3, 8043db8 <_vfiprintf_r+0x78>
 8043d7c:	4629      	mov	r1, r5
 8043d7e:	4630      	mov	r0, r6
 8043d80:	f000 fb5c 	bl	804443c <__swsetup_r>
 8043d84:	b1c0      	cbz	r0, 8043db8 <_vfiprintf_r+0x78>
 8043d86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8043d88:	07dc      	lsls	r4, r3, #31
 8043d8a:	d50e      	bpl.n	8043daa <_vfiprintf_r+0x6a>
 8043d8c:	f04f 30ff 	mov.w	r0, #4294967295
 8043d90:	b01d      	add	sp, #116	; 0x74
 8043d92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8043d96:	4b7b      	ldr	r3, [pc, #492]	; (8043f84 <_vfiprintf_r+0x244>)
 8043d98:	429d      	cmp	r5, r3
 8043d9a:	d101      	bne.n	8043da0 <_vfiprintf_r+0x60>
 8043d9c:	68b5      	ldr	r5, [r6, #8]
 8043d9e:	e7df      	b.n	8043d60 <_vfiprintf_r+0x20>
 8043da0:	4b79      	ldr	r3, [pc, #484]	; (8043f88 <_vfiprintf_r+0x248>)
 8043da2:	429d      	cmp	r5, r3
 8043da4:	bf08      	it	eq
 8043da6:	68f5      	ldreq	r5, [r6, #12]
 8043da8:	e7da      	b.n	8043d60 <_vfiprintf_r+0x20>
 8043daa:	89ab      	ldrh	r3, [r5, #12]
 8043dac:	0598      	lsls	r0, r3, #22
 8043dae:	d4ed      	bmi.n	8043d8c <_vfiprintf_r+0x4c>
 8043db0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043db2:	f7ff ff06 	bl	8043bc2 <__retarget_lock_release_recursive>
 8043db6:	e7e9      	b.n	8043d8c <_vfiprintf_r+0x4c>
 8043db8:	2300      	movs	r3, #0
 8043dba:	f8cd 800c 	str.w	r8, [sp, #12]
 8043dbe:	f04f 0901 	mov.w	r9, #1
 8043dc2:	f8df 81c8 	ldr.w	r8, [pc, #456]	; 8043f8c <_vfiprintf_r+0x24c>
 8043dc6:	9309      	str	r3, [sp, #36]	; 0x24
 8043dc8:	2320      	movs	r3, #32
 8043dca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8043dce:	2330      	movs	r3, #48	; 0x30
 8043dd0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8043dd4:	4623      	mov	r3, r4
 8043dd6:	469a      	mov	sl, r3
 8043dd8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8043ddc:	b10a      	cbz	r2, 8043de2 <_vfiprintf_r+0xa2>
 8043dde:	2a25      	cmp	r2, #37	; 0x25
 8043de0:	d1f9      	bne.n	8043dd6 <_vfiprintf_r+0x96>
 8043de2:	ebba 0b04 	subs.w	fp, sl, r4
 8043de6:	d00b      	beq.n	8043e00 <_vfiprintf_r+0xc0>
 8043de8:	465b      	mov	r3, fp
 8043dea:	4622      	mov	r2, r4
 8043dec:	4629      	mov	r1, r5
 8043dee:	4630      	mov	r0, r6
 8043df0:	f7ff ff93 	bl	8043d1a <__sfputs_r>
 8043df4:	3001      	adds	r0, #1
 8043df6:	f000 80aa 	beq.w	8043f4e <_vfiprintf_r+0x20e>
 8043dfa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8043dfc:	445a      	add	r2, fp
 8043dfe:	9209      	str	r2, [sp, #36]	; 0x24
 8043e00:	f89a 3000 	ldrb.w	r3, [sl]
 8043e04:	2b00      	cmp	r3, #0
 8043e06:	f000 80a2 	beq.w	8043f4e <_vfiprintf_r+0x20e>
 8043e0a:	2300      	movs	r3, #0
 8043e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8043e10:	f10a 0a01 	add.w	sl, sl, #1
 8043e14:	9304      	str	r3, [sp, #16]
 8043e16:	9307      	str	r3, [sp, #28]
 8043e18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8043e1c:	931a      	str	r3, [sp, #104]	; 0x68
 8043e1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8043e22:	4654      	mov	r4, sl
 8043e24:	2205      	movs	r2, #5
 8043e26:	4859      	ldr	r0, [pc, #356]	; (8043f8c <_vfiprintf_r+0x24c>)
 8043e28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043e2c:	f000 fcbc 	bl	80447a8 <memchr>
 8043e30:	9a04      	ldr	r2, [sp, #16]
 8043e32:	b9d8      	cbnz	r0, 8043e6c <_vfiprintf_r+0x12c>
 8043e34:	06d1      	lsls	r1, r2, #27
 8043e36:	bf44      	itt	mi
 8043e38:	2320      	movmi	r3, #32
 8043e3a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8043e3e:	0713      	lsls	r3, r2, #28
 8043e40:	bf44      	itt	mi
 8043e42:	232b      	movmi	r3, #43	; 0x2b
 8043e44:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8043e48:	f89a 3000 	ldrb.w	r3, [sl]
 8043e4c:	2b2a      	cmp	r3, #42	; 0x2a
 8043e4e:	d015      	beq.n	8043e7c <_vfiprintf_r+0x13c>
 8043e50:	9a07      	ldr	r2, [sp, #28]
 8043e52:	4654      	mov	r4, sl
 8043e54:	2000      	movs	r0, #0
 8043e56:	f04f 0c0a 	mov.w	ip, #10
 8043e5a:	4621      	mov	r1, r4
 8043e5c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8043e60:	3b30      	subs	r3, #48	; 0x30
 8043e62:	2b09      	cmp	r3, #9
 8043e64:	d94e      	bls.n	8043f04 <_vfiprintf_r+0x1c4>
 8043e66:	b1b0      	cbz	r0, 8043e96 <_vfiprintf_r+0x156>
 8043e68:	9207      	str	r2, [sp, #28]
 8043e6a:	e014      	b.n	8043e96 <_vfiprintf_r+0x156>
 8043e6c:	eba0 0308 	sub.w	r3, r0, r8
 8043e70:	46a2      	mov	sl, r4
 8043e72:	fa09 f303 	lsl.w	r3, r9, r3
 8043e76:	4313      	orrs	r3, r2
 8043e78:	9304      	str	r3, [sp, #16]
 8043e7a:	e7d2      	b.n	8043e22 <_vfiprintf_r+0xe2>
 8043e7c:	9b03      	ldr	r3, [sp, #12]
 8043e7e:	1d19      	adds	r1, r3, #4
 8043e80:	681b      	ldr	r3, [r3, #0]
 8043e82:	2b00      	cmp	r3, #0
 8043e84:	9103      	str	r1, [sp, #12]
 8043e86:	bfbb      	ittet	lt
 8043e88:	425b      	neglt	r3, r3
 8043e8a:	f042 0202 	orrlt.w	r2, r2, #2
 8043e8e:	9307      	strge	r3, [sp, #28]
 8043e90:	9307      	strlt	r3, [sp, #28]
 8043e92:	bfb8      	it	lt
 8043e94:	9204      	strlt	r2, [sp, #16]
 8043e96:	7823      	ldrb	r3, [r4, #0]
 8043e98:	2b2e      	cmp	r3, #46	; 0x2e
 8043e9a:	d10c      	bne.n	8043eb6 <_vfiprintf_r+0x176>
 8043e9c:	7863      	ldrb	r3, [r4, #1]
 8043e9e:	2b2a      	cmp	r3, #42	; 0x2a
 8043ea0:	d135      	bne.n	8043f0e <_vfiprintf_r+0x1ce>
 8043ea2:	9b03      	ldr	r3, [sp, #12]
 8043ea4:	3402      	adds	r4, #2
 8043ea6:	1d1a      	adds	r2, r3, #4
 8043ea8:	681b      	ldr	r3, [r3, #0]
 8043eaa:	2b00      	cmp	r3, #0
 8043eac:	9203      	str	r2, [sp, #12]
 8043eae:	bfb8      	it	lt
 8043eb0:	f04f 33ff 	movlt.w	r3, #4294967295
 8043eb4:	9305      	str	r3, [sp, #20]
 8043eb6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8043f9c <_vfiprintf_r+0x25c>
 8043eba:	2203      	movs	r2, #3
 8043ebc:	7821      	ldrb	r1, [r4, #0]
 8043ebe:	4650      	mov	r0, sl
 8043ec0:	f000 fc72 	bl	80447a8 <memchr>
 8043ec4:	b140      	cbz	r0, 8043ed8 <_vfiprintf_r+0x198>
 8043ec6:	2340      	movs	r3, #64	; 0x40
 8043ec8:	eba0 000a 	sub.w	r0, r0, sl
 8043ecc:	3401      	adds	r4, #1
 8043ece:	fa03 f000 	lsl.w	r0, r3, r0
 8043ed2:	9b04      	ldr	r3, [sp, #16]
 8043ed4:	4303      	orrs	r3, r0
 8043ed6:	9304      	str	r3, [sp, #16]
 8043ed8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8043edc:	2206      	movs	r2, #6
 8043ede:	482c      	ldr	r0, [pc, #176]	; (8043f90 <_vfiprintf_r+0x250>)
 8043ee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8043ee4:	f000 fc60 	bl	80447a8 <memchr>
 8043ee8:	2800      	cmp	r0, #0
 8043eea:	d03f      	beq.n	8043f6c <_vfiprintf_r+0x22c>
 8043eec:	4b29      	ldr	r3, [pc, #164]	; (8043f94 <_vfiprintf_r+0x254>)
 8043eee:	bb1b      	cbnz	r3, 8043f38 <_vfiprintf_r+0x1f8>
 8043ef0:	9b03      	ldr	r3, [sp, #12]
 8043ef2:	3307      	adds	r3, #7
 8043ef4:	f023 0307 	bic.w	r3, r3, #7
 8043ef8:	3308      	adds	r3, #8
 8043efa:	9303      	str	r3, [sp, #12]
 8043efc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8043efe:	443b      	add	r3, r7
 8043f00:	9309      	str	r3, [sp, #36]	; 0x24
 8043f02:	e767      	b.n	8043dd4 <_vfiprintf_r+0x94>
 8043f04:	fb0c 3202 	mla	r2, ip, r2, r3
 8043f08:	460c      	mov	r4, r1
 8043f0a:	2001      	movs	r0, #1
 8043f0c:	e7a5      	b.n	8043e5a <_vfiprintf_r+0x11a>
 8043f0e:	2300      	movs	r3, #0
 8043f10:	3401      	adds	r4, #1
 8043f12:	f04f 0c0a 	mov.w	ip, #10
 8043f16:	4619      	mov	r1, r3
 8043f18:	9305      	str	r3, [sp, #20]
 8043f1a:	4620      	mov	r0, r4
 8043f1c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8043f20:	3a30      	subs	r2, #48	; 0x30
 8043f22:	2a09      	cmp	r2, #9
 8043f24:	d903      	bls.n	8043f2e <_vfiprintf_r+0x1ee>
 8043f26:	2b00      	cmp	r3, #0
 8043f28:	d0c5      	beq.n	8043eb6 <_vfiprintf_r+0x176>
 8043f2a:	9105      	str	r1, [sp, #20]
 8043f2c:	e7c3      	b.n	8043eb6 <_vfiprintf_r+0x176>
 8043f2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8043f32:	4604      	mov	r4, r0
 8043f34:	2301      	movs	r3, #1
 8043f36:	e7f0      	b.n	8043f1a <_vfiprintf_r+0x1da>
 8043f38:	ab03      	add	r3, sp, #12
 8043f3a:	462a      	mov	r2, r5
 8043f3c:	a904      	add	r1, sp, #16
 8043f3e:	4630      	mov	r0, r6
 8043f40:	9300      	str	r3, [sp, #0]
 8043f42:	4b15      	ldr	r3, [pc, #84]	; (8043f98 <_vfiprintf_r+0x258>)
 8043f44:	e000      	b.n	8043f48 <_vfiprintf_r+0x208>
 8043f46:	bf00      	nop
 8043f48:	4607      	mov	r7, r0
 8043f4a:	1c78      	adds	r0, r7, #1
 8043f4c:	d1d6      	bne.n	8043efc <_vfiprintf_r+0x1bc>
 8043f4e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8043f50:	07d9      	lsls	r1, r3, #31
 8043f52:	d405      	bmi.n	8043f60 <_vfiprintf_r+0x220>
 8043f54:	89ab      	ldrh	r3, [r5, #12]
 8043f56:	059a      	lsls	r2, r3, #22
 8043f58:	d402      	bmi.n	8043f60 <_vfiprintf_r+0x220>
 8043f5a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8043f5c:	f7ff fe31 	bl	8043bc2 <__retarget_lock_release_recursive>
 8043f60:	89ab      	ldrh	r3, [r5, #12]
 8043f62:	065b      	lsls	r3, r3, #25
 8043f64:	f53f af12 	bmi.w	8043d8c <_vfiprintf_r+0x4c>
 8043f68:	9809      	ldr	r0, [sp, #36]	; 0x24
 8043f6a:	e711      	b.n	8043d90 <_vfiprintf_r+0x50>
 8043f6c:	ab03      	add	r3, sp, #12
 8043f6e:	462a      	mov	r2, r5
 8043f70:	a904      	add	r1, sp, #16
 8043f72:	4630      	mov	r0, r6
 8043f74:	9300      	str	r3, [sp, #0]
 8043f76:	4b08      	ldr	r3, [pc, #32]	; (8043f98 <_vfiprintf_r+0x258>)
 8043f78:	f000 f882 	bl	8044080 <_printf_i>
 8043f7c:	e7e4      	b.n	8043f48 <_vfiprintf_r+0x208>
 8043f7e:	bf00      	nop
 8043f80:	080449cc 	.word	0x080449cc
 8043f84:	080449ec 	.word	0x080449ec
 8043f88:	080449ac 	.word	0x080449ac
 8043f8c:	08044a0c 	.word	0x08044a0c
 8043f90:	08044a16 	.word	0x08044a16
 8043f94:	00000000 	.word	0x00000000
 8043f98:	08043d1b 	.word	0x08043d1b
 8043f9c:	08044a12 	.word	0x08044a12

08043fa0 <_printf_common>:
 8043fa0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8043fa4:	4616      	mov	r6, r2
 8043fa6:	4699      	mov	r9, r3
 8043fa8:	688a      	ldr	r2, [r1, #8]
 8043faa:	4607      	mov	r7, r0
 8043fac:	690b      	ldr	r3, [r1, #16]
 8043fae:	460c      	mov	r4, r1
 8043fb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8043fb4:	4293      	cmp	r3, r2
 8043fb6:	bfb8      	it	lt
 8043fb8:	4613      	movlt	r3, r2
 8043fba:	6033      	str	r3, [r6, #0]
 8043fbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8043fc0:	b10a      	cbz	r2, 8043fc6 <_printf_common+0x26>
 8043fc2:	3301      	adds	r3, #1
 8043fc4:	6033      	str	r3, [r6, #0]
 8043fc6:	6823      	ldr	r3, [r4, #0]
 8043fc8:	0699      	lsls	r1, r3, #26
 8043fca:	bf42      	ittt	mi
 8043fcc:	6833      	ldrmi	r3, [r6, #0]
 8043fce:	3302      	addmi	r3, #2
 8043fd0:	6033      	strmi	r3, [r6, #0]
 8043fd2:	6825      	ldr	r5, [r4, #0]
 8043fd4:	f015 0506 	ands.w	r5, r5, #6
 8043fd8:	d106      	bne.n	8043fe8 <_printf_common+0x48>
 8043fda:	f104 0a19 	add.w	sl, r4, #25
 8043fde:	68e3      	ldr	r3, [r4, #12]
 8043fe0:	6832      	ldr	r2, [r6, #0]
 8043fe2:	1a9b      	subs	r3, r3, r2
 8043fe4:	42ab      	cmp	r3, r5
 8043fe6:	dc29      	bgt.n	804403c <_printf_common+0x9c>
 8043fe8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8043fec:	1e13      	subs	r3, r2, #0
 8043fee:	6822      	ldr	r2, [r4, #0]
 8043ff0:	bf18      	it	ne
 8043ff2:	2301      	movne	r3, #1
 8043ff4:	0692      	lsls	r2, r2, #26
 8043ff6:	d42e      	bmi.n	8044056 <_printf_common+0xb6>
 8043ff8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8043ffc:	4649      	mov	r1, r9
 8043ffe:	4638      	mov	r0, r7
 8044000:	47c0      	blx	r8
 8044002:	3001      	adds	r0, #1
 8044004:	d021      	beq.n	804404a <_printf_common+0xaa>
 8044006:	6823      	ldr	r3, [r4, #0]
 8044008:	341a      	adds	r4, #26
 804400a:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 804400e:	f003 0306 	and.w	r3, r3, #6
 8044012:	6832      	ldr	r2, [r6, #0]
 8044014:	2600      	movs	r6, #0
 8044016:	2b04      	cmp	r3, #4
 8044018:	f854 3c12 	ldr.w	r3, [r4, #-18]
 804401c:	bf08      	it	eq
 804401e:	1aad      	subeq	r5, r5, r2
 8044020:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 8044024:	bf14      	ite	ne
 8044026:	2500      	movne	r5, #0
 8044028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 804402c:	4293      	cmp	r3, r2
 804402e:	bfc4      	itt	gt
 8044030:	1a9b      	subgt	r3, r3, r2
 8044032:	18ed      	addgt	r5, r5, r3
 8044034:	42b5      	cmp	r5, r6
 8044036:	d11a      	bne.n	804406e <_printf_common+0xce>
 8044038:	2000      	movs	r0, #0
 804403a:	e008      	b.n	804404e <_printf_common+0xae>
 804403c:	2301      	movs	r3, #1
 804403e:	4652      	mov	r2, sl
 8044040:	4649      	mov	r1, r9
 8044042:	4638      	mov	r0, r7
 8044044:	47c0      	blx	r8
 8044046:	3001      	adds	r0, #1
 8044048:	d103      	bne.n	8044052 <_printf_common+0xb2>
 804404a:	f04f 30ff 	mov.w	r0, #4294967295
 804404e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8044052:	3501      	adds	r5, #1
 8044054:	e7c3      	b.n	8043fde <_printf_common+0x3e>
 8044056:	18e1      	adds	r1, r4, r3
 8044058:	1c5a      	adds	r2, r3, #1
 804405a:	2030      	movs	r0, #48	; 0x30
 804405c:	3302      	adds	r3, #2
 804405e:	4422      	add	r2, r4
 8044060:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8044064:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8044068:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 804406c:	e7c4      	b.n	8043ff8 <_printf_common+0x58>
 804406e:	2301      	movs	r3, #1
 8044070:	4622      	mov	r2, r4
 8044072:	4649      	mov	r1, r9
 8044074:	4638      	mov	r0, r7
 8044076:	47c0      	blx	r8
 8044078:	3001      	adds	r0, #1
 804407a:	d0e6      	beq.n	804404a <_printf_common+0xaa>
 804407c:	3601      	adds	r6, #1
 804407e:	e7d9      	b.n	8044034 <_printf_common+0x94>

08044080 <_printf_i>:
 8044080:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8044084:	7e0f      	ldrb	r7, [r1, #24]
 8044086:	4691      	mov	r9, r2
 8044088:	4680      	mov	r8, r0
 804408a:	460c      	mov	r4, r1
 804408c:	2f78      	cmp	r7, #120	; 0x78
 804408e:	469a      	mov	sl, r3
 8044090:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8044092:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8044096:	d807      	bhi.n	80440a8 <_printf_i+0x28>
 8044098:	2f62      	cmp	r7, #98	; 0x62
 804409a:	d80a      	bhi.n	80440b2 <_printf_i+0x32>
 804409c:	2f00      	cmp	r7, #0
 804409e:	f000 80d8 	beq.w	8044252 <_printf_i+0x1d2>
 80440a2:	2f58      	cmp	r7, #88	; 0x58
 80440a4:	f000 80a3 	beq.w	80441ee <_printf_i+0x16e>
 80440a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80440ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80440b0:	e03a      	b.n	8044128 <_printf_i+0xa8>
 80440b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80440b6:	2b15      	cmp	r3, #21
 80440b8:	d8f6      	bhi.n	80440a8 <_printf_i+0x28>
 80440ba:	a101      	add	r1, pc, #4	; (adr r1, 80440c0 <_printf_i+0x40>)
 80440bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80440c0:	08044119 	.word	0x08044119
 80440c4:	0804412d 	.word	0x0804412d
 80440c8:	080440a9 	.word	0x080440a9
 80440cc:	080440a9 	.word	0x080440a9
 80440d0:	080440a9 	.word	0x080440a9
 80440d4:	080440a9 	.word	0x080440a9
 80440d8:	0804412d 	.word	0x0804412d
 80440dc:	080440a9 	.word	0x080440a9
 80440e0:	080440a9 	.word	0x080440a9
 80440e4:	080440a9 	.word	0x080440a9
 80440e8:	080440a9 	.word	0x080440a9
 80440ec:	08044239 	.word	0x08044239
 80440f0:	0804415d 	.word	0x0804415d
 80440f4:	0804421b 	.word	0x0804421b
 80440f8:	080440a9 	.word	0x080440a9
 80440fc:	080440a9 	.word	0x080440a9
 8044100:	0804425b 	.word	0x0804425b
 8044104:	080440a9 	.word	0x080440a9
 8044108:	0804415d 	.word	0x0804415d
 804410c:	080440a9 	.word	0x080440a9
 8044110:	080440a9 	.word	0x080440a9
 8044114:	08044223 	.word	0x08044223
 8044118:	682b      	ldr	r3, [r5, #0]
 804411a:	1d1a      	adds	r2, r3, #4
 804411c:	681b      	ldr	r3, [r3, #0]
 804411e:	602a      	str	r2, [r5, #0]
 8044120:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8044124:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8044128:	2301      	movs	r3, #1
 804412a:	e0a3      	b.n	8044274 <_printf_i+0x1f4>
 804412c:	6820      	ldr	r0, [r4, #0]
 804412e:	6829      	ldr	r1, [r5, #0]
 8044130:	0606      	lsls	r6, r0, #24
 8044132:	f101 0304 	add.w	r3, r1, #4
 8044136:	d50a      	bpl.n	804414e <_printf_i+0xce>
 8044138:	680e      	ldr	r6, [r1, #0]
 804413a:	602b      	str	r3, [r5, #0]
 804413c:	2e00      	cmp	r6, #0
 804413e:	da03      	bge.n	8044148 <_printf_i+0xc8>
 8044140:	232d      	movs	r3, #45	; 0x2d
 8044142:	4276      	negs	r6, r6
 8044144:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8044148:	485e      	ldr	r0, [pc, #376]	; (80442c4 <_printf_i+0x244>)
 804414a:	230a      	movs	r3, #10
 804414c:	e019      	b.n	8044182 <_printf_i+0x102>
 804414e:	680e      	ldr	r6, [r1, #0]
 8044150:	f010 0f40 	tst.w	r0, #64	; 0x40
 8044154:	602b      	str	r3, [r5, #0]
 8044156:	bf18      	it	ne
 8044158:	b236      	sxthne	r6, r6
 804415a:	e7ef      	b.n	804413c <_printf_i+0xbc>
 804415c:	682b      	ldr	r3, [r5, #0]
 804415e:	6820      	ldr	r0, [r4, #0]
 8044160:	1d19      	adds	r1, r3, #4
 8044162:	6029      	str	r1, [r5, #0]
 8044164:	0601      	lsls	r1, r0, #24
 8044166:	d501      	bpl.n	804416c <_printf_i+0xec>
 8044168:	681e      	ldr	r6, [r3, #0]
 804416a:	e002      	b.n	8044172 <_printf_i+0xf2>
 804416c:	0646      	lsls	r6, r0, #25
 804416e:	d5fb      	bpl.n	8044168 <_printf_i+0xe8>
 8044170:	881e      	ldrh	r6, [r3, #0]
 8044172:	2f6f      	cmp	r7, #111	; 0x6f
 8044174:	4853      	ldr	r0, [pc, #332]	; (80442c4 <_printf_i+0x244>)
 8044176:	bf0c      	ite	eq
 8044178:	2308      	moveq	r3, #8
 804417a:	230a      	movne	r3, #10
 804417c:	2100      	movs	r1, #0
 804417e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8044182:	6865      	ldr	r5, [r4, #4]
 8044184:	2d00      	cmp	r5, #0
 8044186:	60a5      	str	r5, [r4, #8]
 8044188:	bfa2      	ittt	ge
 804418a:	6821      	ldrge	r1, [r4, #0]
 804418c:	f021 0104 	bicge.w	r1, r1, #4
 8044190:	6021      	strge	r1, [r4, #0]
 8044192:	b90e      	cbnz	r6, 8044198 <_printf_i+0x118>
 8044194:	2d00      	cmp	r5, #0
 8044196:	d04d      	beq.n	8044234 <_printf_i+0x1b4>
 8044198:	4615      	mov	r5, r2
 804419a:	fbb6 f1f3 	udiv	r1, r6, r3
 804419e:	fb03 6711 	mls	r7, r3, r1, r6
 80441a2:	5dc7      	ldrb	r7, [r0, r7]
 80441a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80441a8:	4637      	mov	r7, r6
 80441aa:	460e      	mov	r6, r1
 80441ac:	42bb      	cmp	r3, r7
 80441ae:	d9f4      	bls.n	804419a <_printf_i+0x11a>
 80441b0:	2b08      	cmp	r3, #8
 80441b2:	d10b      	bne.n	80441cc <_printf_i+0x14c>
 80441b4:	6823      	ldr	r3, [r4, #0]
 80441b6:	07de      	lsls	r6, r3, #31
 80441b8:	d508      	bpl.n	80441cc <_printf_i+0x14c>
 80441ba:	6923      	ldr	r3, [r4, #16]
 80441bc:	6861      	ldr	r1, [r4, #4]
 80441be:	4299      	cmp	r1, r3
 80441c0:	bfde      	ittt	le
 80441c2:	2330      	movle	r3, #48	; 0x30
 80441c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80441c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80441cc:	1b52      	subs	r2, r2, r5
 80441ce:	6122      	str	r2, [r4, #16]
 80441d0:	464b      	mov	r3, r9
 80441d2:	aa03      	add	r2, sp, #12
 80441d4:	4621      	mov	r1, r4
 80441d6:	4640      	mov	r0, r8
 80441d8:	f8cd a000 	str.w	sl, [sp]
 80441dc:	f7ff fee0 	bl	8043fa0 <_printf_common>
 80441e0:	3001      	adds	r0, #1
 80441e2:	d14c      	bne.n	804427e <_printf_i+0x1fe>
 80441e4:	f04f 30ff 	mov.w	r0, #4294967295
 80441e8:	b004      	add	sp, #16
 80441ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80441ee:	4835      	ldr	r0, [pc, #212]	; (80442c4 <_printf_i+0x244>)
 80441f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80441f4:	6829      	ldr	r1, [r5, #0]
 80441f6:	6823      	ldr	r3, [r4, #0]
 80441f8:	f851 6b04 	ldr.w	r6, [r1], #4
 80441fc:	6029      	str	r1, [r5, #0]
 80441fe:	061d      	lsls	r5, r3, #24
 8044200:	d514      	bpl.n	804422c <_printf_i+0x1ac>
 8044202:	07df      	lsls	r7, r3, #31
 8044204:	bf44      	itt	mi
 8044206:	f043 0320 	orrmi.w	r3, r3, #32
 804420a:	6023      	strmi	r3, [r4, #0]
 804420c:	b91e      	cbnz	r6, 8044216 <_printf_i+0x196>
 804420e:	6823      	ldr	r3, [r4, #0]
 8044210:	f023 0320 	bic.w	r3, r3, #32
 8044214:	6023      	str	r3, [r4, #0]
 8044216:	2310      	movs	r3, #16
 8044218:	e7b0      	b.n	804417c <_printf_i+0xfc>
 804421a:	6823      	ldr	r3, [r4, #0]
 804421c:	f043 0320 	orr.w	r3, r3, #32
 8044220:	6023      	str	r3, [r4, #0]
 8044222:	2378      	movs	r3, #120	; 0x78
 8044224:	4828      	ldr	r0, [pc, #160]	; (80442c8 <_printf_i+0x248>)
 8044226:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 804422a:	e7e3      	b.n	80441f4 <_printf_i+0x174>
 804422c:	0659      	lsls	r1, r3, #25
 804422e:	bf48      	it	mi
 8044230:	b2b6      	uxthmi	r6, r6
 8044232:	e7e6      	b.n	8044202 <_printf_i+0x182>
 8044234:	4615      	mov	r5, r2
 8044236:	e7bb      	b.n	80441b0 <_printf_i+0x130>
 8044238:	682b      	ldr	r3, [r5, #0]
 804423a:	6826      	ldr	r6, [r4, #0]
 804423c:	1d18      	adds	r0, r3, #4
 804423e:	6961      	ldr	r1, [r4, #20]
 8044240:	6028      	str	r0, [r5, #0]
 8044242:	0635      	lsls	r5, r6, #24
 8044244:	681b      	ldr	r3, [r3, #0]
 8044246:	d501      	bpl.n	804424c <_printf_i+0x1cc>
 8044248:	6019      	str	r1, [r3, #0]
 804424a:	e002      	b.n	8044252 <_printf_i+0x1d2>
 804424c:	0670      	lsls	r0, r6, #25
 804424e:	d5fb      	bpl.n	8044248 <_printf_i+0x1c8>
 8044250:	8019      	strh	r1, [r3, #0]
 8044252:	2300      	movs	r3, #0
 8044254:	4615      	mov	r5, r2
 8044256:	6123      	str	r3, [r4, #16]
 8044258:	e7ba      	b.n	80441d0 <_printf_i+0x150>
 804425a:	682b      	ldr	r3, [r5, #0]
 804425c:	2100      	movs	r1, #0
 804425e:	1d1a      	adds	r2, r3, #4
 8044260:	602a      	str	r2, [r5, #0]
 8044262:	681d      	ldr	r5, [r3, #0]
 8044264:	6862      	ldr	r2, [r4, #4]
 8044266:	4628      	mov	r0, r5
 8044268:	f000 fa9e 	bl	80447a8 <memchr>
 804426c:	b108      	cbz	r0, 8044272 <_printf_i+0x1f2>
 804426e:	1b40      	subs	r0, r0, r5
 8044270:	6060      	str	r0, [r4, #4]
 8044272:	6863      	ldr	r3, [r4, #4]
 8044274:	6123      	str	r3, [r4, #16]
 8044276:	2300      	movs	r3, #0
 8044278:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 804427c:	e7a8      	b.n	80441d0 <_printf_i+0x150>
 804427e:	6923      	ldr	r3, [r4, #16]
 8044280:	462a      	mov	r2, r5
 8044282:	4649      	mov	r1, r9
 8044284:	4640      	mov	r0, r8
 8044286:	47d0      	blx	sl
 8044288:	3001      	adds	r0, #1
 804428a:	d0ab      	beq.n	80441e4 <_printf_i+0x164>
 804428c:	6823      	ldr	r3, [r4, #0]
 804428e:	079b      	lsls	r3, r3, #30
 8044290:	d413      	bmi.n	80442ba <_printf_i+0x23a>
 8044292:	68e0      	ldr	r0, [r4, #12]
 8044294:	9b03      	ldr	r3, [sp, #12]
 8044296:	4298      	cmp	r0, r3
 8044298:	bfb8      	it	lt
 804429a:	4618      	movlt	r0, r3
 804429c:	e7a4      	b.n	80441e8 <_printf_i+0x168>
 804429e:	2301      	movs	r3, #1
 80442a0:	4632      	mov	r2, r6
 80442a2:	4649      	mov	r1, r9
 80442a4:	4640      	mov	r0, r8
 80442a6:	47d0      	blx	sl
 80442a8:	3001      	adds	r0, #1
 80442aa:	d09b      	beq.n	80441e4 <_printf_i+0x164>
 80442ac:	3501      	adds	r5, #1
 80442ae:	68e3      	ldr	r3, [r4, #12]
 80442b0:	9903      	ldr	r1, [sp, #12]
 80442b2:	1a5b      	subs	r3, r3, r1
 80442b4:	42ab      	cmp	r3, r5
 80442b6:	dcf2      	bgt.n	804429e <_printf_i+0x21e>
 80442b8:	e7eb      	b.n	8044292 <_printf_i+0x212>
 80442ba:	2500      	movs	r5, #0
 80442bc:	f104 0619 	add.w	r6, r4, #25
 80442c0:	e7f5      	b.n	80442ae <_printf_i+0x22e>
 80442c2:	bf00      	nop
 80442c4:	08044a1d 	.word	0x08044a1d
 80442c8:	08044a2e 	.word	0x08044a2e

080442cc <_sbrk_r>:
 80442cc:	b538      	push	{r3, r4, r5, lr}
 80442ce:	2300      	movs	r3, #0
 80442d0:	4d05      	ldr	r5, [pc, #20]	; (80442e8 <_sbrk_r+0x1c>)
 80442d2:	4604      	mov	r4, r0
 80442d4:	4608      	mov	r0, r1
 80442d6:	602b      	str	r3, [r5, #0]
 80442d8:	f7fc fba2 	bl	8040a20 <_sbrk>
 80442dc:	1c43      	adds	r3, r0, #1
 80442de:	d102      	bne.n	80442e6 <_sbrk_r+0x1a>
 80442e0:	682b      	ldr	r3, [r5, #0]
 80442e2:	b103      	cbz	r3, 80442e6 <_sbrk_r+0x1a>
 80442e4:	6023      	str	r3, [r4, #0]
 80442e6:	bd38      	pop	{r3, r4, r5, pc}
 80442e8:	20018138 	.word	0x20018138

080442ec <__sread>:
 80442ec:	b510      	push	{r4, lr}
 80442ee:	460c      	mov	r4, r1
 80442f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80442f4:	f000 fabe 	bl	8044874 <_read_r>
 80442f8:	2800      	cmp	r0, #0
 80442fa:	bfab      	itete	ge
 80442fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80442fe:	89a3      	ldrhlt	r3, [r4, #12]
 8044300:	181b      	addge	r3, r3, r0
 8044302:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8044306:	bfac      	ite	ge
 8044308:	6563      	strge	r3, [r4, #84]	; 0x54
 804430a:	81a3      	strhlt	r3, [r4, #12]
 804430c:	bd10      	pop	{r4, pc}

0804430e <__swrite>:
 804430e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8044312:	461f      	mov	r7, r3
 8044314:	898b      	ldrh	r3, [r1, #12]
 8044316:	4605      	mov	r5, r0
 8044318:	460c      	mov	r4, r1
 804431a:	05db      	lsls	r3, r3, #23
 804431c:	4616      	mov	r6, r2
 804431e:	d505      	bpl.n	804432c <__swrite+0x1e>
 8044320:	2302      	movs	r3, #2
 8044322:	2200      	movs	r2, #0
 8044324:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8044328:	f000 f9c6 	bl	80446b8 <_lseek_r>
 804432c:	89a3      	ldrh	r3, [r4, #12]
 804432e:	4632      	mov	r2, r6
 8044330:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044334:	4628      	mov	r0, r5
 8044336:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 804433a:	81a3      	strh	r3, [r4, #12]
 804433c:	463b      	mov	r3, r7
 804433e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8044342:	f000 b869 	b.w	8044418 <_write_r>

08044346 <__sseek>:
 8044346:	b510      	push	{r4, lr}
 8044348:	460c      	mov	r4, r1
 804434a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804434e:	f000 f9b3 	bl	80446b8 <_lseek_r>
 8044352:	1c43      	adds	r3, r0, #1
 8044354:	89a3      	ldrh	r3, [r4, #12]
 8044356:	bf15      	itete	ne
 8044358:	6560      	strne	r0, [r4, #84]	; 0x54
 804435a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 804435e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8044362:	81a3      	strheq	r3, [r4, #12]
 8044364:	bf18      	it	ne
 8044366:	81a3      	strhne	r3, [r4, #12]
 8044368:	bd10      	pop	{r4, pc}

0804436a <__sclose>:
 804436a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 804436e:	f000 b8d3 	b.w	8044518 <_close_r>
	...

08044374 <__swbuf_r>:
 8044374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8044376:	460e      	mov	r6, r1
 8044378:	4614      	mov	r4, r2
 804437a:	4605      	mov	r5, r0
 804437c:	b118      	cbz	r0, 8044386 <__swbuf_r+0x12>
 804437e:	6983      	ldr	r3, [r0, #24]
 8044380:	b90b      	cbnz	r3, 8044386 <__swbuf_r+0x12>
 8044382:	f7ff fb7f 	bl	8043a84 <__sinit>
 8044386:	4b21      	ldr	r3, [pc, #132]	; (804440c <__swbuf_r+0x98>)
 8044388:	429c      	cmp	r4, r3
 804438a:	d12b      	bne.n	80443e4 <__swbuf_r+0x70>
 804438c:	686c      	ldr	r4, [r5, #4]
 804438e:	69a3      	ldr	r3, [r4, #24]
 8044390:	60a3      	str	r3, [r4, #8]
 8044392:	89a3      	ldrh	r3, [r4, #12]
 8044394:	071a      	lsls	r2, r3, #28
 8044396:	d52f      	bpl.n	80443f8 <__swbuf_r+0x84>
 8044398:	6923      	ldr	r3, [r4, #16]
 804439a:	b36b      	cbz	r3, 80443f8 <__swbuf_r+0x84>
 804439c:	6923      	ldr	r3, [r4, #16]
 804439e:	b2f6      	uxtb	r6, r6
 80443a0:	6820      	ldr	r0, [r4, #0]
 80443a2:	4637      	mov	r7, r6
 80443a4:	1ac0      	subs	r0, r0, r3
 80443a6:	6963      	ldr	r3, [r4, #20]
 80443a8:	4283      	cmp	r3, r0
 80443aa:	dc04      	bgt.n	80443b6 <__swbuf_r+0x42>
 80443ac:	4621      	mov	r1, r4
 80443ae:	4628      	mov	r0, r5
 80443b0:	f000 f946 	bl	8044640 <_fflush_r>
 80443b4:	bb30      	cbnz	r0, 8044404 <__swbuf_r+0x90>
 80443b6:	68a3      	ldr	r3, [r4, #8]
 80443b8:	3001      	adds	r0, #1
 80443ba:	3b01      	subs	r3, #1
 80443bc:	60a3      	str	r3, [r4, #8]
 80443be:	6823      	ldr	r3, [r4, #0]
 80443c0:	1c5a      	adds	r2, r3, #1
 80443c2:	6022      	str	r2, [r4, #0]
 80443c4:	701e      	strb	r6, [r3, #0]
 80443c6:	6963      	ldr	r3, [r4, #20]
 80443c8:	4283      	cmp	r3, r0
 80443ca:	d004      	beq.n	80443d6 <__swbuf_r+0x62>
 80443cc:	89a3      	ldrh	r3, [r4, #12]
 80443ce:	07db      	lsls	r3, r3, #31
 80443d0:	d506      	bpl.n	80443e0 <__swbuf_r+0x6c>
 80443d2:	2e0a      	cmp	r6, #10
 80443d4:	d104      	bne.n	80443e0 <__swbuf_r+0x6c>
 80443d6:	4621      	mov	r1, r4
 80443d8:	4628      	mov	r0, r5
 80443da:	f000 f931 	bl	8044640 <_fflush_r>
 80443de:	b988      	cbnz	r0, 8044404 <__swbuf_r+0x90>
 80443e0:	4638      	mov	r0, r7
 80443e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80443e4:	4b0a      	ldr	r3, [pc, #40]	; (8044410 <__swbuf_r+0x9c>)
 80443e6:	429c      	cmp	r4, r3
 80443e8:	d101      	bne.n	80443ee <__swbuf_r+0x7a>
 80443ea:	68ac      	ldr	r4, [r5, #8]
 80443ec:	e7cf      	b.n	804438e <__swbuf_r+0x1a>
 80443ee:	4b09      	ldr	r3, [pc, #36]	; (8044414 <__swbuf_r+0xa0>)
 80443f0:	429c      	cmp	r4, r3
 80443f2:	bf08      	it	eq
 80443f4:	68ec      	ldreq	r4, [r5, #12]
 80443f6:	e7ca      	b.n	804438e <__swbuf_r+0x1a>
 80443f8:	4621      	mov	r1, r4
 80443fa:	4628      	mov	r0, r5
 80443fc:	f000 f81e 	bl	804443c <__swsetup_r>
 8044400:	2800      	cmp	r0, #0
 8044402:	d0cb      	beq.n	804439c <__swbuf_r+0x28>
 8044404:	f04f 37ff 	mov.w	r7, #4294967295
 8044408:	e7ea      	b.n	80443e0 <__swbuf_r+0x6c>
 804440a:	bf00      	nop
 804440c:	080449cc 	.word	0x080449cc
 8044410:	080449ec 	.word	0x080449ec
 8044414:	080449ac 	.word	0x080449ac

08044418 <_write_r>:
 8044418:	b538      	push	{r3, r4, r5, lr}
 804441a:	4604      	mov	r4, r0
 804441c:	4d06      	ldr	r5, [pc, #24]	; (8044438 <_write_r+0x20>)
 804441e:	4608      	mov	r0, r1
 8044420:	4611      	mov	r1, r2
 8044422:	2200      	movs	r2, #0
 8044424:	602a      	str	r2, [r5, #0]
 8044426:	461a      	mov	r2, r3
 8044428:	f7fc faa9 	bl	804097e <_write>
 804442c:	1c43      	adds	r3, r0, #1
 804442e:	d102      	bne.n	8044436 <_write_r+0x1e>
 8044430:	682b      	ldr	r3, [r5, #0]
 8044432:	b103      	cbz	r3, 8044436 <_write_r+0x1e>
 8044434:	6023      	str	r3, [r4, #0]
 8044436:	bd38      	pop	{r3, r4, r5, pc}
 8044438:	20018138 	.word	0x20018138

0804443c <__swsetup_r>:
 804443c:	4b32      	ldr	r3, [pc, #200]	; (8044508 <__swsetup_r+0xcc>)
 804443e:	b570      	push	{r4, r5, r6, lr}
 8044440:	681d      	ldr	r5, [r3, #0]
 8044442:	4606      	mov	r6, r0
 8044444:	460c      	mov	r4, r1
 8044446:	b125      	cbz	r5, 8044452 <__swsetup_r+0x16>
 8044448:	69ab      	ldr	r3, [r5, #24]
 804444a:	b913      	cbnz	r3, 8044452 <__swsetup_r+0x16>
 804444c:	4628      	mov	r0, r5
 804444e:	f7ff fb19 	bl	8043a84 <__sinit>
 8044452:	4b2e      	ldr	r3, [pc, #184]	; (804450c <__swsetup_r+0xd0>)
 8044454:	429c      	cmp	r4, r3
 8044456:	d10f      	bne.n	8044478 <__swsetup_r+0x3c>
 8044458:	686c      	ldr	r4, [r5, #4]
 804445a:	89a3      	ldrh	r3, [r4, #12]
 804445c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8044460:	0719      	lsls	r1, r3, #28
 8044462:	d42c      	bmi.n	80444be <__swsetup_r+0x82>
 8044464:	06dd      	lsls	r5, r3, #27
 8044466:	d411      	bmi.n	804448c <__swsetup_r+0x50>
 8044468:	2309      	movs	r3, #9
 804446a:	6033      	str	r3, [r6, #0]
 804446c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8044470:	f04f 30ff 	mov.w	r0, #4294967295
 8044474:	81a3      	strh	r3, [r4, #12]
 8044476:	e03e      	b.n	80444f6 <__swsetup_r+0xba>
 8044478:	4b25      	ldr	r3, [pc, #148]	; (8044510 <__swsetup_r+0xd4>)
 804447a:	429c      	cmp	r4, r3
 804447c:	d101      	bne.n	8044482 <__swsetup_r+0x46>
 804447e:	68ac      	ldr	r4, [r5, #8]
 8044480:	e7eb      	b.n	804445a <__swsetup_r+0x1e>
 8044482:	4b24      	ldr	r3, [pc, #144]	; (8044514 <__swsetup_r+0xd8>)
 8044484:	429c      	cmp	r4, r3
 8044486:	bf08      	it	eq
 8044488:	68ec      	ldreq	r4, [r5, #12]
 804448a:	e7e6      	b.n	804445a <__swsetup_r+0x1e>
 804448c:	0758      	lsls	r0, r3, #29
 804448e:	d512      	bpl.n	80444b6 <__swsetup_r+0x7a>
 8044490:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8044492:	b141      	cbz	r1, 80444a6 <__swsetup_r+0x6a>
 8044494:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8044498:	4299      	cmp	r1, r3
 804449a:	d002      	beq.n	80444a2 <__swsetup_r+0x66>
 804449c:	4630      	mov	r0, r6
 804449e:	f000 f99d 	bl	80447dc <_free_r>
 80444a2:	2300      	movs	r3, #0
 80444a4:	6363      	str	r3, [r4, #52]	; 0x34
 80444a6:	89a3      	ldrh	r3, [r4, #12]
 80444a8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80444ac:	81a3      	strh	r3, [r4, #12]
 80444ae:	2300      	movs	r3, #0
 80444b0:	6063      	str	r3, [r4, #4]
 80444b2:	6923      	ldr	r3, [r4, #16]
 80444b4:	6023      	str	r3, [r4, #0]
 80444b6:	89a3      	ldrh	r3, [r4, #12]
 80444b8:	f043 0308 	orr.w	r3, r3, #8
 80444bc:	81a3      	strh	r3, [r4, #12]
 80444be:	6923      	ldr	r3, [r4, #16]
 80444c0:	b94b      	cbnz	r3, 80444d6 <__swsetup_r+0x9a>
 80444c2:	89a3      	ldrh	r3, [r4, #12]
 80444c4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80444c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80444cc:	d003      	beq.n	80444d6 <__swsetup_r+0x9a>
 80444ce:	4621      	mov	r1, r4
 80444d0:	4630      	mov	r0, r6
 80444d2:	f000 f929 	bl	8044728 <__smakebuf_r>
 80444d6:	89a0      	ldrh	r0, [r4, #12]
 80444d8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80444dc:	f010 0301 	ands.w	r3, r0, #1
 80444e0:	d00a      	beq.n	80444f8 <__swsetup_r+0xbc>
 80444e2:	2300      	movs	r3, #0
 80444e4:	60a3      	str	r3, [r4, #8]
 80444e6:	6963      	ldr	r3, [r4, #20]
 80444e8:	425b      	negs	r3, r3
 80444ea:	61a3      	str	r3, [r4, #24]
 80444ec:	6923      	ldr	r3, [r4, #16]
 80444ee:	b943      	cbnz	r3, 8044502 <__swsetup_r+0xc6>
 80444f0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80444f4:	d1ba      	bne.n	804446c <__swsetup_r+0x30>
 80444f6:	bd70      	pop	{r4, r5, r6, pc}
 80444f8:	0781      	lsls	r1, r0, #30
 80444fa:	bf58      	it	pl
 80444fc:	6963      	ldrpl	r3, [r4, #20]
 80444fe:	60a3      	str	r3, [r4, #8]
 8044500:	e7f4      	b.n	80444ec <__swsetup_r+0xb0>
 8044502:	2000      	movs	r0, #0
 8044504:	e7f7      	b.n	80444f6 <__swsetup_r+0xba>
 8044506:	bf00      	nop
 8044508:	2001800c 	.word	0x2001800c
 804450c:	080449cc 	.word	0x080449cc
 8044510:	080449ec 	.word	0x080449ec
 8044514:	080449ac 	.word	0x080449ac

08044518 <_close_r>:
 8044518:	b538      	push	{r3, r4, r5, lr}
 804451a:	2300      	movs	r3, #0
 804451c:	4d05      	ldr	r5, [pc, #20]	; (8044534 <_close_r+0x1c>)
 804451e:	4604      	mov	r4, r0
 8044520:	4608      	mov	r0, r1
 8044522:	602b      	str	r3, [r5, #0]
 8044524:	f7fc fa47 	bl	80409b6 <_close>
 8044528:	1c43      	adds	r3, r0, #1
 804452a:	d102      	bne.n	8044532 <_close_r+0x1a>
 804452c:	682b      	ldr	r3, [r5, #0]
 804452e:	b103      	cbz	r3, 8044532 <_close_r+0x1a>
 8044530:	6023      	str	r3, [r4, #0]
 8044532:	bd38      	pop	{r3, r4, r5, pc}
 8044534:	20018138 	.word	0x20018138

08044538 <__sflush_r>:
 8044538:	898a      	ldrh	r2, [r1, #12]
 804453a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 804453e:	4605      	mov	r5, r0
 8044540:	0710      	lsls	r0, r2, #28
 8044542:	460c      	mov	r4, r1
 8044544:	d458      	bmi.n	80445f8 <__sflush_r+0xc0>
 8044546:	684b      	ldr	r3, [r1, #4]
 8044548:	2b00      	cmp	r3, #0
 804454a:	dc05      	bgt.n	8044558 <__sflush_r+0x20>
 804454c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 804454e:	2b00      	cmp	r3, #0
 8044550:	dc02      	bgt.n	8044558 <__sflush_r+0x20>
 8044552:	2000      	movs	r0, #0
 8044554:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8044558:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 804455a:	2e00      	cmp	r6, #0
 804455c:	d0f9      	beq.n	8044552 <__sflush_r+0x1a>
 804455e:	2300      	movs	r3, #0
 8044560:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8044564:	682f      	ldr	r7, [r5, #0]
 8044566:	602b      	str	r3, [r5, #0]
 8044568:	d032      	beq.n	80445d0 <__sflush_r+0x98>
 804456a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 804456c:	89a3      	ldrh	r3, [r4, #12]
 804456e:	075a      	lsls	r2, r3, #29
 8044570:	d505      	bpl.n	804457e <__sflush_r+0x46>
 8044572:	6863      	ldr	r3, [r4, #4]
 8044574:	1ac0      	subs	r0, r0, r3
 8044576:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8044578:	b10b      	cbz	r3, 804457e <__sflush_r+0x46>
 804457a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 804457c:	1ac0      	subs	r0, r0, r3
 804457e:	2300      	movs	r3, #0
 8044580:	4602      	mov	r2, r0
 8044582:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8044584:	4628      	mov	r0, r5
 8044586:	6a21      	ldr	r1, [r4, #32]
 8044588:	47b0      	blx	r6
 804458a:	1c43      	adds	r3, r0, #1
 804458c:	89a3      	ldrh	r3, [r4, #12]
 804458e:	d106      	bne.n	804459e <__sflush_r+0x66>
 8044590:	6829      	ldr	r1, [r5, #0]
 8044592:	291d      	cmp	r1, #29
 8044594:	d82c      	bhi.n	80445f0 <__sflush_r+0xb8>
 8044596:	4a29      	ldr	r2, [pc, #164]	; (804463c <__sflush_r+0x104>)
 8044598:	40ca      	lsrs	r2, r1
 804459a:	07d6      	lsls	r6, r2, #31
 804459c:	d528      	bpl.n	80445f0 <__sflush_r+0xb8>
 804459e:	2200      	movs	r2, #0
 80445a0:	04d9      	lsls	r1, r3, #19
 80445a2:	6062      	str	r2, [r4, #4]
 80445a4:	6922      	ldr	r2, [r4, #16]
 80445a6:	6022      	str	r2, [r4, #0]
 80445a8:	d504      	bpl.n	80445b4 <__sflush_r+0x7c>
 80445aa:	1c42      	adds	r2, r0, #1
 80445ac:	d101      	bne.n	80445b2 <__sflush_r+0x7a>
 80445ae:	682b      	ldr	r3, [r5, #0]
 80445b0:	b903      	cbnz	r3, 80445b4 <__sflush_r+0x7c>
 80445b2:	6560      	str	r0, [r4, #84]	; 0x54
 80445b4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80445b6:	602f      	str	r7, [r5, #0]
 80445b8:	2900      	cmp	r1, #0
 80445ba:	d0ca      	beq.n	8044552 <__sflush_r+0x1a>
 80445bc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80445c0:	4299      	cmp	r1, r3
 80445c2:	d002      	beq.n	80445ca <__sflush_r+0x92>
 80445c4:	4628      	mov	r0, r5
 80445c6:	f000 f909 	bl	80447dc <_free_r>
 80445ca:	2000      	movs	r0, #0
 80445cc:	6360      	str	r0, [r4, #52]	; 0x34
 80445ce:	e7c1      	b.n	8044554 <__sflush_r+0x1c>
 80445d0:	6a21      	ldr	r1, [r4, #32]
 80445d2:	2301      	movs	r3, #1
 80445d4:	4628      	mov	r0, r5
 80445d6:	47b0      	blx	r6
 80445d8:	1c41      	adds	r1, r0, #1
 80445da:	d1c7      	bne.n	804456c <__sflush_r+0x34>
 80445dc:	682b      	ldr	r3, [r5, #0]
 80445de:	2b00      	cmp	r3, #0
 80445e0:	d0c4      	beq.n	804456c <__sflush_r+0x34>
 80445e2:	2b1d      	cmp	r3, #29
 80445e4:	d001      	beq.n	80445ea <__sflush_r+0xb2>
 80445e6:	2b16      	cmp	r3, #22
 80445e8:	d101      	bne.n	80445ee <__sflush_r+0xb6>
 80445ea:	602f      	str	r7, [r5, #0]
 80445ec:	e7b1      	b.n	8044552 <__sflush_r+0x1a>
 80445ee:	89a3      	ldrh	r3, [r4, #12]
 80445f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80445f4:	81a3      	strh	r3, [r4, #12]
 80445f6:	e7ad      	b.n	8044554 <__sflush_r+0x1c>
 80445f8:	690f      	ldr	r7, [r1, #16]
 80445fa:	2f00      	cmp	r7, #0
 80445fc:	d0a9      	beq.n	8044552 <__sflush_r+0x1a>
 80445fe:	0793      	lsls	r3, r2, #30
 8044600:	680e      	ldr	r6, [r1, #0]
 8044602:	600f      	str	r7, [r1, #0]
 8044604:	bf0c      	ite	eq
 8044606:	694b      	ldreq	r3, [r1, #20]
 8044608:	2300      	movne	r3, #0
 804460a:	eba6 0807 	sub.w	r8, r6, r7
 804460e:	608b      	str	r3, [r1, #8]
 8044610:	f1b8 0f00 	cmp.w	r8, #0
 8044614:	dd9d      	ble.n	8044552 <__sflush_r+0x1a>
 8044616:	4643      	mov	r3, r8
 8044618:	463a      	mov	r2, r7
 804461a:	6a21      	ldr	r1, [r4, #32]
 804461c:	4628      	mov	r0, r5
 804461e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8044620:	47b0      	blx	r6
 8044622:	2800      	cmp	r0, #0
 8044624:	dc06      	bgt.n	8044634 <__sflush_r+0xfc>
 8044626:	89a3      	ldrh	r3, [r4, #12]
 8044628:	f04f 30ff 	mov.w	r0, #4294967295
 804462c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8044630:	81a3      	strh	r3, [r4, #12]
 8044632:	e78f      	b.n	8044554 <__sflush_r+0x1c>
 8044634:	4407      	add	r7, r0
 8044636:	eba8 0800 	sub.w	r8, r8, r0
 804463a:	e7e9      	b.n	8044610 <__sflush_r+0xd8>
 804463c:	20400001 	.word	0x20400001

08044640 <_fflush_r>:
 8044640:	b538      	push	{r3, r4, r5, lr}
 8044642:	690b      	ldr	r3, [r1, #16]
 8044644:	4605      	mov	r5, r0
 8044646:	460c      	mov	r4, r1
 8044648:	b913      	cbnz	r3, 8044650 <_fflush_r+0x10>
 804464a:	2500      	movs	r5, #0
 804464c:	4628      	mov	r0, r5
 804464e:	bd38      	pop	{r3, r4, r5, pc}
 8044650:	b118      	cbz	r0, 804465a <_fflush_r+0x1a>
 8044652:	6983      	ldr	r3, [r0, #24]
 8044654:	b90b      	cbnz	r3, 804465a <_fflush_r+0x1a>
 8044656:	f7ff fa15 	bl	8043a84 <__sinit>
 804465a:	4b14      	ldr	r3, [pc, #80]	; (80446ac <_fflush_r+0x6c>)
 804465c:	429c      	cmp	r4, r3
 804465e:	d11b      	bne.n	8044698 <_fflush_r+0x58>
 8044660:	686c      	ldr	r4, [r5, #4]
 8044662:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8044666:	2b00      	cmp	r3, #0
 8044668:	d0ef      	beq.n	804464a <_fflush_r+0xa>
 804466a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 804466c:	07d0      	lsls	r0, r2, #31
 804466e:	d404      	bmi.n	804467a <_fflush_r+0x3a>
 8044670:	0599      	lsls	r1, r3, #22
 8044672:	d402      	bmi.n	804467a <_fflush_r+0x3a>
 8044674:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044676:	f7ff faa3 	bl	8043bc0 <__retarget_lock_acquire_recursive>
 804467a:	4628      	mov	r0, r5
 804467c:	4621      	mov	r1, r4
 804467e:	f7ff ff5b 	bl	8044538 <__sflush_r>
 8044682:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8044684:	4605      	mov	r5, r0
 8044686:	07da      	lsls	r2, r3, #31
 8044688:	d4e0      	bmi.n	804464c <_fflush_r+0xc>
 804468a:	89a3      	ldrh	r3, [r4, #12]
 804468c:	059b      	lsls	r3, r3, #22
 804468e:	d4dd      	bmi.n	804464c <_fflush_r+0xc>
 8044690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8044692:	f7ff fa96 	bl	8043bc2 <__retarget_lock_release_recursive>
 8044696:	e7d9      	b.n	804464c <_fflush_r+0xc>
 8044698:	4b05      	ldr	r3, [pc, #20]	; (80446b0 <_fflush_r+0x70>)
 804469a:	429c      	cmp	r4, r3
 804469c:	d101      	bne.n	80446a2 <_fflush_r+0x62>
 804469e:	68ac      	ldr	r4, [r5, #8]
 80446a0:	e7df      	b.n	8044662 <_fflush_r+0x22>
 80446a2:	4b04      	ldr	r3, [pc, #16]	; (80446b4 <_fflush_r+0x74>)
 80446a4:	429c      	cmp	r4, r3
 80446a6:	bf08      	it	eq
 80446a8:	68ec      	ldreq	r4, [r5, #12]
 80446aa:	e7da      	b.n	8044662 <_fflush_r+0x22>
 80446ac:	080449cc 	.word	0x080449cc
 80446b0:	080449ec 	.word	0x080449ec
 80446b4:	080449ac 	.word	0x080449ac

080446b8 <_lseek_r>:
 80446b8:	b538      	push	{r3, r4, r5, lr}
 80446ba:	4604      	mov	r4, r0
 80446bc:	4d06      	ldr	r5, [pc, #24]	; (80446d8 <_lseek_r+0x20>)
 80446be:	4608      	mov	r0, r1
 80446c0:	4611      	mov	r1, r2
 80446c2:	2200      	movs	r2, #0
 80446c4:	602a      	str	r2, [r5, #0]
 80446c6:	461a      	mov	r2, r3
 80446c8:	f7fc f99c 	bl	8040a04 <_lseek>
 80446cc:	1c43      	adds	r3, r0, #1
 80446ce:	d102      	bne.n	80446d6 <_lseek_r+0x1e>
 80446d0:	682b      	ldr	r3, [r5, #0]
 80446d2:	b103      	cbz	r3, 80446d6 <_lseek_r+0x1e>
 80446d4:	6023      	str	r3, [r4, #0]
 80446d6:	bd38      	pop	{r3, r4, r5, pc}
 80446d8:	20018138 	.word	0x20018138

080446dc <__swhatbuf_r>:
 80446dc:	b570      	push	{r4, r5, r6, lr}
 80446de:	460e      	mov	r6, r1
 80446e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80446e4:	b096      	sub	sp, #88	; 0x58
 80446e6:	4614      	mov	r4, r2
 80446e8:	2900      	cmp	r1, #0
 80446ea:	461d      	mov	r5, r3
 80446ec:	da08      	bge.n	8044700 <__swhatbuf_r+0x24>
 80446ee:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80446f2:	2200      	movs	r2, #0
 80446f4:	602a      	str	r2, [r5, #0]
 80446f6:	061a      	lsls	r2, r3, #24
 80446f8:	d410      	bmi.n	804471c <__swhatbuf_r+0x40>
 80446fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80446fe:	e00e      	b.n	804471e <__swhatbuf_r+0x42>
 8044700:	466a      	mov	r2, sp
 8044702:	f000 f8c9 	bl	8044898 <_fstat_r>
 8044706:	2800      	cmp	r0, #0
 8044708:	dbf1      	blt.n	80446ee <__swhatbuf_r+0x12>
 804470a:	9a01      	ldr	r2, [sp, #4]
 804470c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8044710:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8044714:	425a      	negs	r2, r3
 8044716:	415a      	adcs	r2, r3
 8044718:	602a      	str	r2, [r5, #0]
 804471a:	e7ee      	b.n	80446fa <__swhatbuf_r+0x1e>
 804471c:	2340      	movs	r3, #64	; 0x40
 804471e:	2000      	movs	r0, #0
 8044720:	6023      	str	r3, [r4, #0]
 8044722:	b016      	add	sp, #88	; 0x58
 8044724:	bd70      	pop	{r4, r5, r6, pc}
	...

08044728 <__smakebuf_r>:
 8044728:	898b      	ldrh	r3, [r1, #12]
 804472a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 804472c:	079d      	lsls	r5, r3, #30
 804472e:	4606      	mov	r6, r0
 8044730:	460c      	mov	r4, r1
 8044732:	d507      	bpl.n	8044744 <__smakebuf_r+0x1c>
 8044734:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8044738:	6023      	str	r3, [r4, #0]
 804473a:	6123      	str	r3, [r4, #16]
 804473c:	2301      	movs	r3, #1
 804473e:	6163      	str	r3, [r4, #20]
 8044740:	b002      	add	sp, #8
 8044742:	bd70      	pop	{r4, r5, r6, pc}
 8044744:	ab01      	add	r3, sp, #4
 8044746:	466a      	mov	r2, sp
 8044748:	f7ff ffc8 	bl	80446dc <__swhatbuf_r>
 804474c:	9900      	ldr	r1, [sp, #0]
 804474e:	4605      	mov	r5, r0
 8044750:	4630      	mov	r0, r6
 8044752:	f7ff fa57 	bl	8043c04 <_malloc_r>
 8044756:	b948      	cbnz	r0, 804476c <__smakebuf_r+0x44>
 8044758:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 804475c:	059a      	lsls	r2, r3, #22
 804475e:	d4ef      	bmi.n	8044740 <__smakebuf_r+0x18>
 8044760:	f023 0303 	bic.w	r3, r3, #3
 8044764:	f043 0302 	orr.w	r3, r3, #2
 8044768:	81a3      	strh	r3, [r4, #12]
 804476a:	e7e3      	b.n	8044734 <__smakebuf_r+0xc>
 804476c:	4b0d      	ldr	r3, [pc, #52]	; (80447a4 <__smakebuf_r+0x7c>)
 804476e:	62b3      	str	r3, [r6, #40]	; 0x28
 8044770:	89a3      	ldrh	r3, [r4, #12]
 8044772:	6020      	str	r0, [r4, #0]
 8044774:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8044778:	6120      	str	r0, [r4, #16]
 804477a:	81a3      	strh	r3, [r4, #12]
 804477c:	9b00      	ldr	r3, [sp, #0]
 804477e:	6163      	str	r3, [r4, #20]
 8044780:	9b01      	ldr	r3, [sp, #4]
 8044782:	b15b      	cbz	r3, 804479c <__smakebuf_r+0x74>
 8044784:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8044788:	4630      	mov	r0, r6
 804478a:	f000 f897 	bl	80448bc <_isatty_r>
 804478e:	b128      	cbz	r0, 804479c <__smakebuf_r+0x74>
 8044790:	89a3      	ldrh	r3, [r4, #12]
 8044792:	f023 0303 	bic.w	r3, r3, #3
 8044796:	f043 0301 	orr.w	r3, r3, #1
 804479a:	81a3      	strh	r3, [r4, #12]
 804479c:	89a0      	ldrh	r0, [r4, #12]
 804479e:	4305      	orrs	r5, r0
 80447a0:	81a5      	strh	r5, [r4, #12]
 80447a2:	e7cd      	b.n	8044740 <__smakebuf_r+0x18>
 80447a4:	08043a1d 	.word	0x08043a1d

080447a8 <memchr>:
 80447a8:	b2c9      	uxtb	r1, r1
 80447aa:	4402      	add	r2, r0
 80447ac:	b510      	push	{r4, lr}
 80447ae:	4290      	cmp	r0, r2
 80447b0:	4603      	mov	r3, r0
 80447b2:	d101      	bne.n	80447b8 <memchr+0x10>
 80447b4:	2300      	movs	r3, #0
 80447b6:	e003      	b.n	80447c0 <memchr+0x18>
 80447b8:	781c      	ldrb	r4, [r3, #0]
 80447ba:	3001      	adds	r0, #1
 80447bc:	428c      	cmp	r4, r1
 80447be:	d1f6      	bne.n	80447ae <memchr+0x6>
 80447c0:	4618      	mov	r0, r3
 80447c2:	bd10      	pop	{r4, pc}

080447c4 <__malloc_lock>:
 80447c4:	4801      	ldr	r0, [pc, #4]	; (80447cc <__malloc_lock+0x8>)
 80447c6:	f7ff b9fb 	b.w	8043bc0 <__retarget_lock_acquire_recursive>
 80447ca:	bf00      	nop
 80447cc:	2001812c 	.word	0x2001812c

080447d0 <__malloc_unlock>:
 80447d0:	4801      	ldr	r0, [pc, #4]	; (80447d8 <__malloc_unlock+0x8>)
 80447d2:	f7ff b9f6 	b.w	8043bc2 <__retarget_lock_release_recursive>
 80447d6:	bf00      	nop
 80447d8:	2001812c 	.word	0x2001812c

080447dc <_free_r>:
 80447dc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80447de:	2900      	cmp	r1, #0
 80447e0:	d043      	beq.n	804486a <_free_r+0x8e>
 80447e2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80447e6:	1f0c      	subs	r4, r1, #4
 80447e8:	9001      	str	r0, [sp, #4]
 80447ea:	2b00      	cmp	r3, #0
 80447ec:	bfb8      	it	lt
 80447ee:	18e4      	addlt	r4, r4, r3
 80447f0:	f7ff ffe8 	bl	80447c4 <__malloc_lock>
 80447f4:	4a1e      	ldr	r2, [pc, #120]	; (8044870 <_free_r+0x94>)
 80447f6:	9801      	ldr	r0, [sp, #4]
 80447f8:	6813      	ldr	r3, [r2, #0]
 80447fa:	b933      	cbnz	r3, 804480a <_free_r+0x2e>
 80447fc:	6063      	str	r3, [r4, #4]
 80447fe:	6014      	str	r4, [r2, #0]
 8044800:	b003      	add	sp, #12
 8044802:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8044806:	f7ff bfe3 	b.w	80447d0 <__malloc_unlock>
 804480a:	42a3      	cmp	r3, r4
 804480c:	d908      	bls.n	8044820 <_free_r+0x44>
 804480e:	6825      	ldr	r5, [r4, #0]
 8044810:	1961      	adds	r1, r4, r5
 8044812:	428b      	cmp	r3, r1
 8044814:	bf01      	itttt	eq
 8044816:	6819      	ldreq	r1, [r3, #0]
 8044818:	685b      	ldreq	r3, [r3, #4]
 804481a:	1949      	addeq	r1, r1, r5
 804481c:	6021      	streq	r1, [r4, #0]
 804481e:	e7ed      	b.n	80447fc <_free_r+0x20>
 8044820:	461a      	mov	r2, r3
 8044822:	685b      	ldr	r3, [r3, #4]
 8044824:	b10b      	cbz	r3, 804482a <_free_r+0x4e>
 8044826:	42a3      	cmp	r3, r4
 8044828:	d9fa      	bls.n	8044820 <_free_r+0x44>
 804482a:	6811      	ldr	r1, [r2, #0]
 804482c:	1855      	adds	r5, r2, r1
 804482e:	42a5      	cmp	r5, r4
 8044830:	d10b      	bne.n	804484a <_free_r+0x6e>
 8044832:	6824      	ldr	r4, [r4, #0]
 8044834:	4421      	add	r1, r4
 8044836:	1854      	adds	r4, r2, r1
 8044838:	6011      	str	r1, [r2, #0]
 804483a:	42a3      	cmp	r3, r4
 804483c:	d1e0      	bne.n	8044800 <_free_r+0x24>
 804483e:	681c      	ldr	r4, [r3, #0]
 8044840:	685b      	ldr	r3, [r3, #4]
 8044842:	4421      	add	r1, r4
 8044844:	6053      	str	r3, [r2, #4]
 8044846:	6011      	str	r1, [r2, #0]
 8044848:	e7da      	b.n	8044800 <_free_r+0x24>
 804484a:	d902      	bls.n	8044852 <_free_r+0x76>
 804484c:	230c      	movs	r3, #12
 804484e:	6003      	str	r3, [r0, #0]
 8044850:	e7d6      	b.n	8044800 <_free_r+0x24>
 8044852:	6825      	ldr	r5, [r4, #0]
 8044854:	1961      	adds	r1, r4, r5
 8044856:	428b      	cmp	r3, r1
 8044858:	bf02      	ittt	eq
 804485a:	6819      	ldreq	r1, [r3, #0]
 804485c:	685b      	ldreq	r3, [r3, #4]
 804485e:	1949      	addeq	r1, r1, r5
 8044860:	6063      	str	r3, [r4, #4]
 8044862:	bf08      	it	eq
 8044864:	6021      	streq	r1, [r4, #0]
 8044866:	6054      	str	r4, [r2, #4]
 8044868:	e7ca      	b.n	8044800 <_free_r+0x24>
 804486a:	b003      	add	sp, #12
 804486c:	bd30      	pop	{r4, r5, pc}
 804486e:	bf00      	nop
 8044870:	20018130 	.word	0x20018130

08044874 <_read_r>:
 8044874:	b538      	push	{r3, r4, r5, lr}
 8044876:	4604      	mov	r4, r0
 8044878:	4d06      	ldr	r5, [pc, #24]	; (8044894 <_read_r+0x20>)
 804487a:	4608      	mov	r0, r1
 804487c:	4611      	mov	r1, r2
 804487e:	2200      	movs	r2, #0
 8044880:	602a      	str	r2, [r5, #0]
 8044882:	461a      	mov	r2, r3
 8044884:	f7fc f85e 	bl	8040944 <_read>
 8044888:	1c43      	adds	r3, r0, #1
 804488a:	d102      	bne.n	8044892 <_read_r+0x1e>
 804488c:	682b      	ldr	r3, [r5, #0]
 804488e:	b103      	cbz	r3, 8044892 <_read_r+0x1e>
 8044890:	6023      	str	r3, [r4, #0]
 8044892:	bd38      	pop	{r3, r4, r5, pc}
 8044894:	20018138 	.word	0x20018138

08044898 <_fstat_r>:
 8044898:	b538      	push	{r3, r4, r5, lr}
 804489a:	2300      	movs	r3, #0
 804489c:	4d06      	ldr	r5, [pc, #24]	; (80448b8 <_fstat_r+0x20>)
 804489e:	4604      	mov	r4, r0
 80448a0:	4608      	mov	r0, r1
 80448a2:	4611      	mov	r1, r2
 80448a4:	602b      	str	r3, [r5, #0]
 80448a6:	f7fc f892 	bl	80409ce <_fstat>
 80448aa:	1c43      	adds	r3, r0, #1
 80448ac:	d102      	bne.n	80448b4 <_fstat_r+0x1c>
 80448ae:	682b      	ldr	r3, [r5, #0]
 80448b0:	b103      	cbz	r3, 80448b4 <_fstat_r+0x1c>
 80448b2:	6023      	str	r3, [r4, #0]
 80448b4:	bd38      	pop	{r3, r4, r5, pc}
 80448b6:	bf00      	nop
 80448b8:	20018138 	.word	0x20018138

080448bc <_isatty_r>:
 80448bc:	b538      	push	{r3, r4, r5, lr}
 80448be:	2300      	movs	r3, #0
 80448c0:	4d05      	ldr	r5, [pc, #20]	; (80448d8 <_isatty_r+0x1c>)
 80448c2:	4604      	mov	r4, r0
 80448c4:	4608      	mov	r0, r1
 80448c6:	602b      	str	r3, [r5, #0]
 80448c8:	f7fc f891 	bl	80409ee <_isatty>
 80448cc:	1c43      	adds	r3, r0, #1
 80448ce:	d102      	bne.n	80448d6 <_isatty_r+0x1a>
 80448d0:	682b      	ldr	r3, [r5, #0]
 80448d2:	b103      	cbz	r3, 80448d6 <_isatty_r+0x1a>
 80448d4:	6023      	str	r3, [r4, #0]
 80448d6:	bd38      	pop	{r3, r4, r5, pc}
 80448d8:	20018138 	.word	0x20018138

080448dc <_init>:
 80448dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80448de:	bf00      	nop
 80448e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80448e2:	bc08      	pop	{r3}
 80448e4:	469e      	mov	lr, r3
 80448e6:	4770      	bx	lr

080448e8 <_fini>:
 80448e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80448ea:	bf00      	nop
 80448ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80448ee:	bc08      	pop	{r3}
 80448f0:	469e      	mov	lr, r3
 80448f2:	4770      	bx	lr
 80448f4:	0000      	movs	r0, r0
	...

080448f8 <__SECURE_RegisterCallback_veneer>:
 80448f8:	b401      	push	{r0}
 80448fa:	4802      	ldr	r0, [pc, #8]	; (8044904 <__SECURE_RegisterCallback_veneer+0xc>)
 80448fc:	4684      	mov	ip, r0
 80448fe:	bc01      	pop	{r0}
 8044900:	4760      	bx	ip
 8044902:	bf00      	nop
 8044904:	0c03e009 	.word	0x0c03e009

08044908 <__SECURE_SystemCoreClockUpdate_veneer>:
 8044908:	b401      	push	{r0}
 804490a:	4802      	ldr	r0, [pc, #8]	; (8044914 <__SECURE_SystemCoreClockUpdate_veneer+0xc>)
 804490c:	4684      	mov	ip, r0
 804490e:	bc01      	pop	{r0}
 8044910:	4760      	bx	ip
 8044912:	bf00      	nop
 8044914:	0c03e001 	.word	0x0c03e001
