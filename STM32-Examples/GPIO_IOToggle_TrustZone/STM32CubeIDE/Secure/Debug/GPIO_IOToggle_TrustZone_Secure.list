
GPIO_IOToggle_TrustZone_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002550  0c0001f8  0c0001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000050  0c002748  0c002748  00012748  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c002798  0c002798  0002e020  2**0
                  CONTENTS
  4 .ARM          00000000  0c002798  0c002798  0002e020  2**0
                  CONTENTS
  5 .preinit_array 00000000  0c002798  0c002798  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0c002798  0c002798  00012798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0c0027a0  0c0027a0  000127a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  30000000  0c0027a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000030  30000010  30000010  00030010  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  30000040  30000040  00030010  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .debug_line   00008e1a  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_info   00007970  00000000  00000000  00036e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000017cd  00000000  00000000  0003e7e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000820  00000000  00000000  0003ffb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    000fd755  00000000  00000000  000407d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_ranges 00000758  00000000  00000000  0013df28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  00027f8f  00000000  00000000  0013e680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0016660f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001f44  00000000  00000000  00166660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f8 <__do_global_dtors_aux>:
 c0001f8:	b510      	push	{r4, lr}
 c0001fa:	4c05      	ldr	r4, [pc, #20]	; (c000210 <__do_global_dtors_aux+0x18>)
 c0001fc:	7823      	ldrb	r3, [r4, #0]
 c0001fe:	b933      	cbnz	r3, c00020e <__do_global_dtors_aux+0x16>
 c000200:	4b04      	ldr	r3, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x1c>)
 c000202:	b113      	cbz	r3, c00020a <__do_global_dtors_aux+0x12>
 c000204:	4804      	ldr	r0, [pc, #16]	; (c000218 <__do_global_dtors_aux+0x20>)
 c000206:	e000      	b.n	c00020a <__do_global_dtors_aux+0x12>
 c000208:	bf00      	nop
 c00020a:	2301      	movs	r3, #1
 c00020c:	7023      	strb	r3, [r4, #0]
 c00020e:	bd10      	pop	{r4, pc}
 c000210:	30000010 	.word	0x30000010
 c000214:	00000000 	.word	0x00000000
 c000218:	0c002730 	.word	0x0c002730

0c00021c <frame_dummy>:
 c00021c:	b508      	push	{r3, lr}
 c00021e:	4b03      	ldr	r3, [pc, #12]	; (c00022c <frame_dummy+0x10>)
 c000220:	b11b      	cbz	r3, c00022a <frame_dummy+0xe>
 c000222:	4903      	ldr	r1, [pc, #12]	; (c000230 <frame_dummy+0x14>)
 c000224:	4803      	ldr	r0, [pc, #12]	; (c000234 <frame_dummy+0x18>)
 c000226:	e000      	b.n	c00022a <frame_dummy+0xe>
 c000228:	bf00      	nop
 c00022a:	bd08      	pop	{r3, pc}
 c00022c:	00000000 	.word	0x00000000
 c000230:	30000014 	.word	0x30000014
 c000234:	0c002730 	.word	0x0c002730

0c000238 <__gnu_cmse_nonsecure_call>:
 c000238:	e92d 4fe0 	stmdb	sp!, {r5, r6, r7, r8, r9, sl, fp, lr}
 c00023c:	4627      	mov	r7, r4
 c00023e:	46a0      	mov	r8, r4
 c000240:	46a1      	mov	r9, r4
 c000242:	46a2      	mov	sl, r4
 c000244:	46a3      	mov	fp, r4
 c000246:	46a4      	mov	ip, r4
 c000248:	ed2d 8b10 	vpush	{d8-d15}
 c00024c:	f04f 0500 	mov.w	r5, #0
 c000250:	ec45 5b18 	vmov	d8, r5, r5
 c000254:	ec45 5a19 	vmov	s18, s19, r5, r5
 c000258:	ec45 5a1a 	vmov	s20, s21, r5, r5
 c00025c:	ec45 5a1b 	vmov	s22, s23, r5, r5
 c000260:	ec45 5a1c 	vmov	s24, s25, r5, r5
 c000264:	ec45 5a1d 	vmov	s26, s27, r5, r5
 c000268:	ec45 5a1e 	vmov	s28, s29, r5, r5
 c00026c:	ec45 5a1f 	vmov	s30, s31, r5, r5
 c000270:	eef1 5a10 	vmrs	r5, fpscr
 c000274:	f64f 7660 	movw	r6, #65376	; 0xff60
 c000278:	f6c0 76ff 	movt	r6, #4095	; 0xfff
 c00027c:	4035      	ands	r5, r6
 c00027e:	eee1 5a10 	vmsr	fpscr, r5
 c000282:	f384 8800 	msr	CPSR_f, r4
 c000286:	4625      	mov	r5, r4
 c000288:	4626      	mov	r6, r4
 c00028a:	47a4      	blxns	r4
 c00028c:	ecbd 8b10 	vpop	{d8-d15}
 c000290:	e8bd 8fe0 	ldmia.w	sp!, {r5, r6, r7, r8, r9, sl, fp, pc}

0c000294 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c000294:	f8df d034 	ldr.w	sp, [pc, #52]	; c0002cc <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c000298:	f000 fc34 	bl	c000b04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c00029c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c00029e:	e003      	b.n	c0002a8 <LoopCopyDataInit>

0c0002a0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c0002a0:	4b0b      	ldr	r3, [pc, #44]	; (c0002d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c0002a2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c0002a4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c0002a6:	3104      	adds	r1, #4

0c0002a8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c0002a8:	480a      	ldr	r0, [pc, #40]	; (c0002d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 c0002aa:	4b0b      	ldr	r3, [pc, #44]	; (c0002d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 c0002ac:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c0002ae:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c0002b0:	d3f6      	bcc.n	c0002a0 <CopyDataInit>
	ldr	r2, =_sbss
 c0002b2:	4a0a      	ldr	r2, [pc, #40]	; (c0002dc <LoopForever+0x12>)
	b	LoopFillZerobss
 c0002b4:	e002      	b.n	c0002bc <LoopFillZerobss>

0c0002b6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c0002b6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c0002b8:	f842 3b04 	str.w	r3, [r2], #4

0c0002bc <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c0002bc:	4b08      	ldr	r3, [pc, #32]	; (c0002e0 <LoopForever+0x16>)
	cmp	r2, r3
 c0002be:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c0002c0:	d3f9      	bcc.n	c0002b6 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c0002c2:	f002 fa09 	bl	c0026d8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c0002c6:	f000 f80f 	bl	c0002e8 <main>

0c0002ca <LoopForever>:

LoopForever:
    b LoopForever
 c0002ca:	e7fe      	b.n	c0002ca <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c0002cc:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c0002d0:	0c0027a8 	.word	0x0c0027a8
	ldr	r0, =_sdata
 c0002d4:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c0002d8:	30000010 	.word	0x30000010
	ldr	r2, =_sbss
 c0002dc:	30000010 	.word	0x30000010
	ldr	r3, = _ebss
 c0002e0:	30000040 	.word	0x30000040

0c0002e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c0002e4:	e7fe      	b.n	c0002e4 <ADC1_2_IRQHandler>
	...

0c0002e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c0002e8:	b580      	push	{r7, lr}
 c0002ea:	b088      	sub	sp, #32
 c0002ec:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and interrupts secure/non-secure allocation setup done */
  /* in SystemInit() based on partition_stm32l562xx.h file's definitions. */
  /* USER CODE BEGIN 1 */

  /* Enable SecureFault handler (HardFault is default) */
  SCB->SHCSR |= SCB_SHCSR_SECUREFAULTENA_Msk;
 c0002ee:	4b57      	ldr	r3, [pc, #348]	; (c00044c <main+0x164>)
 c0002f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0002f2:	4a56      	ldr	r2, [pc, #344]	; (c00044c <main+0x164>)
 c0002f4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c0002f8:	6253      	str	r3, [r2, #36]	; 0x24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c0002fa:	f000 fd09 	bl	c000d10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* Configure the system clock */
  SystemClock_Config();
 c0002fe:	f000 f9e9 	bl	c0006d4 <SystemClock_Config>

  /* USER CODE END Init */

  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000302:	f000 f8fd 	bl	c000500 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000306:	f000 f987 	bl	c000618 <MX_GPIO_Init>
  MX_ICACHE_Init();
 c00030a:	f000 f971 	bl	c0005f0 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  SecureInitIODone = 1;
 c00030e:	4b50      	ldr	r3, [pc, #320]	; (c000450 <main+0x168>)
 c000310:	2201      	movs	r2, #1
 c000312:	601a      	str	r2, [r3, #0]

  /* All IOs are by default allocated to secure */
  /* Release them all to non-secure except PG.12 (LED10) kept as secure */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000314:	4b4f      	ldr	r3, [pc, #316]	; (c000454 <main+0x16c>)
 c000316:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000318:	4a4e      	ldr	r2, [pc, #312]	; (c000454 <main+0x16c>)
 c00031a:	f043 0301 	orr.w	r3, r3, #1
 c00031e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000320:	4b4c      	ldr	r3, [pc, #304]	; (c000454 <main+0x16c>)
 c000322:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000324:	f003 0301 	and.w	r3, r3, #1
 c000328:	61fb      	str	r3, [r7, #28]
 c00032a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c00032c:	4b49      	ldr	r3, [pc, #292]	; (c000454 <main+0x16c>)
 c00032e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000330:	4a48      	ldr	r2, [pc, #288]	; (c000454 <main+0x16c>)
 c000332:	f043 0302 	orr.w	r3, r3, #2
 c000336:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000338:	4b46      	ldr	r3, [pc, #280]	; (c000454 <main+0x16c>)
 c00033a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00033c:	f003 0302 	and.w	r3, r3, #2
 c000340:	61bb      	str	r3, [r7, #24]
 c000342:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000344:	4b43      	ldr	r3, [pc, #268]	; (c000454 <main+0x16c>)
 c000346:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000348:	4a42      	ldr	r2, [pc, #264]	; (c000454 <main+0x16c>)
 c00034a:	f043 0304 	orr.w	r3, r3, #4
 c00034e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000350:	4b40      	ldr	r3, [pc, #256]	; (c000454 <main+0x16c>)
 c000352:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000354:	f003 0304 	and.w	r3, r3, #4
 c000358:	617b      	str	r3, [r7, #20]
 c00035a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c00035c:	4b3d      	ldr	r3, [pc, #244]	; (c000454 <main+0x16c>)
 c00035e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000360:	4a3c      	ldr	r2, [pc, #240]	; (c000454 <main+0x16c>)
 c000362:	f043 0308 	orr.w	r3, r3, #8
 c000366:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000368:	4b3a      	ldr	r3, [pc, #232]	; (c000454 <main+0x16c>)
 c00036a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00036c:	f003 0308 	and.w	r3, r3, #8
 c000370:	613b      	str	r3, [r7, #16]
 c000372:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 c000374:	4b37      	ldr	r3, [pc, #220]	; (c000454 <main+0x16c>)
 c000376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000378:	4a36      	ldr	r2, [pc, #216]	; (c000454 <main+0x16c>)
 c00037a:	f043 0310 	orr.w	r3, r3, #16
 c00037e:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000380:	4b34      	ldr	r3, [pc, #208]	; (c000454 <main+0x16c>)
 c000382:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000384:	f003 0310 	and.w	r3, r3, #16
 c000388:	60fb      	str	r3, [r7, #12]
 c00038a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 c00038c:	4b31      	ldr	r3, [pc, #196]	; (c000454 <main+0x16c>)
 c00038e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000390:	4a30      	ldr	r2, [pc, #192]	; (c000454 <main+0x16c>)
 c000392:	f043 0320 	orr.w	r3, r3, #32
 c000396:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000398:	4b2e      	ldr	r3, [pc, #184]	; (c000454 <main+0x16c>)
 c00039a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00039c:	f003 0320 	and.w	r3, r3, #32
 c0003a0:	60bb      	str	r3, [r7, #8]
 c0003a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c0003a4:	4b2b      	ldr	r3, [pc, #172]	; (c000454 <main+0x16c>)
 c0003a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0003a8:	4a2a      	ldr	r2, [pc, #168]	; (c000454 <main+0x16c>)
 c0003aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0003ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0003b0:	4b28      	ldr	r3, [pc, #160]	; (c000454 <main+0x16c>)
 c0003b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0003b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c0003b8:	607b      	str	r3, [r7, #4]
 c0003ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 c0003bc:	4b25      	ldr	r3, [pc, #148]	; (c000454 <main+0x16c>)
 c0003be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0003c0:	4a24      	ldr	r2, [pc, #144]	; (c000454 <main+0x16c>)
 c0003c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c0003c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 c0003c8:	4b22      	ldr	r3, [pc, #136]	; (c000454 <main+0x16c>)
 c0003ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c0003cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0003d0:	603b      	str	r3, [r7, #0]
 c0003d2:	683b      	ldr	r3, [r7, #0]
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0003d4:	2200      	movs	r2, #0
 c0003d6:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0003da:	481f      	ldr	r0, [pc, #124]	; (c000458 <main+0x170>)
 c0003dc:	f000 ffc6 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOB, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0003e0:	2200      	movs	r2, #0
 c0003e2:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0003e6:	481d      	ldr	r0, [pc, #116]	; (c00045c <main+0x174>)
 c0003e8:	f000 ffc0 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0003ec:	2200      	movs	r2, #0
 c0003ee:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0003f2:	481b      	ldr	r0, [pc, #108]	; (c000460 <main+0x178>)
 c0003f4:	f000 ffba 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOD, GPIO_PIN_All, GPIO_PIN_NSEC);
 c0003f8:	2200      	movs	r2, #0
 c0003fa:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c0003fe:	4819      	ldr	r0, [pc, #100]	; (c000464 <main+0x17c>)
 c000400:	f000 ffb4 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOE, GPIO_PIN_All, GPIO_PIN_NSEC);
 c000404:	2200      	movs	r2, #0
 c000406:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00040a:	4817      	ldr	r0, [pc, #92]	; (c000468 <main+0x180>)
 c00040c:	f000 ffae 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOF, GPIO_PIN_All, GPIO_PIN_NSEC);
 c000410:	2200      	movs	r2, #0
 c000412:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c000416:	4815      	ldr	r0, [pc, #84]	; (c00046c <main+0x184>)
 c000418:	f000 ffa8 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  //release all GPIO except for GPIO pin 12 (green led)
  HAL_GPIO_ConfigPinAttributes(GPIOG, (GPIO_PIN_All & ~(GPIO_PIN_12)), GPIO_PIN_NSEC);
 c00041c:	2200      	movs	r2, #0
 c00041e:	f64e 71ff 	movw	r1, #61439	; 0xefff
 c000422:	4813      	ldr	r0, [pc, #76]	; (c000470 <main+0x188>)
 c000424:	f000 ffa2 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>
  HAL_GPIO_ConfigPinAttributes(GPIOH, GPIO_PIN_All, GPIO_PIN_NSEC);
 c000428:	2200      	movs	r2, #0
 c00042a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 c00042e:	4811      	ldr	r0, [pc, #68]	; (c000474 <main+0x18c>)
 c000430:	f000 ff9c 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>

  //turn LED off before switching to non-secure environment
  HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_SET);
 c000434:	2201      	movs	r2, #1
 c000436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 c00043a:	480d      	ldr	r0, [pc, #52]	; (c000470 <main+0x188>)
 c00043c:	f000 ff7e 	bl	c00133c <HAL_GPIO_WritePin>

  //suspend systick in secure
  HAL_SuspendTick();
 c000440:	f000 fcdc 	bl	c000dfc <HAL_SuspendTick>

  /* USER CODE END 2 */

  /*************** Setup and jump to non-secure *******************************/

  NonSecure_Init();
 c000444:	f000 f818 	bl	c000478 <NonSecure_Init>

  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 c000448:	e7fe      	b.n	c000448 <main+0x160>
 c00044a:	bf00      	nop
 c00044c:	e000ed00 	.word	0xe000ed00
 c000450:	3000002c 	.word	0x3000002c
 c000454:	50021000 	.word	0x50021000
 c000458:	52020000 	.word	0x52020000
 c00045c:	52020400 	.word	0x52020400
 c000460:	52020800 	.word	0x52020800
 c000464:	52020c00 	.word	0x52020c00
 c000468:	52021000 	.word	0x52021000
 c00046c:	52021400 	.word	0x52021400
 c000470:	52021800 	.word	0x52021800
 c000474:	52021c00 	.word	0x52021c00

0c000478 <NonSecure_Init>:
  *         This function is responsible for Non-secure initialization and switch
  *         to non-secure state
  * @retval None
  */
static void NonSecure_Init(void)
{
 c000478:	b590      	push	{r4, r7, lr}
 c00047a:	b083      	sub	sp, #12
 c00047c:	af00      	add	r7, sp, #0
  funcptr_NS NonSecure_ResetHandler;

  SCB_NS->VTOR = VTOR_TABLE_NS_START_ADDR;
 c00047e:	4b1d      	ldr	r3, [pc, #116]	; (c0004f4 <NonSecure_Init+0x7c>)
 c000480:	4a1d      	ldr	r2, [pc, #116]	; (c0004f8 <NonSecure_Init+0x80>)
 c000482:	609a      	str	r2, [r3, #8]

  /* Set non-secure main stack (MSP_NS) */
  __TZ_set_MSP_NS((*(uint32_t *)VTOR_TABLE_NS_START_ADDR));
 c000484:	4b1c      	ldr	r3, [pc, #112]	; (c0004f8 <NonSecure_Init+0x80>)
 c000486:	681b      	ldr	r3, [r3, #0]
 c000488:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the non-secure Main Stack Pointer (MSP) when in secure state.
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __TZ_set_MSP_NS(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp_ns, %0" : : "r" (topOfMainStack) : );
 c00048a:	683b      	ldr	r3, [r7, #0]
 c00048c:	f383 8888 	msr	MSP_NS, r3
}
 c000490:	bf00      	nop

  /* Get non-secure reset handler */
  NonSecure_ResetHandler = (funcptr_NS)(*((uint32_t *)((VTOR_TABLE_NS_START_ADDR) + 4U)));
 c000492:	4b1a      	ldr	r3, [pc, #104]	; (c0004fc <NonSecure_Init+0x84>)
 c000494:	681b      	ldr	r3, [r3, #0]
 c000496:	607b      	str	r3, [r7, #4]

  /* Start non-secure state software application */
  NonSecure_ResetHandler();
 c000498:	687b      	ldr	r3, [r7, #4]
 c00049a:	461c      	mov	r4, r3
 c00049c:	0864      	lsrs	r4, r4, #1
 c00049e:	0064      	lsls	r4, r4, #1
 c0004a0:	4620      	mov	r0, r4
 c0004a2:	4621      	mov	r1, r4
 c0004a4:	4622      	mov	r2, r4
 c0004a6:	4623      	mov	r3, r4
 c0004a8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0004ac:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0004b0:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0004b4:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0004b8:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0004bc:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0004c0:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0004c4:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0004c8:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0004cc:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0004d0:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0004d4:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0004d8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0004dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0004e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0004e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0004e8:	f7ff fea6 	bl	c000238 <__gnu_cmse_nonsecure_call>
}
 c0004ec:	bf00      	nop
 c0004ee:	370c      	adds	r7, #12
 c0004f0:	46bd      	mov	sp, r7
 c0004f2:	bd90      	pop	{r4, r7, pc}
 c0004f4:	e002ed00 	.word	0xe002ed00
 c0004f8:	08040000 	.word	0x08040000
 c0004fc:	08040004 	.word	0x08040004

0c000500 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000500:	b580      	push	{r7, lr}
 c000502:	b09c      	sub	sp, #112	; 0x70
 c000504:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c000506:	1d3b      	adds	r3, r7, #4
 c000508:	226c      	movs	r2, #108	; 0x6c
 c00050a:	2100      	movs	r1, #0
 c00050c:	4618      	mov	r0, r3
 c00050e:	f002 f907 	bl	c002720 <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c000512:	2300      	movs	r3, #0
 c000514:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000516:	2300      	movs	r3, #0
 c000518:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c00051a:	f04f 33ff 	mov.w	r3, #4294967295
 c00051e:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c000520:	f04f 33ff 	mov.w	r3, #4294967295
 c000524:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c000526:	f04f 33ff 	mov.w	r3, #4294967295
 c00052a:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c00052c:	f04f 33ff 	mov.w	r3, #4294967295
 c000530:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c000532:	f04f 33ff 	mov.w	r3, #4294967295
 c000536:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c000538:	f04f 33ff 	mov.w	r3, #4294967295
 c00053c:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c00053e:	f04f 33ff 	mov.w	r3, #4294967295
 c000542:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c000544:	f04f 33ff 	mov.w	r3, #4294967295
 c000548:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c00054a:	f04f 33ff 	mov.w	r3, #4294967295
 c00054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c000550:	f04f 33ff 	mov.w	r3, #4294967295
 c000554:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c000556:	f04f 33ff 	mov.w	r3, #4294967295
 c00055a:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c00055c:	f04f 33ff 	mov.w	r3, #4294967295
 c000560:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c000562:	2300      	movs	r3, #0
 c000564:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c000566:	2300      	movs	r3, #0
 c000568:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c00056a:	2300      	movs	r3, #0
 c00056c:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c00056e:	2300      	movs	r3, #0
 c000570:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c000572:	2300      	movs	r3, #0
 c000574:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c000576:	2300      	movs	r3, #0
 c000578:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c00057a:	2300      	movs	r3, #0
 c00057c:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c00057e:	2300      	movs	r3, #0
 c000580:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c000582:	2300      	movs	r3, #0
 c000584:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000586:	2300      	movs	r3, #0
 c000588:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c00058a:	2300      	movs	r3, #0
 c00058c:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c00058e:	2300      	movs	r3, #0
 c000590:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000592:	2300      	movs	r3, #0
 c000594:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000596:	1d3b      	adds	r3, r7, #4
 c000598:	4619      	mov	r1, r3
 c00059a:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c00059e:	f000 ff1d 	bl	c0013dc <HAL_GTZC_MPCBB_ConfigMem>
 c0005a2:	4603      	mov	r3, r0
 c0005a4:	2b00      	cmp	r3, #0
 c0005a6:	d001      	beq.n	c0005ac <MX_GTZC_S_Init+0xac>
  {
    Error_Handler();
 c0005a8:	f000 f8e6 	bl	c000778 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c0005ac:	2300      	movs	r3, #0
 c0005ae:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c0005b0:	2300      	movs	r3, #0
 c0005b2:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c0005b4:	2300      	movs	r3, #0
 c0005b6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c0005b8:	2300      	movs	r3, #0
 c0005ba:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c0005bc:	2300      	movs	r3, #0
 c0005be:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c0005c0:	2300      	movs	r3, #0
 c0005c2:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c0005c4:	2300      	movs	r3, #0
 c0005c6:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c0005c8:	2300      	movs	r3, #0
 c0005ca:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c0005cc:	2300      	movs	r3, #0
 c0005ce:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c0005d0:	1d3b      	adds	r3, r7, #4
 c0005d2:	4619      	mov	r1, r3
 c0005d4:	4805      	ldr	r0, [pc, #20]	; (c0005ec <MX_GTZC_S_Init+0xec>)
 c0005d6:	f000 ff01 	bl	c0013dc <HAL_GTZC_MPCBB_ConfigMem>
 c0005da:	4603      	mov	r3, r0
 c0005dc:	2b00      	cmp	r3, #0
 c0005de:	d001      	beq.n	c0005e4 <MX_GTZC_S_Init+0xe4>
  {
    Error_Handler();
 c0005e0:	f000 f8ca 	bl	c000778 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c0005e4:	bf00      	nop
 c0005e6:	3770      	adds	r7, #112	; 0x70
 c0005e8:	46bd      	mov	sp, r7
 c0005ea:	bd80      	pop	{r7, pc}
 c0005ec:	30030000 	.word	0x30030000

0c0005f0 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c0005f0:	b580      	push	{r7, lr}
 c0005f2:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c0005f4:	2000      	movs	r0, #0
 c0005f6:	f001 f803 	bl	c001600 <HAL_ICACHE_ConfigAssociativityMode>
 c0005fa:	4603      	mov	r3, r0
 c0005fc:	2b00      	cmp	r3, #0
 c0005fe:	d001      	beq.n	c000604 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000600:	f000 f8ba 	bl	c000778 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000604:	f001 f81c 	bl	c001640 <HAL_ICACHE_Enable>
 c000608:	4603      	mov	r3, r0
 c00060a:	2b00      	cmp	r3, #0
 c00060c:	d001      	beq.n	c000612 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c00060e:	f000 f8b3 	bl	c000778 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000612:	bf00      	nop
 c000614:	bd80      	pop	{r7, pc}
	...

0c000618 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000618:	b580      	push	{r7, lr}
 c00061a:	b088      	sub	sp, #32
 c00061c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c00061e:	f107 030c 	add.w	r3, r7, #12
 c000622:	2200      	movs	r2, #0
 c000624:	601a      	str	r2, [r3, #0]
 c000626:	605a      	str	r2, [r3, #4]
 c000628:	609a      	str	r2, [r3, #8]
 c00062a:	60da      	str	r2, [r3, #12]
 c00062c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c00062e:	4b25      	ldr	r3, [pc, #148]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000630:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000632:	4a24      	ldr	r2, [pc, #144]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000634:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000638:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00063a:	4b22      	ldr	r3, [pc, #136]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c00063c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00063e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000642:	60bb      	str	r3, [r7, #8]
 c000644:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c000646:	f001 f875 	bl	c001734 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c00064a:	4b1e      	ldr	r3, [pc, #120]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c00064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00064e:	4a1d      	ldr	r2, [pc, #116]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000650:	f043 0308 	orr.w	r3, r3, #8
 c000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000656:	4b1b      	ldr	r3, [pc, #108]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c00065a:	f003 0308 	and.w	r3, r3, #8
 c00065e:	607b      	str	r3, [r7, #4]
 c000660:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000662:	4b18      	ldr	r3, [pc, #96]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000666:	4a17      	ldr	r2, [pc, #92]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000668:	f043 0301 	orr.w	r3, r3, #1
 c00066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c00066e:	4b15      	ldr	r3, [pc, #84]	; (c0006c4 <MX_GPIO_Init+0xac>)
 c000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000672:	f003 0301 	and.w	r3, r3, #1
 c000676:	603b      	str	r3, [r7, #0]
 c000678:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED10_GPIO_Port, LED10_Pin, GPIO_PIN_SET);
 c00067a:	2201      	movs	r2, #1
 c00067c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 c000680:	4811      	ldr	r0, [pc, #68]	; (c0006c8 <MX_GPIO_Init+0xb0>)
 c000682:	f000 fe5b 	bl	c00133c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED10_Pin */
  GPIO_InitStruct.Pin = LED10_Pin;
 c000686:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00068a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c00068c:	2301      	movs	r3, #1
 c00068e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000690:	2301      	movs	r3, #1
 c000692:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 c000694:	2303      	movs	r3, #3
 c000696:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LED10_GPIO_Port, &GPIO_InitStruct);
 c000698:	f107 030c 	add.w	r3, r7, #12
 c00069c:	4619      	mov	r1, r3
 c00069e:	480a      	ldr	r0, [pc, #40]	; (c0006c8 <MX_GPIO_Init+0xb0>)
 c0006a0:	f000 fccc 	bl	c00103c <HAL_GPIO_Init>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(LED9_GPIO_Port, LED9_Pin, GPIO_PIN_NSEC);
 c0006a4:	2200      	movs	r2, #0
 c0006a6:	2108      	movs	r1, #8
 c0006a8:	4808      	ldr	r0, [pc, #32]	; (c0006cc <MX_GPIO_Init+0xb4>)
 c0006aa:	f000 fe5f 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOA, GPIO_PIN_9|GPIO_PIN_10, GPIO_PIN_NSEC);
 c0006ae:	2200      	movs	r2, #0
 c0006b0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c0006b4:	4806      	ldr	r0, [pc, #24]	; (c0006d0 <MX_GPIO_Init+0xb8>)
 c0006b6:	f000 fe59 	bl	c00136c <HAL_GPIO_ConfigPinAttributes>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c0006ba:	bf00      	nop
 c0006bc:	3720      	adds	r7, #32
 c0006be:	46bd      	mov	sp, r7
 c0006c0:	bd80      	pop	{r7, pc}
 c0006c2:	bf00      	nop
 c0006c4:	50021000 	.word	0x50021000
 c0006c8:	52021800 	.word	0x52021800
 c0006cc:	52020c00 	.word	0x52020c00
 c0006d0:	52020000 	.word	0x52020000

0c0006d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
static void SystemClock_Config(void)
{
 c0006d4:	b580      	push	{r7, lr}
 c0006d6:	b098      	sub	sp, #96	; 0x60
 c0006d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0006da:	f107 0318 	add.w	r3, r7, #24
 c0006de:	2248      	movs	r2, #72	; 0x48
 c0006e0:	2100      	movs	r1, #0
 c0006e2:	4618      	mov	r0, r3
 c0006e4:	f002 f81c 	bl	c002720 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0006e8:	1d3b      	adds	r3, r7, #4
 c0006ea:	2200      	movs	r2, #0
 c0006ec:	601a      	str	r2, [r3, #0]
 c0006ee:	605a      	str	r2, [r3, #4]
 c0006f0:	609a      	str	r2, [r3, #8]
 c0006f2:	60da      	str	r2, [r3, #12]
 c0006f4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0006f6:	2000      	movs	r0, #0
 c0006f8:	f000 ffc0 	bl	c00167c <HAL_PWREx_ControlVoltageScaling>
 c0006fc:	4603      	mov	r3, r0
 c0006fe:	2b00      	cmp	r3, #0
 c000700:	d001      	beq.n	c000706 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c000702:	f000 f839 	bl	c000778 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c000706:	2310      	movs	r3, #16
 c000708:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c00070a:	2301      	movs	r3, #1
 c00070c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c00070e:	2300      	movs	r3, #0
 c000710:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 c000712:	2360      	movs	r3, #96	; 0x60
 c000714:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c000716:	2302      	movs	r3, #2
 c000718:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c00071a:	2301      	movs	r3, #1
 c00071c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 1;
 c00071e:	2301      	movs	r3, #1
 c000720:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c000722:	2337      	movs	r3, #55	; 0x37
 c000724:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c000726:	2307      	movs	r3, #7
 c000728:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c00072a:	2302      	movs	r3, #2
 c00072c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c00072e:	2302      	movs	r3, #2
 c000730:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c000732:	f107 0318 	add.w	r3, r7, #24
 c000736:	4618      	mov	r0, r3
 c000738:	f001 f840 	bl	c0017bc <HAL_RCC_OscConfig>
 c00073c:	4603      	mov	r3, r0
 c00073e:	2b00      	cmp	r3, #0
 c000740:	d001      	beq.n	c000746 <SystemClock_Config+0x72>
  {
    Error_Handler();
 c000742:	f000 f819 	bl	c000778 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000746:	230f      	movs	r3, #15
 c000748:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c00074a:	2303      	movs	r3, #3
 c00074c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c00074e:	2300      	movs	r3, #0
 c000750:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c000752:	2300      	movs	r3, #0
 c000754:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000756:	2300      	movs	r3, #0
 c000758:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c00075a:	1d3b      	adds	r3, r7, #4
 c00075c:	2105      	movs	r1, #5
 c00075e:	4618      	mov	r0, r3
 c000760:	f001 fd02 	bl	c002168 <HAL_RCC_ClockConfig>
 c000764:	4603      	mov	r3, r0
 c000766:	2b00      	cmp	r3, #0
 c000768:	d001      	beq.n	c00076e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c00076a:	f000 f805 	bl	c000778 <Error_Handler>
  }
}
 c00076e:	bf00      	nop
 c000770:	3760      	adds	r7, #96	; 0x60
 c000772:	46bd      	mov	sp, r7
 c000774:	bd80      	pop	{r7, pc}
	...

0c000778 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000778:	b580      	push	{r7, lr}
 c00077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* Insure LED10 is configured */
  if (SecureInitIODone != 0)
 c00077c:	4b06      	ldr	r3, [pc, #24]	; (c000798 <Error_Handler+0x20>)
 c00077e:	681b      	ldr	r3, [r3, #0]
 c000780:	2b00      	cmp	r3, #0
 c000782:	d001      	beq.n	c000788 <Error_Handler+0x10>
  {
    MX_GPIO_Init();
 c000784:	f7ff ff48 	bl	c000618 <MX_GPIO_Init>
  }
  /* LED10 on */
  //reset turns the LED on since we're using pullup resistor
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_12, GPIO_PIN_RESET);
 c000788:	2200      	movs	r2, #0
 c00078a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 c00078e:	4803      	ldr	r0, [pc, #12]	; (c00079c <Error_Handler+0x24>)
 c000790:	f000 fdd4 	bl	c00133c <HAL_GPIO_WritePin>

  /* Infinite loop */
  while (1)
 c000794:	e7fe      	b.n	c000794 <Error_Handler+0x1c>
 c000796:	bf00      	nop
 c000798:	3000002c 	.word	0x3000002c
 c00079c:	52021800 	.word	0x52021800

0c0007a0 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c0007a0:	b480      	push	{r7}
 c0007a2:	b083      	sub	sp, #12
 c0007a4:	af00      	add	r7, sp, #0
 c0007a6:	4603      	mov	r3, r0
 c0007a8:	6039      	str	r1, [r7, #0]
 c0007aa:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c0007ac:	683b      	ldr	r3, [r7, #0]
 c0007ae:	2b00      	cmp	r3, #0
 c0007b0:	d00d      	beq.n	c0007ce <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c0007b2:	79fb      	ldrb	r3, [r7, #7]
 c0007b4:	2b00      	cmp	r3, #0
 c0007b6:	d002      	beq.n	c0007be <__acle_se_SECURE_RegisterCallback+0x1e>
 c0007b8:	2b01      	cmp	r3, #1
 c0007ba:	d004      	beq.n	c0007c6 <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c0007bc:	e008      	b.n	c0007d0 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c0007be:	4a21      	ldr	r2, [pc, #132]	; (c000844 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c0007c0:	683b      	ldr	r3, [r7, #0]
 c0007c2:	6013      	str	r3, [r2, #0]
        break;
 c0007c4:	e004      	b.n	c0007d0 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c0007c6:	4a20      	ldr	r2, [pc, #128]	; (c000848 <__acle_se_SECURE_RegisterCallback+0xa8>)
 c0007c8:	683b      	ldr	r3, [r7, #0]
 c0007ca:	6013      	str	r3, [r2, #0]
        break;
 c0007cc:	e000      	b.n	c0007d0 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c0007ce:	bf00      	nop
}
 c0007d0:	bf00      	nop
 c0007d2:	370c      	adds	r7, #12
 c0007d4:	46bd      	mov	sp, r7
 c0007d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0007da:	4670      	mov	r0, lr
 c0007dc:	4671      	mov	r1, lr
 c0007de:	4672      	mov	r2, lr
 c0007e0:	4673      	mov	r3, lr
 c0007e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0007e6:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0007ea:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0007ee:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0007f2:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0007f6:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0007fa:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0007fe:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000802:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000806:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c00080a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c00080e:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000812:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000816:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00081a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c00081e:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000822:	f38e 8c00 	msr	CPSR_fs, lr
 c000826:	b410      	push	{r4}
 c000828:	eef1 ca10 	vmrs	ip, fpscr
 c00082c:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000830:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000834:	ea0c 0c04 	and.w	ip, ip, r4
 c000838:	eee1 ca10 	vmsr	fpscr, ip
 c00083c:	bc10      	pop	{r4}
 c00083e:	46f4      	mov	ip, lr
 c000840:	4774      	bxns	lr
 c000842:	bf00      	nop
 c000844:	30000030 	.word	0x30000030
 c000848:	30000034 	.word	0x30000034

0c00084c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c00084c:	b580      	push	{r7, lr}
 c00084e:	b084      	sub	sp, #16
 c000850:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000852:	4b19      	ldr	r3, [pc, #100]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000854:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000856:	4a18      	ldr	r2, [pc, #96]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000858:	f043 0301 	orr.w	r3, r3, #1
 c00085c:	6613      	str	r3, [r2, #96]	; 0x60
 c00085e:	4b16      	ldr	r3, [pc, #88]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000860:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000862:	f003 0301 	and.w	r3, r3, #1
 c000866:	60fb      	str	r3, [r7, #12]
 c000868:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c00086a:	4b13      	ldr	r3, [pc, #76]	; (c0008b8 <HAL_MspInit+0x6c>)
 c00086c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00086e:	4a12      	ldr	r2, [pc, #72]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000870:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000874:	6593      	str	r3, [r2, #88]	; 0x58
 c000876:	4b10      	ldr	r3, [pc, #64]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00087a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00087e:	60bb      	str	r3, [r7, #8]
 c000880:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000882:	4b0d      	ldr	r3, [pc, #52]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000884:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000886:	4a0c      	ldr	r2, [pc, #48]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000888:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c00088c:	6493      	str	r3, [r2, #72]	; 0x48
 c00088e:	4b0a      	ldr	r3, [pc, #40]	; (c0008b8 <HAL_MspInit+0x6c>)
 c000890:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000892:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000896:	607b      	str	r3, [r7, #4]
 c000898:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* GTZC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(GTZC_IRQn, 0, 0);
 c00089a:	2200      	movs	r2, #0
 c00089c:	2100      	movs	r1, #0
 c00089e:	2008      	movs	r0, #8
 c0008a0:	f000 fb97 	bl	c000fd2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(GTZC_IRQn);
 c0008a4:	2008      	movs	r0, #8
 c0008a6:	f000 fbae 	bl	c001006 <HAL_NVIC_EnableIRQ>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c0008aa:	f000 ff53 	bl	c001754 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c0008ae:	bf00      	nop
 c0008b0:	3710      	adds	r7, #16
 c0008b2:	46bd      	mov	sp, r7
 c0008b4:	bd80      	pop	{r7, pc}
 c0008b6:	bf00      	nop
 c0008b8:	50021000 	.word	0x50021000

0c0008bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c0008bc:	b480      	push	{r7}
 c0008be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 c0008c0:	bf00      	nop
 c0008c2:	46bd      	mov	sp, r7
 c0008c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0008c8:	4770      	bx	lr

0c0008ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c0008ca:	b480      	push	{r7}
 c0008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c0008ce:	e7fe      	b.n	c0008ce <HardFault_Handler+0x4>

0c0008d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c0008d0:	b480      	push	{r7}
 c0008d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c0008d4:	e7fe      	b.n	c0008d4 <MemManage_Handler+0x4>

0c0008d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c0008d6:	b480      	push	{r7}
 c0008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c0008da:	e7fe      	b.n	c0008da <BusFault_Handler+0x4>

0c0008dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c0008dc:	b480      	push	{r7}
 c0008de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c0008e0:	e7fe      	b.n	c0008e0 <UsageFault_Handler+0x4>
	...

0c0008e4 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c0008e4:	b590      	push	{r4, r7, lr}
 c0008e6:	b083      	sub	sp, #12
 c0008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */
  funcptr_NS callback_NS; // non-secure callback function pointer

  if(pSecureFaultCallback != (funcptr_NS)NULL)
 c0008ea:	4b1c      	ldr	r3, [pc, #112]	; (c00095c <SecureFault_Handler+0x78>)
 c0008ec:	681b      	ldr	r3, [r3, #0]
 c0008ee:	2b00      	cmp	r3, #0
 c0008f0:	d02f      	beq.n	c000952 <SecureFault_Handler+0x6e>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureFaultCallback);
 c0008f2:	4b1a      	ldr	r3, [pc, #104]	; (c00095c <SecureFault_Handler+0x78>)
 c0008f4:	681b      	ldr	r3, [r3, #0]
 c0008f6:	f023 0301 	bic.w	r3, r3, #1
 c0008fa:	607b      	str	r3, [r7, #4]

   callback_NS();
 c0008fc:	687b      	ldr	r3, [r7, #4]
 c0008fe:	461c      	mov	r4, r3
 c000900:	0864      	lsrs	r4, r4, #1
 c000902:	0064      	lsls	r4, r4, #1
 c000904:	4620      	mov	r0, r4
 c000906:	4621      	mov	r1, r4
 c000908:	4622      	mov	r2, r4
 c00090a:	4623      	mov	r3, r4
 c00090c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000910:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000914:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000918:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c00091c:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000920:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000924:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000928:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c00092c:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000930:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000934:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000938:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c00093c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000940:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000944:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000948:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c00094c:	f7ff fc74 	bl	c000238 <__gnu_cmse_nonsecure_call>
  {
    /* USER CODE BEGIN W1_SecureFault_IRQn 0 */
  }
    /* USER CODE END W1_SecureFault_IRQn 0 */
  }
}
 c000950:	e000      	b.n	c000954 <SecureFault_Handler+0x70>
  while (1)
 c000952:	e7fe      	b.n	c000952 <SecureFault_Handler+0x6e>
}
 c000954:	370c      	adds	r7, #12
 c000956:	46bd      	mov	sp, r7
 c000958:	bd90      	pop	{r4, r7, pc}
 c00095a:	bf00      	nop
 c00095c:	30000030 	.word	0x30000030

0c000960 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000960:	b480      	push	{r7}
 c000962:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000964:	bf00      	nop
 c000966:	46bd      	mov	sp, r7
 c000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00096c:	4770      	bx	lr

0c00096e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c00096e:	b480      	push	{r7}
 c000970:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DebugMonitor_IRQn 0 */
  while (1)
 c000972:	e7fe      	b.n	c000972 <DebugMon_Handler+0x4>

0c000974 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000974:	b480      	push	{r7}
 c000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PendSV_IRQn 0 */
  while (1)
 c000978:	e7fe      	b.n	c000978 <PendSV_Handler+0x4>

0c00097a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c00097a:	b580      	push	{r7, lr}
 c00097c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c00097e:	f000 fa1d 	bl	c000dbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  //HAL_SYSTICK_Callback();
  /* USER CODE END SysTick_IRQn 1 */
}
 c000982:	bf00      	nop
 c000984:	bd80      	pop	{r7, pc}
	...

0c000988 <GTZC_IRQHandler>:

/**
  * @brief This function handles Global TrustZone controller global interrupt.
  */
void GTZC_IRQHandler(void)
{
 c000988:	b590      	push	{r4, r7, lr}
 c00098a:	b083      	sub	sp, #12
 c00098c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN GTZC_IRQn 0 */
  funcptr_NS callback_NS; // non-secure callback function pointer
  /* USER CODE END GTZC_IRQn 0 */
  HAL_GTZC_IRQHandler();
 c00098e:	f000 fda9 	bl	c0014e4 <HAL_GTZC_IRQHandler>
  /* USER CODE BEGIN GTZC_IRQn 1 */
  if(pSecureErrorCallback != (funcptr_NS)NULL)
 c000992:	4b1c      	ldr	r3, [pc, #112]	; (c000a04 <GTZC_IRQHandler+0x7c>)
 c000994:	681b      	ldr	r3, [r3, #0]
 c000996:	2b00      	cmp	r3, #0
 c000998:	d02f      	beq.n	c0009fa <GTZC_IRQHandler+0x72>
  {
   /* return function pointer with cleared LSB */
   callback_NS = (funcptr_NS)cmse_nsfptr_create(pSecureErrorCallback);
 c00099a:	4b1a      	ldr	r3, [pc, #104]	; (c000a04 <GTZC_IRQHandler+0x7c>)
 c00099c:	681b      	ldr	r3, [r3, #0]
 c00099e:	f023 0301 	bic.w	r3, r3, #1
 c0009a2:	607b      	str	r3, [r7, #4]

   callback_NS();
 c0009a4:	687b      	ldr	r3, [r7, #4]
 c0009a6:	461c      	mov	r4, r3
 c0009a8:	0864      	lsrs	r4, r4, #1
 c0009aa:	0064      	lsls	r4, r4, #1
 c0009ac:	4620      	mov	r0, r4
 c0009ae:	4621      	mov	r1, r4
 c0009b0:	4622      	mov	r2, r4
 c0009b2:	4623      	mov	r3, r4
 c0009b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0009b8:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0009bc:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0009c0:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0009c4:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0009c8:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0009cc:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0009d0:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0009d4:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0009d8:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0009dc:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c0009e0:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c0009e4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c0009e8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c0009ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c0009f0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c0009f4:	f7ff fc20 	bl	c000238 <__gnu_cmse_nonsecure_call>
  {
    /* Something went wrong in test case */
    while(1);
  }
  /* USER CODE END GTZC_IRQn 1 */
}
 c0009f8:	e000      	b.n	c0009fc <GTZC_IRQHandler+0x74>
    while(1);
 c0009fa:	e7fe      	b.n	c0009fa <GTZC_IRQHandler+0x72>
}
 c0009fc:	370c      	adds	r7, #12
 c0009fe:	46bd      	mov	sp, r7
 c000a00:	bd90      	pop	{r4, r7, pc}
 c000a02:	bf00      	nop
 c000a04:	30000034 	.word	0x30000034

0c000a08 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c000a08:	b480      	push	{r7}
 c000a0a:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c000a0c:	4b2f      	ldr	r3, [pc, #188]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a0e:	2200      	movs	r2, #0
 c000a10:	609a      	str	r2, [r3, #8]
 c000a12:	4b2e      	ldr	r3, [pc, #184]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a14:	4a2e      	ldr	r2, [pc, #184]	; (c000ad0 <TZ_SAU_Setup+0xc8>)
 c000a16:	60da      	str	r2, [r3, #12]
 c000a18:	4b2c      	ldr	r3, [pc, #176]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a1a:	4a2e      	ldr	r2, [pc, #184]	; (c000ad4 <TZ_SAU_Setup+0xcc>)
 c000a1c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c000a1e:	4b2b      	ldr	r3, [pc, #172]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a20:	2201      	movs	r2, #1
 c000a22:	609a      	str	r2, [r3, #8]
 c000a24:	4b29      	ldr	r3, [pc, #164]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a26:	4a2c      	ldr	r2, [pc, #176]	; (c000ad8 <TZ_SAU_Setup+0xd0>)
 c000a28:	60da      	str	r2, [r3, #12]
 c000a2a:	4b28      	ldr	r3, [pc, #160]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a2c:	4a2b      	ldr	r2, [pc, #172]	; (c000adc <TZ_SAU_Setup+0xd4>)
 c000a2e:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c000a30:	4b26      	ldr	r3, [pc, #152]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a32:	2202      	movs	r2, #2
 c000a34:	609a      	str	r2, [r3, #8]
 c000a36:	4b25      	ldr	r3, [pc, #148]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a38:	4a29      	ldr	r2, [pc, #164]	; (c000ae0 <TZ_SAU_Setup+0xd8>)
 c000a3a:	60da      	str	r2, [r3, #12]
 c000a3c:	4b23      	ldr	r3, [pc, #140]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a3e:	4a29      	ldr	r2, [pc, #164]	; (c000ae4 <TZ_SAU_Setup+0xdc>)
 c000a40:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c000a42:	4b22      	ldr	r3, [pc, #136]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a44:	2203      	movs	r2, #3
 c000a46:	609a      	str	r2, [r3, #8]
 c000a48:	4b20      	ldr	r3, [pc, #128]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a4a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c000a4e:	60da      	str	r2, [r3, #12]
 c000a50:	4b1e      	ldr	r3, [pc, #120]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a52:	4a25      	ldr	r2, [pc, #148]	; (c000ae8 <TZ_SAU_Setup+0xe0>)
 c000a54:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c000a56:	4b1d      	ldr	r3, [pc, #116]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a58:	2204      	movs	r2, #4
 c000a5a:	609a      	str	r2, [r3, #8]
 c000a5c:	4b1b      	ldr	r3, [pc, #108]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a5e:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c000a62:	60da      	str	r2, [r3, #12]
 c000a64:	4b19      	ldr	r3, [pc, #100]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a66:	4a21      	ldr	r2, [pc, #132]	; (c000aec <TZ_SAU_Setup+0xe4>)
 c000a68:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c000a6a:	4b18      	ldr	r3, [pc, #96]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a6c:	2205      	movs	r2, #5
 c000a6e:	609a      	str	r2, [r3, #8]
 c000a70:	4b16      	ldr	r3, [pc, #88]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a72:	4a1f      	ldr	r2, [pc, #124]	; (c000af0 <TZ_SAU_Setup+0xe8>)
 c000a74:	60da      	str	r2, [r3, #12]
 c000a76:	4b15      	ldr	r3, [pc, #84]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a78:	4a1e      	ldr	r2, [pc, #120]	; (c000af4 <TZ_SAU_Setup+0xec>)
 c000a7a:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c000a7c:	4b13      	ldr	r3, [pc, #76]	; (c000acc <TZ_SAU_Setup+0xc4>)
 c000a7e:	2201      	movs	r2, #1
 c000a80:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c000a82:	4b1d      	ldr	r3, [pc, #116]	; (c000af8 <TZ_SAU_Setup+0xf0>)
 c000a84:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c000a88:	4a1b      	ldr	r2, [pc, #108]	; (c000af8 <TZ_SAU_Setup+0xf0>)
 c000a8a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c000a8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a92:	4b1a      	ldr	r3, [pc, #104]	; (c000afc <TZ_SAU_Setup+0xf4>)
 c000a94:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c000a96:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000a9a:	4a18      	ldr	r2, [pc, #96]	; (c000afc <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c000a9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c000aa0:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c000aa2:	4b17      	ldr	r3, [pc, #92]	; (c000b00 <TZ_SAU_Setup+0xf8>)
 c000aa4:	2200      	movs	r2, #0
 c000aa6:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c000aaa:	4b15      	ldr	r3, [pc, #84]	; (c000b00 <TZ_SAU_Setup+0xf8>)
 c000aac:	2200      	movs	r2, #0
 c000aae:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c000ab2:	4b13      	ldr	r3, [pc, #76]	; (c000b00 <TZ_SAU_Setup+0xf8>)
 c000ab4:	2200      	movs	r2, #0
 c000ab6:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c000aba:	4b11      	ldr	r3, [pc, #68]	; (c000b00 <TZ_SAU_Setup+0xf8>)
 c000abc:	2200      	movs	r2, #0
 c000abe:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c000ac2:	bf00      	nop
 c000ac4:	46bd      	mov	sp, r7
 c000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000aca:	4770      	bx	lr
 c000acc:	e000edd0 	.word	0xe000edd0
 c000ad0:	0c03e000 	.word	0x0c03e000
 c000ad4:	0c03ffe3 	.word	0x0c03ffe3
 c000ad8:	08040000 	.word	0x08040000
 c000adc:	0807ffe1 	.word	0x0807ffe1
 c000ae0:	20018000 	.word	0x20018000
 c000ae4:	2003ffe1 	.word	0x2003ffe1
 c000ae8:	4fffffe1 	.word	0x4fffffe1
 c000aec:	9fffffe1 	.word	0x9fffffe1
 c000af0:	0bf90000 	.word	0x0bf90000
 c000af4:	0bfa8fe1 	.word	0x0bfa8fe1
 c000af8:	e000ed00 	.word	0xe000ed00
 c000afc:	e000ef30 	.word	0xe000ef30
 c000b00:	e000e100 	.word	0xe000e100

0c000b04 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c000b04:	b580      	push	{r7, lr}
 c000b06:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c000b08:	f7ff ff7e 	bl	c000a08 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000b0c:	4b08      	ldr	r3, [pc, #32]	; (c000b30 <SystemInit+0x2c>)
 c000b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b12:	4a07      	ldr	r2, [pc, #28]	; (c000b30 <SystemInit+0x2c>)
 c000b14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000b18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c000b1c:	4b05      	ldr	r3, [pc, #20]	; (c000b34 <SystemInit+0x30>)
 c000b1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c000b22:	4a04      	ldr	r2, [pc, #16]	; (c000b34 <SystemInit+0x30>)
 c000b24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c000b28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c000b2c:	bf00      	nop
 c000b2e:	bd80      	pop	{r7, pc}
 c000b30:	e000ed00 	.word	0xe000ed00
 c000b34:	e002ed00 	.word	0xe002ed00

0c000b38 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c000b38:	b480      	push	{r7}
 c000b3a:	b087      	sub	sp, #28
 c000b3c:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c000b3e:	4b4f      	ldr	r3, [pc, #316]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000b40:	681b      	ldr	r3, [r3, #0]
 c000b42:	f003 0308 	and.w	r3, r3, #8
 c000b46:	2b00      	cmp	r3, #0
 c000b48:	d107      	bne.n	c000b5a <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c000b4a:	4b4c      	ldr	r3, [pc, #304]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000b4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c000b50:	0a1b      	lsrs	r3, r3, #8
 c000b52:	f003 030f 	and.w	r3, r3, #15
 c000b56:	617b      	str	r3, [r7, #20]
 c000b58:	e005      	b.n	c000b66 <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c000b5a:	4b48      	ldr	r3, [pc, #288]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000b5c:	681b      	ldr	r3, [r3, #0]
 c000b5e:	091b      	lsrs	r3, r3, #4
 c000b60:	f003 030f 	and.w	r3, r3, #15
 c000b64:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c000b66:	4a46      	ldr	r2, [pc, #280]	; (c000c80 <SystemCoreClockUpdate+0x148>)
 c000b68:	697b      	ldr	r3, [r7, #20]
 c000b6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c000b6e:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c000b70:	4b42      	ldr	r3, [pc, #264]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000b72:	689b      	ldr	r3, [r3, #8]
 c000b74:	f003 030c 	and.w	r3, r3, #12
 c000b78:	2b0c      	cmp	r3, #12
 c000b7a:	d866      	bhi.n	c000c4a <SystemCoreClockUpdate+0x112>
 c000b7c:	a201      	add	r2, pc, #4	; (adr r2, c000b84 <SystemCoreClockUpdate+0x4c>)
 c000b7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c000b82:	bf00      	nop
 c000b84:	0c000bb9 	.word	0x0c000bb9
 c000b88:	0c000c4b 	.word	0x0c000c4b
 c000b8c:	0c000c4b 	.word	0x0c000c4b
 c000b90:	0c000c4b 	.word	0x0c000c4b
 c000b94:	0c000bc1 	.word	0x0c000bc1
 c000b98:	0c000c4b 	.word	0x0c000c4b
 c000b9c:	0c000c4b 	.word	0x0c000c4b
 c000ba0:	0c000c4b 	.word	0x0c000c4b
 c000ba4:	0c000bc9 	.word	0x0c000bc9
 c000ba8:	0c000c4b 	.word	0x0c000c4b
 c000bac:	0c000c4b 	.word	0x0c000c4b
 c000bb0:	0c000c4b 	.word	0x0c000c4b
 c000bb4:	0c000bd1 	.word	0x0c000bd1
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c000bb8:	4a32      	ldr	r2, [pc, #200]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000bba:	697b      	ldr	r3, [r7, #20]
 c000bbc:	6013      	str	r3, [r2, #0]
      break;
 c000bbe:	e048      	b.n	c000c52 <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c000bc0:	4b30      	ldr	r3, [pc, #192]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000bc2:	4a31      	ldr	r2, [pc, #196]	; (c000c88 <SystemCoreClockUpdate+0x150>)
 c000bc4:	601a      	str	r2, [r3, #0]
      break;
 c000bc6:	e044      	b.n	c000c52 <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c000bc8:	4b2e      	ldr	r3, [pc, #184]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000bca:	4a2f      	ldr	r2, [pc, #188]	; (c000c88 <SystemCoreClockUpdate+0x150>)
 c000bcc:	601a      	str	r2, [r3, #0]
      break;
 c000bce:	e040      	b.n	c000c52 <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c000bd0:	4b2a      	ldr	r3, [pc, #168]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000bd2:	68db      	ldr	r3, [r3, #12]
 c000bd4:	f003 0303 	and.w	r3, r3, #3
 c000bd8:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c000bda:	4b28      	ldr	r3, [pc, #160]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000bdc:	68db      	ldr	r3, [r3, #12]
 c000bde:	091b      	lsrs	r3, r3, #4
 c000be0:	f003 030f 	and.w	r3, r3, #15
 c000be4:	3301      	adds	r3, #1
 c000be6:	60bb      	str	r3, [r7, #8]
 c000be8:	68fb      	ldr	r3, [r7, #12]
 c000bea:	2b02      	cmp	r3, #2
 c000bec:	d003      	beq.n	c000bf6 <SystemCoreClockUpdate+0xbe>
 c000bee:	68fb      	ldr	r3, [r7, #12]
 c000bf0:	2b03      	cmp	r3, #3
 c000bf2:	d006      	beq.n	c000c02 <SystemCoreClockUpdate+0xca>
 c000bf4:	e00b      	b.n	c000c0e <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c000bf6:	4a24      	ldr	r2, [pc, #144]	; (c000c88 <SystemCoreClockUpdate+0x150>)
 c000bf8:	68bb      	ldr	r3, [r7, #8]
 c000bfa:	fbb2 f3f3 	udiv	r3, r2, r3
 c000bfe:	613b      	str	r3, [r7, #16]
          break;
 c000c00:	e00b      	b.n	c000c1a <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c000c02:	4a21      	ldr	r2, [pc, #132]	; (c000c88 <SystemCoreClockUpdate+0x150>)
 c000c04:	68bb      	ldr	r3, [r7, #8]
 c000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c0a:	613b      	str	r3, [r7, #16]
          break;
 c000c0c:	e005      	b.n	c000c1a <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c000c0e:	697a      	ldr	r2, [r7, #20]
 c000c10:	68bb      	ldr	r3, [r7, #8]
 c000c12:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c16:	613b      	str	r3, [r7, #16]
          break;
 c000c18:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c000c1a:	4b18      	ldr	r3, [pc, #96]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000c1c:	68db      	ldr	r3, [r3, #12]
 c000c1e:	0a1b      	lsrs	r3, r3, #8
 c000c20:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c000c24:	693b      	ldr	r3, [r7, #16]
 c000c26:	fb02 f303 	mul.w	r3, r2, r3
 c000c2a:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c000c2c:	4b13      	ldr	r3, [pc, #76]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000c2e:	68db      	ldr	r3, [r3, #12]
 c000c30:	0e5b      	lsrs	r3, r3, #25
 c000c32:	f003 0303 	and.w	r3, r3, #3
 c000c36:	3301      	adds	r3, #1
 c000c38:	005b      	lsls	r3, r3, #1
 c000c3a:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c000c3c:	693a      	ldr	r2, [r7, #16]
 c000c3e:	687b      	ldr	r3, [r7, #4]
 c000c40:	fbb2 f3f3 	udiv	r3, r2, r3
 c000c44:	4a0f      	ldr	r2, [pc, #60]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000c46:	6013      	str	r3, [r2, #0]
      break;
 c000c48:	e003      	b.n	c000c52 <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c000c4a:	4a0e      	ldr	r2, [pc, #56]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000c4c:	697b      	ldr	r3, [r7, #20]
 c000c4e:	6013      	str	r3, [r2, #0]
      break;
 c000c50:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c000c52:	4b0a      	ldr	r3, [pc, #40]	; (c000c7c <SystemCoreClockUpdate+0x144>)
 c000c54:	689b      	ldr	r3, [r3, #8]
 c000c56:	091b      	lsrs	r3, r3, #4
 c000c58:	f003 030f 	and.w	r3, r3, #15
 c000c5c:	4a0b      	ldr	r2, [pc, #44]	; (c000c8c <SystemCoreClockUpdate+0x154>)
 c000c5e:	5cd3      	ldrb	r3, [r2, r3]
 c000c60:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c000c62:	4b08      	ldr	r3, [pc, #32]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000c64:	681a      	ldr	r2, [r3, #0]
 c000c66:	683b      	ldr	r3, [r7, #0]
 c000c68:	fa22 f303 	lsr.w	r3, r2, r3
 c000c6c:	4a05      	ldr	r2, [pc, #20]	; (c000c84 <SystemCoreClockUpdate+0x14c>)
 c000c6e:	6013      	str	r3, [r2, #0]
}
 c000c70:	bf00      	nop
 c000c72:	371c      	adds	r7, #28
 c000c74:	46bd      	mov	sp, r7
 c000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000c7a:	4770      	bx	lr
 c000c7c:	50021000 	.word	0x50021000
 c000c80:	0c002758 	.word	0x0c002758
 c000c84:	30000000 	.word	0x30000000
 c000c88:	00f42400 	.word	0x00f42400
 c000c8c:	0c002748 	.word	0x0c002748

0c000c90 <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c000c90:	b580      	push	{r7, lr}
 c000c92:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c000c94:	f7ff ff50 	bl	c000b38 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c000c98:	4b1c      	ldr	r3, [pc, #112]	; (c000d0c <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c000c9a:	681b      	ldr	r3, [r3, #0]
}
 c000c9c:	4618      	mov	r0, r3
 c000c9e:	46bd      	mov	sp, r7
 c000ca0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c000ca4:	4671      	mov	r1, lr
 c000ca6:	4672      	mov	r2, lr
 c000ca8:	4673      	mov	r3, lr
 c000caa:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000cae:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000cb2:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000cb6:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000cba:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000cbe:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000cc2:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000cc6:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000cca:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000cce:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000cd2:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000cd6:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000cda:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000cde:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000ce2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000ce6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000cea:	f38e 8c00 	msr	CPSR_fs, lr
 c000cee:	b410      	push	{r4}
 c000cf0:	eef1 ca10 	vmrs	ip, fpscr
 c000cf4:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000cf8:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000cfc:	ea0c 0c04 	and.w	ip, ip, r4
 c000d00:	eee1 ca10 	vmsr	fpscr, ip
 c000d04:	bc10      	pop	{r4}
 c000d06:	46f4      	mov	ip, lr
 c000d08:	4774      	bxns	lr
 c000d0a:	bf00      	nop
 c000d0c:	30000000 	.word	0x30000000

0c000d10 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c000d10:	b580      	push	{r7, lr}
 c000d12:	b082      	sub	sp, #8
 c000d14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c000d16:	2300      	movs	r3, #0
 c000d18:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c000d1a:	2004      	movs	r0, #4
 c000d1c:	f000 f94e 	bl	c000fbc <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c000d20:	f7ff ff0a 	bl	c000b38 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c000d24:	2000      	movs	r0, #0
 c000d26:	f000 f80d 	bl	c000d44 <HAL_InitTick>
 c000d2a:	4603      	mov	r3, r0
 c000d2c:	2b00      	cmp	r3, #0
 c000d2e:	d002      	beq.n	c000d36 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c000d30:	2301      	movs	r3, #1
 c000d32:	71fb      	strb	r3, [r7, #7]
 c000d34:	e001      	b.n	c000d3a <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c000d36:	f7ff fd89 	bl	c00084c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c000d3a:	79fb      	ldrb	r3, [r7, #7]
}
 c000d3c:	4618      	mov	r0, r3
 c000d3e:	3708      	adds	r7, #8
 c000d40:	46bd      	mov	sp, r7
 c000d42:	bd80      	pop	{r7, pc}

0c000d44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c000d44:	b580      	push	{r7, lr}
 c000d46:	b084      	sub	sp, #16
 c000d48:	af00      	add	r7, sp, #0
 c000d4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c000d4c:	2300      	movs	r3, #0
 c000d4e:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c000d50:	4b17      	ldr	r3, [pc, #92]	; (c000db0 <HAL_InitTick+0x6c>)
 c000d52:	781b      	ldrb	r3, [r3, #0]
 c000d54:	2b00      	cmp	r3, #0
 c000d56:	d023      	beq.n	c000da0 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c000d58:	4b16      	ldr	r3, [pc, #88]	; (c000db4 <HAL_InitTick+0x70>)
 c000d5a:	681a      	ldr	r2, [r3, #0]
 c000d5c:	4b14      	ldr	r3, [pc, #80]	; (c000db0 <HAL_InitTick+0x6c>)
 c000d5e:	781b      	ldrb	r3, [r3, #0]
 c000d60:	4619      	mov	r1, r3
 c000d62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c000d66:	fbb3 f3f1 	udiv	r3, r3, r1
 c000d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 c000d6e:	4618      	mov	r0, r3
 c000d70:	f000 f957 	bl	c001022 <HAL_SYSTICK_Config>
 c000d74:	4603      	mov	r3, r0
 c000d76:	2b00      	cmp	r3, #0
 c000d78:	d10f      	bne.n	c000d9a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c000d7a:	687b      	ldr	r3, [r7, #4]
 c000d7c:	2b07      	cmp	r3, #7
 c000d7e:	d809      	bhi.n	c000d94 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c000d80:	2200      	movs	r2, #0
 c000d82:	6879      	ldr	r1, [r7, #4]
 c000d84:	f04f 30ff 	mov.w	r0, #4294967295
 c000d88:	f000 f923 	bl	c000fd2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c000d8c:	4a0a      	ldr	r2, [pc, #40]	; (c000db8 <HAL_InitTick+0x74>)
 c000d8e:	687b      	ldr	r3, [r7, #4]
 c000d90:	6013      	str	r3, [r2, #0]
 c000d92:	e007      	b.n	c000da4 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c000d94:	2301      	movs	r3, #1
 c000d96:	73fb      	strb	r3, [r7, #15]
 c000d98:	e004      	b.n	c000da4 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c000d9a:	2301      	movs	r3, #1
 c000d9c:	73fb      	strb	r3, [r7, #15]
 c000d9e:	e001      	b.n	c000da4 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c000da0:	2301      	movs	r3, #1
 c000da2:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c000da4:	7bfb      	ldrb	r3, [r7, #15]
}
 c000da6:	4618      	mov	r0, r3
 c000da8:	3710      	adds	r7, #16
 c000daa:	46bd      	mov	sp, r7
 c000dac:	bd80      	pop	{r7, pc}
 c000dae:	bf00      	nop
 c000db0:	30000008 	.word	0x30000008
 c000db4:	30000000 	.word	0x30000000
 c000db8:	30000004 	.word	0x30000004

0c000dbc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c000dbc:	b480      	push	{r7}
 c000dbe:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c000dc0:	4b06      	ldr	r3, [pc, #24]	; (c000ddc <HAL_IncTick+0x20>)
 c000dc2:	781b      	ldrb	r3, [r3, #0]
 c000dc4:	461a      	mov	r2, r3
 c000dc6:	4b06      	ldr	r3, [pc, #24]	; (c000de0 <HAL_IncTick+0x24>)
 c000dc8:	681b      	ldr	r3, [r3, #0]
 c000dca:	4413      	add	r3, r2
 c000dcc:	4a04      	ldr	r2, [pc, #16]	; (c000de0 <HAL_IncTick+0x24>)
 c000dce:	6013      	str	r3, [r2, #0]
}
 c000dd0:	bf00      	nop
 c000dd2:	46bd      	mov	sp, r7
 c000dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000dd8:	4770      	bx	lr
 c000dda:	bf00      	nop
 c000ddc:	30000008 	.word	0x30000008
 c000de0:	30000038 	.word	0x30000038

0c000de4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c000de4:	b480      	push	{r7}
 c000de6:	af00      	add	r7, sp, #0
  return uwTick;
 c000de8:	4b03      	ldr	r3, [pc, #12]	; (c000df8 <HAL_GetTick+0x14>)
 c000dea:	681b      	ldr	r3, [r3, #0]
}
 c000dec:	4618      	mov	r0, r3
 c000dee:	46bd      	mov	sp, r7
 c000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000df4:	4770      	bx	lr
 c000df6:	bf00      	nop
 c000df8:	30000038 	.word	0x30000038

0c000dfc <HAL_SuspendTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)
{
 c000dfc:	b480      	push	{r7}
 c000dfe:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  SysTick->CTRL &= ~SysTick_CTRL_TICKINT_Msk;
 c000e00:	4b05      	ldr	r3, [pc, #20]	; (c000e18 <HAL_SuspendTick+0x1c>)
 c000e02:	681b      	ldr	r3, [r3, #0]
 c000e04:	4a04      	ldr	r2, [pc, #16]	; (c000e18 <HAL_SuspendTick+0x1c>)
 c000e06:	f023 0302 	bic.w	r3, r3, #2
 c000e0a:	6013      	str	r3, [r2, #0]
}
 c000e0c:	bf00      	nop
 c000e0e:	46bd      	mov	sp, r7
 c000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e14:	4770      	bx	lr
 c000e16:	bf00      	nop
 c000e18:	e000e010 	.word	0xe000e010

0c000e1c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000e1c:	b480      	push	{r7}
 c000e1e:	b085      	sub	sp, #20
 c000e20:	af00      	add	r7, sp, #0
 c000e22:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c000e24:	687b      	ldr	r3, [r7, #4]
 c000e26:	f003 0307 	and.w	r3, r3, #7
 c000e2a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c000e2c:	4b0c      	ldr	r3, [pc, #48]	; (c000e60 <__NVIC_SetPriorityGrouping+0x44>)
 c000e2e:	68db      	ldr	r3, [r3, #12]
 c000e30:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c000e32:	68ba      	ldr	r2, [r7, #8]
 c000e34:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c000e38:	4013      	ands	r3, r2
 c000e3a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c000e3c:	68fb      	ldr	r3, [r7, #12]
 c000e3e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c000e40:	68bb      	ldr	r3, [r7, #8]
 c000e42:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c000e44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c000e48:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c000e4c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c000e4e:	4a04      	ldr	r2, [pc, #16]	; (c000e60 <__NVIC_SetPriorityGrouping+0x44>)
 c000e50:	68bb      	ldr	r3, [r7, #8]
 c000e52:	60d3      	str	r3, [r2, #12]
}
 c000e54:	bf00      	nop
 c000e56:	3714      	adds	r7, #20
 c000e58:	46bd      	mov	sp, r7
 c000e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e5e:	4770      	bx	lr
 c000e60:	e000ed00 	.word	0xe000ed00

0c000e64 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c000e64:	b480      	push	{r7}
 c000e66:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c000e68:	4b04      	ldr	r3, [pc, #16]	; (c000e7c <__NVIC_GetPriorityGrouping+0x18>)
 c000e6a:	68db      	ldr	r3, [r3, #12]
 c000e6c:	0a1b      	lsrs	r3, r3, #8
 c000e6e:	f003 0307 	and.w	r3, r3, #7
}
 c000e72:	4618      	mov	r0, r3
 c000e74:	46bd      	mov	sp, r7
 c000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000e7a:	4770      	bx	lr
 c000e7c:	e000ed00 	.word	0xe000ed00

0c000e80 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c000e80:	b480      	push	{r7}
 c000e82:	b083      	sub	sp, #12
 c000e84:	af00      	add	r7, sp, #0
 c000e86:	4603      	mov	r3, r0
 c000e88:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000e8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000e8e:	2b00      	cmp	r3, #0
 c000e90:	db0b      	blt.n	c000eaa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c000e92:	79fb      	ldrb	r3, [r7, #7]
 c000e94:	f003 021f 	and.w	r2, r3, #31
 c000e98:	4907      	ldr	r1, [pc, #28]	; (c000eb8 <__NVIC_EnableIRQ+0x38>)
 c000e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000e9e:	095b      	lsrs	r3, r3, #5
 c000ea0:	2001      	movs	r0, #1
 c000ea2:	fa00 f202 	lsl.w	r2, r0, r2
 c000ea6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c000eaa:	bf00      	nop
 c000eac:	370c      	adds	r7, #12
 c000eae:	46bd      	mov	sp, r7
 c000eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000eb4:	4770      	bx	lr
 c000eb6:	bf00      	nop
 c000eb8:	e000e100 	.word	0xe000e100

0c000ebc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c000ebc:	b480      	push	{r7}
 c000ebe:	b083      	sub	sp, #12
 c000ec0:	af00      	add	r7, sp, #0
 c000ec2:	4603      	mov	r3, r0
 c000ec4:	6039      	str	r1, [r7, #0]
 c000ec6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c000ec8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000ecc:	2b00      	cmp	r3, #0
 c000ece:	db0a      	blt.n	c000ee6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000ed0:	683b      	ldr	r3, [r7, #0]
 c000ed2:	b2da      	uxtb	r2, r3
 c000ed4:	490c      	ldr	r1, [pc, #48]	; (c000f08 <__NVIC_SetPriority+0x4c>)
 c000ed6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c000eda:	0152      	lsls	r2, r2, #5
 c000edc:	b2d2      	uxtb	r2, r2
 c000ede:	440b      	add	r3, r1
 c000ee0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c000ee4:	e00a      	b.n	c000efc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c000ee6:	683b      	ldr	r3, [r7, #0]
 c000ee8:	b2da      	uxtb	r2, r3
 c000eea:	4908      	ldr	r1, [pc, #32]	; (c000f0c <__NVIC_SetPriority+0x50>)
 c000eec:	79fb      	ldrb	r3, [r7, #7]
 c000eee:	f003 030f 	and.w	r3, r3, #15
 c000ef2:	3b04      	subs	r3, #4
 c000ef4:	0152      	lsls	r2, r2, #5
 c000ef6:	b2d2      	uxtb	r2, r2
 c000ef8:	440b      	add	r3, r1
 c000efa:	761a      	strb	r2, [r3, #24]
}
 c000efc:	bf00      	nop
 c000efe:	370c      	adds	r7, #12
 c000f00:	46bd      	mov	sp, r7
 c000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f06:	4770      	bx	lr
 c000f08:	e000e100 	.word	0xe000e100
 c000f0c:	e000ed00 	.word	0xe000ed00

0c000f10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000f10:	b480      	push	{r7}
 c000f12:	b089      	sub	sp, #36	; 0x24
 c000f14:	af00      	add	r7, sp, #0
 c000f16:	60f8      	str	r0, [r7, #12]
 c000f18:	60b9      	str	r1, [r7, #8]
 c000f1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c000f1c:	68fb      	ldr	r3, [r7, #12]
 c000f1e:	f003 0307 	and.w	r3, r3, #7
 c000f22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c000f24:	69fb      	ldr	r3, [r7, #28]
 c000f26:	f1c3 0307 	rsb	r3, r3, #7
 c000f2a:	2b03      	cmp	r3, #3
 c000f2c:	bf28      	it	cs
 c000f2e:	2303      	movcs	r3, #3
 c000f30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c000f32:	69fb      	ldr	r3, [r7, #28]
 c000f34:	3303      	adds	r3, #3
 c000f36:	2b06      	cmp	r3, #6
 c000f38:	d902      	bls.n	c000f40 <NVIC_EncodePriority+0x30>
 c000f3a:	69fb      	ldr	r3, [r7, #28]
 c000f3c:	3b04      	subs	r3, #4
 c000f3e:	e000      	b.n	c000f42 <NVIC_EncodePriority+0x32>
 c000f40:	2300      	movs	r3, #0
 c000f42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000f44:	f04f 32ff 	mov.w	r2, #4294967295
 c000f48:	69bb      	ldr	r3, [r7, #24]
 c000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 c000f4e:	43da      	mvns	r2, r3
 c000f50:	68bb      	ldr	r3, [r7, #8]
 c000f52:	401a      	ands	r2, r3
 c000f54:	697b      	ldr	r3, [r7, #20]
 c000f56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c000f58:	f04f 31ff 	mov.w	r1, #4294967295
 c000f5c:	697b      	ldr	r3, [r7, #20]
 c000f5e:	fa01 f303 	lsl.w	r3, r1, r3
 c000f62:	43d9      	mvns	r1, r3
 c000f64:	687b      	ldr	r3, [r7, #4]
 c000f66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c000f68:	4313      	orrs	r3, r2
         );
}
 c000f6a:	4618      	mov	r0, r3
 c000f6c:	3724      	adds	r7, #36	; 0x24
 c000f6e:	46bd      	mov	sp, r7
 c000f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f74:	4770      	bx	lr
	...

0c000f78 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c000f78:	b580      	push	{r7, lr}
 c000f7a:	b082      	sub	sp, #8
 c000f7c:	af00      	add	r7, sp, #0
 c000f7e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c000f80:	687b      	ldr	r3, [r7, #4]
 c000f82:	3b01      	subs	r3, #1
 c000f84:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c000f88:	d301      	bcc.n	c000f8e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c000f8a:	2301      	movs	r3, #1
 c000f8c:	e00f      	b.n	c000fae <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c000f8e:	4a0a      	ldr	r2, [pc, #40]	; (c000fb8 <SysTick_Config+0x40>)
 c000f90:	687b      	ldr	r3, [r7, #4]
 c000f92:	3b01      	subs	r3, #1
 c000f94:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c000f96:	2107      	movs	r1, #7
 c000f98:	f04f 30ff 	mov.w	r0, #4294967295
 c000f9c:	f7ff ff8e 	bl	c000ebc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c000fa0:	4b05      	ldr	r3, [pc, #20]	; (c000fb8 <SysTick_Config+0x40>)
 c000fa2:	2200      	movs	r2, #0
 c000fa4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c000fa6:	4b04      	ldr	r3, [pc, #16]	; (c000fb8 <SysTick_Config+0x40>)
 c000fa8:	2207      	movs	r2, #7
 c000faa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c000fac:	2300      	movs	r3, #0
}
 c000fae:	4618      	mov	r0, r3
 c000fb0:	3708      	adds	r7, #8
 c000fb2:	46bd      	mov	sp, r7
 c000fb4:	bd80      	pop	{r7, pc}
 c000fb6:	bf00      	nop
 c000fb8:	e000e010 	.word	0xe000e010

0c000fbc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c000fbc:	b580      	push	{r7, lr}
 c000fbe:	b082      	sub	sp, #8
 c000fc0:	af00      	add	r7, sp, #0
 c000fc2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c000fc4:	6878      	ldr	r0, [r7, #4]
 c000fc6:	f7ff ff29 	bl	c000e1c <__NVIC_SetPriorityGrouping>
}
 c000fca:	bf00      	nop
 c000fcc:	3708      	adds	r7, #8
 c000fce:	46bd      	mov	sp, r7
 c000fd0:	bd80      	pop	{r7, pc}

0c000fd2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c000fd2:	b580      	push	{r7, lr}
 c000fd4:	b086      	sub	sp, #24
 c000fd6:	af00      	add	r7, sp, #0
 c000fd8:	4603      	mov	r3, r0
 c000fda:	60b9      	str	r1, [r7, #8]
 c000fdc:	607a      	str	r2, [r7, #4]
 c000fde:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c000fe0:	f7ff ff40 	bl	c000e64 <__NVIC_GetPriorityGrouping>
 c000fe4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c000fe6:	687a      	ldr	r2, [r7, #4]
 c000fe8:	68b9      	ldr	r1, [r7, #8]
 c000fea:	6978      	ldr	r0, [r7, #20]
 c000fec:	f7ff ff90 	bl	c000f10 <NVIC_EncodePriority>
 c000ff0:	4602      	mov	r2, r0
 c000ff2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c000ff6:	4611      	mov	r1, r2
 c000ff8:	4618      	mov	r0, r3
 c000ffa:	f7ff ff5f 	bl	c000ebc <__NVIC_SetPriority>
}
 c000ffe:	bf00      	nop
 c001000:	3718      	adds	r7, #24
 c001002:	46bd      	mov	sp, r7
 c001004:	bd80      	pop	{r7, pc}

0c001006 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001006:	b580      	push	{r7, lr}
 c001008:	b082      	sub	sp, #8
 c00100a:	af00      	add	r7, sp, #0
 c00100c:	4603      	mov	r3, r0
 c00100e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c001010:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001014:	4618      	mov	r0, r3
 c001016:	f7ff ff33 	bl	c000e80 <__NVIC_EnableIRQ>
}
 c00101a:	bf00      	nop
 c00101c:	3708      	adds	r7, #8
 c00101e:	46bd      	mov	sp, r7
 c001020:	bd80      	pop	{r7, pc}

0c001022 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c001022:	b580      	push	{r7, lr}
 c001024:	b082      	sub	sp, #8
 c001026:	af00      	add	r7, sp, #0
 c001028:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c00102a:	6878      	ldr	r0, [r7, #4]
 c00102c:	f7ff ffa4 	bl	c000f78 <SysTick_Config>
 c001030:	4603      	mov	r3, r0
}
 c001032:	4618      	mov	r0, r3
 c001034:	3708      	adds	r7, #8
 c001036:	46bd      	mov	sp, r7
 c001038:	bd80      	pop	{r7, pc}
	...

0c00103c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c00103c:	b480      	push	{r7}
 c00103e:	b087      	sub	sp, #28
 c001040:	af00      	add	r7, sp, #0
 c001042:	6078      	str	r0, [r7, #4]
 c001044:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001046:	2300      	movs	r3, #0
 c001048:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00104a:	e158      	b.n	c0012fe <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c00104c:	683b      	ldr	r3, [r7, #0]
 c00104e:	681a      	ldr	r2, [r3, #0]
 c001050:	2101      	movs	r1, #1
 c001052:	697b      	ldr	r3, [r7, #20]
 c001054:	fa01 f303 	lsl.w	r3, r1, r3
 c001058:	4013      	ands	r3, r2
 c00105a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c00105c:	68fb      	ldr	r3, [r7, #12]
 c00105e:	2b00      	cmp	r3, #0
 c001060:	f000 814a 	beq.w	c0012f8 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c001064:	683b      	ldr	r3, [r7, #0]
 c001066:	685b      	ldr	r3, [r3, #4]
 c001068:	f003 0303 	and.w	r3, r3, #3
 c00106c:	2b01      	cmp	r3, #1
 c00106e:	d005      	beq.n	c00107c <HAL_GPIO_Init+0x40>
 c001070:	683b      	ldr	r3, [r7, #0]
 c001072:	685b      	ldr	r3, [r3, #4]
 c001074:	f003 0303 	and.w	r3, r3, #3
 c001078:	2b02      	cmp	r3, #2
 c00107a:	d130      	bne.n	c0010de <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c00107c:	687b      	ldr	r3, [r7, #4]
 c00107e:	689b      	ldr	r3, [r3, #8]
 c001080:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001082:	697b      	ldr	r3, [r7, #20]
 c001084:	005b      	lsls	r3, r3, #1
 c001086:	2203      	movs	r2, #3
 c001088:	fa02 f303 	lsl.w	r3, r2, r3
 c00108c:	43db      	mvns	r3, r3
 c00108e:	693a      	ldr	r2, [r7, #16]
 c001090:	4013      	ands	r3, r2
 c001092:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001094:	683b      	ldr	r3, [r7, #0]
 c001096:	68da      	ldr	r2, [r3, #12]
 c001098:	697b      	ldr	r3, [r7, #20]
 c00109a:	005b      	lsls	r3, r3, #1
 c00109c:	fa02 f303 	lsl.w	r3, r2, r3
 c0010a0:	693a      	ldr	r2, [r7, #16]
 c0010a2:	4313      	orrs	r3, r2
 c0010a4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c0010a6:	687b      	ldr	r3, [r7, #4]
 c0010a8:	693a      	ldr	r2, [r7, #16]
 c0010aa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c0010ac:	687b      	ldr	r3, [r7, #4]
 c0010ae:	685b      	ldr	r3, [r3, #4]
 c0010b0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c0010b2:	2201      	movs	r2, #1
 c0010b4:	697b      	ldr	r3, [r7, #20]
 c0010b6:	fa02 f303 	lsl.w	r3, r2, r3
 c0010ba:	43db      	mvns	r3, r3
 c0010bc:	693a      	ldr	r2, [r7, #16]
 c0010be:	4013      	ands	r3, r2
 c0010c0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c0010c2:	683b      	ldr	r3, [r7, #0]
 c0010c4:	685b      	ldr	r3, [r3, #4]
 c0010c6:	091b      	lsrs	r3, r3, #4
 c0010c8:	f003 0201 	and.w	r2, r3, #1
 c0010cc:	697b      	ldr	r3, [r7, #20]
 c0010ce:	fa02 f303 	lsl.w	r3, r2, r3
 c0010d2:	693a      	ldr	r2, [r7, #16]
 c0010d4:	4313      	orrs	r3, r2
 c0010d6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c0010d8:	687b      	ldr	r3, [r7, #4]
 c0010da:	693a      	ldr	r2, [r7, #16]
 c0010dc:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c0010de:	683b      	ldr	r3, [r7, #0]
 c0010e0:	685b      	ldr	r3, [r3, #4]
 c0010e2:	f003 0303 	and.w	r3, r3, #3
 c0010e6:	2b03      	cmp	r3, #3
 c0010e8:	d017      	beq.n	c00111a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c0010ea:	687b      	ldr	r3, [r7, #4]
 c0010ec:	68db      	ldr	r3, [r3, #12]
 c0010ee:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c0010f0:	697b      	ldr	r3, [r7, #20]
 c0010f2:	005b      	lsls	r3, r3, #1
 c0010f4:	2203      	movs	r2, #3
 c0010f6:	fa02 f303 	lsl.w	r3, r2, r3
 c0010fa:	43db      	mvns	r3, r3
 c0010fc:	693a      	ldr	r2, [r7, #16]
 c0010fe:	4013      	ands	r3, r2
 c001100:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001102:	683b      	ldr	r3, [r7, #0]
 c001104:	689a      	ldr	r2, [r3, #8]
 c001106:	697b      	ldr	r3, [r7, #20]
 c001108:	005b      	lsls	r3, r3, #1
 c00110a:	fa02 f303 	lsl.w	r3, r2, r3
 c00110e:	693a      	ldr	r2, [r7, #16]
 c001110:	4313      	orrs	r3, r2
 c001112:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c001114:	687b      	ldr	r3, [r7, #4]
 c001116:	693a      	ldr	r2, [r7, #16]
 c001118:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c00111a:	683b      	ldr	r3, [r7, #0]
 c00111c:	685b      	ldr	r3, [r3, #4]
 c00111e:	f003 0303 	and.w	r3, r3, #3
 c001122:	2b02      	cmp	r3, #2
 c001124:	d123      	bne.n	c00116e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c001126:	697b      	ldr	r3, [r7, #20]
 c001128:	08da      	lsrs	r2, r3, #3
 c00112a:	687b      	ldr	r3, [r7, #4]
 c00112c:	3208      	adds	r2, #8
 c00112e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001132:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001134:	697b      	ldr	r3, [r7, #20]
 c001136:	f003 0307 	and.w	r3, r3, #7
 c00113a:	009b      	lsls	r3, r3, #2
 c00113c:	220f      	movs	r2, #15
 c00113e:	fa02 f303 	lsl.w	r3, r2, r3
 c001142:	43db      	mvns	r3, r3
 c001144:	693a      	ldr	r2, [r7, #16]
 c001146:	4013      	ands	r3, r2
 c001148:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c00114a:	683b      	ldr	r3, [r7, #0]
 c00114c:	691a      	ldr	r2, [r3, #16]
 c00114e:	697b      	ldr	r3, [r7, #20]
 c001150:	f003 0307 	and.w	r3, r3, #7
 c001154:	009b      	lsls	r3, r3, #2
 c001156:	fa02 f303 	lsl.w	r3, r2, r3
 c00115a:	693a      	ldr	r2, [r7, #16]
 c00115c:	4313      	orrs	r3, r2
 c00115e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001160:	697b      	ldr	r3, [r7, #20]
 c001162:	08da      	lsrs	r2, r3, #3
 c001164:	687b      	ldr	r3, [r7, #4]
 c001166:	3208      	adds	r2, #8
 c001168:	6939      	ldr	r1, [r7, #16]
 c00116a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c00116e:	687b      	ldr	r3, [r7, #4]
 c001170:	681b      	ldr	r3, [r3, #0]
 c001172:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001174:	697b      	ldr	r3, [r7, #20]
 c001176:	005b      	lsls	r3, r3, #1
 c001178:	2203      	movs	r2, #3
 c00117a:	fa02 f303 	lsl.w	r3, r2, r3
 c00117e:	43db      	mvns	r3, r3
 c001180:	693a      	ldr	r2, [r7, #16]
 c001182:	4013      	ands	r3, r2
 c001184:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001186:	683b      	ldr	r3, [r7, #0]
 c001188:	685b      	ldr	r3, [r3, #4]
 c00118a:	f003 0203 	and.w	r2, r3, #3
 c00118e:	697b      	ldr	r3, [r7, #20]
 c001190:	005b      	lsls	r3, r3, #1
 c001192:	fa02 f303 	lsl.w	r3, r2, r3
 c001196:	693a      	ldr	r2, [r7, #16]
 c001198:	4313      	orrs	r3, r2
 c00119a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c00119c:	687b      	ldr	r3, [r7, #4]
 c00119e:	693a      	ldr	r2, [r7, #16]
 c0011a0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c0011a2:	683b      	ldr	r3, [r7, #0]
 c0011a4:	685b      	ldr	r3, [r3, #4]
 c0011a6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c0011aa:	2b00      	cmp	r3, #0
 c0011ac:	f000 80a4 	beq.w	c0012f8 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c0011b0:	4a5a      	ldr	r2, [pc, #360]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c0011b2:	697b      	ldr	r3, [r7, #20]
 c0011b4:	089b      	lsrs	r3, r3, #2
 c0011b6:	3318      	adds	r3, #24
 c0011b8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0011bc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c0011be:	697b      	ldr	r3, [r7, #20]
 c0011c0:	f003 0303 	and.w	r3, r3, #3
 c0011c4:	00db      	lsls	r3, r3, #3
 c0011c6:	220f      	movs	r2, #15
 c0011c8:	fa02 f303 	lsl.w	r3, r2, r3
 c0011cc:	43db      	mvns	r3, r3
 c0011ce:	693a      	ldr	r2, [r7, #16]
 c0011d0:	4013      	ands	r3, r2
 c0011d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c0011d4:	687b      	ldr	r3, [r7, #4]
 c0011d6:	4a52      	ldr	r2, [pc, #328]	; (c001320 <HAL_GPIO_Init+0x2e4>)
 c0011d8:	4293      	cmp	r3, r2
 c0011da:	d025      	beq.n	c001228 <HAL_GPIO_Init+0x1ec>
 c0011dc:	687b      	ldr	r3, [r7, #4]
 c0011de:	4a51      	ldr	r2, [pc, #324]	; (c001324 <HAL_GPIO_Init+0x2e8>)
 c0011e0:	4293      	cmp	r3, r2
 c0011e2:	d01f      	beq.n	c001224 <HAL_GPIO_Init+0x1e8>
 c0011e4:	687b      	ldr	r3, [r7, #4]
 c0011e6:	4a50      	ldr	r2, [pc, #320]	; (c001328 <HAL_GPIO_Init+0x2ec>)
 c0011e8:	4293      	cmp	r3, r2
 c0011ea:	d019      	beq.n	c001220 <HAL_GPIO_Init+0x1e4>
 c0011ec:	687b      	ldr	r3, [r7, #4]
 c0011ee:	4a4f      	ldr	r2, [pc, #316]	; (c00132c <HAL_GPIO_Init+0x2f0>)
 c0011f0:	4293      	cmp	r3, r2
 c0011f2:	d013      	beq.n	c00121c <HAL_GPIO_Init+0x1e0>
 c0011f4:	687b      	ldr	r3, [r7, #4]
 c0011f6:	4a4e      	ldr	r2, [pc, #312]	; (c001330 <HAL_GPIO_Init+0x2f4>)
 c0011f8:	4293      	cmp	r3, r2
 c0011fa:	d00d      	beq.n	c001218 <HAL_GPIO_Init+0x1dc>
 c0011fc:	687b      	ldr	r3, [r7, #4]
 c0011fe:	4a4d      	ldr	r2, [pc, #308]	; (c001334 <HAL_GPIO_Init+0x2f8>)
 c001200:	4293      	cmp	r3, r2
 c001202:	d007      	beq.n	c001214 <HAL_GPIO_Init+0x1d8>
 c001204:	687b      	ldr	r3, [r7, #4]
 c001206:	4a4c      	ldr	r2, [pc, #304]	; (c001338 <HAL_GPIO_Init+0x2fc>)
 c001208:	4293      	cmp	r3, r2
 c00120a:	d101      	bne.n	c001210 <HAL_GPIO_Init+0x1d4>
 c00120c:	2306      	movs	r3, #6
 c00120e:	e00c      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001210:	2307      	movs	r3, #7
 c001212:	e00a      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001214:	2305      	movs	r3, #5
 c001216:	e008      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001218:	2304      	movs	r3, #4
 c00121a:	e006      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c00121c:	2303      	movs	r3, #3
 c00121e:	e004      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001220:	2302      	movs	r3, #2
 c001222:	e002      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001224:	2301      	movs	r3, #1
 c001226:	e000      	b.n	c00122a <HAL_GPIO_Init+0x1ee>
 c001228:	2300      	movs	r3, #0
 c00122a:	697a      	ldr	r2, [r7, #20]
 c00122c:	f002 0203 	and.w	r2, r2, #3
 c001230:	00d2      	lsls	r2, r2, #3
 c001232:	4093      	lsls	r3, r2
 c001234:	693a      	ldr	r2, [r7, #16]
 c001236:	4313      	orrs	r3, r2
 c001238:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c00123a:	4938      	ldr	r1, [pc, #224]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c00123c:	697b      	ldr	r3, [r7, #20]
 c00123e:	089b      	lsrs	r3, r3, #2
 c001240:	3318      	adds	r3, #24
 c001242:	693a      	ldr	r2, [r7, #16]
 c001244:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c001248:	4b34      	ldr	r3, [pc, #208]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c00124a:	681b      	ldr	r3, [r3, #0]
 c00124c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00124e:	68fb      	ldr	r3, [r7, #12]
 c001250:	43db      	mvns	r3, r3
 c001252:	693a      	ldr	r2, [r7, #16]
 c001254:	4013      	ands	r3, r2
 c001256:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c001258:	683b      	ldr	r3, [r7, #0]
 c00125a:	685b      	ldr	r3, [r3, #4]
 c00125c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001260:	2b00      	cmp	r3, #0
 c001262:	d003      	beq.n	c00126c <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c001264:	693a      	ldr	r2, [r7, #16]
 c001266:	68fb      	ldr	r3, [r7, #12]
 c001268:	4313      	orrs	r3, r2
 c00126a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c00126c:	4a2b      	ldr	r2, [pc, #172]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c00126e:	693b      	ldr	r3, [r7, #16]
 c001270:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c001272:	4b2a      	ldr	r3, [pc, #168]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c001274:	685b      	ldr	r3, [r3, #4]
 c001276:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c001278:	68fb      	ldr	r3, [r7, #12]
 c00127a:	43db      	mvns	r3, r3
 c00127c:	693a      	ldr	r2, [r7, #16]
 c00127e:	4013      	ands	r3, r2
 c001280:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c001282:	683b      	ldr	r3, [r7, #0]
 c001284:	685b      	ldr	r3, [r3, #4]
 c001286:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c00128a:	2b00      	cmp	r3, #0
 c00128c:	d003      	beq.n	c001296 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c00128e:	693a      	ldr	r2, [r7, #16]
 c001290:	68fb      	ldr	r3, [r7, #12]
 c001292:	4313      	orrs	r3, r2
 c001294:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c001296:	4a21      	ldr	r2, [pc, #132]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c001298:	693b      	ldr	r3, [r7, #16]
 c00129a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c00129c:	4b1f      	ldr	r3, [pc, #124]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c00129e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0012a4:	68fb      	ldr	r3, [r7, #12]
 c0012a6:	43db      	mvns	r3, r3
 c0012a8:	693a      	ldr	r2, [r7, #16]
 c0012aa:	4013      	ands	r3, r2
 c0012ac:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c0012ae:	683b      	ldr	r3, [r7, #0]
 c0012b0:	685b      	ldr	r3, [r3, #4]
 c0012b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0012b6:	2b00      	cmp	r3, #0
 c0012b8:	d003      	beq.n	c0012c2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c0012ba:	693a      	ldr	r2, [r7, #16]
 c0012bc:	68fb      	ldr	r3, [r7, #12]
 c0012be:	4313      	orrs	r3, r2
 c0012c0:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c0012c2:	4a16      	ldr	r2, [pc, #88]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c0012c4:	693b      	ldr	r3, [r7, #16]
 c0012c6:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c0012ca:	4b14      	ldr	r3, [pc, #80]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c0012cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c0012d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0012d2:	68fb      	ldr	r3, [r7, #12]
 c0012d4:	43db      	mvns	r3, r3
 c0012d6:	693a      	ldr	r2, [r7, #16]
 c0012d8:	4013      	ands	r3, r2
 c0012da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c0012dc:	683b      	ldr	r3, [r7, #0]
 c0012de:	685b      	ldr	r3, [r3, #4]
 c0012e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0012e4:	2b00      	cmp	r3, #0
 c0012e6:	d003      	beq.n	c0012f0 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c0012e8:	693a      	ldr	r2, [r7, #16]
 c0012ea:	68fb      	ldr	r3, [r7, #12]
 c0012ec:	4313      	orrs	r3, r2
 c0012ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c0012f0:	4a0a      	ldr	r2, [pc, #40]	; (c00131c <HAL_GPIO_Init+0x2e0>)
 c0012f2:	693b      	ldr	r3, [r7, #16]
 c0012f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c0012f8:	697b      	ldr	r3, [r7, #20]
 c0012fa:	3301      	adds	r3, #1
 c0012fc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c0012fe:	683b      	ldr	r3, [r7, #0]
 c001300:	681a      	ldr	r2, [r3, #0]
 c001302:	697b      	ldr	r3, [r7, #20]
 c001304:	fa22 f303 	lsr.w	r3, r2, r3
 c001308:	2b00      	cmp	r3, #0
 c00130a:	f47f ae9f 	bne.w	c00104c <HAL_GPIO_Init+0x10>
  }
}
 c00130e:	bf00      	nop
 c001310:	bf00      	nop
 c001312:	371c      	adds	r7, #28
 c001314:	46bd      	mov	sp, r7
 c001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00131a:	4770      	bx	lr
 c00131c:	5002f400 	.word	0x5002f400
 c001320:	52020000 	.word	0x52020000
 c001324:	52020400 	.word	0x52020400
 c001328:	52020800 	.word	0x52020800
 c00132c:	52020c00 	.word	0x52020c00
 c001330:	52021000 	.word	0x52021000
 c001334:	52021400 	.word	0x52021400
 c001338:	52021800 	.word	0x52021800

0c00133c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c00133c:	b480      	push	{r7}
 c00133e:	b083      	sub	sp, #12
 c001340:	af00      	add	r7, sp, #0
 c001342:	6078      	str	r0, [r7, #4]
 c001344:	460b      	mov	r3, r1
 c001346:	807b      	strh	r3, [r7, #2]
 c001348:	4613      	mov	r3, r2
 c00134a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c00134c:	787b      	ldrb	r3, [r7, #1]
 c00134e:	2b00      	cmp	r3, #0
 c001350:	d003      	beq.n	c00135a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c001352:	887a      	ldrh	r2, [r7, #2]
 c001354:	687b      	ldr	r3, [r7, #4]
 c001356:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c001358:	e002      	b.n	c001360 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c00135a:	887a      	ldrh	r2, [r7, #2]
 c00135c:	687b      	ldr	r3, [r7, #4]
 c00135e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c001360:	bf00      	nop
 c001362:	370c      	adds	r7, #12
 c001364:	46bd      	mov	sp, r7
 c001366:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00136a:	4770      	bx	lr

0c00136c <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c00136c:	b480      	push	{r7}
 c00136e:	b089      	sub	sp, #36	; 0x24
 c001370:	af00      	add	r7, sp, #0
 c001372:	60f8      	str	r0, [r7, #12]
 c001374:	460b      	mov	r3, r1
 c001376:	607a      	str	r2, [r7, #4]
 c001378:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c00137a:	2300      	movs	r3, #0
 c00137c:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c00137e:	68fb      	ldr	r3, [r7, #12]
 c001380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001382:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c001384:	e01b      	b.n	c0013be <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c001386:	897a      	ldrh	r2, [r7, #10]
 c001388:	2101      	movs	r1, #1
 c00138a:	69fb      	ldr	r3, [r7, #28]
 c00138c:	fa01 f303 	lsl.w	r3, r1, r3
 c001390:	4013      	ands	r3, r2
 c001392:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c001394:	697b      	ldr	r3, [r7, #20]
 c001396:	2b00      	cmp	r3, #0
 c001398:	d00e      	beq.n	c0013b8 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c00139a:	2201      	movs	r2, #1
 c00139c:	69fb      	ldr	r3, [r7, #28]
 c00139e:	fa02 f303 	lsl.w	r3, r2, r3
 c0013a2:	43db      	mvns	r3, r3
 c0013a4:	69ba      	ldr	r2, [r7, #24]
 c0013a6:	4013      	ands	r3, r2
 c0013a8:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c0013aa:	687a      	ldr	r2, [r7, #4]
 c0013ac:	69fb      	ldr	r3, [r7, #28]
 c0013ae:	fa02 f303 	lsl.w	r3, r2, r3
 c0013b2:	69ba      	ldr	r2, [r7, #24]
 c0013b4:	4313      	orrs	r3, r2
 c0013b6:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c0013b8:	69fb      	ldr	r3, [r7, #28]
 c0013ba:	3301      	adds	r3, #1
 c0013bc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0013be:	897a      	ldrh	r2, [r7, #10]
 c0013c0:	69fb      	ldr	r3, [r7, #28]
 c0013c2:	fa42 f303 	asr.w	r3, r2, r3
 c0013c6:	2b00      	cmp	r3, #0
 c0013c8:	d1dd      	bne.n	c001386 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c0013ca:	68fb      	ldr	r3, [r7, #12]
 c0013cc:	69ba      	ldr	r2, [r7, #24]
 c0013ce:	631a      	str	r2, [r3, #48]	; 0x30
}
 c0013d0:	bf00      	nop
 c0013d2:	3724      	adds	r7, #36	; 0x24
 c0013d4:	46bd      	mov	sp, r7
 c0013d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013da:	4770      	bx	lr

0c0013dc <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0013dc:	b480      	push	{r7}
 c0013de:	b089      	sub	sp, #36	; 0x24
 c0013e0:	af00      	add	r7, sp, #0
 c0013e2:	6078      	str	r0, [r7, #4]
 c0013e4:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0013e6:	687b      	ldr	r3, [r7, #4]
 c0013e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0013ec:	d00b      	beq.n	c001406 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0013ee:	687b      	ldr	r3, [r7, #4]
 c0013f0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0013f4:	d007      	beq.n	c001406 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0013f6:	687b      	ldr	r3, [r7, #4]
 c0013f8:	4a36      	ldr	r2, [pc, #216]	; (c0014d4 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0013fa:	4293      	cmp	r3, r2
 c0013fc:	d003      	beq.n	c001406 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0013fe:	687b      	ldr	r3, [r7, #4]
 c001400:	4a35      	ldr	r2, [pc, #212]	; (c0014d8 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c001402:	4293      	cmp	r3, r2
 c001404:	d111      	bne.n	c00142a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c001406:	683b      	ldr	r3, [r7, #0]
 c001408:	681b      	ldr	r3, [r3, #0]
 c00140a:	2b00      	cmp	r3, #0
 c00140c:	d004      	beq.n	c001418 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c00140e:	683b      	ldr	r3, [r7, #0]
 c001410:	681b      	ldr	r3, [r3, #0]
 c001412:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c001416:	d108      	bne.n	c00142a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c001418:	683b      	ldr	r3, [r7, #0]
 c00141a:	685b      	ldr	r3, [r3, #4]
 c00141c:	2b00      	cmp	r3, #0
 c00141e:	d006      	beq.n	c00142e <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c001420:	683b      	ldr	r3, [r7, #0]
 c001422:	685b      	ldr	r3, [r3, #4]
 c001424:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c001428:	d001      	beq.n	c00142e <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c00142a:	2301      	movs	r3, #1
 c00142c:	e04b      	b.n	c0014c6 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00142e:	683b      	ldr	r3, [r7, #0]
 c001430:	685b      	ldr	r3, [r3, #4]
 c001432:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c001434:	683b      	ldr	r3, [r7, #0]
 c001436:	681b      	ldr	r3, [r3, #0]
 c001438:	693a      	ldr	r2, [r7, #16]
 c00143a:	4313      	orrs	r3, r2
 c00143c:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00143e:	687b      	ldr	r3, [r7, #4]
 c001440:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c001444:	d003      	beq.n	c00144e <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c001446:	687b      	ldr	r3, [r7, #4]
 c001448:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00144c:	d105      	bne.n	c00145a <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c00144e:	4b23      	ldr	r3, [pc, #140]	; (c0014dc <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c001450:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c001452:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c001456:	61bb      	str	r3, [r7, #24]
 c001458:	e004      	b.n	c001464 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c00145a:	4b21      	ldr	r3, [pc, #132]	; (c0014e0 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c00145c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00145e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c001462:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c001464:	69bb      	ldr	r3, [r7, #24]
 c001466:	0b5b      	lsrs	r3, r3, #13
 c001468:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c00146a:	2300      	movs	r3, #0
 c00146c:	617b      	str	r3, [r7, #20]
 c00146e:	e00c      	b.n	c00148a <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c001470:	683b      	ldr	r3, [r7, #0]
 c001472:	697a      	ldr	r2, [r7, #20]
 c001474:	3202      	adds	r2, #2
 c001476:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00147a:	69fb      	ldr	r3, [r7, #28]
 c00147c:	697a      	ldr	r2, [r7, #20]
 c00147e:	3240      	adds	r2, #64	; 0x40
 c001480:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c001484:	697b      	ldr	r3, [r7, #20]
 c001486:	3301      	adds	r3, #1
 c001488:	617b      	str	r3, [r7, #20]
 c00148a:	697a      	ldr	r2, [r7, #20]
 c00148c:	68fb      	ldr	r3, [r7, #12]
 c00148e:	429a      	cmp	r2, r3
 c001490:	d3ee      	bcc.n	c001470 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c001492:	69fb      	ldr	r3, [r7, #28]
 c001494:	681b      	ldr	r3, [r3, #0]
 c001496:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00149a:	693b      	ldr	r3, [r7, #16]
 c00149c:	431a      	orrs	r2, r3
 c00149e:	69fb      	ldr	r3, [r7, #28]
 c0014a0:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c0014a2:	69bb      	ldr	r3, [r7, #24]
 c0014a4:	0b5b      	lsrs	r3, r3, #13
 c0014a6:	2201      	movs	r2, #1
 c0014a8:	fa02 f303 	lsl.w	r3, r2, r3
 c0014ac:	3b01      	subs	r3, #1
 c0014ae:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0014b0:	69fb      	ldr	r3, [r7, #28]
 c0014b2:	691a      	ldr	r2, [r3, #16]
 c0014b4:	68bb      	ldr	r3, [r7, #8]
 c0014b6:	43db      	mvns	r3, r3
 c0014b8:	401a      	ands	r2, r3
 c0014ba:	683b      	ldr	r3, [r7, #0]
 c0014bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0014be:	431a      	orrs	r2, r3
 c0014c0:	69fb      	ldr	r3, [r7, #28]
 c0014c2:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c0014c4:	2300      	movs	r3, #0
}
 c0014c6:	4618      	mov	r0, r3
 c0014c8:	3724      	adds	r7, #36	; 0x24
 c0014ca:	46bd      	mov	sp, r7
 c0014cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0014d0:	4770      	bx	lr
 c0014d2:	bf00      	nop
 c0014d4:	20030000 	.word	0x20030000
 c0014d8:	30030000 	.word	0x30030000
 c0014dc:	50032c00 	.word	0x50032c00
 c0014e0:	50033000 	.word	0x50033000

0c0014e4 <HAL_GTZC_IRQHandler>:
/**
  * @brief  This function handles GTZC interrupt request.
  * @retval None.
  */
void HAL_GTZC_IRQHandler(void)
{
 c0014e4:	b580      	push	{r7, lr}
 c0014e6:	b084      	sub	sp, #16
 c0014e8:	af00      	add	r7, sp, #0
  uint32_t flag;
  uint32_t ier_itsources;
  uint32_t sr_flags;

  /* Get current IT Flags and IT sources value on 1st register */
  ier_itsources = READ_REG(GTZC_TZIC->IER1);
 c0014ea:	4b3f      	ldr	r3, [pc, #252]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c0014ec:	681b      	ldr	r3, [r3, #0]
 c0014ee:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR1);
 c0014f0:	4b3d      	ldr	r3, [pc, #244]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c0014f2:	691b      	ldr	r3, [r3, #16]
 c0014f4:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c0014f6:	68ba      	ldr	r2, [r7, #8]
 c0014f8:	687b      	ldr	r3, [r7, #4]
 c0014fa:	4013      	ands	r3, r2
 c0014fc:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0014fe:	683b      	ldr	r3, [r7, #0]
 c001500:	2b00      	cmp	r3, #0
 c001502:	d019      	beq.n	c001538 <HAL_GTZC_IRQHandler+0x54>
  {
    WRITE_REG(GTZC_TZIC->FCR1, flag);
 c001504:	4a38      	ldr	r2, [pc, #224]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c001506:	683b      	ldr	r3, [r7, #0]
 c001508:	6213      	str	r3, [r2, #32]

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c00150a:	2300      	movs	r3, #0
 c00150c:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00150e:	e00d      	b.n	c00152c <HAL_GTZC_IRQHandler+0x48>
    {
      if ((flag & (1UL << position)) != 0U)
 c001510:	683a      	ldr	r2, [r7, #0]
 c001512:	68fb      	ldr	r3, [r7, #12]
 c001514:	fa22 f303 	lsr.w	r3, r2, r3
 c001518:	f003 0301 	and.w	r3, r3, #1
 c00151c:	2b00      	cmp	r3, #0
 c00151e:	d002      	beq.n	c001526 <HAL_GTZC_IRQHandler+0x42>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG1 | position);
 c001520:	68f8      	ldr	r0, [r7, #12]
 c001522:	f000 f863 	bl	c0015ec <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c001526:	68fb      	ldr	r3, [r7, #12]
 c001528:	3301      	adds	r3, #1
 c00152a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00152c:	683a      	ldr	r2, [r7, #0]
 c00152e:	68fb      	ldr	r3, [r7, #12]
 c001530:	fa22 f303 	lsr.w	r3, r2, r3
 c001534:	2b00      	cmp	r3, #0
 c001536:	d1eb      	bne.n	c001510 <HAL_GTZC_IRQHandler+0x2c>
    }
  }

  /* Get current IT Flags and IT sources value on 2nd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER2);
 c001538:	4b2b      	ldr	r3, [pc, #172]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c00153a:	685b      	ldr	r3, [r3, #4]
 c00153c:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR2);
 c00153e:	4b2a      	ldr	r3, [pc, #168]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c001540:	695b      	ldr	r3, [r3, #20]
 c001542:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001544:	68ba      	ldr	r2, [r7, #8]
 c001546:	687b      	ldr	r3, [r7, #4]
 c001548:	4013      	ands	r3, r2
 c00154a:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c00154c:	683b      	ldr	r3, [r7, #0]
 c00154e:	2b00      	cmp	r3, #0
 c001550:	d01c      	beq.n	c00158c <HAL_GTZC_IRQHandler+0xa8>
  {
    WRITE_REG(GTZC_TZIC->FCR2, flag);
 c001552:	4a25      	ldr	r2, [pc, #148]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c001554:	683b      	ldr	r3, [r7, #0]
 c001556:	6253      	str	r3, [r2, #36]	; 0x24

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c001558:	2300      	movs	r3, #0
 c00155a:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c00155c:	e010      	b.n	c001580 <HAL_GTZC_IRQHandler+0x9c>
    {
      if ((flag & (1UL << position)) != 0U)
 c00155e:	683a      	ldr	r2, [r7, #0]
 c001560:	68fb      	ldr	r3, [r7, #12]
 c001562:	fa22 f303 	lsr.w	r3, r2, r3
 c001566:	f003 0301 	and.w	r3, r3, #1
 c00156a:	2b00      	cmp	r3, #0
 c00156c:	d005      	beq.n	c00157a <HAL_GTZC_IRQHandler+0x96>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG2 | position);
 c00156e:	68fb      	ldr	r3, [r7, #12]
 c001570:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001574:	4618      	mov	r0, r3
 c001576:	f000 f839 	bl	c0015ec <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c00157a:	68fb      	ldr	r3, [r7, #12]
 c00157c:	3301      	adds	r3, #1
 c00157e:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c001580:	683a      	ldr	r2, [r7, #0]
 c001582:	68fb      	ldr	r3, [r7, #12]
 c001584:	fa22 f303 	lsr.w	r3, r2, r3
 c001588:	2b00      	cmp	r3, #0
 c00158a:	d1e8      	bne.n	c00155e <HAL_GTZC_IRQHandler+0x7a>
    }
  }

  /* Get current IT Flags and IT sources value on 3rd register */
  ier_itsources = READ_REG(GTZC_TZIC->IER3);
 c00158c:	4b16      	ldr	r3, [pc, #88]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c00158e:	689b      	ldr	r3, [r3, #8]
 c001590:	60bb      	str	r3, [r7, #8]
  sr_flags      = READ_REG(GTZC_TZIC->SR3);
 c001592:	4b15      	ldr	r3, [pc, #84]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c001594:	699b      	ldr	r3, [r3, #24]
 c001596:	607b      	str	r3, [r7, #4]

  /* Get Mask interrupt and then clear them */
  flag = ier_itsources & sr_flags;
 c001598:	68ba      	ldr	r2, [r7, #8]
 c00159a:	687b      	ldr	r3, [r7, #4]
 c00159c:	4013      	ands	r3, r2
 c00159e:	603b      	str	r3, [r7, #0]
  if (flag != 0U)
 c0015a0:	683b      	ldr	r3, [r7, #0]
 c0015a2:	2b00      	cmp	r3, #0
 c0015a4:	d01c      	beq.n	c0015e0 <HAL_GTZC_IRQHandler+0xfc>
  {
    WRITE_REG(GTZC_TZIC->FCR3, flag);
 c0015a6:	4a10      	ldr	r2, [pc, #64]	; (c0015e8 <HAL_GTZC_IRQHandler+0x104>)
 c0015a8:	683b      	ldr	r3, [r7, #0]
 c0015aa:	6293      	str	r3, [r2, #40]	; 0x28

    /* Loop on flag to check, which ones have been raised */
    position = 0U;
 c0015ac:	2300      	movs	r3, #0
 c0015ae:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0015b0:	e010      	b.n	c0015d4 <HAL_GTZC_IRQHandler+0xf0>
    {
      if ((flag & (1UL << position)) != 0U)
 c0015b2:	683a      	ldr	r2, [r7, #0]
 c0015b4:	68fb      	ldr	r3, [r7, #12]
 c0015b6:	fa22 f303 	lsr.w	r3, r2, r3
 c0015ba:	f003 0301 	and.w	r3, r3, #1
 c0015be:	2b00      	cmp	r3, #0
 c0015c0:	d005      	beq.n	c0015ce <HAL_GTZC_IRQHandler+0xea>
      {
        HAL_GTZC_TZIC_Callback(GTZC_PERIPH_REG3 | position);
 c0015c2:	68fb      	ldr	r3, [r7, #12]
 c0015c4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 c0015c8:	4618      	mov	r0, r3
 c0015ca:	f000 f80f 	bl	c0015ec <HAL_GTZC_TZIC_Callback>
      }

      /* Position bit to be updated */
      position++;
 c0015ce:	68fb      	ldr	r3, [r7, #12]
 c0015d0:	3301      	adds	r3, #1
 c0015d2:	60fb      	str	r3, [r7, #12]
    while ((flag >> position) != 0U)
 c0015d4:	683a      	ldr	r2, [r7, #0]
 c0015d6:	68fb      	ldr	r3, [r7, #12]
 c0015d8:	fa22 f303 	lsr.w	r3, r2, r3
 c0015dc:	2b00      	cmp	r3, #0
 c0015de:	d1e8      	bne.n	c0015b2 <HAL_GTZC_IRQHandler+0xce>
    }
  }
}
 c0015e0:	bf00      	nop
 c0015e2:	3710      	adds	r7, #16
 c0015e4:	46bd      	mov	sp, r7
 c0015e6:	bd80      	pop	{r7, pc}
 c0015e8:	50032800 	.word	0x50032800

0c0015ec <HAL_GTZC_TZIC_Callback>:
  * @param  PeriphId Peripheral identifier triggering the illegal access.
  *         This parameter can be a value of @ref GTZC_TZSC_TZIC_PeriphId
  * @retval None.
  */
__weak void HAL_GTZC_TZIC_Callback(uint32_t PeriphId)
{
 c0015ec:	b480      	push	{r7}
 c0015ee:	b083      	sub	sp, #12
 c0015f0:	af00      	add	r7, sp, #0
 c0015f2:	6078      	str	r0, [r7, #4]
  UNUSED(PeriphId);

  /* NOTE: This function should not be modified. When the callback is needed,
   * the HAL_GTZC_TZIC_Callback is to be implemented in the user file
   */
}
 c0015f4:	bf00      	nop
 c0015f6:	370c      	adds	r7, #12
 c0015f8:	46bd      	mov	sp, r7
 c0015fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0015fe:	4770      	bx	lr

0c001600 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c001600:	b480      	push	{r7}
 c001602:	b085      	sub	sp, #20
 c001604:	af00      	add	r7, sp, #0
 c001606:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c001608:	2300      	movs	r3, #0
 c00160a:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c00160c:	4b0b      	ldr	r3, [pc, #44]	; (c00163c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c00160e:	681b      	ldr	r3, [r3, #0]
 c001610:	f003 0301 	and.w	r3, r3, #1
 c001614:	2b00      	cmp	r3, #0
 c001616:	d002      	beq.n	c00161e <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c001618:	2301      	movs	r3, #1
 c00161a:	73fb      	strb	r3, [r7, #15]
 c00161c:	e007      	b.n	c00162e <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c00161e:	4b07      	ldr	r3, [pc, #28]	; (c00163c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001620:	681b      	ldr	r3, [r3, #0]
 c001622:	f023 0204 	bic.w	r2, r3, #4
 c001626:	4905      	ldr	r1, [pc, #20]	; (c00163c <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c001628:	687b      	ldr	r3, [r7, #4]
 c00162a:	4313      	orrs	r3, r2
 c00162c:	600b      	str	r3, [r1, #0]
  }

  return status;
 c00162e:	7bfb      	ldrb	r3, [r7, #15]
}
 c001630:	4618      	mov	r0, r3
 c001632:	3714      	adds	r7, #20
 c001634:	46bd      	mov	sp, r7
 c001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00163a:	4770      	bx	lr
 c00163c:	50030400 	.word	0x50030400

0c001640 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c001640:	b480      	push	{r7}
 c001642:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c001644:	4b05      	ldr	r3, [pc, #20]	; (c00165c <HAL_ICACHE_Enable+0x1c>)
 c001646:	681b      	ldr	r3, [r3, #0]
 c001648:	4a04      	ldr	r2, [pc, #16]	; (c00165c <HAL_ICACHE_Enable+0x1c>)
 c00164a:	f043 0301 	orr.w	r3, r3, #1
 c00164e:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c001650:	2300      	movs	r3, #0
}
 c001652:	4618      	mov	r0, r3
 c001654:	46bd      	mov	sp, r7
 c001656:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00165a:	4770      	bx	lr
 c00165c:	50030400 	.word	0x50030400

0c001660 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c001660:	b480      	push	{r7}
 c001662:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c001664:	4b04      	ldr	r3, [pc, #16]	; (c001678 <HAL_PWREx_GetVoltageRange+0x18>)
 c001666:	681b      	ldr	r3, [r3, #0]
 c001668:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c00166c:	4618      	mov	r0, r3
 c00166e:	46bd      	mov	sp, r7
 c001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001674:	4770      	bx	lr
 c001676:	bf00      	nop
 c001678:	50007000 	.word	0x50007000

0c00167c <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c00167c:	b580      	push	{r7, lr}
 c00167e:	b084      	sub	sp, #16
 c001680:	af00      	add	r7, sp, #0
 c001682:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c001684:	4b27      	ldr	r3, [pc, #156]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c001686:	681b      	ldr	r3, [r3, #0]
 c001688:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c00168c:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c00168e:	f000 f871 	bl	c001774 <HAL_PWREx_SMPS_GetEffectiveMode>
 c001692:	4603      	mov	r3, r0
 c001694:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c001698:	d101      	bne.n	c00169e <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c00169a:	2301      	movs	r3, #1
 c00169c:	e03e      	b.n	c00171c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c00169e:	4b21      	ldr	r3, [pc, #132]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0016a0:	68db      	ldr	r3, [r3, #12]
 c0016a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c0016a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0016aa:	d101      	bne.n	c0016b0 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c0016ac:	2301      	movs	r3, #1
 c0016ae:	e035      	b.n	c00171c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c0016b0:	68ba      	ldr	r2, [r7, #8]
 c0016b2:	687b      	ldr	r3, [r7, #4]
 c0016b4:	429a      	cmp	r2, r3
 c0016b6:	d101      	bne.n	c0016bc <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c0016b8:	2300      	movs	r3, #0
 c0016ba:	e02f      	b.n	c00171c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c0016bc:	4b19      	ldr	r3, [pc, #100]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0016be:	681b      	ldr	r3, [r3, #0]
 c0016c0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c0016c4:	4917      	ldr	r1, [pc, #92]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0016c6:	687b      	ldr	r3, [r7, #4]
 c0016c8:	4313      	orrs	r3, r2
 c0016ca:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0016cc:	4b16      	ldr	r3, [pc, #88]	; (c001728 <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0016ce:	681b      	ldr	r3, [r3, #0]
 c0016d0:	095b      	lsrs	r3, r3, #5
 c0016d2:	4a16      	ldr	r2, [pc, #88]	; (c00172c <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0016d4:	fba2 2303 	umull	r2, r3, r2, r3
 c0016d8:	09db      	lsrs	r3, r3, #7
 c0016da:	2232      	movs	r2, #50	; 0x32
 c0016dc:	fb02 f303 	mul.w	r3, r2, r3
 c0016e0:	4a13      	ldr	r2, [pc, #76]	; (c001730 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0016e2:	fba2 2303 	umull	r2, r3, r2, r3
 c0016e6:	08db      	lsrs	r3, r3, #3
 c0016e8:	3301      	adds	r3, #1
 c0016ea:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0016ec:	e002      	b.n	c0016f4 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c0016ee:	68fb      	ldr	r3, [r7, #12]
 c0016f0:	3b01      	subs	r3, #1
 c0016f2:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0016f4:	4b0b      	ldr	r3, [pc, #44]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0016f6:	695b      	ldr	r3, [r3, #20]
 c0016f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0016fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001700:	d102      	bne.n	c001708 <HAL_PWREx_ControlVoltageScaling+0x8c>
 c001702:	68fb      	ldr	r3, [r7, #12]
 c001704:	2b00      	cmp	r3, #0
 c001706:	d1f2      	bne.n	c0016ee <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c001708:	4b06      	ldr	r3, [pc, #24]	; (c001724 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00170a:	695b      	ldr	r3, [r3, #20]
 c00170c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001710:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c001714:	d101      	bne.n	c00171a <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c001716:	2303      	movs	r3, #3
 c001718:	e000      	b.n	c00171c <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c00171a:	2300      	movs	r3, #0
}
 c00171c:	4618      	mov	r0, r3
 c00171e:	3710      	adds	r7, #16
 c001720:	46bd      	mov	sp, r7
 c001722:	bd80      	pop	{r7, pc}
 c001724:	50007000 	.word	0x50007000
 c001728:	30000000 	.word	0x30000000
 c00172c:	0a7c5ac5 	.word	0x0a7c5ac5
 c001730:	cccccccd 	.word	0xcccccccd

0c001734 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c001734:	b480      	push	{r7}
 c001736:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c001738:	4b05      	ldr	r3, [pc, #20]	; (c001750 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00173a:	685b      	ldr	r3, [r3, #4]
 c00173c:	4a04      	ldr	r2, [pc, #16]	; (c001750 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00173e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c001742:	6053      	str	r3, [r2, #4]
}
 c001744:	bf00      	nop
 c001746:	46bd      	mov	sp, r7
 c001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00174c:	4770      	bx	lr
 c00174e:	bf00      	nop
 c001750:	50007000 	.word	0x50007000

0c001754 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c001754:	b480      	push	{r7}
 c001756:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c001758:	4b05      	ldr	r3, [pc, #20]	; (c001770 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00175a:	689b      	ldr	r3, [r3, #8]
 c00175c:	4a04      	ldr	r2, [pc, #16]	; (c001770 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00175e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c001762:	6093      	str	r3, [r2, #8]
}
 c001764:	bf00      	nop
 c001766:	46bd      	mov	sp, r7
 c001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00176c:	4770      	bx	lr
 c00176e:	bf00      	nop
 c001770:	50007000 	.word	0x50007000

0c001774 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c001774:	b480      	push	{r7}
 c001776:	b083      	sub	sp, #12
 c001778:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c00177a:	4b0f      	ldr	r3, [pc, #60]	; (c0017b8 <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c00177c:	691b      	ldr	r3, [r3, #16]
 c00177e:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c001780:	683b      	ldr	r3, [r7, #0]
 c001782:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c001786:	2b00      	cmp	r3, #0
 c001788:	d003      	beq.n	c001792 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c00178a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c00178e:	607b      	str	r3, [r7, #4]
 c001790:	e00a      	b.n	c0017a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c001792:	683b      	ldr	r3, [r7, #0]
 c001794:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001798:	2b00      	cmp	r3, #0
 c00179a:	d103      	bne.n	c0017a4 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c00179c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c0017a0:	607b      	str	r3, [r7, #4]
 c0017a2:	e001      	b.n	c0017a8 <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c0017a4:	2300      	movs	r3, #0
 c0017a6:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c0017a8:	687b      	ldr	r3, [r7, #4]
}
 c0017aa:	4618      	mov	r0, r3
 c0017ac:	370c      	adds	r7, #12
 c0017ae:	46bd      	mov	sp, r7
 c0017b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0017b4:	4770      	bx	lr
 c0017b6:	bf00      	nop
 c0017b8:	50007000 	.word	0x50007000

0c0017bc <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c0017bc:	b580      	push	{r7, lr}
 c0017be:	b088      	sub	sp, #32
 c0017c0:	af00      	add	r7, sp, #0
 c0017c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c0017c4:	687b      	ldr	r3, [r7, #4]
 c0017c6:	2b00      	cmp	r3, #0
 c0017c8:	d102      	bne.n	c0017d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c0017ca:	2301      	movs	r3, #1
 c0017cc:	f000 bcc2 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0017d0:	4b99      	ldr	r3, [pc, #612]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0017d2:	689b      	ldr	r3, [r3, #8]
 c0017d4:	f003 030c 	and.w	r3, r3, #12
 c0017d8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0017da:	4b97      	ldr	r3, [pc, #604]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0017dc:	68db      	ldr	r3, [r3, #12]
 c0017de:	f003 0303 	and.w	r3, r3, #3
 c0017e2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0017e4:	687b      	ldr	r3, [r7, #4]
 c0017e6:	681b      	ldr	r3, [r3, #0]
 c0017e8:	f003 0310 	and.w	r3, r3, #16
 c0017ec:	2b00      	cmp	r3, #0
 c0017ee:	f000 80e9 	beq.w	c0019c4 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0017f2:	69bb      	ldr	r3, [r7, #24]
 c0017f4:	2b00      	cmp	r3, #0
 c0017f6:	d006      	beq.n	c001806 <HAL_RCC_OscConfig+0x4a>
 c0017f8:	69bb      	ldr	r3, [r7, #24]
 c0017fa:	2b0c      	cmp	r3, #12
 c0017fc:	f040 8083 	bne.w	c001906 <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c001800:	697b      	ldr	r3, [r7, #20]
 c001802:	2b01      	cmp	r3, #1
 c001804:	d17f      	bne.n	c001906 <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c001806:	4b8c      	ldr	r3, [pc, #560]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001808:	681b      	ldr	r3, [r3, #0]
 c00180a:	f003 0302 	and.w	r3, r3, #2
 c00180e:	2b00      	cmp	r3, #0
 c001810:	d006      	beq.n	c001820 <HAL_RCC_OscConfig+0x64>
 c001812:	687b      	ldr	r3, [r7, #4]
 c001814:	69db      	ldr	r3, [r3, #28]
 c001816:	2b00      	cmp	r3, #0
 c001818:	d102      	bne.n	c001820 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c00181a:	2301      	movs	r3, #1
 c00181c:	f000 bc9a 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c001820:	687b      	ldr	r3, [r7, #4]
 c001822:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c001824:	4b84      	ldr	r3, [pc, #528]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001826:	681b      	ldr	r3, [r3, #0]
 c001828:	f003 0308 	and.w	r3, r3, #8
 c00182c:	2b00      	cmp	r3, #0
 c00182e:	d004      	beq.n	c00183a <HAL_RCC_OscConfig+0x7e>
 c001830:	4b81      	ldr	r3, [pc, #516]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001832:	681b      	ldr	r3, [r3, #0]
 c001834:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001838:	e005      	b.n	c001846 <HAL_RCC_OscConfig+0x8a>
 c00183a:	4b7f      	ldr	r3, [pc, #508]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00183c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001840:	091b      	lsrs	r3, r3, #4
 c001842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c001846:	4293      	cmp	r3, r2
 c001848:	d224      	bcs.n	c001894 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00184a:	687b      	ldr	r3, [r7, #4]
 c00184c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00184e:	4618      	mov	r0, r3
 c001850:	f000 fe72 	bl	c002538 <RCC_SetFlashLatencyFromMSIRange>
 c001854:	4603      	mov	r3, r0
 c001856:	2b00      	cmp	r3, #0
 c001858:	d002      	beq.n	c001860 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00185a:	2301      	movs	r3, #1
 c00185c:	f000 bc7a 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001860:	4b75      	ldr	r3, [pc, #468]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001862:	681b      	ldr	r3, [r3, #0]
 c001864:	4a74      	ldr	r2, [pc, #464]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001866:	f043 0308 	orr.w	r3, r3, #8
 c00186a:	6013      	str	r3, [r2, #0]
 c00186c:	4b72      	ldr	r3, [pc, #456]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00186e:	681b      	ldr	r3, [r3, #0]
 c001870:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001874:	687b      	ldr	r3, [r7, #4]
 c001876:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001878:	496f      	ldr	r1, [pc, #444]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00187a:	4313      	orrs	r3, r2
 c00187c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00187e:	4b6e      	ldr	r3, [pc, #440]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001880:	685b      	ldr	r3, [r3, #4]
 c001882:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001886:	687b      	ldr	r3, [r7, #4]
 c001888:	6a1b      	ldr	r3, [r3, #32]
 c00188a:	021b      	lsls	r3, r3, #8
 c00188c:	496a      	ldr	r1, [pc, #424]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00188e:	4313      	orrs	r3, r2
 c001890:	604b      	str	r3, [r1, #4]
 c001892:	e026      	b.n	c0018e2 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c001894:	4b68      	ldr	r3, [pc, #416]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001896:	681b      	ldr	r3, [r3, #0]
 c001898:	4a67      	ldr	r2, [pc, #412]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00189a:	f043 0308 	orr.w	r3, r3, #8
 c00189e:	6013      	str	r3, [r2, #0]
 c0018a0:	4b65      	ldr	r3, [pc, #404]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0018a2:	681b      	ldr	r3, [r3, #0]
 c0018a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0018a8:	687b      	ldr	r3, [r7, #4]
 c0018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0018ac:	4962      	ldr	r1, [pc, #392]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0018ae:	4313      	orrs	r3, r2
 c0018b0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c0018b2:	4b61      	ldr	r3, [pc, #388]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0018b4:	685b      	ldr	r3, [r3, #4]
 c0018b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c0018ba:	687b      	ldr	r3, [r7, #4]
 c0018bc:	6a1b      	ldr	r3, [r3, #32]
 c0018be:	021b      	lsls	r3, r3, #8
 c0018c0:	495d      	ldr	r1, [pc, #372]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0018c2:	4313      	orrs	r3, r2
 c0018c4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c0018c6:	69bb      	ldr	r3, [r7, #24]
 c0018c8:	2b00      	cmp	r3, #0
 c0018ca:	d10a      	bne.n	c0018e2 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0018cc:	687b      	ldr	r3, [r7, #4]
 c0018ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0018d0:	4618      	mov	r0, r3
 c0018d2:	f000 fe31 	bl	c002538 <RCC_SetFlashLatencyFromMSIRange>
 c0018d6:	4603      	mov	r3, r0
 c0018d8:	2b00      	cmp	r3, #0
 c0018da:	d002      	beq.n	c0018e2 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0018dc:	2301      	movs	r3, #1
 c0018de:	f000 bc39 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0018e2:	f000 fe15 	bl	c002510 <HAL_RCC_GetHCLKFreq>
 c0018e6:	4603      	mov	r3, r0
 c0018e8:	4a54      	ldr	r2, [pc, #336]	; (c001a3c <HAL_RCC_OscConfig+0x280>)
 c0018ea:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c0018ec:	4b54      	ldr	r3, [pc, #336]	; (c001a40 <HAL_RCC_OscConfig+0x284>)
 c0018ee:	681b      	ldr	r3, [r3, #0]
 c0018f0:	4618      	mov	r0, r3
 c0018f2:	f7ff fa27 	bl	c000d44 <HAL_InitTick>
 c0018f6:	4603      	mov	r3, r0
 c0018f8:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c0018fa:	7bfb      	ldrb	r3, [r7, #15]
 c0018fc:	2b00      	cmp	r3, #0
 c0018fe:	d060      	beq.n	c0019c2 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c001900:	7bfb      	ldrb	r3, [r7, #15]
 c001902:	f000 bc27 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c001906:	687b      	ldr	r3, [r7, #4]
 c001908:	69db      	ldr	r3, [r3, #28]
 c00190a:	2b00      	cmp	r3, #0
 c00190c:	d039      	beq.n	c001982 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c00190e:	4b4a      	ldr	r3, [pc, #296]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001910:	681b      	ldr	r3, [r3, #0]
 c001912:	4a49      	ldr	r2, [pc, #292]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001914:	f043 0301 	orr.w	r3, r3, #1
 c001918:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00191a:	f7ff fa63 	bl	c000de4 <HAL_GetTick>
 c00191e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001920:	e00f      	b.n	c001942 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001922:	f7ff fa5f 	bl	c000de4 <HAL_GetTick>
 c001926:	4602      	mov	r2, r0
 c001928:	693b      	ldr	r3, [r7, #16]
 c00192a:	1ad3      	subs	r3, r2, r3
 c00192c:	2b02      	cmp	r3, #2
 c00192e:	d908      	bls.n	c001942 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001930:	4b41      	ldr	r3, [pc, #260]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001932:	681b      	ldr	r3, [r3, #0]
 c001934:	f003 0302 	and.w	r3, r3, #2
 c001938:	2b00      	cmp	r3, #0
 c00193a:	d102      	bne.n	c001942 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c00193c:	2303      	movs	r3, #3
 c00193e:	f000 bc09 	b.w	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c001942:	4b3d      	ldr	r3, [pc, #244]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001944:	681b      	ldr	r3, [r3, #0]
 c001946:	f003 0302 	and.w	r3, r3, #2
 c00194a:	2b00      	cmp	r3, #0
 c00194c:	d0e9      	beq.n	c001922 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c00194e:	4b3a      	ldr	r3, [pc, #232]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001950:	681b      	ldr	r3, [r3, #0]
 c001952:	4a39      	ldr	r2, [pc, #228]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001954:	f043 0308 	orr.w	r3, r3, #8
 c001958:	6013      	str	r3, [r2, #0]
 c00195a:	4b37      	ldr	r3, [pc, #220]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00195c:	681b      	ldr	r3, [r3, #0]
 c00195e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c001962:	687b      	ldr	r3, [r7, #4]
 c001964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c001966:	4934      	ldr	r1, [pc, #208]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001968:	4313      	orrs	r3, r2
 c00196a:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c00196c:	4b32      	ldr	r3, [pc, #200]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00196e:	685b      	ldr	r3, [r3, #4]
 c001970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c001974:	687b      	ldr	r3, [r7, #4]
 c001976:	6a1b      	ldr	r3, [r3, #32]
 c001978:	021b      	lsls	r3, r3, #8
 c00197a:	492f      	ldr	r1, [pc, #188]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c00197c:	4313      	orrs	r3, r2
 c00197e:	604b      	str	r3, [r1, #4]
 c001980:	e020      	b.n	c0019c4 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c001982:	4b2d      	ldr	r3, [pc, #180]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001984:	681b      	ldr	r3, [r3, #0]
 c001986:	4a2c      	ldr	r2, [pc, #176]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001988:	f023 0301 	bic.w	r3, r3, #1
 c00198c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c00198e:	f7ff fa29 	bl	c000de4 <HAL_GetTick>
 c001992:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c001994:	e00e      	b.n	c0019b4 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c001996:	f7ff fa25 	bl	c000de4 <HAL_GetTick>
 c00199a:	4602      	mov	r2, r0
 c00199c:	693b      	ldr	r3, [r7, #16]
 c00199e:	1ad3      	subs	r3, r2, r3
 c0019a0:	2b02      	cmp	r3, #2
 c0019a2:	d907      	bls.n	c0019b4 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0019a4:	4b24      	ldr	r3, [pc, #144]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0019a6:	681b      	ldr	r3, [r3, #0]
 c0019a8:	f003 0302 	and.w	r3, r3, #2
 c0019ac:	2b00      	cmp	r3, #0
 c0019ae:	d001      	beq.n	c0019b4 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c0019b0:	2303      	movs	r3, #3
 c0019b2:	e3cf      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c0019b4:	4b20      	ldr	r3, [pc, #128]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0019b6:	681b      	ldr	r3, [r3, #0]
 c0019b8:	f003 0302 	and.w	r3, r3, #2
 c0019bc:	2b00      	cmp	r3, #0
 c0019be:	d1ea      	bne.n	c001996 <HAL_RCC_OscConfig+0x1da>
 c0019c0:	e000      	b.n	c0019c4 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0019c2:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c0019c4:	687b      	ldr	r3, [r7, #4]
 c0019c6:	681b      	ldr	r3, [r3, #0]
 c0019c8:	f003 0301 	and.w	r3, r3, #1
 c0019cc:	2b00      	cmp	r3, #0
 c0019ce:	d07e      	beq.n	c001ace <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c0019d0:	69bb      	ldr	r3, [r7, #24]
 c0019d2:	2b08      	cmp	r3, #8
 c0019d4:	d005      	beq.n	c0019e2 <HAL_RCC_OscConfig+0x226>
 c0019d6:	69bb      	ldr	r3, [r7, #24]
 c0019d8:	2b0c      	cmp	r3, #12
 c0019da:	d10e      	bne.n	c0019fa <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0019dc:	697b      	ldr	r3, [r7, #20]
 c0019de:	2b03      	cmp	r3, #3
 c0019e0:	d10b      	bne.n	c0019fa <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0019e2:	4b15      	ldr	r3, [pc, #84]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c0019e4:	681b      	ldr	r3, [r3, #0]
 c0019e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0019ea:	2b00      	cmp	r3, #0
 c0019ec:	d06e      	beq.n	c001acc <HAL_RCC_OscConfig+0x310>
 c0019ee:	687b      	ldr	r3, [r7, #4]
 c0019f0:	685b      	ldr	r3, [r3, #4]
 c0019f2:	2b00      	cmp	r3, #0
 c0019f4:	d16a      	bne.n	c001acc <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c0019f6:	2301      	movs	r3, #1
 c0019f8:	e3ac      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0019fa:	687b      	ldr	r3, [r7, #4]
 c0019fc:	685b      	ldr	r3, [r3, #4]
 c0019fe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c001a02:	d106      	bne.n	c001a12 <HAL_RCC_OscConfig+0x256>
 c001a04:	4b0c      	ldr	r3, [pc, #48]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a06:	681b      	ldr	r3, [r3, #0]
 c001a08:	4a0b      	ldr	r2, [pc, #44]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a0a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001a0e:	6013      	str	r3, [r2, #0]
 c001a10:	e024      	b.n	c001a5c <HAL_RCC_OscConfig+0x2a0>
 c001a12:	687b      	ldr	r3, [r7, #4]
 c001a14:	685b      	ldr	r3, [r3, #4]
 c001a16:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c001a1a:	d113      	bne.n	c001a44 <HAL_RCC_OscConfig+0x288>
 c001a1c:	4b06      	ldr	r3, [pc, #24]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a1e:	681b      	ldr	r3, [r3, #0]
 c001a20:	4a05      	ldr	r2, [pc, #20]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a22:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001a26:	6013      	str	r3, [r2, #0]
 c001a28:	4b03      	ldr	r3, [pc, #12]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a2a:	681b      	ldr	r3, [r3, #0]
 c001a2c:	4a02      	ldr	r2, [pc, #8]	; (c001a38 <HAL_RCC_OscConfig+0x27c>)
 c001a2e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c001a32:	6013      	str	r3, [r2, #0]
 c001a34:	e012      	b.n	c001a5c <HAL_RCC_OscConfig+0x2a0>
 c001a36:	bf00      	nop
 c001a38:	50021000 	.word	0x50021000
 c001a3c:	30000000 	.word	0x30000000
 c001a40:	30000004 	.word	0x30000004
 c001a44:	4b8b      	ldr	r3, [pc, #556]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a46:	681b      	ldr	r3, [r3, #0]
 c001a48:	4a8a      	ldr	r2, [pc, #552]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c001a4e:	6013      	str	r3, [r2, #0]
 c001a50:	4b88      	ldr	r3, [pc, #544]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a52:	681b      	ldr	r3, [r3, #0]
 c001a54:	4a87      	ldr	r2, [pc, #540]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c001a5c:	687b      	ldr	r3, [r7, #4]
 c001a5e:	685b      	ldr	r3, [r3, #4]
 c001a60:	2b00      	cmp	r3, #0
 c001a62:	d019      	beq.n	c001a98 <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001a64:	f7ff f9be 	bl	c000de4 <HAL_GetTick>
 c001a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001a6a:	e00e      	b.n	c001a8a <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001a6c:	f7ff f9ba 	bl	c000de4 <HAL_GetTick>
 c001a70:	4602      	mov	r2, r0
 c001a72:	693b      	ldr	r3, [r7, #16]
 c001a74:	1ad3      	subs	r3, r2, r3
 c001a76:	2b64      	cmp	r3, #100	; 0x64
 c001a78:	d907      	bls.n	c001a8a <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001a7a:	4b7e      	ldr	r3, [pc, #504]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a7c:	681b      	ldr	r3, [r3, #0]
 c001a7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001a82:	2b00      	cmp	r3, #0
 c001a84:	d101      	bne.n	c001a8a <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c001a86:	2303      	movs	r3, #3
 c001a88:	e364      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c001a8a:	4b7a      	ldr	r3, [pc, #488]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001a8c:	681b      	ldr	r3, [r3, #0]
 c001a8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001a92:	2b00      	cmp	r3, #0
 c001a94:	d0ea      	beq.n	c001a6c <HAL_RCC_OscConfig+0x2b0>
 c001a96:	e01a      	b.n	c001ace <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001a98:	f7ff f9a4 	bl	c000de4 <HAL_GetTick>
 c001a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001a9e:	e00e      	b.n	c001abe <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c001aa0:	f7ff f9a0 	bl	c000de4 <HAL_GetTick>
 c001aa4:	4602      	mov	r2, r0
 c001aa6:	693b      	ldr	r3, [r7, #16]
 c001aa8:	1ad3      	subs	r3, r2, r3
 c001aaa:	2b64      	cmp	r3, #100	; 0x64
 c001aac:	d907      	bls.n	c001abe <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001aae:	4b71      	ldr	r3, [pc, #452]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001ab0:	681b      	ldr	r3, [r3, #0]
 c001ab2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001ab6:	2b00      	cmp	r3, #0
 c001ab8:	d001      	beq.n	c001abe <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c001aba:	2303      	movs	r3, #3
 c001abc:	e34a      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c001abe:	4b6d      	ldr	r3, [pc, #436]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001ac0:	681b      	ldr	r3, [r3, #0]
 c001ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001ac6:	2b00      	cmp	r3, #0
 c001ac8:	d1ea      	bne.n	c001aa0 <HAL_RCC_OscConfig+0x2e4>
 c001aca:	e000      	b.n	c001ace <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c001acc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c001ace:	687b      	ldr	r3, [r7, #4]
 c001ad0:	681b      	ldr	r3, [r3, #0]
 c001ad2:	f003 0302 	and.w	r3, r3, #2
 c001ad6:	2b00      	cmp	r3, #0
 c001ad8:	d06c      	beq.n	c001bb4 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c001ada:	69bb      	ldr	r3, [r7, #24]
 c001adc:	2b04      	cmp	r3, #4
 c001ade:	d005      	beq.n	c001aec <HAL_RCC_OscConfig+0x330>
 c001ae0:	69bb      	ldr	r3, [r7, #24]
 c001ae2:	2b0c      	cmp	r3, #12
 c001ae4:	d119      	bne.n	c001b1a <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c001ae6:	697b      	ldr	r3, [r7, #20]
 c001ae8:	2b02      	cmp	r3, #2
 c001aea:	d116      	bne.n	c001b1a <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001aec:	4b61      	ldr	r3, [pc, #388]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001aee:	681b      	ldr	r3, [r3, #0]
 c001af0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001af4:	2b00      	cmp	r3, #0
 c001af6:	d005      	beq.n	c001b04 <HAL_RCC_OscConfig+0x348>
 c001af8:	687b      	ldr	r3, [r7, #4]
 c001afa:	68db      	ldr	r3, [r3, #12]
 c001afc:	2b00      	cmp	r3, #0
 c001afe:	d101      	bne.n	c001b04 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c001b00:	2301      	movs	r3, #1
 c001b02:	e327      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001b04:	4b5b      	ldr	r3, [pc, #364]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b06:	685b      	ldr	r3, [r3, #4]
 c001b08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001b0c:	687b      	ldr	r3, [r7, #4]
 c001b0e:	691b      	ldr	r3, [r3, #16]
 c001b10:	061b      	lsls	r3, r3, #24
 c001b12:	4958      	ldr	r1, [pc, #352]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b14:	4313      	orrs	r3, r2
 c001b16:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c001b18:	e04c      	b.n	c001bb4 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c001b1a:	687b      	ldr	r3, [r7, #4]
 c001b1c:	68db      	ldr	r3, [r3, #12]
 c001b1e:	2b00      	cmp	r3, #0
 c001b20:	d029      	beq.n	c001b76 <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c001b22:	4b54      	ldr	r3, [pc, #336]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b24:	681b      	ldr	r3, [r3, #0]
 c001b26:	4a53      	ldr	r2, [pc, #332]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001b2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001b2e:	f7ff f959 	bl	c000de4 <HAL_GetTick>
 c001b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001b34:	e00e      	b.n	c001b54 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001b36:	f7ff f955 	bl	c000de4 <HAL_GetTick>
 c001b3a:	4602      	mov	r2, r0
 c001b3c:	693b      	ldr	r3, [r7, #16]
 c001b3e:	1ad3      	subs	r3, r2, r3
 c001b40:	2b02      	cmp	r3, #2
 c001b42:	d907      	bls.n	c001b54 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001b44:	4b4b      	ldr	r3, [pc, #300]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b46:	681b      	ldr	r3, [r3, #0]
 c001b48:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001b4c:	2b00      	cmp	r3, #0
 c001b4e:	d101      	bne.n	c001b54 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c001b50:	2303      	movs	r3, #3
 c001b52:	e2ff      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c001b54:	4b47      	ldr	r3, [pc, #284]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b56:	681b      	ldr	r3, [r3, #0]
 c001b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001b5c:	2b00      	cmp	r3, #0
 c001b5e:	d0ea      	beq.n	c001b36 <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c001b60:	4b44      	ldr	r3, [pc, #272]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b62:	685b      	ldr	r3, [r3, #4]
 c001b64:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c001b68:	687b      	ldr	r3, [r7, #4]
 c001b6a:	691b      	ldr	r3, [r3, #16]
 c001b6c:	061b      	lsls	r3, r3, #24
 c001b6e:	4941      	ldr	r1, [pc, #260]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b70:	4313      	orrs	r3, r2
 c001b72:	604b      	str	r3, [r1, #4]
 c001b74:	e01e      	b.n	c001bb4 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c001b76:	4b3f      	ldr	r3, [pc, #252]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b78:	681b      	ldr	r3, [r3, #0]
 c001b7a:	4a3e      	ldr	r2, [pc, #248]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b7c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c001b80:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001b82:	f7ff f92f 	bl	c000de4 <HAL_GetTick>
 c001b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001b88:	e00e      	b.n	c001ba8 <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c001b8a:	f7ff f92b 	bl	c000de4 <HAL_GetTick>
 c001b8e:	4602      	mov	r2, r0
 c001b90:	693b      	ldr	r3, [r7, #16]
 c001b92:	1ad3      	subs	r3, r2, r3
 c001b94:	2b02      	cmp	r3, #2
 c001b96:	d907      	bls.n	c001ba8 <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001b98:	4b36      	ldr	r3, [pc, #216]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001b9a:	681b      	ldr	r3, [r3, #0]
 c001b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001ba0:	2b00      	cmp	r3, #0
 c001ba2:	d001      	beq.n	c001ba8 <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c001ba4:	2303      	movs	r3, #3
 c001ba6:	e2d5      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c001ba8:	4b32      	ldr	r3, [pc, #200]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001baa:	681b      	ldr	r3, [r3, #0]
 c001bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c001bb0:	2b00      	cmp	r3, #0
 c001bb2:	d1ea      	bne.n	c001b8a <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c001bb4:	687b      	ldr	r3, [r7, #4]
 c001bb6:	681b      	ldr	r3, [r3, #0]
 c001bb8:	f003 0308 	and.w	r3, r3, #8
 c001bbc:	2b00      	cmp	r3, #0
 c001bbe:	d062      	beq.n	c001c86 <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c001bc0:	687b      	ldr	r3, [r7, #4]
 c001bc2:	695b      	ldr	r3, [r3, #20]
 c001bc4:	2b00      	cmp	r3, #0
 c001bc6:	d038      	beq.n	c001c3a <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c001bc8:	687b      	ldr	r3, [r7, #4]
 c001bca:	699b      	ldr	r3, [r3, #24]
 c001bcc:	2b00      	cmp	r3, #0
 c001bce:	d108      	bne.n	c001be2 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001bd0:	4b28      	ldr	r3, [pc, #160]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001bd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001bd6:	4a27      	ldr	r2, [pc, #156]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001bd8:	f023 0310 	bic.w	r3, r3, #16
 c001bdc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c001be0:	e007      	b.n	c001bf2 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c001be2:	4b24      	ldr	r3, [pc, #144]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001be4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001be8:	4a22      	ldr	r2, [pc, #136]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001bea:	f043 0310 	orr.w	r3, r3, #16
 c001bee:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c001bf2:	4b20      	ldr	r3, [pc, #128]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001bf4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001bf8:	4a1e      	ldr	r2, [pc, #120]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001bfa:	f043 0301 	orr.w	r3, r3, #1
 c001bfe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001c02:	f7ff f8ef 	bl	c000de4 <HAL_GetTick>
 c001c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001c08:	e00f      	b.n	c001c2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001c0a:	f7ff f8eb 	bl	c000de4 <HAL_GetTick>
 c001c0e:	4602      	mov	r2, r0
 c001c10:	693b      	ldr	r3, [r7, #16]
 c001c12:	1ad3      	subs	r3, r2, r3
 c001c14:	2b07      	cmp	r3, #7
 c001c16:	d908      	bls.n	c001c2a <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001c18:	4b16      	ldr	r3, [pc, #88]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c1e:	f003 0302 	and.w	r3, r3, #2
 c001c22:	2b00      	cmp	r3, #0
 c001c24:	d101      	bne.n	c001c2a <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c001c26:	2303      	movs	r3, #3
 c001c28:	e294      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c001c2a:	4b12      	ldr	r3, [pc, #72]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c30:	f003 0302 	and.w	r3, r3, #2
 c001c34:	2b00      	cmp	r3, #0
 c001c36:	d0e8      	beq.n	c001c0a <HAL_RCC_OscConfig+0x44e>
 c001c38:	e025      	b.n	c001c86 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c001c3a:	4b0e      	ldr	r3, [pc, #56]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c40:	4a0c      	ldr	r2, [pc, #48]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001c42:	f023 0301 	bic.w	r3, r3, #1
 c001c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001c4a:	f7ff f8cb 	bl	c000de4 <HAL_GetTick>
 c001c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001c50:	e012      	b.n	c001c78 <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c001c52:	f7ff f8c7 	bl	c000de4 <HAL_GetTick>
 c001c56:	4602      	mov	r2, r0
 c001c58:	693b      	ldr	r3, [r7, #16]
 c001c5a:	1ad3      	subs	r3, r2, r3
 c001c5c:	2b07      	cmp	r3, #7
 c001c5e:	d90b      	bls.n	c001c78 <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001c60:	4b04      	ldr	r3, [pc, #16]	; (c001c74 <HAL_RCC_OscConfig+0x4b8>)
 c001c62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c66:	f003 0302 	and.w	r3, r3, #2
 c001c6a:	2b00      	cmp	r3, #0
 c001c6c:	d004      	beq.n	c001c78 <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c001c6e:	2303      	movs	r3, #3
 c001c70:	e270      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
 c001c72:	bf00      	nop
 c001c74:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c001c78:	4ba8      	ldr	r3, [pc, #672]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001c7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001c7e:	f003 0302 	and.w	r3, r3, #2
 c001c82:	2b00      	cmp	r3, #0
 c001c84:	d1e5      	bne.n	c001c52 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c001c86:	687b      	ldr	r3, [r7, #4]
 c001c88:	681b      	ldr	r3, [r3, #0]
 c001c8a:	f003 0304 	and.w	r3, r3, #4
 c001c8e:	2b00      	cmp	r3, #0
 c001c90:	f000 812d 	beq.w	c001eee <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c001c94:	2300      	movs	r3, #0
 c001c96:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c001c98:	4ba0      	ldr	r3, [pc, #640]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001c9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001ca0:	2b00      	cmp	r3, #0
 c001ca2:	d10d      	bne.n	c001cc0 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c001ca4:	4b9d      	ldr	r3, [pc, #628]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001ca8:	4a9c      	ldr	r2, [pc, #624]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001caa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c001cae:	6593      	str	r3, [r2, #88]	; 0x58
 c001cb0:	4b9a      	ldr	r3, [pc, #616]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001cb2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001cb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c001cb8:	60bb      	str	r3, [r7, #8]
 c001cba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c001cbc:	2301      	movs	r3, #1
 c001cbe:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001cc0:	4b97      	ldr	r3, [pc, #604]	; (c001f20 <HAL_RCC_OscConfig+0x764>)
 c001cc2:	681b      	ldr	r3, [r3, #0]
 c001cc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001cc8:	2b00      	cmp	r3, #0
 c001cca:	d11e      	bne.n	c001d0a <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c001ccc:	4b94      	ldr	r3, [pc, #592]	; (c001f20 <HAL_RCC_OscConfig+0x764>)
 c001cce:	681b      	ldr	r3, [r3, #0]
 c001cd0:	4a93      	ldr	r2, [pc, #588]	; (c001f20 <HAL_RCC_OscConfig+0x764>)
 c001cd2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c001cd6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c001cd8:	f7ff f884 	bl	c000de4 <HAL_GetTick>
 c001cdc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001cde:	e00e      	b.n	c001cfe <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c001ce0:	f7ff f880 	bl	c000de4 <HAL_GetTick>
 c001ce4:	4602      	mov	r2, r0
 c001ce6:	693b      	ldr	r3, [r7, #16]
 c001ce8:	1ad3      	subs	r3, r2, r3
 c001cea:	2b02      	cmp	r3, #2
 c001cec:	d907      	bls.n	c001cfe <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001cee:	4b8c      	ldr	r3, [pc, #560]	; (c001f20 <HAL_RCC_OscConfig+0x764>)
 c001cf0:	681b      	ldr	r3, [r3, #0]
 c001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001cf6:	2b00      	cmp	r3, #0
 c001cf8:	d101      	bne.n	c001cfe <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c001cfa:	2303      	movs	r3, #3
 c001cfc:	e22a      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c001cfe:	4b88      	ldr	r3, [pc, #544]	; (c001f20 <HAL_RCC_OscConfig+0x764>)
 c001d00:	681b      	ldr	r3, [r3, #0]
 c001d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c001d06:	2b00      	cmp	r3, #0
 c001d08:	d0ea      	beq.n	c001ce0 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c001d0a:	687b      	ldr	r3, [r7, #4]
 c001d0c:	689b      	ldr	r3, [r3, #8]
 c001d0e:	f003 0301 	and.w	r3, r3, #1
 c001d12:	2b00      	cmp	r3, #0
 c001d14:	d01f      	beq.n	c001d56 <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c001d16:	687b      	ldr	r3, [r7, #4]
 c001d18:	689b      	ldr	r3, [r3, #8]
 c001d1a:	f003 0304 	and.w	r3, r3, #4
 c001d1e:	2b00      	cmp	r3, #0
 c001d20:	d010      	beq.n	c001d44 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001d22:	4b7e      	ldr	r3, [pc, #504]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d24:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d28:	4a7c      	ldr	r2, [pc, #496]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d2a:	f043 0304 	orr.w	r3, r3, #4
 c001d2e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001d32:	4b7a      	ldr	r3, [pc, #488]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d38:	4a78      	ldr	r2, [pc, #480]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d3a:	f043 0301 	orr.w	r3, r3, #1
 c001d3e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001d42:	e018      	b.n	c001d76 <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001d44:	4b75      	ldr	r3, [pc, #468]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d4a:	4a74      	ldr	r2, [pc, #464]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d4c:	f043 0301 	orr.w	r3, r3, #1
 c001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c001d54:	e00f      	b.n	c001d76 <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c001d56:	4b71      	ldr	r3, [pc, #452]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d58:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d5c:	4a6f      	ldr	r2, [pc, #444]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d5e:	f023 0301 	bic.w	r3, r3, #1
 c001d62:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c001d66:	4b6d      	ldr	r3, [pc, #436]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d6c:	4a6b      	ldr	r2, [pc, #428]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d6e:	f023 0304 	bic.w	r3, r3, #4
 c001d72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c001d76:	687b      	ldr	r3, [r7, #4]
 c001d78:	689b      	ldr	r3, [r3, #8]
 c001d7a:	2b00      	cmp	r3, #0
 c001d7c:	d068      	beq.n	c001e50 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001d7e:	f7ff f831 	bl	c000de4 <HAL_GetTick>
 c001d82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001d84:	e011      	b.n	c001daa <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001d86:	f7ff f82d 	bl	c000de4 <HAL_GetTick>
 c001d8a:	4602      	mov	r2, r0
 c001d8c:	693b      	ldr	r3, [r7, #16]
 c001d8e:	1ad3      	subs	r3, r2, r3
 c001d90:	f241 3288 	movw	r2, #5000	; 0x1388
 c001d94:	4293      	cmp	r3, r2
 c001d96:	d908      	bls.n	c001daa <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001d98:	4b60      	ldr	r3, [pc, #384]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001d9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001d9e:	f003 0302 	and.w	r3, r3, #2
 c001da2:	2b00      	cmp	r3, #0
 c001da4:	d101      	bne.n	c001daa <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c001da6:	2303      	movs	r3, #3
 c001da8:	e1d4      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c001daa:	4b5c      	ldr	r3, [pc, #368]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001dac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001db0:	f003 0302 	and.w	r3, r3, #2
 c001db4:	2b00      	cmp	r3, #0
 c001db6:	d0e6      	beq.n	c001d86 <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c001db8:	687b      	ldr	r3, [r7, #4]
 c001dba:	689b      	ldr	r3, [r3, #8]
 c001dbc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001dc0:	2b00      	cmp	r3, #0
 c001dc2:	d022      	beq.n	c001e0a <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001dc4:	4b55      	ldr	r3, [pc, #340]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001dca:	4a54      	ldr	r2, [pc, #336]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001dcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c001dd0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001dd4:	e011      	b.n	c001dfa <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001dd6:	f7ff f805 	bl	c000de4 <HAL_GetTick>
 c001dda:	4602      	mov	r2, r0
 c001ddc:	693b      	ldr	r3, [r7, #16]
 c001dde:	1ad3      	subs	r3, r2, r3
 c001de0:	f241 3288 	movw	r2, #5000	; 0x1388
 c001de4:	4293      	cmp	r3, r2
 c001de6:	d908      	bls.n	c001dfa <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001de8:	4b4c      	ldr	r3, [pc, #304]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001dee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001df2:	2b00      	cmp	r3, #0
 c001df4:	d101      	bne.n	c001dfa <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c001df6:	2303      	movs	r3, #3
 c001df8:	e1ac      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c001dfa:	4b48      	ldr	r3, [pc, #288]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001dfc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e00:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001e04:	2b00      	cmp	r3, #0
 c001e06:	d0e6      	beq.n	c001dd6 <HAL_RCC_OscConfig+0x61a>
 c001e08:	e068      	b.n	c001edc <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001e0a:	4b44      	ldr	r3, [pc, #272]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e10:	4a42      	ldr	r2, [pc, #264]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e12:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001e1a:	e011      	b.n	c001e40 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001e1c:	f7fe ffe2 	bl	c000de4 <HAL_GetTick>
 c001e20:	4602      	mov	r2, r0
 c001e22:	693b      	ldr	r3, [r7, #16]
 c001e24:	1ad3      	subs	r3, r2, r3
 c001e26:	f241 3288 	movw	r2, #5000	; 0x1388
 c001e2a:	4293      	cmp	r3, r2
 c001e2c:	d908      	bls.n	c001e40 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001e2e:	4b3b      	ldr	r3, [pc, #236]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001e38:	2b00      	cmp	r3, #0
 c001e3a:	d001      	beq.n	c001e40 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c001e3c:	2303      	movs	r3, #3
 c001e3e:	e189      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001e40:	4b36      	ldr	r3, [pc, #216]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001e4a:	2b00      	cmp	r3, #0
 c001e4c:	d1e6      	bne.n	c001e1c <HAL_RCC_OscConfig+0x660>
 c001e4e:	e045      	b.n	c001edc <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001e50:	f7fe ffc8 	bl	c000de4 <HAL_GetTick>
 c001e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001e56:	e011      	b.n	c001e7c <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001e58:	f7fe ffc4 	bl	c000de4 <HAL_GetTick>
 c001e5c:	4602      	mov	r2, r0
 c001e5e:	693b      	ldr	r3, [r7, #16]
 c001e60:	1ad3      	subs	r3, r2, r3
 c001e62:	f241 3288 	movw	r2, #5000	; 0x1388
 c001e66:	4293      	cmp	r3, r2
 c001e68:	d908      	bls.n	c001e7c <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001e6a:	4b2c      	ldr	r3, [pc, #176]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e70:	f003 0302 	and.w	r3, r3, #2
 c001e74:	2b00      	cmp	r3, #0
 c001e76:	d001      	beq.n	c001e7c <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c001e78:	2303      	movs	r3, #3
 c001e7a:	e16b      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c001e7c:	4b27      	ldr	r3, [pc, #156]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e82:	f003 0302 	and.w	r3, r3, #2
 c001e86:	2b00      	cmp	r3, #0
 c001e88:	d1e6      	bne.n	c001e58 <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c001e8a:	4b24      	ldr	r3, [pc, #144]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c001e94:	2b00      	cmp	r3, #0
 c001e96:	d021      	beq.n	c001edc <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c001e98:	4b20      	ldr	r3, [pc, #128]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001e9e:	4a1f      	ldr	r2, [pc, #124]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ea0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c001ea4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001ea8:	e011      	b.n	c001ece <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c001eaa:	f7fe ff9b 	bl	c000de4 <HAL_GetTick>
 c001eae:	4602      	mov	r2, r0
 c001eb0:	693b      	ldr	r3, [r7, #16]
 c001eb2:	1ad3      	subs	r3, r2, r3
 c001eb4:	f241 3288 	movw	r2, #5000	; 0x1388
 c001eb8:	4293      	cmp	r3, r2
 c001eba:	d908      	bls.n	c001ece <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001ebc:	4b17      	ldr	r3, [pc, #92]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ebe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001ec2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001ec6:	2b00      	cmp	r3, #0
 c001ec8:	d001      	beq.n	c001ece <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c001eca:	2303      	movs	r3, #3
 c001ecc:	e142      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c001ece:	4b13      	ldr	r3, [pc, #76]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ed0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c001ed4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c001ed8:	2b00      	cmp	r3, #0
 c001eda:	d1e6      	bne.n	c001eaa <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c001edc:	7ffb      	ldrb	r3, [r7, #31]
 c001ede:	2b01      	cmp	r3, #1
 c001ee0:	d105      	bne.n	c001eee <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c001ee2:	4b0e      	ldr	r3, [pc, #56]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c001ee6:	4a0d      	ldr	r2, [pc, #52]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001ee8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c001eec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c001eee:	687b      	ldr	r3, [r7, #4]
 c001ef0:	681b      	ldr	r3, [r3, #0]
 c001ef2:	f003 0320 	and.w	r3, r3, #32
 c001ef6:	2b00      	cmp	r3, #0
 c001ef8:	d04f      	beq.n	c001f9a <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c001efa:	687b      	ldr	r3, [r7, #4]
 c001efc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c001efe:	2b00      	cmp	r3, #0
 c001f00:	d028      	beq.n	c001f54 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c001f02:	4b06      	ldr	r3, [pc, #24]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001f04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f08:	4a04      	ldr	r2, [pc, #16]	; (c001f1c <HAL_RCC_OscConfig+0x760>)
 c001f0a:	f043 0301 	orr.w	r3, r3, #1
 c001f0e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001f12:	f7fe ff67 	bl	c000de4 <HAL_GetTick>
 c001f16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001f18:	e014      	b.n	c001f44 <HAL_RCC_OscConfig+0x788>
 c001f1a:	bf00      	nop
 c001f1c:	50021000 	.word	0x50021000
 c001f20:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c001f24:	f7fe ff5e 	bl	c000de4 <HAL_GetTick>
 c001f28:	4602      	mov	r2, r0
 c001f2a:	693b      	ldr	r3, [r7, #16]
 c001f2c:	1ad3      	subs	r3, r2, r3
 c001f2e:	2b02      	cmp	r3, #2
 c001f30:	d908      	bls.n	c001f44 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001f32:	4b8a      	ldr	r3, [pc, #552]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f38:	f003 0302 	and.w	r3, r3, #2
 c001f3c:	2b00      	cmp	r3, #0
 c001f3e:	d101      	bne.n	c001f44 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c001f40:	2303      	movs	r3, #3
 c001f42:	e107      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c001f44:	4b85      	ldr	r3, [pc, #532]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f4a:	f003 0302 	and.w	r3, r3, #2
 c001f4e:	2b00      	cmp	r3, #0
 c001f50:	d0e8      	beq.n	c001f24 <HAL_RCC_OscConfig+0x768>
 c001f52:	e022      	b.n	c001f9a <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c001f54:	4b81      	ldr	r3, [pc, #516]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f56:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f5a:	4a80      	ldr	r2, [pc, #512]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f5c:	f023 0301 	bic.w	r3, r3, #1
 c001f60:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c001f64:	f7fe ff3e 	bl	c000de4 <HAL_GetTick>
 c001f68:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001f6a:	e00f      	b.n	c001f8c <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c001f6c:	f7fe ff3a 	bl	c000de4 <HAL_GetTick>
 c001f70:	4602      	mov	r2, r0
 c001f72:	693b      	ldr	r3, [r7, #16]
 c001f74:	1ad3      	subs	r3, r2, r3
 c001f76:	2b02      	cmp	r3, #2
 c001f78:	d908      	bls.n	c001f8c <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001f7a:	4b78      	ldr	r3, [pc, #480]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f7c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f80:	f003 0302 	and.w	r3, r3, #2
 c001f84:	2b00      	cmp	r3, #0
 c001f86:	d001      	beq.n	c001f8c <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c001f88:	2303      	movs	r3, #3
 c001f8a:	e0e3      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c001f8c:	4b73      	ldr	r3, [pc, #460]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001f8e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c001f92:	f003 0302 	and.w	r3, r3, #2
 c001f96:	2b00      	cmp	r3, #0
 c001f98:	d1e8      	bne.n	c001f6c <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c001f9a:	687b      	ldr	r3, [r7, #4]
 c001f9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001f9e:	2b00      	cmp	r3, #0
 c001fa0:	f000 80d7 	beq.w	c002152 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c001fa4:	4b6d      	ldr	r3, [pc, #436]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001fa6:	689b      	ldr	r3, [r3, #8]
 c001fa8:	f003 030c 	and.w	r3, r3, #12
 c001fac:	2b0c      	cmp	r3, #12
 c001fae:	f000 8091 	beq.w	c0020d4 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c001fb2:	687b      	ldr	r3, [r7, #4]
 c001fb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001fb6:	2b02      	cmp	r3, #2
 c001fb8:	d166      	bne.n	c002088 <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c001fba:	4b68      	ldr	r3, [pc, #416]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001fbc:	681b      	ldr	r3, [r3, #0]
 c001fbe:	4a67      	ldr	r2, [pc, #412]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001fc0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c001fc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c001fc6:	f7fe ff0d 	bl	c000de4 <HAL_GetTick>
 c001fca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001fcc:	e00e      	b.n	c001fec <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c001fce:	f7fe ff09 	bl	c000de4 <HAL_GetTick>
 c001fd2:	4602      	mov	r2, r0
 c001fd4:	693b      	ldr	r3, [r7, #16]
 c001fd6:	1ad3      	subs	r3, r2, r3
 c001fd8:	2b02      	cmp	r3, #2
 c001fda:	d907      	bls.n	c001fec <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001fdc:	4b5f      	ldr	r3, [pc, #380]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001fde:	681b      	ldr	r3, [r3, #0]
 c001fe0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001fe4:	2b00      	cmp	r3, #0
 c001fe6:	d001      	beq.n	c001fec <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c001fe8:	2303      	movs	r3, #3
 c001fea:	e0b3      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c001fec:	4b5b      	ldr	r3, [pc, #364]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001fee:	681b      	ldr	r3, [r3, #0]
 c001ff0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c001ff4:	2b00      	cmp	r3, #0
 c001ff6:	d1ea      	bne.n	c001fce <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c001ff8:	4b58      	ldr	r3, [pc, #352]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c001ffa:	68da      	ldr	r2, [r3, #12]
 c001ffc:	4b58      	ldr	r3, [pc, #352]	; (c002160 <HAL_RCC_OscConfig+0x9a4>)
 c001ffe:	4013      	ands	r3, r2
 c002000:	687a      	ldr	r2, [r7, #4]
 c002002:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c002004:	687a      	ldr	r2, [r7, #4]
 c002006:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c002008:	3a01      	subs	r2, #1
 c00200a:	0112      	lsls	r2, r2, #4
 c00200c:	4311      	orrs	r1, r2
 c00200e:	687a      	ldr	r2, [r7, #4]
 c002010:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002012:	0212      	lsls	r2, r2, #8
 c002014:	4311      	orrs	r1, r2
 c002016:	687a      	ldr	r2, [r7, #4]
 c002018:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c00201a:	0852      	lsrs	r2, r2, #1
 c00201c:	3a01      	subs	r2, #1
 c00201e:	0552      	lsls	r2, r2, #21
 c002020:	4311      	orrs	r1, r2
 c002022:	687a      	ldr	r2, [r7, #4]
 c002024:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c002026:	0852      	lsrs	r2, r2, #1
 c002028:	3a01      	subs	r2, #1
 c00202a:	0652      	lsls	r2, r2, #25
 c00202c:	4311      	orrs	r1, r2
 c00202e:	687a      	ldr	r2, [r7, #4]
 c002030:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002032:	06d2      	lsls	r2, r2, #27
 c002034:	430a      	orrs	r2, r1
 c002036:	4949      	ldr	r1, [pc, #292]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c002038:	4313      	orrs	r3, r2
 c00203a:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c00203c:	4b47      	ldr	r3, [pc, #284]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00203e:	681b      	ldr	r3, [r3, #0]
 c002040:	4a46      	ldr	r2, [pc, #280]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c002042:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002046:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c002048:	4b44      	ldr	r3, [pc, #272]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00204a:	68db      	ldr	r3, [r3, #12]
 c00204c:	4a43      	ldr	r2, [pc, #268]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00204e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002052:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002054:	f7fe fec6 	bl	c000de4 <HAL_GetTick>
 c002058:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00205a:	e00e      	b.n	c00207a <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00205c:	f7fe fec2 	bl	c000de4 <HAL_GetTick>
 c002060:	4602      	mov	r2, r0
 c002062:	693b      	ldr	r3, [r7, #16]
 c002064:	1ad3      	subs	r3, r2, r3
 c002066:	2b02      	cmp	r3, #2
 c002068:	d907      	bls.n	c00207a <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00206a:	4b3c      	ldr	r3, [pc, #240]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00206c:	681b      	ldr	r3, [r3, #0]
 c00206e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002072:	2b00      	cmp	r3, #0
 c002074:	d101      	bne.n	c00207a <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c002076:	2303      	movs	r3, #3
 c002078:	e06c      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c00207a:	4b38      	ldr	r3, [pc, #224]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00207c:	681b      	ldr	r3, [r3, #0]
 c00207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002082:	2b00      	cmp	r3, #0
 c002084:	d0ea      	beq.n	c00205c <HAL_RCC_OscConfig+0x8a0>
 c002086:	e064      	b.n	c002152 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c002088:	4b34      	ldr	r3, [pc, #208]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00208a:	681b      	ldr	r3, [r3, #0]
 c00208c:	4a33      	ldr	r2, [pc, #204]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c00208e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002092:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002094:	f7fe fea6 	bl	c000de4 <HAL_GetTick>
 c002098:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c00209a:	e00e      	b.n	c0020ba <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c00209c:	f7fe fea2 	bl	c000de4 <HAL_GetTick>
 c0020a0:	4602      	mov	r2, r0
 c0020a2:	693b      	ldr	r3, [r7, #16]
 c0020a4:	1ad3      	subs	r3, r2, r3
 c0020a6:	2b02      	cmp	r3, #2
 c0020a8:	d907      	bls.n	c0020ba <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0020aa:	4b2c      	ldr	r3, [pc, #176]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c0020ac:	681b      	ldr	r3, [r3, #0]
 c0020ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0020b2:	2b00      	cmp	r3, #0
 c0020b4:	d001      	beq.n	c0020ba <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c0020b6:	2303      	movs	r3, #3
 c0020b8:	e04c      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c0020ba:	4b28      	ldr	r3, [pc, #160]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c0020bc:	681b      	ldr	r3, [r3, #0]
 c0020be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0020c2:	2b00      	cmp	r3, #0
 c0020c4:	d1ea      	bne.n	c00209c <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c0020c6:	4b25      	ldr	r3, [pc, #148]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c0020c8:	68da      	ldr	r2, [r3, #12]
 c0020ca:	4924      	ldr	r1, [pc, #144]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c0020cc:	4b25      	ldr	r3, [pc, #148]	; (c002164 <HAL_RCC_OscConfig+0x9a8>)
 c0020ce:	4013      	ands	r3, r2
 c0020d0:	60cb      	str	r3, [r1, #12]
 c0020d2:	e03e      	b.n	c002152 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c0020d4:	687b      	ldr	r3, [r7, #4]
 c0020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c0020d8:	2b01      	cmp	r3, #1
 c0020da:	d101      	bne.n	c0020e0 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c0020dc:	2301      	movs	r3, #1
 c0020de:	e039      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c0020e0:	4b1e      	ldr	r3, [pc, #120]	; (c00215c <HAL_RCC_OscConfig+0x9a0>)
 c0020e2:	68db      	ldr	r3, [r3, #12]
 c0020e4:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c0020e6:	697b      	ldr	r3, [r7, #20]
 c0020e8:	f003 0203 	and.w	r2, r3, #3
 c0020ec:	687b      	ldr	r3, [r7, #4]
 c0020ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0020f0:	429a      	cmp	r2, r3
 c0020f2:	d12c      	bne.n	c00214e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c0020f4:	697b      	ldr	r3, [r7, #20]
 c0020f6:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c0020fa:	687b      	ldr	r3, [r7, #4]
 c0020fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0020fe:	3b01      	subs	r3, #1
 c002100:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002102:	429a      	cmp	r2, r3
 c002104:	d123      	bne.n	c00214e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002106:	697b      	ldr	r3, [r7, #20]
 c002108:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c00210c:	687b      	ldr	r3, [r7, #4]
 c00210e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002110:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002112:	429a      	cmp	r2, r3
 c002114:	d11b      	bne.n	c00214e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002116:	697b      	ldr	r3, [r7, #20]
 c002118:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c00211c:	687b      	ldr	r3, [r7, #4]
 c00211e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002120:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002122:	429a      	cmp	r2, r3
 c002124:	d113      	bne.n	c00214e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002126:	697b      	ldr	r3, [r7, #20]
 c002128:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c00212c:	687b      	ldr	r3, [r7, #4]
 c00212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c002130:	085b      	lsrs	r3, r3, #1
 c002132:	3b01      	subs	r3, #1
 c002134:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002136:	429a      	cmp	r2, r3
 c002138:	d109      	bne.n	c00214e <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c00213a:	697b      	ldr	r3, [r7, #20]
 c00213c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c002140:	687b      	ldr	r3, [r7, #4]
 c002142:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c002144:	085b      	lsrs	r3, r3, #1
 c002146:	3b01      	subs	r3, #1
 c002148:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00214a:	429a      	cmp	r2, r3
 c00214c:	d001      	beq.n	c002152 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c00214e:	2301      	movs	r3, #1
 c002150:	e000      	b.n	c002154 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c002152:	2300      	movs	r3, #0
}
 c002154:	4618      	mov	r0, r3
 c002156:	3720      	adds	r7, #32
 c002158:	46bd      	mov	sp, r7
 c00215a:	bd80      	pop	{r7, pc}
 c00215c:	50021000 	.word	0x50021000
 c002160:	019f800c 	.word	0x019f800c
 c002164:	feeefffc 	.word	0xfeeefffc

0c002168 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c002168:	b580      	push	{r7, lr}
 c00216a:	b086      	sub	sp, #24
 c00216c:	af00      	add	r7, sp, #0
 c00216e:	6078      	str	r0, [r7, #4]
 c002170:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c002172:	2300      	movs	r3, #0
 c002174:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c002176:	687b      	ldr	r3, [r7, #4]
 c002178:	2b00      	cmp	r3, #0
 c00217a:	d101      	bne.n	c002180 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c00217c:	2301      	movs	r3, #1
 c00217e:	e11c      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c002180:	4b90      	ldr	r3, [pc, #576]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002182:	681b      	ldr	r3, [r3, #0]
 c002184:	f003 030f 	and.w	r3, r3, #15
 c002188:	683a      	ldr	r2, [r7, #0]
 c00218a:	429a      	cmp	r2, r3
 c00218c:	d910      	bls.n	c0021b0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c00218e:	4b8d      	ldr	r3, [pc, #564]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002190:	681b      	ldr	r3, [r3, #0]
 c002192:	f023 020f 	bic.w	r2, r3, #15
 c002196:	498b      	ldr	r1, [pc, #556]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002198:	683b      	ldr	r3, [r7, #0]
 c00219a:	4313      	orrs	r3, r2
 c00219c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c00219e:	4b89      	ldr	r3, [pc, #548]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c0021a0:	681b      	ldr	r3, [r3, #0]
 c0021a2:	f003 030f 	and.w	r3, r3, #15
 c0021a6:	683a      	ldr	r2, [r7, #0]
 c0021a8:	429a      	cmp	r2, r3
 c0021aa:	d001      	beq.n	c0021b0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c0021ac:	2301      	movs	r3, #1
 c0021ae:	e104      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0021b0:	687b      	ldr	r3, [r7, #4]
 c0021b2:	681b      	ldr	r3, [r3, #0]
 c0021b4:	f003 0302 	and.w	r3, r3, #2
 c0021b8:	2b00      	cmp	r3, #0
 c0021ba:	d010      	beq.n	c0021de <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c0021bc:	687b      	ldr	r3, [r7, #4]
 c0021be:	689a      	ldr	r2, [r3, #8]
 c0021c0:	4b81      	ldr	r3, [pc, #516]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0021c2:	689b      	ldr	r3, [r3, #8]
 c0021c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0021c8:	429a      	cmp	r2, r3
 c0021ca:	d908      	bls.n	c0021de <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0021cc:	4b7e      	ldr	r3, [pc, #504]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0021ce:	689b      	ldr	r3, [r3, #8]
 c0021d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0021d4:	687b      	ldr	r3, [r7, #4]
 c0021d6:	689b      	ldr	r3, [r3, #8]
 c0021d8:	497b      	ldr	r1, [pc, #492]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0021da:	4313      	orrs	r3, r2
 c0021dc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0021de:	687b      	ldr	r3, [r7, #4]
 c0021e0:	681b      	ldr	r3, [r3, #0]
 c0021e2:	f003 0301 	and.w	r3, r3, #1
 c0021e6:	2b00      	cmp	r3, #0
 c0021e8:	f000 8085 	beq.w	c0022f6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0021ec:	687b      	ldr	r3, [r7, #4]
 c0021ee:	685b      	ldr	r3, [r3, #4]
 c0021f0:	2b03      	cmp	r3, #3
 c0021f2:	d11f      	bne.n	c002234 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0021f4:	4b74      	ldr	r3, [pc, #464]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0021f6:	681b      	ldr	r3, [r3, #0]
 c0021f8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0021fc:	2b00      	cmp	r3, #0
 c0021fe:	d101      	bne.n	c002204 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c002200:	2301      	movs	r3, #1
 c002202:	e0da      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c002204:	f000 f9fc 	bl	c002600 <RCC_GetSysClockFreqFromPLLSource>
 c002208:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c00220a:	693b      	ldr	r3, [r7, #16]
 c00220c:	4a6f      	ldr	r2, [pc, #444]	; (c0023cc <HAL_RCC_ClockConfig+0x264>)
 c00220e:	4293      	cmp	r3, r2
 c002210:	d947      	bls.n	c0022a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002212:	4b6d      	ldr	r3, [pc, #436]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002214:	689b      	ldr	r3, [r3, #8]
 c002216:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00221a:	2b00      	cmp	r3, #0
 c00221c:	d141      	bne.n	c0022a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00221e:	4b6a      	ldr	r3, [pc, #424]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002220:	689b      	ldr	r3, [r3, #8]
 c002222:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002226:	4a68      	ldr	r2, [pc, #416]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002228:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00222c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00222e:	2380      	movs	r3, #128	; 0x80
 c002230:	617b      	str	r3, [r7, #20]
 c002232:	e036      	b.n	c0022a2 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c002234:	687b      	ldr	r3, [r7, #4]
 c002236:	685b      	ldr	r3, [r3, #4]
 c002238:	2b02      	cmp	r3, #2
 c00223a:	d107      	bne.n	c00224c <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00223c:	4b62      	ldr	r3, [pc, #392]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c00223e:	681b      	ldr	r3, [r3, #0]
 c002240:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002244:	2b00      	cmp	r3, #0
 c002246:	d115      	bne.n	c002274 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002248:	2301      	movs	r3, #1
 c00224a:	e0b6      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c00224c:	687b      	ldr	r3, [r7, #4]
 c00224e:	685b      	ldr	r3, [r3, #4]
 c002250:	2b00      	cmp	r3, #0
 c002252:	d107      	bne.n	c002264 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002254:	4b5c      	ldr	r3, [pc, #368]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002256:	681b      	ldr	r3, [r3, #0]
 c002258:	f003 0302 	and.w	r3, r3, #2
 c00225c:	2b00      	cmp	r3, #0
 c00225e:	d109      	bne.n	c002274 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002260:	2301      	movs	r3, #1
 c002262:	e0aa      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002264:	4b58      	ldr	r3, [pc, #352]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002266:	681b      	ldr	r3, [r3, #0]
 c002268:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c00226c:	2b00      	cmp	r3, #0
 c00226e:	d101      	bne.n	c002274 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c002270:	2301      	movs	r3, #1
 c002272:	e0a2      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c002274:	f000 f8b0 	bl	c0023d8 <HAL_RCC_GetSysClockFreq>
 c002278:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c00227a:	693b      	ldr	r3, [r7, #16]
 c00227c:	4a53      	ldr	r2, [pc, #332]	; (c0023cc <HAL_RCC_ClockConfig+0x264>)
 c00227e:	4293      	cmp	r3, r2
 c002280:	d90f      	bls.n	c0022a2 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c002282:	4b51      	ldr	r3, [pc, #324]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002284:	689b      	ldr	r3, [r3, #8]
 c002286:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00228a:	2b00      	cmp	r3, #0
 c00228c:	d109      	bne.n	c0022a2 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c00228e:	4b4e      	ldr	r3, [pc, #312]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002290:	689b      	ldr	r3, [r3, #8]
 c002292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002296:	4a4c      	ldr	r2, [pc, #304]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002298:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c00229c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c00229e:	2380      	movs	r3, #128	; 0x80
 c0022a0:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c0022a2:	4b49      	ldr	r3, [pc, #292]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0022a4:	689b      	ldr	r3, [r3, #8]
 c0022a6:	f023 0203 	bic.w	r2, r3, #3
 c0022aa:	687b      	ldr	r3, [r7, #4]
 c0022ac:	685b      	ldr	r3, [r3, #4]
 c0022ae:	4946      	ldr	r1, [pc, #280]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0022b0:	4313      	orrs	r3, r2
 c0022b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c0022b4:	f7fe fd96 	bl	c000de4 <HAL_GetTick>
 c0022b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0022ba:	e013      	b.n	c0022e4 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c0022bc:	f7fe fd92 	bl	c000de4 <HAL_GetTick>
 c0022c0:	4602      	mov	r2, r0
 c0022c2:	68fb      	ldr	r3, [r7, #12]
 c0022c4:	1ad3      	subs	r3, r2, r3
 c0022c6:	f241 3288 	movw	r2, #5000	; 0x1388
 c0022ca:	4293      	cmp	r3, r2
 c0022cc:	d90a      	bls.n	c0022e4 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0022ce:	4b3e      	ldr	r3, [pc, #248]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0022d0:	689b      	ldr	r3, [r3, #8]
 c0022d2:	f003 020c 	and.w	r2, r3, #12
 c0022d6:	687b      	ldr	r3, [r7, #4]
 c0022d8:	685b      	ldr	r3, [r3, #4]
 c0022da:	009b      	lsls	r3, r3, #2
 c0022dc:	429a      	cmp	r2, r3
 c0022de:	d001      	beq.n	c0022e4 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c0022e0:	2303      	movs	r3, #3
 c0022e2:	e06a      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0022e4:	4b38      	ldr	r3, [pc, #224]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0022e6:	689b      	ldr	r3, [r3, #8]
 c0022e8:	f003 020c 	and.w	r2, r3, #12
 c0022ec:	687b      	ldr	r3, [r7, #4]
 c0022ee:	685b      	ldr	r3, [r3, #4]
 c0022f0:	009b      	lsls	r3, r3, #2
 c0022f2:	429a      	cmp	r2, r3
 c0022f4:	d1e2      	bne.n	c0022bc <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c0022f6:	697b      	ldr	r3, [r7, #20]
 c0022f8:	2b80      	cmp	r3, #128	; 0x80
 c0022fa:	d105      	bne.n	c002308 <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0022fc:	4b32      	ldr	r3, [pc, #200]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0022fe:	689b      	ldr	r3, [r3, #8]
 c002300:	4a31      	ldr	r2, [pc, #196]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002302:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c002306:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c002308:	687b      	ldr	r3, [r7, #4]
 c00230a:	681b      	ldr	r3, [r3, #0]
 c00230c:	f003 0302 	and.w	r3, r3, #2
 c002310:	2b00      	cmp	r3, #0
 c002312:	d010      	beq.n	c002336 <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c002314:	687b      	ldr	r3, [r7, #4]
 c002316:	689a      	ldr	r2, [r3, #8]
 c002318:	4b2b      	ldr	r3, [pc, #172]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c00231a:	689b      	ldr	r3, [r3, #8]
 c00231c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c002320:	429a      	cmp	r2, r3
 c002322:	d208      	bcs.n	c002336 <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c002324:	4b28      	ldr	r3, [pc, #160]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002326:	689b      	ldr	r3, [r3, #8]
 c002328:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00232c:	687b      	ldr	r3, [r7, #4]
 c00232e:	689b      	ldr	r3, [r3, #8]
 c002330:	4925      	ldr	r1, [pc, #148]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002332:	4313      	orrs	r3, r2
 c002334:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c002336:	4b23      	ldr	r3, [pc, #140]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002338:	681b      	ldr	r3, [r3, #0]
 c00233a:	f003 030f 	and.w	r3, r3, #15
 c00233e:	683a      	ldr	r2, [r7, #0]
 c002340:	429a      	cmp	r2, r3
 c002342:	d210      	bcs.n	c002366 <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c002344:	4b1f      	ldr	r3, [pc, #124]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002346:	681b      	ldr	r3, [r3, #0]
 c002348:	f023 020f 	bic.w	r2, r3, #15
 c00234c:	491d      	ldr	r1, [pc, #116]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c00234e:	683b      	ldr	r3, [r7, #0]
 c002350:	4313      	orrs	r3, r2
 c002352:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c002354:	4b1b      	ldr	r3, [pc, #108]	; (c0023c4 <HAL_RCC_ClockConfig+0x25c>)
 c002356:	681b      	ldr	r3, [r3, #0]
 c002358:	f003 030f 	and.w	r3, r3, #15
 c00235c:	683a      	ldr	r2, [r7, #0]
 c00235e:	429a      	cmp	r2, r3
 c002360:	d001      	beq.n	c002366 <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c002362:	2301      	movs	r3, #1
 c002364:	e029      	b.n	c0023ba <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c002366:	687b      	ldr	r3, [r7, #4]
 c002368:	681b      	ldr	r3, [r3, #0]
 c00236a:	f003 0304 	and.w	r3, r3, #4
 c00236e:	2b00      	cmp	r3, #0
 c002370:	d008      	beq.n	c002384 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c002372:	4b15      	ldr	r3, [pc, #84]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002374:	689b      	ldr	r3, [r3, #8]
 c002376:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00237a:	687b      	ldr	r3, [r7, #4]
 c00237c:	68db      	ldr	r3, [r3, #12]
 c00237e:	4912      	ldr	r1, [pc, #72]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002380:	4313      	orrs	r3, r2
 c002382:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c002384:	687b      	ldr	r3, [r7, #4]
 c002386:	681b      	ldr	r3, [r3, #0]
 c002388:	f003 0308 	and.w	r3, r3, #8
 c00238c:	2b00      	cmp	r3, #0
 c00238e:	d009      	beq.n	c0023a4 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c002390:	4b0d      	ldr	r3, [pc, #52]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c002392:	689b      	ldr	r3, [r3, #8]
 c002394:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c002398:	687b      	ldr	r3, [r7, #4]
 c00239a:	691b      	ldr	r3, [r3, #16]
 c00239c:	00db      	lsls	r3, r3, #3
 c00239e:	490a      	ldr	r1, [pc, #40]	; (c0023c8 <HAL_RCC_ClockConfig+0x260>)
 c0023a0:	4313      	orrs	r3, r2
 c0023a2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0023a4:	f000 f8b4 	bl	c002510 <HAL_RCC_GetHCLKFreq>
 c0023a8:	4603      	mov	r3, r0
 c0023aa:	4a09      	ldr	r2, [pc, #36]	; (c0023d0 <HAL_RCC_ClockConfig+0x268>)
 c0023ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c0023ae:	4b09      	ldr	r3, [pc, #36]	; (c0023d4 <HAL_RCC_ClockConfig+0x26c>)
 c0023b0:	681b      	ldr	r3, [r3, #0]
 c0023b2:	4618      	mov	r0, r3
 c0023b4:	f7fe fcc6 	bl	c000d44 <HAL_InitTick>
 c0023b8:	4603      	mov	r3, r0
}
 c0023ba:	4618      	mov	r0, r3
 c0023bc:	3718      	adds	r7, #24
 c0023be:	46bd      	mov	sp, r7
 c0023c0:	bd80      	pop	{r7, pc}
 c0023c2:	bf00      	nop
 c0023c4:	50022000 	.word	0x50022000
 c0023c8:	50021000 	.word	0x50021000
 c0023cc:	04c4b400 	.word	0x04c4b400
 c0023d0:	30000000 	.word	0x30000000
 c0023d4:	30000004 	.word	0x30000004

0c0023d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0023d8:	b480      	push	{r7}
 c0023da:	b089      	sub	sp, #36	; 0x24
 c0023dc:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0023de:	2300      	movs	r3, #0
 c0023e0:	61fb      	str	r3, [r7, #28]
 c0023e2:	2300      	movs	r3, #0
 c0023e4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0023e6:	4b47      	ldr	r3, [pc, #284]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0023e8:	689b      	ldr	r3, [r3, #8]
 c0023ea:	f003 030c 	and.w	r3, r3, #12
 c0023ee:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0023f0:	4b44      	ldr	r3, [pc, #272]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0023f2:	68db      	ldr	r3, [r3, #12]
 c0023f4:	f003 0303 	and.w	r3, r3, #3
 c0023f8:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0023fa:	693b      	ldr	r3, [r7, #16]
 c0023fc:	2b00      	cmp	r3, #0
 c0023fe:	d005      	beq.n	c00240c <HAL_RCC_GetSysClockFreq+0x34>
 c002400:	693b      	ldr	r3, [r7, #16]
 c002402:	2b0c      	cmp	r3, #12
 c002404:	d121      	bne.n	c00244a <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c002406:	68fb      	ldr	r3, [r7, #12]
 c002408:	2b01      	cmp	r3, #1
 c00240a:	d11e      	bne.n	c00244a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00240c:	4b3d      	ldr	r3, [pc, #244]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00240e:	681b      	ldr	r3, [r3, #0]
 c002410:	f003 0308 	and.w	r3, r3, #8
 c002414:	2b00      	cmp	r3, #0
 c002416:	d107      	bne.n	c002428 <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002418:	4b3a      	ldr	r3, [pc, #232]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00241a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00241e:	0a1b      	lsrs	r3, r3, #8
 c002420:	f003 030f 	and.w	r3, r3, #15
 c002424:	61fb      	str	r3, [r7, #28]
 c002426:	e005      	b.n	c002434 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002428:	4b36      	ldr	r3, [pc, #216]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00242a:	681b      	ldr	r3, [r3, #0]
 c00242c:	091b      	lsrs	r3, r3, #4
 c00242e:	f003 030f 	and.w	r3, r3, #15
 c002432:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c002434:	4a34      	ldr	r2, [pc, #208]	; (c002508 <HAL_RCC_GetSysClockFreq+0x130>)
 c002436:	69fb      	ldr	r3, [r7, #28]
 c002438:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00243c:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00243e:	693b      	ldr	r3, [r7, #16]
 c002440:	2b00      	cmp	r3, #0
 c002442:	d10d      	bne.n	c002460 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c002444:	69fb      	ldr	r3, [r7, #28]
 c002446:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c002448:	e00a      	b.n	c002460 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00244a:	693b      	ldr	r3, [r7, #16]
 c00244c:	2b04      	cmp	r3, #4
 c00244e:	d102      	bne.n	c002456 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c002450:	4b2e      	ldr	r3, [pc, #184]	; (c00250c <HAL_RCC_GetSysClockFreq+0x134>)
 c002452:	61bb      	str	r3, [r7, #24]
 c002454:	e004      	b.n	c002460 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c002456:	693b      	ldr	r3, [r7, #16]
 c002458:	2b08      	cmp	r3, #8
 c00245a:	d101      	bne.n	c002460 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c00245c:	4b2b      	ldr	r3, [pc, #172]	; (c00250c <HAL_RCC_GetSysClockFreq+0x134>)
 c00245e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002460:	693b      	ldr	r3, [r7, #16]
 c002462:	2b0c      	cmp	r3, #12
 c002464:	d146      	bne.n	c0024f4 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c002466:	4b27      	ldr	r3, [pc, #156]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002468:	68db      	ldr	r3, [r3, #12]
 c00246a:	f003 0303 	and.w	r3, r3, #3
 c00246e:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002470:	4b24      	ldr	r3, [pc, #144]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002472:	68db      	ldr	r3, [r3, #12]
 c002474:	091b      	lsrs	r3, r3, #4
 c002476:	f003 030f 	and.w	r3, r3, #15
 c00247a:	3301      	adds	r3, #1
 c00247c:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c00247e:	68bb      	ldr	r3, [r7, #8]
 c002480:	2b02      	cmp	r3, #2
 c002482:	d003      	beq.n	c00248c <HAL_RCC_GetSysClockFreq+0xb4>
 c002484:	68bb      	ldr	r3, [r7, #8]
 c002486:	2b03      	cmp	r3, #3
 c002488:	d00d      	beq.n	c0024a6 <HAL_RCC_GetSysClockFreq+0xce>
 c00248a:	e019      	b.n	c0024c0 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00248c:	4a1f      	ldr	r2, [pc, #124]	; (c00250c <HAL_RCC_GetSysClockFreq+0x134>)
 c00248e:	687b      	ldr	r3, [r7, #4]
 c002490:	fbb2 f3f3 	udiv	r3, r2, r3
 c002494:	4a1b      	ldr	r2, [pc, #108]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c002496:	68d2      	ldr	r2, [r2, #12]
 c002498:	0a12      	lsrs	r2, r2, #8
 c00249a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00249e:	fb02 f303 	mul.w	r3, r2, r3
 c0024a2:	617b      	str	r3, [r7, #20]
        break;
 c0024a4:	e019      	b.n	c0024da <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0024a6:	4a19      	ldr	r2, [pc, #100]	; (c00250c <HAL_RCC_GetSysClockFreq+0x134>)
 c0024a8:	687b      	ldr	r3, [r7, #4]
 c0024aa:	fbb2 f3f3 	udiv	r3, r2, r3
 c0024ae:	4a15      	ldr	r2, [pc, #84]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024b0:	68d2      	ldr	r2, [r2, #12]
 c0024b2:	0a12      	lsrs	r2, r2, #8
 c0024b4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0024b8:	fb02 f303 	mul.w	r3, r2, r3
 c0024bc:	617b      	str	r3, [r7, #20]
        break;
 c0024be:	e00c      	b.n	c0024da <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c0024c0:	69fa      	ldr	r2, [r7, #28]
 c0024c2:	687b      	ldr	r3, [r7, #4]
 c0024c4:	fbb2 f3f3 	udiv	r3, r2, r3
 c0024c8:	4a0e      	ldr	r2, [pc, #56]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024ca:	68d2      	ldr	r2, [r2, #12]
 c0024cc:	0a12      	lsrs	r2, r2, #8
 c0024ce:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0024d2:	fb02 f303 	mul.w	r3, r2, r3
 c0024d6:	617b      	str	r3, [r7, #20]
        break;
 c0024d8:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0024da:	4b0a      	ldr	r3, [pc, #40]	; (c002504 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0024dc:	68db      	ldr	r3, [r3, #12]
 c0024de:	0e5b      	lsrs	r3, r3, #25
 c0024e0:	f003 0303 	and.w	r3, r3, #3
 c0024e4:	3301      	adds	r3, #1
 c0024e6:	005b      	lsls	r3, r3, #1
 c0024e8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0024ea:	697a      	ldr	r2, [r7, #20]
 c0024ec:	683b      	ldr	r3, [r7, #0]
 c0024ee:	fbb2 f3f3 	udiv	r3, r2, r3
 c0024f2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c0024f4:	69bb      	ldr	r3, [r7, #24]
}
 c0024f6:	4618      	mov	r0, r3
 c0024f8:	3724      	adds	r7, #36	; 0x24
 c0024fa:	46bd      	mov	sp, r7
 c0024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002500:	4770      	bx	lr
 c002502:	bf00      	nop
 c002504:	50021000 	.word	0x50021000
 c002508:	0c002758 	.word	0x0c002758
 c00250c:	00f42400 	.word	0x00f42400

0c002510 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c002510:	b580      	push	{r7, lr}
 c002512:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c002514:	f7ff ff60 	bl	c0023d8 <HAL_RCC_GetSysClockFreq>
 c002518:	4602      	mov	r2, r0
 c00251a:	4b05      	ldr	r3, [pc, #20]	; (c002530 <HAL_RCC_GetHCLKFreq+0x20>)
 c00251c:	689b      	ldr	r3, [r3, #8]
 c00251e:	091b      	lsrs	r3, r3, #4
 c002520:	f003 030f 	and.w	r3, r3, #15
 c002524:	4903      	ldr	r1, [pc, #12]	; (c002534 <HAL_RCC_GetHCLKFreq+0x24>)
 c002526:	5ccb      	ldrb	r3, [r1, r3]
 c002528:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00252c:	4618      	mov	r0, r3
 c00252e:	bd80      	pop	{r7, pc}
 c002530:	50021000 	.word	0x50021000
 c002534:	0c002748 	.word	0x0c002748

0c002538 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c002538:	b580      	push	{r7, lr}
 c00253a:	b086      	sub	sp, #24
 c00253c:	af00      	add	r7, sp, #0
 c00253e:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c002540:	2300      	movs	r3, #0
 c002542:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c002544:	4b2c      	ldr	r3, [pc, #176]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002546:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002548:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00254c:	2b00      	cmp	r3, #0
 c00254e:	d003      	beq.n	c002558 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c002550:	f7ff f886 	bl	c001660 <HAL_PWREx_GetVoltageRange>
 c002554:	6138      	str	r0, [r7, #16]
 c002556:	e014      	b.n	c002582 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c002558:	4b27      	ldr	r3, [pc, #156]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00255a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00255c:	4a26      	ldr	r2, [pc, #152]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00255e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002562:	6593      	str	r3, [r2, #88]	; 0x58
 c002564:	4b24      	ldr	r3, [pc, #144]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002566:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002568:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c00256c:	60fb      	str	r3, [r7, #12]
 c00256e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c002570:	f7ff f876 	bl	c001660 <HAL_PWREx_GetVoltageRange>
 c002574:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c002576:	4b20      	ldr	r3, [pc, #128]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c002578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00257a:	4a1f      	ldr	r2, [pc, #124]	; (c0025f8 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00257c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002580:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c002582:	693b      	ldr	r3, [r7, #16]
 c002584:	2b00      	cmp	r3, #0
 c002586:	d003      	beq.n	c002590 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c002588:	693b      	ldr	r3, [r7, #16]
 c00258a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c00258e:	d10b      	bne.n	c0025a8 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c002590:	687b      	ldr	r3, [r7, #4]
 c002592:	2b80      	cmp	r3, #128	; 0x80
 c002594:	d919      	bls.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c002596:	687b      	ldr	r3, [r7, #4]
 c002598:	2ba0      	cmp	r3, #160	; 0xa0
 c00259a:	d902      	bls.n	c0025a2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c00259c:	2302      	movs	r3, #2
 c00259e:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0025a0:	e013      	b.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0025a2:	2301      	movs	r3, #1
 c0025a4:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0025a6:	e010      	b.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c0025a8:	687b      	ldr	r3, [r7, #4]
 c0025aa:	2b80      	cmp	r3, #128	; 0x80
 c0025ac:	d902      	bls.n	c0025b4 <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c0025ae:	2303      	movs	r3, #3
 c0025b0:	617b      	str	r3, [r7, #20]
 c0025b2:	e00a      	b.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c0025b4:	687b      	ldr	r3, [r7, #4]
 c0025b6:	2b80      	cmp	r3, #128	; 0x80
 c0025b8:	d102      	bne.n	c0025c0 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0025ba:	2302      	movs	r3, #2
 c0025bc:	617b      	str	r3, [r7, #20]
 c0025be:	e004      	b.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0025c0:	687b      	ldr	r3, [r7, #4]
 c0025c2:	2b70      	cmp	r3, #112	; 0x70
 c0025c4:	d101      	bne.n	c0025ca <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0025c6:	2301      	movs	r3, #1
 c0025c8:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0025ca:	4b0c      	ldr	r3, [pc, #48]	; (c0025fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025cc:	681b      	ldr	r3, [r3, #0]
 c0025ce:	f023 020f 	bic.w	r2, r3, #15
 c0025d2:	490a      	ldr	r1, [pc, #40]	; (c0025fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025d4:	697b      	ldr	r3, [r7, #20]
 c0025d6:	4313      	orrs	r3, r2
 c0025d8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c0025da:	4b08      	ldr	r3, [pc, #32]	; (c0025fc <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0025dc:	681b      	ldr	r3, [r3, #0]
 c0025de:	f003 030f 	and.w	r3, r3, #15
 c0025e2:	697a      	ldr	r2, [r7, #20]
 c0025e4:	429a      	cmp	r2, r3
 c0025e6:	d001      	beq.n	c0025ec <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c0025e8:	2301      	movs	r3, #1
 c0025ea:	e000      	b.n	c0025ee <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c0025ec:	2300      	movs	r3, #0
}
 c0025ee:	4618      	mov	r0, r3
 c0025f0:	3718      	adds	r7, #24
 c0025f2:	46bd      	mov	sp, r7
 c0025f4:	bd80      	pop	{r7, pc}
 c0025f6:	bf00      	nop
 c0025f8:	50021000 	.word	0x50021000
 c0025fc:	50022000 	.word	0x50022000

0c002600 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c002600:	b480      	push	{r7}
 c002602:	b087      	sub	sp, #28
 c002604:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c002606:	4b31      	ldr	r3, [pc, #196]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002608:	68db      	ldr	r3, [r3, #12]
 c00260a:	f003 0303 	and.w	r3, r3, #3
 c00260e:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c002610:	4b2e      	ldr	r3, [pc, #184]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002612:	68db      	ldr	r3, [r3, #12]
 c002614:	091b      	lsrs	r3, r3, #4
 c002616:	f003 030f 	and.w	r3, r3, #15
 c00261a:	3301      	adds	r3, #1
 c00261c:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c00261e:	68fb      	ldr	r3, [r7, #12]
 c002620:	2b03      	cmp	r3, #3
 c002622:	d015      	beq.n	c002650 <RCC_GetSysClockFreqFromPLLSource+0x50>
 c002624:	68fb      	ldr	r3, [r7, #12]
 c002626:	2b03      	cmp	r3, #3
 c002628:	d839      	bhi.n	c00269e <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c00262a:	68fb      	ldr	r3, [r7, #12]
 c00262c:	2b01      	cmp	r3, #1
 c00262e:	d01c      	beq.n	c00266a <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c002630:	68fb      	ldr	r3, [r7, #12]
 c002632:	2b02      	cmp	r3, #2
 c002634:	d133      	bne.n	c00269e <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002636:	4a26      	ldr	r2, [pc, #152]	; (c0026d0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c002638:	68bb      	ldr	r3, [r7, #8]
 c00263a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00263e:	4a23      	ldr	r2, [pc, #140]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002640:	68d2      	ldr	r2, [r2, #12]
 c002642:	0a12      	lsrs	r2, r2, #8
 c002644:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002648:	fb02 f303 	mul.w	r3, r2, r3
 c00264c:	613b      	str	r3, [r7, #16]
      break;
 c00264e:	e029      	b.n	c0026a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c002650:	4a1f      	ldr	r2, [pc, #124]	; (c0026d0 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c002652:	68bb      	ldr	r3, [r7, #8]
 c002654:	fbb2 f3f3 	udiv	r3, r2, r3
 c002658:	4a1c      	ldr	r2, [pc, #112]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00265a:	68d2      	ldr	r2, [r2, #12]
 c00265c:	0a12      	lsrs	r2, r2, #8
 c00265e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c002662:	fb02 f303 	mul.w	r3, r2, r3
 c002666:	613b      	str	r3, [r7, #16]
      break;
 c002668:	e01c      	b.n	c0026a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c00266a:	4b18      	ldr	r3, [pc, #96]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00266c:	681b      	ldr	r3, [r3, #0]
 c00266e:	f003 0308 	and.w	r3, r3, #8
 c002672:	2b00      	cmp	r3, #0
 c002674:	d107      	bne.n	c002686 <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c002676:	4b15      	ldr	r3, [pc, #84]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002678:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c00267c:	0a1b      	lsrs	r3, r3, #8
 c00267e:	f003 030f 	and.w	r3, r3, #15
 c002682:	617b      	str	r3, [r7, #20]
 c002684:	e005      	b.n	c002692 <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c002686:	4b11      	ldr	r3, [pc, #68]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c002688:	681b      	ldr	r3, [r3, #0]
 c00268a:	091b      	lsrs	r3, r3, #4
 c00268c:	f003 030f 	and.w	r3, r3, #15
 c002690:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c002692:	4a10      	ldr	r2, [pc, #64]	; (c0026d4 <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c002694:	697b      	ldr	r3, [r7, #20]
 c002696:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c00269a:	613b      	str	r3, [r7, #16]
        break;
 c00269c:	e002      	b.n	c0026a4 <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c00269e:	2300      	movs	r3, #0
 c0026a0:	613b      	str	r3, [r7, #16]
      break;
 c0026a2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0026a4:	4b09      	ldr	r3, [pc, #36]	; (c0026cc <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0026a6:	68db      	ldr	r3, [r3, #12]
 c0026a8:	0e5b      	lsrs	r3, r3, #25
 c0026aa:	f003 0303 	and.w	r3, r3, #3
 c0026ae:	3301      	adds	r3, #1
 c0026b0:	005b      	lsls	r3, r3, #1
 c0026b2:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c0026b4:	693a      	ldr	r2, [r7, #16]
 c0026b6:	687b      	ldr	r3, [r7, #4]
 c0026b8:	fbb2 f3f3 	udiv	r3, r2, r3
 c0026bc:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c0026be:	683b      	ldr	r3, [r7, #0]
}
 c0026c0:	4618      	mov	r0, r3
 c0026c2:	371c      	adds	r7, #28
 c0026c4:	46bd      	mov	sp, r7
 c0026c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0026ca:	4770      	bx	lr
 c0026cc:	50021000 	.word	0x50021000
 c0026d0:	00f42400 	.word	0x00f42400
 c0026d4:	0c002758 	.word	0x0c002758

0c0026d8 <__libc_init_array>:
 c0026d8:	b570      	push	{r4, r5, r6, lr}
 c0026da:	4d0d      	ldr	r5, [pc, #52]	; (c002710 <__libc_init_array+0x38>)
 c0026dc:	2600      	movs	r6, #0
 c0026de:	4c0d      	ldr	r4, [pc, #52]	; (c002714 <__libc_init_array+0x3c>)
 c0026e0:	1b64      	subs	r4, r4, r5
 c0026e2:	10a4      	asrs	r4, r4, #2
 c0026e4:	42a6      	cmp	r6, r4
 c0026e6:	d109      	bne.n	c0026fc <__libc_init_array+0x24>
 c0026e8:	4d0b      	ldr	r5, [pc, #44]	; (c002718 <__libc_init_array+0x40>)
 c0026ea:	2600      	movs	r6, #0
 c0026ec:	4c0b      	ldr	r4, [pc, #44]	; (c00271c <__libc_init_array+0x44>)
 c0026ee:	f000 f81f 	bl	c002730 <_init>
 c0026f2:	1b64      	subs	r4, r4, r5
 c0026f4:	10a4      	asrs	r4, r4, #2
 c0026f6:	42a6      	cmp	r6, r4
 c0026f8:	d105      	bne.n	c002706 <__libc_init_array+0x2e>
 c0026fa:	bd70      	pop	{r4, r5, r6, pc}
 c0026fc:	f855 3b04 	ldr.w	r3, [r5], #4
 c002700:	3601      	adds	r6, #1
 c002702:	4798      	blx	r3
 c002704:	e7ee      	b.n	c0026e4 <__libc_init_array+0xc>
 c002706:	f855 3b04 	ldr.w	r3, [r5], #4
 c00270a:	3601      	adds	r6, #1
 c00270c:	4798      	blx	r3
 c00270e:	e7f2      	b.n	c0026f6 <__libc_init_array+0x1e>
 c002710:	0c002798 	.word	0x0c002798
 c002714:	0c002798 	.word	0x0c002798
 c002718:	0c002798 	.word	0x0c002798
 c00271c:	0c00279c 	.word	0x0c00279c

0c002720 <memset>:
 c002720:	4402      	add	r2, r0
 c002722:	4603      	mov	r3, r0
 c002724:	4293      	cmp	r3, r2
 c002726:	d100      	bne.n	c00272a <memset+0xa>
 c002728:	4770      	bx	lr
 c00272a:	f803 1b01 	strb.w	r1, [r3], #1
 c00272e:	e7f9      	b.n	c002724 <memset+0x4>

0c002730 <_init>:
 c002730:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c002732:	bf00      	nop
 c002734:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002736:	bc08      	pop	{r3}
 c002738:	469e      	mov	lr, r3
 c00273a:	4770      	bx	lr

0c00273c <_fini>:
 c00273c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00273e:	bf00      	nop
 c002740:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c002742:	bc08      	pop	{r3}
 c002744:	469e      	mov	lr, r3
 c002746:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c2 be44 	b.w	c000c90 <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_RegisterCallback>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bbc8 	b.w	c0007a0 <__acle_se_SECURE_RegisterCallback>
	...
