
SPI_Communication_Example_Secure.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f4  0c000000  0c000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000065b8  0c0001f4  0c0001f4  000101f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001fc  0c0067ac  0c0067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0c0069a8  0c0069a8  0002e020  2**0
                  CONTENTS
  4 .ARM          00000008  0c0069a8  0c0069a8  000169a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0c0069b0  0c0069b0  0002e020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0c0069b0  0c0069b0  000169b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0c0069b4  0c0069b4  000169b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  30000000  0c0069b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .gnu.sgstubs  00000020  0c03e000  0c03e000  0002e000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 10 .bss          00000248  30000070  30000070  00030070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  300002b8  300002b8  00030070  2**0
                  ALLOC
 12 .ARM.attributes 00000036  00000000  00000000  0002e020  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001321a  00000000  00000000  0002e056  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000299f  00000000  00000000  00041270  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb8  00000000  00000000  00043c10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00044bc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002b46c  00000000  00000000  00045a78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013e8b  00000000  00000000  00070ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010c506  00000000  00000000  00084d6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00191275  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a8  00000000  00000000  001912c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0c0001f4 <__do_global_dtors_aux>:
 c0001f4:	b510      	push	{r4, lr}
 c0001f6:	4c05      	ldr	r4, [pc, #20]	; (c00020c <__do_global_dtors_aux+0x18>)
 c0001f8:	7823      	ldrb	r3, [r4, #0]
 c0001fa:	b933      	cbnz	r3, c00020a <__do_global_dtors_aux+0x16>
 c0001fc:	4b04      	ldr	r3, [pc, #16]	; (c000210 <__do_global_dtors_aux+0x1c>)
 c0001fe:	b113      	cbz	r3, c000206 <__do_global_dtors_aux+0x12>
 c000200:	4804      	ldr	r0, [pc, #16]	; (c000214 <__do_global_dtors_aux+0x20>)
 c000202:	e000      	b.n	c000206 <__do_global_dtors_aux+0x12>
 c000204:	bf00      	nop
 c000206:	2301      	movs	r3, #1
 c000208:	7023      	strb	r3, [r4, #0]
 c00020a:	bd10      	pop	{r4, pc}
 c00020c:	30000070 	.word	0x30000070
 c000210:	00000000 	.word	0x00000000
 c000214:	0c006794 	.word	0x0c006794

0c000218 <frame_dummy>:
 c000218:	b508      	push	{r3, lr}
 c00021a:	4b03      	ldr	r3, [pc, #12]	; (c000228 <frame_dummy+0x10>)
 c00021c:	b11b      	cbz	r3, c000226 <frame_dummy+0xe>
 c00021e:	4903      	ldr	r1, [pc, #12]	; (c00022c <frame_dummy+0x14>)
 c000220:	4803      	ldr	r0, [pc, #12]	; (c000230 <frame_dummy+0x18>)
 c000222:	e000      	b.n	c000226 <frame_dummy+0xe>
 c000224:	bf00      	nop
 c000226:	bd08      	pop	{r3, pc}
 c000228:	00000000 	.word	0x00000000
 c00022c:	30000074 	.word	0x30000074
 c000230:	0c006794 	.word	0x0c006794

0c000234 <__aeabi_uldivmod>:
 c000234:	b953      	cbnz	r3, c00024c <__aeabi_uldivmod+0x18>
 c000236:	b94a      	cbnz	r2, c00024c <__aeabi_uldivmod+0x18>
 c000238:	2900      	cmp	r1, #0
 c00023a:	bf08      	it	eq
 c00023c:	2800      	cmpeq	r0, #0
 c00023e:	bf1c      	itt	ne
 c000240:	f04f 31ff 	movne.w	r1, #4294967295
 c000244:	f04f 30ff 	movne.w	r0, #4294967295
 c000248:	f000 b982 	b.w	c000550 <__aeabi_idiv0>
 c00024c:	f1ad 0c08 	sub.w	ip, sp, #8
 c000250:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 c000254:	f000 f806 	bl	c000264 <__udivmoddi4>
 c000258:	f8dd e004 	ldr.w	lr, [sp, #4]
 c00025c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 c000260:	b004      	add	sp, #16
 c000262:	4770      	bx	lr

0c000264 <__udivmoddi4>:
 c000264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c000268:	9d09      	ldr	r5, [sp, #36]	; 0x24
 c00026a:	4604      	mov	r4, r0
 c00026c:	460f      	mov	r7, r1
 c00026e:	2b00      	cmp	r3, #0
 c000270:	d148      	bne.n	c000304 <__udivmoddi4+0xa0>
 c000272:	428a      	cmp	r2, r1
 c000274:	4694      	mov	ip, r2
 c000276:	d961      	bls.n	c00033c <__udivmoddi4+0xd8>
 c000278:	fab2 f382 	clz	r3, r2
 c00027c:	b143      	cbz	r3, c000290 <__udivmoddi4+0x2c>
 c00027e:	f1c3 0120 	rsb	r1, r3, #32
 c000282:	409f      	lsls	r7, r3
 c000284:	fa02 fc03 	lsl.w	ip, r2, r3
 c000288:	409c      	lsls	r4, r3
 c00028a:	fa20 f101 	lsr.w	r1, r0, r1
 c00028e:	430f      	orrs	r7, r1
 c000290:	ea4f 411c 	mov.w	r1, ip, lsr #16
 c000294:	fa1f fe8c 	uxth.w	lr, ip
 c000298:	0c22      	lsrs	r2, r4, #16
 c00029a:	fbb7 f6f1 	udiv	r6, r7, r1
 c00029e:	fb01 7716 	mls	r7, r1, r6, r7
 c0002a2:	fb06 f00e 	mul.w	r0, r6, lr
 c0002a6:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 c0002aa:	4290      	cmp	r0, r2
 c0002ac:	d908      	bls.n	c0002c0 <__udivmoddi4+0x5c>
 c0002ae:	eb1c 0202 	adds.w	r2, ip, r2
 c0002b2:	f106 37ff 	add.w	r7, r6, #4294967295
 c0002b6:	d202      	bcs.n	c0002be <__udivmoddi4+0x5a>
 c0002b8:	4290      	cmp	r0, r2
 c0002ba:	f200 8137 	bhi.w	c00052c <__udivmoddi4+0x2c8>
 c0002be:	463e      	mov	r6, r7
 c0002c0:	1a12      	subs	r2, r2, r0
 c0002c2:	b2a4      	uxth	r4, r4
 c0002c4:	fbb2 f0f1 	udiv	r0, r2, r1
 c0002c8:	fb01 2210 	mls	r2, r1, r0, r2
 c0002cc:	fb00 fe0e 	mul.w	lr, r0, lr
 c0002d0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 c0002d4:	45a6      	cmp	lr, r4
 c0002d6:	d908      	bls.n	c0002ea <__udivmoddi4+0x86>
 c0002d8:	eb1c 0404 	adds.w	r4, ip, r4
 c0002dc:	f100 32ff 	add.w	r2, r0, #4294967295
 c0002e0:	d202      	bcs.n	c0002e8 <__udivmoddi4+0x84>
 c0002e2:	45a6      	cmp	lr, r4
 c0002e4:	f200 811c 	bhi.w	c000520 <__udivmoddi4+0x2bc>
 c0002e8:	4610      	mov	r0, r2
 c0002ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 c0002ee:	eba4 040e 	sub.w	r4, r4, lr
 c0002f2:	2600      	movs	r6, #0
 c0002f4:	b11d      	cbz	r5, c0002fe <__udivmoddi4+0x9a>
 c0002f6:	40dc      	lsrs	r4, r3
 c0002f8:	2300      	movs	r3, #0
 c0002fa:	e9c5 4300 	strd	r4, r3, [r5]
 c0002fe:	4631      	mov	r1, r6
 c000300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c000304:	428b      	cmp	r3, r1
 c000306:	d909      	bls.n	c00031c <__udivmoddi4+0xb8>
 c000308:	2d00      	cmp	r5, #0
 c00030a:	f000 80fd 	beq.w	c000508 <__udivmoddi4+0x2a4>
 c00030e:	2600      	movs	r6, #0
 c000310:	e9c5 0100 	strd	r0, r1, [r5]
 c000314:	4630      	mov	r0, r6
 c000316:	4631      	mov	r1, r6
 c000318:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c00031c:	fab3 f683 	clz	r6, r3
 c000320:	2e00      	cmp	r6, #0
 c000322:	d14b      	bne.n	c0003bc <__udivmoddi4+0x158>
 c000324:	428b      	cmp	r3, r1
 c000326:	f0c0 80f2 	bcc.w	c00050e <__udivmoddi4+0x2aa>
 c00032a:	4282      	cmp	r2, r0
 c00032c:	f240 80ef 	bls.w	c00050e <__udivmoddi4+0x2aa>
 c000330:	4630      	mov	r0, r6
 c000332:	2d00      	cmp	r5, #0
 c000334:	d0e3      	beq.n	c0002fe <__udivmoddi4+0x9a>
 c000336:	e9c5 4700 	strd	r4, r7, [r5]
 c00033a:	e7e0      	b.n	c0002fe <__udivmoddi4+0x9a>
 c00033c:	b902      	cbnz	r2, c000340 <__udivmoddi4+0xdc>
 c00033e:	deff      	udf	#255	; 0xff
 c000340:	fab2 f382 	clz	r3, r2
 c000344:	2b00      	cmp	r3, #0
 c000346:	f040 809d 	bne.w	c000484 <__udivmoddi4+0x220>
 c00034a:	1a89      	subs	r1, r1, r2
 c00034c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 c000350:	b297      	uxth	r7, r2
 c000352:	2601      	movs	r6, #1
 c000354:	0c20      	lsrs	r0, r4, #16
 c000356:	fbb1 f2fe 	udiv	r2, r1, lr
 c00035a:	fb0e 1112 	mls	r1, lr, r2, r1
 c00035e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c000362:	fb07 f002 	mul.w	r0, r7, r2
 c000366:	4288      	cmp	r0, r1
 c000368:	d90f      	bls.n	c00038a <__udivmoddi4+0x126>
 c00036a:	eb1c 0101 	adds.w	r1, ip, r1
 c00036e:	f102 38ff 	add.w	r8, r2, #4294967295
 c000372:	bf2c      	ite	cs
 c000374:	f04f 0901 	movcs.w	r9, #1
 c000378:	f04f 0900 	movcc.w	r9, #0
 c00037c:	4288      	cmp	r0, r1
 c00037e:	d903      	bls.n	c000388 <__udivmoddi4+0x124>
 c000380:	f1b9 0f00 	cmp.w	r9, #0
 c000384:	f000 80cf 	beq.w	c000526 <__udivmoddi4+0x2c2>
 c000388:	4642      	mov	r2, r8
 c00038a:	1a09      	subs	r1, r1, r0
 c00038c:	b2a4      	uxth	r4, r4
 c00038e:	fbb1 f0fe 	udiv	r0, r1, lr
 c000392:	fb0e 1110 	mls	r1, lr, r0, r1
 c000396:	fb00 f707 	mul.w	r7, r0, r7
 c00039a:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 c00039e:	42a7      	cmp	r7, r4
 c0003a0:	d908      	bls.n	c0003b4 <__udivmoddi4+0x150>
 c0003a2:	eb1c 0404 	adds.w	r4, ip, r4
 c0003a6:	f100 31ff 	add.w	r1, r0, #4294967295
 c0003aa:	d202      	bcs.n	c0003b2 <__udivmoddi4+0x14e>
 c0003ac:	42a7      	cmp	r7, r4
 c0003ae:	f200 80b4 	bhi.w	c00051a <__udivmoddi4+0x2b6>
 c0003b2:	4608      	mov	r0, r1
 c0003b4:	1be4      	subs	r4, r4, r7
 c0003b6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 c0003ba:	e79b      	b.n	c0002f4 <__udivmoddi4+0x90>
 c0003bc:	f1c6 0720 	rsb	r7, r6, #32
 c0003c0:	40b3      	lsls	r3, r6
 c0003c2:	fa01 f406 	lsl.w	r4, r1, r6
 c0003c6:	fa22 fc07 	lsr.w	ip, r2, r7
 c0003ca:	40f9      	lsrs	r1, r7
 c0003cc:	40b2      	lsls	r2, r6
 c0003ce:	ea4c 0c03 	orr.w	ip, ip, r3
 c0003d2:	fa20 f307 	lsr.w	r3, r0, r7
 c0003d6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 c0003da:	431c      	orrs	r4, r3
 c0003dc:	fa1f fe8c 	uxth.w	lr, ip
 c0003e0:	fa00 f306 	lsl.w	r3, r0, r6
 c0003e4:	0c20      	lsrs	r0, r4, #16
 c0003e6:	fbb1 f8f9 	udiv	r8, r1, r9
 c0003ea:	fb09 1118 	mls	r1, r9, r8, r1
 c0003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 c0003f2:	fb08 f00e 	mul.w	r0, r8, lr
 c0003f6:	4288      	cmp	r0, r1
 c0003f8:	d90f      	bls.n	c00041a <__udivmoddi4+0x1b6>
 c0003fa:	eb1c 0101 	adds.w	r1, ip, r1
 c0003fe:	f108 3aff 	add.w	sl, r8, #4294967295
 c000402:	bf2c      	ite	cs
 c000404:	f04f 0b01 	movcs.w	fp, #1
 c000408:	f04f 0b00 	movcc.w	fp, #0
 c00040c:	4288      	cmp	r0, r1
 c00040e:	d903      	bls.n	c000418 <__udivmoddi4+0x1b4>
 c000410:	f1bb 0f00 	cmp.w	fp, #0
 c000414:	f000 808d 	beq.w	c000532 <__udivmoddi4+0x2ce>
 c000418:	46d0      	mov	r8, sl
 c00041a:	1a09      	subs	r1, r1, r0
 c00041c:	b2a4      	uxth	r4, r4
 c00041e:	fbb1 f0f9 	udiv	r0, r1, r9
 c000422:	fb09 1110 	mls	r1, r9, r0, r1
 c000426:	fb00 fe0e 	mul.w	lr, r0, lr
 c00042a:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 c00042e:	458e      	cmp	lr, r1
 c000430:	d907      	bls.n	c000442 <__udivmoddi4+0x1de>
 c000432:	eb1c 0101 	adds.w	r1, ip, r1
 c000436:	f100 34ff 	add.w	r4, r0, #4294967295
 c00043a:	d201      	bcs.n	c000440 <__udivmoddi4+0x1dc>
 c00043c:	458e      	cmp	lr, r1
 c00043e:	d87f      	bhi.n	c000540 <__udivmoddi4+0x2dc>
 c000440:	4620      	mov	r0, r4
 c000442:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 c000446:	eba1 010e 	sub.w	r1, r1, lr
 c00044a:	fba0 9802 	umull	r9, r8, r0, r2
 c00044e:	4541      	cmp	r1, r8
 c000450:	464c      	mov	r4, r9
 c000452:	46c6      	mov	lr, r8
 c000454:	d302      	bcc.n	c00045c <__udivmoddi4+0x1f8>
 c000456:	d106      	bne.n	c000466 <__udivmoddi4+0x202>
 c000458:	454b      	cmp	r3, r9
 c00045a:	d204      	bcs.n	c000466 <__udivmoddi4+0x202>
 c00045c:	3801      	subs	r0, #1
 c00045e:	ebb9 0402 	subs.w	r4, r9, r2
 c000462:	eb68 0e0c 	sbc.w	lr, r8, ip
 c000466:	2d00      	cmp	r5, #0
 c000468:	d070      	beq.n	c00054c <__udivmoddi4+0x2e8>
 c00046a:	1b1a      	subs	r2, r3, r4
 c00046c:	eb61 010e 	sbc.w	r1, r1, lr
 c000470:	fa22 f306 	lsr.w	r3, r2, r6
 c000474:	fa01 f707 	lsl.w	r7, r1, r7
 c000478:	40f1      	lsrs	r1, r6
 c00047a:	2600      	movs	r6, #0
 c00047c:	431f      	orrs	r7, r3
 c00047e:	e9c5 7100 	strd	r7, r1, [r5]
 c000482:	e73c      	b.n	c0002fe <__udivmoddi4+0x9a>
 c000484:	fa02 fc03 	lsl.w	ip, r2, r3
 c000488:	f1c3 0020 	rsb	r0, r3, #32
 c00048c:	fa01 f203 	lsl.w	r2, r1, r3
 c000490:	fa21 f600 	lsr.w	r6, r1, r0
 c000494:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 c000498:	fa24 f100 	lsr.w	r1, r4, r0
 c00049c:	fa1f f78c 	uxth.w	r7, ip
 c0004a0:	409c      	lsls	r4, r3
 c0004a2:	4311      	orrs	r1, r2
 c0004a4:	fbb6 f0fe 	udiv	r0, r6, lr
 c0004a8:	0c0a      	lsrs	r2, r1, #16
 c0004aa:	fb0e 6610 	mls	r6, lr, r0, r6
 c0004ae:	ea42 4206 	orr.w	r2, r2, r6, lsl #16
 c0004b2:	fb00 f607 	mul.w	r6, r0, r7
 c0004b6:	4296      	cmp	r6, r2
 c0004b8:	d90e      	bls.n	c0004d8 <__udivmoddi4+0x274>
 c0004ba:	eb1c 0202 	adds.w	r2, ip, r2
 c0004be:	f100 38ff 	add.w	r8, r0, #4294967295
 c0004c2:	bf2c      	ite	cs
 c0004c4:	f04f 0901 	movcs.w	r9, #1
 c0004c8:	f04f 0900 	movcc.w	r9, #0
 c0004cc:	4296      	cmp	r6, r2
 c0004ce:	d902      	bls.n	c0004d6 <__udivmoddi4+0x272>
 c0004d0:	f1b9 0f00 	cmp.w	r9, #0
 c0004d4:	d031      	beq.n	c00053a <__udivmoddi4+0x2d6>
 c0004d6:	4640      	mov	r0, r8
 c0004d8:	1b92      	subs	r2, r2, r6
 c0004da:	b289      	uxth	r1, r1
 c0004dc:	fbb2 f6fe 	udiv	r6, r2, lr
 c0004e0:	fb0e 2216 	mls	r2, lr, r6, r2
 c0004e4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 c0004e8:	fb06 f207 	mul.w	r2, r6, r7
 c0004ec:	428a      	cmp	r2, r1
 c0004ee:	d907      	bls.n	c000500 <__udivmoddi4+0x29c>
 c0004f0:	eb1c 0101 	adds.w	r1, ip, r1
 c0004f4:	f106 38ff 	add.w	r8, r6, #4294967295
 c0004f8:	d201      	bcs.n	c0004fe <__udivmoddi4+0x29a>
 c0004fa:	428a      	cmp	r2, r1
 c0004fc:	d823      	bhi.n	c000546 <__udivmoddi4+0x2e2>
 c0004fe:	4646      	mov	r6, r8
 c000500:	1a89      	subs	r1, r1, r2
 c000502:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 c000506:	e725      	b.n	c000354 <__udivmoddi4+0xf0>
 c000508:	462e      	mov	r6, r5
 c00050a:	4628      	mov	r0, r5
 c00050c:	e6f7      	b.n	c0002fe <__udivmoddi4+0x9a>
 c00050e:	1a84      	subs	r4, r0, r2
 c000510:	eb61 0303 	sbc.w	r3, r1, r3
 c000514:	2001      	movs	r0, #1
 c000516:	461f      	mov	r7, r3
 c000518:	e70b      	b.n	c000332 <__udivmoddi4+0xce>
 c00051a:	4464      	add	r4, ip
 c00051c:	3802      	subs	r0, #2
 c00051e:	e749      	b.n	c0003b4 <__udivmoddi4+0x150>
 c000520:	4464      	add	r4, ip
 c000522:	3802      	subs	r0, #2
 c000524:	e6e1      	b.n	c0002ea <__udivmoddi4+0x86>
 c000526:	3a02      	subs	r2, #2
 c000528:	4461      	add	r1, ip
 c00052a:	e72e      	b.n	c00038a <__udivmoddi4+0x126>
 c00052c:	3e02      	subs	r6, #2
 c00052e:	4462      	add	r2, ip
 c000530:	e6c6      	b.n	c0002c0 <__udivmoddi4+0x5c>
 c000532:	f1a8 0802 	sub.w	r8, r8, #2
 c000536:	4461      	add	r1, ip
 c000538:	e76f      	b.n	c00041a <__udivmoddi4+0x1b6>
 c00053a:	3802      	subs	r0, #2
 c00053c:	4462      	add	r2, ip
 c00053e:	e7cb      	b.n	c0004d8 <__udivmoddi4+0x274>
 c000540:	3802      	subs	r0, #2
 c000542:	4461      	add	r1, ip
 c000544:	e77d      	b.n	c000442 <__udivmoddi4+0x1de>
 c000546:	3e02      	subs	r6, #2
 c000548:	4461      	add	r1, ip
 c00054a:	e7d9      	b.n	c000500 <__udivmoddi4+0x29c>
 c00054c:	462e      	mov	r6, r5
 c00054e:	e6d6      	b.n	c0002fe <__udivmoddi4+0x9a>

0c000550 <__aeabi_idiv0>:
 c000550:	4770      	bx	lr
 c000552:	bf00      	nop

0c000554 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 c000554:	b580      	push	{r7, lr}
 c000556:	b086      	sub	sp, #24
 c000558:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 c00055a:	f000 ff98 	bl	c00148e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 c00055e:	f000 f8a7 	bl	c0006b0 <SystemClock_Config>
  /* GTZC initialisation */
  MX_GTZC_S_Init();
 c000562:	f000 f8f7 	bl	c000754 <MX_GTZC_S_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 c000566:	f000 fa55 	bl	c000a14 <MX_GPIO_Init>
  MX_DMA_Init();
 c00056a:	f000 fa21 	bl	c0009b0 <MX_DMA_Init>
  MX_SPI3_Init();
 c00056e:	f000 f993 	bl	c000898 <MX_SPI3_Init>
  MX_USART1_UART_Init();
 c000572:	f000 f9cf 	bl	c000914 <MX_USART1_UART_Init>
  MX_ICACHE_Init();
 c000576:	f000 f97b 	bl	c000870 <MX_ICACHE_Init>
  /* USER CODE BEGIN 2 */
  int currentNum = 0;
 c00057a:	2300      	movs	r3, #0
 c00057c:	617b      	str	r3, [r7, #20]
  int counter = 0;
 c00057e:	2300      	movs	r3, #0
 c000580:	613b      	str	r3, [r7, #16]
  /* Non-secure software does not return, this code is not executed */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	for(int i = 0; i<32; i++){
 c000582:	2300      	movs	r3, #0
 c000584:	60fb      	str	r3, [r7, #12]
 c000586:	e00d      	b.n	c0005a4 <main+0x50>
		aTxBuffer[i] = currentNum+i;
 c000588:	697b      	ldr	r3, [r7, #20]
 c00058a:	b2da      	uxtb	r2, r3
 c00058c:	68fb      	ldr	r3, [r7, #12]
 c00058e:	b2db      	uxtb	r3, r3
 c000590:	4413      	add	r3, r2
 c000592:	b2d9      	uxtb	r1, r3
 c000594:	4a3a      	ldr	r2, [pc, #232]	; (c000680 <main+0x12c>)
 c000596:	68fb      	ldr	r3, [r7, #12]
 c000598:	4413      	add	r3, r2
 c00059a:	460a      	mov	r2, r1
 c00059c:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i<32; i++){
 c00059e:	68fb      	ldr	r3, [r7, #12]
 c0005a0:	3301      	adds	r3, #1
 c0005a2:	60fb      	str	r3, [r7, #12]
 c0005a4:	68fb      	ldr	r3, [r7, #12]
 c0005a6:	2b1f      	cmp	r3, #31
 c0005a8:	ddee      	ble.n	c000588 <main+0x34>
	}
	currentNum+=32;
 c0005aa:	697b      	ldr	r3, [r7, #20]
 c0005ac:	3320      	adds	r3, #32
 c0005ae:	617b      	str	r3, [r7, #20]
	counter ++;
 c0005b0:	693b      	ldr	r3, [r7, #16]
 c0005b2:	3301      	adds	r3, #1
 c0005b4:	613b      	str	r3, [r7, #16]

	printf("The current buffer is: \n\r");
 c0005b6:	4833      	ldr	r0, [pc, #204]	; (c000684 <main+0x130>)
 c0005b8:	f005 f950 	bl	c00585c <iprintf>
	for(int i = 0; i<32; i++){
 c0005bc:	2300      	movs	r3, #0
 c0005be:	60bb      	str	r3, [r7, #8]
 c0005c0:	e00a      	b.n	c0005d8 <main+0x84>
		printf("%d, ", aTxBuffer[i]);
 c0005c2:	4a2f      	ldr	r2, [pc, #188]	; (c000680 <main+0x12c>)
 c0005c4:	68bb      	ldr	r3, [r7, #8]
 c0005c6:	4413      	add	r3, r2
 c0005c8:	781b      	ldrb	r3, [r3, #0]
 c0005ca:	4619      	mov	r1, r3
 c0005cc:	482e      	ldr	r0, [pc, #184]	; (c000688 <main+0x134>)
 c0005ce:	f005 f945 	bl	c00585c <iprintf>
	for(int i = 0; i<32; i++){
 c0005d2:	68bb      	ldr	r3, [r7, #8]
 c0005d4:	3301      	adds	r3, #1
 c0005d6:	60bb      	str	r3, [r7, #8]
 c0005d8:	68bb      	ldr	r3, [r7, #8]
 c0005da:	2b1f      	cmp	r3, #31
 c0005dc:	ddf1      	ble.n	c0005c2 <main+0x6e>
	}
	printf("\n\r");
 c0005de:	482b      	ldr	r0, [pc, #172]	; (c00068c <main+0x138>)
 c0005e0:	f005 f93c 	bl	c00585c <iprintf>

	/*##-1- Start the Full Duplex Communication process ########################*/
	 /* While the SPI in TransmitReceive process, user can transmit data through
	  "aTxBuffer" buffer & receive data through "aRxBuffer" */
	//for now, just send a simple message
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 c0005e4:	2200      	movs	r2, #0
 c0005e6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c0005ea:	4829      	ldr	r0, [pc, #164]	; (c000690 <main+0x13c>)
 c0005ec:	f001 fdc6 	bl	c00217c <HAL_GPIO_WritePin>
	printf("Sending buffer to the server...\n\r");
 c0005f0:	4828      	ldr	r0, [pc, #160]	; (c000694 <main+0x140>)
 c0005f2:	f005 f933 	bl	c00585c <iprintf>
	if (HAL_SPI_TransmitReceive_DMA(&hspi3, (uint8_t *)aTxBuffer, (uint8_t *)aRxBuffer, 32) != HAL_OK)
 c0005f6:	2320      	movs	r3, #32
 c0005f8:	4a27      	ldr	r2, [pc, #156]	; (c000698 <main+0x144>)
 c0005fa:	4921      	ldr	r1, [pc, #132]	; (c000680 <main+0x12c>)
 c0005fc:	4827      	ldr	r0, [pc, #156]	; (c00069c <main+0x148>)
 c0005fe:	f003 fdbb 	bl	c004178 <HAL_SPI_TransmitReceive_DMA>
 c000602:	4603      	mov	r3, r0
 c000604:	2b00      	cmp	r3, #0
 c000606:	d004      	beq.n	c000612 <main+0xbe>
	 {
		 /* Transfer error in transmission process */
		 printf("There was an error in starting up txrx.\n\r");
 c000608:	4825      	ldr	r0, [pc, #148]	; (c0006a0 <main+0x14c>)
 c00060a:	f005 f927 	bl	c00585c <iprintf>
		 Error_Handler();
 c00060e:	f000 fa93 	bl	c000b38 <Error_Handler>
	 /*  Before starting a new communication transfer, you must wait the callback call
	   to get the transfer complete confirmation or an error detection.
	   For simplicity reasons, this example is just waiting till the end of the
	   transfer, but application may perform other tasks while transfer operation
	   is ongoing. */
	 while (wTransferState == TRANSFER_WAIT)
 c000612:	bf00      	nop
 c000614:	4b23      	ldr	r3, [pc, #140]	; (c0006a4 <main+0x150>)
 c000616:	681b      	ldr	r3, [r3, #0]
 c000618:	2b00      	cmp	r3, #0
 c00061a:	d0fb      	beq.n	c000614 <main+0xc0>
	 {
	 }

	 switch (wTransferState)
 c00061c:	4b21      	ldr	r3, [pc, #132]	; (c0006a4 <main+0x150>)
 c00061e:	681b      	ldr	r3, [r3, #0]
 c000620:	2b01      	cmp	r3, #1
 c000622:	d005      	beq.n	c000630 <main+0xdc>
	 {
		 case TRANSFER_COMPLETE:
		   break;
		 default :
		   printf("There was an error in SPI transfer.\n\r");
 c000624:	4820      	ldr	r0, [pc, #128]	; (c0006a8 <main+0x154>)
 c000626:	f005 f919 	bl	c00585c <iprintf>
		   Error_Handler();
 c00062a:	f000 fa85 	bl	c000b38 <Error_Handler>
		   break;
 c00062e:	e000      	b.n	c000632 <main+0xde>
		   break;
 c000630:	bf00      	nop
	 }
	 HAL_Delay(100);
 c000632:	2064      	movs	r0, #100	; 0x64
 c000634:	f000 ffa2 	bl	c00157c <HAL_Delay>

	 //check if we've transmitted 8 full buffers
	 if(counter == 8){
 c000638:	693b      	ldr	r3, [r7, #16]
 c00063a:	2b08      	cmp	r3, #8
 c00063c:	d1a1      	bne.n	c000582 <main+0x2e>
		 //stop SPI communication
		 HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c00063e:	2201      	movs	r2, #1
 c000640:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000644:	4812      	ldr	r0, [pc, #72]	; (c000690 <main+0x13c>)
 c000646:	f001 fd99 	bl	c00217c <HAL_GPIO_WritePin>
		 //reset variables
		 counter = 0;
 c00064a:	2300      	movs	r3, #0
 c00064c:	613b      	str	r3, [r7, #16]
		 currentNum = 0;
 c00064e:	2300      	movs	r3, #0
 c000650:	617b      	str	r3, [r7, #20]
		 for(int i = 0; i<32; i++){
 c000652:	2300      	movs	r3, #0
 c000654:	607b      	str	r3, [r7, #4]
 c000656:	e007      	b.n	c000668 <main+0x114>
			 aTxBuffer[i] = 0;
 c000658:	4a09      	ldr	r2, [pc, #36]	; (c000680 <main+0x12c>)
 c00065a:	687b      	ldr	r3, [r7, #4]
 c00065c:	4413      	add	r3, r2
 c00065e:	2200      	movs	r2, #0
 c000660:	701a      	strb	r2, [r3, #0]
		 for(int i = 0; i<32; i++){
 c000662:	687b      	ldr	r3, [r7, #4]
 c000664:	3301      	adds	r3, #1
 c000666:	607b      	str	r3, [r7, #4]
 c000668:	687b      	ldr	r3, [r7, #4]
 c00066a:	2b1f      	cmp	r3, #31
 c00066c:	ddf4      	ble.n	c000658 <main+0x104>
		 }
		 //delay 10 seconds before resuming
		 HAL_Delay(10000);
 c00066e:	f242 7010 	movw	r0, #10000	; 0x2710
 c000672:	f000 ff83 	bl	c00157c <HAL_Delay>
		 printf("The memory transfer was completed.\n\r");
 c000676:	480d      	ldr	r0, [pc, #52]	; (c0006ac <main+0x158>)
 c000678:	f005 f8f0 	bl	c00585c <iprintf>
	for(int i = 0; i<32; i++){
 c00067c:	e781      	b.n	c000582 <main+0x2e>
 c00067e:	bf00      	nop
 c000680:	30000254 	.word	0x30000254
 c000684:	0c0067ac 	.word	0x0c0067ac
 c000688:	0c0067c8 	.word	0x0c0067c8
 c00068c:	0c0067d0 	.word	0x0c0067d0
 c000690:	52020400 	.word	0x52020400
 c000694:	0c0067d4 	.word	0x0c0067d4
 c000698:	30000274 	.word	0x30000274
 c00069c:	3000008c 	.word	0x3000008c
 c0006a0:	0c0067f8 	.word	0x0c0067f8
 c0006a4:	30000294 	.word	0x30000294
 c0006a8:	0c006824 	.word	0x0c006824
 c0006ac:	0c00684c 	.word	0x0c00684c

0c0006b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 c0006b0:	b580      	push	{r7, lr}
 c0006b2:	b098      	sub	sp, #96	; 0x60
 c0006b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 c0006b6:	f107 0318 	add.w	r3, r7, #24
 c0006ba:	2248      	movs	r2, #72	; 0x48
 c0006bc:	2100      	movs	r1, #0
 c0006be:	4618      	mov	r0, r3
 c0006c0:	f005 f8c4 	bl	c00584c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 c0006c4:	1d3b      	adds	r3, r7, #4
 c0006c6:	2200      	movs	r2, #0
 c0006c8:	601a      	str	r2, [r3, #0]
 c0006ca:	605a      	str	r2, [r3, #4]
 c0006cc:	609a      	str	r2, [r3, #8]
 c0006ce:	60da      	str	r2, [r3, #12]
 c0006d0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE0) != HAL_OK)
 c0006d2:	2000      	movs	r0, #0
 c0006d4:	f001 ff3c 	bl	c002550 <HAL_PWREx_ControlVoltageScaling>
 c0006d8:	4603      	mov	r3, r0
 c0006da:	2b00      	cmp	r3, #0
 c0006dc:	d001      	beq.n	c0006e2 <SystemClock_Config+0x32>
  {
    Error_Handler();
 c0006de:	f000 fa2b 	bl	c000b38 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 c0006e2:	2310      	movs	r3, #16
 c0006e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 c0006e6:	2301      	movs	r3, #1
 c0006e8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.MSICalibrationValue = RCC_MSICALIBRATION_DEFAULT;
 c0006ea:	2300      	movs	r3, #0
 c0006ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_11;
 c0006ee:	23b0      	movs	r3, #176	; 0xb0
 c0006f0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 c0006f2:	2302      	movs	r3, #2
 c0006f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 c0006f6:	2301      	movs	r3, #1
 c0006f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLM = 12;
 c0006fa:	230c      	movs	r3, #12
 c0006fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLN = 55;
 c0006fe:	2337      	movs	r3, #55	; 0x37
 c000700:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 c000702:	2307      	movs	r3, #7
 c000704:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 c000706:	2302      	movs	r3, #2
 c000708:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 c00070a:	2302      	movs	r3, #2
 c00070c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 c00070e:	f107 0318 	add.w	r3, r7, #24
 c000712:	4618      	mov	r0, r3
 c000714:	f001 ffbc 	bl	c002690 <HAL_RCC_OscConfig>
 c000718:	4603      	mov	r3, r0
 c00071a:	2b00      	cmp	r3, #0
 c00071c:	d001      	beq.n	c000722 <SystemClock_Config+0x72>
  {
    Error_Handler();
 c00071e:	f000 fa0b 	bl	c000b38 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 c000722:	230f      	movs	r3, #15
 c000724:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 c000726:	2303      	movs	r3, #3
 c000728:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 c00072a:	2300      	movs	r3, #0
 c00072c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 c00072e:	2300      	movs	r3, #0
 c000730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 c000732:	2300      	movs	r3, #0
 c000734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 c000736:	1d3b      	adds	r3, r7, #4
 c000738:	2105      	movs	r1, #5
 c00073a:	4618      	mov	r0, r3
 c00073c:	f002 fc7e 	bl	c00303c <HAL_RCC_ClockConfig>
 c000740:	4603      	mov	r3, r0
 c000742:	2b00      	cmp	r3, #0
 c000744:	d001      	beq.n	c00074a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 c000746:	f000 f9f7 	bl	c000b38 <Error_Handler>
  }
}
 c00074a:	bf00      	nop
 c00074c:	3760      	adds	r7, #96	; 0x60
 c00074e:	46bd      	mov	sp, r7
 c000750:	bd80      	pop	{r7, pc}
	...

0c000754 <MX_GTZC_S_Init>:
  * @brief GTZC_S Initialization Function
  * @param None
  * @retval None
  */
static void MX_GTZC_S_Init(void)
{
 c000754:	b580      	push	{r7, lr}
 c000756:	b09c      	sub	sp, #112	; 0x70
 c000758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN GTZC_S_Init 0 */

  /* USER CODE END GTZC_S_Init 0 */

  MPCBB_ConfigTypeDef MPCBB_NonSecureArea_Desc = {0};
 c00075a:	1d3b      	adds	r3, r7, #4
 c00075c:	226c      	movs	r2, #108	; 0x6c
 c00075e:	2100      	movs	r1, #0
 c000760:	4618      	mov	r0, r3
 c000762:	f005 f873 	bl	c00584c <memset>

  /* USER CODE BEGIN GTZC_S_Init 1 */

  /* USER CODE END GTZC_S_Init 1 */
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_SPI3, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c000766:	f240 3101 	movw	r1, #769	; 0x301
 c00076a:	2009      	movs	r0, #9
 c00076c:	f001 fd56 	bl	c00221c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000770:	4603      	mov	r3, r0
 c000772:	2b00      	cmp	r3, #0
 c000774:	d001      	beq.n	c00077a <MX_GTZC_S_Init+0x26>
  {
    Error_Handler();
 c000776:	f000 f9df 	bl	c000b38 <Error_Handler>
  }
  if (HAL_GTZC_TZSC_ConfigPeriphAttributes(GTZC_PERIPH_USART1, GTZC_TZSC_PERIPH_SEC|GTZC_TZSC_PERIPH_NPRIV) != HAL_OK)
 c00077a:	f240 3101 	movw	r1, #769	; 0x301
 c00077e:	483a      	ldr	r0, [pc, #232]	; (c000868 <MX_GTZC_S_Init+0x114>)
 c000780:	f001 fd4c 	bl	c00221c <HAL_GTZC_TZSC_ConfigPeriphAttributes>
 c000784:	4603      	mov	r3, r0
 c000786:	2b00      	cmp	r3, #0
 c000788:	d001      	beq.n	c00078e <MX_GTZC_S_Init+0x3a>
  {
    Error_Handler();
 c00078a:	f000 f9d5 	bl	c000b38 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.SecureRWIllegalMode = GTZC_MPCBB_SRWILADIS_ENABLE;
 c00078e:	2300      	movs	r3, #0
 c000790:	607b      	str	r3, [r7, #4]
  MPCBB_NonSecureArea_Desc.InvertSecureState = GTZC_MPCBB_INVSECSTATE_NOT_INVERTED;
 c000792:	2300      	movs	r3, #0
 c000794:	60bb      	str	r3, [r7, #8]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0xFFFFFFFF;
 c000796:	f04f 33ff 	mov.w	r3, #4294967295
 c00079a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0xFFFFFFFF;
 c00079c:	f04f 33ff 	mov.w	r3, #4294967295
 c0007a0:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0xFFFFFFFF;
 c0007a2:	f04f 33ff 	mov.w	r3, #4294967295
 c0007a6:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0xFFFFFFFF;
 c0007a8:	f04f 33ff 	mov.w	r3, #4294967295
 c0007ac:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0xFFFFFFFF;
 c0007ae:	f04f 33ff 	mov.w	r3, #4294967295
 c0007b2:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0xFFFFFFFF;
 c0007b4:	f04f 33ff 	mov.w	r3, #4294967295
 c0007b8:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0xFFFFFFFF;
 c0007ba:	f04f 33ff 	mov.w	r3, #4294967295
 c0007be:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0xFFFFFFFF;
 c0007c0:	f04f 33ff 	mov.w	r3, #4294967295
 c0007c4:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[8] =   0xFFFFFFFF;
 c0007c6:	f04f 33ff 	mov.w	r3, #4294967295
 c0007ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[9] =   0xFFFFFFFF;
 c0007cc:	f04f 33ff 	mov.w	r3, #4294967295
 c0007d0:	633b      	str	r3, [r7, #48]	; 0x30
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[10] =   0xFFFFFFFF;
 c0007d2:	f04f 33ff 	mov.w	r3, #4294967295
 c0007d6:	637b      	str	r3, [r7, #52]	; 0x34
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[11] =   0xFFFFFFFF;
 c0007d8:	f04f 33ff 	mov.w	r3, #4294967295
 c0007dc:	63bb      	str	r3, [r7, #56]	; 0x38
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[12] =   0x00000000;
 c0007de:	2300      	movs	r3, #0
 c0007e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[13] =   0x00000000;
 c0007e2:	2300      	movs	r3, #0
 c0007e4:	643b      	str	r3, [r7, #64]	; 0x40
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[14] =   0x00000000;
 c0007e6:	2300      	movs	r3, #0
 c0007e8:	647b      	str	r3, [r7, #68]	; 0x44
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[15] =   0x00000000;
 c0007ea:	2300      	movs	r3, #0
 c0007ec:	64bb      	str	r3, [r7, #72]	; 0x48
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[16] =   0x00000000;
 c0007ee:	2300      	movs	r3, #0
 c0007f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[17] =   0x00000000;
 c0007f2:	2300      	movs	r3, #0
 c0007f4:	653b      	str	r3, [r7, #80]	; 0x50
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[18] =   0x00000000;
 c0007f6:	2300      	movs	r3, #0
 c0007f8:	657b      	str	r3, [r7, #84]	; 0x54
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[19] =   0x00000000;
 c0007fa:	2300      	movs	r3, #0
 c0007fc:	65bb      	str	r3, [r7, #88]	; 0x58
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[20] =   0x00000000;
 c0007fe:	2300      	movs	r3, #0
 c000800:	65fb      	str	r3, [r7, #92]	; 0x5c
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[21] =   0x00000000;
 c000802:	2300      	movs	r3, #0
 c000804:	663b      	str	r3, [r7, #96]	; 0x60
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[22] =   0x00000000;
 c000806:	2300      	movs	r3, #0
 c000808:	667b      	str	r3, [r7, #100]	; 0x64
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[23] =   0x00000000;
 c00080a:	2300      	movs	r3, #0
 c00080c:	66bb      	str	r3, [r7, #104]	; 0x68
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c00080e:	2300      	movs	r3, #0
 c000810:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM1_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c000812:	1d3b      	adds	r3, r7, #4
 c000814:	4619      	mov	r1, r3
 c000816:	f04f 5040 	mov.w	r0, #805306368	; 0x30000000
 c00081a:	f001 fdd7 	bl	c0023cc <HAL_GTZC_MPCBB_ConfigMem>
 c00081e:	4603      	mov	r3, r0
 c000820:	2b00      	cmp	r3, #0
 c000822:	d001      	beq.n	c000828 <MX_GTZC_S_Init+0xd4>
  {
    Error_Handler();
 c000824:	f000 f988 	bl	c000b38 <Error_Handler>
  }
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[0] =   0x00000000;
 c000828:	2300      	movs	r3, #0
 c00082a:	60fb      	str	r3, [r7, #12]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[1] =   0x00000000;
 c00082c:	2300      	movs	r3, #0
 c00082e:	613b      	str	r3, [r7, #16]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[2] =   0x00000000;
 c000830:	2300      	movs	r3, #0
 c000832:	617b      	str	r3, [r7, #20]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[3] =   0x00000000;
 c000834:	2300      	movs	r3, #0
 c000836:	61bb      	str	r3, [r7, #24]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[4] =   0x00000000;
 c000838:	2300      	movs	r3, #0
 c00083a:	61fb      	str	r3, [r7, #28]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[5] =   0x00000000;
 c00083c:	2300      	movs	r3, #0
 c00083e:	623b      	str	r3, [r7, #32]
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[6] =   0x00000000;
 c000840:	2300      	movs	r3, #0
 c000842:	627b      	str	r3, [r7, #36]	; 0x24
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_SecConfig_array[7] =   0x00000000;
 c000844:	2300      	movs	r3, #0
 c000846:	62bb      	str	r3, [r7, #40]	; 0x28
  MPCBB_NonSecureArea_Desc.AttributeConfig.MPCBB_LockConfig_array[0] =   0x00000000;
 c000848:	2300      	movs	r3, #0
 c00084a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_GTZC_MPCBB_ConfigMem(SRAM2_BASE, &MPCBB_NonSecureArea_Desc) != HAL_OK)
 c00084c:	1d3b      	adds	r3, r7, #4
 c00084e:	4619      	mov	r1, r3
 c000850:	4806      	ldr	r0, [pc, #24]	; (c00086c <MX_GTZC_S_Init+0x118>)
 c000852:	f001 fdbb 	bl	c0023cc <HAL_GTZC_MPCBB_ConfigMem>
 c000856:	4603      	mov	r3, r0
 c000858:	2b00      	cmp	r3, #0
 c00085a:	d001      	beq.n	c000860 <MX_GTZC_S_Init+0x10c>
  {
    Error_Handler();
 c00085c:	f000 f96c 	bl	c000b38 <Error_Handler>
  }
  /* USER CODE BEGIN GTZC_S_Init 2 */

  /* USER CODE END GTZC_S_Init 2 */

}
 c000860:	bf00      	nop
 c000862:	3770      	adds	r7, #112	; 0x70
 c000864:	46bd      	mov	sp, r7
 c000866:	bd80      	pop	{r7, pc}
 c000868:	10000001 	.word	0x10000001
 c00086c:	30030000 	.word	0x30030000

0c000870 <MX_ICACHE_Init>:
  * @brief ICACHE Initialization Function
  * @param None
  * @retval None
  */
static void MX_ICACHE_Init(void)
{
 c000870:	b580      	push	{r7, lr}
 c000872:	af00      	add	r7, sp, #0

  /* USER CODE END ICACHE_Init 1 */

  /** Enable instruction cache in 1-way (direct mapped cache)
  */
  if (HAL_ICACHE_ConfigAssociativityMode(ICACHE_1WAY) != HAL_OK)
 c000874:	2000      	movs	r0, #0
 c000876:	f001 fe2d 	bl	c0024d4 <HAL_ICACHE_ConfigAssociativityMode>
 c00087a:	4603      	mov	r3, r0
 c00087c:	2b00      	cmp	r3, #0
 c00087e:	d001      	beq.n	c000884 <MX_ICACHE_Init+0x14>
  {
    Error_Handler();
 c000880:	f000 f95a 	bl	c000b38 <Error_Handler>
  }
  if (HAL_ICACHE_Enable() != HAL_OK)
 c000884:	f001 fe46 	bl	c002514 <HAL_ICACHE_Enable>
 c000888:	4603      	mov	r3, r0
 c00088a:	2b00      	cmp	r3, #0
 c00088c:	d001      	beq.n	c000892 <MX_ICACHE_Init+0x22>
  {
    Error_Handler();
 c00088e:	f000 f953 	bl	c000b38 <Error_Handler>
  }
  /* USER CODE BEGIN ICACHE_Init 2 */

  /* USER CODE END ICACHE_Init 2 */

}
 c000892:	bf00      	nop
 c000894:	bd80      	pop	{r7, pc}
	...

0c000898 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 c000898:	b580      	push	{r7, lr}
 c00089a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 c00089c:	4b1b      	ldr	r3, [pc, #108]	; (c00090c <MX_SPI3_Init+0x74>)
 c00089e:	4a1c      	ldr	r2, [pc, #112]	; (c000910 <MX_SPI3_Init+0x78>)
 c0008a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 c0008a2:	4b1a      	ldr	r3, [pc, #104]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 c0008a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 c0008aa:	4b18      	ldr	r3, [pc, #96]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008ac:	2200      	movs	r2, #0
 c0008ae:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 c0008b0:	4b16      	ldr	r3, [pc, #88]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008b2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 c0008b6:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 c0008b8:	4b14      	ldr	r3, [pc, #80]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008ba:	2200      	movs	r2, #0
 c0008bc:	611a      	str	r2, [r3, #16]
  //CPHA1 = 2 edge CPHA0 = 1 edge
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 c0008be:	4b13      	ldr	r3, [pc, #76]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008c0:	2200      	movs	r2, #0
 c0008c2:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 c0008c4:	4b11      	ldr	r3, [pc, #68]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008c6:	f44f 7200 	mov.w	r2, #512	; 0x200
 c0008ca:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 c0008cc:	4b0f      	ldr	r3, [pc, #60]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008ce:	2220      	movs	r2, #32
 c0008d0:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 c0008d2:	4b0e      	ldr	r3, [pc, #56]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008d4:	2200      	movs	r2, #0
 c0008d6:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 c0008d8:	4b0c      	ldr	r3, [pc, #48]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008da:	2200      	movs	r2, #0
 c0008dc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0008de:	4b0b      	ldr	r3, [pc, #44]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008e0:	2200      	movs	r2, #0
 c0008e2:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 c0008e4:	4b09      	ldr	r3, [pc, #36]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008e6:	2207      	movs	r2, #7
 c0008e8:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 c0008ea:	4b08      	ldr	r3, [pc, #32]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008ec:	2200      	movs	r2, #0
 c0008ee:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 c0008f0:	4b06      	ldr	r3, [pc, #24]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008f2:	2208      	movs	r2, #8
 c0008f4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 c0008f6:	4805      	ldr	r0, [pc, #20]	; (c00090c <MX_SPI3_Init+0x74>)
 c0008f8:	f003 fb9a 	bl	c004030 <HAL_SPI_Init>
 c0008fc:	4603      	mov	r3, r0
 c0008fe:	2b00      	cmp	r3, #0
 c000900:	d001      	beq.n	c000906 <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 c000902:	f000 f919 	bl	c000b38 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 c000906:	bf00      	nop
 c000908:	bd80      	pop	{r7, pc}
 c00090a:	bf00      	nop
 c00090c:	3000008c 	.word	0x3000008c
 c000910:	50003c00 	.word	0x50003c00

0c000914 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 c000914:	b580      	push	{r7, lr}
 c000916:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 c000918:	4b23      	ldr	r3, [pc, #140]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c00091a:	4a24      	ldr	r2, [pc, #144]	; (c0009ac <MX_USART1_UART_Init+0x98>)
 c00091c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 c00091e:	4b22      	ldr	r3, [pc, #136]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000920:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 c000924:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 c000926:	4b20      	ldr	r3, [pc, #128]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000928:	2200      	movs	r2, #0
 c00092a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 c00092c:	4b1e      	ldr	r3, [pc, #120]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c00092e:	2200      	movs	r2, #0
 c000930:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_ODD;
 c000932:	4b1d      	ldr	r3, [pc, #116]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000934:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 c000938:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 c00093a:	4b1b      	ldr	r3, [pc, #108]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c00093c:	220c      	movs	r2, #12
 c00093e:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 c000940:	4b19      	ldr	r3, [pc, #100]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000942:	2200      	movs	r2, #0
 c000944:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 c000946:	4b18      	ldr	r3, [pc, #96]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000948:	2200      	movs	r2, #0
 c00094a:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 c00094c:	4b16      	ldr	r3, [pc, #88]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c00094e:	2200      	movs	r2, #0
 c000950:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 c000952:	4b15      	ldr	r3, [pc, #84]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000954:	2200      	movs	r2, #0
 c000956:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 c000958:	4b13      	ldr	r3, [pc, #76]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c00095a:	2200      	movs	r2, #0
 c00095c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 c00095e:	4812      	ldr	r0, [pc, #72]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000960:	f004 f852 	bl	c004a08 <HAL_UART_Init>
 c000964:	4603      	mov	r3, r0
 c000966:	2b00      	cmp	r3, #0
 c000968:	d001      	beq.n	c00096e <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 c00096a:	f000 f8e5 	bl	c000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 c00096e:	2100      	movs	r1, #0
 c000970:	480d      	ldr	r0, [pc, #52]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000972:	f004 fe77 	bl	c005664 <HAL_UARTEx_SetTxFifoThreshold>
 c000976:	4603      	mov	r3, r0
 c000978:	2b00      	cmp	r3, #0
 c00097a:	d001      	beq.n	c000980 <MX_USART1_UART_Init+0x6c>
  {
    Error_Handler();
 c00097c:	f000 f8dc 	bl	c000b38 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 c000980:	2100      	movs	r1, #0
 c000982:	4809      	ldr	r0, [pc, #36]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000984:	f004 feac 	bl	c0056e0 <HAL_UARTEx_SetRxFifoThreshold>
 c000988:	4603      	mov	r3, r0
 c00098a:	2b00      	cmp	r3, #0
 c00098c:	d001      	beq.n	c000992 <MX_USART1_UART_Init+0x7e>
  {
    Error_Handler();
 c00098e:	f000 f8d3 	bl	c000b38 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 c000992:	4805      	ldr	r0, [pc, #20]	; (c0009a8 <MX_USART1_UART_Init+0x94>)
 c000994:	f004 fe2d 	bl	c0055f2 <HAL_UARTEx_DisableFifoMode>
 c000998:	4603      	mov	r3, r0
 c00099a:	2b00      	cmp	r3, #0
 c00099c:	d001      	beq.n	c0009a2 <MX_USART1_UART_Init+0x8e>
  {
    Error_Handler();
 c00099e:	f000 f8cb 	bl	c000b38 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 c0009a2:	bf00      	nop
 c0009a4:	bd80      	pop	{r7, pc}
 c0009a6:	bf00      	nop
 c0009a8:	300001c0 	.word	0x300001c0
 c0009ac:	50013800 	.word	0x50013800

0c0009b0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 c0009b0:	b580      	push	{r7, lr}
 c0009b2:	b082      	sub	sp, #8
 c0009b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 c0009b6:	4b16      	ldr	r3, [pc, #88]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009b8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0009ba:	4a15      	ldr	r2, [pc, #84]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009bc:	f043 0304 	orr.w	r3, r3, #4
 c0009c0:	6493      	str	r3, [r2, #72]	; 0x48
 c0009c2:	4b13      	ldr	r3, [pc, #76]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0009c6:	f003 0304 	and.w	r3, r3, #4
 c0009ca:	607b      	str	r3, [r7, #4]
 c0009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 c0009ce:	4b10      	ldr	r3, [pc, #64]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0009d2:	4a0f      	ldr	r2, [pc, #60]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009d4:	f043 0301 	orr.w	r3, r3, #1
 c0009d8:	6493      	str	r3, [r2, #72]	; 0x48
 c0009da:	4b0d      	ldr	r3, [pc, #52]	; (c000a10 <MX_DMA_Init+0x60>)
 c0009dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c0009de:	f003 0301 	and.w	r3, r3, #1
 c0009e2:	603b      	str	r3, [r7, #0]
 c0009e4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 c0009e6:	2200      	movs	r2, #0
 c0009e8:	2100      	movs	r1, #0
 c0009ea:	2020      	movs	r0, #32
 c0009ec:	f000 fec5 	bl	c00177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 c0009f0:	2020      	movs	r0, #32
 c0009f2:	f000 fedc 	bl	c0017ae <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 c0009f6:	2200      	movs	r2, #0
 c0009f8:	2100      	movs	r1, #0
 c0009fa:	2021      	movs	r0, #33	; 0x21
 c0009fc:	f000 febd 	bl	c00177a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 c000a00:	2021      	movs	r0, #33	; 0x21
 c000a02:	f000 fed4 	bl	c0017ae <HAL_NVIC_EnableIRQ>

}
 c000a06:	bf00      	nop
 c000a08:	3708      	adds	r7, #8
 c000a0a:	46bd      	mov	sp, r7
 c000a0c:	bd80      	pop	{r7, pc}
 c000a0e:	bf00      	nop
 c000a10:	50021000 	.word	0x50021000

0c000a14 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 c000a14:	b580      	push	{r7, lr}
 c000a16:	b08a      	sub	sp, #40	; 0x28
 c000a18:	af00      	add	r7, sp, #0

/* USER CODE BEGIN MX_GPIO_Init_1 */
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000a1a:	f107 0314 	add.w	r3, r7, #20
 c000a1e:	2200      	movs	r2, #0
 c000a20:	601a      	str	r2, [r3, #0]
 c000a22:	605a      	str	r2, [r3, #4]
 c000a24:	609a      	str	r2, [r3, #8]
 c000a26:	60da      	str	r2, [r3, #12]
 c000a28:	611a      	str	r2, [r3, #16]
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 c000a2a:	4b2e      	ldr	r3, [pc, #184]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a2e:	4a2d      	ldr	r2, [pc, #180]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a30:	f043 0308 	orr.w	r3, r3, #8
 c000a34:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000a36:	4b2b      	ldr	r3, [pc, #172]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a3a:	f003 0308 	and.w	r3, r3, #8
 c000a3e:	613b      	str	r3, [r7, #16]
 c000a40:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 c000a42:	4b28      	ldr	r3, [pc, #160]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a46:	4a27      	ldr	r2, [pc, #156]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a48:	f043 0302 	orr.w	r3, r3, #2
 c000a4c:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000a4e:	4b25      	ldr	r3, [pc, #148]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a52:	f003 0302 	and.w	r3, r3, #2
 c000a56:	60fb      	str	r3, [r7, #12]
 c000a58:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 c000a5a:	4b22      	ldr	r3, [pc, #136]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a5e:	4a21      	ldr	r2, [pc, #132]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a60:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000a66:	4b1f      	ldr	r3, [pc, #124]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000a6e:	60bb      	str	r3, [r7, #8]
 c000a70:	68bb      	ldr	r3, [r7, #8]
  HAL_PWREx_EnableVddIO2();
 c000a72:	f001 fdc9 	bl	c002608 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOC_CLK_ENABLE();
 c000a76:	4b1b      	ldr	r3, [pc, #108]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a78:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a7a:	4a1a      	ldr	r2, [pc, #104]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a7c:	f043 0304 	orr.w	r3, r3, #4
 c000a80:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000a82:	4b18      	ldr	r3, [pc, #96]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a86:	f003 0304 	and.w	r3, r3, #4
 c000a8a:	607b      	str	r3, [r7, #4]
 c000a8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 c000a8e:	4b15      	ldr	r3, [pc, #84]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a92:	4a14      	ldr	r2, [pc, #80]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a94:	f043 0301 	orr.w	r3, r3, #1
 c000a98:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000a9a:	4b12      	ldr	r3, [pc, #72]	; (c000ae4 <MX_GPIO_Init+0xd0>)
 c000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000a9e:	f003 0301 	and.w	r3, r3, #1
 c000aa2:	603b      	str	r3, [r7, #0]
 c000aa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 c000aa6:	2201      	movs	r2, #1
 c000aa8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 c000aac:	480e      	ldr	r0, [pc, #56]	; (c000ae8 <MX_GPIO_Init+0xd4>)
 c000aae:	f001 fb65 	bl	c00217c <HAL_GPIO_WritePin>

  /*IO attributes management functions */
  HAL_GPIO_ConfigPinAttributes(GPIOC, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_NSEC);
 c000ab2:	2200      	movs	r2, #0
 c000ab4:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 c000ab8:	480c      	ldr	r0, [pc, #48]	; (c000aec <MX_GPIO_Init+0xd8>)
 c000aba:	f001 fb77 	bl	c0021ac <HAL_GPIO_ConfigPinAttributes>

  //this pin is used as the CS pin for SPI communication
  //for STM32 microcontrollers, this pin must be configured and controlled manually.
  /*Configure GPIO pin : PB13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 c000abe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 c000ac2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 c000ac4:	2301      	movs	r3, #1
 c000ac6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 c000ac8:	2301      	movs	r3, #1
 c000aca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000acc:	2300      	movs	r3, #0
 c000ace:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000ad0:	f107 0314 	add.w	r3, r7, #20
 c000ad4:	4619      	mov	r1, r3
 c000ad6:	4804      	ldr	r0, [pc, #16]	; (c000ae8 <MX_GPIO_Init+0xd4>)
 c000ad8:	f001 f9d0 	bl	c001e7c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 c000adc:	bf00      	nop
 c000ade:	3728      	adds	r7, #40	; 0x28
 c000ae0:	46bd      	mov	sp, r7
 c000ae2:	bd80      	pop	{r7, pc}
 c000ae4:	50021000 	.word	0x50021000
 c000ae8:	52020400 	.word	0x52020400
 c000aec:	52020800 	.word	0x52020800

0c000af0 <HAL_SPI_TxRxCpltCallback>:
  * @note   This example shows a simple way to report end of DMA TxRx transfer, and
  *         you can add your own implementation.
  * @retval None
  */
void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c000af0:	b580      	push	{r7, lr}
 c000af2:	b082      	sub	sp, #8
 c000af4:	af00      	add	r7, sp, #0
 c000af6:	6078      	str	r0, [r7, #4]
  printf("SPI Transfer complete.\n\r");
 c000af8:	4804      	ldr	r0, [pc, #16]	; (c000b0c <HAL_SPI_TxRxCpltCallback+0x1c>)
 c000afa:	f004 feaf 	bl	c00585c <iprintf>
  wTransferState = TRANSFER_COMPLETE;
 c000afe:	4b04      	ldr	r3, [pc, #16]	; (c000b10 <HAL_SPI_TxRxCpltCallback+0x20>)
 c000b00:	2201      	movs	r2, #1
 c000b02:	601a      	str	r2, [r3, #0]
}
 c000b04:	bf00      	nop
 c000b06:	3708      	adds	r7, #8
 c000b08:	46bd      	mov	sp, r7
 c000b0a:	bd80      	pop	{r7, pc}
 c000b0c:	0c006874 	.word	0x0c006874
 c000b10:	30000294 	.word	0x30000294

0c000b14 <__io_putchar>:

PUTCHAR_PROTOTYPE
{
 c000b14:	b580      	push	{r7, lr}
 c000b16:	b082      	sub	sp, #8
 c000b18:	af00      	add	r7, sp, #0
 c000b1a:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART3 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 c000b1c:	1d39      	adds	r1, r7, #4
 c000b1e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 c000b22:	2201      	movs	r2, #1
 c000b24:	4803      	ldr	r0, [pc, #12]	; (c000b34 <__io_putchar+0x20>)
 c000b26:	f003 ffbf 	bl	c004aa8 <HAL_UART_Transmit>

  return ch;
 c000b2a:	687b      	ldr	r3, [r7, #4]
}
 c000b2c:	4618      	mov	r0, r3
 c000b2e:	3708      	adds	r7, #8
 c000b30:	46bd      	mov	sp, r7
 c000b32:	bd80      	pop	{r7, pc}
 c000b34:	300001c0 	.word	0x300001c0

0c000b38 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 c000b38:	b480      	push	{r7}
 c000b3a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 c000b3c:	b672      	cpsid	i
}
 c000b3e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 c000b40:	e7fe      	b.n	c000b40 <Error_Handler+0x8>
	...

0c000b44 <__acle_se_SECURE_RegisterCallback>:
  * @param  CallbackId  callback identifier
  * @param  func        pointer to non-secure function
  * @retval None
  */
CMSE_NS_ENTRY void SECURE_RegisterCallback(SECURE_CallbackIDTypeDef CallbackId, void *func)
{
 c000b44:	b480      	push	{r7}
 c000b46:	b083      	sub	sp, #12
 c000b48:	af00      	add	r7, sp, #0
 c000b4a:	4603      	mov	r3, r0
 c000b4c:	6039      	str	r1, [r7, #0]
 c000b4e:	71fb      	strb	r3, [r7, #7]
  if(func != NULL)
 c000b50:	683b      	ldr	r3, [r7, #0]
 c000b52:	2b00      	cmp	r3, #0
 c000b54:	d00d      	beq.n	c000b72 <__acle_se_SECURE_RegisterCallback+0x2e>
  {
    switch(CallbackId)
 c000b56:	79fb      	ldrb	r3, [r7, #7]
 c000b58:	2b00      	cmp	r3, #0
 c000b5a:	d002      	beq.n	c000b62 <__acle_se_SECURE_RegisterCallback+0x1e>
 c000b5c:	2b01      	cmp	r3, #1
 c000b5e:	d004      	beq.n	c000b6a <__acle_se_SECURE_RegisterCallback+0x26>
      case GTZC_ERROR_CB_ID:             /* GTZC Interrupt occurred */
        pSecureErrorCallback = func;
        break;
      default:
        /* unknown */
        break;
 c000b60:	e008      	b.n	c000b74 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureFaultCallback = func;
 c000b62:	4a21      	ldr	r2, [pc, #132]	; (c000be8 <__acle_se_SECURE_RegisterCallback+0xa4>)
 c000b64:	683b      	ldr	r3, [r7, #0]
 c000b66:	6013      	str	r3, [r2, #0]
        break;
 c000b68:	e004      	b.n	c000b74 <__acle_se_SECURE_RegisterCallback+0x30>
        pSecureErrorCallback = func;
 c000b6a:	4a20      	ldr	r2, [pc, #128]	; (c000bec <__acle_se_SECURE_RegisterCallback+0xa8>)
 c000b6c:	683b      	ldr	r3, [r7, #0]
 c000b6e:	6013      	str	r3, [r2, #0]
        break;
 c000b70:	e000      	b.n	c000b74 <__acle_se_SECURE_RegisterCallback+0x30>
    }
  }
 c000b72:	bf00      	nop
}
 c000b74:	bf00      	nop
 c000b76:	370c      	adds	r7, #12
 c000b78:	46bd      	mov	sp, r7
 c000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000b7e:	4670      	mov	r0, lr
 c000b80:	4671      	mov	r1, lr
 c000b82:	4672      	mov	r2, lr
 c000b84:	4673      	mov	r3, lr
 c000b86:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c000b8a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c000b8e:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c000b92:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c000b96:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c000b9a:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c000b9e:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c000ba2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c000ba6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c000baa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c000bae:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c000bb2:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c000bb6:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c000bba:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c000bbe:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c000bc2:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c000bc6:	f38e 8c00 	msr	CPSR_fs, lr
 c000bca:	b410      	push	{r4}
 c000bcc:	eef1 ca10 	vmrs	ip, fpscr
 c000bd0:	f64f 7460 	movw	r4, #65376	; 0xff60
 c000bd4:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c000bd8:	ea0c 0c04 	and.w	ip, ip, r4
 c000bdc:	eee1 ca10 	vmsr	fpscr, ip
 c000be0:	bc10      	pop	{r4}
 c000be2:	46f4      	mov	ip, lr
 c000be4:	4774      	bxns	lr
 c000be6:	bf00      	nop
 c000be8:	30000298 	.word	0x30000298
 c000bec:	3000029c 	.word	0x3000029c

0c000bf0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 c000bf0:	b580      	push	{r7, lr}
 c000bf2:	b084      	sub	sp, #16
 c000bf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 c000bf6:	4b15      	ldr	r3, [pc, #84]	; (c000c4c <HAL_MspInit+0x5c>)
 c000bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000bfa:	4a14      	ldr	r2, [pc, #80]	; (c000c4c <HAL_MspInit+0x5c>)
 c000bfc:	f043 0301 	orr.w	r3, r3, #1
 c000c00:	6613      	str	r3, [r2, #96]	; 0x60
 c000c02:	4b12      	ldr	r3, [pc, #72]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c04:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000c06:	f003 0301 	and.w	r3, r3, #1
 c000c0a:	60fb      	str	r3, [r7, #12]
 c000c0c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_PWR_CLK_ENABLE();
 c000c0e:	4b0f      	ldr	r3, [pc, #60]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000c12:	4a0e      	ldr	r2, [pc, #56]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c14:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c000c18:	6593      	str	r3, [r2, #88]	; 0x58
 c000c1a:	4b0c      	ldr	r3, [pc, #48]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000c1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c000c22:	60bb      	str	r3, [r7, #8]
 c000c24:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GTZC_CLK_ENABLE();
 c000c26:	4b09      	ldr	r3, [pc, #36]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000c2a:	4a08      	ldr	r2, [pc, #32]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c2c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 c000c30:	6493      	str	r3, [r2, #72]	; 0x48
 c000c32:	4b06      	ldr	r3, [pc, #24]	; (c000c4c <HAL_MspInit+0x5c>)
 c000c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c000c36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c000c3a:	607b      	str	r3, [r7, #4]
 c000c3c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 c000c3e:	f001 fcf3 	bl	c002628 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 c000c42:	bf00      	nop
 c000c44:	3710      	adds	r7, #16
 c000c46:	46bd      	mov	sp, r7
 c000c48:	bd80      	pop	{r7, pc}
 c000c4a:	bf00      	nop
 c000c4c:	50021000 	.word	0x50021000

0c000c50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 c000c50:	b580      	push	{r7, lr}
 c000c52:	b08c      	sub	sp, #48	; 0x30
 c000c54:	af00      	add	r7, sp, #0
 c000c56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000c58:	f107 031c 	add.w	r3, r7, #28
 c000c5c:	2200      	movs	r2, #0
 c000c5e:	601a      	str	r2, [r3, #0]
 c000c60:	605a      	str	r2, [r3, #4]
 c000c62:	609a      	str	r2, [r3, #8]
 c000c64:	60da      	str	r2, [r3, #12]
 c000c66:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI3)
 c000c68:	687b      	ldr	r3, [r7, #4]
 c000c6a:	681b      	ldr	r3, [r3, #0]
 c000c6c:	4a85      	ldr	r2, [pc, #532]	; (c000e84 <HAL_SPI_MspInit+0x234>)
 c000c6e:	4293      	cmp	r3, r2
 c000c70:	f040 8103 	bne.w	c000e7a <HAL_SPI_MspInit+0x22a>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 c000c74:	4b84      	ldr	r3, [pc, #528]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000c78:	4a83      	ldr	r2, [pc, #524]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 c000c7e:	6593      	str	r3, [r2, #88]	; 0x58
 c000c80:	4b81      	ldr	r3, [pc, #516]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c000c84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c000c88:	61bb      	str	r3, [r7, #24]
 c000c8a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 c000c8c:	4b7e      	ldr	r3, [pc, #504]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c8e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c90:	4a7d      	ldr	r2, [pc, #500]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c92:	f043 0308 	orr.w	r3, r3, #8
 c000c96:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000c98:	4b7b      	ldr	r3, [pc, #492]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000c9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000c9c:	f003 0308 	and.w	r3, r3, #8
 c000ca0:	617b      	str	r3, [r7, #20]
 c000ca2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 c000ca4:	4b78      	ldr	r3, [pc, #480]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000ca6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000ca8:	4a77      	ldr	r2, [pc, #476]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000caa:	f043 0302 	orr.w	r3, r3, #2
 c000cae:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cb0:	4b75      	ldr	r3, [pc, #468]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000cb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cb4:	f003 0302 	and.w	r3, r3, #2
 c000cb8:	613b      	str	r3, [r7, #16]
 c000cba:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 c000cbc:	4b72      	ldr	r3, [pc, #456]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000cbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000cc0:	4a71      	ldr	r2, [pc, #452]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000cc2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c000cc6:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000cc8:	4b6f      	ldr	r3, [pc, #444]	; (c000e88 <HAL_SPI_MspInit+0x238>)
 c000cca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000ccc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c000cd0:	60fb      	str	r3, [r7, #12]
 c000cd2:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 c000cd4:	f001 fc98 	bl	c002608 <HAL_PWREx_EnableVddIO2>
    /**SPI3 GPIO Configuration
    PD6     		 	------> SPI3_MOSI
    PB4 (NJTRST)     	------> SPI3_MISO
    PG9     			------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 c000cd8:	2340      	movs	r3, #64	; 0x40
 c000cda:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000cdc:	2302      	movs	r3, #2
 c000cde:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 c000ce0:	2302      	movs	r3, #2
 c000ce2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000ce4:	2300      	movs	r3, #0
 c000ce6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI3;
 c000ce8:	2305      	movs	r3, #5
 c000cea:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 c000cec:	f107 031c 	add.w	r3, r7, #28
 c000cf0:	4619      	mov	r1, r3
 c000cf2:	4866      	ldr	r0, [pc, #408]	; (c000e8c <HAL_SPI_MspInit+0x23c>)
 c000cf4:	f001 f8c2 	bl	c001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 c000cf8:	2310      	movs	r3, #16
 c000cfa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000cfc:	2302      	movs	r3, #2
 c000cfe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000d00:	2300      	movs	r3, #0
 c000d02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000d04:	2300      	movs	r3, #0
 c000d06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c000d08:	2306      	movs	r3, #6
 c000d0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 c000d0c:	f107 031c 	add.w	r3, r7, #28
 c000d10:	4619      	mov	r1, r3
 c000d12:	485f      	ldr	r0, [pc, #380]	; (c000e90 <HAL_SPI_MspInit+0x240>)
 c000d14:	f001 f8b2 	bl	c001e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 c000d18:	f44f 7300 	mov.w	r3, #512	; 0x200
 c000d1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000d1e:	2302      	movs	r3, #2
 c000d20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000d22:	2300      	movs	r3, #0
 c000d24:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000d26:	2300      	movs	r3, #0
 c000d28:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 c000d2a:	2306      	movs	r3, #6
 c000d2c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 c000d2e:	f107 031c 	add.w	r3, r7, #28
 c000d32:	4619      	mov	r1, r3
 c000d34:	4857      	ldr	r0, [pc, #348]	; (c000e94 <HAL_SPI_MspInit+0x244>)
 c000d36:	f001 f8a1 	bl	c001e7c <HAL_GPIO_Init>

    /* SPI3 DMA Init */
    /* SPI3_TX Init */
    hdma_spi3_tx.Instance = DMA1_Channel4;
 c000d3a:	4b57      	ldr	r3, [pc, #348]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d3c:	4a57      	ldr	r2, [pc, #348]	; (c000e9c <HAL_SPI_MspInit+0x24c>)
 c000d3e:	601a      	str	r2, [r3, #0]
    hdma_spi3_tx.Init.Request = DMA_REQUEST_SPI3_TX;
 c000d40:	4b55      	ldr	r3, [pc, #340]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d42:	2210      	movs	r2, #16
 c000d44:	605a      	str	r2, [r3, #4]
    hdma_spi3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 c000d46:	4b54      	ldr	r3, [pc, #336]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d48:	2210      	movs	r2, #16
 c000d4a:	609a      	str	r2, [r3, #8]
    hdma_spi3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 c000d4c:	4b52      	ldr	r3, [pc, #328]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d4e:	2200      	movs	r2, #0
 c000d50:	60da      	str	r2, [r3, #12]
    hdma_spi3_tx.Init.MemInc = DMA_MINC_ENABLE;
 c000d52:	4b51      	ldr	r3, [pc, #324]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d54:	2280      	movs	r2, #128	; 0x80
 c000d56:	611a      	str	r2, [r3, #16]
    hdma_spi3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000d58:	4b4f      	ldr	r3, [pc, #316]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d5a:	2200      	movs	r2, #0
 c000d5c:	615a      	str	r2, [r3, #20]
    hdma_spi3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000d5e:	4b4e      	ldr	r3, [pc, #312]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d60:	2200      	movs	r2, #0
 c000d62:	619a      	str	r2, [r3, #24]
    hdma_spi3_tx.Init.Mode = DMA_NORMAL;
 c000d64:	4b4c      	ldr	r3, [pc, #304]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d66:	2200      	movs	r2, #0
 c000d68:	61da      	str	r2, [r3, #28]
    hdma_spi3_tx.Init.Priority = DMA_PRIORITY_LOW;
 c000d6a:	4b4b      	ldr	r3, [pc, #300]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d6c:	2200      	movs	r2, #0
 c000d6e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_tx) != HAL_OK)
 c000d70:	4849      	ldr	r0, [pc, #292]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d72:	f000 fd37 	bl	c0017e4 <HAL_DMA_Init>
 c000d76:	4603      	mov	r3, r0
 c000d78:	2b00      	cmp	r3, #0
 c000d7a:	d001      	beq.n	c000d80 <HAL_SPI_MspInit+0x130>
    {
      Error_Handler();
 c000d7c:	f7ff fedc 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000d80:	2110      	movs	r1, #16
 c000d82:	4845      	ldr	r0, [pc, #276]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d84:	f000 ff51 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000d88:	4603      	mov	r3, r0
 c000d8a:	2b00      	cmp	r3, #0
 c000d8c:	d001      	beq.n	c000d92 <HAL_SPI_MspInit+0x142>
    {
      Error_Handler();
 c000d8e:	f7ff fed3 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SEC) != HAL_OK)
 c000d92:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000d96:	4840      	ldr	r0, [pc, #256]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000d98:	f000 ff47 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000d9c:	4603      	mov	r3, r0
 c000d9e:	2b00      	cmp	r3, #0
 c000da0:	d001      	beq.n	c000da6 <HAL_SPI_MspInit+0x156>
    {
      Error_Handler();
 c000da2:	f7ff fec9 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c000da6:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c000daa:	483b      	ldr	r0, [pc, #236]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000dac:	f000 ff3d 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000db0:	4603      	mov	r3, r0
 c000db2:	2b00      	cmp	r3, #0
 c000db4:	d001      	beq.n	c000dba <HAL_SPI_MspInit+0x16a>
    {
      Error_Handler();
 c000db6:	f7ff febf 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_tx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000dba:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000dbe:	4836      	ldr	r0, [pc, #216]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000dc0:	f000 ff33 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000dc4:	4603      	mov	r3, r0
 c000dc6:	2b00      	cmp	r3, #0
 c000dc8:	d001      	beq.n	c000dce <HAL_SPI_MspInit+0x17e>
    {
      Error_Handler();
 c000dca:	f7ff feb5 	bl	c000b38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi3_tx);
 c000dce:	687b      	ldr	r3, [r7, #4]
 c000dd0:	4a31      	ldr	r2, [pc, #196]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000dd2:	655a      	str	r2, [r3, #84]	; 0x54
 c000dd4:	4a30      	ldr	r2, [pc, #192]	; (c000e98 <HAL_SPI_MspInit+0x248>)
 c000dd6:	687b      	ldr	r3, [r7, #4]
 c000dd8:	6293      	str	r3, [r2, #40]	; 0x28

    /* SPI3_RX Init */
    hdma_spi3_rx.Instance = DMA1_Channel5;
 c000dda:	4b31      	ldr	r3, [pc, #196]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000ddc:	4a31      	ldr	r2, [pc, #196]	; (c000ea4 <HAL_SPI_MspInit+0x254>)
 c000dde:	601a      	str	r2, [r3, #0]
    hdma_spi3_rx.Init.Request = DMA_REQUEST_SPI3_RX;
 c000de0:	4b2f      	ldr	r3, [pc, #188]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000de2:	220f      	movs	r2, #15
 c000de4:	605a      	str	r2, [r3, #4]
    hdma_spi3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 c000de6:	4b2e      	ldr	r3, [pc, #184]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000de8:	2200      	movs	r2, #0
 c000dea:	609a      	str	r2, [r3, #8]
    hdma_spi3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 c000dec:	4b2c      	ldr	r3, [pc, #176]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000dee:	2200      	movs	r2, #0
 c000df0:	60da      	str	r2, [r3, #12]
    hdma_spi3_rx.Init.MemInc = DMA_MINC_ENABLE;
 c000df2:	4b2b      	ldr	r3, [pc, #172]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000df4:	2280      	movs	r2, #128	; 0x80
 c000df6:	611a      	str	r2, [r3, #16]
    hdma_spi3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 c000df8:	4b29      	ldr	r3, [pc, #164]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000dfa:	2200      	movs	r2, #0
 c000dfc:	615a      	str	r2, [r3, #20]
    hdma_spi3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 c000dfe:	4b28      	ldr	r3, [pc, #160]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e00:	2200      	movs	r2, #0
 c000e02:	619a      	str	r2, [r3, #24]
    hdma_spi3_rx.Init.Mode = DMA_NORMAL;
 c000e04:	4b26      	ldr	r3, [pc, #152]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e06:	2200      	movs	r2, #0
 c000e08:	61da      	str	r2, [r3, #28]
    hdma_spi3_rx.Init.Priority = DMA_PRIORITY_LOW;
 c000e0a:	4b25      	ldr	r3, [pc, #148]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e0c:	2200      	movs	r2, #0
 c000e0e:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi3_rx) != HAL_OK)
 c000e10:	4823      	ldr	r0, [pc, #140]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e12:	f000 fce7 	bl	c0017e4 <HAL_DMA_Init>
 c000e16:	4603      	mov	r3, r0
 c000e18:	2b00      	cmp	r3, #0
 c000e1a:	d001      	beq.n	c000e20 <HAL_SPI_MspInit+0x1d0>
    {
      Error_Handler();
 c000e1c:	f7ff fe8c 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_NPRIV) != HAL_OK)
 c000e20:	2110      	movs	r1, #16
 c000e22:	481f      	ldr	r0, [pc, #124]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e24:	f000 ff01 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000e28:	4603      	mov	r3, r0
 c000e2a:	2b00      	cmp	r3, #0
 c000e2c:	d001      	beq.n	c000e32 <HAL_SPI_MspInit+0x1e2>
    {
      Error_Handler();
 c000e2e:	f7ff fe83 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SEC) != HAL_OK)
 c000e32:	f04f 1102 	mov.w	r1, #131074	; 0x20002
 c000e36:	481a      	ldr	r0, [pc, #104]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e38:	f000 fef7 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000e3c:	4603      	mov	r3, r0
 c000e3e:	2b00      	cmp	r3, #0
 c000e40:	d001      	beq.n	c000e46 <HAL_SPI_MspInit+0x1f6>
    {
      Error_Handler();
 c000e42:	f7ff fe79 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_SRC_SEC) != HAL_OK)
 c000e46:	f04f 1104 	mov.w	r1, #262148	; 0x40004
 c000e4a:	4815      	ldr	r0, [pc, #84]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e4c:	f000 feed 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000e50:	4603      	mov	r3, r0
 c000e52:	2b00      	cmp	r3, #0
 c000e54:	d001      	beq.n	c000e5a <HAL_SPI_MspInit+0x20a>
    {
      Error_Handler();
 c000e56:	f7ff fe6f 	bl	c000b38 <Error_Handler>
    }

    if (HAL_DMA_ConfigChannelAttributes(&hdma_spi3_rx, DMA_CHANNEL_DEST_SEC) != HAL_OK)
 c000e5a:	f04f 1108 	mov.w	r1, #524296	; 0x80008
 c000e5e:	4810      	ldr	r0, [pc, #64]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e60:	f000 fee3 	bl	c001c2a <HAL_DMA_ConfigChannelAttributes>
 c000e64:	4603      	mov	r3, r0
 c000e66:	2b00      	cmp	r3, #0
 c000e68:	d001      	beq.n	c000e6e <HAL_SPI_MspInit+0x21e>
    {
      Error_Handler();
 c000e6a:	f7ff fe65 	bl	c000b38 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi3_rx);
 c000e6e:	687b      	ldr	r3, [r7, #4]
 c000e70:	4a0b      	ldr	r2, [pc, #44]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e72:	659a      	str	r2, [r3, #88]	; 0x58
 c000e74:	4a0a      	ldr	r2, [pc, #40]	; (c000ea0 <HAL_SPI_MspInit+0x250>)
 c000e76:	687b      	ldr	r3, [r7, #4]
 c000e78:	6293      	str	r3, [r2, #40]	; 0x28
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 c000e7a:	bf00      	nop
 c000e7c:	3730      	adds	r7, #48	; 0x30
 c000e7e:	46bd      	mov	sp, r7
 c000e80:	bd80      	pop	{r7, pc}
 c000e82:	bf00      	nop
 c000e84:	50003c00 	.word	0x50003c00
 c000e88:	50021000 	.word	0x50021000
 c000e8c:	52020c00 	.word	0x52020c00
 c000e90:	52020400 	.word	0x52020400
 c000e94:	52021800 	.word	0x52021800
 c000e98:	300000f0 	.word	0x300000f0
 c000e9c:	50020044 	.word	0x50020044
 c000ea0:	30000158 	.word	0x30000158
 c000ea4:	50020058 	.word	0x50020058

0c000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 c000ea8:	b580      	push	{r7, lr}
 c000eaa:	b0ae      	sub	sp, #184	; 0xb8
 c000eac:	af00      	add	r7, sp, #0
 c000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 c000eb0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000eb4:	2200      	movs	r2, #0
 c000eb6:	601a      	str	r2, [r3, #0]
 c000eb8:	605a      	str	r2, [r3, #4]
 c000eba:	609a      	str	r2, [r3, #8]
 c000ebc:	60da      	str	r2, [r3, #12]
 c000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 c000ec0:	f107 0310 	add.w	r3, r7, #16
 c000ec4:	2294      	movs	r2, #148	; 0x94
 c000ec6:	2100      	movs	r1, #0
 c000ec8:	4618      	mov	r0, r3
 c000eca:	f004 fcbf 	bl	c00584c <memset>
  if(huart->Instance==USART1)
 c000ece:	687b      	ldr	r3, [r7, #4]
 c000ed0:	681b      	ldr	r3, [r3, #0]
 c000ed2:	4a21      	ldr	r2, [pc, #132]	; (c000f58 <HAL_UART_MspInit+0xb0>)
 c000ed4:	4293      	cmp	r3, r2
 c000ed6:	d13b      	bne.n	c000f50 <HAL_UART_MspInit+0xa8>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 c000ed8:	2301      	movs	r3, #1
 c000eda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 c000edc:	2300      	movs	r3, #0
 c000ede:	647b      	str	r3, [r7, #68]	; 0x44
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 c000ee0:	f107 0310 	add.w	r3, r7, #16
 c000ee4:	4618      	mov	r0, r3
 c000ee6:	f002 fb8d 	bl	c003604 <HAL_RCCEx_PeriphCLKConfig>
 c000eea:	4603      	mov	r3, r0
 c000eec:	2b00      	cmp	r3, #0
 c000eee:	d001      	beq.n	c000ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 c000ef0:	f7ff fe22 	bl	c000b38 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 c000ef4:	4b19      	ldr	r3, [pc, #100]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000ef6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000ef8:	4a18      	ldr	r2, [pc, #96]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000efa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c000efe:	6613      	str	r3, [r2, #96]	; 0x60
 c000f00:	4b16      	ldr	r3, [pc, #88]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000f02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c000f04:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c000f08:	60fb      	str	r3, [r7, #12]
 c000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 c000f0c:	4b13      	ldr	r3, [pc, #76]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000f10:	4a12      	ldr	r2, [pc, #72]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000f12:	f043 0301 	orr.w	r3, r3, #1
 c000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 c000f18:	4b10      	ldr	r3, [pc, #64]	; (c000f5c <HAL_UART_MspInit+0xb4>)
 c000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c000f1c:	f003 0301 	and.w	r3, r3, #1
 c000f20:	60bb      	str	r3, [r7, #8]
 c000f22:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = USART1_TX_Pin|USART1_RX_Pin;
 c000f24:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 c000f28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 c000f2c:	2302      	movs	r3, #2
 c000f2e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 c000f32:	2300      	movs	r3, #0
 c000f34:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 c000f38:	2300      	movs	r3, #0
 c000f3a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 c000f3e:	2307      	movs	r3, #7
 c000f40:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 c000f44:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 c000f48:	4619      	mov	r1, r3
 c000f4a:	4805      	ldr	r0, [pc, #20]	; (c000f60 <HAL_UART_MspInit+0xb8>)
 c000f4c:	f000 ff96 	bl	c001e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 c000f50:	bf00      	nop
 c000f52:	37b8      	adds	r7, #184	; 0xb8
 c000f54:	46bd      	mov	sp, r7
 c000f56:	bd80      	pop	{r7, pc}
 c000f58:	50013800 	.word	0x50013800
 c000f5c:	50021000 	.word	0x50021000
 c000f60:	52020000 	.word	0x52020000

0c000f64 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 c000f64:	b480      	push	{r7}
 c000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 c000f68:	e7fe      	b.n	c000f68 <NMI_Handler+0x4>

0c000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 c000f6a:	b480      	push	{r7}
 c000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 c000f6e:	e7fe      	b.n	c000f6e <HardFault_Handler+0x4>

0c000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 c000f70:	b480      	push	{r7}
 c000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 c000f74:	e7fe      	b.n	c000f74 <MemManage_Handler+0x4>

0c000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 c000f76:	b480      	push	{r7}
 c000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 c000f7a:	e7fe      	b.n	c000f7a <BusFault_Handler+0x4>

0c000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 c000f7c:	b480      	push	{r7}
 c000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 c000f80:	e7fe      	b.n	c000f80 <UsageFault_Handler+0x4>

0c000f82 <SecureFault_Handler>:

/**
  * @brief This function handles Secure fault.
  */
void SecureFault_Handler(void)
{
 c000f82:	b480      	push	{r7}
 c000f84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SecureFault_IRQn 0 */

  /* USER CODE END SecureFault_IRQn 0 */
  while (1)
 c000f86:	e7fe      	b.n	c000f86 <SecureFault_Handler+0x4>

0c000f88 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 c000f88:	b480      	push	{r7}
 c000f8a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 c000f8c:	bf00      	nop
 c000f8e:	46bd      	mov	sp, r7
 c000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000f94:	4770      	bx	lr

0c000f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 c000f96:	b480      	push	{r7}
 c000f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 c000f9a:	bf00      	nop
 c000f9c:	46bd      	mov	sp, r7
 c000f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fa2:	4770      	bx	lr

0c000fa4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 c000fa4:	b480      	push	{r7}
 c000fa6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 c000fa8:	bf00      	nop
 c000faa:	46bd      	mov	sp, r7
 c000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 c000fb0:	4770      	bx	lr

0c000fb2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 c000fb2:	b580      	push	{r7, lr}
 c000fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 c000fb6:	f000 fac1 	bl	c00153c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 c000fba:	bf00      	nop
 c000fbc:	bd80      	pop	{r7, pc}
	...

0c000fc0 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 c000fc0:	b580      	push	{r7, lr}
 c000fc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_tx);
 c000fc4:	4802      	ldr	r0, [pc, #8]	; (c000fd0 <DMA1_Channel4_IRQHandler+0x10>)
 c000fc6:	f000 fd30 	bl	c001a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 c000fca:	bf00      	nop
 c000fcc:	bd80      	pop	{r7, pc}
 c000fce:	bf00      	nop
 c000fd0:	300000f0 	.word	0x300000f0

0c000fd4 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 c000fd4:	b580      	push	{r7, lr}
 c000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi3_rx);
 c000fd8:	4802      	ldr	r0, [pc, #8]	; (c000fe4 <DMA1_Channel5_IRQHandler+0x10>)
 c000fda:	f000 fd26 	bl	c001a2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 c000fde:	bf00      	nop
 c000fe0:	bd80      	pop	{r7, pc}
 c000fe2:	bf00      	nop
 c000fe4:	30000158 	.word	0x30000158

0c000fe8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 c000fe8:	b580      	push	{r7, lr}
 c000fea:	b086      	sub	sp, #24
 c000fec:	af00      	add	r7, sp, #0
 c000fee:	60f8      	str	r0, [r7, #12]
 c000ff0:	60b9      	str	r1, [r7, #8]
 c000ff2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c000ff4:	2300      	movs	r3, #0
 c000ff6:	617b      	str	r3, [r7, #20]
 c000ff8:	e00a      	b.n	c001010 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 c000ffa:	e000      	b.n	c000ffe <_read+0x16>
 c000ffc:	bf00      	nop
 c000ffe:	4601      	mov	r1, r0
 c001000:	68bb      	ldr	r3, [r7, #8]
 c001002:	1c5a      	adds	r2, r3, #1
 c001004:	60ba      	str	r2, [r7, #8]
 c001006:	b2ca      	uxtb	r2, r1
 c001008:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00100a:	697b      	ldr	r3, [r7, #20]
 c00100c:	3301      	adds	r3, #1
 c00100e:	617b      	str	r3, [r7, #20]
 c001010:	697a      	ldr	r2, [r7, #20]
 c001012:	687b      	ldr	r3, [r7, #4]
 c001014:	429a      	cmp	r2, r3
 c001016:	dbf0      	blt.n	c000ffa <_read+0x12>
  }

  return len;
 c001018:	687b      	ldr	r3, [r7, #4]
}
 c00101a:	4618      	mov	r0, r3
 c00101c:	3718      	adds	r7, #24
 c00101e:	46bd      	mov	sp, r7
 c001020:	bd80      	pop	{r7, pc}

0c001022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 c001022:	b580      	push	{r7, lr}
 c001024:	b086      	sub	sp, #24
 c001026:	af00      	add	r7, sp, #0
 c001028:	60f8      	str	r0, [r7, #12]
 c00102a:	60b9      	str	r1, [r7, #8]
 c00102c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c00102e:	2300      	movs	r3, #0
 c001030:	617b      	str	r3, [r7, #20]
 c001032:	e009      	b.n	c001048 <_write+0x26>
  {
    __io_putchar(*ptr++);
 c001034:	68bb      	ldr	r3, [r7, #8]
 c001036:	1c5a      	adds	r2, r3, #1
 c001038:	60ba      	str	r2, [r7, #8]
 c00103a:	781b      	ldrb	r3, [r3, #0]
 c00103c:	4618      	mov	r0, r3
 c00103e:	f7ff fd69 	bl	c000b14 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 c001042:	697b      	ldr	r3, [r7, #20]
 c001044:	3301      	adds	r3, #1
 c001046:	617b      	str	r3, [r7, #20]
 c001048:	697a      	ldr	r2, [r7, #20]
 c00104a:	687b      	ldr	r3, [r7, #4]
 c00104c:	429a      	cmp	r2, r3
 c00104e:	dbf1      	blt.n	c001034 <_write+0x12>
  }
  return len;
 c001050:	687b      	ldr	r3, [r7, #4]
}
 c001052:	4618      	mov	r0, r3
 c001054:	3718      	adds	r7, #24
 c001056:	46bd      	mov	sp, r7
 c001058:	bd80      	pop	{r7, pc}

0c00105a <_close>:

int _close(int file)
{
 c00105a:	b480      	push	{r7}
 c00105c:	b083      	sub	sp, #12
 c00105e:	af00      	add	r7, sp, #0
 c001060:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 c001062:	f04f 33ff 	mov.w	r3, #4294967295
}
 c001066:	4618      	mov	r0, r3
 c001068:	370c      	adds	r7, #12
 c00106a:	46bd      	mov	sp, r7
 c00106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001070:	4770      	bx	lr

0c001072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 c001072:	b480      	push	{r7}
 c001074:	b083      	sub	sp, #12
 c001076:	af00      	add	r7, sp, #0
 c001078:	6078      	str	r0, [r7, #4]
 c00107a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 c00107c:	683b      	ldr	r3, [r7, #0]
 c00107e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 c001082:	605a      	str	r2, [r3, #4]
  return 0;
 c001084:	2300      	movs	r3, #0
}
 c001086:	4618      	mov	r0, r3
 c001088:	370c      	adds	r7, #12
 c00108a:	46bd      	mov	sp, r7
 c00108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001090:	4770      	bx	lr

0c001092 <_isatty>:

int _isatty(int file)
{
 c001092:	b480      	push	{r7}
 c001094:	b083      	sub	sp, #12
 c001096:	af00      	add	r7, sp, #0
 c001098:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 c00109a:	2301      	movs	r3, #1
}
 c00109c:	4618      	mov	r0, r3
 c00109e:	370c      	adds	r7, #12
 c0010a0:	46bd      	mov	sp, r7
 c0010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010a6:	4770      	bx	lr

0c0010a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 c0010a8:	b480      	push	{r7}
 c0010aa:	b085      	sub	sp, #20
 c0010ac:	af00      	add	r7, sp, #0
 c0010ae:	60f8      	str	r0, [r7, #12]
 c0010b0:	60b9      	str	r1, [r7, #8]
 c0010b2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 c0010b4:	2300      	movs	r3, #0
}
 c0010b6:	4618      	mov	r0, r3
 c0010b8:	3714      	adds	r7, #20
 c0010ba:	46bd      	mov	sp, r7
 c0010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0010c0:	4770      	bx	lr
	...

0c0010c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 c0010c4:	b580      	push	{r7, lr}
 c0010c6:	b086      	sub	sp, #24
 c0010c8:	af00      	add	r7, sp, #0
 c0010ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 c0010cc:	4a14      	ldr	r2, [pc, #80]	; (c001120 <_sbrk+0x5c>)
 c0010ce:	4b15      	ldr	r3, [pc, #84]	; (c001124 <_sbrk+0x60>)
 c0010d0:	1ad3      	subs	r3, r2, r3
 c0010d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 c0010d4:	697b      	ldr	r3, [r7, #20]
 c0010d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 c0010d8:	4b13      	ldr	r3, [pc, #76]	; (c001128 <_sbrk+0x64>)
 c0010da:	681b      	ldr	r3, [r3, #0]
 c0010dc:	2b00      	cmp	r3, #0
 c0010de:	d102      	bne.n	c0010e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 c0010e0:	4b11      	ldr	r3, [pc, #68]	; (c001128 <_sbrk+0x64>)
 c0010e2:	4a12      	ldr	r2, [pc, #72]	; (c00112c <_sbrk+0x68>)
 c0010e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 c0010e6:	4b10      	ldr	r3, [pc, #64]	; (c001128 <_sbrk+0x64>)
 c0010e8:	681a      	ldr	r2, [r3, #0]
 c0010ea:	687b      	ldr	r3, [r7, #4]
 c0010ec:	4413      	add	r3, r2
 c0010ee:	693a      	ldr	r2, [r7, #16]
 c0010f0:	429a      	cmp	r2, r3
 c0010f2:	d207      	bcs.n	c001104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 c0010f4:	f004 fb80 	bl	c0057f8 <__errno>
 c0010f8:	4603      	mov	r3, r0
 c0010fa:	220c      	movs	r2, #12
 c0010fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 c0010fe:	f04f 33ff 	mov.w	r3, #4294967295
 c001102:	e009      	b.n	c001118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 c001104:	4b08      	ldr	r3, [pc, #32]	; (c001128 <_sbrk+0x64>)
 c001106:	681b      	ldr	r3, [r3, #0]
 c001108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 c00110a:	4b07      	ldr	r3, [pc, #28]	; (c001128 <_sbrk+0x64>)
 c00110c:	681a      	ldr	r2, [r3, #0]
 c00110e:	687b      	ldr	r3, [r7, #4]
 c001110:	4413      	add	r3, r2
 c001112:	4a05      	ldr	r2, [pc, #20]	; (c001128 <_sbrk+0x64>)
 c001114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 c001116:	68fb      	ldr	r3, [r7, #12]
}
 c001118:	4618      	mov	r0, r3
 c00111a:	3718      	adds	r7, #24
 c00111c:	46bd      	mov	sp, r7
 c00111e:	bd80      	pop	{r7, pc}
 c001120:	30018000 	.word	0x30018000
 c001124:	00000400 	.word	0x00000400
 c001128:	300002a0 	.word	0x300002a0
 c00112c:	300002b8 	.word	0x300002b8

0c001130 <TZ_SAU_Setup>:
  \brief   Setup a SAU Region
  \details Writes the region information contained in SAU_Region to the
           registers SAU_RNR, SAU_RBAR, and SAU_RLAR
 */
__STATIC_INLINE void TZ_SAU_Setup (void)
{
 c001130:	b480      	push	{r7}
 c001132:	af00      	add	r7, sp, #0

#if defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U)

  #if defined (SAU_INIT_REGION0) && (SAU_INIT_REGION0 == 1U)
    SAU_INIT_REGION(0);
 c001134:	4b2f      	ldr	r3, [pc, #188]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001136:	2200      	movs	r2, #0
 c001138:	609a      	str	r2, [r3, #8]
 c00113a:	4b2e      	ldr	r3, [pc, #184]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00113c:	4a2e      	ldr	r2, [pc, #184]	; (c0011f8 <TZ_SAU_Setup+0xc8>)
 c00113e:	60da      	str	r2, [r3, #12]
 c001140:	4b2c      	ldr	r3, [pc, #176]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001142:	4a2e      	ldr	r2, [pc, #184]	; (c0011fc <TZ_SAU_Setup+0xcc>)
 c001144:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION1) && (SAU_INIT_REGION1 == 1U)
    SAU_INIT_REGION(1);
 c001146:	4b2b      	ldr	r3, [pc, #172]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001148:	2201      	movs	r2, #1
 c00114a:	609a      	str	r2, [r3, #8]
 c00114c:	4b29      	ldr	r3, [pc, #164]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00114e:	4a2c      	ldr	r2, [pc, #176]	; (c001200 <TZ_SAU_Setup+0xd0>)
 c001150:	60da      	str	r2, [r3, #12]
 c001152:	4b28      	ldr	r3, [pc, #160]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001154:	4a2b      	ldr	r2, [pc, #172]	; (c001204 <TZ_SAU_Setup+0xd4>)
 c001156:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION2) && (SAU_INIT_REGION2 == 1U)
    SAU_INIT_REGION(2);
 c001158:	4b26      	ldr	r3, [pc, #152]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00115a:	2202      	movs	r2, #2
 c00115c:	609a      	str	r2, [r3, #8]
 c00115e:	4b25      	ldr	r3, [pc, #148]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001160:	4a29      	ldr	r2, [pc, #164]	; (c001208 <TZ_SAU_Setup+0xd8>)
 c001162:	60da      	str	r2, [r3, #12]
 c001164:	4b23      	ldr	r3, [pc, #140]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001166:	4a29      	ldr	r2, [pc, #164]	; (c00120c <TZ_SAU_Setup+0xdc>)
 c001168:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION3) && (SAU_INIT_REGION3 == 1U)
    SAU_INIT_REGION(3);
 c00116a:	4b22      	ldr	r3, [pc, #136]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00116c:	2203      	movs	r2, #3
 c00116e:	609a      	str	r2, [r3, #8]
 c001170:	4b20      	ldr	r3, [pc, #128]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001172:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 c001176:	60da      	str	r2, [r3, #12]
 c001178:	4b1e      	ldr	r3, [pc, #120]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00117a:	4a25      	ldr	r2, [pc, #148]	; (c001210 <TZ_SAU_Setup+0xe0>)
 c00117c:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION4) && (SAU_INIT_REGION4 == 1U)
    SAU_INIT_REGION(4);
 c00117e:	4b1d      	ldr	r3, [pc, #116]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001180:	2204      	movs	r2, #4
 c001182:	609a      	str	r2, [r3, #8]
 c001184:	4b1b      	ldr	r3, [pc, #108]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001186:	f04f 42c0 	mov.w	r2, #1610612736	; 0x60000000
 c00118a:	60da      	str	r2, [r3, #12]
 c00118c:	4b19      	ldr	r3, [pc, #100]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00118e:	4a21      	ldr	r2, [pc, #132]	; (c001214 <TZ_SAU_Setup+0xe4>)
 c001190:	611a      	str	r2, [r3, #16]
  #endif

  #if defined (SAU_INIT_REGION5) && (SAU_INIT_REGION5 == 1U)
    SAU_INIT_REGION(5);
 c001192:	4b18      	ldr	r3, [pc, #96]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c001194:	2205      	movs	r2, #5
 c001196:	609a      	str	r2, [r3, #8]
 c001198:	4b16      	ldr	r3, [pc, #88]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c00119a:	4a1f      	ldr	r2, [pc, #124]	; (c001218 <TZ_SAU_Setup+0xe8>)
 c00119c:	60da      	str	r2, [r3, #12]
 c00119e:	4b15      	ldr	r3, [pc, #84]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c0011a0:	4a1e      	ldr	r2, [pc, #120]	; (c00121c <TZ_SAU_Setup+0xec>)
 c0011a2:	611a      	str	r2, [r3, #16]
  /* repeat this for all possible SAU regions */

#endif /* defined (__SAUREGION_PRESENT) && (__SAUREGION_PRESENT == 1U) */

  #if defined (SAU_INIT_CTRL) && (SAU_INIT_CTRL == 1U)
    SAU->CTRL = ((SAU_INIT_CTRL_ENABLE << SAU_CTRL_ENABLE_Pos) & SAU_CTRL_ENABLE_Msk) |
 c0011a4:	4b13      	ldr	r3, [pc, #76]	; (c0011f4 <TZ_SAU_Setup+0xc4>)
 c0011a6:	2201      	movs	r2, #1
 c0011a8:	601a      	str	r2, [r3, #0]
  #endif /* defined (SCB_CSR_AIRCR_INIT) && (SCB_CSR_AIRCR_INIT == 1U) */

  #if defined (__FPU_USED) && (__FPU_USED == 1U) && \
      defined (TZ_FPU_NS_USAGE) && (TZ_FPU_NS_USAGE == 1U)

    SCB->NSACR = (SCB->NSACR & ~(SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk)) |
 c0011aa:	4b1d      	ldr	r3, [pc, #116]	; (c001220 <TZ_SAU_Setup+0xf0>)
 c0011ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c0011b0:	4a1b      	ldr	r2, [pc, #108]	; (c001220 <TZ_SAU_Setup+0xf0>)
 c0011b2:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 c0011b6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                   ((SCB_NSACR_CP10_11_VAL << SCB_NSACR_CP10_Pos) & (SCB_NSACR_CP10_Msk | SCB_NSACR_CP11_Msk));

    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011ba:	4b1a      	ldr	r3, [pc, #104]	; (c001224 <TZ_SAU_Setup+0xf4>)
 c0011bc:	685b      	ldr	r3, [r3, #4]
                   ((FPU_FPCCR_TS_VAL        << FPU_FPCCR_TS_Pos       ) & FPU_FPCCR_TS_Msk       ) |
 c0011be:	f023 53e0 	bic.w	r3, r3, #469762048	; 0x1c000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011c2:	4a18      	ldr	r2, [pc, #96]	; (c001224 <TZ_SAU_Setup+0xf4>)
                   ((FPU_FPCCR_CLRONRETS_VAL << FPU_FPCCR_CLRONRETS_Pos) & FPU_FPCCR_CLRONRETS_Msk) |
 c0011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    FPU->FPCCR = (FPU->FPCCR & ~(FPU_FPCCR_TS_Msk | FPU_FPCCR_CLRONRETS_Msk | FPU_FPCCR_CLRONRET_Msk)) |
 c0011c8:	6053      	str	r3, [r2, #4]
                   ((FPU_FPCCR_CLRONRET_VAL  << FPU_FPCCR_CLRONRET_Pos ) & FPU_FPCCR_CLRONRET_Msk );
  #endif

  #if defined (NVIC_INIT_ITNS0) && (NVIC_INIT_ITNS0 == 1U)
    NVIC->ITNS[0] = NVIC_INIT_ITNS0_VAL;
 c0011ca:	4b17      	ldr	r3, [pc, #92]	; (c001228 <TZ_SAU_Setup+0xf8>)
 c0011cc:	2200      	movs	r2, #0
 c0011ce:	f8c3 2280 	str.w	r2, [r3, #640]	; 0x280
  #endif

  #if defined (NVIC_INIT_ITNS1) && (NVIC_INIT_ITNS1 == 1U)
    NVIC->ITNS[1] = NVIC_INIT_ITNS1_VAL;
 c0011d2:	4b15      	ldr	r3, [pc, #84]	; (c001228 <TZ_SAU_Setup+0xf8>)
 c0011d4:	2200      	movs	r2, #0
 c0011d6:	f8c3 2284 	str.w	r2, [r3, #644]	; 0x284
  #endif

  #if defined (NVIC_INIT_ITNS2) && (NVIC_INIT_ITNS2 == 1U)
    NVIC->ITNS[2] = NVIC_INIT_ITNS2_VAL;
 c0011da:	4b13      	ldr	r3, [pc, #76]	; (c001228 <TZ_SAU_Setup+0xf8>)
 c0011dc:	2200      	movs	r2, #0
 c0011de:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  #endif

  #if defined (NVIC_INIT_ITNS3) && (NVIC_INIT_ITNS3 == 1U)
    NVIC->ITNS[3] = NVIC_INIT_ITNS3_VAL;
 c0011e2:	4b11      	ldr	r3, [pc, #68]	; (c001228 <TZ_SAU_Setup+0xf8>)
 c0011e4:	2200      	movs	r2, #0
 c0011e6:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  #endif

}
 c0011ea:	bf00      	nop
 c0011ec:	46bd      	mov	sp, r7
 c0011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0011f2:	4770      	bx	lr
 c0011f4:	e000edd0 	.word	0xe000edd0
 c0011f8:	0c03e000 	.word	0x0c03e000
 c0011fc:	0c03ffe3 	.word	0x0c03ffe3
 c001200:	08040000 	.word	0x08040000
 c001204:	0807ffe1 	.word	0x0807ffe1
 c001208:	20018000 	.word	0x20018000
 c00120c:	2003ffe1 	.word	0x2003ffe1
 c001210:	4fffffe1 	.word	0x4fffffe1
 c001214:	9fffffe1 	.word	0x9fffffe1
 c001218:	0bf90000 	.word	0x0bf90000
 c00121c:	0bfa8fe1 	.word	0x0bfa8fe1
 c001220:	e000ed00 	.word	0xe000ed00
 c001224:	e000ef30 	.word	0xe000ef30
 c001228:	e000e100 	.word	0xe000e100

0c00122c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 c00122c:	b580      	push	{r7, lr}
 c00122e:	af00      	add	r7, sp, #0
  /* SAU/IDAU, FPU and Interrupts secure/non-secure allocation settings */
  TZ_SAU_Setup();
 c001230:	f7ff ff7e 	bl	c001130 <TZ_SAU_Setup>
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001234:	4b08      	ldr	r3, [pc, #32]	; (c001258 <SystemInit+0x2c>)
 c001236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00123a:	4a07      	ldr	r2, [pc, #28]	; (c001258 <SystemInit+0x2c>)
 c00123c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001240:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  SCB_NS->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 c001244:	4b05      	ldr	r3, [pc, #20]	; (c00125c <SystemInit+0x30>)
 c001246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00124a:	4a04      	ldr	r2, [pc, #16]	; (c00125c <SystemInit+0x30>)
 c00124c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 c001250:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 c001254:	bf00      	nop
 c001256:	bd80      	pop	{r7, pc}
 c001258:	e000ed00 	.word	0xe000ed00
 c00125c:	e002ed00 	.word	0xe002ed00

0c001260 <SystemCoreClockUpdate>:
  *           value for HSE crystal.
  *
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 c001260:	b480      	push	{r7}
 c001262:	b087      	sub	sp, #28
 c001264:	af00      	add	r7, sp, #0
  uint32_t tmp, msirange, pllvco, pllsource, pllm, pllr;

  /* Get MSI Range frequency--------------------------------------------------*/
  if((RCC->CR & RCC_CR_MSIRGSEL) == 0U)
 c001266:	4b4f      	ldr	r3, [pc, #316]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001268:	681b      	ldr	r3, [r3, #0]
 c00126a:	f003 0308 	and.w	r3, r3, #8
 c00126e:	2b00      	cmp	r3, #0
 c001270:	d107      	bne.n	c001282 <SystemCoreClockUpdate+0x22>
  { /* MSISRANGE from RCC_CSR applies */
    msirange = (RCC->CSR & RCC_CSR_MSISRANGE) >> 8U;
 c001272:	4b4c      	ldr	r3, [pc, #304]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001274:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c001278:	0a1b      	lsrs	r3, r3, #8
 c00127a:	f003 030f 	and.w	r3, r3, #15
 c00127e:	617b      	str	r3, [r7, #20]
 c001280:	e005      	b.n	c00128e <SystemCoreClockUpdate+0x2e>
  }
  else
  { /* MSIRANGE from RCC_CR applies */
    msirange = (RCC->CR & RCC_CR_MSIRANGE) >> 4U;
 c001282:	4b48      	ldr	r3, [pc, #288]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001284:	681b      	ldr	r3, [r3, #0]
 c001286:	091b      	lsrs	r3, r3, #4
 c001288:	f003 030f 	and.w	r3, r3, #15
 c00128c:	617b      	str	r3, [r7, #20]
  }
  /*MSI frequency range in HZ*/
  msirange = MSIRangeTable[msirange];
 c00128e:	4a46      	ldr	r2, [pc, #280]	; (c0013a8 <SystemCoreClockUpdate+0x148>)
 c001290:	697b      	ldr	r3, [r7, #20]
 c001292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001296:	617b      	str	r3, [r7, #20]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 c001298:	4b42      	ldr	r3, [pc, #264]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c00129a:	689b      	ldr	r3, [r3, #8]
 c00129c:	f003 030c 	and.w	r3, r3, #12
 c0012a0:	2b0c      	cmp	r3, #12
 c0012a2:	d866      	bhi.n	c001372 <SystemCoreClockUpdate+0x112>
 c0012a4:	a201      	add	r2, pc, #4	; (adr r2, c0012ac <SystemCoreClockUpdate+0x4c>)
 c0012a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0012aa:	bf00      	nop
 c0012ac:	0c0012e1 	.word	0x0c0012e1
 c0012b0:	0c001373 	.word	0x0c001373
 c0012b4:	0c001373 	.word	0x0c001373
 c0012b8:	0c001373 	.word	0x0c001373
 c0012bc:	0c0012e9 	.word	0x0c0012e9
 c0012c0:	0c001373 	.word	0x0c001373
 c0012c4:	0c001373 	.word	0x0c001373
 c0012c8:	0c001373 	.word	0x0c001373
 c0012cc:	0c0012f1 	.word	0x0c0012f1
 c0012d0:	0c001373 	.word	0x0c001373
 c0012d4:	0c001373 	.word	0x0c001373
 c0012d8:	0c001373 	.word	0x0c001373
 c0012dc:	0c0012f9 	.word	0x0c0012f9
  {
    case 0x00:  /* MSI used as system clock source */
      SystemCoreClock = msirange;
 c0012e0:	4a32      	ldr	r2, [pc, #200]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c0012e2:	697b      	ldr	r3, [r7, #20]
 c0012e4:	6013      	str	r3, [r2, #0]
      break;
 c0012e6:	e048      	b.n	c00137a <SystemCoreClockUpdate+0x11a>

    case 0x04:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 c0012e8:	4b30      	ldr	r3, [pc, #192]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c0012ea:	4a31      	ldr	r2, [pc, #196]	; (c0013b0 <SystemCoreClockUpdate+0x150>)
 c0012ec:	601a      	str	r2, [r3, #0]
      break;
 c0012ee:	e044      	b.n	c00137a <SystemCoreClockUpdate+0x11a>

    case 0x08:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 c0012f0:	4b2e      	ldr	r3, [pc, #184]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c0012f2:	4a30      	ldr	r2, [pc, #192]	; (c0013b4 <SystemCoreClockUpdate+0x154>)
 c0012f4:	601a      	str	r2, [r3, #0]
      break;
 c0012f6:	e040      	b.n	c00137a <SystemCoreClockUpdate+0x11a>

    case 0x0C:  /* PLL used as system clock  source */
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
         SYSCLK = PLL_VCO / PLLR
         */
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c0012f8:	4b2a      	ldr	r3, [pc, #168]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c0012fa:	68db      	ldr	r3, [r3, #12]
 c0012fc:	f003 0303 	and.w	r3, r3, #3
 c001300:	60fb      	str	r3, [r7, #12]
      pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> 4U) + 1U ;
 c001302:	4b28      	ldr	r3, [pc, #160]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001304:	68db      	ldr	r3, [r3, #12]
 c001306:	091b      	lsrs	r3, r3, #4
 c001308:	f003 030f 	and.w	r3, r3, #15
 c00130c:	3301      	adds	r3, #1
 c00130e:	60bb      	str	r3, [r7, #8]
 c001310:	68fb      	ldr	r3, [r7, #12]
 c001312:	2b02      	cmp	r3, #2
 c001314:	d003      	beq.n	c00131e <SystemCoreClockUpdate+0xbe>
 c001316:	68fb      	ldr	r3, [r7, #12]
 c001318:	2b03      	cmp	r3, #3
 c00131a:	d006      	beq.n	c00132a <SystemCoreClockUpdate+0xca>
 c00131c:	e00b      	b.n	c001336 <SystemCoreClockUpdate+0xd6>

      switch (pllsource)
      {
        case 0x02:  /* HSI used as PLL clock source */
          pllvco = (HSI_VALUE / pllm);
 c00131e:	4a24      	ldr	r2, [pc, #144]	; (c0013b0 <SystemCoreClockUpdate+0x150>)
 c001320:	68bb      	ldr	r3, [r7, #8]
 c001322:	fbb2 f3f3 	udiv	r3, r2, r3
 c001326:	613b      	str	r3, [r7, #16]
          break;
 c001328:	e00b      	b.n	c001342 <SystemCoreClockUpdate+0xe2>

        case 0x03:  /* HSE used as PLL clock source */
          pllvco = (HSE_VALUE / pllm);
 c00132a:	4a22      	ldr	r2, [pc, #136]	; (c0013b4 <SystemCoreClockUpdate+0x154>)
 c00132c:	68bb      	ldr	r3, [r7, #8]
 c00132e:	fbb2 f3f3 	udiv	r3, r2, r3
 c001332:	613b      	str	r3, [r7, #16]
          break;
 c001334:	e005      	b.n	c001342 <SystemCoreClockUpdate+0xe2>

        default:    /* MSI used as PLL clock source */
          pllvco = (msirange / pllm);
 c001336:	697a      	ldr	r2, [r7, #20]
 c001338:	68bb      	ldr	r3, [r7, #8]
 c00133a:	fbb2 f3f3 	udiv	r3, r2, r3
 c00133e:	613b      	str	r3, [r7, #16]
          break;
 c001340:	bf00      	nop
      }
      pllvco = pllvco * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 8U);
 c001342:	4b18      	ldr	r3, [pc, #96]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001344:	68db      	ldr	r3, [r3, #12]
 c001346:	0a1b      	lsrs	r3, r3, #8
 c001348:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 c00134c:	693b      	ldr	r3, [r7, #16]
 c00134e:	fb02 f303 	mul.w	r3, r2, r3
 c001352:	613b      	str	r3, [r7, #16]
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 25U) + 1U) * 2U;
 c001354:	4b13      	ldr	r3, [pc, #76]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c001356:	68db      	ldr	r3, [r3, #12]
 c001358:	0e5b      	lsrs	r3, r3, #25
 c00135a:	f003 0303 	and.w	r3, r3, #3
 c00135e:	3301      	adds	r3, #1
 c001360:	005b      	lsls	r3, r3, #1
 c001362:	607b      	str	r3, [r7, #4]
      SystemCoreClock = pllvco/pllr;
 c001364:	693a      	ldr	r2, [r7, #16]
 c001366:	687b      	ldr	r3, [r7, #4]
 c001368:	fbb2 f3f3 	udiv	r3, r2, r3
 c00136c:	4a0f      	ldr	r2, [pc, #60]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c00136e:	6013      	str	r3, [r2, #0]
      break;
 c001370:	e003      	b.n	c00137a <SystemCoreClockUpdate+0x11a>

    default:
      SystemCoreClock = msirange;
 c001372:	4a0e      	ldr	r2, [pc, #56]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c001374:	697b      	ldr	r3, [r7, #20]
 c001376:	6013      	str	r3, [r2, #0]
      break;
 c001378:	bf00      	nop
  }
  /* Compute HCLK clock frequency --------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4U)];
 c00137a:	4b0a      	ldr	r3, [pc, #40]	; (c0013a4 <SystemCoreClockUpdate+0x144>)
 c00137c:	689b      	ldr	r3, [r3, #8]
 c00137e:	091b      	lsrs	r3, r3, #4
 c001380:	f003 030f 	and.w	r3, r3, #15
 c001384:	4a0c      	ldr	r2, [pc, #48]	; (c0013b8 <SystemCoreClockUpdate+0x158>)
 c001386:	5cd3      	ldrb	r3, [r2, r3]
 c001388:	603b      	str	r3, [r7, #0]
  /* HCLK clock frequency */
  SystemCoreClock >>= tmp;
 c00138a:	4b08      	ldr	r3, [pc, #32]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c00138c:	681a      	ldr	r2, [r3, #0]
 c00138e:	683b      	ldr	r3, [r7, #0]
 c001390:	fa22 f303 	lsr.w	r3, r2, r3
 c001394:	4a05      	ldr	r2, [pc, #20]	; (c0013ac <SystemCoreClockUpdate+0x14c>)
 c001396:	6013      	str	r3, [r2, #0]
}
 c001398:	bf00      	nop
 c00139a:	371c      	adds	r7, #28
 c00139c:	46bd      	mov	sp, r7
 c00139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0013a2:	4770      	bx	lr
 c0013a4:	50021000 	.word	0x50021000
 c0013a8:	0c0068a8 	.word	0x0c0068a8
 c0013ac:	30000000 	.word	0x30000000
 c0013b0:	00f42400 	.word	0x00f42400
 c0013b4:	007a1200 	.word	0x007a1200
 c0013b8:	0c006890 	.word	0x0c006890

0c0013bc <__acle_se_SECURE_SystemCoreClockUpdate>:
  *         be used by the user application to setup the SysTick timer or configure
  *         other parameters.
  * @retval SystemCoreClock value (HCLK)
  */
CMSE_NS_ENTRY uint32_t SECURE_SystemCoreClockUpdate(void)
{
 c0013bc:	b580      	push	{r7, lr}
 c0013be:	af00      	add	r7, sp, #0
  SystemCoreClockUpdate();
 c0013c0:	f7ff ff4e 	bl	c001260 <SystemCoreClockUpdate>
  
  return SystemCoreClock;
 c0013c4:	4b1c      	ldr	r3, [pc, #112]	; (c001438 <__acle_se_SECURE_SystemCoreClockUpdate+0x7c>)
 c0013c6:	681b      	ldr	r3, [r3, #0]
}
 c0013c8:	4618      	mov	r0, r3
 c0013ca:	46bd      	mov	sp, r7
 c0013cc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 c0013d0:	4671      	mov	r1, lr
 c0013d2:	4672      	mov	r2, lr
 c0013d4:	4673      	mov	r3, lr
 c0013d6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 c0013da:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 c0013de:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 c0013e2:	eef7 1a00 	vmov.f32	s3, #112	; 0x3f800000  1.0
 c0013e6:	eeb7 2a00 	vmov.f32	s4, #112	; 0x3f800000  1.0
 c0013ea:	eef7 2a00 	vmov.f32	s5, #112	; 0x3f800000  1.0
 c0013ee:	eeb7 3a00 	vmov.f32	s6, #112	; 0x3f800000  1.0
 c0013f2:	eef7 3a00 	vmov.f32	s7, #112	; 0x3f800000  1.0
 c0013f6:	eeb7 4a00 	vmov.f32	s8, #112	; 0x3f800000  1.0
 c0013fa:	eef7 4a00 	vmov.f32	s9, #112	; 0x3f800000  1.0
 c0013fe:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 c001402:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 c001406:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 c00140a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 c00140e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 c001412:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 c001416:	f38e 8c00 	msr	CPSR_fs, lr
 c00141a:	b410      	push	{r4}
 c00141c:	eef1 ca10 	vmrs	ip, fpscr
 c001420:	f64f 7460 	movw	r4, #65376	; 0xff60
 c001424:	f6c0 74ff 	movt	r4, #4095	; 0xfff
 c001428:	ea0c 0c04 	and.w	ip, ip, r4
 c00142c:	eee1 ca10 	vmsr	fpscr, ip
 c001430:	bc10      	pop	{r4}
 c001432:	46f4      	mov	ip, lr
 c001434:	4774      	bxns	lr
 c001436:	bf00      	nop
 c001438:	30000000 	.word	0x30000000

0c00143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* set stack pointer */
 c00143c:	f8df d034 	ldr.w	sp, [pc, #52]	; c001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
  bl  SystemInit
 c001440:	f7ff fef4 	bl	c00122c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 c001444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 c001446:	e003      	b.n	c001450 <LoopCopyDataInit>

0c001448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 c001448:	4b0b      	ldr	r3, [pc, #44]	; (c001478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 c00144a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 c00144c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 c00144e:	3104      	adds	r1, #4

0c001450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 c001450:	480a      	ldr	r0, [pc, #40]	; (c00147c <LoopForever+0xa>)
	ldr	r3, =_edata
 c001452:	4b0b      	ldr	r3, [pc, #44]	; (c001480 <LoopForever+0xe>)
	adds	r2, r0, r1
 c001454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 c001456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 c001458:	d3f6      	bcc.n	c001448 <CopyDataInit>
	ldr	r2, =_sbss
 c00145a:	4a0a      	ldr	r2, [pc, #40]	; (c001484 <LoopForever+0x12>)
	b	LoopFillZerobss
 c00145c:	e002      	b.n	c001464 <LoopFillZerobss>

0c00145e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 c00145e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 c001460:	f842 3b04 	str.w	r3, [r2], #4

0c001464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 c001464:	4b08      	ldr	r3, [pc, #32]	; (c001488 <LoopForever+0x16>)
	cmp	r2, r3
 c001466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 c001468:	d3f9      	bcc.n	c00145e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 c00146a:	f004 f9cb 	bl	c005804 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 c00146e:	f7ff f871 	bl	c000554 <main>

0c001472 <LoopForever>:

LoopForever:
    b LoopForever
 c001472:	e7fe      	b.n	c001472 <LoopForever>
  ldr   sp, =_estack    /* set stack pointer */
 c001474:	30018000 	.word	0x30018000
	ldr	r3, =_sidata
 c001478:	0c0069b8 	.word	0x0c0069b8
	ldr	r0, =_sdata
 c00147c:	30000000 	.word	0x30000000
	ldr	r3, =_edata
 c001480:	30000070 	.word	0x30000070
	ldr	r2, =_sbss
 c001484:	30000070 	.word	0x30000070
	ldr	r3, = _ebss
 c001488:	300002b8 	.word	0x300002b8

0c00148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 c00148c:	e7fe      	b.n	c00148c <ADC1_2_IRQHandler>

0c00148e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 c00148e:	b580      	push	{r7, lr}
 c001490:	b082      	sub	sp, #8
 c001492:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 c001494:	2300      	movs	r3, #0
 c001496:	71fb      	strb	r3, [r7, #7]

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 c001498:	2004      	movs	r0, #4
 c00149a:	f000 f963 	bl	c001764 <HAL_NVIC_SetPriorityGrouping>

  /* Insure time base clock coherency */
  SystemCoreClockUpdate();
 c00149e:	f7ff fedf 	bl	c001260 <SystemCoreClockUpdate>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 c0014a2:	2000      	movs	r0, #0
 c0014a4:	f000 f80e 	bl	c0014c4 <HAL_InitTick>
 c0014a8:	4603      	mov	r3, r0
 c0014aa:	2b00      	cmp	r3, #0
 c0014ac:	d002      	beq.n	c0014b4 <HAL_Init+0x26>
  {
    status = HAL_ERROR;
 c0014ae:	2301      	movs	r3, #1
 c0014b0:	71fb      	strb	r3, [r7, #7]
 c0014b2:	e001      	b.n	c0014b8 <HAL_Init+0x2a>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 c0014b4:	f7ff fb9c 	bl	c000bf0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 c0014b8:	79fb      	ldrb	r3, [r7, #7]
}
 c0014ba:	4618      	mov	r0, r3
 c0014bc:	3708      	adds	r7, #8
 c0014be:	46bd      	mov	sp, r7
 c0014c0:	bd80      	pop	{r7, pc}
	...

0c0014c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 c0014c4:	b580      	push	{r7, lr}
 c0014c6:	b084      	sub	sp, #16
 c0014c8:	af00      	add	r7, sp, #0
 c0014ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 c0014cc:	2300      	movs	r3, #0
 c0014ce:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 c0014d0:	4b17      	ldr	r3, [pc, #92]	; (c001530 <HAL_InitTick+0x6c>)
 c0014d2:	781b      	ldrb	r3, [r3, #0]
 c0014d4:	2b00      	cmp	r3, #0
 c0014d6:	d023      	beq.n	c001520 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 c0014d8:	4b16      	ldr	r3, [pc, #88]	; (c001534 <HAL_InitTick+0x70>)
 c0014da:	681a      	ldr	r2, [r3, #0]
 c0014dc:	4b14      	ldr	r3, [pc, #80]	; (c001530 <HAL_InitTick+0x6c>)
 c0014de:	781b      	ldrb	r3, [r3, #0]
 c0014e0:	4619      	mov	r1, r3
 c0014e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 c0014e6:	fbb3 f3f1 	udiv	r3, r3, r1
 c0014ea:	fbb2 f3f3 	udiv	r3, r2, r3
 c0014ee:	4618      	mov	r0, r3
 c0014f0:	f000 f96b 	bl	c0017ca <HAL_SYSTICK_Config>
 c0014f4:	4603      	mov	r3, r0
 c0014f6:	2b00      	cmp	r3, #0
 c0014f8:	d10f      	bne.n	c00151a <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 c0014fa:	687b      	ldr	r3, [r7, #4]
 c0014fc:	2b07      	cmp	r3, #7
 c0014fe:	d809      	bhi.n	c001514 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 c001500:	2200      	movs	r2, #0
 c001502:	6879      	ldr	r1, [r7, #4]
 c001504:	f04f 30ff 	mov.w	r0, #4294967295
 c001508:	f000 f937 	bl	c00177a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 c00150c:	4a0a      	ldr	r2, [pc, #40]	; (c001538 <HAL_InitTick+0x74>)
 c00150e:	687b      	ldr	r3, [r7, #4]
 c001510:	6013      	str	r3, [r2, #0]
 c001512:	e007      	b.n	c001524 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 c001514:	2301      	movs	r3, #1
 c001516:	73fb      	strb	r3, [r7, #15]
 c001518:	e004      	b.n	c001524 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 c00151a:	2301      	movs	r3, #1
 c00151c:	73fb      	strb	r3, [r7, #15]
 c00151e:	e001      	b.n	c001524 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 c001520:	2301      	movs	r3, #1
 c001522:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 c001524:	7bfb      	ldrb	r3, [r7, #15]
}
 c001526:	4618      	mov	r0, r3
 c001528:	3710      	adds	r7, #16
 c00152a:	46bd      	mov	sp, r7
 c00152c:	bd80      	pop	{r7, pc}
 c00152e:	bf00      	nop
 c001530:	30000008 	.word	0x30000008
 c001534:	30000000 	.word	0x30000000
 c001538:	30000004 	.word	0x30000004

0c00153c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 c00153c:	b480      	push	{r7}
 c00153e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 c001540:	4b06      	ldr	r3, [pc, #24]	; (c00155c <HAL_IncTick+0x20>)
 c001542:	781b      	ldrb	r3, [r3, #0]
 c001544:	461a      	mov	r2, r3
 c001546:	4b06      	ldr	r3, [pc, #24]	; (c001560 <HAL_IncTick+0x24>)
 c001548:	681b      	ldr	r3, [r3, #0]
 c00154a:	4413      	add	r3, r2
 c00154c:	4a04      	ldr	r2, [pc, #16]	; (c001560 <HAL_IncTick+0x24>)
 c00154e:	6013      	str	r3, [r2, #0]
}
 c001550:	bf00      	nop
 c001552:	46bd      	mov	sp, r7
 c001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001558:	4770      	bx	lr
 c00155a:	bf00      	nop
 c00155c:	30000008 	.word	0x30000008
 c001560:	300002a4 	.word	0x300002a4

0c001564 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 c001564:	b480      	push	{r7}
 c001566:	af00      	add	r7, sp, #0
  return uwTick;
 c001568:	4b03      	ldr	r3, [pc, #12]	; (c001578 <HAL_GetTick+0x14>)
 c00156a:	681b      	ldr	r3, [r3, #0]
}
 c00156c:	4618      	mov	r0, r3
 c00156e:	46bd      	mov	sp, r7
 c001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001574:	4770      	bx	lr
 c001576:	bf00      	nop
 c001578:	300002a4 	.word	0x300002a4

0c00157c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 c00157c:	b580      	push	{r7, lr}
 c00157e:	b084      	sub	sp, #16
 c001580:	af00      	add	r7, sp, #0
 c001582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 c001584:	f7ff ffee 	bl	c001564 <HAL_GetTick>
 c001588:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 c00158a:	687b      	ldr	r3, [r7, #4]
 c00158c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 c00158e:	68fb      	ldr	r3, [r7, #12]
 c001590:	f1b3 3fff 	cmp.w	r3, #4294967295
 c001594:	d005      	beq.n	c0015a2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 c001596:	4b0a      	ldr	r3, [pc, #40]	; (c0015c0 <HAL_Delay+0x44>)
 c001598:	781b      	ldrb	r3, [r3, #0]
 c00159a:	461a      	mov	r2, r3
 c00159c:	68fb      	ldr	r3, [r7, #12]
 c00159e:	4413      	add	r3, r2
 c0015a0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 c0015a2:	bf00      	nop
 c0015a4:	f7ff ffde 	bl	c001564 <HAL_GetTick>
 c0015a8:	4602      	mov	r2, r0
 c0015aa:	68bb      	ldr	r3, [r7, #8]
 c0015ac:	1ad3      	subs	r3, r2, r3
 c0015ae:	68fa      	ldr	r2, [r7, #12]
 c0015b0:	429a      	cmp	r2, r3
 c0015b2:	d8f7      	bhi.n	c0015a4 <HAL_Delay+0x28>
  {
  }
}
 c0015b4:	bf00      	nop
 c0015b6:	bf00      	nop
 c0015b8:	3710      	adds	r7, #16
 c0015ba:	46bd      	mov	sp, r7
 c0015bc:	bd80      	pop	{r7, pc}
 c0015be:	bf00      	nop
 c0015c0:	30000008 	.word	0x30000008

0c0015c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c0015c4:	b480      	push	{r7}
 c0015c6:	b085      	sub	sp, #20
 c0015c8:	af00      	add	r7, sp, #0
 c0015ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 c0015cc:	687b      	ldr	r3, [r7, #4]
 c0015ce:	f003 0307 	and.w	r3, r3, #7
 c0015d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 c0015d4:	4b0c      	ldr	r3, [pc, #48]	; (c001608 <__NVIC_SetPriorityGrouping+0x44>)
 c0015d6:	68db      	ldr	r3, [r3, #12]
 c0015d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 c0015da:	68ba      	ldr	r2, [r7, #8]
 c0015dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 c0015e0:	4013      	ands	r3, r2
 c0015e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 c0015e4:	68fb      	ldr	r3, [r7, #12]
 c0015e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 c0015e8:	68bb      	ldr	r3, [r7, #8]
 c0015ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 c0015ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 c0015f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c0015f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 c0015f6:	4a04      	ldr	r2, [pc, #16]	; (c001608 <__NVIC_SetPriorityGrouping+0x44>)
 c0015f8:	68bb      	ldr	r3, [r7, #8]
 c0015fa:	60d3      	str	r3, [r2, #12]
}
 c0015fc:	bf00      	nop
 c0015fe:	3714      	adds	r7, #20
 c001600:	46bd      	mov	sp, r7
 c001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001606:	4770      	bx	lr
 c001608:	e000ed00 	.word	0xe000ed00

0c00160c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 c00160c:	b480      	push	{r7}
 c00160e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 c001610:	4b04      	ldr	r3, [pc, #16]	; (c001624 <__NVIC_GetPriorityGrouping+0x18>)
 c001612:	68db      	ldr	r3, [r3, #12]
 c001614:	0a1b      	lsrs	r3, r3, #8
 c001616:	f003 0307 	and.w	r3, r3, #7
}
 c00161a:	4618      	mov	r0, r3
 c00161c:	46bd      	mov	sp, r7
 c00161e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001622:	4770      	bx	lr
 c001624:	e000ed00 	.word	0xe000ed00

0c001628 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c001628:	b480      	push	{r7}
 c00162a:	b083      	sub	sp, #12
 c00162c:	af00      	add	r7, sp, #0
 c00162e:	4603      	mov	r3, r0
 c001630:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001632:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001636:	2b00      	cmp	r3, #0
 c001638:	db0b      	blt.n	c001652 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 c00163a:	79fb      	ldrb	r3, [r7, #7]
 c00163c:	f003 021f 	and.w	r2, r3, #31
 c001640:	4907      	ldr	r1, [pc, #28]	; (c001660 <__NVIC_EnableIRQ+0x38>)
 c001642:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001646:	095b      	lsrs	r3, r3, #5
 c001648:	2001      	movs	r0, #1
 c00164a:	fa00 f202 	lsl.w	r2, r0, r2
 c00164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 c001652:	bf00      	nop
 c001654:	370c      	adds	r7, #12
 c001656:	46bd      	mov	sp, r7
 c001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00165c:	4770      	bx	lr
 c00165e:	bf00      	nop
 c001660:	e000e100 	.word	0xe000e100

0c001664 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 c001664:	b480      	push	{r7}
 c001666:	b083      	sub	sp, #12
 c001668:	af00      	add	r7, sp, #0
 c00166a:	4603      	mov	r3, r0
 c00166c:	6039      	str	r1, [r7, #0]
 c00166e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 c001670:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001674:	2b00      	cmp	r3, #0
 c001676:	db0a      	blt.n	c00168e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IPR[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c001678:	683b      	ldr	r3, [r7, #0]
 c00167a:	b2da      	uxtb	r2, r3
 c00167c:	490c      	ldr	r1, [pc, #48]	; (c0016b0 <__NVIC_SetPriority+0x4c>)
 c00167e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c001682:	0152      	lsls	r2, r2, #5
 c001684:	b2d2      	uxtb	r2, r2
 c001686:	440b      	add	r3, r1
 c001688:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 c00168c:	e00a      	b.n	c0016a4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 c00168e:	683b      	ldr	r3, [r7, #0]
 c001690:	b2da      	uxtb	r2, r3
 c001692:	4908      	ldr	r1, [pc, #32]	; (c0016b4 <__NVIC_SetPriority+0x50>)
 c001694:	79fb      	ldrb	r3, [r7, #7]
 c001696:	f003 030f 	and.w	r3, r3, #15
 c00169a:	3b04      	subs	r3, #4
 c00169c:	0152      	lsls	r2, r2, #5
 c00169e:	b2d2      	uxtb	r2, r2
 c0016a0:	440b      	add	r3, r1
 c0016a2:	761a      	strb	r2, [r3, #24]
}
 c0016a4:	bf00      	nop
 c0016a6:	370c      	adds	r7, #12
 c0016a8:	46bd      	mov	sp, r7
 c0016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0016ae:	4770      	bx	lr
 c0016b0:	e000e100 	.word	0xe000e100
 c0016b4:	e000ed00 	.word	0xe000ed00

0c0016b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c0016b8:	b480      	push	{r7}
 c0016ba:	b089      	sub	sp, #36	; 0x24
 c0016bc:	af00      	add	r7, sp, #0
 c0016be:	60f8      	str	r0, [r7, #12]
 c0016c0:	60b9      	str	r1, [r7, #8]
 c0016c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 c0016c4:	68fb      	ldr	r3, [r7, #12]
 c0016c6:	f003 0307 	and.w	r3, r3, #7
 c0016ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 c0016cc:	69fb      	ldr	r3, [r7, #28]
 c0016ce:	f1c3 0307 	rsb	r3, r3, #7
 c0016d2:	2b03      	cmp	r3, #3
 c0016d4:	bf28      	it	cs
 c0016d6:	2303      	movcs	r3, #3
 c0016d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 c0016da:	69fb      	ldr	r3, [r7, #28]
 c0016dc:	3303      	adds	r3, #3
 c0016de:	2b06      	cmp	r3, #6
 c0016e0:	d902      	bls.n	c0016e8 <NVIC_EncodePriority+0x30>
 c0016e2:	69fb      	ldr	r3, [r7, #28]
 c0016e4:	3b04      	subs	r3, #4
 c0016e6:	e000      	b.n	c0016ea <NVIC_EncodePriority+0x32>
 c0016e8:	2300      	movs	r3, #0
 c0016ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c0016ec:	f04f 32ff 	mov.w	r2, #4294967295
 c0016f0:	69bb      	ldr	r3, [r7, #24]
 c0016f2:	fa02 f303 	lsl.w	r3, r2, r3
 c0016f6:	43da      	mvns	r2, r3
 c0016f8:	68bb      	ldr	r3, [r7, #8]
 c0016fa:	401a      	ands	r2, r3
 c0016fc:	697b      	ldr	r3, [r7, #20]
 c0016fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 c001700:	f04f 31ff 	mov.w	r1, #4294967295
 c001704:	697b      	ldr	r3, [r7, #20]
 c001706:	fa01 f303 	lsl.w	r3, r1, r3
 c00170a:	43d9      	mvns	r1, r3
 c00170c:	687b      	ldr	r3, [r7, #4]
 c00170e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 c001710:	4313      	orrs	r3, r2
         );
}
 c001712:	4618      	mov	r0, r3
 c001714:	3724      	adds	r7, #36	; 0x24
 c001716:	46bd      	mov	sp, r7
 c001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00171c:	4770      	bx	lr
	...

0c001720 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 c001720:	b580      	push	{r7, lr}
 c001722:	b082      	sub	sp, #8
 c001724:	af00      	add	r7, sp, #0
 c001726:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 c001728:	687b      	ldr	r3, [r7, #4]
 c00172a:	3b01      	subs	r3, #1
 c00172c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c001730:	d301      	bcc.n	c001736 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 c001732:	2301      	movs	r3, #1
 c001734:	e00f      	b.n	c001756 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 c001736:	4a0a      	ldr	r2, [pc, #40]	; (c001760 <SysTick_Config+0x40>)
 c001738:	687b      	ldr	r3, [r7, #4]
 c00173a:	3b01      	subs	r3, #1
 c00173c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 c00173e:	2107      	movs	r1, #7
 c001740:	f04f 30ff 	mov.w	r0, #4294967295
 c001744:	f7ff ff8e 	bl	c001664 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 c001748:	4b05      	ldr	r3, [pc, #20]	; (c001760 <SysTick_Config+0x40>)
 c00174a:	2200      	movs	r2, #0
 c00174c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 c00174e:	4b04      	ldr	r3, [pc, #16]	; (c001760 <SysTick_Config+0x40>)
 c001750:	2207      	movs	r2, #7
 c001752:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 c001754:	2300      	movs	r3, #0
}
 c001756:	4618      	mov	r0, r3
 c001758:	3708      	adds	r7, #8
 c00175a:	46bd      	mov	sp, r7
 c00175c:	bd80      	pop	{r7, pc}
 c00175e:	bf00      	nop
 c001760:	e000e010 	.word	0xe000e010

0c001764 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 c001764:	b580      	push	{r7, lr}
 c001766:	b082      	sub	sp, #8
 c001768:	af00      	add	r7, sp, #0
 c00176a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 c00176c:	6878      	ldr	r0, [r7, #4]
 c00176e:	f7ff ff29 	bl	c0015c4 <__NVIC_SetPriorityGrouping>
}
 c001772:	bf00      	nop
 c001774:	3708      	adds	r7, #8
 c001776:	46bd      	mov	sp, r7
 c001778:	bd80      	pop	{r7, pc}

0c00177a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 7
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 c00177a:	b580      	push	{r7, lr}
 c00177c:	b086      	sub	sp, #24
 c00177e:	af00      	add	r7, sp, #0
 c001780:	4603      	mov	r3, r0
 c001782:	60b9      	str	r1, [r7, #8]
 c001784:	607a      	str	r2, [r7, #4]
 c001786:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 c001788:	f7ff ff40 	bl	c00160c <__NVIC_GetPriorityGrouping>
 c00178c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 c00178e:	687a      	ldr	r2, [r7, #4]
 c001790:	68b9      	ldr	r1, [r7, #8]
 c001792:	6978      	ldr	r0, [r7, #20]
 c001794:	f7ff ff90 	bl	c0016b8 <NVIC_EncodePriority>
 c001798:	4602      	mov	r2, r0
 c00179a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 c00179e:	4611      	mov	r1, r2
 c0017a0:	4618      	mov	r0, r3
 c0017a2:	f7ff ff5f 	bl	c001664 <__NVIC_SetPriority>
}
 c0017a6:	bf00      	nop
 c0017a8:	3718      	adds	r7, #24
 c0017aa:	46bd      	mov	sp, r7
 c0017ac:	bd80      	pop	{r7, pc}

0c0017ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l5xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 c0017ae:	b580      	push	{r7, lr}
 c0017b0:	b082      	sub	sp, #8
 c0017b2:	af00      	add	r7, sp, #0
 c0017b4:	4603      	mov	r3, r0
 c0017b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 c0017b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 c0017bc:	4618      	mov	r0, r3
 c0017be:	f7ff ff33 	bl	c001628 <__NVIC_EnableIRQ>
}
 c0017c2:	bf00      	nop
 c0017c4:	3708      	adds	r7, #8
 c0017c6:	46bd      	mov	sp, r7
 c0017c8:	bd80      	pop	{r7, pc}

0c0017ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 c0017ca:	b580      	push	{r7, lr}
 c0017cc:	b082      	sub	sp, #8
 c0017ce:	af00      	add	r7, sp, #0
 c0017d0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 c0017d2:	6878      	ldr	r0, [r7, #4]
 c0017d4:	f7ff ffa4 	bl	c001720 <SysTick_Config>
 c0017d8:	4603      	mov	r3, r0
}
 c0017da:	4618      	mov	r0, r3
 c0017dc:	3708      	adds	r7, #8
 c0017de:	46bd      	mov	sp, r7
 c0017e0:	bd80      	pop	{r7, pc}
	...

0c0017e4 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 c0017e4:	b580      	push	{r7, lr}
 c0017e6:	b084      	sub	sp, #16
 c0017e8:	af00      	add	r7, sp, #0
 c0017ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 c0017ec:	687b      	ldr	r3, [r7, #4]
 c0017ee:	2b00      	cmp	r3, #0
 c0017f0:	d101      	bne.n	c0017f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 c0017f2:	2301      	movs	r3, #1
 c0017f4:	e08d      	b.n	c001912 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 c0017f6:	687b      	ldr	r3, [r7, #4]
 c0017f8:	681b      	ldr	r3, [r3, #0]
 c0017fa:	461a      	mov	r2, r3
 c0017fc:	4b47      	ldr	r3, [pc, #284]	; (c00191c <HAL_DMA_Init+0x138>)
 c0017fe:	429a      	cmp	r2, r3
 c001800:	d80f      	bhi.n	c001822 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 c001802:	687b      	ldr	r3, [r7, #4]
 c001804:	681b      	ldr	r3, [r3, #0]
 c001806:	461a      	mov	r2, r3
 c001808:	4b45      	ldr	r3, [pc, #276]	; (c001920 <HAL_DMA_Init+0x13c>)
 c00180a:	4413      	add	r3, r2
 c00180c:	4a45      	ldr	r2, [pc, #276]	; (c001924 <HAL_DMA_Init+0x140>)
 c00180e:	fba2 2303 	umull	r2, r3, r2, r3
 c001812:	091b      	lsrs	r3, r3, #4
 c001814:	009a      	lsls	r2, r3, #2
 c001816:	687b      	ldr	r3, [r7, #4]
 c001818:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA1;
 c00181a:	687b      	ldr	r3, [r7, #4]
 c00181c:	4a42      	ldr	r2, [pc, #264]	; (c001928 <HAL_DMA_Init+0x144>)
 c00181e:	649a      	str	r2, [r3, #72]	; 0x48
 c001820:	e00e      	b.n	c001840 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 c001822:	687b      	ldr	r3, [r7, #4]
 c001824:	681b      	ldr	r3, [r3, #0]
 c001826:	461a      	mov	r2, r3
 c001828:	4b40      	ldr	r3, [pc, #256]	; (c00192c <HAL_DMA_Init+0x148>)
 c00182a:	4413      	add	r3, r2
 c00182c:	4a3d      	ldr	r2, [pc, #244]	; (c001924 <HAL_DMA_Init+0x140>)
 c00182e:	fba2 2303 	umull	r2, r3, r2, r3
 c001832:	091b      	lsrs	r3, r3, #4
 c001834:	009a      	lsls	r2, r3, #2
 c001836:	687b      	ldr	r3, [r7, #4]
 c001838:	64da      	str	r2, [r3, #76]	; 0x4c
    hdma->DmaBaseAddress = DMA2;
 c00183a:	687b      	ldr	r3, [r7, #4]
 c00183c:	4a3c      	ldr	r2, [pc, #240]	; (c001930 <HAL_DMA_Init+0x14c>)
 c00183e:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 c001840:	687b      	ldr	r3, [r7, #4]
 c001842:	2202      	movs	r2, #2
 c001844:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 c001848:	687b      	ldr	r3, [r7, #4]
 c00184a:	681b      	ldr	r3, [r3, #0]
 c00184c:	681b      	ldr	r3, [r3, #0]
 c00184e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 c001850:	68fb      	ldr	r3, [r7, #12]
 c001852:	f423 33ff 	bic.w	r3, r3, #130560	; 0x1fe00
 c001856:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 c00185a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM | DMA_CCR_CT     |
                      DMA_CCR_DBM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 c00185c:	687b      	ldr	r3, [r7, #4]
 c00185e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001860:	687b      	ldr	r3, [r7, #4]
 c001862:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 c001864:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001866:	687b      	ldr	r3, [r7, #4]
 c001868:	691b      	ldr	r3, [r3, #16]
 c00186a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00186c:	687b      	ldr	r3, [r7, #4]
 c00186e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 c001870:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c001872:	687b      	ldr	r3, [r7, #4]
 c001874:	699b      	ldr	r3, [r3, #24]
 c001876:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c001878:	687b      	ldr	r3, [r7, #4]
 c00187a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 c00187c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 c00187e:	687b      	ldr	r3, [r7, #4]
 c001880:	6a1b      	ldr	r3, [r3, #32]
 c001882:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 c001884:	68fa      	ldr	r2, [r7, #12]
 c001886:	4313      	orrs	r3, r2
 c001888:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 c00188a:	687b      	ldr	r3, [r7, #4]
 c00188c:	681b      	ldr	r3, [r3, #0]
 c00188e:	68fa      	ldr	r2, [r7, #12]
 c001890:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 c001892:	6878      	ldr	r0, [r7, #4]
 c001894:	f000 fa90 	bl	c001db8 <DMA_CalcDMAMUXChannelBaseAndMask>

  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 c001898:	687b      	ldr	r3, [r7, #4]
 c00189a:	689b      	ldr	r3, [r3, #8]
 c00189c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c0018a0:	d102      	bne.n	c0018a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 c0018a2:	687b      	ldr	r3, [r7, #4]
 c0018a4:	2200      	movs	r2, #0
 c0018a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 c0018a8:	687b      	ldr	r3, [r7, #4]
 c0018aa:	685a      	ldr	r2, [r3, #4]
 c0018ac:	687b      	ldr	r3, [r7, #4]
 c0018ae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0018b0:	b2d2      	uxtb	r2, r2
 c0018b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c0018b4:	687b      	ldr	r3, [r7, #4]
 c0018b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0018b8:	687a      	ldr	r2, [r7, #4]
 c0018ba:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c0018bc:	605a      	str	r2, [r3, #4]

  if(((hdma->Init.Request > 0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 c0018be:	687b      	ldr	r3, [r7, #4]
 c0018c0:	685b      	ldr	r3, [r3, #4]
 c0018c2:	2b00      	cmp	r3, #0
 c0018c4:	d010      	beq.n	c0018e8 <HAL_DMA_Init+0x104>
 c0018c6:	687b      	ldr	r3, [r7, #4]
 c0018c8:	685b      	ldr	r3, [r3, #4]
 c0018ca:	2b04      	cmp	r3, #4
 c0018cc:	d80c      	bhi.n	c0018e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 c0018ce:	6878      	ldr	r0, [r7, #4]
 c0018d0:	f000 fab0 	bl	c001e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 c0018d4:	687b      	ldr	r3, [r7, #4]
 c0018d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0018d8:	2200      	movs	r2, #0
 c0018da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c0018dc:	687b      	ldr	r3, [r7, #4]
 c0018de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0018e0:	687a      	ldr	r2, [r7, #4]
 c0018e2:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c0018e4:	605a      	str	r2, [r3, #4]
 c0018e6:	e008      	b.n	c0018fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 c0018e8:	687b      	ldr	r3, [r7, #4]
 c0018ea:	2200      	movs	r2, #0
 c0018ec:	65da      	str	r2, [r3, #92]	; 0x5c
    hdma->DMAmuxRequestGenStatus = 0U;
 c0018ee:	687b      	ldr	r3, [r7, #4]
 c0018f0:	2200      	movs	r2, #0
 c0018f2:	661a      	str	r2, [r3, #96]	; 0x60
    hdma->DMAmuxRequestGenStatusMask = 0U;
 c0018f4:	687b      	ldr	r3, [r7, #4]
 c0018f6:	2200      	movs	r2, #0
 c0018f8:	665a      	str	r2, [r3, #100]	; 0x64
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c0018fa:	687b      	ldr	r3, [r7, #4]
 c0018fc:	2200      	movs	r2, #0
 c0018fe:	645a      	str	r2, [r3, #68]	; 0x44

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 c001900:	687b      	ldr	r3, [r7, #4]
 c001902:	2201      	movs	r2, #1
 c001904:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 c001908:	687b      	ldr	r3, [r7, #4]
 c00190a:	2200      	movs	r2, #0
 c00190c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 c001910:	2300      	movs	r3, #0
}
 c001912:	4618      	mov	r0, r3
 c001914:	3710      	adds	r7, #16
 c001916:	46bd      	mov	sp, r7
 c001918:	bd80      	pop	{r7, pc}
 c00191a:	bf00      	nop
 c00191c:	50020407 	.word	0x50020407
 c001920:	affdfff8 	.word	0xaffdfff8
 c001924:	cccccccd 	.word	0xcccccccd
 c001928:	50020000 	.word	0x50020000
 c00192c:	affdfbf8 	.word	0xaffdfbf8
 c001930:	50020400 	.word	0x50020400

0c001934 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c001934:	b580      	push	{r7, lr}
 c001936:	b086      	sub	sp, #24
 c001938:	af00      	add	r7, sp, #0
 c00193a:	60f8      	str	r0, [r7, #12]
 c00193c:	60b9      	str	r1, [r7, #8]
 c00193e:	607a      	str	r2, [r7, #4]
 c001940:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c001942:	2300      	movs	r3, #0
 c001944:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 c001946:	68fb      	ldr	r3, [r7, #12]
 c001948:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 c00194c:	2b01      	cmp	r3, #1
 c00194e:	d101      	bne.n	c001954 <HAL_DMA_Start_IT+0x20>
 c001950:	2302      	movs	r3, #2
 c001952:	e066      	b.n	c001a22 <HAL_DMA_Start_IT+0xee>
 c001954:	68fb      	ldr	r3, [r7, #12]
 c001956:	2201      	movs	r2, #1
 c001958:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 c00195c:	68fb      	ldr	r3, [r7, #12]
 c00195e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 c001962:	b2db      	uxtb	r3, r3
 c001964:	2b01      	cmp	r3, #1
 c001966:	d155      	bne.n	c001a14 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 c001968:	68fb      	ldr	r3, [r7, #12]
 c00196a:	2202      	movs	r2, #2
 c00196c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 c001970:	68fb      	ldr	r3, [r7, #12]
 c001972:	2200      	movs	r2, #0
 c001974:	645a      	str	r2, [r3, #68]	; 0x44

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 c001976:	68fb      	ldr	r3, [r7, #12]
 c001978:	681b      	ldr	r3, [r3, #0]
 c00197a:	681a      	ldr	r2, [r3, #0]
 c00197c:	68fb      	ldr	r3, [r7, #12]
 c00197e:	681b      	ldr	r3, [r3, #0]
 c001980:	f022 0201 	bic.w	r2, r2, #1
 c001984:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 c001986:	683b      	ldr	r3, [r7, #0]
 c001988:	687a      	ldr	r2, [r7, #4]
 c00198a:	68b9      	ldr	r1, [r7, #8]
 c00198c:	68f8      	ldr	r0, [r7, #12]
 c00198e:	f000 f9d4 	bl	c001d3a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 c001992:	68fb      	ldr	r3, [r7, #12]
 c001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001996:	2b00      	cmp	r3, #0
 c001998:	d008      	beq.n	c0019ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c00199a:	68fb      	ldr	r3, [r7, #12]
 c00199c:	681b      	ldr	r3, [r3, #0]
 c00199e:	681a      	ldr	r2, [r3, #0]
 c0019a0:	68fb      	ldr	r3, [r7, #12]
 c0019a2:	681b      	ldr	r3, [r3, #0]
 c0019a4:	f042 020e 	orr.w	r2, r2, #14
 c0019a8:	601a      	str	r2, [r3, #0]
 c0019aa:	e00f      	b.n	c0019cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c0019ac:	68fb      	ldr	r3, [r7, #12]
 c0019ae:	681b      	ldr	r3, [r3, #0]
 c0019b0:	681a      	ldr	r2, [r3, #0]
 c0019b2:	68fb      	ldr	r3, [r7, #12]
 c0019b4:	681b      	ldr	r3, [r3, #0]
 c0019b6:	f022 0204 	bic.w	r2, r2, #4
 c0019ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 c0019bc:	68fb      	ldr	r3, [r7, #12]
 c0019be:	681b      	ldr	r3, [r3, #0]
 c0019c0:	681a      	ldr	r2, [r3, #0]
 c0019c2:	68fb      	ldr	r3, [r7, #12]
 c0019c4:	681b      	ldr	r3, [r3, #0]
 c0019c6:	f042 020a 	orr.w	r2, r2, #10
 c0019ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 c0019cc:	68fb      	ldr	r3, [r7, #12]
 c0019ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0019d0:	681b      	ldr	r3, [r3, #0]
 c0019d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c0019d6:	2b00      	cmp	r3, #0
 c0019d8:	d007      	beq.n	c0019ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 c0019da:	68fb      	ldr	r3, [r7, #12]
 c0019dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0019de:	681a      	ldr	r2, [r3, #0]
 c0019e0:	68fb      	ldr	r3, [r7, #12]
 c0019e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c0019e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c0019e8:	601a      	str	r2, [r3, #0]
    }

    if(hdma->DMAmuxRequestGen != 0U)
 c0019ea:	68fb      	ldr	r3, [r7, #12]
 c0019ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0019ee:	2b00      	cmp	r3, #0
 c0019f0:	d007      	beq.n	c001a02 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 c0019f2:	68fb      	ldr	r3, [r7, #12]
 c0019f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0019f6:	681a      	ldr	r2, [r3, #0]
 c0019f8:	68fb      	ldr	r3, [r7, #12]
 c0019fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c0019fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 c001a00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 c001a02:	68fb      	ldr	r3, [r7, #12]
 c001a04:	681b      	ldr	r3, [r3, #0]
 c001a06:	681a      	ldr	r2, [r3, #0]
 c001a08:	68fb      	ldr	r3, [r7, #12]
 c001a0a:	681b      	ldr	r3, [r3, #0]
 c001a0c:	f042 0201 	orr.w	r2, r2, #1
 c001a10:	601a      	str	r2, [r3, #0]
 c001a12:	e005      	b.n	c001a20 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c001a14:	68fb      	ldr	r3, [r7, #12]
 c001a16:	2200      	movs	r2, #0
 c001a18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 c001a1c:	2302      	movs	r3, #2
 c001a1e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 c001a20:	7dfb      	ldrb	r3, [r7, #23]
}
 c001a22:	4618      	mov	r0, r3
 c001a24:	3718      	adds	r7, #24
 c001a26:	46bd      	mov	sp, r7
 c001a28:	bd80      	pop	{r7, pc}

0c001a2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 c001a2a:	b580      	push	{r7, lr}
 c001a2c:	b084      	sub	sp, #16
 c001a2e:	af00      	add	r7, sp, #0
 c001a30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 c001a32:	687b      	ldr	r3, [r7, #4]
 c001a34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001a36:	681b      	ldr	r3, [r3, #0]
 c001a38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 c001a3a:	687b      	ldr	r3, [r7, #4]
 c001a3c:	681b      	ldr	r3, [r3, #0]
 c001a3e:	681b      	ldr	r3, [r3, #0]
 c001a40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 c001a42:	687b      	ldr	r3, [r7, #4]
 c001a44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a46:	f003 031c 	and.w	r3, r3, #28
 c001a4a:	2204      	movs	r2, #4
 c001a4c:	409a      	lsls	r2, r3
 c001a4e:	68fb      	ldr	r3, [r7, #12]
 c001a50:	4013      	ands	r3, r2
 c001a52:	2b00      	cmp	r3, #0
 c001a54:	d053      	beq.n	c001afe <HAL_DMA_IRQHandler+0xd4>
 c001a56:	68bb      	ldr	r3, [r7, #8]
 c001a58:	f003 0304 	and.w	r3, r3, #4
 c001a5c:	2b00      	cmp	r3, #0
 c001a5e:	d04e      	beq.n	c001afe <HAL_DMA_IRQHandler+0xd4>
  {
    /* Multi_Buffering mode enabled */
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001a60:	687b      	ldr	r3, [r7, #4]
 c001a62:	681b      	ldr	r3, [r3, #0]
 c001a64:	681b      	ldr	r3, [r3, #0]
 c001a66:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001a6a:	2b00      	cmp	r3, #0
 c001a6c:	d024      	beq.n	c001ab8 <HAL_DMA_IRQHandler+0x8e>
    {
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c001a6e:	687b      	ldr	r3, [r7, #4]
 c001a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001a72:	f003 021c 	and.w	r2, r3, #28
 c001a76:	687b      	ldr	r3, [r7, #4]
 c001a78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001a7a:	2104      	movs	r1, #4
 c001a7c:	fa01 f202 	lsl.w	r2, r1, r2
 c001a80:	605a      	str	r2, [r3, #4]

      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c001a82:	687b      	ldr	r3, [r7, #4]
 c001a84:	681b      	ldr	r3, [r3, #0]
 c001a86:	681b      	ldr	r3, [r3, #0]
 c001a88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001a8c:	2b00      	cmp	r3, #0
 c001a8e:	d109      	bne.n	c001aa4 <HAL_DMA_IRQHandler+0x7a>
      {
        if(hdma->XferHalfCpltCallback != NULL)
 c001a90:	687b      	ldr	r3, [r7, #4]
 c001a92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001a94:	2b00      	cmp	r3, #0
 c001a96:	f000 80c0 	beq.w	c001c1a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 c001a9a:	687b      	ldr	r3, [r7, #4]
 c001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001a9e:	6878      	ldr	r0, [r7, #4]
 c001aa0:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001aa2:	e0ba      	b.n	c001c1a <HAL_DMA_IRQHandler+0x1f0>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferM1HalfCpltCallback != NULL)
 c001aa4:	687b      	ldr	r3, [r7, #4]
 c001aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001aa8:	2b00      	cmp	r3, #0
 c001aaa:	f000 80b6 	beq.w	c001c1a <HAL_DMA_IRQHandler+0x1f0>
        {
          /* Half transfer callback */
          hdma->XferM1HalfCpltCallback(hdma);
 c001aae:	687b      	ldr	r3, [r7, #4]
 c001ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c001ab2:	6878      	ldr	r0, [r7, #4]
 c001ab4:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001ab6:	e0b0      	b.n	c001c1a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
    else
    {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c001ab8:	687b      	ldr	r3, [r7, #4]
 c001aba:	681b      	ldr	r3, [r3, #0]
 c001abc:	681b      	ldr	r3, [r3, #0]
 c001abe:	f003 0320 	and.w	r3, r3, #32
 c001ac2:	2b00      	cmp	r3, #0
 c001ac4:	d107      	bne.n	c001ad6 <HAL_DMA_IRQHandler+0xac>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 c001ac6:	687b      	ldr	r3, [r7, #4]
 c001ac8:	681b      	ldr	r3, [r3, #0]
 c001aca:	681a      	ldr	r2, [r3, #0]
 c001acc:	687b      	ldr	r3, [r7, #4]
 c001ace:	681b      	ldr	r3, [r3, #0]
 c001ad0:	f022 0204 	bic.w	r2, r2, #4
 c001ad4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 c001ad6:	687b      	ldr	r3, [r7, #4]
 c001ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001ada:	f003 021c 	and.w	r2, r3, #28
 c001ade:	687b      	ldr	r3, [r7, #4]
 c001ae0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001ae2:	2104      	movs	r1, #4
 c001ae4:	fa01 f202 	lsl.w	r2, r1, r2
 c001ae8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 c001aea:	687b      	ldr	r3, [r7, #4]
 c001aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001aee:	2b00      	cmp	r3, #0
 c001af0:	f000 8093 	beq.w	c001c1a <HAL_DMA_IRQHandler+0x1f0>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 c001af4:	687b      	ldr	r3, [r7, #4]
 c001af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c001af8:	6878      	ldr	r0, [r7, #4]
 c001afa:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001afc:	e08d      	b.n	c001c1a <HAL_DMA_IRQHandler+0x1f0>
      }
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 c001afe:	687b      	ldr	r3, [r7, #4]
 c001b00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001b02:	f003 031c 	and.w	r3, r3, #28
 c001b06:	2202      	movs	r2, #2
 c001b08:	409a      	lsls	r2, r3
 c001b0a:	68fb      	ldr	r3, [r7, #12]
 c001b0c:	4013      	ands	r3, r2
 c001b0e:	2b00      	cmp	r3, #0
 c001b10:	d04e      	beq.n	c001bb0 <HAL_DMA_IRQHandler+0x186>
 c001b12:	68bb      	ldr	r3, [r7, #8]
 c001b14:	f003 0302 	and.w	r3, r3, #2
 c001b18:	2b00      	cmp	r3, #0
 c001b1a:	d049      	beq.n	c001bb0 <HAL_DMA_IRQHandler+0x186>
  {
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001b1c:	687b      	ldr	r3, [r7, #4]
 c001b1e:	681b      	ldr	r3, [r3, #0]
 c001b20:	681b      	ldr	r3, [r3, #0]
 c001b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c001b26:	2b00      	cmp	r3, #0
 c001b28:	d018      	beq.n	c001b5c <HAL_DMA_IRQHandler+0x132>
    {
      /* Current memory buffer used is Memory 0 */
      if((hdma->Instance->CCR & DMA_CCR_CT) == 0U)
 c001b2a:	687b      	ldr	r3, [r7, #4]
 c001b2c:	681b      	ldr	r3, [r3, #0]
 c001b2e:	681b      	ldr	r3, [r3, #0]
 c001b30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c001b34:	2b00      	cmp	r3, #0
 c001b36:	d108      	bne.n	c001b4a <HAL_DMA_IRQHandler+0x120>
      {
        if(hdma->XferM1CpltCallback != NULL)
 c001b38:	687b      	ldr	r3, [r7, #4]
 c001b3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001b3c:	2b00      	cmp	r3, #0
 c001b3e:	d06e      	beq.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory1 */
          hdma->XferM1CpltCallback(hdma);
 c001b40:	687b      	ldr	r3, [r7, #4]
 c001b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c001b44:	6878      	ldr	r0, [r7, #4]
 c001b46:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001b48:	e069      	b.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
      /* Current memory buffer used is Memory 1 */
      else
      {
        if(hdma->XferCpltCallback != NULL)
 c001b4a:	687b      	ldr	r3, [r7, #4]
 c001b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001b4e:	2b00      	cmp	r3, #0
 c001b50:	d065      	beq.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
        {
          /* Transfer complete Callback for memory0 */
          hdma->XferCpltCallback(hdma);
 c001b52:	687b      	ldr	r3, [r7, #4]
 c001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001b56:	6878      	ldr	r0, [r7, #4]
 c001b58:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001b5a:	e060      	b.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
        }
      }
    }
    else
    {
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 c001b5c:	687b      	ldr	r3, [r7, #4]
 c001b5e:	681b      	ldr	r3, [r3, #0]
 c001b60:	681b      	ldr	r3, [r3, #0]
 c001b62:	f003 0320 	and.w	r3, r3, #32
 c001b66:	2b00      	cmp	r3, #0
 c001b68:	d10b      	bne.n	c001b82 <HAL_DMA_IRQHandler+0x158>
      {
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        /* Disable the transfer complete and error interrupt */
        /* if the DMA mode is not CIRCULAR  */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 c001b6a:	687b      	ldr	r3, [r7, #4]
 c001b6c:	681b      	ldr	r3, [r3, #0]
 c001b6e:	681a      	ldr	r2, [r3, #0]
 c001b70:	687b      	ldr	r3, [r7, #4]
 c001b72:	681b      	ldr	r3, [r3, #0]
 c001b74:	f022 020a 	bic.w	r2, r2, #10
 c001b78:	601a      	str	r2, [r3, #0]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 c001b7a:	687b      	ldr	r3, [r7, #4]
 c001b7c:	2201      	movs	r2, #1
 c001b7e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
      }
      /* Clear the transfer complete flag */
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 c001b82:	687b      	ldr	r3, [r7, #4]
 c001b84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001b86:	f003 021c 	and.w	r2, r3, #28
 c001b8a:	687b      	ldr	r3, [r7, #4]
 c001b8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001b8e:	2102      	movs	r1, #2
 c001b90:	fa01 f202 	lsl.w	r2, r1, r2
 c001b94:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 c001b96:	687b      	ldr	r3, [r7, #4]
 c001b98:	2200      	movs	r2, #0
 c001b9a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

      if(hdma->XferCpltCallback != NULL)
 c001b9e:	687b      	ldr	r3, [r7, #4]
 c001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001ba2:	2b00      	cmp	r3, #0
 c001ba4:	d03b      	beq.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
      {
        /* Transfer complete callback */
        hdma->XferCpltCallback(hdma);
 c001ba6:	687b      	ldr	r3, [r7, #4]
 c001ba8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c001baa:	6878      	ldr	r0, [r7, #4]
 c001bac:	4798      	blx	r3
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001bae:	e036      	b.n	c001c1e <HAL_DMA_IRQHandler+0x1f4>
      }
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 c001bb0:	687b      	ldr	r3, [r7, #4]
 c001bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001bb4:	f003 031c 	and.w	r3, r3, #28
 c001bb8:	2208      	movs	r2, #8
 c001bba:	409a      	lsls	r2, r3
 c001bbc:	68fb      	ldr	r3, [r7, #12]
 c001bbe:	4013      	ands	r3, r2
 c001bc0:	2b00      	cmp	r3, #0
 c001bc2:	d02e      	beq.n	c001c22 <HAL_DMA_IRQHandler+0x1f8>
 c001bc4:	68bb      	ldr	r3, [r7, #8]
 c001bc6:	f003 0308 	and.w	r3, r3, #8
 c001bca:	2b00      	cmp	r3, #0
 c001bcc:	d029      	beq.n	c001c22 <HAL_DMA_IRQHandler+0x1f8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 c001bce:	687b      	ldr	r3, [r7, #4]
 c001bd0:	681b      	ldr	r3, [r3, #0]
 c001bd2:	681a      	ldr	r2, [r3, #0]
 c001bd4:	687b      	ldr	r3, [r7, #4]
 c001bd6:	681b      	ldr	r3, [r3, #0]
 c001bd8:	f022 020e 	bic.w	r2, r2, #14
 c001bdc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c001bde:	687b      	ldr	r3, [r7, #4]
 c001be0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001be2:	f003 021c 	and.w	r2, r3, #28
 c001be6:	687b      	ldr	r3, [r7, #4]
 c001be8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001bea:	2101      	movs	r1, #1
 c001bec:	fa01 f202 	lsl.w	r2, r1, r2
 c001bf0:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 c001bf2:	687b      	ldr	r3, [r7, #4]
 c001bf4:	2201      	movs	r2, #1
 c001bf6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 c001bf8:	687b      	ldr	r3, [r7, #4]
 c001bfa:	2201      	movs	r2, #1
 c001bfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 c001c00:	687b      	ldr	r3, [r7, #4]
 c001c02:	2200      	movs	r2, #0
 c001c04:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 c001c08:	687b      	ldr	r3, [r7, #4]
 c001c0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001c0c:	2b00      	cmp	r3, #0
 c001c0e:	d008      	beq.n	c001c22 <HAL_DMA_IRQHandler+0x1f8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 c001c10:	687b      	ldr	r3, [r7, #4]
 c001c12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c001c14:	6878      	ldr	r0, [r7, #4]
 c001c16:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 c001c18:	e002      	b.n	c001c20 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001c1a:	bf00      	nop
 c001c1c:	e000      	b.n	c001c20 <HAL_DMA_IRQHandler+0x1f6>
    if(((hdma->Instance->CCR) & (uint32_t)(DMA_CCR_DBM)) != 0U)
 c001c1e:	bf00      	nop
  return;
 c001c20:	bf00      	nop
 c001c22:	bf00      	nop
}
 c001c24:	3710      	adds	r7, #16
 c001c26:	46bd      	mov	sp, r7
 c001c28:	bd80      	pop	{r7, pc}

0c001c2a <HAL_DMA_ConfigChannelAttributes>:
  * @param  ChannelAttributes specifies the DMA channel secure/privilege attributes.
  *         This parameter can be a one or a combination of @ref DMA_Channel_Attributes
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_DMA_ConfigChannelAttributes(DMA_HandleTypeDef *hdma, uint32_t ChannelAttributes)
{
 c001c2a:	b480      	push	{r7}
 c001c2c:	b087      	sub	sp, #28
 c001c2e:	af00      	add	r7, sp, #0
 c001c30:	6078      	str	r0, [r7, #4]
 c001c32:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c001c34:	2300      	movs	r3, #0
 c001c36:	75fb      	strb	r3, [r7, #23]
#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  uint32_t ccr_SECM;
#endif
  
  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 c001c38:	687b      	ldr	r3, [r7, #4]
 c001c3a:	2b00      	cmp	r3, #0
 c001c3c:	d103      	bne.n	c001c46 <HAL_DMA_ConfigChannelAttributes+0x1c>
  {
    status = HAL_ERROR;
 c001c3e:	2301      	movs	r3, #1
 c001c40:	75fb      	strb	r3, [r7, #23]
    return status;
 c001c42:	7dfb      	ldrb	r3, [r7, #23]
 c001c44:	e073      	b.n	c001d2e <HAL_DMA_ConfigChannelAttributes+0x104>

  /* Check the parameters */
  assert_param(IS_DMA_ATTRIBUTES(ChannelAttributes));

  /* Read CCR register */
  ccr = READ_REG(hdma->Instance->CCR);
 c001c46:	687b      	ldr	r3, [r7, #4]
 c001c48:	681b      	ldr	r3, [r3, #0]
 c001c4a:	681b      	ldr	r3, [r3, #0]
 c001c4c:	613b      	str	r3, [r7, #16]

  /* Apply any requested privilege/non-privilege attributes */
  if ((ChannelAttributes & DMA_CHANNEL_ATTR_PRIV_MASK) != 0U)
 c001c4e:	683b      	ldr	r3, [r7, #0]
 c001c50:	f003 0310 	and.w	r3, r3, #16
 c001c54:	2b00      	cmp	r3, #0
 c001c56:	d00d      	beq.n	c001c74 <HAL_DMA_ConfigChannelAttributes+0x4a>
  {
    if((ChannelAttributes & DMA_CCR_PRIV) != 0U)
 c001c58:	683b      	ldr	r3, [r7, #0]
 c001c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c001c5e:	2b00      	cmp	r3, #0
 c001c60:	d004      	beq.n	c001c6c <HAL_DMA_ConfigChannelAttributes+0x42>
    {
      SET_BIT(ccr, DMA_CCR_PRIV);
 c001c62:	693b      	ldr	r3, [r7, #16]
 c001c64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c001c68:	613b      	str	r3, [r7, #16]
 c001c6a:	e003      	b.n	c001c74 <HAL_DMA_ConfigChannelAttributes+0x4a>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_PRIV);
 c001c6c:	693b      	ldr	r3, [r7, #16]
 c001c6e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 c001c72:	613b      	str	r3, [r7, #16]
  }

#if defined (__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
  /* Channel */
  /* Check what is the current SECM status */
  if ((hdma->Instance->CCR & DMA_CCR_SECM) == DMA_CCR_SECM)
 c001c74:	687b      	ldr	r3, [r7, #4]
 c001c76:	681b      	ldr	r3, [r3, #0]
 c001c78:	681b      	ldr	r3, [r3, #0]
 c001c7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001c7e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 c001c82:	d103      	bne.n	c001c8c <HAL_DMA_ConfigChannelAttributes+0x62>
  {
    /* Channel is currently secure */
    ccr_SECM = DMA_CCR_SECM;
 c001c84:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c001c88:	60fb      	str	r3, [r7, #12]
 c001c8a:	e001      	b.n	c001c90 <HAL_DMA_ConfigChannelAttributes+0x66>
  }
  else
  {
    /* Channel is currently non-secure */
    ccr_SECM = 0U;
 c001c8c:	2300      	movs	r3, #0
 c001c8e:	60fb      	str	r3, [r7, #12]
  }

  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_MASK) != 0U)
 c001c90:	683b      	ldr	r3, [r7, #0]
 c001c92:	f003 0302 	and.w	r3, r3, #2
 c001c96:	2b00      	cmp	r3, #0
 c001c98:	d012      	beq.n	c001cc0 <HAL_DMA_ConfigChannelAttributes+0x96>
  {
    if((ChannelAttributes & DMA_CCR_SECM) != 0U)
 c001c9a:	683b      	ldr	r3, [r7, #0]
 c001c9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c001ca0:	2b00      	cmp	r3, #0
 c001ca2:	d007      	beq.n	c001cb4 <HAL_DMA_ConfigChannelAttributes+0x8a>
    {
      SET_BIT(ccr, DMA_CCR_SECM);
 c001ca4:	693b      	ldr	r3, [r7, #16]
 c001ca6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 c001caa:	613b      	str	r3, [r7, #16]
      /* Channel changed to secure */
      ccr_SECM = DMA_CCR_SECM;
 c001cac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 c001cb0:	60fb      	str	r3, [r7, #12]
 c001cb2:	e005      	b.n	c001cc0 <HAL_DMA_ConfigChannelAttributes+0x96>
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SECM);
 c001cb4:	693b      	ldr	r3, [r7, #16]
 c001cb6:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 c001cba:	613b      	str	r3, [r7, #16]
      /* Channel changed to non-secure */
      ccr_SECM = 0U;
 c001cbc:	2300      	movs	r3, #0
 c001cbe:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Channel source */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_SRC_MASK) != 0U)
 c001cc0:	683b      	ldr	r3, [r7, #0]
 c001cc2:	f003 0304 	and.w	r3, r3, #4
 c001cc6:	2b00      	cmp	r3, #0
 c001cc8:	d013      	beq.n	c001cf2 <HAL_DMA_ConfigChannelAttributes+0xc8>
  {
    /* Configure Source security attributes */
    if ((ChannelAttributes & DMA_CCR_SSEC) != 0x0U)
 c001cca:	683b      	ldr	r3, [r7, #0]
 c001ccc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c001cd0:	2b00      	cmp	r3, #0
 c001cd2:	d00a      	beq.n	c001cea <HAL_DMA_ConfigChannelAttributes+0xc0>
    {
      /* SSEC can only be set if channel is secure */
      /* Otherwise configuration is not taken into account */
      if (ccr_SECM == 0U)
 c001cd4:	68fb      	ldr	r3, [r7, #12]
 c001cd6:	2b00      	cmp	r3, #0
 c001cd8:	d102      	bne.n	c001ce0 <HAL_DMA_ConfigChannelAttributes+0xb6>
      {
        /* DSEC can not be secure */
        /* Source channel is non secure */
         status = HAL_ERROR;
 c001cda:	2301      	movs	r3, #1
 c001cdc:	75fb      	strb	r3, [r7, #23]
 c001cde:	e008      	b.n	c001cf2 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_SSEC);
 c001ce0:	693b      	ldr	r3, [r7, #16]
 c001ce2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c001ce6:	613b      	str	r3, [r7, #16]
 c001ce8:	e003      	b.n	c001cf2 <HAL_DMA_ConfigChannelAttributes+0xc8>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_SSEC);
 c001cea:	693b      	ldr	r3, [r7, #16]
 c001cec:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c001cf0:	613b      	str	r3, [r7, #16]
    }
  }

  /* Channel destination */
  if((ChannelAttributes & DMA_CHANNEL_ATTR_SEC_DEST_MASK) != 0U)
 c001cf2:	683b      	ldr	r3, [r7, #0]
 c001cf4:	f003 0308 	and.w	r3, r3, #8
 c001cf8:	2b00      	cmp	r3, #0
 c001cfa:	d013      	beq.n	c001d24 <HAL_DMA_ConfigChannelAttributes+0xfa>
  {
    /* Configure Destination security attributes */
    if((ChannelAttributes & DMA_CCR_DSEC) != 0U)
 c001cfc:	683b      	ldr	r3, [r7, #0]
 c001cfe:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c001d02:	2b00      	cmp	r3, #0
 c001d04:	d00a      	beq.n	c001d1c <HAL_DMA_ConfigChannelAttributes+0xf2>
    {
      if (ccr_SECM == 0U)
 c001d06:	68fb      	ldr	r3, [r7, #12]
 c001d08:	2b00      	cmp	r3, #0
 c001d0a:	d102      	bne.n	c001d12 <HAL_DMA_ConfigChannelAttributes+0xe8>
      {
        /* DSEC can only be set if channel is secure */
        /* Destination channel is non secure */
         status = HAL_ERROR;
 c001d0c:	2301      	movs	r3, #1
 c001d0e:	75fb      	strb	r3, [r7, #23]
 c001d10:	e008      	b.n	c001d24 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
      else
      {
        SET_BIT(ccr, DMA_CCR_DSEC);
 c001d12:	693b      	ldr	r3, [r7, #16]
 c001d14:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 c001d18:	613b      	str	r3, [r7, #16]
 c001d1a:	e003      	b.n	c001d24 <HAL_DMA_ConfigChannelAttributes+0xfa>
      }
    }
    else
    {
      CLEAR_BIT(ccr, DMA_CCR_DSEC);
 c001d1c:	693b      	ldr	r3, [r7, #16]
 c001d1e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 c001d22:	613b      	str	r3, [r7, #16]
  }

#endif /* __ARM_FEATURE_CMSE */

  /* Update CCR Register: PRIV, SECM, SCEC, DSEC bits */
  WRITE_REG(hdma->Instance->CCR, ccr);
 c001d24:	687b      	ldr	r3, [r7, #4]
 c001d26:	681b      	ldr	r3, [r3, #0]
 c001d28:	693a      	ldr	r2, [r7, #16]
 c001d2a:	601a      	str	r2, [r3, #0]

  return status;
 c001d2c:	7dfb      	ldrb	r3, [r7, #23]
}
 c001d2e:	4618      	mov	r0, r3
 c001d30:	371c      	adds	r7, #28
 c001d32:	46bd      	mov	sp, r7
 c001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001d38:	4770      	bx	lr

0c001d3a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 c001d3a:	b480      	push	{r7}
 c001d3c:	b085      	sub	sp, #20
 c001d3e:	af00      	add	r7, sp, #0
 c001d40:	60f8      	str	r0, [r7, #12]
 c001d42:	60b9      	str	r1, [r7, #8]
 c001d44:	607a      	str	r2, [r7, #4]
 c001d46:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 c001d48:	68fb      	ldr	r3, [r7, #12]
 c001d4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c001d4c:	68fa      	ldr	r2, [r7, #12]
 c001d4e:	6d92      	ldr	r2, [r2, #88]	; 0x58
 c001d50:	605a      	str	r2, [r3, #4]

  if(hdma->DMAmuxRequestGen != 0U)
 c001d52:	68fb      	ldr	r3, [r7, #12]
 c001d54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c001d56:	2b00      	cmp	r3, #0
 c001d58:	d004      	beq.n	c001d64 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 c001d5a:	68fb      	ldr	r3, [r7, #12]
 c001d5c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c001d5e:	68fa      	ldr	r2, [r7, #12]
 c001d60:	6e52      	ldr	r2, [r2, #100]	; 0x64
 c001d62:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 c001d64:	68fb      	ldr	r3, [r7, #12]
 c001d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001d68:	f003 021c 	and.w	r2, r3, #28
 c001d6c:	68fb      	ldr	r3, [r7, #12]
 c001d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c001d70:	2101      	movs	r1, #1
 c001d72:	fa01 f202 	lsl.w	r2, r1, r2
 c001d76:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 c001d78:	68fb      	ldr	r3, [r7, #12]
 c001d7a:	681b      	ldr	r3, [r3, #0]
 c001d7c:	683a      	ldr	r2, [r7, #0]
 c001d7e:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 c001d80:	68fb      	ldr	r3, [r7, #12]
 c001d82:	689b      	ldr	r3, [r3, #8]
 c001d84:	2b10      	cmp	r3, #16
 c001d86:	d108      	bne.n	c001d9a <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 c001d88:	68fb      	ldr	r3, [r7, #12]
 c001d8a:	681b      	ldr	r3, [r3, #0]
 c001d8c:	687a      	ldr	r2, [r7, #4]
 c001d8e:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CM0AR = SrcAddress;
 c001d90:	68fb      	ldr	r3, [r7, #12]
 c001d92:	681b      	ldr	r3, [r3, #0]
 c001d94:	68ba      	ldr	r2, [r7, #8]
 c001d96:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CM0AR = DstAddress;
  }
}
 c001d98:	e007      	b.n	c001daa <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 c001d9a:	68fb      	ldr	r3, [r7, #12]
 c001d9c:	681b      	ldr	r3, [r3, #0]
 c001d9e:	68ba      	ldr	r2, [r7, #8]
 c001da0:	609a      	str	r2, [r3, #8]
    hdma->Instance->CM0AR = DstAddress;
 c001da2:	68fb      	ldr	r3, [r7, #12]
 c001da4:	681b      	ldr	r3, [r3, #0]
 c001da6:	687a      	ldr	r2, [r7, #4]
 c001da8:	60da      	str	r2, [r3, #12]
}
 c001daa:	bf00      	nop
 c001dac:	3714      	adds	r7, #20
 c001dae:	46bd      	mov	sp, r7
 c001db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001db4:	4770      	bx	lr
	...

0c001db8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c001db8:	b480      	push	{r7}
 c001dba:	b085      	sub	sp, #20
 c001dbc:	af00      	add	r7, sp, #0
 c001dbe:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 c001dc0:	687b      	ldr	r3, [r7, #4]
 c001dc2:	681b      	ldr	r3, [r3, #0]
 c001dc4:	461a      	mov	r2, r3
 c001dc6:	4b17      	ldr	r3, [pc, #92]	; (c001e24 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 c001dc8:	429a      	cmp	r2, r3
 c001dca:	d80a      	bhi.n	c001de2 <DMA_CalcDMAMUXChannelBaseAndMask+0x2a>
  {
    /* DMA1 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel0 + (hdma->ChannelIndex >> 2U));
 c001dcc:	687b      	ldr	r3, [r7, #4]
 c001dce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001dd0:	089b      	lsrs	r3, r3, #2
 c001dd2:	009b      	lsls	r3, r3, #2
 c001dd4:	f103 43a0 	add.w	r3, r3, #1342177280	; 0x50000000
 c001dd8:	f503 3302 	add.w	r3, r3, #133120	; 0x20800
 c001ddc:	687a      	ldr	r2, [r7, #4]
 c001dde:	6513      	str	r3, [r2, #80]	; 0x50
 c001de0:	e007      	b.n	c001df2 <DMA_CalcDMAMUXChannelBaseAndMask+0x3a>
  }
  else
  {
    /* DMA2 */
    hdma->DMAmuxChannel = (DMAMUX1_Channel8 + (hdma->ChannelIndex >> 2U));
 c001de2:	687b      	ldr	r3, [r7, #4]
 c001de4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c001de6:	089b      	lsrs	r3, r3, #2
 c001de8:	009a      	lsls	r2, r3, #2
 c001dea:	4b0f      	ldr	r3, [pc, #60]	; (c001e28 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 c001dec:	4413      	add	r3, r2
 c001dee:	687a      	ldr	r2, [r7, #4]
 c001df0:	6513      	str	r3, [r2, #80]	; 0x50
  }

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 c001df2:	687b      	ldr	r3, [r7, #4]
 c001df4:	681b      	ldr	r3, [r3, #0]
 c001df6:	b2db      	uxtb	r3, r3
 c001df8:	3b08      	subs	r3, #8
 c001dfa:	4a0c      	ldr	r2, [pc, #48]	; (c001e2c <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 c001dfc:	fba2 2303 	umull	r2, r3, r2, r3
 c001e00:	091b      	lsrs	r3, r3, #4
 c001e02:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 c001e04:	687b      	ldr	r3, [r7, #4]
 c001e06:	4a0a      	ldr	r2, [pc, #40]	; (c001e30 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 c001e08:	655a      	str	r2, [r3, #84]	; 0x54
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 c001e0a:	68fb      	ldr	r3, [r7, #12]
 c001e0c:	f003 031f 	and.w	r3, r3, #31
 c001e10:	2201      	movs	r2, #1
 c001e12:	409a      	lsls	r2, r3
 c001e14:	687b      	ldr	r3, [r7, #4]
 c001e16:	659a      	str	r2, [r3, #88]	; 0x58
}
 c001e18:	bf00      	nop
 c001e1a:	3714      	adds	r7, #20
 c001e1c:	46bd      	mov	sp, r7
 c001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e22:	4770      	bx	lr
 c001e24:	50020407 	.word	0x50020407
 c001e28:	50020820 	.word	0x50020820
 c001e2c:	cccccccd 	.word	0xcccccccd
 c001e30:	50020880 	.word	0x50020880

0c001e34 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 c001e34:	b480      	push	{r7}
 c001e36:	b085      	sub	sp, #20
 c001e38:	af00      	add	r7, sp, #0
 c001e3a:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 c001e3c:	687b      	ldr	r3, [r7, #4]
 c001e3e:	685b      	ldr	r3, [r3, #4]
 c001e40:	b2db      	uxtb	r3, r3
 c001e42:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 c001e44:	68fa      	ldr	r2, [r7, #12]
 c001e46:	4b0b      	ldr	r3, [pc, #44]	; (c001e74 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 c001e48:	4413      	add	r3, r2
 c001e4a:	009b      	lsls	r3, r3, #2
 c001e4c:	461a      	mov	r2, r3
 c001e4e:	687b      	ldr	r3, [r7, #4]
 c001e50:	65da      	str	r2, [r3, #92]	; 0x5c

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 c001e52:	687b      	ldr	r3, [r7, #4]
 c001e54:	4a08      	ldr	r2, [pc, #32]	; (c001e78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 c001e56:	661a      	str	r2, [r3, #96]	; 0x60

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR3, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 c001e58:	68fb      	ldr	r3, [r7, #12]
 c001e5a:	3b01      	subs	r3, #1
 c001e5c:	f003 0303 	and.w	r3, r3, #3
 c001e60:	2201      	movs	r2, #1
 c001e62:	409a      	lsls	r2, r3
 c001e64:	687b      	ldr	r3, [r7, #4]
 c001e66:	665a      	str	r2, [r3, #100]	; 0x64
}
 c001e68:	bf00      	nop
 c001e6a:	3714      	adds	r7, #20
 c001e6c:	46bd      	mov	sp, r7
 c001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c001e72:	4770      	bx	lr
 c001e74:	1400823f 	.word	0x1400823f
 c001e78:	50020940 	.word	0x50020940

0c001e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 c001e7c:	b480      	push	{r7}
 c001e7e:	b087      	sub	sp, #28
 c001e80:	af00      	add	r7, sp, #0
 c001e82:	6078      	str	r0, [r7, #4]
 c001e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0U;
 c001e86:	2300      	movs	r3, #0
 c001e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 c001e8a:	e158      	b.n	c00213e <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 c001e8c:	683b      	ldr	r3, [r7, #0]
 c001e8e:	681a      	ldr	r2, [r3, #0]
 c001e90:	2101      	movs	r1, #1
 c001e92:	697b      	ldr	r3, [r7, #20]
 c001e94:	fa01 f303 	lsl.w	r3, r1, r3
 c001e98:	4013      	ands	r3, r2
 c001e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 c001e9c:	68fb      	ldr	r3, [r7, #12]
 c001e9e:	2b00      	cmp	r3, #0
 c001ea0:	f000 814a 	beq.w	c002138 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 c001ea4:	683b      	ldr	r3, [r7, #0]
 c001ea6:	685b      	ldr	r3, [r3, #4]
 c001ea8:	f003 0303 	and.w	r3, r3, #3
 c001eac:	2b01      	cmp	r3, #1
 c001eae:	d005      	beq.n	c001ebc <HAL_GPIO_Init+0x40>
 c001eb0:	683b      	ldr	r3, [r7, #0]
 c001eb2:	685b      	ldr	r3, [r3, #4]
 c001eb4:	f003 0303 	and.w	r3, r3, #3
 c001eb8:	2b02      	cmp	r3, #2
 c001eba:	d130      	bne.n	c001f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 c001ebc:	687b      	ldr	r3, [r7, #4]
 c001ebe:	689b      	ldr	r3, [r3, #8]
 c001ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 c001ec2:	697b      	ldr	r3, [r7, #20]
 c001ec4:	005b      	lsls	r3, r3, #1
 c001ec6:	2203      	movs	r2, #3
 c001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 c001ecc:	43db      	mvns	r3, r3
 c001ece:	693a      	ldr	r2, [r7, #16]
 c001ed0:	4013      	ands	r3, r2
 c001ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 c001ed4:	683b      	ldr	r3, [r7, #0]
 c001ed6:	68da      	ldr	r2, [r3, #12]
 c001ed8:	697b      	ldr	r3, [r7, #20]
 c001eda:	005b      	lsls	r3, r3, #1
 c001edc:	fa02 f303 	lsl.w	r3, r2, r3
 c001ee0:	693a      	ldr	r2, [r7, #16]
 c001ee2:	4313      	orrs	r3, r2
 c001ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 c001ee6:	687b      	ldr	r3, [r7, #4]
 c001ee8:	693a      	ldr	r2, [r7, #16]
 c001eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 c001eec:	687b      	ldr	r3, [r7, #4]
 c001eee:	685b      	ldr	r3, [r3, #4]
 c001ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 c001ef2:	2201      	movs	r2, #1
 c001ef4:	697b      	ldr	r3, [r7, #20]
 c001ef6:	fa02 f303 	lsl.w	r3, r2, r3
 c001efa:	43db      	mvns	r3, r3
 c001efc:	693a      	ldr	r2, [r7, #16]
 c001efe:	4013      	ands	r3, r2
 c001f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 c001f02:	683b      	ldr	r3, [r7, #0]
 c001f04:	685b      	ldr	r3, [r3, #4]
 c001f06:	091b      	lsrs	r3, r3, #4
 c001f08:	f003 0201 	and.w	r2, r3, #1
 c001f0c:	697b      	ldr	r3, [r7, #20]
 c001f0e:	fa02 f303 	lsl.w	r3, r2, r3
 c001f12:	693a      	ldr	r2, [r7, #16]
 c001f14:	4313      	orrs	r3, r2
 c001f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 c001f18:	687b      	ldr	r3, [r7, #4]
 c001f1a:	693a      	ldr	r2, [r7, #16]
 c001f1c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 c001f1e:	683b      	ldr	r3, [r7, #0]
 c001f20:	685b      	ldr	r3, [r3, #4]
 c001f22:	f003 0303 	and.w	r3, r3, #3
 c001f26:	2b03      	cmp	r3, #3
 c001f28:	d017      	beq.n	c001f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 c001f2a:	687b      	ldr	r3, [r7, #4]
 c001f2c:	68db      	ldr	r3, [r3, #12]
 c001f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 c001f30:	697b      	ldr	r3, [r7, #20]
 c001f32:	005b      	lsls	r3, r3, #1
 c001f34:	2203      	movs	r2, #3
 c001f36:	fa02 f303 	lsl.w	r3, r2, r3
 c001f3a:	43db      	mvns	r3, r3
 c001f3c:	693a      	ldr	r2, [r7, #16]
 c001f3e:	4013      	ands	r3, r2
 c001f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 c001f42:	683b      	ldr	r3, [r7, #0]
 c001f44:	689a      	ldr	r2, [r3, #8]
 c001f46:	697b      	ldr	r3, [r7, #20]
 c001f48:	005b      	lsls	r3, r3, #1
 c001f4a:	fa02 f303 	lsl.w	r3, r2, r3
 c001f4e:	693a      	ldr	r2, [r7, #16]
 c001f50:	4313      	orrs	r3, r2
 c001f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 c001f54:	687b      	ldr	r3, [r7, #4]
 c001f56:	693a      	ldr	r2, [r7, #16]
 c001f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 c001f5a:	683b      	ldr	r3, [r7, #0]
 c001f5c:	685b      	ldr	r3, [r3, #4]
 c001f5e:	f003 0303 	and.w	r3, r3, #3
 c001f62:	2b02      	cmp	r3, #2
 c001f64:	d123      	bne.n	c001fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 c001f66:	697b      	ldr	r3, [r7, #20]
 c001f68:	08da      	lsrs	r2, r3, #3
 c001f6a:	687b      	ldr	r3, [r7, #4]
 c001f6c:	3208      	adds	r2, #8
 c001f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 c001f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << ((position & 0x07U) * 4U)) ;
 c001f74:	697b      	ldr	r3, [r7, #20]
 c001f76:	f003 0307 	and.w	r3, r3, #7
 c001f7a:	009b      	lsls	r3, r3, #2
 c001f7c:	220f      	movs	r2, #15
 c001f7e:	fa02 f303 	lsl.w	r3, r2, r3
 c001f82:	43db      	mvns	r3, r3
 c001f84:	693a      	ldr	r2, [r7, #16]
 c001f86:	4013      	ands	r3, r2
 c001f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 c001f8a:	683b      	ldr	r3, [r7, #0]
 c001f8c:	691a      	ldr	r2, [r3, #16]
 c001f8e:	697b      	ldr	r3, [r7, #20]
 c001f90:	f003 0307 	and.w	r3, r3, #7
 c001f94:	009b      	lsls	r3, r3, #2
 c001f96:	fa02 f303 	lsl.w	r3, r2, r3
 c001f9a:	693a      	ldr	r2, [r7, #16]
 c001f9c:	4313      	orrs	r3, r2
 c001f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 c001fa0:	697b      	ldr	r3, [r7, #20]
 c001fa2:	08da      	lsrs	r2, r3, #3
 c001fa4:	687b      	ldr	r3, [r7, #4]
 c001fa6:	3208      	adds	r2, #8
 c001fa8:	6939      	ldr	r1, [r7, #16]
 c001faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 c001fae:	687b      	ldr	r3, [r7, #4]
 c001fb0:	681b      	ldr	r3, [r3, #0]
 c001fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 c001fb4:	697b      	ldr	r3, [r7, #20]
 c001fb6:	005b      	lsls	r3, r3, #1
 c001fb8:	2203      	movs	r2, #3
 c001fba:	fa02 f303 	lsl.w	r3, r2, r3
 c001fbe:	43db      	mvns	r3, r3
 c001fc0:	693a      	ldr	r2, [r7, #16]
 c001fc2:	4013      	ands	r3, r2
 c001fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 c001fc6:	683b      	ldr	r3, [r7, #0]
 c001fc8:	685b      	ldr	r3, [r3, #4]
 c001fca:	f003 0203 	and.w	r2, r3, #3
 c001fce:	697b      	ldr	r3, [r7, #20]
 c001fd0:	005b      	lsls	r3, r3, #1
 c001fd2:	fa02 f303 	lsl.w	r3, r2, r3
 c001fd6:	693a      	ldr	r2, [r7, #16]
 c001fd8:	4313      	orrs	r3, r2
 c001fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 c001fdc:	687b      	ldr	r3, [r7, #4]
 c001fde:	693a      	ldr	r2, [r7, #16]
 c001fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 c001fe2:	683b      	ldr	r3, [r7, #0]
 c001fe4:	685b      	ldr	r3, [r3, #4]
 c001fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 c001fea:	2b00      	cmp	r3, #0
 c001fec:	f000 80a4 	beq.w	c002138 <HAL_GPIO_Init+0x2bc>
      {
        temp = EXTI->EXTICR[position >> 2U];
 c001ff0:	4a5a      	ldr	r2, [pc, #360]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c001ff2:	697b      	ldr	r3, [r7, #20]
 c001ff4:	089b      	lsrs	r3, r3, #2
 c001ff6:	3318      	adds	r3, #24
 c001ff8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c001ffc:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (8U * (position & 0x03U)));
 c001ffe:	697b      	ldr	r3, [r7, #20]
 c002000:	f003 0303 	and.w	r3, r3, #3
 c002004:	00db      	lsls	r3, r3, #3
 c002006:	220f      	movs	r2, #15
 c002008:	fa02 f303 	lsl.w	r3, r2, r3
 c00200c:	43db      	mvns	r3, r3
 c00200e:	693a      	ldr	r2, [r7, #16]
 c002010:	4013      	ands	r3, r2
 c002012:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 c002014:	687b      	ldr	r3, [r7, #4]
 c002016:	4a52      	ldr	r2, [pc, #328]	; (c002160 <HAL_GPIO_Init+0x2e4>)
 c002018:	4293      	cmp	r3, r2
 c00201a:	d025      	beq.n	c002068 <HAL_GPIO_Init+0x1ec>
 c00201c:	687b      	ldr	r3, [r7, #4]
 c00201e:	4a51      	ldr	r2, [pc, #324]	; (c002164 <HAL_GPIO_Init+0x2e8>)
 c002020:	4293      	cmp	r3, r2
 c002022:	d01f      	beq.n	c002064 <HAL_GPIO_Init+0x1e8>
 c002024:	687b      	ldr	r3, [r7, #4]
 c002026:	4a50      	ldr	r2, [pc, #320]	; (c002168 <HAL_GPIO_Init+0x2ec>)
 c002028:	4293      	cmp	r3, r2
 c00202a:	d019      	beq.n	c002060 <HAL_GPIO_Init+0x1e4>
 c00202c:	687b      	ldr	r3, [r7, #4]
 c00202e:	4a4f      	ldr	r2, [pc, #316]	; (c00216c <HAL_GPIO_Init+0x2f0>)
 c002030:	4293      	cmp	r3, r2
 c002032:	d013      	beq.n	c00205c <HAL_GPIO_Init+0x1e0>
 c002034:	687b      	ldr	r3, [r7, #4]
 c002036:	4a4e      	ldr	r2, [pc, #312]	; (c002170 <HAL_GPIO_Init+0x2f4>)
 c002038:	4293      	cmp	r3, r2
 c00203a:	d00d      	beq.n	c002058 <HAL_GPIO_Init+0x1dc>
 c00203c:	687b      	ldr	r3, [r7, #4]
 c00203e:	4a4d      	ldr	r2, [pc, #308]	; (c002174 <HAL_GPIO_Init+0x2f8>)
 c002040:	4293      	cmp	r3, r2
 c002042:	d007      	beq.n	c002054 <HAL_GPIO_Init+0x1d8>
 c002044:	687b      	ldr	r3, [r7, #4]
 c002046:	4a4c      	ldr	r2, [pc, #304]	; (c002178 <HAL_GPIO_Init+0x2fc>)
 c002048:	4293      	cmp	r3, r2
 c00204a:	d101      	bne.n	c002050 <HAL_GPIO_Init+0x1d4>
 c00204c:	2306      	movs	r3, #6
 c00204e:	e00c      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002050:	2307      	movs	r3, #7
 c002052:	e00a      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002054:	2305      	movs	r3, #5
 c002056:	e008      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002058:	2304      	movs	r3, #4
 c00205a:	e006      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c00205c:	2303      	movs	r3, #3
 c00205e:	e004      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002060:	2302      	movs	r3, #2
 c002062:	e002      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002064:	2301      	movs	r3, #1
 c002066:	e000      	b.n	c00206a <HAL_GPIO_Init+0x1ee>
 c002068:	2300      	movs	r3, #0
 c00206a:	697a      	ldr	r2, [r7, #20]
 c00206c:	f002 0203 	and.w	r2, r2, #3
 c002070:	00d2      	lsls	r2, r2, #3
 c002072:	4093      	lsls	r3, r2
 c002074:	693a      	ldr	r2, [r7, #16]
 c002076:	4313      	orrs	r3, r2
 c002078:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2U] = temp;
 c00207a:	4938      	ldr	r1, [pc, #224]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c00207c:	697b      	ldr	r3, [r7, #20]
 c00207e:	089b      	lsrs	r3, r3, #2
 c002080:	3318      	adds	r3, #24
 c002082:	693a      	ldr	r2, [r7, #16]
 c002084:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 c002088:	4b34      	ldr	r3, [pc, #208]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c00208a:	681b      	ldr	r3, [r3, #0]
 c00208c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c00208e:	68fb      	ldr	r3, [r7, #12]
 c002090:	43db      	mvns	r3, r3
 c002092:	693a      	ldr	r2, [r7, #16]
 c002094:	4013      	ands	r3, r2
 c002096:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 c002098:	683b      	ldr	r3, [r7, #0]
 c00209a:	685b      	ldr	r3, [r3, #4]
 c00209c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c0020a0:	2b00      	cmp	r3, #0
 c0020a2:	d003      	beq.n	c0020ac <HAL_GPIO_Init+0x230>
        {
          temp |= iocurrent;
 c0020a4:	693a      	ldr	r2, [r7, #16]
 c0020a6:	68fb      	ldr	r3, [r7, #12]
 c0020a8:	4313      	orrs	r3, r2
 c0020aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 c0020ac:	4a2b      	ldr	r2, [pc, #172]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c0020ae:	693b      	ldr	r3, [r7, #16]
 c0020b0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 c0020b2:	4b2a      	ldr	r3, [pc, #168]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c0020b4:	685b      	ldr	r3, [r3, #4]
 c0020b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0020b8:	68fb      	ldr	r3, [r7, #12]
 c0020ba:	43db      	mvns	r3, r3
 c0020bc:	693a      	ldr	r2, [r7, #16]
 c0020be:	4013      	ands	r3, r2
 c0020c0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 c0020c2:	683b      	ldr	r3, [r7, #0]
 c0020c4:	685b      	ldr	r3, [r3, #4]
 c0020c6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c0020ca:	2b00      	cmp	r3, #0
 c0020cc:	d003      	beq.n	c0020d6 <HAL_GPIO_Init+0x25a>
        {
          temp |= iocurrent;
 c0020ce:	693a      	ldr	r2, [r7, #16]
 c0020d0:	68fb      	ldr	r3, [r7, #12]
 c0020d2:	4313      	orrs	r3, r2
 c0020d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 c0020d6:	4a21      	ldr	r2, [pc, #132]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c0020d8:	693b      	ldr	r3, [r7, #16]
 c0020da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 c0020dc:	4b1f      	ldr	r3, [pc, #124]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c0020de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c0020e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c0020e4:	68fb      	ldr	r3, [r7, #12]
 c0020e6:	43db      	mvns	r3, r3
 c0020e8:	693a      	ldr	r2, [r7, #16]
 c0020ea:	4013      	ands	r3, r2
 c0020ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 c0020ee:	683b      	ldr	r3, [r7, #0]
 c0020f0:	685b      	ldr	r3, [r3, #4]
 c0020f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0020f6:	2b00      	cmp	r3, #0
 c0020f8:	d003      	beq.n	c002102 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 c0020fa:	693a      	ldr	r2, [r7, #16]
 c0020fc:	68fb      	ldr	r3, [r7, #12]
 c0020fe:	4313      	orrs	r3, r2
 c002100:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 c002102:	4a16      	ldr	r2, [pc, #88]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c002104:	693b      	ldr	r3, [r7, #16]
 c002106:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84

        temp = EXTI->IMR1;
 c00210a:	4b14      	ldr	r3, [pc, #80]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c00210c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c002110:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 c002112:	68fb      	ldr	r3, [r7, #12]
 c002114:	43db      	mvns	r3, r3
 c002116:	693a      	ldr	r2, [r7, #16]
 c002118:	4013      	ands	r3, r2
 c00211a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 c00211c:	683b      	ldr	r3, [r7, #0]
 c00211e:	685b      	ldr	r3, [r3, #4]
 c002120:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c002124:	2b00      	cmp	r3, #0
 c002126:	d003      	beq.n	c002130 <HAL_GPIO_Init+0x2b4>
        {
          temp |= iocurrent;
 c002128:	693a      	ldr	r2, [r7, #16]
 c00212a:	68fb      	ldr	r3, [r7, #12]
 c00212c:	4313      	orrs	r3, r2
 c00212e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 c002130:	4a0a      	ldr	r2, [pc, #40]	; (c00215c <HAL_GPIO_Init+0x2e0>)
 c002132:	693b      	ldr	r3, [r7, #16]
 c002134:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
      }
    }

    position++;
 c002138:	697b      	ldr	r3, [r7, #20]
 c00213a:	3301      	adds	r3, #1
 c00213c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 c00213e:	683b      	ldr	r3, [r7, #0]
 c002140:	681a      	ldr	r2, [r3, #0]
 c002142:	697b      	ldr	r3, [r7, #20]
 c002144:	fa22 f303 	lsr.w	r3, r2, r3
 c002148:	2b00      	cmp	r3, #0
 c00214a:	f47f ae9f 	bne.w	c001e8c <HAL_GPIO_Init+0x10>
  }
}
 c00214e:	bf00      	nop
 c002150:	bf00      	nop
 c002152:	371c      	adds	r7, #28
 c002154:	46bd      	mov	sp, r7
 c002156:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00215a:	4770      	bx	lr
 c00215c:	5002f400 	.word	0x5002f400
 c002160:	52020000 	.word	0x52020000
 c002164:	52020400 	.word	0x52020400
 c002168:	52020800 	.word	0x52020800
 c00216c:	52020c00 	.word	0x52020c00
 c002170:	52021000 	.word	0x52021000
 c002174:	52021400 	.word	0x52021400
 c002178:	52021800 	.word	0x52021800

0c00217c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 c00217c:	b480      	push	{r7}
 c00217e:	b083      	sub	sp, #12
 c002180:	af00      	add	r7, sp, #0
 c002182:	6078      	str	r0, [r7, #4]
 c002184:	460b      	mov	r3, r1
 c002186:	807b      	strh	r3, [r7, #2]
 c002188:	4613      	mov	r3, r2
 c00218a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 c00218c:	787b      	ldrb	r3, [r7, #1]
 c00218e:	2b00      	cmp	r3, #0
 c002190:	d003      	beq.n	c00219a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 c002192:	887a      	ldrh	r2, [r7, #2]
 c002194:	687b      	ldr	r3, [r7, #4]
 c002196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 c002198:	e002      	b.n	c0021a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 c00219a:	887a      	ldrh	r2, [r7, #2]
 c00219c:	687b      	ldr	r3, [r7, #4]
 c00219e:	629a      	str	r2, [r3, #40]	; 0x28
}
 c0021a0:	bf00      	nop
 c0021a2:	370c      	adds	r7, #12
 c0021a4:	46bd      	mov	sp, r7
 c0021a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0021aa:	4770      	bx	lr

0c0021ac <HAL_GPIO_ConfigPinAttributes>:
  * @param  GPIO_Pin specifies the pin(s) to configure the secure attribute
  * @param  PinAttributes specifies the pin(s) to be set in secure mode, other being set non secured.
  * @retval None
  */
void HAL_GPIO_ConfigPinAttributes(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, uint32_t PinAttributes)
{
 c0021ac:	b480      	push	{r7}
 c0021ae:	b089      	sub	sp, #36	; 0x24
 c0021b0:	af00      	add	r7, sp, #0
 c0021b2:	60f8      	str	r0, [r7, #12]
 c0021b4:	460b      	mov	r3, r1
 c0021b6:	607a      	str	r2, [r7, #4]
 c0021b8:	817b      	strh	r3, [r7, #10]
  uint32_t position = 0U;
 c0021ba:	2300      	movs	r3, #0
 c0021bc:	61fb      	str	r3, [r7, #28]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ATTRIBUTES(PinAttributes));

  temp = GPIOx->SECCFGR;
 c0021be:	68fb      	ldr	r3, [r7, #12]
 c0021c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c0021c2:	61bb      	str	r3, [r7, #24]

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0U)
 c0021c4:	e01b      	b.n	c0021fe <HAL_GPIO_ConfigPinAttributes+0x52>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position);
 c0021c6:	897a      	ldrh	r2, [r7, #10]
 c0021c8:	2101      	movs	r1, #1
 c0021ca:	69fb      	ldr	r3, [r7, #28]
 c0021cc:	fa01 f303 	lsl.w	r3, r1, r3
 c0021d0:	4013      	ands	r3, r2
 c0021d2:	617b      	str	r3, [r7, #20]

    if (iocurrent != 0U)
 c0021d4:	697b      	ldr	r3, [r7, #20]
 c0021d6:	2b00      	cmp	r3, #0
 c0021d8:	d00e      	beq.n	c0021f8 <HAL_GPIO_ConfigPinAttributes+0x4c>
    {
      /* Configure the IO secure attribute */
      temp &= ~(GPIO_SECCFGR_SEC0 << position) ;
 c0021da:	2201      	movs	r2, #1
 c0021dc:	69fb      	ldr	r3, [r7, #28]
 c0021de:	fa02 f303 	lsl.w	r3, r2, r3
 c0021e2:	43db      	mvns	r3, r3
 c0021e4:	69ba      	ldr	r2, [r7, #24]
 c0021e6:	4013      	ands	r3, r2
 c0021e8:	61bb      	str	r3, [r7, #24]
      temp |= (PinAttributes << position);
 c0021ea:	687a      	ldr	r2, [r7, #4]
 c0021ec:	69fb      	ldr	r3, [r7, #28]
 c0021ee:	fa02 f303 	lsl.w	r3, r2, r3
 c0021f2:	69ba      	ldr	r2, [r7, #24]
 c0021f4:	4313      	orrs	r3, r2
 c0021f6:	61bb      	str	r3, [r7, #24]
    }
    position++;
 c0021f8:	69fb      	ldr	r3, [r7, #28]
 c0021fa:	3301      	adds	r3, #1
 c0021fc:	61fb      	str	r3, [r7, #28]
  while ((GPIO_Pin >> position) != 0U)
 c0021fe:	897a      	ldrh	r2, [r7, #10]
 c002200:	69fb      	ldr	r3, [r7, #28]
 c002202:	fa42 f303 	asr.w	r3, r2, r3
 c002206:	2b00      	cmp	r3, #0
 c002208:	d1dd      	bne.n	c0021c6 <HAL_GPIO_ConfigPinAttributes+0x1a>
  }

  /* Set secure attributes */
  GPIOx->SECCFGR = temp;
 c00220a:	68fb      	ldr	r3, [r7, #12]
 c00220c:	69ba      	ldr	r2, [r7, #24]
 c00220e:	631a      	str	r2, [r3, #48]	; 0x30
}
 c002210:	bf00      	nop
 c002212:	3724      	adds	r7, #36	; 0x24
 c002214:	46bd      	mov	sp, r7
 c002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00221a:	4770      	bx	lr

0c00221c <HAL_GTZC_TZSC_ConfigPeriphAttributes>:
  * @param  PeriphAttributes Peripheral attributes, see @ref GTZC_TZSC_PeriphAttributes.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_TZSC_ConfigPeriphAttributes(uint32_t PeriphId,
                                                       uint32_t PeriphAttributes)
{
 c00221c:	b480      	push	{r7}
 c00221e:	b085      	sub	sp, #20
 c002220:	af00      	add	r7, sp, #0
 c002222:	6078      	str	r0, [r7, #4]
 c002224:	6039      	str	r1, [r7, #0]
  uint32_t register_address;

  /* check entry parameters */
  if ((PeriphAttributes > (GTZC_TZSC_PERIPH_SEC | GTZC_TZSC_PERIPH_PRIV))
 c002226:	683b      	ldr	r3, [r7, #0]
 c002228:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 c00222c:	d216      	bcs.n	c00225c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) >= GTZC_TZSC_PERIPH_NUMBER)
 c00222e:	687b      	ldr	r3, [r7, #4]
 c002230:	0f1b      	lsrs	r3, r3, #28
 c002232:	015a      	lsls	r2, r3, #5
 c002234:	687b      	ldr	r3, [r7, #4]
 c002236:	f003 031f 	and.w	r3, r3, #31
 c00223a:	4413      	add	r3, r2
 c00223c:	2b32      	cmp	r3, #50	; 0x32
 c00223e:	d80d      	bhi.n	c00225c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x40>
      || (((PeriphId & GTZC_PERIPH_ALL) != 0U) && (HAL_GTZC_GET_ARRAY_INDEX(PeriphId) != 0U)))
 c002240:	687b      	ldr	r3, [r7, #4]
 c002242:	f003 0320 	and.w	r3, r3, #32
 c002246:	2b00      	cmp	r3, #0
 c002248:	d00a      	beq.n	c002260 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
 c00224a:	687b      	ldr	r3, [r7, #4]
 c00224c:	0f1b      	lsrs	r3, r3, #28
 c00224e:	015a      	lsls	r2, r3, #5
 c002250:	687b      	ldr	r3, [r7, #4]
 c002252:	f003 031f 	and.w	r3, r3, #31
 c002256:	4413      	add	r3, r2
 c002258:	2b00      	cmp	r3, #0
 c00225a:	d001      	beq.n	c002260 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x44>
  {
    return HAL_ERROR;
 c00225c:	2301      	movs	r3, #1
 c00225e:	e0a8      	b.n	c0023b2 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x196>
  }

  if ((PeriphId & GTZC_PERIPH_ALL) != 0U)
 c002260:	687b      	ldr	r3, [r7, #4]
 c002262:	f003 0320 	and.w	r3, r3, #32
 c002266:	2b00      	cmp	r3, #0
 c002268:	d04e      	beq.n	c002308 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xec>
  {
    /* special case where same attributes are applied to all peripherals */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c00226a:	683a      	ldr	r2, [r7, #0]
 c00226c:	f240 1301 	movw	r3, #257	; 0x101
 c002270:	4013      	ands	r3, r2
 c002272:	f240 1201 	movw	r2, #257	; 0x101
 c002276:	4293      	cmp	r3, r2
 c002278:	d10e      	bne.n	c002298 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x7c>
    {
      SET_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c00227a:	4b51      	ldr	r3, [pc, #324]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00227c:	691b      	ldr	r3, [r3, #16]
 c00227e:	4b50      	ldr	r3, [pc, #320]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002280:	f04f 32ff 	mov.w	r2, #4294967295
 c002284:	611a      	str	r2, [r3, #16]
      SET_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c002286:	4b4e      	ldr	r3, [pc, #312]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002288:	695b      	ldr	r3, [r3, #20]
 c00228a:	4a4d      	ldr	r2, [pc, #308]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c00228c:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c002290:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c002294:	6153      	str	r3, [r2, #20]
 c002296:	e00f      	b.n	c0022b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c002298:	683b      	ldr	r3, [r7, #0]
 c00229a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c00229e:	2b00      	cmp	r3, #0
 c0022a0:	d00a      	beq.n	c0022b8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x9c>
    {
      CLEAR_BIT(GTZC_TZSC->SECCFGR1, TZSC_SECCFGR1_ALL);
 c0022a2:	4b47      	ldr	r3, [pc, #284]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022a4:	691b      	ldr	r3, [r3, #16]
 c0022a6:	4b46      	ldr	r3, [pc, #280]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022a8:	2200      	movs	r2, #0
 c0022aa:	611a      	str	r2, [r3, #16]
      CLEAR_BIT(GTZC_TZSC->SECCFGR2, TZSC_SECCFGR2_ALL);
 c0022ac:	4b44      	ldr	r3, [pc, #272]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022ae:	695b      	ldr	r3, [r3, #20]
 c0022b0:	4a43      	ldr	r2, [pc, #268]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022b2:	0cdb      	lsrs	r3, r3, #19
 c0022b4:	04db      	lsls	r3, r3, #19
 c0022b6:	6153      	str	r3, [r2, #20]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c0022b8:	683a      	ldr	r2, [r7, #0]
 c0022ba:	f240 2302 	movw	r3, #514	; 0x202
 c0022be:	4013      	ands	r3, r2
 c0022c0:	f240 2202 	movw	r2, #514	; 0x202
 c0022c4:	4293      	cmp	r3, r2
 c0022c6:	d10e      	bne.n	c0022e6 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0xca>
    {
      SET_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0022c8:	4b3d      	ldr	r3, [pc, #244]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022ca:	6a1b      	ldr	r3, [r3, #32]
 c0022cc:	4b3c      	ldr	r3, [pc, #240]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022ce:	f04f 32ff 	mov.w	r2, #4294967295
 c0022d2:	621a      	str	r2, [r3, #32]
      SET_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0022d4:	4b3a      	ldr	r3, [pc, #232]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0022d8:	4a39      	ldr	r2, [pc, #228]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022da:	ea6f 43d3 	mvn.w	r3, r3, lsr #19
 c0022de:	ea6f 43c3 	mvn.w	r3, r3, lsl #19
 c0022e2:	6253      	str	r3, [r2, #36]	; 0x24
 c0022e4:	e064      	b.n	c0023b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c0022e6:	683b      	ldr	r3, [r7, #0]
 c0022e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0022ec:	2b00      	cmp	r3, #0
 c0022ee:	d05f      	beq.n	c0023b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR1, TZSC_PRIVCFGR1_ALL);
 c0022f0:	4b33      	ldr	r3, [pc, #204]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022f2:	6a1b      	ldr	r3, [r3, #32]
 c0022f4:	4b32      	ldr	r3, [pc, #200]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022f6:	2200      	movs	r2, #0
 c0022f8:	621a      	str	r2, [r3, #32]
      CLEAR_BIT(GTZC_TZSC->PRIVCFGR2, TZSC_PRIVCFGR2_ALL);
 c0022fa:	4b31      	ldr	r3, [pc, #196]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c0022fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0022fe:	4a30      	ldr	r2, [pc, #192]	; (c0023c0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a4>)
 c002300:	0cdb      	lsrs	r3, r3, #19
 c002302:	04db      	lsls	r3, r3, #19
 c002304:	6253      	str	r3, [r2, #36]	; 0x24
 c002306:	e053      	b.n	c0023b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
  {
    /* common case where only one peripheral is configured */

#if defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U)
    /* secure configuration */
    register_address = (uint32_t) &(GTZC_TZSC->SECCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c002308:	687b      	ldr	r3, [r7, #4]
 c00230a:	0f1a      	lsrs	r2, r3, #28
 c00230c:	4b2d      	ldr	r3, [pc, #180]	; (c0023c4 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1a8>)
 c00230e:	4413      	add	r3, r2
 c002310:	009b      	lsls	r3, r3, #2
 c002312:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_SEC) == GTZC_TZSC_PERIPH_SEC)
 c002314:	683a      	ldr	r2, [r7, #0]
 c002316:	f240 1301 	movw	r3, #257	; 0x101
 c00231a:	4013      	ands	r3, r2
 c00231c:	f240 1201 	movw	r2, #257	; 0x101
 c002320:	4293      	cmp	r3, r2
 c002322:	d10a      	bne.n	c00233a <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x11e>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002324:	68fb      	ldr	r3, [r7, #12]
 c002326:	6819      	ldr	r1, [r3, #0]
 c002328:	687b      	ldr	r3, [r7, #4]
 c00232a:	f003 031f 	and.w	r3, r3, #31
 c00232e:	2201      	movs	r2, #1
 c002330:	409a      	lsls	r2, r3
 c002332:	68fb      	ldr	r3, [r7, #12]
 c002334:	430a      	orrs	r2, r1
 c002336:	601a      	str	r2, [r3, #0]
 c002338:	e010      	b.n	c00235c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NSEC) == GTZC_TZSC_PERIPH_NSEC)
 c00233a:	683b      	ldr	r3, [r7, #0]
 c00233c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002340:	2b00      	cmp	r3, #0
 c002342:	d00b      	beq.n	c00235c <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x140>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002344:	68fb      	ldr	r3, [r7, #12]
 c002346:	6819      	ldr	r1, [r3, #0]
 c002348:	687b      	ldr	r3, [r7, #4]
 c00234a:	f003 031f 	and.w	r3, r3, #31
 c00234e:	2201      	movs	r2, #1
 c002350:	fa02 f303 	lsl.w	r3, r2, r3
 c002354:	43da      	mvns	r2, r3
 c002356:	68fb      	ldr	r3, [r7, #12]
 c002358:	400a      	ands	r2, r1
 c00235a:	601a      	str	r2, [r3, #0]
      /* do nothing */
    }
#endif /* defined(__ARM_FEATURE_CMSE) && (__ARM_FEATURE_CMSE == 3U) */

    /* privilege configuration */
    register_address = (uint32_t) &(GTZC_TZSC->PRIVCFGR1) + (4U * GTZC_GET_REG_INDEX(PeriphId));
 c00235c:	687b      	ldr	r3, [r7, #4]
 c00235e:	0f1a      	lsrs	r2, r3, #28
 c002360:	4b19      	ldr	r3, [pc, #100]	; (c0023c8 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x1ac>)
 c002362:	4413      	add	r3, r2
 c002364:	009b      	lsls	r3, r3, #2
 c002366:	60fb      	str	r3, [r7, #12]
    if ((PeriphAttributes & GTZC_TZSC_PERIPH_PRIV) == GTZC_TZSC_PERIPH_PRIV)
 c002368:	683a      	ldr	r2, [r7, #0]
 c00236a:	f240 2302 	movw	r3, #514	; 0x202
 c00236e:	4013      	ands	r3, r2
 c002370:	f240 2202 	movw	r2, #514	; 0x202
 c002374:	4293      	cmp	r3, r2
 c002376:	d10a      	bne.n	c00238e <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x172>
    {
      SET_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002378:	68fb      	ldr	r3, [r7, #12]
 c00237a:	6819      	ldr	r1, [r3, #0]
 c00237c:	687b      	ldr	r3, [r7, #4]
 c00237e:	f003 031f 	and.w	r3, r3, #31
 c002382:	2201      	movs	r2, #1
 c002384:	409a      	lsls	r2, r3
 c002386:	68fb      	ldr	r3, [r7, #12]
 c002388:	430a      	orrs	r2, r1
 c00238a:	601a      	str	r2, [r3, #0]
 c00238c:	e010      	b.n	c0023b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    }
    else if ((PeriphAttributes & GTZC_TZSC_PERIPH_NPRIV) == GTZC_TZSC_PERIPH_NPRIV)
 c00238e:	683b      	ldr	r3, [r7, #0]
 c002390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c002394:	2b00      	cmp	r3, #0
 c002396:	d00b      	beq.n	c0023b0 <HAL_GTZC_TZSC_ConfigPeriphAttributes+0x194>
    {
      CLEAR_BIT(*(__IO uint32_t *)register_address, 1UL << GTZC_GET_PERIPH_POS(PeriphId));
 c002398:	68fb      	ldr	r3, [r7, #12]
 c00239a:	6819      	ldr	r1, [r3, #0]
 c00239c:	687b      	ldr	r3, [r7, #4]
 c00239e:	f003 031f 	and.w	r3, r3, #31
 c0023a2:	2201      	movs	r2, #1
 c0023a4:	fa02 f303 	lsl.w	r3, r2, r3
 c0023a8:	43da      	mvns	r2, r3
 c0023aa:	68fb      	ldr	r3, [r7, #12]
 c0023ac:	400a      	ands	r2, r1
 c0023ae:	601a      	str	r2, [r3, #0]
    else
    {
      /* do nothing */
    }
  }
  return HAL_OK;
 c0023b0:	2300      	movs	r3, #0
}
 c0023b2:	4618      	mov	r0, r3
 c0023b4:	3714      	adds	r7, #20
 c0023b6:	46bd      	mov	sp, r7
 c0023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0023bc:	4770      	bx	lr
 c0023be:	bf00      	nop
 c0023c0:	50032400 	.word	0x50032400
 c0023c4:	1400c904 	.word	0x1400c904
 c0023c8:	1400c908 	.word	0x1400c908

0c0023cc <HAL_GTZC_MPCBB_ConfigMem>:
  *         The structure description is available in @ref GTZC_Exported_Types.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_GTZC_MPCBB_ConfigMem(uint32_t MemBaseAddress,
                                           const MPCBB_ConfigTypeDef *pMPCBB_desc)
{
 c0023cc:	b480      	push	{r7}
 c0023ce:	b089      	sub	sp, #36	; 0x24
 c0023d0:	af00      	add	r7, sp, #0
 c0023d2:	6078      	str	r0, [r7, #4]
 c0023d4:	6039      	str	r1, [r7, #0]
  uint32_t size_mask;
  uint32_t size_in_superblocks;
  uint32_t i;

  /* check entry parameters */
  if ((!(IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c0023d6:	687b      	ldr	r3, [r7, #4]
 c0023d8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c0023dc:	d00b      	beq.n	c0023f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0023de:	687b      	ldr	r3, [r7, #4]
 c0023e0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c0023e4:	d007      	beq.n	c0023f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
       &&  !(IS_GTZC_BASE_ADDRESS(SRAM2, MemBaseAddress)))
 c0023e6:	687b      	ldr	r3, [r7, #4]
 c0023e8:	4a36      	ldr	r2, [pc, #216]	; (c0024c4 <HAL_GTZC_MPCBB_ConfigMem+0xf8>)
 c0023ea:	4293      	cmp	r3, r2
 c0023ec:	d003      	beq.n	c0023f6 <HAL_GTZC_MPCBB_ConfigMem+0x2a>
 c0023ee:	687b      	ldr	r3, [r7, #4]
 c0023f0:	4a35      	ldr	r2, [pc, #212]	; (c0024c8 <HAL_GTZC_MPCBB_ConfigMem+0xfc>)
 c0023f2:	4293      	cmp	r3, r2
 c0023f4:	d111      	bne.n	c00241a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_ENABLE)
 c0023f6:	683b      	ldr	r3, [r7, #0]
 c0023f8:	681b      	ldr	r3, [r3, #0]
 c0023fa:	2b00      	cmp	r3, #0
 c0023fc:	d004      	beq.n	c002408 <HAL_GTZC_MPCBB_ConfigMem+0x3c>
          && (pMPCBB_desc->SecureRWIllegalMode != GTZC_MPCBB_SRWILADIS_DISABLE))
 c0023fe:	683b      	ldr	r3, [r7, #0]
 c002400:	681b      	ldr	r3, [r3, #0]
 c002402:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 c002406:	d108      	bne.n	c00241a <HAL_GTZC_MPCBB_ConfigMem+0x4e>
      || ((pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_NOT_INVERTED)
 c002408:	683b      	ldr	r3, [r7, #0]
 c00240a:	685b      	ldr	r3, [r3, #4]
 c00240c:	2b00      	cmp	r3, #0
 c00240e:	d006      	beq.n	c00241e <HAL_GTZC_MPCBB_ConfigMem+0x52>
          && (pMPCBB_desc->InvertSecureState != GTZC_MPCBB_INVSECSTATE_INVERTED)))
 c002410:	683b      	ldr	r3, [r7, #0]
 c002412:	685b      	ldr	r3, [r3, #4]
 c002414:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 c002418:	d001      	beq.n	c00241e <HAL_GTZC_MPCBB_ConfigMem+0x52>
  {
    return HAL_ERROR;
 c00241a:	2301      	movs	r3, #1
 c00241c:	e04b      	b.n	c0024b6 <HAL_GTZC_MPCBB_ConfigMem+0xea>
  }

  /* write InvertSecureState and SecureRWIllegalMode properties */
  /* assume their Position/Mask is identical for all sub-blocks */
  reg_value = pMPCBB_desc->InvertSecureState;
 c00241e:	683b      	ldr	r3, [r7, #0]
 c002420:	685b      	ldr	r3, [r3, #4]
 c002422:	613b      	str	r3, [r7, #16]
  reg_value |= pMPCBB_desc->SecureRWIllegalMode;
 c002424:	683b      	ldr	r3, [r7, #0]
 c002426:	681b      	ldr	r3, [r3, #0]
 c002428:	693a      	ldr	r2, [r7, #16]
 c00242a:	4313      	orrs	r3, r2
 c00242c:	613b      	str	r3, [r7, #16]
  if (IS_GTZC_BASE_ADDRESS(SRAM1, MemBaseAddress))
 c00242e:	687b      	ldr	r3, [r7, #4]
 c002430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 c002434:	d003      	beq.n	c00243e <HAL_GTZC_MPCBB_ConfigMem+0x72>
 c002436:	687b      	ldr	r3, [r7, #4]
 c002438:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 c00243c:	d105      	bne.n	c00244a <HAL_GTZC_MPCBB_ConfigMem+0x7e>
  {
    mpcbb_ptr = GTZC_MPCBB1_S;
 c00243e:	4b23      	ldr	r3, [pc, #140]	; (c0024cc <HAL_GTZC_MPCBB_ConfigMem+0x100>)
 c002440:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM1);
 c002442:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 c002446:	61bb      	str	r3, [r7, #24]
 c002448:	e004      	b.n	c002454 <HAL_GTZC_MPCBB_ConfigMem+0x88>
  }
  else
  {
    /* Here MemBaseAddress is inside SRAM2 (already tested) */
    mpcbb_ptr = GTZC_MPCBB2_S;
 c00244a:	4b21      	ldr	r3, [pc, #132]	; (c0024d0 <HAL_GTZC_MPCBB_ConfigMem+0x104>)
 c00244c:	61fb      	str	r3, [r7, #28]
    mem_size = GTZC_MEM_SIZE(SRAM2);
 c00244e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 c002452:	61bb      	str	r3, [r7, #24]
  }

  /* write vector register information */
  size_in_superblocks = (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE);
 c002454:	69bb      	ldr	r3, [r7, #24]
 c002456:	0b5b      	lsrs	r3, r3, #13
 c002458:	60fb      	str	r3, [r7, #12]
  for (i = 0U; i < size_in_superblocks; i++)
 c00245a:	2300      	movs	r3, #0
 c00245c:	617b      	str	r3, [r7, #20]
 c00245e:	e00c      	b.n	c00247a <HAL_GTZC_MPCBB_ConfigMem+0xae>
  {
    WRITE_REG(mpcbb_ptr->VCTR[i],
 c002460:	683b      	ldr	r3, [r7, #0]
 c002462:	697a      	ldr	r2, [r7, #20]
 c002464:	3202      	adds	r2, #2
 c002466:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 c00246a:	69fb      	ldr	r3, [r7, #28]
 c00246c:	697a      	ldr	r2, [r7, #20]
 c00246e:	3240      	adds	r2, #64	; 0x40
 c002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0U; i < size_in_superblocks; i++)
 c002474:	697b      	ldr	r3, [r7, #20]
 c002476:	3301      	adds	r3, #1
 c002478:	617b      	str	r3, [r7, #20]
 c00247a:	697a      	ldr	r2, [r7, #20]
 c00247c:	68fb      	ldr	r3, [r7, #12]
 c00247e:	429a      	cmp	r2, r3
 c002480:	d3ee      	bcc.n	c002460 <HAL_GTZC_MPCBB_ConfigMem+0x94>
              pMPCBB_desc->AttributeConfig.MPCBB_SecConfig_array[i]);
  }

  /* write configuration and lock register information */
  MODIFY_REG(mpcbb_ptr->CR,
 c002482:	69fb      	ldr	r3, [r7, #28]
 c002484:	681b      	ldr	r3, [r3, #0]
 c002486:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 c00248a:	693b      	ldr	r3, [r7, #16]
 c00248c:	431a      	orrs	r2, r3
 c00248e:	69fb      	ldr	r3, [r7, #28]
 c002490:	601a      	str	r2, [r3, #0]
             GTZC_MPCBB_CR_INVSECSTATE_Msk | GTZC_MPCBB_CR_SRWILADIS_Msk, reg_value);

  size_mask = (1UL << (mem_size / GTZC_MPCBB_SUPERBLOCK_SIZE)) - 1U;
 c002492:	69bb      	ldr	r3, [r7, #24]
 c002494:	0b5b      	lsrs	r3, r3, #13
 c002496:	2201      	movs	r2, #1
 c002498:	fa02 f303 	lsl.w	r3, r2, r3
 c00249c:	3b01      	subs	r3, #1
 c00249e:	60bb      	str	r3, [r7, #8]
  /* limitation: code not portable with memory > 256K */
  MODIFY_REG(mpcbb_ptr->LCKVTR1, size_mask, pMPCBB_desc->AttributeConfig.MPCBB_LockConfig_array[0]);
 c0024a0:	69fb      	ldr	r3, [r7, #28]
 c0024a2:	691a      	ldr	r2, [r3, #16]
 c0024a4:	68bb      	ldr	r3, [r7, #8]
 c0024a6:	43db      	mvns	r3, r3
 c0024a8:	401a      	ands	r2, r3
 c0024aa:	683b      	ldr	r3, [r7, #0]
 c0024ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0024ae:	431a      	orrs	r2, r3
 c0024b0:	69fb      	ldr	r3, [r7, #28]
 c0024b2:	611a      	str	r2, [r3, #16]

  return HAL_OK;
 c0024b4:	2300      	movs	r3, #0
}
 c0024b6:	4618      	mov	r0, r3
 c0024b8:	3724      	adds	r7, #36	; 0x24
 c0024ba:	46bd      	mov	sp, r7
 c0024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0024c0:	4770      	bx	lr
 c0024c2:	bf00      	nop
 c0024c4:	20030000 	.word	0x20030000
 c0024c8:	30030000 	.word	0x30030000
 c0024cc:	50032c00 	.word	0x50032c00
 c0024d0:	50033000 	.word	0x50033000

0c0024d4 <HAL_ICACHE_ConfigAssociativityMode>:
  *            @arg ICACHE_1WAY   1-way cache (direct mapped cache)
  *            @arg ICACHE_2WAYS  2-ways set associative cache (default)
  * @retval HAL status (HAL_OK/HAL_ERROR)
  */
HAL_StatusTypeDef HAL_ICACHE_ConfigAssociativityMode(uint32_t AssociativityMode)
{
 c0024d4:	b480      	push	{r7}
 c0024d6:	b085      	sub	sp, #20
 c0024d8:	af00      	add	r7, sp, #0
 c0024da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 c0024dc:	2300      	movs	r3, #0
 c0024de:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_ICACHE_ASSOCIATIVITY_MODE(AssociativityMode));

  /* Check cache is not enabled */
  if (READ_BIT(ICACHE->CR, ICACHE_CR_EN) != 0U)
 c0024e0:	4b0b      	ldr	r3, [pc, #44]	; (c002510 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0024e2:	681b      	ldr	r3, [r3, #0]
 c0024e4:	f003 0301 	and.w	r3, r3, #1
 c0024e8:	2b00      	cmp	r3, #0
 c0024ea:	d002      	beq.n	c0024f2 <HAL_ICACHE_ConfigAssociativityMode+0x1e>
  {
    status = HAL_ERROR;
 c0024ec:	2301      	movs	r3, #1
 c0024ee:	73fb      	strb	r3, [r7, #15]
 c0024f0:	e007      	b.n	c002502 <HAL_ICACHE_ConfigAssociativityMode+0x2e>
  }
  else
  {
    MODIFY_REG(ICACHE->CR, ICACHE_CR_WAYSEL, AssociativityMode);
 c0024f2:	4b07      	ldr	r3, [pc, #28]	; (c002510 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0024f4:	681b      	ldr	r3, [r3, #0]
 c0024f6:	f023 0204 	bic.w	r2, r3, #4
 c0024fa:	4905      	ldr	r1, [pc, #20]	; (c002510 <HAL_ICACHE_ConfigAssociativityMode+0x3c>)
 c0024fc:	687b      	ldr	r3, [r7, #4]
 c0024fe:	4313      	orrs	r3, r2
 c002500:	600b      	str	r3, [r1, #0]
  }

  return status;
 c002502:	7bfb      	ldrb	r3, [r7, #15]
}
 c002504:	4618      	mov	r0, r3
 c002506:	3714      	adds	r7, #20
 c002508:	46bd      	mov	sp, r7
 c00250a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00250e:	4770      	bx	lr
 c002510:	50030400 	.word	0x50030400

0c002514 <HAL_ICACHE_Enable>:
  *         cache operation. The Instruction Cache is bypassed until the
  *         cache operation completes.
  * @retval HAL status (HAL_OK)
  */
HAL_StatusTypeDef HAL_ICACHE_Enable(void)
{
 c002514:	b480      	push	{r7}
 c002516:	af00      	add	r7, sp, #0
  SET_BIT(ICACHE->CR, ICACHE_CR_EN);
 c002518:	4b05      	ldr	r3, [pc, #20]	; (c002530 <HAL_ICACHE_Enable+0x1c>)
 c00251a:	681b      	ldr	r3, [r3, #0]
 c00251c:	4a04      	ldr	r2, [pc, #16]	; (c002530 <HAL_ICACHE_Enable+0x1c>)
 c00251e:	f043 0301 	orr.w	r3, r3, #1
 c002522:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 c002524:	2300      	movs	r3, #0
}
 c002526:	4618      	mov	r0, r3
 c002528:	46bd      	mov	sp, r7
 c00252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 c00252e:	4770      	bx	lr
 c002530:	50030400 	.word	0x50030400

0c002534 <HAL_PWREx_GetVoltageRange>:
/**
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE0, PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 c002534:	b480      	push	{r7}
 c002536:	af00      	add	r7, sp, #0
  return (PWR->CR1 & PWR_CR1_VOS);
 c002538:	4b04      	ldr	r3, [pc, #16]	; (c00254c <HAL_PWREx_GetVoltageRange+0x18>)
 c00253a:	681b      	ldr	r3, [r3, #0]
 c00253c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 c002540:	4618      	mov	r0, r3
 c002542:	46bd      	mov	sp, r7
 c002544:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002548:	4770      	bx	lr
 c00254a:	bf00      	nop
 c00254c:	50007000 	.word	0x50007000

0c002550 <HAL_PWREx_ControlVoltageScaling>:
  * @note  The VOS shall NOT be changed in LP Mode of if LP mode is asked.
  * @note  The function shall not be called in Low-power run mode (meaningless and misleading).
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 c002550:	b580      	push	{r7, lr}
 c002552:	b084      	sub	sp, #16
 c002554:	af00      	add	r7, sp, #0
 c002556:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  uint32_t vos_old = READ_BIT(PWR->CR1, PWR_CR1_VOS);
 c002558:	4b27      	ldr	r3, [pc, #156]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00255a:	681b      	ldr	r3, [r3, #0]
 c00255c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 c002560:	60bb      	str	r3, [r7, #8]

  /* VOS shall not be changed in LP Mode            */
  /* or if LP Mode is asked but not yet established */
  if (HAL_PWREx_SMPS_GetEffectiveMode() == PWR_SMPS_LOW_POWER)
 c002562:	f000 f871 	bl	c002648 <HAL_PWREx_SMPS_GetEffectiveMode>
 c002566:	4603      	mov	r3, r0
 c002568:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00256c:	d101      	bne.n	c002572 <HAL_PWREx_ControlVoltageScaling+0x22>
  {
    return HAL_ERROR;
 c00256e:	2301      	movs	r3, #1
 c002570:	e03e      	b.n	c0025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }
  if (READ_BIT(PWR->CR4, PWR_CR4_SMPSLPEN) == PWR_CR4_SMPSLPEN)
 c002572:	4b21      	ldr	r3, [pc, #132]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002574:	68db      	ldr	r3, [r3, #12]
 c002576:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00257a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00257e:	d101      	bne.n	c002584 <HAL_PWREx_ControlVoltageScaling+0x34>
  {
    return HAL_ERROR;
 c002580:	2301      	movs	r3, #1
 c002582:	e035      	b.n	c0025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  /* No change, nothing to do */
  if (vos_old == VoltageScaling)
 c002584:	68ba      	ldr	r2, [r7, #8]
 c002586:	687b      	ldr	r3, [r7, #4]
 c002588:	429a      	cmp	r2, r3
 c00258a:	d101      	bne.n	c002590 <HAL_PWREx_ControlVoltageScaling+0x40>
  {
    return HAL_OK;
 c00258c:	2300      	movs	r3, #0
 c00258e:	e02f      	b.n	c0025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 c002590:	4b19      	ldr	r3, [pc, #100]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c002592:	681b      	ldr	r3, [r3, #0]
 c002594:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 c002598:	4917      	ldr	r1, [pc, #92]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c00259a:	687b      	ldr	r3, [r7, #4]
 c00259c:	4313      	orrs	r3, r2
 c00259e:	600b      	str	r3, [r1, #0]

  /* Wait until VOSF is cleared */
  /* and at least one iteration loop */
  wait_loop_index = ((PWR_VOSF_SETTING_DELAY_VALUE * (SystemCoreClock / 100000U)) / 10U) + 1U;
 c0025a0:	4b16      	ldr	r3, [pc, #88]	; (c0025fc <HAL_PWREx_ControlVoltageScaling+0xac>)
 c0025a2:	681b      	ldr	r3, [r3, #0]
 c0025a4:	095b      	lsrs	r3, r3, #5
 c0025a6:	4a16      	ldr	r2, [pc, #88]	; (c002600 <HAL_PWREx_ControlVoltageScaling+0xb0>)
 c0025a8:	fba2 2303 	umull	r2, r3, r2, r3
 c0025ac:	09db      	lsrs	r3, r3, #7
 c0025ae:	2232      	movs	r2, #50	; 0x32
 c0025b0:	fb02 f303 	mul.w	r3, r2, r3
 c0025b4:	4a13      	ldr	r2, [pc, #76]	; (c002604 <HAL_PWREx_ControlVoltageScaling+0xb4>)
 c0025b6:	fba2 2303 	umull	r2, r3, r2, r3
 c0025ba:	08db      	lsrs	r3, r3, #3
 c0025bc:	3301      	adds	r3, #1
 c0025be:	60fb      	str	r3, [r7, #12]

  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0025c0:	e002      	b.n	c0025c8 <HAL_PWREx_ControlVoltageScaling+0x78>
  {
    wait_loop_index--;
 c0025c2:	68fb      	ldr	r3, [r7, #12]
 c0025c4:	3b01      	subs	r3, #1
 c0025c6:	60fb      	str	r3, [r7, #12]
  while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 c0025c8:	4b0b      	ldr	r3, [pc, #44]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0025ca:	695b      	ldr	r3, [r3, #20]
 c0025cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0025d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0025d4:	d102      	bne.n	c0025dc <HAL_PWREx_ControlVoltageScaling+0x8c>
 c0025d6:	68fb      	ldr	r3, [r7, #12]
 c0025d8:	2b00      	cmp	r3, #0
 c0025da:	d1f2      	bne.n	c0025c2 <HAL_PWREx_ControlVoltageScaling+0x72>
  }

  if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 c0025dc:	4b06      	ldr	r3, [pc, #24]	; (c0025f8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 c0025de:	695b      	ldr	r3, [r3, #20]
 c0025e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0025e4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0025e8:	d101      	bne.n	c0025ee <HAL_PWREx_ControlVoltageScaling+0x9e>
  {
    return HAL_TIMEOUT;
 c0025ea:	2303      	movs	r3, #3
 c0025ec:	e000      	b.n	c0025f0 <HAL_PWREx_ControlVoltageScaling+0xa0>
  }

  return HAL_OK;
 c0025ee:	2300      	movs	r3, #0
}
 c0025f0:	4618      	mov	r0, r3
 c0025f2:	3710      	adds	r7, #16
 c0025f4:	46bd      	mov	sp, r7
 c0025f6:	bd80      	pop	{r7, pc}
 c0025f8:	50007000 	.word	0x50007000
 c0025fc:	30000000 	.word	0x30000000
 c002600:	0a7c5ac5 	.word	0x0a7c5ac5
 c002604:	cccccccd 	.word	0xcccccccd

0c002608 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 c002608:	b480      	push	{r7}
 c00260a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 c00260c:	4b05      	ldr	r3, [pc, #20]	; (c002624 <HAL_PWREx_EnableVddIO2+0x1c>)
 c00260e:	685b      	ldr	r3, [r3, #4]
 c002610:	4a04      	ldr	r2, [pc, #16]	; (c002624 <HAL_PWREx_EnableVddIO2+0x1c>)
 c002612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 c002616:	6053      	str	r3, [r2, #4]
}
 c002618:	bf00      	nop
 c00261a:	46bd      	mov	sp, r7
 c00261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002620:	4770      	bx	lr
 c002622:	bf00      	nop
 c002624:	50007000 	.word	0x50007000

0c002628 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 c002628:	b480      	push	{r7}
 c00262a:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 c00262c:	4b05      	ldr	r3, [pc, #20]	; (c002644 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c00262e:	689b      	ldr	r3, [r3, #8]
 c002630:	4a04      	ldr	r2, [pc, #16]	; (c002644 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 c002632:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c002636:	6093      	str	r3, [r2, #8]
}
 c002638:	bf00      	nop
 c00263a:	46bd      	mov	sp, r7
 c00263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002640:	4770      	bx	lr
 c002642:	bf00      	nop
 c002644:	50007000 	.word	0x50007000

0c002648 <HAL_PWREx_SMPS_GetEffectiveMode>:
  *         @arg @ref PWR_SMPS_HIGH_POWER    SMPS step down converter in high-power mode (default)
  *         @arg @ref PWR_SMPS_LOW_POWER     SMPS step down converter in low-power mode
  *         @arg @ref PWR_SMPS_BYPASS        SMPS step down converter in bypass mode
  */
uint32_t HAL_PWREx_SMPS_GetEffectiveMode(void)
{
 c002648:	b480      	push	{r7}
 c00264a:	b083      	sub	sp, #12
 c00264c:	af00      	add	r7, sp, #0
  uint32_t mode;
  uint32_t pwr_sr1;

  pwr_sr1 = READ_REG(PWR->SR1);
 c00264e:	4b0f      	ldr	r3, [pc, #60]	; (c00268c <HAL_PWREx_SMPS_GetEffectiveMode+0x44>)
 c002650:	691b      	ldr	r3, [r3, #16]
 c002652:	603b      	str	r3, [r7, #0]
  if (READ_BIT(pwr_sr1, PWR_SR1_SMPSBYPRDY) != 0U)
 c002654:	683b      	ldr	r3, [r7, #0]
 c002656:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c00265a:	2b00      	cmp	r3, #0
 c00265c:	d003      	beq.n	c002666 <HAL_PWREx_SMPS_GetEffectiveMode+0x1e>
  {
    mode = PWR_SMPS_BYPASS;
 c00265e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c002662:	607b      	str	r3, [r7, #4]
 c002664:	e00a      	b.n	c00267c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else if (READ_BIT(pwr_sr1, PWR_SR1_SMPSHPRDY) == 0U)
 c002666:	683b      	ldr	r3, [r7, #0]
 c002668:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 c00266c:	2b00      	cmp	r3, #0
 c00266e:	d103      	bne.n	c002678 <HAL_PWREx_SMPS_GetEffectiveMode+0x30>
  {
    mode = PWR_SMPS_LOW_POWER;
 c002670:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c002674:	607b      	str	r3, [r7, #4]
 c002676:	e001      	b.n	c00267c <HAL_PWREx_SMPS_GetEffectiveMode+0x34>
  }
  else
  {
    mode = PWR_SMPS_HIGH_POWER;
 c002678:	2300      	movs	r3, #0
 c00267a:	607b      	str	r3, [r7, #4]
  }

  return mode;
 c00267c:	687b      	ldr	r3, [r7, #4]
}
 c00267e:	4618      	mov	r0, r3
 c002680:	370c      	adds	r7, #12
 c002682:	46bd      	mov	sp, r7
 c002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 c002688:	4770      	bx	lr
 c00268a:	bf00      	nop
 c00268c:	50007000 	.word	0x50007000

0c002690 <HAL_RCC_OscConfig>:
  *         and is updated by this function in case of simple MSI range update when MSI
  *         used as system clock.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 c002690:	b580      	push	{r7, lr}
 c002692:	b088      	sub	sp, #32
 c002694:	af00      	add	r7, sp, #0
 c002696:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 c002698:	687b      	ldr	r3, [r7, #4]
 c00269a:	2b00      	cmp	r3, #0
 c00269c:	d102      	bne.n	c0026a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 c00269e:	2301      	movs	r3, #1
 c0026a0:	f000 bcc2 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0026a4:	4b99      	ldr	r3, [pc, #612]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0026a6:	689b      	ldr	r3, [r3, #8]
 c0026a8:	f003 030c 	and.w	r3, r3, #12
 c0026ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0026ae:	4b97      	ldr	r3, [pc, #604]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0026b0:	68db      	ldr	r3, [r3, #12]
 c0026b2:	f003 0303 	and.w	r3, r3, #3
 c0026b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 c0026b8:	687b      	ldr	r3, [r7, #4]
 c0026ba:	681b      	ldr	r3, [r3, #0]
 c0026bc:	f003 0310 	and.w	r3, r3, #16
 c0026c0:	2b00      	cmp	r3, #0
 c0026c2:	f000 80e9 	beq.w	c002898 <HAL_RCC_OscConfig+0x208>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0026c6:	69bb      	ldr	r3, [r7, #24]
 c0026c8:	2b00      	cmp	r3, #0
 c0026ca:	d006      	beq.n	c0026da <HAL_RCC_OscConfig+0x4a>
 c0026cc:	69bb      	ldr	r3, [r7, #24]
 c0026ce:	2b0c      	cmp	r3, #12
 c0026d0:	f040 8083 	bne.w	c0027da <HAL_RCC_OscConfig+0x14a>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_MSI)))
 c0026d4:	697b      	ldr	r3, [r7, #20]
 c0026d6:	2b01      	cmp	r3, #1
 c0026d8:	d17f      	bne.n	c0027da <HAL_RCC_OscConfig+0x14a>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c0026da:	4b8c      	ldr	r3, [pc, #560]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0026dc:	681b      	ldr	r3, [r3, #0]
 c0026de:	f003 0302 	and.w	r3, r3, #2
 c0026e2:	2b00      	cmp	r3, #0
 c0026e4:	d006      	beq.n	c0026f4 <HAL_RCC_OscConfig+0x64>
 c0026e6:	687b      	ldr	r3, [r7, #4]
 c0026e8:	69db      	ldr	r3, [r3, #28]
 c0026ea:	2b00      	cmp	r3, #0
 c0026ec:	d102      	bne.n	c0026f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 c0026ee:	2301      	movs	r3, #1
 c0026f0:	f000 bc9a 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if (RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 c0026f4:	687b      	ldr	r3, [r7, #4]
 c0026f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c0026f8:	4b84      	ldr	r3, [pc, #528]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0026fa:	681b      	ldr	r3, [r3, #0]
 c0026fc:	f003 0308 	and.w	r3, r3, #8
 c002700:	2b00      	cmp	r3, #0
 c002702:	d004      	beq.n	c00270e <HAL_RCC_OscConfig+0x7e>
 c002704:	4b81      	ldr	r3, [pc, #516]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002706:	681b      	ldr	r3, [r3, #0]
 c002708:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00270c:	e005      	b.n	c00271a <HAL_RCC_OscConfig+0x8a>
 c00270e:	4b7f      	ldr	r3, [pc, #508]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002710:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002714:	091b      	lsrs	r3, r3, #4
 c002716:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00271a:	4293      	cmp	r3, r2
 c00271c:	d224      	bcs.n	c002768 <HAL_RCC_OscConfig+0xd8>
        {
          /* First increase number of wait states update if necessary */
          if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c00271e:	687b      	ldr	r3, [r7, #4]
 c002720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002722:	4618      	mov	r0, r3
 c002724:	f000 fe9c 	bl	c003460 <RCC_SetFlashLatencyFromMSIRange>
 c002728:	4603      	mov	r3, r0
 c00272a:	2b00      	cmp	r3, #0
 c00272c:	d002      	beq.n	c002734 <HAL_RCC_OscConfig+0xa4>
          {
            return HAL_ERROR;
 c00272e:	2301      	movs	r3, #1
 c002730:	f000 bc7a 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002734:	4b75      	ldr	r3, [pc, #468]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002736:	681b      	ldr	r3, [r3, #0]
 c002738:	4a74      	ldr	r2, [pc, #464]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00273a:	f043 0308 	orr.w	r3, r3, #8
 c00273e:	6013      	str	r3, [r2, #0]
 c002740:	4b72      	ldr	r3, [pc, #456]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002742:	681b      	ldr	r3, [r3, #0]
 c002744:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002748:	687b      	ldr	r3, [r7, #4]
 c00274a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00274c:	496f      	ldr	r1, [pc, #444]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00274e:	4313      	orrs	r3, r2
 c002750:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002752:	4b6e      	ldr	r3, [pc, #440]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002754:	685b      	ldr	r3, [r3, #4]
 c002756:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00275a:	687b      	ldr	r3, [r7, #4]
 c00275c:	6a1b      	ldr	r3, [r3, #32]
 c00275e:	021b      	lsls	r3, r3, #8
 c002760:	496a      	ldr	r1, [pc, #424]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002762:	4313      	orrs	r3, r2
 c002764:	604b      	str	r3, [r1, #4]
 c002766:	e026      	b.n	c0027b6 <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002768:	4b68      	ldr	r3, [pc, #416]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00276a:	681b      	ldr	r3, [r3, #0]
 c00276c:	4a67      	ldr	r2, [pc, #412]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00276e:	f043 0308 	orr.w	r3, r3, #8
 c002772:	6013      	str	r3, [r2, #0]
 c002774:	4b65      	ldr	r3, [pc, #404]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002776:	681b      	ldr	r3, [r3, #0]
 c002778:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c00277c:	687b      	ldr	r3, [r7, #4]
 c00277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c002780:	4962      	ldr	r1, [pc, #392]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002782:	4313      	orrs	r3, r2
 c002784:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002786:	4b61      	ldr	r3, [pc, #388]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002788:	685b      	ldr	r3, [r3, #4]
 c00278a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c00278e:	687b      	ldr	r3, [r7, #4]
 c002790:	6a1b      	ldr	r3, [r3, #32]
 c002792:	021b      	lsls	r3, r3, #8
 c002794:	495d      	ldr	r1, [pc, #372]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002796:	4313      	orrs	r3, r2
 c002798:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00279a:	69bb      	ldr	r3, [r7, #24]
 c00279c:	2b00      	cmp	r3, #0
 c00279e:	d10a      	bne.n	c0027b6 <HAL_RCC_OscConfig+0x126>
          {
            if (RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 c0027a0:	687b      	ldr	r3, [r7, #4]
 c0027a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c0027a4:	4618      	mov	r0, r3
 c0027a6:	f000 fe5b 	bl	c003460 <RCC_SetFlashLatencyFromMSIRange>
 c0027aa:	4603      	mov	r3, r0
 c0027ac:	2b00      	cmp	r3, #0
 c0027ae:	d002      	beq.n	c0027b6 <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 c0027b0:	2301      	movs	r3, #1
 c0027b2:	f000 bc39 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c0027b6:	f000 fe17 	bl	c0033e8 <HAL_RCC_GetHCLKFreq>
 c0027ba:	4603      	mov	r3, r0
 c0027bc:	4a54      	ldr	r2, [pc, #336]	; (c002910 <HAL_RCC_OscConfig+0x280>)
 c0027be:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 c0027c0:	4b54      	ldr	r3, [pc, #336]	; (c002914 <HAL_RCC_OscConfig+0x284>)
 c0027c2:	681b      	ldr	r3, [r3, #0]
 c0027c4:	4618      	mov	r0, r3
 c0027c6:	f7fe fe7d 	bl	c0014c4 <HAL_InitTick>
 c0027ca:	4603      	mov	r3, r0
 c0027cc:	73fb      	strb	r3, [r7, #15]
        if (status != HAL_OK)
 c0027ce:	7bfb      	ldrb	r3, [r7, #15]
 c0027d0:	2b00      	cmp	r3, #0
 c0027d2:	d060      	beq.n	c002896 <HAL_RCC_OscConfig+0x206>
        {
          return status;
 c0027d4:	7bfb      	ldrb	r3, [r7, #15]
 c0027d6:	f000 bc27 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Check the MSI State */
      if (RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 c0027da:	687b      	ldr	r3, [r7, #4]
 c0027dc:	69db      	ldr	r3, [r3, #28]
 c0027de:	2b00      	cmp	r3, #0
 c0027e0:	d039      	beq.n	c002856 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 c0027e2:	4b4a      	ldr	r3, [pc, #296]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0027e4:	681b      	ldr	r3, [r3, #0]
 c0027e6:	4a49      	ldr	r2, [pc, #292]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0027e8:	f043 0301 	orr.w	r3, r3, #1
 c0027ec:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c0027ee:	f7fe feb9 	bl	c001564 <HAL_GetTick>
 c0027f2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c0027f4:	e00f      	b.n	c002816 <HAL_RCC_OscConfig+0x186>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c0027f6:	f7fe feb5 	bl	c001564 <HAL_GetTick>
 c0027fa:	4602      	mov	r2, r0
 c0027fc:	693b      	ldr	r3, [r7, #16]
 c0027fe:	1ad3      	subs	r3, r2, r3
 c002800:	2b02      	cmp	r3, #2
 c002802:	d908      	bls.n	c002816 <HAL_RCC_OscConfig+0x186>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002804:	4b41      	ldr	r3, [pc, #260]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002806:	681b      	ldr	r3, [r3, #0]
 c002808:	f003 0302 	and.w	r3, r3, #2
 c00280c:	2b00      	cmp	r3, #0
 c00280e:	d102      	bne.n	c002816 <HAL_RCC_OscConfig+0x186>
            {
              return HAL_TIMEOUT;
 c002810:	2303      	movs	r3, #3
 c002812:	f000 bc09 	b.w	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c002816:	4b3d      	ldr	r3, [pc, #244]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002818:	681b      	ldr	r3, [r3, #0]
 c00281a:	f003 0302 	and.w	r3, r3, #2
 c00281e:	2b00      	cmp	r3, #0
 c002820:	d0e9      	beq.n	c0027f6 <HAL_RCC_OscConfig+0x166>
            }
          }
        }
        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 c002822:	4b3a      	ldr	r3, [pc, #232]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002824:	681b      	ldr	r3, [r3, #0]
 c002826:	4a39      	ldr	r2, [pc, #228]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002828:	f043 0308 	orr.w	r3, r3, #8
 c00282c:	6013      	str	r3, [r2, #0]
 c00282e:	4b37      	ldr	r3, [pc, #220]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002830:	681b      	ldr	r3, [r3, #0]
 c002832:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c002836:	687b      	ldr	r3, [r7, #4]
 c002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00283a:	4934      	ldr	r1, [pc, #208]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00283c:	4313      	orrs	r3, r2
 c00283e:	600b      	str	r3, [r1, #0]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 c002840:	4b32      	ldr	r3, [pc, #200]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002842:	685b      	ldr	r3, [r3, #4]
 c002844:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 c002848:	687b      	ldr	r3, [r7, #4]
 c00284a:	6a1b      	ldr	r3, [r3, #32]
 c00284c:	021b      	lsls	r3, r3, #8
 c00284e:	492f      	ldr	r1, [pc, #188]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002850:	4313      	orrs	r3, r2
 c002852:	604b      	str	r3, [r1, #4]
 c002854:	e020      	b.n	c002898 <HAL_RCC_OscConfig+0x208>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 c002856:	4b2d      	ldr	r3, [pc, #180]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002858:	681b      	ldr	r3, [r3, #0]
 c00285a:	4a2c      	ldr	r2, [pc, #176]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00285c:	f023 0301 	bic.w	r3, r3, #1
 c002860:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 c002862:	f7fe fe7f 	bl	c001564 <HAL_GetTick>
 c002866:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002868:	e00e      	b.n	c002888 <HAL_RCC_OscConfig+0x1f8>
        {
          if ((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 c00286a:	f7fe fe7b 	bl	c001564 <HAL_GetTick>
 c00286e:	4602      	mov	r2, r0
 c002870:	693b      	ldr	r3, [r7, #16]
 c002872:	1ad3      	subs	r3, r2, r3
 c002874:	2b02      	cmp	r3, #2
 c002876:	d907      	bls.n	c002888 <HAL_RCC_OscConfig+0x1f8>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002878:	4b24      	ldr	r3, [pc, #144]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00287a:	681b      	ldr	r3, [r3, #0]
 c00287c:	f003 0302 	and.w	r3, r3, #2
 c002880:	2b00      	cmp	r3, #0
 c002882:	d001      	beq.n	c002888 <HAL_RCC_OscConfig+0x1f8>
            {
              return HAL_TIMEOUT;
 c002884:	2303      	movs	r3, #3
 c002886:	e3cf      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 c002888:	4b20      	ldr	r3, [pc, #128]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c00288a:	681b      	ldr	r3, [r3, #0]
 c00288c:	f003 0302 	and.w	r3, r3, #2
 c002890:	2b00      	cmp	r3, #0
 c002892:	d1ea      	bne.n	c00286a <HAL_RCC_OscConfig+0x1da>
 c002894:	e000      	b.n	c002898 <HAL_RCC_OscConfig+0x208>
      if ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 c002896:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 c002898:	687b      	ldr	r3, [r7, #4]
 c00289a:	681b      	ldr	r3, [r3, #0]
 c00289c:	f003 0301 	and.w	r3, r3, #1
 c0028a0:	2b00      	cmp	r3, #0
 c0028a2:	d07e      	beq.n	c0029a2 <HAL_RCC_OscConfig+0x312>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE) ||
 c0028a4:	69bb      	ldr	r3, [r7, #24]
 c0028a6:	2b08      	cmp	r3, #8
 c0028a8:	d005      	beq.n	c0028b6 <HAL_RCC_OscConfig+0x226>
 c0028aa:	69bb      	ldr	r3, [r7, #24]
 c0028ac:	2b0c      	cmp	r3, #12
 c0028ae:	d10e      	bne.n	c0028ce <HAL_RCC_OscConfig+0x23e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 c0028b0:	697b      	ldr	r3, [r7, #20]
 c0028b2:	2b03      	cmp	r3, #3
 c0028b4:	d10b      	bne.n	c0028ce <HAL_RCC_OscConfig+0x23e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0028b6:	4b15      	ldr	r3, [pc, #84]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028b8:	681b      	ldr	r3, [r3, #0]
 c0028ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c0028be:	2b00      	cmp	r3, #0
 c0028c0:	d06e      	beq.n	c0029a0 <HAL_RCC_OscConfig+0x310>
 c0028c2:	687b      	ldr	r3, [r7, #4]
 c0028c4:	685b      	ldr	r3, [r3, #4]
 c0028c6:	2b00      	cmp	r3, #0
 c0028c8:	d16a      	bne.n	c0029a0 <HAL_RCC_OscConfig+0x310>
      {
        return HAL_ERROR;
 c0028ca:	2301      	movs	r3, #1
 c0028cc:	e3ac      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 c0028ce:	687b      	ldr	r3, [r7, #4]
 c0028d0:	685b      	ldr	r3, [r3, #4]
 c0028d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0028d6:	d106      	bne.n	c0028e6 <HAL_RCC_OscConfig+0x256>
 c0028d8:	4b0c      	ldr	r3, [pc, #48]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028da:	681b      	ldr	r3, [r3, #0]
 c0028dc:	4a0b      	ldr	r2, [pc, #44]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0028e2:	6013      	str	r3, [r2, #0]
 c0028e4:	e024      	b.n	c002930 <HAL_RCC_OscConfig+0x2a0>
 c0028e6:	687b      	ldr	r3, [r7, #4]
 c0028e8:	685b      	ldr	r3, [r3, #4]
 c0028ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 c0028ee:	d113      	bne.n	c002918 <HAL_RCC_OscConfig+0x288>
 c0028f0:	4b06      	ldr	r3, [pc, #24]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028f2:	681b      	ldr	r3, [r3, #0]
 c0028f4:	4a05      	ldr	r2, [pc, #20]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028f6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 c0028fa:	6013      	str	r3, [r2, #0]
 c0028fc:	4b03      	ldr	r3, [pc, #12]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c0028fe:	681b      	ldr	r3, [r3, #0]
 c002900:	4a02      	ldr	r2, [pc, #8]	; (c00290c <HAL_RCC_OscConfig+0x27c>)
 c002902:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c002906:	6013      	str	r3, [r2, #0]
 c002908:	e012      	b.n	c002930 <HAL_RCC_OscConfig+0x2a0>
 c00290a:	bf00      	nop
 c00290c:	50021000 	.word	0x50021000
 c002910:	30000000 	.word	0x30000000
 c002914:	30000004 	.word	0x30000004
 c002918:	4b8b      	ldr	r3, [pc, #556]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c00291a:	681b      	ldr	r3, [r3, #0]
 c00291c:	4a8a      	ldr	r2, [pc, #552]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c00291e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c002922:	6013      	str	r3, [r2, #0]
 c002924:	4b88      	ldr	r3, [pc, #544]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002926:	681b      	ldr	r3, [r3, #0]
 c002928:	4a87      	ldr	r2, [pc, #540]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c00292a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 c00292e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 c002930:	687b      	ldr	r3, [r7, #4]
 c002932:	685b      	ldr	r3, [r3, #4]
 c002934:	2b00      	cmp	r3, #0
 c002936:	d019      	beq.n	c00296c <HAL_RCC_OscConfig+0x2dc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002938:	f7fe fe14 	bl	c001564 <HAL_GetTick>
 c00293c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00293e:	e00e      	b.n	c00295e <HAL_RCC_OscConfig+0x2ce>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002940:	f7fe fe10 	bl	c001564 <HAL_GetTick>
 c002944:	4602      	mov	r2, r0
 c002946:	693b      	ldr	r3, [r7, #16]
 c002948:	1ad3      	subs	r3, r2, r3
 c00294a:	2b64      	cmp	r3, #100	; 0x64
 c00294c:	d907      	bls.n	c00295e <HAL_RCC_OscConfig+0x2ce>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00294e:	4b7e      	ldr	r3, [pc, #504]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002950:	681b      	ldr	r3, [r3, #0]
 c002952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002956:	2b00      	cmp	r3, #0
 c002958:	d101      	bne.n	c00295e <HAL_RCC_OscConfig+0x2ce>
            {
              return HAL_TIMEOUT;
 c00295a:	2303      	movs	r3, #3
 c00295c:	e364      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c00295e:	4b7a      	ldr	r3, [pc, #488]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002960:	681b      	ldr	r3, [r3, #0]
 c002962:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c002966:	2b00      	cmp	r3, #0
 c002968:	d0ea      	beq.n	c002940 <HAL_RCC_OscConfig+0x2b0>
 c00296a:	e01a      	b.n	c0029a2 <HAL_RCC_OscConfig+0x312>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00296c:	f7fe fdfa 	bl	c001564 <HAL_GetTick>
 c002970:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002972:	e00e      	b.n	c002992 <HAL_RCC_OscConfig+0x302>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 c002974:	f7fe fdf6 	bl	c001564 <HAL_GetTick>
 c002978:	4602      	mov	r2, r0
 c00297a:	693b      	ldr	r3, [r7, #16]
 c00297c:	1ad3      	subs	r3, r2, r3
 c00297e:	2b64      	cmp	r3, #100	; 0x64
 c002980:	d907      	bls.n	c002992 <HAL_RCC_OscConfig+0x302>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002982:	4b71      	ldr	r3, [pc, #452]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002984:	681b      	ldr	r3, [r3, #0]
 c002986:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00298a:	2b00      	cmp	r3, #0
 c00298c:	d001      	beq.n	c002992 <HAL_RCC_OscConfig+0x302>
            {
              return HAL_TIMEOUT;
 c00298e:	2303      	movs	r3, #3
 c002990:	e34a      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 c002992:	4b6d      	ldr	r3, [pc, #436]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002994:	681b      	ldr	r3, [r3, #0]
 c002996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c00299a:	2b00      	cmp	r3, #0
 c00299c:	d1ea      	bne.n	c002974 <HAL_RCC_OscConfig+0x2e4>
 c00299e:	e000      	b.n	c0029a2 <HAL_RCC_OscConfig+0x312>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 c0029a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 c0029a2:	687b      	ldr	r3, [r7, #4]
 c0029a4:	681b      	ldr	r3, [r3, #0]
 c0029a6:	f003 0302 	and.w	r3, r3, #2
 c0029aa:	2b00      	cmp	r3, #0
 c0029ac:	d06c      	beq.n	c002a88 <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI) ||
 c0029ae:	69bb      	ldr	r3, [r7, #24]
 c0029b0:	2b04      	cmp	r3, #4
 c0029b2:	d005      	beq.n	c0029c0 <HAL_RCC_OscConfig+0x330>
 c0029b4:	69bb      	ldr	r3, [r7, #24]
 c0029b6:	2b0c      	cmp	r3, #12
 c0029b8:	d119      	bne.n	c0029ee <HAL_RCC_OscConfig+0x35e>
        ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 c0029ba:	697b      	ldr	r3, [r7, #20]
 c0029bc:	2b02      	cmp	r3, #2
 c0029be:	d116      	bne.n	c0029ee <HAL_RCC_OscConfig+0x35e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0029c0:	4b61      	ldr	r3, [pc, #388]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c0029c2:	681b      	ldr	r3, [r3, #0]
 c0029c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c0029c8:	2b00      	cmp	r3, #0
 c0029ca:	d005      	beq.n	c0029d8 <HAL_RCC_OscConfig+0x348>
 c0029cc:	687b      	ldr	r3, [r7, #4]
 c0029ce:	68db      	ldr	r3, [r3, #12]
 c0029d0:	2b00      	cmp	r3, #0
 c0029d2:	d101      	bne.n	c0029d8 <HAL_RCC_OscConfig+0x348>
      {
        return HAL_ERROR;
 c0029d4:	2301      	movs	r3, #1
 c0029d6:	e327      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c0029d8:	4b5b      	ldr	r3, [pc, #364]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c0029da:	685b      	ldr	r3, [r3, #4]
 c0029dc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c0029e0:	687b      	ldr	r3, [r7, #4]
 c0029e2:	691b      	ldr	r3, [r3, #16]
 c0029e4:	061b      	lsls	r3, r3, #24
 c0029e6:	4958      	ldr	r1, [pc, #352]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c0029e8:	4313      	orrs	r3, r2
 c0029ea:	604b      	str	r3, [r1, #4]
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 c0029ec:	e04c      	b.n	c002a88 <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 c0029ee:	687b      	ldr	r3, [r7, #4]
 c0029f0:	68db      	ldr	r3, [r3, #12]
 c0029f2:	2b00      	cmp	r3, #0
 c0029f4:	d029      	beq.n	c002a4a <HAL_RCC_OscConfig+0x3ba>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 c0029f6:	4b54      	ldr	r3, [pc, #336]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c0029f8:	681b      	ldr	r3, [r3, #0]
 c0029fa:	4a53      	ldr	r2, [pc, #332]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c0029fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002a02:	f7fe fdaf 	bl	c001564 <HAL_GetTick>
 c002a06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002a08:	e00e      	b.n	c002a28 <HAL_RCC_OscConfig+0x398>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002a0a:	f7fe fdab 	bl	c001564 <HAL_GetTick>
 c002a0e:	4602      	mov	r2, r0
 c002a10:	693b      	ldr	r3, [r7, #16]
 c002a12:	1ad3      	subs	r3, r2, r3
 c002a14:	2b02      	cmp	r3, #2
 c002a16:	d907      	bls.n	c002a28 <HAL_RCC_OscConfig+0x398>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002a18:	4b4b      	ldr	r3, [pc, #300]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a1a:	681b      	ldr	r3, [r3, #0]
 c002a1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a20:	2b00      	cmp	r3, #0
 c002a22:	d101      	bne.n	c002a28 <HAL_RCC_OscConfig+0x398>
            {
              return HAL_TIMEOUT;
 c002a24:	2303      	movs	r3, #3
 c002a26:	e2ff      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c002a28:	4b47      	ldr	r3, [pc, #284]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a2a:	681b      	ldr	r3, [r3, #0]
 c002a2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a30:	2b00      	cmp	r3, #0
 c002a32:	d0ea      	beq.n	c002a0a <HAL_RCC_OscConfig+0x37a>
            }
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 c002a34:	4b44      	ldr	r3, [pc, #272]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a36:	685b      	ldr	r3, [r3, #4]
 c002a38:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 c002a3c:	687b      	ldr	r3, [r7, #4]
 c002a3e:	691b      	ldr	r3, [r3, #16]
 c002a40:	061b      	lsls	r3, r3, #24
 c002a42:	4941      	ldr	r1, [pc, #260]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a44:	4313      	orrs	r3, r2
 c002a46:	604b      	str	r3, [r1, #4]
 c002a48:	e01e      	b.n	c002a88 <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 c002a4a:	4b3f      	ldr	r3, [pc, #252]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a4c:	681b      	ldr	r3, [r3, #0]
 c002a4e:	4a3e      	ldr	r2, [pc, #248]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 c002a54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002a56:	f7fe fd85 	bl	c001564 <HAL_GetTick>
 c002a5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002a5c:	e00e      	b.n	c002a7c <HAL_RCC_OscConfig+0x3ec>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 c002a5e:	f7fe fd81 	bl	c001564 <HAL_GetTick>
 c002a62:	4602      	mov	r2, r0
 c002a64:	693b      	ldr	r3, [r7, #16]
 c002a66:	1ad3      	subs	r3, r2, r3
 c002a68:	2b02      	cmp	r3, #2
 c002a6a:	d907      	bls.n	c002a7c <HAL_RCC_OscConfig+0x3ec>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002a6c:	4b36      	ldr	r3, [pc, #216]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a6e:	681b      	ldr	r3, [r3, #0]
 c002a70:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a74:	2b00      	cmp	r3, #0
 c002a76:	d001      	beq.n	c002a7c <HAL_RCC_OscConfig+0x3ec>
            {
              return HAL_TIMEOUT;
 c002a78:	2303      	movs	r3, #3
 c002a7a:	e2d5      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 c002a7c:	4b32      	ldr	r3, [pc, #200]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002a7e:	681b      	ldr	r3, [r3, #0]
 c002a80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c002a84:	2b00      	cmp	r3, #0
 c002a86:	d1ea      	bne.n	c002a5e <HAL_RCC_OscConfig+0x3ce>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 c002a88:	687b      	ldr	r3, [r7, #4]
 c002a8a:	681b      	ldr	r3, [r3, #0]
 c002a8c:	f003 0308 	and.w	r3, r3, #8
 c002a90:	2b00      	cmp	r3, #0
 c002a92:	d062      	beq.n	c002b5a <HAL_RCC_OscConfig+0x4ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 c002a94:	687b      	ldr	r3, [r7, #4]
 c002a96:	695b      	ldr	r3, [r3, #20]
 c002a98:	2b00      	cmp	r3, #0
 c002a9a:	d038      	beq.n	c002b0e <HAL_RCC_OscConfig+0x47e>
    {
      /* Apply prescaler value */
      if (RCC_OscInitStruct->LSIDiv == RCC_LSI_DIV1)
 c002a9c:	687b      	ldr	r3, [r7, #4]
 c002a9e:	699b      	ldr	r3, [r3, #24]
 c002aa0:	2b00      	cmp	r3, #0
 c002aa2:	d108      	bne.n	c002ab6 <HAL_RCC_OscConfig+0x426>
      {
        CLEAR_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c002aa4:	4b28      	ldr	r3, [pc, #160]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002aa6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002aaa:	4a27      	ldr	r2, [pc, #156]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002aac:	f023 0310 	bic.w	r3, r3, #16
 c002ab0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
 c002ab4:	e007      	b.n	c002ac6 <HAL_RCC_OscConfig+0x436>
      }
      else
      {
        SET_BIT(RCC->CSR, RCC_CSR_LSIPRE);
 c002ab6:	4b24      	ldr	r3, [pc, #144]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002ab8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002abc:	4a22      	ldr	r2, [pc, #136]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002abe:	f043 0310 	orr.w	r3, r3, #16
 c002ac2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
      }

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 c002ac6:	4b20      	ldr	r3, [pc, #128]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002ac8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002acc:	4a1e      	ldr	r2, [pc, #120]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002ace:	f043 0301 	orr.w	r3, r3, #1
 c002ad2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002ad6:	f7fe fd45 	bl	c001564 <HAL_GetTick>
 c002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002adc:	e00f      	b.n	c002afe <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002ade:	f7fe fd41 	bl	c001564 <HAL_GetTick>
 c002ae2:	4602      	mov	r2, r0
 c002ae4:	693b      	ldr	r3, [r7, #16]
 c002ae6:	1ad3      	subs	r3, r2, r3
 c002ae8:	2b07      	cmp	r3, #7
 c002aea:	d908      	bls.n	c002afe <HAL_RCC_OscConfig+0x46e>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002aec:	4b16      	ldr	r3, [pc, #88]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002aee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002af2:	f003 0302 	and.w	r3, r3, #2
 c002af6:	2b00      	cmp	r3, #0
 c002af8:	d101      	bne.n	c002afe <HAL_RCC_OscConfig+0x46e>
          {
            return HAL_TIMEOUT;
 c002afa:	2303      	movs	r3, #3
 c002afc:	e294      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 c002afe:	4b12      	ldr	r3, [pc, #72]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002b00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002b04:	f003 0302 	and.w	r3, r3, #2
 c002b08:	2b00      	cmp	r3, #0
 c002b0a:	d0e8      	beq.n	c002ade <HAL_RCC_OscConfig+0x44e>
 c002b0c:	e025      	b.n	c002b5a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 c002b0e:	4b0e      	ldr	r3, [pc, #56]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002b10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002b14:	4a0c      	ldr	r2, [pc, #48]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002b16:	f023 0301 	bic.w	r3, r3, #1
 c002b1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002b1e:	f7fe fd21 	bl	c001564 <HAL_GetTick>
 c002b22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c002b24:	e012      	b.n	c002b4c <HAL_RCC_OscConfig+0x4bc>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 c002b26:	f7fe fd1d 	bl	c001564 <HAL_GetTick>
 c002b2a:	4602      	mov	r2, r0
 c002b2c:	693b      	ldr	r3, [r7, #16]
 c002b2e:	1ad3      	subs	r3, r2, r3
 c002b30:	2b07      	cmp	r3, #7
 c002b32:	d90b      	bls.n	c002b4c <HAL_RCC_OscConfig+0x4bc>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c002b34:	4b04      	ldr	r3, [pc, #16]	; (c002b48 <HAL_RCC_OscConfig+0x4b8>)
 c002b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002b3a:	f003 0302 	and.w	r3, r3, #2
 c002b3e:	2b00      	cmp	r3, #0
 c002b40:	d004      	beq.n	c002b4c <HAL_RCC_OscConfig+0x4bc>
          {
            return HAL_TIMEOUT;
 c002b42:	2303      	movs	r3, #3
 c002b44:	e270      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
 c002b46:	bf00      	nop
 c002b48:	50021000 	.word	0x50021000
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 c002b4c:	4ba8      	ldr	r3, [pc, #672]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002b4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c002b52:	f003 0302 	and.w	r3, r3, #2
 c002b56:	2b00      	cmp	r3, #0
 c002b58:	d1e5      	bne.n	c002b26 <HAL_RCC_OscConfig+0x496>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 c002b5a:	687b      	ldr	r3, [r7, #4]
 c002b5c:	681b      	ldr	r3, [r3, #0]
 c002b5e:	f003 0304 	and.w	r3, r3, #4
 c002b62:	2b00      	cmp	r3, #0
 c002b64:	f000 812d 	beq.w	c002dc2 <HAL_RCC_OscConfig+0x732>
  {
    FlagStatus       pwrclkchanged = RESET;
 c002b68:	2300      	movs	r3, #0
 c002b6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 c002b6c:	4ba0      	ldr	r3, [pc, #640]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002b6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002b70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002b74:	2b00      	cmp	r3, #0
 c002b76:	d10d      	bne.n	c002b94 <HAL_RCC_OscConfig+0x504>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c002b78:	4b9d      	ldr	r3, [pc, #628]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002b7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002b7c:	4a9c      	ldr	r2, [pc, #624]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002b7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c002b82:	6593      	str	r3, [r2, #88]	; 0x58
 c002b84:	4b9a      	ldr	r3, [pc, #616]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002b86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002b88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c002b8c:	60bb      	str	r3, [r7, #8]
 c002b8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 c002b90:	2301      	movs	r3, #1
 c002b92:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002b94:	4b97      	ldr	r3, [pc, #604]	; (c002df4 <HAL_RCC_OscConfig+0x764>)
 c002b96:	681b      	ldr	r3, [r3, #0]
 c002b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002b9c:	2b00      	cmp	r3, #0
 c002b9e:	d11e      	bne.n	c002bde <HAL_RCC_OscConfig+0x54e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c002ba0:	4b94      	ldr	r3, [pc, #592]	; (c002df4 <HAL_RCC_OscConfig+0x764>)
 c002ba2:	681b      	ldr	r3, [r3, #0]
 c002ba4:	4a93      	ldr	r2, [pc, #588]	; (c002df4 <HAL_RCC_OscConfig+0x764>)
 c002ba6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c002baa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 c002bac:	f7fe fcda 	bl	c001564 <HAL_GetTick>
 c002bb0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002bb2:	e00e      	b.n	c002bd2 <HAL_RCC_OscConfig+0x542>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c002bb4:	f7fe fcd6 	bl	c001564 <HAL_GetTick>
 c002bb8:	4602      	mov	r2, r0
 c002bba:	693b      	ldr	r3, [r7, #16]
 c002bbc:	1ad3      	subs	r3, r2, r3
 c002bbe:	2b02      	cmp	r3, #2
 c002bc0:	d907      	bls.n	c002bd2 <HAL_RCC_OscConfig+0x542>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002bc2:	4b8c      	ldr	r3, [pc, #560]	; (c002df4 <HAL_RCC_OscConfig+0x764>)
 c002bc4:	681b      	ldr	r3, [r3, #0]
 c002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002bca:	2b00      	cmp	r3, #0
 c002bcc:	d101      	bne.n	c002bd2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 c002bce:	2303      	movs	r3, #3
 c002bd0:	e22a      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 c002bd2:	4b88      	ldr	r3, [pc, #544]	; (c002df4 <HAL_RCC_OscConfig+0x764>)
 c002bd4:	681b      	ldr	r3, [r3, #0]
 c002bd6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c002bda:	2b00      	cmp	r3, #0
 c002bdc:	d0ea      	beq.n	c002bb4 <HAL_RCC_OscConfig+0x524>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 c002bde:	687b      	ldr	r3, [r7, #4]
 c002be0:	689b      	ldr	r3, [r3, #8]
 c002be2:	f003 0301 	and.w	r3, r3, #1
 c002be6:	2b00      	cmp	r3, #0
 c002be8:	d01f      	beq.n	c002c2a <HAL_RCC_OscConfig+0x59a>
    {
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 c002bea:	687b      	ldr	r3, [r7, #4]
 c002bec:	689b      	ldr	r3, [r3, #8]
 c002bee:	f003 0304 	and.w	r3, r3, #4
 c002bf2:	2b00      	cmp	r3, #0
 c002bf4:	d010      	beq.n	c002c18 <HAL_RCC_OscConfig+0x588>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002bf6:	4b7e      	ldr	r3, [pc, #504]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002bf8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002bfc:	4a7c      	ldr	r2, [pc, #496]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002bfe:	f043 0304 	orr.w	r3, r3, #4
 c002c02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002c06:	4b7a      	ldr	r3, [pc, #488]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c0c:	4a78      	ldr	r2, [pc, #480]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c0e:	f043 0301 	orr.w	r3, r3, #1
 c002c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c002c16:	e018      	b.n	c002c4a <HAL_RCC_OscConfig+0x5ba>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002c18:	4b75      	ldr	r3, [pc, #468]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c1e:	4a74      	ldr	r2, [pc, #464]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c20:	f043 0301 	orr.w	r3, r3, #1
 c002c24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 c002c28:	e00f      	b.n	c002c4a <HAL_RCC_OscConfig+0x5ba>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 c002c2a:	4b71      	ldr	r3, [pc, #452]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c30:	4a6f      	ldr	r2, [pc, #444]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c32:	f023 0301 	bic.w	r3, r3, #1
 c002c36:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 c002c3a:	4b6d      	ldr	r3, [pc, #436]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c3c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c40:	4a6b      	ldr	r2, [pc, #428]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c42:	f023 0304 	bic.w	r3, r3, #4
 c002c46:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    }

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 c002c4a:	687b      	ldr	r3, [r7, #4]
 c002c4c:	689b      	ldr	r3, [r3, #8]
 c002c4e:	2b00      	cmp	r3, #0
 c002c50:	d068      	beq.n	c002d24 <HAL_RCC_OscConfig+0x694>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002c52:	f7fe fc87 	bl	c001564 <HAL_GetTick>
 c002c56:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002c58:	e011      	b.n	c002c7e <HAL_RCC_OscConfig+0x5ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002c5a:	f7fe fc83 	bl	c001564 <HAL_GetTick>
 c002c5e:	4602      	mov	r2, r0
 c002c60:	693b      	ldr	r3, [r7, #16]
 c002c62:	1ad3      	subs	r3, r2, r3
 c002c64:	f241 3288 	movw	r2, #5000	; 0x1388
 c002c68:	4293      	cmp	r3, r2
 c002c6a:	d908      	bls.n	c002c7e <HAL_RCC_OscConfig+0x5ee>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002c6c:	4b60      	ldr	r3, [pc, #384]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c72:	f003 0302 	and.w	r3, r3, #2
 c002c76:	2b00      	cmp	r3, #0
 c002c78:	d101      	bne.n	c002c7e <HAL_RCC_OscConfig+0x5ee>
          {
            return HAL_TIMEOUT;
 c002c7a:	2303      	movs	r3, #3
 c002c7c:	e1d4      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c002c7e:	4b5c      	ldr	r3, [pc, #368]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c84:	f003 0302 	and.w	r3, r3, #2
 c002c88:	2b00      	cmp	r3, #0
 c002c8a:	d0e6      	beq.n	c002c5a <HAL_RCC_OscConfig+0x5ca>
          }
        }
      }

      /* Enable LSESYS additionally if requested */
      if ((RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSEN) != 0U)
 c002c8c:	687b      	ldr	r3, [r7, #4]
 c002c8e:	689b      	ldr	r3, [r3, #8]
 c002c90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002c94:	2b00      	cmp	r3, #0
 c002c96:	d022      	beq.n	c002cde <HAL_RCC_OscConfig+0x64e>
      {
        SET_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002c98:	4b55      	ldr	r3, [pc, #340]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002c9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002c9e:	4a54      	ldr	r2, [pc, #336]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002ca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c002ca4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYS is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002ca8:	e011      	b.n	c002cce <HAL_RCC_OscConfig+0x63e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002caa:	f7fe fc5b 	bl	c001564 <HAL_GetTick>
 c002cae:	4602      	mov	r2, r0
 c002cb0:	693b      	ldr	r3, [r7, #16]
 c002cb2:	1ad3      	subs	r3, r2, r3
 c002cb4:	f241 3288 	movw	r2, #5000	; 0x1388
 c002cb8:	4293      	cmp	r3, r2
 c002cba:	d908      	bls.n	c002cce <HAL_RCC_OscConfig+0x63e>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002cbc:	4b4c      	ldr	r3, [pc, #304]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002cbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002cc2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002cc6:	2b00      	cmp	r3, #0
 c002cc8:	d101      	bne.n	c002cce <HAL_RCC_OscConfig+0x63e>
            {
              return HAL_TIMEOUT;
 c002cca:	2303      	movs	r3, #3
 c002ccc:	e1ac      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) == 0U)
 c002cce:	4b48      	ldr	r3, [pc, #288]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002cd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002cd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002cd8:	2b00      	cmp	r3, #0
 c002cda:	d0e6      	beq.n	c002caa <HAL_RCC_OscConfig+0x61a>
 c002cdc:	e068      	b.n	c002db0 <HAL_RCC_OscConfig+0x720>
        }
      }
      else
      {
        /* Make sure LSESYSEN/LSESYSRDY are reset */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002cde:	4b44      	ldr	r3, [pc, #272]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002ce0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002ce4:	4a42      	ldr	r2, [pc, #264]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002ce6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002cea:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002cee:	e011      	b.n	c002d14 <HAL_RCC_OscConfig+0x684>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002cf0:	f7fe fc38 	bl	c001564 <HAL_GetTick>
 c002cf4:	4602      	mov	r2, r0
 c002cf6:	693b      	ldr	r3, [r7, #16]
 c002cf8:	1ad3      	subs	r3, r2, r3
 c002cfa:	f241 3288 	movw	r2, #5000	; 0x1388
 c002cfe:	4293      	cmp	r3, r2
 c002d00:	d908      	bls.n	c002d14 <HAL_RCC_OscConfig+0x684>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002d02:	4b3b      	ldr	r3, [pc, #236]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002d0c:	2b00      	cmp	r3, #0
 c002d0e:	d001      	beq.n	c002d14 <HAL_RCC_OscConfig+0x684>
            {
              return HAL_TIMEOUT;
 c002d10:	2303      	movs	r3, #3
 c002d12:	e189      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002d14:	4b36      	ldr	r3, [pc, #216]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d16:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d1a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002d1e:	2b00      	cmp	r3, #0
 c002d20:	d1e6      	bne.n	c002cf0 <HAL_RCC_OscConfig+0x660>
 c002d22:	e045      	b.n	c002db0 <HAL_RCC_OscConfig+0x720>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002d24:	f7fe fc1e 	bl	c001564 <HAL_GetTick>
 c002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002d2a:	e011      	b.n	c002d50 <HAL_RCC_OscConfig+0x6c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002d2c:	f7fe fc1a 	bl	c001564 <HAL_GetTick>
 c002d30:	4602      	mov	r2, r0
 c002d32:	693b      	ldr	r3, [r7, #16]
 c002d34:	1ad3      	subs	r3, r2, r3
 c002d36:	f241 3288 	movw	r2, #5000	; 0x1388
 c002d3a:	4293      	cmp	r3, r2
 c002d3c:	d908      	bls.n	c002d50 <HAL_RCC_OscConfig+0x6c0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002d3e:	4b2c      	ldr	r3, [pc, #176]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d40:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d44:	f003 0302 	and.w	r3, r3, #2
 c002d48:	2b00      	cmp	r3, #0
 c002d4a:	d001      	beq.n	c002d50 <HAL_RCC_OscConfig+0x6c0>
          {
            return HAL_TIMEOUT;
 c002d4c:	2303      	movs	r3, #3
 c002d4e:	e16b      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 c002d50:	4b27      	ldr	r3, [pc, #156]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d56:	f003 0302 	and.w	r3, r3, #2
 c002d5a:	2b00      	cmp	r3, #0
 c002d5c:	d1e6      	bne.n	c002d2c <HAL_RCC_OscConfig+0x69c>
          }
        }
      }

      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN) != 0U)
 c002d5e:	4b24      	ldr	r3, [pc, #144]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c002d68:	2b00      	cmp	r3, #0
 c002d6a:	d021      	beq.n	c002db0 <HAL_RCC_OscConfig+0x720>
      {
        /* Reset LSESYSEN once LSE is disabled */
        CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSEN);
 c002d6c:	4b20      	ldr	r3, [pc, #128]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d72:	4a1f      	ldr	r2, [pc, #124]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c002d78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

        /* Wait till LSESYSRDY is cleared */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002d7c:	e011      	b.n	c002da2 <HAL_RCC_OscConfig+0x712>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c002d7e:	f7fe fbf1 	bl	c001564 <HAL_GetTick>
 c002d82:	4602      	mov	r2, r0
 c002d84:	693b      	ldr	r3, [r7, #16]
 c002d86:	1ad3      	subs	r3, r2, r3
 c002d88:	f241 3288 	movw	r2, #5000	; 0x1388
 c002d8c:	4293      	cmp	r3, r2
 c002d8e:	d908      	bls.n	c002da2 <HAL_RCC_OscConfig+0x712>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002d90:	4b17      	ldr	r3, [pc, #92]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002d96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002d9a:	2b00      	cmp	r3, #0
 c002d9c:	d001      	beq.n	c002da2 <HAL_RCC_OscConfig+0x712>
            {
              return HAL_TIMEOUT;
 c002d9e:	2303      	movs	r3, #3
 c002da0:	e142      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSESYSRDY) != 0U)
 c002da2:	4b13      	ldr	r3, [pc, #76]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c002da8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c002dac:	2b00      	cmp	r3, #0
 c002dae:	d1e6      	bne.n	c002d7e <HAL_RCC_OscConfig+0x6ee>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c002db0:	7ffb      	ldrb	r3, [r7, #31]
 c002db2:	2b01      	cmp	r3, #1
 c002db4:	d105      	bne.n	c002dc2 <HAL_RCC_OscConfig+0x732>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c002db6:	4b0e      	ldr	r3, [pc, #56]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002db8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c002dba:	4a0d      	ldr	r2, [pc, #52]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002dbc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c002dc0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 c002dc2:	687b      	ldr	r3, [r7, #4]
 c002dc4:	681b      	ldr	r3, [r3, #0]
 c002dc6:	f003 0320 	and.w	r3, r3, #32
 c002dca:	2b00      	cmp	r3, #0
 c002dcc:	d04f      	beq.n	c002e6e <HAL_RCC_OscConfig+0x7de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 c002dce:	687b      	ldr	r3, [r7, #4]
 c002dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c002dd2:	2b00      	cmp	r3, #0
 c002dd4:	d028      	beq.n	c002e28 <HAL_RCC_OscConfig+0x798>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 c002dd6:	4b06      	ldr	r3, [pc, #24]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002dd8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002ddc:	4a04      	ldr	r2, [pc, #16]	; (c002df0 <HAL_RCC_OscConfig+0x760>)
 c002dde:	f043 0301 	orr.w	r3, r3, #1
 c002de2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002de6:	f7fe fbbd 	bl	c001564 <HAL_GetTick>
 c002dea:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002dec:	e014      	b.n	c002e18 <HAL_RCC_OscConfig+0x788>
 c002dee:	bf00      	nop
 c002df0:	50021000 	.word	0x50021000
 c002df4:	50007000 	.word	0x50007000
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002df8:	f7fe fbb4 	bl	c001564 <HAL_GetTick>
 c002dfc:	4602      	mov	r2, r0
 c002dfe:	693b      	ldr	r3, [r7, #16]
 c002e00:	1ad3      	subs	r3, r2, r3
 c002e02:	2b02      	cmp	r3, #2
 c002e04:	d908      	bls.n	c002e18 <HAL_RCC_OscConfig+0x788>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002e06:	4b8a      	ldr	r3, [pc, #552]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e08:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002e0c:	f003 0302 	and.w	r3, r3, #2
 c002e10:	2b00      	cmp	r3, #0
 c002e12:	d101      	bne.n	c002e18 <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 c002e14:	2303      	movs	r3, #3
 c002e16:	e107      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 c002e18:	4b85      	ldr	r3, [pc, #532]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002e1e:	f003 0302 	and.w	r3, r3, #2
 c002e22:	2b00      	cmp	r3, #0
 c002e24:	d0e8      	beq.n	c002df8 <HAL_RCC_OscConfig+0x768>
 c002e26:	e022      	b.n	c002e6e <HAL_RCC_OscConfig+0x7de>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 c002e28:	4b81      	ldr	r3, [pc, #516]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e2a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002e2e:	4a80      	ldr	r2, [pc, #512]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e30:	f023 0301 	bic.w	r3, r3, #1
 c002e34:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c002e38:	f7fe fb94 	bl	c001564 <HAL_GetTick>
 c002e3c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002e3e:	e00f      	b.n	c002e60 <HAL_RCC_OscConfig+0x7d0>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 c002e40:	f7fe fb90 	bl	c001564 <HAL_GetTick>
 c002e44:	4602      	mov	r2, r0
 c002e46:	693b      	ldr	r3, [r7, #16]
 c002e48:	1ad3      	subs	r3, r2, r3
 c002e4a:	2b02      	cmp	r3, #2
 c002e4c:	d908      	bls.n	c002e60 <HAL_RCC_OscConfig+0x7d0>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002e4e:	4b78      	ldr	r3, [pc, #480]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e50:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002e54:	f003 0302 	and.w	r3, r3, #2
 c002e58:	2b00      	cmp	r3, #0
 c002e5a:	d001      	beq.n	c002e60 <HAL_RCC_OscConfig+0x7d0>
          {
            return HAL_TIMEOUT;
 c002e5c:	2303      	movs	r3, #3
 c002e5e:	e0e3      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      while (READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 c002e60:	4b73      	ldr	r3, [pc, #460]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 c002e66:	f003 0302 	and.w	r3, r3, #2
 c002e6a:	2b00      	cmp	r3, #0
 c002e6c:	d1e8      	bne.n	c002e40 <HAL_RCC_OscConfig+0x7b0>
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 c002e6e:	687b      	ldr	r3, [r7, #4]
 c002e70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002e72:	2b00      	cmp	r3, #0
 c002e74:	f000 80d7 	beq.w	c003026 <HAL_RCC_OscConfig+0x996>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c002e78:	4b6d      	ldr	r3, [pc, #436]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e7a:	689b      	ldr	r3, [r3, #8]
 c002e7c:	f003 030c 	and.w	r3, r3, #12
 c002e80:	2b0c      	cmp	r3, #12
 c002e82:	f000 8091 	beq.w	c002fa8 <HAL_RCC_OscConfig+0x918>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 c002e86:	687b      	ldr	r3, [r7, #4]
 c002e88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002e8a:	2b02      	cmp	r3, #2
 c002e8c:	d166      	bne.n	c002f5c <HAL_RCC_OscConfig+0x8cc>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c002e8e:	4b68      	ldr	r3, [pc, #416]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e90:	681b      	ldr	r3, [r3, #0]
 c002e92:	4a67      	ldr	r2, [pc, #412]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002e94:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002e98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002e9a:	f7fe fb63 	bl	c001564 <HAL_GetTick>
 c002e9e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002ea0:	e00e      	b.n	c002ec0 <HAL_RCC_OscConfig+0x830>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002ea2:	f7fe fb5f 	bl	c001564 <HAL_GetTick>
 c002ea6:	4602      	mov	r2, r0
 c002ea8:	693b      	ldr	r3, [r7, #16]
 c002eaa:	1ad3      	subs	r3, r2, r3
 c002eac:	2b02      	cmp	r3, #2
 c002eae:	d907      	bls.n	c002ec0 <HAL_RCC_OscConfig+0x830>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002eb0:	4b5f      	ldr	r3, [pc, #380]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002eb2:	681b      	ldr	r3, [r3, #0]
 c002eb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002eb8:	2b00      	cmp	r3, #0
 c002eba:	d001      	beq.n	c002ec0 <HAL_RCC_OscConfig+0x830>
            {
              return HAL_TIMEOUT;
 c002ebc:	2303      	movs	r3, #3
 c002ebe:	e0b3      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002ec0:	4b5b      	ldr	r3, [pc, #364]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002ec2:	681b      	ldr	r3, [r3, #0]
 c002ec4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002ec8:	2b00      	cmp	r3, #0
 c002eca:	d1ea      	bne.n	c002ea2 <HAL_RCC_OscConfig+0x812>
            }
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 c002ecc:	4b58      	ldr	r3, [pc, #352]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002ece:	68da      	ldr	r2, [r3, #12]
 c002ed0:	4b58      	ldr	r3, [pc, #352]	; (c003034 <HAL_RCC_OscConfig+0x9a4>)
 c002ed2:	4013      	ands	r3, r2
 c002ed4:	687a      	ldr	r2, [r7, #4]
 c002ed6:	6b11      	ldr	r1, [r2, #48]	; 0x30
 c002ed8:	687a      	ldr	r2, [r7, #4]
 c002eda:	6b52      	ldr	r2, [r2, #52]	; 0x34
 c002edc:	3a01      	subs	r2, #1
 c002ede:	0112      	lsls	r2, r2, #4
 c002ee0:	4311      	orrs	r1, r2
 c002ee2:	687a      	ldr	r2, [r7, #4]
 c002ee4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 c002ee6:	0212      	lsls	r2, r2, #8
 c002ee8:	4311      	orrs	r1, r2
 c002eea:	687a      	ldr	r2, [r7, #4]
 c002eec:	6c12      	ldr	r2, [r2, #64]	; 0x40
 c002eee:	0852      	lsrs	r2, r2, #1
 c002ef0:	3a01      	subs	r2, #1
 c002ef2:	0552      	lsls	r2, r2, #21
 c002ef4:	4311      	orrs	r1, r2
 c002ef6:	687a      	ldr	r2, [r7, #4]
 c002ef8:	6c52      	ldr	r2, [r2, #68]	; 0x44
 c002efa:	0852      	lsrs	r2, r2, #1
 c002efc:	3a01      	subs	r2, #1
 c002efe:	0652      	lsls	r2, r2, #25
 c002f00:	4311      	orrs	r1, r2
 c002f02:	687a      	ldr	r2, [r7, #4]
 c002f04:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 c002f06:	06d2      	lsls	r2, r2, #27
 c002f08:	430a      	orrs	r2, r1
 c002f0a:	4949      	ldr	r1, [pc, #292]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f0c:	4313      	orrs	r3, r2
 c002f0e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 c002f10:	4b47      	ldr	r3, [pc, #284]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f12:	681b      	ldr	r3, [r3, #0]
 c002f14:	4a46      	ldr	r2, [pc, #280]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f16:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002f1a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 c002f1c:	4b44      	ldr	r3, [pc, #272]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f1e:	68db      	ldr	r3, [r3, #12]
 c002f20:	4a43      	ldr	r2, [pc, #268]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f22:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 c002f26:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002f28:	f7fe fb1c 	bl	c001564 <HAL_GetTick>
 c002f2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002f2e:	e00e      	b.n	c002f4e <HAL_RCC_OscConfig+0x8be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002f30:	f7fe fb18 	bl	c001564 <HAL_GetTick>
 c002f34:	4602      	mov	r2, r0
 c002f36:	693b      	ldr	r3, [r7, #16]
 c002f38:	1ad3      	subs	r3, r2, r3
 c002f3a:	2b02      	cmp	r3, #2
 c002f3c:	d907      	bls.n	c002f4e <HAL_RCC_OscConfig+0x8be>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002f3e:	4b3c      	ldr	r3, [pc, #240]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f40:	681b      	ldr	r3, [r3, #0]
 c002f42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002f46:	2b00      	cmp	r3, #0
 c002f48:	d101      	bne.n	c002f4e <HAL_RCC_OscConfig+0x8be>
            {
              return HAL_TIMEOUT;
 c002f4a:	2303      	movs	r3, #3
 c002f4c:	e06c      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c002f4e:	4b38      	ldr	r3, [pc, #224]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f50:	681b      	ldr	r3, [r3, #0]
 c002f52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002f56:	2b00      	cmp	r3, #0
 c002f58:	d0ea      	beq.n	c002f30 <HAL_RCC_OscConfig+0x8a0>
 c002f5a:	e064      	b.n	c003026 <HAL_RCC_OscConfig+0x996>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 c002f5c:	4b34      	ldr	r3, [pc, #208]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f5e:	681b      	ldr	r3, [r3, #0]
 c002f60:	4a33      	ldr	r2, [pc, #204]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 c002f66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c002f68:	f7fe fafc 	bl	c001564 <HAL_GetTick>
 c002f6c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002f6e:	e00e      	b.n	c002f8e <HAL_RCC_OscConfig+0x8fe>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 c002f70:	f7fe faf8 	bl	c001564 <HAL_GetTick>
 c002f74:	4602      	mov	r2, r0
 c002f76:	693b      	ldr	r3, [r7, #16]
 c002f78:	1ad3      	subs	r3, r2, r3
 c002f7a:	2b02      	cmp	r3, #2
 c002f7c:	d907      	bls.n	c002f8e <HAL_RCC_OscConfig+0x8fe>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002f7e:	4b2c      	ldr	r3, [pc, #176]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f80:	681b      	ldr	r3, [r3, #0]
 c002f82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002f86:	2b00      	cmp	r3, #0
 c002f88:	d001      	beq.n	c002f8e <HAL_RCC_OscConfig+0x8fe>
            {
              return HAL_TIMEOUT;
 c002f8a:	2303      	movs	r3, #3
 c002f8c:	e04c      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 c002f8e:	4b28      	ldr	r3, [pc, #160]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f90:	681b      	ldr	r3, [r3, #0]
 c002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c002f96:	2b00      	cmp	r3, #0
 c002f98:	d1ea      	bne.n	c002f70 <HAL_RCC_OscConfig+0x8e0>
            }
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 c002f9a:	4b25      	ldr	r3, [pc, #148]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002f9c:	68da      	ldr	r2, [r3, #12]
 c002f9e:	4924      	ldr	r1, [pc, #144]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002fa0:	4b25      	ldr	r3, [pc, #148]	; (c003038 <HAL_RCC_OscConfig+0x9a8>)
 c002fa2:	4013      	ands	r3, r2
 c002fa4:	60cb      	str	r3, [r1, #12]
 c002fa6:	e03e      	b.n	c003026 <HAL_RCC_OscConfig+0x996>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_OFF)
 c002fa8:	687b      	ldr	r3, [r7, #4]
 c002faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c002fac:	2b01      	cmp	r3, #1
 c002fae:	d101      	bne.n	c002fb4 <HAL_RCC_OscConfig+0x924>
      {
        return HAL_ERROR;
 c002fb0:	2301      	movs	r3, #1
 c002fb2:	e039      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 c002fb4:	4b1e      	ldr	r3, [pc, #120]	; (c003030 <HAL_RCC_OscConfig+0x9a0>)
 c002fb6:	68db      	ldr	r3, [r3, #12]
 c002fb8:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002fba:	697b      	ldr	r3, [r7, #20]
 c002fbc:	f003 0203 	and.w	r2, r3, #3
 c002fc0:	687b      	ldr	r3, [r7, #4]
 c002fc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 c002fc4:	429a      	cmp	r2, r3
 c002fc6:	d12c      	bne.n	c003022 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002fc8:	697b      	ldr	r3, [r7, #20]
 c002fca:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 c002fce:	687b      	ldr	r3, [r7, #4]
 c002fd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c002fd2:	3b01      	subs	r3, #1
 c002fd4:	011b      	lsls	r3, r3, #4
        if ((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 c002fd6:	429a      	cmp	r2, r3
 c002fd8:	d123      	bne.n	c003022 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002fda:	697b      	ldr	r3, [r7, #20]
 c002fdc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 c002fe0:	687b      	ldr	r3, [r7, #4]
 c002fe2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c002fe4:	021b      	lsls	r3, r3, #8
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 c002fe6:	429a      	cmp	r2, r3
 c002fe8:	d11b      	bne.n	c003022 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c002fea:	697b      	ldr	r3, [r7, #20]
 c002fec:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 c002ff0:	687b      	ldr	r3, [r7, #4]
 c002ff2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c002ff4:	06db      	lsls	r3, r3, #27
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 c002ff6:	429a      	cmp	r2, r3
 c002ff8:	d113      	bne.n	c003022 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c002ffa:	697b      	ldr	r3, [r7, #20]
 c002ffc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 c003000:	687b      	ldr	r3, [r7, #4]
 c003002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003004:	085b      	lsrs	r3, r3, #1
 c003006:	3b01      	subs	r3, #1
 c003008:	055b      	lsls	r3, r3, #21
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 c00300a:	429a      	cmp	r2, r3
 c00300c:	d109      	bne.n	c003022 <HAL_RCC_OscConfig+0x992>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 c00300e:	697b      	ldr	r3, [r7, #20]
 c003010:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 c003014:	687b      	ldr	r3, [r7, #4]
 c003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003018:	085b      	lsrs	r3, r3, #1
 c00301a:	3b01      	subs	r3, #1
 c00301c:	065b      	lsls	r3, r3, #25
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 c00301e:	429a      	cmp	r2, r3
 c003020:	d001      	beq.n	c003026 <HAL_RCC_OscConfig+0x996>
        {
          return HAL_ERROR;
 c003022:	2301      	movs	r3, #1
 c003024:	e000      	b.n	c003028 <HAL_RCC_OscConfig+0x998>
        }
      }
    }
  }

  return HAL_OK;
 c003026:	2300      	movs	r3, #0
}
 c003028:	4618      	mov	r0, r3
 c00302a:	3720      	adds	r7, #32
 c00302c:	46bd      	mov	sp, r7
 c00302e:	bd80      	pop	{r7, pc}
 c003030:	50021000 	.word	0x50021000
 c003034:	019f800c 	.word	0x019f800c
 c003038:	feeefffc 	.word	0xfeeefffc

0c00303c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 c00303c:	b580      	push	{r7, lr}
 c00303e:	b086      	sub	sp, #24
 c003040:	af00      	add	r7, sp, #0
 c003042:	6078      	str	r0, [r7, #4]
 c003044:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 c003046:	2300      	movs	r3, #0
 c003048:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 c00304a:	687b      	ldr	r3, [r7, #4]
 c00304c:	2b00      	cmp	r3, #0
 c00304e:	d101      	bne.n	c003054 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 c003050:	2301      	movs	r3, #1
 c003052:	e11c      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 c003054:	4b90      	ldr	r3, [pc, #576]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c003056:	681b      	ldr	r3, [r3, #0]
 c003058:	f003 030f 	and.w	r3, r3, #15
 c00305c:	683a      	ldr	r2, [r7, #0]
 c00305e:	429a      	cmp	r2, r3
 c003060:	d910      	bls.n	c003084 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003062:	4b8d      	ldr	r3, [pc, #564]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c003064:	681b      	ldr	r3, [r3, #0]
 c003066:	f023 020f 	bic.w	r2, r3, #15
 c00306a:	498b      	ldr	r1, [pc, #556]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c00306c:	683b      	ldr	r3, [r7, #0]
 c00306e:	4313      	orrs	r3, r2
 c003070:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003072:	4b89      	ldr	r3, [pc, #548]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c003074:	681b      	ldr	r3, [r3, #0]
 c003076:	f003 030f 	and.w	r3, r3, #15
 c00307a:	683a      	ldr	r2, [r7, #0]
 c00307c:	429a      	cmp	r2, r3
 c00307e:	d001      	beq.n	c003084 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 c003080:	2301      	movs	r3, #1
 c003082:	e104      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c003084:	687b      	ldr	r3, [r7, #4]
 c003086:	681b      	ldr	r3, [r3, #0]
 c003088:	f003 0302 	and.w	r3, r3, #2
 c00308c:	2b00      	cmp	r3, #0
 c00308e:	d010      	beq.n	c0030b2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c003090:	687b      	ldr	r3, [r7, #4]
 c003092:	689a      	ldr	r2, [r3, #8]
 c003094:	4b81      	ldr	r3, [pc, #516]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003096:	689b      	ldr	r3, [r3, #8]
 c003098:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00309c:	429a      	cmp	r2, r3
 c00309e:	d908      	bls.n	c0030b2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0030a0:	4b7e      	ldr	r3, [pc, #504]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030a2:	689b      	ldr	r3, [r3, #8]
 c0030a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c0030a8:	687b      	ldr	r3, [r7, #4]
 c0030aa:	689b      	ldr	r3, [r3, #8]
 c0030ac:	497b      	ldr	r1, [pc, #492]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030ae:	4313      	orrs	r3, r2
 c0030b0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 c0030b2:	687b      	ldr	r3, [r7, #4]
 c0030b4:	681b      	ldr	r3, [r3, #0]
 c0030b6:	f003 0301 	and.w	r3, r3, #1
 c0030ba:	2b00      	cmp	r3, #0
 c0030bc:	f000 8085 	beq.w	c0031ca <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 c0030c0:	687b      	ldr	r3, [r7, #4]
 c0030c2:	685b      	ldr	r3, [r3, #4]
 c0030c4:	2b03      	cmp	r3, #3
 c0030c6:	d11f      	bne.n	c003108 <HAL_RCC_ClockConfig+0xcc>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 c0030c8:	4b74      	ldr	r3, [pc, #464]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030ca:	681b      	ldr	r3, [r3, #0]
 c0030cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0030d0:	2b00      	cmp	r3, #0
 c0030d2:	d101      	bne.n	c0030d8 <HAL_RCC_ClockConfig+0x9c>
      {
        return HAL_ERROR;
 c0030d4:	2301      	movs	r3, #1
 c0030d6:	e0da      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
      }

      /* Transition state management when selecting PLL as SYSCLK source and */
      /* target frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 c0030d8:	f000 fa26 	bl	c003528 <RCC_GetSysClockFreqFromPLLSource>
 c0030dc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if (pllfreq > 80000000U)
 c0030de:	693b      	ldr	r3, [r7, #16]
 c0030e0:	4a6f      	ldr	r2, [pc, #444]	; (c0032a0 <HAL_RCC_ClockConfig+0x264>)
 c0030e2:	4293      	cmp	r3, r2
 c0030e4:	d947      	bls.n	c003176 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c0030e6:	4b6d      	ldr	r3, [pc, #436]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030e8:	689b      	ldr	r3, [r3, #8]
 c0030ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0030ee:	2b00      	cmp	r3, #0
 c0030f0:	d141      	bne.n	c003176 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c0030f2:	4b6a      	ldr	r3, [pc, #424]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030f4:	689b      	ldr	r3, [r3, #8]
 c0030f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0030fa:	4a68      	ldr	r2, [pc, #416]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0030fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003100:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003102:	2380      	movs	r3, #128	; 0x80
 c003104:	617b      	str	r3, [r7, #20]
 c003106:	e036      	b.n	c003176 <HAL_RCC_ClockConfig+0x13a>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 c003108:	687b      	ldr	r3, [r7, #4]
 c00310a:	685b      	ldr	r3, [r3, #4]
 c00310c:	2b02      	cmp	r3, #2
 c00310e:	d107      	bne.n	c003120 <HAL_RCC_ClockConfig+0xe4>
      {
        /* Check the HSE ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 c003110:	4b62      	ldr	r3, [pc, #392]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003112:	681b      	ldr	r3, [r3, #0]
 c003114:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003118:	2b00      	cmp	r3, #0
 c00311a:	d115      	bne.n	c003148 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c00311c:	2301      	movs	r3, #1
 c00311e:	e0b6      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
        }
      }
      /* MSI is selected as System Clock Source */
      else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 c003120:	687b      	ldr	r3, [r7, #4]
 c003122:	685b      	ldr	r3, [r3, #4]
 c003124:	2b00      	cmp	r3, #0
 c003126:	d107      	bne.n	c003138 <HAL_RCC_ClockConfig+0xfc>
      {
        /* Check the MSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 c003128:	4b5c      	ldr	r3, [pc, #368]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c00312a:	681b      	ldr	r3, [r3, #0]
 c00312c:	f003 0302 	and.w	r3, r3, #2
 c003130:	2b00      	cmp	r3, #0
 c003132:	d109      	bne.n	c003148 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003134:	2301      	movs	r3, #1
 c003136:	e0aa      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 c003138:	4b58      	ldr	r3, [pc, #352]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c00313a:	681b      	ldr	r3, [r3, #0]
 c00313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003140:	2b00      	cmp	r3, #0
 c003142:	d101      	bne.n	c003148 <HAL_RCC_ClockConfig+0x10c>
        {
          return HAL_ERROR;
 c003144:	2301      	movs	r3, #1
 c003146:	e0a2      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
        }
      }

      /* Transition state management when when going down from PLL used as */
      /* SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 c003148:	f000 f8b0 	bl	c0032ac <HAL_RCC_GetSysClockFreq>
 c00314c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if (pllfreq > 80000000U)
 c00314e:	693b      	ldr	r3, [r7, #16]
 c003150:	4a53      	ldr	r2, [pc, #332]	; (c0032a0 <HAL_RCC_ClockConfig+0x264>)
 c003152:	4293      	cmp	r3, r2
 c003154:	d90f      	bls.n	c003176 <HAL_RCC_ClockConfig+0x13a>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 c003156:	4b51      	ldr	r3, [pc, #324]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003158:	689b      	ldr	r3, [r3, #8]
 c00315a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c00315e:	2b00      	cmp	r3, #0
 c003160:	d109      	bne.n	c003176 <HAL_RCC_ClockConfig+0x13a>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 c003162:	4b4e      	ldr	r3, [pc, #312]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003164:	689b      	ldr	r3, [r3, #8]
 c003166:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c00316a:	4a4c      	ldr	r2, [pc, #304]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c00316c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c003170:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 c003172:	2380      	movs	r3, #128	; 0x80
 c003174:	617b      	str	r3, [r7, #20]
        }
      }
    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 c003176:	4b49      	ldr	r3, [pc, #292]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003178:	689b      	ldr	r3, [r3, #8]
 c00317a:	f023 0203 	bic.w	r2, r3, #3
 c00317e:	687b      	ldr	r3, [r7, #4]
 c003180:	685b      	ldr	r3, [r3, #4]
 c003182:	4946      	ldr	r1, [pc, #280]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003184:	4313      	orrs	r3, r2
 c003186:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003188:	f7fe f9ec 	bl	c001564 <HAL_GetTick>
 c00318c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c00318e:	e013      	b.n	c0031b8 <HAL_RCC_ClockConfig+0x17c>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 c003190:	f7fe f9e8 	bl	c001564 <HAL_GetTick>
 c003194:	4602      	mov	r2, r0
 c003196:	68fb      	ldr	r3, [r7, #12]
 c003198:	1ad3      	subs	r3, r2, r3
 c00319a:	f241 3288 	movw	r2, #5000	; 0x1388
 c00319e:	4293      	cmp	r3, r2
 c0031a0:	d90a      	bls.n	c0031b8 <HAL_RCC_ClockConfig+0x17c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0031a2:	4b3e      	ldr	r3, [pc, #248]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031a4:	689b      	ldr	r3, [r3, #8]
 c0031a6:	f003 020c 	and.w	r2, r3, #12
 c0031aa:	687b      	ldr	r3, [r7, #4]
 c0031ac:	685b      	ldr	r3, [r3, #4]
 c0031ae:	009b      	lsls	r3, r3, #2
 c0031b0:	429a      	cmp	r2, r3
 c0031b2:	d001      	beq.n	c0031b8 <HAL_RCC_ClockConfig+0x17c>
        {
          return HAL_TIMEOUT;
 c0031b4:	2303      	movs	r3, #3
 c0031b6:	e06a      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 c0031b8:	4b38      	ldr	r3, [pc, #224]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031ba:	689b      	ldr	r3, [r3, #8]
 c0031bc:	f003 020c 	and.w	r2, r3, #12
 c0031c0:	687b      	ldr	r3, [r7, #4]
 c0031c2:	685b      	ldr	r3, [r3, #4]
 c0031c4:	009b      	lsls	r3, r3, #2
 c0031c6:	429a      	cmp	r2, r3
 c0031c8:	d1e2      	bne.n	c003190 <HAL_RCC_ClockConfig+0x154>
      }
    }
  }

  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 c0031ca:	697b      	ldr	r3, [r7, #20]
 c0031cc:	2b80      	cmp	r3, #128	; 0x80
 c0031ce:	d105      	bne.n	c0031dc <HAL_RCC_ClockConfig+0x1a0>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 c0031d0:	4b32      	ldr	r3, [pc, #200]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031d2:	689b      	ldr	r3, [r3, #8]
 c0031d4:	4a31      	ldr	r2, [pc, #196]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031d6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 c0031da:	6093      	str	r3, [r2, #8]
  }

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 c0031dc:	687b      	ldr	r3, [r7, #4]
 c0031de:	681b      	ldr	r3, [r3, #0]
 c0031e0:	f003 0302 	and.w	r3, r3, #2
 c0031e4:	2b00      	cmp	r3, #0
 c0031e6:	d010      	beq.n	c00320a <HAL_RCC_ClockConfig+0x1ce>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 c0031e8:	687b      	ldr	r3, [r7, #4]
 c0031ea:	689a      	ldr	r2, [r3, #8]
 c0031ec:	4b2b      	ldr	r3, [pc, #172]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031ee:	689b      	ldr	r3, [r3, #8]
 c0031f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 c0031f4:	429a      	cmp	r2, r3
 c0031f6:	d208      	bcs.n	c00320a <HAL_RCC_ClockConfig+0x1ce>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 c0031f8:	4b28      	ldr	r3, [pc, #160]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c0031fa:	689b      	ldr	r3, [r3, #8]
 c0031fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 c003200:	687b      	ldr	r3, [r7, #4]
 c003202:	689b      	ldr	r3, [r3, #8]
 c003204:	4925      	ldr	r1, [pc, #148]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003206:	4313      	orrs	r3, r2
 c003208:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 c00320a:	4b23      	ldr	r3, [pc, #140]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c00320c:	681b      	ldr	r3, [r3, #0]
 c00320e:	f003 030f 	and.w	r3, r3, #15
 c003212:	683a      	ldr	r2, [r7, #0]
 c003214:	429a      	cmp	r2, r3
 c003216:	d210      	bcs.n	c00323a <HAL_RCC_ClockConfig+0x1fe>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 c003218:	4b1f      	ldr	r3, [pc, #124]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c00321a:	681b      	ldr	r3, [r3, #0]
 c00321c:	f023 020f 	bic.w	r2, r3, #15
 c003220:	491d      	ldr	r1, [pc, #116]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c003222:	683b      	ldr	r3, [r7, #0]
 c003224:	4313      	orrs	r3, r2
 c003226:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 c003228:	4b1b      	ldr	r3, [pc, #108]	; (c003298 <HAL_RCC_ClockConfig+0x25c>)
 c00322a:	681b      	ldr	r3, [r3, #0]
 c00322c:	f003 030f 	and.w	r3, r3, #15
 c003230:	683a      	ldr	r2, [r7, #0]
 c003232:	429a      	cmp	r2, r3
 c003234:	d001      	beq.n	c00323a <HAL_RCC_ClockConfig+0x1fe>
    {
      return HAL_ERROR;
 c003236:	2301      	movs	r3, #1
 c003238:	e029      	b.n	c00328e <HAL_RCC_ClockConfig+0x252>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 c00323a:	687b      	ldr	r3, [r7, #4]
 c00323c:	681b      	ldr	r3, [r3, #0]
 c00323e:	f003 0304 	and.w	r3, r3, #4
 c003242:	2b00      	cmp	r3, #0
 c003244:	d008      	beq.n	c003258 <HAL_RCC_ClockConfig+0x21c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 c003246:	4b15      	ldr	r3, [pc, #84]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003248:	689b      	ldr	r3, [r3, #8]
 c00324a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00324e:	687b      	ldr	r3, [r7, #4]
 c003250:	68db      	ldr	r3, [r3, #12]
 c003252:	4912      	ldr	r1, [pc, #72]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003254:	4313      	orrs	r3, r2
 c003256:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 c003258:	687b      	ldr	r3, [r7, #4]
 c00325a:	681b      	ldr	r3, [r3, #0]
 c00325c:	f003 0308 	and.w	r3, r3, #8
 c003260:	2b00      	cmp	r3, #0
 c003262:	d009      	beq.n	c003278 <HAL_RCC_ClockConfig+0x23c>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 c003264:	4b0d      	ldr	r3, [pc, #52]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003266:	689b      	ldr	r3, [r3, #8]
 c003268:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 c00326c:	687b      	ldr	r3, [r7, #4]
 c00326e:	691b      	ldr	r3, [r3, #16]
 c003270:	00db      	lsls	r3, r3, #3
 c003272:	490a      	ldr	r1, [pc, #40]	; (c00329c <HAL_RCC_ClockConfig+0x260>)
 c003274:	4313      	orrs	r3, r2
 c003276:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetHCLKFreq();
 c003278:	f000 f8b6 	bl	c0033e8 <HAL_RCC_GetHCLKFreq>
 c00327c:	4603      	mov	r3, r0
 c00327e:	4a09      	ldr	r2, [pc, #36]	; (c0032a4 <HAL_RCC_ClockConfig+0x268>)
 c003280:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 c003282:	4b09      	ldr	r3, [pc, #36]	; (c0032a8 <HAL_RCC_ClockConfig+0x26c>)
 c003284:	681b      	ldr	r3, [r3, #0]
 c003286:	4618      	mov	r0, r3
 c003288:	f7fe f91c 	bl	c0014c4 <HAL_InitTick>
 c00328c:	4603      	mov	r3, r0
}
 c00328e:	4618      	mov	r0, r3
 c003290:	3718      	adds	r7, #24
 c003292:	46bd      	mov	sp, r7
 c003294:	bd80      	pop	{r7, pc}
 c003296:	bf00      	nop
 c003298:	50022000 	.word	0x50022000
 c00329c:	50021000 	.word	0x50021000
 c0032a0:	04c4b400 	.word	0x04c4b400
 c0032a4:	30000000 	.word	0x30000000
 c0032a8:	30000004 	.word	0x30000004

0c0032ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 c0032ac:	b480      	push	{r7}
 c0032ae:	b089      	sub	sp, #36	; 0x24
 c0032b0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 c0032b2:	2300      	movs	r3, #0
 c0032b4:	61fb      	str	r3, [r7, #28]
 c0032b6:	2300      	movs	r3, #0
 c0032b8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 c0032ba:	4b47      	ldr	r3, [pc, #284]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0032bc:	689b      	ldr	r3, [r3, #8]
 c0032be:	f003 030c 	and.w	r3, r3, #12
 c0032c2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 c0032c4:	4b44      	ldr	r3, [pc, #272]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0032c6:	68db      	ldr	r3, [r3, #12]
 c0032c8:	f003 0303 	and.w	r3, r3, #3
 c0032cc:	60fb      	str	r3, [r7, #12]

  if ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI) ||
 c0032ce:	693b      	ldr	r3, [r7, #16]
 c0032d0:	2b00      	cmp	r3, #0
 c0032d2:	d005      	beq.n	c0032e0 <HAL_RCC_GetSysClockFreq+0x34>
 c0032d4:	693b      	ldr	r3, [r7, #16]
 c0032d6:	2b0c      	cmp	r3, #12
 c0032d8:	d121      	bne.n	c00331e <HAL_RCC_GetSysClockFreq+0x72>
      ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 c0032da:	68fb      	ldr	r3, [r7, #12]
 c0032dc:	2b01      	cmp	r3, #1
 c0032de:	d11e      	bne.n	c00331e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if (READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c0032e0:	4b3d      	ldr	r3, [pc, #244]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0032e2:	681b      	ldr	r3, [r3, #0]
 c0032e4:	f003 0308 	and.w	r3, r3, #8
 c0032e8:	2b00      	cmp	r3, #0
 c0032ea:	d107      	bne.n	c0032fc <HAL_RCC_GetSysClockFreq+0x50>
    {
      /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c0032ec:	4b3a      	ldr	r3, [pc, #232]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0032ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0032f2:	0a1b      	lsrs	r3, r3, #8
 c0032f4:	f003 030f 	and.w	r3, r3, #15
 c0032f8:	61fb      	str	r3, [r7, #28]
 c0032fa:	e005      	b.n	c003308 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    {
      /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0032fc:	4b36      	ldr	r3, [pc, #216]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0032fe:	681b      	ldr	r3, [r3, #0]
 c003300:	091b      	lsrs	r3, r3, #4
 c003302:	f003 030f 	and.w	r3, r3, #15
 c003306:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in Hz*/
    msirange = MSIRangeTable[msirange];
 c003308:	4a34      	ldr	r2, [pc, #208]	; (c0033dc <HAL_RCC_GetSysClockFreq+0x130>)
 c00330a:	69fb      	ldr	r3, [r7, #28]
 c00330c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c003310:	61fb      	str	r3, [r7, #28]

    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c003312:	693b      	ldr	r3, [r7, #16]
 c003314:	2b00      	cmp	r3, #0
 c003316:	d10d      	bne.n	c003334 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 c003318:	69fb      	ldr	r3, [r7, #28]
 c00331a:	61bb      	str	r3, [r7, #24]
    if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_MSI)
 c00331c:	e00a      	b.n	c003334 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 c00331e:	693b      	ldr	r3, [r7, #16]
 c003320:	2b04      	cmp	r3, #4
 c003322:	d102      	bne.n	c00332a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 c003324:	4b2e      	ldr	r3, [pc, #184]	; (c0033e0 <HAL_RCC_GetSysClockFreq+0x134>)
 c003326:	61bb      	str	r3, [r7, #24]
 c003328:	e004      	b.n	c003334 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 c00332a:	693b      	ldr	r3, [r7, #16]
 c00332c:	2b08      	cmp	r3, #8
 c00332e:	d101      	bne.n	c003334 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 c003330:	4b2c      	ldr	r3, [pc, #176]	; (c0033e4 <HAL_RCC_GetSysClockFreq+0x138>)
 c003332:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if (sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 c003334:	693b      	ldr	r3, [r7, #16]
 c003336:	2b0c      	cmp	r3, #12
 c003338:	d146      	bne.n	c0033c8 <HAL_RCC_GetSysClockFreq+0x11c>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 c00333a:	4b27      	ldr	r3, [pc, #156]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00333c:	68db      	ldr	r3, [r3, #12]
 c00333e:	f003 0303 	and.w	r3, r3, #3
 c003342:	60bb      	str	r3, [r7, #8]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003344:	4b24      	ldr	r3, [pc, #144]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003346:	68db      	ldr	r3, [r3, #12]
 c003348:	091b      	lsrs	r3, r3, #4
 c00334a:	f003 030f 	and.w	r3, r3, #15
 c00334e:	3301      	adds	r3, #1
 c003350:	607b      	str	r3, [r7, #4]

    switch (pllsource)
 c003352:	68bb      	ldr	r3, [r7, #8]
 c003354:	2b02      	cmp	r3, #2
 c003356:	d003      	beq.n	c003360 <HAL_RCC_GetSysClockFreq+0xb4>
 c003358:	68bb      	ldr	r3, [r7, #8]
 c00335a:	2b03      	cmp	r3, #3
 c00335c:	d00d      	beq.n	c00337a <HAL_RCC_GetSysClockFreq+0xce>
 c00335e:	e019      	b.n	c003394 <HAL_RCC_GetSysClockFreq+0xe8>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003360:	4a1f      	ldr	r2, [pc, #124]	; (c0033e0 <HAL_RCC_GetSysClockFreq+0x134>)
 c003362:	687b      	ldr	r3, [r7, #4]
 c003364:	fbb2 f3f3 	udiv	r3, r2, r3
 c003368:	4a1b      	ldr	r2, [pc, #108]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00336a:	68d2      	ldr	r2, [r2, #12]
 c00336c:	0a12      	lsrs	r2, r2, #8
 c00336e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003372:	fb02 f303 	mul.w	r3, r2, r3
 c003376:	617b      	str	r3, [r7, #20]
        break;
 c003378:	e019      	b.n	c0033ae <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00337a:	4a1a      	ldr	r2, [pc, #104]	; (c0033e4 <HAL_RCC_GetSysClockFreq+0x138>)
 c00337c:	687b      	ldr	r3, [r7, #4]
 c00337e:	fbb2 f3f3 	udiv	r3, r2, r3
 c003382:	4a15      	ldr	r2, [pc, #84]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c003384:	68d2      	ldr	r2, [r2, #12]
 c003386:	0a12      	lsrs	r2, r2, #8
 c003388:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00338c:	fb02 f303 	mul.w	r3, r2, r3
 c003390:	617b      	str	r3, [r7, #20]
        break;
 c003392:	e00c      	b.n	c0033ae <HAL_RCC_GetSysClockFreq+0x102>

      case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      default:
        pllvco = (msirange / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003394:	69fa      	ldr	r2, [r7, #28]
 c003396:	687b      	ldr	r3, [r7, #4]
 c003398:	fbb2 f3f3 	udiv	r3, r2, r3
 c00339c:	4a0e      	ldr	r2, [pc, #56]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c00339e:	68d2      	ldr	r2, [r2, #12]
 c0033a0:	0a12      	lsrs	r2, r2, #8
 c0033a2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c0033a6:	fb02 f303 	mul.w	r3, r2, r3
 c0033aa:	617b      	str	r3, [r7, #20]
        break;
 c0033ac:	bf00      	nop
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0033ae:	4b0a      	ldr	r3, [pc, #40]	; (c0033d8 <HAL_RCC_GetSysClockFreq+0x12c>)
 c0033b0:	68db      	ldr	r3, [r3, #12]
 c0033b2:	0e5b      	lsrs	r3, r3, #25
 c0033b4:	f003 0303 	and.w	r3, r3, #3
 c0033b8:	3301      	adds	r3, #1
 c0033ba:	005b      	lsls	r3, r3, #1
 c0033bc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 c0033be:	697a      	ldr	r2, [r7, #20]
 c0033c0:	683b      	ldr	r3, [r7, #0]
 c0033c2:	fbb2 f3f3 	udiv	r3, r2, r3
 c0033c6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 c0033c8:	69bb      	ldr	r3, [r7, #24]
}
 c0033ca:	4618      	mov	r0, r3
 c0033cc:	3724      	adds	r7, #36	; 0x24
 c0033ce:	46bd      	mov	sp, r7
 c0033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0033d4:	4770      	bx	lr
 c0033d6:	bf00      	nop
 c0033d8:	50021000 	.word	0x50021000
 c0033dc:	0c0068a8 	.word	0x0c0068a8
 c0033e0:	00f42400 	.word	0x00f42400
 c0033e4:	007a1200 	.word	0x007a1200

0c0033e8 <HAL_RCC_GetHCLKFreq>:
  * @note   Each time HCLK changes, this function must be called to update the
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 c0033e8:	b580      	push	{r7, lr}
 c0033ea:	af00      	add	r7, sp, #0
  return (HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]);
 c0033ec:	f7ff ff5e 	bl	c0032ac <HAL_RCC_GetSysClockFreq>
 c0033f0:	4602      	mov	r2, r0
 c0033f2:	4b05      	ldr	r3, [pc, #20]	; (c003408 <HAL_RCC_GetHCLKFreq+0x20>)
 c0033f4:	689b      	ldr	r3, [r3, #8]
 c0033f6:	091b      	lsrs	r3, r3, #4
 c0033f8:	f003 030f 	and.w	r3, r3, #15
 c0033fc:	4903      	ldr	r1, [pc, #12]	; (c00340c <HAL_RCC_GetHCLKFreq+0x24>)
 c0033fe:	5ccb      	ldrb	r3, [r1, r3]
 c003400:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003404:	4618      	mov	r0, r3
 c003406:	bd80      	pop	{r7, pc}
 c003408:	50021000 	.word	0x50021000
 c00340c:	0c006890 	.word	0x0c006890

0c003410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 c003410:	b580      	push	{r7, lr}
 c003412:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 c003414:	f7ff ffe8 	bl	c0033e8 <HAL_RCC_GetHCLKFreq>
 c003418:	4602      	mov	r2, r0
 c00341a:	4b05      	ldr	r3, [pc, #20]	; (c003430 <HAL_RCC_GetPCLK1Freq+0x20>)
 c00341c:	689b      	ldr	r3, [r3, #8]
 c00341e:	0a1b      	lsrs	r3, r3, #8
 c003420:	f003 0307 	and.w	r3, r3, #7
 c003424:	4903      	ldr	r1, [pc, #12]	; (c003434 <HAL_RCC_GetPCLK1Freq+0x24>)
 c003426:	5ccb      	ldrb	r3, [r1, r3]
 c003428:	fa22 f303 	lsr.w	r3, r2, r3
}
 c00342c:	4618      	mov	r0, r3
 c00342e:	bd80      	pop	{r7, pc}
 c003430:	50021000 	.word	0x50021000
 c003434:	0c0068a0 	.word	0x0c0068a0

0c003438 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 c003438:	b580      	push	{r7, lr}
 c00343a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 c00343c:	f7ff ffd4 	bl	c0033e8 <HAL_RCC_GetHCLKFreq>
 c003440:	4602      	mov	r2, r0
 c003442:	4b05      	ldr	r3, [pc, #20]	; (c003458 <HAL_RCC_GetPCLK2Freq+0x20>)
 c003444:	689b      	ldr	r3, [r3, #8]
 c003446:	0adb      	lsrs	r3, r3, #11
 c003448:	f003 0307 	and.w	r3, r3, #7
 c00344c:	4903      	ldr	r1, [pc, #12]	; (c00345c <HAL_RCC_GetPCLK2Freq+0x24>)
 c00344e:	5ccb      	ldrb	r3, [r1, r3]
 c003450:	fa22 f303 	lsr.w	r3, r2, r3
}
 c003454:	4618      	mov	r0, r3
 c003456:	bd80      	pop	{r7, pc}
 c003458:	50021000 	.word	0x50021000
 c00345c:	0c0068a0 	.word	0x0c0068a0

0c003460 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 c003460:	b580      	push	{r7, lr}
 c003462:	b086      	sub	sp, #24
 c003464:	af00      	add	r7, sp, #0
 c003466:	6078      	str	r0, [r7, #4]
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 c003468:	2300      	movs	r3, #0
 c00346a:	617b      	str	r3, [r7, #20]
  uint32_t vos;

  if (__HAL_RCC_PWR_IS_CLK_ENABLED())
 c00346c:	4b2c      	ldr	r3, [pc, #176]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00346e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003474:	2b00      	cmp	r3, #0
 c003476:	d003      	beq.n	c003480 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 c003478:	f7ff f85c 	bl	c002534 <HAL_PWREx_GetVoltageRange>
 c00347c:	6138      	str	r0, [r7, #16]
 c00347e:	e014      	b.n	c0034aa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 c003480:	4b27      	ldr	r3, [pc, #156]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003484:	4a26      	ldr	r2, [pc, #152]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c003486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c00348a:	6593      	str	r3, [r2, #88]	; 0x58
 c00348c:	4b24      	ldr	r3, [pc, #144]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c00348e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003494:	60fb      	str	r3, [r7, #12]
 c003496:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 c003498:	f7ff f84c 	bl	c002534 <HAL_PWREx_GetVoltageRange>
 c00349c:	6138      	str	r0, [r7, #16]
    __HAL_RCC_PWR_CLK_DISABLE();
 c00349e:	4b20      	ldr	r3, [pc, #128]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0034a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0034a2:	4a1f      	ldr	r2, [pc, #124]	; (c003520 <RCC_SetFlashLatencyFromMSIRange+0xc0>)
 c0034a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0034a8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if ((vos == PWR_REGULATOR_VOLTAGE_SCALE0) || (vos == PWR_REGULATOR_VOLTAGE_SCALE1))
 c0034aa:	693b      	ldr	r3, [r7, #16]
 c0034ac:	2b00      	cmp	r3, #0
 c0034ae:	d003      	beq.n	c0034b8 <RCC_SetFlashLatencyFromMSIRange+0x58>
 c0034b0:	693b      	ldr	r3, [r7, #16]
 c0034b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0034b6:	d10b      	bne.n	c0034d0 <RCC_SetFlashLatencyFromMSIRange+0x70>
  {
    if (msirange > RCC_MSIRANGE_8)
 c0034b8:	687b      	ldr	r3, [r7, #4]
 c0034ba:	2b80      	cmp	r3, #128	; 0x80
 c0034bc:	d919      	bls.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    {
      /* MSI > 16Mhz */
      if (msirange > RCC_MSIRANGE_10)
 c0034be:	687b      	ldr	r3, [r7, #4]
 c0034c0:	2ba0      	cmp	r3, #160	; 0xa0
 c0034c2:	d902      	bls.n	c0034ca <RCC_SetFlashLatencyFromMSIRange+0x6a>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0034c4:	2302      	movs	r3, #2
 c0034c6:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0034c8:	e013      	b.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0034ca:	2301      	movs	r3, #1
 c0034cc:	617b      	str	r3, [r7, #20]
    if (msirange > RCC_MSIRANGE_8)
 c0034ce:	e010      	b.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    /* else MSI <= 16Mhz default FLASH_LATENCY_0 0WS */
  }
  else
  {
    if (msirange > RCC_MSIRANGE_8)
 c0034d0:	687b      	ldr	r3, [r7, #4]
 c0034d2:	2b80      	cmp	r3, #128	; 0x80
 c0034d4:	d902      	bls.n	c0034dc <RCC_SetFlashLatencyFromMSIRange+0x7c>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 c0034d6:	2303      	movs	r3, #3
 c0034d8:	617b      	str	r3, [r7, #20]
 c0034da:	e00a      	b.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
    }
    else
    {
      if (msirange == RCC_MSIRANGE_8)
 c0034dc:	687b      	ldr	r3, [r7, #4]
 c0034de:	2b80      	cmp	r3, #128	; 0x80
 c0034e0:	d102      	bne.n	c0034e8 <RCC_SetFlashLatencyFromMSIRange+0x88>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 c0034e2:	2302      	movs	r3, #2
 c0034e4:	617b      	str	r3, [r7, #20]
 c0034e6:	e004      	b.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      }
      else if (msirange == RCC_MSIRANGE_7)
 c0034e8:	687b      	ldr	r3, [r7, #4]
 c0034ea:	2b70      	cmp	r3, #112	; 0x70
 c0034ec:	d101      	bne.n	c0034f2 <RCC_SetFlashLatencyFromMSIRange+0x92>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 c0034ee:	2301      	movs	r3, #1
 c0034f0:	617b      	str	r3, [r7, #20]
        /* MSI < 8Mhz default FLASH_LATENCY_0 0WS */
      }
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 c0034f2:	4b0c      	ldr	r3, [pc, #48]	; (c003524 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0034f4:	681b      	ldr	r3, [r3, #0]
 c0034f6:	f023 020f 	bic.w	r2, r3, #15
 c0034fa:	490a      	ldr	r1, [pc, #40]	; (c003524 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c0034fc:	697b      	ldr	r3, [r7, #20]
 c0034fe:	4313      	orrs	r3, r2
 c003500:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if ((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 c003502:	4b08      	ldr	r3, [pc, #32]	; (c003524 <RCC_SetFlashLatencyFromMSIRange+0xc4>)
 c003504:	681b      	ldr	r3, [r3, #0]
 c003506:	f003 030f 	and.w	r3, r3, #15
 c00350a:	697a      	ldr	r2, [r7, #20]
 c00350c:	429a      	cmp	r2, r3
 c00350e:	d001      	beq.n	c003514 <RCC_SetFlashLatencyFromMSIRange+0xb4>
  {
    return HAL_ERROR;
 c003510:	2301      	movs	r3, #1
 c003512:	e000      	b.n	c003516 <RCC_SetFlashLatencyFromMSIRange+0xb6>
  }

  return HAL_OK;
 c003514:	2300      	movs	r3, #0
}
 c003516:	4618      	mov	r0, r3
 c003518:	3718      	adds	r7, #24
 c00351a:	46bd      	mov	sp, r7
 c00351c:	bd80      	pop	{r7, pc}
 c00351e:	bf00      	nop
 c003520:	50021000 	.word	0x50021000
 c003524:	50022000 	.word	0x50022000

0c003528 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 c003528:	b480      	push	{r7}
 c00352a:	b087      	sub	sp, #28
 c00352c:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;    /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 c00352e:	4b31      	ldr	r3, [pc, #196]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003530:	68db      	ldr	r3, [r3, #12]
 c003532:	f003 0303 	and.w	r3, r3, #3
 c003536:	60fb      	str	r3, [r7, #12]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 c003538:	4b2e      	ldr	r3, [pc, #184]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c00353a:	68db      	ldr	r3, [r3, #12]
 c00353c:	091b      	lsrs	r3, r3, #4
 c00353e:	f003 030f 	and.w	r3, r3, #15
 c003542:	3301      	adds	r3, #1
 c003544:	60bb      	str	r3, [r7, #8]

  switch (pllsource)
 c003546:	68fb      	ldr	r3, [r7, #12]
 c003548:	2b03      	cmp	r3, #3
 c00354a:	d015      	beq.n	c003578 <RCC_GetSysClockFreqFromPLLSource+0x50>
 c00354c:	68fb      	ldr	r3, [r7, #12]
 c00354e:	2b03      	cmp	r3, #3
 c003550:	d839      	bhi.n	c0035c6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
 c003552:	68fb      	ldr	r3, [r7, #12]
 c003554:	2b01      	cmp	r3, #1
 c003556:	d01c      	beq.n	c003592 <RCC_GetSysClockFreqFromPLLSource+0x6a>
 c003558:	68fb      	ldr	r3, [r7, #12]
 c00355a:	2b02      	cmp	r3, #2
 c00355c:	d133      	bne.n	c0035c6 <RCC_GetSysClockFreqFromPLLSource+0x9e>
  {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c00355e:	4a26      	ldr	r2, [pc, #152]	; (c0035f8 <RCC_GetSysClockFreqFromPLLSource+0xd0>)
 c003560:	68bb      	ldr	r3, [r7, #8]
 c003562:	fbb2 f3f3 	udiv	r3, r2, r3
 c003566:	4a23      	ldr	r2, [pc, #140]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003568:	68d2      	ldr	r2, [r2, #12]
 c00356a:	0a12      	lsrs	r2, r2, #8
 c00356c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c003570:	fb02 f303 	mul.w	r3, r2, r3
 c003574:	613b      	str	r3, [r7, #16]
      break;
 c003576:	e029      	b.n	c0035cc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 c003578:	4a20      	ldr	r2, [pc, #128]	; (c0035fc <RCC_GetSysClockFreqFromPLLSource+0xd4>)
 c00357a:	68bb      	ldr	r3, [r7, #8]
 c00357c:	fbb2 f3f3 	udiv	r3, r2, r3
 c003580:	4a1c      	ldr	r2, [pc, #112]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003582:	68d2      	ldr	r2, [r2, #12]
 c003584:	0a12      	lsrs	r2, r2, #8
 c003586:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 c00358a:	fb02 f303 	mul.w	r3, r2, r3
 c00358e:	613b      	str	r3, [r7, #16]
      break;
 c003590:	e01c      	b.n	c0035cc <RCC_GetSysClockFreqFromPLLSource+0xa4>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      /* Get MSI range source */
      if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 c003592:	4b18      	ldr	r3, [pc, #96]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c003594:	681b      	ldr	r3, [r3, #0]
 c003596:	f003 0308 	and.w	r3, r3, #8
 c00359a:	2b00      	cmp	r3, #0
 c00359c:	d107      	bne.n	c0035ae <RCC_GetSysClockFreqFromPLLSource+0x86>
      { /* MSISRANGE from RCC_CSR applies */
        msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 c00359e:	4b15      	ldr	r3, [pc, #84]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0035a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 c0035a4:	0a1b      	lsrs	r3, r3, #8
 c0035a6:	f003 030f 	and.w	r3, r3, #15
 c0035aa:	617b      	str	r3, [r7, #20]
 c0035ac:	e005      	b.n	c0035ba <RCC_GetSysClockFreqFromPLLSource+0x92>
      }
      else
      { /* MSIRANGE from RCC_CR applies */
        msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 c0035ae:	4b11      	ldr	r3, [pc, #68]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0035b0:	681b      	ldr	r3, [r3, #0]
 c0035b2:	091b      	lsrs	r3, r3, #4
 c0035b4:	f003 030f 	and.w	r3, r3, #15
 c0035b8:	617b      	str	r3, [r7, #20]
      }
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[msirange];
 c0035ba:	4a11      	ldr	r2, [pc, #68]	; (c003600 <RCC_GetSysClockFreqFromPLLSource+0xd8>)
 c0035bc:	697b      	ldr	r3, [r7, #20]
 c0035be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 c0035c2:	613b      	str	r3, [r7, #16]
        break;
 c0035c4:	e002      	b.n	c0035cc <RCC_GetSysClockFreqFromPLLSource+0xa4>
    default:
      /* unexpected */
      pllvco = 0;
 c0035c6:	2300      	movs	r3, #0
 c0035c8:	613b      	str	r3, [r7, #16]
      break;
 c0035ca:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U) * 2U;
 c0035cc:	4b09      	ldr	r3, [pc, #36]	; (c0035f4 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 c0035ce:	68db      	ldr	r3, [r3, #12]
 c0035d0:	0e5b      	lsrs	r3, r3, #25
 c0035d2:	f003 0303 	and.w	r3, r3, #3
 c0035d6:	3301      	adds	r3, #1
 c0035d8:	005b      	lsls	r3, r3, #1
 c0035da:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 c0035dc:	693a      	ldr	r2, [r7, #16]
 c0035de:	687b      	ldr	r3, [r7, #4]
 c0035e0:	fbb2 f3f3 	udiv	r3, r2, r3
 c0035e4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 c0035e6:	683b      	ldr	r3, [r7, #0]
}
 c0035e8:	4618      	mov	r0, r3
 c0035ea:	371c      	adds	r7, #28
 c0035ec:	46bd      	mov	sp, r7
 c0035ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0035f2:	4770      	bx	lr
 c0035f4:	50021000 	.word	0x50021000
 c0035f8:	00f42400 	.word	0x00f42400
 c0035fc:	007a1200 	.word	0x007a1200
 c003600:	0c0068a8 	.word	0x0c0068a8

0c003604 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 c003604:	b580      	push	{r7, lr}
 c003606:	b088      	sub	sp, #32
 c003608:	af00      	add	r7, sp, #0
 c00360a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 c00360c:	2300      	movs	r3, #0
 c00360e:	77fb      	strb	r3, [r7, #31]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 c003610:	2300      	movs	r3, #0
 c003612:	77bb      	strb	r3, [r7, #30]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 c003614:	687b      	ldr	r3, [r7, #4]
 c003616:	681b      	ldr	r3, [r3, #0]
 c003618:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c00361c:	2b00      	cmp	r3, #0
 c00361e:	d040      	beq.n	c0036a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch (PeriphClkInit->Sai1ClockSelection)
 c003620:	687b      	ldr	r3, [r7, #4]
 c003622:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003624:	2b80      	cmp	r3, #128	; 0x80
 c003626:	d02a      	beq.n	c00367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003628:	2b80      	cmp	r3, #128	; 0x80
 c00362a:	d825      	bhi.n	c003678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00362c:	2b60      	cmp	r3, #96	; 0x60
 c00362e:	d026      	beq.n	c00367e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 c003630:	2b60      	cmp	r3, #96	; 0x60
 c003632:	d821      	bhi.n	c003678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c003634:	2b40      	cmp	r3, #64	; 0x40
 c003636:	d006      	beq.n	c003646 <HAL_RCCEx_PeriphCLKConfig+0x42>
 c003638:	2b40      	cmp	r3, #64	; 0x40
 c00363a:	d81d      	bhi.n	c003678 <HAL_RCCEx_PeriphCLKConfig+0x74>
 c00363c:	2b00      	cmp	r3, #0
 c00363e:	d009      	beq.n	c003654 <HAL_RCCEx_PeriphCLKConfig+0x50>
 c003640:	2b20      	cmp	r3, #32
 c003642:	d010      	beq.n	c003666 <HAL_RCCEx_PeriphCLKConfig+0x62>
 c003644:	e018      	b.n	c003678 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003646:	4b8f      	ldr	r3, [pc, #572]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003648:	68db      	ldr	r3, [r3, #12]
 c00364a:	4a8e      	ldr	r2, [pc, #568]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00364c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003650:	60d3      	str	r3, [r2, #12]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003652:	e015      	b.n	c003680 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003654:	687b      	ldr	r3, [r7, #4]
 c003656:	3304      	adds	r3, #4
 c003658:	2100      	movs	r1, #0
 c00365a:	4618      	mov	r0, r3
 c00365c:	f000 fb56 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003660:	4603      	mov	r3, r0
 c003662:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003664:	e00c      	b.n	c003680 <HAL_RCCEx_PeriphCLKConfig+0x7c>

      case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
        /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003666:	687b      	ldr	r3, [r7, #4]
 c003668:	3320      	adds	r3, #32
 c00366a:	2100      	movs	r1, #0
 c00366c:	4618      	mov	r0, r3
 c00366e:	f000 fc33 	bl	c003ed8 <RCCEx_PLLSAI2_Config>
 c003672:	4603      	mov	r3, r0
 c003674:	77fb      	strb	r3, [r7, #31]
        /* SAI1 clock source config set later after clock selection check */
        break;
 c003676:	e003      	b.n	c003680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      case RCC_SAI1CLKSOURCE_HSI:      /* HSI is used as source of SAI1 clock*/
        /* SAI1 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003678:	2301      	movs	r3, #1
 c00367a:	77fb      	strb	r3, [r7, #31]
        break;
 c00367c:	e000      	b.n	c003680 <HAL_RCCEx_PeriphCLKConfig+0x7c>
        break;
 c00367e:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003680:	7ffb      	ldrb	r3, [r7, #31]
 c003682:	2b00      	cmp	r3, #0
 c003684:	d10b      	bne.n	c00369e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 c003686:	4b7f      	ldr	r3, [pc, #508]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003688:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c00368c:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 c003690:	687b      	ldr	r3, [r7, #4]
 c003692:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c003694:	497b      	ldr	r1, [pc, #492]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003696:	4313      	orrs	r3, r2
 c003698:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c00369c:	e001      	b.n	c0036a2 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00369e:	7ffb      	ldrb	r3, [r7, #31]
 c0036a0:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 c0036a2:	687b      	ldr	r3, [r7, #4]
 c0036a4:	681b      	ldr	r3, [r3, #0]
 c0036a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 c0036aa:	2b00      	cmp	r3, #0
 c0036ac:	d047      	beq.n	c00373e <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch (PeriphClkInit->Sai2ClockSelection)
 c0036ae:	687b      	ldr	r3, [r7, #4]
 c0036b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c0036b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0036b6:	d030      	beq.n	c00371a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0036b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0036bc:	d82a      	bhi.n	c003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0036be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0036c2:	d02a      	beq.n	c00371a <HAL_RCCEx_PeriphCLKConfig+0x116>
 c0036c4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c0036c8:	d824      	bhi.n	c003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0036ca:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0036ce:	d008      	beq.n	c0036e2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 c0036d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c0036d4:	d81e      	bhi.n	c003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
 c0036d6:	2b00      	cmp	r3, #0
 c0036d8:	d00a      	beq.n	c0036f0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 c0036da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c0036de:	d010      	beq.n	c003702 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 c0036e0:	e018      	b.n	c003714 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
      case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c0036e2:	4b68      	ldr	r3, [pc, #416]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0036e4:	68db      	ldr	r3, [r3, #12]
 c0036e6:	4a67      	ldr	r2, [pc, #412]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0036e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0036ec:	60d3      	str	r3, [r2, #12]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c0036ee:	e015      	b.n	c00371c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c0036f0:	687b      	ldr	r3, [r7, #4]
 c0036f2:	3304      	adds	r3, #4
 c0036f4:	2100      	movs	r1, #0
 c0036f6:	4618      	mov	r0, r3
 c0036f8:	f000 fb08 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c0036fc:	4603      	mov	r3, r0
 c0036fe:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003700:	e00c      	b.n	c00371c <HAL_RCCEx_PeriphCLKConfig+0x118>

      case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
        /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
        ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 c003702:	687b      	ldr	r3, [r7, #4]
 c003704:	3320      	adds	r3, #32
 c003706:	2100      	movs	r1, #0
 c003708:	4618      	mov	r0, r3
 c00370a:	f000 fbe5 	bl	c003ed8 <RCCEx_PLLSAI2_Config>
 c00370e:	4603      	mov	r3, r0
 c003710:	77fb      	strb	r3, [r7, #31]
        /* SAI2 clock source config set later after clock selection check */
        break;
 c003712:	e003      	b.n	c00371c <HAL_RCCEx_PeriphCLKConfig+0x118>
      case RCC_SAI2CLKSOURCE_HSI:      /* HSI is used as source of SAI2 clock*/
        /* SAI2 clock source config set later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 c003714:	2301      	movs	r3, #1
 c003716:	77fb      	strb	r3, [r7, #31]
        break;
 c003718:	e000      	b.n	c00371c <HAL_RCCEx_PeriphCLKConfig+0x118>
        break;
 c00371a:	bf00      	nop
    }

    if (ret == HAL_OK)
 c00371c:	7ffb      	ldrb	r3, [r7, #31]
 c00371e:	2b00      	cmp	r3, #0
 c003720:	d10b      	bne.n	c00373a <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 c003722:	4b58      	ldr	r3, [pc, #352]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003724:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003728:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 c00372c:	687b      	ldr	r3, [r7, #4]
 c00372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 c003730:	4954      	ldr	r1, [pc, #336]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003732:	4313      	orrs	r3, r2
 c003734:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 c003738:	e001      	b.n	c00373e <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00373a:	7ffb      	ldrb	r3, [r7, #31]
 c00373c:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 c00373e:	687b      	ldr	r3, [r7, #4]
 c003740:	681b      	ldr	r3, [r3, #0]
 c003742:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 c003746:	2b00      	cmp	r3, #0
 c003748:	f000 80ab 	beq.w	c0038a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    FlagStatus       pwrclkchanged = RESET;
 c00374c:	2300      	movs	r3, #0
 c00374e:	75fb      	strb	r3, [r7, #23]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 c003750:	4b4c      	ldr	r3, [pc, #304]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003752:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003754:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003758:	2b00      	cmp	r3, #0
 c00375a:	d10d      	bne.n	c003778 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 c00375c:	4b49      	ldr	r3, [pc, #292]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00375e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003760:	4a48      	ldr	r2, [pc, #288]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003766:	6593      	str	r3, [r2, #88]	; 0x58
 c003768:	4b46      	ldr	r3, [pc, #280]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00376c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 c003770:	60fb      	str	r3, [r7, #12]
 c003772:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 c003774:	2301      	movs	r3, #1
 c003776:	75fb      	strb	r3, [r7, #23]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 c003778:	4b43      	ldr	r3, [pc, #268]	; (c003888 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00377a:	681b      	ldr	r3, [r3, #0]
 c00377c:	4a42      	ldr	r2, [pc, #264]	; (c003888 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00377e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 c003782:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 c003784:	f7fd feee 	bl	c001564 <HAL_GetTick>
 c003788:	6138      	str	r0, [r7, #16]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00378a:	e00f      	b.n	c0037ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 c00378c:	f7fd feea 	bl	c001564 <HAL_GetTick>
 c003790:	4602      	mov	r2, r0
 c003792:	693b      	ldr	r3, [r7, #16]
 c003794:	1ad3      	subs	r3, r2, r3
 c003796:	2b02      	cmp	r3, #2
 c003798:	d908      	bls.n	c0037ac <HAL_RCCEx_PeriphCLKConfig+0x1a8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c00379a:	4b3b      	ldr	r3, [pc, #236]	; (c003888 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c00379c:	681b      	ldr	r3, [r3, #0]
 c00379e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0037a2:	2b00      	cmp	r3, #0
 c0037a4:	d109      	bne.n	c0037ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
        {
          ret = HAL_TIMEOUT;
 c0037a6:	2303      	movs	r3, #3
 c0037a8:	77fb      	strb	r3, [r7, #31]
        }
        break;
 c0037aa:	e006      	b.n	c0037ba <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 c0037ac:	4b36      	ldr	r3, [pc, #216]	; (c003888 <HAL_RCCEx_PeriphCLKConfig+0x284>)
 c0037ae:	681b      	ldr	r3, [r3, #0]
 c0037b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c0037b4:	2b00      	cmp	r3, #0
 c0037b6:	d0e9      	beq.n	c00378c <HAL_RCCEx_PeriphCLKConfig+0x188>
 c0037b8:	e000      	b.n	c0037bc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
        break;
 c0037ba:	bf00      	nop
      }
    }

    if (ret == HAL_OK)
 c0037bc:	7ffb      	ldrb	r3, [r7, #31]
 c0037be:	2b00      	cmp	r3, #0
 c0037c0:	d164      	bne.n	c00388c <HAL_RCCEx_PeriphCLKConfig+0x288>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 c0037c2:	4b30      	ldr	r3, [pc, #192]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0037c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0037c8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c0037cc:	61bb      	str	r3, [r7, #24]

      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 c0037ce:	69bb      	ldr	r3, [r7, #24]
 c0037d0:	2b00      	cmp	r3, #0
 c0037d2:	d01f      	beq.n	c003814 <HAL_RCCEx_PeriphCLKConfig+0x210>
 c0037d4:	687b      	ldr	r3, [r7, #4]
 c0037d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0037da:	69ba      	ldr	r2, [r7, #24]
 c0037dc:	429a      	cmp	r2, r3
 c0037de:	d019      	beq.n	c003814 <HAL_RCCEx_PeriphCLKConfig+0x210>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 c0037e0:	4b28      	ldr	r3, [pc, #160]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0037e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0037e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 c0037ea:	61bb      	str	r3, [r7, #24]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 c0037ec:	4b25      	ldr	r3, [pc, #148]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0037ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c0037f2:	4a24      	ldr	r2, [pc, #144]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0037f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c0037f8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 c0037fc:	4b21      	ldr	r3, [pc, #132]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c0037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003802:	4a20      	ldr	r2, [pc, #128]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003804:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 c003808:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 c00380c:	4a1d      	ldr	r2, [pc, #116]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00380e:	69bb      	ldr	r3, [r7, #24]
 c003810:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 c003814:	69bb      	ldr	r3, [r7, #24]
 c003816:	f003 0301 	and.w	r3, r3, #1
 c00381a:	2b00      	cmp	r3, #0
 c00381c:	d01f      	beq.n	c00385e <HAL_RCCEx_PeriphCLKConfig+0x25a>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 c00381e:	f7fd fea1 	bl	c001564 <HAL_GetTick>
 c003822:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003824:	e012      	b.n	c00384c <HAL_RCCEx_PeriphCLKConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 c003826:	f7fd fe9d 	bl	c001564 <HAL_GetTick>
 c00382a:	4602      	mov	r2, r0
 c00382c:	693b      	ldr	r3, [r7, #16]
 c00382e:	1ad3      	subs	r3, r2, r3
 c003830:	f241 3288 	movw	r2, #5000	; 0x1388
 c003834:	4293      	cmp	r3, r2
 c003836:	d909      	bls.n	c00384c <HAL_RCCEx_PeriphCLKConfig+0x248>
          {
            /* New check to avoid false timeout detection in case of preemption */
            if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c003838:	4b12      	ldr	r3, [pc, #72]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00383a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00383e:	f003 0302 	and.w	r3, r3, #2
 c003842:	2b00      	cmp	r3, #0
 c003844:	d10a      	bne.n	c00385c <HAL_RCCEx_PeriphCLKConfig+0x258>
            {
              ret = HAL_TIMEOUT;
 c003846:	2303      	movs	r3, #3
 c003848:	77fb      	strb	r3, [r7, #31]
            }
            break;
 c00384a:	e007      	b.n	c00385c <HAL_RCCEx_PeriphCLKConfig+0x258>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 c00384c:	4b0d      	ldr	r3, [pc, #52]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c00384e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003852:	f003 0302 	and.w	r3, r3, #2
 c003856:	2b00      	cmp	r3, #0
 c003858:	d0e5      	beq.n	c003826 <HAL_RCCEx_PeriphCLKConfig+0x222>
 c00385a:	e000      	b.n	c00385e <HAL_RCCEx_PeriphCLKConfig+0x25a>
            break;
 c00385c:	bf00      	nop
          }
        }
      }

      if (ret == HAL_OK)
 c00385e:	7ffb      	ldrb	r3, [r7, #31]
 c003860:	2b00      	cmp	r3, #0
 c003862:	d10c      	bne.n	c00387e <HAL_RCCEx_PeriphCLKConfig+0x27a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 c003864:	4b07      	ldr	r3, [pc, #28]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c00386a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c00386e:	687b      	ldr	r3, [r7, #4]
 c003870:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 c003874:	4903      	ldr	r1, [pc, #12]	; (c003884 <HAL_RCCEx_PeriphCLKConfig+0x280>)
 c003876:	4313      	orrs	r3, r2
 c003878:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 c00387c:	e008      	b.n	c003890 <HAL_RCCEx_PeriphCLKConfig+0x28c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 c00387e:	7ffb      	ldrb	r3, [r7, #31]
 c003880:	77bb      	strb	r3, [r7, #30]
 c003882:	e005      	b.n	c003890 <HAL_RCCEx_PeriphCLKConfig+0x28c>
 c003884:	50021000 	.word	0x50021000
 c003888:	50007000 	.word	0x50007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 c00388c:	7ffb      	ldrb	r3, [r7, #31]
 c00388e:	77bb      	strb	r3, [r7, #30]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 c003890:	7dfb      	ldrb	r3, [r7, #23]
 c003892:	2b01      	cmp	r3, #1
 c003894:	d105      	bne.n	c0038a2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 c003896:	4b9c      	ldr	r3, [pc, #624]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003898:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00389a:	4a9b      	ldr	r2, [pc, #620]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00389c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c0038a0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 c0038a2:	687b      	ldr	r3, [r7, #4]
 c0038a4:	681b      	ldr	r3, [r3, #0]
 c0038a6:	f003 0301 	and.w	r3, r3, #1
 c0038aa:	2b00      	cmp	r3, #0
 c0038ac:	d00a      	beq.n	c0038c4 <HAL_RCCEx_PeriphCLKConfig+0x2c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 c0038ae:	4b96      	ldr	r3, [pc, #600]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0038b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0038b4:	f023 0203 	bic.w	r2, r3, #3
 c0038b8:	687b      	ldr	r3, [r7, #4]
 c0038ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c0038bc:	4992      	ldr	r1, [pc, #584]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0038be:	4313      	orrs	r3, r2
 c0038c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 c0038c4:	687b      	ldr	r3, [r7, #4]
 c0038c6:	681b      	ldr	r3, [r3, #0]
 c0038c8:	f003 0302 	and.w	r3, r3, #2
 c0038cc:	2b00      	cmp	r3, #0
 c0038ce:	d00a      	beq.n	c0038e6 <HAL_RCCEx_PeriphCLKConfig+0x2e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 c0038d0:	4b8d      	ldr	r3, [pc, #564]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0038d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0038d6:	f023 020c 	bic.w	r2, r3, #12
 c0038da:	687b      	ldr	r3, [r7, #4]
 c0038dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0038de:	498a      	ldr	r1, [pc, #552]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0038e0:	4313      	orrs	r3, r2
 c0038e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 c0038e6:	687b      	ldr	r3, [r7, #4]
 c0038e8:	681b      	ldr	r3, [r3, #0]
 c0038ea:	f003 0304 	and.w	r3, r3, #4
 c0038ee:	2b00      	cmp	r3, #0
 c0038f0:	d00a      	beq.n	c003908 <HAL_RCCEx_PeriphCLKConfig+0x304>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 c0038f2:	4b85      	ldr	r3, [pc, #532]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0038f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0038f8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 c0038fc:	687b      	ldr	r3, [r7, #4]
 c0038fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 c003900:	4981      	ldr	r1, [pc, #516]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003902:	4313      	orrs	r3, r2
 c003904:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART4 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 c003908:	687b      	ldr	r3, [r7, #4]
 c00390a:	681b      	ldr	r3, [r3, #0]
 c00390c:	f003 0308 	and.w	r3, r3, #8
 c003910:	2b00      	cmp	r3, #0
 c003912:	d00a      	beq.n	c00392a <HAL_RCCEx_PeriphCLKConfig+0x326>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 c003914:	4b7c      	ldr	r3, [pc, #496]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00391a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 c00391e:	687b      	ldr	r3, [r7, #4]
 c003920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c003922:	4979      	ldr	r1, [pc, #484]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003924:	4313      	orrs	r3, r2
 c003926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- UART5 clock source configuration --------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 c00392a:	687b      	ldr	r3, [r7, #4]
 c00392c:	681b      	ldr	r3, [r3, #0]
 c00392e:	f003 0310 	and.w	r3, r3, #16
 c003932:	2b00      	cmp	r3, #0
 c003934:	d00a      	beq.n	c00394c <HAL_RCCEx_PeriphCLKConfig+0x348>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 c003936:	4b74      	ldr	r3, [pc, #464]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003938:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00393c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 c003940:	687b      	ldr	r3, [r7, #4]
 c003942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c003944:	4970      	ldr	r1, [pc, #448]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003946:	4313      	orrs	r3, r2
 c003948:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 c00394c:	687b      	ldr	r3, [r7, #4]
 c00394e:	681b      	ldr	r3, [r3, #0]
 c003950:	f003 0320 	and.w	r3, r3, #32
 c003954:	2b00      	cmp	r3, #0
 c003956:	d00a      	beq.n	c00396e <HAL_RCCEx_PeriphCLKConfig+0x36a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 c003958:	4b6b      	ldr	r3, [pc, #428]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00395a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c00395e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 c003962:	687b      	ldr	r3, [r7, #4]
 c003964:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 c003966:	4968      	ldr	r1, [pc, #416]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003968:	4313      	orrs	r3, r2
 c00396a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 c00396e:	687b      	ldr	r3, [r7, #4]
 c003970:	681b      	ldr	r3, [r3, #0]
 c003972:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c003976:	2b00      	cmp	r3, #0
 c003978:	d00a      	beq.n	c003990 <HAL_RCCEx_PeriphCLKConfig+0x38c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 c00397a:	4b63      	ldr	r3, [pc, #396]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00397c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003980:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 c003984:	687b      	ldr	r3, [r7, #4]
 c003986:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 c003988:	495f      	ldr	r1, [pc, #380]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00398a:	4313      	orrs	r3, r2
 c00398c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 c003990:	687b      	ldr	r3, [r7, #4]
 c003992:	681b      	ldr	r3, [r3, #0]
 c003994:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003998:	2b00      	cmp	r3, #0
 c00399a:	d00a      	beq.n	c0039b2 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));

    /* Configure the LPTIM2 clock source */
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 c00399c:	4b5a      	ldr	r3, [pc, #360]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c00399e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0039a2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c0039a6:	687b      	ldr	r3, [r7, #4]
 c0039a8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0039aa:	4957      	ldr	r1, [pc, #348]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0039ac:	4313      	orrs	r3, r2
 c0039ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM3) == (RCC_PERIPHCLK_LPTIM3))
 c0039b2:	687b      	ldr	r3, [r7, #4]
 c0039b4:	681b      	ldr	r3, [r3, #0]
 c0039b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 c0039ba:	2b00      	cmp	r3, #0
 c0039bc:	d00a      	beq.n	c0039d4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM3CLK(PeriphClkInit->Lptim3ClockSelection));

    /* Configure the LPTIM3 clock source */
    __HAL_RCC_LPTIM3_CONFIG(PeriphClkInit->Lptim3ClockSelection);
 c0039be:	4b52      	ldr	r3, [pc, #328]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0039c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c0039c4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 c0039c8:	687b      	ldr	r3, [r7, #4]
 c0039ca:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c0039cc:	494e      	ldr	r1, [pc, #312]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0039ce:	4313      	orrs	r3, r2
 c0039d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- FDCAN kernel clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == (RCC_PERIPHCLK_FDCAN))
 c0039d4:	687b      	ldr	r3, [r7, #4]
 c0039d6:	681b      	ldr	r3, [r3, #0]
 c0039d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 c0039dc:	2b00      	cmp	r3, #0
 c0039de:	d031      	beq.n	c003a44 <HAL_RCCEx_PeriphCLKConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLK(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN kernel clock source */
    switch (PeriphClkInit->FdcanClockSelection)
 c0039e0:	687b      	ldr	r3, [r7, #4]
 c0039e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c0039e4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0039e8:	d00e      	beq.n	c003a08 <HAL_RCCEx_PeriphCLKConfig+0x404>
 c0039ea:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 c0039ee:	d814      	bhi.n	c003a1a <HAL_RCCEx_PeriphCLKConfig+0x416>
 c0039f0:	2b00      	cmp	r3, #0
 c0039f2:	d015      	beq.n	c003a20 <HAL_RCCEx_PeriphCLKConfig+0x41c>
 c0039f4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 c0039f8:	d10f      	bne.n	c003a1a <HAL_RCCEx_PeriphCLKConfig+0x416>
        /* FDCAN kernel clock source config set later after clock selection check */
        break;

      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN kernel clock*/
        /* Enable PLL48M1CLK output clock generated from System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c0039fa:	4b43      	ldr	r3, [pc, #268]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c0039fc:	68db      	ldr	r3, [r3, #12]
 c0039fe:	4a42      	ldr	r2, [pc, #264]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a00:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003a04:	60d3      	str	r3, [r2, #12]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003a06:	e00c      	b.n	c003a22 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      case RCC_FDCANCLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for FDCAN kernel clock*/
        /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 c003a08:	687b      	ldr	r3, [r7, #4]
 c003a0a:	3304      	adds	r3, #4
 c003a0c:	2100      	movs	r1, #0
 c003a0e:	4618      	mov	r0, r3
 c003a10:	f000 f97c 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003a14:	4603      	mov	r3, r0
 c003a16:	77fb      	strb	r3, [r7, #31]
        /* FDCAN kernel clock source config set later after clock selection check */
        break;
 c003a18:	e003      	b.n	c003a22 <HAL_RCCEx_PeriphCLKConfig+0x41e>

      default:
        ret = HAL_ERROR;
 c003a1a:	2301      	movs	r3, #1
 c003a1c:	77fb      	strb	r3, [r7, #31]
        break;
 c003a1e:	e000      	b.n	c003a22 <HAL_RCCEx_PeriphCLKConfig+0x41e>
        break;
 c003a20:	bf00      	nop
    }

    if (ret == HAL_OK)
 c003a22:	7ffb      	ldrb	r3, [r7, #31]
 c003a24:	2b00      	cmp	r3, #0
 c003a26:	d10b      	bne.n	c003a40 <HAL_RCCEx_PeriphCLKConfig+0x43c>
    {
      /* Set the source of FDCAN kernel clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 c003a28:	4b37      	ldr	r3, [pc, #220]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a2e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 c003a32:	687b      	ldr	r3, [r7, #4]
 c003a34:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 c003a36:	4934      	ldr	r1, [pc, #208]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a38:	4313      	orrs	r3, r2
 c003a3a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c003a3e:	e001      	b.n	c003a44 <HAL_RCCEx_PeriphCLKConfig+0x440>
    }
    else
    {
      /* set overall return value */
      status = ret;
 c003a40:	7ffb      	ldrb	r3, [r7, #31]
 c003a42:	77bb      	strb	r3, [r7, #30]
    }
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 c003a44:	687b      	ldr	r3, [r7, #4]
 c003a46:	681b      	ldr	r3, [r3, #0]
 c003a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c003a4c:	2b00      	cmp	r3, #0
 c003a4e:	d00a      	beq.n	c003a66 <HAL_RCCEx_PeriphCLKConfig+0x462>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 c003a50:	4b2d      	ldr	r3, [pc, #180]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a56:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 c003a5a:	687b      	ldr	r3, [r7, #4]
 c003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 c003a5e:	492a      	ldr	r1, [pc, #168]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a60:	4313      	orrs	r3, r2
 c003a62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 c003a66:	687b      	ldr	r3, [r7, #4]
 c003a68:	681b      	ldr	r3, [r3, #0]
 c003a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c003a6e:	2b00      	cmp	r3, #0
 c003a70:	d00a      	beq.n	c003a88 <HAL_RCCEx_PeriphCLKConfig+0x484>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 c003a72:	4b25      	ldr	r3, [pc, #148]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a78:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 c003a7c:	687b      	ldr	r3, [r7, #4]
 c003a7e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 c003a80:	4921      	ldr	r1, [pc, #132]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a82:	4313      	orrs	r3, r2
 c003a84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 c003a88:	687b      	ldr	r3, [r7, #4]
 c003a8a:	681b      	ldr	r3, [r3, #0]
 c003a8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 c003a90:	2b00      	cmp	r3, #0
 c003a92:	d00a      	beq.n	c003aaa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 c003a94:	4b1c      	ldr	r3, [pc, #112]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003a9a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 c003a9e:	687b      	ldr	r3, [r7, #4]
 c003aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c003aa2:	4919      	ldr	r1, [pc, #100]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003aa4:	4313      	orrs	r3, r2
 c003aa6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 c003aaa:	687b      	ldr	r3, [r7, #4]
 c003aac:	681b      	ldr	r3, [r3, #0]
 c003aae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 c003ab2:	2b00      	cmp	r3, #0
 c003ab4:	d00a      	beq.n	c003acc <HAL_RCCEx_PeriphCLKConfig+0x4c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 c003ab6:	4b14      	ldr	r3, [pc, #80]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ab8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003abc:	f023 0203 	bic.w	r2, r3, #3
 c003ac0:	687b      	ldr	r3, [r7, #4]
 c003ac2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c003ac4:	4910      	ldr	r1, [pc, #64]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ac6:	4313      	orrs	r3, r2
 c003ac8:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 c003acc:	687b      	ldr	r3, [r7, #4]
 c003ace:	681b      	ldr	r3, [r3, #0]
 c003ad0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 c003ad4:	2b00      	cmp	r3, #0
 c003ad6:	d02b      	beq.n	c003b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 c003ad8:	4b0b      	ldr	r3, [pc, #44]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003ade:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c003ae2:	687b      	ldr	r3, [r7, #4]
 c003ae4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c003ae6:	4908      	ldr	r1, [pc, #32]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003ae8:	4313      	orrs	r3, r2
 c003aea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 c003aee:	687b      	ldr	r3, [r7, #4]
 c003af0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c003af2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003af6:	d109      	bne.n	c003b0c <HAL_RCCEx_PeriphCLKConfig+0x508>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003af8:	4b03      	ldr	r3, [pc, #12]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003afa:	68db      	ldr	r3, [r3, #12]
 c003afc:	4a02      	ldr	r2, [pc, #8]	; (c003b08 <HAL_RCCEx_PeriphCLKConfig+0x504>)
 c003afe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003b02:	60d3      	str	r3, [r2, #12]
 c003b04:	e014      	b.n	c003b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 c003b06:	bf00      	nop
 c003b08:	50021000 	.word	0x50021000
    }
    else
    {
      if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 c003b0c:	687b      	ldr	r3, [r7, #4]
 c003b0e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 c003b10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003b14:	d10c      	bne.n	c003b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003b16:	687b      	ldr	r3, [r7, #4]
 c003b18:	3304      	adds	r3, #4
 c003b1a:	2101      	movs	r1, #1
 c003b1c:	4618      	mov	r0, r3
 c003b1e:	f000 f8f5 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003b22:	4603      	mov	r3, r0
 c003b24:	77fb      	strb	r3, [r7, #31]

        if (ret != HAL_OK)
 c003b26:	7ffb      	ldrb	r3, [r7, #31]
 c003b28:	2b00      	cmp	r3, #0
 c003b2a:	d001      	beq.n	c003b30 <HAL_RCCEx_PeriphCLKConfig+0x52c>
        {
          /* set overall return value */
          status = ret;
 c003b2c:	7ffb      	ldrb	r3, [r7, #31]
 c003b2e:	77bb      	strb	r3, [r7, #30]
  }

#endif /* USB */

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 c003b30:	687b      	ldr	r3, [r7, #4]
 c003b32:	681b      	ldr	r3, [r3, #0]
 c003b34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 c003b38:	2b00      	cmp	r3, #0
 c003b3a:	d04a      	beq.n	c003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 c003b3c:	687b      	ldr	r3, [r7, #4]
 c003b3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003b40:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c003b44:	d108      	bne.n	c003b58 <HAL_RCCEx_PeriphCLKConfig+0x554>
 c003b46:	4b70      	ldr	r3, [pc, #448]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b48:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003b4c:	4a6e      	ldr	r2, [pc, #440]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b4e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 c003b52:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 c003b56:	e012      	b.n	c003b7e <HAL_RCCEx_PeriphCLKConfig+0x57a>
 c003b58:	4b6b      	ldr	r3, [pc, #428]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003b5e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c003b62:	687b      	ldr	r3, [r7, #4]
 c003b64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003b66:	4968      	ldr	r1, [pc, #416]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b68:	4313      	orrs	r3, r2
 c003b6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 c003b6e:	4b66      	ldr	r3, [pc, #408]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b70:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003b74:	4a64      	ldr	r2, [pc, #400]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003b76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 c003b7a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c

    if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 c003b7e:	687b      	ldr	r3, [r7, #4]
 c003b80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003b82:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003b86:	d10d      	bne.n	c003ba4 <HAL_RCCEx_PeriphCLKConfig+0x5a0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003b88:	687b      	ldr	r3, [r7, #4]
 c003b8a:	3304      	adds	r3, #4
 c003b8c:	2101      	movs	r1, #1
 c003b8e:	4618      	mov	r0, r3
 c003b90:	f000 f8bc 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003b94:	4603      	mov	r3, r0
 c003b96:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c003b98:	7ffb      	ldrb	r3, [r7, #31]
 c003b9a:	2b00      	cmp	r3, #0
 c003b9c:	d019      	beq.n	c003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      {
        /* set overall return value */
        status = ret;
 c003b9e:	7ffb      	ldrb	r3, [r7, #31]
 c003ba0:	77bb      	strb	r3, [r7, #30]
 c003ba2:	e016      	b.n	c003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
      }
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)
 c003ba4:	687b      	ldr	r3, [r7, #4]
 c003ba6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003ba8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003bac:	d106      	bne.n	c003bbc <HAL_RCCEx_PeriphCLKConfig+0x5b8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003bae:	4b56      	ldr	r3, [pc, #344]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003bb0:	68db      	ldr	r3, [r3, #12]
 c003bb2:	4a55      	ldr	r2, [pc, #340]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003bb4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003bb8:	60d3      	str	r3, [r2, #12]
 c003bba:	e00a      	b.n	c003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    }
    else if (PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP)
 c003bbc:	687b      	ldr	r3, [r7, #4]
 c003bbe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 c003bc0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 c003bc4:	d105      	bne.n	c003bd2 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
    {
      /* Enable PLLSAI3CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 c003bc6:	4b50      	ldr	r3, [pc, #320]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003bc8:	68db      	ldr	r3, [r3, #12]
 c003bca:	4a4f      	ldr	r2, [pc, #316]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 c003bd0:	60d3      	str	r3, [r2, #12]
      /* Nothing to do */
    }
  }

  /*-------------------------- RNG clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 c003bd2:	687b      	ldr	r3, [r7, #4]
 c003bd4:	681b      	ldr	r3, [r3, #0]
 c003bd6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 c003bda:	2b00      	cmp	r3, #0
 c003bdc:	d028      	beq.n	c003c30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));

    /* Configure the RNG clock source */
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 c003bde:	4b4a      	ldr	r3, [pc, #296]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003be4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 c003be8:	687b      	ldr	r3, [r7, #4]
 c003bea:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003bec:	4946      	ldr	r1, [pc, #280]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003bee:	4313      	orrs	r3, r2
 c003bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 c003bf4:	687b      	ldr	r3, [r7, #4]
 c003bf6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 c003bfc:	d106      	bne.n	c003c0c <HAL_RCCEx_PeriphCLKConfig+0x608>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003bfe:	4b42      	ldr	r3, [pc, #264]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c00:	68db      	ldr	r3, [r3, #12]
 c003c02:	4a41      	ldr	r2, [pc, #260]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003c08:	60d3      	str	r3, [r2, #12]
 c003c0a:	e011      	b.n	c003c30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    }
    else if (PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 c003c0c:	687b      	ldr	r3, [r7, #4]
 c003c0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 c003c10:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 c003c14:	d10c      	bne.n	c003c30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 c003c16:	687b      	ldr	r3, [r7, #4]
 c003c18:	3304      	adds	r3, #4
 c003c1a:	2101      	movs	r1, #1
 c003c1c:	4618      	mov	r0, r3
 c003c1e:	f000 f875 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003c22:	4603      	mov	r3, r0
 c003c24:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c003c26:	7ffb      	ldrb	r3, [r7, #31]
 c003c28:	2b00      	cmp	r3, #0
 c003c2a:	d001      	beq.n	c003c30 <HAL_RCCEx_PeriphCLKConfig+0x62c>
      {
        /* set overall return value */
        status = ret;
 c003c2c:	7ffb      	ldrb	r3, [r7, #31]
 c003c2e:	77bb      	strb	r3, [r7, #30]
      /* Nothing to do */
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 c003c30:	687b      	ldr	r3, [r7, #4]
 c003c32:	681b      	ldr	r3, [r3, #0]
 c003c34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 c003c38:	2b00      	cmp	r3, #0
 c003c3a:	d01e      	beq.n	c003c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 c003c3c:	4b32      	ldr	r3, [pc, #200]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003c42:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 c003c46:	687b      	ldr	r3, [r7, #4]
 c003c48:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003c4c:	492e      	ldr	r1, [pc, #184]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c4e:	4313      	orrs	r3, r2
 c003c50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 c003c54:	687b      	ldr	r3, [r7, #4]
 c003c56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 c003c5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 c003c5e:	d10c      	bne.n	c003c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 c003c60:	687b      	ldr	r3, [r7, #4]
 c003c62:	3304      	adds	r3, #4
 c003c64:	2102      	movs	r1, #2
 c003c66:	4618      	mov	r0, r3
 c003c68:	f000 f850 	bl	c003d0c <RCCEx_PLLSAI1_Config>
 c003c6c:	4603      	mov	r3, r0
 c003c6e:	77fb      	strb	r3, [r7, #31]

      if (ret != HAL_OK)
 c003c70:	7ffb      	ldrb	r3, [r7, #31]
 c003c72:	2b00      	cmp	r3, #0
 c003c74:	d001      	beq.n	c003c7a <HAL_RCCEx_PeriphCLKConfig+0x676>
      {
        /* set overall return value */
        status = ret;
 c003c76:	7ffb      	ldrb	r3, [r7, #31]
 c003c78:	77bb      	strb	r3, [r7, #30]
      }
    }
  }

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 c003c7a:	687b      	ldr	r3, [r7, #4]
 c003c7c:	681b      	ldr	r3, [r3, #0]
 c003c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 c003c82:	2b00      	cmp	r3, #0
 c003c84:	d00b      	beq.n	c003c9e <HAL_RCCEx_PeriphCLKConfig+0x69a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 c003c86:	4b20      	ldr	r3, [pc, #128]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c88:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003c8c:	f023 0204 	bic.w	r2, r3, #4
 c003c90:	687b      	ldr	r3, [r7, #4]
 c003c92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 c003c96:	491c      	ldr	r1, [pc, #112]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003c98:	4313      	orrs	r3, r2
 c003c9a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 c003c9e:	687b      	ldr	r3, [r7, #4]
 c003ca0:	681b      	ldr	r3, [r3, #0]
 c003ca2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 c003ca6:	2b00      	cmp	r3, #0
 c003ca8:	d00b      	beq.n	c003cc2 <HAL_RCCEx_PeriphCLKConfig+0x6be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 c003caa:	4b17      	ldr	r3, [pc, #92]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003cac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003cb0:	f023 0218 	bic.w	r2, r3, #24
 c003cb4:	687b      	ldr	r3, [r7, #4]
 c003cb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c003cba:	4913      	ldr	r1, [pc, #76]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003cbc:	4313      	orrs	r3, r2
 c003cbe:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 c003cc2:	687b      	ldr	r3, [r7, #4]
 c003cc4:	681b      	ldr	r3, [r3, #0]
 c003cc6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 c003cca:	2b00      	cmp	r3, #0
 c003ccc:	d017      	beq.n	c003cfe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 c003cce:	4b0e      	ldr	r3, [pc, #56]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003cd0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 c003cd4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 c003cd8:	687b      	ldr	r3, [r7, #4]
 c003cda:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003cde:	490a      	ldr	r1, [pc, #40]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003ce0:	4313      	orrs	r3, r2
 c003ce2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if (PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 c003ce6:	687b      	ldr	r3, [r7, #4]
 c003ce8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 c003cec:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 c003cf0:	d105      	bne.n	c003cfe <HAL_RCCEx_PeriphCLKConfig+0x6fa>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 c003cf2:	4b05      	ldr	r3, [pc, #20]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003cf4:	68db      	ldr	r3, [r3, #12]
 c003cf6:	4a04      	ldr	r2, [pc, #16]	; (c003d08 <HAL_RCCEx_PeriphCLKConfig+0x704>)
 c003cf8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 c003cfc:	60d3      	str	r3, [r2, #12]
    }
  }

  return status;
 c003cfe:	7fbb      	ldrb	r3, [r7, #30]
}
 c003d00:	4618      	mov	r0, r3
 c003d02:	3720      	adds	r7, #32
 c003d04:	46bd      	mov	sp, r7
 c003d06:	bd80      	pop	{r7, pc}
 c003d08:	50021000 	.word	0x50021000

0c003d0c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *pPllSai1, uint32_t Divider)
{
 c003d0c:	b580      	push	{r7, lr}
 c003d0e:	b084      	sub	sp, #16
 c003d10:	af00      	add	r7, sp, #0
 c003d12:	6078      	str	r0, [r7, #4]
 c003d14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c003d16:	2300      	movs	r3, #0
 c003d18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(pPllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(pPllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(pPllSai1->PLLSAI1ClockOut));

  /* Check PLLSAI1 clock source availability */
  switch (pPllSai1->PLLSAI1Source)
 c003d1a:	687b      	ldr	r3, [r7, #4]
 c003d1c:	681b      	ldr	r3, [r3, #0]
 c003d1e:	2b03      	cmp	r3, #3
 c003d20:	d018      	beq.n	c003d54 <RCCEx_PLLSAI1_Config+0x48>
 c003d22:	2b03      	cmp	r3, #3
 c003d24:	d81f      	bhi.n	c003d66 <RCCEx_PLLSAI1_Config+0x5a>
 c003d26:	2b01      	cmp	r3, #1
 c003d28:	d002      	beq.n	c003d30 <RCCEx_PLLSAI1_Config+0x24>
 c003d2a:	2b02      	cmp	r3, #2
 c003d2c:	d009      	beq.n	c003d42 <RCCEx_PLLSAI1_Config+0x36>
 c003d2e:	e01a      	b.n	c003d66 <RCCEx_PLLSAI1_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003d30:	4b65      	ldr	r3, [pc, #404]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d32:	681b      	ldr	r3, [r3, #0]
 c003d34:	f003 0302 	and.w	r3, r3, #2
 c003d38:	2b00      	cmp	r3, #0
 c003d3a:	d117      	bne.n	c003d6c <RCCEx_PLLSAI1_Config+0x60>
      {
        status = HAL_ERROR;
 c003d3c:	2301      	movs	r3, #1
 c003d3e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d40:	e014      	b.n	c003d6c <RCCEx_PLLSAI1_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003d42:	4b61      	ldr	r3, [pc, #388]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d44:	681b      	ldr	r3, [r3, #0]
 c003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003d4a:	2b00      	cmp	r3, #0
 c003d4c:	d110      	bne.n	c003d70 <RCCEx_PLLSAI1_Config+0x64>
      {
        status = HAL_ERROR;
 c003d4e:	2301      	movs	r3, #1
 c003d50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d52:	e00d      	b.n	c003d70 <RCCEx_PLLSAI1_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c003d54:	4b5c      	ldr	r3, [pc, #368]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d56:	681b      	ldr	r3, [r3, #0]
 c003d58:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003d5c:	2b00      	cmp	r3, #0
 c003d5e:	d109      	bne.n	c003d74 <RCCEx_PLLSAI1_Config+0x68>
      {
        status = HAL_ERROR;
 c003d60:	2301      	movs	r3, #1
 c003d62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003d64:	e006      	b.n	c003d74 <RCCEx_PLLSAI1_Config+0x68>
    default:
      status = HAL_ERROR;
 c003d66:	2301      	movs	r3, #1
 c003d68:	73fb      	strb	r3, [r7, #15]
      break;
 c003d6a:	e004      	b.n	c003d76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003d6c:	bf00      	nop
 c003d6e:	e002      	b.n	c003d76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003d70:	bf00      	nop
 c003d72:	e000      	b.n	c003d76 <RCCEx_PLLSAI1_Config+0x6a>
      break;
 c003d74:	bf00      	nop
  }

  if (status == HAL_OK)
 c003d76:	7bfb      	ldrb	r3, [r7, #15]
 c003d78:	2b00      	cmp	r3, #0
 c003d7a:	f040 809f 	bne.w	c003ebc <RCCEx_PLLSAI1_Config+0x1b0>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 c003d7e:	4b52      	ldr	r3, [pc, #328]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d80:	681b      	ldr	r3, [r3, #0]
 c003d82:	4a51      	ldr	r2, [pc, #324]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003d84:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 c003d88:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003d8a:	f7fd fbeb 	bl	c001564 <HAL_GetTick>
 c003d8e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003d90:	e00f      	b.n	c003db2 <RCCEx_PLLSAI1_Config+0xa6>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c003d92:	f7fd fbe7 	bl	c001564 <HAL_GetTick>
 c003d96:	4602      	mov	r2, r0
 c003d98:	68bb      	ldr	r3, [r7, #8]
 c003d9a:	1ad3      	subs	r3, r2, r3
 c003d9c:	2b02      	cmp	r3, #2
 c003d9e:	d908      	bls.n	c003db2 <RCCEx_PLLSAI1_Config+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003da0:	4b49      	ldr	r3, [pc, #292]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003da2:	681b      	ldr	r3, [r3, #0]
 c003da4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003da8:	2b00      	cmp	r3, #0
 c003daa:	d009      	beq.n	c003dc0 <RCCEx_PLLSAI1_Config+0xb4>
        {
          status = HAL_TIMEOUT;
 c003dac:	2303      	movs	r3, #3
 c003dae:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c003db0:	e006      	b.n	c003dc0 <RCCEx_PLLSAI1_Config+0xb4>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 c003db2:	4b45      	ldr	r3, [pc, #276]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003db4:	681b      	ldr	r3, [r3, #0]
 c003db6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003dba:	2b00      	cmp	r3, #0
 c003dbc:	d1e9      	bne.n	c003d92 <RCCEx_PLLSAI1_Config+0x86>
 c003dbe:	e000      	b.n	c003dc2 <RCCEx_PLLSAI1_Config+0xb6>
        break;
 c003dc0:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c003dc2:	7bfb      	ldrb	r3, [r7, #15]
 c003dc4:	2b00      	cmp	r3, #0
 c003dc6:	d179      	bne.n	c003ebc <RCCEx_PLLSAI1_Config+0x1b0>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003dc8:	683b      	ldr	r3, [r7, #0]
 c003dca:	2b00      	cmp	r3, #0
 c003dcc:	d116      	bne.n	c003dfc <RCCEx_PLLSAI1_Config+0xf0>
      {
        assert_param(IS_RCC_PLLSAI1P_VALUE(pPllSai1->PLLSAI1P));

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003dce:	4b3e      	ldr	r3, [pc, #248]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003dd0:	691a      	ldr	r2, [r3, #16]
 c003dd2:	4b3e      	ldr	r3, [pc, #248]	; (c003ecc <RCCEx_PLLSAI1_Config+0x1c0>)
 c003dd4:	4013      	ands	r3, r2
 c003dd6:	687a      	ldr	r2, [r7, #4]
 c003dd8:	6892      	ldr	r2, [r2, #8]
 c003dda:	0211      	lsls	r1, r2, #8
 c003ddc:	687a      	ldr	r2, [r7, #4]
 c003dde:	68d2      	ldr	r2, [r2, #12]
 c003de0:	06d2      	lsls	r2, r2, #27
 c003de2:	4311      	orrs	r1, r2
 c003de4:	687a      	ldr	r2, [r7, #4]
 c003de6:	6852      	ldr	r2, [r2, #4]
 c003de8:	3a01      	subs	r2, #1
 c003dea:	0112      	lsls	r2, r2, #4
 c003dec:	4311      	orrs	r1, r2
 c003dee:	687a      	ldr	r2, [r7, #4]
 c003df0:	6812      	ldr	r2, [r2, #0]
 c003df2:	430a      	orrs	r2, r1
 c003df4:	4934      	ldr	r1, [pc, #208]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003df6:	4313      	orrs	r3, r2
 c003df8:	610b      	str	r3, [r1, #16]
 c003dfa:	e033      	b.n	c003e64 <RCCEx_PLLSAI1_Config+0x158>
                   (pPllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (pPllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos) |
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }
      else if (Divider == DIVIDER_Q_UPDATE)
 c003dfc:	683b      	ldr	r3, [r7, #0]
 c003dfe:	2b01      	cmp	r3, #1
 c003e00:	d118      	bne.n	c003e34 <RCCEx_PLLSAI1_Config+0x128>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(pPllSai1->PLLSAI1Q));

        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003e02:	4b31      	ldr	r3, [pc, #196]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e04:	691a      	ldr	r2, [r3, #16]
 c003e06:	4b32      	ldr	r3, [pc, #200]	; (c003ed0 <RCCEx_PLLSAI1_Config+0x1c4>)
 c003e08:	4013      	ands	r3, r2
 c003e0a:	687a      	ldr	r2, [r7, #4]
 c003e0c:	6892      	ldr	r2, [r2, #8]
 c003e0e:	0211      	lsls	r1, r2, #8
 c003e10:	687a      	ldr	r2, [r7, #4]
 c003e12:	6912      	ldr	r2, [r2, #16]
 c003e14:	0852      	lsrs	r2, r2, #1
 c003e16:	3a01      	subs	r2, #1
 c003e18:	0552      	lsls	r2, r2, #21
 c003e1a:	4311      	orrs	r1, r2
 c003e1c:	687a      	ldr	r2, [r7, #4]
 c003e1e:	6852      	ldr	r2, [r2, #4]
 c003e20:	3a01      	subs	r2, #1
 c003e22:	0112      	lsls	r2, r2, #4
 c003e24:	4311      	orrs	r1, r2
 c003e26:	687a      	ldr	r2, [r7, #4]
 c003e28:	6812      	ldr	r2, [r2, #0]
 c003e2a:	430a      	orrs	r2, r1
 c003e2c:	4926      	ldr	r1, [pc, #152]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e2e:	4313      	orrs	r3, r2
 c003e30:	610b      	str	r3, [r1, #16]
 c003e32:	e017      	b.n	c003e64 <RCCEx_PLLSAI1_Config+0x158>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(pPllSai1->PLLSAI1R));

        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 c003e34:	4b24      	ldr	r3, [pc, #144]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e36:	691a      	ldr	r2, [r3, #16]
 c003e38:	4b26      	ldr	r3, [pc, #152]	; (c003ed4 <RCCEx_PLLSAI1_Config+0x1c8>)
 c003e3a:	4013      	ands	r3, r2
 c003e3c:	687a      	ldr	r2, [r7, #4]
 c003e3e:	6892      	ldr	r2, [r2, #8]
 c003e40:	0211      	lsls	r1, r2, #8
 c003e42:	687a      	ldr	r2, [r7, #4]
 c003e44:	6952      	ldr	r2, [r2, #20]
 c003e46:	0852      	lsrs	r2, r2, #1
 c003e48:	3a01      	subs	r2, #1
 c003e4a:	0652      	lsls	r2, r2, #25
 c003e4c:	4311      	orrs	r1, r2
 c003e4e:	687a      	ldr	r2, [r7, #4]
 c003e50:	6852      	ldr	r2, [r2, #4]
 c003e52:	3a01      	subs	r2, #1
 c003e54:	0112      	lsls	r2, r2, #4
 c003e56:	4311      	orrs	r1, r2
 c003e58:	687a      	ldr	r2, [r7, #4]
 c003e5a:	6812      	ldr	r2, [r2, #0]
 c003e5c:	430a      	orrs	r2, r1
 c003e5e:	491a      	ldr	r1, [pc, #104]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e60:	4313      	orrs	r3, r2
 c003e62:	610b      	str	r3, [r1, #16]
                   ((pPllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos) |
                   pPllSai1->PLLSAI1Source);
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 c003e64:	4b18      	ldr	r3, [pc, #96]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e66:	681b      	ldr	r3, [r3, #0]
 c003e68:	4a17      	ldr	r2, [pc, #92]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e6a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 c003e6e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003e70:	f7fd fb78 	bl	c001564 <HAL_GetTick>
 c003e74:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003e76:	e00f      	b.n	c003e98 <RCCEx_PLLSAI1_Config+0x18c>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 c003e78:	f7fd fb74 	bl	c001564 <HAL_GetTick>
 c003e7c:	4602      	mov	r2, r0
 c003e7e:	68bb      	ldr	r3, [r7, #8]
 c003e80:	1ad3      	subs	r3, r2, r3
 c003e82:	2b02      	cmp	r3, #2
 c003e84:	d908      	bls.n	c003e98 <RCCEx_PLLSAI1_Config+0x18c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003e86:	4b10      	ldr	r3, [pc, #64]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e88:	681b      	ldr	r3, [r3, #0]
 c003e8a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003e8e:	2b00      	cmp	r3, #0
 c003e90:	d109      	bne.n	c003ea6 <RCCEx_PLLSAI1_Config+0x19a>
          {
            status = HAL_TIMEOUT;
 c003e92:	2303      	movs	r3, #3
 c003e94:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c003e96:	e006      	b.n	c003ea6 <RCCEx_PLLSAI1_Config+0x19a>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 c003e98:	4b0b      	ldr	r3, [pc, #44]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003e9a:	681b      	ldr	r3, [r3, #0]
 c003e9c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 c003ea0:	2b00      	cmp	r3, #0
 c003ea2:	d0e9      	beq.n	c003e78 <RCCEx_PLLSAI1_Config+0x16c>
 c003ea4:	e000      	b.n	c003ea8 <RCCEx_PLLSAI1_Config+0x19c>
          break;
 c003ea6:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c003ea8:	7bfb      	ldrb	r3, [r7, #15]
 c003eaa:	2b00      	cmp	r3, #0
 c003eac:	d106      	bne.n	c003ebc <RCCEx_PLLSAI1_Config+0x1b0>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(pPllSai1->PLLSAI1ClockOut);
 c003eae:	4b06      	ldr	r3, [pc, #24]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003eb0:	691a      	ldr	r2, [r3, #16]
 c003eb2:	687b      	ldr	r3, [r7, #4]
 c003eb4:	699b      	ldr	r3, [r3, #24]
 c003eb6:	4904      	ldr	r1, [pc, #16]	; (c003ec8 <RCCEx_PLLSAI1_Config+0x1bc>)
 c003eb8:	4313      	orrs	r3, r2
 c003eba:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 c003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 c003ebe:	4618      	mov	r0, r3
 c003ec0:	3710      	adds	r7, #16
 c003ec2:	46bd      	mov	sp, r7
 c003ec4:	bd80      	pop	{r7, pc}
 c003ec6:	bf00      	nop
 c003ec8:	50021000 	.word	0x50021000
 c003ecc:	07ff800c 	.word	0x07ff800c
 c003ed0:	ff9f800c 	.word	0xff9f800c
 c003ed4:	f9ff800c 	.word	0xf9ff800c

0c003ed8 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *pPllSai2, uint32_t Divider)
{
 c003ed8:	b580      	push	{r7, lr}
 c003eda:	b084      	sub	sp, #16
 c003edc:	af00      	add	r7, sp, #0
 c003ede:	6078      	str	r0, [r7, #4]
 c003ee0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 c003ee2:	2300      	movs	r3, #0
 c003ee4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(pPllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(pPllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(pPllSai2->PLLSAI2ClockOut));

  /* Check PLLSAI2 clock source availability */
  switch (pPllSai2->PLLSAI2Source)
 c003ee6:	687b      	ldr	r3, [r7, #4]
 c003ee8:	681b      	ldr	r3, [r3, #0]
 c003eea:	2b03      	cmp	r3, #3
 c003eec:	d018      	beq.n	c003f20 <RCCEx_PLLSAI2_Config+0x48>
 c003eee:	2b03      	cmp	r3, #3
 c003ef0:	d81f      	bhi.n	c003f32 <RCCEx_PLLSAI2_Config+0x5a>
 c003ef2:	2b01      	cmp	r3, #1
 c003ef4:	d002      	beq.n	c003efc <RCCEx_PLLSAI2_Config+0x24>
 c003ef6:	2b02      	cmp	r3, #2
 c003ef8:	d009      	beq.n	c003f0e <RCCEx_PLLSAI2_Config+0x36>
 c003efa:	e01a      	b.n	c003f32 <RCCEx_PLLSAI2_Config+0x5a>
  {
    case RCC_PLLSOURCE_MSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 c003efc:	4b4a      	ldr	r3, [pc, #296]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003efe:	681b      	ldr	r3, [r3, #0]
 c003f00:	f003 0302 	and.w	r3, r3, #2
 c003f04:	2b00      	cmp	r3, #0
 c003f06:	d117      	bne.n	c003f38 <RCCEx_PLLSAI2_Config+0x60>
      {
        status = HAL_ERROR;
 c003f08:	2301      	movs	r3, #1
 c003f0a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f0c:	e014      	b.n	c003f38 <RCCEx_PLLSAI2_Config+0x60>
    case RCC_PLLSOURCE_HSI:
      if (HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 c003f0e:	4b46      	ldr	r3, [pc, #280]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f10:	681b      	ldr	r3, [r3, #0]
 c003f12:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 c003f16:	2b00      	cmp	r3, #0
 c003f18:	d110      	bne.n	c003f3c <RCCEx_PLLSAI2_Config+0x64>
      {
        status = HAL_ERROR;
 c003f1a:	2301      	movs	r3, #1
 c003f1c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f1e:	e00d      	b.n	c003f3c <RCCEx_PLLSAI2_Config+0x64>
    case RCC_PLLSOURCE_HSE:
      if (HAL_IS_BIT_CLR(RCC->CR, (RCC_CR_HSERDY | RCC_CR_HSEBYP)))
 c003f20:	4b41      	ldr	r3, [pc, #260]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f22:	681b      	ldr	r3, [r3, #0]
 c003f24:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 c003f28:	2b00      	cmp	r3, #0
 c003f2a:	d109      	bne.n	c003f40 <RCCEx_PLLSAI2_Config+0x68>
      {
        status = HAL_ERROR;
 c003f2c:	2301      	movs	r3, #1
 c003f2e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 c003f30:	e006      	b.n	c003f40 <RCCEx_PLLSAI2_Config+0x68>
    default:
      status = HAL_ERROR;
 c003f32:	2301      	movs	r3, #1
 c003f34:	73fb      	strb	r3, [r7, #15]
      break;
 c003f36:	e004      	b.n	c003f42 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f38:	bf00      	nop
 c003f3a:	e002      	b.n	c003f42 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f3c:	bf00      	nop
 c003f3e:	e000      	b.n	c003f42 <RCCEx_PLLSAI2_Config+0x6a>
      break;
 c003f40:	bf00      	nop
  }

  if (status == HAL_OK)
 c003f42:	7bfb      	ldrb	r3, [r7, #15]
 c003f44:	2b00      	cmp	r3, #0
 c003f46:	d169      	bne.n	c00401c <RCCEx_PLLSAI2_Config+0x144>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 c003f48:	4b37      	ldr	r3, [pc, #220]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f4a:	681b      	ldr	r3, [r3, #0]
 c003f4c:	4a36      	ldr	r2, [pc, #216]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f4e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c003f52:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 c003f54:	f7fd fb06 	bl	c001564 <HAL_GetTick>
 c003f58:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003f5a:	e00f      	b.n	c003f7c <RCCEx_PLLSAI2_Config+0xa4>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003f5c:	f7fd fb02 	bl	c001564 <HAL_GetTick>
 c003f60:	4602      	mov	r2, r0
 c003f62:	68bb      	ldr	r3, [r7, #8]
 c003f64:	1ad3      	subs	r3, r2, r3
 c003f66:	2b02      	cmp	r3, #2
 c003f68:	d908      	bls.n	c003f7c <RCCEx_PLLSAI2_Config+0xa4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003f6a:	4b2f      	ldr	r3, [pc, #188]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f6c:	681b      	ldr	r3, [r3, #0]
 c003f6e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003f72:	2b00      	cmp	r3, #0
 c003f74:	d009      	beq.n	c003f8a <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_TIMEOUT;
 c003f76:	2303      	movs	r3, #3
 c003f78:	73fb      	strb	r3, [r7, #15]
        }
        break;
 c003f7a:	e006      	b.n	c003f8a <RCCEx_PLLSAI2_Config+0xb2>
    while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 c003f7c:	4b2a      	ldr	r3, [pc, #168]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f7e:	681b      	ldr	r3, [r3, #0]
 c003f80:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003f84:	2b00      	cmp	r3, #0
 c003f86:	d1e9      	bne.n	c003f5c <RCCEx_PLLSAI2_Config+0x84>
 c003f88:	e000      	b.n	c003f8c <RCCEx_PLLSAI2_Config+0xb4>
        break;
 c003f8a:	bf00      	nop
      }
    }

    if (status == HAL_OK)
 c003f8c:	7bfb      	ldrb	r3, [r7, #15]
 c003f8e:	2b00      	cmp	r3, #0
 c003f90:	d144      	bne.n	c00401c <RCCEx_PLLSAI2_Config+0x144>
    {
      if (Divider == DIVIDER_P_UPDATE)
 c003f92:	683b      	ldr	r3, [r7, #0]
 c003f94:	2b00      	cmp	r3, #0
 c003f96:	d115      	bne.n	c003fc4 <RCCEx_PLLSAI2_Config+0xec>
      {
        assert_param(IS_RCC_PLLSAI2P_VALUE(pPllSai2->PLLSAI2P));

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 c003f98:	4b23      	ldr	r3, [pc, #140]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003f9a:	695a      	ldr	r2, [r3, #20]
 c003f9c:	4b23      	ldr	r3, [pc, #140]	; (c00402c <RCCEx_PLLSAI2_Config+0x154>)
 c003f9e:	4013      	ands	r3, r2
 c003fa0:	687a      	ldr	r2, [r7, #4]
 c003fa2:	6892      	ldr	r2, [r2, #8]
 c003fa4:	0211      	lsls	r1, r2, #8
 c003fa6:	687a      	ldr	r2, [r7, #4]
 c003fa8:	68d2      	ldr	r2, [r2, #12]
 c003faa:	06d2      	lsls	r2, r2, #27
 c003fac:	4311      	orrs	r1, r2
 c003fae:	687a      	ldr	r2, [r7, #4]
 c003fb0:	6852      	ldr	r2, [r2, #4]
 c003fb2:	3a01      	subs	r2, #1
 c003fb4:	0112      	lsls	r2, r2, #4
 c003fb6:	4311      	orrs	r1, r2
 c003fb8:	687a      	ldr	r2, [r7, #4]
 c003fba:	6812      	ldr	r2, [r2, #0]
 c003fbc:	430a      	orrs	r2, r1
 c003fbe:	491a      	ldr	r1, [pc, #104]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003fc0:	4313      	orrs	r3, r2
 c003fc2:	614b      	str	r3, [r1, #20]
                   pPllSai2->PLLSAI2Source);

      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 c003fc4:	4b18      	ldr	r3, [pc, #96]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003fc6:	681b      	ldr	r3, [r3, #0]
 c003fc8:	4a17      	ldr	r2, [pc, #92]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003fca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 c003fce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 c003fd0:	f7fd fac8 	bl	c001564 <HAL_GetTick>
 c003fd4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003fd6:	e00f      	b.n	c003ff8 <RCCEx_PLLSAI2_Config+0x120>
      {
        if ((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 c003fd8:	f7fd fac4 	bl	c001564 <HAL_GetTick>
 c003fdc:	4602      	mov	r2, r0
 c003fde:	68bb      	ldr	r3, [r7, #8]
 c003fe0:	1ad3      	subs	r3, r2, r3
 c003fe2:	2b02      	cmp	r3, #2
 c003fe4:	d908      	bls.n	c003ff8 <RCCEx_PLLSAI2_Config+0x120>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003fe6:	4b10      	ldr	r3, [pc, #64]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003fe8:	681b      	ldr	r3, [r3, #0]
 c003fea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c003fee:	2b00      	cmp	r3, #0
 c003ff0:	d109      	bne.n	c004006 <RCCEx_PLLSAI2_Config+0x12e>
          {
            status = HAL_TIMEOUT;
 c003ff2:	2303      	movs	r3, #3
 c003ff4:	73fb      	strb	r3, [r7, #15]
          }
          break;
 c003ff6:	e006      	b.n	c004006 <RCCEx_PLLSAI2_Config+0x12e>
      while (READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 c003ff8:	4b0b      	ldr	r3, [pc, #44]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c003ffa:	681b      	ldr	r3, [r3, #0]
 c003ffc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 c004000:	2b00      	cmp	r3, #0
 c004002:	d0e9      	beq.n	c003fd8 <RCCEx_PLLSAI2_Config+0x100>
 c004004:	e000      	b.n	c004008 <RCCEx_PLLSAI2_Config+0x130>
          break;
 c004006:	bf00      	nop
        }
      }

      if (status == HAL_OK)
 c004008:	7bfb      	ldrb	r3, [r7, #15]
 c00400a:	2b00      	cmp	r3, #0
 c00400c:	d106      	bne.n	c00401c <RCCEx_PLLSAI2_Config+0x144>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(pPllSai2->PLLSAI2ClockOut);
 c00400e:	4b06      	ldr	r3, [pc, #24]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c004010:	695a      	ldr	r2, [r3, #20]
 c004012:	687b      	ldr	r3, [r7, #4]
 c004014:	691b      	ldr	r3, [r3, #16]
 c004016:	4904      	ldr	r1, [pc, #16]	; (c004028 <RCCEx_PLLSAI2_Config+0x150>)
 c004018:	4313      	orrs	r3, r2
 c00401a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 c00401c:	7bfb      	ldrb	r3, [r7, #15]
}
 c00401e:	4618      	mov	r0, r3
 c004020:	3710      	adds	r7, #16
 c004022:	46bd      	mov	sp, r7
 c004024:	bd80      	pop	{r7, pc}
 c004026:	bf00      	nop
 c004028:	50021000 	.word	0x50021000
 c00402c:	07ff800c 	.word	0x07ff800c

0c004030 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 c004030:	b580      	push	{r7, lr}
 c004032:	b084      	sub	sp, #16
 c004034:	af00      	add	r7, sp, #0
 c004036:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 c004038:	687b      	ldr	r3, [r7, #4]
 c00403a:	2b00      	cmp	r3, #0
 c00403c:	d101      	bne.n	c004042 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 c00403e:	2301      	movs	r3, #1
 c004040:	e095      	b.n	c00416e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 c004042:	687b      	ldr	r3, [r7, #4]
 c004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004046:	2b00      	cmp	r3, #0
 c004048:	d108      	bne.n	c00405c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 c00404a:	687b      	ldr	r3, [r7, #4]
 c00404c:	685b      	ldr	r3, [r3, #4]
 c00404e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004052:	d009      	beq.n	c004068 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 c004054:	687b      	ldr	r3, [r7, #4]
 c004056:	2200      	movs	r2, #0
 c004058:	61da      	str	r2, [r3, #28]
 c00405a:	e005      	b.n	c004068 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 c00405c:	687b      	ldr	r3, [r7, #4]
 c00405e:	2200      	movs	r2, #0
 c004060:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 c004062:	687b      	ldr	r3, [r7, #4]
 c004064:	2200      	movs	r2, #0
 c004066:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c004068:	687b      	ldr	r3, [r7, #4]
 c00406a:	2200      	movs	r2, #0
 c00406c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 c00406e:	687b      	ldr	r3, [r7, #4]
 c004070:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004074:	b2db      	uxtb	r3, r3
 c004076:	2b00      	cmp	r3, #0
 c004078:	d106      	bne.n	c004088 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 c00407a:	687b      	ldr	r3, [r7, #4]
 c00407c:	2200      	movs	r2, #0
 c00407e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 c004082:	6878      	ldr	r0, [r7, #4]
 c004084:	f7fc fde4 	bl	c000c50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 c004088:	687b      	ldr	r3, [r7, #4]
 c00408a:	2202      	movs	r2, #2
 c00408c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 c004090:	687b      	ldr	r3, [r7, #4]
 c004092:	681b      	ldr	r3, [r3, #0]
 c004094:	681a      	ldr	r2, [r3, #0]
 c004096:	687b      	ldr	r3, [r7, #4]
 c004098:	681b      	ldr	r3, [r3, #0]
 c00409a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c00409e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c0040a0:	687b      	ldr	r3, [r7, #4]
 c0040a2:	68db      	ldr	r3, [r3, #12]
 c0040a4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c0040a8:	d902      	bls.n	c0040b0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 c0040aa:	2300      	movs	r3, #0
 c0040ac:	60fb      	str	r3, [r7, #12]
 c0040ae:	e002      	b.n	c0040b6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 c0040b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 c0040b4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 c0040b6:	687b      	ldr	r3, [r7, #4]
 c0040b8:	68db      	ldr	r3, [r3, #12]
 c0040ba:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 c0040be:	d007      	beq.n	c0040d0 <HAL_SPI_Init+0xa0>
 c0040c0:	687b      	ldr	r3, [r7, #4]
 c0040c2:	68db      	ldr	r3, [r3, #12]
 c0040c4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c0040c8:	d002      	beq.n	c0040d0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 c0040ca:	687b      	ldr	r3, [r7, #4]
 c0040cc:	2200      	movs	r2, #0
 c0040ce:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 c0040d0:	687b      	ldr	r3, [r7, #4]
 c0040d2:	685b      	ldr	r3, [r3, #4]
 c0040d4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 c0040d8:	687b      	ldr	r3, [r7, #4]
 c0040da:	689b      	ldr	r3, [r3, #8]
 c0040dc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 c0040e0:	431a      	orrs	r2, r3
 c0040e2:	687b      	ldr	r3, [r7, #4]
 c0040e4:	691b      	ldr	r3, [r3, #16]
 c0040e6:	f003 0302 	and.w	r3, r3, #2
 c0040ea:	431a      	orrs	r2, r3
 c0040ec:	687b      	ldr	r3, [r7, #4]
 c0040ee:	695b      	ldr	r3, [r3, #20]
 c0040f0:	f003 0301 	and.w	r3, r3, #1
 c0040f4:	431a      	orrs	r2, r3
 c0040f6:	687b      	ldr	r3, [r7, #4]
 c0040f8:	699b      	ldr	r3, [r3, #24]
 c0040fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 c0040fe:	431a      	orrs	r2, r3
 c004100:	687b      	ldr	r3, [r7, #4]
 c004102:	69db      	ldr	r3, [r3, #28]
 c004104:	f003 0338 	and.w	r3, r3, #56	; 0x38
 c004108:	431a      	orrs	r2, r3
 c00410a:	687b      	ldr	r3, [r7, #4]
 c00410c:	6a1b      	ldr	r3, [r3, #32]
 c00410e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c004112:	ea42 0103 	orr.w	r1, r2, r3
 c004116:	687b      	ldr	r3, [r7, #4]
 c004118:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00411a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 c00411e:	687b      	ldr	r3, [r7, #4]
 c004120:	681b      	ldr	r3, [r3, #0]
 c004122:	430a      	orrs	r2, r1
 c004124:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 c004126:	687b      	ldr	r3, [r7, #4]
 c004128:	699b      	ldr	r3, [r3, #24]
 c00412a:	0c1b      	lsrs	r3, r3, #16
 c00412c:	f003 0204 	and.w	r2, r3, #4
 c004130:	687b      	ldr	r3, [r7, #4]
 c004132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004134:	f003 0310 	and.w	r3, r3, #16
 c004138:	431a      	orrs	r2, r3
 c00413a:	687b      	ldr	r3, [r7, #4]
 c00413c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 c00413e:	f003 0308 	and.w	r3, r3, #8
 c004142:	431a      	orrs	r2, r3
 c004144:	687b      	ldr	r3, [r7, #4]
 c004146:	68db      	ldr	r3, [r3, #12]
 c004148:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 c00414c:	ea42 0103 	orr.w	r1, r2, r3
 c004150:	68fb      	ldr	r3, [r7, #12]
 c004152:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 c004156:	687b      	ldr	r3, [r7, #4]
 c004158:	681b      	ldr	r3, [r3, #0]
 c00415a:	430a      	orrs	r2, r1
 c00415c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 c00415e:	687b      	ldr	r3, [r7, #4]
 c004160:	2200      	movs	r2, #0
 c004162:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 c004164:	687b      	ldr	r3, [r7, #4]
 c004166:	2201      	movs	r2, #1
 c004168:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 c00416c:	2300      	movs	r3, #0
}
 c00416e:	4618      	mov	r0, r3
 c004170:	3710      	adds	r7, #16
 c004172:	46bd      	mov	sp, r7
 c004174:	bd80      	pop	{r7, pc}
	...

0c004178 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 c004178:	b580      	push	{r7, lr}
 c00417a:	b086      	sub	sp, #24
 c00417c:	af00      	add	r7, sp, #0
 c00417e:	60f8      	str	r0, [r7, #12]
 c004180:	60b9      	str	r1, [r7, #8]
 c004182:	607a      	str	r2, [r7, #4]
 c004184:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 c004186:	2300      	movs	r3, #0
 c004188:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 c00418a:	68fb      	ldr	r3, [r7, #12]
 c00418c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 c004190:	2b01      	cmp	r3, #1
 c004192:	d101      	bne.n	c004198 <HAL_SPI_TransmitReceive_DMA+0x20>
 c004194:	2302      	movs	r3, #2
 c004196:	e16c      	b.n	c004472 <HAL_SPI_TransmitReceive_DMA+0x2fa>
 c004198:	68fb      	ldr	r3, [r7, #12]
 c00419a:	2201      	movs	r2, #1
 c00419c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 c0041a0:	68fb      	ldr	r3, [r7, #12]
 c0041a2:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0041a6:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 c0041a8:	68fb      	ldr	r3, [r7, #12]
 c0041aa:	685b      	ldr	r3, [r3, #4]
 c0041ac:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 c0041ae:	7dbb      	ldrb	r3, [r7, #22]
 c0041b0:	2b01      	cmp	r3, #1
 c0041b2:	d00d      	beq.n	c0041d0 <HAL_SPI_TransmitReceive_DMA+0x58>
 c0041b4:	693b      	ldr	r3, [r7, #16]
 c0041b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0041ba:	d106      	bne.n	c0041ca <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 c0041bc:	68fb      	ldr	r3, [r7, #12]
 c0041be:	689b      	ldr	r3, [r3, #8]
 c0041c0:	2b00      	cmp	r3, #0
 c0041c2:	d102      	bne.n	c0041ca <HAL_SPI_TransmitReceive_DMA+0x52>
 c0041c4:	7dbb      	ldrb	r3, [r7, #22]
 c0041c6:	2b04      	cmp	r3, #4
 c0041c8:	d002      	beq.n	c0041d0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 c0041ca:	2302      	movs	r3, #2
 c0041cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 c0041ce:	e14b      	b.n	c004468 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 c0041d0:	68bb      	ldr	r3, [r7, #8]
 c0041d2:	2b00      	cmp	r3, #0
 c0041d4:	d005      	beq.n	c0041e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c0041d6:	687b      	ldr	r3, [r7, #4]
 c0041d8:	2b00      	cmp	r3, #0
 c0041da:	d002      	beq.n	c0041e2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 c0041dc:	887b      	ldrh	r3, [r7, #2]
 c0041de:	2b00      	cmp	r3, #0
 c0041e0:	d102      	bne.n	c0041e8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 c0041e2:	2301      	movs	r3, #1
 c0041e4:	75fb      	strb	r3, [r7, #23]
    goto error;
 c0041e6:	e13f      	b.n	c004468 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 c0041e8:	68fb      	ldr	r3, [r7, #12]
 c0041ea:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c0041ee:	b2db      	uxtb	r3, r3
 c0041f0:	2b04      	cmp	r3, #4
 c0041f2:	d003      	beq.n	c0041fc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 c0041f4:	68fb      	ldr	r3, [r7, #12]
 c0041f6:	2205      	movs	r2, #5
 c0041f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 c0041fc:	68fb      	ldr	r3, [r7, #12]
 c0041fe:	2200      	movs	r2, #0
 c004200:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 c004202:	68fb      	ldr	r3, [r7, #12]
 c004204:	68ba      	ldr	r2, [r7, #8]
 c004206:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 c004208:	68fb      	ldr	r3, [r7, #12]
 c00420a:	887a      	ldrh	r2, [r7, #2]
 c00420c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 c00420e:	68fb      	ldr	r3, [r7, #12]
 c004210:	887a      	ldrh	r2, [r7, #2]
 c004212:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 c004214:	68fb      	ldr	r3, [r7, #12]
 c004216:	687a      	ldr	r2, [r7, #4]
 c004218:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 c00421a:	68fb      	ldr	r3, [r7, #12]
 c00421c:	887a      	ldrh	r2, [r7, #2]
 c00421e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 c004222:	68fb      	ldr	r3, [r7, #12]
 c004224:	887a      	ldrh	r2, [r7, #2]
 c004226:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 c00422a:	68fb      	ldr	r3, [r7, #12]
 c00422c:	2200      	movs	r2, #0
 c00422e:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 c004230:	68fb      	ldr	r3, [r7, #12]
 c004232:	2200      	movs	r2, #0
 c004234:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 c004236:	68fb      	ldr	r3, [r7, #12]
 c004238:	681b      	ldr	r3, [r3, #0]
 c00423a:	685a      	ldr	r2, [r3, #4]
 c00423c:	68fb      	ldr	r3, [r7, #12]
 c00423e:	681b      	ldr	r3, [r3, #0]
 c004240:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 c004244:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 c004246:	68fb      	ldr	r3, [r7, #12]
 c004248:	68db      	ldr	r3, [r3, #12]
 c00424a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 c00424e:	d908      	bls.n	c004262 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004250:	68fb      	ldr	r3, [r7, #12]
 c004252:	681b      	ldr	r3, [r3, #0]
 c004254:	685a      	ldr	r2, [r3, #4]
 c004256:	68fb      	ldr	r3, [r7, #12]
 c004258:	681b      	ldr	r3, [r3, #0]
 c00425a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c00425e:	605a      	str	r2, [r3, #4]
 c004260:	e06f      	b.n	c004342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c004262:	68fb      	ldr	r3, [r7, #12]
 c004264:	681b      	ldr	r3, [r3, #0]
 c004266:	685a      	ldr	r2, [r3, #4]
 c004268:	68fb      	ldr	r3, [r7, #12]
 c00426a:	681b      	ldr	r3, [r3, #0]
 c00426c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 c004270:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c004272:	68fb      	ldr	r3, [r7, #12]
 c004274:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c004276:	699b      	ldr	r3, [r3, #24]
 c004278:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00427c:	d126      	bne.n	c0042cc <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 c00427e:	68fb      	ldr	r3, [r7, #12]
 c004280:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 c004282:	f003 0301 	and.w	r3, r3, #1
 c004286:	2b00      	cmp	r3, #0
 c004288:	d10f      	bne.n	c0042aa <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c00428a:	68fb      	ldr	r3, [r7, #12]
 c00428c:	681b      	ldr	r3, [r3, #0]
 c00428e:	685a      	ldr	r2, [r3, #4]
 c004290:	68fb      	ldr	r3, [r7, #12]
 c004292:	681b      	ldr	r3, [r3, #0]
 c004294:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 c004298:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 c00429a:	68fb      	ldr	r3, [r7, #12]
 c00429c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c00429e:	b29b      	uxth	r3, r3
 c0042a0:	085b      	lsrs	r3, r3, #1
 c0042a2:	b29a      	uxth	r2, r3
 c0042a4:	68fb      	ldr	r3, [r7, #12]
 c0042a6:	87da      	strh	r2, [r3, #62]	; 0x3e
 c0042a8:	e010      	b.n	c0042cc <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 c0042aa:	68fb      	ldr	r3, [r7, #12]
 c0042ac:	681b      	ldr	r3, [r3, #0]
 c0042ae:	685a      	ldr	r2, [r3, #4]
 c0042b0:	68fb      	ldr	r3, [r7, #12]
 c0042b2:	681b      	ldr	r3, [r3, #0]
 c0042b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 c0042b8:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 c0042ba:	68fb      	ldr	r3, [r7, #12]
 c0042bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c0042be:	b29b      	uxth	r3, r3
 c0042c0:	085b      	lsrs	r3, r3, #1
 c0042c2:	b29b      	uxth	r3, r3
 c0042c4:	3301      	adds	r3, #1
 c0042c6:	b29a      	uxth	r2, r3
 c0042c8:	68fb      	ldr	r3, [r7, #12]
 c0042ca:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 c0042cc:	68fb      	ldr	r3, [r7, #12]
 c0042ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c0042d0:	699b      	ldr	r3, [r3, #24]
 c0042d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0042d6:	d134      	bne.n	c004342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 c0042d8:	68fb      	ldr	r3, [r7, #12]
 c0042da:	681b      	ldr	r3, [r3, #0]
 c0042dc:	685a      	ldr	r2, [r3, #4]
 c0042de:	68fb      	ldr	r3, [r7, #12]
 c0042e0:	681b      	ldr	r3, [r3, #0]
 c0042e2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 c0042e6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 c0042e8:	68fb      	ldr	r3, [r7, #12]
 c0042ea:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c0042ee:	b29b      	uxth	r3, r3
 c0042f0:	f003 0301 	and.w	r3, r3, #1
 c0042f4:	2b00      	cmp	r3, #0
 c0042f6:	d111      	bne.n	c00431c <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c0042f8:	68fb      	ldr	r3, [r7, #12]
 c0042fa:	681b      	ldr	r3, [r3, #0]
 c0042fc:	685a      	ldr	r2, [r3, #4]
 c0042fe:	68fb      	ldr	r3, [r7, #12]
 c004300:	681b      	ldr	r3, [r3, #0]
 c004302:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c004306:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 c004308:	68fb      	ldr	r3, [r7, #12]
 c00430a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c00430e:	b29b      	uxth	r3, r3
 c004310:	085b      	lsrs	r3, r3, #1
 c004312:	b29a      	uxth	r2, r3
 c004314:	68fb      	ldr	r3, [r7, #12]
 c004316:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 c00431a:	e012      	b.n	c004342 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 c00431c:	68fb      	ldr	r3, [r7, #12]
 c00431e:	681b      	ldr	r3, [r3, #0]
 c004320:	685a      	ldr	r2, [r3, #4]
 c004322:	68fb      	ldr	r3, [r7, #12]
 c004324:	681b      	ldr	r3, [r3, #0]
 c004326:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c00432a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 c00432c:	68fb      	ldr	r3, [r7, #12]
 c00432e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004332:	b29b      	uxth	r3, r3
 c004334:	085b      	lsrs	r3, r3, #1
 c004336:	b29b      	uxth	r3, r3
 c004338:	3301      	adds	r3, #1
 c00433a:	b29a      	uxth	r2, r3
 c00433c:	68fb      	ldr	r3, [r7, #12]
 c00433e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 c004342:	68fb      	ldr	r3, [r7, #12]
 c004344:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 c004348:	b2db      	uxtb	r3, r3
 c00434a:	2b04      	cmp	r3, #4
 c00434c:	d108      	bne.n	c004360 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 c00434e:	68fb      	ldr	r3, [r7, #12]
 c004350:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004352:	4a4a      	ldr	r2, [pc, #296]	; (c00447c <HAL_SPI_TransmitReceive_DMA+0x304>)
 c004354:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 c004356:	68fb      	ldr	r3, [r7, #12]
 c004358:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00435a:	4a49      	ldr	r2, [pc, #292]	; (c004480 <HAL_SPI_TransmitReceive_DMA+0x308>)
 c00435c:	62da      	str	r2, [r3, #44]	; 0x2c
 c00435e:	e007      	b.n	c004370 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 c004360:	68fb      	ldr	r3, [r7, #12]
 c004362:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004364:	4a47      	ldr	r2, [pc, #284]	; (c004484 <HAL_SPI_TransmitReceive_DMA+0x30c>)
 c004366:	631a      	str	r2, [r3, #48]	; 0x30
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 c004368:	68fb      	ldr	r3, [r7, #12]
 c00436a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00436c:	4a46      	ldr	r2, [pc, #280]	; (c004488 <HAL_SPI_TransmitReceive_DMA+0x310>)
 c00436e:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 c004370:	68fb      	ldr	r3, [r7, #12]
 c004372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c004374:	4a45      	ldr	r2, [pc, #276]	; (c00448c <HAL_SPI_TransmitReceive_DMA+0x314>)
 c004376:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 c004378:	68fb      	ldr	r3, [r7, #12]
 c00437a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 c00437c:	2200      	movs	r2, #0
 c00437e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c004380:	68fb      	ldr	r3, [r7, #12]
 c004382:	6d98      	ldr	r0, [r3, #88]	; 0x58
 c004384:	68fb      	ldr	r3, [r7, #12]
 c004386:	681b      	ldr	r3, [r3, #0]
 c004388:	330c      	adds	r3, #12
 c00438a:	4619      	mov	r1, r3
 c00438c:	68fb      	ldr	r3, [r7, #12]
 c00438e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 c004390:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 c004392:	68fb      	ldr	r3, [r7, #12]
 c004394:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 c004398:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 c00439a:	f7fd facb 	bl	c001934 <HAL_DMA_Start_IT>
 c00439e:	4603      	mov	r3, r0
 c0043a0:	2b00      	cmp	r3, #0
 c0043a2:	d00c      	beq.n	c0043be <HAL_SPI_TransmitReceive_DMA+0x246>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c0043a4:	68fb      	ldr	r3, [r7, #12]
 c0043a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0043a8:	f043 0210 	orr.w	r2, r3, #16
 c0043ac:	68fb      	ldr	r3, [r7, #12]
 c0043ae:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c0043b0:	2301      	movs	r3, #1
 c0043b2:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c0043b4:	68fb      	ldr	r3, [r7, #12]
 c0043b6:	2201      	movs	r2, #1
 c0043b8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c0043bc:	e054      	b.n	c004468 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c0043be:	68fb      	ldr	r3, [r7, #12]
 c0043c0:	681b      	ldr	r3, [r3, #0]
 c0043c2:	685a      	ldr	r2, [r3, #4]
 c0043c4:	68fb      	ldr	r3, [r7, #12]
 c0043c6:	681b      	ldr	r3, [r3, #0]
 c0043c8:	f042 0201 	orr.w	r2, r2, #1
 c0043cc:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 c0043ce:	68fb      	ldr	r3, [r7, #12]
 c0043d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0043d2:	2200      	movs	r2, #0
 c0043d4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->hdmatx->XferCpltCallback     = NULL;
 c0043d6:	68fb      	ldr	r3, [r7, #12]
 c0043d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0043da:	2200      	movs	r2, #0
 c0043dc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi->hdmatx->XferErrorCallback    = NULL;
 c0043de:	68fb      	ldr	r3, [r7, #12]
 c0043e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0043e2:	2200      	movs	r2, #0
 c0043e4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferAbortCallback    = NULL;
 c0043e6:	68fb      	ldr	r3, [r7, #12]
 c0043e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 c0043ea:	2200      	movs	r2, #0
 c0043ec:	641a      	str	r2, [r3, #64]	; 0x40

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c0043ee:	68fb      	ldr	r3, [r7, #12]
 c0043f0:	6d58      	ldr	r0, [r3, #84]	; 0x54
 c0043f2:	68fb      	ldr	r3, [r7, #12]
 c0043f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 c0043f6:	4619      	mov	r1, r3
 c0043f8:	68fb      	ldr	r3, [r7, #12]
 c0043fa:	681b      	ldr	r3, [r3, #0]
 c0043fc:	330c      	adds	r3, #12
 c0043fe:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 c004400:	68fb      	ldr	r3, [r7, #12]
 c004402:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 c004404:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 c004406:	f7fd fa95 	bl	c001934 <HAL_DMA_Start_IT>
 c00440a:	4603      	mov	r3, r0
 c00440c:	2b00      	cmp	r3, #0
 c00440e:	d00c      	beq.n	c00442a <HAL_SPI_TransmitReceive_DMA+0x2b2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c004410:	68fb      	ldr	r3, [r7, #12]
 c004412:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004414:	f043 0210 	orr.w	r2, r3, #16
 c004418:	68fb      	ldr	r3, [r7, #12]
 c00441a:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 c00441c:	2301      	movs	r3, #1
 c00441e:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 c004420:	68fb      	ldr	r3, [r7, #12]
 c004422:	2201      	movs	r2, #1
 c004424:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    goto error;
 c004428:	e01e      	b.n	c004468 <HAL_SPI_TransmitReceive_DMA+0x2f0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 c00442a:	68fb      	ldr	r3, [r7, #12]
 c00442c:	681b      	ldr	r3, [r3, #0]
 c00442e:	681b      	ldr	r3, [r3, #0]
 c004430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c004434:	2b40      	cmp	r3, #64	; 0x40
 c004436:	d007      	beq.n	c004448 <HAL_SPI_TransmitReceive_DMA+0x2d0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 c004438:	68fb      	ldr	r3, [r7, #12]
 c00443a:	681b      	ldr	r3, [r3, #0]
 c00443c:	681a      	ldr	r2, [r3, #0]
 c00443e:	68fb      	ldr	r3, [r7, #12]
 c004440:	681b      	ldr	r3, [r3, #0]
 c004442:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 c004446:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 c004448:	68fb      	ldr	r3, [r7, #12]
 c00444a:	681b      	ldr	r3, [r3, #0]
 c00444c:	685a      	ldr	r2, [r3, #4]
 c00444e:	68fb      	ldr	r3, [r7, #12]
 c004450:	681b      	ldr	r3, [r3, #0]
 c004452:	f042 0220 	orr.w	r2, r2, #32
 c004456:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 c004458:	68fb      	ldr	r3, [r7, #12]
 c00445a:	681b      	ldr	r3, [r3, #0]
 c00445c:	685a      	ldr	r2, [r3, #4]
 c00445e:	68fb      	ldr	r3, [r7, #12]
 c004460:	681b      	ldr	r3, [r3, #0]
 c004462:	f042 0202 	orr.w	r2, r2, #2
 c004466:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 c004468:	68fb      	ldr	r3, [r7, #12]
 c00446a:	2200      	movs	r2, #0
 c00446c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 c004470:	7dfb      	ldrb	r3, [r7, #23]
}
 c004472:	4618      	mov	r0, r3
 c004474:	3718      	adds	r7, #24
 c004476:	46bd      	mov	sp, r7
 c004478:	bd80      	pop	{r7, pc}
 c00447a:	bf00      	nop
 c00447c:	0c004619 	.word	0x0c004619
 c004480:	0c0044e1 	.word	0x0c0044e1
 c004484:	0c004635 	.word	0x0c004635
 c004488:	0c004589 	.word	0x0c004589
 c00448c:	0c004651 	.word	0x0c004651

0c004490 <HAL_SPI_RxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi)
{
 c004490:	b480      	push	{r7}
 c004492:	b083      	sub	sp, #12
 c004494:	af00      	add	r7, sp, #0
 c004496:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 c004498:	bf00      	nop
 c00449a:	370c      	adds	r7, #12
 c00449c:	46bd      	mov	sp, r7
 c00449e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0044a2:	4770      	bx	lr

0c0044a4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c0044a4:	b480      	push	{r7}
 c0044a6:	b083      	sub	sp, #12
 c0044a8:	af00      	add	r7, sp, #0
 c0044aa:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 c0044ac:	bf00      	nop
 c0044ae:	370c      	adds	r7, #12
 c0044b0:	46bd      	mov	sp, r7
 c0044b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0044b6:	4770      	bx	lr

0c0044b8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 c0044b8:	b480      	push	{r7}
 c0044ba:	b083      	sub	sp, #12
 c0044bc:	af00      	add	r7, sp, #0
 c0044be:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 c0044c0:	bf00      	nop
 c0044c2:	370c      	adds	r7, #12
 c0044c4:	46bd      	mov	sp, r7
 c0044c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0044ca:	4770      	bx	lr

0c0044cc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 c0044cc:	b480      	push	{r7}
 c0044ce:	b083      	sub	sp, #12
 c0044d0:	af00      	add	r7, sp, #0
 c0044d2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 c0044d4:	bf00      	nop
 c0044d6:	370c      	adds	r7, #12
 c0044d8:	46bd      	mov	sp, r7
 c0044da:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0044de:	4770      	bx	lr

0c0044e0 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c0044e0:	b580      	push	{r7, lr}
 c0044e2:	b084      	sub	sp, #16
 c0044e4:	af00      	add	r7, sp, #0
 c0044e6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c0044e8:	687b      	ldr	r3, [r7, #4]
 c0044ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0044ec:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c0044ee:	f7fd f839 	bl	c001564 <HAL_GetTick>
 c0044f2:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c0044f4:	687b      	ldr	r3, [r7, #4]
 c0044f6:	681b      	ldr	r3, [r3, #0]
 c0044f8:	681b      	ldr	r3, [r3, #0]
 c0044fa:	f003 0320 	and.w	r3, r3, #32
 c0044fe:	2b20      	cmp	r3, #32
 c004500:	d03c      	beq.n	c00457c <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c004502:	68fb      	ldr	r3, [r7, #12]
 c004504:	681b      	ldr	r3, [r3, #0]
 c004506:	685a      	ldr	r2, [r3, #4]
 c004508:	68fb      	ldr	r3, [r7, #12]
 c00450a:	681b      	ldr	r3, [r3, #0]
 c00450c:	f022 0220 	bic.w	r2, r2, #32
 c004510:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 c004512:	68fb      	ldr	r3, [r7, #12]
 c004514:	689b      	ldr	r3, [r3, #8]
 c004516:	2b00      	cmp	r3, #0
 c004518:	d10d      	bne.n	c004536 <SPI_DMAReceiveCplt+0x56>
 c00451a:	68fb      	ldr	r3, [r7, #12]
 c00451c:	685b      	ldr	r3, [r3, #4]
 c00451e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004522:	d108      	bne.n	c004536 <SPI_DMAReceiveCplt+0x56>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c004524:	68fb      	ldr	r3, [r7, #12]
 c004526:	681b      	ldr	r3, [r3, #0]
 c004528:	685a      	ldr	r2, [r3, #4]
 c00452a:	68fb      	ldr	r3, [r7, #12]
 c00452c:	681b      	ldr	r3, [r3, #0]
 c00452e:	f022 0203 	bic.w	r2, r2, #3
 c004532:	605a      	str	r2, [r3, #4]
 c004534:	e007      	b.n	c004546 <SPI_DMAReceiveCplt+0x66>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 c004536:	68fb      	ldr	r3, [r7, #12]
 c004538:	681b      	ldr	r3, [r3, #0]
 c00453a:	685a      	ldr	r2, [r3, #4]
 c00453c:	68fb      	ldr	r3, [r7, #12]
 c00453e:	681b      	ldr	r3, [r3, #0]
 c004540:	f022 0201 	bic.w	r2, r2, #1
 c004544:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c004546:	68ba      	ldr	r2, [r7, #8]
 c004548:	2164      	movs	r1, #100	; 0x64
 c00454a:	68f8      	ldr	r0, [r7, #12]
 c00454c:	f000 f9be 	bl	c0048cc <SPI_EndRxTransaction>
 c004550:	4603      	mov	r3, r0
 c004552:	2b00      	cmp	r3, #0
 c004554:	d002      	beq.n	c00455c <SPI_DMAReceiveCplt+0x7c>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 c004556:	68fb      	ldr	r3, [r7, #12]
 c004558:	2220      	movs	r2, #32
 c00455a:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 c00455c:	68fb      	ldr	r3, [r7, #12]
 c00455e:	2200      	movs	r2, #0
 c004560:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c004564:	68fb      	ldr	r3, [r7, #12]
 c004566:	2201      	movs	r2, #1
 c004568:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c00456c:	68fb      	ldr	r3, [r7, #12]
 c00456e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004570:	2b00      	cmp	r3, #0
 c004572:	d003      	beq.n	c00457c <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c004574:	68f8      	ldr	r0, [r7, #12]
 c004576:	f7ff ffa9 	bl	c0044cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c00457a:	e002      	b.n	c004582 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 c00457c:	68f8      	ldr	r0, [r7, #12]
 c00457e:	f7ff ff87 	bl	c004490 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004582:	3710      	adds	r7, #16
 c004584:	46bd      	mov	sp, r7
 c004586:	bd80      	pop	{r7, pc}

0c004588 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004588:	b580      	push	{r7, lr}
 c00458a:	b084      	sub	sp, #16
 c00458c:	af00      	add	r7, sp, #0
 c00458e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004590:	687b      	ldr	r3, [r7, #4]
 c004592:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004594:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 c004596:	f7fc ffe5 	bl	c001564 <HAL_GetTick>
 c00459a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) != DMA_CCR_CIRC)
 c00459c:	687b      	ldr	r3, [r7, #4]
 c00459e:	681b      	ldr	r3, [r3, #0]
 c0045a0:	681b      	ldr	r3, [r3, #0]
 c0045a2:	f003 0320 	and.w	r3, r3, #32
 c0045a6:	2b20      	cmp	r3, #32
 c0045a8:	d030      	beq.n	c00460c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 c0045aa:	68fb      	ldr	r3, [r7, #12]
 c0045ac:	681b      	ldr	r3, [r3, #0]
 c0045ae:	685a      	ldr	r2, [r3, #4]
 c0045b0:	68fb      	ldr	r3, [r7, #12]
 c0045b2:	681b      	ldr	r3, [r3, #0]
 c0045b4:	f022 0220 	bic.w	r2, r2, #32
 c0045b8:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 c0045ba:	68ba      	ldr	r2, [r7, #8]
 c0045bc:	2164      	movs	r1, #100	; 0x64
 c0045be:	68f8      	ldr	r0, [r7, #12]
 c0045c0:	f000 f9dc 	bl	c00497c <SPI_EndRxTxTransaction>
 c0045c4:	4603      	mov	r3, r0
 c0045c6:	2b00      	cmp	r3, #0
 c0045c8:	d005      	beq.n	c0045d6 <SPI_DMATransmitReceiveCplt+0x4e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0045ca:	68fb      	ldr	r3, [r7, #12]
 c0045cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0045ce:	f043 0220 	orr.w	r2, r3, #32
 c0045d2:	68fb      	ldr	r3, [r7, #12]
 c0045d4:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c0045d6:	68fb      	ldr	r3, [r7, #12]
 c0045d8:	681b      	ldr	r3, [r3, #0]
 c0045da:	685a      	ldr	r2, [r3, #4]
 c0045dc:	68fb      	ldr	r3, [r7, #12]
 c0045de:	681b      	ldr	r3, [r3, #0]
 c0045e0:	f022 0203 	bic.w	r2, r2, #3
 c0045e4:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 c0045e6:	68fb      	ldr	r3, [r7, #12]
 c0045e8:	2200      	movs	r2, #0
 c0045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 c0045ec:	68fb      	ldr	r3, [r7, #12]
 c0045ee:	2200      	movs	r2, #0
 c0045f0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 c0045f4:	68fb      	ldr	r3, [r7, #12]
 c0045f6:	2201      	movs	r2, #1
 c0045f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 c0045fc:	68fb      	ldr	r3, [r7, #12]
 c0045fe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004600:	2b00      	cmp	r3, #0
 c004602:	d003      	beq.n	c00460c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 c004604:	68f8      	ldr	r0, [r7, #12]
 c004606:	f7ff ff61 	bl	c0044cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 c00460a:	e002      	b.n	c004612 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 c00460c:	68f8      	ldr	r0, [r7, #12]
 c00460e:	f7fc fa6f 	bl	c000af0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004612:	3710      	adds	r7, #16
 c004614:	46bd      	mov	sp, r7
 c004616:	bd80      	pop	{r7, pc}

0c004618 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004618:	b580      	push	{r7, lr}
 c00461a:	b084      	sub	sp, #16
 c00461c:	af00      	add	r7, sp, #0
 c00461e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004620:	687b      	ldr	r3, [r7, #4]
 c004622:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004624:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 c004626:	68f8      	ldr	r0, [r7, #12]
 c004628:	f7ff ff3c 	bl	c0044a4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c00462c:	bf00      	nop
 c00462e:	3710      	adds	r7, #16
 c004630:	46bd      	mov	sp, r7
 c004632:	bd80      	pop	{r7, pc}

0c004634 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 c004634:	b580      	push	{r7, lr}
 c004636:	b084      	sub	sp, #16
 c004638:	af00      	add	r7, sp, #0
 c00463a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c00463c:	687b      	ldr	r3, [r7, #4]
 c00463e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004640:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 c004642:	68f8      	ldr	r0, [r7, #12]
 c004644:	f7ff ff38 	bl	c0044b8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004648:	bf00      	nop
 c00464a:	3710      	adds	r7, #16
 c00464c:	46bd      	mov	sp, r7
 c00464e:	bd80      	pop	{r7, pc}

0c004650 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 c004650:	b580      	push	{r7, lr}
 c004652:	b084      	sub	sp, #16
 c004654:	af00      	add	r7, sp, #0
 c004656:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 c004658:	687b      	ldr	r3, [r7, #4]
 c00465a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c00465c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 c00465e:	68fb      	ldr	r3, [r7, #12]
 c004660:	681b      	ldr	r3, [r3, #0]
 c004662:	685a      	ldr	r2, [r3, #4]
 c004664:	68fb      	ldr	r3, [r7, #12]
 c004666:	681b      	ldr	r3, [r3, #0]
 c004668:	f022 0203 	bic.w	r2, r2, #3
 c00466c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 c00466e:	68fb      	ldr	r3, [r7, #12]
 c004670:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004672:	f043 0210 	orr.w	r2, r3, #16
 c004676:	68fb      	ldr	r3, [r7, #12]
 c004678:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 c00467a:	68fb      	ldr	r3, [r7, #12]
 c00467c:	2201      	movs	r2, #1
 c00467e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 c004682:	68f8      	ldr	r0, [r7, #12]
 c004684:	f7ff ff22 	bl	c0044cc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 c004688:	bf00      	nop
 c00468a:	3710      	adds	r7, #16
 c00468c:	46bd      	mov	sp, r7
 c00468e:	bd80      	pop	{r7, pc}

0c004690 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c004690:	b580      	push	{r7, lr}
 c004692:	b088      	sub	sp, #32
 c004694:	af00      	add	r7, sp, #0
 c004696:	60f8      	str	r0, [r7, #12]
 c004698:	60b9      	str	r1, [r7, #8]
 c00469a:	603b      	str	r3, [r7, #0]
 c00469c:	4613      	mov	r3, r2
 c00469e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 c0046a0:	f7fc ff60 	bl	c001564 <HAL_GetTick>
 c0046a4:	4602      	mov	r2, r0
 c0046a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0046a8:	1a9b      	subs	r3, r3, r2
 c0046aa:	683a      	ldr	r2, [r7, #0]
 c0046ac:	4413      	add	r3, r2
 c0046ae:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 c0046b0:	f7fc ff58 	bl	c001564 <HAL_GetTick>
 c0046b4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 c0046b6:	4b39      	ldr	r3, [pc, #228]	; (c00479c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 c0046b8:	681b      	ldr	r3, [r3, #0]
 c0046ba:	015b      	lsls	r3, r3, #5
 c0046bc:	0d1b      	lsrs	r3, r3, #20
 c0046be:	69fa      	ldr	r2, [r7, #28]
 c0046c0:	fb02 f303 	mul.w	r3, r2, r3
 c0046c4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c0046c6:	e054      	b.n	c004772 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 c0046c8:	683b      	ldr	r3, [r7, #0]
 c0046ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 c0046ce:	d050      	beq.n	c004772 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c0046d0:	f7fc ff48 	bl	c001564 <HAL_GetTick>
 c0046d4:	4602      	mov	r2, r0
 c0046d6:	69bb      	ldr	r3, [r7, #24]
 c0046d8:	1ad3      	subs	r3, r2, r3
 c0046da:	69fa      	ldr	r2, [r7, #28]
 c0046dc:	429a      	cmp	r2, r3
 c0046de:	d902      	bls.n	c0046e6 <SPI_WaitFlagStateUntilTimeout+0x56>
 c0046e0:	69fb      	ldr	r3, [r7, #28]
 c0046e2:	2b00      	cmp	r3, #0
 c0046e4:	d13d      	bne.n	c004762 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c0046e6:	68fb      	ldr	r3, [r7, #12]
 c0046e8:	681b      	ldr	r3, [r3, #0]
 c0046ea:	685a      	ldr	r2, [r3, #4]
 c0046ec:	68fb      	ldr	r3, [r7, #12]
 c0046ee:	681b      	ldr	r3, [r3, #0]
 c0046f0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c0046f4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0046f6:	68fb      	ldr	r3, [r7, #12]
 c0046f8:	685b      	ldr	r3, [r3, #4]
 c0046fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0046fe:	d111      	bne.n	c004724 <SPI_WaitFlagStateUntilTimeout+0x94>
 c004700:	68fb      	ldr	r3, [r7, #12]
 c004702:	689b      	ldr	r3, [r3, #8]
 c004704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004708:	d004      	beq.n	c004714 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c00470a:	68fb      	ldr	r3, [r7, #12]
 c00470c:	689b      	ldr	r3, [r3, #8]
 c00470e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004712:	d107      	bne.n	c004724 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c004714:	68fb      	ldr	r3, [r7, #12]
 c004716:	681b      	ldr	r3, [r3, #0]
 c004718:	681a      	ldr	r2, [r3, #0]
 c00471a:	68fb      	ldr	r3, [r7, #12]
 c00471c:	681b      	ldr	r3, [r3, #0]
 c00471e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004722:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c004724:	68fb      	ldr	r3, [r7, #12]
 c004726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004728:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c00472c:	d10f      	bne.n	c00474e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 c00472e:	68fb      	ldr	r3, [r7, #12]
 c004730:	681b      	ldr	r3, [r3, #0]
 c004732:	681a      	ldr	r2, [r3, #0]
 c004734:	68fb      	ldr	r3, [r7, #12]
 c004736:	681b      	ldr	r3, [r3, #0]
 c004738:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c00473c:	601a      	str	r2, [r3, #0]
 c00473e:	68fb      	ldr	r3, [r7, #12]
 c004740:	681b      	ldr	r3, [r3, #0]
 c004742:	681a      	ldr	r2, [r3, #0]
 c004744:	68fb      	ldr	r3, [r7, #12]
 c004746:	681b      	ldr	r3, [r3, #0]
 c004748:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c00474c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c00474e:	68fb      	ldr	r3, [r7, #12]
 c004750:	2201      	movs	r2, #1
 c004752:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c004756:	68fb      	ldr	r3, [r7, #12]
 c004758:	2200      	movs	r2, #0
 c00475a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c00475e:	2303      	movs	r3, #3
 c004760:	e017      	b.n	c004792 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c004762:	697b      	ldr	r3, [r7, #20]
 c004764:	2b00      	cmp	r3, #0
 c004766:	d101      	bne.n	c00476c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 c004768:	2300      	movs	r3, #0
 c00476a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 c00476c:	697b      	ldr	r3, [r7, #20]
 c00476e:	3b01      	subs	r3, #1
 c004770:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 c004772:	68fb      	ldr	r3, [r7, #12]
 c004774:	681b      	ldr	r3, [r3, #0]
 c004776:	689a      	ldr	r2, [r3, #8]
 c004778:	68bb      	ldr	r3, [r7, #8]
 c00477a:	4013      	ands	r3, r2
 c00477c:	68ba      	ldr	r2, [r7, #8]
 c00477e:	429a      	cmp	r2, r3
 c004780:	bf0c      	ite	eq
 c004782:	2301      	moveq	r3, #1
 c004784:	2300      	movne	r3, #0
 c004786:	b2db      	uxtb	r3, r3
 c004788:	461a      	mov	r2, r3
 c00478a:	79fb      	ldrb	r3, [r7, #7]
 c00478c:	429a      	cmp	r2, r3
 c00478e:	d19b      	bne.n	c0046c8 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 c004790:	2300      	movs	r3, #0
}
 c004792:	4618      	mov	r0, r3
 c004794:	3720      	adds	r7, #32
 c004796:	46bd      	mov	sp, r7
 c004798:	bd80      	pop	{r7, pc}
 c00479a:	bf00      	nop
 c00479c:	30000000 	.word	0x30000000

0c0047a0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 c0047a0:	b580      	push	{r7, lr}
 c0047a2:	b08a      	sub	sp, #40	; 0x28
 c0047a4:	af00      	add	r7, sp, #0
 c0047a6:	60f8      	str	r0, [r7, #12]
 c0047a8:	60b9      	str	r1, [r7, #8]
 c0047aa:	607a      	str	r2, [r7, #4]
 c0047ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 c0047ae:	2300      	movs	r3, #0
 c0047b0:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 c0047b2:	f7fc fed7 	bl	c001564 <HAL_GetTick>
 c0047b6:	4602      	mov	r2, r0
 c0047b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c0047ba:	1a9b      	subs	r3, r3, r2
 c0047bc:	683a      	ldr	r2, [r7, #0]
 c0047be:	4413      	add	r3, r2
 c0047c0:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 c0047c2:	f7fc fecf 	bl	c001564 <HAL_GetTick>
 c0047c6:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 c0047c8:	68fb      	ldr	r3, [r7, #12]
 c0047ca:	681b      	ldr	r3, [r3, #0]
 c0047cc:	330c      	adds	r3, #12
 c0047ce:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 c0047d0:	4b3d      	ldr	r3, [pc, #244]	; (c0048c8 <SPI_WaitFifoStateUntilTimeout+0x128>)
 c0047d2:	681a      	ldr	r2, [r3, #0]
 c0047d4:	4613      	mov	r3, r2
 c0047d6:	009b      	lsls	r3, r3, #2
 c0047d8:	4413      	add	r3, r2
 c0047da:	00da      	lsls	r2, r3, #3
 c0047dc:	1ad3      	subs	r3, r2, r3
 c0047de:	0d1b      	lsrs	r3, r3, #20
 c0047e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c0047e2:	fb02 f303 	mul.w	r3, r2, r3
 c0047e6:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 c0047e8:	e060      	b.n	c0048ac <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 c0047ea:	68bb      	ldr	r3, [r7, #8]
 c0047ec:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 c0047f0:	d107      	bne.n	c004802 <SPI_WaitFifoStateUntilTimeout+0x62>
 c0047f2:	687b      	ldr	r3, [r7, #4]
 c0047f4:	2b00      	cmp	r3, #0
 c0047f6:	d104      	bne.n	c004802 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 c0047f8:	69fb      	ldr	r3, [r7, #28]
 c0047fa:	781b      	ldrb	r3, [r3, #0]
 c0047fc:	b2db      	uxtb	r3, r3
 c0047fe:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 c004800:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 c004802:	683b      	ldr	r3, [r7, #0]
 c004804:	f1b3 3fff 	cmp.w	r3, #4294967295
 c004808:	d050      	beq.n	c0048ac <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 c00480a:	f7fc feab 	bl	c001564 <HAL_GetTick>
 c00480e:	4602      	mov	r2, r0
 c004810:	6a3b      	ldr	r3, [r7, #32]
 c004812:	1ad3      	subs	r3, r2, r3
 c004814:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 c004816:	429a      	cmp	r2, r3
 c004818:	d902      	bls.n	c004820 <SPI_WaitFifoStateUntilTimeout+0x80>
 c00481a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c00481c:	2b00      	cmp	r3, #0
 c00481e:	d13d      	bne.n	c00489c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 c004820:	68fb      	ldr	r3, [r7, #12]
 c004822:	681b      	ldr	r3, [r3, #0]
 c004824:	685a      	ldr	r2, [r3, #4]
 c004826:	68fb      	ldr	r3, [r7, #12]
 c004828:	681b      	ldr	r3, [r3, #0]
 c00482a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 c00482e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c004830:	68fb      	ldr	r3, [r7, #12]
 c004832:	685b      	ldr	r3, [r3, #4]
 c004834:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004838:	d111      	bne.n	c00485e <SPI_WaitFifoStateUntilTimeout+0xbe>
 c00483a:	68fb      	ldr	r3, [r7, #12]
 c00483c:	689b      	ldr	r3, [r3, #8]
 c00483e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c004842:	d004      	beq.n	c00484e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c004844:	68fb      	ldr	r3, [r7, #12]
 c004846:	689b      	ldr	r3, [r3, #8]
 c004848:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c00484c:	d107      	bne.n	c00485e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 c00484e:	68fb      	ldr	r3, [r7, #12]
 c004850:	681b      	ldr	r3, [r3, #0]
 c004852:	681a      	ldr	r2, [r3, #0]
 c004854:	68fb      	ldr	r3, [r7, #12]
 c004856:	681b      	ldr	r3, [r3, #0]
 c004858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c00485c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 c00485e:	68fb      	ldr	r3, [r7, #12]
 c004860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004862:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 c004866:	d10f      	bne.n	c004888 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 c004868:	68fb      	ldr	r3, [r7, #12]
 c00486a:	681b      	ldr	r3, [r3, #0]
 c00486c:	681a      	ldr	r2, [r3, #0]
 c00486e:	68fb      	ldr	r3, [r7, #12]
 c004870:	681b      	ldr	r3, [r3, #0]
 c004872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 c004876:	601a      	str	r2, [r3, #0]
 c004878:	68fb      	ldr	r3, [r7, #12]
 c00487a:	681b      	ldr	r3, [r3, #0]
 c00487c:	681a      	ldr	r2, [r3, #0]
 c00487e:	68fb      	ldr	r3, [r7, #12]
 c004880:	681b      	ldr	r3, [r3, #0]
 c004882:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 c004886:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 c004888:	68fb      	ldr	r3, [r7, #12]
 c00488a:	2201      	movs	r2, #1
 c00488c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 c004890:	68fb      	ldr	r3, [r7, #12]
 c004892:	2200      	movs	r2, #0
 c004894:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 c004898:	2303      	movs	r3, #3
 c00489a:	e010      	b.n	c0048be <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 c00489c:	69bb      	ldr	r3, [r7, #24]
 c00489e:	2b00      	cmp	r3, #0
 c0048a0:	d101      	bne.n	c0048a6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 c0048a2:	2300      	movs	r3, #0
 c0048a4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 c0048a6:	69bb      	ldr	r3, [r7, #24]
 c0048a8:	3b01      	subs	r3, #1
 c0048aa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 c0048ac:	68fb      	ldr	r3, [r7, #12]
 c0048ae:	681b      	ldr	r3, [r3, #0]
 c0048b0:	689a      	ldr	r2, [r3, #8]
 c0048b2:	68bb      	ldr	r3, [r7, #8]
 c0048b4:	4013      	ands	r3, r2
 c0048b6:	687a      	ldr	r2, [r7, #4]
 c0048b8:	429a      	cmp	r2, r3
 c0048ba:	d196      	bne.n	c0047ea <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 c0048bc:	2300      	movs	r3, #0
}
 c0048be:	4618      	mov	r0, r3
 c0048c0:	3728      	adds	r7, #40	; 0x28
 c0048c2:	46bd      	mov	sp, r7
 c0048c4:	bd80      	pop	{r7, pc}
 c0048c6:	bf00      	nop
 c0048c8:	30000000 	.word	0x30000000

0c0048cc <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 c0048cc:	b580      	push	{r7, lr}
 c0048ce:	b086      	sub	sp, #24
 c0048d0:	af02      	add	r7, sp, #8
 c0048d2:	60f8      	str	r0, [r7, #12]
 c0048d4:	60b9      	str	r1, [r7, #8]
 c0048d6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c0048d8:	68fb      	ldr	r3, [r7, #12]
 c0048da:	685b      	ldr	r3, [r3, #4]
 c0048dc:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c0048e0:	d111      	bne.n	c004906 <SPI_EndRxTransaction+0x3a>
 c0048e2:	68fb      	ldr	r3, [r7, #12]
 c0048e4:	689b      	ldr	r3, [r3, #8]
 c0048e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c0048ea:	d004      	beq.n	c0048f6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c0048ec:	68fb      	ldr	r3, [r7, #12]
 c0048ee:	689b      	ldr	r3, [r3, #8]
 c0048f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c0048f4:	d107      	bne.n	c004906 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 c0048f6:	68fb      	ldr	r3, [r7, #12]
 c0048f8:	681b      	ldr	r3, [r3, #0]
 c0048fa:	681a      	ldr	r2, [r3, #0]
 c0048fc:	68fb      	ldr	r3, [r7, #12]
 c0048fe:	681b      	ldr	r3, [r3, #0]
 c004900:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 c004904:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c004906:	687b      	ldr	r3, [r7, #4]
 c004908:	9300      	str	r3, [sp, #0]
 c00490a:	68bb      	ldr	r3, [r7, #8]
 c00490c:	2200      	movs	r2, #0
 c00490e:	2180      	movs	r1, #128	; 0x80
 c004910:	68f8      	ldr	r0, [r7, #12]
 c004912:	f7ff febd 	bl	c004690 <SPI_WaitFlagStateUntilTimeout>
 c004916:	4603      	mov	r3, r0
 c004918:	2b00      	cmp	r3, #0
 c00491a:	d007      	beq.n	c00492c <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c00491c:	68fb      	ldr	r3, [r7, #12]
 c00491e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004920:	f043 0220 	orr.w	r2, r3, #32
 c004924:	68fb      	ldr	r3, [r7, #12]
 c004926:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c004928:	2303      	movs	r3, #3
 c00492a:	e023      	b.n	c004974 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 c00492c:	68fb      	ldr	r3, [r7, #12]
 c00492e:	685b      	ldr	r3, [r3, #4]
 c004930:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 c004934:	d11d      	bne.n	c004972 <SPI_EndRxTransaction+0xa6>
 c004936:	68fb      	ldr	r3, [r7, #12]
 c004938:	689b      	ldr	r3, [r3, #8]
 c00493a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c00493e:	d004      	beq.n	c00494a <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 c004940:	68fb      	ldr	r3, [r7, #12]
 c004942:	689b      	ldr	r3, [r3, #8]
 c004944:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004948:	d113      	bne.n	c004972 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c00494a:	687b      	ldr	r3, [r7, #4]
 c00494c:	9300      	str	r3, [sp, #0]
 c00494e:	68bb      	ldr	r3, [r7, #8]
 c004950:	2200      	movs	r2, #0
 c004952:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c004956:	68f8      	ldr	r0, [r7, #12]
 c004958:	f7ff ff22 	bl	c0047a0 <SPI_WaitFifoStateUntilTimeout>
 c00495c:	4603      	mov	r3, r0
 c00495e:	2b00      	cmp	r3, #0
 c004960:	d007      	beq.n	c004972 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c004962:	68fb      	ldr	r3, [r7, #12]
 c004964:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c004966:	f043 0220 	orr.w	r2, r3, #32
 c00496a:	68fb      	ldr	r3, [r7, #12]
 c00496c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 c00496e:	2303      	movs	r3, #3
 c004970:	e000      	b.n	c004974 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 c004972:	2300      	movs	r3, #0
}
 c004974:	4618      	mov	r0, r3
 c004976:	3710      	adds	r7, #16
 c004978:	46bd      	mov	sp, r7
 c00497a:	bd80      	pop	{r7, pc}

0c00497c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 c00497c:	b580      	push	{r7, lr}
 c00497e:	b086      	sub	sp, #24
 c004980:	af02      	add	r7, sp, #8
 c004982:	60f8      	str	r0, [r7, #12]
 c004984:	60b9      	str	r1, [r7, #8]
 c004986:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c004988:	687b      	ldr	r3, [r7, #4]
 c00498a:	9300      	str	r3, [sp, #0]
 c00498c:	68bb      	ldr	r3, [r7, #8]
 c00498e:	2200      	movs	r2, #0
 c004990:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 c004994:	68f8      	ldr	r0, [r7, #12]
 c004996:	f7ff ff03 	bl	c0047a0 <SPI_WaitFifoStateUntilTimeout>
 c00499a:	4603      	mov	r3, r0
 c00499c:	2b00      	cmp	r3, #0
 c00499e:	d007      	beq.n	c0049b0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0049a0:	68fb      	ldr	r3, [r7, #12]
 c0049a2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0049a4:	f043 0220 	orr.w	r2, r3, #32
 c0049a8:	68fb      	ldr	r3, [r7, #12]
 c0049aa:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0049ac:	2303      	movs	r3, #3
 c0049ae:	e027      	b.n	c004a00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 c0049b0:	687b      	ldr	r3, [r7, #4]
 c0049b2:	9300      	str	r3, [sp, #0]
 c0049b4:	68bb      	ldr	r3, [r7, #8]
 c0049b6:	2200      	movs	r2, #0
 c0049b8:	2180      	movs	r1, #128	; 0x80
 c0049ba:	68f8      	ldr	r0, [r7, #12]
 c0049bc:	f7ff fe68 	bl	c004690 <SPI_WaitFlagStateUntilTimeout>
 c0049c0:	4603      	mov	r3, r0
 c0049c2:	2b00      	cmp	r3, #0
 c0049c4:	d007      	beq.n	c0049d6 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0049c6:	68fb      	ldr	r3, [r7, #12]
 c0049c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0049ca:	f043 0220 	orr.w	r2, r3, #32
 c0049ce:	68fb      	ldr	r3, [r7, #12]
 c0049d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0049d2:	2303      	movs	r3, #3
 c0049d4:	e014      	b.n	c004a00 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 c0049d6:	687b      	ldr	r3, [r7, #4]
 c0049d8:	9300      	str	r3, [sp, #0]
 c0049da:	68bb      	ldr	r3, [r7, #8]
 c0049dc:	2200      	movs	r2, #0
 c0049de:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 c0049e2:	68f8      	ldr	r0, [r7, #12]
 c0049e4:	f7ff fedc 	bl	c0047a0 <SPI_WaitFifoStateUntilTimeout>
 c0049e8:	4603      	mov	r3, r0
 c0049ea:	2b00      	cmp	r3, #0
 c0049ec:	d007      	beq.n	c0049fe <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 c0049ee:	68fb      	ldr	r3, [r7, #12]
 c0049f0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 c0049f2:	f043 0220 	orr.w	r2, r3, #32
 c0049f6:	68fb      	ldr	r3, [r7, #12]
 c0049f8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 c0049fa:	2303      	movs	r3, #3
 c0049fc:	e000      	b.n	c004a00 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 c0049fe:	2300      	movs	r3, #0
}
 c004a00:	4618      	mov	r0, r3
 c004a02:	3710      	adds	r7, #16
 c004a04:	46bd      	mov	sp, r7
 c004a06:	bd80      	pop	{r7, pc}

0c004a08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 c004a08:	b580      	push	{r7, lr}
 c004a0a:	b082      	sub	sp, #8
 c004a0c:	af00      	add	r7, sp, #0
 c004a0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 c004a10:	687b      	ldr	r3, [r7, #4]
 c004a12:	2b00      	cmp	r3, #0
 c004a14:	d101      	bne.n	c004a1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 c004a16:	2301      	movs	r3, #1
 c004a18:	e042      	b.n	c004aa0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 c004a1a:	687b      	ldr	r3, [r7, #4]
 c004a1c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004a20:	2b00      	cmp	r3, #0
 c004a22:	d106      	bne.n	c004a32 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 c004a24:	687b      	ldr	r3, [r7, #4]
 c004a26:	2200      	movs	r2, #0
 c004a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 c004a2c:	6878      	ldr	r0, [r7, #4]
 c004a2e:	f7fc fa3b 	bl	c000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 c004a32:	687b      	ldr	r3, [r7, #4]
 c004a34:	2224      	movs	r2, #36	; 0x24
 c004a36:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 c004a3a:	687b      	ldr	r3, [r7, #4]
 c004a3c:	681b      	ldr	r3, [r3, #0]
 c004a3e:	681a      	ldr	r2, [r3, #0]
 c004a40:	687b      	ldr	r3, [r7, #4]
 c004a42:	681b      	ldr	r3, [r3, #0]
 c004a44:	f022 0201 	bic.w	r2, r2, #1
 c004a48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 c004a4a:	6878      	ldr	r0, [r7, #4]
 c004a4c:	f000 f8ba 	bl	c004bc4 <UART_SetConfig>
 c004a50:	4603      	mov	r3, r0
 c004a52:	2b01      	cmp	r3, #1
 c004a54:	d101      	bne.n	c004a5a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 c004a56:	2301      	movs	r3, #1
 c004a58:	e022      	b.n	c004aa0 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 c004a5a:	687b      	ldr	r3, [r7, #4]
 c004a5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c004a5e:	2b00      	cmp	r3, #0
 c004a60:	d002      	beq.n	c004a68 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 c004a62:	6878      	ldr	r0, [r7, #4]
 c004a64:	f000 fbac 	bl	c0051c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 c004a68:	687b      	ldr	r3, [r7, #4]
 c004a6a:	681b      	ldr	r3, [r3, #0]
 c004a6c:	685a      	ldr	r2, [r3, #4]
 c004a6e:	687b      	ldr	r3, [r7, #4]
 c004a70:	681b      	ldr	r3, [r3, #0]
 c004a72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 c004a76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 c004a78:	687b      	ldr	r3, [r7, #4]
 c004a7a:	681b      	ldr	r3, [r3, #0]
 c004a7c:	689a      	ldr	r2, [r3, #8]
 c004a7e:	687b      	ldr	r3, [r7, #4]
 c004a80:	681b      	ldr	r3, [r3, #0]
 c004a82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 c004a86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 c004a88:	687b      	ldr	r3, [r7, #4]
 c004a8a:	681b      	ldr	r3, [r3, #0]
 c004a8c:	681a      	ldr	r2, [r3, #0]
 c004a8e:	687b      	ldr	r3, [r7, #4]
 c004a90:	681b      	ldr	r3, [r3, #0]
 c004a92:	f042 0201 	orr.w	r2, r2, #1
 c004a96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 c004a98:	6878      	ldr	r0, [r7, #4]
 c004a9a:	f000 fc33 	bl	c005304 <UART_CheckIdleState>
 c004a9e:	4603      	mov	r3, r0
}
 c004aa0:	4618      	mov	r0, r3
 c004aa2:	3708      	adds	r7, #8
 c004aa4:	46bd      	mov	sp, r7
 c004aa6:	bd80      	pop	{r7, pc}

0c004aa8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 c004aa8:	b580      	push	{r7, lr}
 c004aaa:	b08a      	sub	sp, #40	; 0x28
 c004aac:	af02      	add	r7, sp, #8
 c004aae:	60f8      	str	r0, [r7, #12]
 c004ab0:	60b9      	str	r1, [r7, #8]
 c004ab2:	603b      	str	r3, [r7, #0]
 c004ab4:	4613      	mov	r3, r2
 c004ab6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 c004ab8:	68fb      	ldr	r3, [r7, #12]
 c004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004abe:	2b20      	cmp	r3, #32
 c004ac0:	d17b      	bne.n	c004bba <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 c004ac2:	68bb      	ldr	r3, [r7, #8]
 c004ac4:	2b00      	cmp	r3, #0
 c004ac6:	d002      	beq.n	c004ace <HAL_UART_Transmit+0x26>
 c004ac8:	88fb      	ldrh	r3, [r7, #6]
 c004aca:	2b00      	cmp	r3, #0
 c004acc:	d101      	bne.n	c004ad2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 c004ace:	2301      	movs	r3, #1
 c004ad0:	e074      	b.n	c004bbc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 c004ad2:	68fb      	ldr	r3, [r7, #12]
 c004ad4:	2200      	movs	r2, #0
 c004ad6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 c004ada:	68fb      	ldr	r3, [r7, #12]
 c004adc:	2221      	movs	r2, #33	; 0x21
 c004ade:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 c004ae2:	f7fc fd3f 	bl	c001564 <HAL_GetTick>
 c004ae6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 c004ae8:	68fb      	ldr	r3, [r7, #12]
 c004aea:	88fa      	ldrh	r2, [r7, #6]
 c004aec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 c004af0:	68fb      	ldr	r3, [r7, #12]
 c004af2:	88fa      	ldrh	r2, [r7, #6]
 c004af4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 c004af8:	68fb      	ldr	r3, [r7, #12]
 c004afa:	689b      	ldr	r3, [r3, #8]
 c004afc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 c004b00:	d108      	bne.n	c004b14 <HAL_UART_Transmit+0x6c>
 c004b02:	68fb      	ldr	r3, [r7, #12]
 c004b04:	691b      	ldr	r3, [r3, #16]
 c004b06:	2b00      	cmp	r3, #0
 c004b08:	d104      	bne.n	c004b14 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 c004b0a:	2300      	movs	r3, #0
 c004b0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 c004b0e:	68bb      	ldr	r3, [r7, #8]
 c004b10:	61bb      	str	r3, [r7, #24]
 c004b12:	e003      	b.n	c004b1c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 c004b14:	68bb      	ldr	r3, [r7, #8]
 c004b16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 c004b18:	2300      	movs	r3, #0
 c004b1a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 c004b1c:	e030      	b.n	c004b80 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 c004b1e:	683b      	ldr	r3, [r7, #0]
 c004b20:	9300      	str	r3, [sp, #0]
 c004b22:	697b      	ldr	r3, [r7, #20]
 c004b24:	2200      	movs	r2, #0
 c004b26:	2180      	movs	r1, #128	; 0x80
 c004b28:	68f8      	ldr	r0, [r7, #12]
 c004b2a:	f000 fc95 	bl	c005458 <UART_WaitOnFlagUntilTimeout>
 c004b2e:	4603      	mov	r3, r0
 c004b30:	2b00      	cmp	r3, #0
 c004b32:	d005      	beq.n	c004b40 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 c004b34:	68fb      	ldr	r3, [r7, #12]
 c004b36:	2220      	movs	r2, #32
 c004b38:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 c004b3c:	2303      	movs	r3, #3
 c004b3e:	e03d      	b.n	c004bbc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 c004b40:	69fb      	ldr	r3, [r7, #28]
 c004b42:	2b00      	cmp	r3, #0
 c004b44:	d10b      	bne.n	c004b5e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 c004b46:	69bb      	ldr	r3, [r7, #24]
 c004b48:	881b      	ldrh	r3, [r3, #0]
 c004b4a:	461a      	mov	r2, r3
 c004b4c:	68fb      	ldr	r3, [r7, #12]
 c004b4e:	681b      	ldr	r3, [r3, #0]
 c004b50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 c004b54:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 c004b56:	69bb      	ldr	r3, [r7, #24]
 c004b58:	3302      	adds	r3, #2
 c004b5a:	61bb      	str	r3, [r7, #24]
 c004b5c:	e007      	b.n	c004b6e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 c004b5e:	69fb      	ldr	r3, [r7, #28]
 c004b60:	781a      	ldrb	r2, [r3, #0]
 c004b62:	68fb      	ldr	r3, [r7, #12]
 c004b64:	681b      	ldr	r3, [r3, #0]
 c004b66:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 c004b68:	69fb      	ldr	r3, [r7, #28]
 c004b6a:	3301      	adds	r3, #1
 c004b6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 c004b6e:	68fb      	ldr	r3, [r7, #12]
 c004b70:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c004b74:	b29b      	uxth	r3, r3
 c004b76:	3b01      	subs	r3, #1
 c004b78:	b29a      	uxth	r2, r3
 c004b7a:	68fb      	ldr	r3, [r7, #12]
 c004b7c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 c004b80:	68fb      	ldr	r3, [r7, #12]
 c004b82:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 c004b86:	b29b      	uxth	r3, r3
 c004b88:	2b00      	cmp	r3, #0
 c004b8a:	d1c8      	bne.n	c004b1e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 c004b8c:	683b      	ldr	r3, [r7, #0]
 c004b8e:	9300      	str	r3, [sp, #0]
 c004b90:	697b      	ldr	r3, [r7, #20]
 c004b92:	2200      	movs	r2, #0
 c004b94:	2140      	movs	r1, #64	; 0x40
 c004b96:	68f8      	ldr	r0, [r7, #12]
 c004b98:	f000 fc5e 	bl	c005458 <UART_WaitOnFlagUntilTimeout>
 c004b9c:	4603      	mov	r3, r0
 c004b9e:	2b00      	cmp	r3, #0
 c004ba0:	d005      	beq.n	c004bae <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 c004ba2:	68fb      	ldr	r3, [r7, #12]
 c004ba4:	2220      	movs	r2, #32
 c004ba6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 c004baa:	2303      	movs	r3, #3
 c004bac:	e006      	b.n	c004bbc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 c004bae:	68fb      	ldr	r3, [r7, #12]
 c004bb0:	2220      	movs	r2, #32
 c004bb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 c004bb6:	2300      	movs	r3, #0
 c004bb8:	e000      	b.n	c004bbc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 c004bba:	2302      	movs	r3, #2
  }
}
 c004bbc:	4618      	mov	r0, r3
 c004bbe:	3720      	adds	r7, #32
 c004bc0:	46bd      	mov	sp, r7
 c004bc2:	bd80      	pop	{r7, pc}

0c004bc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 c004bc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 c004bc8:	b08c      	sub	sp, #48	; 0x30
 c004bca:	af00      	add	r7, sp, #0
 c004bcc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 c004bce:	2300      	movs	r3, #0
 c004bd0:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 c004bd4:	697b      	ldr	r3, [r7, #20]
 c004bd6:	689a      	ldr	r2, [r3, #8]
 c004bd8:	697b      	ldr	r3, [r7, #20]
 c004bda:	691b      	ldr	r3, [r3, #16]
 c004bdc:	431a      	orrs	r2, r3
 c004bde:	697b      	ldr	r3, [r7, #20]
 c004be0:	695b      	ldr	r3, [r3, #20]
 c004be2:	431a      	orrs	r2, r3
 c004be4:	697b      	ldr	r3, [r7, #20]
 c004be6:	69db      	ldr	r3, [r3, #28]
 c004be8:	4313      	orrs	r3, r2
 c004bea:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 c004bec:	697b      	ldr	r3, [r7, #20]
 c004bee:	681b      	ldr	r3, [r3, #0]
 c004bf0:	681a      	ldr	r2, [r3, #0]
 c004bf2:	4baa      	ldr	r3, [pc, #680]	; (c004e9c <UART_SetConfig+0x2d8>)
 c004bf4:	4013      	ands	r3, r2
 c004bf6:	697a      	ldr	r2, [r7, #20]
 c004bf8:	6812      	ldr	r2, [r2, #0]
 c004bfa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004bfc:	430b      	orrs	r3, r1
 c004bfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 c004c00:	697b      	ldr	r3, [r7, #20]
 c004c02:	681b      	ldr	r3, [r3, #0]
 c004c04:	685b      	ldr	r3, [r3, #4]
 c004c06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 c004c0a:	697b      	ldr	r3, [r7, #20]
 c004c0c:	68da      	ldr	r2, [r3, #12]
 c004c0e:	697b      	ldr	r3, [r7, #20]
 c004c10:	681b      	ldr	r3, [r3, #0]
 c004c12:	430a      	orrs	r2, r1
 c004c14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 c004c16:	697b      	ldr	r3, [r7, #20]
 c004c18:	699b      	ldr	r3, [r3, #24]
 c004c1a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 c004c1c:	697b      	ldr	r3, [r7, #20]
 c004c1e:	681b      	ldr	r3, [r3, #0]
 c004c20:	4a9f      	ldr	r2, [pc, #636]	; (c004ea0 <UART_SetConfig+0x2dc>)
 c004c22:	4293      	cmp	r3, r2
 c004c24:	d004      	beq.n	c004c30 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 c004c26:	697b      	ldr	r3, [r7, #20]
 c004c28:	6a1b      	ldr	r3, [r3, #32]
 c004c2a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c004c2c:	4313      	orrs	r3, r2
 c004c2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 c004c30:	697b      	ldr	r3, [r7, #20]
 c004c32:	681b      	ldr	r3, [r3, #0]
 c004c34:	689b      	ldr	r3, [r3, #8]
 c004c36:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 c004c3a:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 c004c3e:	697a      	ldr	r2, [r7, #20]
 c004c40:	6812      	ldr	r2, [r2, #0]
 c004c42:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c004c44:	430b      	orrs	r3, r1
 c004c46:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 c004c48:	697b      	ldr	r3, [r7, #20]
 c004c4a:	681b      	ldr	r3, [r3, #0]
 c004c4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 c004c4e:	f023 010f 	bic.w	r1, r3, #15
 c004c52:	697b      	ldr	r3, [r7, #20]
 c004c54:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 c004c56:	697b      	ldr	r3, [r7, #20]
 c004c58:	681b      	ldr	r3, [r3, #0]
 c004c5a:	430a      	orrs	r2, r1
 c004c5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 c004c5e:	697b      	ldr	r3, [r7, #20]
 c004c60:	681b      	ldr	r3, [r3, #0]
 c004c62:	4a90      	ldr	r2, [pc, #576]	; (c004ea4 <UART_SetConfig+0x2e0>)
 c004c64:	4293      	cmp	r3, r2
 c004c66:	d125      	bne.n	c004cb4 <UART_SetConfig+0xf0>
 c004c68:	4b8f      	ldr	r3, [pc, #572]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004c6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004c6e:	f003 0303 	and.w	r3, r3, #3
 c004c72:	2b03      	cmp	r3, #3
 c004c74:	d81a      	bhi.n	c004cac <UART_SetConfig+0xe8>
 c004c76:	a201      	add	r2, pc, #4	; (adr r2, c004c7c <UART_SetConfig+0xb8>)
 c004c78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004c7c:	0c004c8d 	.word	0x0c004c8d
 c004c80:	0c004c9d 	.word	0x0c004c9d
 c004c84:	0c004c95 	.word	0x0c004c95
 c004c88:	0c004ca5 	.word	0x0c004ca5
 c004c8c:	2301      	movs	r3, #1
 c004c8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004c92:	e114      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004c94:	2302      	movs	r3, #2
 c004c96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004c9a:	e110      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004c9c:	2304      	movs	r3, #4
 c004c9e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004ca2:	e10c      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004ca4:	2308      	movs	r3, #8
 c004ca6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004caa:	e108      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004cac:	2310      	movs	r3, #16
 c004cae:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004cb2:	e104      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004cb4:	697b      	ldr	r3, [r7, #20]
 c004cb6:	681b      	ldr	r3, [r3, #0]
 c004cb8:	4a7c      	ldr	r2, [pc, #496]	; (c004eac <UART_SetConfig+0x2e8>)
 c004cba:	4293      	cmp	r3, r2
 c004cbc:	d138      	bne.n	c004d30 <UART_SetConfig+0x16c>
 c004cbe:	4b7a      	ldr	r3, [pc, #488]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004cc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004cc4:	f003 030c 	and.w	r3, r3, #12
 c004cc8:	2b0c      	cmp	r3, #12
 c004cca:	d82d      	bhi.n	c004d28 <UART_SetConfig+0x164>
 c004ccc:	a201      	add	r2, pc, #4	; (adr r2, c004cd4 <UART_SetConfig+0x110>)
 c004cce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004cd2:	bf00      	nop
 c004cd4:	0c004d09 	.word	0x0c004d09
 c004cd8:	0c004d29 	.word	0x0c004d29
 c004cdc:	0c004d29 	.word	0x0c004d29
 c004ce0:	0c004d29 	.word	0x0c004d29
 c004ce4:	0c004d19 	.word	0x0c004d19
 c004ce8:	0c004d29 	.word	0x0c004d29
 c004cec:	0c004d29 	.word	0x0c004d29
 c004cf0:	0c004d29 	.word	0x0c004d29
 c004cf4:	0c004d11 	.word	0x0c004d11
 c004cf8:	0c004d29 	.word	0x0c004d29
 c004cfc:	0c004d29 	.word	0x0c004d29
 c004d00:	0c004d29 	.word	0x0c004d29
 c004d04:	0c004d21 	.word	0x0c004d21
 c004d08:	2300      	movs	r3, #0
 c004d0a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d0e:	e0d6      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d10:	2302      	movs	r3, #2
 c004d12:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d16:	e0d2      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d18:	2304      	movs	r3, #4
 c004d1a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d1e:	e0ce      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d20:	2308      	movs	r3, #8
 c004d22:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d26:	e0ca      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d28:	2310      	movs	r3, #16
 c004d2a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d2e:	e0c6      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d30:	697b      	ldr	r3, [r7, #20]
 c004d32:	681b      	ldr	r3, [r3, #0]
 c004d34:	4a5e      	ldr	r2, [pc, #376]	; (c004eb0 <UART_SetConfig+0x2ec>)
 c004d36:	4293      	cmp	r3, r2
 c004d38:	d125      	bne.n	c004d86 <UART_SetConfig+0x1c2>
 c004d3a:	4b5b      	ldr	r3, [pc, #364]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004d3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004d40:	f003 0330 	and.w	r3, r3, #48	; 0x30
 c004d44:	2b30      	cmp	r3, #48	; 0x30
 c004d46:	d016      	beq.n	c004d76 <UART_SetConfig+0x1b2>
 c004d48:	2b30      	cmp	r3, #48	; 0x30
 c004d4a:	d818      	bhi.n	c004d7e <UART_SetConfig+0x1ba>
 c004d4c:	2b20      	cmp	r3, #32
 c004d4e:	d00a      	beq.n	c004d66 <UART_SetConfig+0x1a2>
 c004d50:	2b20      	cmp	r3, #32
 c004d52:	d814      	bhi.n	c004d7e <UART_SetConfig+0x1ba>
 c004d54:	2b00      	cmp	r3, #0
 c004d56:	d002      	beq.n	c004d5e <UART_SetConfig+0x19a>
 c004d58:	2b10      	cmp	r3, #16
 c004d5a:	d008      	beq.n	c004d6e <UART_SetConfig+0x1aa>
 c004d5c:	e00f      	b.n	c004d7e <UART_SetConfig+0x1ba>
 c004d5e:	2300      	movs	r3, #0
 c004d60:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d64:	e0ab      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d66:	2302      	movs	r3, #2
 c004d68:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d6c:	e0a7      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d6e:	2304      	movs	r3, #4
 c004d70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d74:	e0a3      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d76:	2308      	movs	r3, #8
 c004d78:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d7c:	e09f      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d7e:	2310      	movs	r3, #16
 c004d80:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004d84:	e09b      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004d86:	697b      	ldr	r3, [r7, #20]
 c004d88:	681b      	ldr	r3, [r3, #0]
 c004d8a:	4a4a      	ldr	r2, [pc, #296]	; (c004eb4 <UART_SetConfig+0x2f0>)
 c004d8c:	4293      	cmp	r3, r2
 c004d8e:	d125      	bne.n	c004ddc <UART_SetConfig+0x218>
 c004d90:	4b45      	ldr	r3, [pc, #276]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004d92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004d96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 c004d9a:	2bc0      	cmp	r3, #192	; 0xc0
 c004d9c:	d016      	beq.n	c004dcc <UART_SetConfig+0x208>
 c004d9e:	2bc0      	cmp	r3, #192	; 0xc0
 c004da0:	d818      	bhi.n	c004dd4 <UART_SetConfig+0x210>
 c004da2:	2b80      	cmp	r3, #128	; 0x80
 c004da4:	d00a      	beq.n	c004dbc <UART_SetConfig+0x1f8>
 c004da6:	2b80      	cmp	r3, #128	; 0x80
 c004da8:	d814      	bhi.n	c004dd4 <UART_SetConfig+0x210>
 c004daa:	2b00      	cmp	r3, #0
 c004dac:	d002      	beq.n	c004db4 <UART_SetConfig+0x1f0>
 c004dae:	2b40      	cmp	r3, #64	; 0x40
 c004db0:	d008      	beq.n	c004dc4 <UART_SetConfig+0x200>
 c004db2:	e00f      	b.n	c004dd4 <UART_SetConfig+0x210>
 c004db4:	2300      	movs	r3, #0
 c004db6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dba:	e080      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004dbc:	2302      	movs	r3, #2
 c004dbe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dc2:	e07c      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004dc4:	2304      	movs	r3, #4
 c004dc6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dca:	e078      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004dcc:	2308      	movs	r3, #8
 c004dce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dd2:	e074      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004dd4:	2310      	movs	r3, #16
 c004dd6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004dda:	e070      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004ddc:	697b      	ldr	r3, [r7, #20]
 c004dde:	681b      	ldr	r3, [r3, #0]
 c004de0:	f1b3 2f50 	cmp.w	r3, #1342197760	; 0x50005000
 c004de4:	d12a      	bne.n	c004e3c <UART_SetConfig+0x278>
 c004de6:	4b30      	ldr	r3, [pc, #192]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004de8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004dec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 c004df0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004df4:	d01a      	beq.n	c004e2c <UART_SetConfig+0x268>
 c004df6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004dfa:	d81b      	bhi.n	c004e34 <UART_SetConfig+0x270>
 c004dfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e00:	d00c      	beq.n	c004e1c <UART_SetConfig+0x258>
 c004e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c004e06:	d815      	bhi.n	c004e34 <UART_SetConfig+0x270>
 c004e08:	2b00      	cmp	r3, #0
 c004e0a:	d003      	beq.n	c004e14 <UART_SetConfig+0x250>
 c004e0c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 c004e10:	d008      	beq.n	c004e24 <UART_SetConfig+0x260>
 c004e12:	e00f      	b.n	c004e34 <UART_SetConfig+0x270>
 c004e14:	2300      	movs	r3, #0
 c004e16:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e1a:	e050      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e1c:	2302      	movs	r3, #2
 c004e1e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e22:	e04c      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e24:	2304      	movs	r3, #4
 c004e26:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e2a:	e048      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e2c:	2308      	movs	r3, #8
 c004e2e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e32:	e044      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e34:	2310      	movs	r3, #16
 c004e36:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e3a:	e040      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e3c:	697b      	ldr	r3, [r7, #20]
 c004e3e:	681b      	ldr	r3, [r3, #0]
 c004e40:	4a17      	ldr	r2, [pc, #92]	; (c004ea0 <UART_SetConfig+0x2dc>)
 c004e42:	4293      	cmp	r3, r2
 c004e44:	d138      	bne.n	c004eb8 <UART_SetConfig+0x2f4>
 c004e46:	4b18      	ldr	r3, [pc, #96]	; (c004ea8 <UART_SetConfig+0x2e4>)
 c004e48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 c004e4c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 c004e50:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c004e54:	d01a      	beq.n	c004e8c <UART_SetConfig+0x2c8>
 c004e56:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 c004e5a:	d81b      	bhi.n	c004e94 <UART_SetConfig+0x2d0>
 c004e5c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004e60:	d00c      	beq.n	c004e7c <UART_SetConfig+0x2b8>
 c004e62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c004e66:	d815      	bhi.n	c004e94 <UART_SetConfig+0x2d0>
 c004e68:	2b00      	cmp	r3, #0
 c004e6a:	d003      	beq.n	c004e74 <UART_SetConfig+0x2b0>
 c004e6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 c004e70:	d008      	beq.n	c004e84 <UART_SetConfig+0x2c0>
 c004e72:	e00f      	b.n	c004e94 <UART_SetConfig+0x2d0>
 c004e74:	2300      	movs	r3, #0
 c004e76:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e7a:	e020      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e7c:	2302      	movs	r3, #2
 c004e7e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e82:	e01c      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e84:	2304      	movs	r3, #4
 c004e86:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e8a:	e018      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e8c:	2308      	movs	r3, #8
 c004e8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e92:	e014      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e94:	2310      	movs	r3, #16
 c004e96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 c004e9a:	e010      	b.n	c004ebe <UART_SetConfig+0x2fa>
 c004e9c:	cfff69f3 	.word	0xcfff69f3
 c004ea0:	50008000 	.word	0x50008000
 c004ea4:	50013800 	.word	0x50013800
 c004ea8:	50021000 	.word	0x50021000
 c004eac:	50004400 	.word	0x50004400
 c004eb0:	50004800 	.word	0x50004800
 c004eb4:	50004c00 	.word	0x50004c00
 c004eb8:	2310      	movs	r3, #16
 c004eba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 c004ebe:	697b      	ldr	r3, [r7, #20]
 c004ec0:	681b      	ldr	r3, [r3, #0]
 c004ec2:	4ab0      	ldr	r2, [pc, #704]	; (c005184 <UART_SetConfig+0x5c0>)
 c004ec4:	4293      	cmp	r3, r2
 c004ec6:	f040 809b 	bne.w	c005000 <UART_SetConfig+0x43c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 c004eca:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c004ece:	2b08      	cmp	r3, #8
 c004ed0:	d827      	bhi.n	c004f22 <UART_SetConfig+0x35e>
 c004ed2:	a201      	add	r2, pc, #4	; (adr r2, c004ed8 <UART_SetConfig+0x314>)
 c004ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c004ed8:	0c004efd 	.word	0x0c004efd
 c004edc:	0c004f05 	.word	0x0c004f05
 c004ee0:	0c004f0d 	.word	0x0c004f0d
 c004ee4:	0c004f23 	.word	0x0c004f23
 c004ee8:	0c004f13 	.word	0x0c004f13
 c004eec:	0c004f23 	.word	0x0c004f23
 c004ef0:	0c004f23 	.word	0x0c004f23
 c004ef4:	0c004f23 	.word	0x0c004f23
 c004ef8:	0c004f1b 	.word	0x0c004f1b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c004efc:	f7fe fa88 	bl	c003410 <HAL_RCC_GetPCLK1Freq>
 c004f00:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f02:	e014      	b.n	c004f2e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c004f04:	f7fe fa98 	bl	c003438 <HAL_RCC_GetPCLK2Freq>
 c004f08:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f0a:	e010      	b.n	c004f2e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c004f0c:	4b9e      	ldr	r3, [pc, #632]	; (c005188 <UART_SetConfig+0x5c4>)
 c004f0e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004f10:	e00d      	b.n	c004f2e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c004f12:	f7fe f9cb 	bl	c0032ac <HAL_RCC_GetSysClockFreq>
 c004f16:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c004f18:	e009      	b.n	c004f2e <UART_SetConfig+0x36a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c004f1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c004f1e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c004f20:	e005      	b.n	c004f2e <UART_SetConfig+0x36a>
      default:
        pclk = 0U;
 c004f22:	2300      	movs	r3, #0
 c004f24:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c004f26:	2301      	movs	r3, #1
 c004f28:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c004f2c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 c004f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004f30:	2b00      	cmp	r3, #0
 c004f32:	f000 8130 	beq.w	c005196 <UART_SetConfig+0x5d2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 c004f36:	697b      	ldr	r3, [r7, #20]
 c004f38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f3a:	4a94      	ldr	r2, [pc, #592]	; (c00518c <UART_SetConfig+0x5c8>)
 c004f3c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004f40:	461a      	mov	r2, r3
 c004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004f44:	fbb3 f3f2 	udiv	r3, r3, r2
 c004f48:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004f4a:	697b      	ldr	r3, [r7, #20]
 c004f4c:	685a      	ldr	r2, [r3, #4]
 c004f4e:	4613      	mov	r3, r2
 c004f50:	005b      	lsls	r3, r3, #1
 c004f52:	4413      	add	r3, r2
 c004f54:	69ba      	ldr	r2, [r7, #24]
 c004f56:	429a      	cmp	r2, r3
 c004f58:	d305      	bcc.n	c004f66 <UART_SetConfig+0x3a2>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 c004f5a:	697b      	ldr	r3, [r7, #20]
 c004f5c:	685b      	ldr	r3, [r3, #4]
 c004f5e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 c004f60:	69ba      	ldr	r2, [r7, #24]
 c004f62:	429a      	cmp	r2, r3
 c004f64:	d903      	bls.n	c004f6e <UART_SetConfig+0x3aa>
      {
        ret = HAL_ERROR;
 c004f66:	2301      	movs	r3, #1
 c004f68:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004f6c:	e113      	b.n	c005196 <UART_SetConfig+0x5d2>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c004f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c004f70:	2200      	movs	r2, #0
 c004f72:	60bb      	str	r3, [r7, #8]
 c004f74:	60fa      	str	r2, [r7, #12]
 c004f76:	697b      	ldr	r3, [r7, #20]
 c004f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c004f7a:	4a84      	ldr	r2, [pc, #528]	; (c00518c <UART_SetConfig+0x5c8>)
 c004f7c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c004f80:	b29b      	uxth	r3, r3
 c004f82:	2200      	movs	r2, #0
 c004f84:	603b      	str	r3, [r7, #0]
 c004f86:	607a      	str	r2, [r7, #4]
 c004f88:	e9d7 2300 	ldrd	r2, r3, [r7]
 c004f8c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 c004f90:	f7fb f950 	bl	c000234 <__aeabi_uldivmod>
 c004f94:	4602      	mov	r2, r0
 c004f96:	460b      	mov	r3, r1
 c004f98:	4610      	mov	r0, r2
 c004f9a:	4619      	mov	r1, r3
 c004f9c:	f04f 0200 	mov.w	r2, #0
 c004fa0:	f04f 0300 	mov.w	r3, #0
 c004fa4:	020b      	lsls	r3, r1, #8
 c004fa6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 c004faa:	0202      	lsls	r2, r0, #8
 c004fac:	6979      	ldr	r1, [r7, #20]
 c004fae:	6849      	ldr	r1, [r1, #4]
 c004fb0:	0849      	lsrs	r1, r1, #1
 c004fb2:	2000      	movs	r0, #0
 c004fb4:	460c      	mov	r4, r1
 c004fb6:	4605      	mov	r5, r0
 c004fb8:	eb12 0804 	adds.w	r8, r2, r4
 c004fbc:	eb43 0905 	adc.w	r9, r3, r5
 c004fc0:	697b      	ldr	r3, [r7, #20]
 c004fc2:	685b      	ldr	r3, [r3, #4]
 c004fc4:	2200      	movs	r2, #0
 c004fc6:	469a      	mov	sl, r3
 c004fc8:	4693      	mov	fp, r2
 c004fca:	4652      	mov	r2, sl
 c004fcc:	465b      	mov	r3, fp
 c004fce:	4640      	mov	r0, r8
 c004fd0:	4649      	mov	r1, r9
 c004fd2:	f7fb f92f 	bl	c000234 <__aeabi_uldivmod>
 c004fd6:	4602      	mov	r2, r0
 c004fd8:	460b      	mov	r3, r1
 c004fda:	4613      	mov	r3, r2
 c004fdc:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 c004fde:	6a3b      	ldr	r3, [r7, #32]
 c004fe0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 c004fe4:	d308      	bcc.n	c004ff8 <UART_SetConfig+0x434>
 c004fe6:	6a3b      	ldr	r3, [r7, #32]
 c004fe8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c004fec:	d204      	bcs.n	c004ff8 <UART_SetConfig+0x434>
        {
          huart->Instance->BRR = usartdiv;
 c004fee:	697b      	ldr	r3, [r7, #20]
 c004ff0:	681b      	ldr	r3, [r3, #0]
 c004ff2:	6a3a      	ldr	r2, [r7, #32]
 c004ff4:	60da      	str	r2, [r3, #12]
 c004ff6:	e0ce      	b.n	c005196 <UART_SetConfig+0x5d2>
        }
        else
        {
          ret = HAL_ERROR;
 c004ff8:	2301      	movs	r3, #1
 c004ffa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c004ffe:	e0ca      	b.n	c005196 <UART_SetConfig+0x5d2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 c005000:	697b      	ldr	r3, [r7, #20]
 c005002:	69db      	ldr	r3, [r3, #28]
 c005004:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 c005008:	d166      	bne.n	c0050d8 <UART_SetConfig+0x514>
  {
    switch (clocksource)
 c00500a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c00500e:	2b08      	cmp	r3, #8
 c005010:	d827      	bhi.n	c005062 <UART_SetConfig+0x49e>
 c005012:	a201      	add	r2, pc, #4	; (adr r2, c005018 <UART_SetConfig+0x454>)
 c005014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c005018:	0c00503d 	.word	0x0c00503d
 c00501c:	0c005045 	.word	0x0c005045
 c005020:	0c00504d 	.word	0x0c00504d
 c005024:	0c005063 	.word	0x0c005063
 c005028:	0c005053 	.word	0x0c005053
 c00502c:	0c005063 	.word	0x0c005063
 c005030:	0c005063 	.word	0x0c005063
 c005034:	0c005063 	.word	0x0c005063
 c005038:	0c00505b 	.word	0x0c00505b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00503c:	f7fe f9e8 	bl	c003410 <HAL_RCC_GetPCLK1Freq>
 c005040:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005042:	e014      	b.n	c00506e <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005044:	f7fe f9f8 	bl	c003438 <HAL_RCC_GetPCLK2Freq>
 c005048:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00504a:	e010      	b.n	c00506e <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c00504c:	4b4e      	ldr	r3, [pc, #312]	; (c005188 <UART_SetConfig+0x5c4>)
 c00504e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005050:	e00d      	b.n	c00506e <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005052:	f7fe f92b 	bl	c0032ac <HAL_RCC_GetSysClockFreq>
 c005056:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005058:	e009      	b.n	c00506e <UART_SetConfig+0x4aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00505a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00505e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005060:	e005      	b.n	c00506e <UART_SetConfig+0x4aa>
      default:
        pclk = 0U;
 c005062:	2300      	movs	r3, #0
 c005064:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005066:	2301      	movs	r3, #1
 c005068:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c00506c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 c00506e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005070:	2b00      	cmp	r3, #0
 c005072:	f000 8090 	beq.w	c005196 <UART_SetConfig+0x5d2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005076:	697b      	ldr	r3, [r7, #20]
 c005078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c00507a:	4a44      	ldr	r2, [pc, #272]	; (c00518c <UART_SetConfig+0x5c8>)
 c00507c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c005080:	461a      	mov	r2, r3
 c005082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005084:	fbb3 f3f2 	udiv	r3, r3, r2
 c005088:	005a      	lsls	r2, r3, #1
 c00508a:	697b      	ldr	r3, [r7, #20]
 c00508c:	685b      	ldr	r3, [r3, #4]
 c00508e:	085b      	lsrs	r3, r3, #1
 c005090:	441a      	add	r2, r3
 c005092:	697b      	ldr	r3, [r7, #20]
 c005094:	685b      	ldr	r3, [r3, #4]
 c005096:	fbb2 f3f3 	udiv	r3, r2, r3
 c00509a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c00509c:	6a3b      	ldr	r3, [r7, #32]
 c00509e:	2b0f      	cmp	r3, #15
 c0050a0:	d916      	bls.n	c0050d0 <UART_SetConfig+0x50c>
 c0050a2:	6a3b      	ldr	r3, [r7, #32]
 c0050a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c0050a8:	d212      	bcs.n	c0050d0 <UART_SetConfig+0x50c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 c0050aa:	6a3b      	ldr	r3, [r7, #32]
 c0050ac:	b29b      	uxth	r3, r3
 c0050ae:	f023 030f 	bic.w	r3, r3, #15
 c0050b2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 c0050b4:	6a3b      	ldr	r3, [r7, #32]
 c0050b6:	085b      	lsrs	r3, r3, #1
 c0050b8:	b29b      	uxth	r3, r3
 c0050ba:	f003 0307 	and.w	r3, r3, #7
 c0050be:	b29a      	uxth	r2, r3
 c0050c0:	8bfb      	ldrh	r3, [r7, #30]
 c0050c2:	4313      	orrs	r3, r2
 c0050c4:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 c0050c6:	697b      	ldr	r3, [r7, #20]
 c0050c8:	681b      	ldr	r3, [r3, #0]
 c0050ca:	8bfa      	ldrh	r2, [r7, #30]
 c0050cc:	60da      	str	r2, [r3, #12]
 c0050ce:	e062      	b.n	c005196 <UART_SetConfig+0x5d2>
      }
      else
      {
        ret = HAL_ERROR;
 c0050d0:	2301      	movs	r3, #1
 c0050d2:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 c0050d6:	e05e      	b.n	c005196 <UART_SetConfig+0x5d2>
      }
    }
  }
  else
  {
    switch (clocksource)
 c0050d8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 c0050dc:	2b08      	cmp	r3, #8
 c0050de:	d828      	bhi.n	c005132 <UART_SetConfig+0x56e>
 c0050e0:	a201      	add	r2, pc, #4	; (adr r2, c0050e8 <UART_SetConfig+0x524>)
 c0050e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 c0050e6:	bf00      	nop
 c0050e8:	0c00510d 	.word	0x0c00510d
 c0050ec:	0c005115 	.word	0x0c005115
 c0050f0:	0c00511d 	.word	0x0c00511d
 c0050f4:	0c005133 	.word	0x0c005133
 c0050f8:	0c005123 	.word	0x0c005123
 c0050fc:	0c005133 	.word	0x0c005133
 c005100:	0c005133 	.word	0x0c005133
 c005104:	0c005133 	.word	0x0c005133
 c005108:	0c00512b 	.word	0x0c00512b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 c00510c:	f7fe f980 	bl	c003410 <HAL_RCC_GetPCLK1Freq>
 c005110:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005112:	e014      	b.n	c00513e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 c005114:	f7fe f990 	bl	c003438 <HAL_RCC_GetPCLK2Freq>
 c005118:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c00511a:	e010      	b.n	c00513e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 c00511c:	4b1a      	ldr	r3, [pc, #104]	; (c005188 <UART_SetConfig+0x5c4>)
 c00511e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005120:	e00d      	b.n	c00513e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 c005122:	f7fe f8c3 	bl	c0032ac <HAL_RCC_GetSysClockFreq>
 c005126:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 c005128:	e009      	b.n	c00513e <UART_SetConfig+0x57a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 c00512a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 c00512e:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 c005130:	e005      	b.n	c00513e <UART_SetConfig+0x57a>
      default:
        pclk = 0U;
 c005132:	2300      	movs	r3, #0
 c005134:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 c005136:	2301      	movs	r3, #1
 c005138:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 c00513c:	bf00      	nop
    }

    if (pclk != 0U)
 c00513e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005140:	2b00      	cmp	r3, #0
 c005142:	d028      	beq.n	c005196 <UART_SetConfig+0x5d2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 c005144:	697b      	ldr	r3, [r7, #20]
 c005146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 c005148:	4a10      	ldr	r2, [pc, #64]	; (c00518c <UART_SetConfig+0x5c8>)
 c00514a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 c00514e:	461a      	mov	r2, r3
 c005150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005152:	fbb3 f2f2 	udiv	r2, r3, r2
 c005156:	697b      	ldr	r3, [r7, #20]
 c005158:	685b      	ldr	r3, [r3, #4]
 c00515a:	085b      	lsrs	r3, r3, #1
 c00515c:	441a      	add	r2, r3
 c00515e:	697b      	ldr	r3, [r7, #20]
 c005160:	685b      	ldr	r3, [r3, #4]
 c005162:	fbb2 f3f3 	udiv	r3, r2, r3
 c005166:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 c005168:	6a3b      	ldr	r3, [r7, #32]
 c00516a:	2b0f      	cmp	r3, #15
 c00516c:	d910      	bls.n	c005190 <UART_SetConfig+0x5cc>
 c00516e:	6a3b      	ldr	r3, [r7, #32]
 c005170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 c005174:	d20c      	bcs.n	c005190 <UART_SetConfig+0x5cc>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 c005176:	6a3b      	ldr	r3, [r7, #32]
 c005178:	b29a      	uxth	r2, r3
 c00517a:	697b      	ldr	r3, [r7, #20]
 c00517c:	681b      	ldr	r3, [r3, #0]
 c00517e:	60da      	str	r2, [r3, #12]
 c005180:	e009      	b.n	c005196 <UART_SetConfig+0x5d2>
 c005182:	bf00      	nop
 c005184:	50008000 	.word	0x50008000
 c005188:	00f42400 	.word	0x00f42400
 c00518c:	0c0068e8 	.word	0x0c0068e8
      }
      else
      {
        ret = HAL_ERROR;
 c005190:	2301      	movs	r3, #1
 c005192:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 c005196:	697b      	ldr	r3, [r7, #20]
 c005198:	2201      	movs	r2, #1
 c00519a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 c00519e:	697b      	ldr	r3, [r7, #20]
 c0051a0:	2201      	movs	r2, #1
 c0051a2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 c0051a6:	697b      	ldr	r3, [r7, #20]
 c0051a8:	2200      	movs	r2, #0
 c0051aa:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 c0051ac:	697b      	ldr	r3, [r7, #20]
 c0051ae:	2200      	movs	r2, #0
 c0051b0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 c0051b2:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 c0051b6:	4618      	mov	r0, r3
 c0051b8:	3730      	adds	r7, #48	; 0x30
 c0051ba:	46bd      	mov	sp, r7
 c0051bc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

0c0051c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 c0051c0:	b480      	push	{r7}
 c0051c2:	b083      	sub	sp, #12
 c0051c4:	af00      	add	r7, sp, #0
 c0051c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 c0051c8:	687b      	ldr	r3, [r7, #4]
 c0051ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0051cc:	f003 0301 	and.w	r3, r3, #1
 c0051d0:	2b00      	cmp	r3, #0
 c0051d2:	d00a      	beq.n	c0051ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 c0051d4:	687b      	ldr	r3, [r7, #4]
 c0051d6:	681b      	ldr	r3, [r3, #0]
 c0051d8:	685b      	ldr	r3, [r3, #4]
 c0051da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 c0051de:	687b      	ldr	r3, [r7, #4]
 c0051e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 c0051e2:	687b      	ldr	r3, [r7, #4]
 c0051e4:	681b      	ldr	r3, [r3, #0]
 c0051e6:	430a      	orrs	r2, r1
 c0051e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 c0051ea:	687b      	ldr	r3, [r7, #4]
 c0051ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0051ee:	f003 0302 	and.w	r3, r3, #2
 c0051f2:	2b00      	cmp	r3, #0
 c0051f4:	d00a      	beq.n	c00520c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 c0051f6:	687b      	ldr	r3, [r7, #4]
 c0051f8:	681b      	ldr	r3, [r3, #0]
 c0051fa:	685b      	ldr	r3, [r3, #4]
 c0051fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 c005200:	687b      	ldr	r3, [r7, #4]
 c005202:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 c005204:	687b      	ldr	r3, [r7, #4]
 c005206:	681b      	ldr	r3, [r3, #0]
 c005208:	430a      	orrs	r2, r1
 c00520a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 c00520c:	687b      	ldr	r3, [r7, #4]
 c00520e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005210:	f003 0304 	and.w	r3, r3, #4
 c005214:	2b00      	cmp	r3, #0
 c005216:	d00a      	beq.n	c00522e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 c005218:	687b      	ldr	r3, [r7, #4]
 c00521a:	681b      	ldr	r3, [r3, #0]
 c00521c:	685b      	ldr	r3, [r3, #4]
 c00521e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 c005222:	687b      	ldr	r3, [r7, #4]
 c005224:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 c005226:	687b      	ldr	r3, [r7, #4]
 c005228:	681b      	ldr	r3, [r3, #0]
 c00522a:	430a      	orrs	r2, r1
 c00522c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 c00522e:	687b      	ldr	r3, [r7, #4]
 c005230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005232:	f003 0308 	and.w	r3, r3, #8
 c005236:	2b00      	cmp	r3, #0
 c005238:	d00a      	beq.n	c005250 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 c00523a:	687b      	ldr	r3, [r7, #4]
 c00523c:	681b      	ldr	r3, [r3, #0]
 c00523e:	685b      	ldr	r3, [r3, #4]
 c005240:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 c005244:	687b      	ldr	r3, [r7, #4]
 c005246:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 c005248:	687b      	ldr	r3, [r7, #4]
 c00524a:	681b      	ldr	r3, [r3, #0]
 c00524c:	430a      	orrs	r2, r1
 c00524e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 c005250:	687b      	ldr	r3, [r7, #4]
 c005252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005254:	f003 0310 	and.w	r3, r3, #16
 c005258:	2b00      	cmp	r3, #0
 c00525a:	d00a      	beq.n	c005272 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 c00525c:	687b      	ldr	r3, [r7, #4]
 c00525e:	681b      	ldr	r3, [r3, #0]
 c005260:	689b      	ldr	r3, [r3, #8]
 c005262:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 c005266:	687b      	ldr	r3, [r7, #4]
 c005268:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 c00526a:	687b      	ldr	r3, [r7, #4]
 c00526c:	681b      	ldr	r3, [r3, #0]
 c00526e:	430a      	orrs	r2, r1
 c005270:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 c005272:	687b      	ldr	r3, [r7, #4]
 c005274:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005276:	f003 0320 	and.w	r3, r3, #32
 c00527a:	2b00      	cmp	r3, #0
 c00527c:	d00a      	beq.n	c005294 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 c00527e:	687b      	ldr	r3, [r7, #4]
 c005280:	681b      	ldr	r3, [r3, #0]
 c005282:	689b      	ldr	r3, [r3, #8]
 c005284:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 c005288:	687b      	ldr	r3, [r7, #4]
 c00528a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 c00528c:	687b      	ldr	r3, [r7, #4]
 c00528e:	681b      	ldr	r3, [r3, #0]
 c005290:	430a      	orrs	r2, r1
 c005292:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 c005294:	687b      	ldr	r3, [r7, #4]
 c005296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c005298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 c00529c:	2b00      	cmp	r3, #0
 c00529e:	d01a      	beq.n	c0052d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 c0052a0:	687b      	ldr	r3, [r7, #4]
 c0052a2:	681b      	ldr	r3, [r3, #0]
 c0052a4:	685b      	ldr	r3, [r3, #4]
 c0052a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 c0052aa:	687b      	ldr	r3, [r7, #4]
 c0052ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 c0052ae:	687b      	ldr	r3, [r7, #4]
 c0052b0:	681b      	ldr	r3, [r3, #0]
 c0052b2:	430a      	orrs	r2, r1
 c0052b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 c0052b6:	687b      	ldr	r3, [r7, #4]
 c0052b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 c0052ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 c0052be:	d10a      	bne.n	c0052d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 c0052c0:	687b      	ldr	r3, [r7, #4]
 c0052c2:	681b      	ldr	r3, [r3, #0]
 c0052c4:	685b      	ldr	r3, [r3, #4]
 c0052c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 c0052ca:	687b      	ldr	r3, [r7, #4]
 c0052cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 c0052ce:	687b      	ldr	r3, [r7, #4]
 c0052d0:	681b      	ldr	r3, [r3, #0]
 c0052d2:	430a      	orrs	r2, r1
 c0052d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 c0052d6:	687b      	ldr	r3, [r7, #4]
 c0052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 c0052da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 c0052de:	2b00      	cmp	r3, #0
 c0052e0:	d00a      	beq.n	c0052f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 c0052e2:	687b      	ldr	r3, [r7, #4]
 c0052e4:	681b      	ldr	r3, [r3, #0]
 c0052e6:	685b      	ldr	r3, [r3, #4]
 c0052e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 c0052ec:	687b      	ldr	r3, [r7, #4]
 c0052ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 c0052f0:	687b      	ldr	r3, [r7, #4]
 c0052f2:	681b      	ldr	r3, [r3, #0]
 c0052f4:	430a      	orrs	r2, r1
 c0052f6:	605a      	str	r2, [r3, #4]
  }
}
 c0052f8:	bf00      	nop
 c0052fa:	370c      	adds	r7, #12
 c0052fc:	46bd      	mov	sp, r7
 c0052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005302:	4770      	bx	lr

0c005304 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 c005304:	b580      	push	{r7, lr}
 c005306:	b098      	sub	sp, #96	; 0x60
 c005308:	af02      	add	r7, sp, #8
 c00530a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 c00530c:	687b      	ldr	r3, [r7, #4]
 c00530e:	2200      	movs	r2, #0
 c005310:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 c005314:	f7fc f926 	bl	c001564 <HAL_GetTick>
 c005318:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 c00531a:	687b      	ldr	r3, [r7, #4]
 c00531c:	681b      	ldr	r3, [r3, #0]
 c00531e:	681b      	ldr	r3, [r3, #0]
 c005320:	f003 0308 	and.w	r3, r3, #8
 c005324:	2b08      	cmp	r3, #8
 c005326:	d12f      	bne.n	c005388 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005328:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c00532c:	9300      	str	r3, [sp, #0]
 c00532e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c005330:	2200      	movs	r2, #0
 c005332:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 c005336:	6878      	ldr	r0, [r7, #4]
 c005338:	f000 f88e 	bl	c005458 <UART_WaitOnFlagUntilTimeout>
 c00533c:	4603      	mov	r3, r0
 c00533e:	2b00      	cmp	r3, #0
 c005340:	d022      	beq.n	c005388 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 c005342:	687b      	ldr	r3, [r7, #4]
 c005344:	681b      	ldr	r3, [r3, #0]
 c005346:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00534a:	e853 3f00 	ldrex	r3, [r3]
 c00534e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 c005350:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005352:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 c005356:	653b      	str	r3, [r7, #80]	; 0x50
 c005358:	687b      	ldr	r3, [r7, #4]
 c00535a:	681b      	ldr	r3, [r3, #0]
 c00535c:	461a      	mov	r2, r3
 c00535e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 c005360:	647b      	str	r3, [r7, #68]	; 0x44
 c005362:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005364:	6c39      	ldr	r1, [r7, #64]	; 0x40
 c005366:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 c005368:	e841 2300 	strex	r3, r2, [r1]
 c00536c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 c00536e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 c005370:	2b00      	cmp	r3, #0
 c005372:	d1e6      	bne.n	c005342 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 c005374:	687b      	ldr	r3, [r7, #4]
 c005376:	2220      	movs	r2, #32
 c005378:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 c00537c:	687b      	ldr	r3, [r7, #4]
 c00537e:	2200      	movs	r2, #0
 c005380:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c005384:	2303      	movs	r3, #3
 c005386:	e063      	b.n	c005450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 c005388:	687b      	ldr	r3, [r7, #4]
 c00538a:	681b      	ldr	r3, [r3, #0]
 c00538c:	681b      	ldr	r3, [r3, #0]
 c00538e:	f003 0304 	and.w	r3, r3, #4
 c005392:	2b04      	cmp	r3, #4
 c005394:	d149      	bne.n	c00542a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 c005396:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 c00539a:	9300      	str	r3, [sp, #0]
 c00539c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 c00539e:	2200      	movs	r2, #0
 c0053a0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 c0053a4:	6878      	ldr	r0, [r7, #4]
 c0053a6:	f000 f857 	bl	c005458 <UART_WaitOnFlagUntilTimeout>
 c0053aa:	4603      	mov	r3, r0
 c0053ac:	2b00      	cmp	r3, #0
 c0053ae:	d03c      	beq.n	c00542a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c0053b0:	687b      	ldr	r3, [r7, #4]
 c0053b2:	681b      	ldr	r3, [r3, #0]
 c0053b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0053b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c0053b8:	e853 3f00 	ldrex	r3, [r3]
 c0053bc:	623b      	str	r3, [r7, #32]
   return(result);
 c0053be:	6a3b      	ldr	r3, [r7, #32]
 c0053c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c0053c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 c0053c6:	687b      	ldr	r3, [r7, #4]
 c0053c8:	681b      	ldr	r3, [r3, #0]
 c0053ca:	461a      	mov	r2, r3
 c0053cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c0053ce:	633b      	str	r3, [r7, #48]	; 0x30
 c0053d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0053d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 c0053d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 c0053d6:	e841 2300 	strex	r3, r2, [r1]
 c0053da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 c0053dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 c0053de:	2b00      	cmp	r3, #0
 c0053e0:	d1e6      	bne.n	c0053b0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 c0053e2:	687b      	ldr	r3, [r7, #4]
 c0053e4:	681b      	ldr	r3, [r3, #0]
 c0053e6:	3308      	adds	r3, #8
 c0053e8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0053ea:	693b      	ldr	r3, [r7, #16]
 c0053ec:	e853 3f00 	ldrex	r3, [r3]
 c0053f0:	60fb      	str	r3, [r7, #12]
   return(result);
 c0053f2:	68fb      	ldr	r3, [r7, #12]
 c0053f4:	f023 0301 	bic.w	r3, r3, #1
 c0053f8:	64bb      	str	r3, [r7, #72]	; 0x48
 c0053fa:	687b      	ldr	r3, [r7, #4]
 c0053fc:	681b      	ldr	r3, [r3, #0]
 c0053fe:	3308      	adds	r3, #8
 c005400:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c005402:	61fa      	str	r2, [r7, #28]
 c005404:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005406:	69b9      	ldr	r1, [r7, #24]
 c005408:	69fa      	ldr	r2, [r7, #28]
 c00540a:	e841 2300 	strex	r3, r2, [r1]
 c00540e:	617b      	str	r3, [r7, #20]
   return(result);
 c005410:	697b      	ldr	r3, [r7, #20]
 c005412:	2b00      	cmp	r3, #0
 c005414:	d1e5      	bne.n	c0053e2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 c005416:	687b      	ldr	r3, [r7, #4]
 c005418:	2220      	movs	r2, #32
 c00541a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 c00541e:	687b      	ldr	r3, [r7, #4]
 c005420:	2200      	movs	r2, #0
 c005422:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 c005426:	2303      	movs	r3, #3
 c005428:	e012      	b.n	c005450 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 c00542a:	687b      	ldr	r3, [r7, #4]
 c00542c:	2220      	movs	r2, #32
 c00542e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 c005432:	687b      	ldr	r3, [r7, #4]
 c005434:	2220      	movs	r2, #32
 c005436:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c00543a:	687b      	ldr	r3, [r7, #4]
 c00543c:	2200      	movs	r2, #0
 c00543e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 c005440:	687b      	ldr	r3, [r7, #4]
 c005442:	2200      	movs	r2, #0
 c005444:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 c005446:	687b      	ldr	r3, [r7, #4]
 c005448:	2200      	movs	r2, #0
 c00544a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c00544e:	2300      	movs	r3, #0
}
 c005450:	4618      	mov	r0, r3
 c005452:	3758      	adds	r7, #88	; 0x58
 c005454:	46bd      	mov	sp, r7
 c005456:	bd80      	pop	{r7, pc}

0c005458 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 c005458:	b580      	push	{r7, lr}
 c00545a:	b084      	sub	sp, #16
 c00545c:	af00      	add	r7, sp, #0
 c00545e:	60f8      	str	r0, [r7, #12]
 c005460:	60b9      	str	r1, [r7, #8]
 c005462:	603b      	str	r3, [r7, #0]
 c005464:	4613      	mov	r3, r2
 c005466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c005468:	e049      	b.n	c0054fe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 c00546a:	69bb      	ldr	r3, [r7, #24]
 c00546c:	f1b3 3fff 	cmp.w	r3, #4294967295
 c005470:	d045      	beq.n	c0054fe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 c005472:	f7fc f877 	bl	c001564 <HAL_GetTick>
 c005476:	4602      	mov	r2, r0
 c005478:	683b      	ldr	r3, [r7, #0]
 c00547a:	1ad3      	subs	r3, r2, r3
 c00547c:	69ba      	ldr	r2, [r7, #24]
 c00547e:	429a      	cmp	r2, r3
 c005480:	d302      	bcc.n	c005488 <UART_WaitOnFlagUntilTimeout+0x30>
 c005482:	69bb      	ldr	r3, [r7, #24]
 c005484:	2b00      	cmp	r3, #0
 c005486:	d101      	bne.n	c00548c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 c005488:	2303      	movs	r3, #3
 c00548a:	e048      	b.n	c00551e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 c00548c:	68fb      	ldr	r3, [r7, #12]
 c00548e:	681b      	ldr	r3, [r3, #0]
 c005490:	681b      	ldr	r3, [r3, #0]
 c005492:	f003 0304 	and.w	r3, r3, #4
 c005496:	2b00      	cmp	r3, #0
 c005498:	d031      	beq.n	c0054fe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 c00549a:	68fb      	ldr	r3, [r7, #12]
 c00549c:	681b      	ldr	r3, [r3, #0]
 c00549e:	69db      	ldr	r3, [r3, #28]
 c0054a0:	f003 0308 	and.w	r3, r3, #8
 c0054a4:	2b08      	cmp	r3, #8
 c0054a6:	d110      	bne.n	c0054ca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 c0054a8:	68fb      	ldr	r3, [r7, #12]
 c0054aa:	681b      	ldr	r3, [r3, #0]
 c0054ac:	2208      	movs	r2, #8
 c0054ae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 c0054b0:	68f8      	ldr	r0, [r7, #12]
 c0054b2:	f000 f838 	bl	c005526 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 c0054b6:	68fb      	ldr	r3, [r7, #12]
 c0054b8:	2208      	movs	r2, #8
 c0054ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 c0054be:	68fb      	ldr	r3, [r7, #12]
 c0054c0:	2200      	movs	r2, #0
 c0054c2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 c0054c6:	2301      	movs	r3, #1
 c0054c8:	e029      	b.n	c00551e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 c0054ca:	68fb      	ldr	r3, [r7, #12]
 c0054cc:	681b      	ldr	r3, [r3, #0]
 c0054ce:	69db      	ldr	r3, [r3, #28]
 c0054d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 c0054d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 c0054d8:	d111      	bne.n	c0054fe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 c0054da:	68fb      	ldr	r3, [r7, #12]
 c0054dc:	681b      	ldr	r3, [r3, #0]
 c0054de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 c0054e2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 c0054e4:	68f8      	ldr	r0, [r7, #12]
 c0054e6:	f000 f81e 	bl	c005526 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 c0054ea:	68fb      	ldr	r3, [r7, #12]
 c0054ec:	2220      	movs	r2, #32
 c0054ee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 c0054f2:	68fb      	ldr	r3, [r7, #12]
 c0054f4:	2200      	movs	r2, #0
 c0054f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 c0054fa:	2303      	movs	r3, #3
 c0054fc:	e00f      	b.n	c00551e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 c0054fe:	68fb      	ldr	r3, [r7, #12]
 c005500:	681b      	ldr	r3, [r3, #0]
 c005502:	69da      	ldr	r2, [r3, #28]
 c005504:	68bb      	ldr	r3, [r7, #8]
 c005506:	4013      	ands	r3, r2
 c005508:	68ba      	ldr	r2, [r7, #8]
 c00550a:	429a      	cmp	r2, r3
 c00550c:	bf0c      	ite	eq
 c00550e:	2301      	moveq	r3, #1
 c005510:	2300      	movne	r3, #0
 c005512:	b2db      	uxtb	r3, r3
 c005514:	461a      	mov	r2, r3
 c005516:	79fb      	ldrb	r3, [r7, #7]
 c005518:	429a      	cmp	r2, r3
 c00551a:	d0a6      	beq.n	c00546a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 c00551c:	2300      	movs	r3, #0
}
 c00551e:	4618      	mov	r0, r3
 c005520:	3710      	adds	r7, #16
 c005522:	46bd      	mov	sp, r7
 c005524:	bd80      	pop	{r7, pc}

0c005526 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 c005526:	b480      	push	{r7}
 c005528:	b095      	sub	sp, #84	; 0x54
 c00552a:	af00      	add	r7, sp, #0
 c00552c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 c00552e:	687b      	ldr	r3, [r7, #4]
 c005530:	681b      	ldr	r3, [r3, #0]
 c005532:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005534:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 c005536:	e853 3f00 	ldrex	r3, [r3]
 c00553a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 c00553c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 c00553e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 c005542:	64fb      	str	r3, [r7, #76]	; 0x4c
 c005544:	687b      	ldr	r3, [r7, #4]
 c005546:	681b      	ldr	r3, [r3, #0]
 c005548:	461a      	mov	r2, r3
 c00554a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 c00554c:	643b      	str	r3, [r7, #64]	; 0x40
 c00554e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005550:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 c005552:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 c005554:	e841 2300 	strex	r3, r2, [r1]
 c005558:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 c00555a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 c00555c:	2b00      	cmp	r3, #0
 c00555e:	d1e6      	bne.n	c00552e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 c005560:	687b      	ldr	r3, [r7, #4]
 c005562:	681b      	ldr	r3, [r3, #0]
 c005564:	3308      	adds	r3, #8
 c005566:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c005568:	6a3b      	ldr	r3, [r7, #32]
 c00556a:	e853 3f00 	ldrex	r3, [r3]
 c00556e:	61fb      	str	r3, [r7, #28]
   return(result);
 c005570:	69fb      	ldr	r3, [r7, #28]
 c005572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 c005576:	f023 0301 	bic.w	r3, r3, #1
 c00557a:	64bb      	str	r3, [r7, #72]	; 0x48
 c00557c:	687b      	ldr	r3, [r7, #4]
 c00557e:	681b      	ldr	r3, [r3, #0]
 c005580:	3308      	adds	r3, #8
 c005582:	6cba      	ldr	r2, [r7, #72]	; 0x48
 c005584:	62fa      	str	r2, [r7, #44]	; 0x2c
 c005586:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c005588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 c00558a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 c00558c:	e841 2300 	strex	r3, r2, [r1]
 c005590:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 c005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 c005594:	2b00      	cmp	r3, #0
 c005596:	d1e3      	bne.n	c005560 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 c005598:	687b      	ldr	r3, [r7, #4]
 c00559a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 c00559c:	2b01      	cmp	r3, #1
 c00559e:	d118      	bne.n	c0055d2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 c0055a0:	687b      	ldr	r3, [r7, #4]
 c0055a2:	681b      	ldr	r3, [r3, #0]
 c0055a4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 c0055a6:	68fb      	ldr	r3, [r7, #12]
 c0055a8:	e853 3f00 	ldrex	r3, [r3]
 c0055ac:	60bb      	str	r3, [r7, #8]
   return(result);
 c0055ae:	68bb      	ldr	r3, [r7, #8]
 c0055b0:	f023 0310 	bic.w	r3, r3, #16
 c0055b4:	647b      	str	r3, [r7, #68]	; 0x44
 c0055b6:	687b      	ldr	r3, [r7, #4]
 c0055b8:	681b      	ldr	r3, [r3, #0]
 c0055ba:	461a      	mov	r2, r3
 c0055bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 c0055be:	61bb      	str	r3, [r7, #24]
 c0055c0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 c0055c2:	6979      	ldr	r1, [r7, #20]
 c0055c4:	69ba      	ldr	r2, [r7, #24]
 c0055c6:	e841 2300 	strex	r3, r2, [r1]
 c0055ca:	613b      	str	r3, [r7, #16]
   return(result);
 c0055cc:	693b      	ldr	r3, [r7, #16]
 c0055ce:	2b00      	cmp	r3, #0
 c0055d0:	d1e6      	bne.n	c0055a0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 c0055d2:	687b      	ldr	r3, [r7, #4]
 c0055d4:	2220      	movs	r2, #32
 c0055d6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 c0055da:	687b      	ldr	r3, [r7, #4]
 c0055dc:	2200      	movs	r2, #0
 c0055de:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 c0055e0:	687b      	ldr	r3, [r7, #4]
 c0055e2:	2200      	movs	r2, #0
 c0055e4:	675a      	str	r2, [r3, #116]	; 0x74
}
 c0055e6:	bf00      	nop
 c0055e8:	3754      	adds	r7, #84	; 0x54
 c0055ea:	46bd      	mov	sp, r7
 c0055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0055f0:	4770      	bx	lr

0c0055f2 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 c0055f2:	b480      	push	{r7}
 c0055f4:	b085      	sub	sp, #20
 c0055f6:	af00      	add	r7, sp, #0
 c0055f8:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0055fa:	687b      	ldr	r3, [r7, #4]
 c0055fc:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c005600:	2b01      	cmp	r3, #1
 c005602:	d101      	bne.n	c005608 <HAL_UARTEx_DisableFifoMode+0x16>
 c005604:	2302      	movs	r3, #2
 c005606:	e027      	b.n	c005658 <HAL_UARTEx_DisableFifoMode+0x66>
 c005608:	687b      	ldr	r3, [r7, #4]
 c00560a:	2201      	movs	r2, #1
 c00560c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c005610:	687b      	ldr	r3, [r7, #4]
 c005612:	2224      	movs	r2, #36	; 0x24
 c005614:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005618:	687b      	ldr	r3, [r7, #4]
 c00561a:	681b      	ldr	r3, [r3, #0]
 c00561c:	681b      	ldr	r3, [r3, #0]
 c00561e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005620:	687b      	ldr	r3, [r7, #4]
 c005622:	681b      	ldr	r3, [r3, #0]
 c005624:	681a      	ldr	r2, [r3, #0]
 c005626:	687b      	ldr	r3, [r7, #4]
 c005628:	681b      	ldr	r3, [r3, #0]
 c00562a:	f022 0201 	bic.w	r2, r2, #1
 c00562e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 c005630:	68fb      	ldr	r3, [r7, #12]
 c005632:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 c005636:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 c005638:	687b      	ldr	r3, [r7, #4]
 c00563a:	2200      	movs	r2, #0
 c00563c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00563e:	687b      	ldr	r3, [r7, #4]
 c005640:	681b      	ldr	r3, [r3, #0]
 c005642:	68fa      	ldr	r2, [r7, #12]
 c005644:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005646:	687b      	ldr	r3, [r7, #4]
 c005648:	2220      	movs	r2, #32
 c00564a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00564e:	687b      	ldr	r3, [r7, #4]
 c005650:	2200      	movs	r2, #0
 c005652:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c005656:	2300      	movs	r3, #0
}
 c005658:	4618      	mov	r0, r3
 c00565a:	3714      	adds	r7, #20
 c00565c:	46bd      	mov	sp, r7
 c00565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 c005662:	4770      	bx	lr

0c005664 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c005664:	b580      	push	{r7, lr}
 c005666:	b084      	sub	sp, #16
 c005668:	af00      	add	r7, sp, #0
 c00566a:	6078      	str	r0, [r7, #4]
 c00566c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c00566e:	687b      	ldr	r3, [r7, #4]
 c005670:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c005674:	2b01      	cmp	r3, #1
 c005676:	d101      	bne.n	c00567c <HAL_UARTEx_SetTxFifoThreshold+0x18>
 c005678:	2302      	movs	r3, #2
 c00567a:	e02d      	b.n	c0056d8 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 c00567c:	687b      	ldr	r3, [r7, #4]
 c00567e:	2201      	movs	r2, #1
 c005680:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c005684:	687b      	ldr	r3, [r7, #4]
 c005686:	2224      	movs	r2, #36	; 0x24
 c005688:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c00568c:	687b      	ldr	r3, [r7, #4]
 c00568e:	681b      	ldr	r3, [r3, #0]
 c005690:	681b      	ldr	r3, [r3, #0]
 c005692:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005694:	687b      	ldr	r3, [r7, #4]
 c005696:	681b      	ldr	r3, [r3, #0]
 c005698:	681a      	ldr	r2, [r3, #0]
 c00569a:	687b      	ldr	r3, [r7, #4]
 c00569c:	681b      	ldr	r3, [r3, #0]
 c00569e:	f022 0201 	bic.w	r2, r2, #1
 c0056a2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 c0056a4:	687b      	ldr	r3, [r7, #4]
 c0056a6:	681b      	ldr	r3, [r3, #0]
 c0056a8:	689b      	ldr	r3, [r3, #8]
 c0056aa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 c0056ae:	687b      	ldr	r3, [r7, #4]
 c0056b0:	681b      	ldr	r3, [r3, #0]
 c0056b2:	683a      	ldr	r2, [r7, #0]
 c0056b4:	430a      	orrs	r2, r1
 c0056b6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c0056b8:	6878      	ldr	r0, [r7, #4]
 c0056ba:	f000 f84f 	bl	c00575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c0056be:	687b      	ldr	r3, [r7, #4]
 c0056c0:	681b      	ldr	r3, [r3, #0]
 c0056c2:	68fa      	ldr	r2, [r7, #12]
 c0056c4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c0056c6:	687b      	ldr	r3, [r7, #4]
 c0056c8:	2220      	movs	r2, #32
 c0056ca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c0056ce:	687b      	ldr	r3, [r7, #4]
 c0056d0:	2200      	movs	r2, #0
 c0056d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c0056d6:	2300      	movs	r3, #0
}
 c0056d8:	4618      	mov	r0, r3
 c0056da:	3710      	adds	r7, #16
 c0056dc:	46bd      	mov	sp, r7
 c0056de:	bd80      	pop	{r7, pc}

0c0056e0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 c0056e0:	b580      	push	{r7, lr}
 c0056e2:	b084      	sub	sp, #16
 c0056e4:	af00      	add	r7, sp, #0
 c0056e6:	6078      	str	r0, [r7, #4]
 c0056e8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 c0056ea:	687b      	ldr	r3, [r7, #4]
 c0056ec:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 c0056f0:	2b01      	cmp	r3, #1
 c0056f2:	d101      	bne.n	c0056f8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 c0056f4:	2302      	movs	r3, #2
 c0056f6:	e02d      	b.n	c005754 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 c0056f8:	687b      	ldr	r3, [r7, #4]
 c0056fa:	2201      	movs	r2, #1
 c0056fc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 c005700:	687b      	ldr	r3, [r7, #4]
 c005702:	2224      	movs	r2, #36	; 0x24
 c005704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 c005708:	687b      	ldr	r3, [r7, #4]
 c00570a:	681b      	ldr	r3, [r3, #0]
 c00570c:	681b      	ldr	r3, [r3, #0]
 c00570e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 c005710:	687b      	ldr	r3, [r7, #4]
 c005712:	681b      	ldr	r3, [r3, #0]
 c005714:	681a      	ldr	r2, [r3, #0]
 c005716:	687b      	ldr	r3, [r7, #4]
 c005718:	681b      	ldr	r3, [r3, #0]
 c00571a:	f022 0201 	bic.w	r2, r2, #1
 c00571e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 c005720:	687b      	ldr	r3, [r7, #4]
 c005722:	681b      	ldr	r3, [r3, #0]
 c005724:	689b      	ldr	r3, [r3, #8]
 c005726:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 c00572a:	687b      	ldr	r3, [r7, #4]
 c00572c:	681b      	ldr	r3, [r3, #0]
 c00572e:	683a      	ldr	r2, [r7, #0]
 c005730:	430a      	orrs	r2, r1
 c005732:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 c005734:	6878      	ldr	r0, [r7, #4]
 c005736:	f000 f811 	bl	c00575c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 c00573a:	687b      	ldr	r3, [r7, #4]
 c00573c:	681b      	ldr	r3, [r3, #0]
 c00573e:	68fa      	ldr	r2, [r7, #12]
 c005740:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 c005742:	687b      	ldr	r3, [r7, #4]
 c005744:	2220      	movs	r2, #32
 c005746:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 c00574a:	687b      	ldr	r3, [r7, #4]
 c00574c:	2200      	movs	r2, #0
 c00574e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 c005752:	2300      	movs	r3, #0
}
 c005754:	4618      	mov	r0, r3
 c005756:	3710      	adds	r7, #16
 c005758:	46bd      	mov	sp, r7
 c00575a:	bd80      	pop	{r7, pc}

0c00575c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 c00575c:	b480      	push	{r7}
 c00575e:	b085      	sub	sp, #20
 c005760:	af00      	add	r7, sp, #0
 c005762:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 c005764:	687b      	ldr	r3, [r7, #4]
 c005766:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 c005768:	2b00      	cmp	r3, #0
 c00576a:	d108      	bne.n	c00577e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 c00576c:	687b      	ldr	r3, [r7, #4]
 c00576e:	2201      	movs	r2, #1
 c005770:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 c005774:	687b      	ldr	r3, [r7, #4]
 c005776:	2201      	movs	r2, #1
 c005778:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 c00577c:	e031      	b.n	c0057e2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 c00577e:	2308      	movs	r3, #8
 c005780:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 c005782:	2308      	movs	r3, #8
 c005784:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 c005786:	687b      	ldr	r3, [r7, #4]
 c005788:	681b      	ldr	r3, [r3, #0]
 c00578a:	689b      	ldr	r3, [r3, #8]
 c00578c:	0e5b      	lsrs	r3, r3, #25
 c00578e:	b2db      	uxtb	r3, r3
 c005790:	f003 0307 	and.w	r3, r3, #7
 c005794:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 c005796:	687b      	ldr	r3, [r7, #4]
 c005798:	681b      	ldr	r3, [r3, #0]
 c00579a:	689b      	ldr	r3, [r3, #8]
 c00579c:	0f5b      	lsrs	r3, r3, #29
 c00579e:	b2db      	uxtb	r3, r3
 c0057a0:	f003 0307 	and.w	r3, r3, #7
 c0057a4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c0057a6:	7bbb      	ldrb	r3, [r7, #14]
 c0057a8:	7b3a      	ldrb	r2, [r7, #12]
 c0057aa:	4911      	ldr	r1, [pc, #68]	; (c0057f0 <UARTEx_SetNbDataToProcess+0x94>)
 c0057ac:	5c8a      	ldrb	r2, [r1, r2]
 c0057ae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 c0057b2:	7b3a      	ldrb	r2, [r7, #12]
 c0057b4:	490f      	ldr	r1, [pc, #60]	; (c0057f4 <UARTEx_SetNbDataToProcess+0x98>)
 c0057b6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 c0057b8:	fb93 f3f2 	sdiv	r3, r3, r2
 c0057bc:	b29a      	uxth	r2, r3
 c0057be:	687b      	ldr	r3, [r7, #4]
 c0057c0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c0057c4:	7bfb      	ldrb	r3, [r7, #15]
 c0057c6:	7b7a      	ldrb	r2, [r7, #13]
 c0057c8:	4909      	ldr	r1, [pc, #36]	; (c0057f0 <UARTEx_SetNbDataToProcess+0x94>)
 c0057ca:	5c8a      	ldrb	r2, [r1, r2]
 c0057cc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 c0057d0:	7b7a      	ldrb	r2, [r7, #13]
 c0057d2:	4908      	ldr	r1, [pc, #32]	; (c0057f4 <UARTEx_SetNbDataToProcess+0x98>)
 c0057d4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 c0057d6:	fb93 f3f2 	sdiv	r3, r3, r2
 c0057da:	b29a      	uxth	r2, r3
 c0057dc:	687b      	ldr	r3, [r7, #4]
 c0057de:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 c0057e2:	bf00      	nop
 c0057e4:	3714      	adds	r7, #20
 c0057e6:	46bd      	mov	sp, r7
 c0057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 c0057ec:	4770      	bx	lr
 c0057ee:	bf00      	nop
 c0057f0:	0c006900 	.word	0x0c006900
 c0057f4:	0c006908 	.word	0x0c006908

0c0057f8 <__errno>:
 c0057f8:	4b01      	ldr	r3, [pc, #4]	; (c005800 <__errno+0x8>)
 c0057fa:	6818      	ldr	r0, [r3, #0]
 c0057fc:	4770      	bx	lr
 c0057fe:	bf00      	nop
 c005800:	3000000c 	.word	0x3000000c

0c005804 <__libc_init_array>:
 c005804:	b570      	push	{r4, r5, r6, lr}
 c005806:	4d0d      	ldr	r5, [pc, #52]	; (c00583c <__libc_init_array+0x38>)
 c005808:	2600      	movs	r6, #0
 c00580a:	4c0d      	ldr	r4, [pc, #52]	; (c005840 <__libc_init_array+0x3c>)
 c00580c:	1b64      	subs	r4, r4, r5
 c00580e:	10a4      	asrs	r4, r4, #2
 c005810:	42a6      	cmp	r6, r4
 c005812:	d109      	bne.n	c005828 <__libc_init_array+0x24>
 c005814:	4d0b      	ldr	r5, [pc, #44]	; (c005844 <__libc_init_array+0x40>)
 c005816:	2600      	movs	r6, #0
 c005818:	4c0b      	ldr	r4, [pc, #44]	; (c005848 <__libc_init_array+0x44>)
 c00581a:	f000 ffbb 	bl	c006794 <_init>
 c00581e:	1b64      	subs	r4, r4, r5
 c005820:	10a4      	asrs	r4, r4, #2
 c005822:	42a6      	cmp	r6, r4
 c005824:	d105      	bne.n	c005832 <__libc_init_array+0x2e>
 c005826:	bd70      	pop	{r4, r5, r6, pc}
 c005828:	f855 3b04 	ldr.w	r3, [r5], #4
 c00582c:	3601      	adds	r6, #1
 c00582e:	4798      	blx	r3
 c005830:	e7ee      	b.n	c005810 <__libc_init_array+0xc>
 c005832:	f855 3b04 	ldr.w	r3, [r5], #4
 c005836:	3601      	adds	r6, #1
 c005838:	4798      	blx	r3
 c00583a:	e7f2      	b.n	c005822 <__libc_init_array+0x1e>
 c00583c:	0c0069b0 	.word	0x0c0069b0
 c005840:	0c0069b0 	.word	0x0c0069b0
 c005844:	0c0069b0 	.word	0x0c0069b0
 c005848:	0c0069b4 	.word	0x0c0069b4

0c00584c <memset>:
 c00584c:	4402      	add	r2, r0
 c00584e:	4603      	mov	r3, r0
 c005850:	4293      	cmp	r3, r2
 c005852:	d100      	bne.n	c005856 <memset+0xa>
 c005854:	4770      	bx	lr
 c005856:	f803 1b01 	strb.w	r1, [r3], #1
 c00585a:	e7f9      	b.n	c005850 <memset+0x4>

0c00585c <iprintf>:
 c00585c:	b40f      	push	{r0, r1, r2, r3}
 c00585e:	4b0a      	ldr	r3, [pc, #40]	; (c005888 <iprintf+0x2c>)
 c005860:	b513      	push	{r0, r1, r4, lr}
 c005862:	681c      	ldr	r4, [r3, #0]
 c005864:	b124      	cbz	r4, c005870 <iprintf+0x14>
 c005866:	69a3      	ldr	r3, [r4, #24]
 c005868:	b913      	cbnz	r3, c005870 <iprintf+0x14>
 c00586a:	4620      	mov	r0, r4
 c00586c:	f000 f866 	bl	c00593c <__sinit>
 c005870:	ab05      	add	r3, sp, #20
 c005872:	9a04      	ldr	r2, [sp, #16]
 c005874:	68a1      	ldr	r1, [r4, #8]
 c005876:	4620      	mov	r0, r4
 c005878:	9301      	str	r3, [sp, #4]
 c00587a:	f000 f9bd 	bl	c005bf8 <_vfiprintf_r>
 c00587e:	b002      	add	sp, #8
 c005880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c005884:	b004      	add	sp, #16
 c005886:	4770      	bx	lr
 c005888:	3000000c 	.word	0x3000000c

0c00588c <std>:
 c00588c:	2300      	movs	r3, #0
 c00588e:	b510      	push	{r4, lr}
 c005890:	4604      	mov	r4, r0
 c005892:	6083      	str	r3, [r0, #8]
 c005894:	8181      	strh	r1, [r0, #12]
 c005896:	4619      	mov	r1, r3
 c005898:	6643      	str	r3, [r0, #100]	; 0x64
 c00589a:	81c2      	strh	r2, [r0, #14]
 c00589c:	2208      	movs	r2, #8
 c00589e:	6183      	str	r3, [r0, #24]
 c0058a0:	e9c0 3300 	strd	r3, r3, [r0]
 c0058a4:	e9c0 3304 	strd	r3, r3, [r0, #16]
 c0058a8:	305c      	adds	r0, #92	; 0x5c
 c0058aa:	f7ff ffcf 	bl	c00584c <memset>
 c0058ae:	4b05      	ldr	r3, [pc, #20]	; (c0058c4 <std+0x38>)
 c0058b0:	6224      	str	r4, [r4, #32]
 c0058b2:	6263      	str	r3, [r4, #36]	; 0x24
 c0058b4:	4b04      	ldr	r3, [pc, #16]	; (c0058c8 <std+0x3c>)
 c0058b6:	62a3      	str	r3, [r4, #40]	; 0x28
 c0058b8:	4b04      	ldr	r3, [pc, #16]	; (c0058cc <std+0x40>)
 c0058ba:	62e3      	str	r3, [r4, #44]	; 0x2c
 c0058bc:	4b04      	ldr	r3, [pc, #16]	; (c0058d0 <std+0x44>)
 c0058be:	6323      	str	r3, [r4, #48]	; 0x30
 c0058c0:	bd10      	pop	{r4, pc}
 c0058c2:	bf00      	nop
 c0058c4:	0c0061a5 	.word	0x0c0061a5
 c0058c8:	0c0061c7 	.word	0x0c0061c7
 c0058cc:	0c0061ff 	.word	0x0c0061ff
 c0058d0:	0c006223 	.word	0x0c006223

0c0058d4 <_cleanup_r>:
 c0058d4:	4901      	ldr	r1, [pc, #4]	; (c0058dc <_cleanup_r+0x8>)
 c0058d6:	f000 b8af 	b.w	c005a38 <_fwalk_reent>
 c0058da:	bf00      	nop
 c0058dc:	0c0064f9 	.word	0x0c0064f9

0c0058e0 <__sfmoreglue>:
 c0058e0:	b570      	push	{r4, r5, r6, lr}
 c0058e2:	2268      	movs	r2, #104	; 0x68
 c0058e4:	1e4d      	subs	r5, r1, #1
 c0058e6:	460e      	mov	r6, r1
 c0058e8:	4355      	muls	r5, r2
 c0058ea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 c0058ee:	f000 f8e5 	bl	c005abc <_malloc_r>
 c0058f2:	4604      	mov	r4, r0
 c0058f4:	b140      	cbz	r0, c005908 <__sfmoreglue+0x28>
 c0058f6:	2100      	movs	r1, #0
 c0058f8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 c0058fc:	e9c0 1600 	strd	r1, r6, [r0]
 c005900:	300c      	adds	r0, #12
 c005902:	60a0      	str	r0, [r4, #8]
 c005904:	f7ff ffa2 	bl	c00584c <memset>
 c005908:	4620      	mov	r0, r4
 c00590a:	bd70      	pop	{r4, r5, r6, pc}

0c00590c <__sfp_lock_acquire>:
 c00590c:	4801      	ldr	r0, [pc, #4]	; (c005914 <__sfp_lock_acquire+0x8>)
 c00590e:	f000 b8b3 	b.w	c005a78 <__retarget_lock_acquire_recursive>
 c005912:	bf00      	nop
 c005914:	300002a9 	.word	0x300002a9

0c005918 <__sfp_lock_release>:
 c005918:	4801      	ldr	r0, [pc, #4]	; (c005920 <__sfp_lock_release+0x8>)
 c00591a:	f000 b8ae 	b.w	c005a7a <__retarget_lock_release_recursive>
 c00591e:	bf00      	nop
 c005920:	300002a9 	.word	0x300002a9

0c005924 <__sinit_lock_acquire>:
 c005924:	4801      	ldr	r0, [pc, #4]	; (c00592c <__sinit_lock_acquire+0x8>)
 c005926:	f000 b8a7 	b.w	c005a78 <__retarget_lock_acquire_recursive>
 c00592a:	bf00      	nop
 c00592c:	300002aa 	.word	0x300002aa

0c005930 <__sinit_lock_release>:
 c005930:	4801      	ldr	r0, [pc, #4]	; (c005938 <__sinit_lock_release+0x8>)
 c005932:	f000 b8a2 	b.w	c005a7a <__retarget_lock_release_recursive>
 c005936:	bf00      	nop
 c005938:	300002aa 	.word	0x300002aa

0c00593c <__sinit>:
 c00593c:	b510      	push	{r4, lr}
 c00593e:	4604      	mov	r4, r0
 c005940:	f7ff fff0 	bl	c005924 <__sinit_lock_acquire>
 c005944:	69a3      	ldr	r3, [r4, #24]
 c005946:	b11b      	cbz	r3, c005950 <__sinit+0x14>
 c005948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 c00594c:	f7ff bff0 	b.w	c005930 <__sinit_lock_release>
 c005950:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 c005954:	6523      	str	r3, [r4, #80]	; 0x50
 c005956:	4620      	mov	r0, r4
 c005958:	4b12      	ldr	r3, [pc, #72]	; (c0059a4 <__sinit+0x68>)
 c00595a:	4a13      	ldr	r2, [pc, #76]	; (c0059a8 <__sinit+0x6c>)
 c00595c:	681b      	ldr	r3, [r3, #0]
 c00595e:	62a2      	str	r2, [r4, #40]	; 0x28
 c005960:	42a3      	cmp	r3, r4
 c005962:	bf04      	itt	eq
 c005964:	2301      	moveq	r3, #1
 c005966:	61a3      	streq	r3, [r4, #24]
 c005968:	f000 f820 	bl	c0059ac <__sfp>
 c00596c:	6060      	str	r0, [r4, #4]
 c00596e:	4620      	mov	r0, r4
 c005970:	f000 f81c 	bl	c0059ac <__sfp>
 c005974:	60a0      	str	r0, [r4, #8]
 c005976:	4620      	mov	r0, r4
 c005978:	f000 f818 	bl	c0059ac <__sfp>
 c00597c:	2200      	movs	r2, #0
 c00597e:	2104      	movs	r1, #4
 c005980:	60e0      	str	r0, [r4, #12]
 c005982:	6860      	ldr	r0, [r4, #4]
 c005984:	f7ff ff82 	bl	c00588c <std>
 c005988:	2201      	movs	r2, #1
 c00598a:	2109      	movs	r1, #9
 c00598c:	68a0      	ldr	r0, [r4, #8]
 c00598e:	f7ff ff7d 	bl	c00588c <std>
 c005992:	2202      	movs	r2, #2
 c005994:	2112      	movs	r1, #18
 c005996:	68e0      	ldr	r0, [r4, #12]
 c005998:	f7ff ff78 	bl	c00588c <std>
 c00599c:	2301      	movs	r3, #1
 c00599e:	61a3      	str	r3, [r4, #24]
 c0059a0:	e7d2      	b.n	c005948 <__sinit+0xc>
 c0059a2:	bf00      	nop
 c0059a4:	0c006910 	.word	0x0c006910
 c0059a8:	0c0058d5 	.word	0x0c0058d5

0c0059ac <__sfp>:
 c0059ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0059ae:	4607      	mov	r7, r0
 c0059b0:	f7ff ffac 	bl	c00590c <__sfp_lock_acquire>
 c0059b4:	4b1e      	ldr	r3, [pc, #120]	; (c005a30 <__sfp+0x84>)
 c0059b6:	681e      	ldr	r6, [r3, #0]
 c0059b8:	69b3      	ldr	r3, [r6, #24]
 c0059ba:	b913      	cbnz	r3, c0059c2 <__sfp+0x16>
 c0059bc:	4630      	mov	r0, r6
 c0059be:	f7ff ffbd 	bl	c00593c <__sinit>
 c0059c2:	3648      	adds	r6, #72	; 0x48
 c0059c4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 c0059c8:	3b01      	subs	r3, #1
 c0059ca:	d503      	bpl.n	c0059d4 <__sfp+0x28>
 c0059cc:	6833      	ldr	r3, [r6, #0]
 c0059ce:	b30b      	cbz	r3, c005a14 <__sfp+0x68>
 c0059d0:	6836      	ldr	r6, [r6, #0]
 c0059d2:	e7f7      	b.n	c0059c4 <__sfp+0x18>
 c0059d4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 c0059d8:	b9d5      	cbnz	r5, c005a10 <__sfp+0x64>
 c0059da:	4b16      	ldr	r3, [pc, #88]	; (c005a34 <__sfp+0x88>)
 c0059dc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 c0059e0:	6665      	str	r5, [r4, #100]	; 0x64
 c0059e2:	60e3      	str	r3, [r4, #12]
 c0059e4:	f000 f847 	bl	c005a76 <__retarget_lock_init_recursive>
 c0059e8:	f7ff ff96 	bl	c005918 <__sfp_lock_release>
 c0059ec:	2208      	movs	r2, #8
 c0059ee:	4629      	mov	r1, r5
 c0059f0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 c0059f4:	6025      	str	r5, [r4, #0]
 c0059f6:	61a5      	str	r5, [r4, #24]
 c0059f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 c0059fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 c005a00:	f7ff ff24 	bl	c00584c <memset>
 c005a04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 c005a08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 c005a0c:	4620      	mov	r0, r4
 c005a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c005a10:	3468      	adds	r4, #104	; 0x68
 c005a12:	e7d9      	b.n	c0059c8 <__sfp+0x1c>
 c005a14:	2104      	movs	r1, #4
 c005a16:	4638      	mov	r0, r7
 c005a18:	f7ff ff62 	bl	c0058e0 <__sfmoreglue>
 c005a1c:	4604      	mov	r4, r0
 c005a1e:	6030      	str	r0, [r6, #0]
 c005a20:	2800      	cmp	r0, #0
 c005a22:	d1d5      	bne.n	c0059d0 <__sfp+0x24>
 c005a24:	f7ff ff78 	bl	c005918 <__sfp_lock_release>
 c005a28:	230c      	movs	r3, #12
 c005a2a:	603b      	str	r3, [r7, #0]
 c005a2c:	e7ee      	b.n	c005a0c <__sfp+0x60>
 c005a2e:	bf00      	nop
 c005a30:	0c006910 	.word	0x0c006910
 c005a34:	ffff0001 	.word	0xffff0001

0c005a38 <_fwalk_reent>:
 c005a38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 c005a3c:	4606      	mov	r6, r0
 c005a3e:	4688      	mov	r8, r1
 c005a40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 c005a44:	2700      	movs	r7, #0
 c005a46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 c005a4a:	f1b9 0901 	subs.w	r9, r9, #1
 c005a4e:	d505      	bpl.n	c005a5c <_fwalk_reent+0x24>
 c005a50:	6824      	ldr	r4, [r4, #0]
 c005a52:	2c00      	cmp	r4, #0
 c005a54:	d1f7      	bne.n	c005a46 <_fwalk_reent+0xe>
 c005a56:	4638      	mov	r0, r7
 c005a58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 c005a5c:	89ab      	ldrh	r3, [r5, #12]
 c005a5e:	2b01      	cmp	r3, #1
 c005a60:	d907      	bls.n	c005a72 <_fwalk_reent+0x3a>
 c005a62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 c005a66:	3301      	adds	r3, #1
 c005a68:	d003      	beq.n	c005a72 <_fwalk_reent+0x3a>
 c005a6a:	4629      	mov	r1, r5
 c005a6c:	4630      	mov	r0, r6
 c005a6e:	47c0      	blx	r8
 c005a70:	4307      	orrs	r7, r0
 c005a72:	3568      	adds	r5, #104	; 0x68
 c005a74:	e7e9      	b.n	c005a4a <_fwalk_reent+0x12>

0c005a76 <__retarget_lock_init_recursive>:
 c005a76:	4770      	bx	lr

0c005a78 <__retarget_lock_acquire_recursive>:
 c005a78:	4770      	bx	lr

0c005a7a <__retarget_lock_release_recursive>:
 c005a7a:	4770      	bx	lr

0c005a7c <sbrk_aligned>:
 c005a7c:	b570      	push	{r4, r5, r6, lr}
 c005a7e:	4e0e      	ldr	r6, [pc, #56]	; (c005ab8 <sbrk_aligned+0x3c>)
 c005a80:	460c      	mov	r4, r1
 c005a82:	4605      	mov	r5, r0
 c005a84:	6831      	ldr	r1, [r6, #0]
 c005a86:	b911      	cbnz	r1, c005a8e <sbrk_aligned+0x12>
 c005a88:	f000 fb7c 	bl	c006184 <_sbrk_r>
 c005a8c:	6030      	str	r0, [r6, #0]
 c005a8e:	4621      	mov	r1, r4
 c005a90:	4628      	mov	r0, r5
 c005a92:	f000 fb77 	bl	c006184 <_sbrk_r>
 c005a96:	1c43      	adds	r3, r0, #1
 c005a98:	d00a      	beq.n	c005ab0 <sbrk_aligned+0x34>
 c005a9a:	1cc4      	adds	r4, r0, #3
 c005a9c:	f024 0403 	bic.w	r4, r4, #3
 c005aa0:	42a0      	cmp	r0, r4
 c005aa2:	d007      	beq.n	c005ab4 <sbrk_aligned+0x38>
 c005aa4:	1a21      	subs	r1, r4, r0
 c005aa6:	4628      	mov	r0, r5
 c005aa8:	f000 fb6c 	bl	c006184 <_sbrk_r>
 c005aac:	3001      	adds	r0, #1
 c005aae:	d101      	bne.n	c005ab4 <sbrk_aligned+0x38>
 c005ab0:	f04f 34ff 	mov.w	r4, #4294967295
 c005ab4:	4620      	mov	r0, r4
 c005ab6:	bd70      	pop	{r4, r5, r6, pc}
 c005ab8:	300002b0 	.word	0x300002b0

0c005abc <_malloc_r>:
 c005abc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c005ac0:	1ccd      	adds	r5, r1, #3
 c005ac2:	4607      	mov	r7, r0
 c005ac4:	f025 0503 	bic.w	r5, r5, #3
 c005ac8:	3508      	adds	r5, #8
 c005aca:	2d0c      	cmp	r5, #12
 c005acc:	bf38      	it	cc
 c005ace:	250c      	movcc	r5, #12
 c005ad0:	2d00      	cmp	r5, #0
 c005ad2:	db01      	blt.n	c005ad8 <_malloc_r+0x1c>
 c005ad4:	42a9      	cmp	r1, r5
 c005ad6:	d905      	bls.n	c005ae4 <_malloc_r+0x28>
 c005ad8:	230c      	movs	r3, #12
 c005ada:	2600      	movs	r6, #0
 c005adc:	603b      	str	r3, [r7, #0]
 c005ade:	4630      	mov	r0, r6
 c005ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c005ae4:	4e2e      	ldr	r6, [pc, #184]	; (c005ba0 <_malloc_r+0xe4>)
 c005ae6:	f000 fdc9 	bl	c00667c <__malloc_lock>
 c005aea:	6833      	ldr	r3, [r6, #0]
 c005aec:	461c      	mov	r4, r3
 c005aee:	bb34      	cbnz	r4, c005b3e <_malloc_r+0x82>
 c005af0:	4629      	mov	r1, r5
 c005af2:	4638      	mov	r0, r7
 c005af4:	f7ff ffc2 	bl	c005a7c <sbrk_aligned>
 c005af8:	1c43      	adds	r3, r0, #1
 c005afa:	4604      	mov	r4, r0
 c005afc:	d14d      	bne.n	c005b9a <_malloc_r+0xde>
 c005afe:	6834      	ldr	r4, [r6, #0]
 c005b00:	4626      	mov	r6, r4
 c005b02:	2e00      	cmp	r6, #0
 c005b04:	d140      	bne.n	c005b88 <_malloc_r+0xcc>
 c005b06:	6823      	ldr	r3, [r4, #0]
 c005b08:	4631      	mov	r1, r6
 c005b0a:	4638      	mov	r0, r7
 c005b0c:	eb04 0803 	add.w	r8, r4, r3
 c005b10:	f000 fb38 	bl	c006184 <_sbrk_r>
 c005b14:	4580      	cmp	r8, r0
 c005b16:	d13a      	bne.n	c005b8e <_malloc_r+0xd2>
 c005b18:	6821      	ldr	r1, [r4, #0]
 c005b1a:	3503      	adds	r5, #3
 c005b1c:	4638      	mov	r0, r7
 c005b1e:	1a6d      	subs	r5, r5, r1
 c005b20:	f025 0503 	bic.w	r5, r5, #3
 c005b24:	3508      	adds	r5, #8
 c005b26:	2d0c      	cmp	r5, #12
 c005b28:	bf38      	it	cc
 c005b2a:	250c      	movcc	r5, #12
 c005b2c:	4629      	mov	r1, r5
 c005b2e:	f7ff ffa5 	bl	c005a7c <sbrk_aligned>
 c005b32:	3001      	adds	r0, #1
 c005b34:	d02b      	beq.n	c005b8e <_malloc_r+0xd2>
 c005b36:	6823      	ldr	r3, [r4, #0]
 c005b38:	442b      	add	r3, r5
 c005b3a:	6023      	str	r3, [r4, #0]
 c005b3c:	e00e      	b.n	c005b5c <_malloc_r+0xa0>
 c005b3e:	6822      	ldr	r2, [r4, #0]
 c005b40:	1b52      	subs	r2, r2, r5
 c005b42:	d41e      	bmi.n	c005b82 <_malloc_r+0xc6>
 c005b44:	2a0b      	cmp	r2, #11
 c005b46:	d916      	bls.n	c005b76 <_malloc_r+0xba>
 c005b48:	1961      	adds	r1, r4, r5
 c005b4a:	42a3      	cmp	r3, r4
 c005b4c:	6025      	str	r5, [r4, #0]
 c005b4e:	bf18      	it	ne
 c005b50:	6059      	strne	r1, [r3, #4]
 c005b52:	6863      	ldr	r3, [r4, #4]
 c005b54:	bf08      	it	eq
 c005b56:	6031      	streq	r1, [r6, #0]
 c005b58:	5162      	str	r2, [r4, r5]
 c005b5a:	604b      	str	r3, [r1, #4]
 c005b5c:	f104 060b 	add.w	r6, r4, #11
 c005b60:	4638      	mov	r0, r7
 c005b62:	f000 fd91 	bl	c006688 <__malloc_unlock>
 c005b66:	1d23      	adds	r3, r4, #4
 c005b68:	f026 0607 	bic.w	r6, r6, #7
 c005b6c:	1af2      	subs	r2, r6, r3
 c005b6e:	d0b6      	beq.n	c005ade <_malloc_r+0x22>
 c005b70:	1b9b      	subs	r3, r3, r6
 c005b72:	50a3      	str	r3, [r4, r2]
 c005b74:	e7b3      	b.n	c005ade <_malloc_r+0x22>
 c005b76:	6862      	ldr	r2, [r4, #4]
 c005b78:	42a3      	cmp	r3, r4
 c005b7a:	bf0c      	ite	eq
 c005b7c:	6032      	streq	r2, [r6, #0]
 c005b7e:	605a      	strne	r2, [r3, #4]
 c005b80:	e7ec      	b.n	c005b5c <_malloc_r+0xa0>
 c005b82:	4623      	mov	r3, r4
 c005b84:	6864      	ldr	r4, [r4, #4]
 c005b86:	e7b2      	b.n	c005aee <_malloc_r+0x32>
 c005b88:	4634      	mov	r4, r6
 c005b8a:	6876      	ldr	r6, [r6, #4]
 c005b8c:	e7b9      	b.n	c005b02 <_malloc_r+0x46>
 c005b8e:	230c      	movs	r3, #12
 c005b90:	4638      	mov	r0, r7
 c005b92:	603b      	str	r3, [r7, #0]
 c005b94:	f000 fd78 	bl	c006688 <__malloc_unlock>
 c005b98:	e7a1      	b.n	c005ade <_malloc_r+0x22>
 c005b9a:	6025      	str	r5, [r4, #0]
 c005b9c:	e7de      	b.n	c005b5c <_malloc_r+0xa0>
 c005b9e:	bf00      	nop
 c005ba0:	300002ac 	.word	0x300002ac

0c005ba4 <__sfputc_r>:
 c005ba4:	6893      	ldr	r3, [r2, #8]
 c005ba6:	3b01      	subs	r3, #1
 c005ba8:	2b00      	cmp	r3, #0
 c005baa:	6093      	str	r3, [r2, #8]
 c005bac:	b410      	push	{r4}
 c005bae:	da08      	bge.n	c005bc2 <__sfputc_r+0x1e>
 c005bb0:	6994      	ldr	r4, [r2, #24]
 c005bb2:	42a3      	cmp	r3, r4
 c005bb4:	db01      	blt.n	c005bba <__sfputc_r+0x16>
 c005bb6:	290a      	cmp	r1, #10
 c005bb8:	d103      	bne.n	c005bc2 <__sfputc_r+0x1e>
 c005bba:	f85d 4b04 	ldr.w	r4, [sp], #4
 c005bbe:	f000 bb35 	b.w	c00622c <__swbuf_r>
 c005bc2:	6813      	ldr	r3, [r2, #0]
 c005bc4:	1c58      	adds	r0, r3, #1
 c005bc6:	6010      	str	r0, [r2, #0]
 c005bc8:	4608      	mov	r0, r1
 c005bca:	7019      	strb	r1, [r3, #0]
 c005bcc:	f85d 4b04 	ldr.w	r4, [sp], #4
 c005bd0:	4770      	bx	lr

0c005bd2 <__sfputs_r>:
 c005bd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c005bd4:	4606      	mov	r6, r0
 c005bd6:	460f      	mov	r7, r1
 c005bd8:	4614      	mov	r4, r2
 c005bda:	18d5      	adds	r5, r2, r3
 c005bdc:	42ac      	cmp	r4, r5
 c005bde:	d101      	bne.n	c005be4 <__sfputs_r+0x12>
 c005be0:	2000      	movs	r0, #0
 c005be2:	e007      	b.n	c005bf4 <__sfputs_r+0x22>
 c005be4:	463a      	mov	r2, r7
 c005be6:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005bea:	4630      	mov	r0, r6
 c005bec:	f7ff ffda 	bl	c005ba4 <__sfputc_r>
 c005bf0:	1c43      	adds	r3, r0, #1
 c005bf2:	d1f3      	bne.n	c005bdc <__sfputs_r+0xa>
 c005bf4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0c005bf8 <_vfiprintf_r>:
 c005bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 c005bfc:	460d      	mov	r5, r1
 c005bfe:	b09d      	sub	sp, #116	; 0x74
 c005c00:	4614      	mov	r4, r2
 c005c02:	4698      	mov	r8, r3
 c005c04:	4606      	mov	r6, r0
 c005c06:	b118      	cbz	r0, c005c10 <_vfiprintf_r+0x18>
 c005c08:	6983      	ldr	r3, [r0, #24]
 c005c0a:	b90b      	cbnz	r3, c005c10 <_vfiprintf_r+0x18>
 c005c0c:	f7ff fe96 	bl	c00593c <__sinit>
 c005c10:	4b89      	ldr	r3, [pc, #548]	; (c005e38 <_vfiprintf_r+0x240>)
 c005c12:	429d      	cmp	r5, r3
 c005c14:	d11b      	bne.n	c005c4e <_vfiprintf_r+0x56>
 c005c16:	6875      	ldr	r5, [r6, #4]
 c005c18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c005c1a:	07d9      	lsls	r1, r3, #31
 c005c1c:	d405      	bmi.n	c005c2a <_vfiprintf_r+0x32>
 c005c1e:	89ab      	ldrh	r3, [r5, #12]
 c005c20:	059a      	lsls	r2, r3, #22
 c005c22:	d402      	bmi.n	c005c2a <_vfiprintf_r+0x32>
 c005c24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c005c26:	f7ff ff27 	bl	c005a78 <__retarget_lock_acquire_recursive>
 c005c2a:	89ab      	ldrh	r3, [r5, #12]
 c005c2c:	071b      	lsls	r3, r3, #28
 c005c2e:	d501      	bpl.n	c005c34 <_vfiprintf_r+0x3c>
 c005c30:	692b      	ldr	r3, [r5, #16]
 c005c32:	b9eb      	cbnz	r3, c005c70 <_vfiprintf_r+0x78>
 c005c34:	4629      	mov	r1, r5
 c005c36:	4630      	mov	r0, r6
 c005c38:	f000 fb5c 	bl	c0062f4 <__swsetup_r>
 c005c3c:	b1c0      	cbz	r0, c005c70 <_vfiprintf_r+0x78>
 c005c3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c005c40:	07dc      	lsls	r4, r3, #31
 c005c42:	d50e      	bpl.n	c005c62 <_vfiprintf_r+0x6a>
 c005c44:	f04f 30ff 	mov.w	r0, #4294967295
 c005c48:	b01d      	add	sp, #116	; 0x74
 c005c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 c005c4e:	4b7b      	ldr	r3, [pc, #492]	; (c005e3c <_vfiprintf_r+0x244>)
 c005c50:	429d      	cmp	r5, r3
 c005c52:	d101      	bne.n	c005c58 <_vfiprintf_r+0x60>
 c005c54:	68b5      	ldr	r5, [r6, #8]
 c005c56:	e7df      	b.n	c005c18 <_vfiprintf_r+0x20>
 c005c58:	4b79      	ldr	r3, [pc, #484]	; (c005e40 <_vfiprintf_r+0x248>)
 c005c5a:	429d      	cmp	r5, r3
 c005c5c:	bf08      	it	eq
 c005c5e:	68f5      	ldreq	r5, [r6, #12]
 c005c60:	e7da      	b.n	c005c18 <_vfiprintf_r+0x20>
 c005c62:	89ab      	ldrh	r3, [r5, #12]
 c005c64:	0598      	lsls	r0, r3, #22
 c005c66:	d4ed      	bmi.n	c005c44 <_vfiprintf_r+0x4c>
 c005c68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c005c6a:	f7ff ff06 	bl	c005a7a <__retarget_lock_release_recursive>
 c005c6e:	e7e9      	b.n	c005c44 <_vfiprintf_r+0x4c>
 c005c70:	2300      	movs	r3, #0
 c005c72:	f8cd 800c 	str.w	r8, [sp, #12]
 c005c76:	f04f 0901 	mov.w	r9, #1
 c005c7a:	f8df 81c8 	ldr.w	r8, [pc, #456]	; c005e44 <_vfiprintf_r+0x24c>
 c005c7e:	9309      	str	r3, [sp, #36]	; 0x24
 c005c80:	2320      	movs	r3, #32
 c005c82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 c005c86:	2330      	movs	r3, #48	; 0x30
 c005c88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 c005c8c:	4623      	mov	r3, r4
 c005c8e:	469a      	mov	sl, r3
 c005c90:	f813 2b01 	ldrb.w	r2, [r3], #1
 c005c94:	b10a      	cbz	r2, c005c9a <_vfiprintf_r+0xa2>
 c005c96:	2a25      	cmp	r2, #37	; 0x25
 c005c98:	d1f9      	bne.n	c005c8e <_vfiprintf_r+0x96>
 c005c9a:	ebba 0b04 	subs.w	fp, sl, r4
 c005c9e:	d00b      	beq.n	c005cb8 <_vfiprintf_r+0xc0>
 c005ca0:	465b      	mov	r3, fp
 c005ca2:	4622      	mov	r2, r4
 c005ca4:	4629      	mov	r1, r5
 c005ca6:	4630      	mov	r0, r6
 c005ca8:	f7ff ff93 	bl	c005bd2 <__sfputs_r>
 c005cac:	3001      	adds	r0, #1
 c005cae:	f000 80aa 	beq.w	c005e06 <_vfiprintf_r+0x20e>
 c005cb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 c005cb4:	445a      	add	r2, fp
 c005cb6:	9209      	str	r2, [sp, #36]	; 0x24
 c005cb8:	f89a 3000 	ldrb.w	r3, [sl]
 c005cbc:	2b00      	cmp	r3, #0
 c005cbe:	f000 80a2 	beq.w	c005e06 <_vfiprintf_r+0x20e>
 c005cc2:	2300      	movs	r3, #0
 c005cc4:	f04f 32ff 	mov.w	r2, #4294967295
 c005cc8:	f10a 0a01 	add.w	sl, sl, #1
 c005ccc:	9304      	str	r3, [sp, #16]
 c005cce:	9307      	str	r3, [sp, #28]
 c005cd0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 c005cd4:	931a      	str	r3, [sp, #104]	; 0x68
 c005cd6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 c005cda:	4654      	mov	r4, sl
 c005cdc:	2205      	movs	r2, #5
 c005cde:	4859      	ldr	r0, [pc, #356]	; (c005e44 <_vfiprintf_r+0x24c>)
 c005ce0:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005ce4:	f000 fcbc 	bl	c006660 <memchr>
 c005ce8:	9a04      	ldr	r2, [sp, #16]
 c005cea:	b9d8      	cbnz	r0, c005d24 <_vfiprintf_r+0x12c>
 c005cec:	06d1      	lsls	r1, r2, #27
 c005cee:	bf44      	itt	mi
 c005cf0:	2320      	movmi	r3, #32
 c005cf2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c005cf6:	0713      	lsls	r3, r2, #28
 c005cf8:	bf44      	itt	mi
 c005cfa:	232b      	movmi	r3, #43	; 0x2b
 c005cfc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 c005d00:	f89a 3000 	ldrb.w	r3, [sl]
 c005d04:	2b2a      	cmp	r3, #42	; 0x2a
 c005d06:	d015      	beq.n	c005d34 <_vfiprintf_r+0x13c>
 c005d08:	9a07      	ldr	r2, [sp, #28]
 c005d0a:	4654      	mov	r4, sl
 c005d0c:	2000      	movs	r0, #0
 c005d0e:	f04f 0c0a 	mov.w	ip, #10
 c005d12:	4621      	mov	r1, r4
 c005d14:	f811 3b01 	ldrb.w	r3, [r1], #1
 c005d18:	3b30      	subs	r3, #48	; 0x30
 c005d1a:	2b09      	cmp	r3, #9
 c005d1c:	d94e      	bls.n	c005dbc <_vfiprintf_r+0x1c4>
 c005d1e:	b1b0      	cbz	r0, c005d4e <_vfiprintf_r+0x156>
 c005d20:	9207      	str	r2, [sp, #28]
 c005d22:	e014      	b.n	c005d4e <_vfiprintf_r+0x156>
 c005d24:	eba0 0308 	sub.w	r3, r0, r8
 c005d28:	46a2      	mov	sl, r4
 c005d2a:	fa09 f303 	lsl.w	r3, r9, r3
 c005d2e:	4313      	orrs	r3, r2
 c005d30:	9304      	str	r3, [sp, #16]
 c005d32:	e7d2      	b.n	c005cda <_vfiprintf_r+0xe2>
 c005d34:	9b03      	ldr	r3, [sp, #12]
 c005d36:	1d19      	adds	r1, r3, #4
 c005d38:	681b      	ldr	r3, [r3, #0]
 c005d3a:	2b00      	cmp	r3, #0
 c005d3c:	9103      	str	r1, [sp, #12]
 c005d3e:	bfbb      	ittet	lt
 c005d40:	425b      	neglt	r3, r3
 c005d42:	f042 0202 	orrlt.w	r2, r2, #2
 c005d46:	9307      	strge	r3, [sp, #28]
 c005d48:	9307      	strlt	r3, [sp, #28]
 c005d4a:	bfb8      	it	lt
 c005d4c:	9204      	strlt	r2, [sp, #16]
 c005d4e:	7823      	ldrb	r3, [r4, #0]
 c005d50:	2b2e      	cmp	r3, #46	; 0x2e
 c005d52:	d10c      	bne.n	c005d6e <_vfiprintf_r+0x176>
 c005d54:	7863      	ldrb	r3, [r4, #1]
 c005d56:	2b2a      	cmp	r3, #42	; 0x2a
 c005d58:	d135      	bne.n	c005dc6 <_vfiprintf_r+0x1ce>
 c005d5a:	9b03      	ldr	r3, [sp, #12]
 c005d5c:	3402      	adds	r4, #2
 c005d5e:	1d1a      	adds	r2, r3, #4
 c005d60:	681b      	ldr	r3, [r3, #0]
 c005d62:	2b00      	cmp	r3, #0
 c005d64:	9203      	str	r2, [sp, #12]
 c005d66:	bfb8      	it	lt
 c005d68:	f04f 33ff 	movlt.w	r3, #4294967295
 c005d6c:	9305      	str	r3, [sp, #20]
 c005d6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; c005e54 <_vfiprintf_r+0x25c>
 c005d72:	2203      	movs	r2, #3
 c005d74:	7821      	ldrb	r1, [r4, #0]
 c005d76:	4650      	mov	r0, sl
 c005d78:	f000 fc72 	bl	c006660 <memchr>
 c005d7c:	b140      	cbz	r0, c005d90 <_vfiprintf_r+0x198>
 c005d7e:	2340      	movs	r3, #64	; 0x40
 c005d80:	eba0 000a 	sub.w	r0, r0, sl
 c005d84:	3401      	adds	r4, #1
 c005d86:	fa03 f000 	lsl.w	r0, r3, r0
 c005d8a:	9b04      	ldr	r3, [sp, #16]
 c005d8c:	4303      	orrs	r3, r0
 c005d8e:	9304      	str	r3, [sp, #16]
 c005d90:	f814 1b01 	ldrb.w	r1, [r4], #1
 c005d94:	2206      	movs	r2, #6
 c005d96:	482c      	ldr	r0, [pc, #176]	; (c005e48 <_vfiprintf_r+0x250>)
 c005d98:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 c005d9c:	f000 fc60 	bl	c006660 <memchr>
 c005da0:	2800      	cmp	r0, #0
 c005da2:	d03f      	beq.n	c005e24 <_vfiprintf_r+0x22c>
 c005da4:	4b29      	ldr	r3, [pc, #164]	; (c005e4c <_vfiprintf_r+0x254>)
 c005da6:	bb1b      	cbnz	r3, c005df0 <_vfiprintf_r+0x1f8>
 c005da8:	9b03      	ldr	r3, [sp, #12]
 c005daa:	3307      	adds	r3, #7
 c005dac:	f023 0307 	bic.w	r3, r3, #7
 c005db0:	3308      	adds	r3, #8
 c005db2:	9303      	str	r3, [sp, #12]
 c005db4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 c005db6:	443b      	add	r3, r7
 c005db8:	9309      	str	r3, [sp, #36]	; 0x24
 c005dba:	e767      	b.n	c005c8c <_vfiprintf_r+0x94>
 c005dbc:	fb0c 3202 	mla	r2, ip, r2, r3
 c005dc0:	460c      	mov	r4, r1
 c005dc2:	2001      	movs	r0, #1
 c005dc4:	e7a5      	b.n	c005d12 <_vfiprintf_r+0x11a>
 c005dc6:	2300      	movs	r3, #0
 c005dc8:	3401      	adds	r4, #1
 c005dca:	f04f 0c0a 	mov.w	ip, #10
 c005dce:	4619      	mov	r1, r3
 c005dd0:	9305      	str	r3, [sp, #20]
 c005dd2:	4620      	mov	r0, r4
 c005dd4:	f810 2b01 	ldrb.w	r2, [r0], #1
 c005dd8:	3a30      	subs	r2, #48	; 0x30
 c005dda:	2a09      	cmp	r2, #9
 c005ddc:	d903      	bls.n	c005de6 <_vfiprintf_r+0x1ee>
 c005dde:	2b00      	cmp	r3, #0
 c005de0:	d0c5      	beq.n	c005d6e <_vfiprintf_r+0x176>
 c005de2:	9105      	str	r1, [sp, #20]
 c005de4:	e7c3      	b.n	c005d6e <_vfiprintf_r+0x176>
 c005de6:	fb0c 2101 	mla	r1, ip, r1, r2
 c005dea:	4604      	mov	r4, r0
 c005dec:	2301      	movs	r3, #1
 c005dee:	e7f0      	b.n	c005dd2 <_vfiprintf_r+0x1da>
 c005df0:	ab03      	add	r3, sp, #12
 c005df2:	462a      	mov	r2, r5
 c005df4:	a904      	add	r1, sp, #16
 c005df6:	4630      	mov	r0, r6
 c005df8:	9300      	str	r3, [sp, #0]
 c005dfa:	4b15      	ldr	r3, [pc, #84]	; (c005e50 <_vfiprintf_r+0x258>)
 c005dfc:	e000      	b.n	c005e00 <_vfiprintf_r+0x208>
 c005dfe:	bf00      	nop
 c005e00:	4607      	mov	r7, r0
 c005e02:	1c78      	adds	r0, r7, #1
 c005e04:	d1d6      	bne.n	c005db4 <_vfiprintf_r+0x1bc>
 c005e06:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 c005e08:	07d9      	lsls	r1, r3, #31
 c005e0a:	d405      	bmi.n	c005e18 <_vfiprintf_r+0x220>
 c005e0c:	89ab      	ldrh	r3, [r5, #12]
 c005e0e:	059a      	lsls	r2, r3, #22
 c005e10:	d402      	bmi.n	c005e18 <_vfiprintf_r+0x220>
 c005e12:	6da8      	ldr	r0, [r5, #88]	; 0x58
 c005e14:	f7ff fe31 	bl	c005a7a <__retarget_lock_release_recursive>
 c005e18:	89ab      	ldrh	r3, [r5, #12]
 c005e1a:	065b      	lsls	r3, r3, #25
 c005e1c:	f53f af12 	bmi.w	c005c44 <_vfiprintf_r+0x4c>
 c005e20:	9809      	ldr	r0, [sp, #36]	; 0x24
 c005e22:	e711      	b.n	c005c48 <_vfiprintf_r+0x50>
 c005e24:	ab03      	add	r3, sp, #12
 c005e26:	462a      	mov	r2, r5
 c005e28:	a904      	add	r1, sp, #16
 c005e2a:	4630      	mov	r0, r6
 c005e2c:	9300      	str	r3, [sp, #0]
 c005e2e:	4b08      	ldr	r3, [pc, #32]	; (c005e50 <_vfiprintf_r+0x258>)
 c005e30:	f000 f882 	bl	c005f38 <_printf_i>
 c005e34:	e7e4      	b.n	c005e00 <_vfiprintf_r+0x208>
 c005e36:	bf00      	nop
 c005e38:	0c006934 	.word	0x0c006934
 c005e3c:	0c006954 	.word	0x0c006954
 c005e40:	0c006914 	.word	0x0c006914
 c005e44:	0c006974 	.word	0x0c006974
 c005e48:	0c00697e 	.word	0x0c00697e
 c005e4c:	00000000 	.word	0x00000000
 c005e50:	0c005bd3 	.word	0x0c005bd3
 c005e54:	0c00697a 	.word	0x0c00697a

0c005e58 <_printf_common>:
 c005e58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 c005e5c:	4616      	mov	r6, r2
 c005e5e:	4699      	mov	r9, r3
 c005e60:	688a      	ldr	r2, [r1, #8]
 c005e62:	4607      	mov	r7, r0
 c005e64:	690b      	ldr	r3, [r1, #16]
 c005e66:	460c      	mov	r4, r1
 c005e68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 c005e6c:	4293      	cmp	r3, r2
 c005e6e:	bfb8      	it	lt
 c005e70:	4613      	movlt	r3, r2
 c005e72:	6033      	str	r3, [r6, #0]
 c005e74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 c005e78:	b10a      	cbz	r2, c005e7e <_printf_common+0x26>
 c005e7a:	3301      	adds	r3, #1
 c005e7c:	6033      	str	r3, [r6, #0]
 c005e7e:	6823      	ldr	r3, [r4, #0]
 c005e80:	0699      	lsls	r1, r3, #26
 c005e82:	bf42      	ittt	mi
 c005e84:	6833      	ldrmi	r3, [r6, #0]
 c005e86:	3302      	addmi	r3, #2
 c005e88:	6033      	strmi	r3, [r6, #0]
 c005e8a:	6825      	ldr	r5, [r4, #0]
 c005e8c:	f015 0506 	ands.w	r5, r5, #6
 c005e90:	d106      	bne.n	c005ea0 <_printf_common+0x48>
 c005e92:	f104 0a19 	add.w	sl, r4, #25
 c005e96:	68e3      	ldr	r3, [r4, #12]
 c005e98:	6832      	ldr	r2, [r6, #0]
 c005e9a:	1a9b      	subs	r3, r3, r2
 c005e9c:	42ab      	cmp	r3, r5
 c005e9e:	dc29      	bgt.n	c005ef4 <_printf_common+0x9c>
 c005ea0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 c005ea4:	1e13      	subs	r3, r2, #0
 c005ea6:	6822      	ldr	r2, [r4, #0]
 c005ea8:	bf18      	it	ne
 c005eaa:	2301      	movne	r3, #1
 c005eac:	0692      	lsls	r2, r2, #26
 c005eae:	d42e      	bmi.n	c005f0e <_printf_common+0xb6>
 c005eb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 c005eb4:	4649      	mov	r1, r9
 c005eb6:	4638      	mov	r0, r7
 c005eb8:	47c0      	blx	r8
 c005eba:	3001      	adds	r0, #1
 c005ebc:	d021      	beq.n	c005f02 <_printf_common+0xaa>
 c005ebe:	6823      	ldr	r3, [r4, #0]
 c005ec0:	341a      	adds	r4, #26
 c005ec2:	f854 5c0e 	ldr.w	r5, [r4, #-14]
 c005ec6:	f003 0306 	and.w	r3, r3, #6
 c005eca:	6832      	ldr	r2, [r6, #0]
 c005ecc:	2600      	movs	r6, #0
 c005ece:	2b04      	cmp	r3, #4
 c005ed0:	f854 3c12 	ldr.w	r3, [r4, #-18]
 c005ed4:	bf08      	it	eq
 c005ed6:	1aad      	subeq	r5, r5, r2
 c005ed8:	f854 2c0a 	ldr.w	r2, [r4, #-10]
 c005edc:	bf14      	ite	ne
 c005ede:	2500      	movne	r5, #0
 c005ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 c005ee4:	4293      	cmp	r3, r2
 c005ee6:	bfc4      	itt	gt
 c005ee8:	1a9b      	subgt	r3, r3, r2
 c005eea:	18ed      	addgt	r5, r5, r3
 c005eec:	42b5      	cmp	r5, r6
 c005eee:	d11a      	bne.n	c005f26 <_printf_common+0xce>
 c005ef0:	2000      	movs	r0, #0
 c005ef2:	e008      	b.n	c005f06 <_printf_common+0xae>
 c005ef4:	2301      	movs	r3, #1
 c005ef6:	4652      	mov	r2, sl
 c005ef8:	4649      	mov	r1, r9
 c005efa:	4638      	mov	r0, r7
 c005efc:	47c0      	blx	r8
 c005efe:	3001      	adds	r0, #1
 c005f00:	d103      	bne.n	c005f0a <_printf_common+0xb2>
 c005f02:	f04f 30ff 	mov.w	r0, #4294967295
 c005f06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c005f0a:	3501      	adds	r5, #1
 c005f0c:	e7c3      	b.n	c005e96 <_printf_common+0x3e>
 c005f0e:	18e1      	adds	r1, r4, r3
 c005f10:	1c5a      	adds	r2, r3, #1
 c005f12:	2030      	movs	r0, #48	; 0x30
 c005f14:	3302      	adds	r3, #2
 c005f16:	4422      	add	r2, r4
 c005f18:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 c005f1c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 c005f20:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 c005f24:	e7c4      	b.n	c005eb0 <_printf_common+0x58>
 c005f26:	2301      	movs	r3, #1
 c005f28:	4622      	mov	r2, r4
 c005f2a:	4649      	mov	r1, r9
 c005f2c:	4638      	mov	r0, r7
 c005f2e:	47c0      	blx	r8
 c005f30:	3001      	adds	r0, #1
 c005f32:	d0e6      	beq.n	c005f02 <_printf_common+0xaa>
 c005f34:	3601      	adds	r6, #1
 c005f36:	e7d9      	b.n	c005eec <_printf_common+0x94>

0c005f38 <_printf_i>:
 c005f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 c005f3c:	7e0f      	ldrb	r7, [r1, #24]
 c005f3e:	4691      	mov	r9, r2
 c005f40:	4680      	mov	r8, r0
 c005f42:	460c      	mov	r4, r1
 c005f44:	2f78      	cmp	r7, #120	; 0x78
 c005f46:	469a      	mov	sl, r3
 c005f48:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 c005f4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 c005f4e:	d807      	bhi.n	c005f60 <_printf_i+0x28>
 c005f50:	2f62      	cmp	r7, #98	; 0x62
 c005f52:	d80a      	bhi.n	c005f6a <_printf_i+0x32>
 c005f54:	2f00      	cmp	r7, #0
 c005f56:	f000 80d8 	beq.w	c00610a <_printf_i+0x1d2>
 c005f5a:	2f58      	cmp	r7, #88	; 0x58
 c005f5c:	f000 80a3 	beq.w	c0060a6 <_printf_i+0x16e>
 c005f60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005f64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 c005f68:	e03a      	b.n	c005fe0 <_printf_i+0xa8>
 c005f6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 c005f6e:	2b15      	cmp	r3, #21
 c005f70:	d8f6      	bhi.n	c005f60 <_printf_i+0x28>
 c005f72:	a101      	add	r1, pc, #4	; (adr r1, c005f78 <_printf_i+0x40>)
 c005f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 c005f78:	0c005fd1 	.word	0x0c005fd1
 c005f7c:	0c005fe5 	.word	0x0c005fe5
 c005f80:	0c005f61 	.word	0x0c005f61
 c005f84:	0c005f61 	.word	0x0c005f61
 c005f88:	0c005f61 	.word	0x0c005f61
 c005f8c:	0c005f61 	.word	0x0c005f61
 c005f90:	0c005fe5 	.word	0x0c005fe5
 c005f94:	0c005f61 	.word	0x0c005f61
 c005f98:	0c005f61 	.word	0x0c005f61
 c005f9c:	0c005f61 	.word	0x0c005f61
 c005fa0:	0c005f61 	.word	0x0c005f61
 c005fa4:	0c0060f1 	.word	0x0c0060f1
 c005fa8:	0c006015 	.word	0x0c006015
 c005fac:	0c0060d3 	.word	0x0c0060d3
 c005fb0:	0c005f61 	.word	0x0c005f61
 c005fb4:	0c005f61 	.word	0x0c005f61
 c005fb8:	0c006113 	.word	0x0c006113
 c005fbc:	0c005f61 	.word	0x0c005f61
 c005fc0:	0c006015 	.word	0x0c006015
 c005fc4:	0c005f61 	.word	0x0c005f61
 c005fc8:	0c005f61 	.word	0x0c005f61
 c005fcc:	0c0060db 	.word	0x0c0060db
 c005fd0:	682b      	ldr	r3, [r5, #0]
 c005fd2:	1d1a      	adds	r2, r3, #4
 c005fd4:	681b      	ldr	r3, [r3, #0]
 c005fd6:	602a      	str	r2, [r5, #0]
 c005fd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 c005fdc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 c005fe0:	2301      	movs	r3, #1
 c005fe2:	e0a3      	b.n	c00612c <_printf_i+0x1f4>
 c005fe4:	6820      	ldr	r0, [r4, #0]
 c005fe6:	6829      	ldr	r1, [r5, #0]
 c005fe8:	0606      	lsls	r6, r0, #24
 c005fea:	f101 0304 	add.w	r3, r1, #4
 c005fee:	d50a      	bpl.n	c006006 <_printf_i+0xce>
 c005ff0:	680e      	ldr	r6, [r1, #0]
 c005ff2:	602b      	str	r3, [r5, #0]
 c005ff4:	2e00      	cmp	r6, #0
 c005ff6:	da03      	bge.n	c006000 <_printf_i+0xc8>
 c005ff8:	232d      	movs	r3, #45	; 0x2d
 c005ffa:	4276      	negs	r6, r6
 c005ffc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c006000:	485e      	ldr	r0, [pc, #376]	; (c00617c <_printf_i+0x244>)
 c006002:	230a      	movs	r3, #10
 c006004:	e019      	b.n	c00603a <_printf_i+0x102>
 c006006:	680e      	ldr	r6, [r1, #0]
 c006008:	f010 0f40 	tst.w	r0, #64	; 0x40
 c00600c:	602b      	str	r3, [r5, #0]
 c00600e:	bf18      	it	ne
 c006010:	b236      	sxthne	r6, r6
 c006012:	e7ef      	b.n	c005ff4 <_printf_i+0xbc>
 c006014:	682b      	ldr	r3, [r5, #0]
 c006016:	6820      	ldr	r0, [r4, #0]
 c006018:	1d19      	adds	r1, r3, #4
 c00601a:	6029      	str	r1, [r5, #0]
 c00601c:	0601      	lsls	r1, r0, #24
 c00601e:	d501      	bpl.n	c006024 <_printf_i+0xec>
 c006020:	681e      	ldr	r6, [r3, #0]
 c006022:	e002      	b.n	c00602a <_printf_i+0xf2>
 c006024:	0646      	lsls	r6, r0, #25
 c006026:	d5fb      	bpl.n	c006020 <_printf_i+0xe8>
 c006028:	881e      	ldrh	r6, [r3, #0]
 c00602a:	2f6f      	cmp	r7, #111	; 0x6f
 c00602c:	4853      	ldr	r0, [pc, #332]	; (c00617c <_printf_i+0x244>)
 c00602e:	bf0c      	ite	eq
 c006030:	2308      	moveq	r3, #8
 c006032:	230a      	movne	r3, #10
 c006034:	2100      	movs	r1, #0
 c006036:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 c00603a:	6865      	ldr	r5, [r4, #4]
 c00603c:	2d00      	cmp	r5, #0
 c00603e:	60a5      	str	r5, [r4, #8]
 c006040:	bfa2      	ittt	ge
 c006042:	6821      	ldrge	r1, [r4, #0]
 c006044:	f021 0104 	bicge.w	r1, r1, #4
 c006048:	6021      	strge	r1, [r4, #0]
 c00604a:	b90e      	cbnz	r6, c006050 <_printf_i+0x118>
 c00604c:	2d00      	cmp	r5, #0
 c00604e:	d04d      	beq.n	c0060ec <_printf_i+0x1b4>
 c006050:	4615      	mov	r5, r2
 c006052:	fbb6 f1f3 	udiv	r1, r6, r3
 c006056:	fb03 6711 	mls	r7, r3, r1, r6
 c00605a:	5dc7      	ldrb	r7, [r0, r7]
 c00605c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 c006060:	4637      	mov	r7, r6
 c006062:	460e      	mov	r6, r1
 c006064:	42bb      	cmp	r3, r7
 c006066:	d9f4      	bls.n	c006052 <_printf_i+0x11a>
 c006068:	2b08      	cmp	r3, #8
 c00606a:	d10b      	bne.n	c006084 <_printf_i+0x14c>
 c00606c:	6823      	ldr	r3, [r4, #0]
 c00606e:	07de      	lsls	r6, r3, #31
 c006070:	d508      	bpl.n	c006084 <_printf_i+0x14c>
 c006072:	6923      	ldr	r3, [r4, #16]
 c006074:	6861      	ldr	r1, [r4, #4]
 c006076:	4299      	cmp	r1, r3
 c006078:	bfde      	ittt	le
 c00607a:	2330      	movle	r3, #48	; 0x30
 c00607c:	f805 3c01 	strble.w	r3, [r5, #-1]
 c006080:	f105 35ff 	addle.w	r5, r5, #4294967295
 c006084:	1b52      	subs	r2, r2, r5
 c006086:	6122      	str	r2, [r4, #16]
 c006088:	464b      	mov	r3, r9
 c00608a:	aa03      	add	r2, sp, #12
 c00608c:	4621      	mov	r1, r4
 c00608e:	4640      	mov	r0, r8
 c006090:	f8cd a000 	str.w	sl, [sp]
 c006094:	f7ff fee0 	bl	c005e58 <_printf_common>
 c006098:	3001      	adds	r0, #1
 c00609a:	d14c      	bne.n	c006136 <_printf_i+0x1fe>
 c00609c:	f04f 30ff 	mov.w	r0, #4294967295
 c0060a0:	b004      	add	sp, #16
 c0060a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 c0060a6:	4835      	ldr	r0, [pc, #212]	; (c00617c <_printf_i+0x244>)
 c0060a8:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 c0060ac:	6829      	ldr	r1, [r5, #0]
 c0060ae:	6823      	ldr	r3, [r4, #0]
 c0060b0:	f851 6b04 	ldr.w	r6, [r1], #4
 c0060b4:	6029      	str	r1, [r5, #0]
 c0060b6:	061d      	lsls	r5, r3, #24
 c0060b8:	d514      	bpl.n	c0060e4 <_printf_i+0x1ac>
 c0060ba:	07df      	lsls	r7, r3, #31
 c0060bc:	bf44      	itt	mi
 c0060be:	f043 0320 	orrmi.w	r3, r3, #32
 c0060c2:	6023      	strmi	r3, [r4, #0]
 c0060c4:	b91e      	cbnz	r6, c0060ce <_printf_i+0x196>
 c0060c6:	6823      	ldr	r3, [r4, #0]
 c0060c8:	f023 0320 	bic.w	r3, r3, #32
 c0060cc:	6023      	str	r3, [r4, #0]
 c0060ce:	2310      	movs	r3, #16
 c0060d0:	e7b0      	b.n	c006034 <_printf_i+0xfc>
 c0060d2:	6823      	ldr	r3, [r4, #0]
 c0060d4:	f043 0320 	orr.w	r3, r3, #32
 c0060d8:	6023      	str	r3, [r4, #0]
 c0060da:	2378      	movs	r3, #120	; 0x78
 c0060dc:	4828      	ldr	r0, [pc, #160]	; (c006180 <_printf_i+0x248>)
 c0060de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 c0060e2:	e7e3      	b.n	c0060ac <_printf_i+0x174>
 c0060e4:	0659      	lsls	r1, r3, #25
 c0060e6:	bf48      	it	mi
 c0060e8:	b2b6      	uxthmi	r6, r6
 c0060ea:	e7e6      	b.n	c0060ba <_printf_i+0x182>
 c0060ec:	4615      	mov	r5, r2
 c0060ee:	e7bb      	b.n	c006068 <_printf_i+0x130>
 c0060f0:	682b      	ldr	r3, [r5, #0]
 c0060f2:	6826      	ldr	r6, [r4, #0]
 c0060f4:	1d18      	adds	r0, r3, #4
 c0060f6:	6961      	ldr	r1, [r4, #20]
 c0060f8:	6028      	str	r0, [r5, #0]
 c0060fa:	0635      	lsls	r5, r6, #24
 c0060fc:	681b      	ldr	r3, [r3, #0]
 c0060fe:	d501      	bpl.n	c006104 <_printf_i+0x1cc>
 c006100:	6019      	str	r1, [r3, #0]
 c006102:	e002      	b.n	c00610a <_printf_i+0x1d2>
 c006104:	0670      	lsls	r0, r6, #25
 c006106:	d5fb      	bpl.n	c006100 <_printf_i+0x1c8>
 c006108:	8019      	strh	r1, [r3, #0]
 c00610a:	2300      	movs	r3, #0
 c00610c:	4615      	mov	r5, r2
 c00610e:	6123      	str	r3, [r4, #16]
 c006110:	e7ba      	b.n	c006088 <_printf_i+0x150>
 c006112:	682b      	ldr	r3, [r5, #0]
 c006114:	2100      	movs	r1, #0
 c006116:	1d1a      	adds	r2, r3, #4
 c006118:	602a      	str	r2, [r5, #0]
 c00611a:	681d      	ldr	r5, [r3, #0]
 c00611c:	6862      	ldr	r2, [r4, #4]
 c00611e:	4628      	mov	r0, r5
 c006120:	f000 fa9e 	bl	c006660 <memchr>
 c006124:	b108      	cbz	r0, c00612a <_printf_i+0x1f2>
 c006126:	1b40      	subs	r0, r0, r5
 c006128:	6060      	str	r0, [r4, #4]
 c00612a:	6863      	ldr	r3, [r4, #4]
 c00612c:	6123      	str	r3, [r4, #16]
 c00612e:	2300      	movs	r3, #0
 c006130:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 c006134:	e7a8      	b.n	c006088 <_printf_i+0x150>
 c006136:	6923      	ldr	r3, [r4, #16]
 c006138:	462a      	mov	r2, r5
 c00613a:	4649      	mov	r1, r9
 c00613c:	4640      	mov	r0, r8
 c00613e:	47d0      	blx	sl
 c006140:	3001      	adds	r0, #1
 c006142:	d0ab      	beq.n	c00609c <_printf_i+0x164>
 c006144:	6823      	ldr	r3, [r4, #0]
 c006146:	079b      	lsls	r3, r3, #30
 c006148:	d413      	bmi.n	c006172 <_printf_i+0x23a>
 c00614a:	68e0      	ldr	r0, [r4, #12]
 c00614c:	9b03      	ldr	r3, [sp, #12]
 c00614e:	4298      	cmp	r0, r3
 c006150:	bfb8      	it	lt
 c006152:	4618      	movlt	r0, r3
 c006154:	e7a4      	b.n	c0060a0 <_printf_i+0x168>
 c006156:	2301      	movs	r3, #1
 c006158:	4632      	mov	r2, r6
 c00615a:	4649      	mov	r1, r9
 c00615c:	4640      	mov	r0, r8
 c00615e:	47d0      	blx	sl
 c006160:	3001      	adds	r0, #1
 c006162:	d09b      	beq.n	c00609c <_printf_i+0x164>
 c006164:	3501      	adds	r5, #1
 c006166:	68e3      	ldr	r3, [r4, #12]
 c006168:	9903      	ldr	r1, [sp, #12]
 c00616a:	1a5b      	subs	r3, r3, r1
 c00616c:	42ab      	cmp	r3, r5
 c00616e:	dcf2      	bgt.n	c006156 <_printf_i+0x21e>
 c006170:	e7eb      	b.n	c00614a <_printf_i+0x212>
 c006172:	2500      	movs	r5, #0
 c006174:	f104 0619 	add.w	r6, r4, #25
 c006178:	e7f5      	b.n	c006166 <_printf_i+0x22e>
 c00617a:	bf00      	nop
 c00617c:	0c006985 	.word	0x0c006985
 c006180:	0c006996 	.word	0x0c006996

0c006184 <_sbrk_r>:
 c006184:	b538      	push	{r3, r4, r5, lr}
 c006186:	2300      	movs	r3, #0
 c006188:	4d05      	ldr	r5, [pc, #20]	; (c0061a0 <_sbrk_r+0x1c>)
 c00618a:	4604      	mov	r4, r0
 c00618c:	4608      	mov	r0, r1
 c00618e:	602b      	str	r3, [r5, #0]
 c006190:	f7fa ff98 	bl	c0010c4 <_sbrk>
 c006194:	1c43      	adds	r3, r0, #1
 c006196:	d102      	bne.n	c00619e <_sbrk_r+0x1a>
 c006198:	682b      	ldr	r3, [r5, #0]
 c00619a:	b103      	cbz	r3, c00619e <_sbrk_r+0x1a>
 c00619c:	6023      	str	r3, [r4, #0]
 c00619e:	bd38      	pop	{r3, r4, r5, pc}
 c0061a0:	300002b4 	.word	0x300002b4

0c0061a4 <__sread>:
 c0061a4:	b510      	push	{r4, lr}
 c0061a6:	460c      	mov	r4, r1
 c0061a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0061ac:	f000 fabe 	bl	c00672c <_read_r>
 c0061b0:	2800      	cmp	r0, #0
 c0061b2:	bfab      	itete	ge
 c0061b4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 c0061b6:	89a3      	ldrhlt	r3, [r4, #12]
 c0061b8:	181b      	addge	r3, r3, r0
 c0061ba:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 c0061be:	bfac      	ite	ge
 c0061c0:	6563      	strge	r3, [r4, #84]	; 0x54
 c0061c2:	81a3      	strhlt	r3, [r4, #12]
 c0061c4:	bd10      	pop	{r4, pc}

0c0061c6 <__swrite>:
 c0061c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0061ca:	461f      	mov	r7, r3
 c0061cc:	898b      	ldrh	r3, [r1, #12]
 c0061ce:	4605      	mov	r5, r0
 c0061d0:	460c      	mov	r4, r1
 c0061d2:	05db      	lsls	r3, r3, #23
 c0061d4:	4616      	mov	r6, r2
 c0061d6:	d505      	bpl.n	c0061e4 <__swrite+0x1e>
 c0061d8:	2302      	movs	r3, #2
 c0061da:	2200      	movs	r2, #0
 c0061dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c0061e0:	f000 f9c6 	bl	c006570 <_lseek_r>
 c0061e4:	89a3      	ldrh	r3, [r4, #12]
 c0061e6:	4632      	mov	r2, r6
 c0061e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c0061ec:	4628      	mov	r0, r5
 c0061ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 c0061f2:	81a3      	strh	r3, [r4, #12]
 c0061f4:	463b      	mov	r3, r7
 c0061f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 c0061fa:	f000 b869 	b.w	c0062d0 <_write_r>

0c0061fe <__sseek>:
 c0061fe:	b510      	push	{r4, lr}
 c006200:	460c      	mov	r4, r1
 c006202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006206:	f000 f9b3 	bl	c006570 <_lseek_r>
 c00620a:	1c43      	adds	r3, r0, #1
 c00620c:	89a3      	ldrh	r3, [r4, #12]
 c00620e:	bf15      	itete	ne
 c006210:	6560      	strne	r0, [r4, #84]	; 0x54
 c006212:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 c006216:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 c00621a:	81a3      	strheq	r3, [r4, #12]
 c00621c:	bf18      	it	ne
 c00621e:	81a3      	strhne	r3, [r4, #12]
 c006220:	bd10      	pop	{r4, pc}

0c006222 <__sclose>:
 c006222:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c006226:	f000 b8d3 	b.w	c0063d0 <_close_r>
	...

0c00622c <__swbuf_r>:
 c00622c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c00622e:	460e      	mov	r6, r1
 c006230:	4614      	mov	r4, r2
 c006232:	4605      	mov	r5, r0
 c006234:	b118      	cbz	r0, c00623e <__swbuf_r+0x12>
 c006236:	6983      	ldr	r3, [r0, #24]
 c006238:	b90b      	cbnz	r3, c00623e <__swbuf_r+0x12>
 c00623a:	f7ff fb7f 	bl	c00593c <__sinit>
 c00623e:	4b21      	ldr	r3, [pc, #132]	; (c0062c4 <__swbuf_r+0x98>)
 c006240:	429c      	cmp	r4, r3
 c006242:	d12b      	bne.n	c00629c <__swbuf_r+0x70>
 c006244:	686c      	ldr	r4, [r5, #4]
 c006246:	69a3      	ldr	r3, [r4, #24]
 c006248:	60a3      	str	r3, [r4, #8]
 c00624a:	89a3      	ldrh	r3, [r4, #12]
 c00624c:	071a      	lsls	r2, r3, #28
 c00624e:	d52f      	bpl.n	c0062b0 <__swbuf_r+0x84>
 c006250:	6923      	ldr	r3, [r4, #16]
 c006252:	b36b      	cbz	r3, c0062b0 <__swbuf_r+0x84>
 c006254:	6923      	ldr	r3, [r4, #16]
 c006256:	b2f6      	uxtb	r6, r6
 c006258:	6820      	ldr	r0, [r4, #0]
 c00625a:	4637      	mov	r7, r6
 c00625c:	1ac0      	subs	r0, r0, r3
 c00625e:	6963      	ldr	r3, [r4, #20]
 c006260:	4283      	cmp	r3, r0
 c006262:	dc04      	bgt.n	c00626e <__swbuf_r+0x42>
 c006264:	4621      	mov	r1, r4
 c006266:	4628      	mov	r0, r5
 c006268:	f000 f946 	bl	c0064f8 <_fflush_r>
 c00626c:	bb30      	cbnz	r0, c0062bc <__swbuf_r+0x90>
 c00626e:	68a3      	ldr	r3, [r4, #8]
 c006270:	3001      	adds	r0, #1
 c006272:	3b01      	subs	r3, #1
 c006274:	60a3      	str	r3, [r4, #8]
 c006276:	6823      	ldr	r3, [r4, #0]
 c006278:	1c5a      	adds	r2, r3, #1
 c00627a:	6022      	str	r2, [r4, #0]
 c00627c:	701e      	strb	r6, [r3, #0]
 c00627e:	6963      	ldr	r3, [r4, #20]
 c006280:	4283      	cmp	r3, r0
 c006282:	d004      	beq.n	c00628e <__swbuf_r+0x62>
 c006284:	89a3      	ldrh	r3, [r4, #12]
 c006286:	07db      	lsls	r3, r3, #31
 c006288:	d506      	bpl.n	c006298 <__swbuf_r+0x6c>
 c00628a:	2e0a      	cmp	r6, #10
 c00628c:	d104      	bne.n	c006298 <__swbuf_r+0x6c>
 c00628e:	4621      	mov	r1, r4
 c006290:	4628      	mov	r0, r5
 c006292:	f000 f931 	bl	c0064f8 <_fflush_r>
 c006296:	b988      	cbnz	r0, c0062bc <__swbuf_r+0x90>
 c006298:	4638      	mov	r0, r7
 c00629a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 c00629c:	4b0a      	ldr	r3, [pc, #40]	; (c0062c8 <__swbuf_r+0x9c>)
 c00629e:	429c      	cmp	r4, r3
 c0062a0:	d101      	bne.n	c0062a6 <__swbuf_r+0x7a>
 c0062a2:	68ac      	ldr	r4, [r5, #8]
 c0062a4:	e7cf      	b.n	c006246 <__swbuf_r+0x1a>
 c0062a6:	4b09      	ldr	r3, [pc, #36]	; (c0062cc <__swbuf_r+0xa0>)
 c0062a8:	429c      	cmp	r4, r3
 c0062aa:	bf08      	it	eq
 c0062ac:	68ec      	ldreq	r4, [r5, #12]
 c0062ae:	e7ca      	b.n	c006246 <__swbuf_r+0x1a>
 c0062b0:	4621      	mov	r1, r4
 c0062b2:	4628      	mov	r0, r5
 c0062b4:	f000 f81e 	bl	c0062f4 <__swsetup_r>
 c0062b8:	2800      	cmp	r0, #0
 c0062ba:	d0cb      	beq.n	c006254 <__swbuf_r+0x28>
 c0062bc:	f04f 37ff 	mov.w	r7, #4294967295
 c0062c0:	e7ea      	b.n	c006298 <__swbuf_r+0x6c>
 c0062c2:	bf00      	nop
 c0062c4:	0c006934 	.word	0x0c006934
 c0062c8:	0c006954 	.word	0x0c006954
 c0062cc:	0c006914 	.word	0x0c006914

0c0062d0 <_write_r>:
 c0062d0:	b538      	push	{r3, r4, r5, lr}
 c0062d2:	4604      	mov	r4, r0
 c0062d4:	4d06      	ldr	r5, [pc, #24]	; (c0062f0 <_write_r+0x20>)
 c0062d6:	4608      	mov	r0, r1
 c0062d8:	4611      	mov	r1, r2
 c0062da:	2200      	movs	r2, #0
 c0062dc:	602a      	str	r2, [r5, #0]
 c0062de:	461a      	mov	r2, r3
 c0062e0:	f7fa fe9f 	bl	c001022 <_write>
 c0062e4:	1c43      	adds	r3, r0, #1
 c0062e6:	d102      	bne.n	c0062ee <_write_r+0x1e>
 c0062e8:	682b      	ldr	r3, [r5, #0]
 c0062ea:	b103      	cbz	r3, c0062ee <_write_r+0x1e>
 c0062ec:	6023      	str	r3, [r4, #0]
 c0062ee:	bd38      	pop	{r3, r4, r5, pc}
 c0062f0:	300002b4 	.word	0x300002b4

0c0062f4 <__swsetup_r>:
 c0062f4:	4b32      	ldr	r3, [pc, #200]	; (c0063c0 <__swsetup_r+0xcc>)
 c0062f6:	b570      	push	{r4, r5, r6, lr}
 c0062f8:	681d      	ldr	r5, [r3, #0]
 c0062fa:	4606      	mov	r6, r0
 c0062fc:	460c      	mov	r4, r1
 c0062fe:	b125      	cbz	r5, c00630a <__swsetup_r+0x16>
 c006300:	69ab      	ldr	r3, [r5, #24]
 c006302:	b913      	cbnz	r3, c00630a <__swsetup_r+0x16>
 c006304:	4628      	mov	r0, r5
 c006306:	f7ff fb19 	bl	c00593c <__sinit>
 c00630a:	4b2e      	ldr	r3, [pc, #184]	; (c0063c4 <__swsetup_r+0xd0>)
 c00630c:	429c      	cmp	r4, r3
 c00630e:	d10f      	bne.n	c006330 <__swsetup_r+0x3c>
 c006310:	686c      	ldr	r4, [r5, #4]
 c006312:	89a3      	ldrh	r3, [r4, #12]
 c006314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c006318:	0719      	lsls	r1, r3, #28
 c00631a:	d42c      	bmi.n	c006376 <__swsetup_r+0x82>
 c00631c:	06dd      	lsls	r5, r3, #27
 c00631e:	d411      	bmi.n	c006344 <__swsetup_r+0x50>
 c006320:	2309      	movs	r3, #9
 c006322:	6033      	str	r3, [r6, #0]
 c006324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 c006328:	f04f 30ff 	mov.w	r0, #4294967295
 c00632c:	81a3      	strh	r3, [r4, #12]
 c00632e:	e03e      	b.n	c0063ae <__swsetup_r+0xba>
 c006330:	4b25      	ldr	r3, [pc, #148]	; (c0063c8 <__swsetup_r+0xd4>)
 c006332:	429c      	cmp	r4, r3
 c006334:	d101      	bne.n	c00633a <__swsetup_r+0x46>
 c006336:	68ac      	ldr	r4, [r5, #8]
 c006338:	e7eb      	b.n	c006312 <__swsetup_r+0x1e>
 c00633a:	4b24      	ldr	r3, [pc, #144]	; (c0063cc <__swsetup_r+0xd8>)
 c00633c:	429c      	cmp	r4, r3
 c00633e:	bf08      	it	eq
 c006340:	68ec      	ldreq	r4, [r5, #12]
 c006342:	e7e6      	b.n	c006312 <__swsetup_r+0x1e>
 c006344:	0758      	lsls	r0, r3, #29
 c006346:	d512      	bpl.n	c00636e <__swsetup_r+0x7a>
 c006348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00634a:	b141      	cbz	r1, c00635e <__swsetup_r+0x6a>
 c00634c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c006350:	4299      	cmp	r1, r3
 c006352:	d002      	beq.n	c00635a <__swsetup_r+0x66>
 c006354:	4630      	mov	r0, r6
 c006356:	f000 f99d 	bl	c006694 <_free_r>
 c00635a:	2300      	movs	r3, #0
 c00635c:	6363      	str	r3, [r4, #52]	; 0x34
 c00635e:	89a3      	ldrh	r3, [r4, #12]
 c006360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 c006364:	81a3      	strh	r3, [r4, #12]
 c006366:	2300      	movs	r3, #0
 c006368:	6063      	str	r3, [r4, #4]
 c00636a:	6923      	ldr	r3, [r4, #16]
 c00636c:	6023      	str	r3, [r4, #0]
 c00636e:	89a3      	ldrh	r3, [r4, #12]
 c006370:	f043 0308 	orr.w	r3, r3, #8
 c006374:	81a3      	strh	r3, [r4, #12]
 c006376:	6923      	ldr	r3, [r4, #16]
 c006378:	b94b      	cbnz	r3, c00638e <__swsetup_r+0x9a>
 c00637a:	89a3      	ldrh	r3, [r4, #12]
 c00637c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 c006380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 c006384:	d003      	beq.n	c00638e <__swsetup_r+0x9a>
 c006386:	4621      	mov	r1, r4
 c006388:	4630      	mov	r0, r6
 c00638a:	f000 f929 	bl	c0065e0 <__smakebuf_r>
 c00638e:	89a0      	ldrh	r0, [r4, #12]
 c006390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 c006394:	f010 0301 	ands.w	r3, r0, #1
 c006398:	d00a      	beq.n	c0063b0 <__swsetup_r+0xbc>
 c00639a:	2300      	movs	r3, #0
 c00639c:	60a3      	str	r3, [r4, #8]
 c00639e:	6963      	ldr	r3, [r4, #20]
 c0063a0:	425b      	negs	r3, r3
 c0063a2:	61a3      	str	r3, [r4, #24]
 c0063a4:	6923      	ldr	r3, [r4, #16]
 c0063a6:	b943      	cbnz	r3, c0063ba <__swsetup_r+0xc6>
 c0063a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 c0063ac:	d1ba      	bne.n	c006324 <__swsetup_r+0x30>
 c0063ae:	bd70      	pop	{r4, r5, r6, pc}
 c0063b0:	0781      	lsls	r1, r0, #30
 c0063b2:	bf58      	it	pl
 c0063b4:	6963      	ldrpl	r3, [r4, #20]
 c0063b6:	60a3      	str	r3, [r4, #8]
 c0063b8:	e7f4      	b.n	c0063a4 <__swsetup_r+0xb0>
 c0063ba:	2000      	movs	r0, #0
 c0063bc:	e7f7      	b.n	c0063ae <__swsetup_r+0xba>
 c0063be:	bf00      	nop
 c0063c0:	3000000c 	.word	0x3000000c
 c0063c4:	0c006934 	.word	0x0c006934
 c0063c8:	0c006954 	.word	0x0c006954
 c0063cc:	0c006914 	.word	0x0c006914

0c0063d0 <_close_r>:
 c0063d0:	b538      	push	{r3, r4, r5, lr}
 c0063d2:	2300      	movs	r3, #0
 c0063d4:	4d05      	ldr	r5, [pc, #20]	; (c0063ec <_close_r+0x1c>)
 c0063d6:	4604      	mov	r4, r0
 c0063d8:	4608      	mov	r0, r1
 c0063da:	602b      	str	r3, [r5, #0]
 c0063dc:	f7fa fe3d 	bl	c00105a <_close>
 c0063e0:	1c43      	adds	r3, r0, #1
 c0063e2:	d102      	bne.n	c0063ea <_close_r+0x1a>
 c0063e4:	682b      	ldr	r3, [r5, #0]
 c0063e6:	b103      	cbz	r3, c0063ea <_close_r+0x1a>
 c0063e8:	6023      	str	r3, [r4, #0]
 c0063ea:	bd38      	pop	{r3, r4, r5, pc}
 c0063ec:	300002b4 	.word	0x300002b4

0c0063f0 <__sflush_r>:
 c0063f0:	898a      	ldrh	r2, [r1, #12]
 c0063f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 c0063f6:	4605      	mov	r5, r0
 c0063f8:	0710      	lsls	r0, r2, #28
 c0063fa:	460c      	mov	r4, r1
 c0063fc:	d458      	bmi.n	c0064b0 <__sflush_r+0xc0>
 c0063fe:	684b      	ldr	r3, [r1, #4]
 c006400:	2b00      	cmp	r3, #0
 c006402:	dc05      	bgt.n	c006410 <__sflush_r+0x20>
 c006404:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 c006406:	2b00      	cmp	r3, #0
 c006408:	dc02      	bgt.n	c006410 <__sflush_r+0x20>
 c00640a:	2000      	movs	r0, #0
 c00640c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 c006410:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c006412:	2e00      	cmp	r6, #0
 c006414:	d0f9      	beq.n	c00640a <__sflush_r+0x1a>
 c006416:	2300      	movs	r3, #0
 c006418:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 c00641c:	682f      	ldr	r7, [r5, #0]
 c00641e:	602b      	str	r3, [r5, #0]
 c006420:	d032      	beq.n	c006488 <__sflush_r+0x98>
 c006422:	6d60      	ldr	r0, [r4, #84]	; 0x54
 c006424:	89a3      	ldrh	r3, [r4, #12]
 c006426:	075a      	lsls	r2, r3, #29
 c006428:	d505      	bpl.n	c006436 <__sflush_r+0x46>
 c00642a:	6863      	ldr	r3, [r4, #4]
 c00642c:	1ac0      	subs	r0, r0, r3
 c00642e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 c006430:	b10b      	cbz	r3, c006436 <__sflush_r+0x46>
 c006432:	6c23      	ldr	r3, [r4, #64]	; 0x40
 c006434:	1ac0      	subs	r0, r0, r3
 c006436:	2300      	movs	r3, #0
 c006438:	4602      	mov	r2, r0
 c00643a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 c00643c:	4628      	mov	r0, r5
 c00643e:	6a21      	ldr	r1, [r4, #32]
 c006440:	47b0      	blx	r6
 c006442:	1c43      	adds	r3, r0, #1
 c006444:	89a3      	ldrh	r3, [r4, #12]
 c006446:	d106      	bne.n	c006456 <__sflush_r+0x66>
 c006448:	6829      	ldr	r1, [r5, #0]
 c00644a:	291d      	cmp	r1, #29
 c00644c:	d82c      	bhi.n	c0064a8 <__sflush_r+0xb8>
 c00644e:	4a29      	ldr	r2, [pc, #164]	; (c0064f4 <__sflush_r+0x104>)
 c006450:	40ca      	lsrs	r2, r1
 c006452:	07d6      	lsls	r6, r2, #31
 c006454:	d528      	bpl.n	c0064a8 <__sflush_r+0xb8>
 c006456:	2200      	movs	r2, #0
 c006458:	04d9      	lsls	r1, r3, #19
 c00645a:	6062      	str	r2, [r4, #4]
 c00645c:	6922      	ldr	r2, [r4, #16]
 c00645e:	6022      	str	r2, [r4, #0]
 c006460:	d504      	bpl.n	c00646c <__sflush_r+0x7c>
 c006462:	1c42      	adds	r2, r0, #1
 c006464:	d101      	bne.n	c00646a <__sflush_r+0x7a>
 c006466:	682b      	ldr	r3, [r5, #0]
 c006468:	b903      	cbnz	r3, c00646c <__sflush_r+0x7c>
 c00646a:	6560      	str	r0, [r4, #84]	; 0x54
 c00646c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 c00646e:	602f      	str	r7, [r5, #0]
 c006470:	2900      	cmp	r1, #0
 c006472:	d0ca      	beq.n	c00640a <__sflush_r+0x1a>
 c006474:	f104 0344 	add.w	r3, r4, #68	; 0x44
 c006478:	4299      	cmp	r1, r3
 c00647a:	d002      	beq.n	c006482 <__sflush_r+0x92>
 c00647c:	4628      	mov	r0, r5
 c00647e:	f000 f909 	bl	c006694 <_free_r>
 c006482:	2000      	movs	r0, #0
 c006484:	6360      	str	r0, [r4, #52]	; 0x34
 c006486:	e7c1      	b.n	c00640c <__sflush_r+0x1c>
 c006488:	6a21      	ldr	r1, [r4, #32]
 c00648a:	2301      	movs	r3, #1
 c00648c:	4628      	mov	r0, r5
 c00648e:	47b0      	blx	r6
 c006490:	1c41      	adds	r1, r0, #1
 c006492:	d1c7      	bne.n	c006424 <__sflush_r+0x34>
 c006494:	682b      	ldr	r3, [r5, #0]
 c006496:	2b00      	cmp	r3, #0
 c006498:	d0c4      	beq.n	c006424 <__sflush_r+0x34>
 c00649a:	2b1d      	cmp	r3, #29
 c00649c:	d001      	beq.n	c0064a2 <__sflush_r+0xb2>
 c00649e:	2b16      	cmp	r3, #22
 c0064a0:	d101      	bne.n	c0064a6 <__sflush_r+0xb6>
 c0064a2:	602f      	str	r7, [r5, #0]
 c0064a4:	e7b1      	b.n	c00640a <__sflush_r+0x1a>
 c0064a6:	89a3      	ldrh	r3, [r4, #12]
 c0064a8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0064ac:	81a3      	strh	r3, [r4, #12]
 c0064ae:	e7ad      	b.n	c00640c <__sflush_r+0x1c>
 c0064b0:	690f      	ldr	r7, [r1, #16]
 c0064b2:	2f00      	cmp	r7, #0
 c0064b4:	d0a9      	beq.n	c00640a <__sflush_r+0x1a>
 c0064b6:	0793      	lsls	r3, r2, #30
 c0064b8:	680e      	ldr	r6, [r1, #0]
 c0064ba:	600f      	str	r7, [r1, #0]
 c0064bc:	bf0c      	ite	eq
 c0064be:	694b      	ldreq	r3, [r1, #20]
 c0064c0:	2300      	movne	r3, #0
 c0064c2:	eba6 0807 	sub.w	r8, r6, r7
 c0064c6:	608b      	str	r3, [r1, #8]
 c0064c8:	f1b8 0f00 	cmp.w	r8, #0
 c0064cc:	dd9d      	ble.n	c00640a <__sflush_r+0x1a>
 c0064ce:	4643      	mov	r3, r8
 c0064d0:	463a      	mov	r2, r7
 c0064d2:	6a21      	ldr	r1, [r4, #32]
 c0064d4:	4628      	mov	r0, r5
 c0064d6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 c0064d8:	47b0      	blx	r6
 c0064da:	2800      	cmp	r0, #0
 c0064dc:	dc06      	bgt.n	c0064ec <__sflush_r+0xfc>
 c0064de:	89a3      	ldrh	r3, [r4, #12]
 c0064e0:	f04f 30ff 	mov.w	r0, #4294967295
 c0064e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 c0064e8:	81a3      	strh	r3, [r4, #12]
 c0064ea:	e78f      	b.n	c00640c <__sflush_r+0x1c>
 c0064ec:	4407      	add	r7, r0
 c0064ee:	eba8 0800 	sub.w	r8, r8, r0
 c0064f2:	e7e9      	b.n	c0064c8 <__sflush_r+0xd8>
 c0064f4:	20400001 	.word	0x20400001

0c0064f8 <_fflush_r>:
 c0064f8:	b538      	push	{r3, r4, r5, lr}
 c0064fa:	690b      	ldr	r3, [r1, #16]
 c0064fc:	4605      	mov	r5, r0
 c0064fe:	460c      	mov	r4, r1
 c006500:	b913      	cbnz	r3, c006508 <_fflush_r+0x10>
 c006502:	2500      	movs	r5, #0
 c006504:	4628      	mov	r0, r5
 c006506:	bd38      	pop	{r3, r4, r5, pc}
 c006508:	b118      	cbz	r0, c006512 <_fflush_r+0x1a>
 c00650a:	6983      	ldr	r3, [r0, #24]
 c00650c:	b90b      	cbnz	r3, c006512 <_fflush_r+0x1a>
 c00650e:	f7ff fa15 	bl	c00593c <__sinit>
 c006512:	4b14      	ldr	r3, [pc, #80]	; (c006564 <_fflush_r+0x6c>)
 c006514:	429c      	cmp	r4, r3
 c006516:	d11b      	bne.n	c006550 <_fflush_r+0x58>
 c006518:	686c      	ldr	r4, [r5, #4]
 c00651a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c00651e:	2b00      	cmp	r3, #0
 c006520:	d0ef      	beq.n	c006502 <_fflush_r+0xa>
 c006522:	6e62      	ldr	r2, [r4, #100]	; 0x64
 c006524:	07d0      	lsls	r0, r2, #31
 c006526:	d404      	bmi.n	c006532 <_fflush_r+0x3a>
 c006528:	0599      	lsls	r1, r3, #22
 c00652a:	d402      	bmi.n	c006532 <_fflush_r+0x3a>
 c00652c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00652e:	f7ff faa3 	bl	c005a78 <__retarget_lock_acquire_recursive>
 c006532:	4628      	mov	r0, r5
 c006534:	4621      	mov	r1, r4
 c006536:	f7ff ff5b 	bl	c0063f0 <__sflush_r>
 c00653a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 c00653c:	4605      	mov	r5, r0
 c00653e:	07da      	lsls	r2, r3, #31
 c006540:	d4e0      	bmi.n	c006504 <_fflush_r+0xc>
 c006542:	89a3      	ldrh	r3, [r4, #12]
 c006544:	059b      	lsls	r3, r3, #22
 c006546:	d4dd      	bmi.n	c006504 <_fflush_r+0xc>
 c006548:	6da0      	ldr	r0, [r4, #88]	; 0x58
 c00654a:	f7ff fa96 	bl	c005a7a <__retarget_lock_release_recursive>
 c00654e:	e7d9      	b.n	c006504 <_fflush_r+0xc>
 c006550:	4b05      	ldr	r3, [pc, #20]	; (c006568 <_fflush_r+0x70>)
 c006552:	429c      	cmp	r4, r3
 c006554:	d101      	bne.n	c00655a <_fflush_r+0x62>
 c006556:	68ac      	ldr	r4, [r5, #8]
 c006558:	e7df      	b.n	c00651a <_fflush_r+0x22>
 c00655a:	4b04      	ldr	r3, [pc, #16]	; (c00656c <_fflush_r+0x74>)
 c00655c:	429c      	cmp	r4, r3
 c00655e:	bf08      	it	eq
 c006560:	68ec      	ldreq	r4, [r5, #12]
 c006562:	e7da      	b.n	c00651a <_fflush_r+0x22>
 c006564:	0c006934 	.word	0x0c006934
 c006568:	0c006954 	.word	0x0c006954
 c00656c:	0c006914 	.word	0x0c006914

0c006570 <_lseek_r>:
 c006570:	b538      	push	{r3, r4, r5, lr}
 c006572:	4604      	mov	r4, r0
 c006574:	4d06      	ldr	r5, [pc, #24]	; (c006590 <_lseek_r+0x20>)
 c006576:	4608      	mov	r0, r1
 c006578:	4611      	mov	r1, r2
 c00657a:	2200      	movs	r2, #0
 c00657c:	602a      	str	r2, [r5, #0]
 c00657e:	461a      	mov	r2, r3
 c006580:	f7fa fd92 	bl	c0010a8 <_lseek>
 c006584:	1c43      	adds	r3, r0, #1
 c006586:	d102      	bne.n	c00658e <_lseek_r+0x1e>
 c006588:	682b      	ldr	r3, [r5, #0]
 c00658a:	b103      	cbz	r3, c00658e <_lseek_r+0x1e>
 c00658c:	6023      	str	r3, [r4, #0]
 c00658e:	bd38      	pop	{r3, r4, r5, pc}
 c006590:	300002b4 	.word	0x300002b4

0c006594 <__swhatbuf_r>:
 c006594:	b570      	push	{r4, r5, r6, lr}
 c006596:	460e      	mov	r6, r1
 c006598:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 c00659c:	b096      	sub	sp, #88	; 0x58
 c00659e:	4614      	mov	r4, r2
 c0065a0:	2900      	cmp	r1, #0
 c0065a2:	461d      	mov	r5, r3
 c0065a4:	da08      	bge.n	c0065b8 <__swhatbuf_r+0x24>
 c0065a6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 c0065aa:	2200      	movs	r2, #0
 c0065ac:	602a      	str	r2, [r5, #0]
 c0065ae:	061a      	lsls	r2, r3, #24
 c0065b0:	d410      	bmi.n	c0065d4 <__swhatbuf_r+0x40>
 c0065b2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 c0065b6:	e00e      	b.n	c0065d6 <__swhatbuf_r+0x42>
 c0065b8:	466a      	mov	r2, sp
 c0065ba:	f000 f8c9 	bl	c006750 <_fstat_r>
 c0065be:	2800      	cmp	r0, #0
 c0065c0:	dbf1      	blt.n	c0065a6 <__swhatbuf_r+0x12>
 c0065c2:	9a01      	ldr	r2, [sp, #4]
 c0065c4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 c0065c8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 c0065cc:	425a      	negs	r2, r3
 c0065ce:	415a      	adcs	r2, r3
 c0065d0:	602a      	str	r2, [r5, #0]
 c0065d2:	e7ee      	b.n	c0065b2 <__swhatbuf_r+0x1e>
 c0065d4:	2340      	movs	r3, #64	; 0x40
 c0065d6:	2000      	movs	r0, #0
 c0065d8:	6023      	str	r3, [r4, #0]
 c0065da:	b016      	add	sp, #88	; 0x58
 c0065dc:	bd70      	pop	{r4, r5, r6, pc}
	...

0c0065e0 <__smakebuf_r>:
 c0065e0:	898b      	ldrh	r3, [r1, #12]
 c0065e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 c0065e4:	079d      	lsls	r5, r3, #30
 c0065e6:	4606      	mov	r6, r0
 c0065e8:	460c      	mov	r4, r1
 c0065ea:	d507      	bpl.n	c0065fc <__smakebuf_r+0x1c>
 c0065ec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 c0065f0:	6023      	str	r3, [r4, #0]
 c0065f2:	6123      	str	r3, [r4, #16]
 c0065f4:	2301      	movs	r3, #1
 c0065f6:	6163      	str	r3, [r4, #20]
 c0065f8:	b002      	add	sp, #8
 c0065fa:	bd70      	pop	{r4, r5, r6, pc}
 c0065fc:	ab01      	add	r3, sp, #4
 c0065fe:	466a      	mov	r2, sp
 c006600:	f7ff ffc8 	bl	c006594 <__swhatbuf_r>
 c006604:	9900      	ldr	r1, [sp, #0]
 c006606:	4605      	mov	r5, r0
 c006608:	4630      	mov	r0, r6
 c00660a:	f7ff fa57 	bl	c005abc <_malloc_r>
 c00660e:	b948      	cbnz	r0, c006624 <__smakebuf_r+0x44>
 c006610:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 c006614:	059a      	lsls	r2, r3, #22
 c006616:	d4ef      	bmi.n	c0065f8 <__smakebuf_r+0x18>
 c006618:	f023 0303 	bic.w	r3, r3, #3
 c00661c:	f043 0302 	orr.w	r3, r3, #2
 c006620:	81a3      	strh	r3, [r4, #12]
 c006622:	e7e3      	b.n	c0065ec <__smakebuf_r+0xc>
 c006624:	4b0d      	ldr	r3, [pc, #52]	; (c00665c <__smakebuf_r+0x7c>)
 c006626:	62b3      	str	r3, [r6, #40]	; 0x28
 c006628:	89a3      	ldrh	r3, [r4, #12]
 c00662a:	6020      	str	r0, [r4, #0]
 c00662c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 c006630:	6120      	str	r0, [r4, #16]
 c006632:	81a3      	strh	r3, [r4, #12]
 c006634:	9b00      	ldr	r3, [sp, #0]
 c006636:	6163      	str	r3, [r4, #20]
 c006638:	9b01      	ldr	r3, [sp, #4]
 c00663a:	b15b      	cbz	r3, c006654 <__smakebuf_r+0x74>
 c00663c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 c006640:	4630      	mov	r0, r6
 c006642:	f000 f897 	bl	c006774 <_isatty_r>
 c006646:	b128      	cbz	r0, c006654 <__smakebuf_r+0x74>
 c006648:	89a3      	ldrh	r3, [r4, #12]
 c00664a:	f023 0303 	bic.w	r3, r3, #3
 c00664e:	f043 0301 	orr.w	r3, r3, #1
 c006652:	81a3      	strh	r3, [r4, #12]
 c006654:	89a0      	ldrh	r0, [r4, #12]
 c006656:	4305      	orrs	r5, r0
 c006658:	81a5      	strh	r5, [r4, #12]
 c00665a:	e7cd      	b.n	c0065f8 <__smakebuf_r+0x18>
 c00665c:	0c0058d5 	.word	0x0c0058d5

0c006660 <memchr>:
 c006660:	b2c9      	uxtb	r1, r1
 c006662:	4402      	add	r2, r0
 c006664:	b510      	push	{r4, lr}
 c006666:	4290      	cmp	r0, r2
 c006668:	4603      	mov	r3, r0
 c00666a:	d101      	bne.n	c006670 <memchr+0x10>
 c00666c:	2300      	movs	r3, #0
 c00666e:	e003      	b.n	c006678 <memchr+0x18>
 c006670:	781c      	ldrb	r4, [r3, #0]
 c006672:	3001      	adds	r0, #1
 c006674:	428c      	cmp	r4, r1
 c006676:	d1f6      	bne.n	c006666 <memchr+0x6>
 c006678:	4618      	mov	r0, r3
 c00667a:	bd10      	pop	{r4, pc}

0c00667c <__malloc_lock>:
 c00667c:	4801      	ldr	r0, [pc, #4]	; (c006684 <__malloc_lock+0x8>)
 c00667e:	f7ff b9fb 	b.w	c005a78 <__retarget_lock_acquire_recursive>
 c006682:	bf00      	nop
 c006684:	300002a8 	.word	0x300002a8

0c006688 <__malloc_unlock>:
 c006688:	4801      	ldr	r0, [pc, #4]	; (c006690 <__malloc_unlock+0x8>)
 c00668a:	f7ff b9f6 	b.w	c005a7a <__retarget_lock_release_recursive>
 c00668e:	bf00      	nop
 c006690:	300002a8 	.word	0x300002a8

0c006694 <_free_r>:
 c006694:	b537      	push	{r0, r1, r2, r4, r5, lr}
 c006696:	2900      	cmp	r1, #0
 c006698:	d043      	beq.n	c006722 <_free_r+0x8e>
 c00669a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 c00669e:	1f0c      	subs	r4, r1, #4
 c0066a0:	9001      	str	r0, [sp, #4]
 c0066a2:	2b00      	cmp	r3, #0
 c0066a4:	bfb8      	it	lt
 c0066a6:	18e4      	addlt	r4, r4, r3
 c0066a8:	f7ff ffe8 	bl	c00667c <__malloc_lock>
 c0066ac:	4a1e      	ldr	r2, [pc, #120]	; (c006728 <_free_r+0x94>)
 c0066ae:	9801      	ldr	r0, [sp, #4]
 c0066b0:	6813      	ldr	r3, [r2, #0]
 c0066b2:	b933      	cbnz	r3, c0066c2 <_free_r+0x2e>
 c0066b4:	6063      	str	r3, [r4, #4]
 c0066b6:	6014      	str	r4, [r2, #0]
 c0066b8:	b003      	add	sp, #12
 c0066ba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 c0066be:	f7ff bfe3 	b.w	c006688 <__malloc_unlock>
 c0066c2:	42a3      	cmp	r3, r4
 c0066c4:	d908      	bls.n	c0066d8 <_free_r+0x44>
 c0066c6:	6825      	ldr	r5, [r4, #0]
 c0066c8:	1961      	adds	r1, r4, r5
 c0066ca:	428b      	cmp	r3, r1
 c0066cc:	bf01      	itttt	eq
 c0066ce:	6819      	ldreq	r1, [r3, #0]
 c0066d0:	685b      	ldreq	r3, [r3, #4]
 c0066d2:	1949      	addeq	r1, r1, r5
 c0066d4:	6021      	streq	r1, [r4, #0]
 c0066d6:	e7ed      	b.n	c0066b4 <_free_r+0x20>
 c0066d8:	461a      	mov	r2, r3
 c0066da:	685b      	ldr	r3, [r3, #4]
 c0066dc:	b10b      	cbz	r3, c0066e2 <_free_r+0x4e>
 c0066de:	42a3      	cmp	r3, r4
 c0066e0:	d9fa      	bls.n	c0066d8 <_free_r+0x44>
 c0066e2:	6811      	ldr	r1, [r2, #0]
 c0066e4:	1855      	adds	r5, r2, r1
 c0066e6:	42a5      	cmp	r5, r4
 c0066e8:	d10b      	bne.n	c006702 <_free_r+0x6e>
 c0066ea:	6824      	ldr	r4, [r4, #0]
 c0066ec:	4421      	add	r1, r4
 c0066ee:	1854      	adds	r4, r2, r1
 c0066f0:	6011      	str	r1, [r2, #0]
 c0066f2:	42a3      	cmp	r3, r4
 c0066f4:	d1e0      	bne.n	c0066b8 <_free_r+0x24>
 c0066f6:	681c      	ldr	r4, [r3, #0]
 c0066f8:	685b      	ldr	r3, [r3, #4]
 c0066fa:	4421      	add	r1, r4
 c0066fc:	6053      	str	r3, [r2, #4]
 c0066fe:	6011      	str	r1, [r2, #0]
 c006700:	e7da      	b.n	c0066b8 <_free_r+0x24>
 c006702:	d902      	bls.n	c00670a <_free_r+0x76>
 c006704:	230c      	movs	r3, #12
 c006706:	6003      	str	r3, [r0, #0]
 c006708:	e7d6      	b.n	c0066b8 <_free_r+0x24>
 c00670a:	6825      	ldr	r5, [r4, #0]
 c00670c:	1961      	adds	r1, r4, r5
 c00670e:	428b      	cmp	r3, r1
 c006710:	bf02      	ittt	eq
 c006712:	6819      	ldreq	r1, [r3, #0]
 c006714:	685b      	ldreq	r3, [r3, #4]
 c006716:	1949      	addeq	r1, r1, r5
 c006718:	6063      	str	r3, [r4, #4]
 c00671a:	bf08      	it	eq
 c00671c:	6021      	streq	r1, [r4, #0]
 c00671e:	6054      	str	r4, [r2, #4]
 c006720:	e7ca      	b.n	c0066b8 <_free_r+0x24>
 c006722:	b003      	add	sp, #12
 c006724:	bd30      	pop	{r4, r5, pc}
 c006726:	bf00      	nop
 c006728:	300002ac 	.word	0x300002ac

0c00672c <_read_r>:
 c00672c:	b538      	push	{r3, r4, r5, lr}
 c00672e:	4604      	mov	r4, r0
 c006730:	4d06      	ldr	r5, [pc, #24]	; (c00674c <_read_r+0x20>)
 c006732:	4608      	mov	r0, r1
 c006734:	4611      	mov	r1, r2
 c006736:	2200      	movs	r2, #0
 c006738:	602a      	str	r2, [r5, #0]
 c00673a:	461a      	mov	r2, r3
 c00673c:	f7fa fc54 	bl	c000fe8 <_read>
 c006740:	1c43      	adds	r3, r0, #1
 c006742:	d102      	bne.n	c00674a <_read_r+0x1e>
 c006744:	682b      	ldr	r3, [r5, #0]
 c006746:	b103      	cbz	r3, c00674a <_read_r+0x1e>
 c006748:	6023      	str	r3, [r4, #0]
 c00674a:	bd38      	pop	{r3, r4, r5, pc}
 c00674c:	300002b4 	.word	0x300002b4

0c006750 <_fstat_r>:
 c006750:	b538      	push	{r3, r4, r5, lr}
 c006752:	2300      	movs	r3, #0
 c006754:	4d06      	ldr	r5, [pc, #24]	; (c006770 <_fstat_r+0x20>)
 c006756:	4604      	mov	r4, r0
 c006758:	4608      	mov	r0, r1
 c00675a:	4611      	mov	r1, r2
 c00675c:	602b      	str	r3, [r5, #0]
 c00675e:	f7fa fc88 	bl	c001072 <_fstat>
 c006762:	1c43      	adds	r3, r0, #1
 c006764:	d102      	bne.n	c00676c <_fstat_r+0x1c>
 c006766:	682b      	ldr	r3, [r5, #0]
 c006768:	b103      	cbz	r3, c00676c <_fstat_r+0x1c>
 c00676a:	6023      	str	r3, [r4, #0]
 c00676c:	bd38      	pop	{r3, r4, r5, pc}
 c00676e:	bf00      	nop
 c006770:	300002b4 	.word	0x300002b4

0c006774 <_isatty_r>:
 c006774:	b538      	push	{r3, r4, r5, lr}
 c006776:	2300      	movs	r3, #0
 c006778:	4d05      	ldr	r5, [pc, #20]	; (c006790 <_isatty_r+0x1c>)
 c00677a:	4604      	mov	r4, r0
 c00677c:	4608      	mov	r0, r1
 c00677e:	602b      	str	r3, [r5, #0]
 c006780:	f7fa fc87 	bl	c001092 <_isatty>
 c006784:	1c43      	adds	r3, r0, #1
 c006786:	d102      	bne.n	c00678e <_isatty_r+0x1a>
 c006788:	682b      	ldr	r3, [r5, #0]
 c00678a:	b103      	cbz	r3, c00678e <_isatty_r+0x1a>
 c00678c:	6023      	str	r3, [r4, #0]
 c00678e:	bd38      	pop	{r3, r4, r5, pc}
 c006790:	300002b4 	.word	0x300002b4

0c006794 <_init>:
 c006794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c006796:	bf00      	nop
 c006798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c00679a:	bc08      	pop	{r3}
 c00679c:	469e      	mov	lr, r3
 c00679e:	4770      	bx	lr

0c0067a0 <_fini>:
 c0067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 c0067a2:	bf00      	nop
 c0067a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 c0067a6:	bc08      	pop	{r3}
 c0067a8:	469e      	mov	lr, r3
 c0067aa:	4770      	bx	lr

Disassembly of section .gnu.sgstubs:

0c03e000 <SECURE_SystemCoreClockUpdate>:
 c03e000:	e97f e97f 	sg
 c03e004:	f7c3 b9da 	b.w	c0013bc <__acle_se_SECURE_SystemCoreClockUpdate>

0c03e008 <SECURE_RegisterCallback>:
 c03e008:	e97f e97f 	sg
 c03e00c:	f7c2 bd9a 	b.w	c000b44 <__acle_se_SECURE_RegisterCallback>
	...
